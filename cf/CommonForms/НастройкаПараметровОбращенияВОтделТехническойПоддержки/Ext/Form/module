
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура управляет видимостью страниц панели
//
Процедура УстановитьВидимостьСтраниц()
	
	ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	
	ЭлементыФормы.ПараметрыКомпьютеров.Страницы.ФайлСервер.Видимость        = (ОсновныеДанные_ВариантИБПредприятия = "Файл-сервер");
	ЭлементыФормы.ПараметрыКомпьютеров.Страницы.SQLСервер.Видимость         = (ОсновныеДанные_ВариантИБПредприятия = "Клиент-сервер");
	ЭлементыФормы.ПараметрыКомпьютеров.Страницы.СерверПредприятия.Видимость = (ОсновныеДанные_ВариантИБПредприятия = "Клиент-сервер");

	ЭлементыФормы.ОсновнаяПанель.Страницы.РаспределенныеБД.Видимость        = ОсновныеДанные_НаличиеРаспределенныхИБ;
	ЭлементыФормы.ПараметрыКомпьютеров.Страницы.ТерминалСервер.Видимость    = ОсновныеДанные_НаличиеТерминальногоДоступа;
	ЭлементыФормы.ПараметрыКомпьютеров.Страницы.WebРасширение.Видимость     = ОсновныеДанные_НаличиеВебРасширения;

	ТекущаяСтраницаПараметров = ЭлементыФормы.ПараметрыКомпьютеров.ТекущаяСтраница;
	
	НашлиВидимуюСтраницу = ТекущаяСтраницаПараметров.Видимость;
	
	Если НЕ ТекущаяСтраницаПараметров.Видимость Тогда
		Для каждого СтраницаПараметров Из ЭлементыФормы.ПараметрыКомпьютеров.Страницы Цикл
			Если СтраницаПараметров.Видимость Тогда
				ЭлементыФормы.ПараметрыКомпьютеров.ТекущаяСтраница = СтраницаПараметров;
				НашлиВидимуюСтраницу = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЭлементыФормы.ПараметрыКомпьютеров.Видимость <> НашлиВидимуюСтраницу Тогда
		ЭлементыФормы.ПараметрыКомпьютеров.Видимость = НашлиВидимуюСтраницу;
	КонецЕсли;
	
	Если 	ТекущаяСтраницаОсновнойПанели <> ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ТекущаяСтраницаОсновнойПанели;
	КонецЕсли;

КонецПроцедуры

// Процедура  производит заполнение данными из константы
// 
Процедура ЗаполнитьЗначенияРеквизитовФормы()

	СтруктураДанных = Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить();

	Если ТипЗнч(СтруктураДанных) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаРаздела Из СтруктураДанных Цикл
		Для каждого ЭлементЗначения Из СтрокаРаздела.ДанныеРаздела Цикл
			Попытка
				ЭтаФорма[ЭлементЗначения.Ключ] = ЭлементЗначения.Значение[1];
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Функция записывает измененные данные в базу
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  Булево, записана корректно или нет
//
Функция ЗаписатьДанные()

	СтруктураДанных = Новый Структура;

	ОбщегоНазначения.ЗаполнитьСтруктуруДанныхНастройкиОбращенияВОтделТехподдержкиПоУмолчанию(СтруктураДанных, ЭтаФорма);

	Попытка

		Для каждого СтрокаРаздела Из СтруктураДанных Цикл

			Для каждого ЭлементЗначения Из СтрокаРаздела.ДанныеРаздела Цикл

				ЭлементЗначения.Значение[1] = ЭтаФорма[ЭлементЗначения.Ключ];
				ПозицияРазделителяРаздела = Найти(ЭлементЗначения.Ключ, "_");

				Если ПозицияРазделителяРаздела > 0 Тогда
					ИмяРаздела = Сред(ЭлементЗначения.Ключ, 1, (ПозицияРазделителяРаздела - 1));
					Если (ИмяРаздела = "Внедрение") ИЛИ (ИмяРаздела = "РаспределенныеБД") Тогда
						Если НЕ ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяРаздела].Видимость Тогда
							ЭлементЗначения.Значение[1]    = "";
							ЭтаФорма[ЭлементЗначения.Ключ] = "";
						КонецЕсли;
						
					ИначеЕсли (ИмяРаздела = "ФайлСервер") ИЛИ (ИмяРаздела = "SQLСервер") ИЛИ (ИмяРаздела = "СерверПредприятия") ИЛИ (ИмяРаздела = "ТерминалСервер") ИЛИ (ИмяРаздела = "WebРасширение") Тогда
						Если НЕ ЭлементыФормы.ПараметрыКомпьютеров.Страницы[ИмяРаздела].Видимость Тогда
							ЭлементЗначения.Значение[1]    = "";
							ЭтаФорма[ЭлементЗначения.Ключ] = "";
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

	Исключение

		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Данные не сохранены");
		Возврат Ложь;

	КонецПопытки;

	Если НЕ ОбщегоНазначения.ПроверитьСтруктуруЗаполненияПараметровДляОтправкиСообщенияВОтделТехническойПоддержки(СтруктураДанных) Тогда
		ОтветНеВопрос = Вопрос("Есть незаполненные поля, обязательные для заполнения! Продолжить?", РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.ОК);
		Если ОтветНеВопрос <> КодВозвратаДиалога.ОК Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Попытка
		Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Установить(Новый ХранилищеЗначения(СтруктураДанных, Новый СжатиеДанных));
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Данные не сохранены");
		Возврат Ложь;
	КонецПопытки;

	Модифицированность = Ложь;
	
	Оповестить("ИзмененыНастройкиПараметровОбращенияВОтделТехПоддержки");

	Возврат Истина;

КонецФункции

// Процедура проверяет доступность элементов формы связанных с параметрами аутентификации SMTP
Процедура ПроверитьДоступностьПараметровАутентификации()
	
	ЭлементыФормы.НадписьПараметрыОтправкиЭлектронногоСообщения_Логин.Доступность  = ПараметрыОтправкиЭлектронногоСообщения_НеобходимаАутентификацияSMTP;
	ЭлементыФормы.ПараметрыОтправкиЭлектронногоСообщения_Логин.Доступность         = ПараметрыОтправкиЭлектронногоСообщения_НеобходимаАутентификацияSMTP;
	ЭлементыФормы.НадписьПараметрыОтправкиЭлектронногоСообщения_Пароль.Доступность = ПараметрыОтправкиЭлектронногоСообщения_НеобходимаАутентификацияSMTP;
	ЭлементыФормы.ПараметрыОтправкиЭлектронногоСообщения_Пароль.Доступность        = ПараметрыОтправкиЭлектронногоСообщения_НеобходимаАутентификацияSMTP;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ЗаполнитьЗначенияРеквизитовФормы();
	УстановитьВидимостьСтраниц();
	ПроверитьДоступностьПараметровАутентификации();

КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность Тогда

		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);

		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;

		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда

			Если НЕ ЗаписатьДанные() Тогда
				Отказ = Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" элемента формы ОсновныеДанные_НаличиеРаспределенныхИБ.
//
Процедура ОсновныеДанные_НаличиеРаспределенныхИБПриИзменении(Элемент)

	УстановитьВидимостьСтраниц();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы ОсновныеДанные_НаличиеТерминальногоДоступа.
//
Процедура ОсновныеДанные_НаличиеТерминальногоДоступаПриИзменении(Элемент)

	УстановитьВидимостьСтраниц();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы ОсновныеДанные_НаличиеВебРасширения.
//
Процедура ОсновныеДанные_НаличиеВебРасширенияПриИзменении(Элемент)

	УстановитьВидимостьСтраниц();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы ОсновныеДанные_ВариантИБПредприятия.
//
Процедура ОсновныеДанные_ВариантИБПредприятияПриИзменении(Элемент)

	УстановитьВидимостьСтраниц();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы Владелец_Организация.
//
Процедура Владелец_ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Справочники.Организации.ПолучитьФормуВыбора(, Элемент).Открыть();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы ПараметрыОтправкиЭлектронногоСообщения_НеобходимаАутентификацияSMTP.
//
Процедура ПараметрыОтправкиЭлектронногоСообщения_НеобходимаАутентификацияSMTPПриИзменении(Элемент)
	ПроверитьДоступностьПараметровАутентификации();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ВЛОЖЕНИЙ ПИСЬМА

// Процедура - обработчик события "Нажатие" элемента формы ОсновныеДействияФормы.ОК.
//
Процедура ОсновныеДействияФормыОК(Кнопка)

	Если ЗаписатьДанные() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы ОсновныеДействияФормы.Печать.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)

	Если Модифицированность Тогда

		Ответ = Вопрос("Данные будут сохранены! Продолжить?", РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.ОК);
		Если НЕ (Ответ = КодВозвратаДиалога.ОК) Тогда
			Возврат;
		КонецЕсли;

		Если НЕ ЗаписатьДанные() Тогда
			Возврат;
		КонецЕсли; 

	КонецЕсли;

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ОбщегоНазначения.ПолучитьТекстСообщенияВОтделТехническойПоддержки());
	ТекстовыйДокумент.Показать("Значения для отправки в отдел технической поддержки");

КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы ОсновныеДействияФормы.НаписатьСообщение.
//
Процедура ОсновныеДействияФормыНаписатьСообщение(Кнопка)

	РаботаСДиалогами.ОтправитьСообщениеВОтделТехническойПоддержки();

КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы ОсновныеДействияФормы.Записать.
//
Процедура ОсновныеДействияФормыЗаписать(Кнопка)

	ЗаписатьДанные();

КонецПроцедуры


ЭлементыФормы.ОсновныеДанные_ВариантИспользованияКонфигурации.СписокВыбора.Добавить("Типовая конфигурация используется без изменения");
ЭлементыФормы.ОсновныеДанные_ВариантИспользованияКонфигурации.СписокВыбора.Добавить("Типовая конфигурация находится на поддержке с возможностью внесения изменений");
ЭлементыФормы.ОсновныеДанные_ВариантИспользованияКонфигурации.СписокВыбора.Добавить("Типовая конфигурация снята с поддержки");
ЭлементыФормы.ОсновныеДанные_ВариантИспользованияКонфигурации.СписокВыбора.Добавить("Типовая конфигурация с мелкими доработками");
ЭлементыФормы.ОсновныеДанные_ВариантИспользованияКонфигурации.СписокВыбора.Добавить("Типовая конфигурация с существенными доработками");
ЭлементыФормы.ОсновныеДанные_ВариантИспользованияКонфигурации.СписокВыбора.Добавить("Уникальная конфигурация");

ЭлементыФормы.РаспределенныеБД_ЧастотаОбменаДанными.СписокВыбора.Добавить("Несколько раз в день");
ЭлементыФормы.РаспределенныеБД_ЧастотаОбменаДанными.СписокВыбора.Добавить("Ежедневно");
ЭлементыФормы.РаспределенныеБД_ЧастотаОбменаДанными.СписокВыбора.Добавить("Через день");
ЭлементыФормы.РаспределенныеБД_ЧастотаОбменаДанными.СписокВыбора.Добавить("Несколько раз в неделю");
ЭлементыФормы.РаспределенныеБД_ЧастотаОбменаДанными.СписокВыбора.Добавить("Один раз в неделю");
ЭлементыФормы.РаспределенныеБД_ЧастотаОбменаДанными.СписокВыбора.Добавить("Реже одного раза в неделю");

ЭлементыФормы.РаспределенныеБД_СпособПередачиДанных.СписокВыбора.Добавить("Через FTP");
ЭлементыФормы.РаспределенныеБД_СпособПередачиДанных.СписокВыбора.Добавить("По электронной почте");
ЭлементыФормы.РаспределенныеБД_СпособПередачиДанных.СписокВыбора.Добавить("Магнитные или прочие носители");

ЭлементыФормы.ФайлСервер_ОперационнаяСистема.СписокВыбора.Добавить("Microsoft Windows NT Server");
ЭлементыФормы.ФайлСервер_ОперационнаяСистема.СписокВыбора.Добавить("Microsoft Windows 2000 Server");
ЭлементыФормы.ФайлСервер_ОперационнаяСистема.СписокВыбора.Добавить("Microsoft Windows 2003 Server");

ЭлементыФормы.ФайлСервер_СетеваяКарта.СписокВыбора.Добавить("10 Mb/s");
ЭлементыФормы.ФайлСервер_СетеваяКарта.СписокВыбора.Добавить("100 Mb/s");
ЭлементыФормы.ФайлСервер_СетеваяКарта.СписокВыбора.Добавить("Более 100 Mb/s");

ЭлементыФормы.SQLСервер_ОперационнаяСистема.СписокВыбора.Добавить("Microsoft Windows NT Server");
ЭлементыФормы.SQLСервер_ОперационнаяСистема.СписокВыбора.Добавить("Microsoft Windows 2000 Server");
ЭлементыФормы.SQLСервер_ОперационнаяСистема.СписокВыбора.Добавить("Microsoft Windows 2003 Server");

ЭлементыФормы.SQLСервер_СетеваяКарта.СписокВыбора.Добавить("10 Mb/s");
ЭлементыФормы.SQLСервер_СетеваяКарта.СписокВыбора.Добавить("100 Mb/s");
ЭлементыФормы.SQLСервер_СетеваяКарта.СписокВыбора.Добавить("Более 100 Mb/s");

ЭлементыФормы.СерверПредприятия_ОперационнаяСистема.СписокВыбора.Добавить("Microsoft Windows NT Server");
ЭлементыФормы.СерверПредприятия_ОперационнаяСистема.СписокВыбора.Добавить("Microsoft Windows 2000 Server");
ЭлементыФормы.СерверПредприятия_ОперационнаяСистема.СписокВыбора.Добавить("Microsoft Windows 2003 Server");

ЭлементыФормы.СерверПредприятия_СетеваяКарта.СписокВыбора.Добавить("10 Mb/s");
ЭлементыФормы.СерверПредприятия_СетеваяКарта.СписокВыбора.Добавить("100 Mb/s");
ЭлементыФормы.СерверПредприятия_СетеваяКарта.СписокВыбора.Добавить("Более 100 Mb/s");

ЭлементыФормы.ТерминалСервер_ОперационнаяСистема.СписокВыбора.Добавить("Microsoft Windows NT TSE");
ЭлементыФормы.ТерминалСервер_ОперационнаяСистема.СписокВыбора.Добавить("Microsoft Windows 2000 Server");
ЭлементыФормы.ТерминалСервер_ОперационнаяСистема.СписокВыбора.Добавить("Microsoft Windows 2003 Server");

ЭлементыФормы.ТерминалСервер_СетеваяКарта.СписокВыбора.Добавить("10 Mb/s");
ЭлементыФормы.ТерминалСервер_СетеваяКарта.СписокВыбора.Добавить("100 Mb/s");
ЭлементыФормы.ТерминалСервер_СетеваяКарта.СписокВыбора.Добавить("Более 100 Mb/s");

ЭлементыФормы.WebРасширение_ОперационнаяСистема.СписокВыбора.Добавить("Microsoft Windows 98");
ЭлементыФормы.WebРасширение_ОперационнаяСистема.СписокВыбора.Добавить("Microsoft Windows XP");
ЭлементыФормы.WebРасширение_ОперационнаяСистема.СписокВыбора.Добавить("Microsoft Windows NT");
ЭлементыФормы.WebРасширение_ОперационнаяСистема.СписокВыбора.Добавить("Microsoft Windows 2000");

ЭлементыФормы.WebРасширение_СетеваяКарта.СписокВыбора.Добавить("10 Mb/s");
ЭлементыФормы.WebРасширение_СетеваяКарта.СписокВыбора.Добавить("100 Mb/s");
ЭлементыФормы.WebРасширение_СетеваяКарта.СписокВыбора.Добавить("Более 100 Mb/s");

ЭлементыФормы.Внедрение_ИсполнительВнедрения.СписокВыбора.Добавить("Партнер");
ЭлементыФормы.Внедрение_ИсполнительВнедрения.СписокВыбора.Добавить("Самостоятельно");
ЭлементыФормы.Внедрение_ИсполнительВнедрения.СписокВыбора.Добавить("Совместно с партнером");
ЭлементыФормы.Внедрение_ИсполнительВнедрения.СписокВыбора.Добавить("Без внедрения");
