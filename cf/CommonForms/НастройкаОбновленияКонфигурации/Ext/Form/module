
////////////////////////////////////////////////////
// Вспомогательные процедуры и функции
////////////////////////////////////////////////////

// Процедура заполняет список доступных для выбора администраторов ИБ
//
Процедура ЗаполнитьСписокАдминистраторовИБ()

	Пользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для а = 0 По Пользователи.ВГраница() Цикл
		Если ПравоДоступа("Администрирование", Метаданные, Пользователи[а]) Тогда
			ЭлементыФормы.ИмяАдминистратораИБ.СписокВыбора.Добавить(Пользователи[а].Имя);
		КонецЕсли;
	КонецЦикла; 
	
	ЭлементыФормы.ИмяАдминистратораИБ.СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);

КонецПроцедуры

// Процедура обновляет представление расписания обновления конфигурации ИБ
//
Процедура ОбновитьПредставлениеРасписания()

	ЭлементыФормы.ТекстРасписания.Значение = "Выполнять: " + Строка(РегламентноеЗадание.Расписание);

КонецПроцедуры

// Процедура регулирует доступность кнопок изменения файла конфигурации
//
Процедура ДоступностьВыбораФайла()

	ЭлементыФормы.ОткрытьФайл.Доступность   = ИспользоватьРегламентноеОбновлениеИБ;
	ЭлементыФормы.УдалитьФайл.Доступность   = ИспользоватьРегламентноеОбновлениеИБ;
	ЭлементыФормы.СохранитьФайл.Доступность = ИспользоватьРегламентноеОбновлениеИБ;

КонецПроцедуры

// Процедура Записывает информацию в БД
//
Функция ЗаписатьДанные()

	НачатьТранзакцию();
	
	// Запишем файл обновления конфигурации
	СохраняемаяСтруктура = Неопределено;
	Если ТипЗнч(ФайлЗагружаемойКонфигурации) = Тип("ХранилищеЗначения") Тогда
		// Добавлен новый файл
		СохраняемаяСтруктура = Новый Структура;
		СохраняемаяСтруктура.Вставить("Файл", ФайлЗагружаемойКонфигурации);
		СохраняемаяСтруктура.Вставить("ОписаниеФайла", ОписаниеФайлаЗагружаемойКонфигурации);
	ИначеЕсли ФайлЗагружаемойКонфигурации = "" Тогда
		// Удалили файл
		СохраняемаяСтруктура = Новый Структура;
		СохраняемаяСтруктура.Вставить("Файл", Новый ХранилищеЗначения(""));
		СохраняемаяСтруктура.Вставить("ОписаниеФайла", ОписаниеФайлаЗагружаемойКонфигурации);
	КонецЕсли;
	
	Если ТипЗнч(СохраняемаяСтруктура) = Тип("Структура") Тогда
		Попытка
			Константы.ФайлКонфигурацииДляОбновления.Установить(СохраняемаяСтруктура.Файл);
			Константы.ОписаниеФайлаКонфигурацииДляОбновления.Установить(ОписаниеФайлаЗагружаемойКонфигурации);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли; 

	// Запишем настройки обновления конфигурации
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ЗагружатьИзмененнуюКонфигурацию", ЗагружатьИзмененнуюКонфигурацию);
	СтруктураДанных.Вставить("ОбновлятьКонфигурациюИБ", ОбновлятьКонфигурациюИБ);
	СтруктураДанных.Вставить("ИмяАдминистратораИБ", ИмяАдминистратораИБ);
	СтруктураДанных.Вставить("ИмяАдминистратораКластера", ИмяАдминистратораКластера);
	СтруктураДанных.Вставить("ПараметрБлокировкиИБ", ПараметрБлокировкиИБ);
	СтруктураДанных.Вставить("ПарольАдминистратораКластера", ПарольАдминистратораКластера);
	СтруктураДанных.Вставить("СообщениеОБлокировкеИБ", СообщениеОБлокировкеИБ);
	СтруктураДанных.Вставить("ИсполняемыйФайлКлиентаНаСервере", ИсполняемыйФайлКлиентаНаСервере);

	Попытка
		Константы.НастройкаОбновленияКонфигурации.Установить(Новый ХранилищеЗначения(СтруктураДанных));
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	// Запишем регл.задание
	Попытка
		РегламентноеЗадание.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	Модифицированность = Ложь;
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////
// Обработчики событий формы
////////////////////////////////////////////////////

// Обработчик события ПриОткрытии
//
Процедура ПриОткрытии()
	
	СписокВозможныхЗначений = Новый СписокЗначений;
	СписокВозможныхЗначений.Добавить("C:\Program Files\1cv81\bin\1cv8.exe");
	СписокВозможныхЗначений.Добавить("C:\Program Files (x86)\1cv81\bin\1cv8.exe");
	ЭлементыФормы.ИсполняемыйФайлКлиентаНаСервере.СписокВыбора = СписокВозможныхЗначений;
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОбновлениеКонфигурации);
	ИспользоватьРегламентноеОбновлениеИБ = РегламентноеЗадание.Использование;
	
	// Читаем описание файла обновления ИБ
	ОписаниеФайлаЗагружаемойКонфигурации = Константы.ОписаниеФайлаКонфигурацииДляОбновления.Получить();
	Если ПустаяСтрока(ОписаниеФайлаЗагружаемойКонфигурации) Тогда
		ОписаниеФайлаЗагружаемойКонфигурации = "<Не задан>";
	КонецЕсли;
	
	// Читаем настройки обновления
	НастройкиОбновленияИБ = Константы.НастройкаОбновленияКонфигурации.Получить().Получить();
	Если ТипЗнч(НастройкиОбновленияИБ) = Тип("Структура") Тогда
		Для каждого ЭлементСтруктуры Из НастройкиОбновленияИБ Цикл
			ЭтаФорма[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ДоступностьВыбораФайла();
	ОбновитьПредставлениеРасписания();
	ЗаполнитьСписокАдминистраторовИБ();
	
КонецПроцедуры

// Обработчик события ПередЗакрытием
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		ОтветНаВопрос = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			Если НЕ ЗаписатьДанные() Тогда
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередОткрытием
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		Предупреждение("Нарушение прав доступа!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////
// Обработчики событий ЭУ формы
////////////////////////////////////////////////////

// Обработчик события Нажатие элемента управления ОсновныеДействияФормы.ОК
//
Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Если ЗаписатьДанные() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Нажатие элемента управления ОсновныеДействияФормы.Записать
//
Процедура ОсновныеДействияФормыЗаписать(Кнопка)
	
	ЗаписатьДанные();
	
КонецПроцедуры

// Обработчик события Нажатие элемента управления ИзменитьРасписание
//
Процедура ИзменитьРасписаниеНажатие(Элемент)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РегламентноеЗадание.Расписание);
	Если Диалог.ОткрытьМодально() Тогда
		РегламентноеЗадание.Расписание = Диалог.Расписание;
		Модифицированность = Истина;
		ОбновитьПредставлениеРасписания();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Нажатие элемента управления ОткрытьФайл
//
Процедура ОткрытьФайлНажатие(Элемент)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок          = "Выбор файла обновления конфигурации";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Фильтр             = "Файл конфигурации(*.cf)|*.cf";
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ФайлДД = Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
		ФайлЗагружаемойКонфигурации = Новый ХранилищеЗначения(ФайлДД, Новый СжатиеДанных(9));
		ФайлКонфигурации = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		ОписаниеФайлаЗагружаемойКонфигурации = ФайлКонфигурации.Имя + ", " + Строка(Окр((ФайлКонфигурации.Размер()/1000000), 2)) + " Мбайт (" + Формат(ФайлКонфигурации.Размер(), "ЧРГ=" "") + "), изменен: " + ФайлКонфигурации.ПолучитьВремяИзменения();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Нажатие элемента управления УдалитьФайл
Процедура УдалитьФайлНажатие(Элемент)
	
	ФайлЗагружаемойКонфигурации = "";
	ОписаниеФайлаЗагружаемойКонфигурации = "<Не задан>";
	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Нажатие элемента управления СохранитьФайл
Процедура СохранитьФайлНажатие(Элемент)
	
	ДвоичныеДанныеФайла = Константы.ФайлКонфигурацииДляОбновления.Получить().Получить();
	Если ТипЗнч(ДвоичныеДанныеФайла) <> Тип("ДвоичныеДанные") Тогда
		Предупреждение("Нет данных для сохранения.");
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ДиалогВыбораФайла.Заголовок          = "Сохранение файла обновления конфигурации";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Фильтр             = "Файл конфигурации(*.cf)|*.cf";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ЗначениеКонстанты = ДвоичныеДанныеФайла;
		Попытка
			ЗначениеКонстанты.Записать(ДиалогВыбораФайла.ПолноеИмяФайла);
		Исключение
			Предупреждение("Операция не выполнена!" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента управления ИспользоватьРегламентноеОбновлениеИБ
Процедура ИспользоватьРегламентноеОбновлениеИБПриИзменении(Элемент)
	
	РегламентноеЗадание.Использование = ИспользоватьРегламентноеОбновлениеИБ;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента управления ЗагружатьИзмененнуюКонфигурацию
Процедура ЗагружатьИзмененнуюКонфигурациюПриИзменении(Элемент)
	
	ДоступностьВыбораФайла();
	
КонецПроцедуры

