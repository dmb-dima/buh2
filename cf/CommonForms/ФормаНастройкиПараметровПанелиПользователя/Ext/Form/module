Перем ПараметрыПанелиПользователя;

Процедура ПриОткрытии()
	
	Заголовок = "Форма редактирования панели настроек """ + ВладелецФормы.Заголовок + """"; 
	
	ПараметрыПанелиПользователя = ТиповыеОтчеты.ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
	Если ТипЗнч(ОтчетОбъект) = Тип("Структура") Тогда
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		//КомпоновщикНастроек.ЗагрузитьНастройки(ОтчетОбъект.НастройкиКомпоновщика);
	Иначе
		Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект);
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		//КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыПанелиПользователя.НастройкиКомпоновщика);
	КонецЕсли;
	
	ПроизвольныйПериод = ПараметрыПанелиПользователя.ПроизвольныйПериод;
	ДеревоНастроекСтандартныхСтраниц = ПараметрыПанелиПользователя.ДеревоНастроекСтандартныхСтраниц;
	
	Если ДеревоНастроекСтандартныхСтраниц.Строки.Найти("Показатели", "Имя") = Неопределено тогда
		СтрокаПоказателей = ДеревоНастроекСтандартныхСтраниц.Строки.Вставить(2);
		СтрокаПоказателей.Использование = ложь;
		СтрокаПоказателей.Имя = "Показатели";
		СтрокаПоказателей.Представление = "Показатели";
	КонецЕсли;
	
	// Если Отбор еще не инициализирован
	Если ПараметрыПанелиПользователя.Отборы.Колонки.Количество() = 0 Тогда
		ПараметрыПанелиПользователя.Отборы = Отборы;
	Иначе
	    Отборы = ПараметрыПанелиПользователя.Отборы;
	КонецЕсли;
	
    ДоступныеПериодичности = ПараметрыПанелиПользователя.ДоступныеПериодичности;
	
	СписокДоступныхОтносительныхПериодов = ПараметрыПанелиПользователя.СписокДоступныхОтносительныхПериодов;
	
	Для каждого Строка Из ДеревоНастроекСтандартныхСтраниц.Строки Цикл
		ЭлементыФормы.ДеревоНастроекСтандартныхСтраниц.Развернуть(Строка, Истина);
	КонецЦикла;
	ИнициализацияТабличногоПоляОтбор();                                           
	
	ЭлементыФормы.ДоступныеПериодичности.Колонки.РассчитыватьЧерез.Видимость = Ложь;
	  
	Если НЕ ПараметрыПанелиПользователя.Свойство("Параметры") тогда
		ПараметрыПанелиПользователя.Вставить("Параметры", Параметры);
	КонецЕсли;                            
	// проверим наличие всех колонок в таблице
	Для каждого КолонкаПараметра из Параметры.Колонки Цикл
		Если ПараметрыПанелиПользователя.Параметры.Колонки.Найти(КолонкаПараметра.Имя) = Неопределено тогда
			ПараметрыПанелиПользователя.Параметры.Колонки.Добавить(КолонкаПараметра.Имя,КолонкаПараметра.ТипЗначения, КолонкаПараметра.Заголовок);
		КонецЕсли;                                   
	КонецЦикла;	
	
	Параметры = ПараметрыПанелиПользователя.Параметры;
	
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	Для каждого ДоступныйПараметрДанных из ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
		Если Параметры.Найти(Строка(ДоступныйПараметрДанных.Параметр), "Параметр") = Неопределено тогда
			Если ДоступныйПараметрДанных.Видимость 
			   И ДоступныйПараметрДанных.Параметр <> Новый ПараметрКомпоновкиДанных("Период") 
			   И ДоступныйПараметрДанных.Параметр <> Новый ПараметрКомпоновкиДанных("НачалоПериода") 
			   И ДоступныйПараметрДанных.Параметр <> Новый ПараметрКомпоновкиДанных("КонецПериода") тогда
				СтрокаПараметра                  = Параметры.Добавить();
				СтрокаПараметра.Параметр         = Строка(ДоступныйПараметрДанных.Параметр);
				СтрокаПараметра.ПараметрНазвание = ДоступныйПараметрДанных.Заголовок;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоУдаленных = 0;
	Для Сч = 0 по Параметры.Количество()-1 Цикл
		СтрокаПараметра = Параметры[Сч-КоличествоУдаленных];
		Если ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных(СтрокаПараметра.Параметр)) = Неопределено тогда
			Параметры.Удалить(СтрокаПараметра);
			КоличествоУдаленных = КоличествоУдаленных + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПараметрыПанелиПользователя.Свойство("Группировки") тогда
		ПараметрыПанелиПользователя.Вставить("Группировки", Группировки);
	КонецЕсли;                            

	Для каждого КолонкаГруппировки из Группировки.Колонки Цикл
		Если ПараметрыПанелиПользователя.Группировки.Колонки.Найти(КолонкаГруппировки.Имя) = Неопределено тогда
			ПараметрыПанелиПользователя.Группировки.Колонки.Добавить(КолонкаГруппировки.Имя,КолонкаГруппировки.ТипЗначения, КолонкаГруппировки.Заголовок);
		КонецЕсли;                                   
	КонецЦикла;	
	
	Группировки = ПараметрыПанелиПользователя.Группировки;
	
	СписокГруппировокОтчета = ТиповыеОтчеты.ПолучитьЭлементыСтруктуры(ОтчетОбъект.КомпоновщикНастроек);
	
	СписокИсключаемыхПолей = Новый СписокЗначений;
	Если ПараметрыПанелиПользователя.Свойство("СписокИсключаемыхПолейРасшифровки") 
	  И ТипЗнч(ПараметрыПанелиПользователя.СписокИсключаемыхПолейРасшифровки) = Тип("СписокЗначений") тогда
		СписокИсключаемыхПолей = ПараметрыПанелиПользователя.СписокИсключаемыхПолейРасшифровки;
	КонецЕсли;
	
	ДобавитьПоляГруппировки(СписокИсключаемыхПолей, Расшифровки.Строки, КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы);
	
КонецПроцедуры

Процедура ДобавитьПоляГруппировки(СписокИсключаемыхПолей, СтрокиПапки, Элементы)
	
	// заполним поля расшифровки
	Для каждого Элемент из Элементы Цикл
		Если Элемент.Папка тогда
			НоваяСтрока = СтрокиПапки.Добавить();
			НоваяСтрока.Поле          = Элемент.Поле;
			НоваяСтрока.Представление = Элемент.Заголовок;
			НоваяСтрока.Использование = СписокИсключаемыхПолей.НайтиПоЗначению(Строка(Элемент.Поле)) = Неопределено;
			ДобавитьПоляГруппировки(СписокИсключаемыхПолей, НоваяСтрока.Строки, Элемент.Элементы);
		Иначе
			НоваяСтрока = СтрокиПапки.Добавить();
			НоваяСтрока.Представление = Элемент.Заголовок;
			НоваяСтрока.Поле          = Элемент.Поле;
			НоваяСтрока.Использование = СписокИсключаемыхПолей.НайтиПоЗначению(Строка(Элемент.Поле)) = Неопределено;
		КонецЕсли;
		
	КонецЦикла;                                                  
	
КонецПроцедуры                                                   


Функция ПроверитьПравильностьЗаполнения()
	
	Для каждого Строка Из Отборы Цикл
		Если Отборы.НайтиСтроки(Новый Структура("Поле", Строка.Поле)).Количество() > 1 Тогда
			Сообщить("Поле """ + Строка.Поле + """ встречается более одного раза! Одно поле не может быть в нескольких строках.");
			Возврат Ложь;
		КонецЕсли;
		Если ПустаяСтрока(Строка.Поле) Тогда
			Сообщить("В строке " + (Отборы.Индекс(Строка) + 1) + " не заполнено Поле!");
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Если Не ПроверитьПравильностьЗаполнения() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПанелиПользователя.ПроизвольныйПериод = ПроизвольныйПериод;
	//ПараметрыПанелиПользователя.НастройкиКомпоновщика = КомпоновщикНастроек.ПолучитьНастройки();
	
	Если ПараметрыПанелиПользователя.Свойство("СписокИсключаемыхПолейРасшифровки") тогда
		ПараметрыПанелиПользователя.СписокИсключаемыхПолейРасшифровки = Новый СписокЗначений;
	Иначе	
		ПараметрыПанелиПользователя.Вставить("СписокИсключаемыхПолейРасшифровки",  Новый СписокЗначений);
	КонецЕсли;
	
	ДобавитьИсключенныеПоля(Расшифровки.Строки);
	
	ОтчетОбъект.ПараметрыПанелиПользователя = Новый ХранилищеЗначения(ПараметрыПанелиПользователя);
	
	Закрыть(Истина);
    
КонецПроцедуры

Процедура ДобавитьИсключенныеПоля(Строки) Экспорт 
	
	Для каждого Строка из Строки Цикл

		Если Строка.Строки.Количество() > 0 тогда
			ДобавитьИсключенныеПоля(Строка.Строки);
		Иначе
			Если НЕ Строка.Использование тогда
				ПараметрыПанелиПользователя.СписокИсключаемыхПолейРасшифровки.Добавить(Строка.Поле);
			КонецЕсли;
		КонецЕсли;
	КонецЦИкла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////
// ОТБОР

Процедура ИнициализацияТабличногоПоляОтбор()
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Равно", "Равно");
	СписокВыбора.Добавить("НеРавно", "Не равно");
	СписокВыбора.Добавить("ВИерархии", "В иерархии");
	СписокВыбора.Добавить("НеВИерархии", "Не В иерархии");
	СписокВыбора.Добавить("ВСписке", "В списке");
	СписокВыбора.Добавить("НеВСписке", "Не в списке");
	СписокВыбора.Добавить("Содержит", "Содержит");
	//Список не полон!!!
	
	ЭлементыФормы.Отборы.Колонки.ВидСравнения.ЭлементУправления.СписокВыбора = СписокВыбора;
	
КонецПроцедуры

Процедура ОтборыПолеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.Отборы.ТекущиеДанные;
	
 	СтандартнаяОбработка = Ложь;
	ФормаВыбораПоля = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	ФормаВыбораПоля.КомпоновщикНастроек = КомпоновщикНастроек;
	ФормаВыбораПоля.Режим = "Отбор";
	ФормаВыбораПоля.ПараметрТекущаяСтрока = Новый ПолеКомпоновкиДанных(ТекущаяСтрока.Поле);
	Результат = ФормаВыбораПоля.ОткрытьМодально();
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элемент.Значение = Строка(Результат.Поле);
	УстановитьТипЯчейки();
	ОтборыВидОтбораПриИзменении(Неопределено);
	
КонецПроцедуры

Процедура УстановитьТипЯчейки()
	
	ТекущаяСтрока = ЭлементыФормы.Отборы.ТекущиеДанные;
	Если ТекущаяСтрока.Поле = "" Тогда
		Возврат;
	КонецЕсли;
	Если ТекущаяСтрока.ВидОтбора = "Список" ИЛИ ТекущаяСтрока.ВидОтбора = "ДлинныйСписок" Тогда
		ЭлементыФормы.Отборы.Колонки.Значение.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		Если ТипЗнч(ТекущаяСтрока.Значение) <> Тип("СписокЗначений") Тогда
			ТекущаяСтрока.Значение = Новый СписокЗначений();
		КонецЕсли;
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("ВСписке", "В списке");
		СписокВыбора.Добавить("ВСпискеПоИерархии", "В списке по иерархии");
		ЭлементыФормы.Отборы.Колонки.ВидСравнения.ЭлементУправления.СписокВыбора = СписокВыбора;

		Возврат;
	КонецЕсли;
	
	ДоступноеПоле = ТиповыеОтчеты.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ТекущаяСтрока.Поле, КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора);
	ЭлементыФормы.Отборы.Колонки.Значение.ЭлементУправления.ОграничениеТипа = ДоступноеПоле.Тип;
	Если ДоступноеПоле.Тип.Типы().Количество() = 1 Тогда
		Если ТипЗнч(ТекущаяСтрока.Значение) <> ДоступноеПоле.Тип.Типы()[0] Тогда
			Тип = ДоступноеПоле.Тип.Типы()[0];
			МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
			Если МетаданныеТипа <> Неопределено Тогда
				ТекущаяСтрока.Значение = Новый(Тип);
			Иначе
				ТекущаяСтрока.Значение = Неопределено;
			КонецЕсли;
		КонецЕсли;
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("Равно", "Равно");
		СписокВыбора.Добавить("НеРавно", "Не равно");
		СписокВыбора.Добавить("ВИерархии", "ВИерархии");
		СписокВыбора.Добавить("НеВИерархии", "НеВИерархии");
		ЭлементыФормы.Отборы.Колонки.ВидСравнения.ЭлементУправления.СписокВыбора = СписокВыбора;

	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидСравнения(ТекущаяСтрока)
	
	СписокВыбора = Новый СписокЗначений;
	Если ТекущаяСтрока.ВидОтбора = "Список" ИЛИ ТекущаяСтрока.ВидОтбора = "ДлинныйСписок" Тогда
		СписокВыбора.Добавить("ВСписке", "В списке");
		СписокВыбора.Добавить("ВСпискеПоИерархии", "В списке по иерархии");
	Иначе
		СписокВыбора.Добавить("Равно", "Равно");
		СписокВыбора.Добавить("НеРавно", "Не равно");
		СписокВыбора.Добавить("ВИерархии", "В иерархии");
		СписокВыбора.Добавить("НеВИерархии", "Не в иерархии");
	КонецЕсли;
	ЭлементыФормы.Отборы.Колонки.ВидСравнения.ЭлементУправления.СписокВыбора = СписокВыбора;
	
КонецПроцедуры


Процедура ОтборыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока = ЭлементыФормы.Отборы.ТекущиеДанные;
		ТекущаяСтрока.Использование = Истина;
		ТекущаяСтрока.ВидСравнения = "ВСписке";
		ТекущаяСтрока.Расположение = "НоваяСтраница";
		ТекущаяСтрока.ВидОтбора = "Список";
	КонецЕсли;
	//УстановитьТипЯчейки();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЗакрыть(Кнопка)
	
	Закрыть();
	
КонецПроцедуры

Процедура ОтборыВидОтбораПриИзменении(Элемент)
	
	Если ПустаяСтрока(ЭлементыФормы.Отборы.ТекущиеДанные.Поле) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.Отборы.ТекущиеДанные;

	ДоступноеПоле = ТиповыеОтчеты.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ТекущаяСтрока.Поле, КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора);
	Типы = ДоступноеПоле.Тип.Типы();
	Иерархический = Ложь;
	Для Каждого Тип Из Типы Цикл
		МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
		Если МетаданныеТипа <> Неопределено И Метаданные.Справочники.Содержит(МетаданныеТипа)
		   И Метаданные.НайтиПоТипу(ДоступноеПоле.Тип.Типы()[0]) <> Неопределено и Метаданные.НайтиПоТипу(ДоступноеПоле.Тип.Типы()[0]).Иерархический Тогда
			Иерархический = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ТекущаяСтрока.ВидОтбора = "Список" ИЛИ ТекущаяСтрока.ВидОтбора = "ДлинныйСписок" Тогда
		ТекущаяСтрока.ВидСравнения = ?(Иерархический, "ВСпискеПоИерархии", "ВСписке");
		Если ТекущаяСтрока.Расположение = "" тогда
			ТекущаяСтрока.Расположение = "НоваяСтраница";
		КонецЕсли;
		Если ТекущаяСтрока.Представление = "" тогда
			ТекущаяСтрока.Представление = "Отбор по " + ДоступноеПоле.Заголовок;
		КонецЕсли;
		ТекущаяСтрока.Использование = Ложь;
	Иначе
		ТекущаяСтрока.ВидСравнения = ?(Иерархический, "ВИерархии", "Равно");
		Если ТекущаяСтрока.Расположение = "" тогда
			ТекущаяСтрока.Расположение = "ДополнительнаяСтраница";
		КонецЕсли;
		ТекущаяСтрока.Представление = ДоступноеПоле.Заголовок;
		ТекущаяСтрока.Использование = Истина;
	КонецЕсли;
	ТекущаяСтрока.СохранятьСписок = ТекущаяСтрока.ВидОтбора = "ДлинныйСписок";
	УстановитьТипЯчейки();
	
КонецПроцедуры

Процедура ОтборыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = ЭлементыФормы.Отборы.ТекущиеДанные;
	
	Если ОтменаРедактирования ИЛИ ТекущаяСтрока.Расположение <> "ДополнительнаяСтраница" Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = Отборы.Индекс(ТекущаяСтрока);
	Пока Индекс <> Отборы.Количество() - 1 И Отборы[Индекс + 1].Расположение <> "ДополнительнаяСтраница" Цикл
		Отборы.Сдвинуть(ТекущаяСтрока, 1);
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтборыВидОтбораОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОтборыВидСравненияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.Отборы.ТекущиеДанные;
	УстановитьВидСравнения(ТекущаяСтрока);
	
КонецПроцедуры

Процедура ОтборыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Таблица = Элемент.Значение;
	// найдем первую строку правой панели
	СтрокаТаблицы = Неопределено;
	Для каждого СтркаТаблицы из Таблица Цикл
		Если СтркаТаблицы.Расположение <> "ГоризонтальнаяПанель" тогда
			СтрокаТаблицы = СтркаТаблицы;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СтрокаТаблицы <> Неопределено И СтрокаТаблицы.Расположение <> "НоваяСтраница"  Тогда
		СтрокаТаблицы.Расположение = "НоваяСтраница";
	КонецЕсли;
КонецПроцедуры

Процедура ОтборыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	Если ТекущаяСтрока.Расположение = "ГоризонтальнаяПанель" тогда
		Если ТекущаяСтрока.ВидОтбора <> "Значение" И ТекущаяСтрока.ВидОтбора <> "Список" тогда
			Отказ = ложь;
			Предупреждение("Для расположения отборов горизонтальной панели должны использоваться отборы Вида ""Значение"" и ""Список""!");
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

Процедура ПараметрыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	Если ТекущаяСтрока.ВыводитьНа = "ГоризонтальнаяПанель" тогда
		Если Не Отказ и ТекущаяСтрока.ОтображатьКак <> "ПолеВвода" И ТекущаяСтрока.ОтображатьКак <> "СписокЗначение" и ТекущаяСтрока.ОтображатьКак <> "" тогда
			ОтменаРедактирования = истина;
			Предупреждение("Для расположения параметра на горизонтальной панели можно использоваться вид отображения ""Значение"" и ""Список""!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура РасшифровкиПриИзмененииФлажка(Элемент, Колонка)
	
	Если Элемент.ТекущаяСтрока.Строки.Количество() > 0 тогда
		Элемент.ТекущаяСтрока.Использование = ложь;
	КонецЕсли
	                                                                                  
КонецПроцедуры






