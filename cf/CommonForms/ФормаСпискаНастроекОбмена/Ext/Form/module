
Перем мТекущееТабличноеПоле;

/////////////////////////////////////////////////////////////////
// Общие процедуры и функции

Процедура ОтобразитьСтраницуПанели(ИмяСтраницы)

	ЭлементыФормы.ПанельТабличныхПолей.ТекущаяСтраница = ЭлементыФормы.ПанельТабличныхПолей.Страницы[ИмяСтраницы];
	мТекущееТабличноеПоле = ЭлементыФормы["ТабличноеПолеНастройки" + ИмяСтраницы];
	мТекущееТабличноеПоле.ОбновитьСтроки();
	
	Для каждого СтраницаПанели Из ЭлементыФормы.ПанельТабличныхПолей.Страницы Цикл
		
		Если СтраницаПанели = ЭлементыФормы.ПанельТабличныхПолей.ТекущаяСтраница Тогда
			ЭлементыФормы["Картинка" + СтраницаПанели.Имя].Картинка = БиблиотекаКартинок["ОбменДанными" + СтраницаПанели.Имя + "_1"];
		Иначе
			ЭлементыФормы["Картинка" + СтраницаПанели.Имя].Картинка = БиблиотекаКартинок["ОбменДанными" + СтраницаПанели.Имя + "_0"];
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

Процедура ВыполнитьОбмен()

	Если мТекущееТабличноеПоле.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДанными.ВыполнитьОбменДаннымиПоПроизвольнойНастройке(мТекущееТабличноеПоле.ТекущиеДанные.Ссылка, , глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
		
	// после проведения обмена данными, надо обновить список
	мТекущееТабличноеПоле.ОбновитьСтроки();
	
КонецПроцедуры

Процедура ОткрытьМониторСостояния()
	
	Если мТекущееТабличноеПоле.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	ПроцедурыОбменаДаннымиКлиент.ОткрытьМониторОбменовДляНастройки(мТекущееТабличноеПоле.ТекущиеДанные.ссылка, ЭтаФорма);
	
КонецПроцедуры

Процедура ОтработатьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, МассивТипов)
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ТипПланаОбмена = МассивТипов[0];
	
	Если Копирование Тогда
		
		Если Элемент.ТекущиеДанные <> Неопределено Тогда
			НовыйОбъект = Элемент.ТекущиеДанные.Ссылка.Скопировать();
		КонецЕсли; 
		
	// {ОбменДаннымиСУправлениемТорговлей
	ИначеЕсли ТипПланаОбмена = Тип("ПланОбменаСсылка.ОбменУправлениеТорговлейБухгалтерияКОРП") Тогда
		
		ОбработкаПомощника = Обработки.ПомощникНастройкиОбменаДанными.Создать();
		ФормаНастройки = ОбработкаПомощника.ПолучитьФорму("Форма");
		ФормаНастройки.Открыть();
		Возврат;
		
	// }ОбменДаннымиСУправлениемТорговлей
	
	// {ОбменДаннымиСРозницей
	ИначеЕсли ТипПланаОбмена = Тип("ПланОбменаСсылка.ОбменРозницаБухгалтерия20") Тогда
		
		ОбработкаПомощника = Обработки.ПомощникНастройкиОбменаДаннымиСРозницей.Создать();
		ФормаНастройки = ОбработкаПомощника.ПолучитьФорму("Форма");
		ФормаНастройки.Открыть();
		Возврат;
		
	// }ОбменДаннымиСРозницей		
	Иначе
		
		НовыйОбъект = Справочники.НастройкиОбменаДанными.СоздатьЭлемент();
				
	КонецЕсли;
	
	ФормаЭлемента = НовыйОбъект.ПолучитьФорму(, Элемент);
	
	Если Элемент.ТекущиеДанные <> Неопределено И Копирование Тогда
		ФормаЭлемента.ПараметрОбъектКопирования  = Элемент.ТекущиеДанные.Ссылка;
	КонецЕсли; 
	
	ФормаЭлемента.УстановитьНедоступностьИзмененияТипаУзла(МассивТипов);
	
	ФормаЭлемента.Открыть();
	
КонецПроцедуры

Процедура ОбработатьПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("ПланОбменаСсылка.Полный"));
	МассивТипов.Добавить(Тип("ПланОбменаСсылка.ПоОрганизации"));
	
	ФормаЭлемента = Элемент.ТекущиеДанные.Ссылка.ПолучитьФорму(, Элемент);
	ФормаЭлемента.УстановитьНедоступностьИзмененияТипаУзла(МассивТипов);
	ФормаЭлемента.Открыть();

КонецПроцедуры

/////////////////////////////////////////////////////////////////
// Обработчики событий формы

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ТипОбменаПоУмолчанию = Неопределено Тогда
		
		ИмяСтраницы = ВосстановитьЗначение("ИмяСтраницыСписковОбменовДанными");
		Если ЗначениеЗаполнено(ИмяСтраницы) Тогда
			ОтобразитьСтраницуПанели(ИмяСтраницы);
		// {ОбменДаннымиСУправлениемТорговлей
		Иначе
			ОтобразитьСтраницуПанели("БП8");
		// }ОбменДаннымиСУправлениемТорговлей
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(ТипОбменаПоУмолчанию) = Тип("ПланОбменаСсылка.Полный")
			ИЛИ ТипЗнч(ТипОбменаПоУмолчанию) = Тип("ПланОбменаСсылка.ПоОрганизации") Тогда
			ОтобразитьСтраницуПанели("РИБ");
		// {ОбменДаннымиСУправлениемТорговлей
		ИначеЕсли ТипЗнч(ТипОбменаПоУмолчанию) = Тип("ПланОбменаСсылка.ОбменУправлениеТорговлейБухгалтерияКОРП") Тогда
			ОтобразитьСтраницуПанели("БП8");
		// }ОбменДаннымиСУправлениемТорговлей
		//ИначеЕсли ТипЗнч(ТипОбменаПоУмолчанию) = Тип("ПланОбменаСсылка.ОбменРозницаБухгалтерия") Тогда
		//	ОтобразитьСтраницуПанели("РТ8");
		Иначе
			ОтобразитьСтраницуПанели("Все");
		КонецЕсли; 
		
	КонецЕсли; 
	
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы["ТабличноеПолеНастройки" + ЭлементыФормы.ПанельТабличныхПолей.ТекущаяСтраница.Имя];
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Если ТипОбменаПоУмолчанию = Неопределено Тогда
		СохранитьЗначение("ИмяСтраницыСписковОбменовДанными", ЭлементыФормы.ПанельТабличныхПолей.ТекущаяСтраница.Имя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	// {ОбменДаннымиСУправлениемТорговлей
	НастройкиБП8.Отбор.ТипУзлаИнформационнойБазы.Значение = ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП.ПустаяСсылка();
	НастройкиБП8.Отбор.ТипУзлаИнформационнойБазы.Использование = Истина;
	ЭлементыФормы.ТабличноеПолеНастройкиБП8.НастройкаОтбора.ТипУзлаИнформационнойБазы.Доступность = Ложь;
	// }ОбменДаннымиСУправлениемТорговлей
	
	СписокНастроекРИБ = Новый СписокЗначений;
	СписокНастроекРИБ.Добавить(ПланыОбмена.Полный.ПустаяСсылка());
	СписокНастроекРИБ.Добавить(ПланыОбмена.ПоОрганизации.ПустаяСсылка());
		
	НастройкиРИБ.Отбор.ТипУзлаИнформационнойБазы.ВидСравнения = ВидСравнения.ВСписке;
	НастройкиРИБ.Отбор.ТипУзлаИнформационнойБазы.Значение = СписокНастроекРИБ;
	НастройкиРИБ.Отбор.ТипУзлаИнформационнойБазы.Использование = Истина;
	ЭлементыФормы.ТабличноеПолеНастройкиРИБ.НастройкаОтбора.ТипУзлаИнформационнойБазы.Доступность = Ложь;
	
	//НастройкиРТ8.Отбор.ТипУзлаИнформационнойБазы.Установить(ПланыОбмена.ОбменРозницаБухгалтерия.ПустаяСсылка());
	ЭлементыФормы.ТабличноеПолеНастройкиРТ8.НастройкаОтбора.ТипУзлаИнформационнойБазы.Доступность = Ложь;

КонецПроцедуры

/////////////////////////////////////////////////////////////////
// Обработчики событий элементов формы

// {ОбменДаннымиСУправлениемТорговлей
Процедура КартинкаБП8Нажатие(Элемент)
	
	ОтобразитьСтраницуПанели("БП8");
	
КонецПроцедуры
// }ОбменДаннымиСУправлениемТорговлей

Процедура КартинкаРТ8Нажатие(Элемент)
	
	ОтобразитьСтраницуПанели("РТ8");
	
КонецПроцедуры

Процедура КартинкаРИБНажатие(Элемент)
	
	ОтобразитьСтраницуПанели("РИБ");
	
КонецПроцедуры

Процедура КартинкаВсеНажатие(Элемент)
	
	ОтобразитьСтраницуПанели("Все");
	
КонецПроцедуры


Процедура КоманднаяПанельНастройкиВыполнитьОбмен(Кнопка)
	
	ВыполнитьОбмен();
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкиМониторСостояния(Кнопка)
	
	ОткрытьМониторСостояния();
	
КонецПроцедуры


// {ОбменДаннымиСУправлениемТорговлей
Процедура ТабличноеПолеНастройкиБП8ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("ПланОбменаСсылка.ОбменУправлениеТорговлейБухгалтерияКОРП"));
	
	ОтработатьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, МассивТипов);
	
КонецПроцедуры
// }ОбменДаннымиСУправлениемТорговлей

Процедура ТабличноеПолеНастройкиРТ8ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("ПланОбменаСсылка.ОбменРозницаБухгалтерия20"));
	
	ОтработатьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, МассивТипов);
	
КонецПроцедуры

Процедура ТабличноеПолеНастройкиРИБПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("ПланОбменаСсылка.Полный"));
	МассивТипов.Добавить(Тип("ПланОбменаСсылка.ПоОрганизации"));
	
	ОтработатьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, МассивТипов);
	
КонецПроцедуры

// {ОбменДаннымиСУправлениемТорговлей
Процедура ТабличноеПолеНастройкиБП8ПередНачаломИзменения(Элемент, Отказ)
	
	ОбработатьПередНачаломИзменения(Элемент, Отказ);
	
КонецПроцедуры
// }ОбменДаннымиСУправлениемТорговлей

Процедура ТабличноеПолеНастройкиРТ8ПередНачаломИзменения(Элемент, Отказ)
	
	ОбработатьПередНачаломИзменения(Элемент, Отказ);
	
КонецПроцедуры

Процедура ТабличноеПолеНастройкиРИБПередНачаломИзменения(Элемент, Отказ)
	
	ОбработатьПередНачаломИзменения(Элемент, Отказ);
	
КонецПроцедуры

// {ОбменДаннымиСУправлениемТорговлей
Процедура ТабличноеПолеНастройкиБП8ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПроцедурыОбменаДаннымиКлиент.ДействияСправочникСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры
// }ОбменДаннымиСУправлениемТорговлей

Процедура ТабличноеПолеНастройкиРТ8ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПроцедурыОбменаДаннымиКлиент.ДействияСправочникСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// {ОбменДаннымиСУправлениемТорговлей
Процедура ТабличноеПолеНастройкиБП8ПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПроцедурыОбменаДаннымиКлиент.ДействияСправочникСписокПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры
// }ОбменДаннымиСУправлениемТорговлей

Процедура ТабличноеПолеНастройкиРТ8ПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПроцедурыОбменаДаннымиКлиент.ДействияСправочникСписокПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура ТабличноеПолеНастройкиРИБПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПроцедурыОбменаДаннымиКлиент.ДействияСправочникСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура ТабличноеПолеНастройкиРИБПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПроцедурыОбменаДаннымиКлиент.ДействияСправочникСписокПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура ТабличноеПолеНастройкиВсеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПроцедурыОбменаДаннымиКлиент.ДействияСправочникСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура ТабличноеПолеНастройкиВсеПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПроцедурыОбменаДаннымиКлиент.ДействияСправочникСписокПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.НастройкиОбменаДанными") Тогда
		
		мТекущееТабличноеПоле.ОбновитьСтроки();
		
	КонецЕсли;
	
КонецПроцедуры

// {ОбменДаннымиСУправлениемТорговлей
Процедура ТабличноеПолеНастройкиБП8ПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиВыполненияОбменаБП.Отбор.ЗначениеОтбора.Установить(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры
// }ОбменДаннымиСУправлениемТорговлей

Процедура ТабличноеПолеНастройкиРТ8ПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиВыполненияОбменаРТ8.Отбор.ЗначениеОтбора.Установить(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

Процедура ТабличноеПолеНастройкиРИБПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиВыполненияОбменаРИБ.Отбор.ЗначениеОтбора.Установить(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

Процедура ТабличноеПолеНастройкиВсеПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиВыполненияОбменаВСЕ.Отбор.ЗначениеОтбора.Установить(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры


// {ОбменДаннымиСУправлениемТорговлей
Процедура КоманднаяПанельНастройкиВыполненеияОбменаПроизвестиОбменДанными(Кнопка)
	
	Если ЭлементыФормы.НастройкиВыполненияОбменаБП.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДанными.ВыполнитьОбменПоНастройкеАвтоматическогоВыполненияОбменаДанными(ЭлементыФормы.НастройкиВыполненияОбменаБП.ТекущиеДанные.Ссылка, ,глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
	
КонецПроцедуры
// }ОбменДаннымиСУправлениемТорговлей

Процедура КоманднаяПанельНастройкиВыполненеияОбменаРТПроизвестиОбменДанными(Кнопка)
	
	Если ЭлементыФормы.НастройкиВыполненияОбменаРТ8.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДанными.ВыполнитьОбменПоНастройкеАвтоматическогоВыполненияОбменаДанными(ЭлементыФормы.НастройкиВыполненияОбменаРТ8.ТекущиеДанные.Ссылка, ,глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкиВыполненеияОбменаВСЕПроизвестиОбменДаннымиВСЕ(Кнопка)
	
	Если ЭлементыФормы.НастройкиВыполненияОбменаВСЕ.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДанными.ВыполнитьОбменПоНастройкеАвтоматическогоВыполненияОбменаДанными(ЭлементыФормы.НастройкиВыполненияОбменаВСЕ.ТекущиеДанные.Ссылка, ,глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкиВыполненеияОбменаРИБПроизвестиОбменданнымиРИБ(Кнопка)
	
	Если ЭлементыФормы.НастройкиВыполненияОбменаРИБ.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДанными.ВыполнитьОбменПоНастройкеАвтоматическогоВыполненияОбменаДанными(ЭлементыФормы.НастройкиВыполненияОбменаРИБ.ТекущиеДанные.Ссылка, ,глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
	
КонецПроцедуры

Процедура ТабличноеПолеНастройкиВсеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	Отказ = Истина;
КонецПроцедуры

Процедура КоманднаяПанельНастройкиРТ8Действие2(Кнопка)
	Если ЭлементыФормы.ТабличноеПолеНастройкиРТ8.ТекущаяСтрока <> Неопределено Тогда
		Помощник = Обработки.ПомощникНастройкиОбменаДаннымиСРозницей.Создать();
		Помощник.УстановитьПараметрыВнешнегоВызоваДляРедактированияНастройки(ЭлементыФормы.ТабличноеПолеНастройкиРТ8.ТекущаяСтрока.Ссылка);
		ФормаПомощника = Помощник.ПолучитьФорму("Форма",ЭтаФорма,ЭтаФорма);
		ФормаПомощника.Открыть();
	КонецЕсли;
КонецПроцедуры

// {ОбменДаннымиСУправлениемТорговлей
ПроцедурыОбменаДаннымиКлиент.ДобавитьНеобходимыКолонкиДляВыводаСпискаНастроекОбмена(НастройкиБП8);
// }ОбменДаннымиСУправлениемТорговлей
ПроцедурыОбменаДаннымиКлиент.ДобавитьНеобходимыКолонкиДляВыводаСпискаНастроекОбмена(НастройкиРТ8);
ПроцедурыОбменаДаннымиКлиент.ДобавитьНеобходимыКолонкиДляВыводаСпискаНастроекОбмена(НастройкиРИБ);
ПроцедурыОбменаДаннымиКлиент.ДобавитьНеобходимыКолонкиДляВыводаСпискаНастроекОбмена(НастройкиВсе);
