////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мГоловнаяОрганизация;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура расчитывает и заполняет в форме суммы начисленных взносов
//
Процедура ВыполнитьРасчетНачисленныхВзносов()
	
	НачалоГода = ОтчетныйПериод;
	КонецГода = ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод);
	
	// Расчет начисленных взносов
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода);
	Запрос.УстановитьПараметр("КонецГода", ?(ИспользоватьМежрасчетныйПериод, ДатаОкончанияМежрасчетногоПериода, КонецГода));
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВзносыПоПодразделению.НачисленоНаНакопительнуюЧастьПФР,
	|	ВзносыПоПодразделению.НачисленоНаСтраховуюЧастьПФР,
	|	0 КАК НачисленоПоДополнительномуТарифу,
	|	ВзносыПоВсейОрганизации.НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР,
	|	ВзносыПоВсейОрганизации.НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ЕСНИсчисленныйОбороты.ПФРНакопительная) КАК НачисленоНаНакопительнуюЧастьПФР,
	|		СУММА(ЕСНИсчисленныйОбороты.ПФРСтраховая) КАК НачисленоНаСтраховуюЧастьПФР
	|	ИЗ
	|		РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленныйОбороты
	|	ГДЕ
	|		ЕСНИсчисленныйОбороты.Период МЕЖДУ &НачалоГода И &КонецГода
	|		И ЕСНИсчисленныйОбороты.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|		И ЕСНИсчисленныйОбороты.ФизЛицо = &ФизЛицо
	|		И ЕСНИсчисленныйОбороты.Организация = &ГоловнаяОрганизация) КАК ВзносыПоПодразделению
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ЕСНИсчисленныйОбороты.ПФРНакопительная) КАК НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР,
	|			СУММА(ЕСНИсчисленныйОбороты.ПФРСтраховая) КАК НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР
	|		ИЗ
	|			(ВЫБРАТЬ
	|				РАботникиОрганизаций.Физлицо КАК Физлицо,
	|				КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РАботникиОрганизаций.ОбособленноеПодразделение) КАК КоличествоПодразделенийРаботника
	|			ИЗ
	|				(ВЫБРАТЬ
	|					РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
	|					РаботникиОрганизаций.ОбособленноеПодразделение КАК ОбособленноеПодразделение
	|				ИЗ
	|					РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|				ГДЕ
	|					РаботникиОрганизаций.Период МЕЖДУ &НачалоГода И &КонецГода
	|					И РаботникиОрганизаций.Сотрудник.Физлицо = &Физлицо
	|					И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					РаботникиОрганизаций.Сотрудник.Физлицо,
	|					РаботникиОрганизаций.ОбособленноеПодразделение
	|				ИЗ
	|					РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|							&НачалоГода,
	|							Сотрудник.Физлицо = &ФизЛицо
	|								И Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизаций) КАК РАботникиОрганизаций
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РАботникиОрганизаций.Физлицо) КАК ПодразделенияРаботника
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленныйОбороты
	|				ПО (ЕСНИсчисленныйОбороты.Период МЕЖДУ &НачалоГода И &КонецГода)
	|					И (ЕСНИсчисленныйОбороты.ФизЛицо = &ФизЛицо)
	|					И (ЕСНИсчисленныйОбороты.Организация = &ГоловнаяОрганизация)
	|					И (ПодразделенияРаботника.КоличествоПодразделенийРаботника > 1)) КАК ВзносыПоВсейОрганизации
	|		ПО (ИСТИНА)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НачисленоНаСтраховуюЧастьПФР		= Выборка.НачисленоНаСтраховуюЧастьПФР;
		НачисленоНаНакопительнуюЧастьПФР	= Выборка.НачисленоНаНакопительнуюЧастьПФР;
		НачисленоПоДополнительномуТарифу	= Выборка.НачисленоПоДополнительномуТарифу;
		НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР = Выборка.НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР;
		НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР = Выборка.НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР;
		
	Иначе
		НачисленоНаСтраховуюЧастьПФР		= 0;
		НачисленоНаНакопительнуюЧастьПФР	= 0;
		НачисленоПоДополнительномуТарифу	= 0;
		НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР = 0;
		НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР = 0;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьРасчетНачисленныхВзносов()

Процедура ОбновитьКатегориюЗЛ()

	ЭтоНовыеФормы = ОтчетныйПериод >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
	Если ЭтоНовыеФормы Тогда
		СписокКатегорийЗастрахованныхЛиц = ПроцедурыПерсонифицированногоУчета.КатегорииЗастрахованныхЛицОрганизации(Организация, мГоловнаяОрганизация, ОтчетныйПериод);
		Если СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(КатегорияЗастрахованныхЛиц) = Неопределено Тогда
			КатегорияЗастрахованныхЛиц = СписокКатегорийЗастрахованныхЛиц[0].Значение;
		КонецЕсли;
		ЭлементыФормы.КатегорияЗастрахованныхЛиц.ДоступныеЗначения = СписокКатегорийЗастрахованныхЛиц;
	Иначе
		КатегорияЗастрахованныхЛиц = ""
	КонецЕсли;

КонецПроцедуры

Процедура ПоказатьЭлементыФормы()

	ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ?(ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами(), ЭлементыФормы.ПанельДанных.Страницы.До2010, ЭлементыФормы.ПанельДанных.Страницы.С2010);

	
	
	ОбновитьКатегориюЗЛ();
	
КонецПроцедуры

// Считывает данные о заработке и стаже по заданному физлицу, организации и году
Процедура ПрочитатьДанные()
	
	Заголовок = "Ввод данных СЗВ: " + ФизЛицо.Наименование;
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) или НЕ ЗначениеЗаполнено(Организация) Тогда
		//Возврат
	ИначеЕсли ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда 
		
		// Прочитаем данные о заработке
		ДанныеОЗаработке = РегистрыСведений.СуммыВзносовДляСЗВ4.Получить(Новый Структура("ОбособленноеПодразделение, ФизЛицо, Год" , Организация, ФизЛицо, Год(ОтчетныйПериод) ));
		Если ДанныеОЗаработке <> Неопределено Тогда
			НачисленоНаСтраховуюЧастьПФР		= ДанныеОЗаработке.НачисленоНаСтраховуюЧастьПФР;
			НачисленоНаНакопительнуюЧастьПФР	= ДанныеОЗаработке.НачисленоНаНакопительнуюЧастьПФР;
			НачисленоПоДополнительномуТарифу	= ДанныеОЗаработке.НачисленоПоДополнительномуТарифу;
			НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР = ДанныеОЗаработке.НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР;
			НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР = ДанныеОЗаработке.НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР;
			
			МесяцыБолезни						= Цел(ДанныеОЗаработке.ДнейБолезни / 30);
			ДниБолезни							= ДанныеОЗаработке.ДнейБолезни % 30;
			МесяцыОтпускаЗаСвойСчет				= Цел(ДанныеОЗаработке.ДнейОтпускаЗаСвойСчет / 30);
			ДниОтпускаЗаСвойСчет				= ДанныеОЗаработке.ДнейОтпускаЗаСвойСчет % 30;
			
		Иначе
			НачисленоНаСтраховуюЧастьПФР		= 0;
			НачисленоНаНакопительнуюЧастьПФР	= 0;
			НачисленоПоДополнительномуТарифу	= 0;
			НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР = 0;
			НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР = 0;
			МесяцыБолезни						= 0;
			ДнейБолезни							= 0;
			МесяцыОтпускаЗаСвойСчет				= 0;
			ДниОтпускаЗаСвойСчет				= 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Установим отбор для записей о стаже
	ЗаписиОСтаже.Отбор.Физлицо.Значение						= ФизЛицо;
	ЗаписиОСтаже.Отбор.ОтчетныйПериод.Значение				= ОтчетныйПериод;
	ЗаписиОСтаже.Отбор.ОбособленноеПодразделение.Значение	= Организация;
	ЗаписиОСтаже.Отбор.КатегорияЗастрахованныхЛиц.Значение	= КатегорияЗастрахованныхЛиц;
	
	//ЗаписиОСтаже.Прочитать();
	// После очередного чтения данные еще не модифицированы
	Модифицированность = Ложь;
	
КонецПроцедуры


Процедура УстановитьВидимостьПанелиВсеСуммыСтраховыхВзносов()
	СписокОбособленныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Если СписокОбособленныхПодразделений.Количество() > 0 Тогда
		// прячем панель
		ЭлементыФормы.ПанельВсеСуммыСтраховыхВзносов.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.РамкаГруппы1.Заголовок = "Сумма начисленных страховых взносов по " + Организация.Наименование;
	Иначе
		// Показываем панель с суммами по всей организации
		ЭлементыФормы.ПанельВсеСуммыСтраховыхВзносов.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.РамкаГруппы1.Заголовок =  "Сумма начисленных страховых взносов";
	КонецЕсли
КонецПроцедуры // УстановитьВидимостьПанелиВсеСуммыСтраховыхВзносов()

//Выполняет нумерацию записей о стаже 
//(устанавливает значения измерений: НомерПериодаТрудовойДеятельности,НомерОсновнойЗаписи,НомерДополнительнойЗаписи)
Функция ВыполнитьНумерациюЗаписейОСтаже()

	//Нумерация записей стажа перед записью
	НомерОсновнойЗаписи =0; 

	НомерСтроки =0;
	Для Каждого СтрокаСтажа Из ЗаписиОСтаже цикл
		НомерСтроки = НомерСтроки +1;

		//Контролируем смену основной записи
		Если ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) тогда
			//Встретили основную запись
			НомерОсновнойЗаписи = НомерОсновнойЗаписи +1; 
			НомерДополнительнойЗаписи =0; 
		Иначе	
			Если НомерОсновнойЗаписи <> 0 тогда
				НомерДополнительнойЗаписи =НомерДополнительнойЗаписи + 1; 
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке(СформироватьЗаголовокОшибкиЗаписиОСтажеСЗВ4(СтрокаСтажа,СтрокаСтажа)+"Не указаны даты начала и окончания периода!", Ложь);
				Возврат Ложь;
			КонецЕсли;	 
		КонецЕсли;	

		СтрокаСтажа.НомерОсновнойЗаписи = НомерОсновнойЗаписи;
		СтрокаСтажа.НомерДополнительнойЗаписи = НомерДополнительнойЗаписи;
	КонецЦикла;	

	Возврат Истина;
КонецФункции	 

// Выполняет сохранение данных
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
Функция ВыполнитьСохранениеДанных(НаборИзмерений, ТребуетсяПодтверждение = Истина)

	Если НЕ Модифицированность Тогда
		Возврат Истина;
	КонецЕсли; 
	
	// Спросим у пользователя: сохранять ли данные 
	Если ТребуетсяПодтверждение Тогда

		Текст = "Сведения по организации """ + ЗаписиОСтаже.Отбор.ОбособленноеПодразделение.Значение + """ за " + ПредставлениеПериода(НачалоГода(ОтчетныйПериод), ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод), "ФП = Истина" ) + " были изменены!" + Символы.ПС + "Сохранить?";
		Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да, );

		Если Ответ = КодВозвратаДиалога.Да Тогда
			// будем записывать
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда	
			Возврат Истина; // отказались от записи - записывать ничего не будем
		Иначе//Отмена  
			Возврат Ложь; // отказались от записи - вернулись к редактированию
		КонецЕсли;

	КонецЕсли;
	
	// Проверим заполнение организации (год и физлицо пустыми быть не могут)
	Если НЕ ЗначениеЗаполнено(НаборИзмерений.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", ложь);
		Возврат ложь; 
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(НаборИзмерений.ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан сотрудник!", ложь);
		Возврат ложь;
	КонецЕсли; 
	
	// Сохранение данных о заработке
	Если ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		НаборЗаписей = РегистрыСведений.СуммыВзносовДляСЗВ4.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизЛицо.Значение = НаборИзмерений.ФизЛицо;
		НаборЗаписей.Отбор.ОбособленноеПодразделение.Значение = НаборИзмерений.Организация;
		НаборЗаписей.Отбор.Год.Значение = Год(НаборИзмерений.ОтчетныйПериод);
		НаборЗаписей.Отбор.ОбособленноеПодразделение.Использование = Истина;
		НаборЗаписей.Отбор.ФизЛицо.Использование = Истина;
		НаборЗаписей.Отбор.Год.Использование = Истина;		
		Если НачисленоНаСтраховуюЧастьПФР <> 0 Или НачисленоНаНакопительнуюЧастьПФР <> 0 
			Или НачисленоПоДополнительномуТарифу <> 0
			Или МесяцыБолезни <> 0 Или ДниБолезни <> 0
			Или МесяцыОтпускаЗаСвойСчет <> 0 Или ДниОтпускаЗаСвойСчет <> 0 Тогда
			Запись = НаборЗаписей.Добавить();
			Запись.ФизЛицо = НаборИзмерений.ФизЛицо;
			Запись.ОбособленноеПодразделение = НаборИзмерений.Организация;
			Запись.Год = Год(НаборИзмерений.ОтчетныйПериод);
			Запись.НачисленоНаСтраховуюЧастьПФР = НачисленоНаСтраховуюЧастьПФР;
			Запись.НачисленоНаНакопительнуюЧастьПФР = НачисленоНаНакопительнуюЧастьПФР;
			Запись.НачисленоПоДополнительномуТарифу = НачисленоПоДополнительномуТарифу;
			Запись.НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР = НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР;
			Запись.НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР = НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР;
			Запись.ДнейБолезни = МесяцыБолезни*30 + ДниБолезни;
			Запись.ДнейОтпускаЗаСвойСчет = МесяцыОтпускаЗаСвойСчет*30 + ДниОтпускаЗаСвойСчет;
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЕсли;
	
	// Сохранение данных о стаже
	
	//перед записью строк стажа пронумеруем записи
	Если НЕ ВыполнитьНумерациюЗаписейОСтаже() тогда 
		Возврат Ложь;
	КонецЕсли;	 
	
	НачатьТранзакцию();
	ЗаписиОСтаже.Записать();
	
	//Выполним проверку правильности ввода данных
		
	Если ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		
		СтруктураПараметровПроверки = Новый Структура("МассивФизЛиц, МассивОбособленныхПодразделений, МассивЛет",ФизЛицо,Организация,Год(ОтчетныйПериод));
		
		Если ПроцедурыПерсонифицированногоУчета.СЗВ4_ПроверитьНаборЗаписейОСтаже("НаборЗаписей", СтруктураПараметровПроверки) Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			
			ОтменитьТранзакцию();
			
			Текст = "При проверке введенных данных в записи о стаже обнаружены ошибки!"+Символы.ПС+"Записать с ошибками?";
			
			Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, );

			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ЗаписиОСтаже.Записать()
			
		КонецЕсли;
		
	Иначе
		
		ТаблицаФизлиц = Новый ТаблицаЗначений;
		ТаблицаФизлиц.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ТаблицаФизлиц.Колонки.Добавить("ФизЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаФизлиц.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаФизлиц.Колонки.Добавить("КатегорияЗастрахованныхЛиц", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииЗастрахованныхЛицПФР"));
		ТаблицаФизлиц.Колонки.Добавить("ОтчетныйПериод", Новый ОписаниеТипов("Дата"));
		
		СтрокаПроверки = ТаблицаФизлиц.Добавить();
		СтрокаПроверки.ФизЛицо = НаборИзмерений.ФизЛицо;
		СтрокаПроверки.Организация = НаборИзмерений.Организация;
		СтрокаПроверки.ОтчетныйПериод = НаборИзмерений.ОтчетныйПериод;
		СтрокаПроверки.КатегорияЗастрахованныхЛиц = НаборИзмерений.КатегорияЗастрахованныхЛиц;
		СтрокаПроверки.НомерСтроки = 1;
		
		Если ПроцедурыПерсонифицированногоУчета.СЗВ6_ПроверитьНаборЗаписейОСтаже("НаборЗаписей", ТаблицаФизлиц) Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			
			ОтменитьТранзакцию();
			
			Текст = "При проверке введенных данных в записи о стаже обнаружены ошибки!"+Символы.ПС+"Записать с ошибками?";
			
			Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, );

			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ЗаписиОСтаже.Записать()
			
		КонецЕсли;
		
	КонецЕсли;
	
	// После записи данные являются не модифицированнными
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции // ВыполнитьСохранениеДанных()

// Определяет организацию, в которой работал работник на заданную дату
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПолучитьОрганизациюНаДату(ДатаАктуальности)

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДатаАктуальности",			ДатаАктуальности);
	Запрос.УстановитьПараметр("ФизЛицо",					ФизЛицо);
	Запрос.УстановитьПараметр("ВнутреннееСовместительство",	Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизаций.ОбособленноеПодразделение КАК Организация
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.Сотрудник.Физлицо = &Физлицо
	|	И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство
	|	И РаботникиОрганизаций.Период <= &ДатаАктуальности
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.Организация;
		
	Иначе
		Возврат Справочники.Организации.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции // ПолучитьОрганизациюНаДату()

// Формирует начало сообщения об ошибке, найденной в записи о стаже
Функция СформироватьЗаголовокОшибкиЗаписиОСтажеСЗВ4(Запись, ОсновнаяЗапись) 
	
	ЗаголовокСообщения = "Организация: " + СокрЛП(Запись.ОбособленноеПодразделение);

	Если ЗначениеЗаполнено(ОсновнаяЗапись.ДатаНачалаПериода) тогда
		ЗаголовокСообщения = ЗаголовокСообщения + ", Период: "+Формат(ОсновнаяЗапись.ДатаНачалаПериода,"ДФ='дд.ММ.гггг'")+"-"+Формат(ОсновнаяЗапись.ДатаОкончанияПериода,"ДФ='дд.ММ.гггг'");
	иначе
		ЗаголовокСообщения = ЗаголовокСообщения + ", Основная запись № "+ОсновнаяЗапись.НомерОсновнойЗаписи;
	КонецЕсли;	 

	Если Запись.НомерДополнительнойЗаписи <> 0 тогда
		ЗаголовокСообщения = ЗаголовокСообщения + ", Дополнительная запись № "+Запись.НомерДополнительнойЗаписи;
	КонецЕсли;	

	ЗаголовокСообщения = ЗаголовокСообщения + ":"+Символы.ПС;

	Возврат ЗаголовокСообщения;
	
КонецФункции // СформироватьЗаголовокОшибкиЗаписиОСтажеСЗВ4()	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если Не ЗначениеЗаполнено(ОтчетныйПериод) Тогда
		ОтчетныйПериод = ПроцедурыПерсонифицированногоУчета.ПредшествующийОтчетныйПериодПерсучета(ОбщегоНазначения.ПолучитьРабочуюДату());
	КонецЕсли;
 	МесяцСтрока = ПредставлениеПериода(НачалоГода(ОтчетныйПериод), ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод), "ФП = Истина" );

	Если ЗначениеЗаполнено(ФизЛицо) и НЕ ЗначениеЗаполнено(Организация) Тогда
		// Из организаций по умолчанию возьмём ту, в которой работник работал на конец выбранного года
		Организация = ПолучитьОрганизациюНаДату(ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод));
	ИначеЕсли НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация")
	КонецЕсли; 
	
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// заполним список доступных кодов особых условий труда
	СписокПредопределенныхКодов = Новый СписокЗначений;
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_1,"27-1");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_10,"27-10");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_2,"27-2");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_3,"27-3");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_4,"27-4");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_5,"27-5");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_6,"27-6");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_7,"27-7");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_8,"27-8");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст27_9,"27-9");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст28_ОС,"28-ОС");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст28_ПЖ,"28-ПЖ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.Ст28_СЕВ,"28-СЕВ");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
			               |	ОсобыеУсловияТруда.Код КАК Код,
			               |	ОсобыеУсловияТруда.Ссылка
			               |ИЗ
			               |	Справочник.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда
			               |
			               |ГДЕ
			               |	(НЕ(ОсобыеУсловияТруда.Предопределенный))
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	Код");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокПредопределенныхКодов.Добавить(Выборка.Ссылка, Выборка.Код);
	КонецЦикла;  
	
	ЭлементыФормы.ЗаписиОСтаже.Колонки.ОсобыеУсловияТруда.ЭлементУправления.СписокВыбора = СписокПредопределенныхКодов;
	ЭлементыФормы.ЗаписиОСтаже1.Колонки.ОсобыеУсловияТруда.ЭлементУправления.СписокВыбора = СписокПредопределенныхКодов;
	
	// запоним список доступных кодов выслуги лет
	
	СписокПредопределенныхКодов = Новый СписокЗначений;
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст27_11ГР,"27-11ГР");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст27_11ВП,"27-11ВП");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст27_12,"27-12");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст27_14,"27-14");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст27_15,"27-15");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст28_СП,"28-СП");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст28_ПД,"28-ПД");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст28_ПДРК,"28-ПДРК");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст28_ГД,"28-ГД");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст28_СМ,"28-СМ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст28_ГДХР,"28-ГДХР");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.Ст28_СМХР,"28-СМХР");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ТВОРЧ15,"ТВОРЧ15");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ТВОРЧ20,"ТВОРЧ20");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ТВОРЧ25,"ТВОРЧ25");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ТВОРЧ30,"ТВОРЧ30");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.САМОЛЕТ,"САМОЛЕТ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.СПЕЦАВ,"СПЕЦАВ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.СПАСАВ,"СПАСАВ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.УЧЛЕТ,"УЧЛЕТ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ВЫСШПИЛ,"ВЫСШПИЛ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.НОРМАПР,"НОРМАПР");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.НОРМСП,"НОРМСП");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.РЕАКТИВН,"РЕАКТИВН");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ЛЕТРАБ,"ЛЕТРАБ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ЛЕТИСП,"ЛЕТИСП");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ОПЫТИСП,"ОПЫТИСП");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ИСПКЛС1,"ИСПКЛС1");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ИТСИСП,"ИТСИСП");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ИТСМАВ,"ИТСМАВ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ИНСПЕКТ,"ИНСПЕКТ");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОснованияВыслугиЛет.Код КАК Код,
	               |	ОснованияВыслугиЛет.Ссылка
	               |ИЗ
	               |	Справочник.ОснованияВыслугиЛет КАК ОснованияВыслугиЛет
	               |
	               |ГДЕ
	               |	(НЕ(ОснованияВыслугиЛет.Предопределенный))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокПредопределенныхКодов.Добавить(Выборка.Ссылка, Выборка.Код);
	КонецЦикла;  
	
	ЭлементыФормы.ЗаписиОСтаже.Колонки.ОснованиеВыслугиЛет.ЭлементУправления.СписокВыбора = СписокПредопределенныхКодов;
	ЭлементыФормы.ЗаписиОСтаже1.Колонки.ОснованиеВыслугиЛет.ЭлементУправления.СписокВыбора = СписокПредопределенныхКодов;
	
	// запоним список доступных кодов исчисляемого стажа
	
	СписокПредопределенныхКодов = Новый СписокЗначений;
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ,"ВОДОЛАЗ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияИсчисляемогоТрудовогоСтажа.УИК104,"УИК104");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияИсчисляемогоТрудовогоСтажа.СЕЗОН,"СЕЗОН");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОснованияИсчисляемогоТрудовогоСтажа.Код КАК Код,
	               |	ОснованияИсчисляемогоТрудовогоСтажа.Ссылка
	               |ИЗ
	               |	Справочник.ОснованияИсчисляемогоТрудовогоСтажа КАК ОснованияИсчисляемогоТрудовогоСтажа
	               |
	               |ГДЕ
	               |	(НЕ(ОснованияИсчисляемогоТрудовогоСтажа.Предопределенный))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокПредопределенныхКодов.Добавить(Выборка.Ссылка, Выборка.Код);
	КонецЦикла;  
	ЭлементыФормы.ЗаписиОСтаже.Колонки.ОснованиеИсчисляемогоСтажа.ЭлементУправления.СписокВыбора = СписокПредопределенныхКодов;
	ЭлементыФормы.ЗаписиОСтаже1.Колонки.ОснованиеИсчисляемогоСтажа.ЭлементУправления.СписокВыбора = СписокПредопределенныхКодов;

	ПоказатьЭлементыФормы();
	
	// установим использование отборов и признаки автообновления данных
	ЗаписиОСтаже.Отбор.Физлицо.Использование = Истина;
	ЗаписиОСтаже.Отбор.ОтчетныйПериод.Использование = Истина;
	ЗаписиОСтаже.Отбор.ОбособленноеПодразделение.Использование = Истина;
	ЗаписиОСтаже.Отбор.КатегорияЗастрахованныхЛиц.Использование = Истина;
	ЭлементыФормы.ЗаписиОСтаже.ОбновлятьПриИзмененииОтбора = Истина;
	ЭлементыФормы.ЗаписиОСтаже1.ОбновлятьПриИзмененииОтбора = Истина;
	
	// Загрузим данные о стаже и заработке
	ПрочитатьДанные();
	
	ЭтаФорма.ТолькоПросмотр = ТолькоЧтение;
	
	ЭлементыФормы.ПанельАВИА.Свертка= РежимСверткиЭлементаУправления.Нет;
	
	Если НЕ ИспользоватьМежрасчетныйПериод Тогда
		ДатаОкончанияМежрасчетногоПериода = ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод);
	КонецЕсли;
	ЭлементыФормы.ДатаОкончанияМежрасчетногоПериода.ТолькоПросмотр = Не ИспользоватьМежрасчетныйПериод;
	
	УстановитьВидимостьПанелиВсеСуммыСтраховыхВзносов();
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	 
	 Отказ = НЕ ВыполнитьСохранениеДанных(Новый Структура("Организация, ФизЛицо, ОтчетныйПериод, КатегорияЗастрахованныхЛиц", Организация, ФизЛицо, ОтчетныйПериод, КатегорияЗастрахованныхЛиц));
	 
 КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ДЕЙСТВИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события нажатия кнопки "ОК" 
Процедура ОсновныеДействияФормыОК(Кнопка)
	 Если ВыполнитьСохранениеДанных(Новый Структура("Организация, ФизЛицо, ОтчетныйПериод, КатегорияЗастрахованныхЛиц", Организация, ФизЛицо, ОтчетныйПериод, КатегорияЗастрахованныхЛиц), Ложь) тогда
		 Закрыть();
	 КонецЕсли;	 
 КонецПроцедуры

Процедура ДействияФормыЗаполнитьВсе(Кнопка)
	
	Если Не ЗначениеЗаполнено(ФизЛицо) Или Не ЗначениеЗаполнено(Организация) Тогда
		Возврат
	КонецЕсли;
	
	НачалоГода = ОтчетныйПериод;
	КонецГода = ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод);
	СписокФизЛиц = Новый СписокЗначений;
	СписокФизЛиц.Добавить(ФизЛицо);
	
	Если ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		
		Если ЗаписиОСтаже.Количество()>0 Или НачисленоНаСтраховуюЧастьПФР <> 0 Или НачисленоНаНакопительнуюЧастьПФР <> 0 Или НачисленоПоДополнительномуТарифу <> 0 Тогда
		
			Вопрос = "Текущие данные будут очищены. Продолжить?";
			Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ДаНет);
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли; 	
		
		// Расчет начисленных взносов
		ВыполнитьРасчетНачисленныхВзносов();
		
		МесяцыБолезни = 0;
		ДнейБолезни = 0;
		МесяцыОтпускаЗаСвойСчет = 0;
		ДниОтпускаЗаСвойСчет = 0;
 
	
		/////////////////////////////////////////////////////////////////////////////////////
		// РАСЧЕТ СТАЖА 
		
		// Получим данные о стаже и загрузим их в набор записей 
		ТаблицаСтажа = ПроцедурыПерсонифицированногоУчета.СЗВ6_ПолучитьДанныеДляЗаполненияСтажа(Организация, ОтчетныйПериод, ?(ИспользоватьМежрасчетныйПериод, ДатаОкончанияМежрасчетногоПериода, ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод)), СписокФизЛиц, КатегорияЗастрахованныхЛиц);
		
	Иначе
		
		Если ЗаписиОСтаже.Количество()>0 Тогда
			
			Вопрос = "Текущие данные будут очищены. Продолжить?";
			Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ДаНет);
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли; 	
		
		/////////////////////////////////////////////////////////////////////////////////////
		// РАСЧЕТ СТАЖА 
		
		// Получим данные о стаже и загрузим их в набор записей 
		ТаблицаСтажа = ПроцедурыПерсонифицированногоУчета.СЗВ6_ПолучитьДанныеДляЗаполненияСтажа(Организация, ОтчетныйПериод, ?(ИспользоватьМежрасчетныйПериод, ДатаОкончанияМежрасчетногоПериода, ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод)), СписокФизЛиц, КатегорияЗастрахованныхЛиц);
		
	КонецЕсли;
	
	ЗаписиОСтаже.Загрузить(ТаблицаСтажа);

	Модифицированность = Истина;

КонецПроцедуры



//Процедура автоматически располагает записи о стаже в календарном порядке
Процедура КоманднаяПанельСтажаРасположить(Кнопка)

	Если НЕ ВыполнитьНумерациюЗаписейОСтаже() тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗаписейОСтаже = ЗаписиОСтаже.Выгрузить();

	//Дополнительным записям проставим даты начала и окончания периода
	ТекущаяОсновнаяЗапись = Неопределено;
	Для Каждого Запись из ТаблицаЗаписейОСтаже цикл

		Если Запись.НомерДополнительнойЗаписи = 0 тогда
			ТекущаяОсновнаяЗапись = Запись;
		Иначе
			Запись.ДатаНачалаПериода = ТекущаяОсновнаяЗапись.ДатаНачалаПериода;
			Запись.ДатаОкончанияПериода = ТекущаяОсновнаяЗапись.ДатаОкончанияПериода;
		КонецЕсли;	 
	КонецЦикла;

	//Отсортируем таблицу по датам и номерам записей	
	ТаблицаЗаписейОСтаже.Сортировать("ДатаНачалаПериода,НомерДополнительнойЗаписи");

	//Уберем даты у дополнительных записей
	Для Каждого Запись из ТаблицаЗаписейОСтаже цикл
		Если Запись.НомерДополнительнойЗаписи <> 0 тогда
			Запись.ДатаНачалаПериода = "";
			Запись.ДатаОкончанияПериода = "";
		КонецЕсли;	 
	КонецЦикла;

	//Выложим результат сортировки
	ЗаписиОСтаже.Загрузить(ТаблицаЗаписейОСтаже);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" организации, подающей сведения
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПрежняяОрганизация = ЗаписиОСтаже.Отбор.ОбособленноеПодразделение.Значение;
	Если ЗначениеЗаполнено(ПрежняяОрганизация) Тогда
		Если ВыполнитьСохранениеДанных(Новый Структура("Организация, ФизЛицо, ОтчетныйПериод, КатегорияЗастрахованныхЛиц", ПрежняяОрганизация, ФизЛицо, ОтчетныйПериод, КатегорияЗастрахованныхЛиц) ) Тогда
			// Считаем данные по новому набору измерений
			ПрочитатьДанные();
		Иначе//Записать данные по прежней организации не удалось, поэтому организацию вернём назад	
			Элемент.Значение = ПрежняяОрганизация;
		КонецЕсли;
	Иначе
		ПрочитатьДанные();	
	КонецЕсли;
	
	ОбновитьКатегориюЗЛ();
	
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	УстановитьВидимостьПанелиВсеСуммыСтраховыхВзносов();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ФизЛицоПриИзменении(Элемент)
	
	ПрежнееФизЛицо = ЗаписиОСтаже.Отбор.Физлицо.Значение;
	Если ЗначениеЗаполнено(ПрежнееФизЛицо) Тогда
		Если ВыполнитьСохранениеДанных(Новый Структура("Организация, ФизЛицо, ОтчетныйПериод, КатегорияЗастрахованныхЛиц", Организация, ПрежнееФизЛицо, ОтчетныйПериод, КатегорияЗастрахованныхЛиц) ) Тогда
			// Считаем данные по новому набору измерений
			ПрочитатьДанные();
		Иначе//Записать данные по прежнему физлицу не удалось, поэтому вернём физлицо назад	
			Элемент.Значение = ПрежнееФизЛицо;
		КонецЕсли; 
	Иначе
		ПрочитатьДанные();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, "СЗВ4", Истина, Неопределено, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура ФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) и ЗначениеЗаполнено(ФизЛицо) тогда
		Если ВыполнитьСохранениеДанных(Новый Структура("Организация, ФизЛицо, ОтчетныйПериод, КатегорияЗастрахованныхЛиц", Организация, Физлицо, ОтчетныйПериод, КатегорияЗастрахованныхЛиц)) Тогда
			// Считаем данные по новому набору измерений
			Физлицо	= ВыбранноеЗначение.Физлицо;
			Если мГоловнаяОрганизация <> ВыбранноеЗначение.Организация Тогда
				Организация	= ВыбранноеЗначение.Организация;
			КонецЕсли;
			ПрочитатьДанные();
		КонецЕсли;
	Иначе
		Физлицо	= ВыбранноеЗначение.Физлицо;
		Если мГоловнаяОрганизация <> ВыбранноеЗначение.Организация Тогда
			Организация	= ВыбранноеЗначение.Организация;
		КонецЕсли;
		ПрочитатьДанные();
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОСотрудника(СтандартнаяОбработка, 1, Текст, Организация, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокСотрудников(СтандартнаяОбработка, 1, Текст, Организация, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ОтчетныйПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если ОтчетныйПериод < '20100101' Тогда
		ОтчетныйПериод = ДобавитьМесяц(ОтчетныйПериод, Направление * 12);
	ИначеЕсли ОтчетныйПериод = '20100101' Тогда
		Если Направление = 1 Тогда
			ОтчетныйПериод = '20100701'
		Иначе 	
			ОтчетныйПериод = '20090101'
		КонецЕсли;
	ИначеЕсли ОтчетныйПериод = '20100701' Тогда
		ОтчетныйПериод = ДобавитьМесяц(ОтчетныйПериод, Направление * 6);
	ИначеЕсли ОтчетныйПериод = '20110101' И Направление = -1 Тогда
		ОтчетныйПериод = '20100701'
	Иначе
		ОтчетныйПериод = ДобавитьМесяц(ОтчетныйПериод, Направление * 3);
	КонецЕсли;
	
	Прежний = ЗаписиОСтаже.Отбор.ОтчетныйПериод.Значение;
	Если ЗначениеЗаполнено(Прежний) Тогда
		Если ВыполнитьСохранениеДанных(Новый Структура("Организация, ФизЛицо, ОтчетныйПериод, КатегорияЗастрахованныхЛиц", Организация, ФизЛицо, Прежний, КатегорияЗастрахованныхЛиц)) Тогда
			ПоказатьЭлементыФормы();
			// Считаем данные по новому набору измерений
			ПрочитатьДанные();
		Иначе//Записать данные за прежний год не удалось, поэтому год вернём назад	
			ОтчетныйПериод = Прежний;
		КонецЕсли; 
	Иначе
		ПоказатьЭлементыФормы();
		ПрочитатьДанные();
	КонецЕсли;
	
	ДатаОкончанияМежрасчетногоПериода = ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод);
	Элемент.Значение = ПредставлениеПериода(НачалоГода(ОтчетныйПериод), ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод), "ФП = Истина" );
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

Процедура КатегорияЗастрахованныхЛицПриИзменении(Элемент)
	ПрежняяКатегория = ЗаписиОСтаже.Отбор.КатегорияЗастрахованныхЛиц.Значение;
	Если ЗначениеЗаполнено(ПрежняяКатегория) Тогда
		Если ВыполнитьСохранениеДанных(Новый Структура("Организация, ФизЛицо, ОтчетныйПериод, КатегорияЗастрахованныхЛиц", Организация, ФизЛицо, ОтчетныйПериод, ПрежняяКатегория)) Тогда
			// Считаем данные по новому набору измерений
			ПрочитатьДанные();
		Иначе//Записать данные по прежнему физлицу не удалось, поэтому вернём физлицо назад	
			Элемент.Значение = ПрежняяКатегория;
		КонецЕсли; 
	Иначе
		ПрочитатьДанные();
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ  "ЗаписиОСтаже"

// Процедура - обработчик события "ПриВыводеСтроки" табличной части  
Процедура ЗаписиОСтажеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеЯчеек = ОформлениеСтроки.Ячейки;
    // не показываем первую "подстрочку"
	ОформлениеЯчеек.НевидимаяКолонка1.Видимость = Ложь;
    ОформлениеЯчеек.НевидимаяКолонка2.Видимость = Ложь;
    ОформлениеЯчеек.НевидимаяКолонка3.Видимость = Ложь;
	ОформлениеЯчеек.НевидимаяКолонка4.Видимость = Ложь;
	ОформлениеЯчеек.НевидимаяКолонка5.Видимость = Ложь;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" даты начала периода работы
Процедура ЗаписиОСтажеДатаНачалаПериодаПриИзменении(Элемент)
	
	ПроверяемаяДата = Элемент.Значение;
	Если ЗначениеЗаполнено(ПроверяемаяДата) И (ПроверяемаяДата < ОтчетныйПериод Или ПроверяемаяДата > ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод))  Тогда
		Предупреждение("Дата начала периода работы должна быть в рамках отчетного периода!");		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" даты окончания периода работы
Процедура ЗаписиОСтажеДатаОкончанияПериодаПриИзменении(Элемент)
	
	ПроверяемаяДата = Элемент.Значение;
	Если ЗначениеЗаполнено(ПроверяемаяДата) И (ПроверяемаяДата < ОтчетныйПериод Или ПроверяемаяДата > ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод))  Тогда
		Предупреждение("Дата окончания периода работы должна быть в рамках отчетного периода!");		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора"
Процедура ЗаписиОСтажеОсобыеУсловияТрудаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора"
Процедура ЗаписиОСтажеОснованиеИсчисляемогоСтажаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора"
Процедура ЗаписиОСтажеОснованиеВыслугиЛетНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента ИспользоватьМежрасчетныйПериод
Процедура ИспользоватьМежрасчетныйПериодПриИзменении(Элемент)
	ЭлементыФормы.ДатаОкончанияМежрасчетногоПериода.ТолькоПросмотр = Не ИспользоватьМежрасчетныйПериод;
	Если НЕ ИспользоватьМежрасчетныйПериод Тогда
		ДатаОкончанияМежрасчетногоПериода = ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод);
	КонецЕсли;
КонецПроцедуры

Процедура ОсновныеДействияФормыЗаполнитьВсе(Кнопка)
	ДействияФормыЗаполнитьВсе(Кнопка);
КонецПроцедуры

Процедура ЗаписиОСтаже1ПриПолученииДанных(Элемент, ОформленияСтрок)
	
	// уберем ненужные ячейки колонок заголовка
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОформлениеЯчеек = ОформлениеСтроки.Ячейки;
		ОформлениеЯчеек.НевидимаяКолонка1.Видимость = Ложь;
		ОформлениеЯчеек.НевидимаяКолонка2.Видимость = Ложь;
		ОформлениеЯчеек.НевидимаяКолонка3.Видимость = Ложь;
		ОформлениеЯчеек.НевидимаяКолонка4.Видимость = Ложь;
		ОформлениеЯчеек.НевидимаяКолонка5.Видимость = Ложь;
		ОформлениеЯчеек.НевидимаяКолонка6.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ


