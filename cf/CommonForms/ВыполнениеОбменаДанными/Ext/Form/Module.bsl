&НаКлиенте
Перем ПолеСтраницыСтатусаЗагрузкиДанных;

&НаКлиенте
Перем ПолеСтраницыСтатусаВыгрузкиДанных;

&НаКлиенте
Перем ПолеЗаголовкиГиперссылокЗагрузкиДанных;

&НаКлиенте
Перем ПолеЗаголовкиГиперссылокВыгрузкиДанных;

&НаКлиенте
Перем ПолеОтказ;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УзелИнформационнойБазы = Параметры.УзелИнформационнойБазы;
	
	Если Не ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
		ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Не заданы параметры формы. Форма не может быть открыта.'"), Отказ);
		Возврат;
	КонецЕсли;
	
	// выполняем проверку на то, что в подчиненном узле РИБ настройка обмена была выполнена полностью
	НастройкаПодчиненногоУзлаРИБЗавершена = Истина;
	
	ЭтоПодчиненныйУзелРИБ = ПланыОбмена.ГлавныйУзел() <> Неопределено;
	
	Если ЭтоПодчиненныйУзелРИБ Тогда
		
		ИмяПланаОбменаРИБ = ПланыОбмена.ГлавныйУзел().Метаданные().Имя;
		ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
		
		Если ИмяПланаОбмена = ИмяПланаОбменаРИБ
			И Не Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Получить() Тогда
			
			НастройкаПодчиненногоУзлаРИБЗавершена = Ложь;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// получаем вид транспорта сообщений обмена по умолчанию для узла;
	// если значение по умолчанию не задано, то устанавливаем значение FILE
	ВидТранспортаСообщенийОбмена = РегистрыСведений.НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию(УзелИнформационнойБазы);
	Если Не ЗначениеЗаполнено(ВидТранспортаСообщенийОбмена) Тогда
		ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
	КонецЕсли;
	
	ОбменДаннымиСервер.ЗаполнитьСписокВыбораДоступнымиВидамиТранспорта(УзелИнформационнойБазы, Элементы.ВидТранспортаСообщенийОбмена);
	
	ПолучитьСостояниеОбменовДанными();
	
	// устанавливаем заголовок формы
	Заголовок = НСтр("ru = 'Обмен с информационной базой: %1'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, Строка(УзелИнформационнойБазы));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// открываем форму помощника настройки обмена, если настройка не была завершена.
	Если Не НастройкаПодчиненногоУзлаРИБЗавершена Тогда
		
		Предупреждение(НСтр("ru = 'Для выполнения обмена данными необходимо завершить настройку обмена с использованием помощника.'"));
		
		ПараметрыФормы = Новый Структура("ИмяПланаОбмена, ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ", ИмяПланаОбмена, Истина);
		ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.Форма", ПараметрыФормы);
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбновитьОтображениеЭлементовФормы();
	
	УстановитьДоступностьКнопкиОткрытияКаталогаОбмена();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ВыполнитьОбменДанными(Команда)
	
	ПолеОтказ = Ложь;
	
	// выполняем загрузку данных
	ПодключитьОбработчикОжидания("ВыполнитьЗагрузкуДанныхНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийВыгрузкиДанных(Команда)
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(УзелИнформационнойБазы, ЭтаФорма, "ВыгрузкаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийЗагрузкиДанных(Команда)
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(УзелИнформационнойБазы, ЭтаФорма, "ЗагрузкаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыТранспортаСообщенийОбмена(Команда)
	
	Отбор              = Новый Структура("Узел", УзелИнформационнойБазы);
	ЗначенияЗаполнения = Новый Структура("Узел", УзелИнформационнойБазы);
	
	ОбменДаннымиКлиент.ОткрытьФормуЗаписиРегистраСведенийПоОтбору(Отбор, ЗначенияЗаполнения, "НастройкиТранспортаОбмена", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогОбменаИнформацией(Команда)
	
	// Вызов сервера без контекста
	ИмяКаталога = ПолучитьИмяКаталогаНаСервере(ВидТранспортаСообщенийОбмена, УзелИнформационнойБазы);
	
	Если ПустаяСтрока(ИмяКаталога) Тогда
		Предупреждение(НСтр("ru = 'Каталог обмена информацией не задан!'"));
		Возврат;
	КонецЕсли;
	
	// открываем каталог в приложении explorer
	ЗапуститьПриложение(ИмяКаталога);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидТранспортаСообщенийОбменаПриИзменении(Элемент)
	
	УстановитьДоступностьКнопкиОткрытияКаталогаОбмена();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПолучитьСостояниеОбменовДанными()
	
	СостояниеОбменовДанными = РегистрыСведений.СостояниеОбменовДанными.СостояниеОбменовДаннымиДляУзлаИнформационнойБазы(УзелИнформационнойБазы);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СостояниеОбменовДанными, "РезультатЗагрузкиДанных, РезультатВыгрузкиДанных");
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуДанныхНаСервере(Отказ)
	
	// запускаем выполнение обмена
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Отказ, УзелИнформационнойБазы, Истина, Ложь, ВидТранспортаСообщенийОбмена);
	
	// обновляем данные формы
	ПолучитьСостояниеОбменовДанными();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьВыгрузкуДанныхНаСервере(Отказ)
	
	// запускаем выполнение обмена
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Отказ, УзелИнформационнойБазы, Ложь, Истина, ВидТранспортаСообщенийОбмена);
	
	// обновляем данные формы
	ПолучитьСостояниеОбменовДанными();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяКаталогаНаСервере(ВидТранспортаСообщенийОбмена, УзелИнформационнойБазы)
	
	Возврат РегистрыСведений.НастройкиТранспортаОбмена.ИмяКаталогаОбменаИнформацией(ВидТранспортаСообщенийОбмена, УзелИнформационнойБазы);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОтображениеЭлементовФормы()
	
	Элементы.СтраницыСтатусаЗагрузкиДанных.ТекущаяСтраница = Элементы[СтраницыСтатусаЗагрузкиДанных()[РезультатЗагрузкиДанных]];
	Элементы.СтраницыСтатусаВыгрузкиДанных.ТекущаяСтраница = Элементы[СтраницыСтатусаВыгрузкиДанных()[РезультатВыгрузкиДанных]];
	
	Элементы.ПерейтиВЖурналРегистрацииСобытийЗагрузкиДанных.Заголовок = ЗаголовкиГиперссылокЗагрузкиДанных()[РезультатЗагрузкиДанных];
	Элементы.ПерейтиВЖурналРегистрацииСобытийВыгрузкиДанных.Заголовок = ЗаголовкиГиперссылокВыгрузкиДанных()[РезультатВыгрузкиДанных];
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхНаКлиенте()
	
	Состояние(НСтр("ru = 'Выполняется загрузка данных...'"));
	
	// выполняем загрузку данных
	ВыполнитьЗагрузкуДанныхНаСервере(ПолеОтказ);
	
	ОбновитьОтображениеЭлементовФормы();
	
	Оповестить("ВыполненОбменДанными");
	
	// выполняем выгрузку данных
	ПодключитьОбработчикОжидания("ВыполнитьВыгрузкуДанныхНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузкуДанныхНаКлиенте()
	
	Состояние(НСтр("ru = 'Выполняется выгрузка данных...'"));
	
	// выполняем выгрузку данных
	ВыполнитьВыгрузкуДанныхНаСервере(ПолеОтказ);
	
	ОбновитьОтображениеЭлементовФормы();
	
	Оповестить("ВыполненОбменДанными");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопкиОткрытияКаталогаОбмена()
	
	Элементы.ОткрытьКаталогОбменаИнформацией.Доступность = Не (ВидТранспортаСообщенийОбмена = ПредопределенноеЗначение("Перечисление.ВидыТранспортаСообщенийОбмена.EMAIL"));
	
КонецПроцедуры

//

&НаКлиенте
Функция СтраницыСтатусаЗагрузкиДанных()
	
	Если ТипЗнч(ПолеСтраницыСтатусаЗагрузкиДанных) <> Тип("Структура") Тогда
		
		ПолеСтраницыСтатусаЗагрузкиДанных = ОбменДаннымиКлиент.СтраницыСтатусаЗагрузкиДанных();
		
	КонецЕсли;
	
	Возврат ПолеСтраницыСтатусаЗагрузкиДанных;
	
КонецФункции

&НаКлиенте
Функция СтраницыСтатусаВыгрузкиДанных()
	
	Если ТипЗнч(ПолеСтраницыСтатусаВыгрузкиДанных) <> Тип("Структура") Тогда
		
		ПолеСтраницыСтатусаВыгрузкиДанных = ОбменДаннымиКлиент.СтраницыСтатусаВыгрузкиДанных();
		
	КонецЕсли;
	
	Возврат ПолеСтраницыСтатусаВыгрузкиДанных;
КонецФункции

&НаКлиенте
Функция ЗаголовкиГиперссылокЗагрузкиДанных()
	
	Если ТипЗнч(ПолеЗаголовкиГиперссылокЗагрузкиДанных) <> Тип("Структура") Тогда
		
		ПолеЗаголовкиГиперссылокЗагрузкиДанных = ОбменДаннымиКлиент.ЗаголовкиГиперссылокЗагрузкиДанных();
		
	КонецЕсли;
	
	Возврат ПолеЗаголовкиГиперссылокЗагрузкиДанных;
	
КонецФункции

&НаКлиенте
Функция ЗаголовкиГиперссылокВыгрузкиДанных()
	
	Если ТипЗнч(ПолеЗаголовкиГиперссылокВыгрузкиДанных) <> Тип("Структура") Тогда
		
		ПолеЗаголовкиГиперссылокВыгрузкиДанных = ОбменДаннымиКлиент.ЗаголовкиГиперссылокВыгрузкиДанных();
		
	КонецЕсли;
	
	Возврат ПолеЗаголовкиГиперссылокВыгрузкиДанных;
КонецФункции
