
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Заполняет параметры учета
//
Процедура ОпределитьПараметрыУчета()

	БУ = ПланыСчетов.Хозрасчетный.Товары.ПолучитьОбъект();

	// Бухгалтерский учет
	ВестиПартионныйУчетБУ = НЕ (БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто") = Неопределено);
	ВестиСкладскойУчетБУ  = НЕ (БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено);
	Если ВестиСкладскойУчетБУ Тогда
		ВестиСуммовойУчетПоСкладамБУ = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой;
	Иначе
		ВестиСуммовойУчетПоСкладамБУ = Ложь;
	КонецЕсли;
	
	СкладскойУчетБУ = ?(ВестиСкладскойУчетБУ,?(ВестиСуммовойУчетПоСкладамБУ,2,1),0);
	
	//Розница
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	ИспользоватьОборотнуюНоменклатуру = НЕ (БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено);
	РазделятьПоСтавкамНДС  = НЕ (БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено);
	
	// Денежные средства
	БУ = ПланыСчетов.Хозрасчетный.Касса;
	ВестиУчетПоСтатьямДДС = НЕ (БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто") = Неопределено);
	
	//Работники
	БУ = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	ВестиУчетПоРаботникам = НЕ (БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") = Неопределено);
	УчетЗарплатыИКадровВоВнешнейПрограмме = ?(Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить(),1,0);

	// Налог на прибыль
	
	ПрименяютсяРазныеСтавкиНалогаНаПрибыль = Константы.ПрименяютсяРазныеСтавкиНалогаНаПрибыль.Получить();
	
	АвтоматическийУчетУСН = Не ЗначениеЗаполнено(ДатаНачалаАвтоматическогоОтраженияВУчетеУСН);
	АвтоматическийУчетНДС = Не ЗначениеЗаполнено(ДатаНачалаАвтоматическогоОтраженияВУчетеНДС);
	ДатаНачалаАвтоматическогоОтраженияВУчетеНДССтароеЗначение = ДатаНачалаАвтоматическогоОтраженияВУчетеНДС;
	ДатаНачалаАвтоматическогоОтраженияВУчетеУСНСтароеЗначение = ДатаНачалаАвтоматическогоОтраженияВУчетеУСН;
	
КонецПроцедуры // ОпределитьПараметрыУчета()

// Устанавливает субконто "Номенклатура" и "Контрагент" у указанного счета.
//
Процедура ПрименитьПараметрыСубконто(ИмяСчета, ИмяПланаСчетов, ЕстьКоличество, Партии, Склады, Суммы, ОбработкаПодчиненных = Истина, Отказ = Ложь)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВидСубконто = "ВидыСубконтоХозрасчетные";

	Попытка

		Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
		Счета = Новый СписокЗначений();
		Счета.Добавить(Счет);

		Если ОбработкаПодчиненных Тогда

			ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
			Пока ВыборкаСчетов.Следующий() Цикл

				Если (НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации)) И
					(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ)) И
					(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации)) И
					(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации)) И
					(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ)) И
                    (НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости)) Тогда
   					Счета.Добавить(ВыборкаСчетов.Ссылка);
				КонецЕсли;
				
			КонецЦикла;

		КонецЕсли;

		Для каждого Счет Из Счета Цикл

			Объект   = Счет.Значение.ПолучитьОбъект();
			КодСчета = Объект.Код;

			Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Номенклатура, "ВидСубконто");
			
			Сообщение = "";

			Номенклатура = Ложь;
			// Принудительно установим субконто Номенклатура на контролируемых счетах

			Если Субконто = Неопределено Тогда 

				Номенклатура = Истина;

				НовыйВид = Объект.ВидыСубконто.Добавить();
				НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Номенклатура;
				НовыйВид.Суммовой    = Истина;

				Если ЕстьКоличество Тогда
					НовыйВид.Количественный = Истина;
				КонецЕсли;
				
				Сообщение = Сообщение + " установлено субконто ""Номенклатура"",";

			КонецЕсли;

			Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Партии, "ВидСубконто");

			Если Партии = Истина Тогда // Добавляем 

				Если Субконто = Неопределено Тогда

					НовыйВид = Объект.ВидыСубконто.Добавить();

					НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Партии;
					НовыйВид.Суммовой    = Истина;

					Если ЕстьКоличество Тогда
						НовыйВид.Количественный = Истина;
					КонецЕсли;
					
					Сообщение = Сообщение + " установлено субконто ""Партии"",";

				КонецЕсли;

			ИначеЕсли Партии = Ложь Тогда // Удаляем

				Если Субконто <> Неопределено Тогда
					Объект.ВидыСубконто.Удалить(Субконто);
					Сообщение = Сообщение + " удалено субконто ""Партии"",";
				КонецЕсли;

			КонецЕсли;

			Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].СтавкиНДС, "ВидСубконто");
			
			Если Субконто <> Неопределено Тогда
				
				Объект.ВидыСубконто.Удалить(Субконто);
				Сообщение = Сообщение + " удалено субконто ""Ставки НДС"",";
				
			КонецЕсли;
			
			Если НЕ (Счет.Значение.Ссылка.ПринадлежитЭлементу(ПланыСчетов[ИмяПланаСчетов].МатериалыПереданныеВПереработку)
			 ИЛИ Счет.Значение.Ссылка.ПринадлежитЭлементу(ПланыСчетов[ИмяПланаСчетов].ТоварыОтгруженные)
			 ИЛИ Счет.Значение.Ссылка = ПланыСчетов[ИмяПланаСчетов].МатериалыПереданныеВПереработку
			 ИЛИ Счет.Значение.Ссылка = ПланыСчетов[ИмяПланаСчетов].ТоварыОтгруженные) Тогда

				Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Склады, "ВидСубконто");

				Если Склады ИЛИ Счет.Значение.Ссылка = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда // Добавляем 

					Если Субконто = Неопределено Тогда

						НовыйВид = Объект.ВидыСубконто.Добавить();

						НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Склады;

						Если ЕстьКоличество Тогда
							НовыйВид.Количественный = Истина;
						КонецЕсли;
						
						Сообщение = Сообщение + " установлено субконто ""Склады"",";

					КонецЕсли;

				ИначеЕсли НЕ Склады Тогда // Удаляем

					Если Субконто <> Неопределено Тогда
						Объект.ВидыСубконто.Удалить(Субконто);
						Сообщение = Сообщение + " удалено субконто ""Склады"",";
					КонецЕсли;
					
				КонецЕсли;

				Если Склады ИЛИ Счет.Значение.Ссылка = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
					
					Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Склады, "ВидСубконто");
					Если (Счет.Значение.Ссылка = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ) Тогда
						Если (НЕ Субконто.Суммовой) Тогда
					    	Субконто.Суммовой = Истина;
							Сообщение = Сообщение + " у субконто ""Склады"" изменен признак суммового учета,";
						КонецЕсли;
					ИначеЕсли НЕ Субконто.Суммовой = Суммы Тогда
						Субконто.Суммовой = Суммы;
						Сообщение = Сообщение + " у субконто ""Склады"" изменен признак суммового учета,";
					КонецЕсли;
					
				КонецЕсли;

			КонецЕсли;
			
			Если Сообщение <> "" Тогда
				Сообщение = "План счетов """ + ИмяПланаСчетов + """, счет """ +Строка(Объект) + """:" +  Сообщение;
				
				Если Прав(Сообщение, 1) = "," Тогда
					Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
				КонецЕсли;

				Сообщить(Сообщение);
			КонецЕсли;
			
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли; 

		КонецЦикла;

	Исключение

		Сообщить("Счет """ + Строка(КодСчета) + """:");
		Сообщить(ОписаниеОшибки());
		Отказ = Истина;
		
	КонецПопытки;

КонецПроцедуры // ПрименитьПараметрыСубконто()

Процедура УстановитьАналитикуРозницыПоПродажнымЦенам(Отказ = Ложь)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ВидСубконто = "ВидыСубконтоХозрасчетные";
	
	Счета = Новый СписокЗначений();
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
	
	Попытка
		
		Для Каждого Счет Из Счета Цикл
			Объект   = Счет.Значение.ПолучитьОбъект();
			КодСчета = Объект.Код;

			Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Номенклатура, "ВидСубконто");
			Сообщение = "";
			
			Если (КодСчета = "41.12") И
				(ИспользоватьОборотнуюНоменклатуру) Тогда
				Если (Субконто = Неопределено) Тогда 
					НовыйВид = Объект.ВидыСубконто.Вставить(0);
					НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Номенклатура;
					НовыйВид.Суммовой    = Истина;
					НовыйВид.ТолькоОбороты = Истина;
					Сообщение = Сообщение + " установлено субконто ""Номенклатура"",";
				КонецЕсли;
			Иначе
				Если Субконто <> Неопределено Тогда
					Объект.ВидыСубконто.Удалить(Субконто);
					Сообщение = Сообщение + " удалено субконто ""Номенклатура"",";
				КонецЕсли;
			КонецЕсли;
			
			Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Партии, "ВидСубконто");
			
			Если Субконто <> Неопределено Тогда
				Объект.ВидыСубконто.Удалить(Субконто);
				Сообщение = Сообщение + " удалено субконто ""Партии"",";
			КонецЕсли;
			
			Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Склады, "ВидСубконто");
			
			Если Субконто = Неопределено Тогда
				
				НовыйВид = Объект.ВидыСубконто.Добавить();
				НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Склады;
				Сообщение = Сообщение + " установлено субконто ""Склады"",";
				
			КонецЕсли;
					
			Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Склады, "ВидСубконто");
			Если НЕ Субконто.Суммовой Тогда
				Субконто.Суммовой = Истина;
				Сообщение = Сообщение + " у субконто ""Склады"" изменен признак суммового учета,";
			КонецЕсли;
			
			Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].СтавкиНДС, "ВидСубконто");
			
			Если РазделятьПоСтавкамНДС Тогда
				Если Субконто = Неопределено Тогда
					НовыйВид = Объект.ВидыСубконто.Добавить();
					НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].СтавкиНДС;
					НовыйВид.Суммовой = Истина;
					Сообщение = Сообщение + " установлено субконто ""Ставки НДС"",";
				КонецЕсли;
			Иначе
				Если Субконто <> Неопределено Тогда
					Объект.ВидыСубконто.Удалить(Субконто);
					Сообщение = Сообщение + " удалено субконто ""Ставки НДС"",";
				КонецЕсли;
			КонецЕсли;
			
			Если Сообщение <> "" Тогда
				Сообщение = "План счетов ""Хозрасчетный"", счет """ +Строка(Объект) + """:" +  Сообщение;
				
				Если Прав(Сообщение, 1) = "," Тогда
					Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
				КонецЕсли;

				Сообщить(Сообщение);
			КонецЕсли;
			
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли;
			
		КонецЦикла;
				
	Исключение
		
		Сообщить("Счет """ + Строка(КодСчета) + """:");
		Сообщить(ОписаниеОшибки());
		Отказ = Истина;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПрименитьПараметрыДляСчетовДенежныхСредств(НуженУчетПоСтатьямДДС, Отказ = Ложь)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	// Устанавливаем/удаляем аналитику по статьям движения на счетах учета денежных средств
	
	Счета = Новый Массив;
	// Счет 50
	Счета.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);
	// Счет 51
	Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	// Счет 52
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	// Счет 55
	Счета.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.Аккредитивы);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ЧековыеКнижки);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ДепозитныеСчета);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.АккредитивыВал);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ДепозитныеСчетаВал);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчетаВал);
	// Счет 57
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПутиВал);
		
	Для каждого Счет Из Счета Цикл
		
		СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто");
		НетУчетаПоСтатьямДДС = СтрокаВидаСубконто = Неопределено;
		
		Если НуженУчетПоСтатьямДДС И НетУчетаПоСтатьямДДС Тогда
			
			СчетОбъект = Счет.ПолучитьОбъект();
			НовыйВидСубконто = СчетОбъект.ВидыСубконто.Добавить();
			НовыйВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
			НовыйВидСубконто.ТолькоОбороты = Истина;
			НовыйВидСубконто.Суммовой = Истина;
			НовыйВидСубконто.Валютный = Истина;
			
			Попытка
		    	СчетОбъект.Записать();
				Сообщить("План счетов ""Хозрасчетный"", счет """ + СчетОбъект.Код + """ - установлено субконто ""Статьи движения денежных средств""");
			Исключение
				Сообщить("Счет """ + СчетОбъект.Код + """:");
				Сообщить(ОписаниеОшибки());
				Отказ = Истина;
				Возврат;
			КонецПопытки
			
		ИначеЕсли НЕ НуженУчетПоСтатьямДДС И НЕ НетУчетаПоСтатьямДДС Тогда
			
			СчетОбъект = Счет.ПолучитьОбъект();
			СтрокаДляУдаления = СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто");
			СчетОбъект.ВидыСубконто.Удалить(СтрокаДляУдаления);
			
			Попытка
		    	СчетОбъект.Записать();
				Сообщить("План счетов ""Хозрасчетный"", счет """ + СчетОбъект.Код + """ - удалено субконто ""Статьи движения денежных средств""");
			Исключение
				Сообщить("Счет """ + СчетОбъект.Код + """:");
				Сообщить(ОписаниеОшибки());
				Отказ = Истина;
				Возврат;
			КонецПопытки
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Устанавливает субконто расчетные документы у указанного счета.
//
Процедура ПрименитьПараметрыРасчетовССотрудниками(ИмяСчета, ИмяПланаСчетов, ВестиУчетПоРаботникам, Отказ = Ложь)
	
	Если Отказ Тогда
		Возврат
	КонецЕсли; 
	
	Попытка

		Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
		Счета = Новый СписокЗначений();
		Счета.Добавить(Счет);

		ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
		Пока ВыборкаСчетов.Следующий() Цикл

			Счета.Добавить(ВыборкаСчетов.Ссылка);

		КонецЦикла;

		Для каждого Счет Из Счета Цикл

			Объект   = Счет.Значение.ПолучитьОбъект();
			КодСчета = Объект.Код;

			Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто");

			Если НЕ (Субконто = Неопределено) Тогда
				Если Субконто.Предопределенное Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если ВестиУчетПоРаботникам = Истина Тогда // Добавляем 

				Если Субконто = Неопределено Тогда

					Если Счет.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда Тогда
						НовыйВид = Объект.ВидыСубконто.Вставить(0);
					Иначе
						НовыйВид = Объект.ВидыСубконто.Добавить();
					КонецЕсли;
					
					НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
					НовыйВид.Суммовой    = Истина;
						
					Если Объект.Количественный Тогда
						НовыйВид.Количественный = Истина;
					КонецЕсли;

					Сообщение = "План счетов """ + ИмяПланаСчетов + """, счет """ +Строка(Объект) + """ установлено субконто ""Работники организаций"",";
					
				КонецЕсли;

			ИначеЕсли ВестиУчетПоРаботникам = Ложь Тогда // Удаляем

				Если Субконто = Неопределено Тогда // кто-то удалил вид субконто вручную!
					Возврат;
				КонецЕсли;
				
				Объект.ВидыСубконто.Удалить(Субконто);
				
				Сообщение = "План счетов """ + ИмяПланаСчетов + """, счет """ +Строка(Объект) + """ удалено субконто ""Работники организаций"",";

			КонецЕсли;

			Если Прав(Сообщение, 1) = "," Тогда
				Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
			КонецЕсли;

			Сообщить(Сообщение);
			
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли;

		КонецЦикла;

	Исключение

		Сообщить("Счет """ + Строка(КодСчета) + """:");
		Сообщить(ОписаниеОшибки());
		Отказ = Истина;
		
	КонецПопытки

КонецПроцедуры

// Процедура выполняет установку видов субконто на счетах.
//
Процедура ПрименитьПараметры(Отказ = Ложь) Экспорт

	// Если нужно удалить аналитику по статьям движения денежных средств - проверяем, что ее нет в проводках,
	// если аналитика есть в проводках - спрашиваем о необходимости удаления
	Если НЕ ВестиУчетПоСтатьямДДС Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ХозрасчетныйСубконто.Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
		|ГДЕ
		|	ХозрасчетныйСубконто.Вид = &СтатьиДДС";
		Запрос.УстановитьПараметр("СтатьиДДС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств);
		Результат = Запрос.Выполнить();
		ЕстьПроводкиСАналитикой = НЕ Результат.Пустой();
		
		Если ЕстьПроводкиСАналитикой Тогда
			ТекстВопроса = 
				"Есть проводки, в которых указана аналитика по статьям движения денежных средств.
				|После удаления аналитики ""Статьи движения денежных средств"" со счетов эта информация будет потеряна.
				|Продолжить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			Отказ = Ответ <> КодВозвратаДиалога.ОК;
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьТранзакцию();

	Счета = Новый СписокЗначений();
	Счета.Добавить("ОборудованиеКУстановке");
	Счета.Добавить("ПриобретениеОбъектовОсновныхСредств");
	Счета.Добавить("Полуфабрикаты");
	Счета.Добавить("Товары");
	Счета.Добавить("ГотоваяПродукция");
	Счета.Добавить("Материалы");
	Счета.Добавить("ТоварыОтгруженные");
	
	ВестиСкладскойУчетБУ 		 = (СкладскойУчетБУ > 0);
	ВестиСуммовойУчетПоСкладамБУ = (СкладскойУчетБУ > 1);

	Для каждого Счет Из Счета Цикл
		ПрименитьПараметрыСубконто(Счет.Значение, "Хозрасчетный", Истина, ВестиПартионныйУчетБУ, ВестиСкладскойУчетБУ, ВестиСуммовойУчетПоСкладамБУ,,Отказ);
	КонецЦикла;

	ПрименитьПараметрыСубконто("ТоварыНаСкладе", "Хозрасчетный", Истина, Неопределено, ВестиСкладскойУчетБУ, ВестиСуммовойУчетПоСкладамБУ,,Отказ);
	ПрименитьПараметрыСубконто("МатериалыПринятыеВПереработку", "Хозрасчетный", Истина, Неопределено, ВестиСкладскойУчетБУ, ВестиСуммовойУчетПоСкладамБУ,, Отказ);
	
	ПрименитьПараметрыСубконто("ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ", "Хозрасчетный", Истина, ВестиПартионныйУчетБУ, Истина, Истина,, Отказ);
	ПрименитьПараметрыСубконто("ТорговаяНаценкаАТТ", "Хозрасчетный", Истина, ВестиПартионныйУчетБУ, Истина, Истина, Ложь, Отказ);
	УстановитьАналитикуРозницыПоПродажнымЦенам(Отказ);
    	
	// Денежные средства
	ПрименитьПараметрыДляСчетовДенежныхСредств(ВестиУчетПоСтатьямДДС, Отказ);

	//БУ
	Счета = Новый СписокЗначений();
	Счета.Добавить("РасчетыСПерсоналомПоОплатеТруда");
	Счета.Добавить("РасчетыПоДепонированнымСуммам");
	Счета.Добавить("РасходыНаОплатуТрудаБудущихПериодов");
	
	Для каждого Счет Из Счета Цикл
		ПрименитьПараметрыРасчетовССотрудниками(Счет.Значение, "Хозрасчетный", ВестиУчетПоРаботникам, Отказ)
	КонецЦикла;
	
	Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Установить(?(УчетЗарплатыИКадровВоВнешнейПрограмме = 0, Ложь, Истина));
	
	Константы.ПрименяютсяРазныеСтавкиНалогаНаПрибыль.Установить(ПрименяютсяРазныеСтавкиНалогаНаПрибыль);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Оповестить("ПереключениеИнтерфейса");

КонецПроцедуры // ПрименитьПараметры()

Процедура ПрименитьПараметрыИнтерфейсов(ЗначПрименяемыеСистемыНалогообложения)
	
	Если ЗначПрименяемыеСистемыНалогообложения <> Константы.ПрименяемыеСистемыНалогообложения.Получить() Тогда
		//Состав доступных налоговых режимов изменился
		Если ПрименяемыеСистемыНалогообложения = Перечисления.ПрименяемыеСистемыНалогообложения.УпрощеннаяСистемаНалогообложения Тогда
			ОсновнойИнтерфейс = Метаданные.Интерфейсы.УСН;
		// {УчетДоходовИРасходовИП
		ИначеЕсли ПрименяемыеСистемыНалогообложения = Перечисления.ПрименяемыеСистемыНалогообложения.НДФЛИндивидуальногоПредпринимателя Тогда
			ОсновнойИнтерфейс = Метаданные.Интерфейсы.НДФЛИП;
		// }УчетДоходовИРасходовИП
		Иначе
			ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
			ПользовательБД = УправлениеПользователями.НайтиПользователяБД(?(ЗначениеЗаполнено(ТекПользователь), СокрЛП(ТекПользователь.Код), ТекПользователь));	
			Если (НЕ ПользовательБД = Неопределено) Тогда
				ОсновнойИнтерфейс = ?(ПользовательБД.ОсновнойИнтерфейс = Неопределено, Метаданные.Интерфейсы.Полный, ПользовательБД.ОсновнойИнтерфейс);
			Иначе
				ОсновнойИнтерфейс = Метаданные.Интерфейсы.Полный;
			КонецЕсли;
		КонецЕсли;
		ГлавныйИнтерфейс.Полный.Видимость 			= (ОсновнойИнтерфейс = Метаданные.Интерфейсы.Полный);
		ГлавныйИнтерфейс.Бухгалтерский.Видимость 	= (ОсновнойИнтерфейс = Метаданные.Интерфейсы.Бухгалтерский);
		ГлавныйИнтерфейс.УСН.Видимость 				= (ОсновнойИнтерфейс = Метаданные.Интерфейсы.УСН);
		// {УчетДоходовИРасходовИП
		ГлавныйИнтерфейс.НДФЛИП.Видимость 			= (ОсновнойИнтерфейс = Метаданные.Интерфейсы.НДФЛИП);
		// }УчетДоходовИРасходовИП
		
		Оповестить("ПереключениеИнтерфейса");
	КонецЕсли;
	
КонецПроцедуры

// Функция записывает набор констант
// Возвращает:
// Истина если операция выполнена успешно, Ложь - иначе
Функция ЗаписатьНабор()
	
	Отказ = Ложь;
	ЗначПрименяемыеСистемыНалогообложения = Константы.ПрименяемыеСистемыНалогообложения.Получить();
	ПрименитьПараметры(Отказ);
	
	Результат = ОбщегоНазначения.ЗаписатьНаборКонстант(КонстантыНабор, ЭталонныйНабор, Модифицированность);
	Если Результат Тогда
		ПрименитьПараметрыИнтерфейсов(ЗначПрименяемыеСистемыНалогообложения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ()  

Процедура УстановитьВидимость()
	
	ЭлементыФормы.ПанельНастроек.Страницы.ТоварыВРознице.Видимость = ЕстьРозничнаяТорговля;
	ЭлементыФормы.ПанельНастроек.Страницы.Производство.Видимость = ЕстьПроизводственнаяДеятельность;
	ЭлементыФормы.ПанельНастроек.Страницы.НалогНаПрибыль.Видимость = 
		(ПрименяемыеСистемыНалогообложения = Перечисления.ПрименяемыеСистемыНалогообложения.ВсеСистемыНалогообложения);
	
КонецПроцедуры

Процедура УстановитьДоступностьДатыАвансов()

	Если ЭлементыФормы.ПанельНастроек.Страницы.НалогНаПрибыль.Видимость Тогда
		ЭлементыФормы.НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов.Доступность        = ОцениватьДоходыИРасходыВНУПоКурсуАвансов;
		ЭлементыФормы.НадписьНачалоОценкиДоходовИРасходовВНУПоКурсуАвансов.Доступность = ОцениватьДоходыИРасходыВНУПоКурсуАвансов;
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


// Процедура обработчик события "ПриОткрытии" формы
//

Процедура ПриОткрытии()
	
	Если НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("ПравоГлавногоБухгалтера") Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;		
	КонецЕсли;
	

	ЗаполнитьЗначенияСвойств(ЭталонныйНабор, КонстантыНабор); 	
	ОпределитьПараметрыУчета();
	
    УстановитьВидимость();
	
	ОцениватьДоходыИРасходыВНУПоКурсуАвансов = ЗначениеЗаполнено(НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов);
	УстановитьДоступностьДатыАвансов();
	
	НадписьИнфоНалогНаПрибыльСтавки = "Для организаций ";
	// {ОбособленныеПодразделения
	НадписьИнфоНалогНаПрибыльСтавки = НадписьИнфоНалогНаПрибыльСтавки + "и обособленных подразделений ";
	// }ОбособленныеПодразделения
	ЭлементыФормы.НадписьИнфоНалогНаПрибыльСтавки.Заголовок = НадписьИнфоНалогНаПрибыльСтавки + "применяются разные ставки налога на прибыль, уплачиваемого в бюджет субъектов РФ"
	
КонецПроцедуры // ПриОткрытии()

// Процедура обработчик события "ПередЗакрытием" формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если Не ЗаписатьНабор() Тогда
				Отказ = Истина;
			КонецЕсли; 
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура обработчик события нажатия на кнопку "ОК"
//
Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Если ЗаписатьНабор() Тогда
		Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЕстьПроизводственнаяДеятельностьПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ЕстьРозничнаяТорговляПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура НачалоОценкиДоходовИРасходовВНУПоКурсуАвансовПриИзменении(Элемент)
	
	Если НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов < '20100101' Тогда
		НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = '20100101';
	Иначе
		НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = НачалоМесяца(НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереключательРежимаПриИзменении(Элемент)
    УстановитьВидимость();
КонецПроцедуры

Процедура Переключатель2ПриИзменении(Элемент)
    УстановитьВидимость();
КонецПроцедуры

Процедура Переключатель3ПриИзменении(Элемент)
    УстановитьВидимость();
КонецПроцедуры


Процедура ПоКурсуНаДатуАвансаПриИзменении(Элемент)
	
	Если ОцениватьДоходыИРасходыВНУПоКурсуАвансов Тогда
		НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = '20100101';
	Иначе
		НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = '00010101';
	КонецЕсли;
	
	УстановитьДоступностьДатыАвансов();

КонецПроцедуры


Процедура ПоКурсуНаДатуАванса1ПриИзменении(Элемент)
		УстановитьДоступностьДатыАвансов();
	Если ОцениватьДоходыИРасходыВНУПоКурсуАвансов Тогда
		НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = '20100101';
	Иначе
		НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = '00010101';
	КонецЕсли;
КонецПроцедуры

