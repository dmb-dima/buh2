Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Проверяет выбранные  значения реквизитов,
// формирует структуру возвращаемых значений и закрывает форму
//
// Параметры:
//  Отказ - булево, флаг отказа в закрытии формы.
//
Процедура СохранитьИзменения(Отказ = Неопределено)

	// Проверка заполненности реквизитов
	Если ПерезаполнитьЦеныПоТипу 
	   И НЕ ЗначениеЗаполнено(НовыйТипЦен) Тогда
		Предупреждение("Не выбран тип цен для заполнения!");

		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ЭлементыФормы.НовыйВалютаДокумента.Доступность 
	   И НЕ ЗначениеЗаполнено(НовыйВалютаДокумента) Тогда
		Предупреждение("Не выбрана новая валюта документа!");

		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ЭлементыФормы.НовыйКурсДокумента.Доступность 
	   И НЕ ЗначениеЗаполнено(НовыйКурсДокумента) Тогда
		Предупреждение("Установлен нулевой новый курс документа!");

		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ЭлементыФормы.НовыйКурсВзаиморасчетов.Доступность 
	   И НЕ ЗначениеЗаполнено(НовыйКурсВзаиморасчетов) Тогда
		Предупреждение("Установлен нулевой новый курс взаиморасчетов!");

		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Заполним структуру возвращаемых параметров
	СтруктураВозвращаемыхЗначений = Новый Структура();
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийТипЦен"						, ТекущийТипЦен);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийВалютаДокумента"				, ТекущийВалютаДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийВалютаВзаиморасчетов"		, ТекущийВалютаВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКурсДокумента"				, ТекущийКурсДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКурсВзаиморасчетов"			, ТекущийКурсВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийУчитыватьНДС"				, ТекущийУчитыватьНДС);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийСуммаВключаетНДС"			, ТекущийСуммаВключаетНДС);

	СтруктураВозвращаемыхЗначений.Вставить("ПерезаполнитьЦеныПоТипу"			, ПерезаполнитьЦеныПоТипу);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйТипЦен"						, НовыйТипЦен);
	СтруктураВозвращаемыхЗначений.Вставить("ПересчитатьЦеныПоВалюте"			, ПересчитатьЦеныПоВалюте);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйВалютаДокумента"				, НовыйВалютаДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКурсДокумента"					, НовыйКурсДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКурсВзаиморасчетов"			, НовыйКурсВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйУчитыватьНДС"					, НовыйУчитыватьНДС);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйСуммаВключаетНДС"				, НовыйСуммаВключаетНДС);

	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКратностьДокумента"			, ТекущийКратностьДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКратностьДокумента"			, НовыйКратностьДокумента);

	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКратностьВзаиморасчетов"		, ТекущийКратностьВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКратностьВзаиморасчетов"		, НовыйКратностьВзаиморасчетов);

	СтруктураВозвращаемыхЗначений.Вставить("ТекущийНДСВключенВСтоимость"		, ТекущийНДСВключенВСтоимость);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйНДСВключенВСтоимость"			, НовыйНДСВключенВСтоимость);

	// Все сделали, можно закрывать форму
	Модифицированность = Ложь;
	Закрыть(СтруктураВозвращаемыхЗначений);

КонецПроцедуры // СохранитьИзменения()

// Процедура определяет необходимость и взводит флаг пересчета цен по валюте.
//
// Параметры:
//  Нет.
//
Процедура УстановитьФлагПересчетаЦенПоВалюте()

	// Взведем флаг пересчета ТЧ в документе
	Если ЭлементыФормы.ПересчитатьЦеныПоВалюте.Доступность 
	   И (Не ПересчитатьЦеныПоВалюте) Тогда
		ПересчитатьЦеныПоВалюте	= НовыйВалютаДокумента	<> ТекущийВалютаДокумента;
	КонецЕсли;

КонецПроцедуры // УстановитьФлагПересчетаЦенПоВалюте()

// Процедура определяет необходимость и взводит флаг пересчета цен по типу цен.
//
// Параметры:
//  Нет.
//
Процедура УстановитьФлагПерезаполнитьЦеныПоТипу()

	// Взведем флаг пересчета ТЧ в документе
	Если ЭлементыФормы.ПерезаполнитьЦеныПоТипу.Доступность 
	   И (Не ПерезаполнитьЦеныПоТипу) Тогда
		ПерезаполнитьЦеныПоТипу = НовыйТипЦен <> ТекущийТипЦен;
	КонецЕсли;

КонецПроцедуры // УстановитьФлагПерезаполнитьЦеныПоТипу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает доступность реквизитов формы.
//
Процедура УстановитьДоступность()

	// Флаг включения налога в сумму доступны только тогда,
	// когда доступен и взведен флаг учета налога.
	Если Не НовыйУчитыватьНДС Тогда
		Элементыформы.НовыйСуммаВключаетНДС.Доступность = Ложь;
	Иначе
		Элементыформы.НовыйСуммаВключаетНДС.Доступность = Элементыформы.НовыйУчитыватьНДС.Доступность Или ЗапретитьОтключениеУчитыватьНДС;
	КонецЕсли;

КонецПроцедуры // УстановитьДоступность()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	// Определим доступность и взведем флаги пересчета
	// Флаги доступны, если ТЧ документа не пуста и если разрешено менять (доступны) 
	// соответствующие реквизиты.
	Если Не ТабличнаяЧастьПуста Тогда

		ЭлементыФормы.ПерезаполнитьЦеныПоТипу.			Доступность = ЭлементыФормы.НовыйТипЦен.Доступность;
		ЭлементыФормы.ПересчитатьЦеныПоВалюте.			Доступность = ЭлементыФормы.НовыйВалютаДокумента.Доступность 
																	И (ЭлементыФормы.НовыйКурсДокумента.Доступность Или ЭлементыФормы.НовыйКурсВзаиморасчетов.Доступность);

	Иначе // Пересчитывать не будем, нечего
		ЭлементыФормы.ПерезаполнитьЦеныПоТипу.			Доступность = Ложь;
		ЭлементыФормы.ПересчитатьЦеныПоВалюте.			Доступность = Ложь; 
	КонецЕсли;

	УстановитьДоступность();

	// Взведем при необходимости флаги пересчета.
	// Флаг взведен, если новое и текущее значения отличаются
	// Текущие и новые значения реквизитов могут отличаться, 
	// например разные значения устанавливаются в ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора().
	УстановитьФлагПересчетаЦенПоВалюте();
	УстановитьФлагПерезаполнитьЦеныПоТипу();
	
	// возможно ситуация, когда валюта документа передается, а курс - не передается
	// чтобы при этом не было нулевого курса, будет заполнять его руками
	// в случае наличия курса взаиморасчетов и совпадения валюты взаиморасчетов с валютой
	// документа - будем брать курс взаиморасчетов, иначе - текущий курс
	Если ЭлементыФормы.НовыйВалютаДокумента.Доступность и НовыйКурсДокумента = 0 Тогда
		Если ЭлементыФормы.НовыйКурсВзаиморасчетов.Доступность и НовыйВалютаДокумента = ТекущийВалютаВзаиморасчетов Тогда
			НовыйКурсДокумента        = НовыйКурсВзаиморасчетов;
			НовыйКратностьДокумента   = НовыйКратностьВзаиморасчетов;
			ТекущийКурсДокумента      = ТекущийКурсВзаиморасчетов;
			ТекущийКратностьДокумента = ТекущийКратностьВзаиморасчетов;
		Иначе
			СтруктураНовыйВалюта      = МодульВалютногоУчета.ПолучитьКурсВалюты(НовыйВалютаДокумента, ДатаКурса);
			НовыйКурсДокумента        = СтруктураНовыйВалюта.Курс;
			НовыйКратностьДокумента   = СтруктураНовыйВалюта.Кратность;
			ТекущийКурсДокумента      = НовыйКурсДокумента;
			ТекущийКратностьДокумента = НовыйКратностьДокумента;
		КонецЕсли;
	КонецЕсли;
		
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Если форма открывается с пустой валютой взаиморасчетов, а в открывающем ее документе 
	// существует реквизит ДоговорКонтрагента, не дадим открыть форму, пока не будет установлен договор
	// взаиморасчетов
	// определим наличие этого реквизита по доступности НовогоКурсаВзаиморасчетов

	Если ЭлементыФормы.НовыйКурсВзаиморасчетов.Доступность и НЕ ЗначениеЗаполнено(ТекущийВалютаВзаиморасчетов) Тогда

		Предупреждение("Не выбран договор контрагента (или в договоре не указана валюта)!");
		Отказ = Истина;

	КонецЕсли;
	
	// Если установлен параметр ЗапретитьОтключениеУчитыватьНДС - НовоеУчитыватьНДС по умолчанию присваивается Истина
	Если Не Отказ И ЗапретитьОтключениеУчитыватьНДС Тогда
		
		НовыйУчитыватьНДС = Истина;
		
	КонецЕсли;                     		

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность Тогда

		Ответ = Вопрос("Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена, , 
						КодВозвратаДиалога.Да, Заголовок);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьИзменения(Отказ);
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена
			  Или Ответ = КодВозвратаДиалога.Таймаут Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "При Изменении" поля "Тип цен".
//
Процедура НовыйТипЦенПриИзменении(Элемент)

	УстановитьФлагПерезаполнитьЦеныПоТипу();

	// установим флаг СуммаВключаемНДС из типа цены
	Если ЗначениеЗаполнено(НовыйТипЦен)  и НовыйУчитыватьНДС Тогда
		НовыйСуммаВключаетНДС = НовыйТипЦен.ЦенаВключаетНДС;
	КонецЕсли;

	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений
	Модифицированность = Истина;

КонецПроцедуры // НовыйТипЦенПриИзменении()

// Процедура - обработчик события "Начало выбора" поля "Тип цен".
//
Процедура НовыйТипЦенНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если НЕ ЗначениеЗаполнено(НовыйТипЦен) Тогда
		НовыйТипЦен = Справочники["ТипыЦенНоменклатуры"].ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // НовыйТипЦенНачалоВыбора()

// Процедура - обработчик события "Обработка выбора" поля "Валюта Документа".
//
Процедура НовыйВалютаДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	НовыйВалютаДокумента    = ВыбранноеЗначение;

	//Сменим курс
	Если ЭлементыФормы.НовыйКурсВзаиморасчетов.Доступность 
	   И НовыйВалютаДокумента = ТекущийВалютаВзаиморасчетов Тогда
	   
		// если курс взаиморасчетов присутствует в вызвавшем форму документе, тогда
		// в случае совпадения валюты документа с валютой взаиморасчетов возьмем курс и кратность из нее
		НовыйКурсДокумента      = НовыйКурсВзаиморасчетов;
		НовыйКратностьДокумента = НовыйКратностьВзаиморасчетов;
		
	Иначе
		
		// вычислим курс
		СтруктураНовыйВалюта    = МодульВалютногоУчета.ПолучитьКурсВалюты(НовыйВалютаДокумента, ДатаКурса);
		НовыйКурсДокумента      = СтруктураНовыйВалюта.Курс;
		НовыйКратностьДокумента = СтруктураНовыйВалюта.Кратность;
		
	КонецЕсли;

	//Взведем при необходимости флаг пересчета.
	УстановитьФлагПересчетаЦенПоВалюте();

	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений
	Модифицированность = Истина;

КонецПроцедуры // НовыйВалютаДокументаОбработкаВыбора()

// Процедура - обработчик события "Начало выбора" поля "Курс Документа".
//
Процедура НовыйКурсДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменим стандартную обработку
	СтандартнаяОбработка = Ложь;

	СтарыйКурсДокумента = НовыйКурсДокумента; // Сохраним значение.

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = НовыйВалютаДокумента;
	ФормаВводаКурсаИКратности.КратностьВалюты = НовыйКратностьДокумента;
	ФормаВводаКурсаИКратности.КурсВалюты      = НовыйКурсДокумента;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ДатаКурса;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		НовыйКратностьДокумента = СтруктураКурсаИКратности.КратностьВалюты;
		НовыйКурсДокумента      = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;

	// Взводим флаг модифицированности, если поменяли курс, чтобы при закрытии спросить о сохранении значений
	Модифицированность = Модифицированность Или (СтарыйКурсДокумента <> НовыйКурсДокумента);

КонецПроцедуры // НовыйКурсДокументаНачалоВыбора()

// Процедура - обработчик события "Начало выбора" поля "Курс взаиморасчетов".
//
Процедура НовыйКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменим стандартную обработку
	СтандартнаяОбработка = Ложь;

	СтарыйКурсВзаиморасчетов = НовыйКурсВзаиморасчетов; // Сохраним значение.

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ТекущийВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = НовыйКратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = НовыйКурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ДатаКурса;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		НовыйКратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
		НовыйКурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;

	// Взводим флаг модифицированности, если поменяли курс, чтобы при закрытии спросить о сохранении значений
	Модифицированность = Модифицированность Или (СтарыйКурсВзаиморасчетов <> НовыйКурсВзаиморасчетов);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага "Учитывать НДС".
//
Процедура НовыйУчитыватьНДСПриИзменении(Элемент)

	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений
	Модифицированность = Истина;

	// Если налог не учитываем. то надо снять флаг включения в сумму.
	Если Не НовыйУчитыватьНДС Тогда
		НовыйСуммаВключаетНДС = Ложь;
	КонецЕсли;

	УстановитьДоступность();

КонецПроцедуры // НовыйУчитыватьНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага "Сумма Включает НДС".
//
Процедура НовыйСуммаВключаетНДСПриИзменении(Элемент)

	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений
	Модифицированность = Истина;

КонецПроцедуры // НовыйСуммаВключаетНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага "НДС включен в стоимость".
//
Процедура НовыйНДСВключатьВСтоимостьПриИзменении(Элемент)

	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений
	Модифицированность = Истина;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки ОК в форме.
//
Процедура КнопкаОКНажатие(Элемент)

	СохранитьИзменения();

КонецПроцедуры // КнопкаОКНажатие()

// Процедура - обработчик события обновления формы
//
Процедура ОбновлениеОтображения()

	ЭлементыФормы.ИнфНадписьНовогоКурса.Заголовок   = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(НовыйВалютаДокумента, 
	                                                                                         НовыйКурсДокумента,
	                                                                                         НовыйКратностьДокумента,
	                                                                                         мВалютаРегламентированногоУчета);

	ЭлементыФормы.ИнфНадписьТекущегоКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ТекущийВалютаДокумента, 
	                                                                                         ТекущийКурсДокумента,
	                                                                                         ТекущийКратностьДокумента,
	                                                                                         мВалютаРегламентированногоУчета);

	ЭлементыФормы.ИнфНадписьНовогоКурсаВзаиморасчетов.Заголовок   = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ТекущийВалютаВзаиморасчетов, 
	                                                                                                       НовыйКурсВзаиморасчетов,
	                                                                                                       НовыйКратностьВзаиморасчетов,
	                                                                                                       мВалютаРегламентированногоУчета);

	ЭлементыФормы.ИнфНадписьТекущегоКурсаВзаиморасчетов.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ТекущийВалютаВзаиморасчетов, 
	                                                                                                       ТекущийКурсВзаиморасчетов,
	                                                                                                       ТекущийКратностьВзаиморасчетов,
	                                                                                                       мВалютаРегламентированногоУчета);

КонецПроцедуры // ОбновлениеОтображения()

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();


