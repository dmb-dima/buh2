////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокПлановОбмена = ОбменДаннымиПовтИсп.ПолучитьСписокПлановОбменаКонфигурацииВерсии30();
	
	Если СписокПлановОбмена.Количество() = 0 Тогда
		
		НСтрока = НСтр("ru = 'В конфигурации не задано ни одного плана обмена! Монитор обменов данными не может быть использован.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ОбновитьСписокСостоянияУзлов();
	
	Если ОбменДаннымиСервер.РольДоступнаДобавлениеИзменениеОбменовДанными() Тогда
		
		ДобавитьКомандыСозданияНовогоОбмена();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если    ИмяСобытия = "ВыполненОбменДанными"
		ИЛИ ИмяСобытия = "ЗакрытаФормаСценарияОбменаДанными"
		ИЛИ ИмяСобытия = "ЗакрытаФормаУзлаПланаОбмена"
		ИЛИ ИмяСобытия = "ЗакрытаФормаПомощникаСопоставленияОбъектов"
		ИЛИ ИмяСобытия = "ЗакрытаФормаПомощникаСозданияОбменаДанными" Тогда
		
		// обновляем данные монитора
		ОбновитьМонитор();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ВыполнитьОбменДанными(Команда)
	
	ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(ТекущиеДанные.УзелИнформационнойБазы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменДаннымиИнтерактивно(Команда)
	
	ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиКлиент.ОткрытьПомощникСопоставленияОбъектовОбработкаКоманды(ТекущиеДанные.УзелИнформационнойБазы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеВыполненияОбмена(Команда)
	
	ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиКлиент.ОбработкаКомандыНастроитьРасписаниеВыполненияОбмена(ТекущиеДанные.УзелИнформационнойБазы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМонитор(Команда = Неопределено)
	
	ИндексСтрокиСписокСостоянияУзлов = ПолучитьТекущийИндексСтроки("СписокСостоянияУзлов");
	
	// выполняем обновление таблиц монитора на сервере
	ОбновитьСписокСостоянияУзлов();
	
	// выполняем позиционирование курсора
	ВыполнитьПозиционированиеКурсора("СписокСостоянияУзлов", ИндексСтрокиСписокСостоянияУзлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУзелИнформационнойБазы(Команда)
	
	ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьЗначение(ТекущиеДанные.УзелИнформационнойБазы);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСостоянияУзловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИзменитьУзелИнформационнойБазы(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокУзловПланаОбмена(Команда)
	
	ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(ТекущиеДанные.УзелИнформационнойБазы);
	
	ИмяФормыСписка = "ПланОбмена.[ИмяПланаОбмена].ФормаСписка";
	ИмяФормыСписка = СтрЗаменить(ИмяФормыСписка, "[ИмяПланаОбмена]", ИмяПланаОбмена);
	
	ОткрытьФорму(ИмяФормыСписка,,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийЗагрузкиДанных(Команда)
	
	ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(ТекущиеДанные.УзелИнформационнойБазы, ЭтаФорма, "ЗагрузкаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийВыгрузкиДанных(Команда)
	
	ТекущиеДанные = Элементы.СписокСостоянияУзлов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(ТекущиеДанные.УзелИнформационнойБазы, ЭтаФорма, "ВыгрузкаДанных");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОбновитьСписокСостоянияУзлов()
	
	ТекстЗапроса = "
	|
	|[ПланыОбменаКонфигурации]
	|
	|//////////////////////////////////////////////////////////////////////////////// {СостояниеОбменовДаннымиЗагрузка}
	|ВЫБРАТЬ
	|	СостояниеОбменовДанными.УзелИнформационнойБазы    КАК УзелИнформационнойБазы,
	|	СостояниеОбменовДанными.ДатаОкончания             КАК ДатаОкончания,
	|	ВЫБОР
	|	КОГДА СостояниеОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято)
	|	ТОГДА 3
	|	КОГДА СостояниеОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|	ТОГДА 3
	|	КОГДА СостояниеОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|	ТОГДА 2
	|	ИНАЧЕ 1
	|	КОНЕЦ                                             КАК РезультатВыполненияОбмена
	|ПОМЕСТИТЬ СостояниеОбменовДаннымиЗагрузка
	|ИЗ
	|	РегистрСведений.СостояниеОбменовДанными КАК СостояниеОбменовДанными
	|ГДЕ
	|	СостояниеОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// {СостояниеОбменовДаннымиВыгрузка}
	|ВЫБРАТЬ
	|	СостояниеОбменовДанными.УзелИнформационнойБазы    КАК УзелИнформационнойБазы,
	|	СостояниеОбменовДанными.ДатаОкончания             КАК ДатаОкончания,
	|	ВЫБОР
	|	КОГДА СостояниеОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято)
	|	ТОГДА 3
	|	КОГДА СостояниеОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|	ТОГДА 3
	|	КОГДА СостояниеОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|	ТОГДА 2
	|	ИНАЧЕ 1
	|	КОНЕЦ                                             КАК РезультатВыполненияОбмена
	|ПОМЕСТИТЬ СостояниеОбменовДаннымиВыгрузка
	|ИЗ
	|	РегистрСведений.СостояниеОбменовДанными КАК СостояниеОбменовДанными
	|ГДЕ
	|	СостояниеОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// {СостояниеУспешныхОбменовДаннымиЗагрузка}
	|ВЫБРАТЬ
	|	СостояниеУспешныхОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостояниеУспешныхОбменовДанными.ДатаОкончания          КАК ДатаОкончания
	|ПОМЕСТИТЬ СостояниеУспешныхОбменовДаннымиЗагрузка
	|ИЗ
	|	РегистрСведений.СостояниеУспешныхОбменовДанными КАК СостояниеУспешныхОбменовДанными
	|ГДЕ
	|	СостояниеУспешныхОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// {СостояниеУспешныхОбменовДаннымиВыгрузка}
	|ВЫБРАТЬ
	|	СостояниеУспешныхОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостояниеУспешныхОбменовДанными.ДатаОкончания          КАК ДатаОкончания
	|ПОМЕСТИТЬ СостояниеУспешныхОбменовДаннымиВыгрузка
	|ИЗ
	|	РегистрСведений.СостояниеУспешныхОбменовДанными КАК СостояниеУспешныхОбменовДанными
	|ГДЕ
	|	СостояниеУспешныхОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыОбмена.ИмяПланаОбмена                                             КАК ИмяПланаОбмена,
	|	ПланыОбмена.УзелИнформационнойБазы                                     КАК УзелИнформационнойБазы,
	|	ЕСТЬNULL(СостояниеОбменовДаннымиВыгрузка.РезультатВыполненияОбмена, 0) КАК РезультатПоследнейВыгрузкиДанных,
	|	ЕСТЬNULL(СостояниеОбменовДаннымиЗагрузка.РезультатВыполненияОбмена, 0) КАК РезультатПоследнейЗагрузкиДанных,
	|	СостояниеОбменовДаннымиЗагрузка.ДатаОкончания                          КАК ДатаПоследнейЗагрузки,
	|	СостояниеОбменовДаннымиВыгрузка.ДатаОкончания                          КАК ДатаПоследнейВыгрузки,
	|	СостояниеУспешныхОбменовДаннымиЗагрузка.ДатаОкончания                  КАК ДатаПоследнейУспешнойЗагрузки,
	|	СостояниеУспешныхОбменовДаннымиВыгрузка.ДатаОкончания                  КАК ДатаПоследнейУспешнойВыгрузки
	|ИЗ
	|	ПланыОбменаКонфигурации КАК ПланыОбмена
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостояниеОбменовДаннымиЗагрузка КАК СостояниеОбменовДаннымиЗагрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостояниеОбменовДаннымиЗагрузка.УзелИнформационнойБазы
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостояниеОбменовДаннымиВыгрузка КАК СостояниеОбменовДаннымиВыгрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостояниеОбменовДаннымиВыгрузка.УзелИнформационнойБазы
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостояниеУспешныхОбменовДаннымиЗагрузка КАК СостояниеУспешныхОбменовДаннымиЗагрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостояниеУспешныхОбменовДаннымиЗагрузка.УзелИнформационнойБазы
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостояниеУспешныхОбменовДаннымиВыгрузка КАК СостояниеУспешныхОбменовДаннымиВыгрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостояниеУспешныхОбменовДаннымиВыгрузка.УзелИнформационнойБазы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланыОбмена.ИмяПланаОбмена,
	|	ПланыОбмена.Наименование
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПланыОбменаКонфигурации]", ТекстЗапросаПоПланамОбменаКонфигурации());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого Элемент ИЗ ОбменДаннымиПовтИсп.ПолучитьСписокПлановОбменаКонфигурацииВерсии30() Цикл
		
		ИмяПараметра = СтрЗаменить("ЭтотУзел[ИмяПланаОбмена]", "[ИмяПланаОбмена]", Элемент.Значение);
		Запрос.УстановитьПараметр(ИмяПараметра, ПланыОбмена[Элемент.Значение].ЭтотУзел());
		
	КонецЦикла;
	
	// обновляем данные в списке состояния узлов
	СписокСостоянияУзлов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаПоПланамОбменаКонфигурации()
	
	ТекстЗапроса = "";
	
	СписокПлановОбмена = ОбменДаннымиПовтИсп.ПолучитьСписокПлановОбменаКонфигурацииВерсии30();
	
	Если СписокПлановОбмена.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ШаблонЗапроса = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|//////////////////////////////////////////////////////// {[ИмяПланаОбмена]}
	|ВЫБРАТЬ
	|	Ссылка                      КАК УзелИнформационнойБазы,
	|	Наименование                КАК Наименование,
	|	""[ИмяПланаОбменаСиноним]"" КАК ИмяПланаОбмена
	|ИЗ
	|	ПланОбмена.[ИмяПланаОбмена]
	|ГДЕ
	|	     Ссылка <> &ЭтотУзел[ИмяПланаОбмена]
	|	И НЕ ПометкаУдаления
	|";
	
	Для Каждого Элемент ИЗ СписокПлановОбмена Цикл
		
		ТекстЗапросаДляПланаОбмена = СтрЗаменить(ШаблонЗапроса,              "[ИмяПланаОбмена]",        Элемент.Значение);
		ТекстЗапросаДляПланаОбмена = СтрЗаменить(ТекстЗапросаДляПланаОбмена, "[ИмяПланаОбменаСиноним]", Элемент.Представление);
		
		// удаляем литерал объединения для первой таблицы
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			
			ТекстЗапросаДляПланаОбмена = СтрЗаменить(ТекстЗапросаДляПланаОбмена, "ОБЪЕДИНИТЬ ВСЕ", "");
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляПланаОбмена;
		
	КонецЦикла;
	
	// возвращаемое значение функции
	ТекстЗапросаРезультат = "
	|//////////////////////////////////////////////////////// {ПланыОбменаКонфигурации}
	|ВЫБРАТЬ
	|	УзелИнформационнойБазы,
	|	Наименование,
	|	ИмяПланаОбмена
	|ПОМЕСТИТЬ ПланыОбменаКонфигурации
	|ИЗ
	|	(
	|	[ТекстЗапроса]
	|	) КАК ВложенныйЗапрос
	|;
	|";
	
	ТекстЗапросаРезультат = СтрЗаменить(ТекстЗапросаРезультат, "[ТекстЗапроса]", ТекстЗапроса);
	
	Возврат ТекстЗапросаРезультат;
КонецФункции

&НаСервере
Процедура ДобавитьКомандыСозданияНовогоОбмена()
	
	СписокПлановОбмена = ОбменДаннымиПовтИсп.ПолучитьСписокПлановОбменаКонфигурацииВерсии30();
	
	Для Каждого Элемент ИЗ СписокПлановОбмена Цикл
		
		ИмяПланаОбмена = Элемент.Значение;
		
		МенеджерПланаОбмена = ПланыОбмена[ИмяПланаОбмена];
		
		Если МенеджерПланаОбмена.ИспользоватьПомощникСозданияОбменаДанными() Тогда
			
			Команды.Добавить(ИмяПланаОбмена);
			Команды[ИмяПланаОбмена].Заголовок = МенеджерПланаОбмена.ЗаголовокКомандыДляСозданияНовогоОбменаДанными();
			Команды[ИмяПланаОбмена].Действие  = "ОткрытьПомощникНастройкиОбменаДанными";
			
			Элементы.Добавить(ИмяПланаОбмена, Тип("КнопкаФормы"), Элементы.ПодменюСоздать);
			Элементы[ИмяПланаОбмена].ИмяКоманды = ИмяПланаОбмена;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущийИндексСтроки(ИмяТаблицы)
	
	// возвращаемое значение функции
	ИндексСтроки = Неопределено;
	
	// при обновлении монитора выполняем позиционирование курсора
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИндексСтроки = ЭтаФорма[ИмяТаблицы].Индекс(ТекущиеДанные);
		
	КонецЕсли;
	
	Возврат ИндексСтроки;
КонецФункции

&НаКлиенте
Процедура ВыполнитьПозиционированиеКурсора(ИмяТаблицы, ИндексСтроки)
	
	Если ИндексСтроки <> Неопределено Тогда
		
		// выполняем проверки позиционирования курсора после получения новых данных
		Если ЭтаФорма[ИмяТаблицы].Количество() <> 0 Тогда
			
			Если ИндексСтроки > ЭтаФорма[ИмяТаблицы].Количество() - 1 Тогда
				
				ИндексСтроки = ЭтаФорма[ИмяТаблицы].Количество() - 1;
				
			КонецЕсли;
			
			// позиционируем курсор
			Элементы[ИмяТаблицы].ТекущаяСтрока = ЭтаФорма[ИмяТаблицы][ИндексСтроки].ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникНастройкиОбменаДанными(Команда)
	
	ОбменДаннымиКлиент.ОткрытьПомощникНастройкиОбменаДанными(Команда.Имя);
	
КонецПроцедуры
