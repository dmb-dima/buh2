Перем ИмяФайлаРезультатаПроверки;
Перем ПапкаПрограммы;
Перем СоответствиеРасположенияПрограммы;
Перем СписокПроверенныхФайлов;
Перем ЕстьОшибки;
Перем ПроверяемыеДокументы;

Процедура ПриОткрытии()
	Если ПапкаПрограммы = Неопределено Или ПапкаПрограммы = "" Тогда
	Иначе
		
		ЕстьОшибки = Ложь;
	    СписокПроверенныхФайлов.Очистить();
		ПроверяемыеДокументы.Очистить();
		ПоместитьФайлВКаталогПрограммы(ДокументОбъект);
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПередачаСЗВ4ВПФР") Тогда
			Для каждого СтрокаТЧ Из ДокументОбъект.ПачкиДокументов Цикл
				Объект = СтрокаТЧ.ДокументПачка.ПолучитьОбъект();
				ПоместитьФайлВКаталогПрограммы(Объект);
			КонецЦикла;	
			
			//Для Каждого КлючЗначение Из ПроверяемыеДокументы Цикл
			//	ЗапуститьПроверкуВCheckUFA(КлючЗначение.Ключ);					
			//КонецЦикла;	
		КонецЕсли;
		ЗапуститьПроверкуВCheckUFA(ДокументОбъект);
		Если ЕстьОшибки Тогда
			Закрыть();
			Возврат;
		КонецЕсли;
		ОбновитьЭлементыФормы();

	КонецЕсли;	
КонецПроцедуры

Процедура ПоместитьФайлВКаталогПрограммы(ДокументОбъект)
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ДокументОбъект,ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если МетаданныеДокумента.Реквизиты.Найти("Год") <> Неопределено Тогда
		Год = ДокументОбъект.Год
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ОтчетныйПериод") <> Неопределено Тогда
		Если ТипЗнч(ДокументОбъект.ОтчетныйПериод) = Тип("Число") Тогда
			Год = ДокументОбъект.ОтчетныйПериод
		Иначе
			Год = Год(ДокументОбъект.ОтчетныйПериод)
		КонецЕсли;
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
		Год = Год(ДокументОбъект.ПериодРегистрации)
	Иначе	
		Год = Год(ДокументОбъект.Дата)
	КонецЕсли;
	ИмяФайлаПроверки = ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(ДокументОбъект, Год);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайла); 
	
	ТекстовыйДокумент.Записать(ПапкаПрограммы + "\" + ИмяФайлаПроверки, КодировкаТекста.ANSI);
	
	ПроверяемыеДокументы.Вставить(ДокументОбъект, ИмяФайлаПроверки); 
КонецПроцедуры	

// Проводится поиск в реестре записи о месте установки CheckXML,
// и запускается проверка файлов
Процедура ЗапуститьПроверкуВCheckUFA(ДокументОбъект) 
	ИмяФайлаПроверки = ПроверяемыеДокументы.Получить(ДокументОбъект);
	
	Если ИмяФайлаПроверки = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	КомандаСистемы("Check.exe "+ИмяФайлаПроверки, ПапкаПрограммы);
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если МетаданныеДокумента.Реквизиты.Найти("Год") <> Неопределено Тогда
		Год = ДокументОбъект.Год
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ОтчетныйПериод") <> Неопределено Тогда
		Если ТипЗнч(ДокументОбъект.ОтчетныйПериод) = Тип("Число") Тогда
			Год = ДокументОбъект.ОтчетныйПериод
		Иначе
			Год = Год(ДокументОбъект.ОтчетныйПериод)
		КонецЕсли;
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
		Год = Год(ДокументОбъект.ПериодРегистрации)
	Иначе	
		Год = Год(ДокументОбъект.Дата)
	КонецЕсли;
	
	МаскаИмениФайлаПроверки = ПолучитьМаскуФайлаПротоколаПроверки(ДокументОбъект, Год);
	
	ФайлыПротоколов = НайтиФайлы(ПапкаПрограммы, МаскаИмениФайлаПроверки);
		
	МаксимальнаяДатаФайла = ТекущаяДата() - 3600;
	ИмяФайлаПротокола = "";
	Для Каждого ФайлПротокола Из ФайлыПротоколов Цикл
		ДатаИзмененияФайла = ФайлПротокола.ПолучитьВремяИзменения();
		Если ДатаИзмененияФайла > МаксимальнаяДатаФайла И ДатаИзмененияФайла <= ТекущаяДата() Тогда
			ИмяФайлаПротокола = ФайлПротокола.ПолноеИмя;
		КонецЕсли;	
	КонецЦикла;	
				
	Если МетаданныеДокумента.Имя = "ПередачаСЗВ4ВПФР" Тогда
		КлючДокумента = "АДВ-11"
	Иначе
		КлючДокумента = "Пачка " + ДокументОбъект;
	КонецЕсли;
	
	Если ИмяФайлаПротокола <> ""  Тогда 
		ФайлПротокола = Новый Файл(ИмяФайлаПротокола);
		
		Если ФайлПротокола.Существует() Тогда
			Протокол = Новый ТекстовыйДокумент;
			Протокол.Прочитать(ИмяФайлаПротокола);
			СписокПроверенныхФайлов.Вставить(КлючДокумента, Протокол);
			УдалитьФайлы(ИмяФайлаПротокола);	
		КонецЕсли;
	КонецЕсли;	
	
	УдалитьФайлы(ПапкаПрограммы + "\" + ИмяФайлаПроверки);
	
КонецПроцедуры 

Процедура ОбновитьЭлементыФормы()
	
	//ЭлементыФормы.ПанельРезультатовПроверки.Страницы.Очистить();
	
	Если СписокПроверенныхФайлов.Количество() <= 1 Тогда
		ЭлементыФормы.ПанельРезультатовПроверки.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
		Для Каждого ЭлементСоответствия Из СписокПроверенныхФайлов Цикл
			ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(ЭлементСоответствия.Значение.ПолучитьТекст());
		КонецЦикла;
	Иначе
		НомерЭлемента = 0;
		ЭлементыФормы.ПанельРезультатовПроверки.ОтображениеЗакладок = ОтображениеЗакладок.СверхуСПрокруткой;
		Для Каждого ЭлементСоответствия Из СписокПроверенныхФайлов Цикл
			НомерЭлемента = НомерЭлемента + 1;
			НазваниеСтраницы = ЭлементСоответствия.Ключ;
			ПоложениеОТ = Найти(НазваниеСтраницы, " от ");
			Если ПоложениеОТ > 0 Тогда
				НазваниеСтраницы = Лев(НазваниеСтраницы, ПоложениеОТ);
			КонецЕсли;
			СтраницаПанели = ЭлементыФормы.ПанельРезультатовПроверки.Страницы.Добавить("Страница1"+ НомерЭлемента, НазваниеСтраницы, ЭлементСоответствия.Ключ);
			Если НомерЭлемента = 1 Тогда
				ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(ЭлементСоответствия.Значение.ПолучитьТекст());
				ЭлементыФормы.ПанельРезультатовПроверки.ТекущаяСтраница = СтраницаПанели;
			КонецЕсли;
			ЭлементыФормы.ПанельРезультатовПроверки.Страницы.Страница1.Видимость = Ложь;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры // ОбновитьЭлементыФормы()

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Для Каждого КлючЗначение Из СписокПроверенныхФайлов Цикл
		УдалитьФайлы(КлючЗначение.Значение);
	КонецЦикла;	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Вопрос = "Перед проверкой необходимо записать документ. Записать?";
	Если НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,Вопрос) тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Отказ И ДокументОбъект.ФорматФайла <> Перечисления.ФорматФайлаПФР.Версия07 Тогда
		Предупреждение("Проверка предусмотрена только для формата файла версии 07.00 (XML)");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	  
	ПапкаПрограммы = ВосстановитьЗначение("КаталогУстановкиПрограммыCheckUFA");
	
	Если НЕ ЗначениеЗаполнено(ПапкаПрограммы) Тогда
		ПапкаПрограммы = ПроцедурыПерсонифицированногоУчета.ПолучитьПредполагаемыйПутьУстановкиCheckUFA();
	КонецЕсли;
		
	ИсполняемыйФайл = Новый Файл(ПапкаПрограммы + "\Check.exe" );
	Если ПапкаПрограммы = Неопределено Или ПапкаПрограммы = "" Или Не ИсполняемыйФайл.Существует() Тогда
		Если Вопрос("Не обнаружена программа проверки CheckUFA. " + Символы.ПС + "Могли бы вы указать в какую папку она установлена?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да, "Ошибка запуска проверки программой CheckUFA") = КодВозвратаДиалога.Да Тогда
			ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
			ВыборФайла.Заголовок = "Выберите папку, в которую установлена программа CheckUFA";
			Если ВыборФайла.Выбрать() Тогда
				ПапкаПрограммы = ВыборФайла.Каталог;
			КонецЕсли
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПапкаПрограммы = Неопределено Или ПапкаПрограммы = "" Тогда
		Предупреждение("Не обнаружена программа проверки CheckUFA. ");
		Отказ = Истина;
		Возврат;
	Иначе
		ИсполняемыйФайл = Новый Файл(ПапкаПрограммы + "\Check.exe" );
		Если ИсполняемыйФайл.Существует() Тогда
			Если ИсполняемыйФайл.ПолучитьВремяИзменения() < Дата(2011, 01, 01) Тогда
				Предупреждение("программа CheckUFA устарела, обновите пожалуйста программу до текущего актуального релиза");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		Иначе
			Предупреждение("Не обнаружена программа проверки CheckUFA. ");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	Если ЗначениеЗаполнено(ПапкаПрограммы) Тогда
		СохранитьЗначение("КаталогУстановкиПрограммыCheckUFA", ПапкаПрограммы);
	КонецЕсли;
КонецПроцедуры

Процедура ПанельРезультатовПроверкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Протокол = СписокПроверенныхФайлов.Получить(Элемент.ТекущаяСтраница.Значение);
	Если Протокол <> Неопределено Тогда 
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(Протокол.ПолучитьТекст());
	Иначе
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст("");	
	КонецЕсли;	
КонецПроцедуры

Функция ПолучитьМаскуФайлаПротоколаПроверки(Документ, ГодПредставленияСведений) Экспорт
	
			
	ИмяТаблицы = Документ.Метаданные().Имя;
	
	// Формируем запрос и получаем необходимые данные
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокПерсучета.Номер,
	|	ДокПерсучета.НомерПачки,
	|	ДокПерсучета.Организация,
	|	ДокПерсучета.Организация.РегистрационныйНомерПФР,
	|	ДокПерсучета.ФорматФайла КАК ФорматФайла
	|ИЗ
	|	Документ." + ИмяТаблицы + " КАК ДокПерсучета
	|ГДЕ
	|	ДокПерсучета.Ссылка = &ДокументСсылка";
	
	Запрос.УстановитьПараметр("ДокументСсылка", Документ.Ссылка);
	ВыборкаПоШапкеДокумента = Запрос.Выполнить().Выбрать();
	
	Если Не ВыборкаПоШапкеДокумента.Следующий() Тогда
		Возврат "";
	КонецЕсли;	
	
	НомерПачки = СокрЛП(ВыборкаПоШапкеДокумента.НомерПачки);
	ФорматФайла = ВыборкаПоШапкеДокумента.ФорматФайла;
	
	РегНомерПФР = ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР;
	СтрНомПачки = Прав("100000"+НомерПачки,5);
	Если ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда // Версия 07.00 (XML)
		РегНомерПФР = СтрЗаменить(РегНомерПФР, " ", "");
		Если СтрДлина(РегНомерПФР) <> 14 Тогда
			РегНомерПФР = Лев(РегНомерПФР, 8) + "0" + Сред(РегНомерПФР, 9)
		КонецЕсли;
		
		// имя файла без подразделений.
		ИмяФайла = "PFR-700-Y-"+Формат(ГодПредставленияСведений, "ЧГ=0")+"-ORG-"+РегНомерПФР+
		"-DCK-"+СтрНомПачки+"-DPT-000000-DCK-00000.XML";
		
		МаскаФайла = Лев(ИмяФайла, 33) + "-PROTOCOL-*.log.html";
		
	Иначе 	
		ИмяФайла = "";
	КонецЕсли;
	Возврат МаскаФайла;
	
КонецФункции


СписокПроверенныхФайлов = Новый Соответствие;
ПроверяемыеДокументы    = Новый Соответствие;