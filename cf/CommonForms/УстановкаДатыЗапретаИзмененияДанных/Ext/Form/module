////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура управляет визуальным поведением элементов формы
// в зависимости от реквизита "Способ указания даты"
//
Процедура УстановитьВидимость()
    
    Если СпособУказанияДаты = 2 Тогда
        ЭлементыФормы.Панель.Свертка = РежимСверткиЭлементаУправления.Верх;
        ЭлементыФормы.ДеревоДаты.КонтекстноеМеню = Неопределено;
    Иначе
        ЭлементыФормы.Панель.Свертка = РежимСверткиЭлементаУправления.Нет;
        ЭлементыФормы.ДеревоДаты.КонтекстноеМеню = ЭлементыФормы.КоманднаяПанельДереваДаты;
    КонецЕсли;                           
    
КонецПроцедуры // УстановитьВидимость

// Процедура выполняет запись данных в регистр сведений
// "Границы запрета изменения данных"
//
Процедура СохранитьДанные(Отказ = Неопределено)
	
	Попытка
		УстановитьМонопольныйРежим(Истина);
	Исключение
		Предупреждение("Установка даты запрета изменения данных должна выполняться в монопольном режиме.");
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	Если СпособУказанияДаты = 1 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст  = "ВЫБРАТЬ // РАЗРЕШЕННЫЕ
		                |	Организации.Ссылка КАК Организация,
		                |	НЕОПРЕДЕЛЕНО КАК Пользователь,
		                |	&ОбщаяДата КАК ГраницаЗапретаИзменений
		                |ИЗ
		                |	Справочник.Организации КАК Организации";
						
		Если Не РольДоступна("ПолныеПрава") Тогда			
			Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
			|ПО Организации.Ссылка = НастройкиПравДоступаПользователей.ОбъектДоступа
	        |	И (НастройкиПравДоступаПользователей.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Организации))
	        |	И (НастройкиПравДоступаПользователей.Пользователь В	
		    |				(ВЫБРАТЬ
		    |					Справочник.ГруппыПользователей.ПользователиГруппы.Ссылка
		    |				ИЗ
		    |					Справочник.ГруппыПользователей.ПользователиГруппы
		    |				ГДЕ
		    |					Справочник.ГруппыПользователей.ПользователиГруппы.Пользователь = &ТекущийПользователь))			
			|	И (НастройкиПравДоступаПользователей.Запись = ИСТИНА)";
			
			Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
		КонецЕсли;
						
		Запрос.УстановитьПараметр("ОбщаяДата", ОбщаяДатаЗапрета);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			//Запись = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьМенеджерЗаписи();
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Набор.Записать();
		КонецЦикла;
		
	ИначеЕсли СпособУказанияДаты = 2 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст  = "ВЫБРАТЬ// РАЗРЕШЕННЫЕ
		                |	Организации.Ссылка КАК Организация,
		                |	НЕОПРЕДЕЛЕНО КАК Пользователь
		                |ИЗ
		                |	Справочник.Организации КАК Организации";
						
		Если Не РольДоступна("ПолныеПрава") Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
			|ПО Организации.Ссылка = НастройкиПравДоступаПользователей.ОбъектДоступа
	        |	И (НастройкиПравДоступаПользователей.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Организации))
	        |	И (НастройкиПравДоступаПользователей.Пользователь В	
		    |				(ВЫБРАТЬ
		    |					Справочник.ГруппыПользователей.ПользователиГруппы.Ссылка
		    |				ИЗ
		    |					Справочник.ГруппыПользователей.ПользователиГруппы
		    |				ГДЕ
		    |					Справочник.ГруппыПользователей.ПользователиГруппы.Пользователь = &ТекущийПользователь))
			|	И (НастройкиПравДоступаПользователей.Запись = ИСТИНА)";
			
			Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
			
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
        Пока Выборка.Следующий() Цикл
            НаборЗаписей  = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
            НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
            
            Запись = НаборЗаписей.Добавить();
            Запись.Организация = Выборка.Организация;
            Запись.Пользователь = Выборка.Пользователь;
            Запись.ГраницаЗапретаИзменений = Дата('00010101');
            
			//Запись = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьМенеджерЗаписи();
			//ЗаполнитьЗначенияСвойств(Запись, Выборка);
			СтрокаВДереве = ДеревоДаты.Строки.Найти(Выборка.Организация, "ОрганизацияПользователь");
			Если СтрокаВДереве <> Неопределено Тогда
				Запись.ГраницаЗапретаИзменений = СтрокаВДереве.Граница;
			КонецЕсли;
			НаборЗаписей.Записать();
		КонецЦикла;
		
	ИначеЕсли СпособУказанияДаты = 3 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст  = "ВЫБРАТЬ //РАЗРЕШЕННЫЕ
		                |	Организации.Ссылка КАК Организация
		                |ИЗ
		                |	Справочник.Организации КАК Организации";
						
		Если Не РольДоступна("ПолныеПрава") Тогда
			Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
			|ПО Организации.Ссылка = НастройкиПравДоступаПользователей.ОбъектДоступа
	        |	И (НастройкиПравДоступаПользователей.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Организации))
	        |	И (НастройкиПравДоступаПользователей.Пользователь В 
		    |				(ВЫБРАТЬ
		    |					Справочник.ГруппыПользователей.ПользователиГруппы.Ссылка
		    |				ИЗ
		    |					Справочник.ГруппыПользователей.ПользователиГруппы
		    |				ГДЕ
		    |					Справочник.ГруппыПользователей.ПользователиГруппы.Пользователь = &ТекущийПользователь))			
			|	И (НастройкиПравДоступаПользователей.Запись = ИСТИНА)";
			
			Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
		КонецЕсли;						
						
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл		
			
			Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			
			СтрокаВДереве = ДеревоДаты.Строки.Найти(Выборка.Организация, "ОрганизацияПользователь");
			
			Запись = Набор.Добавить();
			Запись.Организация = Выборка.Организация;
			Запись.Пользователь = Неопределено;
			
			Если СтрокаВДереве = Неопределено Тогда
				Запись.ГраницаЗапретаИзменений = Дата('00010101');
			Иначе
				Запись.ГраницаЗапретаИзменений = СтрокаВДереве.Граница;
				Для Каждого СтрокаРоли ИЗ СтрокаВДереве.Строки Цикл
					Запись = Набор.Добавить();
					Запись.Организация = Выборка.Организация;
					Запись.Пользователь = СтрокаРоли.ОрганизацияПользователь;
					Запись.ГраницаЗапретаИзменений = СтрокаРоли.Граница;
				КонецЦикла;
			КонецЕсли;			
			
			Набор.Записать();
			
		КонецЦикла;
		
		
	КонецЕсли;
	
	ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
	Модифицированность = Ложь;
	
	УстановитьМонопольныйРежим(Ложь);
	
КонецПроцедуры // СохранитьДанные

// Процедура выполняет первоначальное заполнение дерева при открытии формы
// по данным регистра сведений "Границы запрета изменения данных"
//
Процедура ЗаполнитьДеревоДат()
	
	ДеревоДаты.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Организации.Ссылка КАК Организация,
	               |	ЕСТЬNULL(Границы.Пользователь, НЕОПРЕДЕЛЕНО) КАК Пользователь,
	               |	ЕСТЬNULL(Границы.ГраницаЗапретаИзменений, ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)) КАК ГраницаЗапретаИзменений,
	               |	ЕСТЬNULL(НастройкиПравДоступаПользователей.Запись, ЛОЖЬ) КАК ПравоНаИзменение,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(Границы.Пользователь, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	               |			ТОГДА 1
	               |		КОГДА Границы.Пользователь ССЫЛКА Справочник.ГруппыПользователей
	               |			ТОГДА 2
	               |		КОГДА Границы.Пользователь ССЫЛКА Справочник.Пользователи
	               |			ТОГДА 3
	               |	КОНЕЦ КАК ПризнакТипаСтроки
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
	               |		ПО Границы.Организация = Организации.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	               |		ПО Организации.Ссылка = НастройкиПравДоступаПользователей.ОбъектДоступа
	               |			И (НастройкиПравДоступаПользователей.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Организации))
	               |			И (НастройкиПравДоступаПользователей.Пользователь В
	               |				(ВЫБРАТЬ
	               |					Справочник.ГруппыПользователей.ПользователиГруппы.Ссылка
	               |				ИЗ
	               |					Справочник.ГруппыПользователей.ПользователиГруппы
	               |				ГДЕ
	               |					Справочник.ГруппыПользователей.ПользователиГруппы.Пользователь = &ТекущийПользователь))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Организация,
	               |	ПризнакТипаСтроки,
	               |	Границы.Пользователь
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивСтрокКРазвороту = Новый Массив;
	ЕстьРольПолныеПрава = РольДоступна("ПолныеПрава");
	Пока Выборка.Следующий() Цикл
				
		Если Выборка.Пользователь = Неопределено Тогда
			СтрокаОрганизации = ДеревоДаты.Строки.Добавить();
            
			СтрокаОрганизации.ОрганизацияПользователь   = Выборка.Организация;
			СтрокаОрганизации.Граница           = Выборка.ГраницаЗапретаИзменений;		
			СтрокаОрганизации.ПравоНаИзменение  = ЕстьРольПолныеПрава ИЛИ Выборка.ПравоНаИзменение;
            СтрокаОрганизации.ТипСтроки         = Выборка.ПризнакТипаСтроки;
		Иначе		
			
			Если СтрокаОрганизации = Неопределено ИЛИ СтрокаОрганизации.ОрганизацияПользователь <> Выборка.Организация Тогда
				СтрокаОрганизации = ДеревоДаты.Строки.Добавить();
				СтрокаОрганизации.ОрганизацияПользователь   = Выборка.Организация;
				СтрокаОрганизации.ПравоНаИзменение  = ЕстьРольПолныеПрава ИЛИ Выборка.ПравоНаИзменение;
				СтрокаОрганизации.ТипСтроки         = 1;
			КонецЕсли;				
			МассивСтрокКРазвороту.Добавить(СтрокаОрганизации);		
			
			Если СпособУказанияДаты = 3 Тогда				
				СтрокаПользователя = СтрокаОрганизации.Строки.Добавить();                
				СтрокаПользователя.ОрганизацияПользователь      = Выборка.Пользователь;
				СтрокаПользователя.Граница              = Выборка.ГраницаЗапретаИзменений;
				СтрокаПользователя.ПравоНаИзменение     = ЕстьРольПолныеПрава ИЛИ Выборка.ПравоНаИзменение;
                СтрокаПользователя.ТипСтроки            = Выборка.ПризнакТипаСтроки;
			КонецЕСли;		
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКРазвороту ИЗ МассивСтрокКРазвороту Цикл
		ЭлементыФормы.ДеревоДаты.Развернуть(СтрокаКРазвороту);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДеревоДат

// Процедура управляет отображением страниц и первоначальным заполнением 
// деревьев дат.
// Вызывается при обработке события "ПриИзменении" элемента "СпособУказанияДаты"
//
Процедура ПриИзмененииСпособаУказания()
    
    Если СпособУказанияДаты = 1 Тогда
		ЭлементыФормы.ОсновнаяПанельФормы.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанельФормы.Страницы.ОбщаяДата;
	Иначе
		ЭлементыФормы.ОсновнаяПанельФормы.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанельФормы.Страницы.ДатыПоОрганизациям;
		ЭлементыФормы.ДеревоДаты.Колонки.ОрганизацияПользователь.ТекстШапки = "Организация" + ?(СпособУказанияДаты = 3, " / группа пользователей(пользователь)", "");
		ЗаполнитьДеревоДат();
        УстановитьВидимость();
    КонецЕсли;    
    
КонецПроцедуры // ПриИзмененииСпособаУказания

// Процедура - определяет способ указания даты, примененный ранее
//
Процедура ОпределитьСпособУказанияДаты()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений КАК ДатаЗапрета
	|ИЗ
	|	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных";
	
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() = 0 Тогда
		СпособУказанияДаты = 1;
		ОбщаяДатаЗапрета = Дата('00010101');
	ИначеЕСли ТаблицаЗапроса.Количество() = 1 Тогда
		СпособУказанияДаты = 1;
		ОбщаяДатаЗапрета = ТаблицаЗапроса[0].ДатаЗапрета;
	Иначе		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(ГраницыЗапрета.ГраницаЗапретаИзменений, ДАТАВРЕМЯ(1, 1, 1)))
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапрета
		|		ПО ГраницыЗапрета.Организация = Организации.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Организации.Ссылка
		|ИМЕЮЩИЕ КОЛИЧЕСТВО (РАЗЛИЧНЫЕ ЕСТЬNULL(ГраницыЗапрета.ГраницаЗапретаИзменений, ДАТАВРЕМЯ(01,01,01))) > 1";
		
		Результат = Запрос.Выполнить();
		СпособУказанияДаты = 2 + Число(НЕ Результат.Пустой());		
	КонецЕсли;		
	
КонецПроцедуры // ОпределитьСпособУказанияДаты

Процедура ДобавитьСтрокуДерева(ТипСтроки, КорневаяСтрока, ИмяДерева, ИмяПоляПользователь = "Пользователь")
   Перем ВыбранноеЗначение;
   
   // Если у пользователя нет права на редактирование данных
   // этой ветки - добавление в нее невозможно.
   Если Не КорневаяСтрока.ПравоНаИзменение Тогда
      Сообщить("У Вас нет права редактирования данных организации " + КорневаяСтрока.ОрганизацияПользователь, СтатусСообщения.Важное);
      
      Возврат;
   КонецЕсли;
   
   Если ТипСтроки = 2 Тогда
       ФормаВыбора = Справочники.ГруппыПользователей.ПолучитьФормуВыбора();
	   ФормаВыбора.Отбор.Ссылка.Установить(Справочники.ГруппыПользователей.ВсеПользователи);
       ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеРавно;     	   
   Иначе    
       ФормаВыбора = Справочники.Пользователи.ПолучитьФормуВыбора();       
	КонецЕсли;    
    
    ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
    
    ВыбранноеЗначение = ФормаВыбора.ОткрытьМодально();
    
    Если ВыбранноеЗначение = Неопределено Тогда
        Возврат;
    КонецЕсли;    
    
    СуществующаяСтрока = КорневаяСтрока.Строки.Найти(ВыбранноеЗначение);
    Если Не  СуществующаяСтрока = Неопределено Тогда     
        ЭлементыФормы[ИмяДерева].ТекущаяСтрока = СуществующаяСтрока;
        
        Возврат;
    КонецЕсли;  
    
    СтрокаПользователя = КорневаяСтрока.Строки.Добавить();
    
    СтрокаПользователя[ИмяПоляПользователь] = ВыбранноеЗначение;
    СтрокаПользователя.Граница              = КорневаяСтрока.Граница;
    СтрокаПользователя.ТипСтроки            = ТипСтроки;		
    СтрокаПользователя.ПравоНаИзменение     = Истина;
    
    КорневаяСтрока.Строки.Сортировать("ТипСтроки, ОрганизацияПользователь");
    
    ЭлементыФормы[ИмяДерева].ТекущаяСтрока = СтрокаПользователя;
КонецПроцедуры // ДобавитьСтрокуДерева
                                                  
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	ОпределитьСпособУказанияДаты();
	ПриИзмененииСпособаУказания();	    
	
КонецПроцедуры // ПриОткрытии


// Процедура- обработчик события "ПередЗакрытием"
// формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьДанные(Отказ);
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры // ПередЗакрытием

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" элемента "СпособУказанияДаты"
//
Процедура СпособУказанияДатыПриИзменении(Элемент)	
	ПриИзмененииСпособаУказания();	
КонецПроцедуры // СпособУказанияДатыПриИзменении

// Процедура - Обработчик события  ПриИзменении
// элемента управления "ОбщаяДата"
//
Процедура ОбщаяДатаЗапретаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры // ОбщаяДатаЗапретаПриИзменении


// Процедура - обработчик события "ПриВыводеСтроки"
// табличного поля "ДеревоДаты"
//
Процедура ДеревоДатыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ОрганизацияПользователь.ОтображатьКартинку = Истина;
	
	Если НЕ ДанныеСтроки.ПравоНаИзменение Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	КонецЕсли;
	
    Если ДанныеСтроки.ТипСтроки = 1 Тогда
        // Организация
		Если СпособУказанияДаты = 3 Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
		КонецЕсли;
		ОформлениеСтроки.Ячейки.ОрганизацияПользователь.УстановитьКартинку(БиблиотекаКартинок.ЗначокОрганизация16);
    Иначе
        // Группы пользователя
		Если ДанныеСтроки.ТипСтроки  = 2 Тогда
			ОформлениеСтроки.Ячейки.ОрганизацияПользователь.УстановитьКартинку(БиблиотекаКартинок.ЗначокФизическиеЛица16);
            ОформлениеСтроки.Ячейки.ОрганизацияПользователь.Шрифт = Новый Шрифт(,,Истина);
        Иначе
            // Пользователь
            ОформлениеСтроки.Ячейки.ОрганизацияПользователь.УстановитьКартинку(БиблиотекаКартинок.ЗначокФизическоеЛицо16);			
		КонецЕсли;
    КонецЕсли;
    
КонецПроцедуры // ДеревоДатыПриВыводеСтроки

// Процедура обработчик события "ПриИзменении"
// табличного поля ДеревоДатыГраница
//
Процедура ДеревоДатыГраницаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры // ДеревоДатыГраницаПриИзменении

// Процедура - обработчик события "ПередНачаломИзменения"
// табличного поля "ДеревоДаты"
Процедура ДеревоДатыПередНачаломИзменения(Элемент, Отказ)
	Если Не Элемент.ТекущиеДанные.ПравоНаИзменение Тогда
		Отказ = Истина;
		Предупреждение("Недостаточно прав для изменения даты запрета по данной организации");
    КонецЕсли;
    
КонецПроцедуры // ДеревоДатыПередНачаломИзменения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КНОПОК КОМАНДНЫХ ПАНЕЛЕЙ

// Обработчик события нажатия на кнопку "ОК" 
// командной панели "ОсновныеДействияФормы"
Процедура КнопкаВыполнитьНажатие(Элемент)
    
    Отказ = Ложь;
	СохранитьДанные(Отказ);
	Если Не Отказ Тогда
		Закрыть();
    КонецЕсли;
    
КонецПроцедуры // КнопкаВыполнитьНажатие

// Процедура - обработчик нажатия на кнопку "Записать"
// командной панели "ОсновныеДействияФормы"
Процедура ОсновныеДействияФормыКнопкаЗаписать(Кнопка)
	СохранитьДанные();
КонецПроцедуры // ОсновныеДействияФормыКнопкаЗаписать

// Обработчик нажатия на кнопку "Добавить/Пользователя"
// командной панели КоманднаяПанельДереваДаты
//
Процедура КоманднаяПанельДереваДатыДобавитьПользователя(Кнопка)
    	КорневаяСтрока = ЭлементыФормы.ДеревоДаты.ТекущаяСтрока;
    	Если КорневаяСтрока = Неопределено Тогда
    		// если в табличном поле не выбрана строка
    		// добавление в дерево невозможно
    		Возврат;
    	КонецЕсли;
    	Если НЕ КорневаяСтрока.ТипСтроки = 1 Тогда
    		// Если выбрана строка на уровне пользователя или группы пользователей
    		// новую строку добавляем в ту же ветку дерева
    		КорневаяСтрока = КорневаяСтрока.Родитель;
    	КонецЕсли;    
    	
    	ДобавитьСтрокуДерева(3, КорневаяСтрока, "ДеревоДаты" , "ОрганизацияПользователь");

КонецПроцедуры // КоманднаяПанельДереваДатыДобавитьПользователя

// Обработчик нажатия на кнопку "Добавить/Группу пользователей"
// командной панели КоманднаяПанельДереваДаты
//
Процедура КоманднаяПанельДереваДатыДобавитьГруппуПользователей(Кнопка)
    	КорневаяСтрока = ЭлементыФормы.ДеревоДаты.ТекущаяСтрока;
    	Если КорневаяСтрока = Неопределено Тогда
    		// если в табличном поле не выбрана строка
    		// добавление в дерево невозможно
    		Возврат;
    	КонецЕсли;
    	Если НЕ КорневаяСтрока.ТипСтроки = 1 Тогда
    		// Если выбрана строка на уровне пользователя или группы пользователей
    		// новую строку добавляем в ту же ветку дерева
    		КорневаяСтрока = КорневаяСтрока.Родитель;
    	КонецЕсли;    
    		
    	ДобавитьСтрокуДерева(2, КорневаяСтрока, "ДеревоДаты", "ОрганизацияПользователь");
	
		
КонецПроцедуры // КоманднаяПанельДереваДатыДобавитьГруппуПользователей

// Процедура - обработчик нажатия на кнопку "Удалить строку"
// командной панели КоманднаяПанельДереваДаты
//
Процедура КоманднаяПанельДереваДатыКнопкаУдалить(Кнопка)
	ТекущаяСтрока = ЭлементыФормы.ДеревоДаты.ТекущаяСтрока;
    
    Если ТекущаяСтрока = Неопределено тогда
		Возврат;
    КонецЕсли;	
    
    Если НЕ ТекущаяСтрока.ПравоНаИзменение тогда
        СтрокаОрганизации = ?(ТекущаяСтрока.Уровень() = 0, ТекущаяСтрока, ТекущаяСтрока.Родитель);
        Сообщить("У Вас нет права на удаление данных по организации " + СокрЛП(СтрокаОрганизации.ОрганизацияПользователь.Наименование), СтатусСообщения.Важное);
        
        Возврат;
    КонецЕсли;	                           
    
    Если ТекущаяСтрока.Уровень() = 0 Тогда
        Сообщить("Удаление организации невозможно. Вы можете удалить пользователя или группу пользователей.", СтатусСообщения.Важное);
        
        Возврат;        
    КонецЕсли;
    
	ТекущаяСтрока.Родитель.Строки.Удалить(ТекущаяСтрока);
КонецПроцедуры // КоманднаяПанельДереваДатыКнопкаУдалить

ДеревоДаты.Колонки.Добавить("ПравоНаИзменение");
ДеревоДаты.Колонки.Добавить("ТипСтроки");