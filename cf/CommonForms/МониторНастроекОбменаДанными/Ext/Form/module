
Перем РезультатОтложенныхДвиженийДокументов;
Перем НаличиеДанныхФоновойЗагрузки;

Перем КонецПериодаСтатистики;
Перем НачалоПериодаСтатистики;

Перем мЦветНеПроизводилосьДиаграмма;
Перем мЦветУспешноДиаграмма;
Перем мЦветНЕУспешноДиаграмма;

Перем мСоответствиеУзлаИПараметровПодключения;
Перем мСоответствиеУзлаИСтруктурыПодключения;

Процедура ОбновитьТекущиеДанныеПоОбменам()
	
	ТаблицаКоллизийПриОбмене.Обновить();	
	ТаблицаОтложенныхДвижений.Обновить();
	ТаблицаИсторииОбменаДанными.Обновить();
	ТаблицаСоответствияОбъектов.Обновить();
	
КонецПроцедуры

// процедура устанавливает надписи удачной или нет операции
Процедура УстановитьНадписиПроведенныхОпераций()
	
	ЭтоOnLineОбмен = Ложь;
	ПроизводитьПриемСообщений = Истина;
	ПроизводитьОтправкуСообщений = Истина;
	
	Если ЗначениеЗаполнено(НастройкаОбмена)
		И ТипЗнч(НастройкаОбмена) = Тип("СправочникСсылка.НастройкиОбменаДанными") Тогда
		
		ЭтоOnLineОбмен = НастройкаОбмена.OnLineОбмен;
		ПроизводитьПриемСообщений = НастройкаОбмена.ПроизводитьПриемСообщений;
		ПроизводитьОтправкуСообщений = НастройкаОбмена.ПроизводитьОтправкуСообщений;
		
	Иначе
		
		ЭтоOnLineОбмен = РезультатОтложенныхДвиженийДокументов <> Неопределено	
			ИЛИ НаличиеДанныхФоновойЗагрузки <> Неопределено;
				
	КонецЕсли;
	
		
	Если ПроизводитьПриемСообщений
		И ЗначениеЗаполнено(ДатаПоследнейЗагрузки) Тогда
		
		ЭлементыФормы.ПолеКартинкиДатаЗагрузки.Видимость = Истина;
		
		Если РезультатПоследнейЗагрузки = Истина Тогда 
			ЭлементыФормы.ПолеКартинкиДатаЗагрузки.Картинка = БиблиотекаКартинок.ВыполненоУспешно32;
		Иначе
			ЭлементыФормы.ПолеКартинкиДатаЗагрузки.Картинка = БиблиотекаКартинок.ВыполненоСОшибками32;
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.ПолеКартинкиДатаЗагрузки.Видимость = Ложь;
	КонецЕсли;	
	
	Если ПроизводитьОтправкуСообщений
		И ЗначениеЗаполнено(ДатаПоследнейВыгрузки) Тогда
		
		ЭлементыФормы.ПолеКартинкиДатаВыгрузки.Видимость = Истина;
		Если РезультатПоследнейВыгрузки = Истина Тогда 
			ЭлементыФормы.ПолеКартинкиДатаВыгрузки.Картинка = БиблиотекаКартинок.ВыполненоУспешно32;
		Иначе
			ЭлементыФормы.ПолеКартинкиДатаВыгрузки.Картинка = БиблиотекаКартинок.ВыполненоСОшибками32;
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.ПолеКартинкиДатаВыгрузки.Видимость = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.НадписьРезультатОтложенныхДвиженийДокументов.Доступность = ЭтоOnLineОбмен;
	ЭлементыФормы.НадписьРезультатОтложенныхДвижений.Доступность = ЭтоOnLineОбмен;
	ЭлементыФормы.НадписьНаличиеДанныхФоновойЗагрузки.Доступность = ЭтоOnLineОбмен;
	ЭлементыФормы.НадписьРезультатФоновойЗагрузкиДанных.Доступность = ЭтоOnLineОбмен;
	
	ЭлементыФормы.ПолеКартинкиРезультатОтложенныхДвижений.Видимость = ЭтоOnLineОбмен;
	ЭлементыФормы.ПолеКартинкиФоноваяЗагрузкаДанных.Видимость = ЭтоOnLineОбмен;
	
	Если ЭтоOnLineОбмен Тогда
		
		ЭлементыФормы.ПолеКартинкиРезультатОтложенныхДвижений.Видимость = Истина;
		Если РезультатОтложенныхДвиженийДокументов = Неопределено Тогда
			ЭлементыФормы.ПолеКартинкиРезультатОтложенныхДвижений.Видимость = Ложь;	
			ЭлементыФормы.НадписьРезультатОтложенныхДвижений.Видимость = Истина;
			ЭлементыФормы.НадписьРезультатОтложенныхДвижений.Заголовок = "Не производится";	
		ИначеЕсли РезультатОтложенныхДвиженийДокументов = Истина Тогда
			ЭлементыФормы.ПолеКартинкиРезультатОтложенныхДвижений.Картинка = БиблиотекаКартинок.ВыполненоУспешно32;	
			ЭлементыФормы.НадписьРезультатОтложенныхДвижений.Видимость = Ложь;
		Иначе
			ЭлементыФормы.ПолеКартинкиРезультатОтложенныхДвижений.Картинка = БиблиотекаКартинок.ВыполненоСОшибками32;	
			ЭлементыФормы.НадписьРезультатОтложенныхДвижений.Видимость = Ложь;
		КонецЕсли;
		
		ЭлементыФормы.ПолеКартинкиФоноваяЗагрузкаДанных.Видимость = Истина;
		ЭлементыФормы.НадписьРезультатФоновойЗагрузкиДанных.Видимость = Истина;
		Если НаличиеДанныхФоновойЗагрузки = Неопределено Тогда
			ЭлементыФормы.ПолеКартинкиФоноваяЗагрузкаДанных.Видимость = Ложь;	
			ЭлементыФормы.НадписьРезультатФоновойЗагрузкиДанных.Заголовок = "Не производится";
		ИначеЕсли НаличиеДанныхФоновойЗагрузки = Истина Тогда
			ЭлементыФормы.ПолеКартинкиФоноваяЗагрузкаДанных.Картинка = БиблиотекаКартинок.ВыполненоУспешно32;	
			ЭлементыФормы.НадписьРезультатФоновойЗагрузкиДанных.Заголовок = "Выполняется фоновый обмен";			
		Иначе
			ЭлементыФормы.ПолеКартинкиФоноваяЗагрузкаДанных.Видимость = Ложь;
			ЭлементыФормы.НадписьРезультатФоновойЗагрузкиДанных.Заголовок = "Нет фоновой загрузки";
		КонецЕсли;
		
		ЭлементыФормы.ДопПараметры.Свертка = РежимСверткиЭлементаУправления.Нет;		
				
	Иначе
		
		ЭлементыФормы.ДопПараметры.Свертка = РежимСверткиЭлементаУправления.Низ;
		
		ЭлементыФормы.НадписьРезультатОтложенныхДвижений.Заголовок = "Не производится";	
		ЭлементыФормы.НадписьРезультатФоновойЗагрузкиДанных.Заголовок = "Не производится";
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьЗначениеКЧислу(Значение)
	
	Если Значение = NULL Тогда
		Возврат 0;
	Иначе
		Возврат Число(Значение);
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьВДиаграммуДанные(Диаграмма, Успешно, Неудачно)
	
	Диаграмма.Очистить();
	
	ЧислоУдачно = ПреобразоватьЗначениеКЧислу(Успешно);
	ЧислоНЕУдачно = ПреобразоватьЗначениеКЧислу(Неудачно);
	
	ТОчка = Диаграмма.Точки.Добавить("Точка");
	
    Если ЧислоУдачно + ЧислоНЕУдачно = 0 Тогда
		
		Серия = Диаграмма.Серии.Добавить("Не производилось");
		Серия.Цвет = мЦветНеПроизводилосьДиаграмма;	
		
		Диаграмма.УстановитьЗначение(ТОчка, Серия, 1, , "Не производилась");
		
	Иначе
		
		Если ЧислоУдачно <> 0 Тогда
		    Серия = Диаграмма.Серии.Добавить("Успешно");
			Серия.Цвет = мЦветУспешноДиаграмма;
			Диаграмма.УстановитьЗначение(ТОчка, Серия, ЧислоУдачно, , "Успешно");
		КонецЕсли;
		
		Если ЧислоНЕУдачно <> 0 Тогда
		    Серия = Диаграмма.Серии.Добавить("Ошибки");
			Серия.Цвет = мЦветНЕУспешноДиаграмма;
			Диаграмма.УстановитьЗначение(ТОчка, Серия, ЧислоНЕУдачно, , "Ошибки");
		КонецЕсли;			
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеСтатистикиОбменов()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
				   |Выбрать 
				   |	Сумма(ДанныеОбменов.УдачнаяЗагрузка) КАК УдачнаяЗагрузка,
				   |	Сумма(ДанныеОбменов.НЕУдачнаяЗагрузка) КАК НЕУдачнаяЗагрузка,
				   |	Сумма(ДанныеОбменов.УдачнаяВыгрузка) КАК УдачнаяВыгрузка,
				   |	Сумма(ДанныеОбменов.НЕУдачнаяВыгрузка) КАК НЕУдачнаяВыгрузка,
				   |	Сумма(ДанныеОбменов.УдачнаяОтложенныеДвижения) КАК УдачнаяОтложенныеДвижения,
				   |	Сумма(ДанныеОбменов.НЕУдачнаяОтложенныеДвижения) КАК НЕУдачнаяОтложенныеДвижения,
				   |	Сумма(ДанныеОбменов.НаличиеФоновойВыгрузки) КАК	НаличиеФоновойВыгрузки			   
                   |ИЗ (ВЫБРАТЬ
				   |    Выбор Когда	ИсторияОбменаДанными.РезультатПоследнейЗагрузки = Истина ТОгда
				   |		1
				   |	Иначе
				   |		0
				   |	Конец КАК УдачнаяЗагрузка,
				   |	Выбор Когда ИсторияОбменаДанными.РезультатПоследнейЗагрузки = Ложь ТОгда
				   |		1
				   |	Иначе
				   |		0
				   |	Конец КАК НЕУдачнаяЗагрузка,
				   |
				   |	Выбор Когда	ИсторияОбменаДанными.РезультатПоследнейВыгрузки = Истина ТОгда
				   |		1
				   |	Иначе
				   |		0
				   |	Конец КАК УдачнаяВыгрузка,
				   |	Выбор Когда ИсторияОбменаДанными.РезультатПоследнейВыгрузки = Ложь ТОгда
				   |		1
				   |	Иначе
				   |		0
				   |	Конец КАК НЕУдачнаяВыгрузка,
				   |
				   |    Выбор Когда	ИсторияОбменаДанными.РезультатОтложенныхДвиженийДокументов = Истина ТОгда
				   |		1
				   |	Иначе
				   |		0
				   |	Конец КАК УдачнаяОтложенныеДвижения,
				   |	Выбор Когда ИсторияОбменаДанными.РезультатОтложенныхДвиженийДокументов = Ложь ТОгда
				   |		1
				   |	Иначе
				   |		0
				   |	Конец КАК НЕУдачнаяОтложенныеДвижения,
				   |
				   |    Выбор Когда	ИсторияОбменаДанными.НаличиеДанныхФоновойЗагрузки = Истина ТОгда
				   |		1
				   |	Иначе
				   |		0
				   |	Конец КАК НаличиеФоновойВыгрузки
	               |	
	               |ИЗ
	               |	РегистрСведений.ИсторияОбменаДанными КАК ИсторияОбменаДанными
				   |ГДЕ
				   |	ИсторияОбменаДанными.УзелИнформационнойБазы = &УзелИнформационнойБазы
				   |	И ИсторияОбменаДанными.Период >= &НачалоПериода
				   |	И ИсторияОбменаДанными.Период <= &КонецПериода) КАК ДанныеОбменов";
				   
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", Настройка);
	
	КонецПериодаСтатистики = ТекущаяДата();
	Запрос.УстановитьПараметр("КонецПериода", КонецПериодаСтатистики);
	
	Если ТипВыбораСтатистики = 0 Тогда
		НачалоПериодаСтатистики = КонецПериодаСтатистики - 60*60*24;
	ИначеЕсли ТипВыбораСтатистики = 1 Тогда
		НачалоПериодаСтатистики = КонецПериодаСтатистики - 7*60*60*24;
	ИначеЕсли ТипВыбораСтатистики = 2 Тогда
		НачалоПериодаСтатистики = ДобавитьМесяц(КонецПериодаСтатистики, -1);
	ИначеЕсли ТипВыбораСтатистики = 3 Тогда
		НачалоПериодаСтатистики = ДобавитьМесяц(КонецПериодаСтатистики, -3);
	ИначеЕсли ТипВыбораСтатистики = 4 Тогда
		НачалоПериодаСтатистики = ДобавитьМесяц(КонецПериодаСтатистики, -12);
	Иначе
		НачалоПериодаСтатистики = Дата('00010101');
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаСтатистики);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	ДобавитьВДиаграммуДанные(ЭлементыФормы.ДиаграммаЗагрузка, 10, 5);
    		
	Если ТаблицаРезультата.Количество() = 0 Тогда
		
		ДобавитьВДиаграммуДанные(ЭлементыФормы.ДиаграммаЗагрузка, 0, 0);
		ДобавитьВДиаграммуДанные(ЭлементыФормы.ДиаграммаВыгрузка, 0, 0);
		ДобавитьВДиаграммуДанные(ЭлементыФормы.ДиаграммаОтложенныеДвижения, 0, 0);
		ДобавитьВДиаграммуДанные(ЭлементыФормы.ДиаграммаФоноваяЗагрузка, 0, 0);		
				
	Иначе
		
		ИсточникДанных = ТаблицаРезультата[0];
		
		ДобавитьВДиаграммуДанные(ЭлементыФормы.ДиаграммаЗагрузка, ИсточникДанных.УдачнаяЗагрузка, ИсточникДанных.НЕУдачнаяЗагрузка);
		ДобавитьВДиаграммуДанные(ЭлементыФормы.ДиаграммаВыгрузка, ИсточникДанных.УдачнаяВыгрузка, ИсточникДанных.НЕУдачнаяВыгрузка);
		ДобавитьВДиаграммуДанные(ЭлементыФормы.ДиаграммаОтложенныеДвижения, ИсточникДанных.УдачнаяОтложенныеДвижения, ИсточникДанных.НЕУдачнаяОтложенныеДвижения);
		ДобавитьВДиаграммуДанные(ЭлементыФормы.ДиаграммаФоноваяЗагрузка, ИсточникДанных.НаличиеФоновойВыгрузки, 0);		
				
	КонецЕсли;		
	
	КоличествоНеудачЗагрузокПосле = 0;
	КоличествоНеудачВыгрузокПосле = 0;
	КоличествоНеудачПоследнееОтложенноеДвижениеДокументовПосле = 0;
	ПоследняяУдачнаяЗагрузка = ПроцедурыОбменаДаннымиКлиент.ПолучитьДанныеПоследнейУдачнойОперации(Настройка, "ДатаПоследнейЗагрузки", "РезультатПоследнейЗагрузки = Истина", "РезультатПоследнейЗагрузки = Ложь", КоличествоНеудачЗагрузокПосле);
	ПоследняяУдачнаяВыгрузка = ПроцедурыОбменаДаннымиКлиент.ПолучитьДанныеПоследнейУдачнойОперации(Настройка, "ДатаПоследнейВыгрузки", "РезультатПоследнейВыгрузки = Истина", "РезультатПоследнейВыгрузки = Ложь", КоличествоНеудачВыгрузокПосле);
	ПоследнееОтложенноеДвижениеДокументов = ПроцедурыОбменаДаннымиКлиент.ПолучитьДанныеПоследнейУдачнойОперации(Настройка, "ДатаПоследнейЗагрузки", "РезультатОтложенныхДвиженийДокументов = Истина", "РезультатОтложенныхДвиженийДокументов = Ложь", КоличествоНеудачПоследнееОтложенноеДвижениеДокументовПосле);		
		
	ЕстьНеудачныеЗагрузки = КоличествоНеудачЗагрузокПосле > 0;
	ЕстьНеудачныеВыгрузки = КоличествоНеудачВыгрузокПосле > 0;
	ЕстьНеудачныеДвижения = КоличествоНеудачПоследнееОтложенноеДвижениеДокументовПосле > 0;
	
	ЭлементыФормы.НадписьНеудачныхПопытокПослеЗагрузки.Видимость = ЕстьНеудачныеЗагрузки;
	ЭлементыФормы.КоличествоНеудачЗагрузокПосле.Видимость = ЕстьНеудачныеЗагрузки;
	ЭлементыФормы.ПоказатьНеудачныеЗагрузки.Видимость = ЕстьНеудачныеЗагрузки;
	
	ЭлементыФормы.НадписьНеудачныхПопытокПослеВыгрузки.Видимость = ЕстьНеудачныеВыгрузки;
	ЭлементыФормы.КоличествоНеудачВыгрузокПосле.Видимость = ЕстьНеудачныеВыгрузки;
	ЭлементыФормы.ПоказатьНеудачныеВыгрузки.Видимость = ЕстьНеудачныеВыгрузки;
	
	ЭлементыФормы.НадписьНеудачныхПопытокПослеДвижений.Видимость = ЕстьНеудачныеДвижения;
	ЭлементыФормы.КоличествоНеудачПоследнееОтложенноеДвижениеДокументовПосле.Видимость = ЕстьНеудачныеДвижения;
	ЭлементыФормы.ПоказатьНеудачныеДвижения.Видимость = ЕстьНеудачныеДвижения;
	
	ЭлементыФормы.ПолеКартинкиПоследняяУдачнаяЗагрузка.Видимость = ЗначениеЗаполнено(Настройка) И ЗначениеЗаполнено(ПоследняяУдачнаяЗагрузка);
	ЭлементыФормы.ПолеКартинкиПоследняяУдачнаяВыгрузка.Видимость = ЗначениеЗаполнено(Настройка) И ЗначениеЗаполнено(ПоследняяУдачнаяВыгрузка);
	ЭлементыФормы.ПолеКартинкиПоследнееУдачноеДвижениеДокументов.Видимость = ЗначениеЗаполнено(Настройка) И ЗначениеЗаполнено(ПоследнееОтложенноеДвижениеДокументов);
	
	ЭлементыФормы.ПолеКартинкиПоследняяУдачнаяЗагрузка.Картинка = ?(ЕстьНеудачныеЗагрузки, БиблиотекаКартинок.ВыполненоСОшибками32, БиблиотекаКартинок.ВыполненоУспешно32);
	ЭлементыФормы.ПолеКартинкиПоследняяУдачнаяВыгрузка.Картинка = ?(ЕстьНеудачныеВыгрузки, БиблиотекаКартинок.ВыполненоСОшибками32, БиблиотекаКартинок.ВыполненоУспешно32);
	ЭлементыФормы.ПолеКартинкиПоследнееУдачноеДвижениеДокументов.Картинка = ?(ЕстьНеудачныеДвижения, БиблиотекаКартинок.ВыполненоСОшибками32, БиблиотекаКартинок.ВыполненоУспешно32);
			
КонецПроцедуры

Процедура УстановитьДанныеОсновнойСтраницыПоОбменам()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсторияОбменовСрез.Период КАК ДатаПоследнегоОбмена,
	               |	ИсторияОбменовСрез.ДатаПоследнейЗагрузки,
	               |	ИсторияОбменовСрез.ДатаПоследнейВыгрузки,
	               |	ИсторияОбменовСрез.РезультатПоследнейЗагрузки,
	               |	ИсторияОбменовСрез.РезультатПоследнейВыгрузки,
	               |	ИсторияОбменовСрез.РезультатОтложенныхДвиженийДокументов,
	               |	ИсторияОбменовСрез.НаличиеДанныхФоновойЗагрузки
	               |ИЗ
	               |	РегистрСведений.ИсторияОбменаДанными.СрезПоследних(, УзелИнформационнойБазы = &Ссылка) КАК ИсторияОбменовСрез
	               |";
				   
	Запрос.УстановитьПараметр("Ссылка", Настройка); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ДатаПоследнегоОбмена = Выборка.ДатаПоследнегоОбмена;
				
		ДатаПоследнейЗагрузки = Выборка.ДатаПоследнейЗагрузки;
		ДатаПоследнейВыгрузки = Выборка.ДатаПоследнейВыгрузки;
		РезультатПоследнейЗагрузки = Выборка.РезультатПоследнейЗагрузки;
		РезультатПоследнейВыгрузки = Выборка.РезультатПоследнейВыгрузки;
						
		РезультатОтложенныхДвиженийДокументов = Выборка.РезультатОтложенныхДвиженийДокументов;
		НаличиеДанныхФоновойЗагрузки = Выборка.НаличиеДанныхФоновойЗагрузки;		
		
	Иначе
		
		ДатаПоследнегоОбмена = Неопределено;
				
		ДатаПоследнейЗагрузки = Неопределено;
		ДатаПоследнейВыгрузки = Неопределено;
		РезультатПоследнейЗагрузки = Ложь;
		РезультатПоследнейВыгрузки = Ложь;
				
		РезультатОтложенныхДвиженийДокументов = Неопределено;
		НаличиеДанныхФоновойЗагрузки = Неопределено;
		
	КонецЕсли;
	
	УстановитьНадписиПроведенныхОпераций();
	
	ОбновлениеСтатистикиОбменов();
	
Конецпроцедуры

Процедура Выполнить2Нажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
		Предупреждение("Не выбрана настройка для проведения обмена данными");
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДанными.ВыполнитьОбменДаннымиПоПроизвольнойНастройке(НастройкаОбмена, , глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
		
	ОбновитьТекущиеДанныеПоОбменам();
	УстановитьДанныеОсновнойСтраницыПоОбменам();
	
КонецПроцедуры

Процедура ВыполнитьОбщиДействияПриИзмененииНастройкиИНастройкиОбмена()
	
	ТаблицаКоллизийПриОбмене.Отбор.УзелОбмена.Установить(УзелОбмена);	
	ТаблицаКоллизийПриОбмене.Порядок.Установить("ДатаКоллизии Убыв, КоллизияРассмотрена Возр");
	
	ТаблицаОтложенныхДвижений.Отбор.УзелОбмена.Установить(УзелОбмена);	
	ТаблицаОтложенныхДвижений.Порядок.Установить("ДатаДокумента Возр");
	
	ТаблицаИсторииОбменаДанными.Отбор.УзелИнформационнойБазы.Установить(Настройка);	
	ТаблицаИсторииОбменаДанными.Порядок.Установить("Период Убыв");
	
	ТаблицаСоответствияОбъектов.Отбор.УзелОбмена.Установить(УзелОбмена);
	
	ЭлементыФормы.ПанельДанныеПоОбмену.Страницы.ИсторияОбменовДанными.Видимость = ЗначениеЗаполнено(УзелОбмена);
	ЭлементыФормы.ПанельДанныеПоОбмену.Страницы.КоллизииПриОбмене.Видимость = ЗначениеЗаполнено(УзелОбмена);
	
	ЭлементыФормы.ПанельДанныеПоОбмену.Страницы.ОтложенныеДвиженияДокументов.Видимость = ЗначениеЗаполнено(Настройка);
	ЭлементыФормы.ПанельДанныеПоОбмену.Страницы.СоответствиеОбъектов.Видимость = ЗначениеЗаполнено(Настройка);
	ЭлементыФормы.ПанельДанныеПоОбмену.Страницы.Дополнительно.Видимость = ЗначениеЗаполнено(Настройка);
	
	ЭлементыФормы.ВыполнитьОбменДаннымиПоНастройкеОбмена.Доступность = ЗначениеЗаполнено(НастройкаОбмена);
	
	
	УстановитьДанныеОсновнойСтраницыПоОбменам();	
		
КонецПроцедуры

Процедура УстановитьПараметрыПоНастройкеОбмена()
	
	УзелОбмена = Неопределено;
	УзелОбменаФон = Неопределено;
		
	Если ЗначениеЗаполнено(НастройкаОбмена) Тогда
		
		Если ТипЗнч(НастройкаОбмена) = Тип("СправочникСсылка.НастройкиОбменаДанными") Тогда
		
			УзелОбмена = НастройкаОбмена.УзелИнформационнойБазы;
			УзелОбменаФон = НастройкаОбмена.УзелФоновогоОбмена;
			
			Настройка = УзелОбмена;
			
		Иначе
			
			УзелОбмена = НастройкаОбмена.УзелОбменаТоварами;
			УзелОбменаФон = НастройкаОбмена.УзелОбменаЗаказами;
			
			Настройка = НастройкаОбмена;
			
		КонецЕсли;		
				
	КонецЕсли;
	
	ВыполнитьОбщиДействияПриИзмененииНастройкиИНастройкиОбмена();	
	
КонецПроцедуры

Процедура УстановитьНовуюНастройкуОбмена()
	
	УзелОбмена = Неопределено;
	УзелОбменаФон = Неопределено;
	НастройкаОбмена = Неопределено;
		
	Если ЗначениеЗаполнено(Настройка) Тогда		
			
		УзелОбмена = Настройка;
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ первые 1
					   |	НастройкиОбменаДанными.Ссылка
					   |ИЗ
					   |	Справочник.НастройкиОбменаДанными КАК НастройкиОбменаДанными
					   |ГДЕ
					   |	НастройкиОбменаДанными.УзелИнформационнойБазы = &Узел
					   |	И НастройкиОбменаДанными.ПометкаУдаления = Ложь";
					   
		Запрос.УстановитьПараметр("Узел", Настройка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			НастройкаОбмена = Выборка.Ссылка;	
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкаОбмена) Тогда
			УзелОбменаФон = НастройкаОбмена.УзелФоновогоОбмена;;
		КонецЕсли;						
						
	КонецЕсли;
	
	ВыполнитьОбщиДействияПриИзмененииНастройкиИНастройкиОбмена();
		
КонецПроцедуры

Процедура УстановитьПервуюНастройкуПоТипу()
	
	Запрос = Новый Запрос();
	
	Если ТипДанныхДляПоказа = ПланыОбмена.Полный.ПустаяСсылка() Тогда
				   
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ОбменПолный.Ссылка
		               |ИЗ
		               |	ПланОбмена.Полный КАК ОбменПолный
		               |ГДЕ
		               |	ОбменПолный.Ссылка <> &ОбменПолный
		               |	И ОбменПолный.ПометкаУдаления = ЛОЖЬ";	
		Запрос.УстановитьПараметр("ОбменПолный", ПланыОбмена.Полный.ЭтотУзел());
		
	ИначеЕсли ТипДанныхДляПоказа = ПланыОбмена.ПоОрганизации.ПустаяСсылка() Тогда
				   
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ПоОрганизации.Ссылка
		               |ИЗ
		               |	ПланОбмена.ПоОрганизации КАК ПоОрганизации
		               |ГДЕ
		               |	ПоОрганизации.Ссылка <> &ПоОрганизации
		               |	И ПоОрганизации.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("ПоОрганизации", ПланыОбмена.ПоОрганизации.ЭтотУзел());
		
	// {ОбменДаннымиСУправлениемТорговлей
	ИначеЕсли ТипДанныхДляПоказа = ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП.ПустаяСсылка() Тогда
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ОбменУправлениеТорговлейБухгалтерияКОРП.Ссылка
		               |ИЗ
		               |	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП КАК ОбменУправлениеТорговлейБухгалтерияКОРП
		               |ГДЕ
		               |	ОбменУправлениеТорговлейБухгалтерияКОРП.Ссылка <> &ОбменУправлениеТорговлейБухгалтерияУзелСвоейИБ
		               |	И ОбменУправлениеТорговлейБухгалтерияКОРП.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("ОбменУправлениеТорговлейБухгалтерияУзелСвоейИБ", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП.ЭтотУзел());
	// }ОбменДаннымиСУправлениемТорговлей
	
	// {ОбменДаннымиСРозницей
	ИначеЕсли ТипДанныхДляПоказа = ПланыОбмена.ОбменРозницаБухгалтерия20.ПустаяСсылка() Тогда
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ОбменРозницаБухгалтерия20.Ссылка
		               |ИЗ
		               |	ПланОбмена.ОбменРозницаБухгалтерия20 КАК ОбменРозницаБухгалтерия20
		               |ГДЕ
		               |	ОбменРозницаБухгалтерия20.Ссылка <> &ЭтотУзел
		               |	И НЕ ОбменРозницаБухгалтерия20.ПометкаУдаления";
		Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменРозницаБухгалтерия20.ЭтотУзел());
	// }ОбменДаннымиСРозницей
	
	// {ОбменДаннымиСУправлениемНебольшойФирмой
	ИначеЕсли ТипДанныхДляПоказа = ПланыОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия20.ПустаяСсылка() Тогда
				   
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ОбменУправлениеФирмойБухгалтерия.Ссылка
		               |ИЗ
		               |	ПланОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия20 КАК ОбменУправлениеФирмойБухгалтерия
		               |ГДЕ
		               |	ОбменУправлениеФирмойБухгалтерия.Ссылка <> &ОбменУправлениеФирмойБухгалтерия
		               |	И НЕ ОбменУправлениеФирмойБухгалтерия.ПометкаУдаления";
		Запрос.УстановитьПараметр("ОбменУправлениеФирмойБухгалтерия", ПланыОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия20.ЭтотУзел());
	// }ОбменДаннымиСУправлениемНебольшойФирмой
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Настройка = Выборка.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработчикПриОдновленииДанныхМонитораПоВремени() Экспорт
	
	ОтключитьОбработчикОжидания("ОбработчикПриОдновленииДанныхМонитораПоВремени");
	
	// проводим обмен данными
	УстановитьНовуюНастройкуОбмена(); 
	
	Если АвтоматическиОбновлятьДанныеМонитораЧерезИнтервал > 0 Тогда
		ПодключитьОбработчикОжидания("ОбработчикПриОдновленииДанныхМонитораПоВремени", АвтоматическиОбновлятьДанныеМонитораЧерезИнтервал);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзменениеИнтервалаОбновленияДанныхМонитора()
	
	ОтключитьОбработчикОжидания("ОбработчикПриОдновленииДанныхМонитораПоВремени");
	
	Если АвтоматическиОбновлятьДанныеМонитораЧерезИнтервал > 0 Тогда
		ПодключитьОбработчикОжидания("ОбработчикПриОдновленииДанныхМонитораПоВремени", АвтоматическиОбновлятьДанныеМонитораЧерезИнтервал);	
	КонецЕсли;	
	
КонецПроцедуры


Процедура ПриОткрытии()
	
	АвтоматическиОбновлятьДанныеМонитораЧерезИнтервал = 0;
	ЗначениеИнтервалаОбновленияМонитора = ВосстановитьЗначение("МониторОбменаДанными.АвтоматическиОбновлятьДанныеМонитораЧерезИнтервал");
	Если ЗначениеЗаполнено(ЗначениеИнтервалаОбновленияМонитора) Тогда
		АвтоматическиОбновлятьДанныеМонитораЧерезИнтервал = ЗначениеИнтервалаОбновленияМонитора;
	КонецЕсли;
	
	ОбработатьИзменениеИнтервалаОбновленияДанныхМонитора();
		
	Если ЗначениеЗаполнено(НастройкаОбмена) Тогда 
		
		УстановитьПараметрыПоНастройкеОбмена();
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Настройка) Тогда 
		
		УстановитьНовуюНастройкуОбмена();
		Возврат;
		
	КонецЕсли;
	
	Если ТипДанныхДляПоказа <> Неопределено Тогда
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ТипДанныхДляПоказа));
		ЭлементыФормы.Настройка.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		ЭлементыФормы.Настройка.ВыбиратьТип = Ложь;
		
		УстановитьПервуюНастройкуПоТипу();
		
		УстановитьНовуюНастройкуОбмена();
		
		Возврат;
				
	КонецЕсли;
	
	// {ОбменДаннымиСУправлениемТорговлей
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбменУправлениеТорговлейБухгалтерияКОРП.Ссылка
	|ИЗ
	|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП КАК ОбменУправлениеТорговлейБухгалтерияКОРП
	|ГДЕ
	|	ОбменУправлениеТорговлейБухгалтерияКОРП.Ссылка <> &ОбменУправлениеТорговлейБухгалтерияУзелСвоейИБ
	|	И ОбменУправлениеТорговлейБухгалтерияКОРП.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбменПолный.Ссылка
	|ИЗ
	|	ПланОбмена.Полный КАК ОбменПолный
	|ГДЕ
	|	ОбменПолный.Ссылка <> &ОбменПолный
	|	И ОбменПолный.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоОрганизации.Ссылка
	|ИЗ
	|	ПланОбмена.ПоОрганизации КАК ПоОрганизации
	|ГДЕ
	|	ПоОрганизации.Ссылка <> &ПоОрганизацииУзелСвоейИБ
	|	И ПоОрганизации.ПометкаУдаления = ЛОЖЬ";
				   
	Запрос.УстановитьПараметр("ОбменУправлениеТорговлейБухгалтерияУзелСвоейИБ", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП.ЭтотУзел());
	Запрос.УстановитьПараметр("ПоОрганизацииУзелСвоейИБ", ПланыОбмена.ПоОрганизации.ЭтотУзел());
	Запрос.УстановитьПараметр("ОбменПолный", ПланыОбмена.Полный.ЭтотУзел());
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Настройка = Выборка.Ссылка;	
		
	КонецЕсли;
		
	УстановитьНовуюНастройкуОбмена();
	// }ОбменДаннымиСУправлениемТорговлей
	
КонецПроцедуры

Процедура КоманднаяПанельКоллизийПриОбменеПоказатьРазличия(Кнопка)
	
	Если ЭлементыФормы.ТаблицаКоллизийПриОбмене.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДоИзменения = ЭлементыФормы.ТаблицаКоллизийПриОбмене.ТекущиеДанные.ЗначениеВИнформационнойБазеДоКоллизии; 
	СтрокаПослеИзменения = ЭлементыФормы.ТаблицаКоллизийПриОбмене.ТекущиеДанные.ЗначениеДляЗаменыПриОбмене;
	
	// сохраняем эти строки в 2 файла и сравниваем файлы
	ИмяКаталога = КаталогВременныхФайлов();
	
	ИмяФайлаДо = ИмяКаталога + "\" + "ОбъектВИнформационнойБазе.txt";
	ИмяФайлаПосле = ИмяКаталога + "\" + "ОбъектДляЗаменыПриОбмене.txt";
	
	Текст = Новый ЗаписьТекста(ИмяФайлаДо, КодировкаТекста.ANSI);
	Текст.Записать(СтрокаДоИзменения);
	Текст.Закрыть();
	
	Текст = Новый ЗаписьТекста(ИмяФайлаПосле, КодировкаТекста.ANSI);
	Текст.Записать(СтрокаПослеИзменения);
	Текст.Закрыть();
	
	Сравнение = Новый СравнениеФайлов;
	
	Сравнение.ПервыйФайл = ИмяФайлаДо;
	Сравнение.ВторойФайл = ИмяФайлаПосле;
	
	Сравнение.СпособСравнения = СпособСравненияФайлов.ТекстовыйДокумент;
	
	Сравнение.ПоказатьРазличия();
	
	УдалитьФайлы(ИмяФайлаДо);
	УдалитьФайлы(ИмяФайлаПосле);
	
КонецПроцедуры

Процедура НастройкаДляОбменаПриИзменении(Элемент)
	
	УстановитьНовуюНастройкуОбмена();
	
КонецПроцедуры

Процедура ТаблицаИсторииОбменаДаннымиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	// отображаем дату загрузки и выгрузки данных
	Для Каждого Оформление Из ОформленияСтрок Цикл
					
		ОтображатьКартинку = Ложь;
					
		Если ЗначениеЗаполнено(Оформление.ДанныеСтроки.ДатаПоследнейЗагрузки) Тогда 
				
			ОтображатьКартинку = Истина;
			Если Оформление.ДанныеСтроки.РезультатПоследнейЗагрузки = Истина Тогда
				Оформление.Ячейки.ДатаПоследнейЗагрузки.УстановитьКартинку(БиблиотекаКартинок.Утвердить);
			Иначе	
				Оформление.Ячейки.ДатаПоследнейЗагрузки.УстановитьКартинку(БиблиотекаКартинок.Остановить);
			КонецЕсли;
			
			Если Оформление.ДанныеСтроки.РезультатОтложенныхДвиженийДокументов = Неопределено Тогда
				
				Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.ОтображатьКартинку = Ложь;
				Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьТекст("");
				
			ИначеЕсли Оформление.ДанныеСтроки.РезультатОтложенныхДвиженийДокументов = Истина Тогда
				Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьКартинку(БиблиотекаКартинок.Утвердить);
				Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьТекст("Успешно");
				Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.ОтображатьКартинку = Истина;
			Иначе	
				Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьКартинку(БиблиотекаКартинок.Остановить);
				Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьТекст("С ошибками");
				Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.ОтображатьКартинку = Истина;
			КонецЕсли;
			
			Если Оформление.ДанныеСтроки.НаличиеДанныхФоновойЗагрузки = Истина Тогда
				Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьКартинку(БиблиотекаКартинок.ВыполнитьЗадачу);
				Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьТекст("Фоновый обмен");
			Иначе	
				Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьКартинку(БиблиотекаКартинок.Утвердить);
				Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьТекст("Завершена");
			КонецЕсли;
			
			Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.ОтображатьКартинку = Истина;
			
			ДатаНачалаПоследнейЗагрузки = Оформление.ДанныеСтроки.ДатаНачалаПоследнейЗагрузки; 
			
			Если ЗначениеЗаполнено(ДатаНачалаПоследнейЗагрузки) Тогда
				
				ВремяПоследнейЗагрузки = Оформление.ДанныеСтроки.ДатаПоследнейЗагрузки - ДатаНачалаПоследнейЗагрузки;
				СтрокаДляПользователя = Строка(Оформление.ДанныеСтроки.ДатаПоследнейЗагрузки) + "  (" + 
					ПроцедурыОбменаДаннымиКлиент.ПолучитьПоРазностиВремениПредставлениеДляПользователя(ВремяПоследнейЗагрузки) + ")";
				
				Оформление.Ячейки.ДатаПоследнейЗагрузки.УстановитьТекст(СтрокаДляПользователя);
    				
			КонецЕсли;
										
		Иначе
			Оформление.Ячейки.ДатаПоследнейЗагрузки.УстановитьТекст("Не производилась");
			Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьТекст("");
			Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьТекст("");
			
		КонецЕсли;
							
		Оформление.Ячейки.ДатаПоследнейЗагрузки.ОтображатьКартинку = ОтображатьКартинку;
		
			
			
		ОтображатьКартинку = Ложь;
			
		Если ЗначениеЗаполнено(Оформление.ДанныеСтроки.ДатаПоследнейВыгрузки) Тогда 
				
			ОтображатьКартинку = Истина;
			Если Оформление.ДанныеСтроки.РезультатПоследнейВыгрузки = Истина Тогда
				Оформление.Ячейки.ДатаПоследнейВыгрузки.УстановитьКартинку(БиблиотекаКартинок.Утвердить);
			Иначе	
				Оформление.Ячейки.ДатаПоследнейВыгрузки.УстановитьКартинку(БиблиотекаКартинок.Остановить);
			КонецЕсли;
			
			ДатаНачалаПоследнейВыгрузки = Оформление.ДанныеСтроки.ДатаНачалаПоследнейВыгрузки; 
			
			Если ЗначениеЗаполнено(ДатаНачалаПоследнейВыгрузки) Тогда
				
				ВремяПоследнейВыгрузки = Оформление.ДанныеСтроки.ДатаПоследнейВыгрузки - ДатаНачалаПоследнейВыгрузки;
				СтрокаДляПользователя = Строка(Оформление.ДанныеСтроки.ДатаПоследнейВыгрузки) + "  (" + 
					ПроцедурыОбменаДаннымиКлиент.ПолучитьПоРазностиВремениПредставлениеДляПользователя(ВремяПоследнейВыгрузки) + ")";
				
				Оформление.Ячейки.ДатаПоследнейВыгрузки.УстановитьТекст(СтрокаДляПользователя);
    				
			КонецЕсли;
				
		Иначе	
				
			ОтображатьФлаг = Истина;
			Оформление.Ячейки.ДатаПоследнейВыгрузки.УстановитьТекст("Не производилась");
				
		КонецЕсли;
								
		Оформление.Ячейки.ДатаПоследнейВыгрузки.ОтображатьКартинку = ОтображатьКартинку;			
				
    КонецЦикла;	
	
КонецПроцедуры

Процедура ЗапуститьОтложенноеПроведение(ПодПолнымиПравами = Ложь)
	
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	// выполнение отложенных движений документов
	ОтветПользователя = Вопрос("Выполнения отложенных движений для документов операция необратимая. 
		|В случае возникновения ошибки при проведении документа выполнить проведение других документов? 
		|(Да - продолжить, Нет - прекратить проведение, Отмена - отказаться от проведения)",
		РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
		
	Если ОтветПользователя = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПрекратитьПроведениеДокументовВСлучаеОшибки = (ОтветПользователя = КодВозвратаДиалога.Да);
	КоличествоОшибокОбменаДляПрекращенияПроведения = 0;
	
	Если ПрекратитьПроведениеДокументовВСлучаеОшибки Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Число"));
		КЧ = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный);
		ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
				
		Если НЕ ВвестиЗначение(КоличествоОшибокОбменаДляПрекращенияПроведения, 
			"Укажите количество ошибок, после которых нужно прекратить проведение", 
			ОписаниеТипов)  Тогда
			
			КоличествоОшибокОбменаДляПрекращенияПроведения = 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодПолнымиПравами Тогда
		
		ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая();
		
		Если НЕ ЭтоФайловаяИБ Тогда
			Сообщить("Выполнение отложенных операций с документами. Начало выполнения: " + ТекущаяДата() + Символы.ПС);
		КонецЕсли;
		
		СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов = ПроцедурыОбменаДаннымиПолныеПрава.ВыполнитьОтложенныеДвиженияПоПараметрамПодПолнымиПравамиНаСервере(УзелОбмена, 
			ПрекратитьПроведениеДокументовВСлучаеОшибки, КоличествоОшибокОбменаДляПрекращенияПроведения);
			
		Если НЕ ЭтоФайловаяИБ Тогда
			Сообщить("Выполнение отложенных операций с документами. Окончание выполнения: " + ТекущаяДата());
		КонецЕсли;
		
	Иначе
	
		ФормаОтображения = ПолучитьОбщуюФорму("РезультатыПроведения");
		
		СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов = ПроцедурыОбменаДанными.ВыполнитьОтложенныеДвиженияПоПараметрам(УзелОбмена, 
			ПрекратитьПроведениеДокументовВСлучаеОшибки, КоличествоОшибокОбменаДляПрекращенияПроведения, ФормаОтображения);	
			
	КонецЕсли;
			
	ТаблицаОтложенныхДвижений.Обновить();
	
	Если ПустаяСтрока(СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов) Тогда
		Предупреждение("Выполнение отложенных движений с документами успешно завершено", 30);		
	КонецЕсли;	
	
КонецПроцедуры

Процедура КоманднаяПанельОтложенныеДвиженияЗапуститьОтложенныеДвиженияДокументов(Кнопка)
	
	ЗапуститьОтложенноеПроведение(Ложь);
	
КонецПроцедуры

Процедура ТипВыбораСтатистикиПриИзменении(Элемент)
	
	ОбновлениеСтатистикиОбменов();
	
КонецПроцедуры
 
Процедура РегистрСведенийСписокКомментарийКЗагрузкеДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыОбменаДаннымиКлиент.ОткрытьФормуРедактированияТекста(ЭтаФорма, Элемент.Значение, СтандартнаяОбработка);
		
КонецПроцедуры

Процедура КнопкаДелтальноПоУзлуОбменаНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДаннымиКлиент.ПоказатьЗарегистрированныеИзмененияДляУзла(УзелОбмена, ЭтаФорма, Строка(Новый УникальныйИдентификатор));	
	
КонецПроцедуры

Процедура КнопкаДелтальноПоУзлуОбмена1Нажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(УзелОбменаФон) Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДаннымиКлиент.ПоказатьЗарегистрированныеИзмененияДляУзла(УзелОбменаФон, ЭтаФорма, Строка(Новый УникальныйИдентификатор));		
	
КонецПроцедуры

Процедура ПоказатьНеудачныеЗагрузкиНажатие(Элемент)
	
	Если КоличествоНеудачЗагрузокПосле = 0 Тогда
		
		Если ЗначениеЗаполнено(ПоследняяУдачнаяЗагрузка) Тогда
			Предупреждение("Неудачных загрузок после " + ПоследняяУдачнаяЗагрузка + " не было.");
		Иначе
			Предупреждение("Неудачных загрузок не было.");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДаннымиКлиент.РасшифовкаНеудачПосле(Настройка, "Загрузка", ПоследняяУдачнаяЗагрузка, ЭтаФорма);	
	
КонецПроцедуры

Процедура ПоказатьНеудачныеВыгрузкиНажатие(Элемент)
	
	Если КоличествоНеудачВыгрузокПосле = 0 Тогда
		
		Если ЗначениеЗаполнено(ПоследняяУдачнаяВыгрузка) Тогда
			Предупреждение("Неудачных выгрузок после " + ПоследняяУдачнаяВыгрузка + " не было.");
		Иначе
			Предупреждение("Неудачных выгрузок не было.");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДаннымиКлиент.РасшифовкаНеудачПосле(Настройка, "Выгрузка", ПоследняяУдачнаяВыгрузка, ЭтаФорма);
	
КонецПроцедуры

Процедура ПоказатьНеудачныеДвиженияНажатие(Элемент)
	
	Если КоличествоНеудачПоследнееОтложенноеДвижениеДокументовПосле = 0 Тогда
		
		Если ЗначениеЗаполнено(ПоследнееОтложенноеДвижениеДокументов) Тогда
			Предупреждение("Неудачных отложенных движений документов после " + ПоследнееОтложенноеДвижениеДокументов + " не было.");
		Иначе
			Предупреждение("Неудачных отложенных движений документов не было.");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДаннымиКлиент.РасшифовкаНеудачПосле(Настройка, "Движение документов", ПоследнееОтложенноеДвижениеДокументов, ЭтаФорма);
		
КонецПроцедуры

Процедура ТаблицаИсторииОбменаДаннымиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка.Имя = "КомментарийКЗагрузкеДанных"
		ИЛИ Колонка.Имя = "КомментарийКОтложенномуДвижениюДокументов"
		ИЛИ Колонка.Имя = "КомментарийКВыгрузкеДанных" Тогда
		
		ПроцедурыОбменаДаннымиКлиент.ОткрытьФормуРедактированияТекста(ЭтаФорма, Элемент.ТекущиеДанные[Колонка.Имя], СтандартнаяОбработка);
					
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаОтложенныхДвиженийВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка.Имя = "СообщениеОбОшибкеПроведения"
		И ЗначениеЗаполнено(Элемент.ТекущиеДанные[Колонка.Имя]) Тогда
		
		ПроцедурыОбменаДаннымиКлиент.ОткрытьФормуРедактированияТекста(ЭтаФорма, Элемент.ТекущиеДанные[Колонка.Имя], СтандартнаяОбработка);		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельГлавнаяОдновитьДанные(Кнопка)
	
	УстановитьНовуюНастройкуОбмена();
	
КонецПроцедуры

Процедура КоманднаяПанельГлавнаяНастройка(Кнопка)
	
	// открыть настройки монитора обмена данными
	ФормаНастроек = ПолучитьОбщуюФорму("НастройкиМонитораОбменаДанными", ЭтаФорма);	
	ФормаНастроек.АвтоматическиОбновлятьДанныеМонитораЧерезИнтервал = АвтоматическиОбновлятьДанныеМонитораЧерезИнтервал;
	
	РезультатОткрытия = ФормаНастроек.ОткрытьМодально();
	
	Если РезультатОткрытия = Истина Тогда
		
		АвтоматическиОбновлятьДанныеМонитораЧерезИнтервал = ФормаНастроек.АвтоматическиОбновлятьДанныеМонитораЧерезИнтервал;	
		
		ОбработатьИзменениеИнтервалаОбновленияДанныхМонитора();
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ОтключитьОбработчикОжидания("ОбработчикПриОдновленииДанныхМонитораПоВремени");
	
	СохранитьЗначение("МониторОбменаДанными.АвтоматическиОбновлятьДанныеМонитораЧерезИнтервал", АвтоматическиОбновлятьДанныеМонитораЧерезИнтервал);
	
КонецПроцедуры

Процедура КоманднаяПанельОтложенныеДвиженияЗапуститьОтложенныеДвиженияДокументовПодПолнымиПравами(Кнопка)
	
	ЗапуститьОтложенноеПроведение(Истина);	
	
КонецПроцедуры

// процедура отображает данные регитсра
Процедура ОтобразитьДанныеРегистра(Данные, МетаданныеРегистра)
	
	ИмяРегистра = МетаданныеРегистра.Имя;
	
	ФормаСписка = РегистрыСведений[ИмяРегистра].ПолучитьФормуСписка();	
		
	// отбор ставим
	Для Каждого СтрокаОтбора Из Данные.Отбор Цикл
		
		СтрокаОтбораФормы = ФормаСписка.Отбор.Найти(СтрокаОтбора.Имя);
		
		Если СтрокаОтбораФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОтбораФормы.Использование = СтрокаОтбора.Использование;
		СтрокаОтбораФормы.ВидСравнения = СтрокаОтбора.ВидСравнения;
		СтрокаОтбораФормы.Значение = СтрокаОтбора.Значение;
		
	КонецЦикла;
	
	ФормаСписка.Открыть();
	
КонецПроцедуры

// функция получает версию объекта и пытается его записать в информационную базу
Функция ВернутьсяКВерсииОбъекта(СтрокаВерсииОбъекта)
	
	Попытка
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(СтрокаВерсииОбъекта);
		
		Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
		
			Объект = ПрочитатьXML(ЧтениеXML);
			
			Если Объект = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Попытка
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.Записать();
			Исключение
		
				СтрокаОшибки = ОписаниеОшибки();
				Предупреждение("Возникла ошибка сохранении версии объекта. Описание ошибки: " + СтрокаОшибки);
				Возврат Ложь;
				
			КонецПопытки;
						
		Иначе
			Предупреждение("Объект не может быть прочитан из сохраненной версии.");
			Возврат Ложь;
		КонецЕсли;
		
	Исключение
		
		СтрокаОшибки = ОписаниеОшибки();
		Предупреждение("Возникла ошибка при получении версии объекта. После коллизии метаданные объекта были изменены. Возврат к версии объекта невозможен.");
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ПоказатьОбъектПоСохраненнойВерсии(СтрокаВерсииОбъекта)
	
	Попытка
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(СтрокаВерсииОбъекта);
		
		Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
		
			Объект = ПрочитатьXML(ЧтениеXML);
			
			Если Объект = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			МетаданныеОбъекта = Объект.Метаданные();
				
			Если Метаданные.Константы.Содержит(МетаданныеОбъекта) Тогда
				Предупреждение(Объект.Значение, , Строка(Объект));	
				
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
				
				ОтобразитьДанныеРегистра(Объект, МетаданныеОбъекта);	
				
			Иначе
				Объект.ПолучитьФорму().Открыть();		
			КонецЕсли;			
						
		Иначе
			Предупреждение("Объект не может быть прочитан из сохраненной версии.");
		КонецЕсли;
		
	Исключение
		
		СтрокаОшибки = ОписаниеОшибки();
		Предупреждение("Возникла ошибка при получении версии объекта. После коллизии метаданные объекта были изменены. Возврат к версии объекта невозможен.");
		
	КонецПопытки;	
	
КонецПроцедуры

Процедура КоманднаяПанельКоллизийПриОбменеПоказатьОбъектДоКоллизии(Кнопка)
	
	Если ЭлементыФормы.ТаблицаКоллизийПриОбмене.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных = ЭлементыФормы.ТаблицаКоллизийПриОбмене.ТекущиеДанные.ЗначениеВИнформационнойБазеДоКоллизии; 
	ПоказатьОбъектПоСохраненнойВерсии(СтрокаДанных);
		
КонецПроцедуры

Процедура КоманднаяПанельКоллизийПриОбменеПоказатьОбъектПослеКоллизии(Кнопка)
	
	Если ЭлементыФормы.ТаблицаКоллизийПриОбмене.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных = ЭлементыФормы.ТаблицаКоллизийПриОбмене.ТекущиеДанные.ЗначениеДляЗаменыПриОбмене; 
	ПоказатьОбъектПоСохраненнойВерсии(СтрокаДанных);
		
КонецПроцедуры

Функция ПодключитьсяКИнформационнойБазеПоСтруктуреПараметров(СтруктураПодключения)
	
	Обработкта = Обработки.ОбменДаннымиXML.Создать();
	Подключение = Неопределено;
	РезультатПодключения = Обработкта.ПодключитсяКИнформационнойБазе(СтруктураПодключения, ,"V81.Application", Подключение);
	
	Если РезультатПодключения = Истина Тогда
	
		мСоответствиеУзлаИПараметровПодключения.Вставить(Настройка, Подключение);
		
	Иначе
		
		мСоответствиеУзлаИПараметровПодключения.Удалить(Настройка);
		
	КонецЕсли;
		
	Возврат Подключение;
	
КонецФункции

Функция ПодключитьсяКИнформационнойБазеОбмена()
	
	ТекCOMОбъект = мСоответствиеУзлаИПараметровПодключения.Получить(Настройка);
	Если ТекCOMОбъект <> Неопределено Тогда
		Возврат ТекCOMОбъект;
	КонецЕсли;
	
	СтруктураПодключения = мСоответствиеУзлаИСтруктурыПодключения.Получить(Настройка);
	
	Если СтруктураПодключения = Неопределено Тогда	
		
		СтруктураПодключения = Новый Структура;
		
		Если ЗначениеЗаполнено(НастройкаОбмена) 
			И ТипЗнч(НастройкаОбмена) = Тип("СправочникСсылка.НастройкиОбменаДанными")
			И НастройкаОбмена.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			
			СкопироватьПараметрыПодключенияВСтруктуру(СтруктураПодключения, НастройкаОбмена);	
			
		Иначе
			
			УстановитьПараметрыПодключенияПоУмолчанию(СтруктураПодключения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекCOMОбъект = ПодключитьсяКИнформационнойБазеПоСтруктуреПараметров(СтруктураПодключения);
		
	Возврат ТекCOMОбъект;
	
КонецФункции


Процедура КоманднаяПанельСоответствиеОбъектовПоказатьОбъектПриемника(Кнопка)
	
	Если ЭлементыФормы.ТаблицаСоответствияОбъектов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСсылки = ЭлементыФормы.ТаблицаСоответствияОбъектов.ТекущиеДанные.СсылкаВДругойИБ; 
	Если НЕ ЗначениеЗаполнено(СтрокаСсылки) Тогда
		
		Предупреждение("Не задано соответствие в информационной базе приемнике.");
		Возврат;
		
	КонецЕсли;
	
	ТекCOMОбъект = ПодключитьсяКИнформационнойБазеОбмена();
	Если ТекCOMОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		СсылкаВПриемнике = ТекCOMОбъект.ValueFromStringInternal(СтрокаСсылки);
		Если ТекCOMОбъект.ValueIsFilled(СсылкаВПриемнике) Тогда
			СсылкаВПриемнике.GetForm().DoModal();
		Иначе
			Предупреждение("Не найдено соответствие в информационной базе приемнике.");
		КонецЕсли;
		
	Исключение		
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СкопироватьПараметрыПодключенияВСтруктуру(СтруктураПодключения, НастройкаОбмена)
	
	СтруктураПодключения.Вставить("ФайловыйРежим", НастройкаОбмена.ТипИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("АутентификацияWindows", НастройкаОбмена.АутентификацияWindowsИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("КаталогИБ", НастройкаОбмена.КаталогИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ИмяСервера", НастройкаОбмена.ИмяСервераИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ИмяИБНаСервере", НастройкаОбмена.ИмяИнформационнойБазыНаСервереДляПодключения);
	СтруктураПодключения.Вставить("Пользователь", НастройкаОбмена.ПользовательИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("Пароль", НастройкаОбмена.ПарольИнформационнойБазыДляПодключения);	
	
КонецПроцедуры

Процедура СкопироватьПараметрыИзСтруктурыВНастройку(СтруктураПодключения, НастройкаОбмена)
	
	СтруктураПодключения.Свойство("ФайловыйРежим", НастройкаОбмена.ТипИнформационнойБазыДляПодключения);
	СтруктураПодключения.Свойство("АутентификацияWindows", НастройкаОбмена.АутентификацияWindowsИнформационнойБазыДляПодключения);
	СтруктураПодключения.Свойство("КаталогИБ", НастройкаОбмена.КаталогИнформационнойБазыДляПодключения);
	СтруктураПодключения.Свойство("ИмяСервера", НастройкаОбмена.ИмяСервераИнформационнойБазыДляПодключения);
	СтруктураПодключения.Свойство("ИмяИБНаСервере", НастройкаОбмена.ИмяИнформационнойБазыНаСервереДляПодключения);
	СтруктураПодключения.Свойство("Пользователь", НастройкаОбмена.ПользовательИнформационнойБазыДляПодключения);
	СтруктураПодключения.Свойство("Пароль", НастройкаОбмена.ПарольИнформационнойБазыДляПодключения);	
	
КонецПроцедуры

Процедура УстановитьПараметрыПодключенияПоУмолчанию(СтруктураПодключения)
	
	СтруктураПодключения.Вставить("ФайловыйРежим", Истина);
	СтруктураПодключения.Вставить("АутентификацияWindows", Ложь);
	СтруктураПодключения.Вставить("КаталогИБ", "");
	СтруктураПодключения.Вставить("ИмяСервера", "");
	СтруктураПодключения.Вставить("ИмяИБНаСервере", "");
	СтруктураПодключения.Вставить("Пользователь", "");
	СтруктураПодключения.Вставить("Пароль", "");	
	
КонецПроцедуры

Процедура КоманднаяПанельСоответствиеОбъектовПараметрыПодключения(Кнопка)
	
	СтруктураПодключения = мСоответствиеУзлаИСтруктурыПодключения.Получить(Настройка);
	
	Если СтруктураПодключения = Неопределено Тогда
	
		СтруктураПодключения = Новый Структура;
		Если ЗначениеЗаполнено(НастройкаОбмена) 
			И ТипЗнч(НастройкаОбмена) = Тип("СправочникСсылка.НастройкиОбменаДанными")
			И НастройкаОбмена.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			
			СкопироватьПараметрыПодключенияВСтруктуру(СтруктураПодключения, НастройкаОбмена);
									
		Иначе
			
			УстановитьПараметрыПодключенияПоУмолчанию(СтруктураПодключения);
						
		КонецЕсли;
		
	КонецЕсли;
	
	ФормаРедактированияНастроекПодключения = ПолучитьОбщуюФорму("ФормаРедактированияНастроекПодключенияКИнформационнойБазе", ЭтаФорма);	
	
	СкопироватьПараметрыИзСтруктурыВНастройку(СтруктураПодключения, ФормаРедактированияНастроекПодключения);

	РезультатОткрытия = ФормаРедактированияНастроекПодключения.ОткрытьМодально();
	
	Если РезультатОткрытия <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьПараметрыПодключенияВСтруктуру(СтруктураПодключения, ФормаРедактированияНастроекПодключения);
		
	мСоответствиеУзлаИСтруктурыПодключения.Вставить(Настройка, СтруктураПодключения);
	
	ОбъектПодключения = ПодключитьсяКИнформационнойБазеПоСтруктуреПараметров(СтруктураПодключения);
		
КонецПроцедуры

Процедура КоманднаяПанельСоответствиеОбъектовОтключитьСоединение(Кнопка)
	
	ТекCOMОбъект = мСоответствиеУзлаИПараметровПодключения.Получить(Настройка);
	Если ТекCOMОбъект <> Неопределено Тогда
		мСоответствиеУзлаИПараметровПодключения.Удалить(Настройка);
	КонецЕсли;
	
	Предупреждение("Соединение отключено");
	
КонецПроцедуры

Процедура ТаблицаКоллизийПриОбменеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.КоллизияРассмотрена = Ложь Тогда
		ОформлениеСтроки.Ячейки.СсылкаНаОбъект.Картинка = БиблиотекаКартинок.ЗнакВопроса;
		ОформлениеСтроки.Ячейки.СсылкаНаОбъект.ОтображатьКартинку = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьИзменениеВерсииДляКоллизии(ТекущиеДанные, РезультатРассмотренияКоллизии)
	
	МенеджерЗаписи = РегистрыСведений.КоллизииПриОбмене.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СсылкаНаОбъект = ТекущиеДанные.СсылкаНаОбъект;
	МенеджерЗаписи.УзелОбмена = ТекущиеДанные.УзелОбмена;
	МенеджерЗаписи.ДатаКоллизии = ТекущиеДанные.ДатаКоллизии;
	
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.РезультатРассмотренияКоллизии = РезультатРассмотренияКоллизии;
	МенеджерЗаписи.КоллизияРассмотрена = Истина;
	
	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(("Ошибка при записи информации о коллизии для объекта """ + Строка(ТекущиеДанные.СсылкаНаОбъект) + """ по причине: " + ОписаниеОшибки()));
	КонецПопытки;	
	
КонецПроцедуры

Процедура КоманднаяПанельКоллизийПриОбменеУстановитьВерсиюДоКоллизии1(Кнопка)
	
	ТекущиеДанные = ЭлементыФормы.ТаблицаКоллизийПриОбмене.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных = ТекущиеДанные.ЗначениеВИнформационнойБазеДоКоллизии; 
	РезультатВозвратаКВерсии = ВернутьсяКВерсииОбъекта(СтрокаДанных);
	
	Если РезультатВозвратаКВерсии Тогда
		
		ЗафиксироватьИзменениеВерсииДляКоллизии(ТекущиеДанные, Перечисления.РезультатРассмотренияКоллизии.ОбъектНеБылИзменен);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельКоллизийПриОбменеУстановитьВерсиюОбъектаОбмена(Кнопка)
	
	ТекущиеДанные = ЭлементыФормы.ТаблицаКоллизийПриОбмене.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных = ТекущиеДанные.ЗначениеДляЗаменыПриОбмене; 
	РезультатВозвратаКВерсии = ВернутьсяКВерсииОбъекта(СтрокаДанных);
	
	Если РезультатВозвратаКВерсии Тогда
		
		ЗафиксироватьИзменениеВерсииДляКоллизии(ТекущиеДанные, Перечисления.РезультатРассмотренияКоллизии.ОбъектЗамененНаВерсиюПоступившуюПриОбмене);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура КоманднаяПанельКоллизийПриОбменеОтметитьРассмотрениеВсехКоллизий(Кнопка)
	
	ЗаголовокСообщения = "Не удалось отметить рассмотрение всех коллизий!";
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	КоллизииПриОбмене.СсылкаНаОбъект,
	               |	КоллизииПриОбмене.ДатаКоллизии	
	               |ИЗ
	               |	РегистрСведений.КоллизииПриОбмене КАК КоллизииПриОбмене
				   |ГДЕ
				   |	КоллизииПриОбмене.УзелОбмена = &Узел
				   |	И КоллизииПриОбмене.КоллизияРассмотрена = Ложь";
				   
	Запрос.УстановитьПараметр("Узел", Настройка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.КоллизииПриОбмене.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СсылкаНаОбъект = Выборка.СсылкаНаОбъект;
		МенеджерЗаписи.УзелОбмена = Настройка;
		МенеджерЗаписи.ДатаКоллизии = Выборка.ДатаКоллизии;
		
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписи.КоллизияРассмотрена = Истина;
		
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(("Ошибка при записи информации о коллизии для объекта """ + Строка(Выборка.СсылкаНаОбъект) + """ по причине: " + ОписаниеОшибки()),, ЗаголовокСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельСоответствиеОбъектовПроверкаСопоставленияОбъектов(Кнопка)
	
	ПроверкаСопоставленияОбъектов();
	
КонецПроцедуры

Процедура ПроверкаСопоставленияОбъектов()
	
	// {ОбменДаннымиСУправлениемТорговлей
	Если ТипЗнч(Настройка) = Тип("ПланОбменаСсылка.ОбменУправлениеТорговлейБухгалтерияКОРП") Тогда
		
		Если ЗначениеЗаполнено(НастройкаОбмена) 
			И ТипЗнч(НастройкаОбмена) = Тип("СправочникСсылка.НастройкиОбменаДанными") 
			И НастройкаОбмена.OnLineОбмен 
			И ТипЗнч(НастройкаОбмена.УзелИнформационнойБазы) = Тип("ПланОбменаСсылка.ОбменУправлениеТорговлейБухгалтерияКОРП") Тогда
			
			Помощник = Обработки.ПомощникНастройкиОбменаДанными.Создать();
			Помощник.ПрочитатьНастройкуОбменаДанными(НастройкаОбмена);	
			
			ФормаПроверкиСопоставления = Помощник.ПолучитьФорму("ПроверкаСопоставленияОбъектов",ЭтаФорма,ЭтаФорма);
			ФормаПроверкиСопоставления.Открыть();
			ФормаПроверкиСопоставления.ОбновитьАнализ();
			
		Иначе 
			
			Помощник = Обработки.ПомощникНастройкиОбменаДанными.Создать();
			Помощник.УзелИнформационнойБазы = Настройка;
			ФормаПроверкиСопоставления = Помощник.ПолучитьФорму("ПроверкаСопоставленияОбъектов",ЭтаФорма,ЭтаФорма);
			ФормаПроверкиСопоставления.Открыть();
			ФормаПроверкиСопоставления.ОбновитьАнализ();
			
		КонецЕсли;	
		
	КонецЕсли;
	// }ОбменДаннымиСУправлениемТорговлей
	
	// {ОбменДаннымиСРозницей
	Если ТипЗнч(Настройка) = Тип("ПланОбменаСсылка.ОбменРозницаБухгалтерия20") Тогда
		
		Если ЗначениеЗаполнено(НастройкаОбмена) 
			И ТипЗнч(НастройкаОбмена) = Тип("СправочникСсылка.НастройкиОбменаДанными") 
			И НастройкаОбмена.OnLineОбмен 
			И ТипЗнч(НастройкаОбмена.УзелИнформационнойБазы) = Тип("ПланОбменаСсылка.ОбменРозницаБухгалтерия20") Тогда
			
			Помощник = Обработки.ПомощникНастройкиОбменаДаннымиСРозницей.Создать();
			Помощник.ПрочитатьНастройкуОбменаДанными(НастройкаОбмена);	
			
			ФормаПроверкиСопоставления = Помощник.ПолучитьФорму("ПроверкаСопоставленияОбъектов",ЭтаФорма,ЭтаФорма);
			ФормаПроверкиСопоставления.Открыть();
			ФормаПроверкиСопоставления.ОбновитьАнализ();
			
		Иначе 
			
			Помощник = Обработки.ПомощникНастройкиОбменаДаннымиСРозницей.Создать();
			Помощник.УзелИнформационнойБазы = Настройка;
			ФормаПроверкиСопоставления = Помощник.ПолучитьФорму("ПроверкаСопоставленияОбъектов",ЭтаФорма,ЭтаФорма);
			ФормаПроверкиСопоставления.Открыть();
			ФормаПроверкиСопоставления.ОбновитьАнализ();
			
		КонецЕсли;	
		
	КонецЕсли;
	// }ОбменДаннымиСРозницей
	
КонецПроцедуры	

ТипВыбораСтатистики = 1;

ТаблицаКоллизийПриОбмене.Колонки.Добавить("ЗначениеВИнформационнойБазеДоКоллизии");
ТаблицаКоллизийПриОбмене.Колонки.Добавить("ЗначениеДляЗаменыПриОбмене");
ТаблицаКоллизийПриОбмене.Колонки.Добавить("ПриоритетОбъектовОбмена");
ТаблицаКоллизийПриОбмене.Колонки.Добавить("РезультатРассмотренияКоллизии");
ТаблицаКоллизийПриОбмене.Колонки.Добавить("КоллизияРассмотрена");
ТаблицаКоллизийПриОбмене.Колонки.Добавить("СсылкаНаОбъект");
ТаблицаКоллизийПриОбмене.Колонки.Добавить("УзелОбмена");
ТаблицаКоллизийПриОбмене.Колонки.Добавить("ДатаКоллизии");

ТаблицаИсторииОбменаДанными.Колонки.Добавить("Период");
ТаблицаИсторииОбменаДанными.Колонки.Добавить("УзелИнформационнойБазы");
ТаблицаИсторииОбменаДанными.Колонки.Добавить("ДатаПоследнейЗагрузки");
ТаблицаИсторииОбменаДанными.Колонки.Добавить("ДатаПоследнейВыгрузки");
ТаблицаИсторииОбменаДанными.Колонки.Добавить("РезультатПоследнейВыгрузки");
ТаблицаИсторииОбменаДанными.Колонки.Добавить("РезультатПоследнейЗагрузки");
ТаблицаИсторииОбменаДанными.Колонки.Добавить("РезультатОтложенныхДвиженийДокументов");
ТаблицаИсторииОбменаДанными.Колонки.Добавить("НаличиеДанныхФоновойЗагрузки");
ТаблицаИсторииОбменаДанными.Колонки.Добавить("ДатаНачалаПоследнейЗагрузки");
ТаблицаИсторииОбменаДанными.Колонки.Добавить("ДатаНачалаПоследнейВыгрузки");

ТаблицаСоответствияОбъектов.Колонки.Добавить("СсылкаВДругойИБ");

мЦветУспешноДиаграмма = WebЦвета.ЛимонноЗеленый;
мЦветНЕУспешноДиаграмма = WebЦвета.ОранжевоКрасный;
мЦветНеПроизводилосьДиаграмма = WebЦвета.СинеСерый;

мСоответствиеУзлаИПараметровПодключения = Новый Соответствие;
мСоответствиеУзлаИСтруктурыПодключения = Новый Соответствие;
