
// процедура по настройке обмена данными устанавливает параметры
Процедура УстановитьПараметрыОбменаПоНастройке()
	
	ДанныеОбОбмене = "";
	
	НаличиеНастройки = ОпределитьНаличиеНастройки();
	
	Если Не НаличиеНастройки Тогда
		Возврат;
	КонецЕсли;
		
	// настройка имеется
	ОбъектНастройки = НастройкаОбменаДанными.ПолучитьОбъект();
	
	СтрокаОперации = "Выполняемые действия: ";
	СтрокаТипаОбмена = "Тип обмена: ";
	ИнформацияОПравилахОбмена = "";
	
	Если ТипЗнч(ОбъектНастройки) = Тип("СправочникОбъект.НастройкиОбменаДанными") Тогда
		
		Если ОбъектНастройки.ПроизводитьПриемСообщений 
			И ОбъектНастройки.ПроизводитьОтправкуСообщений Тогда
				
			СтрокаОперации = СтрокаОперации + "Загрузка и выгрузка данных";
				
		ИначеЕсли ОбъектНастройки.ПроизводитьПриемСообщений Тогда
				
			СтрокаОперации = СтрокаОперации + "Загрузка данных";
				
		ИначеЕсли ОбъектНастройки.ПроизводитьОтправкуСообщений Тогда
				
			СтрокаОперации = СтрокаОперации + "Выгрузка данных";
				
		КонецЕсли;
			
		Если ОбъектНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс Тогда
			
			СтрокаТипаОбмена = СтрокаТипаОбмена + " Обмен через файловый ресурс";
			СтрокаПараметровОбмена = "Каталог обмена: " + ?(НЕ ЗначениеЗаполнено(ОбъектНастройки.КаталогОбменаИнформацией), "не задан", ОбъектНастройки.КаталогОбменаИнформацией);
			
		ИначеЕсли ОбъектНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс Тогда
			
			СтрокаТипаОбмена = СтрокаТипаОбмена + " Обмен через FTP ресурс";
			СтрокаПараметровОбмена = "FTP каталог обмена: " + ?(НЕ ЗначениеЗаполнено(ОбъектНастройки.FTPАдресОбмена), "не задан", ОбъектНастройки.FTPАдресОбмена);
			
		ИначеЕсли ОбъектНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			
			СтрокаТипаОбмена = СтрокаТипаОбмена + " Обмен через подключение к информационной базе-приемнику";
			СтрокаПараметровОбмена = "";
			
		КонецЕсли;
		
		Если ОбъектНастройки.OnLineОбмен Тогда
			
			ИнформацияОПравилахОбмена = ПроцедурыОбменаДаннымиКлиент.ПолучитьПоНастройкеОбменаИнформациюОПравилах(ОбъектНастройки, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
			
	ДанныеОбОбмене = ДанныеОбОбмене + СтрокаОперации + Символы.ПС + СтрокаТипаОбмена + Символы.ПС + СтрокаПараметровОбмена + Символы.ПС + Символы.ПС;
	
	Если Не ПустаяСтрока(ИнформацияОПравилахОбмена) Тогда
		
		ДанныеОбОбмене = ДанныеОбОбмене + Символы.ПС + "Правила обмена: " + ИнформацияОПравилахОбмена;
		
	КонецЕсли;
		
	// комментарий к настройке надо вывести
	Если Не ПустаяСтрока(ОбъектНастройки.Комментарий) Тогда
		ДанныеОбОбмене = ДанныеОбОбмене + "Комментарий к настройке обмена: " + ОбъектНастройки.Комментарий + Символы.ПС + Символы.ПС;
	КонецЕсли;
	
	ПеречитатьПараметрыНастройки();
	
КонецПроцедуры

//Функция определяет наличие настройки обмена
Функция ОпределитьНаличиеНастройки()
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбменаДанными) Тогда
		Возврат Ложь;
	КонецЕсли;	
			
	ОбъектНастройки = НастройкаОбменаДанными.ПолучитьОбъект();
	
	Если ОбъектНастройки = Неопределено Тогда
		Возврат Ложь;
	Конецесли;
	
	Если ОтборПоТипуПланаОбмена = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
		
	Если ТипЗнч(ОбъектНастройки) = Тип("СправочникОбъект.НастройкиОбменаДанными") Тогда
		Возврат ОтборПоТипуПланаОбмена = ОбъектНастройки.ТипУзлаИнформационнойБазы;
	КонецЕсли;	
	
КонецФункции

// нажатие на кнопку выполнить
 Процедура ОсновныеДействияФормыВыполнить(Кнопка)
	
	Если НЕ ОпределитьНаличиеНастройки() Тогда
		Предупреждение("Не выбрана настройка для проведения обмена данными");
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДанными.ВыполнитьОбменДаннымиПоПроизвольнойНастройке(НастройкаОбменаДанными, , глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
			
	УстановитьПараметрыОбменаПоНастройке();
	
КонецПроцедуры

Функция ВыбратьНовуюНастройкуОбмена()
	
	НастройкаОбменаДанными = ВосстановитьЗначение("ОбщиеФормы.ФормаЗапускаОбменаДанными.НастройкаОбменаДанными");
	
	НаличиеНастройки = ОпределитьНаличиеНастройки();
	
	Если НаличиеНастройки Тогда
		
		УстановитьПараметрыОбменаПоНастройке();
		Возврат Истина;
		
	КонецЕсли;
	
	НастройкаОбменаДанными = Справочники.НастройкиОбменаДанными.ПустаяСсылка();
	
	// ищем просто первую попавшуюся настройку
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Разрешенные первые 1
				   |	НастройкиОбменаДанными.Ссылка
				   |ИЗ
				   |	Справочник.НастройкиОбменаДанными КАК НастройкиОбменаДанными
				   |
				   |" + ?(ОтборПоТипуПланаОбмена <> Неопределено, "ГДЕ НастройкиОбменаДанными.ТипУзлаИнформационнойБазы = &ОтборПоТипуПланаОбмена", "") + "
				   |
				   |";
				   
	Запрос.УстановитьПараметр("ОтборПоТипуПланаОбмена", ОтборПоТипуПланаОбмена);
					   
	Таблица = Запрос.Выполнить().Выгрузить();
		
	Если Таблица.Количество() <> 0 Тогда
			
		НастройкаОбменаДанными = Таблица[0].Ссылка;
		УстановитьПараметрыОбменаПоНастройке();
		Возврат Истина;
			
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

//процедура спрашивает пользователя о необходимости создания новой настройки обмена
Процедура ПредложитьСоздатьНовуюНастройкуОбмена(Отказ = Ложь)
	
	// в общем ни одна настройка не доступна для выбора
	ОтветПользователя = Вопрос("Нет ни одной настройки обмена данными доступной для выполнения. Хотите создать новую настройку обмена?",
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Настройки обмена данными");
		
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;	
		Возврат;	
	КонецЕсли;
	
	СоздатьИВыбратьНастройкуОбменаДанными();
	
КонецПроцедуры

// процедура создает новую настройку для обмена и помещает ее в поле выбора
Процедура СоздатьИВыбратьНастройкуОбменаДанными()
	
	// {ОбменДаннымиСУправлениемТорговлей
	Если ОтборПоТипуПланаОбмена = ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП.ПустаяСсылка() Тогда
		
		ОбработкаПомощника = Обработки.ПомощникНастройкиОбменаДанными.Создать();
		ФормаНастройки = ОбработкаПомощника.ПолучитьФорму("Форма");
		ФормаНастройки.Открыть();
		
	Иначе
	// }ОбменДаннымиСУправлениемТорговлей
		
		ФормаЭлемента = Справочники.НастройкиОбменаДанными.ПолучитьФормуНовогоЭлемента(, ЭтаФорма);
		ФормаЭлемента.Открыть();				
		
	// {ОбменДаннымиСУправлениемТорговлей
	КонецЕсли;
	// }ОбменДаннымиСУправлениемТорговлей
	
КонецПроцедуры


// выбор настроек обмена из списка
Процедура НастройкаОбменаДаннымиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// выпадающий список
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Разрешенные
				   |	НастройкиОбменаДанными.Ссылка
				   |ИЗ
				   |	Справочник.НастройкиОбменаДанными КАК НастройкиОбменаДанными
				   |" + ?(ОтборПоТипуПланаОбмена <> Неопределено, "ГДЕ НастройкиОбменаДанными.ТипУзлаИнформационнойБазы = &ОтборПоТипуПланаОбмена", "") + "
				   |
				   |";
				   
				   
	Запрос.УстановитьПараметр("ОтборПоТипуПланаОбмена", ОтборПоТипуПланаОбмена);
				   
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество() = 0 Тогда
		
		ПредложитьСоздатьНовуюНастройкуОбмена();
		
	Иначе	
		
	    // выбираем настройку обмена из списка
		СписокВозврата = Новый СписокЗначений;
		
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			
			СписокВозврата.Добавить(СтрокаТаблицы.Ссылка);
			
		КонецЦикла;
		
		СписокВозврата.СортироватьПоПредставлению();
		
		СписокВозврата.Добавить("Настроить обмен данными");
		
		
		НачальноеЗначение = СписокВозврата.НайтиПоЗначению(Элемент.Значение);
		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВозврата, Элемент, НачальноеЗначение);
		
		// ничего не выбрали
		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ВыбранныйЭлемент.Значение = "Настроить обмен данными" Тогда 
			
			СоздатьИВыбратьНастройкуОбменаДанными();
			
		Иначе
			
			НастройкаОбменаДанными = ВыбранныйЭлемент.Значение;
			УстановитьПараметрыОбменаПоНастройке();
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПрименитьИзмененияВКонфигурации(Кнопка)
	
	Если НЕ ОпределитьНаличиеНастройки() Тогда
		Предупреждение("Не выбрана настройка для проведения изменений в конфигурации");
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = Символы.Таб + "Рекомендуем пользоваться автоматическим обновлением конфигурации БД, когда
	|достоверно известно, что внесенные в конфигурацию изменения не повлияют на ее работоспособность.
	|
	|" + Символы.Таб + "Пользоваться автоматическим обновлением конфигурации БД рекомендуется в том случае, если
	|при обмене данными было получено сообщение об ошибке:
	|""Из главного узла распределенной ИБ получены изменения конфигурации.""
	|
	|" + Символы.Таб + "Во всех остальных случаях не рекомендуется автоматически обновлять конфигурацию БД!
	|
	|Обновить конфигурацию БД?";
	
	ОтветПользователя = Вопрос(ТекстПредупреждения,  
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Изменения конфигурации");
		
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		// пользователь отказался изменять метаданные	
		Возврат;	
	КонецЕсли;	
	
	// надо для выбранной настройки поставить признак запуска обмена при загрузке данных
	ПроцедурыОбменаДанными.УстановитьНеобходимостьВыполненияОбменаПриПервомЗапускеПрограммы(НастройкаОбменаДанными, Истина);
	
	ПроцедурыОбменаДанными.ПредложитьПерезагрузкуПрограммы(, Истина); 
		
КонецПроцедуры

// Процедура перечитывает данные параметров настройки
Процедура ПеречитатьПараметрыНастройки()
	
	СсылкаДляОграничения = ПроцедурыОбменаДаннымиКлиент.ПолучитьПоНастройкеСсылкуДляОграниченияПоИстории(НастройкаОбменаДанными);	
	
	КоличествоНеудачЗагрузокПосле = 0;
	КоличествоНеудачВыгрузокПосле = 0;
	КоличествоНеудачПоследнееОтложенноеДвижениеДокументовПосле = 0;
	ПоследняяУдачнаяЗагрузка = ПроцедурыОбменаДаннымиКлиент.ПолучитьДанныеПоследнейУдачнойОперации(СсылкаДляОграничения, "ДатаПоследнейЗагрузки", "РезультатПоследнейЗагрузки = Истина", "РезультатПоследнейЗагрузки = Ложь", КоличествоНеудачЗагрузокПосле);
	ПоследняяУдачнаяВыгрузка = ПроцедурыОбменаДаннымиКлиент.ПолучитьДанныеПоследнейУдачнойОперации(СсылкаДляОграничения, "ДатаПоследнейВыгрузки", "РезультатПоследнейВыгрузки = Истина", "РезультатПоследнейВыгрузки = Ложь", КоличествоНеудачВыгрузокПосле);
	ПоследнееОтложенноеДвижениеДокументов = ПроцедурыОбменаДаннымиКлиент.ПолучитьДанныеПоследнейУдачнойОперации(СсылкаДляОграничения, "ДатаПоследнейЗагрузки", "РезультатОтложенныхДвиженийДокументов = Истина", "РезультатОтложенныхДвиженийДокументов = Ложь", КоличествоНеудачПоследнееОтложенноеДвижениеДокументовПосле);		
	
	ЕстьНеудачныеЗагрузки = КоличествоНеудачЗагрузокПосле > 0;
	ЕстьНеудачныеВыгрузки = КоличествоНеудачВыгрузокПосле > 0;
	ЕстьНеудачныеДвижения = КоличествоНеудачПоследнееОтложенноеДвижениеДокументовПосле > 0;
	
	ЭлементыФормы.НадписьНеудачныхПопытокПослеЗагрузки.Видимость = ЕстьНеудачныеЗагрузки;
	ЭлементыФормы.КоличествоНеудачЗагрузокПосле.Видимость = ЕстьНеудачныеЗагрузки;
	ЭлементыФормы.ПоказатьНеудачныеЗагрузки.Видимость = ЕстьНеудачныеЗагрузки;
	
	ЭлементыФормы.НадписьНеудачныхПопытокПослеВыгрузки.Видимость = ЕстьНеудачныеВыгрузки;
	ЭлементыФормы.КоличествоНеудачВыгрузокПосле.Видимость = ЕстьНеудачныеВыгрузки;
	ЭлементыФормы.ПоказатьНеудачныеВыгрузки.Видимость = ЕстьНеудачныеВыгрузки;
	
	ЭлементыФормы.НадписьНеудачныхПопытокПослеДвижений.Видимость = ЕстьНеудачныеДвижения;
	ЭлементыФормы.КоличествоНеудачПоследнееОтложенноеДвижениеДокументовПосле.Видимость = ЕстьНеудачныеДвижения;
	ЭлементыФормы.ПоказатьНеудачныеДвижения.Видимость = ЕстьНеудачныеДвижения;
	
	ЭлементыФормы.ПолеКартинкиПоследняяУдачнаяЗагрузка.Видимость = ЗначениеЗаполнено(НастройкаОбменаДанными) И ЗначениеЗаполнено(ПоследняяУдачнаяЗагрузка);
	ЭлементыФормы.ПолеКартинкиПоследняяУдачнаяВыгрузка.Видимость = ЗначениеЗаполнено(НастройкаОбменаДанными) И ЗначениеЗаполнено(ПоследняяУдачнаяВыгрузка);
	ЭлементыФормы.ПолеКартинкиПоследнееУдачноеДвижениеДокументов.Видимость = ЗначениеЗаполнено(НастройкаОбменаДанными) И ЗначениеЗаполнено(ПоследнееОтложенноеДвижениеДокументов);
	
	ЭлементыФормы.ПолеКартинкиПоследняяУдачнаяЗагрузка.Картинка = ?(ЕстьНеудачныеЗагрузки, БиблиотекаКартинок.ВыполненоСОшибками32, БиблиотекаКартинок.ВыполненоУспешно32);
	ЭлементыФормы.ПолеКартинкиПоследняяУдачнаяВыгрузка.Картинка = ?(ЕстьНеудачныеВыгрузки, БиблиотекаКартинок.ВыполненоСОшибками32, БиблиотекаКартинок.ВыполненоУспешно32);
	ЭлементыФормы.ПолеКартинкиПоследнееУдачноеДвижениеДокументов.Картинка = ?(ЕстьНеудачныеДвижения, БиблиотекаКартинок.ВыполненоСОшибками32, БиблиотекаКартинок.ВыполненоУспешно32);
		
КонецПроцедуры

// при изменении настройки обмена
Процедура НастройкаОбменаДаннымиПриИзменении(Элемент)
	
	УстановитьПараметрыОбменаПоНастройке();
		
КонецПроцедуры

// обновить данные
Процедура КоманднаяПанель1Обновить(Кнопка)
	
	УстановитьПараметрыОбменаПоНастройке();
	
КонецПроцедуры

// при закрытии формы выполнения обмена
Процедура ПриЗакрытии()
	
	СохранитьЗначение("ОбщиеФормы.ФормаЗапускаОбменаДанными.НастройкаОбменаДанными", НастройкаОбменаДанными);
	
КонецПроцедуры

// настройка параметров обновления конфигурации
Процедура КоманднаяПанель1НастройкаПараметровОбновленияКонфигурации(Кнопка)
	
	ОткрытьФормуРедактированияНастройкиФайлаОбновления();
	
КонецПроцедуры

Процедура ПоказатьНеудачныеЗагрузкиНажатие(Элемент)
	
	Если КоличествоНеудачЗагрузокПосле = 0 Тогда
		
		Если ЗначениеЗаполнено(ПоследняяУдачнаяЗагрузка) Тогда
			Предупреждение("Неудачных загрузок после " + ПоследняяУдачнаяЗагрузка + " не было.");
		Иначе
			Предупреждение("Неудачных загрузок не было.");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СсылкаДляОграничения = ПроцедурыОбменаДаннымиКлиент.ПолучитьПоНастройкеСсылкуДляОграниченияПоИстории(НастройкаОбменаДанными);
	
	ПроцедурыОбменаДаннымиКлиент.РасшифовкаНеудачПосле(СсылкаДляОграничения, "Загрузка", ПоследняяУдачнаяЗагрузка, ЭтаФорма);	
	
КонецПроцедуры

Процедура ПоказатьНеудачныеВыгрузкиНажатие(Элемент)
	
	Если КоличествоНеудачВыгрузокПосле = 0 Тогда
		
		Если ЗначениеЗаполнено(ПоследняяУдачнаяВыгрузка) Тогда
			Предупреждение("Неудачных выгрузок после " + ПоследняяУдачнаяВыгрузка + " не было.");
		Иначе
			Предупреждение("Неудачных выгрузок не было.");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СсылкаДляОграничения = ПроцедурыОбменаДаннымиКлиент.ПолучитьПоНастройкеСсылкуДляОграниченияПоИстории(НастройкаОбменаДанными);
	
	ПроцедурыОбменаДаннымиКлиент.РасшифовкаНеудачПосле(СсылкаДляОграничения, "Выгрузка", ПоследняяУдачнаяВыгрузка, ЭтаФорма);
	
КонецПроцедуры

Процедура ПоказатьНеудачныеДвиженияНажатие(Элемент)
	
	Если КоличествоНеудачПоследнееОтложенноеДвижениеДокументовПосле = 0 Тогда
		
		Если ЗначениеЗаполнено(ПоследнееОтложенноеДвижениеДокументов) Тогда
			Предупреждение("Неудачных отложенных движений документов после " + ПоследнееОтложенноеДвижениеДокументов + " не было.");
		Иначе
			Предупреждение("Неудачных отложенных движений документов не было.");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СсылкаДляОграничения = ПроцедурыОбменаДаннымиКлиент.ПолучитьПоНастройкеСсылкуДляОграниченияПоИстории(НастройкаОбменаДанными);
	
	ПроцедурыОбменаДаннымиКлиент.РасшифовкаНеудачПосле(СсылкаДляОграничения, "Движение документов", ПоследнееОтложенноеДвижениеДокументов, ЭтаФорма);
		
КонецПроцедуры

Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.НастройкиОбменаДанными") Тогда
		
		НастройкаОбменаДанными = Объект;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель1МониторОбменов(Кнопка)
	
	Если не ЗначениеЗаполнено(НастройкаОбменаДанными) Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДаннымиКлиент.ОткрытьМониторОбменовДляНастройки(НастройкаОбменаДанными, ЭтаФорма);
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиОбменаДанными) Тогда
		Предупреждение("Нарушение прав доступа!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НастройкаВыбрана = ВыбратьНовуюНастройкуОбмена();
	
	Если Не НастройкаВыбрана Тогда
		// в общем ни одна настройка не доступна для выбора
		ПредложитьСоздатьНовуюНастройкуОбмена(Отказ);
	КонецЕсли;
	
КонецПроцедуры
