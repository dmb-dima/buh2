
Процедура ГиперссылкаИнформацияОбОбновленияхНажатие(Элемент)
	
	ФормаОбработка = Обработки.ОбновлениеКонфигурации.ПолучитьФорму();
	ФормаОбработка.Открыть();
	
КонецПроцедуры

Процедура КнопкаНастроитьПраваДоступаНажатие(Элемент)

	Если Модифицированность И ИспользоватьОграниченияПравДоступаНаУровнеЗаписей <> Константы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Получить() Тогда
		ОтветНаВопрос = Вопрос("Для продолжения требуется сохранить настройки. Сохранить?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Да И ЗаписатьВФорме() Тогда
			ЗаписатьНабор();
			ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей = Константы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Получить();
			Форма = Справочники.Организации.ПолучитьФормуСписка();
			Форма.Открыть();
		КонецЕсли;
	Иначе
		Форма = Справочники.Организации.ПолучитьФормуСписка();
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаУстановитьДатуЗапретаНажатие(Элемент)
	
	Форма = ПолучитьОбщуюФорму("УстановкаДатыЗапретаИзмененияДанных");
	Форма.Открыть();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция записывает набор констант
// Возвращает:
// Истина если операция выполнена успешно, Ложь - иначе
Функция ЗаписатьНабор()
	
	Возврат ОбщегоНазначения.ЗаписатьНаборКонстант(КонстантыНабор, ЭталонныйНабор, Модифицированность);
	
КонецФункции // ()  

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура обработчик события "ПриОткрытии" формы

Процедура ПриОткрытии()

	ЗаполнитьЗначенияСвойств(ЭталонныйНабор, КонстантыНабор);
	
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;		
	КонецЕсли;
		
КонецПроцедуры // ПриОткрытии()

// Процедура обработчик события "ПередЗакрытием" формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если Не ЗаписатьНабор() Тогда
				Отказ = Истина;
			КонецЕсли; 
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура обработчик события нажатия на кнопку "ОК"
//
Процедура ОсновныеДействияФормыОК(Кнопка)
	
	ПредКонтролироватьПоследовательностьПроведения = ЭталонныйНабор.КонтролироватьПоследовательностьПроведения;
	
	Если Модифицированность Тогда
		
		Если КонстантыНабор.ПрефиксУзлаРаспределеннойИнформационнойБазы <> Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить() Тогда
			Сообщить("Для корректной работы механизма назначения префиксов этой информационной базы 
			|необходимо завершить работу всех пользователей и перезапустить текущий сеанс 1С:Предприятия");	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаписатьНабор() Тогда
		
		ТекКонтролироватьПоследовательностьПроведения = ЭталонныйНабор.КонтролироватьПоследовательностьПроведения;
		Если ПредКонтролироватьПоследовательностьПроведения <> ТекКонтролироватьПоследовательностьПроведения
			И ТекКонтролироватьПоследовательностьПроведения Тогда
			ОбщегоНазначения.УстановитьГраницыПоследовательностей();
		КонецЕсли;
		
		Закрыть();
		
		РаботаСДиалогами.УстановитьЗаголовокСистемыПриИзмененииОсновнойОрганизации();
		
		ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей = Константы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Получить();
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик события "НачалоВыбора" поля ввода "КаталогДополнительнойИнформации"
//
Процедура КаталогДополнительнойИнформацииНачалоВыбора(Элемент, СтандартнаяОбработка)

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);

	Диалог.Каталог = ЭлементыФормы[Элемент.Имя].Значение;

	Результат = Диалог.Выбрать();

	Если Результат Тогда
		ЭлементыФормы[Элемент.Имя].Значение = Диалог.Каталог;
	КонецЕсли;

КонецПроцедуры // КаталогДополнительнойИнформацииНачалоВыбора

// Процедура обработчик события "Открытие" поля ввода "КаталогДополнительнойИнформации"
//
Процедура КаталогДополнительнойИнформацииОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если НЕ ПустаяСтрока(ЭлементыФормы[Элемент.Имя].Значение) Тогда
		ЗапуститьПриложение("explorer " + ЭлементыФормы[Элемент.Имя].Значение);
	КонецЕсли;

КонецПроцедуры // КаталогДополнительнойИнформацииОткрытие

// Процедура обработчик события "ПриИзменении" поля ввода "ПрефиксУзлаРаспределеннойИнформационнойБазы"
//
Процедура ПрефиксУзлаРаспределеннойИнформационнойБазыПриИзменении(Элемент)
	
	ПроцедурыОбменаДаннымиКлиент.ОбработатьИзменениеПрефиксаДляОбъектов(Элемент);
	
КонецПроцедуры

// Процедура обработчик события "Очистка" поля ввода "ДополнительнаяКолонкаПечатныхФормДокументов"
//
Процедура ДополнительнаяКолонкаПечатныхФормДокументовОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
КонецПроцедуры

// Процедура обработчик события "ПриИзменении" поля ввода "ДополнительнаяКолонкаПечатныхФормДокументов"
//
Процедура ДополнительнаяКолонкаПечатныхФормДокументовПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
		
КонецПроцедуры
