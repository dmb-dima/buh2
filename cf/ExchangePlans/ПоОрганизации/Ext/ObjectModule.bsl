
Перем мМонопольныйРежимПередЗаписью;

Перем мТипУдалениеДанных;
Перем мЭтоНовыйЭлемент;
Перем мТаблицаОрганизацийДляВыгрузкиПередЗаписью;

Перем мИнформацияОНаличиеОрганизацииВРегистре;
Перем мИнформацияОБазовыхТипах;

Перем мКоличествоОрганизацийВУзле;

Перем мСтарыйТипОбъектаОтправки;
Перем мИмяСтарогоБазовогоТипа;

Перем мСоответствиеОрганизацийИУзлов;

Перем мТипРегистрСведенийНаборЗаписейВстречныйВыпускПродукцииУслуг;

Перем мТипРегистрСведенийНаборЗаписейКонтактнаяИнформация;

Перем мТипРегистрСведенийНаборЗаписейОтветственныеЛицаОрганизаций;

Перем мТипРегистрСведенийНаборЗаписейЗаписиОСтажеДляСЗВ4;
Перем мТипРегистрСведенийНаборЗаписейСуммыВзносовДляСЗВ4;

Перем мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияНМАБухгалтерскийУчет;
Перем мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияНМАНалоговыйУчет;
Перем мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияНМАНалоговыйУчетУСН;

Перем мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияОСБухгалтерскийУчет;
Перем мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияОСНалоговыйУчет;
Перем мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияОСНалоговыйУчетУСН;

Перем мТипРегистрСведенийНаборЗаписейСчетаУчетаНоменклатуры;
Перем мТипРегистрСведенийНаборЗаписейСчетаУчетаРасчетовСКонтрагентами;

Перем мТипРегистрСведенийНаборЗаписейЗначенияСвойств;

Перем мТипРегистрСведенийНаборЗаписейСведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям;
Перем мТипРегистрСведенийНаборЗаписейСведенияПротоколыОбменаСБанком;

Перем мТипРегистрСведенийНаборЗаписейУчетнаяПолитикаОрганизаций;
Перем мТипРегистрСведенийНаборЗаписейУчетнаяПолитикаПоПерсоналу;

Перем мТипРегистрСведенийНаборЗаписейРаботникиОрганизаций;
Перем мТипРегистрСведенийНаборЗаписейПлановыеНачисленияРаботниковОрганизаций;

Перем мТипСправочникСсылкаПодразделенияОрганизаций;
Перем мТипСправочникСсылкаОрганизации;
Перем мТипСправочникСсылкаНематериальныеАктивы;
Перем мТипСправочникСсылкаОсновныеСредства;
Перем мТипСправочникСсылкаКонтрагенты;

Перем мТипДокументЗарплатаКВыплатеОрганизаций;

Перем мПустаяОрганизация;

Перем мТипСправочникРегОтчеты;


Функция СообщитьИнформациюПользователюПослеСозданияНовогоУзла() Экспорт
	
	НужноПерезапуститьВсеПодключенияКИБ = Ложь;
	
	Если мЭтоНовыйЭлемент 
		И НЕ ПараметрыСеанса.ИспользованиеРИБ
		И НЕ мМонопольныйРежимПередЗаписью Тогда
		
		НужноПерезапуститьВсеПодключенияКИБ = Истина;
		
	КонецЕсли;	
	
	ЕстьОтличияВТабличнойЧасти = ОпределитьЕстьОтличияВТабличнойЧасти();
	Если ЕстьОтличияВТабличнойЧасти Тогда
		НужноПерезапуститьВсеПодключенияКИБ = Истина;
	КонецЕсли;
	
	Если НужноПерезапуститьВсеПодключенияКИБ Тогда
		
		Если мМонопольныйРежимПередЗаписью Тогда
			
			ПолныеПрава.ОпределитьПараметрыСеансаДляОбменаДанными();
			Возврат "";
			
		Иначе	
			
			Возврат "Для корректной работы механизма обмена данными необходимо завершить работу всех пользователей и перезапустить текущий сеанс работы 1С:Предприятия.";	
			
		КонецЕсли;
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ОпределитьЕстьОтличияВТабличнойЧасти()
	
	Если мТаблицаОрганизацийДляВыгрузкиПередЗаписью = Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
		
	Если Организации.Количество() <> мТаблицаОрганизацийДляВыгрузкиПередЗаписью.Количество() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
		
	Для Номер = 0 По Организации.Количество() - 1 Цикл
		
		Если Организации[Номер].Организация <> мТаблицаОрганизацийДляВыгрузкиПередЗаписью[Номер].Организация Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции


Процедура ПередЗаписью(Отказ)
	
	мЭтоНовыйЭлемент = ЭтоНовый();
	
	мМонопольныйРежимПередЗаписью = ОбщегоНазначения.ОпределитьТекущийРежимРаботыМонопольный();
			
	Если Не мЭтоНовыйЭлемент Тогда
		
		мТаблицаОрганизацийДляВыгрузкиПередЗаписью = Ссылка.Организации.Выгрузить();
		
	Иначе
		
		мТаблицаОрганизацийДляВыгрузкиПередЗаписью = Неопределено;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	СтрокаСообщенияПользователю = СообщитьИнформациюПользователюПослеСозданияНовогоУзла();
	ОбщегоНазначения.СообщитьИнформациюПользователю(СтрокаСообщенияПользователю);	
		
КонецПроцедуры


Процедура УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, ИмяРеквизита, 
		ТипРеквизита = Неопределено, ИмяБазовогоТипа = "Справочники", ПереопределитьИмяБазовогоТипа = Ложь)
	
	// режем по организации
	ТекущийРеквизит = Неопределено;
	ТекущееРешение = Ложь;
	
	Позиция = ЭлементДанных.Количество() - 1;
	
	Пока Позиция >= 0 Цикл
		
		СтрокаНабора = ЭлементДанных[Позиция];
		
		Если СтрокаНабора[ИмяРеквизита] <> ТекущийРеквизит Тогда
			
			ТекущийРеквизит = СтрокаНабора[ИмяРеквизита];
			
			Если ПереопределитьИмяБазовогоТипа Тогда
				ИмяБазовогоТипа = ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипЗнч(ТекущийРеквизит.ПолучитьОбъект()));
			КонецЕсли;
			
			Если ИмяБазовогоТипа = "Справочники" Тогда
			
				МассивУзловДляПереноса = ПроцедурыОбменаДаннымиПоОрганизации.ОпределениеУзловДляВыгрузкиСправочника(ТекущийРеквизит, 
					ТипРеквизита, , , мСоответствиеОрганизацийИУзлов);
					
			ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
					
				МассивУзловДляПереноса = ПроцедурыОбменаДаннымиПоОрганизации.ОпределениеУзловДляВыгрузкиДокумента(ТекущийРеквизит, 
					ТипРеквизита, , , мСоответствиеОрганизацийИУзлов);	
					
			ИначеЕсли ИмяБазовогоТипа = "УдалениеОбъекта" Тогда
					
					ТекущееРешение = Ложь;
					Прервать;
				
            КонецЕсли;
			
			ТекущееРешение = (МассивУзловДляПереноса.Найти(Ссылка) <> Неопределено); 
			
		КонецЕсли;
		
		Если НЕ ТекущееРешение Тогда
			ЭлементДанных.Удалить(Позиция);
		КонецЕсли;
		
		Позиция = Позиция - 1;
		
	КонецЦикла;	

КонецПроцедуры

Процедура УбратьИзРегистраДанныеНеНужныеДляПереносаПоОрганизации(ЭлементДанных)
	
	// режем по организации
	ТекущаяОрганизация = Неопределено;
	ТекущееРешение = Ложь;
	
	Позиция = ЭлементДанных.Количество() - 1;
	
	Пока Позиция >= 0 Цикл
		
		СтрокаНабора = ЭлементДанных[Позиция];
		Если СтрокаНабора.Организация <> ТекущаяОрганизация Тогда
			
			ТекущаяОрганизация = СтрокаНабора.Организация;
			ТекущееРешение = (ЭтотОбъект.Организации.Найти(ТекущаяОрганизация, "Организация") <> Неопределено); 
			
		КонецЕсли;
		
		Если НЕ ТекущееРешение Тогда
			ЭлементДанных.Удалить(Позиция);
		КонецЕсли;
		
		Позиция = Позиция - 1;
		
	КонецЦикла;	

КонецПроцедуры

Процедура УбратьИзРегистраДанныеНеНужныеДляПереносаПоОрганизацииКромеПустойОрганизации(ЭлементДанных)
	
	// режем по организации
	ТекущаяОрганизация = Неопределено;
	ТекущееРешение = Ложь;
	
	Позиция = ЭлементДанных.Количество() - 1;
	
	Пока Позиция >= 0 Цикл
		
		СтрокаНабора = ЭлементДанных[Позиция];
		Если СтрокаНабора.Организация <> ТекущаяОрганизация Тогда
			
			ТекущаяОрганизация = СтрокаНабора.Организация;
			ТекущееРешение = ТекущаяОрганизация = мПустаяОрганизация
				ИЛИ (ЭтотОбъект.Организации.Найти(ТекущаяОрганизация, "Организация") <> Неопределено); 
			
		КонецЕсли;
		
		Если НЕ ТекущееРешение Тогда
			ЭлементДанных.Удалить(Позиция);
		КонецЕсли;
		
		Позиция = Позиция - 1;
		
	КонецЦикла;	

КонецПроцедуры

Процедура УбратьИзРегистраДанныеНеНужныеДляПереносаПоОрганизацииКромеПустойОрганизацииПоКонтрагенту(ЭлементДанных)
	
	// режем по организации
	ТекущаяОрганизация = Неопределено;
	ТекущийКонтрагент = Неопределено;
	ТекущееРешение = Ложь;
	
	Позиция = ЭлементДанных.Количество() - 1;
	
	Пока Позиция >= 0 Цикл
		
		СтрокаНабора = ЭлементДанных[Позиция];
		Если СтрокаНабора.Организация <> ТекущаяОрганизация
			ИЛИ СтрокаНабора.Контрагент <> ТекущийКонтрагент Тогда
			
			ТекущаяОрганизация = СтрокаНабора.Организация;
			ТекущийКонтрагент = СтрокаНабора.Контрагент;
			
			ТекущееРешение = ТекущаяОрганизация = мПустаяОрганизация
				ИЛИ (ЭтотОбъект.Организации.Найти(ТекущаяОрганизация, "Организация") <> Неопределено);
				
			// надо еще анализ по контрагенту провести
			Если ТекущееРешение 
				И ТекущийКонтрагент <> Справочники.Контрагенты.ПустаяСсылка() Тогда
				
				ВыгружатьДляВсехУзлов = Ложь;
				
				МассивУзлов = ПроцедурыОбменаДаннымиПоОрганизации.ОпределениеУзловДляВыгрузкиСправочника(ТекущийКонтрагент, мТипСправочникСсылкаКонтрагенты, 
					ВыгружатьДляВсехУзлов, Ложь, мСоответствиеОрганизацийИУзлов);
					
				Если НЕ ВыгружатьДляВсехУзлов Тогда
					
					ТекущееРешение = МассивУзлов.Найти(Ссылка);						
						
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ТекущееРешение Тогда
			ЭлементДанных.Удалить(Позиция);
		КонецЕсли;
		
		Позиция = Позиция - 1;
		
	КонецЦикла;	

КонецПроцедуры


Функция ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипОбъекта) Экспорт
	
	Возврат ПроцедурыОбменаДаннымиПоОрганизации.ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипОбъекта);
			
КонецФункции

Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента)
	
	ТипОбъекта = ТипЗнч(ЭлементДанных);
	
	Если ТипОбъекта = мТипУдалениеДанных Тогда
		
		// удаление объекта просто отсылаем как есть
		Возврат;
		
	КонецЕсли;
	
	Если мСоответствиеОрганизацийИУзлов = Неопределено Тогда
			
		мСоответствиеОрганизацийИУзлов = ПроцедурыОбменаДаннымиПоОрганизации.ПолучитьСоответствиеУзловИОрганизаций();
		
	КонецЕсли;
	
	Если мСтарыйТипОбъектаОтправки = ТипОбъекта Тогда
		
		ИмяБазовогоТипа = мИмяСтарогоБазовогоТипа;
		
	Иначе	
	
		ИмяБазовогоТипа = мИнформацияОБазовыхТипах.Получить(ТипОбъекта);
		
		Если ИмяБазовогоТипа = Неопределено Тогда
		
			ИмяБазовогоТипа = ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипОбъекта);
			мИнформацияОБазовыхТипах.Вставить(ТипОбъекта, ИмяБазовогоТипа);
		
		КонецЕсли;
		
		мИмяСтарогоБазовогоТипа = ИмяБазовогоТипа;
		мСтарыйТипОбъектаОтправки = ТипОбъекта;
	
	КонецЕсли;
	
	Если ИмяБазовогоТипа = "Справочники"
		ИЛИ ИмяБазовогоТипа = "Документы" Тогда
		
		ВыгружатьДляВсехУзлов = Ложь;
		
		МассивУзловДляПереноса = ПроцедурыОбменаДаннымиПоОрганизации.ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(ЭлементДанных, 
			ИмяБазовогоТипа, ТипОбъекта, , ВыгружатьДляВсехУзлов, Ложь, мСоответствиеОрганизацийИУзлов);
			
		Если ТипОбъекта = Тип("СправочникОбъект.Организации") Тогда
			
			//нужно дополнить массив узлов связанными организациями
			СсылкаНаГоловнуюОрганизация = ЭлементДанных.ГоловнаяОрганизация;
			Если ЗначениеЗаполнено(СсылкаНаГоловнуюОрганизация) Тогда
				Выборка = ПроцедурыОбменаДаннымиПоОрганизации.ПолучитьВыборкуПодчиненныхОрганизаций(СсылкаНаГоловнуюОрганизация);
				Пока Выборка.Следующий() Цикл
					
					Если ПланыОбмена.ИзменениеЗарегистрировано(ЭтотОбъект.Ссылка, Выборка.Ссылка) Тогда
						МассивУзловДляПереноса.Добавить(ЭтотОбъект.Ссылка);
						Прервать;
					КонецЕсли;
					
				КонецЦикла;	
			КонецЕсли;
			
		КонецЕсли;
		
		// если нужно для всех узлов выгружать - то ничего проверять не нужно
		Если ВыгружатьДляВсехУзлов Тогда
			Возврат;
		КонецЕсли;
			
		НомерВМассиве = МассивУзловДляПереноса.Найти(ЭтотОбъект.Ссылка);
		
		Если НомерВМассиве = Неопределено Тогда
			
			// передаем информацию об удалении
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;	
			
		КонецЕсли;		
		
	ИначеЕсли ИмяБазовогоТипа = "РегистрыСведений"
		ИЛИ ИмяБазовогоТипа = "РегистрыНакопления"
		ИЛИ ИмяБазовогоТипа = "РегистрыБухгалтерии" Тогда
		
		Если мКоличествоОрганизацийВУзле = Неопределено Тогда
			
			мКоличествоОрганизацийВУзле = ЭтотОбъект.Организации.Количество();
			
		КонецЕсли;
		
		Если мКоличествоОрганизацийВУзле = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// нужно вычистить те строки которые для которых нужная организация не переносится
		Если ИмяБазовогоТипа = "РегистрыСведений" Тогда
			
			Если ТипОбъекта = мТипРегистрСведенийНаборЗаписейВстречныйВыпускПродукцииУслуг Тогда
		
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "Подразделение", мТипСправочникСсылкаПодразделенияОрганизаций);
				
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейКонтактнаяИнформация Тогда
				
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "Объект");
				
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейОтветственныеЛицаОрганизаций Тогда
				
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "СтруктурнаяЕдиница");	
				
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейЗаписиОСтажеДляСЗВ4
				ИЛИ ТипОбъекта = мТипРегистрСведенийНаборЗаписейСуммыВзносовДляСЗВ4 Тогда
				
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "ОбособленноеПодразделение", мТипСправочникСсылкаОрганизации);	
				
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияНМАБухгалтерскийУчет
				ИЛИ ТипОбъекта = мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияНМАНалоговыйУчет
				ИЛИ ТипОбъекта = мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияНМАНалоговыйУчетУСН Тогда
				
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "НематериальныйАктив", мТипСправочникСсылкаНематериальныеАктивы);
		
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияОСБухгалтерскийУчет
				ИЛИ ТипОбъекта = мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияОСНалоговыйУчет
				ИЛИ ТипОбъекта = мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияОСНалоговыйУчетУСН Тогда
				
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "ОсновноеСредство", мТипСправочникСсылкаОсновныеСредства); 
				
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейСведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям Тогда
				
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "Ведомость", мТипДокументЗарплатаКВыплатеОрганизаций, "Документы"); 
				
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейСведенияПротоколыОбменаСБанком Тогда
				
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "Документ", , "Документы"); 
				
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейСчетаУчетаНоменклатуры Тогда
				
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоОрганизацииКромеПустойОрганизации(ЭлементДанных);
				
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейСчетаУчетаРасчетовСКонтрагентами Тогда	
				
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоОрганизацииКромеПустойОрганизацииПоКонтрагенту(ЭлементДанных);
				
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейЗначенияСвойств Тогда	
				
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "Объект", , "Документы", Истина); 
				
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейУчетнаяПолитикаОрганизаций Тогда

				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "Организация", мТипСправочникСсылкаОрганизации); 
				
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейУчетнаяПолитикаПоПерсоналу Тогда

				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "Организация", мТипСправочникСсылкаОрганизации); 
				
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейРаботникиОрганизаций Тогда

				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "ОбособленноеПодразделение", мТипСправочникСсылкаОрганизации); 
				
			ИначеЕсли ТипОбъекта = мТипРегистрСведенийНаборЗаписейПлановыеНачисленияРаботниковОрганизаций Тогда

				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "Организация", мТипСправочникСсылкаОрганизации); 
				
			Иначе
				
				НаличиеОрганизации = мИнформацияОНаличиеОрганизацииВРегистре.Получить(ТипОбъекта);
				
				Если НаличиеОрганизации = Неопределено Тогда
					
					МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);					
					НаличиеОрганизации = (МетаданныеОбъекта.Измерения.Найти("Организация") <> Неопределено);
					мИнформацияОНаличиеОрганизацииВРегистре.Вставить(ТипОбъекта, НаличиеОрганизации);
					
				КонецЕсли;
				
				Если НаличиеОрганизации Тогда
						
					УбратьИзРегистраДанныеНеНужныеДляПереносаПоОрганизации(ЭлементДанных);
				
				КонецЕсли;
				
			КонецЕсли;
				
		ИначеЕсли ИмяБазовогоТипа = "РегистрыНакопления"
			ИЛИ ИмяБазовогоТипа = "РегистрыБухгалтерии" Тогда
			
			// некоторые регистры не фильтруем для передачи
			
			УбратьИзРегистраДанныеНеНужныеДляПереносаПоОрганизации(ЭлементДанных);
										 
		КонецЕсли;	
						
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента)
	
	Если ТипЗнч(ЭлементДанных) = мТипСправочникРегОтчеты Тогда
		
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		
	КонецЕсли;
	
КонецПроцедуры


мТипУдалениеДанных = Тип("УдалениеОбъекта");
мИнформацияОНаличиеОрганизацииВРегистре = Новый Соответствие;
мИнформацияОБазовыхТипах = Новый Соответствие;
мСтарыйТипОбъектаОтправки = Неопределено;
мСоответствиеОрганизацийИУзлов = Неопределено;

мТипРегистрСведенийНаборЗаписейКонтактнаяИнформация = Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация");

мТипРегистрСведенийНаборЗаписейОтветственныеЛицаОрганизаций = Тип("РегистрСведенийНаборЗаписей.ОтветственныеЛицаОрганизаций");

мТипРегистрСведенийНаборЗаписейЗаписиОСтажеДляСЗВ4 = Тип("РегистрСведенийНаборЗаписей.ЗаписиОСтажеДляСЗВ4");
мТипРегистрСведенийНаборЗаписейСуммыВзносовДляСЗВ4 = Тип("РегистрСведенийНаборЗаписей.СуммыВзносовДляСЗВ4");

мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияНМАБухгалтерскийУчет = Тип("РегистрСведенийНаборЗаписей.ПервоначальныеСведенияНМАБухгалтерскийУчет");
мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияНМАНалоговыйУчет = Тип("РегистрСведенийНаборЗаписей.ПервоначальныеСведенияНМАНалоговыйУчет");
мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияНМАНалоговыйУчетУСН = Тип("РегистрСведенийНаборЗаписей.ПервоначальныеСведенияНМАНалоговыйУчетУСН");

мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияОСБухгалтерскийУчет = Тип("РегистрСведенийНаборЗаписей.ПервоначальныеСведенияОСБухгалтерскийУчет");
мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияОСНалоговыйУчет = Тип("РегистрСведенийНаборЗаписей.ПервоначальныеСведенияОСНалоговыйУчет");
мТипРегистрСведенийНаборЗаписейПервоначальныеСведенияОСНалоговыйУчетУСН = Тип("РегистрСведенийНаборЗаписей.ПервоначальныеСведенияОСНалоговыйУчетУСН");

мТипРегистрСведенийНаборЗаписейСведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям = Тип("РегистрСведенийНаборЗаписей.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям");
мТипРегистрСведенийНаборЗаписейСведенияПротоколыОбменаСБанком = Тип("РегистрСведенийНаборЗаписей.ПротоколыОбменаСБанком");

мТипРегистрСведенийНаборЗаписейСчетаУчетаНоменклатуры = Тип("РегистрСведенийНаборЗаписей.СчетаУчетаНоменклатуры");
мТипРегистрСведенийНаборЗаписейСчетаУчетаРасчетовСКонтрагентами = Тип("РегистрСведенийНаборЗаписей.СчетаУчетаРасчетовСКонтрагентами");

мТипРегистрСведенийНаборЗаписейЗначенияСвойств = Тип("РегистрСведенийНаборЗаписей.ЗначенияСвойствОбъектов");

мТипРегистрСведенийНаборЗаписейУчетнаяПолитикаОрганизаций = Тип("РегистрСведенийНаборЗаписей.УчетнаяПолитикаОрганизаций");
мТипРегистрСведенийНаборЗаписейУчетнаяПолитикаПоПерсоналу = Тип("РегистрСведенийНаборЗаписей.УчетнаяПолитикаПоПерсоналу");

мТипРегистрСведенийНаборЗаписейРаботникиОрганизаций = Тип("РегистрСведенийНаборЗаписей.РаботникиОрганизаций");
мТипРегистрСведенийНаборЗаписейПлановыеНачисленияРаботниковОрганизаций = Тип("РегистрСведенийНаборЗаписей.ПлановыеНачисленияРаботниковОрганизаций");

мТипСправочникСсылкаПодразделенияОрганизаций = Тип("СправочникСсылка.ПодразделенияОрганизаций");
мТипСправочникСсылкаОрганизации = Тип("СправочникСсылка.Организации");
мТипСправочникСсылкаНематериальныеАктивы = Тип("СправочникСсылка.НематериальныеАктивы");
мТипСправочникСсылкаОсновныеСредства = Тип("СправочникСсылка.ОсновныеСредства"); 
мТипСправочникСсылкаКонтрагенты = Тип("СправочникСсылка.Контрагенты");

мТипДокументЗарплатаКВыплатеОрганизаций = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций");

мПустаяОрганизация = Справочники.Организации.ПустаяСсылка();

мТипСправочникРегОтчеты = Тип("СправочникОбъект.РегламентированныеОтчеты");


