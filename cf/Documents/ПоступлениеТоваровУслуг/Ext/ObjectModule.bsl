Перем мВалютаРегламентированногоУчета Экспорт;
Перем ПартионныйУчет;
Перем мУчетнаяПолитика Экспорт;
Перем мИспользоватьОборотнуюНоменклатуру Экспорт;
Перем мРазделятьПоСтавкамНДС Экспорт;
Перем мУчетВПродажныхЦенах Экспорт;
Перем РозницаВПродажныхЦенах;
Перем мПоддержкаПБУ18;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПоступлениеТоваров()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДатаВходящегоДокумента,
	|	ДоговорКонтрагента,
	|	Контрагент,
	|	Контрагент КАК Поставщик,
	|	Организация,
	|	Организация КАК Покупатель,
	// {ОбособленныеПодразделения
	|	ПодразделениеОрганизации,
	// }ОбособленныеПодразделения 
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("ЗапросПоУслугам");
	
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ
	|	ЗапросПоОборудованию.Номенклатура,
	|	ВЫРАЗИТЬ(ЗапросПоОборудованию.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	ЗапросПоОборудованию.Номенклатура." + ТекстКодАртикул + " КАК ТоварКод,
	|	ЗапросПоОборудованию.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаХранения,
	|	ЗапросПоОборудованию.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЗапросПоОборудованию.Количество КАК КоличествоМест,
	|	ЗапросПоОборудованию.Количество КАК Количество,
	|	ЗапросПоОборудованию.Коэффициент,
	|	ЗапросПоОборудованию.Цена,
	|	ЗапросПоОборудованию.Сумма,
	|	ЗапросПоОборудованию.СуммаНДС,
	|	ЗапросПоОборудованию.СтавкаНДС,
	|   ЗапросПоОборудованию.НомерСтроки,
	|	1 КАК ID
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеТоваровУслугОборудование.НомерСтроки КАК НомерСтроки,
	|		ПоступлениеТоваровУслугОборудование.Номенклатура КАК Номенклатура,
	|		ПоступлениеТоваровУслугОборудование.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслугОборудование.Коэффициент КАК Коэффициент,
	|		ПоступлениеТоваровУслугОборудование.Количество КАК Количество,
	|		ПоступлениеТоваровУслугОборудование.Цена КАК Цена,
	|		ПоступлениеТоваровУслугОборудование.Сумма КАК Сумма,
	|		ПоступлениеТоваровУслугОборудование.СтавкаНДС КАК СтавкаНДС,
	|		ПоступлениеТоваровУслугОборудование.СуммаНДС КАК СуммаНДС
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|	
	|	ГДЕ
	|		ПоступлениеТоваровУслугОборудование.Ссылка = &ТекущийДокумент) КАК ЗапросПоОборудованию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапросПоОбъектамСтройки.ОбъектСтроительства,
	|	ЗапросПоОбъектамСтройки.ОбъектСтроительства.Наименование,
	|	ЗапросПоОбъектамСтройки.ОбъектСтроительства.Код,
	|	""шт."",
	|	""шт."",
	|	1,
	|	1,
	|	1,
	|	ЗапросПоОбъектамСтройки.Сумма,
	|	ЗапросПоОбъектамСтройки.Сумма,
	|	ЗапросПоОбъектамСтройки.СуммаНДС,
	|	ЗапросПоОбъектамСтройки.СтавкаНДС,
	|	ЗапросПоОбъектамСтройки.НомерСтроки,
	|	2
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеТоваровУслугОбъектыСтроительства.НомерСтроки КАК НомерСтроки,
	|		ПоступлениеТоваровУслугОбъектыСтроительства.ОбъектСтроительства КАК ОбъектСтроительства,
	|		ПоступлениеТоваровУслугОбъектыСтроительства.СтавкаНДС КАК СтавкаНДС,
	|		ПоступлениеТоваровУслугОбъектыСтроительства.Сумма КАК Сумма,
	|		ПоступлениеТоваровУслугОбъектыСтроительства.СуммаНДС КАК СуммаНДС
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.ОбъектыСтроительства КАК ПоступлениеТоваровУслугОбъектыСтроительства
	|	
	|	ГДЕ
	|		ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка = &ТекущийДокумент) КАК ЗапросПоОбъектамСтройки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапросПоТоварам.Номенклатура,
	|	ВЫРАЗИТЬ(ЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	ЗапросПоТоварам.Номенклатура." + ТекстКодАртикул + ",
	|	ЗапросПоТоварам.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ЗапросПоТоварам.ЕдиницаИзмерения.Представление,
	|	ЗапросПоТоварам.КоличествоМест,
	|	ЗапросПоТоварам.Количество,
	|	ЗапросПоТоварам.Коэффициент,
	|	ЗапросПоТоварам.Цена,
	|	ЗапросПоТоварам.Сумма,
	|	ЗапросПоТоварам.СуммаНДС,
	|	ЗапросПоТоварам.СтавкаНДС,
	|	ЗапросПоТоварам.НомерСтроки,
	|	3
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
	|		СУММА(ПоступлениеТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|		СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.Коэффициент КАК Коэффициент,
	|		ПоступлениеТоваровУслуг.Цена КАК Цена,
	|		СУММА(ПоступлениеТоваровУслуг.Сумма) КАК Сумма,
	|		СУММА(ПоступлениеТоваровУслуг.СуммаНДС) КАК СуммаНДС,
	|		ПоступлениеТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|	
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПоступлениеТоваровУслуг.Номенклатура,
	|		ПоступлениеТоваровУслуг.СтавкаНДС,
	|		ПоступлениеТоваровУслуг.Цена,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.Коэффициент) КАК ЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	ЗапросПоУслугам.Номенклатура." + ТекстКодАртикул + " КАК ТоварКод,
	|	ЗапросПоУслугам.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	NULL,
	|	NULL,
	|	ЗапросПоУслугам.Количество,
	|	1,
	|	ЗапросПоУслугам.Цена,
	|	ЗапросПоУслугам.Сумма,
	|	ЗапросПоУслугам.СуммаНДС,
	|	ЗапросПоУслугам.СтавкаНДС,
	|	ЗапросПоУслугам.НомерСтроки,
	|	4
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ЗапросПоУслугам
	|
	|ГДЕ
	|	ЗапросПоУслугам.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	
	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Накладная");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	СведенияОПоставщике     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	СведенияОПокупателе     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата);
	ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПокупателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	Сумма    = 0;
	СуммаНДС = 0;

	Для Каждого ВыборкаСтрокТовары Из ВыборкаСтрок Цикл

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерСтроки = ВыборкаСтрок.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.ТоварКод;
		КонецЕсли;		

		ТабДокумент.Вывести(ОбластьМакета);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрок.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПоступлениеТоваров()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьТОРГ12ЗаПоставщика(БезУслуг = Ложь)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент",  ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Дата КАК Дата,
	|	ДатаВходящегоДокумента  КАК ДатаДокумента,
	|	НомерВходящегоДокумента КАК НомерДокумента,
	|	Организация             КАК Организация,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Организация
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      ТОГДА Контрагент
	|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	Организация             КАК Плательщик,
	|	Контрагент,
	|	Контрагент              КАК Поставщик,
	|	ЕСТЬNULL(ДоговорКонтрагента.Представление, """") КАК Основание,
	|	ЕСТЬNULL(ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов      КАК Курс,
	|	КратностьВзаиморасчетов КАК Кратность,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("Курс",            ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
	ЗапросПоТоварам.УстановитьПараметр("Кратность",       ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("ПоступлениеТоваровУслуг");
	
	Текст = "
	|ВЫБРАТЬ
	|	ЗапросПоТоварам.Номенклатура,
	|	ВЫРАЗИТЬ(ЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ЗапросПоТоварам.Номенклатура.Код КАК ТоварКод,
	|	ЗапросПоТоварам.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ЗапросПоТоварам.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ЗапросПоТоварам.ВидУпаковки,
	|	ЕСТЬNULL(ЗапросПоТоварам.КоличествоМест, 0) КАК КоличествоМест,
	|	ЕСТЬNULL(ЗапросПоТоварам.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(ЗапросПоТоварам.Коэффициент, 0) КАК Коэффициент,
	|	ЕСТЬNULL(ЗапросПоТоварам.Коэффициент, 0) КАК КоличествоВОдномМесте,
	|	ЕСТЬNULL(ЗапросПоТоварам.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ЗапросПоТоварам.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(ЗапросПоТоварам.СуммаНДС, 0) КАК СуммаНДС,
	|	ЗапросПоТоварам.СтавкаНДС,
	|	ЗапросПоТоварам.НомерСтроки,
	|   2 КАК ID
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
	|		СУММА(ПоступлениеТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|		СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
	|		ПоступлениеТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения КАК ВидУпаковки,
	|		ПоступлениеТоваровУслуг.Коэффициент КАК Коэффициент,
	|		ПоступлениеТоваровУслуг.Цена * &Курс / &Кратность КАК Цена,
	|		СУММА(ПоступлениеТоваровУслуг.Сумма * &Курс / &Кратность) КАК Сумма,
	|		СУММА(ПоступлениеТоваровУслуг.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|		ПоступлениеТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|	
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПоступлениеТоваровУслуг.Номенклатура,
	|		ПоступлениеТоваровУслуг.СтавкаНДС,
	|		ПоступлениеТоваровУслуг.Цена * &Курс / &Кратность,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.Коэффициент) КАК ЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	ПоступлениеТоваровУслуг.Номенклатура.Код,
	|	ПоступлениеТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ПоступлениеТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|	0,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Количество, 0),
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Коэффициент, 0),
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Коэффициент, 0),
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Цена, 0) * &Курс / &Кратность,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Сумма, 0) * &Курс / &Кратность,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.СуммаНДС, 0) * &Курс / &Кратность,
	|	ПоступлениеТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеТоваровУслуг.НомерСтроки,
	|	1
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ";
	
	Если НЕ БезУслуг Тогда
		Текст = Текст +"
		|
		|ВЫБРАТЬ
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	ПоступлениеТоваровУслуг.Номенклатура.Код,
		|	ПоступлениеТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
		|	ПоступлениеТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	NULL,
		|	0,
		|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Количество, 0),
		|	1,
		|	1,
		|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Цена, 0) * &Курс / &Кратность,
		|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Сумма, 0) * &Курс / &Кратность,
		|	ЕСТЬNULL(ПоступлениеТоваровУслуг.СуммаНДС, 0) * &Курс / &Кратность,
		|	ПоступлениеТоваровУслуг.СтавкаНДС,
		|	ПоступлениеТоваровУслуг.НомерСтроки,
		|   3
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслуг
		|
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ";
	КонецЕсли;
	Текст = Текст +"
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	ПоступлениеТоваровУслуг.Номенклатура.Код,
	|	ПоступлениеТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ПоступлениеТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	NULL,
	|	0,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Количество, 0),
	|	0,
	|	0,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Цена, 0) * &Курс / &Кратность,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Сумма, 0) * &Курс / &Кратность,
	|	0,
	|	NULL,
	|	ПоступлениеТоваровУслуг.НомерСтроки,
	|	4
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	ЗапросПоТоварам.Текст = Текст;
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ЗапросПоТоварам.Текст = СтрЗаменить(ЗапросПоТоварам.Текст, "Номенклатура.Код","Номенклатура.Артикул");
	КонецЕсли;
	
	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выгрузить();
	
	Если Проведен И (Шапка.РасчетыВУсловныхЕдиницах
		ИЛИ (Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета И Дата >= '20090101000000')) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", СчетУчетаРасчетовСКонтрагентом);
		Текст = 
		"ВЫБРАТЬ
		|	СУММА(Хозрасчетный.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Регистратор = &Ссылка
		|	И Хозрасчетный.СчетКт = &СчетУчетаРасчетовСКонтрагентом
		|	И Хозрасчетный.СчетДт В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПоступлениеТоваровУслуг.СчетУчета
		|			ИЗ
		|				Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
		|			ГДЕ
		|				ПоступлениеТоваровУслуг.Ссылка = &Ссылка
		|
		|           ОБЪЕДИНИТЬ
		|
		|			ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПоступлениеТоваровУслуг.СчетУчетаНДС
		|			ИЗ
		|				Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
		|			ГДЕ
		|				ПоступлениеТоваровУслуг.Ссылка = &Ссылка
		|
		|           ОБЪЕДИНИТЬ
		|
		|			ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПоступлениеТоваровУслуг.СчетУчета
		|			ИЗ
		|				Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслуг
		|			ГДЕ
		|				ПоступлениеТоваровУслуг.Ссылка = &Ссылка
		|
		|           ОБЪЕДИНИТЬ
		|
		|			ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПоступлениеТоваровУслуг.СчетУчетаНДС
		|			ИЗ
		|				Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслуг
		|			ГДЕ
		|				ПоступлениеТоваровУслуг.Ссылка = &Ссылка";
		Если НЕ БезУслуг Тогда
			Текст = Текст +"
			|
			|           ОБЪЕДИНИТЬ
			|
			|			ВЫБРАТЬ РАЗЛИЧНЫЕ
			|				ПоступлениеТоваровУслуг.СчетЗатрат
			|			ИЗ
			|				Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслуг
			|			ГДЕ
			|				ПоступлениеТоваровУслуг.Ссылка = &Ссылка
			|
			|           ОБЪЕДИНИТЬ
			|
			|			ВЫБРАТЬ РАЗЛИЧНЫЕ
			|				ПоступлениеТоваровУслуг.СчетУчетаНДС
			|			ИЗ
			|				Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслуг
			|			ГДЕ
			|				ПоступлениеТоваровУслуг.Ссылка = &Ссылка)
			|";
		Иначе
			Текст = Текст +")";
		КонецЕсли;
		
		Запрос.Текст = Текст;
		СуммаВзаиморасчетов = Запрос.Выполнить().Выгрузить()[0].Сумма;
		
		РасчетСуммыНДСПоСтавке =  УчетНДС.РасчетНДСвРубляхПоСтавкеДокумента(Шапка.ДатаДокумента);
		
		Если НЕ СуммаВзаиморасчетов = NULL Тогда
			
			ВыборкаСтрок.Колонки.Добавить("СуммаБезНДС");
			
			МассивРаспределения = Новый Массив;
			
			Для Каждого СтрокаТовар Из ВыборкаСтрок Цикл
				
				Если (СтрокаТовар.ID = 4) Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаСНДС = СтрокаТовар.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДС);
				СуммаБезНДС = СуммаСНДС - СтрокаТовар.СуммаНДС;

				МассивРаспределения.Добавить(СуммаСНДС);
				СтрокаТовар.СуммаБезНДС = СуммаБезНДС;
			    				
			КонецЦикла;
			
			ВыборкаСтрок.Колонки.Добавить("СуммаРублевая");
			УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, ВыборкаСтрок, "СуммаРублевая");
			
			Для Каждого СтрокаТовар Из ВыборкаСтрок Цикл
				
				Если (СтрокаТовар.ID = 4) Тогда
					Продолжить;
				КонецЕсли;
				
				Если РасчетСуммыНДСПоСтавке Тогда
					//Выделение суммы НДС, Расчет суммы без НДС
					ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаТовар.СтавкаНДС);
					
					СтрокаТовар.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаТовар.СуммаРублевая * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
					СтрокаТовар.Сумма = СтрокаТовар.СуммаРублевая - СтрокаТовар.СуммаНДС;
					
				Иначе
					МассивРаспределения.Очистить();
					МассивРаспределения.Добавить(СтрокаТовар.СуммаБезНДС);
					МассивРаспределения.Добавить(СтрокаТовар.СуммаНДС);
					МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТовар.СуммаРублевая, МассивРаспределения);
					Если МассивРаспределенныхСумм <> Неопределено Тогда
						СтрокаТовар.Сумма = МассивРаспределенныхСумм[0];
						СтрокаТовар.СуммаНДС = МассивРаспределенныхСумм[1];
					КонецЕсли;
				КонецЕсли;
				
				Если Шапка.СуммаВключаетНДС Тогда
					СтрокаТовар.Сумма = СтрокаТовар.Сумма+СтрокаТовар.СуммаНДС;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_ТОРГ12";

	Макет = ПолучитьОбщийМакет("ТОРГ12");
	
	ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");

	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент,       Шапка.ДатаДокумента);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация,      Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);

	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика     = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);

	// Если Значение поля Контрагент не заполнено, то это возможно только для
	// вида операции "Ответственное хранение (купля-продажа/комиссия)".
	Если ТипЗнч(СведенияОПоставщике) = Тип("Структура") тогда
	ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП = "";
		Если Шапка.Контрагент = Шапка.Грузоотправитель Тогда
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
		Иначе
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(
				СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО   = СведенияОПоставщике.КодПоОКПО;
	КонецЕсли;
	
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ОснованиеНомер             = "";
	ОбластьМакетаШапка.Параметры.ОснованиеДата              = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";

	ТабДокумент.Вывести(ОбластьМакетаШапка);

	// Инициализация счетчика страниц
	НомерСтраницы = 1;

	// Инициализация итогов по странице
	ИтогоМестНаСтранице       = 0;
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаНаСтранице      = 0;
	ИтогоНДСНаСтранице        = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// Инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	ИтогоСумма      = 0;
	ИтогоНДС        = 0;
	
	// Инициализация счетчика строк
	НомерСтроки     = 0;
	КоличествоСтрок = ВыборкаСтрок.Количество();
	
	// Выводим заголовок многострочной части
	ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

	// Выводим многострочную часть документа
	Для Каждого ВыборкаСтрокТовары Из ВыборкаСтрок Цикл

		НомерСтроки = НомерСтроки + 1;

		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
		
		ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.КоличествоМест) Тогда
			ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
			ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
		КонецЕсли;
		
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);

		СуммаСНДС = (ВыборкаСтрокТовары.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрокТовары.СуммаНДС));

		КоличествоМест = ВыборкаСтрокТовары.КоличествоМест;
		Количество     = ВыборкаСтрокТовары.Количество;
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			СуммаНДС    = 0;
		    ОбластьМакетаСтрока.Параметры.СтавкаНДС   = "";	
		Иначе  
			СуммаНДС    = ВыборкаСтрокТовары.СуммаНДС;
		    ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрокТовары.СтавкаНДС;	
		КонецЕсли;
		
		СуммаБезНДС = СуммаСНДС - СуммаНДС;
		ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
		
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
		ОбластьМакетаСтрока.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);
		
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		Если НомерСтроки = 1 Тогда
			СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
		КонецЕсли;                                                   // помещаться заголовок
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
		Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и повал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;

		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда

			Если КоличествоСтрок > 1 Тогда
				
				// Выводим итоги по странице
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
				
				// Очистим итоги по странице
				ИтогоМестНаСтранице       = 0;
				ИтогоКоличествоНаСтранице = 0;
				ИтогоСуммаНаСтранице      = 0;
				ИтогоНДСНаСтранице        = 0;
				ИтогоСуммаСНДСНаСтранице  = 0;
				
				// Выведем заголовок таблицы
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакетаСтрока);

		// Увеличим итоги по странице
		ИтогоМестНаСтранице       = ИтогоМестНаСтранице       + КоличествоМест;
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
		ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;

		// Увеличим итоги по документу
		ИтогоМест       = ИтогоМест       + КоличествоМест;
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
		ИтогоНДС        = ИтогоНДС        + СуммаНДС;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по странице
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакетаВсего.Параметры.ИтогМест       = ИтогоМест;
	ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
	ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
	ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
	ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакетаВсего);
	
	// Выводим подвал документа
	ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью                          = ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")); 
	ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
	
	ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """     """;
	ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = "";
	ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = " 20     года";	
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ12ЗаПоставщика()

// Функция формирует табличный документ унифицированной формы ТОРГ-4
// "Акт о приемке товара, поступившего без счета поставщика"
//
// Возвращаемое значение:
//  Табличный документ - печатная форма ТОРГ-4
//
Функция ПечатьТОРГ4()
	Перем ПодразделениеОтветственныхЛиц;

	КратностьДока = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КурсДока      = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер КАК Номер,
	|	Дата  КАК ДатаДокумента,
	|	ДатаВходящегоДокумента  КАК ДатаДокументаСопровождения,
	|	НомерВходящегоДокумента КАК НомерДокументаСопровождения,
	|	Организация,
	|	Организация КАК ЮрФизЛицо,
	|	Организация КАК Руководители,
	|	Контрагент,
	|	Контрагент КАК Поставщик,
	|	Контрагент КАК Грузоотправитель,
	|	Склад      КАК МестоПриемки,
	|	ВалютаДокумента,
	// {ОбособленныеПодразделения
	|	ПодразделениеОрганизации,
	|	ВЫРАЗИТЬ(ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200)) КАК ПредставлениеПодразделения,
	// }ОбособленныеПодразделения 
	|	КурсВзаиморасчетов      КАК Курс,
	|	КратностьВзаиморасчетов КАК Кратность
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("Курс",            КурсДока);
	ЗапросПоТоварам.УстановитьПараметр("Кратность",       КратностьДока);
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("ПоступлениеТоваровУслуг");
	
	ЗапросПоТоварам.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код                                           КАК ТоварКод,
	|	ВложенныйЗапрос.КоличествоМест,
	|	ВложенныйЗапрос.Количество                                                 КАК КоличествоШтук,
	|	ВложенныйЗапрос.Номенклатура.БазоваяЕдиницаИзмерения.Представление         КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.Номенклатура.БазоваяЕдиницаИзмерения.Код                   КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	ВложенныйЗапрос.Коэффициент                                                КАК КоличествоВОдномМесте,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Стоимость,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.НомерСтроки,
	|   1 КАК ID
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Номенклатура,
	|		СУММА(ПоступлениеТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|		СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
	|		ПоступлениеТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.Коэффициент,
	|		ПоступлениеТоваровУслуг.Цена        * &Курс / &Кратность  КАК Цена,
	|		СУММА(ПоступлениеТоваровУслуг.Сумма * &Курс / &Кратность) КАК Стоимость,
	|		ПоступлениеТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ПоступлениеТоваровУслуг.Номенклатура,
	|		ПоступлениеТоваровУслуг.СтавкаНДС,
	|		ПоступлениеТоваровУслуг.Цена,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.Коэффициент
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	ПоступлениеТоваровУслуг.Номенклатура.Код,
	|	ПоступлениеТоваровУслуг.Количество,
	|	ПоступлениеТоваровУслуг.Количество,
	|	ПоступлениеТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения,
	|	ПоступлениеТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	1,
	|	ПоступлениеТоваровУслуг.Цена  * &Курс / &Кратность,
	|	ПоступлениеТоваровУслуг.Сумма * &Курс / &Кратность,
	|	ПоступлениеТоваровУслуг.СтавкаНДС,
	|	ПоступлениеТоваровУслуг.НомерСтроки,
	|   2
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	ПоступлениеТоваровУслуг.Номенклатура.Код,
	|	1,
	|	ПоступлениеТоваровУслуг.Количество,
	|	ПоступлениеТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ПоступлениеТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	1,
	|	ПоступлениеТоваровУслуг.Цена * &Курс / &Кратность,
	|	ПоступлениеТоваровУслуг.Сумма * &Курс / &Кратность,
	|	NULL,
	|	ПоступлениеТоваровУслуг.НомерСтроки,
	|	3
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ЗапросПоТоварам.Текст = СтрЗаменить(ЗапросПоТоварам.Текст, "Номенклатура.Код","Номенклатура.Артикул");
	КонецЕсли;
	
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Макет = ПолучитьОбщийМакет("ТОРГ4");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_ТОРГ4";

	Макет = ПолучитьОбщийМакет("ТОРГ4");
	
	ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогиПоСтранице");
	ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаДокумента);

	Если ЗначениеЗаполнено(Шапка.Контрагент) Тогда
		СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента);
		ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакетаШапка.Параметры.ОписаниеПоставщика            = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОПоставщике, "НаименованиеДляПечатныхФорм,ЮридическийАдрес,Телефоны,");
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОПоставщике, "НаименованиеДляПечатныхФорм,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО               = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ГрузоотправительПоОКПО        = СведенияОПоставщике.КодПоОКПО;
	КонецЕсли;

	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	ОбластьМакетаШапка.Параметры.ДатаДокумента            = Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
	ОбластьМакетаШапка.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "НаименованиеДляПечатныхФорм,ЮридическийАдрес,");
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.РеквизитыСопроводительногоДокумента = "сопроводительный документ № "
	                                                                 + Шапка.НомерДокументаСопровождения 
	                                                                 + " от " 
	                                                                 + Формат(Шапка.ДатаДокументаСопровождения, "ДФ='дд ММММ гггг'");

	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 

	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	
	ОбластьМакетаШапка.Параметры.ФИОРуководителя       = Руководители.РуководительПредставление;
	ОбластьМакетаШапка.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;

	ТабДокумент.Вывести(ОбластьМакетаШапка);

	
	// Инициализация счетчика страниц
	НомерСтраницы = 1;
	
	// Инициализация счетчика строк
	НомерСтроки     = 0;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
	
	// инициализация итогов по странице
	ИтогоМестПоСтранице        = 0;
	ИтогоШтукПоСтранице        = 0;
	ИтогоМассаБруттоПоСтранице = 0;
	ИтогоМассаНеттоПоСтранице  = 0;
	ИтогоСтоимостьПоСтранице   = 0;

	// инициализация итогов по документу
	ИтогоМест        = 0;
	ИтогоШтук        = 0;
	ИтогоМассаБрутто = 0;
	ИтогоМассаНетто  = 0;
	ИтогоСтоимость   = 0;
	Ном              = 0;

	// Выводим многострочную часть документа
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
		
		КоличествоШтук = ВыборкаСтрокТовары.КоличествоШтук;
		
		ОбластьМакетаСтрока.Параметры.КоличествоШтук = КоличествоШтук;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.КоличествоМест) Тогда
			ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
		КонецЕсли;
		
		Кратность = ?(Шапка.Кратность = 0, 1, Шапка.Кратность);
		ОбластьМакетаСтрока.Параметры.Цена      = ВыборкаСтрокТовары.Цена;
		ОбластьМакетаСтрока.Параметры.Стоимость = ВыборкаСтрокТовары.Стоимость;
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
	
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		Если НомерСтроки = 1 Тогда
			СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
		КонецЕсли;                                                   // помещаться заголовок
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
		Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и повал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;

		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда

			// Выводим итоги по странице
			Если НЕ (НомерСтроки = 1) Тогда
			
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоМестПоСтранице        = ИтогоМестПоСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоСтоимостьПоСтранице   = ИтогоСтоимостьПоСтранице;
				
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
			КонецЕсли;
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
			
			// Очистим итоги по странице
			ИтогоМестПоСтранице        = 0;
			ИтогоШтукПоСтранице        = 0;
			ИтогоМассаБруттоПоСтранице = 0;
			ИтогоМассаНеттоПоСтранице  = 0;
			ИтогоСтоимостьПоСтранице   = 0;
			
			// Выведем заголовок таблицы
			НомерСтраницы = НомерСтраницы + 1;
			ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			
		ИначеЕсли НомерСтроки = 1 Тогда // первая срока, все помещается
			
			ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакетаСтрока);

		// Обновим итоги по странице
		ИтогоМестПоСтранице        = ИтогоМестПоСтранице        + ВыборкаСтрокТовары.КоличествоМест;
		ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице        + КоличествоШтук;
		ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице + 0;
		ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице  + 0;
		ИтогоСтоимостьПоСтранице   = ИтогоСтоимостьПоСтранице   + ВыборкаСтрокТовары.Стоимость;

		// Обновим итогов по документу
		ИтогоМест        = ИтогоМест        + ВыборкаСтрокТовары.КоличествоМест;
		ИтогоШтук        = ИтогоШтук        + КоличествоШтук;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
		ИтогоСтоимость   = ИтогоСтоимость   + ВыборкаСтрокТовары.Стоимость;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоМестПоСтранице        = ИтогоМестПоСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоСтоимостьПоСтранице   = ИтогоСтоимостьПоСтранице;
	ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);

	// Выводим итоги по документу в общем
	ОбластьМакетаВсего.Параметры.ИтогоМест        = ИтогоМест;
	ОбластьМакетаВсего.Параметры.ИтогоШтук        = ИтогоШтук;
	ОбластьМакетаВсего.Параметры.ИтогоМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакетаВсего.Параметры.ИтогоМассаНетто  = ИтогоМассаНетто;
	ОбластьМакетаВсего.Параметры.ИтогоСтоимость   = ИтогоСтоимость;
	ТабДокумент.Вывести(ОбластьМакетаВсего);
	
	// Выводим подвал документа
	ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ4()

// Функция формирует табличный документ унифицированной формы М-4
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-4 (приходный ордер).
//
Функция ПечатьМ4()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Номер КАК Номер,
	|	ПоступлениеТоваровУслуг.Дата КАК ДатаСоставления,
	|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК НомерСопроводительногоДокумента,
	|	ПоступлениеТоваровУслуг.Организация,
	|	ПоступлениеТоваровУслуг.Организация КАК ЮрФизЛицо,
	|	ПоступлениеТоваровУслуг.Склад КАК МестоПриемки,
	|	ПоступлениеТоваровУслуг.Склад.Представление КАК СкладНаименование,
	|	ПоступлениеТоваровУслуг.Контрагент.Код КАК ПоставщикКод,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Поставщик,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	ПоступлениеТоваровУслуг.ВалютаДокумента,
	// {ОбособленныеПодразделения
	|	ПоступлениеТоваровУслуг.ПодразделениеОрганизации,
	|	ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200)) КАК ПредставлениеПодразделения,
	// }ОбособленныеПодразделения 
	|	ПоступлениеТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	ПоступлениеТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	ПоступлениеТоваровУслуг.УчитыватьНДС,
	|	ПоступлениеТоваровУслуг.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом КАК СубСчет
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("Курс",            ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
	ЗапросПоТоварам.УстановитьПараметр("Кратность",       ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	                        |	ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
	                        |	ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	                        |	ПоступлениеТоваровУслуг.Номенклатура.Код КАК ТоварКод,
	                        |	ПоступлениеТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	                        |	ПоступлениеТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	                        |	ПоступлениеТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	                        |	СУММА(ПоступлениеТоваровУслуг.Количество) КАК КоличествоПринято,
	                        |	СУММА(ПоступлениеТоваровУслуг.Сумма * &Курс / &Кратность) КАК Стоимость,
	                        |	СУММА(ПоступлениеТоваровУслуг.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	                        |	МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки) КАК НомерСтроки
	                        |ИЗ
	                        |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	                        |ГДЕ
	                        |	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	                        |
	                        |СГРУППИРОВАТЬ ПО
	                        |	ПоступлениеТоваровУслуг.Номенклатура,
	                        |	ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	                        |	ПоступлениеТоваровУслуг.Цена,
	                        |	ПоступлениеТоваровУслуг.СтавкаНДС
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	НомерСтроки";
							
							
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ЗапросПоТоварам.Текст = СтрЗаменить(ЗапросПоТоварам.Текст, "Номенклатура.Код","Номенклатура.Артикул");
	КонецЕсли;
							
	ЗапросТовары = ЗапросПоТоварам.Выполнить().Выгрузить();

	Если Проведен И (Шапка.РасчетыВУсловныхЕдиницах
		ИЛИ (Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета И Дата >= '20090101000000')) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", СчетУчетаРасчетовСКонтрагентом);
		Текст = 
		"ВЫБРАТЬ
		|	СУММА(Хозрасчетный.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Регистратор = &Ссылка
		|	И Хозрасчетный.СчетКт = &СчетУчетаРасчетовСКонтрагентом
		|	И Хозрасчетный.СчетДт В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПоступлениеТоваровУслуг.СчетУчета
		|			ИЗ
		|				Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
		|			ГДЕ
		|				ПоступлениеТоваровУслуг.Ссылка = &Ссылка
		|
		|           ОБЪЕДИНИТЬ
		|
		|			ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПоступлениеТоваровУслуг.СчетУчетаНДС
		|			ИЗ
		|				Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
		|			ГДЕ
		|				ПоступлениеТоваровУслуг.Ссылка = &Ссылка)";
				
		Запрос.Текст = Текст;
		СуммаВзаиморасчетов = Запрос.Выполнить().Выгрузить()[0].Сумма;
		
		РасчетСуммыНДСПоСтавке =  УчетНДС.РасчетНДСвРубляхПоСтавкеДокумента(Шапка.ДатаСоставления);
		
		Если НЕ СуммаВзаиморасчетов = NULL Тогда
			
			ЗапросТовары.Колонки.Добавить("СуммаБезНДС");
			
			МассивРаспределения = Новый Массив;
			
			Для Каждого СтрокаТовар Из ЗапросТовары Цикл
				
				СуммаСНДС = СтрокаТовар.Стоимость + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДС);
				СуммаБезНДС = СуммаСНДС - СтрокаТовар.СуммаНДС;

				МассивРаспределения.Добавить(СуммаСНДС);
				СтрокаТовар.СуммаБезНДС = СуммаБезНДС;
			    				
			КонецЦикла;
			
			ЗапросТовары.Колонки.Добавить("СуммаРублевая");
			УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, ЗапросТовары, "СуммаРублевая");
			
			Для Каждого СтрокаТовар Из ЗапросТовары Цикл
				
				Если РасчетСуммыНДСПоСтавке Тогда
					//Выделение суммы НДС, Расчет суммы без НДС
					ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаТовар.СтавкаНДС);
					
					СтрокаТовар.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаТовар.СуммаРублевая * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
					СтрокаТовар.Стоимость = СтрокаТовар.СуммаРублевая - СтрокаТовар.СуммаНДС;
					
				Иначе
					МассивРаспределения.Очистить();
					МассивРаспределения.Добавить(СтрокаТовар.СуммаБезНДС);
					МассивРаспределения.Добавить(СтрокаТовар.СуммаНДС);
					МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТовар.СуммаРублевая, МассивРаспределения);
					Если МассивРаспределенныхСумм <> Неопределено Тогда
						СтрокаТовар.Стоимость = МассивРаспределенныхСумм[0];
						СтрокаТовар.СуммаНДС = МассивРаспределенныхСумм[1];
					КонецЕсли;
				КонецЕсли;
				
				Если Шапка.СуммаВключаетНДС Тогда
					СтрокаТовар.Стоимость = СтрокаТовар.Стоимость+СтрокаТовар.СуммаНДС;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_М4";

	Макет = ПолучитьОбщийМакет("М4");
	
	ОбластьМакетаШапка              = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокДокумента = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьМакетаЗаголовокТаблицы   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаСтрока             = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвалСтрок        = Макет.ПолучитьОбласть("ПодвалСтрок");
	ОбластьМакетаИтого              = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодвал             = Макет.ПолучитьОбласть("Подвал");
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);

	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	
	ТабДокумент.Вывести(ОбластьМакетаШапка);

	// Выводим заголовок документа
	ОбластьМакетаЗаголовокДокумента.Параметры.Заполнить(Шапка);
	ОбластьМакетаЗаголовокДокумента.Параметры.ДатаСоставления = Шапка.ДатаСоставления;
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.ДатаСоставления), "НаименованиеДляПечатныхФорм,");
	ОбластьМакетаЗаголовокДокумента.Параметры.ПоставщикНаименование = ПредставлениеКонтрагента;
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокДокумента);
	
	// Выводим заголовок таблицы
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

	// Инициализация итогов в документе
	ИтогоКоличествоПринято = 0;
	ИтогоСуммаБезНДС       = 0;
	ИтогоСуммаНДС          = 0;
	ИтогоВсегоСНДС         = 0;
	Ном                    = 0;

	// Инициализация счетчиков страниц и строк
	НомерСтраницы   = 1;
	НомерСтроки     = 0;
	КоличествоСтрок = ЗапросТовары.Количество();
	
	// Выводим многострочную часть документа
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		НомерСтроки = НомерСтроки + 1;

		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);

		Кратность = ?(Шапка.Кратность = 0, 1, Шапка.Кратность);
		ВсегоСНДС = (ВыборкаСтрок.Стоимость
			      + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));

		КоличествоПринято = ВыборкаСтрок.КоличествоПринято;
		СуммаНДС          = ВыборкаСтрок.СуммаНДС;
		Цена              = (ВсегоСНДС - СуммаНДС) / ?(КоличествоПринято = 0, 1, КоличествоПринято);

		ОбластьМакетаСтрока.Параметры.КоличествоПринято = КоличествоПринято;
		ОбластьМакетаСтрока.Параметры.ВсегоСНДС         = ВсегоСНДС;
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС       = ВсегоСНДС - СуммаНДС;
		ОбластьМакетаСтрока.Параметры.СуммаНДС          = СуммаНДС;
		ОбластьМакетаСтрока.Параметры.Цена              = Цена;
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);

		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);  // помещаться и подвал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		Иначе                                              // иначе - только подвал строк
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвалСтрок);
		КонецЕсли;

		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда

			ТабДокумент.Вывести(ОбластьМакетаПодвалСтрок);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			
			НомерСтраницы = НомерСтраницы + 1;
			ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			
			ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакетаСтрока);

		ИтогоКоличествоПринято = ИтогоКоличествоПринято + КоличествоПринято;
		ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + ВсегоСНДС - СуммаНДС;
		ИтогоСуммаНДС          = ИтогоСуммаНДС          + СуммаНДС;
		ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + ВсегоСНДС;

	КонецЦикла;

	// Выводим итоги по документу
	ОбластьМакетаИтого.Параметры.ИтогоКоличествоПринято = ИтогоКоличествоПринято;
	ОбластьМакетаИтого.Параметры.ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС;
	ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС          = ИтогоСуммаНДС;
	ОбластьМакетаИтого.Параметры.ИтогоВсегоСНДС         = ИтогоВсегоСНДС;
	ТабДокумент.Вывести(ОбластьМакетаИтого);

	// Выводим итоги по документу
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьМ4()

// Функция формирует табличный документ унифицированной формы ОС-14
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме ОС-14 (приходный ордер).
//
Функция ПечатьОС14()
	Перем ПодразделениеОтветственныхЛиц;

	Макет       = ПолучитьМакет("ОС14");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_ОС14";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",                         Ссылка);
	Запрос.УстановитьПараметр("Курс",                           ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
	Запрос.УстановитьПараметр("Кратность",                      ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Дата КАК ДатаДокумента,
	|	ПоступлениеТоваровУслуг.Номер КАК НомерДокумента,
	|	ПоступлениеТоваровУслуг.Организация КАК ОрганизацияПолучатель,
	|	ПоступлениеТоваровУслуг.Организация.КодПоОКПО КАК ОрганизацияПолучательКодПоОКПО,
	|	ПоступлениеТоваровУслуг.Склад КАК МестоПриема,
	|	ПоступлениеТоваровУслуг.Склад.Представление КАК МестоПриемаНаименование,
	|	ПоступлениеТоваровУслуг.УчитыватьНДС,
	|	ПоступлениеТоваровУслуг.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслуг.СуммаДокумента,
	|	ПоступлениеТоваровУслуг.Контрагент КАК ОрганизацияПоставщик,
	|	ПоступлениеТоваровУслуг.Контрагент КАК ОрганизацияГрузоотправитель,
	|	ПоступлениеТоваровУслуг.Контрагент.КодПоОКПО КАК ОрганизацияПоставщикКодПоОКПО,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.ДоговорКонтрагента.Представление, """") КАК Основание,
	|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК ОснованиеНомер,
	|	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента КАК ОснованиеДата,
	// {ОбособленныеПодразделения
	|	ПоступлениеТоваровУслуг.ПодразделениеОрганизации,
	|	ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200)) КАК ПодразделениеНаименование,
	// }ОбособленныеПодразделения 
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПоступлениеТоваровУслуг.ДоговорКонтрагента.ВалютаВзаиморасчетов, &ВалютаРегламентированногоУчета) = &ВалютаРегламентированногоУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка";
	
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();

	Шапка         = Макет.ПолучитьОбласть("Шапка");
	ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Подвал        = Макет.ПолучитьОбласть("Подвал");
	
	ОрганизацияПолучательНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			ВыборкаПоШапке.ОрганизацияПолучатель, ВыборкаПоШапке.ДатаДокумента), "НаименованиеДляПечатныхФорм,");
	ОрганизацияПолучательТелефоны = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			ВыборкаПоШапке.ОрганизацияПолучатель, ВыборкаПоШапке.ДатаДокумента), "Телефоны,");
	ОрганизацияПолучательБанковскиеРеквизиты = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			ВыборкаПоШапке.ОрганизацияПолучатель, ВыборкаПоШапке.ДатаДокумента), "НомерСчета,Банк,БИК,КоррСчет,");
	ОрганизацияПоставщикНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			ВыборкаПоШапке.ОрганизацияПоставщик, ВыборкаПоШапке.ДатаДокумента), "ПолноеНаименование,");
	ОрганизацияПоставщикТелефоны = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			ВыборкаПоШапке.ОрганизацияПоставщик, ВыборкаПоШапке.ДатаДокумента), "Телефоны,");
	ОрганизацияПоставщикБанковскиеРеквизиты = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			ВыборкаПоШапке.ОрганизацияПоставщик, ВыборкаПоШапке.ДатаДокумента), "НомерСчета,Банк,БИК,КоррСчет,");
	ОрганизацияГрузоотправительНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			ВыборкаПоШапке.ОрганизацияГрузоотправитель, ВыборкаПоШапке.ДатаДокумента), "НаименованиеДляПечатныхФорм,");
	ОрганизацияГрузоотправительБанковскиеРеквизиты = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			ВыборкаПоШапке.ОрганизацияГрузоотправитель, ВыборкаПоШапке.ДатаДокумента), "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
	
	Шапка.Параметры.Заполнить(ВыборкаПоШапке);
	Шапка.Параметры.ОрганизацияПолучательНаименование               = ОрганизацияПолучательНаименование;
	Шапка.Параметры.ОрганизацияПолучательТелефоны                   = ОрганизацияПолучательТелефоны;
	Шапка.Параметры.ОрганизацияПолучательБанковскиеРеквизиты        = ОрганизацияПолучательБанковскиеРеквизиты;
	Шапка.Параметры.ОрганизацияПоставщикНаименование                = ОрганизацияПоставщикНаименование;
	Шапка.Параметры.ОрганизацияПоставщикТелефоны                    = ОрганизацияПоставщикТелефоны;
	Шапка.Параметры.ОрганизацияПоставщикБанковскиеРеквизиты         = ОрганизацияПоставщикБанковскиеРеквизиты;
	Шапка.Параметры.ОрганизацияГрузоотправительНаименование         = ОрганизацияГрузоотправительНаименование;
	Шапка.Параметры.ОрганизацияГрузоотправительБанковскиеРеквизиты  = ОрганизацияГрузоотправительБанковскиеРеквизиты;

	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = ВыборкаПоШапке.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 
	
	ОтветственныеЛица = ОбщегоНазначения.ОтветственныеЛица(
		ВыборкаПоШапке.ОрганизацияПолучатель, ВыборкаПоШапке.ДатаДокумента, ПодразделениеОтветственныхЛиц);

	Шапка.Параметры.РуководительДолжность    = ОтветственныеЛица.РуководительДолжность;
	Шапка.Параметры.РуководительНаименование = ОтветственныеЛица.РуководительПредставление;
	
	ТабДокумент.Вывести(Шапка);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ШапкаТаблицы);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугОборудование.Ссылка,
	|	ПоступлениеТоваровУслугОборудование.НомерСтроки                     КАК НомерСтроки,
	|	ПоступлениеТоваровУслугОборудование.Номенклатура                    КАК Оборудование,
	|	ВЫРАЗИТЬ(ПоступлениеТоваровУслугОборудование.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ОборудованиеНаименование,
	|	ПоступлениеТоваровУслугОборудование.Номенклатура.БазоваяЕдиницаИзмерения.Наименование  КАК ЕдиницаИзмеренияНаименование,
	|	ПоступлениеТоваровУслугОборудование.Коэффициент,
	|	ПоступлениеТоваровУслугОборудование.СтавкаНДС,
	|	ПоступлениеТоваровУслугОборудование.Количество,
	|	ПоступлениеТоваровУслугОборудование.Количество                      КАК ФактическиПринято,
	|	ПоступлениеТоваровУслугОборудование.Цена     * &Курс / &Кратность   КАК СтоимостьЗаЕдиницу,
	|	ПоступлениеТоваровУслугОборудование.Сумма    * &Курс / &Кратность   КАК Сумма,
	|	ПоступлениеТоваровУслугОборудование.СуммаНДС * &Курс / &Кратность   КАК СуммаНДС,
	|	ПоступлениеТоваровУслугОборудование.Сумма                           КАК СуммаВВалютеДокумента,
	|	ПоступлениеТоваровУслугОборудование.СуммаНДС                        КАК СуммаНДСВВалютеДокумента
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТоваровУслугОборудование.НомерСтроки";
	ТаблицаПоОборудованию = Запрос.Выполнить().Выгрузить();
	
	Если Проведен И ВыборкаПоШапке.РасчетыВВалюте Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", СчетУчетаРасчетовСКонтрагентом);
		Текст = 
		"ВЫБРАТЬ
		|	СУММА(Хозрасчетный.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Регистратор = &Ссылка
		|	И Хозрасчетный.СчетКт = &СчетУчетаРасчетовСКонтрагентом
		|	И Хозрасчетный.СчетДт В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПоступлениеТоваровУслугОборудование.СчетУчета
		|			ИЗ
		|				Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
		|			ГДЕ
		|				ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
		|
		|			ОБЪЕДИНИТЬ ВСЕ
		|
		|			ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПоступлениеТоваровУслугОборудование.СчетУчетаНДС
		|			ИЗ
		|				Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
		|			ГДЕ
		|				ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка)";
		Запрос.Текст = Текст;
		СуммаВзаиморасчетов = Запрос.Выполнить().Выгрузить()[0].Сумма;
		
		Если НЕ СуммаВзаиморасчетов = NULL Тогда
			
			ТаблицаПоОборудованию.Колонки.Добавить("СуммаБезНДСВВалютеДокумента");
			
			МассивРаспределения = Новый Массив;
			
			Для Каждого СтрокаТовар Из ТаблицаПоОборудованию Цикл
				
				СуммаСНДСВВалютеДокумента = СтрокаТовар.СуммаВВалютеДокумента + ?(ВыборкаПоШапке.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДСВВалютеДокумента);
				Если (СтрокаТовар.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120)
				 ИЛИ (СтрокаТовар.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118)
			 	 ИЛИ (СтрокаТовар.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
					СуммаБезНДСВВалютеДокумента = СуммаСНДСВВалютеДокумента;
				Иначе
					СуммаБезНДСВВалютеДокумента = СуммаСНДСВВалютеДокумента - СтрокаТовар.СуммаНДСВВалютеДокумента;
				КонецЕсли;
				
				МассивРаспределения.Добавить(СуммаСНДСВВалютеДокумента);
				СтрокаТовар.СуммаБезНДСВВалютеДокумента = СуммаБезНДСВВалютеДокумента;
				
			КонецЦикла;
			
			УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, ТаблицаПоОборудованию, "Сумма");
			
			Для Каждого СтрокаТовар Из ТаблицаПоОборудованию Цикл
				
				МассивРаспределения.Очистить();
				МассивРаспределения.Добавить(СтрокаТовар.СуммаБезНДСВВалютеДокумента);
				МассивРаспределения.Добавить(СтрокаТовар.СуммаНДСВВалютеДокумента);
				МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТовар.Сумма, МассивРаспределения);
				
				Если НЕ (МассивРаспределенныхСумм = Неопределено) Тогда
					
					СтрокаТовар.Сумма              = МассивРаспределенныхСумм[0] + ?(ВыборкаПоШапке.СуммаВключаетНДС, МассивРаспределенныхСумм[1], 0);
					СтрокаТовар.СуммаНДС           = МассивРаспределенныхСумм[1];
					СтрокаТовар.СтоимостьЗаЕдиницу = СтрокаТовар.Сумма / СтрокаТовар.Количество;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	Для Каждого СтрокаОборудование Из ТаблицаПоОборудованию Цикл

		СтрокаТаблицы.Параметры.Заполнить(СтрокаОборудование);
        СтрокаТаблицы.Параметры.ОборудованиеНаименование = СокрЛП(СтрокаОборудование.ОборудованиеНаименование);
		
		Если ВыборкаПоШапке.УчитыватьНДС Тогда
			Если ВыборкаПоШапке.СуммаВключаетНДС Тогда
				СтрокаТаблицы.Параметры.СтоимостьВсего     = СтрокаОборудование.Сумма - СтрокаОборудование.СуммаНДС;
				СтрокаТаблицы.Параметры.СтоимостьЗаЕдиницу = ?(СтрокаОборудование.Количество > 0,
				                                              (СтрокаОборудование.Сумма - СтрокаОборудование.СуммаНДС) / СтрокаОборудование.Количество,
				                                               СтрокаОборудование.Сумма - СтрокаОборудование.СуммаНДС);
			Иначе
				СтрокаТаблицы.Параметры.СтоимостьВсего     = СтрокаОборудование.Сумма;
				СтрокаТаблицы.Параметры.СтоимостьЗаЕдиницу = СтрокаОборудование.СтоимостьЗаЕдиницу;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.Параметры.СтоимостьВсего = СтрокаОборудование.Сумма;
		КонецЕсли;

		ТабДокумент.Вывести(СтрокаТаблицы);

	КонецЦикла;
	
	Подвал.Параметры.ГлавныйБухгалтерНаименование = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
	
	ТабДокумент.Вывести(Подвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьОС14()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная" тогда
		
		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПоступлениеТоваров();
	ИначеЕсли ИмяМакета = "ТОРГ12" тогда
		
		// Унифицированная форма ТОРГ-12 (за поставщика)
		ТабДокумент = ПечатьТОРГ12ЗаПоставщика();
	ИначеЕсли ИмяМакета = "ТОРГ12_БезУслуг" тогда
		
		// Унифицированная форма ТОРГ-12 (за поставщика)
		ТабДокумент = ПечатьТОРГ12ЗаПоставщика(Истина);
	ИначеЕсли ИмяМакета = "ТОРГ4" тогда
		
		// Унифицированная форма ТОРГ-4 (акт приемки товара без счета поставщика)
		ТабДокумент = ПечатьТОРГ4();
	ИначеЕсли ИмяМакета = "М4" тогда
		
		// Унифицированная форма М-4 (приходный ордер)
		ТабДокумент = ПечатьМ4();
	ИначеЕсли ИмяМакета = "ОС14" тогда
		
		// Унифицированная форма М-4 (Акт о приеме оборудования)
		ТабДокумент = ПечатьОС14();
	ИначеЕсли ИмяМакета = "СправкаРасчетВал" Тогда
		
		// Справка-расчет формирования рублевой суммы документа в валюте
		БухгалтерскийУчетРасчетовСКонтрагентами.НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(Ссылка);
		Возврат;
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	СтруктураПечатныхФорм = Новый Структура;
	Если НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства) тогда
		СтруктураПечатныхФорм.Вставить("ТОРГ12",			"ТОРГ-12 (Товарная накладная за поставщика с услугами)");
		СтруктураПечатныхФорм.Вставить("ТОРГ12_БезУслуг",	"ТОРГ-12 (Товарная накладная за поставщика)");
		СтруктураПечатныхФорм.Вставить("ТОРГ4","ТОРГ-4 (Акт о приемке товара без счета поставщика)");
		СтруктураПечатныхФорм.Вставить("М4","М-4 (Приходный ордер)");
		СтруктураПечатныхФорм.Вставить("ОС14","ОС-14 (Акт о приеме оборудования)");
		СтруктураПечатныхФорм.Вставить("СправкаРасчетВал", "Справка-расчет ""Рублевая сумма документа в валюте""");
	КонецЕсли;	
	СтруктураПечатныхФорм.Вставить("Накладная", "Приходная накладная");
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента)

	Если ЗаполнятьБУ = Истина Тогда

		Если ИмяТабЧасти = "Оборудование" Тогда
			СтрокаТЧ.СчетУчета  = СчетаУчета.СчетУчета;
			СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;

		ИначеЕсли ИмяТабЧасти = "ВозвратнаяТара" Тогда
			СтрокаТЧ.СчетУчета  = СчетаУчета.СчетУчета;

		ИначеЕсли ИмяТабЧасти = "Услуги" Тогда
			СтрокаТЧ.СчетЗатрат   = СчетаУчета.СчетУчета;
			СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			СтрокаТЧ.Субконто1	 = СчетаУчета.Субконто1;
			СтрокаТЧ.Субконто2   = СчетаУчета.Субконто2;
			СтрокаТЧ.Субконто3   = СчетаУчета.Субконто3;
		Иначе
			Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
			   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
				СтрокаТЧ.СчетУчета  = СчетаУчета.СчетУчетаДоп;

			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
				СтрокаТЧ.СчетУчета  = СчетаУчета.СчетУчетаДавСырья;

			Иначе
				СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;
				
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
					СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли ЗаполнятьБУ = Ложь Тогда

		СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;

	КонецЕсли; // Если ЗаполнятьБУ = Истина Тогда

КонецПроцедуры // ЗаполнитьСчетаБУ()

// Заполняет счета НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента)

	Если ЗаполнятьНУ  = Истина Тогда
		
		Если ИмяТабЧасти = "Услуги" Тогда
			СтрокаТЧ.СчетЗатратНУ = СчетаУчета.СчетУчета;

			СтрокаТЧ.СубконтоНУ1 	= СчетаУчета.Субконто1;
			СтрокаТЧ.СубконтоНУ2   	= СчетаУчета.Субконто2;
			СтрокаТЧ.СубконтоНУ3   	= СчетаУчета.Субконто3;
		КонецЕсли;

	ИначеЕсли ЗаполнятьНУ = Ложь Тогда

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетЗатратНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетЗатратНУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;

	КонецЕсли; // Если ЗаполнятьНУ  = Истина Тогда

КонецПроцедуры // ЗаполнитьСчетаНУ()

// Заполняет счета УСН в строке табличной части.
//
Процедура ЗаполнитьСчетаУСН(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента)

	Если ЗаполнятьНУ  = Истина Тогда
		Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
			И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОтражениеВУСН", МетаданныеДокумента, ИмяТабЧасти) Тогда
				СтрокаТЧ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		Иначе
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОтражениеВУСН", МетаданныеДокумента, ИмяТабЧасти) Тогда
				СтрокаТЧ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУСН()

// Заполняет счета БУ и НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента);
	
	Если НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда
		ЗаполнитьСчетаУСН(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента);
	Иначе
		ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Заполняет счета БУ и НУ в строке табличной части Объекты строительства
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиОбъектовСтроительства(СтрокаТабЧасти, ЗаполнятьБУ) Экспорт

	СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОбъектовСтроительства(Организация, СтрокаТабЧасти.ОбъектСтроительства);

	Если ЗаполнятьБУ = Истина Тогда
		СтрокаТабЧасти.СчетУчета  = СчетаУчета.СчетУчета;
		СтрокаТабЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;

	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		СтрокаТабЧасти.СчетУчета  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТабЧасти.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиОбъектовСтроительства()

// Заполняет счета БУ и НУ в табличной части Объекты строительства
//
Процедура ЗаполнитьСчетаУчетаВТабЧастиПоОбъектамСтроительства(ТабличнаяЧасть, ЗаполнятьБУ) Экспорт

	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиОбъектовСтроительства(СтрокаТабЧасти, ЗаполнятьБУ);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧастиПоОбъектамСтроительства()

Процедура ЗаполнитьСчетаУчетаРасчетов(СчетаУчета = неопределено) Экспорт
	
    Если СчетаУчета = неопределено Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	КонецЕсли;
	
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом
	Иначе
		СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;  
	СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	СчетУчетаРасчетовПоТаре 	   = СчетаУчета.СчетУчетаТары;

КонецПроцедуры // ЗаполнитьСчетаУчетаРасчетов()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ЭтоУслуги = Ложь)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	// Вид ценностей объекта учета для данной строки
	ТаблицаТоваров.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаТоваров.Колонки.Добавить("Ценность");
	
	Если Не ЭтоУслуги И мУчетВПродажныхЦенах И (СтруктураШапкиДокумента.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный) Тогда
		
		ТаблицаТоваров.Колонки.Добавить("РозничнаяЦена");
		ТаблицаТоваров.Колонки.Добавить("УчетнаяЦена");
		
		// Установим параметры запроса
		ПорядокСубконто = Новый Массив();
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		
		МассивНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Склад",           СтруктураШапкиДокумента.Склад);
		Запрос.УстановитьПараметр("КонецПериода",    СтруктураШапкиДокумента.Дата);
		Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Подразделение",   СтруктураШапкиДокумента.ПодразделениеОрганизации);
		Запрос.УстановитьПараметр("Счет",     		 ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
		Запрос.УстановитьПараметр("Номенклатура", 	 МассивНоменклатуры);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
		|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет, &ПорядокСубконто, Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL) И Субконто1 В (&Номенклатура) И Субконто2 = &Склад) КАК Остатки
		|
		|ГДЕ
		|	Остатки.КоличествоОстаток > 0 
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Субконто1
		|";
		
		ТаблицаУчетныхЦен = Запрос.Выполнить().Выгрузить();
		ТаблицаУчетныхЦен.Индексы.Добавить("Номенклатура");

		Для Каждого Строка из ТаблицаТоваров Цикл
			СтрокаТаблицыЦен = ТаблицаУчетныхЦен.Найти(Строка.Номенклатура, "Номенклатура");
			Если НЕ СтрокаТаблицыЦен = Неопределено Тогда
				Строка.УчетнаяЦена = Окр(?(СтрокаТаблицыЦен.КоличествоОстаток = 0, 0, СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток),2,1);
			Иначе
				Строка.УчетнаяЦена = 0;
			КонецЕсли;
			Строка.РозничнаяЦена = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, СтруктураШапкиДокумента.Склад.ТипЦенРозничнойТорговли, 
															СтруктураШапкиДокумента.Дата, мВалютаРегламентированногоУчета, 1, 1);
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("Услуга") <> Неопределено Тогда 
		Для Каждого Строка из ТаблицаТоваров Цикл
			Если Строка.Услуга = NULL Тогда
				Строка.Услуга = ЭтоУслуги;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуОбъектовСтроительства(РезультатЗапросаПоОбъектамСтроительства, СтруктураШапкиДокумента)

	ТаблицаОбъектовСтроительства = РезультатЗапросаПоОбъектамСтроительства.Выгрузить();

	// Вид ценностей объекта учета для данной строки
	ТаблицаОбъектовСтроительства.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаОбъектовСтроительства.Колонки.Добавить("Ценность");
	ТаблицаОбъектовСтроительства.Колонки.Добавить("СчетУчетаЦенности");

	Возврат ТаблицаОбъектовСтроительства;

КонецФункции // ПодготовитьТаблицуОбъектовСтроительства()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация, Контрагент, ДоговорКонтрагента");

	Если Товары.Количество() + ВозвратнаяТара.Количество() + Оборудование.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;

	Если НЕ (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
	       И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
	   И НЕ (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку) Тогда

		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		
		Если ВозвратнаяТара.Количество() > 0 Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре");
		КонецЕсли;

	КонецЕсли;

	// Зачет авансов
	СтруктураОбязательныхПолей.Вставить("СпособЗачетаАвансов");
	Если (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически)
		ИЛИ (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу) Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	НТТ = (РозницаВПродажныхЦенах И (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка));
	АТТ = (РозницаВПродажныхЦенах И (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный));
	
	// Укажем, что надо проверить:
	Если НТТ Тогда
		СтруктураОбязательныхПолей = Новый Структура("СуммаВРознице");
		Если мРазделятьПоСтавкамНДС Тогда
			СтруктураОбязательныхПолей.Вставить("СтавкаНДСВРознице");
		КонецЕсли;
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	КонецЕсли;
		
	СтруктураОбязательныхПолей.Вставить("СчетУчета");

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия ИЛИ
		 СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда

		Если НЕ НТТ Тогда
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
				СтруктураОбязательныхПолей.Вставить("ОтражениеВУСН");
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия ИЛИ
		СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование)
		И (НЕ(ДоговорКонтрагента.ВидДоговора = перечисления.ВидыДоговоровКонтрагентов.СКомитентом) И
		НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС) Тогда
		ПроверятьСчетНДС = Истина;
	Иначе
		ПроверятьСчетНДС = Ложь;
	КонецЕсли;
	
	// Проверка номера ГТД и счета НДС
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Товары"": ";

		Если ПроверятьСчетНДС 
			И СтрокаТЧ.НДС <> 0
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДС) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Счет НДС""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если УправлениеЗапасами.НеУказанНомерГТД(СтрокаТЧ.НомерГТД, СтрокаТЧ.СтранаПроисхождения) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Номер ГТД""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, Заголовок);
		КонецЕсли;
		
	КонецЦикла;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если НЕ НТТ Тогда
		// Здесь услуг быть не должно.
		УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;
	
	Если АТТ Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			
			//Допустимое отклонение цены составляет цену минимальной единицы количества (0.001)
			ДопустимоеОтклонение = СтрокаТаблицы.УчетнаяЦена * 0.001;
			
			Если СтрокаТаблицы.РозничнаяЦена = 0 Тогда
				СтрокаСообщения = "Для товара """ + СтрокаТаблицы.Номенклатура + """ не установлена розничная цена.";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			ИначеЕсли СтрокаТаблицы.УчетнаяЦена = 0 Тогда
				// Учетная цена неизвестна.
			ИначеЕсли СтрокаТаблицы.РозничнаяЦена - СтрокаТаблицы.УчетнаяЦена > ДопустимоеОтклонение
				ИЛИ СтрокаТаблицы.РозничнаяЦена - СтрокаТаблицы.УчетнаяЦена < - ДопустимоеОтклонение Тогда
				СтрокаСообщения = "Для товара """ + СтрокаТаблицы.Номенклатура + """ розничная цена (" + 
									СтрокаТаблицы.РозничнаяЦена + ") не равна учетной цене(" + СтрокаТаблицы.УчетнаяЦена + ").
									|измените розничную цену или проведите переоценку.";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Сумма");

	Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	СтруктураОбязательныхПолей.Вставить("СчетЗатрат");

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетЗатратНУ");
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		СтруктураОбязательныхПолей.Вставить("ОтражениеВУСН");
	КонецЕсли;

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверка указания счета учета НДС
	ПроверятьСчетНДС = Не СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС;
	
	Если ПроверятьСчетНДС Тогда
	
		// Проверка номера ГТД и счета НДС
		Для каждого СтрокаТЧ Из ТаблицаПоУслугам Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
			                               """ табличной части ""Услуги"": ";

			Если СтрокаТЧ.НДС <> 0
				И НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДС) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет НДС""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	СтруктураОбязательныхПолей.Вставить("СчетУчета");

	// Теперь вызовем общую процедуру проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);

	Для каждого СтрокаТЧ из ТаблицаПоТаре Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Возвратная тара"": ";

		Если СтрокаТЧ.СчетУчета.Забалансовый Тогда

			СтрокаСообщения = "указан забалансовый счет!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Проверяет правильность заполнения строк табличной части "Оборудование".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОборудование(ТаблицаПоОборудованию, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	СтруктураОбязательныхПолей.Вставить("СчетУчета");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверка указания счета учета НДС
	ПроверятьСчетНДС = Не СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС;
	
	// Проверка номера ГТД и счета НДС
	Для каждого СтрокаТЧ Из ТаблицаПоОборудованию Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Оборудование"": ";
		Если ПроверятьСчетНДС 
			И СтрокаТЧ.НДС <> 0
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДС) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Счет НДС""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если УправлениеЗапасами.НеУказанНомерГТД(СтрокаТЧ.НомерГТД, СтрокаТЧ.СтранаПроисхождения) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Номер ГТД""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОборудование()

// Проверяет правильность заполнения строк табличной части "Оборудование".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОбъектыСтроительства(ТаблицаПоОбъектамСтроительства, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОбъектСтроительства, СтатьяЗатрат, Сумма");
	СтруктураОбязательныхПолей.Вставить("СчетУчета");

	Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
	КонецЕсли;

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОбъектыСтроительства", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверка указания счета учета НДС
	ПроверятьСчетНДС = Не СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС;
	
	Если ПроверятьСчетНДС Тогда
		// Проверка счета НДС
		Для Каждого СтрокаТЧ Из ТаблицаПоОбъектамСтроительства Цикл

			Если СтрокаТЧ.НДС <> 0
				И НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДС) Тогда
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
				                               """ табличной части ""Объекты строительства"": ";
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет НДС""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОбъектыСтроительства()

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства,
	ТаблицаЗачетаАвансов, 
	Отказ, Заголовок);

	Проводки = Движения.Хозрасчетный;
	
	// Проводки по взаиморасчетам
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
	   И СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		ТаблицыДокумента = Новый Структура();
		ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
		ТаблицыДокумента.Вставить("ТаблицаПоУслугам",ТаблицаПоУслугам);
		ТаблицыДокумента.Вставить("ТаблицаПоОборудованию",ТаблицаПоОборудованию);
		ТаблицыДокумента.Вставить("ТаблицаПоОбъектамСтроительства",ТаблицаПоОбъектамСтроительства);

		ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
			СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, 
			СтруктураШапкиДокумента.НДСВключенВСтоимость, Отказ, Заголовок);

		// Выполнить движения по спецрегистрам подсистемы учета НДС
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента,ТаблицаВзаиморасчетов, Отказ, Заголовок);
		
		// {УчетДоходовИРасходовИП
		ТаблицаВзаиморасчетовВрем = ТаблицаВзаиморасчетов.Скопировать();
		ДоходыИРасходыПредпринимателя.ПоступлениеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, мУчетнаяПолитика, 1, ТаблицаПоТоварам, "СчетУчета", "Номенклатура","НоменклатурнаяГруппа",, ТаблицаВзаиморасчетовВрем);
		ДоходыИРасходыПредпринимателя.ПоступлениеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, мУчетнаяПолитика, 1, ТаблицаПоУслугам, "СчетЗатрат", "Номенклатура", "Субконто", "Субконто", ТаблицаВзаиморасчетовВрем);
		ДоходыИРасходыПредпринимателя.ПоступлениеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, мУчетнаяПолитика, 1, ТаблицаПоОборудованию, "СчетУчета", "Номенклатура","НоменклатурнаяГруппа",, ТаблицаВзаиморасчетовВрем);
		// }УчетДоходовИРасходовИП
		
	Иначе
		
		ТаблицаВзаиморасчетов = Неопределено;
		
	КонецЕсли; // Проводки по взаиморасчетам
	
	// Формирование проводок
	// Проводки по поступлению товаров, тары и услуг.

	ДатаДока   = СтруктураШапкиДокумента.Дата;
	
	НТТ = (РозницаВПродажныхЦенах И (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка));
	АТТ = (РозницаВПродажныхЦенах И (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный));
	
	ВидыСубконтоСчетов = Новый Соответствие; // кэш видов субконто
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
	 или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
	 или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование 
	 или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства
	 Тогда

		// Проводки по товарам
		Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

			Проводка = Проводки.Добавить();

			Проводка.Период       = ДатаДока;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Поступление " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(СтрокаТаблицы.СчетУчета) + " по вх.д." + НомерВходящегоДокумента + " от " + Формат(ДатаВходящегоДокумента, "ДЛФ=Д");

			Проводка.СчетДт       = СтрокаТаблицы.СчетУчета;
			Если (НЕ НТТ) ИЛИ (мИспользоватьОборотнуюНоменклатуру) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура,Истина, Заголовок);
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтруктураШапкиДокумента.Склад);
			
			Если НТТ И мРазделятьПоСтавкамНДС Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  СтрокаТаблицы.СтавкаНДСВРознице);
			КонецЕсли;
					
			// Для товаров, принятых на комиссию партия прописывается всегда 
			Если (ПартионныйУчет) ИЛИ (УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаТаблицы.СчетУчета)) Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", Ссылка,, Заголовок);
			КонецЕсли;
			
			Если (Проводка.СчетДт.Количественный) Тогда
				Проводка.КоличествоДт = СтрокаТаблицы.Количество;
			КонецЕсли;

			СуммаБУ = СтрокаТаблицы.СуммаБУ;
			Если СтрокаТаблицы.СчетУчета.Забалансовый и не СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
				СуммаБУ = СуммаБУ + СтрокаТаблицы.НДС;
			КонецЕсли;
			
			Проводка.Сумма = СуммаБУ;
			
					
			// Проверка - вид Операции - комиссия
			Если СтрокаТаблицы.СчетУчета.Забалансовый Тогда

				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);

				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");
				
			Иначе

				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Ссылка);
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
				КонецЕсли;

				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					
					Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
						СуммаНУ = СтрокаТаблицы.СуммаНУ + СтрокаТаблицы.НДС;
					Иначе
						СуммаНУ = СтрокаТаблицы.СуммаНУ;
					КонецЕсли;
					
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаБУ - СуммаНУ,СуммаБУ - СуммаНУ,0,0,Проводка, мПоддержкаПБУ18); 
					
				КонецЕсли;

				// Проводки по НДС
				Содержание  = "Поступление " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(СтрокаТаблицы.СчетУчета) + " по вх.д." + НомерВходящегоДокумента + " от " + Формат(ДатаВходящегоДокумента, "ДЛФ=Д");
				ДвиженияРегистровПодсистемыНДСБУ(СтруктураШапкиДокумента, СтрокаТаблицы, Содержание, Проводки, Отказ, Заголовок);
				
			КонецЕсли;
			
			Если РозницаВПродажныхЦенах Тогда
				Если АТТ Тогда
					ТорговаяНаценка = (СтрокаТаблицы.РозничнаяЦена * СтрокаТаблицы.Количество) - СтрокаТаблицы.СуммаБУ;
					СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				Иначе
					ТорговаяНаценка = СтрокаТаблицы.СуммаВРознице - СтрокаТаблицы.СуммаБУ;
					СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				КонецЕсли;
				
				Если ТорговаяНаценка <> 0 Тогда
					Проводка = Проводки.Добавить();
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Поступление " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(СтрокаТаблицы.СчетУчета) + " по вх.д." + НомерВходящегоДокумента + " от " + Формат(ДатаВходящегоДокумента, "ДЛФ=Д");
					
					Проводка.СчетДт      = СтрокаТаблицы.СчетУчета;
					Проводка.СчетКт      = СчетНаценки;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
					
					Если (ПартионныйУчет) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Ссылка);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", Ссылка);
					КонецЕсли;
					
					Если (НЕ НТТ) ИЛИ (мИспользоватьОборотнуюНоменклатуру) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  СтрокаТаблицы.Номенклатура);
					КонецЕсли;
					Если НЕ НТТ Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  СтрокаТаблицы.Номенклатура);
					КонецЕсли;
					Если НТТ И мРазделятьПоСтавкамНДС Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  СтрокаТаблицы.СтавкаНДСВРознице);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  СтрокаТаблицы.СтавкаНДСВРознице);
					КонецЕсли;
										
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
					Проводка.Сумма       = ТорговаяНаценка;
				КонецЕсли;
			КонецЕсли;
			
			// Учет товаров по номерам ГТД
			Если УправлениеЗапасами.ЭтоИмпортныйТовар(СтрокаТаблицы.СчетУчета, СтрокаТаблицы.НомерГТД, СтрокаТаблицы.СтранаПроисхождения) Тогда
				
				Проводка = Проводки.Добавить();
				
				Проводка.Период = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Поступление " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(СтрокаТаблицы.СчетУчета) + " по вх.д." + НомерВходящегоДокумента + " от " + Формат(ДатаВходящегоДокумента, "ДЛФ=Д");

				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ГТД;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НомераГТД", СтрокаТаблицы.НомерГТД, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтраныПроисхождения", СтрокаТаблицы.СтранаПроисхождения, Истина, Заголовок);
			
				Проводка.КоличествоДт = СтрокаТаблицы.Количество;

			КонецЕсли;

			
		КонецЦикла; // Проводки по товарам

		// Проводки по таре
		Для Каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл

			// Бухгалтерский учет
			Проводка = Проводки.Добавить();
			Проводка.Период                  = ДатаДока;
			Проводка.Организация             = СтруктураШапкиДокумента.Организация;
			
			Проводка.Содержание  = "Поступление " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(СтрокаТаблицы.СчетУчета) + " по вх.д." + НомерВходящегоДокумента + " от " + Формат(ДатаВходящегоДокумента, "ДЛФ=Д");
			Проводка.Сумма                   = СтрокаТаблицы.СуммаБУ;
			
			Проводка.СчетДт                  = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура,Истина, Заголовок);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтруктураШапкиДокумента.Склад);
			
			// Для товаров, принятых на комиссию партия прописывается всегда 
			Если (ПартионныйУчет) ИЛИ (УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаТаблицы.СчетУчета)) Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", Ссылка, Истина, Заголовок);
			КонецЕсли;

			Если (Проводка.СчетДт.Количественный) Тогда
				Проводка.КоличествоДт = СтрокаТаблицы.Количество;
			КонецЕсли;

			// Проверка - вид Операции - комиссия
			Если СтрокаТаблицы.СчетУчета.Забалансовый Тогда

				Если НЕ (СтрокаТаблицы.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты ,"ВидСубконто") = Неопределено) Тогда
					Проводка.СубконтоДт.Контрагенты = СтруктураШапкиДокумента.Контрагент;
				КонецЕсли;

				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");
				
			Иначе

				Проводка.СчетКт                  = СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);

				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла; // Проводки по таре

		// Проводки по услугам - только при покупке.
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
			ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование 
			ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства
			Тогда

			Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
				
				СодержаниеПроводки = СтрокаТаблицы.Содержание + " по вх.д." + СтруктураШапкиДокумента.НомерВходящегоДокумента 
					+ " от " + Формат(СтруктураШапкиДокумента.ДатаВходящегоДокумента, "ДЛФ=Д");
				
				Проводка = Проводки.Добавить();
				
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = СодержаниеПроводки;
				Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
				
				Проводка.СчетДт          = СтрокаТаблицы.СчетЗатрат;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаТаблицы.ПодразделениеЗатрат, "Дт");
				
				Если НЕ СтрокаТаблицы.СчетЗатрат.Забалансовый Тогда
					
					Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
					
					БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Кт");
					
					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
					КонецЕсли;
					
				Конецесли;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					
					Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
						СуммаНУ = СтрокаТаблицы.СуммаНУ + СтрокаТаблицы.НДС;
					Иначе
						СуммаНУ = СтрокаТаблицы.СуммаНУ;
					КонецЕсли;
					
					НалоговыйУчет.СоздатьПроводкиПоРазнымСчетамБУиНУ(
						СтруктураШапкиДокумента, Проводки, Проводка, Заголовок, СуммаНУ, 
						СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы.СубконтоНУ1, СтрокаТаблицы.СубконтоНУ2, СтрокаТаблицы.СубконтоНУ3);
					
				КонецЕсли;
		
				// Проводка по НДС
				ДвиженияРегистровПодсистемыНДСБУ(СтруктураШапкиДокумента, СтрокаТаблицы, СодержаниеПроводки, Проводки, Отказ, Заголовок);

			КонецЦикла;

		КонецЕсли; // Проводки по услугам

		// Проводки по поступлению ОС
		Для каждого СтрокаТаблицы Из ТаблицаПоОборудованию Цикл

			Проводка = Проводки.Добавить();

			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
		    Проводка.Содержание  = "Приобретение оборудования по вх.д." + НомерВходящегоДокумента + " от " + Формат(ДатаВходящегоДокумента, "ДЛФ=Д");
			Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;

			Проводка.СчетДт      = СтрокаТаблицы.СчетУчета;
			Если (Проводка.СчетДт.Количественный) Тогда
				Проводка.КоличествоДт = СтрокаТаблицы.Количество;
			КонецЕсли;

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура",СтрокаТаблицы.Номенклатура,Истина);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",СтруктураШапкиДокумента.Склад);
			Если ПартионныйУчет Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии",СтруктураШапкиДокумента.Ссылка);
			КонецЕсли;

			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент, Истина);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",Ссылка);

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
			КонецЕсли;
			
			// Налоговый учет
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
				Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
					СуммаНУ = СтрокаТаблицы.СуммаНУ + СтрокаТаблицы.НДС;
				Иначе
					СуммаНУ = СтрокаТаблицы.СуммаНУ;
				КонецЕсли;
					
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
					СуммаНУ,СуммаНУ,Проводка.Сумма - СуммаНУ,Проводка.Сумма - СуммаНУ,0,0,Проводка, мПоддержкаПБУ18); 
		
			КонецЕсли;
			
			// Проводка по НДС
			Содержание  = "Приобретение оборудования по вх.д." + НомерВходящегоДокумента + " от " + Формат(ДатаВходящегоДокумента, "ДЛФ=Д");
			ДвиженияРегистровПодсистемыНДСБУ(СтруктураШапкиДокумента, СтрокаТаблицы, Содержание, Проводки, Отказ, Заголовок);

			// Учет Оборудования по номерам ГТД
			Если УправлениеЗапасами.ЭтоИмпортныйТовар(СтрокаТаблицы.СчетУчета, СтрокаТаблицы.НомерГТД, СтрокаТаблицы.СтранаПроисхождения) Тогда
					
				Проводка = Проводки.Добавить();
				
				Проводка.Период = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Приобретение оборудования по вх.д." + НомерВходящегоДокумента + " от " + Формат(ДатаВходящегоДокумента, "ДЛФ=Д");
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ГТД;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НомераГТД", СтрокаТаблицы.НомерГТД, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтраныПроисхождения", СтрокаТаблицы.СтранаПроисхождения, Истина, Заголовок);
				
				Проводка.КоличествоДт = СтрокаТаблицы.Количество;

			КонецЕсли;
            			
		КонецЦикла; // Проводки по поступлению ОС

		// Проводки по поступлению объектов строительства
		Для каждого СтрокаТаблицы Из ТаблицаПоОбъектамСтроительства Цикл

			Проводка = Проводки.Добавить();

			Проводка.Период                  = Дата;
			Проводка.Организация             = СтруктураШапкиДокумента.Организация;
		    Проводка.Содержание  = "Приобретение объекта строительства по вх.д." + НомерВходящегоДокумента + " от " + Формат(ДатаВходящегоДокумента, "ДЛФ=Д");

			Проводка.СчетДт                  = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТаблицы.ОбъектСтроительства, Истина);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТаблицы.СтатьяЗатрат);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);

			Проводка.СчетКт                  = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Ссылка);

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
			Проводка.Сумма = СтрокаТаблицы.СуммаБУ;
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
			КонецЕсли;
			
			// Налоговый учет
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
				Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
					СуммаНУ = СтрокаТаблицы.СуммаНУ + СтрокаТаблицы.НДС;
				Иначе
					СуммаНУ = СтрокаТаблицы.СуммаНУ;
				КонецЕсли;
					
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
					СуммаНУ,СуммаНУ,Проводка.Сумма - СуммаНУ,Проводка.Сумма - СуммаНУ,0,0,Проводка, мПоддержкаПБУ18); 
				
			КонецЕсли;

			// Проводки по НДС
			Содержание  = "Приобретение объекта строительства по вх.д." + НомерВходящегоДокумента + " от " + Формат(ДатаВходящегоДокумента, "ДЛФ=Д");
			ДвиженияРегистровПодсистемыНДСБУ(СтруктураШапкиДокумента, СтрокаТаблицы, Содержание, Проводки, Отказ, Заголовок);

		КонецЦикла; // Проводки по поступлению объектов строительства

	КонецЕсли;

	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);

	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, ТаблицаПоТоварам, ТаблицаПоУслугам, 
	                          ТаблицаПоОборудованию, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОборудованию,Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Возврат;
		КонецЕсли;
	    						
		//ПО РЕГИСТРУ РАСХОДОВ УСН
		Движения.РасходыПриУСН.Очистить();
		НаборДвижений = Движения.РасходыПриУСН;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		Если (НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства) И
			(НЕ (РозницаВПродажныхЦенах И (СтруктураШапкиДокумента.Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка))) Тогда
			НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаДвижений, 
									Перечисления.ВидыРасходовУСН.Номенклатура, СтруктураШапкиДокумента.ДоговорКонтрагента,
									Перечисления.СтатусыПартийУСН.Купленные, СтруктураШапкиДокумента.СуммаВключаетНДС);
		КонецЕсли;
								
		НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаДвижений, 
								Перечисления.ВидыРасходовУСН.Услуги, СтруктураШапкиДокумента.ДоговорКонтрагента,
								Перечисления.СтатусыПартийУСН.Купленные, СтруктураШапкиДокумента.СуммаВключаетНДС);
												
		//Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.РасходыПриУСН.ВыполнитьПриход();
			НаборДвижений.Записать(Истина);
		КонецЕсли;
				
		//Зачет аванса													
		НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, Новый Структура("ТаблицаРасчетов", ТаблицаВзаиморасчетов));
		
	КонецЕсли;
		
КонецПроцедуры

// Процедуры и  функции, обслуживающие зачет авансов

Функция ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ТаблицаЗачетаАвансов = ЗачетАвансов.ВыгрузитьКолонки();
	Иначе
		ТаблицаЗачетаАвансов = ЗачетАвансов.Выгрузить();
		ТаблицаЗачетаАвансов.Свернуть("ДокументАванса", "СуммаЗачета");
	КонецЕсли;
	ТаблицаЗачетаАвансов.Колонки.ДокументАванса.Имя = "ДокументРасчетов";
	ТаблицаЗачетаАвансов.Колонки.СуммаЗачета.Имя    = "СуммаВзаиморасчетов";
	
	Возврат ТаблицаЗачетаАвансов;

КонецФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если (ТаблицаЗачетаАвансов.Количество() = 0) Тогда
		
		Если СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли (ТаблицаЗачетаАвансов.Количество() = 1) 
		И (НЕ ЗначениеЗаполнено(ТаблицаЗачетаАвансов[0].ДокументРасчетов)) Тогда
	
		ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		
	Иначе
	
		СтруктураОбязательныхПолей = Новый Структура("ДокументАванса");
    	
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(
			ЭтотОбъект, "ЗачетАвансов", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НДС

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаВзаиморасчетов, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл
			УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСПредъявленномуПоставщиком(СтруктураШапкиДокумента, ТаблицаДокумента.Значение, Движения, Отказ);
			Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
				УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаДокумента.Значение, Движения, Отказ);
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	ОтразитьЗачетАванса = истина;
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл

		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;

		Если ТабЧасть.Количество()> 0 Тогда 

			Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
				УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаВзаиморасчетов, Движения, Отказ);
			КонецЕсли;
			
			ОтразитьЗачетАванса = Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
		 УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШапкиДокумента,Движения.НДСПредъявленный.Выгрузить(),Движения);
	КонецЕсли; 
	
	//////////////////////////////////////////////////////////////////////
	// При необходимости, отражаем в регистре партионного учета для НДС
    ТаблицаДвиженийНДСПартии = Движения.НДСПоПриобретеннымЦенностям;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
		и ТаблицыДокумента.Свойство("ТаблицаПоТоварам") и ТаблицыДокумента.ТаблицаПоТоварам.Количество()>0 
		Тогда
		ТаблицаДляНДСПартии = ТаблицыДокумента.ТаблицаПоТоварам.скопировать();
		УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураШапкиДокумента,ТаблицаДляНДСПартии, ТаблицаДвиженийНДСПартии, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование
		и (
		(ТаблицыДокумента.Свойство("ТаблицаПоОборудованию") и ТаблицыДокумента.ТаблицаПоОборудованию.Количество()>0)
		или (ТаблицыДокумента.Свойство("ТаблицаПоТоварам") и ТаблицыДокумента.ТаблицаПоТоварам.Количество()>0)
		)
		Тогда
		Если ТаблицыДокумента.ТаблицаПоОборудованию.Количество()>0 Тогда
			ТаблицаДляНДСПартии = ТаблицыДокумента.ТаблицаПоОборудованию.скопировать();
			УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураШапкиДокумента,ТаблицаДляНДСПартии, ТаблицаДвиженийНДСПартии, Отказ);
		КонецЕсли; 
		Если ТаблицыДокумента.ТаблицаПоТоварам.Количество()>0 Тогда
			ТаблицаДляНДСПартии = ТаблицыДокумента.ТаблицаПоТоварам.скопировать();
			УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураШапкиДокумента,ТаблицаДляНДСПартии, ТаблицаДвиженийНДСПартии, Отказ);
		КонецЕсли; 
	КонецЕсли; 
	// При необходимости, отражаем в регистре партионного учета для НДС
	//////////////////////////////////////////////////////////////////////
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ДвиженияРегистровПодсистемыНДСБУ(СтруктураШапкиДокумента, СтрокаТаблицы, Содержание, Проводки, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда

		НалоговыйАгентЗаСчетСобственныхСредств = УчетНДС.НалоговыйАгентЗаСчетСобственныхСредств(СтрокаТаблицы.ВидЦенности);
		Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость тогда
			
			Проводка = Проводки.Добавить();

			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = Содержание;
			
			Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СФПолученные", СтруктураШапкиДокумента.Ссылка,Истина, Заголовок);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент,Истина);
			
			Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные Тогда
				
				СубконтоОбСтр = СтрокаТаблицы.СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства,"ВидСубконто");
				Если СубконтоОбСтр = Неопределено Тогда
					ОбщегоНазначения.СообщитьОбОшибке("На счете затрат отсутствует вид субконто <" + Строка(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства) + ">. Субконто для счета учета НДС не может быть заполнено.",, Заголовок);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТаблицы["Субконто"+СубконтоОбСтр.НомерСтроки], Истина, Заголовок);
				КонецЕсли;
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства
				И СтрокаТаблицы.Владелец().Колонки.Найти("ОбъектСтроительства") <> Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ОбъектыСтроительства", СтрокаТаблицы.ОбъектСтроительства,Истина);
			КонецЕсли;
			
			Если Не НалоговыйАгентЗаСчетСобственныхСредств 
				Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
				// Проводка при исполнении обязанностей налогового агента
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.НДСВал;
				КонецЕсли;
			Иначе
				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
			КонецЕсли;

			Проводка.Сумма       = СтрокаТаблицы.НДС;
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
							
			// Проводки по вычету в случае упрощенного учета НДС
			Если СтруктураШапкиДокумента.УпрощенныйУчетНДС 
				И СтруктураШапкиДокумента.ПредъявленСчетФактура 
				И СтруктураШапкиДокумента.НДСПредъявленКВычету Тогда
	
				Проводка = Проводки.Добавить();
				
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = Содержание;
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НДС; //68.02
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				
				Проводка.СчетКт      = СтрокаТаблицы.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"СФПолученные", СтруктураШапкиДокумента.Ссылка, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент, Истина);
				Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные Тогда
					
					СубконтоОбСтр = СтрокаТаблицы.СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства,"ВидСубконто");
					Если СубконтоОбСтр = Неопределено Тогда
						ОбщегоНазначения.СообщитьОбОшибке("На счете затрат отсутствует вид субконто <" + Строка(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства) + ">. Субконто для счета учета НДС не может быть заполнено.",, Заголовок);
					Иначе
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "ОбъектыСтроительства", СтрокаТаблицы["Субконто"+СубконтоОбСтр.НомерСтроки], Истина, Заголовок);
					КонецЕсли;
					
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства
					И СтрокаТаблицы.Владелец().Колонки.Найти("ОбъектСтроительства") <> Неопределено Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ОбъектыСтроительства", СтрокаТаблицы.ОбъектСтроительства,Истина);
				КонецЕсли;

				Проводка.Сумма       = СтрокаТаблицы.НДС;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
			КонецЕсли;

		КонецЕсли;
		
		Если СтруктураШапкиДокумента.УчетАгентскогоНДС
			И (Не НалоговыйАгентЗаСчетСобственныхСредств 
				Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате) Тогда 

			// Нужно дополнительно сформировать проводку по начислению НДС налогового агента
			Проводка2 = Проводки.Добавить();

			Проводка2.Период          = СтруктураШапкиДокумента.Дата;
			Проводка2.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка2.Содержание      = "Начислен НДС в качестве налогового агента";

			Проводка2.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Ссылка);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка2.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка2.ВалютнаяСуммаДт = СтрокаТаблицы.НДСВал;
			КонецЕсли;
			
			Если Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
				Проводка2.СчетКт          = ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			Иначе
				Проводка2.СчетКт          = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			КонецЕсли;
			
			Проводка2.Сумма       = СтрокаТаблицы.НДС;

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка2, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НДС
//////////////////////////////////////////////////////////////////////////////////

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураШапкиДокумента)

	СтруктураПолей.Вставить("СчетУчета"     , "СчетУчета");
	
	СтруктураПолей.Вставить("СчетУчетаНДС", 	"СчетУчетаНДС");
	СтруктураПолей.Вставить("ОтражениеВУСН"  , 	"ОтражениеВУСН");
	
	Если РозницаВПродажныхЦенах = Неопределено Тогда
		Если мУчетВПродажныхЦенах = Неопределено Тогда
			Отказ = Ложь;
			мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, Организация);
			мУчетВПродажныхЦенах = Ложь;
			Если Не Отказ Тогда	
				Если (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
					мУчетВПродажныхЦенах = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		РозницаВПродажныхЦенах = ((НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
									И мУчетВПродажныхЦенах 
									И (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
									И (НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));
	КонецЕсли;
								
	Если РозницаВПродажныхЦенах Тогда
		СтруктураПолей.Вставить("СуммаВРознице", "СуммаВРознице");
		СтруктураПолей.Вставить("СтавкаНДСВРознице" , "СтавкаНДСВРознице");
	КонецЕсли;
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		СтруктураПолей.Вставить("Цена" , "Цена");
	КонецЕсли;
	// }УчетДоходовИРасходовИП

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчета", "СчетУчета");

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей, СтруктураШапкиДокумента)

	СтруктураПолей.Вставить("СчетЗатрат",   	"СчетЗатрат" );
	СтруктураПолей.Вставить("СчетУчетаНДС", 	"СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетЗатратНУ", 	"СчетЗатратНУ" );
	СтруктураПолей.Вставить("Субконто1",    	"Субконто1");
	СтруктураПолей.Вставить("Субконто2",    	"Субконто2");
	СтруктураПолей.Вставить("Субконто3",    	"Субконто3");
	СтруктураПолей.Вставить("СубконтоНУ1",  	"СубконтоНУ1");
	СтруктураПолей.Вставить("СубконтоНУ2",  	"СубконтоНУ2");
	СтруктураПолей.Вставить("СубконтоНУ3",  	"СубконтоНУ3");
	СтруктураПолей.Вставить("ОтражениеВУСН",	"ОтражениеВУСН");
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		СтруктураПолей.Вставить("Цена" , "Цена");
	КонецЕсли;
	// }УчетДоходовИРасходовИП

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиОборудованиеРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчета",  "СчетУчета");
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС, УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"           , "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"           , "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС"     , "УчетАгентскогоНДС");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидАгентскогоДоговора" , "ВидАгентскогоДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "НалоговыйАгентПоОплате", "НалоговыйАгентПоОплате");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"			   , "ВидСклада"             , "ВидСклада");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ТипЦен"              , "ЦенаВключаетНДС"       , "ЦенаВключаетНДС");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, );
	Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.УчетАгентскогоНДС) Тогда
		СтруктураШапкиДокумента.УчетАгентскогоНДС = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, ТаблицаПоУслугам, ТаблицаПоОбъектамСтроительства) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"			, "Номенклатура");
	СтруктураПолей.Вставить("Количество"  			, "Количество");
	СтруктураПолей.Вставить("Сумма"       			, "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   			, "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         			, "СуммаНДС");
	СтруктураПолей.Вставить("Услуга"      			, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"	, "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("НомерГТД"    			, "НомерГТД");
	СтруктураПолей.Вставить("СтранаПроисхождения"	, "СтранаПроисхождения");

	// Дополним полями, нужными для регл.
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураШапкиДокумента);

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");

	// Дополним полями
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей);

	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения данных 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("ПодразделениеЗатрат","ПодразделениеЗатрат");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДС");
	СтруктураПолей.Вставить("Содержание"  , "Содержание");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");

	// Дополним полями
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей, СтруктураШапкиДокумента);

	РезультатЗапросаПоУслугам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения данных 
	// по табличной части "Оборудование".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"			, "Номенклатура");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"	, "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"  			, "Количество");
	СтруктураПолей.Вставить("Сумма"       			, "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   			, "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         			, "СуммаНДС");
 	СтруктураПолей.Вставить("НомерГТД"    			, "НомерГТД");
	СтруктураПолей.Вставить("СтранаПроисхождения"	, "СтранаПроисхождения");

	// Дополним полями
	//ДополнитьСтруктуруПолейТабличнойЧастиОборудованиеУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиОборудованиеРегл(СтруктураПолей);

	РезультатЗапросаПоОборудованию = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения данных 
	// по табличной части "ОбъектСтроительства".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОбъектСтроительства", "ОбъектСтроительства");
	СтруктураПолей.Вставить("СтатьяЗатрат"       , "СтатьяЗатрат");
	СтруктураПолей.Вставить("Сумма"              , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"          , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                , "СуммаНДС");

	ДополнитьСтруктуруПолейТабличнойЧастиОборудованиеРегл(СтруктураПолей);

	РезультатЗапросаПоОбъектамСтроительства = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОбъектыСтроительства", СтруктураПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоТоварам      = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоТаре         = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	ТаблицаПоОборудованию = ПодготовитьТаблицуТоваров(РезультатЗапросаПоОборудованию, СтруктураШапкиДокумента);
	ТаблицаПоУслугам      = ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, Истина);
	ТаблицаПоОбъектамСтроительства = ПодготовитьТаблицуОбъектовСтроительства(РезультатЗапросаПоОбъектамСтроительства, СтруктураШапкиДокумента);
		
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам,               СтруктураШапкиДокумента,СтруктураШапкиДокумента.НДСВключенВСтоимость,мВалютаРегламентированногоУчета);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоОборудованию,          СтруктураШапкиДокумента,СтруктураШапкиДокумента.НДСВключенВСтоимость,мВалютаРегламентированногоУчета);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоОбъектамСтроительства, СтруктураШапкиДокумента,СтруктураШапкиДокумента.НДСВключенВСтоимость,мВалютаРегламентированногоУчета);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам              , СтруктураШапкиДокумента,СтруктураШапкиДокумента.НДСВключенВСтоимость,мВалютаРегламентированногоУчета);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТаре,                  СтруктураШапкиДокумента,СтруктураШапкиДокумента.НДСВключенВСтоимость,мВалютаРегламентированногоУчета);

КонецПроцедуры	
	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
		
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
	мРазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитика.Количество() > 0 Тогда	
		Если (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		Оборудование.Очистить();
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		ОбъектыСтроительства.Очистить();
	Иначе
		Товары.Очистить();
		ВозвратнаяТара.Очистить();
	КонецЕсли;
	
	РозницаВПродажныхЦенах = ((НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
								И мУчетВПродажныхЦенах 
								И (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
								И (НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));
								
	Если РозницаВПродажныхЦенах Тогда
		Для Каждого Строка Из Товары Цикл
			Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
				Строка.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
				Строка.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
			Иначе
				Строка.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
				Строка.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Снятие флага НДСПредъявленКВычету если не предъявлен счет-фактура
	Если (НДСВключенВСтоимость Или Не ПредъявленСчетФактура) И НДСПредъявленКВычету Тогда
		НДСПредъявленКВычету = Ложь;
	КонецЕсли;
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, ТаблицаПоУслугам, ТаблицаПоОбъектамСтроительства;
	

	РозницаВПродажныхЦенах = ((НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
								И мУчетВПродажныхЦенах 
								И (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
								И (НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));
	

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
     
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, ТаблицаПоУслугам, ТаблицаПоОбъектамСтроительства);

	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОборудование(ТаблицаПоОборудованию, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОбъектыСтроительства(ТаблицаПоОбъектамСтроительства, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Зачет авансов
	ТаблицаЗачетаАвансов = ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок);

	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
		СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента, Отказ, Заголовок);

	// Движения по документу
	ПартионныйУчет 	= УправлениеЗапасами.ВедетсяПартионныйУчет(
		ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация), "БУ");
	мПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(Организация, Дата);	

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(
			РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства, 
			ТаблицаЗачетаАвансов,
			Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураПолученный", Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьТоварыПоДоверенности(Основание)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	СУММА(ДоверенностьТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.Доверенность.Товары КАК ДоверенностьТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ((ВЫРАЗИТЬ(ДоверенностьТовары.НаименованиеТовара КАК СТРОКА(1000))) = (ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000))))
	|			И ДоверенностьТовары.ЕдиницаПоКлассификатору = Номенклатура.БазоваяЕдиницаИзмерения
	|ГДЕ
	|	ДоверенностьТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.Ссылка";
	
	ВыборкаТоваров = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаТоваров.Следующий() Цикл
		
		СтрокаТЧ = Товары.Добавить();
		
		СтрокаТЧ.Номенклатура        = ВыборкаТоваров.Номенклатура;
		СтрокаТЧ.Количество          = ВыборкаТоваров.Количество;
		СтрокаТЧ.ЕдиницаИзмерения    = СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения;
		СтрокаТЧ.Коэффициент         = 1;
		СтрокаТЧ.СтавкаНДС           = СтрокаТЧ.Номенклатура.СтавкаНДС;
		
		ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТЧ);
		
		СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
		Контрагент, ТипЦен, ДоговорКонтрагента, Дата,          ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС);
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТЧ, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 
		
		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Товары", Истина, Истина);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Доверенность") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		
		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойТипЦенПокупки");
		КонецЕсли;
		
		// Флаги включения налогов.
		УчитыватьНДС = Истина;
		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			СуммаВключаетНДС = Истина;
		Иначе
			СуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
		КонецЕсли;
		
		ЗаполнитьТоварыПоДоверенности(Основание);
		
		ЗаполнитьСчетаУчетаРасчетов();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
