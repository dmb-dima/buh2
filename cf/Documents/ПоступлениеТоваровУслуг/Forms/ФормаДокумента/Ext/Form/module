////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента;

// Хранит текущую форму подбора номенклатуры
Перем мФормаПодбораНоменклатуры;

// Хранит список видов договоров, доступных для данного документа
Перем мСписокВидовДоговоров;

//Используется для определения необходимости заполнения счетов в документе
Перем мСклад;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит значение параметра учетной политики УпрощенныйУчетНДС
Перем мУпрощенныйУчетНДС;
        
//Используется для определения необходимости открытия настроек движения после сохранения
Перем ОткрыватьНастройкуДвижений;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Услуги,ЭлементыФормы.КоманднаяПанельУслуг);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Оборудование,ЭлементыФормы.КоманднаяПанельОборудование);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОбъектыСтроительства,ЭлементыФормы.КоманднаяПанельОбъектыСтроительства);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный"),
																								ЭтотОбъект, ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка, ЭлементыФормы.ОсновнаяПанель.Страницы.СчетФактура.Видимость);
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.СчетФактура.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если (ТабличнаяЧасть = Товары) ИЛИ (ТабличнаяЧасть = Оборудование) Тогда
		СписокЗапросов.Добавить("ЦеныНоменклатуры", "Цены номенклатуры");
		СписокЗапросов.Добавить("ОстаткиНоменклатуры", "Остатки номенклатуры");
		СписокЗапросов.Добавить("ОстаткиИЦеныНоменклатуры", "Остатки и цены номенклатуры");
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		СписокЗапросов.Добавить("Услуги", "Услуги");   
		СписокЗапросов.Добавить("ЦеныУслуг", "Цены услуг");
	КонецЕсли;
	
	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбораНоменклатуры, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Истина;

	Если ТабличнаяЧасть = Товары Тогда
		
		Команда = "ПодборВТабличнуюЧастьТовары";
		Валюта  = ВалютаДокумента;
		ИмяТабличнойЧасти = "Товары";
		
	ИначеЕсли ТабличнаяЧасть = Оборудование Тогда
		
		Команда = "ПодборВТабличнуюЧастьОборудование";
		Валюта  = ВалютаДокумента;
		ИмяТабличнойЧасти = "Оборудование";
		
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		
		Команда = "ПодборВТабличнуюЧастьУслуги";
		Валюта  = ВалютаДокумента;
		ИмяТабличнойЧасти = "Услуги";
		
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			Предупреждение("Не выбран договор контрагента!");
			Возврат;
		ИначеЕсли НЕ ЗначениеЗаполнено(мТекущаяВалютаВзаиморасчетов) Тогда
			Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
			Возврат;
		КонецЕсли; 

		Команда = "ПодборВТабличнуюЧастьВозвратнаяТара";
		Валюта  = мТекущаяВалютаВзаиморасчетов;
		ИмяТабличнойЧасти = "Тара";
		
	КонецЕсли;
	
	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"              , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"   , СписокВидовПодбора);
	
	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);
	СтруктураПараметровПодбора.Вставить("Контрагент"           , Контрагент);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"   , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);
	// {ОбособленныеПодразделения
	СтруктураПараметровПодбора.Вставить("Подразделение"      , ПодразделениеОрганизации);
	// }ОбособленныеПодразделения
	
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, мФормаПодбораНоменклатуры);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, Цена;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);

	Если (Номенклатура.Услуга) И (НЕ ТабличнаяЧасть = Услуги) Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли (НЕ Номенклатура.Услуга) И (ТабличнаяЧасть = Услуги) Тогда
		Предупреждение("В данном контексте подбираются только услуги!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	Если (НЕ ТабличнаяЧасть = ВозвратнаяТара) И (НЕ ТабличнаяЧасть = Услуги)Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;
	Если ЗначениеЗаполнено(Цена) Тогда
		СтруктураОтбора.Вставить("Цена", Цена);
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		Если ТабличнаяЧасть = ВозвратнаяТара Тогда
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Иначе

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Количество;

		Если (ТабличнаяЧасть = Товары) ИЛИ (ТабличнаяЧасть = Оборудование) Тогда

			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = 1;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			//ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти);

			Если ТабличнаяЧасть = Товары Тогда
				ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", Истина, Истина);
				
				Если (НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
					И мУчетВПродажныхЦенах 
					И (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
					И (НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
					
					СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, Склад.ТипЦенРозничнойТорговли, 
					Дата, мВалютаРегламентированногоУчета, 1, 1);
					СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаВРознице;
					Если (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) и (мРазделятьПоСтавкамНДС) Тогда
						СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура, Склад);
						Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
							СтрокаТабличнойЧасти.СтавкаНДСВРознице = ?(НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетаУчета.СчетДоходов), Перечисления.СтавкиНДС.БезНДС, СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);
						КонецЕсли;
					КонецЕсли; 
				КонецЕсли;
				
			Иначе
				ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Оборудование", Истина, Истина);
			КонецЕсли;
			
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда
			
			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			//ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги", Истина, Истина);
			
			Колонки = ЭлементыФормы.Услуги.Колонки;
	
			РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатрат, 
				СтрокаТабличнойЧасти.Субконто1, Колонки.Субконто1,
				СтрокаТабличнойЧасти.Субконто2, Колонки.Субконто2,
				СтрокаТабличнойЧасти.Субконто3, Колонки.Субконто3,
				СтрокаТабличнойЧасти.ПодразделениеЗатрат, Колонки.Подразделение);
								
			Подразделение = Неопределено;
			// {ОбособленныеПодразделения
			Подразделение = ПодразделениеОрганизации;
			// }ОбособленныеПодразделения
			РаботаСДиалогами.УстановитьПодразделениеПоСчету(
			СтрокаТабличнойЧасти.ПодразделениеЗатрат, СтрокаТабличнойЧасти.СчетЗатрат, Организация, Подразделение);

			
			РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратНУ, 
				СтрокаТабличнойЧасти.СубконтоНУ1, Колонки.СубконтоНУ1,
				СтрокаТабличнойЧасти.СубконтоНУ2, Колонки.СубконтоНУ2,
				СтрокаТабличнойЧасти.СубконтоНУ3, Колонки.СубконтоНУ3);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", Истина, Истина);

		КонецЕсли;
	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	Если ТабличнаяЧасть = Товары Тогда
		ТабличнаяЧастьИмя = "Товары";
	ИначеЕсли ТабличнаяЧасть = Оборудование Тогда
		ТабличнаяЧастьИмя = "Оборудование";
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		ТабличнаяЧастьИмя = "Услуги";
	Иначе
		ТабличнаяЧастьИмя = "ВозвратнаяТара";
	КонецЕсли;
	
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()


// Функция определяет заполнена ли ТЧ в зависимости от вида операции>
//
Функция ЕстьСтрокиВТЧ()

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
		Возврат Булево(Товары.Количество() + ВозвратнаяТара.Количество() + Услуги.Количество());
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		Возврат Булево(Товары.Количество())
                             
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		Возврат Булево(Товары.Количество() + ВозвратнаяТара.Количество() + Услуги.Количество() + Оборудование.Количество());
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		Возврат Булево(Услуги.Количество() + ОбъектыСтроительства.Количество());
		
	Иначе
		Возврат Ложь;
		
	КонецЕсли;


КонецФункции // ОпределитьЗаполненаЛиТЧ()

Процедура ОпределитьСписокДоступныхВидовДоговоровПоОперации()
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Иначе
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	КонецЕсли;	
		
КонецПроцедуры

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	КонецЕсли;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Покупка", "Товары", мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	Если мТекущийДоговорКонтрагента = неопределено Тогда 
		мТекущийДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Конецесли;
	
	// Зачет авансов
	УстановитьСпособЗачетаАвансов();
	
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	
	//Проверим какие же счета будем изменять
	ЗаполнятьСчетаРасчета = Ложь; //Заполнять ли счета расчетов
	ЗадаватьВопрос	   	  = Ложь; //Если заполнять то Задавать ли вопрос о его перезаполнении 
	
	ЗаполнятьСчетаНУБУ    = Ложь; //Если заполнять надо, то Ложь - только Бу, Истина - Ну и Бу 
	ЗадаватьВопросНУБУ    = Ложь; //Заполнять ли счета Ну или Бу
	
	Если ПоказыватьВДокументахСчетаУчета Тогда
		
		СтруктураОбязательныхПолей = Новый Структура;
		СтруктураНеОбязательныхПолей = Новый Структура;	
		
		Если ВозвратнаяТара.Количество() > 0 Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре", СчетаУчета.СчетУчетаТары);
		КонецЕсли;
				
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетовСКомитентом);			
		Иначе
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетов);			
		КонецЕсли;  
		
		БухгалтерскийУчет.ПроверитьНеобходимостьПерезаполненияСчетовУчета(ЭтотОбъект, СтруктураОбязательныхПолей,СтруктураНеОбязательныхПолей, ЗадаватьВопрос, ЗаполнятьСчетаРасчета);
		
		Если (ДоговорКонтрагента.ВидДоговора<>мТекущийДоговорКонтрагента.ВидДоговора)И ЕстьСтрокиВТЧ() Тогда
			
			ЗадаватьВопросНУБУ   = Истина;			 			
			
			Если НЕ НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда
				ЗаполнятьСчетаНУБУ = Истина;
						
			КонецЕсли;
						
		КонецЕсли;
		
		
		Если (ЗадаватьВопрос ИЛИ ЗадаватьВопросНУБУ) Тогда
			
			Ответ = Вопрос("Установить "+?(ЗаполнятьСчетаРасчета,"счета учета расчетов"+?(ЗадаватьВопросНУБУ," и счета",""),"")
			+?(ЗадаватьВопросНУБУ," учета ","")
			+" в соответствии со значениями по умолчанию?", 
			РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета при смене договора");
			
 			Если Ответ = КодВозвратаДиалога.Нет Тогда
				ЗаполнятьСчетаРасчета = Ложь;
				ЗаполнятьСчетаНУБУ = Ложь;
			Иначе  
				ЗаполнятьСчетаНУБУ = ЗадаватьВопросНУБУ;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЗаполнятьСчетаРасчета     = Истина;
        ЗаполнятьСчетаНУБУ 		  = Истина;  
		
	КонецЕсли;
						
	Если ЗаполнятьСчетаНУБУ Тогда
		ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , Истина, Истина);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", Истина, Истина);
		ЗаполнитьСчетаУчетаВТабЧасти(Оборудование  , "Оборудование"  , Истина, Истина);
		ЗаполнитьСчетаУчетаВТабЧастиПоОбъектамСтроительства(ОбъектыСтроительства, Истина);
	КонецЕсли;

	Если ЗаполнятьСчетаРасчета Тогда		
		ЗаполнитьСчетаУчетаРасчетов(СчетаУчета);
	КонецЕсли;
	
	ЗаполнитьТекстПроСчетФактуру();

	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает текущую страницу панели по виду операции документа.
//
Процедура УстановитьТекущуюСтраницуОсновнойПанели()

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
	 Или ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда

		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Товары;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда

		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Оборудование;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда

		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ОбъектыСтроительства;

	КонецЕсли;

КонецПроцедуры // УстановитьТекущуюСтраницуОсновнойПанели()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость(ИзмененСклад = Неопределено)

	РозницаВПродажныхЦенах = ((НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
								И мУчетВПродажныхЦенах 
								И (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
								И (НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));
								
	ЭтоНТТ = (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	
	ЭтоУСН       	= НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	УСНДоходы 		= НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	Предприниматель = ОбщегоНазначения.Предприниматель(Организация, Дата);
	
	ЭтоПереработка = (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
	
	ЭтоКомиссия = (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
		И (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	Колонки      = ЭлементыФормы.Товары.Колонки;
	КолонкиУслуг = ЭлементыФормы.Услуги.Колонки;
	КолонкиТара  = ЭлементыФормы.ВозвратнаяТара.Колонки;
	КолонкиОС    = ЭлементыФормы.Оборудование.Колонки;
	КолонкиОбС   = ЭлементыФормы.ОбъектыСтроительства.Колонки;

	Если ЭтоНТТ И РозницаВПродажныхЦенах Тогда
		
		Если НЕ (ИзмененСклад = Неопределено) Тогда
			
			Ответ = Вопрос("Свернуть табличную часть по номенклатуре?",	РежимДиалогаВопрос.ДаНет, , , "Свертка по номенклатуре");
			
			Для Каждого Строка Из Товары Цикл
				Если Строка.ЦенаВРознице = 0 Тогда				
					Строка.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, Склад.ТипЦенРозничнойТорговли, Дата, мВалютаРегламентированногоУчета, 1, 1);
					Строка.СуммаВРознице = Строка.Количество * Строка.ЦенаВРознице;
				КонецЕсли;
				Если мРазделятьПоСтавкамНДС Тогда
					Если НЕ ЗначениеЗаполнено(Строка.СтавкаНДСВРознице) Тогда
						СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, Строка.Номенклатура, Склад);
						Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
							Строка.СтавкаНДСВРознице = ?(НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетаУчета.СчетДоходов), Перечисления.СтавкиНДС.БезНДС, Строка.Номенклатура.СтавкаНДС);
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ТаблицаТоваров = Товары.Выгрузить();
				ТаблицаТоваров.Свернуть("СтавкаНДС, ОтражениеВУСН, СтавкаНДСВРознице", "Сумма, СуммаНДС, СуммаВРознице");
				Товары.Очистить();
				Товары.Загрузить(ТаблицаТоваров);
				
				Колонки.ЦенаВРознице.Видимость      = Ложь;
				Колонки.СуммаВРознице.Видимость     = ЭтоНТТ;
				Колонки.СтавкаНДСВРознице.Видимость = мРазделятьПоСтавкамНДС;
				
				Колонки.Номенклатура.Видимость = Ложь;
				Колонки.Количество.Видимость   = Ложь;
				Колонки.Цена.Видимость         = Ложь;
				
				Колонки.Номенклатура.ИзменятьВидимость = Истина;
				Колонки.Количество.ИзменятьВидимость   = Истина;
				Колонки.Цена.ИзменятьВидимость         = Истина;

			Иначе
				
				Колонки.ЦенаВРознице.Видимость      = Истина;
				Колонки.СуммаВРознице.Видимость     = ЭтоНТТ;
				Колонки.СтавкаНДСВРознице.Видимость = мРазделятьПоСтавкамНДС;
				
				Колонки.Номенклатура.Видимость = Истина;
				Колонки.Количество.Видимость   = Истина;
				Колонки.Цена.Видимость         = Истина;
				
				Колонки.Номенклатура.ИзменятьВидимость = Истина;
				Колонки.Количество.ИзменятьВидимость   = Истина;
				Колонки.Цена.ИзменятьВидимость         = Истина;
				
			КонецЕсли; 
		Иначе
			Если Товары.Количество() > 0 Тогда
				ПоказыватьНоменклатуру = ЗначениеЗаполнено(Товары[0].Номенклатура);
			Иначе
				ПоказыватьНоменклатуру = Колонки.Номенклатура.Видимость; 
			КонецЕсли;
			
			Колонки.ЦенаВРознице.Видимость      = ПоказыватьНоменклатуру И ЭтоНТТ;
			Колонки.СуммаВРознице.Видимость     = ЭтоНТТ;
			Колонки.СтавкаНДСВРознице.Видимость = мРазделятьПоСтавкамНДС;
			
			Колонки.Номенклатура.Видимость = ПоказыватьНоменклатуру;
			Колонки.Количество.Видимость   = ПоказыватьНоменклатуру;
			Колонки.Цена.Видимость         = ПоказыватьНоменклатуру;
			
			Колонки.Номенклатура.ИзменятьВидимость = Истина;
			Колонки.Количество.ИзменятьВидимость   = Истина;
			Колонки.Цена.ИзменятьВидимость         = Истина;
		КонецЕсли;
		
	Иначе
		Колонки.ЦенаВРознице.Видимость      = Ложь;
		Колонки.СуммаВРознице.Видимость     = Ложь;
		Колонки.СтавкаНДСВРознице.Видимость = Ложь;
		
		Колонки.Номенклатура.Видимость = Истина;
		Колонки.Количество.Видимость   = Истина;
		Колонки.Цена.Видимость         = Истина;
		
	КонецЕсли;
	
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ДействиеПодбор.Доступность = Колонки.Номенклатура.Видимость;
	
	// Колонки налога показываем только тогда.Видимость = когда его учитываем.
	Колонки.СтавкаНДС.Видимость      = УчитыватьНДС;
	КолонкиУслуг.СтавкаНДС.Видимость = УчитыватьНДС;
	КолонкиОС.СтавкаНДС.Видимость    = УчитыватьНДС;
	КолонкиОбС.СтавкаНДС.Видимость   = УчитыватьНДС;

	Колонки.СуммаНДС.Видимость      = УчитыватьНДС;
	КолонкиУслуг.СуммаНДС.Видимость = УчитыватьНДС;
	КолонкиОС.СуммаНДС.Видимость    = УчитыватьНДС;
	КолонкиОбС.СуммаНДС.Видимость   = УчитыватьНДС;

	Колонки.Всего.Видимость      = УчитыватьНДС;
	КолонкиУслуг.Всего.Видимость = УчитыватьНДС;
	КолонкиОС.Всего.Видимость    = УчитыватьНДС;
	КолонкиОбС.Всего.Видимость   = УчитыватьНДС;
	
	Колонки.СчетУчетаНДС.Видимость = ПоказыватьВДокументахСчетаУчета И НЕ ЭтоПереработка И НЕ ЭтоКомиссия И УчитыватьНДС И НЕ РозницаВПродажныхЦенах;
	Колонки.СчетУчета.Видимость  = ПоказыватьВДокументахСчетаУчета И НЕ РозницаВПродажныхЦенах;

	КолонкиТара.СчетУчета.Видимость = ПоказыватьВДокументахСчетаУчета;

	КолонкиУслуг.СчетУчетаНДС.Видимость   = ПоказыватьВДокументахСчетаУчета И НЕ ЭтоПереработка И УчитыватьНДС И НЕ НДСВключенВСтоимость;
	
	КолонкиУслуг.СчетЗатратНУ.Видимость = НЕ ЭтоУСН И НЕ Предприниматель;
	КолонкиУслуг.СубконтоНУ1.Видимость  = НЕ ЭтоУСН И НЕ Предприниматель;
	КолонкиУслуг.СубконтоНУ2.Видимость  = НЕ ЭтоУСН И НЕ Предприниматель;
	КолонкиУслуг.СубконтоНУ3.Видимость  = НЕ ЭтоУСН И НЕ Предприниматель;
	
	КолонкиОС.СчетУчетаНДС.Видимость = ПоказыватьВДокументахСчетаУчета И НЕ ЭтоПереработка И НЕ ЭтоКомиссия И УчитыватьНДС И НЕ НДСВключенВСтоимость;
	КолонкиОС.СчетУчета.Видимость  = ПоказыватьВДокументахСчетаУчета;

	КолонкиОбС.СчетУчетаНДС.Видимость = ПоказыватьВДокументахСчетаУчета И НЕ ЭтоПереработка И НЕ ЭтоКомиссия И УчитыватьНДС И НЕ НДСВключенВСтоимость;
	КолонкиОбС.СчетУчета.Видимость  = ПоказыватьВДокументахСчетаУчета;

	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость = ПоказыватьВДокументахСчетаУчета;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость     = ((НЕ ЭтоКомиссия) И (НЕ ЭтоПереработка)) ИЛИ (НЕ Услуги.Количество() = 0);
	
	ИспользоватьВозвратнуюТару = ?(ВозвратнаяТара.Количество() = 0, Константы.ИспользоватьВозвратнуюТару.Получить(), Истина);
	
	ЭлементыФормы.СчетУчетаРасчетовПоТаре.Видимость            = ПоказыватьВДокументахСчетаУчета И ИспользоватьВозвратнуюТару И НЕ ЭтоПереработка;
	ЭлементыФормы.НадписьСчетУчетаРасчетовПоТаре.Видимость     = ПоказыватьВДокументахСчетаУчета И ИспользоватьВозвратнуюТару И НЕ ЭтоПереработка;
	
	Колонки.ОтражениеВУСН.Видимость      = ЭтоУСН И НЕ УСНДоходы И НЕ (ЭтоНТТ И РозницаВПродажныхЦенах);
	КолонкиУслуг.ОтражениеВУСН.Видимость = ЭтоУСН И НЕ УСНДоходы;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		Если ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость Тогда
			ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость = НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.ГиперссылкаСчетФактура.Доступность  = НЕ ЭтоПереработка;
	
	Если ЭтоПереработка Тогда
		Колонки.НомерГТД.Видимость            = Ложь;
		Колонки.СтранаПроисхождения.Видимость = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.СкладОрдер.Видимость   = НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);
	ЭлементыФормы.НадписьСклад.Видимость = НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);
	
	// Закладка Счет-фактура
	ЭлементыФормы.НадписьДатаВходящегоСчетаФактуры.Видимость = ПредъявленСчетФактура;
	ЭлементыФормы.НадписьНомерВходящегоСчетаФактуры.Видимость = ПредъявленСчетФактура;
	ЭлементыФормы.ДатаВходящегоСчетаФактуры.Видимость = ПредъявленСчетФактура;
	ЭлементыФормы.НомерВходящегоСчетаФактуры.Видимость = ПредъявленСчетФактура;
	ЭлементыФормы.НДСПредъявленКВычету.Видимость = Не НДСВключенВСтоимость И ПредъявленСчетФактура и мУпрощенныйУчетНДС;
	
	// Зачет авансов
	
	ЗачетАвансовВозможен = НЕ (ЭтоКомиссия ИЛИ ЭтоПереработка);
	
	ЭлементыФормы.СпособЗачетаАвансов.Доступность = ЗачетАвансовВозможен;
	
	ЗачетПоДокументу   = ЗачетАвансовВозможен И (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу);
	ЗачетАвтоматически = ЗачетАвансовВозможен И (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
	
	ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Доступность        = ЗачетПоДокументу ИЛИ ЗачетАвтоматически;
	ЭлементыФормы.НадписьСчетУчетаРасчетовПоАвансам.Доступность = ЗачетПоДокументу ИЛИ ЗачетАвтоматически;
	
	ЭлементыФормы.СчетУчетаРасчетовПоАвансам.АвтоОтметкаНезаполненного = ЗачетПоДокументу ИЛИ ЗачетАвтоматически;
	Если НЕ (ЗачетПоДокументу ИЛИ ЗачетАвтоматически) Тогда
		ЭлементыФормы.СчетУчетаРасчетовПоАвансам.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ЗачетАвансов.Видимость = ЗачетПоДокументу;
	Если СписокДокументовАванса Тогда
		ЭлементыФормы.ПанельЗачетАвансов.ТекущаяСтраница = ЭлементыФормы.ПанельЗачетАвансов.Страницы.СписокАвансов;
	Иначе
		ЭлементыФормы.ПанельЗачетАвансов.ТекущаяСтраница = ЭлементыФормы.ПанельЗачетАвансов.Страницы.ОдинАванс;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьНДСДокумента(ЭтотОбъект));

	// Зачет авансов
	Если ЗачетАвансов.Найти(0, "СуммаЗачета") <> Неопределено Тогда
		ЭлементыФормы.ВсегоЗачетАвансов.Значение = "<Авто>";
	Иначе
		ЭлементыФормы.ВсегоЗачетАвансов.Значение = ОбщегоНазначения.ФорматСумм(ЗачетАвансов.Итог("СуммаЗачета"));
	КонецЕсли;
	
	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента, 
	                                                                               ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
	                                                                               ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
	                                                                               мВалютаРегламентированногоУчета) + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

// Процедура управляет доступностью колонок субконто в табличной части услуги
Процедура УстановитьДоступностьСубконто(СтрокаТЧ)

	Колонки = ЭлементыФормы.Услуги.Колонки;
	ТекущиеДанные = ЭлементыФормы.Услуги.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТЧ) Тогда
		Возврат;
	КонецЕсли;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекущиеДанные.СчетЗатрат,
		ТекущиеДанные.Субконто1, Колонки.Субконто1,
		ТекущиеДанные.Субконто2, Колонки.Субконто2,
		ТекущиеДанные.Субконто3, Колонки.Субконто3,
		ТекущиеДанные.ПодразделениеЗатрат, Колонки.Подразделение,
		Колонки.СчетЗатрат, Ложь);
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекущиеДанные.СчетЗатратНУ,
		ТекущиеДанные.СубконтоНУ1, Колонки.СубконтоНУ1,
		ТекущиеДанные.СубконтоНУ2, Колонки.СубконтоНУ2,
		ТекущиеДанные.СубконтоНУ3, Колонки.СубконтоНУ3,
		, ,
		Колонки.СчетЗатратНУ, Ложь);

КонецПроцедуры // УстановитьДоступностьСубконто()

// Процедура управляет автоотметкой незаполенного поля "Склад" в зависимости
// от наличия строк в ТЧ Товары и Тара.
Процедура УстановитьАвтоотметкуНезаполненногоСклада()
	
	ТребуетсяУказатьСклад = (Товары.Количество() > 0) 
	                        ИЛИ (ВозвратнаяТара.Количество() > 0)
	                        ИЛИ (Оборудование.Количество() > 0);
	
	ЭлементыФормы.СкладОрдер.АвтоОтметкаНезаполненного = ТребуетсяУказатьСклад;
	ЭлементыФормы.СкладОрдер.ОтметкаНезаполненного     = ТребуетсяУказатьСклад И Склад.Пустая();
	
КонецПроцедуры // УстановитьАвтоотметкуНезаполненногоСклада()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		РаботаСДиалогами.ВыбратьВидОперации(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Покупка",ПараметрОбъектКопирования);

		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			УчитыватьНДС         = Ложь;
			СуммаВключаетНДС     = Ложь;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ЗаполнитьСчетаУчетаРасчетов();
		КонецЕсли;
		
	КонецЕсли;
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
	мРазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитика.Количество() > 0 Тогда	
		Если (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
            
	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата, мУчетнаяПолитика);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("СчетУчета");

	// Установить ограничение - изменять видимость колонок для табличной части 
	// "Возвратная тара".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ВозвратнаяТара.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ОтражениеВУСН");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Очистить();
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("СчетЗатрат");
	СтруктураКолонок.Вставить("Субконто1");
	СтруктураКолонок.Вставить("Субконто2");
	СтруктураКолонок.Вставить("Субконто3");
	СтруктураКолонок.Вставить("СчетЗатратНУ");
	СтруктураКолонок.Вставить("СубконтоНУ1");
	СтруктураКолонок.Вставить("СубконтоНУ2");
	СтруктураКолонок.Вставить("СубконтоНУ3");
	СтруктураКолонок.Вставить("СчетУчетаНДС");
	СтруктураКолонок.Вставить("ОтражениеВУСН");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Услуги.Колонки, СтруктураКолонок);
	
	СтруктураКолонок.Очистить();
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("СчетУчета");
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("СчетУчетаНДС");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Оборудование.Колонки, СтруктураКолонок);
	
	//// Установить колонки, видимостью которых пользователь управлять не может.
	//СтруктураКолонок.Вставить("ОбъектСтроительства");
	//
	//ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ОбъектыСтроительства.Колонки, СтруктураКолонок);
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                    ВидОперации.Метаданные().ЗначенияПеречисления,
	                                    Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Определить счет-фактуру, введенный на основании этого документа, если такой 
	// счет-фактура существует.
	ЗаполнитьТекстПроСчетФактуру();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
    // }ОбособленныеПодразделения
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = 
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
	 	ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование 
	 	ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);

	ЭлементыФормы.ОсновнаяПанель.Страницы.Оборудование.Видимость = 
		ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ОбъектыСтроительства.Видимость = 
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);

	мСклад = Склад;

	ОпределитьСписокДоступныхВидовДоговоровПоОперации();

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Зачет авансов
	Если ЗачетАвансов.Количество() > 0 Тогда
		ЭлементыФормы.ЗачетАвансов.ТекущаяСтрока       = ЗачетАвансов[0];
		ЭлементыФормы.ТабПолеСуммыЗачета.ТекущаяСтрока = ЗачетАвансов[0];
	КонецЕсли;
	СписокДокументовАванса = (ЗачетАвансов.Количество() > 1);
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость =
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость
		И (ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства)
	  	И (ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = 
		(ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);
	
	// Установим текущую страницу.
	УстановитьТекущуюСтраницуОсновнойПанели();

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Оборудование",	"Оборудование");
	Страницы.Добавить("ОбъектыСтроительства",	"ОбъектыСтроительства");
	Страницы.Добавить("Товары",	"Товары");
	Страницы.Добавить("Услуги",	"Услуги");
	Страницы.Добавить("Тара",	"ВозвратнаяТара");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);

	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,ПодразделениеОрганизации,СкладОрдер,Контрагент,ДоговорКонтрагента");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница,Страницы);

	
    // Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	ИначеЕсли ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" Тогда
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			Если Параметр.Найти(Ссылка) <> Неопределено Тогда
				ЗаполнитьТекстПроСчетФактуру();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	УстановитьАвтоотметкуНезаполненногоСклада();
	
	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Тара.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
	СтраницаПанели.Оборудование.Заголовок = "Оборудование (" + ДокументОбъект.Оборудование.Количество() + " поз.)";
	СтраницаПанели.ОбъектыСтроительства.Заголовок = "Объекты строительства (" + ДокументОбъект.ОбъектыСтроительства.Количество() + " поз.)";
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		СтраницаПанели.Товары.Заголовок = "Материалы ("   + ДокументОбъект.Товары.Количество() + " поз.)";
	Иначе
		СтраницаПанели.Товары.Заголовок = "Товары ("      + ДокументОбъект.Товары.Количество() + " поз.)";
		СтраницаПанели.Услуги.Заголовок = "Услуги ("      + ДокументОбъект.Услуги.Количество() + " поз.)";
	КонецЕсли;
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьОборудование" Тогда
			ОбработкаПодбора(Оборудование, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	ЗаполнитьТекстПроСчетФактуру();
	         
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельОборудованиеДействиеПодбор(Кнопка)

	ДействиеПодбор(Оборудование);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)

	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// группового изменения значений реквизитов табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект       = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента      = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС             = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице    = (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	
	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	СтруктураРеквизитовДокумента.Вставить("НДСВключенВСтоимость");
	СтруктураЗапрещенных = Неопределено;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
	 ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	 
	 	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
			СтруктураЗапрещенных = Новый Структура("НДСВключенВСтоимость");
		Иначе
			СтруктураЗапрещенных = Новый Структура("НДСВключенВСтоимость, УчитыватьНДС, СуммаВключаетНДС");
		КонецЕсли;

	КонецЕсли;

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураЗапрещенных, "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, СтруктураЗапрещенных, "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	ПредыдущийВидОперации=ВидОперации; //Сохраним пред. вид операции для его сравнения с новым
	
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг[Кнопка.Имя];
	КонецЕсли;
	
	//Если операция не поменялась то выходим
	Если  ПредыдущийВидОперации = ВидОперации Тогда 
		Возврат;
    КонецЕсли;
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);
	
	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость =
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость
		И (ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства)
		И (ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);

	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = 
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия) 
	 	ИЛИ (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование)
	 	ИЛИ (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);

	ЭлементыФормы.ОсновнаяПанель.Страницы.Оборудование.Видимость = 
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование);
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ОбъектыСтроительства.Видимость = 
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);

	// Установим текущую страницу.
	УстановитьТекущуюСтраницуОсновнойПанели();

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда

		ЭлементыФормы.ГиперссылкаСчетФактура.Доступность     = Ложь;
		
		// Очистим реквизиты счетов в табличных частях.
		ПустойБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

		Для каждого Строка Из Товары Цикл
			Строка.СчетУчетаНДС = ПустойБУ;
		КонецЦикла;

		ВозвратнаяТара.Очистить();

		НДСВключенВСтоимость    = Истина;
		УчитыватьНДС            = Ложь;
		СуммаВключаетНДС        = Ложь;
		
	Иначе

		Если Не УчитыватьНДС Тогда

			НДСВключенВСтоимость    = Ложь;
			УчитыватьНДС            = Истина;
			СуммаВключаетНДС        = Истина;

		КонецЕсли;

	КонецЕсли;

	//Сохраним предыдущий вид Договора для его сравнения с новым	
	ПредыдущийВидДоговора=ДоговорКонтрагента.ВидДоговора; 
	
	ОпределитьСписокДоступныхВидовДоговоровПоОперации();
	
	// Проверить текущий договор
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И мСписокВидовДоговоров.НайтиПоЗначению(ДоговорКонтрагента.ВидДоговора) = Неопределено Тогда
		ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	// Зачет авансов
	УстановитьСпособЗачетаАвансов();
	
	Если (мУчетВПродажныхЦенах) 
		И (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
		И (НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
		И (НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		//Для поступления в розницу по продажным ценам счета не указываем
	Иначе		
	
		Если ПоказыватьВДокументахСчетаУчета Тогда
			
			//Проверим какие же счета будем изменять
			ЗаполнятьСчетаНУБУ    = Ложь; //Если заполнять надо, то Ложь - только Бу, Истина - Ну и Бу 
			ЗадаватьВопросНУБУ    = Ложь; //Заполнять ли счета Ну или Бу
			
			ПокупкаКомиссия = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
			ДогСКомитентом = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
			
			ЭтотКомиссияСКомитентом = ((ДоговорКонтрагента.ВидДоговора = ДогСКомитентом)И(ВидОперации=ПокупкаКомиссия));
			ПредКомиссияСКомитентом = ((ПредыдущийВидДоговора = ДогСКомитентом)И(ПредыдущийВидОперации=ПокупкаКомиссия));
			ЭтотВПереработку = (ВидОперации			  = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
			ПредВПереработку = (ПредыдущийВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
			
			Если ЕстьСтрокиВТЧ() 
				И ((ЭтотКомиссияСКомитентом ИЛИ ЭтотВПереработку) 
					ИЛИ ((НЕ(ЭтотКомиссияСКомитентом ИЛИ ЭтотВПереработку))И(ПредКомиссияСКомитентом ИЛИ ПредВПереработку))) Тогда

				ЗадаватьВопросНУБУ    = Истина;
				
				Если НЕ НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда
					ЗаполнятьСчетаНУБУ = Истина;
				КонецЕсли;
				
					
			КонецЕсли;
			
			Если ЗадаватьВопросНУБУ Тогда
				Ответ = Вопрос("Установить счета бухгалтерского учета в соответствии со значениями по умолчанию?", 
				РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета при смене вида операции");
				
			Иначе
				
				Ответ = КодВозвратаДиалога.Нет;
				
			КонецЕсли
			
		Иначе
			
			Ответ = КодВозвратаДиалога.Да;
			
		КонецЕсли;
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , Истина, Истина);
			ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", Истина, Истина);
			ЗаполнитьСчетаУчетаВТабЧасти(Оборудование  , "Оборудование"  , Истина, Истина);
			ЗаполнитьСчетаУчетаВТабЧастиПоОбъектамСтроительства(ОбъектыСтроительства, Истина);
			
		КонецЕсли;	
	КонецЕсли;

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();


КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	//Открывает форму движений документа для ручного редактирования
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Если НачалоМесяца(мТекущаяДатаДокумента) <> НачалоМесяца(Дата) Тогда
		мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата, мУчетнаяПолитика);
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	УстановитьВидимость();
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Перем ПодразделениеУслуг;
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
	мРазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитика.Количество() > 0 Тогда	
		Если (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;
	мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата, мУчетнаяПолитика);
	
	УстановитьВидимость();

	Для Каждого СтрокаУслуги Из Услуги Цикл
		
		// {ОбособленныеПодразделения
		ПодразделениеУслуг = ПодразделениеОрганизации;
		// }ОбособленныеПодразделения
		РаботаСДиалогами.УстановитьПодразделениеПоСчету(
			СтрокаУслуги.ПодразделениеЗатрат, СтрокаУслуги.СчетЗатрат, Организация, ПодразделениеУслуг);
		
	КонецЦикла;
		
 	КонтрагентПриИзменении(Элемент);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект,мСписокВидовДоговоров);

	// Могли поменять договор.
	ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Склад
//
Процедура СкладОрдерПриИзменении(Элемент)

	// {ОбособленныеПодразделения
	ПодразделениеОрганизации = УправлениеПодразделениями.ПолучитьПодразделение(Организация, Склад);
	// }ОбособленныеПодразделения
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость(Истина);

	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;

	Если Не ЕстьСтрокиВТЧ() Тогда
		Возврат;
	КонецЕсли;

	Если мСклад = Элемент.Значение Тогда
		Возврат;
	КонецЕсли;

	Если (мУчетВПродажныхЦенах) 
		И (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
		И (НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
		И (НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		//Для поступления в розницу по продажным ценам счета не указываем
	Иначе
		
		Если ПоказыватьВДокументахСчетаУчета ИЛИ Услуги.Количество()>0 Тогда
			//Проверим какие же счета будем изменять
			ЗаполнятьСчетаНУБУ    = Ложь; //Если заполнять надо, то Ложь - только Бу, Истина - Ну и Бу
			
			Если НЕ НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда
				ЗаполнятьСчетаНУБУ = Истина;
			КонецЕсли;
			
			Ответ = Вопрос("Установить счета учета в соответствии со значениями по умолчанию?", 
			РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета при смене склада");
			
		Иначе
			
			Ответ = КодВозвратаДиалога.Да;
			
		КонецЕсли;
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , Истина, Истина);
			ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", Истина, Истина);
			ЗаполнитьСчетаУчетаВТабЧасти(Оборудование  , "Оборудование"  , Истина, Истина);
			ЗаполнитьСчетаУчетаВТабЧасти(Услуги        , "Услуги"        , Истина, Истина);
			ЗаполнитьСчетаУчетаВТабЧастиПоОбъектамСтроительства(ОбъектыСтроительства, Истина);
		КонецЕсли;
	КонецЕсли;

	мСклад = Склад;


КонецПроцедуры // СкладОрдерПриИзменении()
 
// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;
    ОпределитьСписокДоступныхВидовДоговоровПоОперации();
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента, мСписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураПолученный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода
// "СчетУчетаРасчетовСКонтрагентом".
//
Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода
// "СчетУчетаРасчетовПоАвансам".
//
Процедура СчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода
// "СчетУчетаРасчетовПоТаре".
//
Процедура СчетУчетаРасчетовПоТареОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

Процедура ПредъявленСчетФактураПриИзменении(Элемент)
	
	Если ПредъявленСчетФактура Тогда
		СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный", Новый Структура("ПометкаУдаления",Ложь),Ссылка);
		Если ЗначениеЗаполнено(СчетФактура) И ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			Ответ = Вопрос("Для указания данных счета-фактуры требуется пометить на удаление подчиненный документ <" + СчетФактура + ">. Пометить документ на удаление?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
				СчетФактураОбъект.ДокументОснование = Неопределено;
				СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СчетФактураОбъект.УстановитьПометкуУдаления(Истина);
			Иначе
				ПредъявленСчетФактура = Ложь;			
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если мУпрощенныйУчетНДС Тогда
		НДСПредъявленКВычету = ПредъявленСчетФактура;
	КонецЕсли;
	
	ЗаполнитьТекстПроСчетФактуру();
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего" и "ЕдиницаХранения".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));

	КонецЕсли;

	ОформлениеСтроки.Ячейки.СчетУчетаНДС.ОтметкаНезаполненного = (УчитыватьНДС И Не НДСВключенВСтоимость И ДанныеСтроки.СуммаНДС <> 0 И Не ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДС));
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);

	ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТЧ);

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект); 

	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                           Контрагент, ТипЦен, ДоговорКонтрагента, Дата,          ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС);

	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТЧ, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Товары", Истина, Истина);

	Если (НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
		 И мУчетВПродажныхЦенах 
		 И (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
		 И (НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		 
		СтрокаТЧ.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТЧ.Номенклатура, Склад.ТипЦенРозничнойТорговли, 
														Дата, мВалютаРегламентированногоУчета, 1, 1);
		СтрокаТЧ.СуммаВРознице = СтрокаТЧ.Количество * СтрокаТЧ.ЦенаВРознице;
		Если (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) и (мРазделятьПоСтавкамНДС) Тогда
			СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				СтрокаТЧ.СтавкаНДСВРознице = ?(НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетаУчета.СчетДоходов), Перечисления.СтавкиНДС.БезНДС, СтрокаТЧ.Номенклатура.СтавкаНДС);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	
	Если (НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
		 И мУчетВПродажныхЦенах 
		 И (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
		 И (НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		 
		СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
		СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаВРознице;
	КонецЕсли;

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаВРознице;
	
КонецПроцедуры


// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, 1);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, 1);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);


КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, 1);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура"
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 

	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
											   Контрагент, ТипЦен, ДоговорКонтрагента, Дата,          ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС);

	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, 1);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги", Истина, Истина);

	Колонки = ЭлементыФормы.Услуги.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатрат, 
		СтрокаТабличнойЧасти.Субконто1, Колонки.Субконто1,
		СтрокаТабличнойЧасти.Субконто2, Колонки.Субконто2,
		СтрокаТабличнойЧасти.Субконто3, Колонки.Субконто3,
		СтрокаТабличнойЧасти.ПодразделениеЗатрат, Колонки.Подразделение);
		
	Подразделение = Неопределено;
	// {ОбособленныеПодразделения
	Подразделение = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	РаботаСДиалогами.УстановитьПодразделениеПоСчету(
		СтрокаТабличнойЧасти.ПодразделениеЗатрат, СтрокаТабличнойЧасти.СчетЗатрат, Организация, Подразделение);
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратНУ, 
		СтрокаТабличнойЧасти.СубконтоНУ1, Колонки.СубконтоНУ1,
		СтрокаТабличнойЧасти.СубконтоНУ2, Колонки.СубконтоНУ2,
		СтрокаТабличнойЧасти.СубконтоНУ3, Колонки.СубконтоНУ3);
								
КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Услуги". Формирует данные в колонке "ЕдиницаИзмерения".
//
Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.Услуги.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));
	КонецЕсли;

	УправлениеПроизводством.НастроитьВидимостьЯчеекАналитикиЗатрат(ДанныеСтроки.СчетЗатрат, ДанныеСтроки.СчетЗатратНУ, ОформлениеСтроки, Истина, Истина);

	ОформлениеСтроки.Ячейки.СчетУчетаНДС.ОтметкаНезаполненного = (УчитыватьНДС И Не НДСВключенВСтоимость И ДанныеСтроки.СуммаНДС <> 0 И Не ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДС));
	
КонецПроцедуры // УслугиПриВыводеСтроки()

// Процедура заполняет счет налогового учета на основании счета и аналитики бухгалтерского учета.
//
Процедура ЗаполнитьСчетНалоговогоУчета(ИзменениеСубконто = Ложь)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	Колонки = ЭлементыФормы.Услуги.Колонки;
	СтрокаТабличнойЧасти.СчетЗатратНУ = СтрокаТабличнойЧасти.СчетЗатрат;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратНУ,
		СтрокаТабличнойЧасти.СубконтоНУ1, Колонки.СубконтоНУ1,
		СтрокаТабличнойЧасти.СубконтоНУ2, Колонки.СубконтоНУ2,
		СтрокаТабличнойЧасти.СубконтоНУ3, Колонки.СубконтоНУ3);

КонецПроцедуры // ЗаполнитьСчетНалоговогоУчета()

// Процедура - обработчик события "ПриИзменении" табличной части
// "Услуги". Формирует данные в колонке "СчетУчетаНУ".
//
Процедура УслугиСчетУчетаБУПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	Колонки = ЭлементыФормы.Услуги.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение, 
		СтрокаТабличнойЧасти.Субконто1, Колонки.Субконто1,
		СтрокаТабличнойЧасти.Субконто2, Колонки.Субконто2,
		СтрокаТабличнойЧасти.Субконто3, Колонки.Субконто3,
		СтрокаТабличнойЧасти.ПодразделениеЗатрат, Колонки.Подразделение);
								
	Подразделение = Неопределено;
	// {ОбособленныеПодразделения
	Подразделение = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	РаботаСДиалогами.УстановитьПодразделениеПоСчету(
		СтрокаТабличнойЧасти.ПодразделениеЗатрат, СтрокаТабличнойЧасти.СчетЗатрат, Организация, Подразделение);
	
	ЗаполнитьСчетНалоговогоУчета();

КонецПроцедуры // УслугиСчетУчетаБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Услуги".
//
Процедура УслугиСубконто1ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 1, СтрокаТЧ.Субконто1, СтрокаТЧ.СубконтоНУ1);
	
КонецПроцедуры // УслугиСубконто1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Услуги".
//
Процедура УслугиСубконто2ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 2, СтрокаТЧ.Субконто2, СтрокаТЧ.СубконтоНУ2);
	
КонецПроцедуры // УслугиСубконто2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Услуги".
//
Процедура УслугиСубконто3ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 3, СтрокаТЧ.Субконто3, СтрокаТЧ.СубконтоНУ3);
	
КонецПроцедуры // УслугиСубконто3ПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "Услуги".
//
Процедура УслугиСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "Услуги".
//
Процедура УслугиСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

Процедура УслугиСчетУчетаНУПриИзменении(Элемент)

	ТекущиеДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
	Колонки = ЭлементыФормы.Услуги.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		ТекущиеДанные.СубконтоНУ1, Колонки.СубконтоНУ1,
		ТекущиеДанные.СубконтоНУ2, Колонки.СубконтоНУ2,
		ТекущиеДанные.СубконтоНУ3, Колонки.СубконтоНУ3);
	
КонецПроцедуры // УслугиСчетУчетаНУПриИзменении()

Процедура УслугиПриАктивизацииСтроки(Элемент)

	УстановитьДоступностьСубконто(Элемент.ТекущиеДанные);

КонецПроцедуры // УслугиПриАктивизацииСтроки()

// Процедура - обработчик события "НачалоВыбора" поля ввода Субконто
// в строке табличной части "Прочее".
//
Процедура СубконтоНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = ПараметрыНеобходимыеДляВыбораСубконто(Элемент, "Бух");
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СубконтоНУ
// в строке табличной части "Прочее".
//
Процедура СубконтоНУНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = ПараметрыНеобходимыеДляВыбораСубконто(Элемент, "Нал");
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

Функция ПараметрыНеобходимыеДляВыбораСубконто(Элемент, Учет = "Бух")

	// Если тип выбираемого субконто - Партия, то создадим 
	// структуру дополнительных параметров.

	СписокПараметров = Новый Структура;
	ДанныеТекущейСтроки = ЭлементыФормы.Услуги.ТекущиеДанные;
    СписокПараметров.Вставить("ЭтоНовыйДокумент",ЭтоНовый());

	Если Элемент.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения  Тогда

		СписокПараметров.Вставить("Дата", Дата);

		Если Учет = "Бух" Тогда
			СписокПараметров.Вставить("СчетУчета",    ДанныеТекущейСтроки.СчетЗатрат);
			СписокПараметров.Вставить("Номенклатура", УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Номенклатура", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3));
			СписокПараметров.Вставить("Склад",        УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Склады",       ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3));

		ИначеЕсли Учет = "Нал" Тогда
			СписокПараметров.Вставить("СчетУчета",    ДанныеТекущейСтроки.СчетЗатратНУ);
			СписокПараметров.Вставить("Номенклатура", УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Номенклатура", ДанныеТекущейСтроки.СубконтоНУ1, ДанныеТекущейСтроки.СубконтоНУ2, ДанныеТекущейСтроки.СубконтоНУ3));
			СписокПараметров.Вставить("Склад",        УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Склады",       ДанныеТекущейСтроки.СубконтоНУ1, ДанныеТекущейСтроки.СубконтоНУ2, ДанныеТекущейСтроки.СубконтоНУ3));

		КонецЕсли;

	Иначе // Тип выбираемого субконто - не Партия.
		СписокПараметров.Вставить("Контрагент",   ДанныеТекущейСтроки.Субконто1);
	КонецЕсли;

	Возврат СписокПараметров;

КонецФункции // ПараметрыНеобходимыеДляВыбораСубконто()

Процедура УслугиСчетЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(СтрокаТабличнойЧасти, ЭтотОбъект); 

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", Истина, Истина);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.ВозвратнаяТара.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ОБОРУДОВАНИЕ

// Процедура - обработчик события "ПриВыводеСтроки" 
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Оборудование.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));
	КонецЕсли;

	ОформлениеСтроки.Ячейки.СчетУчетаНДС.ОтметкаНезаполненного = (УчитыватьНДС И Не НДСВключенВСтоимость И ДанныеСтроки.СуммаНДС <> 0 И Не ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДС));
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Оборудование.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект );

	ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти);
	
	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                           Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Оборудование", Истина, Истина)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеЕдиницаИзмеренияПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Оборудование.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СтавкиНДС
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры


// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ОБЪЕКТЫ СТРОИТЕЛЬСТВА

// Процедура - обработчик события "ПриВыводеСтроки" 
// в строке табличной части "Оборудование".
//
Процедура ОбъектСтроительстваПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ОбъектыСтроительства.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));
	КонецЕсли;

	ОформлениеСтроки.Ячейки.СчетУчетаНДС.ОтметкаНезаполненного = (УчитыватьНДС И Не НДСВключенВСтоимость И ДанныеСтроки.СуммаНДС <> 0 И Не ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДС));
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ОбъектСтроительства
// в строке табличной части "ОбъектыСтроительства".
//
Процедура ОбъектСтроительстваПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ОбъектыСтроительства.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиОбъектовСтроительства(СтрокаТабличнойЧасти, Истина)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "ОбъектыСтроительства".
//
Процедура ОбъектСтроительстваСуммаПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.ОбъектыСтроительства.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СтавкиНДС
// в строке табличной части "ОбъектыСтроительства".
//
Процедура ОбъектСтроительстваСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.ОбъектыСтроительства.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры


// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "ОбъектыСтроительства".
//
Процедура ОбъектСтроительстваСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "ОбъектыСтроительства".
//
Процедура ОбъектСтроительстваСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ТоварыОтражениеВУСННачалоВыбора(Элемент, СтандартнаяОбработка)
	Если Элемент.ДоступныеЗначения.Количество() = 0 Тогда
		Элемент.ДоступныеЗначения.Добавить(Перечисления.ОтражениеВУСН.Принимаются);
		Элемент.ДоступныеЗначения.Добавить(Перечисления.ОтражениеВУСН.НеПринимаются);
	КонецЕсли;
КонецПроцедуры


// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// {ОбособленныеПодразделения
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()
// }ОбособленныеПодразделения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ОБСЛУЖИВАЮЩИЕ ЗАЧЕТ АВАНСОВ

Процедура УстановитьСпособЗачетаАвансов()

	Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку)
		ИЛИ (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		СчетУчетаРасчетовПоАвансам = Неопределено;
	Иначе 
		СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовПоАвансам) Тогда
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
				Организация, Контрагент, ДоговорКонтрагента);
			СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
		КонецЕсли;
	КонецЕсли;
	
	ЗачетАвансов.Очистить();
	СписокДокументовАванса = Ложь;

КонецПроцедуры

Процедура СпособЗачетаАвансовПриИзменении(Элемент)
	
	СчетУчетаРасчетовПоАвансам = Неопределено;
	ЗачетАвансов.Очистить();
	СписокДокументовАванса = Ложь;
	
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически
		ИЛИ СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
			Организация, Контрагент, ДоговорКонтрагента);
		СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
		
	КонецЕсли;
		
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ЗачетАвансов.Добавить();
		ЭлементыФормы.ЗачетАвансов.ТекущаяСтрока       = ЗачетАвансов[0];
		ЭлементыФормы.ТабПолеСуммыЗачета.ТекущаяСтрока = ЗачетАвансов[0];
	КонецЕсли;
	
	УстановитьВидимость();
	
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ЗачетАвансов;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокДокументовАвансаПриИзменении(Элемент)
	
	Если НЕ СписокДокументовАванса И ЗачетАвансов.Количество() > 1 Тогда

		ТекстВопроса = "Все строки зачета авансов, кроме первой, будут удалены.
		|Продолжить?";

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ <> КодВозвратаДиалога.Да Тогда
			СписокДокументовАванса = Истина;
			Возврат;
		КонецЕсли;

		Пока ЗачетАвансов.Количество() > 1 Цикл
			ЗачетАвансов.Удалить(ЗачетАвансов.Количество() - 1);
		КонецЦикла;
        
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДокументАвансаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка  = Ложь;

	СтруктураПараметров   = Новый Структура;
	СтруктураПараметров.Вставить("Организация",                Организация);
	СтруктураПараметров.Вставить("Контрагент",                 Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",         ДоговорКонтрагента);
	СтруктураПараметров.Вставить("КонецПериода",               Дата-1);
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СчетУчетаРасчетовПоАвансам);
	СтруктураПараметров.Вставить("СторонаСчета",               "Дт");
	СтруктураПараметров.Вставить("ЭтоНовыйДокумент",           ЭтоНовый());
	СтруктураПараметров.Вставить("РежимОтбораДокументов",      Перечисления.РежимОтбораДокументов.ПоОстаткам);

	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(
		СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти.ЗачетАвансов.Реквизиты.ДокументАванса.Тип);

КонецПроцедуры

Процедура ДокументАвансаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ЗачетАвансов.ТекущиеДанные;
	ТекДанные.СуммаЗачета = 0;
	
КонецПроцедуры

Процедура ЗачетАвансовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	
		Если ОформлениеСтроки.ДанныеСтроки.СуммаЗачета = 0 Тогда
		
			ОформлениеСтроки.Ячейки.СуммаЗачета.Текст = "<Авто>";
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////
