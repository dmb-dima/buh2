Перем НП;

Процедура ПриОткрытии()

	// Если даты не заполнены, то период устанавливается по умолчанию
	Если НЕ ЗначениеЗаполнено(КонПериода) и не мПереданИнтервал = Истина Тогда
		КонПериода = КонецМесяца(ТекущаяДата());
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(НачПериода) и не мПереданИнтервал = Истина Тогда
		НачПериода = НачалоМесяца(КонПериода);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РежимОтбораДокументов) Тогда
		
		СохранятьРежимОтбораДокументов = ВосстановитьЗначение("ДокДокументРасчетовСКонтрагентамиПодбор_СохранятьРежимОтбораДокументов");
		ФормироватьСписокПриОткрытии   = ВосстановитьЗначение("ДокДокументРасчетовСКонтрагентамиПодбор_ФормироватьСписокПриОткрытии");
		
		Если СохранятьРежимОтбораДокументов тогда
			РежимОтбораДокументов = ВосстановитьЗначение("ДокДокументРасчетовСКонтрагентамиПодбор_РежимОтбораДокументов");
		Иначе
			РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоРеквизитам;
		КонецЕсли;
		
	Иначе
		
		СохранятьРежимОтбораДокументов = Ложь;
		ФормироватьСписокПриОткрытии   = Истина;
		ЭлементыФормы.СохранятьРежимОтбораДокументов.Видимость = Ложь;
		ЭлементыФормы.ФормироватьСписокПриОткрытии.Видимость   = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(мТипыДокументов) тогда
		Если ЭтаФорма.ВладелецФормы = Неопределено Тогда
			мТипыДокументов = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения;
		ИначеЕсли ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("ПолеВвода") Тогда
			Если НЕ ЭтаФорма.ВладелецФормы.ОграничениеТипа.Типы().Количество() = 0 тогда
				мТипыДокументов = ЭтаФорма.ВладелецФормы.ОграничениеТипа;
			Иначе
				Попытка
					мТипыДокументов = ЭтаФорма.ВладелецФормы.ТипЗначения;
				Исключение
					мТипыДокументов = Новый ОписаниеТипов("ДокументСсылка.ДокументРасчетовСКонтрагентом");
				КонецПопытки;
			КонецЕсли;
		Иначе
			мТипыДокументов = Новый ОписаниеТипов("ДокументСсылка.ДокументРасчетовСКонтрагентом");
		КонецЕсли;
	КонецЕсли;
	
	УправлениеВидимостью(); 

	НП = Новый НастройкаПериода;
	
	Если ТипЗнч(Счет) = Тип("Неопределено") тогда
		Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();		
	КонецЕсли;
	
	Если ФормироватьСписокПриОткрытии тогда
		ОбновитьСписок();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Если ЭлементыФормы.СохранятьРежимОтбораДокументов.Видимость Тогда
	
		СохранитьЗначение( "ДокДокументРасчетовСКонтрагентамиПодбор_СохранятьРежимОтбораДокументов", СохранятьРежимОтбораДокументов);
		СохранитьЗначение( "ДокДокументРасчетовСКонтрагентамиПодбор_ФормироватьСписокПриОткрытии",   ФормироватьСписокПриОткрытии);
		СохранитьЗначение( "ДокДокументРасчетовСКонтрагентамиПодбор_РежимОтбораДокументов",          ?(СохранятьРежимОтбораДокументов, РежимОтбораДокументов,Перечисления.РежимОтбораДокументов.ПоРеквизитам));
	
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеВидимостью()

	ДоступностьСчета = (РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОборотам 
					или РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОстаткам);
					
	ЭлементыФормы.НадписьСчет.Доступность			= ДоступностьСчета;
	ЭлементыФормы.Счет.Доступность					= ДоступностьСчета;
	ЭлементыФормы.НадписьОстаткиОбороты.Доступность	= ДоступностьСчета;
	ЭлементыФормы.ОстаткиОборотыДт.Доступность      = ДоступностьСчета;
	ЭлементыФормы.ОстаткиОборотыКт.Доступность      = ДоступностьСчета;
	
	
	Если РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОборотам Тогда
		ЭлементыФормы.НадписьОстаткиОбороты.Заголовок = "Обороты:";
		ЭтаФорма.ЭлементыФормы.ТаблицаДокументов.Колонки.Остаток.Видимость = Истина;
		ЭтаФорма.ЭлементыФормы.ТаблицаДокументов.Колонки.Остаток.ТекстШапки = "Оборот";
		ЭтаФорма.ЭлементыФормы.ТаблицаДокументов.Колонки.Документ.Видимость = Ложь;

	ИначеЕсли РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОстаткам Тогда
	    ЭлементыФормы.НадписьОстаткиОбороты.Заголовок = "Остатки:";
		ЭтаФорма.ЭлементыФормы.ТаблицаДокументов.Колонки.Остаток.ТекстШапки = "Остаток";
		ЭтаФорма.ЭлементыФормы.ТаблицаДокументов.Колонки.Остаток.Видимость = Истина;
		ЭтаФорма.ЭлементыФормы.ТаблицаДокументов.Колонки.Документ.Видимость = Ложь;
			
	Иначе
		ЭлементыФормы.НадписьОстаткиОбороты.Заголовок = "Ост./Об.:";
		ЭтаФорма.ЭлементыФормы.ТаблицаДокументов.Колонки.Остаток.Видимость = Ложь;
		ЭтаФорма.ЭлементыФормы.ТаблицаДокументов.Колонки.Документ.Видимость = Ложь;
	
	КонецЕсли; 

КонецПроцедуры

Процедура РежимОтбораДокументовПриИзменении()

	УправлениеВидимостью();
	
КонецПроцедуры

Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	НП.УстановитьПериод(НачПериода, КонПериода);

	Если НП.Редактировать() Тогда

		НачПериода = НП.ПолучитьДатуНачала();
		КонПериода = НП.ПолучитьДатуОкончания();
	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

Процедура ОбновитьСписок() Экспорт

	Если РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОборотам Тогда
		ПодборПоОборотам();
	ИначеЕсли РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОстаткам Тогда
		ПодборПоОстаткам();
	Иначе
		ПодборПоРеквизитам();
	КонецЕсли;

КонецПроцедуры

Процедура ОграничениеСпискаДокументовПоТипу(Результат)

	СтрокиКУдалению = новый Массив();
	Результат.Колонки.Добавить("Сумма");
	Результат.Колонки.Добавить("Дата");
	Результат.Колонки.Добавить("Номер");
	Результат.Колонки.Добавить("ДатаВходящегоДокумента");
	Результат.Колонки.Добавить("НомерВходящегоДокумента");
	Результат.Колонки.Добавить("Проведен");
	Результат.Колонки.Добавить("ПометкаУдаления");
	Результат.Колонки.Добавить("ВидДокумента");
	Результат.Колонки.Добавить("ВидОперации");
	Результат.Колонки.Добавить("Валюта");
	Результат.Колонки.Добавить("Ответственный");
	
	Для каждого СтрокаВыборки из Результат Цикл

		Если (не мТипыДокументов.СодержитТип(ТипЗнч(СтрокаВыборки.Документ))) или НЕ ЗначениеЗаполнено(СтрокаВыборки.Документ) тогда
			СтрокиКУдалению.Добавить(СтрокаВыборки);
		Иначе
			МД_Документа = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаВыборки.Документ));
			СтрокаВыборки.Сумма=?(ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаДокумента",МД_Документа),СтрокаВыборки.Документ.СуммаДокумента, Null);
			СтрокаВыборки.Дата=СтрокаВыборки.Документ.Дата;
			СтрокаВыборки.Номер=СтрокаВыборки.Документ.Номер;
			СтрокаВыборки.ДатаВходящегоДокумента=?(ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаВходящегоДокумента",МД_Документа),СтрокаВыборки.Документ.ДатаВходящегоДокумента, Null);
			СтрокаВыборки.НомерВходящегоДокумента=?(ОбщегоНазначения.ЕстьРеквизитДокумента("НомерВходящегоДокумента",МД_Документа),СтрокаВыборки.Документ.НомерВходящегоДокумента, Null);
			СтрокаВыборки.Проведен=СтрокаВыборки.Документ.Проведен;
			СтрокаВыборки.ПометкаУдаления=СтрокаВыборки.Документ.ПометкаУдаления;
			СтрокаВыборки.ВидДокумента=МД_Документа.Представление();
			СтрокаВыборки.ВидОперации=?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации",МД_Документа),СтрокаВыборки.Документ.ВидОперации,Null);
			СтрокаВыборки.Валюта=?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента",МД_Документа),СтрокаВыборки.Документ.ВалютаДокумента,Null);
			СтрокаВыборки.Ответственный=?(ОбщегоНазначения.ЕстьРеквизитДокумента("Ответственный",МД_Документа),СтрокаВыборки.Документ.Ответственный,Null);
		КонецЕсли;

	КонецЦикла;

	Для каждого СтрокаВыборки из СтрокиКУдалению Цикл
		Результат.Удалить(СтрокаВыборки);
	КонецЦикла;

КонецПроцедуры

Процедура ПодборПоРеквизитам()

	ТаблицаДокументов.Очистить();

	//Формирование текста запроса
	Если ЗначениеЗаполнено(Организация) тогда
		УсловиеЗапросаОрганизация = " и Док.Организация = &Организация ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) тогда
		УсловиеЗапросаКонтрагент = " и Док.Контрагент = &Контрагент ";
		УсловиеЗапросаКонтрагентКорректировкаДолга = " и (Док.КонтрагентДебитор = &Контрагент ИЛИ Док.КонтрагентКредитор = &Контрагент)";
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Для каждого ТипДокумента Из мТипыДокументов.Типы() Цикл
		МД_Документа = Метаданные.НайтиПоТипу(ТипДокумента);
		Если не ПустаяСтрока(УсловиеЗапросаОрганизация) и МД_Документа.Реквизиты.Найти("Организация")=Неопределено Тогда
			//В документе нет поля "Организация". Отбор по документу не производим.
			Продолжить;
		КонецЕслИ;
	
		Если не ПустаяСтрока(УсловиеЗапросаКонтрагент) и  МД_Документа.Реквизиты.Найти("Контрагент")=Неопределено
			И Не МД_Документа.Имя = "КорректировкаДолга" Тогда
			//В документе нет поля "Контрагент" и это не КорректировкаДолга.  Отбор по документу не производим.
			Продолжить;
		КонецЕсли;
		
		Если не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса +"
			|
			| Объединить 
			|";
		КонецЕсли; 
		ТекстЗапроса = ТекстЗапроса +  "ВЫБРАТЬ" + ?(ПустаяСтрока(ТекстЗапроса), " РАЗРЕШЕННЫЕ","") + "
		|	Док.Ссылка КАК Документ "
		+?(ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаДокумента",МД_Документа),", Док.СуммаДокумента КАК Сумма",", Null КАК Сумма")
		+", Док.Дата КАК Дата"
		+", Док.Номер КАК Номер"
		+", Док.Проведен КАК Проведен"	
		+", Док.ПометкаУдаления КАК ПометкаУдаления"			
		+", """+МД_Документа.Представление()+""" КАК ВидДокумента"
		+?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации",МД_Документа),", Док.ВидОперации КАК ВидОперации",", Null КАК ВидОперации")
		+?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента",МД_Документа),", Док.ВалютаДокумента КАК Валюта",", Null КАК Валюта")
		+?(ОбщегоНазначения.ЕстьРеквизитДокумента("Ответственный",МД_Документа),", Док.Ответственный КАК Ответственный",", Null КАК Ответственный")
		+?(ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаВходящегоДокумента",МД_Документа),", Док.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента",", Null КАК ДатаВходящегоДокумента")
		+?(ОбщегоНазначения.ЕстьРеквизитДокумента("НомерВходящегоДокумента",МД_Документа),", Док.НомерВходящегоДокумента КАК НомерВходящегоДокумента",", Null КАК НомерВходящегоДокумента")
		+" 
		| ИЗ 	
		|	Документ."+МД_Документа.Имя+" КАК Док 
		| Где
		|	(Док.Дата >= &НачПериода "+?(НЕ ЗначениеЗаполнено(КонПериода),""," И Док.Дата <= &КонПериода")+") ";
		
			
		ТекстЗапроса = ТекстЗапроса +  УсловиеЗапросаОрганизация;
		ТекстЗапроса = ТекстЗапроса +  ?(МД_Документа.Имя = "КорректировкаДолга", 
											УсловиеЗапросаКонтрагентКорректировкаДолга, 
											УсловиеЗапросаКонтрагент);
	
	КонецЦикла; 
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",			НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("КонПериода",			КонПериода);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Контрагент",			Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить();
	//Результат.Свернуть("Документ, Сумма","");
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		МассивПоДоговору = КритерииОтбора.ДокументыПоДоговоруКонтрагента.Найти(ДоговорКонтрагента);
		ДокументыПоДоговору = Новый СписокЗначений;
		ДокументыПоДоговору.ЗагрузитьЗначения(МассивПоДоговору);
		
		СтрокиКУдалению = Новый Массив;
		Для каждого СтрокаТаблицы Из Результат Цикл
			Если ДокументыПоДоговору.НайтиПоЗначению(СтрокаТаблицы.Документ) = Неопределено Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла;
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			Результат.Удалить(СтрокаКУдалению);
		КонецЦикла; 
	КонецЕсли; 

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Результат,ТаблицаДокументов);
	ТаблицаДокументов.Сортировать("Дата, Документ", Новый СравнениеЗначений);

КонецПроцедуры

Процедура ПодборПоОборотам()

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Для выбора по оборотам необходимо указать организацию!");
		Возврат;
	КонецЕсли; 
	
	ТаблицаДокументов.Очистить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",  НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("КонПериода",  КонПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	УсловиеЗапроса = "Организация = &Организация";
	
	ЕстьРасчетныеДокументы = Ложь;
	ОпределениеДокументаСделки = "";
	ВидыСубконто = Новый Массив;
	
	ИспользованоСубконто = 0; 
	
	ИмяРегистра = "Хозрасчетный";
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ИспользованоСубконто = ИспользованоСубконто+1;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		УсловиеЗапроса = УсловиеЗапроса+ " и Субконто"+ИспользованоСубконто+" = &Контрагент";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ИспользованоСубконто = ИспользованоСубконто+1;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		УсловиеЗапроса = УсловиеЗапроса+ " и Субконто"+ИспользованоСубконто+" = &ДоговорКонтрагента";
	КонецЕсли;
	Если ЗначениеЗаполнено(Счет) Тогда
		Если не Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто")= Неопределено Тогда
			ИспользованоСубконто = ИспользованоСубконто+1;
			ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
			ЕстьРасчетныеДокументы = Истина;
			ОпределениеДокументаСделки = "Выборка.Субконто"+ИспользованоСубконто+" как Документ";
		КонецЕсли;
	КонецЕсли;
	
	РежимОпределенияОборотов = "Период";
	Если не ЕстьРасчетныеДокументы тогда
		РежимОпределенияОборотов = "Регистратор";
		ОпределениеДокументаСделки = "Выборка.Регистратор как Документ";
	КонецЕсли;

	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);

	Если ЗначениеЗаполнено(Счет) Тогда
		Запрос.УстановитьПараметр("Счет", Счет);
		УсловиеВыбораСчетаВТекстеЗапроса = "Счет В ИЕРАРХИИ(&Счет)";

	Иначе
		УсловиеВыбораСчетаВТекстеЗапроса = "";

	КонецЕсли;

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	"+ОпределениеДокументаСделки+",
	|	Выборка.СуммаОборот"+?(ОстаткиОбороты=1,"Кт","Дт")+" Как Оборот,
	|	Выборка.СуммаКонечныйОстаток"+?(ОстаткиОбороты=1,"Кт","Дт")+" Как Остаток
	|ИЗ
	|	РегистрБухгалтерии." + ИмяРегистра + ".ОстаткиИОбороты(&НачПериода,&КонПериода,"+РежимОпределенияОборотов+",, "+ УсловиеВыбораСчетаВТекстеЗапроса + ", &ВидыСубконто, " + УсловиеЗапроса + ") КАК Выборка
	|Где Не(Выборка.СуммаОборот"+?(ОстаткиОбороты=1,"Кт","Дт")+"=0)
	|";

	Результат = Запрос.Выполнить().Выгрузить();

	//При отсутствии расчетных документов необходимо дополнить список ручными документами по контрагенту
	Если НЕ ЕстьРасчетныеДокументы тогда
		//Преопределение типов для колонки "Документ" (т.к. в типе только регистраторы, а РД не проводится).
		СписокДокументов = Результат.ВыгрузитьКолонку("Документ");
		Результат.Колонки.Удалить(Результат.Колонки.документ);
		Результат.Колонки.Вставить(0,"Документ",мТипыДокументов);
		Результат.ЗагрузитьКолонку(СписокДокументов,"Документ");
		
		ИспользованоСубконто = ИспользованоСубконто+1;
		ОпределениеДокументаСделки = "Выборка.Субконто"+ИспользованоСубконто+" как Документ";
		
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	"+ОпределениеДокументаСделки+",
		|	Выборка.СуммаОборот"+?(ОстаткиОбороты=1,"Кт","Дт")+" Как Оборот,
		|	Выборка.СуммаКонечныйОстаток"+?(ОстаткиОбороты=1,"Кт","Дт")+" Как Остаток
		|ИЗ
		|	РегистрБухгалтерии." + ИмяРегистра + ".ОстаткиИОбороты(&НачПериода,&КонПериода,"+РежимОпределенияОборотов+",, "+ УсловиеВыбораСчетаВТекстеЗапроса + ", &ВидыСубконто, " + УсловиеЗапроса + ") КАК Выборка
		|Где Не(Выборка.СуммаОборот"+?(ОстаткиОбороты=1,"Кт","Дт")+" = 0)
		|";

		РезультатДляРД = Запрос.Выполнить().Выгрузить();
		Для каждого ДокументДопЗапроса Из РезультатДляРД Цикл
		    Если ТипЗнч(ДокументДопЗапроса.Документ)=Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
			    СтрокаРезультатов = Результат.Добавить();
				СтрокаРезультатов.Документ	= ДокументДопЗапроса.Документ;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;	

	Если не ЕстьРасчетныеДокументы тогда
		Результат.Свернуть("Документ","");
	Иначе
		Результат.Колонки.Удалить(Результат.Колонки.оборот);
	КонецЕсли;

	ОграничениеСпискаДокументовПоТипу(Результат);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Результат,ТаблицаДокументов);
	ТаблицаДокументов.Сортировать("Дата, Документ", Новый СравнениеЗначений);

	ЭтаФорма.ЭлементыФормы.ТаблицаДокументов.Колонки.Остаток.Видимость = ЕстьРасчетныеДокументы;

КонецПроцедуры

Процедура ПодборПоОстаткам()

	ТаблицаДокументов.Очистить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонПериода",  КонПериода);
	Запрос.УстановитьПараметр("Организация", Организация);

	УсловиеЗапроса = "Организация = &Организация";

	ЕстьРасчетныеДокументы     = Ложь;
	ОпределениеДокументаСделки = "";
	ВидыСубконто = Новый Массив;
	Если НЕ ЗначениеЗаполнено(Счет) тогда
		Сообщить("Для выбора по остаткам необходимо указать счет!");
		Возврат;
	КонецЕсли;

	ИмяРегистра = "Хозрасчетный";
	
	Для каждого ВидСубконтоСчета из Счет.ВидыСубконто Цикл

		Если не ВидСубконтоСчета.ТолькоОбороты тогда

			ВидыСубконто.Добавить(ВидСубконтоСчета.ВидСубконто);

			Если ВидСубконтоСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
				УсловиеЗапроса = УсловиеЗапроса +" и Субконто"+ВидСубконтоСчета.НомерСтроки+" = &субконто"+ВидСубконтоСчета.НомерСтроки;
				Запрос.УстановитьПараметр("Субконто"+ВидСубконтоСчета.НомерСтроки, Контрагент);

			ИначеЕсли ВидСубконтоСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры Тогда
				УсловиеЗапроса = УсловиеЗапроса +" и Субконто"+ВидСубконтоСчета.НомерСтроки+" = &субконто"+ВидСубконтоСчета.НомерСтроки;
				Запрос.УстановитьПараметр("Субконто"+ВидСубконтоСчета.НомерСтроки, ДоговорКонтрагента);

			ИначеЕсли ВидСубконтоСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами Тогда
				ЕстьРасчетныеДокументы = Истина;
				ОпределениеДокументаСделки = "Выборка.Субконто"+ВидСубконтоСчета.НомерСтроки+" как Документ,";
				
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если НЕ ЕстьРасчетныеДокументы тогда
		Сообщить("На счете не ведется учет по расчетным документам! Выбор по остаткам на счете не может использоваться.");
		РежимВыбораДокументов = Перечисления.РежимОтбораДокументов.ПоОборотам;
		ТаблицаДокументов.Очистить();
		Возврат;
	КонецЕсли;

	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);

	Если ЗначениеЗаполнено(Счет) Тогда
		Запрос.УстановитьПараметр("Счет", Счет);
		УсловиеВыбораСчетаВТекстеЗапроса = "Счет В ИЕРАРХИИ(&Счет)";

	Иначе 
		УсловиеВыбораСчетаВТекстеЗапроса = "";

	КонецЕсли;

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	"+ОпределениеДокументаСделки+"
	|	Выборка.СуммаОстаток"+?(ОстаткиОбороты=1,"Кт","Дт")+" Как Остаток
	|ИЗ
	|	РегистрБухгалтерии." + ИмяРегистра + ".Остатки(&КонПериода, "+ УсловиеВыбораСчетаВТекстеЗапроса + ", &ВидыСубконто, " + УсловиеЗапроса + ") КАК Выборка";

	Результат = Запрос.Выполнить().Выгрузить();
	ОграничениеСпискаДокументовПоТипу(Результат);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Результат,ТаблицаДокументов);
	ТаблицаДокументов.Сортировать("Дата, Документ", Новый СравнениеЗначений);

КонецПроцедуры

Процедура ДокументВыбор(Элемент=Неопределено, ВыбраннаяСтрока, Колонка=Неопределено, СтандартнаяОбработка)

	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Массив") Тогда
		ОповеститьОВыборе(ВыбраннаяСтрока[0].Документ);
	Иначе
		ОповеститьОВыборе(ВыбраннаяСтрока.Документ);
	КонецЕсли; 

КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)

	Если не ДоговорКонтрагента.Организация = Элемент.Значение тогда
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕслИ;

КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)

	Если не ДоговорКонтрагента.Владелец = Элемент.Значение тогда
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕслИ;

КонецПроцедуры

Процедура КоманднаяПанель1Выбрать(Кнопка)

	Если ЭлементыФормы.ТаблицаДокументов.ТекущаяСтрока	= Неопределено тогда
		Сообщить("Документ расчетов не выбран");
	Иначе
		ОповеститьОВыборе(ЭлементыФормы.ТаблицаДокументов.ТекущиеДанные.Документ);
	КонецЕслИ;

КонецПроцедуры

Процедура КоманднаяПанель1СоздатьИВыбрать(Кнопка)
	Док = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();

	Док.Дата        = ?(НЕ ЗначениеЗаполнено(КонПериода),ТекущаяДата(),КонПериода);
	Док.Организация = Организация;
	Док.Контрагент	= Контрагент;
	Док.ДоговорКонтрагента	= ДоговорКонтрагента;
	Док.ПолучитьФорму("ФормаДокумента").ОткрытьМодально();

	Если НЕ Док.Ссылка.Пустая() Тогда
		ОповеститьОВыборе(Док.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПросмотретьДокумент(Кнопка)
    СтрокаДанных = ЭлементыФормы.ТаблицаДокументов.ТекущиеДанные;
	Если Не СтрокаДанных = Неопределено Тогда
		ФормаДокумента = СтрокаДанных.Документ.ПолучитьФорму();
		ФормаДокумента.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура ТаблицаДокументовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
		ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.Документ.Проведен Тогда
		
		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0;
	Иначе 

		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 2;
	КонецЕсли; 
	
	Если ДанныеСтроки.Документ.ПометкаУдаления Тогда

		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 1;
	КонецЕсли; 

КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.ПараметрТекущаяСтрока    = ДоговорКонтрагента;
	
	ФормаВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность    = Ложь;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ФормаВыбора.СправочникСписок.Отбор.Организация.Установить(Организация);
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

