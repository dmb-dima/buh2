////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в 
// другой период установки номера.
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит текущую форму подбора номенклатуры
Перем мФормаПодбораНоменклатуры;

Перем мСпособОтраженияРасходов;
   
//Используется для определения необходимости открытия настроек движения после сохранения
Перем ОткрыватьНастройкуДвижений;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Спецодежда,ЭлементыФормы.КоманднаяПанельСпецодежда);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Спецоснастка,ЭлементыФормы.КоманднаяПанельСпецоснастка);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ИнвентарьИХозяйственныеПринадлежности,ЭлементыФормы.КоманднаяПанельИнвентарьИХозяйственныеПринадлежности);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбораНоменклатуры, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Производит открывает форму подбора данных в табличные части документа.
//
// Параметры:
//  Нет.
//
Процедура ДействиеПодбор()

	Перем Команда, Валюта;

	ЕстьЦена  = Ложь;

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", 	"По остаткам номенклатуры");

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , "ПодборВТабличнуюЧасть");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокЗапросов);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , Склад);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);

	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер);

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, мФормаПодбораНоменклатуры);

КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, Количество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура" , Номенклатура);
	ЗначениеВыбора.Свойство("Количество"   , Количество);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли - увеличиваем количество.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
	
	Иначе 	
		
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
		СтрокаТабличнойЧасти.Количество   = Количество;

		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти);
		
	КонецЕсли;

	АктивноеТабличноеПоле = ЭлементыФормы.Найти(ЭлементыФормы.ПанельМатериалы.ТекущаяСтраница.Имя);
	
	АктивноеТабличноеПоле.ТекущаяСтрока  = СтрокаТабличнойЧасти;
	АктивноеТабличноеПоле.ТекущаяКолонка = АктивноеТабличноеПоле.Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Функция проверяет способ отражения расходов на количество строк. Если
// выбранный способ отражения расходов содержит более одной строки, возвращается
// значение Ложь, иначе - Истина.
//
// Параметр:
//  СпособОтраженияРасходов - Справочник.СпособыОтраженияРасходовПоАмортизации
// 
// Возвращаемое значение:
//  Булево.
//
Функция ПроверкаСпособаОтраженияРасходов(СпособОтраженияРасходов)
	
	КоличествоСтрок = СпособОтраженияРасходов.Способы.Количество();
	
	Если КоличествоСтрок > 1 Тогда
		
		Предупреждение("Способ отражения расходов """ + СпособОтраженияРасходов + """ содержит более одной строки.");
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции // ПроверкаСпособаОтраженияРасходов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает отметку незаполненного поля ввода
//
// Параметры:
//  Элемент      - элемент формы, для которого нужно установить отметку 
//                 незаполненного
//  Отметка      - Булево, признак отметки незаполненного
//
Процедура УстановитьОтметкуНезаполненного(Элемент, Отметка)
	
	Элемент.АвтоОтметкаНезаполненного = Отметка;
	Элемент.АвтоВыборНезаполненного   = Отметка;
	Элемент.ОтметкаНезаполненного     = Отметка И НЕ ЗначениеЗаполнено(Элемент.Значение);
	
КонецПроцедуры // УстановитьОтметкуНезаполненного()

// Процедура устанавливает видимость реквизитов формы.
//
Процедура УстановитьВидимость()
	
	УСН       = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	УСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	Предприниматель = ОбщегоНазначения.Предприниматель(Организация, Дата);
	
	КолонкиСпецодежда                            = ЭлементыФормы.Спецодежда.Колонки;
	КолонкиСпецоснастка                          = ЭлементыФормы.Спецоснастка.Колонки;
	КолонкиИнвентарьИХозяйственныеПринадлежности = ЭлементыФормы.ИнвентарьИХозяйственныеПринадлежности.Колонки;
	
	КолонкиСпецодежда.СчетУчета.Видимость    = ПоказыватьВДокументахСчетаУчета;
	КолонкиСпецодежда.СчетПередачи.Видимость = ПоказыватьВДокументахСчетаУчета;
	КолонкиСпецодежда.ОтражениеВУСН.Видимость  = УСН И НЕ УСНДоходы;
	
	КолонкиСпецоснастка.СчетУчета.Видимость    = ПоказыватьВДокументахСчетаУчета;
	КолонкиСпецоснастка.СчетПередачи.Видимость = ПоказыватьВДокументахСчетаУчета;
	КолонкиСпецоснастка.ОтражениеВУСН.Видимость  = УСН И НЕ УСНДоходы;
	
	КолонкиИнвентарьИХозяйственныеПринадлежности.СчетУчета.Видимость    = ПоказыватьВДокументахСчетаУчета;
	КолонкиИнвентарьИХозяйственныеПринадлежности.ОтражениеВУСН.Видимость  = УСН И НЕ УСНДоходы;
	
	// Установим отметку незаполненного для поля ввода "Местонахождение", если
	// заполнено табличное поле "Спецоснастка".
	УстановитьОтметкуНезаполненного(ЭлементыФормы.Местонахождение, (Спецоснастка.Количество() > 0));
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,,ПараметрОбъектКопирования);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
    
	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Спецодежда.Колонки, СтруктураКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Спецоснастка.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Спецодежда",								"Спецодежда");
	Страницы.Добавить("Спецоснастка",							"Спецоснастка");
	Страницы.Добавить("ИнвентарьИХозяйственныеПринадлежности",	"ИнвентарьИХозяйственныеПринадлежности");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ПанельМатериалы, Страницы,);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,,ЭлементыФормы.ПанельМатериалы.ТекущаяСтраница,Страницы);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
     
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧасть" Тогда
			
			АктивноеТабличноеПоле = ЭлементыФормы.Найти(ЭлементыФормы.ПанельМатериалы.ТекущаяСтраница.Имя);
			ОбработкаПодбора(АктивноеТабличноеПоле.Значение, ЗначениеВыбора);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	
	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ПанельМатериалы.Страницы;
	СтраницаПанели.Спецодежда.Заголовок = "Спецодежда (" + Спецодежда.Количество() + " поз.)";
	СтраницаПанели.Спецоснастка.Заголовок = "Спецоснастка (" + Спецоснастка.Количество() + " поз.)";
	СтраницаПанели.ИнвентарьИХозяйственныеПринадлежности.Заголовок = "Инвентарь и хозяйственные принадлежности (" + ИнвентарьИХозяйственныеПринадлежности.Количество() + " поз.)";
	
	// Установим отметку незаполненного для поля ввода "Местонахождение", если
	// заполнено табличное поле "Спецоснастка".
	УстановитьОтметкуНезаполненного(ЭлементыФормы.Местонахождение, (Спецоснастка.Количество() > 0));
	
КонецПроцедуры // ОбновлениеОтображения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры


// Процедура вызывается при выборе пункта подменю "Движения документа 
// по регистрам" меню "Перейти" командной панели формы. Процедура отрабатывает 
// печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	//Открывает форму движений документа для ручного редактирования
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()
 
// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Спецодежда".
//
Процедура КоманднаяПанельСпецодеждаПодбор(Кнопка)
	
	ДействиеПодбор();
	
КонецПроцедуры // КоманднаяПанельСпецодеждаПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Спецоснастка".
//
Процедура КоманднаяПанельСпецоснасткаПодбор(Кнопка)
	
	ДействиеПодбор();
	
КонецПроцедуры // КоманднаяПанельСпецоснасткаПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Инвентарь и хозяйственные принадлежности".
//
Процедура КоманднаяПанельИнвентарьИХозяйственныеПринадлежностиПодбор(Кнопка)
	
	ДействиеПодбор();
	
КонецПроцедуры // КоманднаяПанельИнвентарьИХозяйственныеПринадлежностиПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	УстановитьВидимость();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении реквизита Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, "");
	
	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Спецодежда

// Процедура - обработчик события "ОбработкаВыбора" табличной части
// "Спецодежда".
//
Процедура СпецодеждаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущиеДанные.Физлицо = ВыбранноеЗначение.Физлицо;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // СпецодеждаОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Спецодежда".
//
Процедура СпецодеждаНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Спецодежда.ТекущиеДанные;
	
	// Если в поле "Назначение использования" выбран элемент,
	// не подчиненный выбранной номенклатуре, это поле нужно очистить.
	Если НЕ (СтрокаТабличнойЧасти.НазначениеИспользования.Владелец = СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.НазначениеИспользования = Справочники.НазначенияИспользования.ПустаяСсылка();
	КонецЕсли;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти);
	
	ОтражатьВНалоговомУчетеУСН = (НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)  
	                           И (НЕ НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата)));
	
	Если ОтражатьВНалоговомУчетеУСН Тогда
		СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	КонецЕсли;
	
КонецПроцедуры // СпецодеждаНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода 
// "НазначениеИспользования" в строке табличной части "Спецодежда".
//
Процедура СпецодеждаНазначениеИспользованияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Спецодежда.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.Номенклатура = Элемент.Значение.Владелец;
		СпецодеждаНоменклатураПриИзменении(Элемент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НазначениеИспользования) 
	   И СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.НазначениеИспользования.Количество;
	КонецЕсли;
	
КонецПроцедуры // СпецодеждаНазначениеИспользованияПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СчетУчета"
// в строке табличной части "Спецодежда".
//
Процедура СпецодеждаСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СпецодеждаСчетУчетаОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода 
// "счетПередачи".
//
Процедура СпецодеждаСчетПередачиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СпецодеждаСчетПередачиОбработкаВыбора()

Процедура СпецодеждаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Спецодежда.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Спецоснастка

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Спецоснастка".
//
Процедура СпецоснасткаНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Спецоснастка.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти);
	
	ОтражатьВНалоговомУчетеУСН = (НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)  
	                           И (НЕ НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата)));
	
	Если ОтражатьВНалоговомУчетеУСН Тогда
		СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	КонецЕсли
	
КонецПроцедуры // СпецоснасткаНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "НазначениеИспользования" в строке табличной части "Спецоснастка".
//
Процедура СпецоснасткаНазначениеИспользованияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Спецоснастка.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.Номенклатура = Элемент.Значение.Владелец;
		СпецоснасткаНоменклатураПриИзменении(Элемент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НазначениеИспользования) 
	   И СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.НазначениеИспользования.Количество;
	КонецЕсли;
	
КонецПроцедуры // СпецоснасткаНазначениеИспользованияПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СчетУчета"
// в строке табличной части "Спецоснастка".
//
Процедура СпецоснасткаСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СпецоснасткаСчетУчетаОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СчетПередачи".
//
Процедура СпецоснасткаСчетПередачиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СпецоснасткаСчетПередачиОбработкаВыбора()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура СпецоснасткаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Спецоснастка.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ "Инвентарь и хозяйственные 
// принадлежности"
// 

// Процедура - обработчик события "ОбработкаВыбора" табличной части
// "Инвентарь и хозяйственные принадлежности".
//
Процедура ИнвентарьИХозяйственныеПринадлежностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущиеДанные.Физлицо = ВыбранноеЗначение.Физлицо;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ИнвентарьИХозяйственныеПринадлежностиОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Инвентарь и хозяйственные принадлежности".
//
Процедура ИнвентарьИХозяйственныеПринадлежностиНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ИнвентарьИХозяйственныеПринадлежности.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти);
	
	ОтражатьВНалоговомУчетеУСН = (НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)  
	                           И (НЕ НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата)));
	
	Если ОтражатьВНалоговомУчетеУСН Тогда
		СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	КонецЕсли;
	
КонецПроцедуры // ИнвентарьИХозяйственныеПринадлежностиНоменклатураПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СчетУчета"
// в строке табличной части "Инвентарь и хозяйственные принадлежности".
//
Процедура ИнвентарьИХозяйственныеПринадлежностиСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // ИнвентарьИХозяйственныеПринадлежностиСчетУчетаОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Способ отражения
// расходов" в строке табличной части "Инвентарь и хозяйственные принадлежности".
//
Процедура ИнвентарьИХозяйственныеПринадлежностиСпособОтраженияРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ПроверкаСпособаОтраженияРасходов(ВыбранноеЗначение);
	
КонецПроцедуры // ИнвентарьИХозяйственныеПринадлежностиСпособОтраженияРасходовОбработкаВыбора()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода "Способ 
// отражения расходов" в строке табличной части "Инвентарь и хозяйственные 
// принадлежности".
//
Процедура ИнвентарьИХозяйственныеПринадлежностиСпособОтраженияРасходовОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	мСпособОтраженияРасходов = Элемент.Значение;
	
КонецПроцедуры // ИнвентарьИХозяйственныеПринадлежностиСпособОтраженияРасходовОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода "Способ отражения
// расходов" в строке табличной части "Инвентарь и хозяйственные 
// принадлежности".
//
Процедура ИнвентарьИХозяйственныеПринадлежностиСпособОтраженияРасходовПриИзменении(Элемент)
	
	Если НЕ ПроверкаСпособаОтраженияРасходов(Элемент.Значение) Тогда
		
		Элемент.Значение = мСпособОтраженияРасходов;
		
	КонецЕсли;
	
КонецПроцедуры // ИнвентарьИХозяйственныеПринадлежностиСпособОтраженияРасходовПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Способ отражения
// расходов" в строке табличной части "Инвентарь и хозяйственные 
// принадлежности".
//
Процедура ИнвентарьИХозяйственныеПринадлежностиСпособОтраженияРасходовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеВнеоборотнымиАктивами.НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации(Элемент, Организация, СтандартнаяОбработка);
	
КонецПроцедуры // ИнвентарьИХозяйственныеПринадлежностиСпособОтраженияРасходовНачалоВыбора()

Процедура ИнвентарьИХозяйственныеПринадлежностиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.ИнвентарьИХозяйственныеПринадлежности.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// {ОбособленныеПодразделения

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()

// }ОбособленныеПодразделения 

// Обработчик события "ПриИзменении" поля ввода "Склад".
//
Процедура СкладПриИзменении(Элемент)
	
	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		Склад = Неопределено;
	КонецЕсли;
	
	// {ОбособленныеПодразделения
	ПодразделениеОрганизации = УправлениеПодразделениями.ПолучитьПодразделение(Организация, Склад);
	ПриИзмененииПодразделенияОрганизации();
	// }ОбособленныеПодразделения 
	
КонецПроцедуры // СкладПриИзменении 

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

