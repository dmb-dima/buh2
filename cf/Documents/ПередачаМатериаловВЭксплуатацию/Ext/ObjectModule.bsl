// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета     Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА            

#Если Клиент Тогда
	
// Функция формирует печатную форму М-11
//
Функция ПечатьМ11()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	| Номер                    КАК Номер,
	| Дата                     КАК ДатаДокумента,
	| Дата                     КАК ДатаСоставления,
	| Организация              КАК Организация,
	| Склад                    КАК Склад,
	| Местонахождение          КАК Подразделение
	|ИЗ
	| Документ.ПередачаМатериаловВЭксплуатацию КАК ПередачаМатериаловВЭксплуатацию
	|
	|ГДЕ
	| ПередачаМатериаловВЭксплуатацию.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка",                                                        ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаДок",                                                       Шапка.ДатаДокумента);
	Запрос.УстановитьПараметр("СчетУчетаСпецодеждыЗабалансовый",                             ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатацииВспомогательный);
	Запрос.УстановитьПараметр("СчетУчетаСпецоснасткиЗабалансовый",                           ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатацииВспомогательный);
	Запрос.УстановитьПараметр("СчетУчетаИнвентаряИХозяйственныхПринадлежностейЗабалансовый", ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежностиВЭксплуатации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	| ВложенныйЗапрос.ID КАК ID,
	| ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	| ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	| ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК МатериалНаименование,
	| ВложенныйЗапрос.Номенклатура.Код КАК НоменклатурныйНомер,
	| ВложенныйЗапрос.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	| ВложенныйЗапрос.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	| ВложенныйЗапрос.СчетУчета КАК Счет,
	| ЕСТЬNULL(ВложенныйЗапрос.Количество, 0) КАК Количество,
	| СУММА(ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.Сумма, 0)) КАК Сумма
	|ИЗ
	| (ВЫБРАТЬ
	| 1 КАК ID,
	| МИНИМУМ(Спецодежда.НомерСтроки) КАК НомерСтроки,
	| Спецодежда.Номенклатура КАК Номенклатура,
	| Спецодежда.СчетУчета КАК СчетУчета,
	| СУММА(Спецодежда.Количество) КАК Количество
	| ИЗ
	| Документ.ПередачаМатериаловВЭксплуатацию.Спецодежда КАК Спецодежда
	| ГДЕ
	| Спецодежда.Ссылка = &Ссылка
	|
	| СГРУППИРОВАТЬ ПО
	| Спецодежда.Номенклатура,
	| Спецодежда.СчетУчета
	|
	| ОБЪЕДИНИТЬ ВСЕ
	|
	| ВЫБРАТЬ
	| 2,
	| МИНИМУМ(Спецоснастка.НомерСтроки),
	| Спецоснастка.Номенклатура,
	| Спецоснастка.СчетУчета,
	| СУММА(Спецоснастка.Количество)
	| ИЗ
	| Документ.ПередачаМатериаловВЭксплуатацию.Спецоснастка КАК Спецоснастка
	| ГДЕ
	| Спецоснастка.Ссылка = &Ссылка
	|
	| СГРУППИРОВАТЬ ПО
	| Спецоснастка.Номенклатура,
	| Спецоснастка.СчетУчета
	|
	| ОБЪЕДИНИТЬ ВСЕ
	|
	| ВЫБРАТЬ
	| 3 КАК ID,
	| МИНИМУМ(ИнвентарьИХозяйственныеПринадлежности.НомерСтроки) КАК НомерСтроки,
	| ИнвентарьИХозяйственныеПринадлежности.Номенклатура КАК Номенклатура,
	| ИнвентарьИХозяйственныеПринадлежности.СчетУчета КАК СчетУчета,
	| СУММА(ИнвентарьИХозяйственныеПринадлежности.Количество) КАК Количество
	| ИЗ
	| Документ.ПередачаМатериаловВЭксплуатацию.ИнвентарьИХозяйственныеПринадлежности КАК ИнвентарьИХозяйственныеПринадлежности
	| ГДЕ
	| ИнвентарьИХозяйственныеПринадлежности.Ссылка = &Ссылка
	|
	| СГРУППИРОВАТЬ ПО
	| ИнвентарьИХозяйственныеПринадлежности.Номенклатура,
	| ИнвентарьИХозяйственныеПринадлежности.СчетУчета) КАК ВложенныйЗапрос
	| ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	| &ДатаДок,
	| &ДатаДок,
	| Регистратор = &Ссылка
	|     И (НЕ СчетДт = &СчетУчетаСпецодеждыЗабалансовый)
	|     И (НЕ СчетДт = &СчетУчетаСпецоснасткиЗабалансовый)
	|     И (НЕ СчетДт = &СчетУчетаИнвентаряИХозяйственныхПринадлежностейЗабалансовый)) КАК ХозрасчетныйДвиженияССубконто
	| ПО ВложенныйЗапрос.Номенклатура = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	| И ВложенныйЗапрос.СчетУчета = ХозрасчетныйДвиженияССубконто.СчетКт
	|
	|СГРУППИРОВАТЬ ПО
	| ВложенныйЗапрос.ID,
	| ВложенныйЗапрос.НомерСтроки,
	| ВложенныйЗапрос.Номенклатура,
	| ВложенныйЗапрос.Номенклатура.Код,
	| ВложенныйЗапрос.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	| ВложенныйЗапрос.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	| ВложенныйЗапрос.СчетУчета,
	| ВложенныйЗапрос.Количество,
	| ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|
	|УПОРЯДОЧИТЬ ПО
	| ID,
	| НомерСтроки";
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Код", "Номенклатура.Артикул");
	КонецЕсли;
	
	ЗапросПоНоменклатуре = Запрос.Выполнить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаМатериаловВЭксплуатацию_М11";
	
	// Вывод заголовка
	Макет = ПолучитьОбщийМакет("М11");
	
	Область = Макет.ПолучитьОбласть("Шапка");
	
	Область.Параметры.Заголовок = "ТРЕБОВАНИЕ-НАКЛАДНАЯ № " + ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	
	Область.Параметры.Заполнить(Шапка);
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	
	Область.Параметры.ПредставлениеОрганизации   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	Область.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;
	Область.Параметры.КодОКПО                    = СведенияОбОрганизации.КодПоОКПО;
	
	ТабДокумент.Вывести(Область);
	
	ВыборкаПоСтрокам = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтрокам.Следующий() Цикл
		
		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		
		Область.Параметры.МатериалНаименование = СокрЛП(ВыборкаПоСтрокам.МатериалНаименование);
		Область.Параметры.Цена =                 ?(ВыборкаПоСтрокам.Количество = 0, 0, ВыборкаПоСтрокам.Сумма / ВыборкаПоСтрокам.Количество);
		
		ТабДокумент.Вывести(Область);
		
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(Область);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьМ11()

// Функция формирует печатную форму документа МБ-7
//
Функция ПечатьМБ7()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	| Номер                    КАК НомерДокумента,
	| Дата                     КАК ДатаДокумента,
	| Дата                     КАК ДатаСоставления,
	| Организация              КАК Организация,
	| Склад                    КАК Склад,
	| Местонахождение          КАК Подразделение
	|ИЗ
	| Документ.ПередачаМатериаловВЭксплуатацию КАК ПередачаМатериаловВЭксплуатацию
	|
	|ГДЕ
	| ПередачаМатериаловВЭксплуатацию.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Организация",     Шапка.Организация);
	Запрос.УстановитьПараметр("Дата",            Шапка.ДатаДокумента);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спецодежда.НомерСтроки КАК НомерПП,
	|	Спецодежда.Номенклатура.Код КАК НоменклатурныйНомер,
	|	ВЫРАЗИТЬ(Спецодежда.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	Спецодежда.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Спецодежда.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	Спецодежда.Количество КАК Количество,
	|	Спецодежда.ФизЛицо КАК Сотрудник,
	|	РаботникиОрганизацийСрезПоследних.ТабельныйНомер,
	|	Спецодежда.Ссылка.Дата КАК ДатаДокумента,
	|	Спецодежда.НазначениеИспользования.СрокПолезногоИспользования КАК СрокСлужбы
	|ИЗ
	|	Документ.ПередачаМатериаловВЭксплуатацию.Спецодежда КАК Спецодежда
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		(ВЫБРАТЬ 
	|			РаботникиОрганизацийСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,
	|			РаботникиОрганизацийСрезПоследних.Сотрудник.ФизЛицо КАК ФизЛицо,
	|			РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
	|			РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
	|		ГДЕ
	|			РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		) КАК РаботникиОрганизацийСрезПоследних
	|	ПО Спецодежда.ФизЛицо = РаботникиОрганизацийСрезПоследних.Физлицо	
	|ГДЕ
	|	Спецодежда.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПП";
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Код", "Номенклатура.Артикул");
	КонецЕсли;
	
	ВыборкаПоСтрокам = Запрос.Выполнить().Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаМатериаловВЭксплуатацию_МБ7";
	
	// Вывод заголовка
	Макет = ПолучитьМакет("МБ7");
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Заполнить(Шапка);
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);

	Область.Параметры.ПредставлениеОрганизации   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	Область.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;
	Область.Параметры.ОрганизацияПоОКПО          = СведенияОбОрганизации.КодПоОКПО;
	
	ТабДокумент.Вывести(Область);

	Пока ВыборкаПоСтрокам.Следующий() Цикл

		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		Область.Параметры.ТоварНаименование = СокрЛП(ВыборкаПоСтрокам.ТоварНаименование);
		ТабДокумент.Вывести(Область);

	КонецЦикла;

	// Вывод подвала
	Область = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(Область);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьМБ7()

// Процедура осуществляет печать документа. Можно направить печать на
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если      ИмяМакета = "МБ7" Тогда
		ТабДокумент = ПечатьМБ7();
	ИначеЕсли ИмяМакета = "М11" Тогда
		ТабДокумент = ПечатьМ11();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка), НепосредственнаяПечать);
	
КонецПроцедуры // Печать()
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
// 
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("МБ7,М11", "Ведомость МБ-7","Накладная M-11");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры:
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация, Склад";
	ДополнитьРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки);
	
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, , , "", "Спецодежда");
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, , , "", "Спецоснастка");
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	
	Если Спецоснастка.Количество() > 0 Тогда
		Реквизиты = Реквизиты
		+ ?(ПустаяСтрока(Реквизиты), "", ", ")
		+ "Местонахождение";
	КонецЕсли;
	
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Процедура заполняет счета учета.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ) Экспорт
	
	МетаданныеДокумента = Метаданные();
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТЧ);
	
	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
	
	СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетПередачи", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		СтрокаТЧ.СчетПередачи = СчетаУчета.СчетПередачи;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция проверяет правильность заполнения документа
// Возврат - структура с данными шапки документа
//
Функция ПроверкаРеквизитов(Отказ) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	РеквизитыТЧСпецодежда                            = "Номенклатура, Количество, ФизЛицо, НазначениеИспользования, СчетУчета, СчетПередачи";
	РеквизитыТЧСпецоснастка                          = "Номенклатура, Количество, НазначениеИспользования, СчетУчета, СчетПередачи";
	РеквизитыТЧИнвентарьИХозяйственныеПринадлежности = "Номенклатура, Количество, СпособОтраженияРасходов, СчетУчета";
	
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТЧСпецодежда, ,, "", "Спецодежда");
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТЧСпецоснастка, ,, "", "Спецоснастка");
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТЧИнвентарьИХозяйственныеПринадлежности, ,, "", "ИнвентарьИХозяйственныеПринадлежности");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Спецодежда", Новый Структура(РеквизитыТЧСпецодежда), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Спецоснастка", Новый Структура(РеквизитыТЧСпецоснастка), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ИнвентарьИХозяйственныеПринадлежности", Новый Структура(РеквизитыТЧИнвентарьИХозяйственныеПринадлежности), Отказ, Заголовок);
	
	ПроверитьНаСовпадающиеСтроки(ЭтотОбъект, "Спецодежда", "Номенклатура, ФизЛицо", Отказ);
	ПроверитьНаСовпадающиеСтроки(ЭтотОбъект, "Спецоснастка", "Номенклатура", Отказ);
	
	ПроверитьНазначенияИспользования(Отказ);
	
	ПроверитьСпособыОтраженияРасходовИнвентаряИХозяйственныхПринадлежностей(Отказ);
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции // ПроверкаРеквизитов()

// Проверяет табличную часть на наличие совпадающих строк.
// Проверка проводится по заданным колонкам. Используется, когда необходимо
// контролировать отсутствие повторов определенных данных в табличных частях
// документов.
//
// Параметры:
//  Документ          - ДокументОбъект, в котором проводится проверка.
//  ИмяТабличнойЧасти - Имя табличной части документа для проверки.
//  СтруктураКолонок  - Структура, содержащая колонки, по которым проверяются
//                      совпадения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПроверитьНаСовпадающиеСтроки(ДокументОбъект, ИмяТабличнойЧасти, СписокКолонок, Отказ)
	
	ТаблицаСовпадений = ДокументОбъект[ИмяТабличнойЧасти].Выгрузить();
	ТаблицаСовпадений.Колонки.Добавить("КоличествоСовпадений");
	ТаблицаСовпадений.ЗаполнитьЗначения(1, "КоличествоСовпадений");
	ТаблицаСовпадений.Свернуть(СписокКолонок, "КоличествоСовпадений");
	
	ТекстСообщения = "";
	
	Для Каждого Строка Из ТаблицаСовпадений Цикл
		
		Если Строка.КоличествоСовпадений > 1 Тогда
			
			СтрокаСообщения = "";
			
			СтруктураОтбора = Новый Структура();
			
			Для Каждого Колонка Из ТаблицаСовпадений.Колонки Цикл
				
				Если НЕ (Колонка.Имя = "КоличествоСовпадений") Тогда
					
					СтруктураОтбора.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
					
					СтрокаСообщения = СтрокаСообщения
					+ ?(НЕ ЗначениеЗаполнено(СтрокаСообщения), "", ", ")
					+ Колонка.Имя
					+ ": "
					+ Строка[Колонка.Имя];
					
				КонецЕсли;
				
			КонецЦикла;
			
			СписокНомеровСтрок = "";
			
			МассивСовпадающихСтрок = ДокументОбъект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
			
			Если МассивСовпадающихСтрок.Количество() > 0 Тогда
				
				Для Каждого СтрокаМассива Из МассивСовпадающихСтрок Цикл
					
					СписокНомеровСтрок = СписокНомеровСтрок
					+ ?(НЕ ЗначениеЗаполнено(СписокНомеровСтрок), "", ", ")
					+ СтрокаМассива.НомерСтроки;
					
					
				КонецЦикла;
				
				СтрокаСообщения = СтрокаСообщения + ". Строки №№ " + СписокНомеровСтрок + ".";
				
			КонецЕсли;
			
			ТекстСообщения = ТекстСообщения + Символы.ПС + СтрокаСообщения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		
		ТекстСообщения = "Существуют повторяющиеся элементы в строках табличной части """
		+ ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление()
		+ """:"
		+ ТекстСообщения;
		
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщения, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаСовпадающиеСтроки()

// Проверяет правильность выбранных назначений использования.
//
Процедура ПроверитьНазначенияИспользования(Отказ)
	
	Для Каждого Строка Из Спецодежда Цикл
		
		Если Строка.НазначениеИспользования.СпособПогашенияСтоимости.Пустая() Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("В назначении использования, выбранном в строке " + Строка.НомерСтроки + " табличной части ""Спецодежда"", не указан способ погашения стоимости", Отказ);
		КонецЕсли;
		
		Если Строка.НазначениеИспользования.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.ПропорциональноОбъемуПродукцииРабот Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Назначение использования, выбранное в строке " + Строка.НомерСтроки + " табличной части ""Спецодежда"", имеет недопустимый для спецодежды способ погашения стоимости", Отказ);
		КонецЕсли;
		
		Если Строка.НазначениеИспользования.СпособОтраженияРасходов.Пустая() Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("В назначении использования, выбранном в строке " + Строка.НомерСтроки + " табличной части ""Спецодежда"", не указан способ отражения расходов", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из Спецоснастка Цикл
		
		Если Строка.НазначениеИспользования.СпособПогашенияСтоимости.Пустая() Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("В назначении использования, выбранном в строке " + Строка.НомерСтроки + " табличной части ""Спецоснастка"", не указан способ погашения стоимости", Отказ);
		КонецЕсли;
		
		Если Строка.НазначениеИспользования.СпособОтраженияРасходов.Пустая() Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("В назначении использования, выбранном в строке " + Строка.НомерСтроки + " табличной части ""Спецоснастка"", не указан способ отражения расходов", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьНазначенияИспользования()

// Проверяет правильность выбора назначений использования, выбранных
// в табличной части "Инвентарь и хозяйственные принадлежности".
//
Процедура ПроверитьСпособыОтраженияРасходовИнвентаряИХозяйственныхПринадлежностей(Отказ)
	
	Для Каждого Строка Из ИнвентарьИХозяйственныеПринадлежности Цикл
		
		Если Строка.СпособОтраженияРасходов.Способы.Количество() > 1 Тогда
			
			ОбщегоНазначения.ОшибкаПриПроведении("В строке " + Строка.НомерСтроки + " табличной части ""Инвентарь и хозяйственные принадлежности""
			|способ отражения расходов """ + Строка.СпособОтраженияРасходов + """ содержит более одной строки.", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьСпособыОтраженияРасходовИнвентаряИХозяйственныхПринадлежностей()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры:
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ТаблицаПоМатериалам = Неопределено;
	
	// Формирование движений по перемещению материалов.
	ФормированиеДвиженийПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамБухРегл(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	
	// {УчетДоходовИРасходовИП
	ДвиженияПоРегистрамИПРегл(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	// }УчетДоходовИРасходовИП
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по перемещению материалов.
//
Процедура ФормированиеДвиженийПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	НомСтр   = 0;
	ДатаДока = Дата;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	| ""Спецодежда"" КАК ТабличнаяЧасть,
	| ПередачаМатериаловВЭксплуатациюСпецодежда.НомерСтроки КАК НомерСтроки,
	| ПередачаМатериаловВЭксплуатациюСпецодежда.Номенклатура КАК Номенклатура,
	| ПередачаМатериаловВЭксплуатациюСпецодежда.НазначениеИспользования.СпособПогашенияСтоимости КАК СпособПогашенияСтоимости,
	| ПередачаМатериаловВЭксплуатациюСпецодежда.НазначениеИспользования.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	| ПередачаМатериаловВЭксплуатациюСпецодежда.Количество КАК Количество,
	| ПередачаМатериаловВЭксплуатациюСпецодежда.СчетУчета КАК СчетУчета,
	| ПередачаМатериаловВЭксплуатациюСпецодежда.СчетПередачи КАК КорСчетСписания,
	| ПередачаМатериаловВЭксплуатациюСпецодежда.Номенклатура КАК КорСубконтоСписания1,
	| ПередачаМатериаловВЭксплуатациюСпецодежда.Ссылка КАК КорСубконтоСписания2,
	| ПередачаМатериаловВЭксплуатациюСпецодежда.ФизЛицо КАК КорСубконтоСписания3,
	| ПередачаМатериаловВЭксплуатациюСпецодежда.ОтражениеВУСН КАК ОтражениеВУСН,
	| ПередачаМатериаловВЭксплуатациюСпецодежда.Ссылка.Организация КАК Организация,
	| ПередачаМатериаловВЭксплуатациюСпецодежда.Ссылка.Склад КАК Склад,
	| НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	| &ПустойДоговор КАК ДоговорКонтрагента,
	| ПередачаМатериаловВЭксплуатациюСпецодежда.ФизЛицо КАК ПодразделениеФизЛицо,
	| ПередачаМатериаловВЭксплуатациюСпецодежда.Ссылка КАК Ссылка,
	// {ОбособленныеПодразделения
	| ПередачаМатериаловВЭксплуатациюСпецодежда.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	// }ОбособленныеПодразделения 
	| ПередачаМатериаловВЭксплуатациюСпецодежда.Ссылка.Местонахождение          КАК КорПодразделениеОрганизации
	|ИЗ
	| Документ.ПередачаМатериаловВЭксплуатацию.Спецодежда КАК ПередачаМатериаловВЭксплуатациюСпецодежда
	|ГДЕ
	| ПередачаМатериаловВЭксплуатациюСпецодежда.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	| ""Спецоснастка"",
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.НомерСтроки,
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.Номенклатура,
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.НазначениеИспользования.СпособПогашенияСтоимости,
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.НазначениеИспользования.СпособОтраженияРасходов,
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.Количество,
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.СчетУчета,
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.СчетПередачи,
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.Номенклатура,
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.Ссылка,
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.Ссылка.Местонахождение,
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.ОтражениеВУСН,
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.Ссылка.Организация,
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.Ссылка.Склад,
	| НЕОПРЕДЕЛЕНО,
	| &ПустойДоговор,
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.Ссылка.Местонахождение,
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.Ссылка,
	// {ОбособленныеПодразделения
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.Ссылка.ПодразделениеОрганизации,
	// }ОбособленныеПодразделения 
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.Ссылка.Местонахождение
	|ИЗ
	| Документ.ПередачаМатериаловВЭксплуатацию.Спецоснастка КАК ПередачаМатериаловВЭксплуатациюСпецоснастка
	|ГДЕ
	| ПередачаМатериаловВЭксплуатациюСпецоснастка.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	| ""ИнвентарьИХозяйственныеПринадлежности"",
	| ПередачаМатериаловВЭксплуатациюИнвентарьИХозяйственныеПринадлежности.НомерСтроки,
	| ПередачаМатериаловВЭксплуатациюИнвентарьИХозяйственныеПринадлежности.Номенклатура,
	| НЕОПРЕДЕЛЕНО,
	| ПередачаМатериаловВЭксплуатациюИнвентарьИХозяйственныеПринадлежности.СпособОтраженияРасходов,
	| ПередачаМатериаловВЭксплуатациюИнвентарьИХозяйственныеПринадлежности.Количество,
	| ПередачаМатериаловВЭксплуатациюИнвентарьИХозяйственныеПринадлежности.СчетУчета,
	| СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатрат,
	| СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1,
	| СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2,
	| СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3,
	| ПередачаМатериаловВЭксплуатациюИнвентарьИХозяйственныеПринадлежности.ОтражениеВУСН,
	| ПередачаМатериаловВЭксплуатациюИнвентарьИХозяйственныеПринадлежности.Ссылка.Организация,
	| ПередачаМатериаловВЭксплуатациюИнвентарьИХозяйственныеПринадлежности.Ссылка.Склад,
	| НЕОПРЕДЕЛЕНО,
	| &ПустойДоговор,
	| ПередачаМатериаловВЭксплуатациюИнвентарьИХозяйственныеПринадлежности.ФизЛицо,
	| ПередачаМатериаловВЭксплуатациюИнвентарьИХозяйственныеПринадлежности.Ссылка,
	// {ОбособленныеПодразделения
	| ПередачаМатериаловВЭксплуатациюИнвентарьИХозяйственныеПринадлежности.Ссылка.ПодразделениеОрганизации,
	// }ОбособленныеПодразделения 
	| СпособыОтраженияРасходовПоАмортизацииСпособы.ПодразделениеОрганизации
	|ИЗ
	| Документ.ПередачаМатериаловВЭксплуатацию.ИнвентарьИХозяйственныеПринадлежности КАК ПередачаМатериаловВЭксплуатациюИнвентарьИХозяйственныеПринадлежности
	| ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	| ПО ПередачаМатериаловВЭксплуатациюИнвентарьИХозяйственныеПринадлежности.СпособОтраженияРасходов = СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка
	|ГДЕ
	| ПередачаМатериаловВЭксплуатациюИнвентарьИХозяйственныеПринадлежности.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",                                    СтруктураШапкиДокумента.Ссылка );
	Запрос.УстановитьПараметр("ПустойДоговор",                             Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПогашатьСтоимостьПриПередачеВЭксплуатацию", Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию);
	
	Результат = Запрос.Выполнить();
	ТаблицаПоМатериалам = Результат.Выгрузить();
	ТаблицаПоМатериалам.Колонки.Добавить("Регистратор");
	ТаблицаПоМатериалам.ЗаполнитьЗначения(ЭтотОбъект, "Регистратор");
	ТаблицаПоМатериалам.Колонки.Добавить("СчетДоходов");
	
	Если ТаблицаПоМатериалам.Колонки.Найти("ПодразделениеОрганизации") = Неопределено Тогда
		ТаблицаПоМатериалам.Колонки.Добавить("ПодразделениеОрганизации");
		ТаблицаПоМатериалам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Местонахождение, "ПодразделениеОрганизации")
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоМатериалам, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, , "Передача спецодежды (спецоснастки, инвентаря) в эксплуатацию");
	
КонецПроцедуры // ФормированиеДвиженийПоРегиструСписанныеТовары()

// Формирование движения по регистру бухгалтерии.
//
Процедура ДвиженияПоРегистрамБухРегл(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация);
	СтруктураШапкиДокумента.Вставить("ПрименениеПБУ18",УчетнаяПолитикаНУ.ПоддержкаПБУ18);
	
	УСН             = НалоговыйУчетУСН.ПрименениеУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	Предприниматель = ОбщегоНазначения.Предприниматель(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	
	Проводки = Движения.Хозрасчетный;
	
	ТаблицаСписания = Новый ТаблицаЗначений();
	ТаблицаСписания.Колонки.Добавить("ОбъектУчета");
	ТаблицаСписания.Колонки.Добавить("ДокументПередачи");
	ТаблицаСписания.Колонки.Добавить("ПодразделениеФизЛицо");
	ТаблицаСписания.Колонки.Добавить("СчетАмортизации");
	ТаблицаСписания.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаСписания.Колонки.Добавить("НаправлениеАмортизации");
	ТаблицаСписания.Колонки.Добавить("Количество");
	ТаблицаСписания.Колонки.Добавить("КоличествоМЦ");
	ТаблицаСписания.Колонки.Добавить("Сумма");
	ТаблицаСписания.Колонки.Добавить("СуммаНУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаСписания.Колонки.Добавить("СуммаПР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаСписания.Колонки.Добавить("СуммаВР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	
	Для Каждого СтрокаМатериал Из ТаблицаПоМатериалам Цикл
		
		СуммаСписания   = СтрокаМатериал.СписанныеПартии.Итог("СуммаСписания");
		СуммаСписанияНУ = СтрокаМатериал.СписанныеПартии.Итог("СуммаСписанияНУ");
		СуммаСписанияПР = СтрокаМатериал.СписанныеПартии.Итог("СуммаСписанияПР");
		СуммаСписанияВР = СтрокаМатериал.СписанныеПартии.Итог("СуммаСписанияВР");
		
		Если НЕ СтрокаМатериал.ТабличнаяЧасть = "ИнвентарьИХозяйственныеПринадлежности" Тогда
			
			НоваяСтрока = ТаблицаСписания.Добавить();
			
			НоваяСтрока.ОбъектУчета              = СтрокаМатериал.КорСубконтоСписания1;
			НоваяСтрока.ДокументПередачи         = СтрокаМатериал.КорСубконтоСписания2;
			НоваяСтрока.ПодразделениеФизЛицо     = СтрокаМатериал.КорСубконтоСписания3;
			НоваяСтрока.СчетАмортизации          = СтрокаМатериал.КорСчетСписания;
			НоваяСтрока.ПодразделениеОрганизации = СтрокаМатериал.ПодразделениеОрганизации;
			НоваяСтрока.НаправлениеАмортизации   = СтрокаМатериал.СпособОтраженияРасходов;
			Если НЕ (УСН ИЛИ Предприниматель) Тогда
				НоваяСтрока.СуммаНУ              = СуммаСписанияНУ;
				НоваяСтрока.СуммаПР              = СуммаСписанияПР;
				НоваяСтрока.СуммаВР              = СуммаСписанияВР;
			КонецЕсли;
			НоваяСтрока.КоличествоМЦ             = СтрокаМатериал.Количество;
			
			Если СтрокаМатериал.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию Тогда
				НоваяСтрока.Сумма      = СуммаСписания;
				НоваяСтрока.Количество = СтрокаМатериал.Количество;
			Иначе
				НоваяСтрока.Количество = 0;
				НоваяСтрока.Сумма      = 0;
			КонецЕсли;
			
			Если (УСН ИЛИ Предприниматель)
			И НЕ СтрокаМатериал.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию Тогда
				
				Проводка = Проводки.Добавить();
				
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = СуммаСписания;
				
				ПолучитьСчетДебетаИСодержание(Проводка, СтрокаМатериал.КорСчетСписания);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",                  СтрокаМатериал.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПартииМатериаловВЭксплуатации", СтрокаМатериал.Ссылка);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3,                               СтрокаМатериал.ПодразделениеФизЛицо);
				Проводка.КоличествоДт    = СтрокаМатериал.Количество;
			
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаМатериал.КорПодразделениеОрганизации, "Дт");
				
			КонецЕсли;
			
		Иначе // Инвентарь и хоз. принадлежности.
			
			Проводка = Проводки.Добавить();
			
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = СуммаСписания;
			
			ПолучитьСчетДебетаИСодержание(Проводка, СтрокаМатериал.СчетУчета);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",                  СтрокаМатериал.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПартииМатериаловВЭксплуатации", СтрокаМатериал.Ссылка);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3,                               СтрокаМатериал.ПодразделениеФизЛицо);
			Проводка.КоличествоДт    = СтрокаМатериал.Количество;
		
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.Местонахождение, "Дт");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаСписания.Количество() > 0 Тогда
		
		Если ТаблицаСписания.Колонки.Найти("ПодразделениеОрганизации") = Неопределено Тогда
			ТаблицаСписания.Колонки.Добавить("ПодразделениеОрганизации");
		КонецЕсли;
		ТаблицаСписания.ЗаполнитьЗначения(СтруктураШапкиДокумента.Местонахождение, "ПодразделениеОрганизации");		
					
		ТабЗатрат = СпецодеждаИСпецоснастка.ПолучитьРаспределениеПогашенияСтоимости(ЭтотОбъект, Отказ, Заголовок, ТаблицаСписания, СтруктураШапкиДокумента);
	
		// проводки по счету МЦ.
		Для Каждого Строка Из ТабЗатрат Цикл
			
			Если Строка.Сумма = 0
			   И Строка.СуммаМЦПР = 0
			   И Строка.СуммаМЦВР = 0 Тогда
				Продолжить;
			КонецЕсли;
		
			Проводка = Проводки.Добавить();
			
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = Строка.Сумма;
			
			ПолучитьСчетДебетаИСодержание(Проводка, Строка.СчетАмортизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",                  Строка.ОбъектУчета);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПартииМатериаловВЭксплуатации", Строка.ДокументПередачи);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3,                               Строка.ПодразделениеФизЛицо);
			Проводка.КоличествоДт    = Строка.КоличествоМЦ;
			
			Проводка.СуммаНУДт = 0;
			
			Если СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
				Проводка.СуммаПРДт = Строка.СуммаМЦПР;
				Проводка.СуммаВРДт = Строка.СуммаМЦВР;
			КонецЕсли;
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.Местонахождение, "Дт");
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамБухРегл()

Процедура ПолучитьСчетДебетаИСодержание(Проводка, СчетУчета)
	КодСчетаУчета = Сред(СчетУчета.Код,4,4);
	Если КодСчетаУчета = "11.1" Тогда
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатацииВспомогательный;
		Проводка.Содержание  = "Передача спецодежды в эксплуатацию";
	ИначеЕсли КодСчетаУчета = "11.2" Тогда
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатацииВспомогательный;
		Проводка.Содержание  = "Передача спецоснастки в эксплуатацию";
	Иначе
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежностиВЭксплуатации;
		Проводка.Содержание  = "Передача инвентаря в эксплуатацию";
	КонецЕсли;
	
КонецПроцедуры

// Движения по регистрам УСН.
//
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДопПараметров = Новый Структура("ТаблицаТМЦ", ТаблицаПоТоварам);
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, СтруктураДопПараметров);
	
КонецПроцедуры // ДвиженияПоРегистрамУСНРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоМатериалам.Количество()=0  Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	СписокРаспределяемыхКолонок = Новый Структура("Количество");
	СписокИсключаемыхКолонок = новый Структура("Сумма,СуммаВал,НДС,НДСВал,СуммаБезНДС,СуммаБезНДСВал,СуммаСписания,СуммаСписанияНУ,СуммаСписанияПР,СуммаСписанияВР"+
	",КоэффОплаты,НДСРасходовУСН, ОтражениеВУСН, СуммаРасходовУСН"+
	",Регистратор, СчетДоходов, Субконто, СчетУчетаНДСПоРеализации");
	
	ТаблицаНДСПартииСписания = УчетНДС.ПодготовитьТаблицуСписанияПартийДляНДС(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок, СписокРаспределяемыхКолонок, СписокИсключаемыхКолонок);
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	/////////////////////////////////////////////////////////////////////////////////
	
	Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		//Партии не найдены или отражение в партионном учете НДС не производится.
		//Дальнейшая обработка не требуется
		Возврат;
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по партиям - отразить непосредственное списание.
	//ТаблицаДвиженийПартии.Очистить();
	ТаблицаДвиженийПартии = Движения.НДСПоПриобретеннымЦенностям.ВыгрузитьКолонки();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
	
	Движения.НДСПоПриобретеннымЦенностям.мПериод          = Дата;
	Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
	Движения.НДСПоПриобретеннымЦенностям.ВыполнитьРасход();
	// НДС по партиям - отразить непосредственное списание.
	/////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по ОС - ТМЦ могли учитываться на счетах ОС, в этом случае необходимо удалить
	// запись из специального регистра учета ОС
	ТаблицаДвиженийПартии.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, ТаблицаДвиженийПартии, Движения, Отказ);
	// НДС по ОС
	/////////////////////////////////////////////////////////////////////////////////
	
	Если СтруктураШапкиДокумента.СложныйУчетНДС Тогда
		// Отражение списанных партий в составе косвенных расходов
		БазисРаспределенияПоСпособуОтражения = Новый Соответствие;
		СчетаУчетаКосвенныхРасходов = УчетНДС.ОпределитьСчетаУчетаКосвенныхРасходов();
		
		СтрокиКУдалению = Новый Массив();
		
		ТаблицаНДСПартииСписания.Колонки.Добавить("ТаблицаРаспределенияРасходов");
		Для каждого СтрокаСписания Из ТаблицаНДСПартииСписания Цикл
			Если Не ЗначениеЗаполнено(СтрокаСписания.СчетФактура) тогда
				СтрокиКУдалению.Добавить(СтрокаСписания);
				Продолжить;
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаСписания.СпособОтраженияРасходов) тогда
				СтрокиКУдалению.Добавить(СтрокаСписания);
				Продолжить;
			ИначеЕсли СтрокаСписания.Стоимость = 0 и СтрокаСписания.НДС = 0 тогда
				СтрокиКУдалению.Добавить(СтрокаСписания);
				Продолжить;
			КонецЕсли;
			
			Если БазисРаспределенияПоСпособуОтражения[СтрокаСписания.СпособОтраженияРасходов] = Неопределено тогда
				БазисСпособаОтражения = СтрокаСписания.СпособОтраженияРасходов.Способы.Выгрузить();
				БазисСпособаОтражения.Колонки.Добавить("ОтражатьВСоставеКР", Новый ОписаниеТипов("Булево"));
				БазисСпособаОтражения.Колонки.Добавить("СтатьяЗатрат");
				
				Для каждого СтрокаСпособаОтражения Из БазисСпособаОтражения Цикл
					Если СтрокаСпособаОтражения.Коэффициент = 0 тогда
						Продолжить;
					ИначеЕсли (СчетаУчетаКосвенныхРасходов.НайтиПоЗначению(СтрокаСпособаОтражения.СчетЗатрат) = Неопределено) Тогда
						Продолжить;
					Иначе
						ВидыСубконтоСчетаЗатрат = СтрокаСпособаОтражения.СчетЗатрат.ВидыСубконто;
						СтатьяЗатрат = Неопределено;
						Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
							Если ТипЗнч(СтрокаСпособаОтражения["Субконто"+НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") тогда
								СтатьяЗатрат = СтрокаСпособаОтражения["Субконто"+НомерСубконто];
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если Не ЗначениеЗаполнено(СтатьяЗатрат) Тогда
							Продолжить;
						ИначеЕсли не
							(СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД
							или СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам)
							тогда
							Продолжить;
						КонецЕсли;
						СтрокаСпособаОтражения.СтатьяЗатрат = СтатьяЗатрат;
						СтрокаСпособаОтражения.ОтражатьВСоставеКР = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если БазисСпособаОтражения.Найти(Истина,"ОтражатьВСоставеКР") = Неопределено Тогда
					БазисРаспределенияПоСпособуОтражения.Вставить(СтрокаСписания.СпособОтраженияРасходов, Ложь);
				Иначе
					БазисРаспределенияПоСпособуОтражения.Вставить(СтрокаСписания.СпособОтраженияРасходов, БазисСпособаОтражения);
				КонецЕсли;
				
			КонецЕсли;
			
			Если БазисРаспределенияПоСпособуОтражения[СтрокаСписания.СпособОтраженияРасходов] = Ложь тогда
				//Строка не отражается в составе КР
				СтрокиКУдалению.Добавить(СтрокаСписания);
			Иначе
				СтрокаСписания.ТаблицаРаспределенияРасходов = БазисРаспределенияПоСпособуОтражения[СтрокаСписания.СпособОтраженияРасходов].Скопировать();
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаНДСПартииСписания.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		Если ТаблицаНДСПартииСписания.Количество()=0 Тогда
			// Дальнейшая отработка не требуется
			Возврат;
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////////
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		СписокРаспределяемыхКолонок = Новый Структура("Стоимость, НДС","Коэффициент","Коэффициент");
		СписокИсключаемыхКолонок = новый Структура("QuieryId,Активность"+
		",ДействияНДСПокупки_ВключитьВСтоимость,ДействияНДСПокупки_ИсключитьИзСтоимости,ДействияНДСПокупки_ПредположениеСтавки0"+
		",ДоговорКонтрагента,ДоговорПоставщика,ДокументОприходования,Количество,Комиссионный"+
		",КорСубконтоСписания1,КорСубконтоСписания2,КорСубконтоСписания3,КорСчетСписания"+
		",МоментВремени,Период,ПодразделениеФизЛицо,Регистратор,Склад,СодержаниеПроводки,СписанныеПартииВР,СписанныеПартииПР,СписыватьПоУказаннойСтоимости,СпособОтраженияРасходов,СпособПогашенияСтоимости,Ссылка,СчетУчета,СчетУчетаБУ"+
		",НомерСтроки,Партия, ВидДвижения" + 
		",ПодразделениеОрганизации, Подразделение");
		
		ТаблицаКосвенныхРасходов = ОбщегоНазначения.РазвернутьПоВложеннойТаблице(ТаблицаНДСПартииСписания, "ТаблицаРаспределенияРасходов",СписокРаспределяемыхКолонок, СписокИсключаемыхКолонок);
		СтрокиКУдалению = ТаблицаКосвенныхРасходов.НайтиСтроки(Новый Структура("ОтражатьВСоставеКР", Ложь));
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаКосвенныхРасходов.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		Если ТаблицаКосвенныхРасходов.Количество()>0 Тогда
			ТаблицаДвижений_НДСКосвенныеРасходы = Движения.НДСКосвенныеРасходы.ВыгрузитьКолонки();
			
			ТаблицаКосвенныхРасходов.Свернуть("Организация,СчетФактура,НДСВключенВСтоимость,ВидЦенности,СчетУчетаНДС,СтавкаНДС"+
			",Субконто1,Субконто2,Субконто3,СчетЗатрат,СтатьяЗатрат,КорПодразделениеОрганизации","Стоимость, НДС");
			
			Для каждого СтрокаКР Из ТаблицаКосвенныхРасходов Цикл
				СтрокаКР.Стоимость = СтрокаКР.Стоимость - СтрокаКР.НДС;
			КонецЦикла;
			ТаблицаКосвенныхРасходов.Колонки.Стоимость.Имя = "СуммаБезНДС";
			ТаблицаКосвенныхРасходов.Колонки.КорПодразделениеОрганизации.Имя = "ПодразделениеЗатрат";
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКосвенныхРасходов,ТаблицаДвижений_НДСКосвенныеРасходы);
			
			Движения.НДСКосвенныеРасходы.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаДвижений_НДСКосвенныеРасходы;
			Движения.НДСКосвенныеРасходы.ВыполнитьПриход();
			
		КонецЕсли;
		
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		/////////////////////////////////////////////////////////////////////////////////
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// {УчетДоходовИРасходовИП
// Формирование движения по регистрам индивидуального предпринимателя.
//
Процедура ДвиженияПоРегистрамИПРегл(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	//Списание по партиям в налоговом учете предпринимателя
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		
		ТаблицаПоМатериалам.Колонки.Добавить("СчетЗатрат");
		ТаблицаПоМатериалам.Колонки.Добавить("НоменклатурнаяГруппа");
		ТаблицаПоМатериалам.Колонки.Добавить("СтатьяЗатрат");
		
		ТаблицаМатериалов = ТаблицаПоМатериалам.СкопироватьКолонки();
		
		МассивКоэф = Новый Массив;
		МассивКоэфПартии = Новый Массив;
		
		Для Каждого СтрокаТЗ Из ТаблицаПоМатериалам Цикл
			
			МассивКоэф.Очистить();
			Для Каждого СтрокаНапр Из СтрокаТЗ.СпособОтраженияРасходов.Способы Цикл
				МассивКоэф.Добавить(СтрокаНапр.Коэффициент);
			КонецЦикла;
			
			МассивКоличества = ?(НЕ ЗначениеЗаполнено(СтрокаТЗ.Количество), Неопределено, ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЗ.Количество, МассивКоэф, 3));
			МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЗ.СписанныеПартии.Итог("СуммаСписания"), МассивКоэф, 2);
			
			Для Каждого СтрокаНапр Из СтрокаТЗ.СпособОтраженияРасходов.Способы Цикл
				
				НоваяСтрока = ТаблицаМатериалов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				
				НоваяСтрока.СчетЗатрат               = СтрокаНапр.СчетЗатрат;
				НоваяСтрока.Количество               = ?(ЗначениеЗаполнено(МассивКоличества), МассивКоличества[СтрокаНапр.НомерСтроки - 1], 0);
				
				Для НомерСубконто = 1 по 3 Цикл
					ЗначениеСубконто = СтрокаНапр["Субконто"+НомерСубконто];
					ТипСубконто = ТипЗнч(ЗначениеСубконто);
					Если ТипСубконто = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						НоваяСтрока.НоменклатурнаяГруппа = ЗначениеСубконто;
					КонецЕсли;
					
					Если ТипСубконто = Тип("СправочникСсылка.СтатьиЗатрат") ИЛИ ТипСубконто = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") ИЛИ ТипСубконто = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
						НоваяСтрока.СтатьяЗатрат = ЗначениеСубконто;
					КонецЕсли;
				КонецЦикла;
				
				СтрокаПартии = СтрокаТЗ.СписанныеПартии.Скопировать();
				
				МассивКоэфПартии.Очистить();
				Для Каждого СписаннаяПартия Из СтрокаПартии Цикл
					МассивКоэфПартии.Добавить(СписаннаяПартия.Количество);
				КонецЦикла;
				
				МассивКоличестваПартии = ?(НЕ ЗначениеЗаполнено(НоваяСтрока.Количество), Неопределено, ОбщегоНазначения.РаспределитьПропорционально(НоваяСтрока.Количество, МассивКоэфПартии, 3));
				СуммаПартии = ?(ЗначениеЗаполнено(МассивСумм), МассивСумм[СтрокаНапр.НомерСтроки - 1], 0);
				МассивСуммПартии = ОбщегоНазначения.РаспределитьПропорционально(СуммаПартии, МассивКоэфПартии, 2);
				
				Для Каждого СписаннаяПартия Из СтрокаПартии Цикл
					СписаннаяПартия.Количество = ?(ЗначениеЗаполнено(МассивКоличестваПартии), МассивКоличестваПартии[СтрокаПартии.Индекс(СписаннаяПартия)], 0);
					СписаннаяПартия.СуммаСписания = ?(ЗначениеЗаполнено(МассивСуммПартии), МассивСуммПартии[СтрокаПартии.Индекс(СписаннаяПартия)], 0);
				КонецЦикла;
				
				НоваяСтрока.СписанныеПартии = СтрокаПартии;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ТаблицаМатериалов.Колонки.Добавить("Продукция");
		ТаблицаМатериалов.ЗагрузитьКолонку(ТаблицаМатериалов.ВыгрузитьКолонку("СтатьяЗатрат"), "Продукция");
		
		СтоимостьПродукции = ДоходыИРасходыПредпринимателя.СписаниеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, 2, ТаблицаМатериалов, "НоменклатурнаяГруппа", "СчетУчета", "СчетЗатрат", "СтатьяЗатрат",, Отказ);
		
		ПолученоПродукции = ТаблицаМатериалов.Скопировать(,"Номенклатура,СчетЗатрат,НоменклатурнаяГруппа, Количество");
		ПолученоПродукции.Свернуть("Номенклатура,СчетЗатрат,НоменклатурнаяГруппа", "Количество");
		
		ДоходыИРасходыПредпринимателя.ПоступлениеПродукции(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, ПолученоПродукции, "СчетЗатрат",, "НоменклатурнаяГруппа", "Номенклатура", СтоимостьПродукции);
	КонецЕсли;
	
КонецПроцедуры
// }УчетДоходовИРасходовИП

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события ОбработкаПроведения
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СтруктураШапкиДокумента = ПроверкаРеквизитов(Отказ);
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Движения по документу.
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(Основание)
	
	Счет10_09   = ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности;
	Счет10_11_2 = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Организация              = Основание.Организация;
		Склад                    = Основание.Склад;
		
		// {ОбособленныеПодразделения
		ПодразделениеОрганизации = Основание.ПодразделениеОрганизации;
		// }ОбособленныеПодразделения 
		
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			
			СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, ТекСтрокаТовары.Номенклатура, Склад);
			
			Если ЗначениеЗаполнено(ТекСтрокаТовары.СчетУчета)
				И (СчетаУчета.СчетУчета = Счет10_09 ИЛИ ТекСтрокаТовары.СчетУчета.ПринадлежитЭлементу(Счет10_09)) Тогда
				
				НоваяСтрока = ИнвентарьИХозяйственныеПринадлежности.Добавить();
				
			ИначеЕсли ЗначениеЗаполнено(СчетаУчета.СчетПередачи)
				И (СчетаУчета.СчетПередачи = Счет10_11_2 ИЛИ СчетаУчета.СчетПередачи.ПринадлежитЭлементу(Счет10_11_2)) Тогда
				
				НоваяСтрока = Спецоснастка.Добавить();
				НоваяСтрока.СчетПередачи = СчетаУчета.СчетПередачи;
				
			Иначе
				
				НоваяСтрока = Спецодежда.Добавить();
				НоваяСтрока.СчетПередачи = СчетаУчета.СчетПередачи;
				
			КонецЕсли;
			
			НоваяСтрока.Количество    = ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура  = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ОтражениеВУСН = ТекСтрокаТовары.ОтражениеВУСН;
			НоваяСтрока.СчетУчета     = ТекСтрокаТовары.СчетУчета;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
