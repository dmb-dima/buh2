Перем мПоддержкаПБУ18;
Перем ОтражениеВУчете;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Заполняет набор записей по переданным данным расчета НДФЛ
//
// Параметры: 
//  НаборЗаписей - набор записей регистра НДФЛРасчетыСБюджетом
//	ДанныеНДФЛ - таблица значений - данные расчета НДФЛ
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымНДФЛ(НаборЗаписей, ДанныеНДФЛ, Перерасчет = Ложь, ФизлицаСписок = Неопределено)
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ПодразделениеОрганизации");

	// строим соответствие физлиц, по  которым считается НДФЛ и индексов их строк табличной части НДФЛ
	РаботникиДляРасчетаНДФЛ = Новый Соответствие;
	РасчетПоФизлицу = Ложь;
	Если ФизлицаСписок <> Неопределено И Не Перерасчет Тогда
		// расчет по одному физлицу
		РасчетПоФизлицу = Истина;
		РаботникиДляРасчетаНДФЛ.Вставить(ФизлицаСписок[0].Значение);
		СтруктураПоиска = Новый Структура("ФизЛицо", ФизлицаСписок[0].Значение);
		// запоминаем позицию физлица в табличной части
		ИндексСтрокиТаблицыНДФЛ = НеОпределено;
		МассивСтрок = НДФЛ.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТабличнойЧасти Из МассивСтрок Цикл
			Если ИндексСтрокиТаблицыНДФЛ = НеОпределено Тогда
				ИндексСтрокиТаблицыНДФЛ = СтрокаТабличнойЧасти.НомерСтроки - 1;
			КонецЕсли;
			НДФЛ.Удалить(СтрокаТабличнойЧасти);
		КонецЦикла;
		Если ИндексСтрокиТаблицыНДФЛ = НеОпределено Тогда
			ИндексСтрокиТаблицыНДФЛ = 0;
		КонецЕсли;
			
	ИначеЕсли ФизлицаСписок <> Неопределено И Перерасчет Тогда
		// это перерасчет
		Для Каждого ЭлементСписка Из ФизлицаСписок Цикл
			РаботникиДляРасчетаНДФЛ.Вставить(ЭлементСписка.Значение);
		КонецЦикла;
	Иначе //расчет всего документа
		Для Каждого Строка Из НДФЛ Цикл
			РаботникиДляРасчетаНДФЛ.Вставить(Строка.Физлицо);
		КонецЦикла;
		// очистим результаты расчета НДФЛ, которые находятся в табличной части документа
		НДФЛ.Очистить();
		
	КонецЕсли;
	
	СтруктураПоискаПодразделения = Новый Структура("Физлицо,Период");
	
	
	Для каждого СтрокаДанных Из ДанныеНДФЛ Цикл
		
			
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаДанных);
			Строки = НДФЛ.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				СтрокаНДФЛ = Строки[0];
			Иначе
				СтрокаНДФЛ = НДФЛ.Добавить();
			КонецЕсли;
		Иначе
			Если РасчетПоФизлицу Тогда
				СтрокаНДФЛ = НДФЛ.Вставить(ИндексСтрокиТаблицыНДФЛ);
				ИндексСтрокиТаблицыНДФЛ = ИндексСтрокиТаблицыНДФЛ+1;
			Иначе
				СтрокаНДФЛ = НДФЛ.Добавить();
			КонецЕсли;
		КонецЕсли;
		РаботникиДляРасчетаНДФЛ.Удалить(СтрокаДанных.ФизЛицо);
			
		
		
		ЗаполнитьЗначенияСвойств(СтрокаНДФЛ, СтрокаДанных);
		
	КонецЦикла;
	
	
	// дозаполним НДФЛ
	Для Каждого Элемент Из РаботникиДляРасчетаНДФЛ Цикл
		НоваяСтрока = НДФЛ.Добавить();
		НоваяСтрока.ФизЛицо = Элемент.Ключ;
		НоваяСтрока.МесяцНалоговогоПериода = НачалоМесяца(ПериодРегистрации);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымНДФЛ()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам
// 
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Логическое - удалось ли выполнить автоматическое заполнение документа
//
Функция Автозаполнение(ПостроительЗапроса = Неопределено, ТолькоВычеты = Ложь) Экспорт
	
	// АВТОЗАПОЛНЕНИЕ ТЧ "Начисления"
	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Все виды авторских 2201-2209
	СписокАвторскихВознаграждений = Новый СписокЗначений();
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2201);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2202);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2203);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2204);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2205);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2206);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2207);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2208);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2209);
	
	ВычетыСт217 = Новый СписокЗначений;
	ВычетыСт217.Добавить(Справочники.ВычетыНДФЛ.Код501);
	ВычетыСт217.Добавить(Справочники.ВычетыНДФЛ.Код502);
	ВычетыСт217.Добавить(Справочники.ВычетыНДФЛ.Код503);
	ВычетыСт217.Добавить(Справочники.ВычетыНДФЛ.Код504);
	ВычетыСт217.Добавить(Справочники.ВычетыНДФЛ.Код505);
	ВычетыСт217.Добавить(Справочники.ВычетыНДФЛ.Код506);
	ВычетыСт217.Добавить(Справочники.ВычетыНДФЛ.Код507);
	
	ДоходыП28Ст217 = Новый Массив;
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2761);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2720);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2730);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2740);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2760);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2770);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2790);
	
	// Сначала определим набор сотрудников, по которым нужно заполнить документ
	//	в переменной "Отличие в запросах" 
	//	строится часть запроса, отвечающая за то, чтобы были включены работники,
	//	удовлетворяющие выбранному в форме методу заполнения документа
	Если ПостроительЗапроса = Неопределено Тогда
		
		Запрос = Новый Запрос;
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("парамНачало" , ПериодРегистрации);
		Запрос.УстановитьПараметр("парамКонец" , КонецМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("парамОрганизация" , Организация);
		Запрос.УстановитьПараметр("парамГоловнаяОрганизация" , ГоловнаяОрганизация);
		Запрос.УстановитьПараметр("парамПодразделение" , ПодразделениеОрганизации);
		Запрос.УстановитьПараметр("СписокАвторскихВознаграждений" , СписокАвторскихВознаграждений);
		Запрос.УстановитьПараметр("ДоходПоУмолчанию" , Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию);
		Запрос.УстановитьПараметр("БезДохода" , Справочники.ДоходыНДФЛ.ПустаяСсылка());
		Запрос.УстановитьПараметр("Доход2720" , Справочники.ДоходыНДФЛ.Код2720);
		Запрос.УстановитьПараметр("Доход2730" , Справочники.ДоходыНДФЛ.Код2730);
		Запрос.УстановитьПараметр("Доход2740" , Справочники.ДоходыНДФЛ.Код2740);
		Запрос.УстановитьПараметр("Доход2760" , Справочники.ДоходыНДФЛ.Код2760);
		Запрос.УстановитьПараметр("Доход2762" , Справочники.ДоходыНДФЛ.МатпомощьПриРожденииРебенка);
		Запрос.УстановитьПараметр("Доход2770" , Справочники.ДоходыНДФЛ.Код2770);
		Запрос.УстановитьПараметр("Доход2790" , Справочники.ДоходыНДФЛ.Код2790);
		Запрос.УстановитьПараметр("Вычет501" , Справочники.ВычетыНДФЛ.Код501);
		Запрос.УстановитьПараметр("Вычет502" , Справочники.ВычетыНДФЛ.Код502);
		Запрос.УстановитьПараметр("Вычет503" , Справочники.ВычетыНДФЛ.Код503);
		Запрос.УстановитьПараметр("Вычет504" , Справочники.ВычетыНДФЛ.Код504);
		Запрос.УстановитьПараметр("Вычет505" , Справочники.ВычетыНДФЛ.Код505);
		Запрос.УстановитьПараметр("Вычет506" , Справочники.ВычетыНДФЛ.Код506);
		Запрос.УстановитьПараметр("Вычет508" , Справочники.ВычетыНДФЛ.МатпомощьПриРожденииРебенка);
		Запрос.УстановитьПараметр("Вычет405" , Справочники.ВычетыНДФЛ.Код405);
		Запрос.УстановитьПараметр("БезВычета" , Справочники.ВычетыНДФЛ.ПустаяСсылка());
		
		Запрос.УстановитьПараметр("ДоходыП28Ст217",			ДоходыП28Ст217);
		Запрос.УстановитьПараметр("ВычетыСт217",			ВычетыСт217);
		Запрос.УстановитьПараметр("парамНачалоГода",		НачалоГода(ПериодРегистрации));
		Запрос.УстановитьПараметр("парамКонецГода",			КонецГода(ПериодРегистрации));
		Запрос.УстановитьПараметр("парамПериодРегистрации",	НачалоМесяца(ПериодРегистрации));
		
		Если ПодразделениеОрганизации.Пустая() Тогда
			УсловиеНаПодразделение = " И ОбособленноеПодразделение = &парамОрганизация";
		Иначе
			УсловиеНаПодразделение = " И ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделение)";
		КонецЕсли;
		ОтличиеВЗапросах = 
		"ВЫБРАТЬ
		|			ДвиженияРаботников.Сотрудник.Физлицо КАК Физлицо,
		|			ДвиженияРаботников.Сотрудник КАК Сотрудник,
		|			ДвиженияРаботников.Период КАК Период,
		|			ДвиженияРаботников.Подходит КАК Подходит,
		|			ДвиженияРаботников.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|			ДвиженияРаботников.Должность КАК Должность
		|		ИЗ
		|			(ВЫБРАТЬ
		|				РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
		|				РаботникиОрганизации.Сотрудник КАК Сотрудник,
		|				&парамНачало КАК Период,
		|				РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|				ИСТИНА КАК Подходит,
		|				РаботникиОрганизации.Должность КАК Должность
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачало, Организация = &парамГоловнаяОрганизация) КАК РаботникиОрганизации
		|			ГДЕ
		|				РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) " + УсловиеНаПодразделение + "
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				РаботникиОрганизации.Сотрудник.Физлицо,
		|				РаботникиОрганизации.Сотрудник,
		|				РаботникиОрганизации.Период,
		|				РаботникиОрганизации.ПодразделениеОрганизации,
		|				ВЫБОР
		|					КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ,
		|				РаботникиОрганизации.Должность
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|			ГДЕ
		|				РаботникиОрганизации.Период > &парамНачало
		|				И РаботникиОрганизации.Период <= &парамКонец
		|				" + УсловиеНаПодразделение + ") КАК ДвиженияРаботников";
		
		
	Иначе
		ТекстЗапросаПоСпискуРаботников = ПостроительЗапроса.Текст;
		ПостроительЗапроса.Параметры.Вставить("парамГоловнаяОрганизация" , ГоловнаяОрганизация);
		ПостроительЗапроса.Параметры.Вставить("парамНачало" , НачалоМесяца(ПериодРегистрации));
		ПостроительЗапроса.Параметры.Вставить("парамКонец" , КонецМесяца(ПериодРегистрации));
		ПостроительЗапроса.Параметры.Вставить("парамОрганизация" , Организация);
		ПостроительЗапроса.Параметры.Вставить("СписокАвторскихВознаграждений" , СписокАвторскихВознаграждений);
		ПостроительЗапроса.Параметры.Вставить("ДоходПоУмолчанию" , Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию);
		ПостроительЗапроса.Параметры.Вставить("БезДохода" , Справочники.ДоходыНДФЛ.ПустаяСсылка());
		ПостроительЗапроса.Параметры.Вставить("Доход2720" , Справочники.ДоходыНДФЛ.Код2720);
		ПостроительЗапроса.Параметры.Вставить("Доход2730" , Справочники.ДоходыНДФЛ.Код2730);
		ПостроительЗапроса.Параметры.Вставить("Доход2740" , Справочники.ДоходыНДФЛ.Код2740);
		ПостроительЗапроса.Параметры.Вставить("Доход2760" , Справочники.ДоходыНДФЛ.Код2760);
		ПостроительЗапроса.Параметры.Вставить("Доход2762" , Справочники.ДоходыНДФЛ.МатпомощьПриРожденииРебенка);
		ПостроительЗапроса.Параметры.Вставить("Доход2770" , Справочники.ДоходыНДФЛ.Код2770);
		ПостроительЗапроса.Параметры.Вставить("Доход2790" , Справочники.ДоходыНДФЛ.Код2790);
		ПостроительЗапроса.Параметры.Вставить("Вычет501" , Справочники.ВычетыНДФЛ.Код501);
		ПостроительЗапроса.Параметры.Вставить("Вычет502" , Справочники.ВычетыНДФЛ.Код502);
		ПостроительЗапроса.Параметры.Вставить("Вычет503" , Справочники.ВычетыНДФЛ.Код503);
		ПостроительЗапроса.Параметры.Вставить("Вычет504" , Справочники.ВычетыНДФЛ.Код504);
		ПостроительЗапроса.Параметры.Вставить("Вычет505" , Справочники.ВычетыНДФЛ.Код505);
		ПостроительЗапроса.Параметры.Вставить("Вычет506" , Справочники.ВычетыНДФЛ.Код506);
		ПостроительЗапроса.Параметры.Вставить("Вычет508" , Справочники.ВычетыНДФЛ.МатпомощьПриРожденииРебенка);
		ПостроительЗапроса.Параметры.Вставить("Вычет405" , Справочники.ВычетыНДФЛ.Код405);
		ПостроительЗапроса.Параметры.Вставить("БезВычета" , Справочники.ВычетыНДФЛ.ПустаяСсылка());
		
		ПостроительЗапроса.Параметры.Вставить("ДоходыП28Ст217",			ДоходыП28Ст217);
		ПостроительЗапроса.Параметры.Вставить("ВычетыСт217",			ВычетыСт217);
		ПостроительЗапроса.Параметры.Вставить("парамНачалоГода",		НачалоГода(ПериодРегистрации));
		ПостроительЗапроса.Параметры.Вставить("парамКонецГода",			КонецГода(ПериодРегистрации));
		ПостроительЗапроса.Параметры.Вставить("парамПериодРегистрации",	НачалоМесяца(ПериодРегистрации));
		
		ТекстЗапросаПоСпискуРаботников = СтрЗаменить(ТекстЗапросаПоСпискуРаботников,"РАЗРЕШЕННЫЕ","");
		ТекстЗапросаПоСпискуРаботников = СтрЗаменить(ТекстЗапросаПоСпискуРаботников,"РаботникиОрганизации.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния","ВЫБОР КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Подходит");
		ТекстЗапросаПоСпискуРаботников = Лев(ТекстЗапросаПоСпискуРаботников, Найти(ТекстЗапросаПоСпискуРаботников,"УПОРЯДОЧИТЬ") - 1);
		ОтличиеВЗапросах = 
		"ВЫБРАТЬ
		|			СписокРаботников.Сотрудник.ФизЛицо КАК ФизЛицо,
		|			СписокРаботников.Сотрудник КАК Сотрудник,
		|			ДвиженияРаботников.Период КАК Период,
		|			ДвиженияРаботников.Подходит КАК Подходит,
		|			ДвиженияРаботников.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|			ДвиженияРаботников.Должность КАК Должность
		|		ИЗ
		|			(" + ТекстЗапросаПоСпискуРаботников + ") КАК СписокРаботников
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
		|					РаботникиОрганизации.Сотрудник КАК Сотрудник,
		|					&парамНачало КАК Период,
		|					ИСТИНА КАК Подходит,
		|					РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|					РаботникиОрганизации.Должность КАК Должность
		|				ИЗ
		|					РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачало, Организация = &парамГоловнаяОрганизация) КАК РаботникиОрганизации
		|				ГДЕ
		|					РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					И РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
		|				
		|				ОБЪЕДИНИТЬ ВСЕ
		|				
		|				ВЫБРАТЬ
		|					РаботникиОрганизации.Сотрудник.Физлицо,
		|					РаботникиОрганизации.Сотрудник,
		|					РаботникиОрганизации.Период,
		|					ВЫБОР
		|						КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ,
		|					РаботникиОрганизации.ПодразделениеОрганизации,
		|					РаботникиОрганизации.Должность
		|				ИЗ
		|					РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|				ГДЕ
		|					РаботникиОрганизации.Период > &парамНачало
		|					И РаботникиОрганизации.Период <= &парамКонец
		|					И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
		|					И РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация) КАК ДвиженияРаботников
		|				ПО СписокРаботников.Сотрудник = ДвиженияРаботников.Сотрудник
		|					";
		
	КонецЕсли;
	
	Если ТолькоВычеты Тогда
		Запрос.УстановитьПараметр("Ссылка" , Ссылка);
		ТекстАвтозаполнение = 
		"ВЫБРАТЬ
		|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник.Физлицо КАК Физлицо,
		|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник,
		|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Начислено КАК Начислено,
		|		НачислениеЗарплатыРаботникамОрганизацийНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|		НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета КАК ВидРасчета,
		|		НачислениеЗарплатыРаботникамОрганизацийНачисления.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
		|		НачислениеЗарплатыРаботникамОрганизацийНачисления.КодВычета КАК КодВычета,
		|		НачислениеЗарплатыРаботникамОрганизацийНачисления.СуммаВычета КАК СуммаВычета,
		|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование,
		|		НачислениеЗарплатыРаботникамОрганизацийНачисления.СевернаяНадбавка КАК НачисленоСевернаяНадбавка,
		|		НачислениеЗарплатыРаботникамОрганизацийНачисления.РайонныйКоэффициент КАК НачисленоРайонныйКоэффициент,
		|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Результат КАК Результат
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
		|	ГДЕ
		|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка = &Ссылка";
	Иначе
		ТекстАвтозаполнение = 
		"	ВЫБРАТЬ
		|		ДвиженияРаботников.Должность,
		|		ДвиженияРаботников.ПодразделениеОрганизации,
		|		МаксДаты.Сотрудник.ФизЛицо КАК Физлицо,
		|		МаксДаты.Сотрудник КАК Сотрудник,
		|		МаксДаты.ФизЛицо.Наименование КАК ФизлицоНаименование,
		|		МаксДаты.ВидРасчетаИзмерение КАК ВидРасчета,
		|		МаксДаты.Размер КАК Результат,
		|		МаксДаты.ВидРасчетаИзмерение.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
		|		ВЫБОР
		|			КОГДА МаксДаты.ВидРасчетаИзмерение.КодДоходаНДФЛ = &ДоходПоУмолчанию
		|				ТОГДА &БезВычета
		|			КОГДА МаксДаты.ВидРасчетаИзмерение.КодДоходаНДФЛ = &БезДохода
		|				ТОГДА &БезВычета
		|			КОГДА МаксДаты.ВидРасчетаИзмерение.КодДоходаНДФЛ = &Доход2720
		|				ТОГДА &Вычет501
		|			КОГДА МаксДаты.ВидРасчетаИзмерение.КодДоходаНДФЛ = &Доход2730
		|				ТОГДА &Вычет502
		|			КОГДА МаксДаты.ВидРасчетаИзмерение.КодДоходаНДФЛ = &Доход2740
		|				ТОГДА &Вычет505
		|			КОГДА МаксДаты.ВидРасчетаИзмерение.КодДоходаНДФЛ = &Доход2760
		|			ТОГДА &Вычет503
		|			КОГДА МаксДаты.ВидРасчетаИзмерение.КодДоходаНДФЛ = &Доход2770
		|				ТОГДА &Вычет504
		|			КОГДА МаксДаты.ВидРасчетаИзмерение.КодДоходаНДФЛ = &Доход2790
		|				ТОГДА &Вычет506
		|			КОГДА МаксДаты.ВидРасчетаИзмерение.КодДоходаНДФЛ = &Доход2762
		|				ТОГДА &Вычет508
		|			КОГДА МаксДаты.ВидРасчетаИзмерение.КодДоходаНДФЛ В (&СписокАвторскихВознаграждений)
		|				ТОГДА &Вычет405
		|			ИНАЧЕ &БезВычета
		|		КОНЕЦ КАК КодВычета,
		|		0 КАК СуммаВычета,
		|		МаксДаты.Период КАК Период
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ПланНачНеизвПодр.Сотрудник.ФизЛицо КАК ФизЛицо,
		|			ПланНачНеизвПодр.Сотрудник КАК Сотрудник,
		|			ПланНачНеизвПодр.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
		|			ПланНачНеизвПодр.Размер КАК Размер,
		|			ПланНачНеизвПодр.Подходит КАК Подходит,
		|			ПланНачНеизвПодр.Период КАК Период,
		|			МАКСИМУМ(ДвиженияРаботников.Период) КАК ДатаПодразделения
		|		ИЗ
		|			(ВЫБРАТЬ
		|				НачПлНеизвПодрИБезРазмеров.Подходит КАК Подходит,
		|				НачПлНеизвПодрИБезРазмеров.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
		|				НачПлНеизвПодрИБезРазмеров.Сотрудник.ФизЛицо КАК ФизЛицо,
		|				НачПлНеизвПодрИБезРазмеров.Сотрудник КАК Сотрудник,
		|				НачПлНеизвПодрИБезРазмеров.Период КАК Период,
		|				НачисленияПлановыеНаНачалоПлюсНовые.Размер КАК Размер
		|			ИЗ
		|				(ВЫБРАТЬ
		|					ДвиженияРаботников.Подходит КАК Подходит,
		|					НачисленияПлановыеНаНачалоПлюсНовые.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
		|					НачисленияПлановыеНаНачалоПлюсНовые.Сотрудник.ФизЛицо КАК ФизЛицо,
		|					НачисленияПлановыеНаНачалоПлюсНовые.Сотрудник КАК Сотрудник,
		|					ЕСТЬNULL(ДвиженияРаботников.Период, НачисленияПлановыеНаНачалоПлюсНовые.Период) КАК Период,
		|					МАКСИМУМ(НачисленияПлановыеНаНачалоПлюсНовые.Период) КАК ПериодИзПлановыхНачисленийПодСокращение
		|				ИЗ
		|					(ВЫБРАТЬ
		|						&парамНачало КАК Период,
		|						НачисленияПлановыеСрезНаНачало.Сотрудник.ФизЛицо КАК ФизЛицо,
		|						НачисленияПлановыеСрезНаНачало.Сотрудник КАК Сотрудник,
		|						НачисленияПлановыеСрезНаНачало.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
		|						НачисленияПлановыеСрезНаНачало.Размер КАК Размер
		|					ИЗ
		|						РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&парамНачало, Организация = &парамГоловнаяОрганизация) КАК НачисленияПлановыеСрезНаНачало
		|					ГДЕ
		|						НачисленияПлановыеСрезНаНачало.Размер <> 0
		|					
		|					ОБЪЕДИНИТЬ ВСЕ
		|					
		|					ВЫБРАТЬ
		|						НачисленияПлановыеНовые.Период,
		|						НачисленияПлановыеНовые.Сотрудник.ФизЛицо,
		|						НачисленияПлановыеНовые.Сотрудник,
		|						НачисленияПлановыеНовые.ВидРасчетаИзмерение,
		|						НачисленияПлановыеНовые.Размер
		|					ИЗ
		|						РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияПлановыеНовые
		|					ГДЕ
		|						НачисленияПлановыеНовые.Период > &парамНачало
		|						И НачисленияПлановыеНовые.Период <= &парамКонец
		|						И НачисленияПлановыеНовые.Организация = &парамГоловнаяОрганизация
		|						И НачисленияПлановыеНовые.Размер <> 0) КАК НачисленияПлановыеНаНачалоПлюсНовые
		|						ЛЕВОЕ СОЕДИНЕНИЕ ("+ОтличиеВЗапросах+"
		|						ГДЕ
		|							ДвиженияРаботников.Подходит) КАК ДвиженияРаботников
		|						ПО ДвиженияРаботников.Сотрудник = НачисленияПлановыеНаНачалоПлюсНовые.Сотрудник
		|							И НачисленияПлановыеНаНачалоПлюсНовые.Период <= ДвиженияРаботников.Период
		|			
		|				СГРУППИРОВАТЬ ПО
		|					НачисленияПлановыеНаНачалоПлюсНовые.Сотрудник.ФизЛицо,
		|					НачисленияПлановыеНаНачалоПлюсНовые.Сотрудник,
		|					ЕСТЬNULL(ДвиженияРаботников.Период, НачисленияПлановыеНаНачалоПлюсНовые.Период),
		|					ДвиженияРаботников.Подходит,
		|					НачисленияПлановыеНаНачалоПлюсНовые.ВидРасчетаИзмерение) КАК НачПлНеизвПодрИБезРазмеров
		|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|						&парамНачало КАК Период,
		|						НачисленияПлановыеСрезНаНачало.Сотрудник.ФизЛицо КАК ФизЛицо,
		|						НачисленияПлановыеСрезНаНачало.Сотрудник КАК Сотрудник,
		|						НачисленияПлановыеСрезНаНачало.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
		|						НачисленияПлановыеСрезНаНачало.Размер КАК Размер
		|					ИЗ
		|						РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&парамНачало, Организация = &парамГоловнаяОрганизация) КАК НачисленияПлановыеСрезНаНачало
		|					ГДЕ
		|						НачисленияПлановыеСрезНаНачало.Размер <> 0
		|				
		|					ОБЪЕДИНИТЬ ВСЕ
		|				
		|					ВЫБРАТЬ
		|						НачисленияПлановыеНовые.Период,
		|						НачисленияПлановыеНовые.Сотрудник.ФизЛицо,
		|						НачисленияПлановыеНовые.Сотрудник,
		|						НачисленияПлановыеНовые.ВидРасчетаИзмерение,
		|						НачисленияПлановыеНовые.Размер
		|					ИЗ
		|						РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияПлановыеНовые
		|					ГДЕ
		|						НачисленияПлановыеНовые.Период > &парамНачало
		|						И НачисленияПлановыеНовые.Период <= &парамКонец
		|						И НачисленияПлановыеНовые.Организация = &парамГоловнаяОрганизация
		|						И НачисленияПлановыеНовые.Размер <> 0) КАК НачисленияПлановыеНаНачалоПлюсНовые
		|					ПО НачПлНеизвПодрИБезРазмеров.ВидРасчетаИзмерение = НачисленияПлановыеНаНачалоПлюсНовые.ВидРасчетаИзмерение
		|						И НачПлНеизвПодрИБезРазмеров.Сотрудник = НачисленияПлановыеНаНачалоПлюсНовые.Сотрудник
		|						И НачПлНеизвПодрИБезРазмеров.ПериодИзПлановыхНачисленийПодСокращение = НачисленияПлановыеНаНачалоПлюсНовые.Период) КАК ПланНачНеизвПодр
		|				ЛЕВОЕ СОЕДИНЕНИЕ ("+ОтличиеВЗапросах+"
		|				ГДЕ
		|					ДвиженияРаботников.Подходит) КАК ДвиженияРаботников
		|				ПО ПланНачНеизвПодр.Сотрудник = ДвиженияРаботников.Сотрудник
		|					И ПланНачНеизвПодр.Период >= ДвиженияРаботников.Период
		|	
		|		СГРУППИРОВАТЬ ПО
		|			ПланНачНеизвПодр.ВидРасчетаИзмерение,
		|			ПланНачНеизвПодр.Сотрудник.ФизЛицо,
		|			ПланНачНеизвПодр.Сотрудник,
		|			ПланНачНеизвПодр.Период,
		|			ПланНачНеизвПодр.Подходит,
		|			ПланНачНеизвПодр.Размер) КАК МаксДаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+ОтличиеВЗапросах+"
		|			ГДЕ
		|				ДвиженияРаботников.Подходит) КАК ДвиженияРаботников
		|			ПО МаксДаты.Сотрудник = ДвиженияРаботников.Сотрудник
		|				И МаксДаты.ДатаПодразделения = ДвиженияРаботников.Период";
		// чтобы избежать дублирование строк по прекращенным начислениям в связи с кадровым перемещением
		// обнулим суммы по видам расчетов, которые прекращены в те самые даты, попавшие в выборку
		ТекстАвтозаполнение = 
				"ВЫБРАТЬ
		|		АвтозаполнениеСНенулевымиОтменами.Должность,
		|		АвтозаполнениеСНенулевымиОтменами.ПодразделениеОрганизации,
		|		АвтозаполнениеСНенулевымиОтменами.ФизЛицо КАК Физлицо,
		|		АвтозаполнениеСНенулевымиОтменами.Сотрудник КАК Сотрудник,
		|		АвтозаполнениеСНенулевымиОтменами.ФизлицоНаименование,
		|		АвтозаполнениеСНенулевымиОтменами.ВидРасчета,
		|		ЕСТЬNULL(ИзмПлНачЗаПериод.Размер, АвтозаполнениеСНенулевымиОтменами.Результат) КАК Результат,
		|		АвтозаполнениеСНенулевымиОтменами.КодДоходаНДФЛ,
		|		АвтозаполнениеСНенулевымиОтменами.КодВычета,
		|		0 КАК СуммаВычета,
		|		АвтозаполнениеСНенулевымиОтменами.Период
		|		ИЗ
		|		("+ТекстАвтозаполнение+") КАК АвтозаполнениеСНенулевымиОтменами
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				НачисленияПлановыеНовые.Период КАК Период,
		|				НачисленияПлановыеНовые.Сотрудник.Физлицо КАК СотрудникФизлицо,
		|				НачисленияПлановыеНовые.Сотрудник КАК Сотрудник,
		|				НачисленияПлановыеНовые.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
		|				НачисленияПлановыеНовые.Размер КАК Размер
		|			ИЗ
		|				РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияПлановыеНовые
		|			ГДЕ
		|				НачисленияПлановыеНовые.Период > &парамНачало
		|				И НачисленияПлановыеНовые.Период <= &парамКонец
		|				И НачисленияПлановыеНовые.Организация = &парамГоловнаяОрганизация) КАК ИзмПлНачЗаПериод
		|			ПО АвтозаполнениеСНенулевымиОтменами.Сотрудник = ИзмПлНачЗаПериод.Сотрудник
		|				И АвтозаполнениеСНенулевымиОтменами.Период = ИзмПлНачЗаПериод.Период
		|				И АвтозаполнениеСНенулевымиОтменами.ВидРасчета = ИзмПлНачЗаПериод.ВидРасчетаИзмерение";
		// удалим строки, в которых получились нулевые суммы
		ТекстАвтозаполнение = 
				"ВЫБРАТЬ
		|		АвтозаполнениеСНулевымиОтменами.Должность,
		|		АвтозаполнениеСНулевымиОтменами.ПодразделениеОрганизации,
		|		АвтозаполнениеСНулевымиОтменами.ФизЛицо КАК Физлицо,
		|		АвтозаполнениеСНулевымиОтменами.Сотрудник КАК Сотрудник,
		|		АвтозаполнениеСНулевымиОтменами.ФизлицоНаименование,
		|		АвтозаполнениеСНулевымиОтменами.ВидРасчета,
		|		ВЫБОР 
		|			КОГДА 
		|				АвтозаполнениеСНулевымиОтменами.Сотрудник.Организация.РайонныйКоэффициентРФ > 1
		|			ТОГДА
		|				Выразить(АвтозаполнениеСНулевымиОтменами.Результат * (
		|					АвтозаполнениеСНулевымиОтменами.Сотрудник.Организация.РайонныйКоэффициентРФ - 1)КАК ЧИСЛО(15, 2))
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК НачисленоРайонныйКоэффициент,
		|		Выразить(АвтозаполнениеСНулевымиОтменами.Результат * ЕстьNULL(ПроцентыСеверныхНадбавокФизлиц.СевернаяНадбавка, 0) / 100 КАК ЧИСЛО(15, 2)) КАК НачисленоСевернаяНадбавка,
		|		АвтозаполнениеСНулевымиОтменами.Результат КАК Начислено,
		|		(ВЫБОР 
		|			КОГДА 
		|				АвтозаполнениеСНулевымиОтменами.Сотрудник.Организация.РайонныйКоэффициентРФ > 1 
		|			ТОГДА
		|				Выразить(АвтозаполнениеСНулевымиОтменами.Результат * (
		|					АвтозаполнениеСНулевымиОтменами.Сотрудник.Организация.РайонныйКоэффициентРФ - 1) КАК ЧИСЛО(15, 2))
		|			ИНАЧЕ 0
		|		КОНЕЦ 
		|		 + Выразить(АвтозаполнениеСНулевымиОтменами.Результат * ЕстьNULL(ПроцентыСеверныхНадбавокФизлиц.СевернаяНадбавка, 0) / 100 КАК ЧИСЛО(15, 2))
		|		 + АвтозаполнениеСНулевымиОтменами.Результат) КАК Результат,
		|		АвтозаполнениеСНулевымиОтменами.КодДоходаНДФЛ,
		|		АвтозаполнениеСНулевымиОтменами.КодВычета,
		|		0 КАК СуммаВычета,
		|		АвтозаполнениеСНулевымиОтменами.Период
		|		ИЗ
		|		("+ТекстАвтозаполнение+") КАК АвтозаполнениеСНулевымиОтменами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентСевернойНадбавкиФизЛиц.СрезПоследних(&парамПериодРегистрации) КАК ПроцентыСеверныхНадбавокФизлиц
		|			ПО ПроцентыСеверныхНадбавокФизЛиц.ФизЛицо = АвтозаполнениеСНулевымиОтменами.ФизЛицо
		|		ГДЕ
		|				АвтозаполнениеСНулевымиОтменами.Результат <> 0";

	КонецЕсли;
	
	// {ОбособленныеПодразделения
	ТекстАвтозаполнение = СтрЗаменить(
		ТекстАвтозаполнение,
		"АвтозаполнениеСНулевымиОтменами.Сотрудник.Организация.РайонныйКоэффициентРФ",
		"ВЫБОР КОГДА АвтозаполнениеСНулевымиОтменами.ПодразделениеОрганизации.ОбособленноеПодразделение
		|					ТОГДА АвтозаполнениеСНулевымиОтменами.ПодразделениеОрганизации.РайонныйКоэффициент
		|					ИНАЧЕ АвтозаполнениеСНулевымиОтменами.Сотрудник.Организация.РайонныйКоэффициентРФ 
		|				КОНЕЦ");
	// }ОбособленныеПодразделения 
	
	ОбщийТекстЗапроса = 
	"ВЫБРАТЬ
	|	Автозаполнение.ПодразделениеОрганизации,
	|	Автозаполнение.Сотрудник.Физлицо КАК Физлицо,
	|	Автозаполнение.Сотрудник КАК Сотрудник,
	|	Автозаполнение.ФизлицоНаименование,
	|	Автозаполнение.ВидРасчета,
	|	Автозаполнение.Начислено,
	|	Автозаполнение.НачисленоРайонныйКоэффициент КАК РайонныйКоэффициент,
	|	Автозаполнение.НачисленоСевернаяНадбавка КАК СевернаяНадбавка,
	|	Автозаполнение.Результат,
	|	Автозаполнение.КодДоходаНДФЛ,
	|	Автозаполнение.КодВычета,
	|	ВЫБОР
	|		КОГДА КодыДоходаСВычетами.КодДохода ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетВычетов,
	|	ЕСТЬNULL(СведенияОСкидках.ГодовойВычет, 0) КАК ГодовойВычет,
	|	ЕСТЬNULL(СведенияОСкидках.НормативЗатрат, 0) КАК НормативЗатрат,
	|	ЕСТЬNULL(НДФЛОбороты.СуммаВычетаОборот, 0) КАК СуммаВычетаОборот,
	|	ВЫБОР
	|		КОГДА Автозаполнение.КодВычета В (&ВычетыСт217)
	|			ТОГДА ВЫБОР
	|					КОГДА СведенияОСкидках.ГодовойВычет ЕСТЬ NULL 
	|						ТОГДА 0
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ЕСТЬNULL(НДФЛОбороты.СуммаВычетаОборот, 0) < СведенияОСкидках.ГодовойВычет
	|								ТОГДА ВЫБОР
	|										КОГДА Автозаполнение.Результат < СведенияОСкидках.ГодовойВычет - ЕСТЬNULL(НДФЛОбороты.СуммаВычетаОборот, 0)
	|											ТОГДА Автозаполнение.Результат
	|										ИНАЧЕ СведенияОСкидках.ГодовойВычет - ЕСТЬNULL(НДФЛОбороты.СуммаВычетаОборот, 0)
	|									КОНЕЦ
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА Автозаполнение.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код405)
	|				И НеРезиденты.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА Автозаполнение.Результат * СведенияОСкидках.НормативЗатрат / 100
	|		КОГДА Автозаполнение.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.МатпомощьПриРожденииРебенка)
	|			ТОГДА Автозаполнение.СуммаВычета
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВычета
	|	ИЗ
	|		("+ТекстАвтозаполнение+") КАК Автозаполнение
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			НДФЛВычетыПоДоходам.КодДохода КАК КодДохода
	|		ИЗ
	|			РегистрСведений.НДФЛВычетыПоДоходам КАК НДФЛВычетыПоДоходам) КАК КодыДоходаСВычетами
	|		ПО Автозаполнение.КодДоходаНДФЛ = КодыДоходаСВычетами.КодДохода
	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛСведенияОДоходах.Обороты(
	|		&парамНачалоГода,
	|		&парамКонец,
	|		,
	|		ПериодРегистрации <= &парамПериодРегистрации
	|		    И Организация = &парамОрганизация
	|		    И КодДохода В (&ДоходыП28Ст217)
	|		    И Физлицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		            РаботникиОрганизаций.Сотрудник.Физлицо
	|		        ИЗ
	|		            РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		        ГДЕ
	|		            РаботникиОрганизаций.Организация = &парамОрганизация)) КАК НДФЛОбороты
	|		ПО Автозаполнение.Физлицо = НДФЛОбороты.ФизЛицо
	|			И Автозаполнение.КодДоходаНДФЛ = НДФЛОбороты.КодДохода
	|			И (НДФЛОбороты.Организация = &парамОрганизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛВычетыПоДоходам.СрезПоследних(&парамНачалоГода, ) КАК СведенияОСкидках
	|		ПО СведенияОСкидках.КодДохода = Автозаполнение.КодДоходаНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ГражданствоФизЛицСрезПоследних.ФизЛицо КАК ФизЛицо
	|		ИЗ
	|			РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СрезПоследних(&парамКонецГода, Физлицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		            РаботникиОрганизаций.Сотрудник.Физлицо
	|		        ИЗ
	|		            РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		        ГДЕ
	|		            РаботникиОрганизаций.Организация = &парамОрганизация)) КАК ГражданствоФизЛицСрезПоследних
	|		ГДЕ
	|			ГражданствоФизЛицСрезПоследних.Статус = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)) КАК НеРезиденты
	|		ПО Автозаполнение.Физлицо = НеРезиденты.ФизЛицо
	
	|	УПОРЯДОЧИТЬ ПО
	|		ФизлицоНаименование,
	|		Физлицо,
	|		ВидРасчета";
	
	Если ПостроительЗапроса = Неопределено Тогда
		Запрос.Текст = ОбщийТекстЗапроса;
		НачисленияВыборка = Запрос.Выполнить().Выбрать();
	Иначе
		ПостроительЗапроса.Текст = ОбщийТекстЗапроса;
		ПостроительЗапроса.Выполнить();
		НачисленияВыборка = ПостроительЗапроса.Результат.Выбрать();
	КонецЕсли;
	
	Начисления.Очистить();
	НДФЛ.Очистить();
	
	// для заполнения табличной части НДФЛ
	РаботникиДляРасчетаНДФЛ = Новый Соответствие;
	
	Пока НачисленияВыборка.Следующий() Цикл
		РаботникиДляРасчетаНДФЛ.Вставить(НачисленияВыборка.Физлицо, 0);
		
		НоваяСтрока	=	Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НачисленияВыборка);
		
		// расчет вычетов для НДФЛ
		Если НачисленияВыборка.РасчетВычетов Тогда

			Если НачисленияВыборка.КодВычета = Справочники.ВычетыНДФЛ.МатпомощьПриРожденииРебенка и НачисленияВыборка.СуммаВычета = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("" + НачисленияВыборка.Физлицо + ": - укажите количество детей в графе ""Сумма вычета""");
			КонецЕсли;
			НоваяСтрока.СуммаВычета = НачисленияВыборка.СуммаВычета;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// заполним НДФЛ
	Для Каждого Элемент Из РаботникиДляРасчетаНДФЛ Цикл
		НоваяСтрока = НДФЛ.Добавить();
		НоваяСтрока.ФизЛицо = Элемент.Ключ;
		НоваяСтрока.МесяцНалоговогоПериода = НачалоМесяца(ПериодРегистрации);
	КонецЦикла;
	
	// записать для расчета НДФЛ
	Записать();
	
	// рассчитаем при заполнении
	РассчитатьНДФЛ();
	
КонецФункции

// Процедура рассчитывает НДФЛ
// и заполняет реквизиты табличной части
Процедура РассчитатьНДФЛ(Физлицо = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	Отказ = Ложь;
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
	КонецЦикла;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// сформируем и запишем доходы НДФЛ по начислениям документа
	НаборНДФЛСведенияОДоходах = РегистрыНакопления.НДФЛСведенияОДоходах.СоздатьНаборЗаписей();
	НаборНДФЛСведенияОДоходах.Отбор.Регистратор.Значение = Ссылка;
	НаборНДФЛСведенияОДоходах.Очистить();
	
	СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, НаборНДФЛСведенияОДоходах); // по начислениям
	
	// запишем доходы НДФЛ по начислениям документа
	НаборНДФЛСведенияОДоходах.Записать();
		
	// Составим текст запроса для выбора списка физлиц, по которым надо считать НДФЛ
	Если НЕ (Физлицо = Неопределено) Тогда
		СписокФизлицТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Работники.Физлицо КАК Физлицо
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК Работники
		|
		|ГДЕ
		|	Работники.Ссылка = &парамРегистратор и Работники.Физлицо = &парамФизлицо";
		
		ДополнительныеПараметрыЗапросаНДФЛ  = Новый Структура;
		ДополнительныеПараметрыЗапросаНДФЛ.Вставить("парамФизлицо", Физлицо);
	Иначе
		СписокФизлицТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Работники.Физлицо КАК Физлицо
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК Работники
		|
		|ГДЕ
		|	Работники.Ссылка = &парамРегистратор";
		
		ДополнительныеПараметрыЗапросаНДФЛ  = Неопределено;
	КонецЕсли;
	
	// получение результата НДФЛ по ставке 13 процентов
	// для него передается Организация, период и ссылка на регистратор
	ДанныеНДФЛ = ПроведениеРасчетов.ПолучитьДанныеНДФЛПоРегистратору(Неопределено, Неопределено, ПериодРегистрации, Организация, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, Ссылка, СписокФизлицТекст, ДополнительныеПараметрыЗапросаНДФЛ, , КомментироватьРасчет);

	Если ДанныеНДФЛ <> Неопределено Тогда
		Если НЕ (Физлицо = Неопределено) Тогда
			// считаем одно физлицо
			ФизлицаСписок = Новый СписокЗначений;
			ФизлицаСписок.Добавить(Физлицо);
		Иначе
			// считаем всех
			ФизлицаСписок = НеОпределено;
		КонецЕсли;
		ЗаполнитьНаборЗаписейПоДаннымНДФЛ(, ДанныеНДФЛ, ,ФизлицаСписок);
	КонецЕсли;
	
	// Удаляем движения
	НаборНДФЛСведенияОДоходах.Очистить();
	НаборНДФЛСведенияОДоходах.Записать();
	
КонецПроцедуры  // РассчитатьНДФЛ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизаций.Дата,
	|	НачислениеЗарплатыРаботникамОрганизаций.ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыРаботникамОрганизаций.Организация = &парамПустаяОрганизация
	|			ТОГДА &парамПустаяОрганизация
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НачислениеЗарплатыРаботникамОрганизаций.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|					ТОГДА НачислениеЗарплатыРаботникамОрганизаций.Организация
	|				ИНАЧЕ НачислениеЗарплатыРаботникамОрганизаций.Организация.ГоловнаяОрганизация
	|			КОНЕЦ
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	НачислениеЗарплатыРаботникамОрганизаций.Организация КАК ОбособленноеПодразделение,
	|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций
	|ГДЕ
	|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()


// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Физлицо = Неопределено)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);

	Запрос.УстановитьПараметр("парамФизлицо", Физлицо);
	Запрос.УстановитьПараметр("парамНеОтбиратьФизлицо", Физлицо = Неопределено);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиДокумента.Ссылка,
	|	СтрокиДокумента.НомерСтроки,
	|	СтрокиДокумента.Сотрудник КАК Сотрудник,
	|	СтрокиДокумента.Физлицо,
	|	СтрокиДокумента.ВидРасчета,
	|	СтрокиДокумента.Ссылка.ПериодРегистрации КАК ПериодДействия,
	|	СтрокиДокумента.Результат,
	|	СтрокиДокумента.ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТСтрокиНачислений
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК СтрокиДокумента
	|ГДЕ
	|	СтрокиДокумента.Ссылка = &ДокументСсылка
	|	И (&парамНеОтбиратьФизлицо
	|			ИЛИ СтрокиДокумента.Сотрудник.Физлицо = &парамФизлицо)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	
	// Основной запрос
	//		Сотрудники, для которых введены сводные данные об их графике
	// 
	//	Поля:
	//		НомерСтроки
	// 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиНачисления.Сотрудник КАК Сотрудник,
	|	СтрокиНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	СтрокиНачисления.Результат КАК Результат,
	|	СтрокиНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	ВТСтрокиНачислений КАК СтрокиНачисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()


// Формирует запрос по таблице "НДФЛ" документа
//
// Параметры: 
//	нет
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНДФЛ()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНДФЛ.НомерСтроки,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СтрокиНДФЛ.Налог,
	|	СтрокиНДФЛ.ПримененныйВычетЛичный,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетей,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидов,
	|	СтрокиНДФЛ.ФизЛицо КАК ФизЛицо,
	|	СтрокиНДФЛ.ПримененныйВычетИмущественныйРасход,
	|	СтрокиНДФЛ.ПримененныйВычетИмущественныйПроцентыПоКредитам,
	|	СтрокиНДФЛ.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании,
	|	СтрокиНДФЛ.ПодразделениеОрганизации,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейДвойной,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойной,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейДвойнойВторой,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиНДФЛ.НомерСтроки КАК НомерСтроки,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода,
	|	СтрокиНДФЛ.Налог,
	|	СтрокиНДФЛ.ПримененныйВычетЛичный,
	|	ВычетыФизлиц.КодВычетаЛичный КАК КодВычетаЛичный,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетей,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидов,
	|	СтрокиНДФЛ.ФизЛицо,
	|	СтрокиНДФЛ.ПримененныйВычетИмущественныйРасход,
	|	СтрокиНДФЛ.ПримененныйВычетИмущественныйПроцентыПоКредитам,
	|	СтрокиНДФЛ.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании,
	|	СтрокиНДФЛ.ПодразделениеОрганизации,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейДвойной,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойной,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейДвойнойВторой,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой
	|ИЗ
	|	ВТДанныеДокумента КАК СтрокиНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
	|			Периоды.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеДокумента КАК Периоды
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|				ПО Периоды.МесяцНалоговогоПериода >= ВычетыФизлиц.Период
	|					И Периоды.ФизЛицо = ВычетыФизлиц.Физлицо
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.НомерСтроки) КАК ДатыРегистра
	|		ПО СтрокиНДФЛ.НомерСтроки = ДатыРегистра.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|		ПО СтрокиНДФЛ.ФизЛицо = ВычетыФизлиц.Физлицо
	|			И (ДатыРегистра.ПериодСреза = ВычетыФизлиц.Период)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоНДФЛ()

// Формирует запрос по таблице "НДФЛ" документа
//
// Параметры: 
//	нет
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНДФЛУдержанный()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(СтрокиНДФЛ.Налог) КАК Налог,
	|	СтрокиНДФЛ.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНДФЛ.ФизЛицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(СтрокиНДФЛ.Налог) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоНДФЛУдержанный()

// Формирует запрос по таблице "НДФЛ" документа для расчета сумм НДФЛ к зачету
//
// Параметры: 
//	нет
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНДФЛКЗачету()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", КонецМесяца(ПериодРегистрации) + 1);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(СтрокиНДФЛ.Налог) КАК Налог,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) > ВЫБОР
	|				КОГДА СУММА(СтрокиНДФЛ.Налог) > 0
	|					ТОГДА СУММА(СтрокиНДФЛ.Налог)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|			ТОГДА СУММА(СтрокиНДФЛ.Налог)
	|		ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0)
	|	КОНЕЦ КАК НДФЛКЗачетуУчтено,
	|	СтрокиНДФЛ.ФизЛицо,
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13) КАК СтавкаНалогообложенияРезидента
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК СтрокиНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛКЗачету.Остатки(
	|		&ПериодРегистрации,
	|		Физлицо В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.ФизЛицо
	|				ИЗ
	|					Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ
	|				ГДЕ
	|					Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.Ссылка = &ДокументСсылка)
	|			И Организация = &Организация
	|			И СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)) КАК НДФЛКЗачету
	|		ПО НДФЛКЗачету.ФизЛицо = СтрокиНДФЛ.ФизЛицо
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНДФЛ.ФизЛицо,
	|	НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток
	|
	|ИМЕЮЩИЕ
	|	(СУММА(СтрокиНДФЛ.Налог) < 0
	|		ИЛИ ВЫБОР
	|			КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) > ВЫБОР
	|					КОГДА СУММА(СтрокиНДФЛ.Налог) > 0
	|						ТОГДА СУММА(СтрокиНДФЛ.Налог)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|				ТОГДА СУММА(СтрокиНДФЛ.Налог)
	|			ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0)
	|		КОНЕЦ <> 0)";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНДФЛКЗачету

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)
	
	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, по которой начисляется зарплата!", Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
	КонецЕсли;
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "НДФЛ" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""НДФЛ"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ);
	КонецЕсли;
	
	// месяц налогового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не задан месяц налогового периода!", Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНДФЛ()


Процедура ДобавитьСтрокуЛичныхВычетов(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписейСтандартныхВычетов, КодВычетаЛичный = Неопределено, СуммаВычета = Неопределено)
	
	Если КодВычетаЛичный = Неопределено Тогда
		КодВычетаЛичный = ВыборкаПоСтрокамДокумента.КодВычетаЛичный
	КонецЕсли;
	Если СуммаВычета = Неопределено Тогда
		СуммаВычета = ВыборкаПоСтрокамДокумента.ПримененныйВычетЛичный
	КонецЕсли;
	Если ЗначениеЗаполнено(КодВычетаЛичный) Тогда
		ДобавитьСтрокуВычетовПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, СуммаВычета, КодВычетаЛичный);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛ


Функция СформироватьЗапросПоЛичнымВычетам(Физлица = Неопределено)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПоВсемФизлицам", Физлица = Неопределено);
	Запрос.УстановитьПараметр("Физлица",		Физлица);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНДФЛ.НомерСтроки,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА СтрокиНДФЛ.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА СтрокиНДФЛ.Ссылка.Организация
	|		ИНАЧЕ СтрокиНДФЛ.Ссылка.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	СтрокиНДФЛ.ПримененныйВычетЛичный,
	|	СтрокиНДФЛ.ФизЛицо КАК ФизЛицо,
	|	СтрокиНДФЛ.ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|	И (&ПоВсемФизлицам
	|			ИЛИ СтрокиНДФЛ.ФизЛицо В (&Физлица))
	|	И СтрокиНДФЛ.ПримененныйВычетЛичный <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРегистра.НомерСтроки КАК НомерСтроки,
	|	ВычетыФизлиц.КодВычетаЛичный КАК КодВычетаЛичный
	|ПОМЕСТИТЬ ВТКодыЛичныхВычетов
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
	|		Периоды.ФизЛицо КАК ФизЛицо,
	|		Периоды.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		ВТДанныеДокумента КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|			ПО Периоды.МесяцНалоговогоПериода >= ВычетыФизлиц.Период
	|				И Периоды.ФизЛицо = ВычетыФизлиц.Физлицо
	|	ГДЕ
	|		Периоды.ПримененныйВычетЛичный <> 0
	|		И ВычетыФизлиц.КодВычетаЛичный <> ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.ФизЛицо,
	|		Периоды.НомерСтроки) КАК ДатыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|		ПО ДатыРегистра.ФизЛицо = ВычетыФизлиц.Физлицо
	|			И ДатыРегистра.ПериодСреза = ВычетыФизлиц.Период
	|ГДЕ
	|	ВычетыФизлиц.КодВычетаЛичный ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ГоловнаяОрганизация,
	|	ДанныеДокумента.ФизЛицо КАК ФизЛицо,
	|	ГОД(ДанныеДокумента.МесяцНалоговогоПериода) КАК НалоговыйПериод,
	|	СУММА(ДанныеДокумента.ПримененныйВычетЛичный) КАК ПримененныйВычетСторно,
	|	МАКСИМУМ(ДанныеДокумента.МесяцНалоговогоПериода) КАК МаксимальныйМесяцНалоговогоПериода
	|ПОМЕСТИТЬ ВТОтрицательныеВычетыЗаГод
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыЛичныхВычетов КАК ВычетыФизлиц
	|		ПО ДанныеДокумента.НомерСтроки = ВычетыФизлиц.НомерСтроки
	|ГДЕ
	|	ВычетыФизлиц.КодВычетаЛичный ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ФизЛицо,
	|	ДанныеДокумента.ГоловнаяОрганизация,
	|	ГОД(ДанныеДокумента.МесяцНалоговогоПериода)
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеДокумента.ПримененныйВычетЛичный) < 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ФизЛицо КАК ФизЛицо,
	|	ДанныеДокумента.НалоговыйПериод КАК НалоговыйПериод,
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодВычета,
	|	СУММА(НДФЛПредоставленныеСтандартныеВычетыФизЛиц.ПримененныйВычет) КАК РанееПримененныйВычет
	|ПОМЕСТИТЬ ВТУжеПредоставленныеВычеты
	|ИЗ
	|	ВТОтрицательныеВычетыЗаГод КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛПредоставленныеСтандартныеВычетыФизЛиц КАК НДФЛПредоставленныеСтандартныеВычетыФизЛиц
	|		ПО ДанныеДокумента.ФизЛицо = НДФЛПредоставленныеСтандартныеВычетыФизЛиц.ФизЛицо
	|			И ДанныеДокумента.ГоловнаяОрганизация = НДФЛПредоставленныеСтандартныеВычетыФизЛиц.Организация
	|			И (НДФЛПредоставленныеСтандартныеВычетыФизЛиц.МесяцНалоговогоПериода МЕЖДУ НАЧАЛОПЕРИОДА(ДанныеДокумента.МаксимальныйМесяцНалоговогоПериода, ГОД) И КОНЕЦПЕРИОДА(ДанныеДокумента.МаксимальныйМесяцНалоговогоПериода, МЕСЯЦ))
	|ГДЕ
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодВычета В (ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код103), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код104), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код105))
	|	И НДФЛПредоставленныеСтандартныеВычетыФизЛиц.Регистратор <> &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ФизЛицо,
	|	ДанныеДокумента.НалоговыйПериод,
	|	ДанныеДокумента.ПримененныйВычетСторно,
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодВычета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ФизЛицо КАК ФизЛицо,
	|	ДанныеДокумента.НалоговыйПериод КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТЕстьРанееПредоставленныеВычеты
	|ИЗ
	|	ВТОтрицательныеВычетыЗаГод КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУжеПредоставленныеВычеты КАК СтандартныеВычеты
	|		ПО ДанныеДокумента.ФизЛицо = СтандартныеВычеты.ФизЛицо
	|			И ДанныеДокумента.НалоговыйПериод = СтандартныеВычеты.НалоговыйПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ФизЛицо,
	|	ДанныеДокумента.НалоговыйПериод,
	|	ДанныеДокумента.ПримененныйВычетСторно
	|
	|ИМЕЮЩИЕ
	|	СУММА(СтандартныеВычеты.РанееПримененныйВычет) >= -ДанныеДокумента.ПримененныйВычетСторно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиНДФЛ.НомерСтроки КАК НомерСтроки,
	|	СтрокиНДФЛ.ПримененныйВычетЛичный
	|ИЗ
	|	ВТДанныеДокумента КАК СтрокиНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыЛичныхВычетов КАК ВычетыФизлиц
	|		ПО СтрокиНДФЛ.НомерСтроки = ВычетыФизлиц.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЕстьРанееПредоставленныеВычеты КАК СторнируемыеВычеты
	|		ПО СтрокиНДФЛ.ФизЛицо = СторнируемыеВычеты.ФизЛицо
	|			И (ГОД(СтрокиНДФЛ.МесяцНалоговогоПериода) = СторнируемыеВычеты.НалоговыйПериод)
	|ГДЕ
	|	СторнируемыеВычеты.ФизЛицо ЕСТЬ NULL 
	|	И ВычетыФизлиц.КодВычетаЛичный ЕСТЬ NULL 
	|	И СтрокиНДФЛ.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиНДФЛ.НомерСтроки КАК НомерСтроки,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода,
	|	СтрокиНДФЛ.ПримененныйВычетЛичный,
	|	ВычетыФизлиц.КодВычетаЛичный КАК КодВычетаЛичный,
	|	СтрокиНДФЛ.ФизЛицо,
	|	СтрокиНДФЛ.ПодразделениеОрганизации
	|ИЗ
	|	ВТДанныеДокумента КАК СтрокиНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыЛичныхВычетов КАК ВычетыФизлиц
	|		ПО СтрокиНДФЛ.НомерСтроки = ВычетыФизлиц.НомерСтроки
	|ГДЕ
	|	ВычетыФизлиц.КодВычетаЛичный ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СторнируемыеВычеты.ФизЛицо КАК ФизЛицо,
	|	СторнируемыеВычеты.НалоговыйПериод КАК НалоговыйПериод,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(СтрокиНДФЛ.ПримененныйВычетЛичный) КАК ПримененныйВычетЛичный,
	|	СтрокиНДФЛ.ПодразделениеОрганизации
	|ИЗ
	|	ВТЕстьРанееПредоставленныеВычеты КАК СторнируемыеВычеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК СтрокиНДФЛ
	|		ПО (ГОД(СтрокиНДФЛ.МесяцНалоговогоПериода) = СторнируемыеВычеты.НалоговыйПериод)
	|			И СторнируемыеВычеты.ФизЛицо = СтрокиНДФЛ.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	СторнируемыеВычеты.ФизЛицо,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода,
	|	СторнируемыеВычеты.НалоговыйПериод,
	|	СтрокиНДФЛ.ПодразделениеОрганизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	НалоговыйПериод,
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТУжеПредоставленныеВычеты.ФизЛицо КАК ФизЛицо,
	|	ВТУжеПредоставленныеВычеты.НалоговыйПериод КАК НалоговыйПериод,
	|	ВТУжеПредоставленныеВычеты.КодВычета,
	|	ВТУжеПредоставленныеВычеты.РанееПримененныйВычет
	|ИЗ
	|	ВТУжеПредоставленныеВычеты КАК ВТУжеПредоставленныеВычеты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	НалоговыйПериод";
	
	Возврат Запрос.ВыполнитьПакет();

КонецФункции // СформироватьЗапросПоЛичнымВычетам()


// По строке выборок из результатов запроса по документу формируем движения по регистрам вычетов по НДФЛ
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ШапкаДокумента		- выборка по данным шапки документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВычетовПоНДФЛ(ВыборкаПоСтрокамДокумента, ШапкаДокумента, ЭтоСтандартныйВычет, НаборЗаписей, ПримененныйВычет, КодВычета)
	
	Если ЭтоСтандартныйВычет Тогда
		
		Движение = Движения.НДФЛПредоставленныеСтандартныеВычетыФизЛиц.Добавить();
		
		// Свойства
		Движение.Период						= КонецМесяца(ШапкаДокумента.ПериодРегистрации);


		// Измерения
		Движение.Организация	 	   		= ШапкаДокумента.ГоловнаяОрганизация;
		Движение.ФизЛицо	 	 	  		= ВыборкаПоСтрокамДокумента.ФизЛицо;

		Движение.МесяцНалоговогоПериода		= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
		Движение.КодВычета	 	 	  		= КодВычета;
		
		// Ресурсы
		Движение.ПримененныйВычет			= ПримененныйВычет;




		// Реквизиты 
		Движение.ОбособленноеПодразделение	= ШапкаДокумента.ОбособленноеПодразделение;
		Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;


		
	Иначе

		
		Движение = Движения.НДФЛИмущественныеВычетыФизлиц.Добавить();
		// Свойства
		Движение.Период						= КонецМесяца(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация				= ШапкаДокумента.ГоловнаяОрганизация;
		Движение.Год					    = Год(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода);
		Движение.КодВычетаИмущественный     = КодВычета;
		
		// Ресурсы
		Движение.Размер						= ПримененныйВычет; 
		
		// Реквизиты 
		Движение.ОбособленноеПодразделение	= ШапкаДокумента.ОбособленноеПодразделение;
		Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛВычеты

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ВыборкаПоШапкеДокумента		- выборка по данным шапки документа
//	НаборЗаписей				- набор записей для НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей, НаборЗаписейСтандартныхВычетов, НаборЗаписейИмущественныхВычетов)
	
	Движение = НаборЗаписей.Добавить();
	
	// Свойства
	Движение.Период						= КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
	
	// Измерения
	Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.МесяцНалоговогоПериода     	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
	
	// Ресурсы
	Движение.Налог						= ВыборкаПоСтрокамДокумента.Налог;
	//Движение.ПримененныйВычетЛичный		= ВыборкаПоСтрокамДокумента.ПримененныйВычетЛичный;
	//Движение.ПримененныйВычетНаДетей	= ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетей;
	//Движение.ПримененныйВычетНаДетейИнвалидов = ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидов;
	
	// Реквизиты 
	Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ИсчисленоИзЗарплаты		= Истина;	
	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации; 
	
	//ТекущееПодразделение = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	//Если ВыборкаПоСтрокамДокумента.ПримененныйВычетЛичный <> 0 Тогда
	//	ДобавитьСтрокуВычетовПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетЛичный, ВыборкаПоСтрокамДокумента.КодВычетаЛичный, ТекущееПодразделение);
	//КонецЕсли;
	Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетей <> 0 Тогда
		ДобавитьСтрокуВычетовПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетей, Справочники.ВычетыНДФЛ.Код101);
	КонецЕсли;
	Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейДвойной <> 0 Тогда
		ДобавитьСтрокуВычетовПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейДвойной, Справочники.ВычетыНДФЛ.Код102);
	КонецЕсли;
	Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидов <> 0 Тогда
		ДобавитьСтрокуВычетовПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидов, Справочники.ВычетыНДФЛ.Код106);
	КонецЕсли;
	Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидовДвойной <> 0 Тогда
		ДобавитьСтрокуВычетовПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидовДвойной, Справочники.ВычетыНДФЛ.Код107);
	КонецЕсли;
	Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейДвойнойВторой <> 0 Тогда
		ДобавитьСтрокуВычетовПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейДвойнойВторой, Справочники.ВычетыНДФЛ.Код111);
	КонецЕсли;
	Если ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидовДвойнойВторой <> 0 Тогда
		ДобавитьСтрокуВычетовПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Истина, НаборЗаписейСтандартныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетНаДетейИнвалидовДвойнойВторой, Справочники.ВычетыНДФЛ.Код113);
	КонецЕсли;
	Если ВыборкаПоСтрокамДокумента.ПримененныйВычетИмущественныйРасход <> 0 Тогда
		ДобавитьСтрокуВычетовПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Ложь, НаборЗаписейИмущественныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетИмущественныйРасход, Справочники.ВычетыНДФЛ.Код311);
	КонецЕсли;
	Если ВыборкаПоСтрокамДокумента.ПримененныйВычетИмущественныйПроцентыПоКредитам <> 0 Тогда
		ДобавитьСтрокуВычетовПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Ложь, НаборЗаписейИмущественныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетИмущественныйПроцентыПоКредитам, Справочники.ВычетыНДФЛ.Код312);
	КонецЕсли;
	Если ВыборкаПоСтрокамДокумента.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании <> 0 Тогда
			ДобавитьСтрокуВычетовПоНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, Ложь, НаборЗаписейИмущественныхВычетов, ВыборкаПоСтрокамДокумента.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании, Справочники.ВычетыНДФЛ.Код318);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛ

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ВыборкаПоШапкеДокумента		- выборка по данным шапки документа
//	НаборЗаписей				- набор записей для НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНДФЛудержанный(ВыборкаСуммКУдержанию, ВыборкаПоСтрокамДокумента, ВыборкаПоНДФЛКЗачету, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	ОсталосьРаспределить = ВыборкаСуммКУдержанию.Налог; // положительная сумма исчисленного налога
	
	// учтем возможный зачет образовавшейся ранее переплаты налога
	ВыборкаПоНДФЛКЗачету.Сбросить();
	Если ВыборкаПоНДФЛКЗачету.НайтиСледующий(ВыборкаСуммКУдержанию.ФизЛицо,"ФизЛицо") Тогда
		ОсталосьРаспределить = ОсталосьРаспределить - ВыборкаПоНДФЛКЗачету.НДФЛКЗачетуУчтено;
	КонецЕсли;
	
	// распределим получившуюся сумму налога к удержанию по месяцам налогового периода 
	ВыборкаПоСтрокамДокумента.Сбросить();
	Пока ВыборкаПоСтрокамДокумента.НайтиСледующий(ВыборкаСуммКУдержанию.ФизЛицо,"ФизЛицо") Цикл
		
		Если ОсталосьРаспределить > 0 И ВыборкаПоСтрокамДокумента.Налог > 0 Тогда
			
			// расчет суммы удерживаемого налога
			ПогашаемаяСумма = Мин(ВыборкаПоСтрокамДокумента.Налог, ОсталосьРаспределить);
			ОсталосьРаспределить = ОсталосьРаспределить - ПогашаемаяСумма;
			
			Движение = НаборЗаписей.Добавить();
			
			// Свойства
			Движение.Период							= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.МесяцНалоговогоПериода     	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
			
			// Ресурсы
			Движение.Налог						= ПогашаемаяСумма;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
			Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;				
			Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации; 
			
		КонецЕсли;  
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛудержанный

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ВыборкаПоШапкеДокумента		- выборка по данным шапки документа
//	НаборЗаписей				- набор записей для НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНДФЛКЗачету(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента)
	
	// НДФЛ к зачету
	Если ВыборкаПоСтрокамДокумента.Налог < 0 Тогда
		Движение = Движения.НДФЛКЗачету.Добавить();
		
		// Свойства
		Движение.Период						= КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.ФизЛицо	 	 	 	        = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация				    = ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоСтрокамДокумента.СтавкаНалогообложенияРезидента;
		
		// Ресурсы
		Движение.СуммаНДФЛКЗачету			= - ВыборкаПоСтрокамДокумента.Налог;
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.НДФЛКЗачетуУчтено <> 0 Тогда
		
		Движение = Движения.НДФЛКЗачету.Добавить();
		
		// Свойства
		Движение.Период						= КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.ФизЛицо	 	 	 	        = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация				    = ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоСтрокамДокумента.СтавкаНалогообложенияРезидента;
		
		// Ресурсы
		Движение.СуммаНДФЛКЗачету			= ВыборкаПоСтрокамДокумента.НДФЛКЗачетуУчтено;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛКЗачету

// получает доходы НДФЛ по табличным частям с доходами
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
// 		НаборЗаписей - НДФЛСведенияОДоходах
//		
Функция СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ДатаНалоговогоПериода", КонецГода(ПериодРегистрации));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Доходы.Сотрудник.Физлицо КАК Физлицо,
	|	Доходы.КодДоходаНДФЛ КАК КодДохода,
	|	СУММА(Доходы.Результат) КАК СуммаДохода,
	|	Доходы.КодВычета,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.МатпомощьПриРожденииРебенка)
	|				ТОГДА ВЫБОР
	|						КОГДА Доходы.Результат < Доходы.СуммаВычета * ВычетПоМатпомощиПриРождении.НормативЗатрат
	|							ТОГДА Доходы.Результат
	|						ИНАЧЕ Доходы.СуммаВычета * ВычетПоМатпомощиПриРождении.НормативЗатрат
	|					КОНЕЦ
	|			ИНАЧЕ Доходы.СуммаВычета
	|		КОНЕЦ) КАК СуммаВычета,
	|	Доходы.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.МатпомощьПриРожденииРебенка)
	|				ТОГДА Доходы.СуммаВычета
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоДетей,
	|	Доходы.ВидРасчета
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛВычетыПоДоходам.СрезПоследних(&ДатаНалоговогоПериода, КодДохода = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.МатпомощьПриРожденииРебенка)) КАК ВычетПоМатпомощиПриРождении
	|		ПО Доходы.ВидРасчета.КодДоходаНДФЛ = ВычетПоМатпомощиПриРождении.КодДохода
	|ГДЕ
	|	Доходы.Ссылка = &парамСсылка
	|	И Доходы.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
	|	И Доходы.Результат <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.Сотрудник.Физлицо,
	|	Доходы.КодДоходаНДФЛ,
	|	Доходы.КодВычета,
	|	Доходы.ПодразделениеОрганизации,
	|	Доходы.ВидРасчета";
	
	ДоходыПоКодам = Запрос.Выполнить().Выбрать();
	// сформируем движения НДФЛСведенияОДоходах
	Пока ДоходыПоКодам.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период					= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		
		// измерения 
		Движение.Организация			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.Физлицо				= ДоходыПоКодам.Физлицо;
		Движение.КодДохода				= ДоходыПоКодам.КодДохода;
		Движение.ПериодРегистрации		= НачалоМесяца(ПериодРегистрации);
		
		// ресурсы
		Движение.СуммаДохода 			= ДоходыПоКодам.СуммаДохода;
		Движение.СуммаВычета 			= ДоходыПоКодам.СуммаВычета;
		
		// реквизиты
		Движение.ОбособленноеПодразделение = ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.КодВычета	 	 		= ДоходыПоКодам.КодВычета;
		Движение.ИсчисленоИзЗарплаты	= Истина;
		Движение.ПодразделениеОрганизации = ДоходыПоКодам.ПодразделениеОрганизации;
		Движение.КоличествоДетей		= ДоходыПоКодам.КоличествоДетей;	
		
		Движение.ВидРасчета				= ДоходыПоКодам.ВидРасчета;
		
	КонецЦикла;
	
КонецФункции // СформироватьДоходыПоКодамНДФЛ

// Вычисляет разницу между начислениями и удержаниями работника и формирует
// движения по взаиморасчетам с работниками
//
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		НаборЗаписей - набор записей 
//
// Возвращаемое значение:
//  Нет.
//		
Процедура СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	НачисленияРаботниковТекст = 
	"ВЫБРАТЬ
	|	Доходы.Физлицо,
	|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основные.Сотрудник.Физлицо КАК Физлицо,
	|		Основные.Результат КАК СуммаДохода
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Основные
	|	ГДЕ
	|		Основные.Ссылка = &парамСсылка
	|		И Основные.Результат <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗплНДФЛ.ФизЛицо,
	|		-СУММА(ЗплНДФЛ.Налог) + ВЫБОР
	|			КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) > СУММА(ЗплНДФЛ.Налог)
	|				ТОГДА СУММА(ЗплНДФЛ.Налог)
	|			ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0)
	|		КОНЕЦ
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК ЗплНДФЛ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛКЗачету.Остатки(
	|			&ПериодРегистрации,
	|			Физлицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.ФизЛицо
	|					ИЗ
	|						Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ
	|					ГДЕ
	|						Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ.Ссылка = &парамСсылка)
	|				И Организация = &Организация) КАК НДФЛКЗачету
	|			ПО НДФЛКЗачету.ФизЛицо = ЗплНДФЛ.ФизЛицо
	|	ГДЕ
	|		ЗплНДФЛ.Ссылка = &парамСсылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗплНДФЛ.ФизЛицо,
	|		НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ЗплНДФЛ.Налог) > 0) КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.Физлицо";
	
	Запрос = Новый Запрос(НачисленияРаботниковТекст);
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка",		Ссылка);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	
	Доходы = Запрос.Выполнить().Выбрать();
	// сформируем движения ВзаиморасчетыСРаботникамиОрганизаций
	Пока Доходы.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период					= КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
		
		// измерения 
		Движение.Физлицо				= Доходы.Физлицо;
		Движение.Организация			= Организация;
		Движение.ПериодВзаиморасчетов	= ПериодРегистрации;
		
		// ресурсы
		Движение.СуммаВзаиморасчетов	= Доходы.СуммаДохода;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьВзаиморасчетыСРаботниками

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			ПроверитьЗаполнениеНачислений(Отказ,,Истина,ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			////////////////////////////////////////////////////////////////////////
			// исчисленный НДФЛ
			
			// получим реквизиты табличной части
			ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ().Выбрать();
			
			Пока ВыборкаПоНДФЛ.Следующий() Цикл 
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, ВыборкаПоШапкеДокумента, Движения.НДФЛРасчетыСБюджетом, Движения.НДФЛПредоставленныеСтандартныеВычетыФизЛиц, Движения.НДФЛИмущественныеВычетыФизлиц);
				КонецЕсли;
			КонецЦикла;
			
							
			// НДФЛ к зачету
			// получим реквизиты табличной части
			ВыборкаПоНДФЛКЗачету = СформироватьЗапросПоНДФЛКЗачету().Выбрать();
			Пока ВыборкаПоНДФЛКЗачету.Следующий() Цикл 
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуНДФЛКЗачету(ВыборкаПоНДФЛКЗачету, ВыборкаПоШапкеДокумента);
				КонецЕсли;
			КонецЦикла;
			
			////////////////////////////////////////////////////////////////////////
			// удержанный НДФЛ
			
			// посмотрим в учетную политику
			УпрощенныйУчетНДФЛ = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетНДФЛ");
			Если НЕ Отказ И УпрощенныйУчетНДФЛ Тогда
				
				ВыборкаПоНДФЛуд = СформироватьЗапросПоНДФЛУдержанный().Выбрать();
				Пока ВыборкаПоНДФЛуд.Следующий() Цикл 
					
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуНДФЛудержанный(ВыборкаПоНДФЛуд, ВыборкаПоНДФЛ, ВыборкаПоНДФЛКЗачету, ВыборкаПоШапкеДокумента, Движения.НДФЛРасчетыСБюджетом);
					
					Если Движения.НДФЛРасчетыСБюджетом.Количество() > 0 Тогда
						Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Загрузить(ПроведениеРасчетов.РасчетыНалоговогоАгентаПоУдержанномуНДФЛ(Движения.НДФЛРасчетыСБюджетом.Выгрузить()))
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			////////////////////////////////////////////////////////////////////////
			// личный вычет по НДФЛ
				
				МассивРезультатов = СформироватьЗапросПоЛичнымВычетам();
				
				СтрокиБезКодов = МассивРезультатов[5];
				Если Не СтрокиБезКодов.Пустой() Тогда
					Отказ = Истина;
					ВыборкаПоНДФЛ = СтрокиБезКодов.Выбрать();
					Пока ВыборкаПоНДФЛ.Следующий() Цикл 
						Если ВыборкаПоНДФЛ.ПримененныйВычетЛичный > 0 Тогда
							ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+ СокрЛП(ВыборкаПоНДФЛ.НомерСтроки) +
							""" табл. части ""НДФЛ"": для указанного физического лица не зарегистрировано право на предоставление личного вычета!", Отказ, Заголовок);
							
						Иначе
							ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+ СокрЛП(ВыборкаПоНДФЛ.НомерСтроки) +
							""" табл. части ""НДФЛ"": для указанного физического лица сторнируется не начисленная ранее сумма личного вычета!", Отказ, Заголовок);
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если НЕ Отказ Тогда
					ВыборкаПоНДФЛ = МассивРезультатов[6].Выбрать();
					Пока ВыборкаПоНДФЛ.Следующий() Цикл 
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуЛичныхВычетов(ВыборкаПоНДФЛ, ВыборкаПоШапкеДокумента, Движения.НДФЛПредоставленныеСтандартныеВычетыФизЛиц);
					КонецЦикла;
					ВыборкаПоНДФЛ = МассивРезультатов[7].Выбрать();
					ТаблицаВычетов = МассивРезультатов[8].Выгрузить();
					СтруктураПоиска = Новый Структура("ФизЛицо","НалоговыйПериод");
					Пока ВыборкаПоНДФЛ.СледующийПоЗначениюПоля("ФизЛицо") Цикл 
						Пока ВыборкаПоНДФЛ.СледующийПоЗначениюПоля("НалоговыйПериод") Цикл 
							ЗаполнитьЗначенияСвойств(СтруктураПоиска,ВыборкаПоНДФЛ);
							СтрокиВычетов = ТаблицаВычетов.НайтиСтроки(СтруктураПоиска);
							Пока ВыборкаПоНДФЛ.Следующий() Цикл 
								ОстатокВычета = ВыборкаПоНДФЛ.ПримененныйВычетЛичный;
								Пока (ОстатокВычета < 0) И (СтрокиВычетов.Количество()) Цикл
									СуммаВычета = -Мин(-ВыборкаПоНДФЛ.ПримененныйВычетЛичный, СтрокиВычетов[0].РанееПримененныйВычет);
									ДобавитьСтрокуЛичныхВычетов(ВыборкаПоНДФЛ, ВыборкаПоШапкеДокумента, Движения.НДФЛПредоставленныеСтандартныеВычетыФизЛиц,СтрокиВычетов[0].КодВычета,СуммаВычета);
									ОстатокВычета = ОстатокВычета - СуммаВычета;
									СтрокиВычетов[0].РанееПримененныйВычет = СтрокиВычетов[0].РанееПримененныйВычет + СуммаВычета;	
									Если СтрокиВычетов[0].РанееПримененныйВычет = 0 Тогда
										СтрокиВычетов.Удалить(0)
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
					
				КонецЕсли;

			////////////////////////////////////////////////////////////////////////
			// доходы НДФЛ
			
			// сформируем доходы НДФЛ по начислениям документа
			СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, Движения.НДФЛСведенияОДоходах);
			
			////////////////////////////////////////////////////////////////////////
			// взаиморасчеты с работниками
			
			// сформируем начисления к выплате по начислениям документа
			СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботникамиОрганизаций);
			
			////////////////////////////////////////////////////////////////////////
			//сформируем движения в бухгалтерском и налоговом учете
			СформироватьДвиженияПоРегистрамРегл(ВыборкаПоШапкеДокумента, Режим);
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ КорректировкаРасчета Тогда
		Если ЭтоНовый() И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Записать(РежимЗаписиДокумента.Запись);
			ЗаполнитьТаблицуНДФЛ();
			Записать(РежимЗаписиДокумента.Запись);
			Автозаполнение(, Истина);
			Записать(РежимЗаписиДокумента.Запись);
			РассчитатьНДФЛ();
		ИначеЕсли Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда			
			ЗаполнитьТаблицуНДФЛ();
			Записать(РежимЗаписиДокумента.Запись);
			Автозаполнение(, Истина);
			Записать(РежимЗаписиДокумента.ОтменаПроведения);			
			РассчитатьНДФЛ();
		ИначеЕсли НЕ Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ЗаполнитьТаблицуНДФЛ();
			Записать(РежимЗаписиДокумента.Запись);
			Автозаполнение(, Истина);
			Записать(РежимЗаписиДокумента.Запись);
			РассчитатьНДФЛ();
		КонецЕсли;				
	КонецЕсли;
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Начисления);
КонецПроцедуры

Процедура СформироватьДвиженияПоРегистрамРегл(ВыборкаПоШапкеДокумента, Режим)
	
		// определим налоговый режим
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(ПериодРегистрации), Ложь, Организация);
	Если УчетнаяПолитика.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, КонецМесяца(ПериодРегистрации));
	ОСН_ФизЛицо = (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И НЕ ПрименениеУСН);
	НеВедетсяНУ = ПрименениеУСН ИЛИ ОСН_ФизЛицо;
	мПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(Организация, Дата);
	
	ПроцедурыУчетаЗарплаты.ПодготовитьТаблицуЗначений(ОтражениеВУчете);

	мОбъектНалогообложенияУСН 							= УчетнаяПолитика.ОбъектНалогообложенияУСН;
	мУСН 												= УчетнаяПолитика.УСН;
	мВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете	= УчетнаяПолитика.ВариантУчетаРасходовПоНалогамСФОТВНалоговомУчете;
	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	ОСН_ФизЛицо = (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И НЕ мУСН);
	
	// фактически - создаем структуру промежуточной таблицы
	ПромежуточнаяТаблица = ОтражениеВУчете.Скопировать();

	НачалоПериодаОтраженияВУчете = НачалоГода(ПериодРегистрации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// получим список физлиц и подразделения в которых они работают на конец месяца
	// готовим списки счетов расчетов
	ПроцедурыУчетаЗарплаты.СписокФИзЛицИСчетовУчета(Запрос, Организация, ГоловнаяОрганизация, ПериодРегистрации);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////
	// создание таблицы начислений
	ПроцедурыУчетаЗарплаты.ПодборНачислений(Запрос, Ссылка, УчетнаяПолитика, ПериодРегистрации, ОтражениеВУчете, ПромежуточнаяТаблица, Истина);	
	// конец создания таблицы начислений
	//////////////////////////////////////////////////////////////////////////////////////////////////
	
	// запишем промежуточное состояние документа
	// это необходимо для выполнения запросов к его табличной части 
	// при формировании проводок по налогам и взносам
	Записать();
	// очистим то, что уже записано
	ПромежуточнаяТаблица.Очистить();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////
	// начало отражения НДФЛ
	ПроцедурыУчетаЗарплаты.ОтразитьНДФЛ(Запрос, Ссылка, Организация, ПериодРегистрации, ОтражениеВУчете, ОСН_ФизЛицо, Истина);
	// конец отражения НДФЛ
	//////////////////////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////
	РезультатЗапросаПоОтражениюВУчете = СформироватьЗапросПоОтражениюВУчете(ОтражениеВУчете);
	ВыборкаПоОтражениюВУчете = РезультатЗапросаПоОтражениюВУчете.Выбрать();
	
	Пока ВыборкаПоОтражениюВУчете.Следующий() Цикл
		ПроцедурыУчетаЗарплаты.ДобавитьСтрокуВДвиженияПоОтражениюВУчете(Ссылка, Движения, ВыборкаПоОтражениюВУчете, ПрименениеУСН, ОСН_ФизЛицо, мПоддержкаПБУ18, Организация, ПериодРегистрации);
	КонецЦикла;
	
	Если ПрименениеУСН Тогда
		СтруктураДопПараметров = Новый Структура;		
		СтруктураДопПараметров.Вставить("ОтражениеВУчете", ОтражениеВУчете);
		НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, Режим, СтруктураДопПараметров);
	КонецЕсли;
	
	// {УчетДоходовИРасходовИП
	Если ОСН_ФизЛицо Тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация);
		ДоходыИРасходыПредпринимателя.ОтражениеРасходовНаОплатуТруда(ЭтотОбъект, ВыборкаПоОтражениюВУчете, УчетнаяПолитика, Режим);
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	
КонецПроцедуры

Функция СформироватьЗапросПоОтражениюВУчете(ОтражениеВУчете)Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
	ПроцедурыУчетаЗарплаты.СоздатьВТОтражениеВУчете(Запрос, ОтражениеВУчете, Ссылка);
	
	Запрос.Текст = ПроцедурыУчетаЗарплаты.СформироватьЗапросПоОтражениюВУчете(Ссылка);
	
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ЗаполнитьТаблицуНДФЛ()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Физлицо,
	|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ПодразделениеОрганизации,
	|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
	|ГДЕ
	|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка = &парамСсылка";
			
	НДФЛ.Загрузить(Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеНачислений(Отказ = Ложь, НомерСтроки = Неопределено, Сообщать = Ложь, ГоловнаяОрганизация = Неопределено) Экспорт
	
	ПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, КонецМесяца(ПериодРегистрации));
	ОСН_ФизЛицо = ОбщегоНазначения.Предприниматель(Организация,КонецМесяца(ПериодРегистрации));
	
	ТабНачислений = Начисления.Выгрузить();
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсхТаб.Сотрудник,
	|	ИсхТаб.НомерСтроки,
	|	ИсхТаб.ВидРасчета,
	|	ИсхТаб.Результат,
	|	ИсхТаб.КодДоходаНДФЛ,
	|	ИсхТаб.КодВычета,
	|	ИсхТаб.СуммаВычета
	|ПОМЕСТИТЬ ВТНачисление
	|ИЗ
	|	&ИсхТаб КАК ИсхТаб";
	Запрос.УстановитьПараметр("ИсхТаб", ТабНачислений);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеЗарплаты.НомерСтроки КАК НомерСтроки,
	|	НачислениеЗарплаты.Сотрудник КАК Сотрудник,
	|	НачислениеЗарплаты.ВидРасчета КАК ВидРасчета,
	|	НачислениеЗарплаты.Результат КАК Результат,
	|	НачислениеЗарплаты.ВидРасчета.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
	|	НачислениеЗарплаты.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	НачислениеЗарплаты.ВидРасчета.КодДоходаФСС_НС КАК КодДоходаФСС_НС,
	|	НачислениеЗарплаты.ВидРасчета.КодДоходаСтраховыеВзносы КАК КодДоходаСтраховыеВзносы,
	|	НачислениеЗарплаты.ВидРасчета.КодДоходаЕСН КАК КодДоходаЕСН,
	|	НачислениеЗарплаты.ВидРасчета.СпособОтраженияВБухучете.ОтражениеВУСН КАК ОтражениеВУСН,	
	|	НачислениеЗарплаты.КодДоходаНДФЛ КАК КодДоходаНДФЛТЧ,
	|	НачислениеЗарплаты.КодВычета КАК КодВычета,
	|	НачислениеЗарплаты.СуммаВычета КАК СуммаВычета,
	|	НачислениеЗарплаты.ВидРасчета.ВидНачисленияПоСт255НК КАК ВидНачисленияПоСт255НК,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплаты.Сотрудник.Организация = &ГоловнаяОрганизация
	|			И &ГоловнаяОрганизация <> &парамПустаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации";
	
	// {УчетДоходовИРасходовИП
	Если ОСН_ФизЛицо Тогда
		Запрос.Текст = Запрос.Текст + ",
	|	НачислениеЗарплаты.ВидРасчета.СпособОтраженияВБухучете.ВидНачисленияУдержания КАК ВидНачисленияУдержания";
	КонецЕсли;
	// }УчетДоходовИРасходовИП

	Запрос.Текст = Запрос.Текст + "
	|
	|ИЗ
	|	ВТНачисление КАК НачислениеЗарплаты";	
	
	Если НомерСтроки <> Неопределено Тогда
		Запрос.Текст  = Запрос.Текст + "
		|ГДЕ
		|	НачислениеЗарплаты.НомерСтроки = &парамНомерСтроки";
		Запрос.УстановитьПараметр("парамНомерСтроки",НомерСтроки);
	КонецЕсли;
	
	Если ГоловнаяОрганизация = Неопределено Тогда
		ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка();
		Если ЗначениеЗаполнено(Организация) Тогда
			Если ЗначениеЗаполнено(Организация.ГоловнаяОрганизация) Тогда
				ГоловнаяОрганизация = Организация.ГоловнаяОрганизация;
			Иначе
				ГоловнаяОрганизация = Организация;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультата ИЗ Результат Цикл
		
		ПроверитьСтрокуНачислений(Отказ, СтрокаРезультата, ПрименениеУСН, ОСН_ФизЛицо, Сообщать);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСтрокуНачислений(Отказ = Ложь, СтрокаРезультата, ПрименениеУСН, ОСН_ФизЛицо, Сообщать)
	
	ОписаниеОшибок = "";
	
	Если НЕ ЗначениеЗаполнено(СтрокаРезультата.Сотрудник) Тогда		
		ТекстОшибки = "Не выбран сотрудник.";
		ДобавитьВСтроку(ОписаниеОшибок,ТекстОшибки);
	Иначе
		Если СтрокаРезультата.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда		
			ТекстОшибки = "Сотрудник оформлен на другую организацию.";
			ДобавитьВСтроку(ОписаниеОшибок,ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(СтрокаРезультата.ВидРасчета) Тогда
		ТекстОшибки = "Не указан вид расчета.";
		ДобавитьВСтроку(ОписаниеОшибок,ТекстОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаРезультата.Результат) Тогда
		ТекстОшибки = "Не указана сумма.";
		ДобавитьВСтроку(ОписаниеОшибок,ТекстОшибки);
	КонецЕсли;
	
	ОшибкиВидаРасчета = "";
	ОшибкиВидаРасчетаПрефикс = "Вид расчета:";
	Если ЗначениеЗаполнено(СтрокаРезультата.ВидРасчета) Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.СпособОтраженияВБухучете) Тогда
			ТекстОшибки = " не указан способ отражения в бухгалтерском учете;";
			ДобавитьВСтроку(ОшибкиВидаРасчета,ТекстОшибки);
		КонецЕсли;
		
		Если Год(Дата) < 2010 Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаРезультата.КодДоходаФСС_НС) Тогда
				ТекстОшибки = " не указан код дохода ФСС НС;";
				ДобавитьВСтроку(ОшибкиВидаРасчета,ТекстОшибки);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаРезультата.КодДоходаЕСН) Тогда
				ТекстОшибки = " не указан код дохода ЕСН;";
				ДобавитьВСтроку(ОшибкиВидаРасчета,ТекстОшибки);
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(СтрокаРезультата.КодДоходаСтраховыеВзносы) Тогда
				ТекстОшибки = " не указан порядок учета страховых взносов;";
				ДобавитьВСтроку(ОшибкиВидаРасчета,ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ СтрокаРезультата.СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете Тогда
			
			
			Если ПрименениеУСН Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаРезультата.ОтражениеВУСН) Тогда
					ТекстОшибки = " для выбранного способа отражения в бухгалтерском учете не установлен признак отражения в УСН;";
					ДобавитьВСтроку(ОшибкиВидаРасчета,ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			// {УчетДоходовИРасходовИП
			Если ОСН_ФизЛицо Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаРезультата.ВидНачисленияУдержания) Тогда
					ТекстОшибки = " для выбранного способа отражения в бухгалтерском учете не указан вид начисления (удержания);";
					ДобавитьВСтроку(ОшибкиВидаРасчета,ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			// }УчетДоходовИРасходовИП
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если КорректировкаРасчета Тогда
		
		Если ЗначениеЗаполнено(СтрокаРезультата.СуммаВычета) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаРезультата.КодВычета) Тогда
				ТекстОшибки = "Не указан код вычета.";
				ДобавитьВСтроку(ОписаниеОшибок,ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкиВидаРасчета) Тогда		
		ДобавитьВСтроку(ОписаниеОшибок,ОшибкиВидаРасчетаПрефикс);
		ОшибкиВидаРасчета = Сред(ОшибкиВидаРасчета,1,СтрДлина(ОшибкиВидаРасчета)-1) + ".";
		ДобавитьВСтроку(ОписаниеОшибок,ОшибкиВидаРасчета);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Начисления.Получить(СтрокаРезультата.НомерСтроки-1);	
	СтрокаТабличнойЧасти.ОписаниеОшибок = ОписаниеОшибок;

	Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
		Отказ = Истина;
		
		Если Сообщать Тогда 
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаРезультата.НомерСтроки) + """:" + Символы.ПС;		
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + ОписаниеОшибок, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВСтроку(Буфер, НоваяСтрока)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
		
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
КонецПроцедуры

	

