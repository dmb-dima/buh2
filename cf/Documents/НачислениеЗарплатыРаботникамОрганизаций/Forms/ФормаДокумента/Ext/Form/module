////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента;     // Хранит текущую дату документа - для проверки перехода документа в другой период установки номера

// для синхронизации строк табличных полей
Перем мСинхронизируемыеТабличныеЧасти;

Перем мСведенияОВидахРасчета;

Перем мСписокКодовНДФЛОсновныхНачислений;
Перем мСписокКодовВычетов;
Перем мКодВычетаПоМатпомощиПриРожденииРебенка;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;


// Хранит соответствие доходов и положенных по ним вычетов
Перем мСоответствиеДоходовИВычетов;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;

// Хранит ходы доходов НДФЛ по которым нужно уметь отдельно считать вычеты
Перем ДоходыП28Ст217;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения 

////////////////////////////////////////////////////////////////////////////////

// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ПриИзмененииКодаВычета(Значение)
	ТабличноеПоле = ЭлементыФормы.Начисления;
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	ЭлементУправления = ТабличноеПоле.Колонки.СуммаВычета.ЭлементУправления;
	Если Значение = мКодВычетаПоМатпомощиПриРожденииРебенка Тогда
		ТочностьСуммыВычета = 0;
		МаксимальноеЗначение = 99;
		Если ТекущиеДанные.СуммаВычета > 100 или ТекущиеДанные.СуммаВычета = 0 Тогда
			ТекущиеДанные.СуммаВычета = 1
		КонецЕсли;
	Иначе
		ТочностьСуммыВычета = 2;
		МаксимальноеЗначение = 0;
	КонецЕсли;
	ЭлементУправления.МаксимальноеЗначение = МаксимальноеЗначение;
	ЭлементУправления.Формат = "ЧДЦ=" + ТочностьСуммыВычета
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.НДФЛ,ЭлементыФормы.КоманднаяПанельНДФЛ);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачислений);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровТайпинга(ИмяЭУ)
	
	Если ИмяЭУ = "КодВычета" Тогда
		СтруктураПараметров = Новый Структура("Ссылка", мСписокКодовВычетов);
	ИначеЕсли ИмяЭУ = "ДополнительныеНачисления" Тогда
		Если Не ЗначениеЗаполнено(мСписокКодовНДФЛОсновныхНачислений) Тогда
			мСписокКодовНДФЛОсновныхНачислений = ПроведениеРасчетов.ПолучитьСписокКодовДоходаОсновныхНачислений()
		КонецЕсли;
		СтруктураПараметров = Новый Структура("КодДоходаНДФЛ", мСписокКодовНДФЛОсновныхНачислений);
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьСтруктуруПараметровТайпинга()

// Записывает документ в режиме отмены проведения, спросив об этом у пользователя
Функция ЗаписатьДокументОтменивПроведение(Действие = "рассчитать")

	Если Проведен Тогда
		
		Если Вопрос("Автоматически " + Действие +" документ можно только после отмены его проведения. Выполнить отмену проведения документа?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
		
	ИначеЕсли Модифицированность ИЛИ ЭтоНовый() Тогда
		
		Если Вопрос("Автоматически " + Действие +" документ можно только после его записи. Записать?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПолучитьРабочийДеньМесяца(ДатаДокумента)

	ПоследнийДеньМесяца = КонецМесяца(ДатаДокумента);
	Если ДеньНедели(КонецМесяца(ДатаДокумента)) = 6 Тогда
		ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца - 86400
	ИначеЕсли ДеньНедели(КонецМесяца(ДатаДокумента)) = 7 Тогда	
		ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца - 2 * 86400
	Иначе	
	    ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца
	КонецЕсли;
	
	Возврат ПоследнийРабочийДеньМесяца
	
КонецФункции // ПолучитьРабочийДеньМесяца()

// Устанавливаем соответствие доходов и положенных по ним вычетов для целей исчисления НДФЛ
//
// Параметры
//  нет
//
Процедура ПодготовитьСоответствиеДоходовИВычетов()

	мСоответствиеДоходовИВычетов = Новый Соответствие;
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2761,Справочники.ВычетыНДФЛ.Код506);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.МатпомощьПриРожденииРебенка,Справочники.ВычетыНДФЛ.МатпомощьПриРожденииРебенка);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2720,Справочники.ВычетыНДФЛ.Код501);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2730,Справочники.ВычетыНДФЛ.Код502);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2740,Справочники.ВычетыНДФЛ.Код505);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2760,Справочники.ВычетыНДФЛ.Код503);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2770,Справочники.ВычетыНДФЛ.Код504);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2790,Справочники.ВычетыНДФЛ.Код507);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1211,Справочники.ВычетыНДФЛ.Код607);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2010,Справочники.ВычетыНДФЛ.Код403);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2201,Справочники.ВычетыНДФЛ.Код405);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2202,Справочники.ВычетыНДФЛ.Код405);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2203,Справочники.ВычетыНДФЛ.Код405);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2204,Справочники.ВычетыНДФЛ.Код405);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2205,Справочники.ВычетыНДФЛ.Код405);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2206,Справочники.ВычетыНДФЛ.Код405);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2207,Справочники.ВычетыНДФЛ.Код405);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2208,Справочники.ВычетыНДФЛ.Код405);
	мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2209,Справочники.ВычетыНДФЛ.Код405);
	
КонецПроцедуры // ПодготовитьСоответствиеДоходовИВычетов()

// Кнопка расчета вычетов в форме выводится
//
// Параметры
//  нет
//
Процедура ОтобразитьКнопкуРасчетаВычетов()
	
	Если КорректировкаРасчета Тогда
		
		Если ЭлементыФормы.КоманднаяПанельНачислений.Кнопки.Найти("Вычеты") = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельНачислений.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
		РасчетВычетов = ЭлементыФормы.КоманднаяПанельНачислений.Кнопки.Добавить("Вычеты",ТипКнопкиКоманднойПанели.Действие,"Рассчитать вычеты 5",Новый Действие("ОсновныеДействияФормыРасчетВычетов"));
		// определим параметры создаваемой кнопки
		РасчетВычетов.Подсказка		= "Рассчитать вычеты (по п.28 ст.217 НК РФ)";
		РасчетВычетов.Текст			= "Рассчитать вычеты";
		РасчетВычетов.Доступность	= Истина;
		КонецЕсли;
		
	Иначе
		Если ЭлементыФормы.КоманднаяПанельНачислений.Кнопки.Найти("Вычеты") <> Неопределено Тогда
			ЭлементыФормы.КоманднаяПанельНачислений.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельНачислений.Кнопки.Вычеты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОтобразитьКнопкуРасчетаВычетов()

Процедура СкрытьКнопкуРасчетаВычетов()
	
	Если ЭлементыФормы.КоманднаяПанельНачислений.Кнопки.Найти("Вычеты") <> Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельНачислений.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельНачислений.Кнопки.Индекс(ЭлементыФормы.КоманднаяПанельНачислений.Кнопки.Вычеты));
	КонецЕсли;
	
КонецПроцедуры

// Определяется нужно ли показать кнопку расчета вычетов и если нужно, то отображает
// ищем есть ли в документе КодДоходаНДФЛ из списка п.28 или ВР с таким кодом дохода
//
// Параметры
//  Модифицируем - признак того, что документ может быть модифицирован, проверять нужно "на весу"
//
Процедура ОтображатьКнопкуРасчетаВычетов(Модифицируем)
	
	Если Модифицируем Тогда
		// нужно проверить выбранный код дохода - требует ли он вычет
		
		Отображать = Ложь;
		Для каждого ЭлементСписка Из ДоходыП28Ст217 Цикл
			
			Если ЭлементыФормы.Начисления.Значение.Найти(ЭлементСписка.Значение) <> Неопределено Тогда
				Отображать = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Отображать И ЭлементыФормы.КоманднаяПанельНачислений.Кнопки.Найти("Вычеты") = Неопределено Тогда
			ОтобразитьКнопкуРасчетаВычетов();
		ИначеЕсли НЕ Отображать И ЭлементыФормы.КоманднаяПанельНачислений.Кнопки.Найти("Вычеты") <> Неопределено Тогда
			ЭлементыФормы.КоманднаяПанельНачислений.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельНачислений.Кнопки.Индекс(ЭлементыФормы.КоманднаяПанельНачислений.Кнопки.Вычеты));
		КонецЕсли;
		
	Иначе // открываем документ из списка документов
		
		Запрос = Новый Запрос;
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("Ссылка" ,		 Ссылка);
		Запрос.УстановитьПараметр("ДоходыП28Ст217" , ДоходыП28Ст217);
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Отображать
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка = &Ссылка
		|	И (НачислениеЗарплатыРаботникамОрганизацийНачисления.КодДоходаНДФЛ В (&ДоходыП28Ст217))";
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			
			ОтобразитьКнопкуРасчетаВычетов();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтображатьКнопкуРасчетаВычетов()

// Процедура устанавливает видимость колонок районного коэффициент и северной надбавки
// в зависимости от районного коэффициента организации, обособленного подразделения
// и значений северной надбавки физлиц
Процедура УстановитьВидимостьРКСН()
	
	ЭлементыФормы.Начисления.Колонки.РайонныйКоэффициент.Видимость = (Организация.РайонныйКоэффициентРФ > 1);
	
	// {ОбособленныеПодразделения
	
	Если ПодразделениеОрганизации.ОбособленноеПодразделение Тогда
		ЭлементыФормы.Начисления.Колонки.РайонныйКоэффициент.Видимость = (ПодразделениеОрганизации.РайонныйКоэффициент > 1);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		СписокПодразделений = Начисления.ВыгрузитьКолонку("ПодразделениеОрганизации");
		СписокПодразделений = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокПодразделений);
		Для Каждого ЭлементПодразделение Из СписокПодразделений Цикл
			Если ЭлементПодразделение.ОбособленноеПодразделение 
				И ЭлементПодразделение.РайонныйКоэффициент > 1 Тогда
					ЭлементыФормы.Начисления.Колонки.РайонныйКоэффициент.Видимость = Истина;
					Прервать;
				КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// }ОбособленныеПодразделения 
	
	СписокСотрудников = Начисления.ВыгрузитьКолонку("Сотрудник");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПроцентСевернойНадбавкиФизЛицСрезПоследних.ФизЛицо) КАК КоличествоФизЛиц
	               |ИЗ
	               |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентСевернойНадбавкиФизЛиц.СрезПоследних(&ПериодРегистрации, ) КАК ПроцентСевернойНадбавкиФизЛицСрезПоследних
	               |		ПО СотрудникиОрганизаций.Физлицо = ПроцентСевернойНадбавкиФизЛицСрезПоследних.ФизЛицо
	               |ГДЕ
	               |	ПроцентСевернойНадбавкиФизЛицСрезПоследних.СевернаяНадбавка > 0
	               |	И СотрудникиОрганизаций.Ссылка В(&СписокСотрудников)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.КоличествоФизЛиц > 0 Тогда
		ЭлементыФормы.Начисления.Колонки.СевернаяНадбавка.Видимость = Истина;
	Иначе
		ЭлементыФормы.Начисления.Колонки.СевернаяНадбавка.Видимость = Ложь;
	КонецЕсли;
	
	
	ЭлементыФормы.Начисления.Колонки.Результат.Видимость = 
	ЭлементыФормы.Начисления.Колонки.РайонныйКоэффициент.Видимость
		ИЛИ ЭлементыФормы.Начисления.Колонки.СевернаяНадбавка.Видимость;
		
		Если ЭлементыФормы.Начисления.Колонки.Результат.Видимость Тогда
			ЭлементыФормы.Начисления.Колонки.Начислено.ТекстШапки = "Начислено";
		Иначе
			ЭлементыФормы.Начисления.Колонки.Начислено.ТекстШапки = "Сумма";
		КонецЕсли;
			
КонецПроцедуры // УстановитьВидимостьРКСН()


Процедура ПересчитатьРКСНПоСтроке(ПересчитываемаяСтрока)
	Подразделение = ПересчитываемаяСтрока.ПодразделениеОрганизации;
	ФизЛицо = ПересчитываемаяСтрока.ФизЛицо;
	Начислено = ПересчитываемаяСтрока.Начислено;
	РайонныйКоэффициент = Организация.РайонныйКоэффициентРФ;
	
	// {ОбособленныеПодразделения
	Если Подразделение.ОбособленноеПодразделение 
		И Подразделение.РайонныйКоэффициент > 1 Тогда
		РайонныйКоэффициент = Подразделение.РайонныйКоэффициент;
	КонецЕсли;
	// }ОбособленныеПодразделения 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", Физлицо);
	Запрос.УстановитьПараметр("РайонныйКоэффициент", РайонныйКоэффициент);
	Запрос.УстановитьПараметр("ДатаСреза", ПериодРегистрации);
	Запрос.УстановитьПараметр("Начислено", Начислено);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |			КОГДА &РайонныйКоэффициент > 1
	               |				ТОГДА &Начислено * (&РайонныйКоэффициент - 1)
	               |			ИНАЧЕ 0
	               |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК НачисленоРайонныйКоэффициент,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |			КОГДА ПроцентСевернойНадбавкиФизЛицСрезПоследних.СевернаяНадбавка > 0
	               |				ТОГДА &Начислено * ПроцентСевернойНадбавкиФизЛицСрезПоследних.СевернаяНадбавка / 100
	               |			ИНАЧЕ 0
	               |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК НачисленоСевернаяНадбавка
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизЛица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентСевернойНадбавкиФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ПроцентСевернойНадбавкиФизЛицСрезПоследних
	               |		ПО (ПроцентСевернойНадбавкиФизЛицСрезПоследних.ФизЛицо = ФизЛица.Ссылка)
	               |ГДЕ
	               |	ФизЛица.Ссылка = &ФизЛицо";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПересчитываемаяСтрока.РайонныйКоэффициент = Выборка.НачисленоРайонныйКоэффициент;
		ПересчитываемаяСтрока.СевернаяНадбавка = Выборка.НачисленоСевернаяНадбавка;
		ПересчитываемаяСтрока.Результат = ПересчитываемаяСтрока.Начислено + ПересчитываемаяСтрока.РайонныйКоэффициент + ПересчитываемаяСтрока.СевернаяНадбавка;
	
	КонецЕсли;
КонецПроцедуры // ПересчитатьРКСНПоСтроке()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	//Проверка источника кадровой информации
	ПроцедурыУправленияПерсоналом.УчетЗарплатыИКадровВоВнешнейПрограмме(Отказ, Ссылка, ЭтаФорма, ЭтоНовый());

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	// Подготовка соответствия
	ПодготовитьСоответствиеДоходовИВычетов();
	
КонецПроцедуры // ПередОткрытием()

Процедура ОсновныеДействияФормыРасчетВычетов()
	
	Если Проведен Тогда
	
		Если Вопрос("Рассчитать вычеты можно только после отмены проведения документа. Выполнить отмену проведения документа?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения) Тогда
			Возврат
		КонецЕсли;
	
	КонецЕсли;
	
	Если Модифицированность Тогда
	
		Если Вопрос("Рассчитать вычеты можно только после записи документа. Записать документ?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ЗаписатьВФорме() Тогда
			Возврат
		КонецЕсли;
	
	КонецЕсли;
	
	
	Автозаполнение(, Истина);
	
КонецПроцедуры // ОсновныеДействияФормыРасчетВычетов()

Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		Дата = ПолучитьРабочийДеньМесяца(Дата);
		
		ДокументОбъект.ПериодРегистрации = НачалоМесяца(Дата);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ФизЛицо");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ДатаОкончания");

	// Установить ограничение - изменять видимость колонок для табличной части Начисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ФизЛицо");
	
	// Установить ограничение - изменять видимоть колонок для табличной части НДФЛ
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.НДФЛ.Колонки, СтруктураКолонок);

	// Активизируем табличную часть
	ТекущийЭлемент = ЭлементыФормы.Начисления;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Ограничим возможности выбора кодов вычета
	мСписокКодовВычетов = ПроведениеРасчетов.ПолучитьСписокВычетовКДоходам();
	ЭлементыФормы.Начисления.Колонки.КодВычета.ЭлементУправления.ВысотаСпискаВыбора = мСписокКодовВычетов.Количество();
	ЭлементыФормы.Начисления.Колонки.КодВычета.ЭлементУправления.ШиринаСпискаВыбора = 40;
	
	мКодВычетаПоМатпомощиПриРожденииРебенка = Справочники.ВычетыНДФЛ.МатпомощьПриРожденииРебенка;
	
	ДоходыП28Ст217 = Новый СписокЗначений;
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2710);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2720);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2730);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2740);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2760);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2770);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2790);
	
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2010);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2201);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2202);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2203);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2204);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2205);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2206);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2207);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2208);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2209);
	

	Если Не ЭтоНовый() Тогда // проверка объекта на то, что он уже внесен в ИБ
		
		ОтображатьКнопкуРасчетаВычетов(Ложь);
		
	КонецЕсли;
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Если НЕ КорректировкаРасчета Тогда
		Страницы.Добавить("СтраницаДополнительныеНачисления",	"Начисления");		
	Иначе
		Страницы.Добавить("СтраницаДополнительныеНачисления",	"Начисления");
		Страницы.Добавить("СтраницаНДФЛ",	"НДФЛ");		
	КонецЕсли;	
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.Панель1, Страницы,);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,,ЭлементыФормы.Панель1.ТекущаяСтраница,Страницы);
	
	УстановитьВидимость();	
	
	МассивСсылок = Новый Массив;
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код101);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код102);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код106);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код107);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код111);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код113);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код311);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код312);
	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код318);
 	Представления = ОбщегоНазначения.ПолучитьПредставленияОбъектов(МассивСсылок);
	
	КолонкиНДФЛ = ЭлементыФормы.НДФЛ.Колонки;
	КолонкиНДФЛ.ПримененныйВычетНаДетей.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код101];
	КолонкиНДФЛ.ПримененныйВычетНаДетейДвойной.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код102];
	КолонкиНДФЛ.ПримененныйВычетНаДетейДвойнойВторой.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код111];
	КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидов.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код106];
	КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойной.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код107];
	КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код113];
	КолонкиНДФЛ.ПримененныйВычетИмущественныйРасход.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код311];
	КолонкиНДФЛ.ПримененныйВычетИмущественныйПроцентыПоКредитам.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код312];
	КолонкиНДФЛ.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код318];

	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

	УстановитьВидимостьРКСН();
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	//ОбновитьОписаниеСостоянияДокумента();
	
	Если ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.СтраницаНДФЛ Тогда
		
		КолонкиНДФЛ = ЭлементыФормы.НДФЛ.Колонки;
		
		БлокКолонок = Новый Массив;
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетей);
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетейДвойной);
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетейДвойнойВторой);
		РаботаСДиалогами.ПеренестиБлокКолонокЦеликом(КолонкиНДФЛ, КолонкиНДФЛ.ЗаголовокВычетовНаДетей, БлокКолонок);
		
		БлокКолонок = Новый Массив;
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидов);
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойной);
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой);
		РаботаСДиалогами.ПеренестиБлокКолонокЦеликом(КолонкиНДФЛ, КолонкиНДФЛ.ЗаголовокВычетовНаДетейИнвалидов, БлокКолонок);
		
		БлокКолонок = Новый Массив;
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетИмущественныйРасход);
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетИмущественныйПроцентыПоКредитам);
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании);
		РаботаСДиалогами.ПеренестиБлокКолонокЦеликом(КолонкиНДФЛ, КолонкиНДФЛ.ЗаголовокИмущественныхВычетов, БлокКолонок);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ЗаполнитьПостроительЗапроса" Тогда
			Автозаполнение(ЗначениеВыбора.ПостроительЗапроса);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели формы,
// заполняет документ по данным регистров сведений о начислениях и удержаниях.
//
Процедура ДействияФормыДействиеЗаполнить(Кнопка)

	Если НЕ ЗаписатьДокументОтменивПроведение("заполнить") Тогда
		Возврат;
	КонецЕсли; 
	
	Если Начисления.Количество() > 0 ИЛИ НДФЛ.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Начисления.Очистить();
		НДФЛ.Очистить();
		
	КонецЕсли;
	
	Автозаполнение();
	
	Если Начисления.Количество() = 0 И НДФЛ.Количество() = 0 Тогда
		Сообщить("Не обнаружены данные для записи в табличные части документа.", СтатусСообщения.Важное )
		
	КонецЕсли;
	
	ОтображатьКнопкуРасчетаВычетов(Истина);
	
	ПроверитьЗаполнениеНачислений();
	
	УстановитьВидимостьРКСН();	
КонецПроцедуры

Процедура КоманднаяПанельНачисленийПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.Начисления, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 1);

КонецПроцедуры // КоманднаяПанельНачисленийПодбор()


Процедура КоманднаяПанельНДФЛПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.НДФЛ, Ссылка, Ложь, Дата, мГоловнаяОрганизация);
	
КонецПроцедуры // КоманднаяПанельНДФЛПодбор()


Процедура КоманднаяПанельНДФЛРассчитатьНДФЛ(Кнопка)
	
	Если НЕ ЗаписатьДокументОтменивПроведение() Тогда
		Возврат;
	КонецЕсли; 
	РассчитатьНДФЛ();
	
КонецПроцедуры


// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);
	
КонецПроцедуры


Процедура ДействияФормыЗаполнитьСписокРаботников(Кнопка)
	
	Если НЕ ЗаписатьДокументОтменивПроведение("заполнить") Тогда
		Возврат;
	КонецЕсли; 	
	
	Если Начисления.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		Начисления.Очистить();
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, , Организация, ПодразделениеОрганизации, Ложь);	
	
	УстановитьВидимостьРКСН();	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Проверка на последний рабочий день месяца.
	ПоследнийРабочийДеньМесяца = ПолучитьРабочийДеньМесяца(Элемент.Значение);
	
	Если КонецДня(Элемент.Значение) < ПоследнийРабочийДеньМесяца И Месяц(Элемент.Значение) = Месяц(ПериодРегистрации) Тогда

		Ответ = Вопрос("Начисление зарплаты производится не последним рабочим днем месяца. Продолжить?", РежимДиалогаВопрос.ДаНет);

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Дата = мТекущаяДатаДокумента
		КонецЕсли;

	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата;
	
	ДокументОбъект.ПериодРегистрации = НачалоМесяца(Дата);
	
КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	мГоловнаяОрганизацияПред = мГоловнаяОрганизация;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	Если мГоловнаяОрганизация <> мГоловнаяОрганизацияПред Тогда
		Для Каждого СтрокаТЧ ИЗ Начисления Цикл
			СтрокаТЧ.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЦикла;
		Для Каждого СтрокаТЧ ИЗ НДФЛ Цикл
			СтрокаТЧ.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении реквизита Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	// устанавливаем видимость колонки районный коэффициент
	Если Организация.РайонныйКоэффициентРФ > 1 Тогда
		ЭлементыФормы.Начисления.Колонки.РайонныйКоэффициент.Видимость = Истина;
		ЭлементыФормы.Начисления.Колонки.Результат.Видимость = Истина;
	Иначе
		ЭлементыФормы.Начисления.Колонки.РайонныйКоэффициент.Видимость = Ложь;
		Если Не ЭлементыФормы.Начисления.Колонки.СевернаяНадбавка.Видимость Тогда
			ЭлементыФормы.Начисления.Колонки.Результат.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементыФормы.Начисления.Колонки.Результат.Видимость Тогда
		ЭлементыФормы.Начисления.Колонки.Начислено.ТекстШапки = "Начислено";
	Иначе
		ЭлементыФормы.Начисления.Колонки.Начислено.ТекстШапки = "Сумма";
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Направление = 1 Тогда // увеличиваем значение
		ПериодРегистрации = КонецМесяца(ПериодРегистрации) + 1
	Иначе // = -1 - уменьшаем значение
		ПериодРегистрации = НачалоМесяца(ПериодРегистрации - 1)
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
    ПериодРегистрации = НачалоМесяца(ПериодРегистрации)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ

Процедура ТабличнаяЧастьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТипВыбранногоЗначения = ТипЗнч(ВыбранноеЗначение);
	Если ТипВыбранногоЗначения = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		СтруктураПоиска = Новый Структура("Сотрудник", ВыбранноеЗначение);
		
		Если Элемент = ЭлементыФормы.Начисления Тогда
			
			//в БП добавлять можно независимо от того, вводился ли уже такой сотрудник,
			// добавим новую строку в таблицу 
			СтрокаТабличнойЧасти = Начисления.Добавить();
			СтрокаТабличнойЧасти.Сотрудник		= ВыбранноеЗначение;
			СтрокаТабличнойЧасти.Физлицо	= ВыбранноеЗначение.Физлицо;
			Элемент.ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			ПроцедурыУправленияПерсоналом.ПроставитьДанныеСтроки(СтрокаТабличнойЧасти.Сотрудник, Дата, Элемент);
			
		ИначеЕсли Элемент = ЭлементыФормы.НДФЛ Тогда
			
			Если НДФЛ.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение.ФизЛицо)).Количество() = 0 Тогда
				СтрокаТабличнойЧасти = НДФЛ.Добавить();
				СтрокаТабличнойЧасти.Физлицо = ВыбранноеЗначение.Физлицо;
			КонецЕсли;
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипВыбранногоЗначения) Тогда
		Если Элемент.Колонки.Найти("ВидРасчета") <> Неопределено Тогда
			Элемент.ТекущиеДанные.ВидРасчета = ВыбранноеЗначение;
			
		КонецЕсли;
		
	КонецЕсли;
	УстановитьВидимостьРКСН();		
КонецПроцедуры // ТабличнаяЧастьОбработкаВыбора()

Процедура НДФЛПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		//Если мФизлицаИсправление[ОформлениеСтроки.ДанныеСтроки.ФизЛицо] <> Неопределено Тогда
		//	ОформлениеСтроки.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
		//КонецЕсли;
		ОформлениеСтроки.Ячейки.ЗаголовокВычетовНаДетей.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ЗаголовокВычетовНаДетейИнвалидов.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ЗаголовокИмущественныхВычетов.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ Начисления и ее РЕКВИЗИТОВ 

Процедура ДополнительныеНачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Если Не ЗначениеЗаполнено(мСписокКодовНДФЛОсновныхНачислений) Тогда
		мСписокКодовНДФЛОсновныхНачислений = ПроведениеРасчетов.ПолучитьСписокКодовДоходаОсновныхНачислений()
	КонецЕсли;	
	
	//Предложим для выбора список расчетов, кроме доходов облагаемых по ставке 9%
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаНачислениеЗарплатыРаботникамОрганизаций");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Значение			= мСписокКодовНДФЛОсновныхНачислений;		
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура ДополнительныеНачисленияВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга("ДополнительныеНачисления"), Элемент.ТипЗначения.Типы()[0]);
	
КонецПроцедуры // ДополнительныеНачисленияВидРасчетаАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода вида расчета
Процедура ДополнительныеНачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга("ДополнительныеНачисления"), ЭтаФорма, Элемент.ТипЗначения.Типы()[0], мОбработкаТайпинга, мТекстТайпинга, мПоследнееЗначениеЭлементаТайпинга, Ложь);
	
КонецПроцедуры // ДополнительныеНачисленияВидРасчетаОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода кода дохода НДФЛ
Процедура НачисленияКодДоходаНДФЛПриИзменении(Элемент)
	ОтображатьКнопкуРасчетаВычетов(Истина);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода кода дохода НДФЛ
Процедура НачисленияКодДоходаНДФЛНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	мСписокКодовДоходов = ПроведениеРасчетов.ПолучитьСписокКодовДоходаОсновныхНачислений();
	мСписокКодовДоходов.СортироватьПоЗначению();
	ЭлементСписка = ВыбратьИзСписка(мСписокКодовДоходов,Элемент,мСписокКодовДоходов.НайтиПоЗначению(Элемент.Значение));
	
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
	
	ОтображатьКнопкуРасчетаВычетов(Истина);
	
КонецПроцедуры // КодДоходаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода физического лица
Процедура НачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина,  Дата, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // НачисленияФизлицоНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица -  
// подбирает подходящие должность и подразделение
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура НачисленияСотрудникПриИзменении(Элемент)

	ПроцедурыУправленияПерсоналом.ПроставитьДанныеСтроки(Элемент.Значение, Дата, ЭлементыФормы.Начисления);
	
	ТекущиеДанныеНачисления = ЭлементыФормы.Начисления.ТекущиеДанные;
	ТекущиеДанныеНачисления.Физлицо = Элемент.Значение.ФизЛицо;
	Если ТекущиеДанныеНачисления.ПодразделениеОрганизации.Владелец <> мГоловнаяОрганизация Тогда
		ТекущиеДанныеНачисления.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	ПодставитьВидРасчета();
	ПересчитатьРКСНПоСтроке(ЭлементыФормы.Начисления.ТекущиеДанные);
	ОтображатьКнопкуРасчетаВычетов(Истина);
КонецПроцедуры // НачисленияФизлицоПриИзменении()

Процедура НачисленияСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ПроставитьДанныеСтроки(ВыбранноеЗначение, Дата, ЭлементыФормы.Начисления);
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ВыбранноеЗначение.Физлицо);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПроцентСевернойНадбавкиФизЛицСрезПоследних.ФизЛицо) КАК КоличествоФизЛиц
	               |ИЗ
	               |	РегистрСведений.ПроцентСевернойНадбавкиФизЛиц.СрезПоследних(&ПериодРегистрации, Физлицо = &Физлицо) КАК ПроцентСевернойНадбавкиФизЛицСрезПоследних
	               |ГДЕ
	               |	ПроцентСевернойНадбавкиФизЛицСрезПоследних.СевернаяНадбавка > 0";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.КоличествоФизЛиц > 0 Тогда
		ЭлементыФормы.Начисления.Колонки.СевернаяНадбавка.Видимость = Истина;
	КонецЕсли;
	
	ЭлементыФормы.Начисления.Колонки.Результат.Видимость = 
	ЭлементыФормы.Начисления.Колонки.РайонныйКоэффициент.Видимость
		ИЛИ ЭлементыФормы.Начисления.Колонки.СевернаяНадбавка.Видимость;
	
	Если ЭлементыФормы.Начисления.Колонки.Результат.Видимость Тогда
		ЭлементыФормы.Начисления.Колонки.Начислено.ТекстШапки = "Начислено";
	Иначе
		ЭлементыФормы.Начисления.Колонки.Начислено.ТекстШапки = "Сумма";
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода Сотрудник
Процедура НачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода Сотрудник
Процедура НачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры


Процедура НачисленияПодразделениеОрганизацииПриИзменении(Элемент)
	ПересчитатьРКСНПоСтроке(ЭлементыФормы.Начисления.ТекущиеДанные);
КонецПроцедуры

Процедура НачисленияНачисленоПриИзменении(Элемент)
	ПересчитатьРКСНПоСтроке(ЭлементыФормы.Начисления.ТекущиеДанные);
КонецПроцедуры

Процедура НачисленияРайонныйКоэффициентПриИзменении(Элемент)
	ЭлементыФормы.Начисления.ТекущиеДанные.Результат = ЭлементыФормы.Начисления.ТекущиеДанные.Начислено 
		+ Элементыформы.Начисления.ТекущиеДанные.РайонныйКоэффициент
		+ Элементыформы.Начисления.ТекущиеДанные.СевернаяНадбавка;
КонецПроцедуры
	 
Процедура НачисленияСевернаяНадбавкаПриИзменении(Элемент)
	ЭлементыФормы.Начисления.ТекущиеДанные.Результат = ЭлементыФормы.Начисления.ТекущиеДанные.Начислено 
		+ Элементыформы.Начисления.ТекущиеДанные.РайонныйКоэффициент
		+ Элементыформы.Начисления.ТекущиеДанные.СевернаяНадбавка;
КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" поля ввода вида начисления 
//
Процедура ДополнительныеНачисленияВидРасчетаПриИзменении(Элемент)
	
	СведенияОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчета, Элемент.Значение);
	КодДохода = СведенияОВидеРасчета.КодДоходаНДФЛ;
	ЭлементыФормы.Начисления.ТекущиеДанные.КодДоходаНДФЛ = КодДохода;
	КодВычета = мСоответствиеДоходовИВычетов[КодДохода];
	Если КодВычета = Неопределено Тогда
		ЭлементыФормы.Начисления.ТекущиеДанные.КодВычета = ""
	Иначе
		ЭлементыФормы.Начисления.ТекущиеДанные.КодВычета = КодВычета
	КонецЕсли;
	
	ПриИзмененииКодаВычета(КодВычета);
	ОтображатьКнопкуРасчетаВычетов(Истина);
	
КонецПроцедуры // ДополнительныеНачисленияВидРасчетаПриИзменении()

Процедура ДополнительныеНачисленияКодВычетаПриИзменении(Элемент)
	ПриИзмененииКодаВычета(Элемент.Значение)
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода кода вычета по НДФЛ к доходу
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура ДополнительныеНачисленияКодВычетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлементСписка = ВыбратьИзСписка(мСписокКодовВычетов,Элемент,мСписокКодовВычетов.НайтиПоЗначению(Элемент.Значение));
	
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ПриИзмененииКодаВычета(ЭлементСписка.Значение);
	КонецЕсли;
	
КонецПроцедуры // ДополнительныеНачисленияКодВычетаНачалоВыбора()

Процедура ДополнительныеНачисленияКодВычетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга("КодВычета"), Элемент.ТипЗначения.Типы()[0]);
	
КонецПроцедуры

Процедура ДополнительныеНачисленияКодВычетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга("КодВычета"), ЭтаФорма, Элемент.ТипЗначения.Типы()[0], мОбработкаТайпинга, мТекстТайпинга, мПоследнееЗначениеЭлементаТайпинга, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" строки начисления 
//
Процедура НачисленияПослеУдаления(Элемент)
	
	ОтображатьКнопкуРасчетаВычетов(Истина);
	
	УстановитьВидимостьРКСН();
КонецПроцедуры

// Процедура обеспечивает синхронизацию строк табличных полей 
//
// Параметры:
//	Элемент - табличное поле, которое отображает т.ч.
//	
Процедура ДополнительныеНачисленияПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияДополнительныеНачисленияПриАктивизацииСтроки", 0.1, Истина);	 	
	ПоказатьСтатусСтроки();
	
КонецПроцедуры // ДополнительныеНачисленияПриАктивизацииСтроки()

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля ДополнительныеНачисления
//
Процедура ОбработчикОжиданияДополнительныеНачисленияПриАктивизацииСтроки()
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда

		Если ЭлементыФормы.Начисления.ТекущиеДанные.КодВычета = мКодВычетаПоМатпомощиПриРожденииРебенка Тогда
			ТочностьСуммыВычета = 0;
			МаксимальноеЗначение = 99;
		Иначе
			ТочностьСуммыВычета = 2;
			МаксимальноеЗначение = 0;
		КонецЕсли;
		ЭлементыФормы.Начисления.Колонки.СуммаВычета.ЭлементУправления.МаксимальноеЗначение = МаксимальноеЗначение;
		ЭлементыФормы.Начисления.Колонки.СуммаВычета.ЭлементУправления.Формат = "ЧДЦ=" + ТочностьСуммыВычета;
		
	КонецЕсли;	
	
КонецПроцедуры // ОбработчикОжиданияДополнительныеНачисленияПриАктивизацииСтроки

Процедура ДополнительныеНачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	// вычет к доходу не всегда сумма, для матпомощи - это количество детей
	ТочностьСуммыВычета = ?(ДанныеСтроки.КодВычета = мКодВычетаПоМатпомощиПриРожденииРебенка,0,2);
	ОформлениеСтроки.Ячейки.СуммаВычета.УстановитьТекст(Формат(ДанныеСтроки.СуммаВычета,"ЧДЦ=" + ТочностьСуммыВычета));
	
	Если ДанныеСтроки <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.ОписаниеОшибок) Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДополнительныеНачисленияПриВыводеСтроки()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ НДФЛ и ее РЕКВИЗИТОВ

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
Процедура НДФЛФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 0, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // НДФЛФизЛицоНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода физлица
Процедура НДФЛФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
Процедура НДФЛФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Организация);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
Процедура НДФЛФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Элемент.Значение, Организация, Истина);
	
КонецПроцедуры

Процедура НДФЛМесяцНалоговогоПериодаПриИзменении(Элемент)
	Элемент.Значение = НачалоМесяца(Элемент.Значение) 
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// {ОбособленныеПодразделения

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(
			ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
	// устанавливаем видимость колонки районный коэффициент
	Если ПодразделениеОрганизации.ОбособленноеПодразделение
		И ПодразделениеОрганизации.РайонныйКоэффициент > 1 Тогда
		ЭлементыФормы.Начисления.Колонки.РайонныйКоэффициент.Видимость = Истина;
		ЭлементыФормы.Начисления.Колонки.Результат.Видимость = Истина;
	Иначе
		ЭлементыФормы.Начисления.Колонки.РайонныйКоэффициент.Видимость = Ложь;
		Если Не ЭлементыФормы.Начисления.Колонки.СевернаяНадбавка.Видимость Тогда
			ЭлементыФормы.Начисления.Колонки.Результат.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементыФормы.Начисления.Колонки.Результат.Видимость Тогда
		ЭлементыФормы.Начисления.Колонки.Начислено.ТекстШапки = "Начислено";
	Иначе
		ЭлементыФормы.Начисления.Колонки.Начислено.ТекстШапки = "Сумма";
	КонецЕсли;

КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()

// }ОбособленныеПодразделения 

////////////////////////////////////////////////////////
// {Процедуры помощника

Процедура УстановитьВидимость()
	
	Если НЕ КорректировкаРасчета Тогда
		
		ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.СтраницаДополнительныеНачисления;
		
		ЭлементыФормы.Панель1.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;		
		ЭлементыФормы.Панель2.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ЭлементыФормы.Начисления.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
		ЭлементыФормы.НадписьДиагностика.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки,);
		
	Иначе
		
		ЭлементыФормы.Панель1.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;		
		ЭлементыФормы.Панель2.Свертка = РежимСверткиЭлементаУправления.Верх;
		
		ЭлементыФормы.Начисления.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.ЧертаСверху, 1);
		ЭлементыФормы.НадписьДиагностика.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.ЧертаСверху, 1);
				
	КонецЕсли;
	
	ЭлементыФормы.НадписьПериод.Видимость = (КорректировкаРасчета) И (ДокументОбъект.ПериодРегистрации <> НачалоМесяца(Дата));
	ЭлементыФормы.ПериодРегистрации.Видимость = (КорректировкаРасчета) И (ДокументОбъект.ПериодРегистрации <> НачалоМесяца(Дата));
	
	ЭлементыФормы.Начисления.Колонки.КодДоходаНДФЛ.Видимость = КорректировкаРасчета;
	ЭлементыФормы.Начисления.Колонки.КодВычета.Видимость = КорректировкаРасчета;
	ЭлементыФормы.Начисления.Колонки.СуммаВычета.Видимость = КорректировкаРасчета;
	ЭлементыФормы.Начисления.Колонки.КодДоходаНДФЛ.ИзменятьНастройку= КорректировкаРасчета;
	ЭлементыФормы.Начисления.Колонки.КодВычета.ИзменятьНастройку = КорректировкаРасчета;
	ЭлементыФормы.Начисления.Колонки.СуммаВычета.ИзменятьНастройку = КорректировкаРасчета;
	
	Если НЕ КорректировкаРасчета Тогда
		СкрытьКнопкуРасчетаВычетов();
	Иначе
		ОтображатьКнопкуРасчетаВычетов(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КорректировкаРасчета(Кнопка)
		
	УстановитьВидимость();
	
КонецПроцедуры

Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ВыбраннаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ПроверитьЗаполнениеНачислений(, ВыбраннаяСтрока.НомерСтроки);
		ПоказатьСтатусСтроки();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПоказатьСтатусСтроки()
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.ОписаниеОшибок) Тогда
			ЭлементыФормы.НадписьДиагностика.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
			ЭлементыФормы.НадписьДиагностика.Значение = ДанныеСтроки.ОписаниеОшибок;
		Иначе
			ЭлементыФормы.НадписьДиагностика.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
			ЭлементыФормы.НадписьДиагностика.Значение = "Сведения для расчета введены корректно.";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодставитьВидРасчета()
	
	ВидРасчета = ЭлементыФормы.Начисления.ТекущиеДанные.ВидРасчета;
	Если Не ЗначениеЗаполнено(ВидРасчета) Тогда
		ЭлементыФормы.Начисления.ТекущиеДанные.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням;
		ЭлементыФормы.Начисления.ТекущиеДанные.КодДоходаНДФЛ = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням.КодДоходаНДФЛ;
	КонецЕсли;
	
КонецПроцедуры

// Процедуры помощника}
////////////////////////////////////////////////////////



мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["Начисления"]				= Ложь;
мСинхронизируемыеТабличныеЧасти["НДФЛ"]					    = Ложь;

мСведенияОВидахРасчета = Новый Соответствие;



