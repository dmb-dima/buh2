Перем мВалютаРегламентированногоУчета Экспорт;
Перем мУчетнаяПолитика Экспорт;
Перем мИспользоватьОборотнуюНоменклатуру Экспорт;
Перем мРазделятьПоСтавкамНДС Экспорт;
Перем мУчетВПродажныхЦенах Экспорт;

// Используется для определения необходимости изменения параметра включения НДС в стоимость
Перем мЕстьЕНВД Экспорт;
//Используется для определения необходимости отображения действий над НДС в документе
Перем мСложныйУчетНДС Экспорт;
// Используется для определения необходимости указания счета списания НДС на расходы
Перем мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПеремещениеТоваров()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	СкладОтправитель,
	|	СкладОтправитель.Представление КАК Поставщик,
	|	СкладПолучатель,
	|	СкладПолучатель.Представление  КАК Покупатель
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаХранения,
	|	Цена,
	|   НомерСтроки,
	|	1 КАК ID
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Цена                 КАК Цена,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Цена
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаХранения,
	|	Цена,
	|   НомерСтроки,
	|	2 КАК ID
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Цена                 КАК Цена,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ПеремещениеТоваров.ТоварыНаКомиссии КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Цена
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	NULL,
	|	NULL,
	|	Номенклатура.БазоваяЕдиницаИзмерения,
	|	0,
	|	НомерСтроки,
	|	3
	|	
	|ИЗ
	|	Документ.ПеремещениеТоваров.ВозвратнаяТара КАК ПеремещениеТоваров
	|
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Накладная на перемещение");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = Шапка.Поставщик;
	ОбластьМакета.Параметры.Поставщик = Шапка.СкладОтправитель;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = Шапка.Покупатель;
	ОбластьМакета.Параметры.Получатель = Шапка.СкладПолучатель;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьКолонкаТовар = Макет.Область("Товар");
	
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

	НС = 1;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		ОбластьНомера.Параметры.НомерСтроки = НС;
		ТабДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
		ТабДокумент.Присоединить(ОбластьДанных);

		НС = НС + 1;
	КонецЦикла;

	// Вывести подвал
	ОбластьНомера = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Подвал|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

// Формирует табличный документ по унифицированной форме ТОРГ-13
// 
// Возвращаемое значение
//  Табличный документ - унифицированная форма ТОРГ-13
//
Функция ПечатьТОРГ13()
	
	Если мУчетВПродажныхЦенах = Неопределено Тогда
		УчетнаяПолитикаНеЗадана = Ложь;
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
		
		мУчетВПродажныхЦенах = Ложь;
		Если мУчетнаяПолитика.Количество() > 0 Тогда	
			Если (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
				мУчетВПродажныхЦенах = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВалютаЗапроса = мВалютаРегламентированногоУчета;
	ВалютаПечати  = мВалютаРегламентированногоУчета;
	Параметры     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаЗапроса, Дата);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер КАК НомерДокумента,
	|	Дата  КАК ДатаДокумента,
	|	Организация,
	|	СкладОтправитель КАК ОтправительПодразделение,
	|	СкладПолучатель  КАК ПолучательПодразделение
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("Курс",            Параметры.Курс);
	ЗапросПоТоварам.УстановитьПараметр("Кратность",       Параметры.Кратность);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	Номенклатура.Код                                           КАК ТоварКод,
	|	Количество                                                 КАК Количество,
	|	КоличествоМест                                             КАК КоличествоМест,
	|	Коэффициент                                                КАК КоличествоВОдномМесте,
	|	Цена * &Курс / &Кратность                                  КАК Цена,
	|	ЕдиницаИзмерения.Наименование                              КАК ЕдиницаИзмеренияМестНаименование,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Наименование          КАК ЕдиницаИзмеренияНаименование,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Код                   КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|   НомерСтроки,
	|	1 КАК ID
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура          КАК Номенклатура,
	|		ЕдиницаИзмерения      КАК ЕдиницаИзмерения,
	|		ЦенаВРознице          КАК Цена,
	|		Коэффициент           КАК Коэффициент,
	|		СУММА(Количество)     КАК Количество,
	|		СУММА(КоличествоМест) КАК КоличествоМест,
	|		МИНИМУМ(НомерСтроки)  КАК НомерСтроки
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЦенаВРознице,
	|		Коэффициент
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	Номенклатура.Код,
	|	Количество,
	|	КоличествоМест,
	|	Коэффициент,
	|	Цена * &Курс / &Кратность,
	|	ЕдиницаИзмерения,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|   НомерСтроки,
	|	2
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура          КАК Номенклатура,
	|		ЕдиницаИзмерения      КАК ЕдиницаИзмерения,
	|		Цена                  КАК Цена,
	|		Коэффициент           КАК Коэффициент,
	|		СУММА(Количество)     КАК Количество,
	|		СУММА(КоличествоМест) КАК КоличествоМест,
	|		МИНИМУМ(НомерСтроки)  КАК НомерСтроки
	|	ИЗ
	|		Документ.ПеремещениеТоваров.ТоварыНаКомиссии КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Цена,
	|		Коэффициент
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	Номенклатура.Код,
	|	Количество,
	|	Количество,
	|	0,
	|	0,
	|	NULL,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	НомерСтроки,
	|	3
	|	
	|ИЗ
	|	Документ.ПеремещениеТоваров.ВозвратнаяТара КАК ПеремещениеТоваров
	|
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ЗапросПоТоварам.Текст = СтрЗаменить(ЗапросПоТоварам.Текст, "Номенклатура.Код", "Номенклатура.Артикул");
	КонецЕсли;
	
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Макет = ПолучитьОбщийМакет("ТОРГ13");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_ТОРГ13";

	// Выводим общие реквизиты шапки
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ОбластьМакета         = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	ТабДокумент.Вывести(ОбластьМакета);

	НомерСтраницы = 1;
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	// инициализация итогов по странице
	ИтогКоличествоМестПоСтранице = 0;
	ИтогМассаБруттоПоСтранице    = 0;
	ИтогМассыНеттоПоСтранице     = 0;
	ИтогСуммыПоСтранице          = 0;

	// инициализация итогов по документу
	ИтогоКоличество  = 0;
	ИтогоМассаБрутто = 0;
	ИтогоМассаНетто  = 0;
	ИтогоСумма       = 0;

	Ном = 0;

	// Выводим многострочную часть документа
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
	ОбластьМакетаВсего = Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	
    ТаблицаСуммСписания = БухгалтерскийУчет.ПолучитьСуммуСписанияАктивов(ЭтотОБъект);
	ТаблицаСуммСписания.Индексы.Добавить("Номенклатура");

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Ном = Ном + 1;
				
		КоличествоМест = ?(ВыборкаСтрокТовары.КоличествоМест = 0, ВыборкаСтрокТовары.Количество, ВыборкаСтрокТовары.КоличествоМест);

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		//Определим цену - в случае розницы в продажных ценах - продажную
		Если (ВыборкаСтрокТовары.ID = 1) И мУчетВПродажныхЦенах И 
			(СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка ИЛИ СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
			
			ЦенаПеремещения = ВыборкаСтрокТовары.Цена;
			Сумма = ЦенаПеремещения * КоличествоМест;
			
		ИначеЕсли (ВыборкаСтрокТовары.ID = 1) И мУчетВПродажныхЦенах и 
			(СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Розничный ИЛИ СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Розничный) Тогда
			
			ЦенаПеремещения = Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаСтрокТовары.Номенклатура, СкладПолучатель.ТипЦенРозничнойТорговли, 
																				Дата, мВалютаРегламентированногоУчета, 1, 1);
			Сумма = ЦенаПеремещения * КоличествоМест;
		Иначе
			СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(ВыборкаСтрокТовары.Номенклатура ,"Номенклатура");
			Если СтрокаСуммСписания = Неопределено Тогда
				ЦенаПеремещения = 0;
				Сумма = 0;
			Иначе
				ЦенаПеремещения = ?(КоличествоМест = 0, 0, СтрокаСуммСписания.Сумма / КоличествоМест);
				Сумма = Окр(ЦенаПеремещения * КоличествоМест, 2, 1);
			КонецЕсли;
		КонецЕсли;
		ОбластьМакета.Параметры.Цена  = ЦенаПеремещения;
		ОбластьМакета.Параметры.Сумма = Сумма;
		ОбластьМакета.Параметры.КоличествоМест = КоличествоМест;
		ОбластьМакета.Параметры.ТоварНаименование = ?(ВыборкаСтрокТовары.ID = 3, СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + " (возвратная тара)", ВыборкаСтрокТовары.ТоварНаименование);
		
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		СтрокаСПодвалом.Добавить(ОбластьИтоговПоСтранице);
		Если Ном = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;

		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 1 Тогда
				
				ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;
				
				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				// инициализация итогов по странице
				ИтогКоличествоМестПоСтранице = 0;
				ИтогМассаБруттоПоСтранице    = 0;
				ИтогМассаНеттоПоСтранице     = 0;
				ИтогСуммыПоСтранице          = 0;
				
				НомерСтраницы = НомерСтраницы + 1;
				
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по странице
		ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + КоличествоМест;
		ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице    + 0;
		ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице     + 0;
		ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + Сумма;

		// Обновим итогов по документу
		ИтогоКоличество  = ИтогоКоличество  + КоличествоМест;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
		ИтогоСумма       = ИтогоСумма       + Сумма;

	КонецЦикла;

	ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

	// Выводим итоги по документу в целом
	
	ОбластьМакетаВсего.Параметры.ИтогоКоличествоМест = ИтогоКоличество;
	ОбластьМакетаВсего.Параметры.ИтогоМассаБрутто    = ИтогоМассаБрутто;
	ОбластьМакетаВсего.Параметры.ИтогоМассаНетто     = ИтогоМассаНетто;
	ОбластьМакетаВсего.Параметры.ИтогоСумма          = ИтогоСумма;

	ТабДокумент.Вывести(ОбластьМакетаВсего);

	// Выводим подвал документа
	ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
	ПараметрыПрописиНаРусском = ВалютаПечати.ПараметрыПрописиНаРусском;
	ПараметрыПрописиНаРусском = СтрЗаменить(ПараметрыПрописиНаРусском, "1", "0");
	ПараметрыПрописиНаРусском = СтрЗаменить(ПараметрыПрописиНаРусском, "2", "0");
	ПараметрыПрописиНаРусском = СтрЗаменить(ПараметрыПрописиНаРусском, "3", "0");
	ОбластьМакетаПодвал.Параметры.ИтогоСуммаПрописью = ЧислоПрописью(Цел(ИтогоСумма), "L=ru_RU; НП=Ложь; НД=Ложь", ПараметрыПрописиНаРусском);
	ОбластьМакетаПодвал.Параметры.ИтогоСуммаКоп      = Формат(Цел((ИтогоСумма-Цел(ИтогоСумма))*100), "ЧЦ=2; ЧН=00");
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ13()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Ведомость" Тогда
		
		ТабДокумент = ПечатьПеремещениеТоваров();
		
	ИначеЕсли ИмяМакета = "ТОРГ13" тогда
		
		// Унифицированная форма ТОРГ-13 (накладная на внутренее перемещение)
		ТабДокумент = ПечатьТОРГ13();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

//Определяет параметры учетной политики (сложный учет НДС по организации)
Процедура ОпределитьСложныйУчетНДС() Экспорт
	
	ПараметрыНеПолучены = Ложь;
	ПараметрыНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ПараметрыНеПолучены, Организация);
	Если ПараметрыНеПолучены Тогда
		мСложныйУчетНДС = Ложь;    
		мЕстьЕНВД = Ложь;
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
	Иначе
		мСложныйУчетНДС = ПараметрыНУ.СложныйУчетНДС И Не ПараметрыНУ.УСН И Не ПараметрыНУ.УпрощенныйУчетНДС;
		мЕстьЕНВД = ПараметрыНУ.ОрганизацияЯвляетсяПлательщикомЕНВД и ПараметрыНУ.РозничнаяТорговляОблагаетсяЕНВД;
		
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = ПараметрыНУ.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;
		Если НЕ ЗначениеЗаполнено(мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость) Тогда
			мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

// Процедура для заполнения счетов списания НДС значениями по умолчанию
//
// Параметры
//  ВыводитьВопрос  – <Булево> – задавать вопрос перед заполнением счетов
//  ТолькоНУ		– <Булево> – заполнять только счета налогового учета
//
Процедура ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию(ВыводитьВопрос = Ложь, ТолькоНУ = Ложь) Экспорт
	
	#Если Клиент Тогда
		
		Если ВыводитьВопрос Тогда
			Ответ = Вопрос("Установить счета и аналитику для списания НДС
			|в соответствии со значениями по умолчанию?", 
			РежимДиалогаВопрос.ДаНет, , , "Изменения счетов списания НДС");
			
		    Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	#КонецЕсли
	
	Если мЕстьЕНВД = Неопределено Тогда
		ОпределитьСложныйУчетНДС();
	КонецЕсли;
	
	СтатьяЗатратПоУмолчанию = ?((СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка 
	или СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Розничный) 
	и мЕстьЕНВД,Справочники.СтатьиЗатрат.СписаниеНДСНаРасходыЕНВД, Справочники.СтатьиЗатрат.СписаниеНДСНаРасходы);
	
	Если не ТолькоНУ Тогда
		СчетСписанияНДС = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
		СубконтоСтатьяЗатрат = СчетСписанияНДС.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Если не СубконтоСтатьяЗатрат = неопределено Тогда
			ЭтотОбъект["СубконтоСписанияНДС"+СубконтоСтатьяЗатрат.НомерСтроки] = СтатьяЗатратПоУмолчанию;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию()

// Процедура вызывается при выборе пункта меню "Скопировать состав" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура ЗаполнитьПоПоступлению(ИмяТабЧасти, Режим, Основание = Неопределено, ИмяТабЧастиИсточника = Неопределено) Экспорт

	Если Основание = Неопределено Тогда
		ФормаПоступления = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
		ФормаПоступления.Заголовок = "Выберите документ поступления для заполнения документа реализации";
		ФормаПоступления.РежимВыбора = Истина;
		ФормаПоступления.Отбор.Организация.Значение = Организация;
		ФормаПоступления.Отбор.Организация.Использование = Истина;
		Поступление = ФормаПоступления.ОткрытьМодально();
	Иначе
		Поступление = Основание;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;

	ТабЧасть = ЭтотОбъект[ИмяТабЧасти];

	Если ТабЧасть.Количество() > 0 И Режим = "Заполнить" Тогда

		#Если Клиент Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 
		#КонецЕсли

		ТабЧасть.Очистить();

	КонецЕсли;
	
	ТабЧастьИсточник = ?(ИмяТабЧастиИсточника = Неопределено, ИмяТабЧасти, ИмяТабЧастиИсточника);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Поступление", Поступление);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.НомерСтроки,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Количество" +?(ТабЧастьИсточник = "Товары",",
	|	ПоступлениеТоваровУслугТовары.КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент", "") + "
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг."+ТабЧастьИсточник + " КАК ПоступлениеТоваровУслугТовары
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление";
	ВыборкаТоваров = Запрос.Выполнить().Выбрать();

	Пока ВыборкаТоваров.Следующий() Цикл

		СтрокаТЧ = ТабЧасть.Добавить();

		СтрокаТЧ.Номенклатура        = ВыборкаТоваров.Номенклатура;
		СтрокаТЧ.Количество          = ВыборкаТоваров.Количество;

		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, Истина);
		
		Если ТабЧастьИсточник = "Товары" Тогда

			СтрокаТЧ.ЕдиницаИзмерения    = ВыборкаТоваров.ЕдиницаИзмерения;
			СтрокаТЧ.Коэффициент         = ВыборкаТоваров.Коэффициент;
			СтрокаТЧ.КоличествоМест      = ВыборкаТоваров.КоличествоМест;
			
		КонецЕсли;
		
		Если ТабЧастьИсточник = "Оборудование" Тогда

			СтрокаТЧ.ЕдиницаИзмерения = ВыборкаТоваров.Номенклатура.БазоваяЕдиницаИзмерения;
			СтрокаТЧ.Коэффициент      = 1;
			СтрокаТЧ.КоличествоМест   = ВыборкаТоваров.Количество;
			
		КонецЕсли;
		
		
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Ведомость,ТОРГ13","Перемещение товаров","ТОРГ-13 (Накладная на внутреннее перемещение)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчета(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, СчетаУчетаНовые, Заполнять)

	Если Заполнять = Истина Тогда
		Если ИмяТабЧасти = "ТоварыНаКомиссии" Тогда
			СтрокаТЧ.СчетУчета      = СчетаУчета.СчетУчетаДоп;
			СтрокаТЧ.НовыйСчетУчета = СчетаУчетаНовые.СчетУчетаДоп;
		Иначе
			СтрокаТЧ.СчетУчета      = СчетаУчета.СчетУчета;
			СтрокаТЧ.НовыйСчетУчета = СчетаУчетаНовые.СчетУчета;
		КонецЕсли;

	ИначеЕсли Заполнять = Ложь Тогда

		СтрокаТЧ.СчетУчета      = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчета()

// Заполняет счета в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, Заполнять) Экспорт

	СчетаУчета 		= БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, СкладОтправитель);
	СчетаУчетаНовые = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, СкладПолучатель);

	ЗаполнитьСчета(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, СчетаУчетаНовые, Заполнять);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, Заполнять) Экспорт

	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ИмяТабЧасти, Заполнять);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	Перем ПодразделениеОстатков;
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	//ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");

	ТаблицаТоваров.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,   "Регистратор");

	Если (мУчетВПродажныхЦенах)
		И ((СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Розничный) 
		ИЛИ (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Розничный)) Тогда
		
		ТаблицаТоваров.Колонки.Добавить("РозничнаяЦена");
		ТаблицаТоваров.Колонки.Добавить("УчетнаяЦена");
		ТаблицаТоваров.Колонки.Добавить("РозничнаяЦенаПолучатель");
		
		// Установим параметры запроса
		ПорядокСубконто = Новый Массив();
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		
		МассивНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
		
		Склад = ?(СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Розничный, СкладОтправитель, СкладПолучатель);
		
		// {ОбособленныеПодразделения
		ПодразделениеОстатков = ?(СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Розничный, 
			ПодразделениеОтправитель, ПодразделениеПолучатель);
		// }ОбособленныеПодразделения
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Склад",           Склад);
		Запрос.УстановитьПараметр("КонецПериода",    СтруктураШапкиДокумента.Дата);
		Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Подразделение",   ПодразделениеОстатков);
		Запрос.УстановитьПараметр("Счет",     		 ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
		Запрос.УстановитьПараметр("Номенклатура", 	 МассивНоменклатуры);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
		|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет, &ПорядокСубконто, Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL) И Субконто1 В (&Номенклатура) И Субконто2 = &Склад) КАК Остатки
		|
		|ГДЕ
		|	Остатки.КоличествоОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Субконто1
		|";
		
		ТаблицаУчетныхЦен = Запрос.Выполнить().Выгрузить();
		ТаблицаУчетныхЦен.Индексы.Добавить("Номенклатура");

		Для Каждого Строка из ТаблицаТоваров Цикл
			СтрокаТаблицыЦен = ТаблицаУчетныхЦен.Найти(Строка.Номенклатура, "Номенклатура");
			Если НЕ СтрокаТаблицыЦен = Неопределено Тогда
				Строка.УчетнаяЦена = Окр(?(СтрокаТаблицыЦен.КоличествоОстаток = 0, 0, СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток), 2, 1);
			Иначе
				Строка.УчетнаяЦена = 0;
			КонецЕсли;
			Строка.РозничнаяЦена = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, Склад.ТипЦенРозничнойТорговли, 
															СтруктураШапкиДокумента.Дата, мВалютаРегламентированногоУчета, 1, 1);
															
			Если СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
				Строка.РозничнаяЦенаПолучатель = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, СкладПолучатель.ТипЦенРозничнойТорговли, 
															СтруктураШапкиДокумента.Дата, мВалютаРегламентированногоУчета, 1, 1);
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
	
	//Если списание из АТТ по продажным ценам, очистим документ оприходования и себестоимость
	
	Если (мУчетВПродажныхЦенах)
		И (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Розничный) Тогда
		
		ТаблицаТоваров.ЗаполнитьЗначения(Неопределено, 	"ДокументОприходования");
		ТаблицаТоваров.ЗаполнитьЗначения(0, 			"Себестоимость");
	КонецЕсли;
	
	ОписаниеТипов_ВидыСубконтоХозрасчетные =  Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
	
	ТаблицаТоваров.Колонки.Добавить("СчетСписанияНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаТоваров.Колонки.Добавить("СубконтоСписанияНДС1", ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаТоваров.Колонки.Добавить("СубконтоСписанияНДС2", ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаТоваров.Колонки.Добавить("СубконтоСписанияНДС3", ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетСписанияНДС,"СчетСписанияНДС");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоСписанияНДС1,"СубконтоСписанияНДС1");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоСписанияНДС2,"СубконтоСписанияНДС2");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоСписанияНДС3,"СубконтоСписанияНДС3");
	
	ТаблицаТоваров.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаТоваров.Колонки.Добавить("КорПодразделениеОрганизации");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОтправитель, "ПодразделениеОрганизации");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеПолучатель, "КорПодразделениеОрганизации");

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоКомТоварам - результат запроса по табличной части "Товары на комиссии",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуКомТоваров(РезультатЗапросаПоКомТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоКомТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");

	ТаблицаТоваров.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаТоваров.Колонки.Добавить("КорПодразделениеОрганизации");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОтправитель, "ПодразделениеОрганизации");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеПолучатель, "КорПодразделениеОрганизации");

	ТаблицаТоваров.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,   "Регистратор");
    	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	ТаблицаТары.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТары.Колонки.Добавить("ДокументОприходования");
	ТаблицаТары.Колонки.Добавить("Регистратор");

	ТаблицаТары.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаТары.Колонки.Добавить("КорПодразделениеОрганизации");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОтправитель, "ПодразделениеОрганизации");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеПолучатель, "КорПодразделениеОрганизации");

	ТаблицаТары.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
	ТаблицаТары.ЗаполнитьЗначения(ЭтотОбъект,   "Регистратор");

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, СкладОтправитель, СкладПолучатель");
    Если СтруктураШапкиДокумента.СложныйУчетНДС Тогда
		СтруктураОбязательныхПолей.Вставить("НДСвСтоимостиТоваров");
	КонецЕсли; 
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	Если (мУчетВПродажныхЦенах)
		И (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) 
		И (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
		
		СтруктураОбязательныхПолей = Новый Структура();
		
	Иначе
		
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
		
	КонецЕсли;
	
	// Укажем, что надо проверить:
	
	СтруктураОбязательныхПолей.Вставить("СчетУчета");
	СтруктураОбязательныхПолей.Вставить("НовыйСчетУчета");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если (мУчетВПродажныхЦенах)
		И (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) 
		И (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
		
	Иначе
		
		// Здесь услуг быть не должно.
		УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) И ЗначениеЗаполнено(СтрокаТаблицы.НовыйСчетУчета)
			И (НЕ СтрокаТаблицы.СчетУчета.Забалансовый = СтрокаТаблицы.НовыйСчетУчета.Забалансовый) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Товары"": ";
			СтрокаСообщения = "Перемещение между балансовым и забалансовым счетами!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	Если (мУчетВПродажныхЦенах)
		И ((СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Розничный) 
		ИЛИ (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Розничный)) Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			
			//Допустимое отклонение цены составляет цену минимальной единицы количества (0.001)
			ДопустимоеОтклонение = СтрокаТаблицы.УчетнаяЦена * 0.001;
			
			Если СтрокаТаблицы.РозничнаяЦена = 0 Тогда
				СтрокаСообщения = "Для товара """ + СтрокаТаблицы.Номенклатура + """ не установлена розничная цена.";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			ИначеЕсли СтрокаТаблицы.УчетнаяЦена = 0 Тогда
				// Учетная цена неизвестна.
			ИначеЕсли СтрокаТаблицы.РозничнаяЦена - СтрокаТаблицы.УчетнаяЦена > ДопустимоеОтклонение
				ИЛИ СтрокаТаблицы.РозничнаяЦена - СтрокаТаблицы.УчетнаяЦена < - ДопустимоеОтклонение Тогда
				СтрокаСообщения = "Для товара """ + СтрокаТаблицы.Номенклатура + """ розничная цена (" + 
									СтрокаТаблицы.РозничнаяЦена + ") не равна учетной цене(" + СтрокаТаблицы.УчетнаяЦена + ".
									|измените розничную цену или проведите переоценку.";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары на комиссии".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиКомТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ТоварыНаКомиссии";

	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	// Укажем, что надо проверить:
	
	СтруктураОбязательныхПолей.Вставить("СчетУчета");
	СтруктураОбязательныхПолей.Вставить("НовыйСчетУчета");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) И ЗначениеЗаполнено(СтрокаТаблицы.НовыйСчетУчета)
			И (НЕ СтрокаТаблицы.СчетУчета.Забалансовый = СтрокаТаблицы.НовыйСчетУчета.Забалансовый) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Товары на комиссии"": ";
			СтрокаСообщения = "Перемещение между балансовым и забалансовым счетами!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
    	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	СтруктураОбязательныхПолей.Вставить("СчетУчета");
	СтруктураОбязательныхПолей.Вставить("НовыйСчетУчета");

	// Теперь вызовем общую процедуру проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);

	Для Каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) И ЗначениеЗаполнено(СтрокаТаблицы.НовыйСчетУчета)
			И (НЕ СтрокаТаблицы.СчетУчета.Забалансовый = СтрокаТаблицы.НовыйСчетУчета.Забалансовый) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Возвратная тара"": ";
			СтрокаСообщения = "Перемещение между балансовым и забалансовым счетами!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоКомТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	
	Если мУчетВПродажныхЦенах Тогда
				
		//Если розница
		Проводки = Движения.Хозрасчетный;
		
		ПартионныйУчет = УправлениеЗапасами.ВедетсяПартионныйУчет(ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация), "БУ");
		
		//Из опта
		Если (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Оптовый) Тогда
						
			//В розницу
			Если НЕ СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
				
				УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТоварам, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, , "Перемещение в розницу");
				
				НТТ = (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
				АТТ = (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Розничный);
				
				ТаблицаНДСПартииСписания = Новый ТаблицаЗначений;
				ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаНДСПартииСписания, Отказ, Заголовок);
				Если ТаблицаНДСПартииСписания.Количество() > 0 Тогда
					Если (АТТ) и УправлениеЗапасамиПартионныйУчет.НаСчетеВедетсяПартионныйУчет(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ) Тогда
						ТаблицаНДСПартииСписания.Свернуть("НомерСтроки, Партия, СчетСписанияНДС", "НДС, СуммаНДСВключенВСтоимость, СуммаНДСИсключенИзСтоимости, СуммаНДССписанНаРасходы");
						ТаблицаНДСПартииСписания.Индексы.Добавить("НомерСтроки, Партия");
					Иначе
						ТаблицаНДСПартииСписания.Свернуть("НомерСтроки, СчетСписанияНДС", "НДС, СуммаНДСВключенВСтоимость, СуммаНДСИсключенИзСтоимости, СуммаНДССписанНаРасходы");
					КонецЕсли;
				КонецЕсли;
				
				//Формирование торговой наценки
				Для Каждого Строка Из ТаблицаПоТоварам Цикл
					
					//В АТТ с учетом по партиям
					Если АТТ и УправлениеЗапасамиПартионныйУчет.НаСчетеВедетсяПартионныйУчет(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ) Тогда
						Для Каждого Партия Из Строка.СписанныеПартии Цикл
							
							КоррНДС = 0;
							Если ТаблицаНДСПартииСписания.Количество() > 0  Тогда
								СтруктураОтбора = Новый Структура;
								СтруктураОтбора.Вставить("НомерСтроки",	Строка.НомерСтроки);
								СтруктураОтбора.Вставить("Партия",		Партия.Партия);
								
								СтрокаНДС = ТаблицаНДСПартииСписания.НайтиСтроки(СтруктураОтбора);
								Для Каждого ПартияНДС Из СтрокаНДС Цикл
									КоррНДС = КоррНДС + ПартияНДС.СуммаНДСВключенВСтоимость - ПартияНДС.СуммаНДСИсключенИзСтоимости;
									Если Строка.КорСчетСписания = ПартияНДС.СчетСписанияНДС Тогда
										КоррНДС = КоррНДС + ПартияНДС.СуммаНДССписанНаРасходы;
									КонецЕсли;
								КонецЦикла;								
							КонецЕсли;
							ТорговаяНаценка		 = Окр(Строка.РозничнаяЦена * Партия.Количество,2,1) - (Партия.СуммаСписания + КоррНДС);
							ТорговаяНаценкаНУ	 = Окр(Строка.РозничнаяЦена * Партия.Количество,2,1) - (Партия.СуммаСписанияНУ + КоррНДС);
							ТорговаяНаценкаПР	 = - (Партия.СуммаСписанияПР);
							ТорговаяНаценкаВР	 = - (Партия.СуммаСписанияВР);
							СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
							
							Если ТорговаяНаценка <> 0 ИЛИ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И ТорговаяНаценкаНУ <> 0) Тогда
								Проводка = Проводки.Добавить();
								Проводка.Период      = Дата;
								Проводка.Организация = Организация;
								Проводка.Содержание  = "Перемещение " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(Строка.СчетУчета);
								
								Проводка.СчетДт      = Строка.КорСчетСписания;
								Проводка.СчетКт      = СчетНаценки;
								
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
								
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
								Если (ПартионныйУчет) Тогда
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
								КонецЕсли;
								
								Проводка.Сумма       = ТорговаяНаценка;
								
								БухгалтерскийУчет.УстановитьПодразделенияПроводки(
									Проводка, СтруктураШапкиДокумента.ПодразделениеПолучатель, СтруктураШапкиДокумента.ПодразделениеПолучатель);
								
								Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
									НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(ТорговаяНаценкаНУ,ТорговаяНаценкаНУ,ТорговаяНаценкаПР,ТорговаяНаценкаПР,ТорговаяНаценкаВР,ТорговаяНаценкаВР,Проводка);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
					Иначе //В НТТ
						
						СуммаСписания = 0;
						СуммаСписанияНУ = 0;
						СуммаСписанияПР = 0;
						СуммаСписанияВР = 0;
						Для Каждого Партия Из Строка.СписанныеПартии Цикл
							СуммаСписания = СуммаСписания + Партия.СуммаСписания;
							СуммаСписанияНУ = СуммаСписанияНУ + Партия.СуммаСписанияНУ;
							СуммаСписанияПР = СуммаСписанияПР + Партия.СуммаСписанияПР;
							СуммаСписанияВР = СуммаСписанияВР + Партия.СуммаСписанияВР;
						КонецЦикла;
						КоррНДС = 0;
						Если ТаблицаНДСПартииСписания.Количество() > 0 Тогда
							СтруктураОтбора = Новый Структура;
							СтруктураОтбора.Вставить("НомерСтроки",	Строка.НомерСтроки);
							
							СтрокаНДС = ТаблицаНДСПартииСписания.НайтиСтроки(СтруктураОтбора);
							Для Каждого ПартияНДС Из СтрокаНДС Цикл
								КоррНДС = КоррНДС + ПартияНДС.СуммаНДСВключенВСтоимость - ПартияНДС.СуммаНДСИсключенИзСтоимости;
								Если Строка.КорСчетСписания = ПартияНДС.СчетСписанияНДС Тогда
									КоррНДС = КоррНДС + ПартияНДС.СуммаНДССписанНаРасходы;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						Если АТТ Тогда
							ТорговаяНаценка 	= Окр(Строка.РозничнаяЦена * Строка.Количество,2,1) - (СуммаСписания + КоррНДС);
							ТорговаяНаценкаНУ 	= Окр(Строка.РозничнаяЦена * Строка.Количество,2,1) - (СуммаСписанияНУ + КоррНДС);
							СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
						Иначе
							ТорговаяНаценка 	= Строка.СуммаВРознице - (СуммаСписания + КоррНДС);
							ТорговаяНаценкаНУ 	= Строка.СуммаВРознице - (СуммаСписанияНУ + КоррНДС);
							СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
						КонецЕсли;
						
						ТорговаяНаценкаПР = - СуммаСписанияПР;
						ТорговаяНаценкаВР = - СуммаСписанияВР;
						
						Если ТорговаяНаценка <> 0 ИЛИ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И 
							(ТорговаяНаценкаНУ <> 0) ИЛИ (ТорговаяНаценкаПР <> 0) ИЛИ (ТорговаяНаценкаВР <> 0)) Тогда
							
							Проводка = Проводки.Добавить();
							Проводка.Период      = Дата;
							Проводка.Организация = Организация;
							Проводка.Содержание  = "Перемещение " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(Строка.СчетУчета);
							
							Проводка.СчетДт      = Строка.КорСчетСписания;
							Проводка.СчетКт      = СчетНаценки;
							
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
							
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
							
							Если НТТ И мРазделятьПоСтавкамНДС Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  Строка.КорСубконтоСписания3);
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.КорСубконтоСписания3);
							КонецЕсли;
							
							Проводка.Сумма       = ТорговаяНаценка;
							
							БухгалтерскийУчет.УстановитьПодразделенияПроводки(
								Проводка, СтруктураШапкиДокумента.ПодразделениеПолучатель, СтруктураШапкиДокумента.ПодразделениеПолучатель);
							
							Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
								НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(ТорговаяНаценкаНУ,ТорговаяНаценкаНУ,ТорговаяНаценкаПР,ТорговаяНаценкаПР,ТорговаяНаценкаВР,ТорговаяНаценкаВР,Проводка);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				// {УчетДоходовИРасходовИП
				// Учет доходов и расходов предпринимателя
				Если НЕ АТТ И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
					СтоимостьПродукции = ДоходыИРасходыПредпринимателя.СписаниеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, мУчетнаяПолитика,, ТаблицаПоТоварам, "НоменклатурнаяГруппа", "СчетУчета",,,, Отказ);
				КонецЕсли;
				// }УчетДоходовИРасходовИП
				
			Иначе //В опт
				
				УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТоварам, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, , "Перемещение товаров");
				
			КонецЕсли;
			
		//Из АТТ
		ИначеЕсли (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Розничный) Тогда
			
			//Спишем торговую наценку
			ТаблицаНаценок = УправлениеЗапасамиПартионныйУчет.ТорговаяНаценкаАТТ(Ссылка, СкладОтправитель, ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"), СтруктураШапкиДокумента.ПодразделениеОтправитель);
			СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
			
			ПолучательНТТ = (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
			ПолучательАТТ = (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Розничный);
			ПолучательОПТ = (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Оптовый);
            
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТоварам, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ,, ?(ПолучательОПТ, "Перемещение товаров из розницы", "Перемещение товаров"));
			
			ТаблицаНДСПартииСписания = Новый ТаблицаЗначений;
			ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаНДСПартииСписания, Отказ, Заголовок);
			
			ТаблицаНаценок.Индексы.Добавить("Номенклатура,Партия");
									
			Для Каждого Строка Из ТаблицаПоТоварам Цикл
				
				Если ПолучательАТТ Тогда
					ПолучательСчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				ИначеЕсли ПолучательНТТ Тогда
					ПолучательСчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				Иначе //ПолучательОПТ
					ПолучательСчетНаценки = Строка.КорСчетСписания;
				КонецЕсли;
			
				Для Каждого Партия Из Строка.СписанныеПартии Цикл
					
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура",Строка.Номенклатура);
					СтруктураОтбора.Вставить("Партия",		Партия.Партия);
					
					СтрокаТаблицыНаценок = ТаблицаНаценок.НайтиСтроки(СтруктураОтбора);
					
					Сумма = Строка.РозничнаяЦена * Партия.Количество;
					
					Если СтрокаТаблицыНаценок.Количество() = 0 Тогда
						СуммаНаценки 	= 0;
						СуммаНаценкиНУ 	= 0;
						СуммаНаценкиПР 	= 0;
						СуммаНаценкиВР 	= 0;
					ИначеЕсли НЕ (СтрокаТаблицыНаценок[0].ПС + СтрокаТаблицыНаценок[0].ОБ) = 0 Тогда
						СуммаНаценки = СтрокаТаблицыНаценок[0].ТН * Сумма / (СтрокаТаблицыНаценок[0].ПС + СтрокаТаблицыНаценок[0].ОБ);
						СуммаНаценкиНУ = СтрокаТаблицыНаценок[0].ТН_НУ * Сумма / (СтрокаТаблицыНаценок[0].ПС + СтрокаТаблицыНаценок[0].ОБ);
						СуммаНаценкиПР = СтрокаТаблицыНаценок[0].ТН_ПР * Сумма / (СтрокаТаблицыНаценок[0].ПС + СтрокаТаблицыНаценок[0].ОБ);
						СуммаНаценкиВР = СтрокаТаблицыНаценок[0].ТН_ВР * Сумма / (СтрокаТаблицыНаценок[0].ПС + СтрокаТаблицыНаценок[0].ОБ);
					Иначе
						СуммаНаценки 	= Сумма;
						СуммаНаценкиНУ 	= Сумма;
						СуммаНаценкиПР 	= 0;
						СуммаНаценкиВР 	= 0;
					КонецЕсли;
										
					Если СуммаНаценки <> 0 ИЛИ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И 
						(СуммаНаценкиНУ <> 0 ИЛИ СуммаНаценкиПР <> 0 ИЛИ СуммаНаценкиВР <> 0))Тогда
						
						Проводка = Проводки.Добавить();
						Проводка.Период      = Дата;
						Проводка.Организация = Организация;
						Проводка.Содержание  = "Перемещение " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(Строка.СчетУчета);
						
						Проводка.СчетДт      = ПолучательСчетНаценки;
						Проводка.СчетКт      = СчетНаценки;
						
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
						Если (ПартионныйУчет) Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
						КонецЕсли;
						
						Если ПолучательНТТ И мРазделятьПоСтавкамНДС Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
						КонецЕсли;
						
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.СкладОтправитель);
						Если (ПартионныйУчет) Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
						КонецЕсли;
						
						Проводка.Сумма = - СуммаНаценки;
						
						БухгалтерскийУчет.УстановитьПодразделенияПроводки(
							Проводка, СтруктураШапкиДокумента.ПодразделениеПолучатель, СтруктураШапкиДокумента.ПодразделениеОтправитель);
						
						Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
							НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-СуммаНаценкиНУ,-СуммаНаценкиНУ,-СуммаНаценкиПР,-СуммаНаценкиПР,-СуммаНаценкиВР,-СуммаНаценкиВР,Проводка);
						КонецЕсли;
						
					КонецЕсли;
					
					//Автоматическая переоценка при поступлении в АТТ
					Если ПолучательАТТ И (НЕ Строка.РозничнаяЦенаПолучатель = 0) И (НЕ Строка.РозничнаяЦена = Строка.РозничнаяЦенаПолучатель) Тогда
						
						СуммаПереоценки = (Строка.РозничнаяЦенаПолучатель - Строка.РозничнаяЦена) * Партия.Количество;
						
						Проводка = Проводки.Добавить();
						Проводка.Период      = СтруктураШапкиДокумента.Дата;
						Проводка.Организация = СтруктураШапкиДокумента.Организация;
						Проводка.Содержание  = "Переоценка " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(Строка.СчетУчета);
						
						Проводка.СчетДт      = Строка.КорСчетСписания;
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
						
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
						Если (ПартионныйУчет) Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
						КонецЕсли;
						
						Проводка.Сумма       = СуммаПереоценки;
										
						БухгалтерскийУчет.УстановитьПодразделенияПроводки(
							Проводка, СтруктураШапкиДокумента.ПодразделениеПолучатель, СтруктураШапкиДокумента.ПодразделениеПолучатель);
						
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
						
		//Из НТТ
		ИначеЕсли (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
			
			ТаблицаНаценок = УправлениеЗапасамиПартионныйУчет.ТорговаяНаценкаНТТ(Ссылка, СкладОтправитель, СтруктураШапкиДокумента.ПодразделениеОтправитель, мРазделятьПоСтавкамНДС);
			Если мРазделятьПоСтавкамНДС Тогда
				ТаблицаНаценок.Индексы.Добавить("СтавкиНДС");
			КонецЕсли;
			СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
			
			ПолучательНТТ = (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
			ПолучательАТТ = (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Розничный);
			ПолучательОПТ = (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Оптовый);
			
			Для Каждого Строка Из ТаблицаПоТоварам Цикл
								
				Если ПолучательАТТ Тогда
					ПолучательСчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				ИначеЕсли ПолучательНТТ Тогда
					ПолучательСчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				Иначе //ПолучательОПТ
					ПолучательСчетНаценки = Строка.КорСчетСписания;
				КонецЕсли;
				
				Если мРазделятьПоСтавкамНДС Тогда
					СтрокаТаблицыНаценок = ТаблицаНаценок.Найти(Строка.СтавкаНДСВРознице, "СтавкиНДС");
				Иначе
					СтрокаТаблицыНаценок = ?(ТаблицаНаценок.Количество() > 0, ТаблицаНаценок[0], Неопределено);
				КонецЕсли;
				
				ДокументОприходования = ?(ЗначениеЗаполнено(Строка.ДокументОприходования), ДокументОприходования, Ссылка);
				
				Сумма = Строка.СуммаВРознице;
				Если Строка.Себестоимость > 0 Тогда
					СуммаНаценки 	= Сумма - Строка.Себестоимость;
					СуммаНаценкиНУ 	= Сумма - Строка.Себестоимость;
					СуммаНаценкиПР 	= 0;
					СуммаНаценкиВР 	= 0;
				ИначеЕсли СтрокаТаблицыНаценок = Неопределено Тогда
					СуммаНаценки 	= 0;
					СуммаНаценкиНУ 	= 0;
					СуммаНаценкиПР 	= 0;
					СуммаНаценкиВР 	= 0;
				ИначеЕсли НЕ (СтрокаТаблицыНаценок.ПС + СтрокаТаблицыНаценок.ОБ) = 0 Тогда
					СуммаНаценки = СтрокаТаблицыНаценок.ТН * Сумма / (СтрокаТаблицыНаценок.ПС + СтрокаТаблицыНаценок.ОБ);
					СуммаНаценкиНУ = СтрокаТаблицыНаценок.ТН_НУ * Сумма / (СтрокаТаблицыНаценок.ПС + СтрокаТаблицыНаценок.ОБ);
					СуммаНаценкиПР = СтрокаТаблицыНаценок.ТН_ПР * Сумма / (СтрокаТаблицыНаценок.ПС + СтрокаТаблицыНаценок.ОБ);
					СуммаНаценкиВР = СтрокаТаблицыНаценок.ТН_ВР * Сумма / (СтрокаТаблицыНаценок.ПС + СтрокаТаблицыНаценок.ОБ);
				Иначе
					СуммаНаценки 	= Сумма;
					СуммаНаценкиНУ 	= Сумма;
					СуммаНаценкиПР 	= 0;
					СуммаНаценкиВР 	= 0;
				КонецЕсли;
								
				//Спишем товар из розницы
				Проводка = Проводки.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = Организация;
				Проводка.Содержание  = ?(ПолучательОПТ, "Перемещение из розницы ", "Перемещение ")+ БухгалтерскийУчет.ПолучитьНазваниеОбъекта(Строка.СчетУчета);
				
				Проводка.СчетДт      = Строка.КорСчетСписания;
				Проводка.СчетКт      = Строка.СчетУчета;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
				Если (ПартионныйУчет) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  ДокументОприходования);
				КонецЕсли;
				
				Если ПолучательНТТ И мРазделятьПоСтавкамНДС Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.СкладОтправитель);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
				
				Если мРазделятьПоСтавкамНДС Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
				КонецЕсли;
				
				Сумма = Строка.СуммаВРознице;
				Если НЕ ПолучательНТТ Тогда
					Проводка.КоличествоДт  = Строка.Количество;	
				КонецЕсли;
				Проводка.Сумма = Сумма;
								
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеПолучатель, СтруктураШапкиДокумента.ПодразделениеОтправитель);
					
				//Спишем торговую наценку
				Если СуммаНаценки <> 0 ИЛИ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И 
					(СуммаНаценкиНУ <> 0 ИЛИ СуммаНаценкиПР <> 0 ИЛИ СуммаНаценкиВР <> 0))Тогда
					
					Проводка = Проводки.Добавить();
					Проводка.Период      = Дата;
					Проводка.Организация = Организация;
					Проводка.Содержание  = "Перемещение " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(Строка.СчетУчета);
					
					Проводка.СчетДт      = ПолучательСчетНаценки;
					Проводка.СчетКт      = СчетНаценки;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
					Если (ПартионныйУчет) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  ДокументОприходования);
					КонецЕсли;
					
					Если ПолучательНТТ И мРазделятьПоСтавкамНДС Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
					КонецЕсли;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.СкладОтправитель);
					Если мРазделятьПоСтавкамНДС Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
					КонецЕсли;
					
					Проводка.Сумма = - СуммаНаценки;
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеПолучатель, СтруктураШапкиДокумента.ПодразделениеОтправитель);
					
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-СуммаНаценкиНУ,-СуммаНаценкиНУ,-СуммаНаценкиПР,-СуммаНаценкиПР,-СуммаНаценкиВР,-СуммаНаценкиВР,Проводка);
					КонецЕсли;

				КонецЕсли;
				
				//Автоматическая переоценка при поступлении в АТТ
				Если ПолучательАТТ И (НЕ Строка.РозничнаяЦенаПолучатель = 0) Тогда
					
					СуммаПереоценки = (Строка.РозничнаяЦенаПолучатель * Строка.Количество) - Сумма;
					
					Если СуммаПереоценки <> 0 Тогда
						Проводка = Проводки.Добавить();
						Проводка.Период      = СтруктураШапкиДокумента.Дата;
						Проводка.Организация = СтруктураШапкиДокумента.Организация;
						Проводка.Содержание  = "Переоценка " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(Строка.СчетУчета);
						
						Проводка.СчетДт      = Строка.КорСчетСписания;
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
						
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
						Если (ПартионныйУчет) Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  ДокументОприходования);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  ДокументОприходования);
						КонецЕсли;
						
						Проводка.Сумма       = СуммаПереоценки;
						
						БухгалтерскийУчет.УстановитьПодразделенияПроводки(
							Проводка, СтруктураШапкиДокумента.ПодразделениеПолучатель, СтруктураШапкиДокумента.ПодразделениеПолучатель);
						
					КонецЕсли;
				КонецЕсли;
				
				// {УчетДоходовИРасходовИП
				// Учет доходов и расходов предпринимателя при списании из НТТ
				Если (ПолучательОПТ ИЛИ ПолучательАТТ) И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
					СчетУчета = Строка.КорСчетСписания;
					ВидМПЗ = ДоходыИРасходыПредпринимателя.ВидМПЗПоСчетуУчета(СчетУчета);
					НоменклатурнаяГруппа = ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации(Истина, Строка.Номенклатура, Строка.НоменклатурнаяГруппа, ВидМПЗ, мУчетнаяПолитика);
					ХарактерДеятельности = ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, СчетУчета,,, мУчетнаяПолитика);
					
					Движение = Движения.ИПМПЗ.Добавить();
					Движение.Период = СтруктураШапкиДокумента.Дата;
					Движение.Организация = СтруктураШапкиДокумента.Организация;
					Движение.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
					Движение.ХарактерДеятельности = ХарактерДеятельности;
					Движение.ВидМПЗ = ВидМПЗ;
					Движение.Номенклатура = Строка.Номенклатура;
					Движение.Партия = СтруктураШапкиДокумента.Ссылка;
					Движение.Сумма = Сумма - СуммаНаценки;
					Движение.Количество = Строка.Количество;
				КонецЕсли;
				// }УчетДоходовИРасходовИП
				
			КонецЦикла;
									
			Если ПолучательОПТ Тогда
				ТаблицаНДСПартииСписания = Новый ТаблицаЗначений;
				ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаНДСПартииСписания, Отказ, Заголовок);
			КонецЕсли;
						
		КонецЕсли;
		
	Иначе //Розница в покупных ценах
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТоварам, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, , "Перемещение товаров");
		
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоКомТоварам, 	Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, , "Перемещение товаров");
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТаре,    	Истина,, Отказ, , "Перемещение товаров");

	Если (мУчетВПродажныхЦенах)
		И ((НЕ СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Оптовый) ИЛИ
		(НЕ СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Оптовый)) Тогда
		
	Иначе
		ТаблицаНДСПартииСписания = Новый ТаблицаЗначений;
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаНДСПартииСписания, Отказ, Заголовок);
		
	КонецЕсли;
	
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаНДСПартииСписания, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		Возврат;
	ИначеЕсли Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоТоварам.Количество() = 0 Тогда
		//Отработка по партиям НДС не требуется. 
		Возврат;
	КонецЕсли; 
	
	Если мУчетВПродажныхЦенах и (СтруктураШапкиДокумента.СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
		ТаблицаДвиженийПартии = Движения.НДСПоПриобретеннымЦенностям.ВыгрузитьКолонки();
		Движения.НДСПоПриобретеннымЦенностям.мПериод          = СтруктураШапкиДокумента.Дата;
		
		Если СтруктураШапкиДокумента.СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		    ТаблицаНДСПартииСписания = ТаблицаДвиженийПартии.Скопировать();
		Иначе	
			ТаблицаНДСПартииСписания = ТаблицаПоТоварам.Скопировать();
			Если ТаблицаНДСПартииСписания.Колонки.Найти("Партия") = неопределено тогда 
				ТаблицаНДСПартииСписания.Колонки.Добавить("Партия");
				ТаблицаНДСПартииСписания.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"Партия");
			КонецЕсли;
		КонецЕсли; 
	Иначе	
		/////////////////////////////////////////////////////////////////////////////////
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		ТаблицаНДСПартииСписания = УчетНДС.ПодготовитьТаблицуСписанияПартийДляНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		/////////////////////////////////////////////////////////////////////////////////
		
		Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
			//Партии не найдены или отражение в партионном учете НДС не производится.
			//Дальнейшая обработка не требуется
			Возврат;
		КонецЕсли; 
		
		ТаблицаДвиженийПартии = Движения.НДСПоПриобретеннымЦенностям.ВыгрузитьКолонки();
		Движения.НДСПоПриобретеннымЦенностям.мПериод          = СтруктураШапкиДокумента.Дата;
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии, Истина, Движения.Хозрасчетный, Заголовок, Движения);
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии, Ложь, Движения.Хозрасчетный, Заголовок, Движения);
		
		Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
			Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
			Движения.НДСПоПриобретеннымЦенностям.ВыполнитьПриход();
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС по партиям - отразить непосредственное списание.
		ТаблицаДвиженийПартии.Очистить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
		Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
		Движения.НДСПоПриобретеннымЦенностям.ВыполнитьРасход();
		// НДС по партиям - отразить непосредственное списание.
		/////////////////////////////////////////////////////////////////////////////////
	КонецЕсли;
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по партиям - отразить поступление на склад-получатель
	ТаблицаДвиженийПартии.Очистить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
	ТаблицаДвиженийПартии.ЗагрузитьКолонку(ТаблицаНДСПартииСписания.ВыгрузитьКолонку("КорСчетСписания"),"СчетУчета");
	ТаблицаДвиженийПартии.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладПолучатель,"Склад");
	ТаблицаДвиженийПартии.Колонки.Добавить("Услуга",новый ОписаниеТипов("Булево"));
	ТаблицаДвиженийПартии.ЗаполнитьЗначения(Ложь,"Услуга");
	ТаблицаДвиженийПартии.Колонки.СчетУчета.Имя = "СчетУчетаЦенности";
	
	УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураШапкиДокумента,ТаблицаДвиженийПартии, Движения.НДСПоПриобретеннымЦенностям, Отказ);
	// НДС по партиям - отразить поступление на склад-получатель
	/////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по ОС - при перемещении ТМЦ они могут перестать принадлежать к будущим ОС,
	// в этом случае необходимо снять блокировку с вычета.
	// Если в результате перемещения ТМЦ будет отнесено на счет учета ОС, необходимо включить блокировку.
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, Движения.НДСПоПриобретеннымЦенностям.Выгрузить(), Движения, Отказ);
	// НДС по ОС
	/////////////////////////////////////////////////////////////////////////////////
		
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета УСН
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДопПараметров = Новый Структура("ТаблицаТМЦ", ТаблицаПоТоварам);
	
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, СтруктураДопПараметров);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	
	УчетнаяПолитикаНеЗадана = Ложь;
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
	мРазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитика.Количество() > 0 Тогда	
		Если (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;

	
	Если (мУчетВПродажныхЦенах) И 
		((НЕ СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Оптовый) ИЛИ
		(НЕ СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Оптовый)) Тогда
		
		Для Каждого Строка Из Товары Цикл
		
			Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
				Строка.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
			ИначеЕсли СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				Строка.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
			КонецЕсли;
			
			Если СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
				Строка.НовыйСчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
			ИначеЕсли СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				Строка.НовыйСчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполним реквизиты шапки по документу основанию.
		Организация      = Основание.Организация;
		СкладОтправитель = Основание.Склад;
		
		// {ОбособленныеПодразделения
		ПодразделениеОтправитель = Основание.ПодразделениеОрганизации;
        // }ОбособленныеПодразделения
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		КонецЕсли;

		Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование Тогда
			ЗаполнитьПоПоступлению("Товары", "Добавить", Основание, "Оборудование");
			
		ИначеЕсли Основание.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ЗаполнитьПоПоступлению("ТоварыНаКомиссии" , "Заполнить", Основание, "Товары");
			
		Иначе
			ЗаполнитьПоПоступлению("Товары" , "Заполнить", Основание);
			
		КонецЕсли;
		ЗаполнитьПоПоступлению("ВозвратнаяТара", "Заполнить", Основание);
 
	КонецЕсли;
    
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ = Ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС, СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость, СпособОценкиМПЗ, УпрощенныйУчетНДС");
	
	ОшибкаВПолучении = Ложь;
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	Если ОшибкаВПолучении тогда
		СтруктураШапкиДокумента.Вставить("СложныйУчетНДС", Ложь);
		СтруктураШапкиДокумента.Вставить("СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость", Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ);
		Отказ = Истина;
	Иначе
		СтруктураШапкиДокумента.Вставить("НалоговыйУчетСпособОценкиМПЗ",СтруктураШапкиДокумента.СпособОценкиМПЗ);
		СтруктураШапкиДокумента.Удалить("СпособОценкиМПЗ");
	КонецЕсли;
	
	//Если сложный учет НДС не ведется - затрем параметры сложного учета ндс
	Если не СтруктураШапкиДокумента.СложныйУчетНДС и не СтруктураШапкиДокумента.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять Тогда
		СтруктураШапкиДокумента.Вставить("НДСвСтоимостиТоваров",Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять);
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("Склад", СкладОтправитель);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОтправитель","ВидСклада", "ВидСкладаОтправителя");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладПолучатель", "ВидСклада", "ВидСкладаПолучателя");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	Если Не СтруктураШапкиДокумента.Свойство("ПодразделениеОтправитель") Тогда
		СтруктураШапкиДокумента.Вставить("ПодразделениеОтправитель", Неопределено);
	КонецЕсли;                                
	Если Не СтруктураШапкиДокумента.Свойство("ПодразделениеПолучатель") Тогда
		СтруктураШапкиДокумента.Вставить("ПодразделениеПолучатель", Неопределено);
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоКомТоварам, ТаблицаПоТаре) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"         , "Номенклатура");
	СтруктураПолей.Вставить("Количество"           , "Количество");
	СтруктураПолей.Вставить("Услуга"               , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа" , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Цена"                 , "Цена");
	СтруктураПолей.Вставить("СуммаВРознице"        , "СуммаВРознице");
	СтруктураПолей.Вставить("СтавкаНДСВРознице"    , "СтавкаНДСВРознице");
	СтруктураПолей.Вставить("СчетУчета"          , "СчетУчета");
	СтруктураПолей.Вставить("НовыйСчетУчета"     , "НовыйСчетУчета");

	// Поля необходимы для партионного учета
	СтруктураПолей.Вставить("Организация",            "Ссылка.Организация");
	СтруктураПолей.Вставить("Склад",                  "Ссылка.СкладОтправитель");
	СтруктураПолей.Вставить("КорСчетСписания",      "НовыйСчетУчета");
	СтруктураПолей.Вставить("КорСубконтоСписания1", "Номенклатура");
	СтруктураПолей.Вставить("КорСубконтоСписания2", "Ссылка.СкладПолучатель");
	СтруктураПолей.Вставить("КорСубконтоСписания3", "СтавкаНДСВРознице");
	СтруктураПолей.Вставить("ДокументОприходования", "ДокументОприходования");
	СтруктураПолей.Вставить("Себестоимость"		   , "Себестоимость");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам 	= ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данных по 
	// табличной части "Товары на комиссии".
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"    , "Номенклатура");
	СтруктураПолей.Вставить("Количество"      , "Количество");
	СтруктураПолей.Вставить("Услуга"          , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Цена"            , "Цена");
	СтруктураПолей.Вставить("СчетУчета"     , "СчетУчета");
	СтруктураПолей.Вставить("НовыйСчетУчета", "НовыйСчетУчета");

	// Поля необходимы для партионного учета
	СтруктураПолей.Вставить("Организация",            "Ссылка.Организация");
	СтруктураПолей.Вставить("Склад",                  "Ссылка.СкладОтправитель");
	СтруктураПолей.Вставить("КорСчетСписания",      "НовыйСчетУчета");
	СтруктураПолей.Вставить("КорСубконтоСписания1", "Номенклатура");
	СтруктураПолей.Вставить("КорСубконтоСписания2", "Ссылка.СкладПолучатель");
	
	РезультатЗапросаПоКомиссионнымТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ТоварыНаКомиссии", СтруктураПолей);
	ТаблицаПоКомТоварам = ПодготовитьТаблицуКомТоваров(РезультатЗапросаПоКомиссионнымТоварам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данных 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"    , "Номенклатура");
	СтруктураПолей.Вставить("Количество"      , "Количество");
	СтруктураПолей.Вставить("Услуга"          , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("СчетУчета"     , "СчетУчета");
	СтруктураПолей.Вставить("НовыйСчетУчета", "НовыйСчетУчета");

	// Поля необходимы для партионного учета
	СтруктураПолей.Вставить("Организация",            "Ссылка.Организация");
	СтруктураПолей.Вставить("Склад",                  "Ссылка.СкладОтправитель");
	СтруктураПолей.Вставить("КорСчетСписания",      "НовыйСчетУчета");
	СтруктураПолей.Вставить("КорСубконтоСписания1", "Номенклатура");
	СтруктураПолей.Вставить("КорСубконтоСписания2", "Ссылка.СкладПолучатель");

	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	ТаблицаПоТаре 		= ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Подготовим таблицу товаров и тары для проведения.
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам	, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоКомТоварам, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТаре   	, СтруктураШапкиДокумента, Истина);
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоКомТоварам, ТаблицаПоТаре;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента ,Отказ);
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
    ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоКомТоварам, ТаблицаПоТаре);
	
	// Проверить заполнение ТЧ "Товары", "Товары на комиссии" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиКомТовары(ТаблицаПоКомТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоКомТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
