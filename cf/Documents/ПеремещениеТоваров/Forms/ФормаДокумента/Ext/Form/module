////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит текущую форму подбора номенклатуры
Перем мФормаПодбораНоменклатуры; 

Перем мКолонкиТовары, мКолонкиТоварыНаКомиссии, мКолонкиВозвратнаяТара;

//Используется для определения необходимости заполнения счетов в документе
Перем мСкладОтправитель;
Перем мСкладПолучатель;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ОткрыватьНастройкуДвижений;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ТоварыНаКомиссии,ЭлементыФормы.КоманднаяПанельТовары);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	
	Если ЗначениеЗаполнено(СкладОтправитель) И (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
		СписокЗапросов.Добавить("ОстаткиНеавтоматизированнаяТорговаяТочка", "По остаткам и ценам номенклатуры в торговой точке");
	Иначе
		СписокЗапросов.Добавить("ОстаткиНоменклатуры", "Остатки номенклатуры ");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СкладПолучатель) И (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
		СписокЗапросов.Добавить("ЦеныНоменклатуры",         "По ценам номенклатуры");
		СписокЗапросов.Добавить("ОстаткиИЦеныНоменклатуры", "Остатки и цены номенклатуры");
	КонецЕсли;
	
	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбораНоменклатуры, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда;

	ТипЦен    = Неопределено;
	ЕстьЦена  = Ложь;

	Если ТабличнаяЧасть = Товары Тогда

		Команда           = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти = "Товары";

	ИначеЕсли ТабличнаяЧасть = ТоварыНаКомиссии Тогда

		Команда           = "ПодборВТабличнуюЧастьТоварыНаКомиссии";
		ИмяТабличнойЧасти = "ТоварыНаКомиссии";
		
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ИмяТабличнойЧасти = "Тара";

	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , СкладОтправитель);

	// Тип цен устанавливает склад получатель.
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , СкладПолучатель.ТипЦенРозничнойТорговли);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);
	СтруктураПараметровПодбора.Вставить("Контрагент"           , Неопределено);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"   , Неопределено);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("Заголовок",             "Подбор номенклатуры в документ " + 
	                                                             ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, мФормаПодбораНоменклатуры);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);
    ЗначениеВыбора.Свойство("Цена"		         , Цена);
	
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);

	Если ТабличнаяЧасть = Товары Тогда
		ТабличнаяЧастьИмя = "Товары";
	ИначеЕсли ТабличнаяЧасть = ТоварыНаКомиссии Тогда
		ТабличнаяЧастьИмя = "ТоварыНаКомиссии";
	Иначе
		ТабличнаяЧастьИмя = "ВозвратнаяТара";
	КонецЕсли;
	
	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Расчет цены по валюте документа
	ВалютаДокумента      = мВалютаРегламентированногоУчета;
	КурсДокумента        = 1;
	КратностьДокумента   = 1;
	ЦенаВВалютеДокумента = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена,
	                                                         ВалютаЦены,
	                                                         ВалютаДокумента,
	                                                         КурсДокумента,
	                                                         КратностьДокумента,
	                                                         Дата);
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);

	Колонки     = ЭлементыФормы.Товары.Колонки;
	ВидимостьЦены = Колонки.ЦенаВРознице.Видимость;
	ВидимостьСуммы = Колонки.СуммаВРознице.Видимость;
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если НЕ ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			Если КоличествоМест = Неопределено Тогда
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			Иначе
				СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.КоличествоМест + КоличествоМест;
			КонецЕсли;
			
			Если ВидимостьСуммы И ТабличнаяЧасть = Товары Тогда
				СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			КонецЕсли;

		Иначе

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();

		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;

		Если НЕ ТабличнаяЧасть = ВозвратнаяТара Тогда

			Если КоличествоМест = Неопределено Тогда
				СтрокаТабличнойЧасти.Количество     = Количество;
			Иначе
				СтрокаТабличнойЧасти.КоличествоМест = КоличествоМест;
			КонецЕсли;

			ВалютаДокумента    = мВалютаРегламентированногоУчета;
			КурсДокумента      = 1;
			КратностьДокумента = 1;

			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ?(НЕ ЗначениеЗаполнено(Номенклатура),ЕдиницаИзмерения,Номенклатура.БазоваяЕдиницаИзмерения);
			СтрокаТабличнойЧасти.Коэффициент      = 1;
			СтрокаТабличнойЧасти.Цена             = ЦенаВВалютеДокумента;
			Если НЕ ТабличнаяЧасть = ТоварыНаКомиссии Тогда
				Если ВидимостьЦены Тогда
					СтрокаТабличнойЧасти.ЦенаВРознице = Цена;
				КонецЕсли;
				Если ВидимостьСуммы Тогда
					СтрокаТабличнойЧасти.СуммаВРознице = Цена * Количество;
				КонецЕсли;
				
				Если мУчетВПродажныхЦенах Тогда
					
					Если (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
						Если мРазделятьПоСтавкамНДС Тогда
							СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура, СкладОтправитель);
							Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
								СтрокаТабличнойЧасти.СтавкаНДСВРознице = ?(НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетаУчета.СчетДоходов), Перечисления.СтавкиНДС.БезНДС, СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
						Если мРазделятьПоСтавкамНДС Тогда
							СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура, СкладПолучатель);
							Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
								СтрокаТабличнойЧасти.СтавкаНДСВРознице = ?(НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетаУчета.СчетДоходов), Перечисления.СтавкиНДС.БезНДС, СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);
							КонецЕсли;
						КонецЕсли;	
					КонецЕсли;
					
				КонецЕсли;
            КонецЕсли;
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, ТабличнаяЧастьИмя, Истина);

		Иначе

			СтрокаТабличнойЧасти.Количество       = Количество;
            			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", Истина);

		КонецЕсли;

	КонецЕсли;
    		
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Устанавливает рекомендуемое значение реквизита НДСвСтоимостиТоваров
Процедура УстановитьЗначениеНДСвСтоимостиТоваров()
	Если Не мСложныйУчетНДС Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не мЕстьЕНВД Тогда
		НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	ИначеЕсли СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Оптовый 
		и (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Розничный
		или СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка)
		Тогда
		НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
	ИначеЕсли (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Розничный
		или СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка)
		и СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Оптовый 
		Тогда
		НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости;
	Иначе
		НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЭтоУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	ОСН_ЮрЛицо = (НЕ ОбщегоНазначения.Предприниматель(Организация, Дата) И НЕ ЭтоУСН);
		
	Колонки     = ЭлементыФормы.Товары.Колонки;
	КолонкиКом  = ЭлементыФормы.ТоварыНаКомиссии.Колонки;
	КолонкиТары = ЭлементыФормы.ВозвратнаяТара.Колонки;
	
	ВидимостьНоменклатуры      = Истина;
	ВидимостьСчетовПолучателя  = Истина;
	ВидимостьСчетовОтправителя = Истина;
	ВидимостьЦены              = Ложь;
	ВидимостьСуммы             = Ложь;
	ВидимостьСтавкиНДС         = Ложь;
	
	КолонкиКом.Номенклатура.Видимость	  = ВидимостьНоменклатуры;
	КолонкиКом.Количество.Видимость	      =	ВидимостьНоменклатуры;
	
	КолонкиКом.СчетУчета.Видимость      = ПоказыватьВДокументахСчетаУчета И ВидимостьСчетовОтправителя;
	КолонкиКом.НовыйСчетУчета.Видимость = ПоказыватьВДокументахСчетаУчета И ВидимостьСчетовПолучателя;
	
	РазрешитьУказыватьСебестоимость = Истина;
	
	Если мУчетВПродажныхЦенах Тогда
		
		Если НЕ СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			ВидимостьСчетовОтправителя = Ложь;
		КонецЕсли;
		
		Если НЕ СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			ВидимостьСчетовПолучателя = Ложь;
		КонецЕсли;
		
		Если СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ВидимостьСтавкиНДС = Истина;
		КонецЕсли;
		
		Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ВидимостьСтавкиНДС = Истина;
		КонецЕсли;
		
		Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			РазрешитьУказыватьСебестоимость = Ложь;
		КонецЕсли;
		
		Если ((СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) 
			И (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка)) Тогда
			ВидимостьНоменклатуры = Ложь;
			ВидимостьСуммы = Истина;
			РазрешитьУказыватьСебестоимость = Ложь;
		КонецЕсли;
		
		Если ((СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) 
			И (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Оптовый)) Тогда
			ВидимостьСуммы = Истина;
			ВидимостьЦены = Истина;
		КонецЕсли;
		
		Если ((СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) 
			И (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Розничный)) Тогда
			ВидимостьСуммы = Истина;
			ВидимостьЦены = Истина;
		КонецЕсли;
		
		Если ((СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
			И (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка)) Тогда
			ВидимостьЦены = Истина;
			ВидимостьСуммы = Истина;
		КонецЕсли;
		
		Если НЕ мРазделятьПоСтавкамНДС Тогда
			ВидимостьСтавкиНДС = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Колонки.Номенклатура.Видимость         = ВидимостьНоменклатуры;
	Колонки.Количество.Видимость           = ВидимостьНоменклатуры;
	
	Колонки.ЦенаВРознице.Видимость         = ВидимостьЦены;
	Колонки.СуммаВРознице.Видимость        = ВидимостьСуммы;
	Колонки.СтавкаНДСВРознице.Видимость    = ВидимостьСтавкиНДС;
	
	ЭлементыФормы.Товары.Подвал            = ВидимостьСуммы;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаСписанияНДС.Видимость = мСложныйУчетНДС;
	Колонки.СчетУчета.Видимость          = ПоказыватьВДокументахСчетаУчета И ВидимостьСчетовОтправителя;
	Колонки.НовыйСчетУчета.Видимость     = ПоказыватьВДокументахСчетаУчета И ВидимостьСчетовПолучателя;
	КолонкиТары.СчетУчета.Видимость      = ПоказыватьВДокументахСчетаУчета;
	КолонкиТары.НовыйСчетУчета.Видимость = ПоказыватьВДокументахСчетаУчета;
	
	ЭлементыФормы.НадписьНДСвСтоимостиТоваров.Видимость = мСложныйУчетНДС И НЕ ЭтоУСН;
	ЭлементыФормы.НДСвСтоимостиТоваров.Видимость        = мСложныйУчетНДС И НЕ ЭтоУСН;
	
	ПоказатьСписаниеНДС = (мСложныйУчетНДС И НЕ ЭтоУСН и НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость);
	ЭлементыФормы.СчетСписанияНДС.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.НадписьСчетСписанияНДС.Видимость	= ПоказатьСписаниеНДС;
	ЭлементыФормы.СубконтоСписанияНДС1.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.СубконтоСписанияНДС2.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.СубконтоСписанияНДС3.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.НадписьСубконтоСписанияНДС1.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.НадписьСубконтоСписанияНДС2.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.НадписьСубконтоСписанияНДС3.Видимость = ПоказатьСписаниеНДС;
	УстановитьВидимостьСубконто(СчетСписанияНДС, "СписанияНДС", ПоказатьСписаниеНДС);
	
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ДействиеПодбор.Доступность = ВидимостьНоменклатуры;
	
	Если мУчетнаяПолитика.Количество() > 0 Тогда
		
		Если (НЕ РазрешитьУказыватьСебестоимость) Тогда
			ЭлементыФормы.Товары.Колонки.Себестоимость.Видимость = Ложь;
			ЭлементыФормы.Товары.Колонки.Себестоимость.ИзменятьВидимость = Ложь;
		Иначе
			ЭлементыФормы.Товары.Колонки.Себестоимость.ИзменятьВидимость = Истина;
		КонецЕсли;
		
		Если (НЕ ВидимостьНоменклатуры) ИЛИ (мУчетнаяПолитика.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней) Тогда
			ЭлементыФормы.Товары.Колонки.ДокументОприходования.Видимость = Ложь;
			ЭлементыФормы.Товары.Колонки.ДокументОприходования.ИзменятьВидимость = Ложь;
					
		Иначе
			Если ЭлементыФормы.Товары.Колонки.Себестоимость.Видимость Тогда
				ЭлементыФормы.Товары.Колонки.ДокументОприходования.Видимость = Истина;
			КонецЕсли;
			ЭлементыФормы.Товары.Колонки.ДокументОприходования.ИзменятьВидимость = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимость()

// Устанавливает типы субконто при изменении счета
//
// Параметры
//  Счет  – <ПланыСчетов. .Ссылка> – Счет изменившийся
//  Суффикс- <Строка> – Суффикс реквизитов
//
Процедура ПриИзмененииСчета(Счет, Суффикс)

	ВидыСубконтоСчета = Счет.ВидыСубконто;

	Для Ном = 1 по 3 Цикл
		Если (Ном <= ВидыСубконтоСчета.Количество()) и (ЗначениеЗаполнено(Счет)) и
			ВидыСубконтоСчета[Ном-1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЭтотОбъект["Субконто"+Суффикс+Ном]))  Тогда
			// Без изменений
		ИначеЕсли Ном <= ВидыСубконтоСчета.Количество() тогда
			ЭтотОбъект["Субконто"+Суффикс+Ном] = Новый(ВидыСубконтоСчета[Ном-1].ВидСубконто.ТипЗначения.Типы()[0]);
		Иначе
			ЭтотОбъект["Субконто"+Суффикс+Ном] = Неопределено;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПриИзмененииСчета()

Процедура УстановитьВидимостьСубконто(Счет, Суффикс, ВидимостьСчета)
	
	ВидыСубконтоСчета = Счет.ВидыСубконто;
	КоличествоСубконто = ВидыСубконтоСчета.Количество();
	Для Ном = 1 по 3 Цикл
		
		Если ВидимостьСчета и (Ном <= КоличествоСубконто) и  (ЗначениеЗаполнено(Счет)) Тогда
			ЭлементыФормы["НадписьСубконто"+Суффикс+Ном].Заголовок = Строка(ВидыСубконтоСчета[Ном-1].ВидСубконто);
			ЭлементыФормы["НадписьСубконто"+Суффикс+Ном].Видимость = Истина;
			ЭлементыФормы["Субконто"+Суффикс+Ном].Видимость        = Истина;
		Иначе
			ЭлементыФормы["НадписьСубконто"+Суффикс+Ном].Видимость = Ложь;
			ЭлементыФормы["Субконто"+Суффикс+Ном].Видимость        = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		РаботаСДиалогами.ВыбратьВидОперации(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	    	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,,ПараметрОбъектКопирования);

		Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
			СкладОтправитель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
			// {ОбособленныеПодразделения
			ПодразделениеОтправитель = УправлениеПодразделениями.ПолучитьПодразделение(Организация, СкладОтправитель);
			// }ОбособленныеПодразделения
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
			СкладПолучатель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
			// {ОбособленныеПодразделения
			ПодразделениеПолучатель = УправлениеПодразделениями.ПолучитьПодразделение(Организация, СкладПолучатель);
			// }ОбособленныеПодразделения
		КонецЕсли;
				
		НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("СчетУчета");
	СтруктураКолонок.Вставить("НовыйСчетУчета");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ТоварыНаКомиссии.Колонки, СтруктураКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ВозвратнаяТара.Колонки, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
    мСкладОтправитель 			 = СкладОтправитель;
	мСкладПолучатель			 = СкладПолучатель;
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОтправитель;
	// }ОбособленныеПодразделения
	
	// Определим параметры сложного учета НДС
	ОпределитьСложныйУчетНДС();
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	
	УчетнаяПолитикаНеЗадана = Ложь;
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
	мРазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитика.Количество() > 0 Тогда	
		Если (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;

	
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);
	
	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Товары",				"Товары");
	Страницы.Добавить("ТоварыНаКомиссии",	"ТоварыНаКомиссии");
	Страницы.Добавить("Тара",				"ВозвратнаяТара");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,СкладОтправитель,СкладПолучатель");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница,Страницы);

	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	ЗаголовокТовары = ?(ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование, "Оборудование (", "Товары (");
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = ЗаголовокТовары  + ДокументОбъект.Товары.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "ТоварыНаКомиссии" Тогда
			СтраницаПанели.Заголовок = "Товары на комиссии ("  + ДокументОбъект.ТоварыНаКомиссии.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьТоварыНаКомиссии" Тогда
			ОбработкаПодбора(ТоварыНаКомиссии, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//Если сложный учет НДС не ведется - затрем параметры сложного учета ндс
	Если не мСложныйУчетНДС и не НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять Тогда
		НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);
    
КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров[Кнопка.Имя];
	КонецЕсли;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
      
// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыНаКомиссииДействиеПодбор(Кнопка)

	ДействиеПодбор(ТоварыНаКомиссии);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект       = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента      = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС             = Ложь; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице    = (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка
															   ИЛИ СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен = Неопределено;
	
	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	Если НачалоМесяца(мТекущаяДатаДокумента) <> НачалоМесяца(Дата) Тогда
		ОпределитьСложныйУчетНДС();
		УстановитьВидимость();
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

    УстановитьВидимость();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Определим параметры сложного учета НДС
	ОпределитьСложныйУчетНДС();
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	
	УчетнаяПолитикаНеЗадана = Ложь;
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
	мРазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитика.Количество() > 0 Тогда	
		Если (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;
	
    УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СкладОтправитель.
//
Процедура СкладОтправительПриИзменении(Элемент)

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// {ОбособленныеПодразделения
	ПодразделениеОтправитель = УправлениеПодразделениями.ПолучитьПодразделение(Организация, СкладОтправитель);
	// }ОбособленныеПодразделения
	
	Если мСкладОтправитель = Элемент.Значение Тогда
		мСкладОтправитель = СкладОтправитель;
		Возврат;
	КонецЕсли;
	
	УстановитьЗначениеНДСвСтоимостиТоваров();
	
	Если Товары.Количество() + ТоварыНаКомиссии.Количество() + ВозвратнаяТара.Количество() = 0 Тогда
		мСкладОтправитель = СкладОтправитель;
		Возврат;
	КонецЕсли;
	
	Если (мУчетВПродажныхЦенах) 
		И (НЕ СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
		И (ТоварыНаКомиссии.Количество() = 0)Тогда
		мСкладОтправитель = СкладОтправитель;
		Возврат;
	КонецЕсли;
	
	Если ПоказыватьВДокументахСчетаУчета Тогда
		
		Ответ = Вопрос("Установить счета учета в соответствии со значениями по умолчанию?", 
		РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета при смене склада");
		
	Иначе
		
		Ответ = КодВозвратаДиалога.Да;
						
	КонецЕсли;
					
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСчетаУчетаВТабЧасти(Товары,           "Товары"           , Истина);
		ЗаполнитьСчетаУчетаВТабЧасти(ТоварыНаКомиссии, "ТоварыНаКомиссии" , Истина);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара,   "ВозвратнаяТара"   , Истина);
	КонецЕсли;

	мСкладОтправитель = СкладОтправитель;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СкладПолучатель.
//
Процедура СкладПолучательПриИзменении(Элемент)


	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// {ОбособленныеПодразделения
	ПодразделениеПолучатель = УправлениеПодразделениями.ПолучитьПодразделение(Организация, СкладПолучатель);
	// }ОбособленныеПодразделения 
	
	Если мСкладПолучатель = Элемент.Значение Тогда
		мСкладПолучатель = СкладПолучатель;
		Возврат;
	КонецЕсли;
	
	УстановитьЗначениеНДСвСтоимостиТоваров();
	
	Если Товары.Количество() + ТоварыНаКомиссии.Количество() + ВозвратнаяТара.Количество() = 0 Тогда
		мСкладПолучатель = СкладПолучатель;
		Возврат;
	КонецЕсли;
	
	Если (мУчетВПродажныхЦенах) 
		И (НЕ СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
		И (ТоварыНаКомиссии.Количество() = 0) Тогда
		мСкладПолучатель = СкладПолучатель;
		Возврат;
	КонецЕсли;
	
	Если ПоказыватьВДокументахСчетаУчета Тогда
		
		Ответ = Вопрос("Установить счета учета в соответствии со значениями по умолчанию?", 
		РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета при смене склада");
		
	Иначе

		Ответ = КодВозвратаДиалога.Да;
		
	КонецЕсли;
						
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСчетаУчетаВТабЧасти(Товары,           "Товары",           Истина);
		ЗаполнитьСчетаУчетаВТабЧасти(ТоварыНаКомиссии, "ТоварыНаКомиссии", Истина);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара,   "ВозвратнаяТара",   Истина);
	КонецЕсли;

	мСкладПолучатель = СкладПолучатель;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода НДСвСтоимостиТоваров
//
Процедура НДСвСтоимостиТоваровПриИзменении(Элемент)
	Если НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость тогда
		ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию(Истина);
	КонецЕслИ;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СчетСписанияНДСПриИзменении(Элемент)
	ПриИзмененииСчета(СчетСписанияНДС, "СписанияНДС");
	УстановитьВидимостьСубконто(СчетСписанияНДС, "СписанияНДС", Элемент.Видимость);
КонецПроцедуры

Процедура СчетСписанияНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
КонецПроцедуры

// {ОбособленныеПодразделения

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОтправитель) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОтправитель;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()

// }ОбособленныеПодразделения


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	// Если заполнен документ партии, то себестоимость будет браться из него.
	// Поэтому если колонка видна, будем выводить в нее текст.
	Если ЭлементыФормы.Товары.Колонки.ДокументОприходования.Видимость
	   И НЕ ЗначениеЗаполнено(ДанныеСтроки.ДокументОприходования) Тогда

		ОформлениеСтроки.Ячейки.ДокументОприходования.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ДокументОприходования.Текст           = "<Авто>";
		ОформлениеСтроки.Ячейки.Себестоимость.ТолькоПросмотр  = Истина;

	КонецЕсли;
	
	Если ЭлементыФормы.Товары.Колонки.Себестоимость.Видимость
	   И НЕ ЗначениеЗаполнено(ДанныеСтроки.Себестоимость) Тогда

		ОформлениеСтроки.Ячейки.Себестоимость.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Себестоимость.Текст           = "<Авто>";

	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
			
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//Услуг в этом документе быть не должно.
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ВыбранноеЗначение.Услуга Тогда
			Предупреждение("Услуг в этом документе быть не должно."); 
			СтандартнаяОбработка = Ложь;  // Отказ от выбора.
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры // ТоварыНоменклатураОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтрокаТабличнойЧасти = ЭлементыФормы[ТекущаяСтраница].ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Если мУчетВПродажныхЦенах И ТекущаяСтраница = "Товары" Тогда
		
		Если (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
			Если мРазделятьПоСтавкамНДС Тогда
				СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура, СкладОтправитель);
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					СтрокаТабличнойЧасти.СтавкаНДСВРознице = ?(НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетаУчета.СчетДоходов), Перечисления.СтавкиНДС.БезНДС, СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);
				КонецЕсли;
			КонецЕсли;
			Если (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Оптовый) Тогда
				СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
		    	                        									СкладОтправитель.ТипЦенРозничнойТорговли, Дата,
		        	                    									мВалютаРегламентированногоУчета, 1, 1);
				СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
		ИначеЕсли (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
			Если мРазделятьПоСтавкамНДС Тогда
				СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура, СкладПолучатель);
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					СтрокаТабличнойЧасти.СтавкаНДСВРознице = ?(НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетаУчета.СчетДоходов), Перечисления.СтавкиНДС.БезНДС, СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);
				КонецЕсли;
			КонецЕсли;	
			Если (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.Оптовый) Тогда
				СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
		        	                    									СкладПолучатель.ТипЦенРозничнойТорговли, Дата,
		            	                									мВалютаРегламентированногоУчета, 1, 1);
				СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Берем из самого реквизита Номенклатура
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент      = 1;

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, ТекущаяСтраница, Истина);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Установить коэффициент
	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтрокаТабличнойЧасти = ЭлементыФормы[ТекущаяСтраница].ТекущиеДанные;
	СтрокаТабличнойЧасти.Коэффициент = 1; 
	
КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы[ТекущаяСтраница].ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчета
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчета
// в строке табличной части "Товары".
//
Процедура ТоварыНовыйСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода розничной цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	Если ТекущаяСтраница = "Товары" Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы[ТекущаяСтраница].ТекущиеДанные;
		Если (ЭлементыФормы.Товары.Колонки.ЦенаВРознице.Видимость) И (НЕ СтрокаТабличнойЧасти.ЦенаВРознице = 0) Тогда
			СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыДокументОприходованияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Строка = ЭлементыФормы.Товары.ТекущиеДанные;
	
	СтандартнаяОбработка    = Ложь;
	ФормаВыбора             = Документы.Партия.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.Организация = Организация;
	
	ФормаВыбора.Счет         = Строка.СчетУчета;
	ФормаВыбора.Номенклатура = Строка.Номенклатура;
	ФормаВыбора.Склад        = СкладОтправитель;
	ФормаВыбора.ВидСубконто  = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	
	Если ЭтоНовый() Тогда
		ФормаВыбора.КонПериода         = КонецДня(РабочаяДата);
	Иначе
		ФормаВыбора.КонПериода         = Дата;
	КонецЕсли;

	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ТоварыСуммаВРозницеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе
		СтрокаТабличнойЧасти.ЦенаВРознице = СтрокаТабличнойЧасти.СуммаВРознице / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыДокументОприходованияПриИзменении(Элемент)
	Строка = ЭлементыФормы.Товары.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(Строка.ДокументОприходования) Тогда
		Строка.Себестоимость = 0;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ОбработкаВыбора" поля ввода номенклатуры
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//Услуг в этом документе быть не должно.
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ВыбранноеЗначение.Услуга Тогда
			Предупреждение("Услуг в этом документе быть не должно."); 
			СтандартнаяОбработка = Ложь;  // Отказ от выбора.
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ВозвратнаяТараНоменклатураОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", Истина);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчета
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчета
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараНовыйСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.ВозвратнаяТара.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ НА КОМИССИИ

Процедура ТоварыНаКомиссииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.ТоварыНаКомиссии.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары         		= ЭлементыФормы.Товары.Колонки;
мКолонкиТоварыНаКомиссии 	= ЭлементыФормы.ТоварыНаКомиссии.Колонки;
мКолонкиВозвратнаяТара 		= ЭлементыФормы.ВозвратнаяТара.Колонки;

