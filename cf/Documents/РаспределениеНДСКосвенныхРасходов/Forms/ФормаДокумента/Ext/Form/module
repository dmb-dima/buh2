
// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит текущую дату документа
Перем мДатаДокумента;

Перем ОткрыватьНастройкуДвижений;

// Используется для определения необходимости указания счета списания НДС на расходы
Перем мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.СоставКосвенныхРасходов,ЭлементыФормы.КоманднаяПанель.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура управляет доступностью колонок субконто в табличной части услуги
Процедура УстановитьДоступностьСубконто(СтрокаТЧ)

	Колонки = ЭлементыФормы.СчетаУчетаРасходов.Колонки;
	ТекущиеДанные = ЭлементыФормы.СчетаУчетаРасходов.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТЧ) Тогда
		Возврат;
	КонецЕсли;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекущиеДанные.СчетЗатрат,
		ТекущиеДанные.Субконто1, Колонки.Субконто1,
		ТекущиеДанные.Субконто2, Колонки.Субконто2,
		ТекущиеДанные.Субконто3, Колонки.Субконто3,
		ТекущиеДанные.ПодразделениеЗатрат, Колонки.ПодразделениеЗатрат,
		Колонки.СчетЗатрат, Ложь);
	
КонецПроцедуры // УстановитьДоступностьСубконто()

// Устанавливает видимость элементов формы в зависимости от вида операции и 
// взведенных флагов
//
Процедура УстановитьВидимость()

	// Управляем поведением закладки "Реализация"
	ЭлементыФормы.СтатьяЗатратНДС.АвтоОтметкаНезаполненного = Не( ВыручкаБезНДС = 0) или не СоставКосвенныхРасходов.Итог("БезНДС") = 0;
	Если не ЭлементыФормы.СтатьяЗатратНДС.АвтоОтметкаНезаполненного и ЭлементыФормы.СтатьяЗатратНДС.ОтметкаНезаполненного Тогда
		ЭлементыФормы.СтатьяЗатратНДС.ОтметкаНезаполненного = Ложь;
	КонецЕсли; 
	
	ЭлементыФормы.СтатьяЗатратНДСприЕНВД.АвтоОтметкаНезаполненного  = Не( ВыручкаЕНВД = 0) или не СоставКосвенныхРасходов.Итог("ЕНВДНДС") = 0;
	Если не ЭлементыФормы.СтатьяЗатратНДСприЕНВД.АвтоОтметкаНезаполненного и ЭлементыФормы.СтатьяЗатратНДСприЕНВД.ОтметкаНезаполненного Тогда
		ЭлементыФормы.СтатьяЗатратНДСприЕНВД.ОтметкаНезаполненного = Ложь;
	КонецЕсли; 
	
	Для Каждого КнопкаЗаполнить Из ЭлементыФормы.КоманднаяПанель.Кнопки.ПодменюЗаполнить.Кнопки Цикл
		КнопкаЗаполнить.Доступность = Не ТолькоПросмотр;
	КонецЦикла;
	
	ВидимостьСчетовСписания = (ЭлементыФормы.Закладки.Страницы.СчетСписанияНДС.Видимость 
			И ?(мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ, Дата>='20060101' ,мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.СписыватьНаРасходы)
			И НЕ ДляСписанияНДСИспользоватьСчетИАналитикуУчетаЗатрат);
	ЭлементыФормы.НадписьСчетСписанияНДС.Видимость	= ВидимостьСчетовСписания;
	ЭлементыФормы.СчетСписанияНДС.Видимость			= ВидимостьСчетовСписания;
	ЭлементыФормы.ПодразделениеЗатрат.Видимость 	= ВидимостьСчетовСписания;
	ЭлементыФормы.НадписьПодразделениеЗатрат.Видимость = ВидимостьСчетовСписания;
	УстановитьВидимостьСубконто(СчетСписанияНДС, "СписанияНДС", ВидимостьСчетовСписания);
	
Конецпроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ 

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
          
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , "Продажа");

		НачалоПериода = УчетНДС.ПолучитьНачалоПериодаПоУчетнойПолитике(Организация, Дата); 
		
		ДляСписанияНДСИспользоватьСчетИАналитикуУчетаЗатрат = Истина;

	КонецЕсли;
	
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");
    
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Предполагается использовать отбор по таблице "СчетаУчетаРасходов"
	ЭлементыФормы.СчетаУчетаРасходов.ОтборСтрок.КлючСтроки.Использование = Истина;
	ЭлементыФормы.СчетаУчетаРасходов.ОтборСтрок.КлючСтроки.Значение = 0;
	
	мДатаДокумента = Дата;
	
	ОтобразитьНалоговыйПериод();
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	ОпределитьПараметрыСписанияНДС();

	УстановитьВидимость();
	
	// Установим активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
    	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не указана организация. Операция не записана.");
		Отказ = Истина;
		ТекущийЭлемент = ЭлементыФормы.Организация;
		Возврат;
	КонецЕсли; 

КонецПроцедуры
 
// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении реквизита Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	Для Каждого СтрокаСчетаУчетаРасходов Из СчетаУчетаРасходов Цикл
		
		РаботаСДиалогами.УстановитьПодразделениеПоСчету(
			СтрокаСчетаУчетаРасходов.ПодразделениеЗатрат, СтрокаСчетаУчетаРасходов.СчетЗатрат, Организация);
		
	КонецЦикла;

	ОпределитьПараметрыСписанияНДС();

    УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура СтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные.НДСВсего = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные.СуммаВсего, TRUE, FALSE, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура выполняет стандартные действия при начале выбора элемента справочника "СтатьиЗатрат".
//
// Параметры:
//  ЭлементФормы             - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка,    - булево, признак выполнения стандартной (системной) обработки события 
//                             начала выбора для данного элемента формы документа.
//
Процедура НачалоВыбораЗначенияСтатьиЗатрат( СписокОтбора, ЭлементФормы, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	ФормаВыбораСтатьиЗатрат = Справочники.СтатьиЗатрат.ПолучитьФормуСписка(, ЭлементФормы);
	ФормаВыбораСтатьиЗатрат.Отбор.ВидДеятельностиДляНалоговогоУчетаЗатрат.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаВыбораСтатьиЗатрат.Отбор.ВидДеятельностиДляНалоговогоУчетаЗатрат.Значение      = СписокОтбора;
	ФормаВыбораСтатьиЗатрат.Отбор.ВидДеятельностиДляНалоговогоУчетаЗатрат.Использование = Истина;

	ФормаВыбораСтатьиЗатрат.РежимВыбора = Истина;
	ФормаВыбораСтатьиЗатрат.Открыть();

КонецПроцедуры // РаботаСДиалогами.НачалоВыбораЗначенияБанковскогоСчета()

// Процедура вызывается при переключении закладок страниц табличной части.
// Устанавливается отбор в табличной части СчетаУчетаРасходов в зависимости от текущей
// строки в таблице СоставКосвенныхРасходов.
//
Процедура ЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если Элемент.ТекущаяСтраница.Имя = "КосвенныеРасходы" Тогда
		ОтобразитьНаправленияСписания();
		
	ИначеЕсли Элемент.ТекущаяСтраница.Имя = "Реализация" Тогда
		УстановитьВидимость();
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается по кнопке при изменении активной строки в таблице косвенных 
// расходов, а также при переходе на закладку "Косвенные расходы".
Процедура ОтобразитьНаправленияСписания()

	// Управляем поведением закладки "Счета учета расходов"
	ТекСтрокаРасходов = ЭлементыФормы.СоставКосвенныхРасходов.ТекущаяСтрока;
	// Включаем отбор тех счетов учета расходов, которые относятся к текущему расходу, выбранному
	// в табличной части "СоставКосвенныхРасходов"

	Если ТекСтрокаРасходов <> Неопределено Тогда
		// Включаем отбор ключу из текущей строки табличной части "СоставКосвенныхРасходов"
		ЭлементыФормы.СчетаУчетаРасходов.ТолькоПросмотр = Ложь;
		ЭлементыФормы.СчетаУчетаРасходов.ОтборСтрок.КлючСтроки.Значение = ТекСтрокаРасходов.КлючСтроки;

	Иначе
		// Текущая строка в таблице косвенных расходов не установлена
		ЭлементыФормы.СчетаУчетаРасходов.ТолькоПросмотр = Истина;
		Если СоставКосвенныхРасходов.Количество() = 0 Тогда
			СчетаУчетаРасходов.Очистить();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОтобразитьНаправленияСписания()

Процедура ОтобразитьНалоговыйПериод()
	                                                                 
	КонецПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, Дата);
	
	ЭлементыФормы.НалоговыйПериод.Заголовок = "Налоговый период: " + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП = Истина");;
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "СоставКосвенныхРасходов".
//
Процедура СоставКосвенныхРасходовПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда

		// Инициализируем значение "КлючСтроки" для установки связи данной таблицы с таблицей "СчетаУчетаРасходов"
		// Значение должно быть уникальным в пределах таблицы СоставКосвенныхРасходов
		НеУстановлено = Истина;
		Кандидат = СоставКосвенныхРасходов.Количество();

		Пока НеУстановлено Цикл
			Если СоставКосвенныхРасходов.Найти(Кандидат, "КлючСтроки") = Неопределено Тогда
				// Уникальное значение ключа
				ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные.КлючСтроки = Кандидат;
				НеУстановлено = Ложь;

			Иначе
				// Такое значение ключа уже использовано
				Кандидат = Кандидат + 1;

			КонецЕсли;

		КонецЦикла;
		
		ОтобразитьНаправленияСписания();

	КонецЕсли;

КонецПроцедуры // СоставКосвенныхРасходовПриНачалеРедактирования()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
      

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается по кнопке "Заполнить" в форме диалога документа.
// В процедуре реализуется алгоритм автоматического заполнения строк табличной части документа.
//
Процедура КоманднаяПанельЗаполнить(Кнопка)

	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НачалоПериода)Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не установлен период заполнения документа!");
		Возврат;
	КонецЕсли;
	
	Если СоставКосвенныхРасходов.Количество() > 0 Тогда
		ОтветНаВопрос = Вопрос("Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТабличныеЧастиПоКосвеннымРасходам(Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры  // КоманднаяПанельЗаполнить(Кнопка)

// Процедура вызывается по кнопке "Распределить" в форме диалога документа.
// В процедуре реализуется алгоритм распределения косвенных расходов в табличной
// части "СоставКосвенныхРасходов" на различные виды реализации в текущем периоде.
//
Процедура КоманднаяПанельРаспределить(Кнопка)

	РаспределитьПоВыручке();

КонецПроцедуры

// Процедура вызывается по кнопке "Рассчитать" из формы диалога документа.
// Выполняется расчет объемов реализации в текущем периоде по данным
// регистра НДСПродажи в разрезе различных ставок НДС.
//
Процедура КоманднаяПанельВыручкиРассчитать(Кнопка)

	РассчитатьВыручку();

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельВыручкиРассчитать()

// Процедура вызывается перед началом выбора значения в реквизиты "Субконто 1",
// "Субконто 2", "Субконто 3".
//
Процедура СчетаУчетаРасходовСубконтоНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = ПараметрыНеобходимыеДляВыбораСубконто(Элемент, "Бух");
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

// Процедура вызывается после изменения значения в реквизите "СчетЗатрат"
//
Процедура СчетаУчетаРасходовСчетЗатратПриИзменении(Элемент)

	ТекущиеДанные = ЭлементыФормы.СчетаУчетаРасходов.ТекущиеДанные;
	Колонки = ЭлементыФормы.СчетаУчетаРасходов.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение, 
		ТекущиеДанные.Субконто1, Колонки.Субконто1,
		ТекущиеДанные.Субконто2, Колонки.Субконто2,
		ТекущиеДанные.Субконто3, Колонки.Субконто3,
		ТекущиеДанные.ПодразделениеЗатрат, Колонки.ПодразделениеЗатрат);
		
	РаботаСДиалогами.УстановитьПодразделениеПоСчету(
		ТекущиеДанные.ПодразделениеЗатрат, ТекущиеДанные.СчетЗатрат, Организация);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля дата 
// в диалоге документа.
//
Процедура ДатаПриИзменении(Элемент)

	НовоеНачалоПериода = УчетНДС.ПолучитьНачалоПериодаПоУчетнойПолитике(Организация, Дата);
	
	Если (НачалоПериода <> НовоеНачалоПериода) Тогда
	 
	 	Ответ = Вопрос("Установить значение периода документа по текущей дате?", РежимДиалогаВопрос.ДаНет,,,);

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			
			Дата = мДатаДокумента;
		Иначе
			
			УстановитьВремя(РежимАвтоВремя.Последним);
			НачалоПериода = НовоеНачалоПериода;

		КонецЕсли;

	Иначе
		
		УстановитьВремя(РежимАвтоВремя.Последним);
		НачалоПериода = НовоеНачалоПериода;
		
	КонецЕсли;
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	Если НачалоМесяца(мДатаДокумента) <> НачалоМесяца(Дата) Тогда
		ОпределитьПараметрыСписанияНДС();
		УстановитьВидимость();
	КонецЕсли;
	
	мДатаДокумента = Дата;
	ОтобразитьНалоговыйПериод();

КонецПроцедуры

// Процедура - обработчик события "При активизации строки"
// При переходе к новой строке в таблице косвенных расходов
// отображает соответствующие данной строке направления использования
// (списания) в таблице "СчетаУчетаРасходов"
Процедура СоставКосвенныхРасходовПриАктивизацииСтроки(Элемент)

	ОтобразитьНаправленияСписания();

КонецПроцедуры

// Процедура - обработчик события "Перед удалением строки"
// для табличной части диалога "СоставКосвенныхРасходов"
Процедура СоставКосвенныхРасходовПередУдалением(Элемент, Отказ)
	
	// Необходимо очистить таблицу СчетаУчетаРасходов
	КлючПоиска = Новый Структура("КлючСтроки" , ЭлементыФормы.СчетаУчетаРасходов.ОтборСтрок.КлючСтроки.Значение);
	
	НайденныеСтроки = СчетаУчетаРасходов.НайтиСтроки(КлючПоиска);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		СчетаУчетаРасходов.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "После удаления строки"
// для табличной части диалога "СоставКосвенныхРасходов"
Процедура СоставКосвенныхРасходовПослеУдаления(Элемент)

	ОтобразитьНаправленияСписания();

КонецПроцедуры

// Процедура - обработчик события "При начале редактирования"
// для табличной части диалога "СчетаУчетаРасходов"
Процедура СчетаУчетаРасходовПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		ЭлементыФормы.СчетаУчетаРасходов.ТекущиеДанные.КлючСтроки = ЭлементыФормы.СчетаУчетаРасходов.ОтборСтрок.КлючСтроки.Значение;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "При активизации строки"
// для табличной части диалога "СчетаУчетаРасходов"
Процедура СчетаУчетаРасходовПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьСубконто(Элемент.ТекущиеДанные);
	
КонецПроцедуры

Процедура СчетаУчетаРасходовСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка =  БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "При изменении"
// для реквизита диалога "ВыручкаБезНДС"
Процедура ВыручкаБезНДСПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "При изменении"
// для реквизита диалога "ВыручкаЕНВД"
Процедура ВыручкаЕНВДПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СтатьяЗатратНДС
//
Процедура СтатьяЗатратНДСНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокДопустимыхВидовСтатей = Новый СписокЗначений;
	СписокДопустимыхВидовСтатей.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);

	НачалоВыбораЗначенияСтатьиЗатрат( СписокДопустимыхВидовСтатей, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // СтатьяЗатратНДСНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода СтатьяЗатратНДС
//
Процедура СтатьяЗатратНДСПриЕНВДНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокДопустимыхВидовСтатей = Новый СписокЗначений;
	СписокДопустимыхВидовСтатей.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);

	НачалоВыбораЗначенияСтатьиЗатрат( СписокДопустимыхВидовСтатей, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Функция ПараметрыНеобходимыеДляВыбораСубконто(Элемент, Учет = "Бух")

	// Если тип выбираемого субконто - Партия, то создадим 
	// структуру дополнительных параметров.

	СписокПараметров = Новый Структура();
	ДанныеТекущейСтроки = ЭлементыФормы.СчетаУчетаРасходов.ТекущиеДанные;
	ДанныеТекущейСтрокиКосвРасх	= ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные;
    СписокПараметров.Вставить("ЭтоНовыйДокумент",ЭтоНовый());

	Если Элемент.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения  Тогда

		СписокПараметров.Вставить("Дата", Дата);

		Если Учет = "Бух" Тогда
			СписокПараметров.Вставить("СчетУчета",    ДанныеТекущейСтроки.СчетЗатрат);
			СписокПараметров.Вставить("Номенклатура", УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Номенклатура", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3));
			СписокПараметров.Вставить("Склад",        УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Склады",       ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3));
		КонецЕсли;
		
	Иначе // Тип выбираемого субконто - не Партия.
		
		СписокПараметров.Вставить("Контрагент",   ДанныеТекущейСтрокиКосвРасх.Поставщик);
		
	КонецЕсли;

	Возврат СписокПараметров;

КонецФункции // ПараметрыНеобходимыеДляВыбораСубконто()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ДействияФормыЗаполнитьДокумент(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НачалоПериода)Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не установлен период заполнения документа!");
		Возврат;
	КонецЕсли;
	
	Если СоставКосвенныхРасходов.Количество() > 0 Тогда
		ОтветНаВопрос = Вопрос("Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДокумент(, , , Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура СоставКосвенныхРасходовСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТД = ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные;
	Если ТД = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Организация,Контрагент", Организация,ТД.Поставщик);
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "СоставКосвенныхРасходов");
	
КонецПроцедуры

Процедура СоставКосвенныхРасходовСуммаВсегоПриИзменении(Элемент)
	
	ТД = ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТД.НДСВсего = УчетНДС.РассчитатьСуммуНДС(ТД.СуммаВсего, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));

КонецПроцедуры

Процедура СоставКосвенныхРасходовНДССуммаПриИзменении(Элемент)
	
	ТД = ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТД.НДС = УчетНДС.РассчитатьСуммуНДС(ТД.НДССумма, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));


КонецПроцедуры

Процедура СоставКосвенныхРасходовБезНДССуммаПриИзменении(Элемент)
		
	ТД = ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТД.БезНДС = УчетНДС.РассчитатьСуммуНДС(ТД.БезНДССумма, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));

КонецПроцедуры

Процедура СоставКосвенныхРасходовЕНВДСуммаПриИзменении(Элемент)
		
	ТД = ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТД.ЕНВДНДС = УчетНДС.РассчитатьСуммуНДС(ТД.ЕНВДСумма, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));
	
КонецПроцедуры

Процедура СоставКосвенныхРасходовСуммаБезНДС0ПриИзменении(Элемент)
		
	ТД = ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТД.НДС0 = УчетНДС.РассчитатьСуммуНДС(ТД.НДС0Сумма, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// СЧЕТА СПИСАНИЯ НДС

//Определяет параметры учетной политики (сложный учет НДС по организации)
Процедура ОпределитьПараметрыСписанияНДС()
	
	ПараметрыНеПолучены = Ложь;
	ПараметрыНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ПараметрыНеПолучены, Организация);
	Если ПараметрыНеПолучены Тогда
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
	Иначе
		мСложныйУчетНДС = ПараметрыНУ.СложныйУчетНДС И Не ПараметрыНУ.УСН И Не ПараметрыНУ.УпрощенныйУчетНДС;
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = ПараметрыНУ.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;
		Если НЕ ЗначениеЗаполнено(мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость) Тогда
			мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

// Устанавливает типы субконто при изменении счета
//
// Параметры
//  Счет  – <ПланыСчетов. .Ссылка> – Счет изменившийся
//  Суффикс- <Строка> – Суффикс реквизитов
//
Процедура ПриИзмененииСчета(Счет, Суффикс)

	ВидыСубконтоСчета = Счет.ВидыСубконто;

	Для Ном = 1 по 3 Цикл
		Если (Ном <= ВидыСубконтоСчета.Количество()) и (ЗначениеЗаполнено(Счет)) и
			ВидыСубконтоСчета[Ном-1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЭтотОбъект["Субконто"+Суффикс+Ном]))  Тогда
			// Без изменений
		ИначеЕсли Ном <= ВидыСубконтоСчета.Количество() тогда
			ЭтотОбъект["Субконто"+Суффикс+Ном] = Новый(ВидыСубконтоСчета[Ном-1].ВидСубконто.ТипЗначения.Типы()[0]);
		Иначе
			ЭтотОбъект["Субконто"+Суффикс+Ном] = Неопределено;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПриИзмененииСчета()

Процедура УстановитьВидимостьСубконто(Счет, Суффикс, ВидимостьСчета)
	
	ВидыСубконтоСчета = Счет.ВидыСубконто;
	КоличествоСубконто = ВидыСубконтоСчета.Количество();
	Для Ном = 1 по 3 Цикл
		
		Если ВидимостьСчета и (Ном <= КоличествоСубконто) и  (ЗначениеЗаполнено(Счет)) Тогда
			ЭлементыФормы["НадписьСубконто"+Суффикс+Ном].Заголовок = Строка(ВидыСубконтоСчета[Ном-1].ВидСубконто);
			ЭлементыФормы["НадписьСубконто"+Суффикс+Ном].Видимость = Истина;
			ЭлементыФормы["Субконто"+Суффикс+Ном].Видимость        = Истина;
		Иначе
			ЭлементыФормы["НадписьСубконто"+Суффикс+Ном].Видимость = Ложь;
			ЭлементыФормы["Субконто"+Суффикс+Ном].Видимость        = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СчетСписанияНДСПриИзменении(Элемент)
	
	ПриИзмененииСчета(СчетСписанияНДС, "СписанияНДС");
	УстановитьВидимостьСубконто(СчетСписанияНДС, "СписанияНДС", Элемент.Видимость);
	
КонецПроцедуры

Процедура СчетСписанияНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
КонецПроцедуры

Процедура ДляСписанияНДСИспользоватьСчетИАналитикуУчетаЗатрат1ПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Инициализация списка выбора для реквизита "ВидЦенности"
ЭлементыФормы.СоставКосвенныхРасходов.Колонки.ВидЦенности.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
ЭлементыФормы.СоставКосвенныхРасходов.Колонки.ВидЦенности.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Материалы);
ЭлементыФормы.СоставКосвенныхРасходов.Колонки.ВидЦенности.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.КомандировочныеРасходы);
ЭлементыФормы.СоставКосвенныхРасходов.Колонки.ВидЦенности.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПредставительскиеРасходы);
ЭлементыФормы.СоставКосвенныхРасходов.Колонки.ВидЦенности.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
ЭлементыФормы.СоставКосвенныхРасходов.Колонки.ВидЦенности.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
ЭлементыФормы.СоставКосвенныхРасходов.Колонки.ВидЦенности.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Товары);
ЭлементыФормы.СоставКосвенныхРасходов.Колонки.ВидЦенности.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
ЭлементыФормы.СоставКосвенныхРасходов.Колонки.ВидЦенности.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);



