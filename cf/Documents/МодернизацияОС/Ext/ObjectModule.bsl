
// Строки, хранят реквизиты имеющие смысл только для бух. учета
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

#Если Клиент Тогда

// Функция формирует табличный документ унифицированной формы ОС-14
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме ОС-14 (приходный ордер).
//
Функция ПечатьОС3()
	Перем ПодразделениеОтветственныхЛиц;

	Макет       = ПолучитьМакет("ОС3");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Форма_ОС3";

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("КонДата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МодернизацияОСОС.Ссылка.Организация.КодПоОКПО КАК КодПоОКПООрганизации,
	|	МодернизацияОСОС.Ссылка.Номер КАК НомерДок,
	|	МодернизацияОСОС.Ссылка.Дата КАК ДатаДок,
	|	МодернизацияОСОС.Ссылка.СобытиеОС КАК ВидРабот,
	|	МодернизацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МодернизацияОСОС.ОсновноеСредство.Наименование КАК НаимОС,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвНомер,
	|	МодернизацияОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	|	МодернизацияОСОС.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
	|	МодернизацияОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	|	МодернизацияОСОС.СтоимостьБУ КАК СтоимостьБУ,
	|	МодернизацияОСОС.СуммаМодернизацииБУ КАК СуммаЗатрат,
	|	МодернизацияОСОС.ФактСрокИспользованияБУ КАК СрокЭксплуатации,
	|	МодернизацияОСОС.НомерСтроки КАК ПорядковыйНомер
	|ИЗ
	|	Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|				&КонДата,
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							Документ.МодернизацияОС.ОС.ОсновноеСредство
	|						ИЗ
	|							Документ.МодернизацияОС.ОС
	|						ГДЕ
	|							Документ.МодернизацияОС.ОС.Ссылка = &Ссылка)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО МодернизацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|ГДЕ
	|	МодернизацияОСОС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	МодернизацияОСОС.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	// Печать лицевой стороны.
	// Секция № 1
	Шапка         = Макет.ПолучитьОбласть("Шапка1");
	СтрокаТаблицы = Макет.ПолучитьОбласть("Строка1");
	Подвал        = Макет.ПолучитьОбласть("Строка1П");
	
	Шапка.Параметры.Заполнить(Выборка);
	
	СведенияОбОрганизации       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
	ПредставлениеОрганизации    = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	Шапка.Параметры.Организация = ПредставлениеОрганизации;
	
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 
	
	ОтветственныеЛица = ОбщегоНазначения.ОтветственныеЛица(Организация, Дата, ПодразделениеОтветственныхЛиц);
	
	Шапка.Параметры.Руководитель          = ОтветственныеЛица.РуководительПредставление;
	Шапка.Параметры.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжность;
	ТабДокумент.Вывести(Шапка);

	ДокВводаБУ  = Неопределено;
	ДатаВводаБУ = Дата('00000000');
	
	Выборка = РезультатЗапроса.Выгрузить();
	
    Для каждого СтрокаВыборки Из Выборка Цикл
	
		СтрокаТаблицы.Параметры.Заполнить(СтрокаВыборки);
		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(СтрокаВыборки.ОсновноеСредство, Организация, Перечисления.СостоянияОС.ПринятоКУчету, ДокВводаБУ, ДатаВводаБУ);
		
		СтрокаТаблицы.Параметры.СрокЭкспл = ?(НЕ ЗначениеЗаполнено(СтрокаВыборки.СрокЭксплуатации),
		                                      "-",
		                                      Строка(СтрокаВыборки.СрокЭксплуатации) + " мес.");
		
		СтрокаТаблицы.Параметры.ВосстановительнаяСтоимостьПеч = Формат( СтрокаВыборки.СтоимостьБУ, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=-; ЧГ=3,0");

		ТабДокумент.Вывести(СтрокаТаблицы);

	КонецЦикла;

	// Секция № 2
	Шапка         = Макет.ПолучитьОбласть("Шапка2");
	СтрокаТаблицы = Макет.ПолучитьОбласть("Строка2");
	Подвал        = Макет.ПолучитьОбласть("Строка2П");
	
	ТабДокумент.Вывести(Шапка);
	
    Для Каждого СтрокаВыборки Из Выборка Цикл

		СтрокаТаблицы.Параметры.Заполнить(СтрокаВыборки);
		
		ТабДокумент.Вывести(СтрокаТаблицы);

	КонецЦикла;

	Подвал = Макет.ПолучитьОбласть("Подвал");
	Подвал.Параметры.ИтогоСуммаЗатрат = Выборка.ИТОГ("СуммаЗатрат");
	
	Если Выборка.Количество()=1 Тогда
	    Подвал.Параметры.СтоимостьКонечнаяПеч = Выборка.ИТОГ("СтоимостьБУ")+Выборка.ИТОГ("СуммаЗатрат") ;
	КонецЕсли; 
	
	ТабДокумент.Вывести(Подвал);
	
	// Печать оборотной стороны.
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ОбластьПечати = Макет.ПолучитьОбласть("ОборотнаяСторона");
	ОбластьПечати.Параметры.ГлавБух = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
	ТабДокумент.Вывести(ОбластьПечати);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьОС3()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОС3" тогда
		
		// Управленческая печатная форма документа
		ТабДокумент = ПечатьОС3();
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Модернизация ОС"), НепосредственнаяПечать);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОС3","Форма ОС-3");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "СтоимостьБУ,
								|СчетУчетаВнеоборотногоАктива,
								|ОС.СрокПолезногоИспользованияБУ,
								|ОС.ФактСрокИспользованияБУ,
								|ОС.ОстСрокИспользованияБУ,
								|ОС.ОбъемПродукцииРаботБУ,
								|ОС.ФактОбъемПродукцииРаботБУ,
								|ОС.ОстОбъемПродукцииРаботБУ,
								|ОС.СтоимостьБУ,
								|ОС.СуммаМодернизацииБУ,
								|ОС.СуммаМодернизацииБУХоз,
								|ОС.АмортизацияБУ,
								|ОС.АмортизацияЗаМесяцБУ,
								|ОС.ОстСтоимостьБУ,
								|ОС.КоэффициентАмортизацииБУ,
								|ОС.КоэффициентУскоренияБУ";

	мСтрокаРеквизитыНалУчета =  "СтоимостьНУ,
								|СтоимостьПР,
								|АмортизацияПР,    
								|СчетУчетаНУВнеоборотногоАктива,
								|ОС.СтоимостьНУ,
								|ОС.СуммаМодернизацииНУ,
								|ОС.СрокПолезногоИспользованияНУ,
								|ОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

Процедура ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента)
	
	СтруктураШапкиДокумента.Вставить("МестонахождениеОС", МестонахождениеОС);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(СтруктураШапкиДокумента, Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетУчетаВнеоборотногоАктива";
КонецПроцедуры

// Проверяет правильность заполнения регл. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не заполнено поле Организация", Отказ,Заголовок);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("ВариантУчетаРасходовПоАмортизационнойПремии") Тогда
		
		Если СтруктураШапкиДокумента.ВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии Тогда
			Если НЕ (ОС.Итог("СуммаКапитальныхВложенийВключаемыхВРасходыНУ") = 0) Тогда
				Если СтруктураШапкиДокумента.СчетУчетаЗатратПоАмортизационнойПремии = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
					ОбщегоНазначения.ОшибкаПриПроведении("Не указан счет учета затрат по амортизационной премии", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "ОбъектСтроительства";
	ДополнитьОбязательныеРеквизитыШапкиРегл(СтруктураШапкиДокумента, ОбязательныеРеквизитыШапки);
	
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, "", мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета,,СтруктураШапкиДокумента);
	
	СтруктураОбязательныхПолей = 
	Новый Структура(ОбязательныеРеквизитыШапки);

	// Документ должен принадлежать хотя бы к одному виду учета (бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Проверим на виды операций, которые не будут полностью отработаны в данном документе
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету 
	или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию 
	или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию
	или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПодготовкаКПередаче
	или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача
	или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание
	тогда
		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не будут полноценно отражены данным документом (учетное состояние ОС не изменится)!",,Заголовок);
	КонецЕсли;


КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверка реквизитов в ТЧ по регл. учету
// 
Процедура ПроверкаРеквизитовТЧРегл(ТаблицаОС, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
	Если НЕ (ТаблицаОС.Итог("СуммаМодернизацииБУ") = СтруктураШапкиДокумента.СтоимостьБУ) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("По бухгалтерскому учету общая сумма модернизации, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!", Отказ, Заголовок);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
		Если НЕ (ТаблицаОС.Итог("СуммаМодернизацииНУ") = СтруктураШапкиДокумента.СтоимостьНУ) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("По налоговому учету общая сумма модернизации, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
		Если НЕ (ТаблицаОС.Итог("СуммаМодернизацииУСН") = СтруктураШапкиДокумента.СтоимостьУСН) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("По налоговому учету общая сумма модернизации, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверкаРеквизитовТЧРегл()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТаблицаОС, СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, "", мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ОС", СтруктураШапкиДокумента);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);
	
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		Если НЕ СтрокаОС.ОтражалосьВБухгалтерскомУчете Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в учете по указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если СтрокаОС.СнятоСУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> снято с учета в указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если СтрокаОС.МестонахождениеОС <> СтруктураШапкиДокумента.МестонахождениеОС Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <" + СтрокаОС.ОсновноеСредство + "> не отражалось в учете в подразделении <" + СтруктураШапкиДокумента.МестонахождениеОС + ">.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет учета (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если НЕ СтрокаОС.ОтражалосьВНалоговомУчете Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в налоговом учете (по налогу на прибыль) по указанной организации.",,, СтатусСообщения.Важное);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Логические проверки
	ПроверкаРеквизитовТЧРегл(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок);

КонецПроцедуры // ПроверкаРеквизитов()

Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаПоСтрокам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДатаОплаты, СуммаОплаты");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Функция РаспределитьОплатыПоОС(СтруктураШапкиДокумента, ТаблицаОплат, ТаблицаПоОС)
	
	ТаблицаОплат.Свернуть("ДатаОплаты", "СуммаОплаты");
	
	ТаблицаОплатПоОС = Новый ТаблицаЗначений();
	ТаблицаОплатПоОС.Колонки.Добавить("ОсновноеСредство");
	ТаблицаОплатПоОС.Колонки.Добавить("ДатаОплаты");
	ТаблицаОплатПоОС.Колонки.Добавить("СуммаОплаты");
	
	ТаблицаБазыРаспределения = ТаблицаПоОС.Скопировать(,"ОсновноеСредство, СуммаМодернизацииУСН");
	Если ТаблицаБазыРаспределения.Количество() = 0 Тогда
		Возврат ТаблицаОплатПоОС;
	КонецЕсли;
	
	Для Каждого СтрокаОплата Из ТаблицаОплат Цикл
		Если СтрокаОплата.ДатаОплаты < Дата("20070101") Тогда
			//Такие оплаты не учитываются
			Продолжить;
		КонецЕсли;
		Если Окр(ТаблицаБазыРаспределения.Итог("СуммаМодернизацииУСН"),2,1) = 0 Тогда
			Возврат ТаблицаОплатПоОС;
		КонецЕсли;
		
		СуммаОплатыКРаспределению = Мин(СтрокаОплата.СуммаОплаты, ТаблицаБазыРаспределения.Итог("СуммаМодернизацииУСН"));
		КоэффОплаты = СуммаОплатыКРаспределению / ТаблицаБазыРаспределения.Итог("СуммаМодернизацииУСН");
		
		Для Каждого СтрокаОС Из ТаблицаБазыРаспределения Цикл
			СуммаОплатыОС = Мин(Окр(КоэффОплаты*СтрокаОС.СуммаМодернизацииУСН,2,1), СтрокаОС.СуммаМодернизацииУСН);
			Если СуммаОплатыОС = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицыОплатПоОС = ТаблицаОплатПоОС.Добавить();
			СтрокаТаблицыОплатПоОС.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			СтрокаТаблицыОплатПоОС.ДатаОплаты 		= СтрокаОплата.ДатаОплаты;
			СтрокаТаблицыОплатПоОС.СуммаОплаты 		= СуммаОплатыОС;
			
			СуммаОплатыКРаспределению = СуммаОплатыКРаспределению - СуммаОплатыОС;
			СтрокаОС.СуммаМодернизацииУСН = СтрокаОС.СуммаМодернизацииУСН - СуммаОплатыОС;
			
		КонецЦикла;
		
		//Распределим погрешность округления, списывая ее пропорционально убыванию остатков расходов
		ТаблицаБазыРаспределения.Сортировать("СуммаМодернизацииУСН Убыв");
		Если СуммаОплатыКРаспределению > 0 Тогда
			Для Каждого СтрокаОС Из ТаблицаБазыРаспределения Цикл
				Если СуммаОплатыКРаспределению = 0 Тогда
					Прервать;
				КонецЕсли;
				СуммаОплатыОС = Мин(СуммаОплатыКРаспределению, СтрокаОС.СуммаМодернизацииУСН);
				Если СуммаОплатыОС = 0 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТаблицыОплатПоОС = ТаблицаОплатПоОС.Добавить();
				СтрокаТаблицыОплатПоОС.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
				СтрокаТаблицыОплатПоОС.ДатаОплаты 		= СтрокаОплата.ДатаОплаты;
				СтрокаТаблицыОплатПоОС.СуммаОплаты 		= СуммаОплатыОС;
				
				СуммаОплатыКРаспределению = СуммаОплатыКРаспределению - СуммаОплатыОС;
				СтрокаОС.СуммаМодернизацииУСН = СтрокаОС.СуммаМодернизацииУСН - СуммаОплатыОС;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	ТаблицаОплатПоОС.Свернуть("ОсновноеСредство, ДатаОплаты", "СуммаОплаты");
	
	Возврат ТаблицаОплатПоОС;
	
КонецФункции

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплатПоОС, Отказ, Заголовок)

	Проводки = Движения.Хозрасчетный;
	
	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		// Движения по регистру СобытияОСОрганизаций
		Движение = Движения.СобытияОСОрганизаций.Добавить();
		Движение.Период             = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство   = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация        = СтруктураШапкиДокумента.Организация;
		Движение.Событие            = СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента  = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента     = СтруктураШапкиДокумента.Номер;
		Движение.СуммаЗатратБУ      = СтрокаТЧ.СуммаМодернизацииБУ;
		Движение.СуммаЗатратНУ      = СтрокаТЧ.СуммаМодернизацииНУ;
		Движение.СуммаЗатратУСН     = СтрокаТЧ.СуммаМодернизацииУСН;

		// Движения по регистру ПараметрыАмортизацииОСБухгалтерскийУчет
		Движение = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период                                      = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство                            = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация                                 = СтруктураШапкиДокумента.Организация;
		Движение.СрокПолезногоИспользования                  = СтрокаТЧ.СрокПолезногоИспользованияБУ;
		Движение.СрокИспользованияДляВычисленияАмортизации   = СтрокаТЧ.СрокПолезногоИспользованияБУ - СтрокаТЧ.ФактСрокИспользованияБУ;
		Движение.СтоимостьДляВычисленияАмортизации           = СтрокаТЧ.СтоимостьБУ + СтрокаТЧ.СуммаМодернизацииБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаТЧ.ОбъемПродукцииРаботБУ - СтрокаТЧ.ФактОбъемПродукцииРаботБУ;
		Движение.КоэффициентАмортизации                      = СтрокаТЧ.КоэффициентАмортизацииБУ;
		Движение.КоэффициентУскорения                        = СтрокаТЧ.КоэффициентУскоренияБУ;
		Движение.ОбъемПродукцииРабот                         = СтрокаТЧ.ОбъемПродукцииРаботБУ;

		// Списание модернизации Дт 01.01 Кт 08.03
		СуммаПроводки = СтрокаТЧ.СуммаМодернизацииБУ;
		СуммаПроводкиНУ = 0;
		СуммаПроводкиПР = 0;
		СуммаПроводкиВР = 0;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			СуммаПроводкиНУ = СтрокаТЧ.СуммаМодернизацииНУ;
			СуммаПроводкиПР = СтрокаТЧ.СуммаМодернизацииПР;
			СуммаПроводкиВР = СтрокаТЧ.СуммаМодернизацииВР;
			
		КонецЕсли;
		
		Если СуммаПроводки > 0
		 ИЛИ СуммаПроводкиНУ > 0 
		 ИЛИ СуммаПроводкиПР <> 0 
		 ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Проводки.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Модернизация ОС";
			
			Проводка.СчетДт          = СтрокаТЧ.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТЧ.ОсновноеСредство);
			
			Проводка.СчетКт          = СтруктураШапкиДокумента.СчетУчетаВнеоборотногоАктива;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
			
			Проводка.Сумма        = СуммаПроводки;
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтрокаТЧ.МестонахождениеОС, СтрокаТЧ.ПодразделениеОрганизации);
				
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаПроводкиНУ,СуммаПроводкиНУ,СуммаПроводкиПР,СуммаПроводкиПР,СуммаПроводкиВР,СуммаПроводкиВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
			КонецЕсли;

		КонецЕсли;

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			// Движения по регистру ПараметрыАмортизацииОСНалоговыйУчет
			Движение = Движения.ПараметрыАмортизацииОСНалоговыйУчет.Добавить();
			Движение.Период                     = СтруктураШапкиДокумента.Дата;
			Движение.ОсновноеСредство           = СтрокаТЧ.ОсновноеСредство;
			Движение.Организация                = СтруктураШапкиДокумента.Организация;
			Движение.СрокПолезногоИспользования = СтрокаТЧ.СрокПолезногоИспользованияНУ;
			Движение.КоэффициентАмортизации 	= СтрокаТЧ.КоэффициентАмортизацииНУ;			
			Движение.ПрДляВычисленияАмортизации = СтрокаТЧ.СтоимостьПР - СтрокаТЧ.АмортизацияПР - СтрокаТЧ.АмортизацияЗаМесяцБУ / СтрокаТЧ.СтоимостьБУ * СтрокаТЧ.СтоимостьПР + СтрокаТЧ.СуммаМодернизацииПР;
			
			// Проводка по счету КВ "Амортизационная премия".
			Если ЗначениеЗаполнено(СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ) Тогда
				
				Проводка = Проводки.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = "Амортизационная премия";
				Проводка.СуммаНУДт     = СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
				
				Проводка.СчетДт          = ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства",               СтрокаТЧ.ОсновноеСредство);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыАмортизационнойПремии", Ссылка);
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаТЧ.ПодразделениеОрганизации, "Дт");
				
				// Начисление амортизационной премии.
				Если СтруктураШапкиДокумента.ВключатьАПВСоставРасходовПриОтраженииМодернизации Тогда
					
					// Списание суммы амортизационной премии со счета КВ.
					Проводка = Проводки.Добавить();

					Проводка.Период       = СтруктураШапкиДокумента.Дата;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание   = "Амортизационная премия";
					Проводка.СуммаНУКт     = СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
					
					Проводка.СчетКт          = ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",               СтрокаТЧ.ОсновноеСредство);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыАмортизационнойПремии", Ссылка);
					
					БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаТЧ.ПодразделениеОрганизации, "Кт");
					
					// Начисление амортизационной премии.
					Проводка = Проводки.Добавить();
					
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Амортизационная премия";
					
					Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаЗатратПоАмортизационнойПремии;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоПоАмортизационнойПремии1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоПоАмортизационнойПремии2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоПоАмортизационнойПремии3);
					
					Проводка.СчетКт          = СтрокаТЧ.СчетУчетаБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТЧ.ОсновноеСредство);
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизацииПоАмортизационнойПремии, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
					// Отражение возникающей разницы.
					ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
					Если ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "БАУКОРП" Тогда // Постоянная разница.
						НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
						                                              СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
						                                              ?(СтруктураШапкиДокумента.ПрименениеПБУ18, -СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ, 0),
						                                              ?(СтруктураШапкиДокумента.ПрименениеПБУ18, -СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ, 0),
						                                              ,
						                                              ,
						                                              Проводка,
						                                              СтруктураШапкиДокумента.ПрименениеПБУ18);
					Иначе // Временная разница.
						НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
						                                              СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
						                                              ,
						                                              ,
						                                              ?(СтруктураШапкиДокумента.ПрименениеПБУ18, -СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ, 0),
						                                              ?(СтруктураШапкиДокумента.ПрименениеПБУ18, -СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ, 0),
						                                              Проводка,
						                                              СтруктураШапкиДокумента.ПрименениеПБУ18);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		РегОплаты = Движения.ОплатыОСДляУСН;
		
		Для Каждого Запись Из ТаблицаОплатПоОС Цикл
			
			СтрокаОплаты  = РегОплаты.Добавить();
			
			СтрокаОплаты.Период           = Запись.ДатаОплаты;
			СтрокаОплаты.Организация      = СтруктураШапкиДокумента.Организация;
			СтрокаОплаты.ОсновноеСредство = Запись.ОсновноеСредство;
			СтрокаОплаты.ДокументМодернизации = Ссылка;
			СтрокаОплаты.ДатаОплаты       = Запись.ДатаОплаты;
			СтрокаОплаты.СуммаОплаты      = Запись.СуммаОплаты;
			
		КонецЦикла;
		
	КонецЕсли;

	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда 

		ОСН_ЮрЛицо      = (СтруктураШапкиДокумента.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация);
	
		Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл

			Если НЕ ОСН_ЮрЛицо Тогда
				
				НоваяСтрока = Движения.ИПМПЗ.ДобавитьПриход();
				НоваяСтрока.Активность                	= Истина;
				НоваяСтрока.Период						= СтруктураШапкиДокумента.Дата;
				НоваяСтрока.Регистратор					= Ссылка;
				НоваяСтрока.ХарактерДеятельности		= ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(,,,, УчетнаяПолитика);
				НоваяСтрока.НоменклатурнаяГруппа		= ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации(Ложь, СтрокаТЧ.ОсновноеСредство,, Перечисления.ВидыМПЗ.ОС, УчетнаяПолитика);
				НоваяСтрока.Номенклатура				= СтрокаТЧ.ОсновноеСредство;
				НоваяСтрока.Организация					= СтруктураШапкиДокумента.Организация;
				НоваяСтрока.ВидМПЗ						= Перечисления.ВидыМПЗ.ОС;
				НоваяСтрока.Партия						= СтрокаТЧ.Партия;
				НоваяСтрока.ДокументОплаты				= Ссылка;
				НоваяСтрока.РеквизитыДокументаОплаты	= СтруктураШапкиДокумента.РеквизитыДокументаОплаты;
				НоваяСтрока.Сумма						= СтрокаТЧ.СуммаМодернизацииНУ;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	// }УчетДоходовИРасходовИП

	//Движения по подсистеме НДС
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" 
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоОС.Количество() = 0 Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли; 
	
	//Вычислим коэффициент распределения
	ИтоговаяСуммаМодернизацииБУ = ТаблицаПоОС.Итог("СуммаМодернизацииБУ");
	
	Если (ИтоговаяСуммаМодернизацииБУ <= 0) Тогда
		Возврат;
	КонецЕсли;
	
	//Вычислим коэффициент распределения
	Запрос = Новый Запрос;
			
	Запрос.УстановитьПараметр("КонецПериода"     	, новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	Запрос.УстановитьПараметр("Счет"       			, СтруктураШапкиДокумента.СчетУчетаВнеоборотногоАктива);
	Запрос.УстановитьПараметр("Организация"			, СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Объект"				, СтруктураШапкиДокумента.ОбъектСтроительства);
			
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
		
	ЕстьСубконто_СпособыСтроительства = не (СтруктураШапкиДокумента.СчетУчетаВнеоборотногоАктива.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства,"ВидСубконто") = Неопределено);
		
	Если ЕстьСубконто_СпособыСтроительства Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства);
		Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
		Запрос.УстановитьПараметр("ХозСпособСтроительства",  Перечисления.СпособыСтроительства.Хозспособ);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА Остатки.Субконто2 = &ХозСпособСтроительства
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.СуммаОстаток
		|		КОНЕЦ) КАК СуммаОстаток,
		|	СУММА(ВЫБОР
		|			КОГДА Остатки.Субконто2 = &ХозСпособСтроительства
		|				ТОГДА Остатки.СуммаОстаток
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Хозспособ_Остаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&КонецПериода,
		|		Счет = &Счет,
		|		&ВидыСубконто,
		|		Организация = &Организация
		|		    И Субконто1 = &Объект) КАК Остатки";
	Иначе
		Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Остатки.СуммаОстаток КАК СуммаОстаток,
		|	0 КАК Хозспособ_Остаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&КонецПериода,
		|		Счет = &Счет,
		|		&ВидыСубконто,
		|		Организация = &Организация
		|		    И Субконто1 = &Объект) КАК Остатки";
				
	КонецЕсли; 
			
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СуммаОстатка = 0;
		СуммаОстатка_Хозспособ = 0;
	иначе
		Результат = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		СуммаОстатка  = Результат.Итог("СуммаОстаток");
		СуммаОстатка_Хозспособ = Результат.Итог("Хозспособ_Остаток");
	КонецЕсли; 
		
	Если ИтоговаяСуммаМодернизацииБУ > 0 Тогда
		Если (СуммаОстатка = 0) тогда
			ОбщегоНазначения.СообщитьОбОшибке("Отсутствует (не определен) остаток по счету """ + СтруктураШапкиДокумента.СчетУчетаВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Подрядный""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
			КоэффициентРаспределения = 1;
		ИначеЕсли (СуммаОстатка < 0) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Определен отрицательный остаток ("+Формат(СуммаОстатка, "ЧЦ=15; ЧДЦ=2")+") по счету """ + СтруктураШапкиДокумента.СчетУчетаВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Подрядный""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
			КоэффициентРаспределения = 1;
		Иначе
			КоэффициентРаспределения = ИтоговаяСуммаМодернизацииБУ / СуммаОстатка;
		КонецЕсли;
		
		// отразим погашение события ОжидаетсяПринятиеКУчетуОбъектаСтроительства
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС(СтруктураШапкиДокумента,
											СтруктураШапкиДокумента.ОбъектСтроительства,
											Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства,
											Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,СтруктураШапкиДокумента.Дата,
											КоэффициентРаспределения, Движения, Отказ);
	КонецЕсли;							
	
	//Добавим необходимые события в рег. НДСпоОСиНМА по каждому ОС в табличной части		
	ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.Выгрузить();
	
	ОсобыеУсловияБлокировкиВычета2006 = (СтруктураШапкиДокумента.Дата >= '20060101');

	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию,"Состояние");
	Если ОсобыеУсловияБлокировкиВычета2006 тогда
		 ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Истина, "НеВлияетНаВычет");
	КонецЕсли;
	
	ТаблицаДвижений_НДСпоОСиНМА_Базовая = ТаблицаДвижений_НДСпоОСиНМА.Скопировать();
	ТаблицаДвижений_НДСпоОСиНМА.Очистить();
	Для каждого СтрокаОС Из ТаблицаПоОС Цикл
		ТаблицаДвижений_НДСпоОСиНМА_Базовая.ЗаполнитьЗначения(СтрокаОС.ОсновноеСредство,"Объект");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений_НДСпоОСиНМА_Базовая, ТаблицаДвижений_НДСпоОСиНМА);
	КонецЦикла; 
		
	Распределение = Новый Структура("СуммаБезНДС,НДС");
	Отбор         = Новый Структура("СчетФактура,ВидЦенности,СтавкаНДС,СчетУчетаНДС,НДСВключенВСтоимость");
		
	ТаблицаДвижений_НДСпоОСиНМА = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаДвижений_НДСпоОСиНМА_Базовая, ТаблицаДвижений_НДСпоОСиНМА,Распределение,Отбор); 
	
	// Заблокируем вычет в текущем месяце
	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"Период");
	Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
	Движения.НДСпоОСиНМА.ВыполнитьПриход();
	
	//на след. месяц разблокируем вычет по ОС, введенному в эксплуатацию
	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(НачалоМесяца(ДобавитьМесяц((СтруктураШапкиДокумента.Дата),1)),"Период");
	Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
	Движения.НДСпоОСиНМА.ВыполнитьРасход();
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	СтруктураШапкиДокумента.Вставить("РеквизитыДокументаОплаты", РеквизитыДокументаОплаты);
	
	ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента);
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("УпрощенныйУчетНДС, ВариантУчетаРасходовПоАмортизационнойПремии");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);

	// Выборка строк табличной части
	СписокОС =
	"ВЫБРАТЬ
	|	МодернизацияОСОС.ОсновноеСредство
	|ИЗ
	|	Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
	|ГДЕ
	|	МодернизацияОСОС.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("СнятоСУчета",   Перечисления.СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("ВидМПЗ_ОС",     Перечисления.ВидыМПЗ.ОС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МодернизацияОСОС.НомерСтроки КАК НомерСтроки,
	|	МодернизацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеОрганизации,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК МестонахождениеОС,
	|	МодернизацияОСОС.СтоимостьБУ КАК СтоимостьБУ,
	|	МодернизацияОСОС.СтоимостьПР КАК СтоимостьПР,
	|	МодернизацияОСОС.АмортизацияПР КАК АмортизацияПР,
	|	МодернизацияОСОС.СуммаМодернизацииБУ,
	|	МодернизацияОСОС.АмортизацияБУ КАК АмортизацияБУ,
	|	МодернизацияОСОС.АмортизацияЗаМесяцБУ КАК АмортизацияЗаМесяцБУ,
	|	МодернизацияОСОС.СрокПолезногоИспользованияБУ,
	|	МодернизацияОСОС.ФактСрокИспользованияБУ,
	|	МодернизацияОСОС.ОбъемПродукцииРаботБУ,
	|	МодернизацияОСОС.ФактОбъемПродукцииРаботБУ,
	|	МодернизацияОСОС.КоэффициентАмортизацииБУ,
	|	МодернизацияОСОС.КоэффициентАмортизацииНУ,
	|	МодернизацияОСОС.КоэффициентУскоренияБУ,
	|	МодернизацияОСОС.СрокПолезногоИспользованияНУ,
	|	МодернизацияОСОС.СуммаМодернизацииНУ,
	|	МодернизацияОСОС.СуммаМодернизацииПР,
	|	МодернизацияОСОС.СуммаМодернизацииВР,
	|	МодернизацияОСОС.СуммаМодернизацииУСН,
	|	МодернизацияОСОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ КАК СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|// {УчетДоходовИРасходовИП
	|	СтоимостьОСФизЛица.Партия КАК Партия,
	|// }УчетДоходовИРасходовИП
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьВНалоговомУчете,
	|	ВЫБОР
	|		КОГДА ОС_СнятыеСУчета.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СнятоСУчета
	|ИЗ
	|	Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО МодернизацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
	|		ПО МодернизацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|		ПО МодернизацияОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО МодернизацияОСОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
	|		ГДЕ
	|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента
	|			И СостоянияОСОрганизацииСрезПоследних.Организация = &Организация
	|			И СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В(" + СписокОС + ")
	|			И СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчета
	|		ПО МодернизацияОСОС.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	|// {УчетДоходовИРасходовИП
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИПМПЗ.Остатки(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|			И Номенклатура В (" + СписокОС + ")
	|			И ВидМПЗ = &ВидМПЗ_ОС) КАК СтоимостьОСФизЛица
	|		ПО МодернизацияОСОС.ОсновноеСредство = СтоимостьОСФизЛица.Номенклатура
	|// }УчетДоходовИРасходовИП
	|ГДЕ
	|	МодернизацияОСОС.Ссылка = &Ссылка";
	ТаблицаПоОС = Запрос.Выполнить().Выгрузить();
	
	// {ОбособленныеПодразделения
	ТаблицаПоОС.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	// }ОбособленныеПодразделения 
	
	ПроверкаРеквизитовТЧ(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Строки".
		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("ДатаОплаты"	   ,"ДатаОплаты");
		СтруктураПолей.Вставить("СуммаОплаты"  	   ,"СуммаОплаты");
		
		РезультатЗапросаПоСтрокам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураПолей);
		ТаблицаОплат = РезультатЗапросаПоСтрокам.Выгрузить();
		
		ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаОплат, СтруктураШапкиДокумента, Отказ, Заголовок);
		
		Если НЕ Отказ Тогда
			ТаблицаОплатПоОС = РаспределитьОплатыПоОС(СтруктураШапкиДокумента, ТаблицаОплат, ТаблицаПоОС);
		КонецЕсли;
		
	Иначе
		ТаблицаОплатПоОС = Новый ТаблицаЗначений();		
	КонецЕсли;

	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, ТаблицаОплатПоОС, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если (Дата < Дата("20080101")) Тогда
		Оплата.Очистить();	
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
    		
КонецПроцедуры

