////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
// Хранит соответствие объектов ОС и их инвентарных номеров из регистра сведений
Перем СоответствиеОС_ИнвентарныйНомер;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит установленный в учетной политике вариант
// учета расходов по амортизационной премии
Перем мВариантУчетаРасходовПоАмортизационнойПремии;

Перем ОткрыватьНастройкуДвижений;

Перем ОСН_ФизЛицо;
Перем ОСН_ЮрЛицо;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Проверяет заполненность параметров амортизационной премии
//
Функция ПараметрыАмортизационнойПремииЗаполнены()

	Если (ОС.Итог("СуммаКапитальныхВложенийВключаемыхВРасходыНУ") = 0)
	   И (СчетУчетаЗатратПоАмортизационнойПремии = ПланыСчетов.Хозрасчетный.ПустаяСсылка())
	   И (НЕ ЗначениеЗаполнено(СубконтоПоАмортизационнойПремии1))
	   И (НЕ ЗначениеЗаполнено(СубконтоПоАмортизационнойПремии2))
	   И (НЕ ЗначениеЗаполнено(СубконтоПоАмортизационнойПремии3)) Тогда
	   
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;

КонецФункции // ПроверитьЗаполненностьПараметровАмортизационнойПремии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОС,ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	УСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	УСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	ПБУ18 = НалоговыйУчет.ПрименениеПБУ18(Организация, Дата);
	ОСН_ФизЛицо = ОбщегоНазначения.Предприниматель(Организация, Дата);
	ОСН_ЮрЛицо = (НЕ ОСН_ФизЛицо И НЕ УСН);

	КолонкиОС = ЭлементыФормы.ОС.Колонки;
	
	КолонкиОС.ОбщаяСуммаНУ.Видимость                                 = ОСН_ЮрЛицо И НЕ УСН;
	КолонкиОС.СтоимостьНУ.Видимость                                  = ОСН_ЮрЛицо И НЕ УСН;
	КолонкиОС.СтоимостьПР.Видимость                                  = ОСН_ЮрЛицо;
	КолонкиОС.АмортизацияПР.Видимость                                = ОСН_ЮрЛицо;
	КолонкиОС.СуммаМодернизацииНУ.Видимость                          = ОСН_ЮрЛицо И НЕ УСН;
	КолонкиОС.СрокПолезногоИспользованияНУ.Видимость                 = ОСН_ЮрЛицо И НЕ УСН;
	КолонкиОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ.Видимость = ОСН_ЮрЛицо И ВключитьКапитальныеВложенияВРасходыНУ;
	КолонкиОС.СуммаМодернизацииПР.Видимость                          = ОСН_ЮрЛицо И ПБУ18;
	КолонкиОС.СуммаМодернизацииВР.Видимость                          = ОСН_ЮрЛицо И ПБУ18;
	КолонкиОС.КоэффициентАмортизацииНУ.Видимость                     = ОСН_ФизЛицо;
	КолонкиОС.СуммаМодернизацииУСН.Видимость                         = ОСН_ЮрЛицо И УСН И НЕ УСНДоходы;
	
	ЭлементыФормы.ВключитьКапитальныеВложенияВРасходыНУ.Видимость    = ОСН_ЮрЛицо;
	ЭлементыФормы.ОсновнаяПанель.Страницы.НалоговыйУчет.Видимость    = ОСН_ЮрЛицо И НЕ УСН И ВключитьКапитальныеВложенияВРасходыНУ;
	ЭлементыФормы.ОсновнаяПанель.Страницы.НалоговыйУчетИП.Видимость  = ОСН_ФизЛицо И НЕ УСН;
	ЭлементыФормы.ОсновнаяПанель.Страницы.НалоговыйУчетУСН.Видимость =  УСН И НЕ УСНДоходы;
	
	ЭлементыФормы.КоманднаяПанель1.Видимость						 = Дата >= Дата("20080101");
	ЭлементыФормы.Оплата.Видимость									 = Дата >= Дата("20080101");
	
	ЭлементыФормы.НадписьСтоимостьПР.Видимость                       = ОСН_ЮрЛицо И ПБУ18;
	ЭлементыФормы.СтоимостьПР.Видимость                              = ОСН_ЮрЛицо И ПБУ18;
	ЭлементыФормы.НадписьСтоимостьВР.Видимость                       = ОСН_ЮрЛицо И ПБУ18;
	ЭлементыФормы.СтоимостьВР.Видимость                              = ОСН_ЮрЛицо И ПБУ18;

	ЭлементыФормы.РеглВалюта2.Видимость                              = ОСН_ЮрЛицо И ПБУ18;
	ЭлементыФормы.РеглВалюта3.Видимость                              = ОСН_ЮрЛицо И ПБУ18;
	
	Если (ОСН_ЮрЛицо И ВключитьКапитальныеВложенияВРасходыНУ)
		ИЛИ (УСН И НЕ УСНДоходы) 
		ИЛИ ОСН_ФизЛицо Тогда
		ЭлементыФормы.ОсновнаяПанель.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	КонецЕсли;	
	
	ЭлементыФормы.ВключатьАПВСоставРасходовПриОтраженииМодернизации.Видимость = ОСН_ЮрЛицо И ВключитьКапитальныеВложенияВРасходыНУ
	                                                                          И НЕ ВключатьАПВСоставРасходовПриОтраженииМодернизации = Истина;
	
	ЭлементыФормы.НадписьРеквизитыДокументаОплаты.Видимость = ОСН_ФизЛицо;
	ЭлементыФормы.РеквизитыДокументаОплаты.Видимость = ОСН_ФизЛицо;
	
	Если ОСН_ЮрЛицо И НЕ УСН Тогда
		ЭлементыФормы.ПанельНУ.Свертка = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельНУ.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
	УстановитьВидимостьСубконто(СчетУчетаЗатратПоАмортизационнойПремии, "ПоАмортизационнойПремии", ОСН_ЮрЛицо И НЕ УСН И ВключитьКапитальныеВложенияВРасходыНУ);
	
КонецПроцедуры //УстановитьВидимость()

// Устанавливает видимость субконто счета.
//
Процедура УстановитьВидимостьСубконто(Счет, Суффикс, ВидимостьСчета)
	
	ВидыСубконтоСчета = Счет.ВидыСубконто;
	КоличествоСубконто = ВидыСубконтоСчета.Количество();
	
	Для НомерСубконто = 1 по 3 Цикл
		
		Если ВидимостьСчета И (НомерСубконто <= КоличествоСубконто) И (ЗначениеЗаполнено(Счет)) Тогда
			
			ЭлементыФормы["НадписьСубконто" + Суффикс + НомерСубконто].Заголовок = Строка(ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто) + ":";
			ЭлементыФормы["НадписьСубконто" + Суффикс + НомерСубконто].Видимость = Истина;
			ЭлементыФормы["Субконто" + Суффикс + НомерСубконто].Видимость        = Истина;
			
		Иначе
			
			ЭлементыФормы["НадписьСубконто" + Суффикс + НомерСубконто].Видимость = Ложь;
			ЭлементыФормы["Субконто" + Суффикс + НомерСубконто].Видимость        = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьСубконто()

// Заполнение реквизитов шапки документа значениями по умолчанию
//
Процедура ЗаполнитьДаннымиПоУмолчанию(ДокументОбъект)
	
	Если НЕ ЗначениеЗаполнено(СобытиеОС) Тогда
		СобытиеОС = УправлениеВнеоборотнымиАктивами.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.Модернизация);
	КонецЕсли;
	
	СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОбъектовСтроительства(Организация,ОбъектСтроительства);
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.СчетУчетаВнеоборотногоАктива) Тогда
		ДокументОбъект.СчетУчетаВнеоборотногоАктива = СчетаУчета.СчетУчета;
	КонецЕсли;
	
	ВключатьАПВСоставРасходовПриОтраженииМодернизации = Истина;
	
КонецПроцедуры

// Процедура заполняет соответствие выбранных в форме объектов ОС и их инвентарных номеров 
// по срезу последних на дату документа из регистра сведений "ПервоначальныеСведенияОСБухгалтерскийУчет"
// 
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОсновныеСредства или Массив
//
Процедура ЗаполнитьСоответствиеОС_ИнвентарныйНомер(ОсновноеСредство)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	 |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер
	 |ИЗ
	 |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СоответствиеОС_ИнвентарныйНомер.Вставить(Результат.ОсновноеСредство, Результат.ИнвентарныйНомер);
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет инвентарный номер по объекту ОС
// по соответствию СоответствиеОС_ИнвентарныйНомер
// 
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОсновныеСредства
//                     
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьСоответствиеОС_ИнвентарныйНомер(ОсновноеСредство);
	
	Если СоответствиеОС_ИнвентарныйНомер[ОсновноеСредство] = Неопределено Тогда
		ЗаполнитьСоответствиеОС_ИнвентарныйНомер(ОсновноеСредство);
	КонецЕсли;
	
	Возврат СоответствиеОС_ИнвентарныйНомер[ОсновноеСредство];
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	   	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,,ПараметрОбъектКопирования);
		ЗаполнитьДаннымиПоУмолчанию(ЭтотОбъект);
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	ЭлементыФормы.РеглВалюта.Заголовок  = ВалютаРегл;
	ЭлементыФормы.РеглВалюта1.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта2.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта3.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта8.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта9.Заголовок = ВалютаРегл;

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	Отказ = Ложь;
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, Организация);
	Если НЕ Отказ Тогда
		мВариантУчетаРасходовПоАмортизационнойПремии = ПараметрыУчетнойПолитики.ВариантУчетаРасходовПоАмортизационнойПремии;
	КонецЕсли;
	
	ВключитьКапитальныеВложенияВРасходыНУ = ПараметрыАмортизационнойПремииЗаполнены();
	
	// Установим видимость и доступность реквизитов
	УстановитьВидимость();

	// Установить активный реквизит.

	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Дата");
	СтруктураРеквизитов.Вставить("Организация");      
	СтруктураРеквизитов.Вставить("МестонахождениеОС");
	СтруктураРеквизитов.Вставить("Событие");
	СтруктураРеквизитов.Вставить("ОбъектСтроительства");
	
	// {ОбособленныеПодразделения
	СтруктураРеквизитов.Вставить("ПодразделениеОрганизации");
	// }ОбособленныеПодразделения 
	
	СтруктураРеквизитов.Вставить("СчетУчетаВнеоборотногоАктива");	
	
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.ОС);
	мТекущаяДатаДокумента = Дата;
	
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 

	// Заполнить соответствие объектов ОС и их инвентарных номеров
	ЗаполнитьСоответствиеОС_ИнвентарныйНомер(ОС.ВыгрузитьКолонку("ОсновноеСредство"));
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			СтрокаТабличнойЧасти = ОС.Найти(ЗначениеВыбора,"ОсновноеСредство");
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				Предупреждение("Это основное средство уже подобрано!",60);
			Иначе
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ЗначениеВыбора;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
             

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Для списка ОС" из меню "Заполнить"
// командной панели формы. Процедура выполняет заполнение колонок с данными 
// в табличной части по каждому выбранному основному средству.
//
Процедура КоманднаяПанельОСЗаполнитьДляСписка(Кнопка)

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе" , 60,);
		Возврат;
	КонецЕсли;

	Если Вопрос("При заполнении существующие данные будут пересчитаны! Продолжить?", 
		РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не выбрана организация", 60);
		Возврат;
	КонецЕсли;

	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	ТаблицаАмортизацииБух = Новый ТаблицаЗначений();
	ТаблицаАмортизацииНал = Новый ТаблицаЗначений();

	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокОС",    СписокОС);
	Запрос.УстановитьПараметр("Период",   	 Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета КАК СчетУчета,
	|" + ?(ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "БАУКОРП", "СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияИзноса КАК СчетНачисленияИзноса,", "") + "	
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СуммаНУОстатокДт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СуммаПРОстатокДт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СуммаВРОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокКт КАК СуммаВРОстатокКт
	|ПОМЕСТИТЬ ХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|";
	
	Если ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "БАУКОРП" Тогда
		Запрос.Текст = Запрос.Текст +
	"
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияИзноса
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"
	|				ОБЪЕДИНИТЬ
	|			
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В (&СписокОС)) КАК ХозрасчетныйОстатки
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
	|	ЕСТЬNULL(СтоимостьОС.СуммаОстатокДт, 0) КАК СтоимостьБУ,
	|	ЕСТЬNULL(АмортизацияОС.СуммаОстатокКт, 0) КАК АмортизацияБУ,
	|	ЕСТЬNULL(СтоимостьОС.СуммаНУОстатокДт, 0) КАК СтоимостьНУ,
	|	ЕСТЬNULL(АмортизацияОС.СуммаНУОстатокКт, 0) КАК АмортизацияНУ,
	|	ЕСТЬNULL(СтоимостьОС.СуммаПРОстатокДт, 0) КАК СтоимостьПР,
	|	ЕСТЬNULL(АмортизацияОС.СуммаПРОстатокКт, 0) КАК АмортизацияПР,
	|	ЕСТЬNULL(СтоимостьОС.СуммаВРОстатокДт, 0) КАК СтоимостьВР,
	|	ЕСТЬNULL(АмортизацияОС.СуммаВРОстатокКт, 0) КАК АмортизацияВР,
	|	ЕСТЬNULL(ИзносОС.СуммаОстатокДт, 0) КАК Износ,
	|	ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0) КАК Количество,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользованияБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот, 0) КАК ОбъемПродукцииРаботБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК КоэффициентАмортизацииБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскоренияБУ,
	|	СостоянияОСОрганизаций.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользованияНУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.КоэффициентАмортизации, 0) КАК КоэффициентАмортизацииНУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(, &Период, , ОсновноеСредство В (&СписокОС)) КАК ВыработкаОСОбороты
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство
	|			И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки = ВыработкаОСОбороты.ПараметрВыработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК СтоимостьОС
	|			ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|				И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета = СтоимостьОС.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК АмортизацияОС
	|			ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = АмортизацияОС.ОсновноеСредство
	|				И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации = АмортизацияОС.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК ИзносОС
	|			ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = ИзносОС.ОсновноеСредство
	|				И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисления" + ?(ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "БАУКОРП", "Износа", "Амортизации") + " = ИзносОС.Счет
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|			СостоянияОСОрганизаций.ДатаСостояния КАК ДатаВводаВЭксплуатацию
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ГДЕ
	|			СостоянияОСОрганизаций.ОсновноеСредство В(&СписокОС)
	|			И СостоянияОСОрганизаций.Организация = &Организация
	|			И СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)) КАК СостоянияОСОрганизаций
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство";
	ТаблицаТекущиеПараметрыАмортизацииБУ = Запрос.Выполнить().Выгрузить();
	ТаблицаТекущиеПараметрыАмортизацииБУ.Индексы.Добавить("ОсновноеСредство");
	
	// {УчетДоходовИРасходовИП
	Если ОСН_ФизЛицо Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	ЕСТЬNULL(ИПМПЗОстатки.СуммаОстаток, 0) КАК СтоимостьНУ,
		|	ЕСТЬNULL(ПараметрыАмортизацииНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользованияНУ,
		|	ЕСТЬNULL(ПараметрыАмортизацииНалоговыйУчетСрезПоследних.КоэффициентАмортизации, 0) КАК КоэффициентАмортизацииНУ
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&Период, ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииНалоговыйУчетСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИПМПЗ.Остатки(
		|					&Период,
		|					Организация = &Организация
		|						И Номенклатура В (&СписокОС)
		|						И (НЕ ДокументОплаты ЕСТЬ NULL )) КАК ИПМПЗОстатки
		|			ПО ПараметрыАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = ИПМПЗОстатки.Номенклатура
		|		ПО ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство";
		
	КонецЕсли;
	// }УчетДоходовИРасходовИП

	ТаблицаТекущиеПараметрыАмортизацииНУ = Запрос.Выполнить().Выгрузить();
	ТаблицаТекущиеПараметрыАмортизацииНУ.Индексы.Добавить("ОсновноеСредство");

	ТаблицаАмортизацииБух = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииОС(Дата, Организация, СписокОС,,, ОСН_ЮрЛицо);
	ТаблицаАмортизацииБух.Индексы.Добавить("ОсновноеСредство");

	Для Каждого Строка Из ОС Цикл

		ТекущиеПараметрыАмортизацииБУ = ТаблицаТекущиеПараметрыАмортизацииБУ.Найти(Строка.ОсновноеСредство, "ОсновноеСредство");

		Если ТекущиеПараметрыАмортизацииБУ = Неопределено Тогда

			Строка.СрокПолезногоИспользованияБУ = 0;
			Строка.ФактСрокИспользованияБУ      = 0;
			Строка.ОбъемПродукцииРаботБУ        = 0;
			Строка.ФактОбъемПродукцииРаботБУ    = 0;
			Строка.СтоимостьБУ                  = 0;
			Строка.СуммаМодернизацииБУ          = 0;
			Строка.АмортизацияБУ                = 0;
			Строка.АмортизацияЗаМесяцБУ         = 0;
			Строка.КоэффициентАмортизацииБУ     = 0;
			Строка.КоэффициентУскоренияБУ       = 0;
			Строка.КоэффициентАмортизацииНУ     = 0;
			Строка.СрокПолезногоИспользованияНУ = 0;
			Строка.СтоимостьНУ                  = 0;
			Строка.СтоимостьПР                  = 0;
			Строка.АмортизацияПР                = 0;
			Строка.СуммаМодернизацииНУ          = 0;
			Строка.СуммаМодернизацииПР          = 0;
			Строка.СуммаМодернизацииВР          = 0;

		Иначе

			Строка.СрокПолезногоИспользованияБУ = ТекущиеПараметрыАмортизацииБУ.СрокПолезногоИспользованияБУ;
			Строка.ФактСрокИспользованияБУ      = ?(ТекущиеПараметрыАмортизацииБУ.ДатаВводаВЭксплуатацию = NULL,
			                                        0,
			                                        УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ТекущиеПараметрыАмортизацииБУ.ДатаВводаВЭксплуатацию, Дата));

			Строка.ОбъемПродукцииРаботБУ        = ТекущиеПараметрыАмортизацииБУ.ОбъемПродукцииРаботБУ;
			Строка.ФактОбъемПродукцииРаботБУ    = ТекущиеПараметрыАмортизацииБУ.Количество;
			Строка.СтоимостьБУ                  = ТекущиеПараметрыАмортизацииБУ.СтоимостьБУ;
			Строка.СуммаМодернизацииБУ          = ?(ОС.Количество() <> 0, СтоимостьБУ / ОС.Количество(), 0);
			
			Строка.СуммаМодернизацииУСН         = ?(ОС.Количество() <> 0, СтоимостьУСН / ОС.Количество(), 0);
			
			Строка.АмортизацияБУ                = ?(ТекущиеПараметрыАмортизацииБУ.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ
			                                        ИЛИ ТекущиеПараметрыАмортизацииБУ.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса,
			                                        ТекущиеПараметрыАмортизацииБУ.Износ,
			                                        ТекущиеПараметрыАмортизацииБУ.АмортизацияБУ);
			СтрокаТаблицаАмортизацииБух         = ТаблицаАмортизацииБух.Найти(Строка.ОсновноеСредство, "ОсновноеСредство");
			Строка.АмортизацияЗаМесяцБУ         = ?(СтрокаТаблицаАмортизацииБух = Неопределено, 0, СтрокаТаблицаАмортизацииБух.СуммаАмортизации);
			Строка.КоэффициентАмортизацииБУ     = ТекущиеПараметрыАмортизацииБУ.КоэффициентАмортизацииБУ;
			Строка.КоэффициентУскоренияБУ       = ТекущиеПараметрыАмортизацииБУ.КоэффициентУскоренияБУ;
			
			Строка.КоэффициентАмортизацииНУ     = ТекущиеПараметрыАмортизацииБУ.КоэффициентАмортизацииНУ;
			Строка.СрокПолезногоИспользованияНУ = ТекущиеПараметрыАмортизацииБУ.СрокПолезногоИспользованияНУ;
			Строка.СтоимостьНУ                  = ТекущиеПараметрыАмортизацииБУ.СтоимостьНУ;
			Строка.СтоимостьПР                  = ТекущиеПараметрыАмортизацииБУ.СтоимостьПР;
			Строка.АмортизацияПР                  = ТекущиеПараметрыАмортизацииБУ.АмортизацияПР;   
			Строка.СуммаМодернизацииНУ          = ?(ОС.Количество() <> 0, СтоимостьНУ / ОС.Количество(), 0);
			Строка.СуммаМодернизацииПР          = ?(ОС.Количество() <> 0, СтоимостьПР / ОС.Количество(), 0);
			Строка.СуммаМодернизацииВР          = ?(ОС.Количество() <> 0, СтоимостьВР / ОС.Количество(), 0);
			
		КонецЕсли;
		
		Если ОСН_ФизЛицо Тогда
		
			ТекущиеПараметрыАмортизацииНУ = ТаблицаТекущиеПараметрыАмортизацииНУ.Найти(Строка.ОсновноеСредство, "ОсновноеСредство");

			Если ТекущиеПараметрыАмортизацииНУ = Неопределено Тогда

				Строка.КоэффициентАмортизацииНУ     = 0;
				Строка.СрокПолезногоИспользованияНУ = 0;
				Строка.СтоимостьНУ                  = 0;
				Строка.СтоимостьПР                  = 0;
				Строка.АмортизацияПР                = 0;
				Строка.СуммаМодернизацииНУ          = 0;
				Строка.СуммаМодернизацииПР          = 0;
				Строка.СуммаМодернизацииВР          = 0;

			Иначе
			
				Строка.КоэффициентАмортизацииНУ     = ТекущиеПараметрыАмортизацииНУ.КоэффициентАмортизацииНУ;
				Строка.СрокПолезногоИспользованияНУ = ТекущиеПараметрыАмортизацииНУ.СрокПолезногоИспользованияНУ;
				Строка.СтоимостьНУ                  = ТекущиеПараметрыАмортизацииНУ.СтоимостьНУ;
				Строка.СтоимостьПР                  = 0;
				Строка.АмортизацияПР                = 0;   
				Строка.СуммаМодернизацииНУ          = ?(ОС.Количество() <> 0, СтоимостьНУ / ОС.Количество(), 0);
				Строка.СуммаМодернизацииПР          = 0;
				Строка.СуммаМодернизацииВР          = 0;

			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // КоманднаяПанельОСЗаполнитьДляСписка()

// Процедура вызывается при выборе пункта подменю "По наименованию" из меню "Заполнить"
// командной панели формы. Процедура добавляет в табличную часть основные средства,
// наименование которых совпадает с наименованием текущего выбранного в табличной части ОС
//
Процедура КоманднаяПанельОСЗаполнитьПоНаименованию(Кнопка)
	
	Если ЭлементыФормы.ОС.ТекущаяСтрока = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредство = ЭлементыФормы.ОС.ТекущиеДанные.ОсновноеСредство;
	
	Если ОсновноеСредство = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредствоНаименование = Строка(ОсновноеСредство);
	
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("СписокОС",     СписокОС);
	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.Код КАК ОсновноеСредствоКод
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И ОсновныеСредства.Ссылка НЕ В (&СписокОС)
	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ";
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОС.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Другие элементы справочника с наименованием <" + ОсновноеСредствоНаименование + "> в справочнике ""Основные средства"" отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаОС.Следующий() Цикл
		НоваяСтрока = ОС.Добавить();
		НоваяСтрока.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура вызывается при нажании кнопки Подбор командной панели "КоманднаяПанельОС"
//
Процедура КоманднаяПанельОСПодбор(Кнопка)
	ФормаВыбора = Справочники.ОсновныеСредства.ПолучитьФормуВыбора(, ЭтаФорма);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	Отказ = Ложь;
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, Организация);
	Если НЕ Отказ Тогда
		мВариантУчетаРасходовПоАмортизационнойПремии = ПараметрыУчетнойПолитики.ВариантУчетаРасходовПоАмортизационнойПремии;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	Отказ = Ложь;
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, Организация);
	Если НЕ Отказ Тогда
		мВариантУчетаРасходовПоАмортизационнойПремии = ПараметрыУчетнойПолитики.ВариантУчетаРасходовПоАмортизационнойПремии;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ОбъектСтроительства 
//
Процедура ОбъектСтроительстваПриИзменении(Элемент)

	СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОбъектовСтроительства(Организация,ОбъектСтроительства);
	СчетУчетаВнеоборотногоАктива = СчетаУчета.СчетУчета;

КонецПроцедуры
 
// Процедура - обработчик события "ОбработкаВыбора" поля СчетУчетаВнеоборотногоАктива 
//
Процедура СчетУчетаВнеоборотногоАктиваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки РассчитатьСтоимость
//
Процедура РассчитатьСтоимостьНажатие(Элемент)

	Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе.", 60);
		Возврат;
	КонецЕсли;

	Если ОбъектСтроительства.Пустая() Тогда
		Предупреждение("Не выбран объект строительства", 60);
		Возврат;
	КонецЕсли;

	Если Организация.Пустая() Тогда
		Предупреждение("Не выбрана организация", 60);
		Возврат;
	КонецЕсли;

	Если СчетУчетаВнеоборотногоАктива.Пустая() Тогда
		Предупреждение("Не выбран счет бухгалтерского учета объекта строительства", 60);
		Возврат;
	КонецЕсли;
	
	// {ОбособленныеПодразделения
	Подразделение = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 

	СтруктураСтоимости = УправлениеВнеоборотнымиАктивами.РассчитатьСтоимостьОбъектаСтроительства(Организация,
	                                                                                             Подразделение,
	                                                                                             Новый Граница(КонецМесяца(Дата)), 
	                                                                                             СчетУчетаВнеоборотногоАктива,
	                                                                                             ОбъектСтроительства);

	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураСтоимости);
	
	СтоимостьУСН = СтруктураСтоимости.СтоимостьБУ;

	УстановитьВидимость();

КонецПроцедуры // РассчитатьСтоимостьНажатие()

// Процедура - обработчик события "НачалоВыбора" поля СобытиеОС 
//
 Процедура СобытиеОСНачалоВыбора(Элемент, СтандартнаяОбработка)
	ВидыСобытий = Новый СписокЗначений;
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Достройка);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);

	УправлениеВнеоборотнымиАктивами.НачалоВыбораЗначенияСобытийОС(Элемент, ВидыСобытий, СтандартнаяОбработка);
КонецПроцедуры

// Обработчик события "ОбработкаВыбора" поля "Счет учета затрат по амортизационной
// премии (НУ)".
//
Процедура СчетУчетаЗатратПоАмортизационнойПремииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СчетУчетаЗатратПоАмортизационнойПремииОбработкаВыбора()

// Обработчик события "ПриИзменении" поля "Счет учета затрат по амортизационной
// премии (НУ)".
//
Процедура СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		СубконтоПоАмортизационнойПремии1, ЭлементыФормы.СубконтоПоАмортизационнойПремии1,
		СубконтоПоАмортизационнойПремии2, ЭлементыФормы.СубконтоПоАмортизационнойПремии2,
		СубконтоПоАмортизационнойПремии3, ЭлементыФормы.СубконтоПоАмортизационнойПремии3);
								 
	УстановитьВидимость();														
															
КонецПроцедуры // СчетУчетаЗатратПоАмортизационнойПремииПриИзменении()

// Обработчик события "НачалоВыбора" поля ввода Субконто.
//
Процедура СубконтоНачалоВыбора(Элемент, СтандартнаяОбработка)

	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация);

КонецПроцедуры // СубконтоНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Оборудование". Формирует данные в колонке "Инв. номер".
//
Процедура ОСПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ОС.Колонки.ИнвентарныйНомер.Видимость Тогда
		ОформлениеСтроки.Ячейки.ИнвентарныйНомер.УстановитьТекст(ПолучитьСоответствиеОС_ИнвентарныйНомер(ДанныеСтроки.ОсновноеСредство));
	КонецЕсли;
	
	Если ЭлементыФормы.ОС.Колонки.ОстСтоимостьБУ.Видимость Тогда
		ОформлениеСтроки.Ячейки.ОстСтоимостьБУ.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.СтоимостьБУ + ДанныеСтроки.СуммаМодернизацииБУ - ДанныеСтроки.АмортизацияБУ - ДанныеСтроки.АмортизацияЗаМесяцБУ));
	КонецЕсли;
	
	Если ЭлементыФормы.ОС.Колонки.ОстСрокИспользованияБУ.Видимость Тогда
		ОформлениеСтроки.Ячейки.ОстСрокИспользованияБУ.УстановитьТекст(ДанныеСтроки.СрокПолезногоИспользованияБУ - ДанныеСтроки.ФактСрокИспользованияБУ);
	КонецЕсли;
	
	Если ЭлементыФормы.ОС.Колонки.ОстОбъемПродукцииРаботБУ.Видимость Тогда
		ОформлениеСтроки.Ячейки.ОстОбъемПродукцииРаботБУ.УстановитьТекст(СокрЛ(Формат(ДанныеСтроки.ОбъемПродукцииРаботБУ - ДанныеСтроки.ФактОбъемПродукцииРаботБУ, "ЧЦ=15;ЧДЦ=2")));
	КонецЕсли;

	Если ЭлементыФормы.ОС.Колонки.ОбщаяСуммаНУ.Видимость Тогда
		ОформлениеСтроки.Ячейки.ОбщаяСуммаНУ.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.СтоимостьНУ + ДанныеСтроки.СуммаМодернизацииНУ));
	КонецЕсли;

КонецПроцедуры // ОСПриВыводеСтроки()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "Включить капитальные
// вложения в состав расходов по п. 1.1 ст. 259 НК РФ (НУ)"
//
Процедура ВключитьКапитальныеВложенияВРасходыНУПриИзменении(Элемент)
	
	Если НЕ ВключитьКапитальныеВложенияВРасходыНУ Тогда
	
		Если ПараметрыАмортизационнойПремииЗаполнены() Тогда
			
			ТекстВопроса =
			"Установленные параметры амортизационной премии будут очищены.
			|Продолжить?";
			
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
				
				Для Каждого СтрокаОС Из ОС Цикл
					СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = 0;					
				КонецЦикла;
				СчетУчетаЗатратПоАмортизационнойПремии          = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				СубконтоПоАмортизационнойПремии1                = Неопределено;
				СубконтоПоАмортизационнойПремии2                = Неопределено;
				СубконтоПоАмортизационнойПремии3                = Неопределено;
				ПодразделениеОрганизацииПоАмортизационнойПремии = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				
			Иначе
				
				ВключитьКапитальныеВложенияВРасходыНУ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ОС.Количество() > 0 Тогда
			
			Если НЕ ОС[0].ОсновноеСредство = Справочники.ОсновныеСредства.ПустаяСсылка() Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Период",           Дата);
				Запрос.УстановитьПараметр("Организация",      Организация);
				Запрос.УстановитьПараметр("ОсновноеСредство", ОС[0].ОсновноеСредство);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации
				|ИЗ
				|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
				|		&Период,
				|		Организация = &Организация
				|			И ОсновноеСредство = &ОсновноеСредство) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
				|";
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					СпособОтраженияРасходовПоАмортизации = Выборка.СпособОтраженияРасходовПоАмортизации;
				Иначе
					СпособОтраженияРасходовПоАмортизации = Неопределено;
				КонецЕсли;
			
				Запрос = Новый Запрос();
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СтатьиЗатрат.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
				|ГДЕ
				|	СтатьиЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.АмортизационнаяПремия)
				|
				|УПОРЯДОЧИТЬ ПО
				|	СтатьиЗатрат.Код
				|";
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					СтатьяЗатратАмортизационнаяПремия = Выборка.Ссылка;
				Иначе
					СтатьяЗатратАмортизационнаяПремия = Неопределено;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Ссылка",                            СпособОтраженияРасходовПоАмортизации);
				Запрос.УстановитьПараметр("СтатьяЗатратАмортизационнаяПремия", СтатьяЗатратАмортизационнаяПремия);
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатрат КАК СчетЗатрат,
				|	СпособыОтраженияРасходовПоАмортизацииСпособы.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
				|	ВЫБОР
				|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
				|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
				|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1
				|	КОНЕЦ КАК Субконто1,
				|	ВЫБОР
				|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
				|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
				|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2
				|	КОНЕЦ КАК Субконто2,
				|	ВЫБОР
				|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
				|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
				|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3
				|	КОНЕЦ КАК Субконто3
				|ИЗ
				|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
				|ГДЕ
				|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка = &Ссылка
				|
				|УПОРЯДОЧИТЬ ПО
				|	СпособыОтраженияРасходовПоАмортизацииСпособы.НомерСтроки";
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					
					СпособОтраженияРаcходов = РезультатЗапроса.Выбрать();
					СпособОтраженияРаcходов.Следующий();
					
					СчетУчетаЗатратПоАмортизационнойПремии = СпособОтраженияРаcходов.СчетЗатрат;
					
					СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(ЭлементыФормы.СчетУчетаЗатратПоАмортизационнойПремии);
					
					ПодразделениеОрганизацииПоАмортизационнойПремии = СпособОтраженияРаcходов.ПодразделениеОрганизации;
					
					Если ЗначениеЗаполнено(СпособОтраженияРаcходов.Субконто1) Тогда
						СубконтоПоАмортизационнойПремии1 = СпособОтраженияРаcходов.Субконто1;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СпособОтраженияРаcходов.Субконто2) Тогда
						СубконтоПоАмортизационнойПремии2 = СпособОтраженияРаcходов.Субконто2;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СпособОтраженияРаcходов.Субконто3) Тогда
						СубконтоПоАмортизационнойПремии3 = СпособОтраженияРаcходов.Субконто3;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ВключитьКапитальныеВложенияВРасходыНУПриИзменении()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// {ОбособленныеПодразделения

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()

// }ОбособленныеПодразделения 

СоответствиеОС_ИнвентарныйНомер = Новый Соответствие();

