////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;

Перем мОрганизацияЭтоЮрЛицо;
Перем мСписокВыбораОКАТОиКПП;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровТайпинга()

	СтруктураПараметров = Новый Структура("ГоловнаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поле ввода "КонтактныйТелефонОтветственного" по ответственному
//
// Параметры
//  <ПараметрОтветственный>  – СправочникСсылка.Пользователи – пользователь, телефон которого
//                 запишем в соответствующее поле.
//
Процедура ЗаполнитьТелефонОтветственного(ПараметрОтветственный)
	
	// номер телефона организации.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект",	ПараметрОтветственный);
	Запрос.УстановитьПараметр("Тип",	Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ПустаяДата",	'00010101');
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект И
	|	КонтактнаяИнформация.Тип = &Тип";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		КонтактныйТелефонОтветственного = Выборка.Представление
	Иначе
		КонтактныйТелефонОтветственного = "";
	КонецЕсли;
	
	Если Не ЭлементыФормы.ДолжностьОтветственного.ТолькоПросмотр Тогда
		Запрос.УстановитьПараметр("ФизЛицо", ПараметрОтветственный.ФизЛицо);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизацийСрезПоследних.Должность КАК Должность
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|		,
		|		Организация = &Организация
		|			И Сотрудник.Физлицо = &Физлицо) КАК РаботникиОрганизацийСрезПоследних";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДолжностьОтветственного = Выборка.Должность
		Иначе
			ДолжностьОтветственного = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТелефонОтветственного()

Процедура ВидимостьКнопкиШифрованиеИОтправкаВИФНС()
	
	ОбъектКнопка = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Найти("КнопкаШифрованиеИОтправка");
	
	Если ОбъектКнопка <> Неопределено И Организация.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменЧерезСпринтер Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Индекс(
															ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Найти("РазделительШифрованиеИОтправка")));
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Индекс(ОбъектКнопка));
	ИначеЕсли ОбъектКнопка = Неопределено И Организация.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменЧерезСпринтер Тогда
		РазделительШифрованиеИОтправка = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Добавить("РазделительШифрованиеИОтправка", ТипКнопкиКоманднойПанели.Разделитель);
		КнопкаШифрованиеИОтправка = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Добавить("КнопкаШифрованиеИОтправка", ТипКнопкиКоманднойПанели.Действие, 
															"Зашифровать и отправить в ИФНС", Новый Действие("ОсновныеДействияФормыКнопкаШифрованиеИОтправка"));
		КнопкаШифрованиеИОтправка.Пояснение = "";
		КнопкаШифрованиеИОтправка.Подсказка = "";
		Смещение = -ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Индекс(КнопкаШифрованиеИОтправка);
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Сдвинуть(РазделительШифрованиеИОтправка, Смещение);
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Сдвинуть(КнопкаШифрованиеИОтправка, Смещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидимостьПолейСправки()

	ДляПередачиВИФНС = НазначениеСправки = Перечисления.ПорядокФормированияСправкиОДоходахФизлица.ДляПередачиВИФНС;
	ЭтоЮрЛицо = Организация.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо;
	
	ЭлементыФормы.РаботникиОрганизации.Колонки.ПереданоНаВзыскание.Видимость = ДляПередачиВИФНС;
	ЭлементыФормы.РаботникиОрганизации.Колонки.ПереданоНаВзыскание.ИзменятьНастройку = ДляПередачиВИФНС;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Файл.Доступность = ДляПередачиВИФНС;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.НаДискетку.Доступность = ДляПередачиВИФНС;

	ЭтоПодробныеСправки = НазначениеСправки <> Перечисления.ПорядокФормированияСправкиОДоходахФизлица.ФизлицуСводно;
	ЭлементыФормы.РаботникиОрганизации.Колонки.Ставка.Видимость = ЭтоПодробныеСправки;
	ЭлементыФормы.РаботникиОрганизации.Колонки.Ставка.ИзменятьНастройку = ЭтоПодробныеСправки;
	ЭлементыФормы.РаботникиОрганизации.Колонки.КодПоОКАТО.Видимость = ЭтоПодробныеСправки и ЭтоЮрЛицо;
	ЭлементыФормы.РаботникиОрганизации.Колонки.КодПоОКАТО.ИзменятьНастройку = ЭтоПодробныеСправки и ЭтоЮрЛицо;
	ЭлементыФормы.РаботникиОрганизации.Колонки.КПП.Видимость = ЭтоПодробныеСправки и ЭтоЮрЛицо;
	ЭлементыФормы.РаботникиОрганизации.Колонки.КПП.ИзменятьНастройку = ЭтоПодробныеСправки и ЭтоЮрЛицо;

	ЭлементыФормы.ДолжностьОтветственного.АвтоОтметкаНезаполненного = ЭтоЮрЛицо;
	ЭлементыФормы.ДолжностьОтветственного.ОтметкаНезаполненного = ЭтоЮрЛицо И ДолжностьОтветственного.Пустая();	
	ЭлементыФормы.ДолжностьОтветственного.ТолькоПросмотр = Не ЭтоЮрЛицо;

	ЭлементыФормы.ПереключательФизлицуВРазрезеКодовОКАТО.Заголовок = "выдачи на руки работникам для декларирования " + 
					?(ЭтоЮрЛицо,"(в разрезе ставок и кодов по ОКАТО)","(в разрезе ставок)");
					
	ЭУКодаПоОКАТО = ЭлементыФормы.РаботникиОрганизации.Колонки.КодПоОКАТО.ЭлементУправления;				
	ЭУКодаПоОКАТО.КнопкаВыбора = ЭтоЮрЛицо;
	Если ЭтоПодробныеСправки и ЭтоЮрЛицо Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ПустаяОрганизация",Справочники.Организации.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойКодПоОКАТО","");
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Наименование + "": "" + Организации.КодПоОКАТО + "", "" + Организации.КПП КАК Представление,
		|	Организации.КодПоОКАТО,
		|	Организации.КПП,
		|	ВЫБОР
		|		КОГДА Организации.ГоловнаяОрганизация = &ПустаяОрганизация
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Организации.ГоловнаяОрганизация = &ПустаяОрганизация
		|				ТОГДА Организации.Ссылка
		|			ИНАЧЕ Организации.ГоловнаяОрганизация
		|		КОНЕЦ = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Владелец.Наименование + "", "" + ПодразделенияОрганизаций.Наименование + "": "" + ПодразделенияОрганизаций.КодПоОКАТО + "", "" + ПодразделенияОрганизаций.КПП,
		|	ПодразделенияОрганизаций.КодПоОКАТО,
		|	ПодразделенияОрганизаций.КПП,
		|	ВЫБОР
		|		КОГДА ПодразделенияОрганизаций.Владелец.ГоловнаяОрганизация = &ПустаяОрганизация
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ПодразделенияОрганизаций.Владелец.ГоловнаяОрганизация = &ПустаяОрганизация
		|				ТОГДА ПодразделенияОрганизаций.Владелец
		|			ИНАЧЕ ПодразделенияОрганизаций.Владелец.ГоловнаяОрганизация
		|		КОНЕЦ = &Организация
		|	И ПодразделенияОрганизаций.КодПоОКАТО <> &ПустойКодПоОКАТО
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";

		НаборыДанных = Запрос.Выполнить().Выгрузить(); 
		
		// Если не нашли данных - ничего не делаем
		Если НаборыДанных.Количество() = 0 Тогда
			ЭУКодаПоОКАТО.КнопкаВыбора = Ложь;
			мСписокВыбораОКАТОиКПП = Новый СписокЗначений;
		Иначе
			
			МаксимальнаяДлина = 40;
			мСписокВыбораОКАТОиКПП = Новый СписокЗначений;
			Для Каждого СтрокаЗапроса Из НаборыДанных Цикл
				МаксимальнаяДлина = Макс(МаксимальнаяДлина,СтрДлина(СтрокаЗапроса.Представление));
				мСписокВыбораОКАТОиКПП.Добавить(СтрокаЗапроса, СтрокаЗапроса.Представление);
			КонецЦикла;
			
			ЭУКодаПоОКАТО.ШиринаСпискаВыбора = МаксимальнаяДлина;
			
		КонецЕсли; 

	Иначе 	
		мСписокВыбораОКАТОиКПП = Новый СписокЗначений;
	КонецЕсли;				
	
КонецПроцедуры

Процедура ОпределитьДействующиеСтавкиНалога(НалоговыйПериод)
	
	Если НалоговыйПериод > 2007 Тогда
		ЭлементыФормы.РаботникиОрганизации.Колонки.Ставка.ЭлементУправления.ДоступныеЗначения.Очистить();
	Иначе
		СписокСтавок = Новый СписокЗначений;
		СписокСтавок.Добавить(Перечисления.НДФЛСтавки.Ставка09);
		СписокСтавок.Добавить(Перечисления.НДФЛСтавки.Ставка13);
		СписокСтавок.Добавить(Перечисления.НДФЛСтавки.Ставка30);
		СписокСтавок.Добавить(Перечисления.НДФЛСтавки.Ставка35);
		ЭлементыФормы.РаботникиОрганизации.Колонки.Ставка.ЭлементУправления.ДоступныеЗначения = СписокСтавок;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	//Проверка источника кадровой информации
	ПроцедурыУправленияПерсоналом.УчетЗарплатыИКадровВоВнешнейПрограмме(Отказ, Ссылка, ЭтаФорма, ЭтоНовый());
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		ИдентификаторФайла = Новый УникальныйИдентификатор();
		
		Если НалоговыйПериод = 0 Тогда 
			НалоговыйПериод = 2009;
			Если Не Организация.ГоловнаяОрганизация.Пустая() Тогда
				Организация = Организация.ГоловнаяОрганизация;
			КонецЕсли;
			НазначениеСправки = Перечисления.ПорядокФормированияСправкиОДоходахФизлица.ДляПередачиВИФНС;
			ЗаполнитьТелефонОтветственного(Ответственный);
		КонецЕсли;
		
	ИначеЕсли Не Проведен тогда
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	Иначе
		
		ТолькоПросмотр = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Закрыть.КнопкаПоУмолчанию = Истина;
		ЭлементыФормы.РаботникиОрганизации.Колонки.КодПоОКАТО.АвтоОтметкаНезаполненного = Ложь;
		ЭлементыФормы.РаботникиОрганизации.Колонки.КПП.АвтоОтметкаНезаполненного = Ложь;
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ФизЛицо");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,Ответственный,НалоговыйПериод");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов);

	Если ПеречисленоНДФЛПоФизлицам.Количество() + ПеречисленоНДФЛВсего.Количество() = 0 Тогда
		ЭлементыФормы.ПанельСправки.Страницы.Удалить(ЭлементыФормы.ПанельСправки.Страницы.Индекс(ЭлементыФормы.ПанельСправки.Страницы.ПеречисленоНДФЛ))
	КонецЕсли;
	
	ВидимостьКнопкиШифрованиеИОтправкаВИФНС();
	ВидимостьПолейСправки();
	ОпределитьДействующиеСтавкиНалога(НалоговыйПериод);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
				
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры //ПриЗакрытии

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	Если Проведен Тогда
	
		ТолькоПросмотр = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Закрыть.КнопкаПоУмолчанию = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// заполняет табличную часть "РаботникиОрганизации"
Процедура КоманднаяПанельРаботникиОрганизацииДействиеЗаполнить(Кнопка)

	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить(РаботникиОрганизации);
	ТекстВопроса1 = "Автоматически заполнить документ можно только после его записи. Продолжить?";
	ТекстВопроса2 = "Существующий список справок о доходах будет очищен. Продолжить?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
		Возврат;
	КонецЕсли;
	
	Автозаполнение();
	
	Если РаботникиОрганизации.Количество() = 0 Тогда
	
		Сообщить("Не обнаружены данные для записи в документ.", СтатусСообщения.Важное )
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, мГоловнаяОрганизация);

КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииДействиеПронумеровать(Кнопка)
	Если НЕ РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "Перенумеровать справки можно только после записи документа. Продолжить?") Тогда
		Возврат;
	КонецЕсли;
	ПронумероватьСправки();
КонецПроцедуры

// формирует файл сведений
//
Процедура ОсновныеДействияФормыФайл(Кнопка)
	
	Если Не Проведен И НалоговыйПериод > 2009 Тогда
		ВывестиСообщениеОбУстареванииДокумента();
		Возврат;
	КонецЕсли;

	ПроцедурыПерсонифицированногоУчета.ПоказатьФайлДокумента(ЭтотОбъект,"Файл сведений о доходах физлиц по форме 2-НДФЛ");
	                
КонецПроцедуры      

// копирует файл-пачку в указанное пользователем место
Процедура ОсновныеДействияФормыНаДискетку(Кнопка)
	
	Вопрос = "Перед формированием файла необходимо записать документ. Записать?";
	Если НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,Вопрос) тогда
		Возврат;
	КонецЕсли;	 

	Если Не Проведен И НалоговыйПериод > 2009 Тогда
		ВывестиСообщениеОбУстареванииДокумента();
		Возврат;
	КонецЕсли;

	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ЭтотОбъект,ЕстьОшибки);
	Если ЕстьОшибки тогда
		Возврат;
	КонецЕсли;

	Дерево2НДФЛ = ПроцедурыПерсонифицированногоУчета.ПреобразоватьВДеревоXML(ТекстФайла);
	Если Дерево2НДФЛ = Неопределено Тогда
		Возврат 
	КонецЕсли;
	
	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Длг.Каталог = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнойКаталогФайлов");
	Длг.Заголовок = "Укажите каталог";
	
	Если Длг.Выбрать() Тогда
		
		ИмяФайла = Длг.Каталог+"\" + ПолучитьИмяФайла2НДФЛ(Дерево2НДФЛ);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстФайла); 
		ТекстовыйДокумент.Записать(ИмяФайла,КодировкаТекста.ANSI);
		Предупреждение("Файл обмена записан под именем: "+ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - действие кнопки КнопкаШифрованиеИОтправка командной панели ОсновныеДействияФормы.
// Процедура - действие назначается динамически с помощью объекта Действие из процедуры 
// ВидимостьКнопкиШифрованиеИОтправкаВИФНС().
//
Процедура ОсновныеДействияФормыКнопкаШифрованиеИОтправка(Кнопка)
	
	// Проверка реквизитов для интеграции с Такском
	Если Организация.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменЧерезСпринтер Тогда
		Предупреждение("В параметрах выбранной организации не включена возможность отправки отчетности через ПК ""Спринтер""!");
		Возврат;
	КонецЕсли;
	
	КодАбонента = Организация.ОбменКодАбонента;
	КаталогПрограммыЭлПочты = СокрЛП(Организация.ОбменКаталогПрограммыЭлектроннойПочты);
	КаталогОтправкиДанныхОтчетности = СокрЛП(Организация.ОбменКаталогОтправкиДанныхОтчетности);
	Если Прав(КаталогОтправкиДанныхОтчетности, 1) <> "\" Тогда
		КаталогОтправкиДанныхОтчетности = КаталогОтправкиДанныхОтчетности + "\";
	КонецЕсли;
	
	Если СтрДлина(КодАбонента) <> 7 Тогда 
		Предупреждение("Неверно задан логин абонента в параметрах интеграции с ПК ""Спринтер""!");
		Возврат;
	КонецЕсли;
	
	Файл1 = Новый Файл(КаталогПрограммыЭлПочты);
	Файл2 = Новый Файл(КаталогОтправкиДанныхОтчетности);
		
	Если ПустаяСтрока(КаталогПрограммыЭлПочты) ИЛИ НЕ Файл1.Существует() Тогда
		Предупреждение("Неверно задан каталог программы электронной почты!");
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(КаталогОтправкиДанныхОтчетности) Тогда
		Предупреждение("Не задан каталог отправки данных отчетности!");
		Возврат;
	КонецЕсли;
	
	Если НЕ Файл2.Существует() Тогда
		Попытка
			СоздатьКаталог(КаталогОтправкиДанныхОтчетности);
		Исключение
			Предупреждение("Не удалось создать каталог отправки данных отчетности!");
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Файл4 = Новый Файл(КаталогПрограммыЭлПочты + "run_dipost.bat");
	
	Если НЕ Файл4.Существует() Тогда
		Предупреждение("В каталоге программы электронной почты не найден файл run_dipost.bat!");
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ЭтотОбъект,ЕстьОшибки);
	Если ЕстьОшибки тогда
		Возврат;
	КонецЕсли;

	Дерево2НДФЛ = ПроцедурыПерсонифицированногоУчета.ПреобразоватьВДеревоXML(ТекстФайла);
	Если Дерево2НДФЛ = Неопределено Тогда
		Возврат 
	КонецЕсли;
	
	ИмяФайла = КаталогОтправкиДанныхОтчетности + "\" + ПолучитьИмяФайла2НДФЛ(Дерево2НДФЛ);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстФайла); 
	ТекстовыйДокумент.Записать(ИмяФайла, КодировкаТекста.ANSI);
	
	Попытка
		ЗапуститьПриложение(КаталогПрограммыЭлПочты + "run_dipost.bat " + КаталогПрограммыЭлПочты + " " + Организация.ОбменКодАбонента + " -t", КаталогПрограммыЭлПочты);
		Предупреждение("Файлы успешно переданы в ПК ""Спринтер""!");
	Исключение
		Предупреждение("При запуске приложения для отправки отчетности произошла ошибка:" + Символы.ПС + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	ВидимостьКнопкиШифрованиеИОтправкаВИФНС();
	ВидимостьПолейСправки();
	Если ЭлементыФормы.ДолжностьОтветственного.ТолькоПросмотр Тогда
		ДолжностьОтветственного = ""
	КонецЕсли;
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = ПроцедурыУправленияПерсоналом.ПолучитьСписокГоловныхОрганизаций();
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		Если Не ПустаяСтрока(Номер) Тогда
			МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		КонецЕсли;
		ВидимостьКнопкиШифрованиеИОтправкаВИФНС();
		ВидимостьПолейСправки();
		Если ЭлементыФормы.ДолжностьОтветственного.ТолькоПросмотр Тогда
			ДолжностьОтветственного = ""
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), Тип("СправочникСсылка.Организации"));
	
КонецПроцедуры

Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), ЭтаФорма, Тип("СправочникСсылка.Организации"), мОбработкаТайпинга, мТекстТайпинга, мПоследнееЗначениеЭлементаТайпинга, Ложь);
	
КонецПроцедуры

Процедура НалоговыйПериодПриИзменении(Элемент)
	ОпределитьДействующиеСтавкиНалога(Элемент.Значение);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ответственного.
//
Процедура ОтветственныйПриИзменении(Элемент)
	
	ЗаполнитьТелефонОтветственного(Элемент.Значение);
	
КонецПроцедуры

//Процедура - обработчик события "ПриИзменении"переключателя
Процедура ПереключательДляПередачиВИФНСПриИзменении(Элемент)
	ВидимостьПолейСправки();
КонецПроцедуры

Процедура ОбновитьИдентификаторФайлаНажатие(Элемент)
	ИдентификаторФайла = Новый УникальныйИдентификатор()
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ
 
Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		Если мСписокВыбораОКАТОиКПП.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные,мСписокВыбораОКАТОиКПП[0].Значение,"КодПоОКАТО,КПП")
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
		
	Физлицо = ВыбранноеЗначение.Физлицо;
		
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("ФизЛицо", ФизЛицо)).Количество() = 0 Тогда
		СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
		СтрокаТабличнойЧасти.Физлицо = Физлицо;
		СтрокаТабличнойЧасти.Ставка = Перечисления.НДФЛСтавки.Ставка13;
		Если мСписокВыбораОКАТОиКПП.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,мСписокВыбораОКАТОиКПП[0].Значение,"КодПоОКАТО,КПП")
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура РаботникиОрганизацииКодПоОКАТОНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлементСписка = ВыбратьИзСписка(мСписокВыбораОКАТОиКПП,Элемент,мСписокВыбораОКАТОиКПП.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные,ЭлементСписка.Значение,"КодПоОКАТО,КПП")
	КонецЕсли;

КонецПроцедуры


// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ФОРМЫ

мОбработкаТайпинга = Ложь;
мТекстТайпинга = "";
мПоследнееЗначениеЭлементаТайпинга = Неопределено;



