////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет табличную часть документа данными из документа-основания.
//
Процедура ЗаполнитьТабличнуюЧастьПоДокументуОснованию(Ссылка) Экспорт
	
	ОС.Очистить();
	
	Для Каждого СтрокаОС ИЗ Ссылка.ОС Цикл
		
		НоваяСтрока = ОС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОС);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДокументуОснованию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация, ОрганизацияОтправитель, СчетРасчетов";

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	////Проверим на виды операций, которые не будут полностью отработаны в данном документе
	//Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету 
	// или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию 
	// или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию
	// или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача
	// или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание Тогда

	//	ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
	//	|не будут полноценно отражены данным документом (учетное состояние ОС не изменится)!",,Заголовок);

	//КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство, ИнвентарныйНомер, СчетУчета, ДатаПринятияКУчету, ПорядокПогашенияСтоимости";
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.ОС Цикл
		ПроверкаПоСтроке(СтруктураШапкиДокумента, СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры // ПроверкаРеквизитов()

//Проверка заполнения реквизитов каждого ОС.
//
Функция ПроверкаПоСтроке(СтруктураШапкиДокумента, СтрокаОС)
	
	РеквизитыДляПроверки = Новый Структура();
	
	НалУчет    = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
	НалУчетУСН = СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН;

	//Проверка реквизитов общей группы
	Если СтрокаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
	
		//По видам учета
		РеквизитыДляПроверки.Вставить("СчетНачисленияАмортизации"  ,СтатусСообщения.Важное);
		РеквизитыДляПроверки.Вставить("Стоимость" ,СтатусСообщения.Важное);
		Если СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный 
		 ИЛИ СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования 
		 ИЛИ СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			РеквизитыДляПроверки.Вставить("СрокПолезногоИспользования" ,СтатусСообщения.Важное);
		КонецЕсли;
		
		Если НалУчетУСН тогда
			РеквизитыДляПроверки.Вставить("ДатаПриобретенияУСН"							,СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("СрокПолезногоИспользованияУСН"				,СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("ПорядокВключенияСтоимостиВСоставРасходовУСН"	,СтатусСообщения.Важное);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		РеквизитыДляПроверки.Вставить("ПервоначальнаяСтоимостьНУ"					,СтатусСообщения.Важное);
		РеквизитыДляПроверки.Вставить("СрокПолезногоИспользованияНУ"				,СтатусСообщения.Важное);
	КонецЕсли;

	// Проверка реквизитов групп амортизации.
	Если СтрокаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
	   
		РеквизитыДляПроверки.Вставить("СпособНачисленияАмортизации", СтатусСообщения.Важное);
		
		Если СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ тогда
			РеквизитыДляПроверки.Вставить("КоэффициентАмортизации", СтатусСообщения.Важное);
		ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега тогда
			РеквизитыДляПроверки.Вставить("ПараметрВыработки", СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("КоэффициентАмортизации", СтатусСообщения.Важное);
		ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			РеквизитыДляПроверки.Вставить("ПараметрВыработки", СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("ОбъемПродукцииРабот", СтатусСообщения.Важное);
		ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка тогда
			РеквизитыДляПроверки.Вставить("КоэффициентУскорения", СтатусСообщения.Важное);
		Конецесли;

		Если СтрокаОС.НачислятьАмортизацию Тогда
			РеквизитыДляПроверки.Вставить("СпособыОтраженияРасходовПоАмортизации", СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НалУчет
	   И СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
	   
	   РеквизитыДляПроверки.Вставить("СпециальныйКоэффициентНУ" ,СтатусСообщения.Внимание);
		
	КонецЕслИ;
	
КонецФункции // ПроверкаПоСтроке()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл

		Проводки = Движения.Хозрасчетный;
		
		// Стоимость ОС
		Если ЗначениеЗаполнено(СтрокаОС.СчетУчета)
		   И ((СтрокаОС.Стоимость <> 0) ИЛИ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
			                                 И (СтрокаОС.СтоимостьНУ <> 0 ИЛИ СтрокаОС.СтоимостьПР <> 0 ИЛИ СтрокаОС.СтоимостьВР <> 0))) Тогда
		
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Поступление ОС по авизо";
			Проводка.Сумма        = СтрокаОС.Стоимость;
			
			Проводка.СчетДт          = СтрокаОС.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);

			Проводка.СчетКт          = СтруктураШапкиДокумента.СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбособленныеПодразделения", СтруктураШапкиДокумента.ОрганизацияОтправитель);
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.Местонахождение, "Дт");
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаОС.СтоимостьНУ,СтрокаОС.СтоимостьНУ,СтрокаОС.СтоимостьПР,СтрокаОС.СтоимостьПР,СтрокаОС.СтоимостьВР,СтрокаОС.СтоимостьВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
				
			КонецЕсли;

		КонецЕсли;
		
		// Накопленная амортизация
		Если СтрокаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
		 ИЛИ СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		
			Если ЗначениеЗаполнено(СтрокаОС.СчетНачисленияАмортизации)
			   И ((СтрокаОС.Амортизация <> 0) ИЛИ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
				                                   И (СтрокаОС.АмортизацияНУ <> 0 ИЛИ СтрокаОС.АмортизацияПР <> 0 ИЛИ СтрокаОС.АмортизацияВР <> 0))) Тогда
			
				Проводка = Проводки.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = "Поступление ОС по авизо";
				Проводка.Сумма        = СтрокаОС.Амортизация;
				
				Проводка.СчетДт          = СтруктураШапкиДокумента.СчетРасчетов;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбособленныеПодразделения", СтруктураШапкиДокумента.ОрганизацияОтправитель);
				
				Проводка.СчетКт          = СтрокаОС.СчетНачисленияАмортизации;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.Местонахождение, "Кт");
			
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаОС.АмортизацияНУ,СтрокаОС.АмортизацияНУ,СтрокаОС.АмортизацияПР,СтрокаОС.АмортизацияПР,СтрокаОС.АмортизацияВР,СтрокаОС.АмортизацияВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Накопленный износ
		Если СтрокаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда
			
			Если ЗначениеЗаполнено(СтрокаОС.СчетНачисленияАмортизации) И (СтрокаОС.Амортизация <> 0) Тогда
			
				Проводка = Проводки.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = "Поступление ОС по авизо";
				Проводка.Сумма        = СтрокаОС.Амортизация;

				Проводка.СчетДт          = СтрокаОС.СчетНачисленияАмортизации;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.Местонахождение, "Дт");
			
			КонецЕсли;
			
		КонецЕсли;
		
		// Движения по регистру ПервоначальныеСведенияОСБухгалтерскийУчет
		Движение = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Добавить();
		Движение.Период                      = СтрокаОС.ДатаПринятияКУчету;
		Движение.Организация                 = СтруктураШапкиДокумента.Организация;
		Движение.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		Движение.ИнвентарныйНомер            = СтрокаОС.ИнвентарныйНомер;
		Движение.СпособПоступления	         = СтрокаОС.СпособПоступления;
		Движение.ПервоначальнаяСтоимость     = СтрокаОС.ПервоначальнаяСтоимость;
		Движение.ПорядокПогашенияСтоимости   = СтрокаОС.ПорядокПогашенияСтоимости;
		Движение.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизации;
		Движение.ПараметрВыработки           = СтрокаОС.ПараметрВыработки;
		
		// Движения по регистру МестонахождениеОСБухгалтерскийУчет
		Движение = Движения.МестонахождениеОСБухгалтерскийУчет.Добавить();
		Движение.Период           = СтруктураШапкиДокумента.Дата;
		Движение.Организация      = СтруктураШапкиДокумента.Организация;
		Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		Движение.МОЛ              = СтрокаОС.МОЛ;
		Движение.Местонахождение  = СтрокаОС.Местонахождение;
		
		// Движения по регистру ПараметрыАмортизацииОСБухгалтерскийУчет
		Движение = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период                     = СтруктураШапкиДокумента.Дата;
		Движение.Организация                = СтруктураШапкиДокумента.Организация;
		Движение.ОсновноеСредство           = СтрокаОС.ОсновноеСредство;
		Движение.СрокПолезногоИспользования = СтрокаОС.СрокПолезногоИспользования;
		Движение.ОбъемПродукцииРабот        = СтрокаОС.ОбъемПродукцииРабот;
		Если СтрокаОС.СрокИспользованияДляВычисленияАмортизации = 0 Тогда
			Движение.СрокИспользованияДляВычисленияАмортизации = СтрокаОС.СрокПолезногоИспользования;
		Иначе
			Движение.СрокИспользованияДляВычисленияАмортизации = СтрокаОС.СрокИспользованияДляВычисленияАмортизации;
		КонецЕсли;
		Если СтрокаОС.СтоимостьДляВычисленияАмортизации = 0 Тогда
			Движение.СтоимостьДляВычисленияАмортизации = СтрокаОС.Стоимость;
		Иначе
			Движение.СтоимостьДляВычисленияАмортизации = СтрокаОС.СтоимостьДляВычисленияАмортизации;
		КонецЕсли;
		Если СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизации = 0 Тогда
			Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРабот;
		Иначе
			Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизации;
		КонецЕсли;
		Движение.КоэффициентАмортизации = СтрокаОС.КоэффициентАмортизации;
		Движение.КоэффициентУскорения   = СтрокаОС.КоэффициентУскорения;
		
		// Движения по регистру НачислениеАмортизацииОСБухгалтерскийУчет
		Движение = Движения.НачислениеАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период               = ?(СтруктураШапкиДокумента.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо, СтрокаОС.ДатаПринятияКУчету, СтруктураШапкиДокумента.Дата);
		Движение.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		Движение.Организация          = СтруктураШапкиДокумента.Организация;
		Движение.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизацию;
		
		// Движения по регистру СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет
		Если НЕ (СтрокаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету)
		   И НЕ СтрокаОС.СпособыОтраженияРасходовПоАмортизации.Пустая() Тогда
			Движение = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.Добавить();
			Движение.Период                                = СтруктураШапкиДокумента.Дата;
			Движение.ОсновноеСредство                      = СтрокаОС.ОсновноеСредство;
			Движение.Организация                           = СтруктураШапкиДокумента.Организация;
			Движение.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособыОтраженияРасходовПоАмортизации;
		КонецЕсли;
		
		// Движения по регистру ГрафикиАмортизацииОСБухгалтерскийУчет
		Если НЕ СтрокаОС.ГрафикАмортизации.Пустая() Тогда
			Движение = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет.Добавить();
			Движение.Период            = СтруктураШапкиДокумента.Дата;
			Движение.Организация       = СтруктураШапкиДокумента.Организация;
			Движение.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			Движение.ГрафикАмортизации = СтрокаОС.ГрафикАмортизации;
		КонецЕсли;
		
		// Движения по регистру СчетаБухгалтерскогоУчетаОС
		Движение = Движения.СчетаБухгалтерскогоУчетаОС.Добавить();
		Движение.Период                    = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
		Движение.Организация               = СтруктураШапкиДокумента.Организация;
		Движение.СчетУчета                 = СтрокаОС.СчетУчета;
		Движение.СчетНачисленияАмортизации = СтрокаОС.СчетНачисленияАмортизации;
		
		// Движения по регистру СостоянияОСОрганизаций
		Движение = Движения.СостоянияОСОрганизаций.Добавить();
		Движение.Период            = СтруктураШапкиДокумента.Дата;
		Движение.ДатаСостояния     = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		Движение.Организация       = СтруктураШапкиДокумента.Организация;
		Движение.Состояние         = Перечисления.СостоянияОС.ПринятоКУчету;
		
		// Движения по регистру СобытияОСОрганизаций
		Движение = Движения.СобытияОСОрганизаций.Добавить();
		Движение.Период				= СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство	= СтрокаОС.ОсновноеСредство;
		Движение.Организация		= СтруктураШапкиДокумента.Организация;
		Движение.Событие 			= СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента	= Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента		= СтруктураШапкиДокумента.Номер;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			// Движения по регистру ПервоначальныеСведенияОСНалоговыйУчет
			Движение = Движения.ПервоначальныеСведенияОСНалоговыйУчет.Добавить();
			Движение.Период                                   = Макс(СтрокаОС.ДатаПринятияКУчету, '20020101000000');
			Движение.Организация                              = СтруктураШапкиДокумента.Организация;
			Движение.ОсновноеСредство                         = СтрокаОС.ОсновноеСредство;
			Движение.ПервоначальнаяСтоимостьНУ                = СтрокаОС.ПервоначальнаяСтоимостьНУ;
			Движение.ПорядокВключенияСтоимостиВСоставРасходов = СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ;
			Движение.СтоимостьДо2002                          = СтрокаОС.СтоимостьДо2002НУ;
			Движение.АмортизацияДо2002                        = СтрокаОС.АмортизацияДо2002НУ;
			Движение.АмортизацияДо2009                        = СтрокаОС.АмортизацияДо2009НУ;
			Движение.ФактическийСрокИспользованияДо2009       = СтрокаОС.ФактическийСрокИспользованияДо2009НУ;
			
			// Движения по регистру ПараметрыАмортизацииОСНалоговыйУчет
			Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда 
			
				Движение = Движения.ПараметрыАмортизацииОСНалоговыйУчет.Добавить();
				Движение.Период						= Макс(СтруктураШапкиДокумента.Дата, '20020101000000');
				Движение.Организация                = СтруктураШапкиДокумента.Организация;
				Движение.ОсновноеСредство			= СтрокаОС.ОсновноеСредство;
				Движение.СрокПолезногоИспользования	= СтрокаОС.СрокПолезногоИспользованияНУ;
				Если СтрокаОС.ПРДляВычисленияАмортизации = 0  тогда
					Движение.ПРДляВычисленияАмортизации = СтрокаОС.СтоимостьПР;
				Иначе
					Движение.ПРДляВычисленияАмортизации = СтрокаОС.ПРДляВычисленияАмортизации;
				КонецЕсли;
			
			КонецЕсли;
			
			// Движения по регистру НачислениеАмортизацииОСНалоговыйУчет
			Движение = Движения.НачислениеАмортизацииОСНалоговыйУчет.Добавить();
			Движение.Период               = СтруктураШапкиДокумента.Дата;
			Движение.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
			Движение.Организация          = СтруктураШапкиДокумента.Организация;
			Движение.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюНУ;
			
			// Движения по регистру НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет
			Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			   И СтрокаОС.СпециальныйКоэффициентНУ > 0 Тогда
				Движение = Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.Добавить();
				Движение.Период                 = СтруктураШапкиДокумента.Дата;
				Движение.ОсновноеСредство       = СтрокаОС.ОсновноеСредство;
				Движение.Организация            = СтруктураШапкиДокумента.Организация;
				Движение.СпециальныйКоэффициент = СтрокаОС.СпециальныйКоэффициентНУ;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
			Если НЕ (СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету) Тогда 
				
				// Движения по регистру ПервоначальныеСведенияОСНалоговыйУчетУСН
				Движение = Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН.Добавить();
				Движение.Период                                      = Макс(СтрокаОС.ДатаПринятияКУчету, '20020101000000');
				Движение.Организация                                 = СтруктураШапкиДокумента.Организация;
				Движение.ОсновноеСредство                            = СтрокаОС.ОсновноеСредство;
				Движение.ПервоначальнаяСтоимостьУСН                  = СтрокаОС.ПервоначальнаяСтоимостьУСН;
				Движение.СрокПолезногоИспользования                  = СтрокаОС.СрокПолезногоИспользованияУСН;
				Движение.СуммаНачисленнойАмортизации                 = СтрокаОС.СуммаНачисленнойАмортизацииУСН;
				Движение.ДатаПриобретения                            = СтрокаОС.ДатаПриобретенияУСН;
				Движение.ПорядокВключенияСтоимостиВСоставРасходовУСН = СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовУСН;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик события "ОбработкаЗаполнения" документа.
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АвизоОСИсходящее") Тогда
		
		Организация             = Основание.ОрганизацияПолучатель;
		ОрганизацияОтправитель  = Основание.Организация;
		СчетРасчетов            = Основание.СчетРасчетов;
		ДокументОснование       = Основание;
		ДатаВходящегоДокумента  = Основание.Дата;
		НомерВходящегоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
		
		ЗаполнитьТабличнуюЧастьПоДокументуОснованию(Основание);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события "ОбработкаПроведения" документа.
//
Процедура ОбработкаПроведения(Отказ)
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(Ложь, Отказ, Заголовок, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвизоВходящееОСОС.НомерСтроки,
	|	АвизоВходящееОСОС.ОсновноеСредство,
	|	АвизоВходящееОСОС.ИнвентарныйНомер,
	|	АвизоВходящееОСОС.Стоимость,
	|	АвизоВходящееОСОС.СтоимостьНУ,
	|	АвизоВходящееОСОС.СтоимостьПР,
	|	АвизоВходящееОСОС.СтоимостьВР,
	|	АвизоВходящееОСОС.Амортизация,
	|	АвизоВходящееОСОС.АмортизацияНУ,
	|	АвизоВходящееОСОС.АмортизацияПР,
	|	АвизоВходящееОСОС.АмортизацияВР,
	|	АвизоВходящееОСОС.ГрафикАмортизации,
	|	АвизоВходящееОСОС.СрокПолезногоИспользования,
	|	АвизоВходящееОСОС.ОбъемПродукцииРабот,
	|	АвизоВходящееОСОС.СрокИспользованияДляВычисленияАмортизации,
	|	АвизоВходящееОСОС.СтоимостьДляВычисленияАмортизации,
	|	АвизоВходящееОСОС.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	АвизоВходящееОСОС.КоэффициентАмортизации,
	|	АвизоВходящееОСОС.КоэффициентУскорения,
	|	АвизоВходящееОСОС.СрокПолезногоИспользованияНУ,
	|	АвизоВходящееОСОС.ПРДляВычисленияАмортизации,
	|	АвизоВходящееОСОС.СпособПоступления,
	|	АвизоВходящееОСОС.ПервоначальнаяСтоимость,
	|	АвизоВходящееОСОС.СпособНачисленияАмортизации,
	|	АвизоВходящееОСОС.ПараметрВыработки,
	|	АвизоВходящееОСОС.ПорядокПогашенияСтоимости,
	|	АвизоВходящееОСОС.ПервоначальнаяСтоимостьНУ,
	|	АвизоВходящееОСОС.СтоимостьДо2002НУ,
	|	АвизоВходящееОСОС.АмортизацияДо2002НУ,
	|	АвизоВходящееОСОС.ПорядокВключенияСтоимостиВСоставРасходовНУ,
	|	АвизоВходящееОСОС.ПервоначальнаяСтоимостьУСН,
	|	АвизоВходящееОСОС.СуммаНачисленнойАмортизацииУСН,
	|	АвизоВходящееОСОС.СрокПолезногоИспользованияУСН,
	|	АвизоВходящееОСОС.ДатаПриобретенияУСН,
	|	АвизоВходящееОСОС.ПорядокВключенияСтоимостиВСоставРасходовУСН,
	|	АвизоВходящееОСОС.СпециальныйКоэффициентНУ,
	|	АвизоВходящееОСОС.Местонахождение,
	|	АвизоВходящееОСОС.МОЛ,
	|	АвизоВходящееОСОС.НачислятьАмортизацию,
	|	АвизоВходящееОСОС.НачислятьАмортизациюНУ,
	|	АвизоВходящееОСОС.СпособыОтраженияРасходовПоАмортизации,
	|	АвизоВходящееОСОС.СчетУчета,
	|	АвизоВходящееОСОС.СчетНачисленияАмортизации,
	|	АвизоВходящееОСОС.ДатаПринятияКУчету,
	|	АвизоВходящееОСОС.АмортизацияДо2009НУ,
	|	АвизоВходящееОСОС.ФактическийСрокИспользованияДо2009НУ
	|ИЗ
	|	Документ.АвизоОСВходящее.ОС КАК АвизоВходящееОСОС
	|ГДЕ
	|	АвизоВходящееОСОС.Ссылка = &Ссылка";
	
	ТаблицаПоОС = Запрос.Выполнить().Выгрузить();
	
	ПроверкаРеквизитовТЧ(ТаблицаПоОС, СтруктураШапкиДокумента,Отказ, Заголовок);
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);

	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);

КонецПроцедуры

