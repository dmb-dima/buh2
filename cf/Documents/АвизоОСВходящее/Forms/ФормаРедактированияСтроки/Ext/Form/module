////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ЗаголовокФормы;

Перем ПрименениеПБУ18;
Перем УСН;
Перем УСНДоходы;
Перем ОтражатьВНалоговомУчете;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Пересчитывает текущую стоимость (ВР) и сумму амортизации (ВР).
//
Процедура ПересчитатьСуммыРазниц()
	
	СтоимостьВР   = Стоимость - СтоимостьНУ - СтоимостьПР;
	АмортизацияВР = ?(ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса
	                  ИЛИ ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ,
					  0,
					  Амортизация)
				  - АмортизацияНУ 
				  - АмортизацияПР;
	
	Если ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы Тогда
		АмортизацияНУ = 0;
		АмортизацияПР = 0;
		АмортизацияВР = 0;
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьСуммыРазниц()

// Записывает данные в строку формы документа.
//
Процедура ЗаписатьДанные(Отказ = Ложь)
	
	ОчиститьНеиспользуемыеРеквизиты();
	
	Если ЭтоНовый Тогда
		ДанныеДляЗаписи = ВладелецФормы.Значение.Добавить();
		ВладелецФормы.ТекущаяСтрока = ДанныеДляЗаписи;
	Иначе
		ДанныеДляЗаписи = ТекущиеДанные;
	КонецЕсли;
	
	Попытка
		
		ЗаполнитьЗначенияСвойств(ДанныеДляЗаписи, ЭтаФорма);
		
	Исключение
		
		Предупреждение("Операция не может быть выполнена из-за несоответствия версии или отсутствия строки документа (возможно, строка была изменена или удалена)!");
		
		ТекущиеДанные = Неопределено;
		
		КлючУникальности = "Документ_АвизоИсходящееОС_ФормаРедактированияСтроки_" + СокрЛП(Новый УникальныйИдентификатор);
		
		Отказ = Истина;
		
		Возврат;
		
	КонецПопытки;
	
	Если НЕ ВладелецФормы.ПроверитьСтроку(ДанныеДляЗаписи) Тогда
		Предупреждение("Введенные данные не отображены в списке, так как не соответствуют отбору.");
	КонецЕсли;
	
	ТекущиеДанные = ДанныеДляЗаписи;
	
	КлючУникальности = "Документ_АвизоИсходящееОС_ФормаРедактированияСтроки_" + СокрЛП(ТекущиеДанные.НомерСтроки);
	
	Модифицированность = Ложь;
	ЭтоНовый           = Ложь;
	
КонецПроцедуры // ЗаписатьДанные()

// Очищает неиспользуемые реквизиты в форме.
//
Процедура ОчиститьНеиспользуемыеРеквизиты()
	
	// Бухгалтерский учет.
	
	Если ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		
		Если СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
			
			КоэффициентУскорения                        = 0;
			КоэффициентАмортизации                      = 0;
			ПараметрВыработки                           = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
			ОбъемПродукцииРабот                         = 0;
			ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
			
		ИначеЕсли СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			
			КоэффициентАмортизации                      = 0;
			ПараметрВыработки                           = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
			ОбъемПродукцииРабот                         = 0;
			ОбъемПродукцииРаботДляВычисленияАмортизации = 0;

		ИначеЕсли СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
			
			КоэффициентУскорения                        = 0;
			КоэффициентАмортизации                      = 0;
			ПараметрВыработки                           = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
			ОбъемПродукцииРабот                         = 0;
			ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
			
		ИначеЕсли СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			
			КоэффициентУскорения                        = 0;
			КоэффициентАмортизации                      = 0;
			ГрафикАмортизации                           = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
			ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
			
		ИначеЕсли СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
			
			КоэффициентУскорения = 0;
			ПараметрВыработки    = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
			ОбъемПродукцииРабот  = 0;
			СезонныйХарактер     = Ложь;
			
		ИначеЕсли СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
			
			КоэффициентУскорения                        = 0;
			ГрафикАмортизации                           = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
			ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
			
		КонецЕсли;
		
	ИначеЕсли ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается Тогда
		  
		СрокПолезногоИспользования                = 0;
		СезонныйХарактер                          = Ложь;
		ГрафикАмортизации                         = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
		СтоимостьДляВычисленияАмортизации         = 0;
		СрокИспользованияДляВычисленияАмортизации = 0;
		  
	ИначеЕсли ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету Тогда
		  
		СпособНачисленияАмортизации               = Перечисления.СпособыНачисленияАмортизацииОС.ПустаяСсылка();
		СрокПолезногоИспользования                = 0;
		СезонныйХарактер                          = Ложь;
		ГрафикАмортизации                         = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
		СтоимостьДляВычисленияАмортизации         = 0;
		СрокИспользованияДляВычисленияАмортизации = 0;
		  
	КонецЕсли;
	
	Если НЕ СезонныйХарактер Тогда
		
		ГрафикАмортизации = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
		
	КонецЕсли;
	
	// Налоговый учет.
	
	Если ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
	ИначеЕсли ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы Тогда
		
		СрокПолезногоИспользованияНУ             = 0;
		СпециальныйКоэффициентНУ                 = 0;
		СтоимостьДо2002НУ                        = 0;
		АмортизацияДо2002НУ                      = 0;
		АмортизацияДо2009НУ                      = 0;
		ФактическийСрокИспользованияДо2009НУ     = 0;
		
	ИначеЕсли ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
		
		СрокПолезногоИспользованияНУ             = 0;
		СпециальныйКоэффициентНУ                 = 0;
		СтоимостьДо2002НУ                        = 0;
		АмортизацияДо2002НУ                      = 0;
		АмортизацияДо2009НУ                      = 0;
		ФактическийСрокИспользованияДо2009НУ     = 0;
		
	КонецЕсли;

КонецПроцедуры // ОчиститьНеиспользуемыеРеквизиты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Управление видимостью элементов формы.
//
Процедура УстановитьВидимость()
	
	Если ЭтоНовый Тогда
		ЭтаФорма.Заголовок = ЗаголовокФормы + ": Новая строка";
	ИначеЕсли НЕ (ТекущиеДанные = Неопределено) Тогда
		ЭтаФорма.Заголовок = ЗаголовокФормы + ": Строка " + СокрЛП(ТекущиеДанные.НомерСтроки);
	КонецЕсли;
	
	НачисляетсяИзнос = ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы;
	ЭлементыФормы.АмортизацияНУ.Доступность = (НЕ НачисляетсяИзнос);
	ЭлементыФормы.АмортизацияВР.Доступность = (НЕ НачисляетсяИзнос);
		
	// Пересчет сумм разниц.
	ПересчитатьСуммыРазниц();
	
	// Установка видимости закладок "Налоговый учет" и "Налоговый учет (УСН)".
	ЭлементыФормы.ОсновнаяПанель.Страницы.НалоговыйУчетУСН.Видимость = ОтражатьВНалоговомУчете И УСН И НЕ УСНДоходы;
	ЭлементыФормы.ОсновнаяПанель.Страницы.НалоговыйУчет.Видимость    = ОтражатьВНалоговомУчете И НЕ УСН;
	
	// Установка видимости элементов колонки "Налоговый учет" на закладке "Начальные остатки".
	ЭлементыФормы.ПанельНадписиБУНУ.Свертка = ?(ОтражатьВНалоговомУчете И НЕ УСН,
	                                            РежимСверткиЭлементаУправления.Нет,
	                                            РежимСверткиЭлементаУправления.Верх);
	
	ЭлементыФормы.ПервоначальнаяСтоимостьНУ.Видимость   = ОтражатьВНалоговомУчете И НЕ УСН;
	ЭлементыФормы.СтоимостьНУ.Видимость          = ОтражатьВНалоговомУчете;
	ЭлементыФормы.АмортизацияНУ.Видимость    = ОтражатьВНалоговомУчете И НЕ УСН;
	
	// Установка видимости страниц панели ПанельПогашенияСтоимости 
	// в зависимости от выбранного варианта погашения стоимости.
	Если НЕ ЗначениеЗаполнено(ПорядокПогашенияСтоимости) Тогда
		ЭлементыФормы.ПанельПогашениеСтоимости.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ПанельПогашениеСтоимости.Видимость = Истина;
		ЭлементыФормы.ПанельПогашениеСтоимости.ТекущаяСтраница = ЭлементыФормы.ПанельПогашениеСтоимости.Страницы[ПорядокПогашенияСтоимости.Метаданные().ЗначенияПеречисления[Перечисления.ПорядокПогашенияСтоимостиОС.Индекс(ПорядокПогашенияСтоимости)].Имя];
	КонецЕсли;
	
	Если ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
	 ИЛИ ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ
	 ИЛИ ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается Тогда
		ЭлементыФормы.ПанельПогашениеСтоимости.Свертка = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельПогашениеСтоимости.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СпособНачисленияАмортизации) Тогда
		ЭлементыФормы.ПанельПараметрыАмортизации.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ПанельПараметрыАмортизации.Видимость = Истина;
		ЭлементыФормы.ПанельПараметрыАмортизации.ТекущаяСтраница = ЭлементыФормы.ПанельПараметрыАмортизации.Страницы.Получить(Перечисления.СпособыНачисленияАмортизацииОС.Индекс(СпособНачисленияАмортизации));
	КонецЕсли;
	
	// Установка видимости страниц панели ПанельВключениеСтоимостиВСоставРасходов
	// в зависимости от выбранного варианта включения стоимости в состав расходов
	Если НЕ ЗначениеЗаполнено(ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
		ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходов.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходов.Видимость = Истина;
		ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходов.ТекущаяСтраница = ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходов.Страницы[ПорядокВключенияСтоимостиВСоставРасходовНУ.Метаданные().ЗначенияПеречисления[Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.Индекс(ПорядокВключенияСтоимостиВСоставРасходовНУ)].Имя];
	КонецЕсли;
	
	ЭлементыФормы.СтоимостьНУ.ОтметкаНезаполненного     = (НЕ (ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету)) И СтоимостьНУ = 0;
	ЭлементыФормы.СтоимостьНУ.АвтоОтметкаНезаполненного = (НЕ (ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету));
	
	// Установка доступности поля "ГрафикАмортизации"
	ЭлементыФормы.ГрафикАмортизации.Доступность = СезонныйХарактер;
	ЭлементыФормы.ГрафикАмортизации1.Доступность = СезонныйХарактер;
	ЭлементыФормы.ГрафикАмортизации2.Доступность = СезонныйХарактер;
	ЭлементыФормы.ГрафикАмортизации3.Доступность = СезонныйХарактер;
	
	// Установка видимости реквизитов ПБУ 18/02
	ОтображениеРеквизитовПБУ18 = ?(ОтражатьВНалоговомУчете И ПрименениеПБУ18,
	                               РежимСверткиЭлементаУправления.Нет,
	                               РежимСверткиЭлементаУправления.Верх);
								   
	ЭлементыФормы.ПанельСтоимостьПБУ18.Свертка   = ОтображениеРеквизитовПБУ18;
	ЭлементыФормы.ПанельАмортизацияПБУ18.Свертка = ОтображениеРеквизитовПБУ18;
	
	// Установка видимости надписи с расшифровкой срока полезного использования
	РасшифровкаСрокаПолезногоИспользования  = УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользования);
	РасшифровкаСрокаПолезногоИспользованияНУ  = УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияНУ);
	РасшифровкаСрокаПолезногоИспользованияУСН = УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияУСН);
	
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользования.Заголовок = РасшифровкаСрокаПолезногоИспользования;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользования1.Заголовок = РасшифровкаСрокаПолезногоИспользования;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользования2.Заголовок = РасшифровкаСрокаПолезногоИспользования;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользования3.Заголовок = РасшифровкаСрокаПолезногоИспользования;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользования4.Заголовок = РасшифровкаСрокаПолезногоИспользования;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользования5.Заголовок = РасшифровкаСрокаПолезногоИспользования;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользования6.Заголовок = РасшифровкаСрокаПолезногоИспользования;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияНУ.Заголовок  = РасшифровкаСрокаПолезногоИспользованияНУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияУСН.Заголовок = РасшифровкаСрокаПолезногоИспользованияУСН;
	
	// Установка видимости надписи с единицей измерения объема продукции (работ, услуг)
	ЕдиницаИзмеренияВыработки = ?(ПараметрВыработки.Пустая(), "", ПараметрВыработки.ЕдиницаИзмерения);
	ЭлементыФормы.ЕдиницаНормыВыработки.Заголовок = ЕдиницаИзмеренияВыработки;
	ЭлементыФормы.ЕдиницаНормыВыработки1.Заголовок = ЕдиницаИзмеренияВыработки;
	ЭлементыФормы.ЕдиницаНормыВыработки2.Заголовок = ЕдиницаИзмеренияВыработки;
	ЭлементыФормы.ЕдиницаНормыВыработки3.Заголовок = ЕдиницаИзмеренияВыработки;
			
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПриОткрытии" формы.
// Вызывает процедуру установки видимости элементов управления формы.
//
Процедура ПриОткрытии()
	
	Если НЕ (ЭтоНовый И НЕ Копирование) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ТекущиеДанные);
	КонецЕсли;
	
	СезонныйХарактер = ЗначениеЗаполнено(ГрафикАмортизации);
	
	ЗаголовокФормы = ЭтаФорма.Заголовок;
	
	ПрименениеПБУ18 = НалоговыйУчет.ПрименениеПБУ18(ДокументОбъект.Организация, ДокументОбъект.Дата);
	УСН             = НалоговыйУчетУСН.ПрименениеУСН(ДокументОбъект.Организация, ДокументОбъект.Дата);
	УСНДоходы       = НалоговыйУчетУСН.ПрименениеУСНДоходы(ДокументОбъект.Организация, ДокументОбъект.Дата);
	ОСН_ФизЛицо		= НЕ УСН И ДокументОбъект.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	
	ОтражатьВНалоговомУчете = Истина;
	
	Если ЭтоНовый Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	// Установка доступных значений для поля ввода "Порядок погашения стоимости (БУ)".
	СписокДоступныхЗначений = Новый СписокЗначений();
	
	СписокДоступныхЗначений.Добавить(Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации);
	СписокДоступныхЗначений.Добавить(Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ);
	СписокДоступныхЗначений.Добавить(Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается);
	
	ЭлементыФормы.ПорядокПогашенияСтоимости.ДоступныеЗначения	= СписокДоступныхЗначений;
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события "ПередЗакрытием" формы.
// Вызывает процедуру установки видимости элементов управления формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		ТекстВопроса =
		"Данные были изменены. Сохранить изменения?";
		
		КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
		Если КодВозврата = КодВозвратаДиалога.Отмена Тогда
			
			Отказ = Истина;
			
		ИначеЕсли КодВозврата = КодВозвратаДиалога.Да Тогда
			
			ЗаписатьДанные(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ЗАКЛАДКИ "НАЧАЛЬНЫЕ ОСТАТКИ"

// Обработчик события "ПриИзменении" поля ввода "Первоначальная стоимость (БУ)".
//
Процедура ПервоначальнаяСтоимостьБУПриИзменении(Элемент)
	
	Если Стоимость = 0 И НЕ (ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету) Тогда
		Стоимость = ПервоначальнаяСтоимость;
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете И НЕ УСН Тогда
		
		Если ПервоначальнаяСтоимостьНУ = 0 Тогда
			ПервоначальнаяСтоимостьНУ = ПервоначальнаяСтоимость;
		КонецЕсли;
		ПервоначальнаяСтоимостьНУПриИзменении(Неопределено);
		
	ИначеЕсли ОтражатьВНалоговомУчете И (УСН И НЕ УСНДоходы) Тогда
		
		Если ПервоначальнаяСтоимостьУСН = 0 Тогда
			ПервоначальнаяСтоимостьУСН = ПервоначальнаяСтоимость;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПервоначальнаяСтоимостьБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Стоимость на момент ввода
// остатков (БУ)".
//
Процедура СтоимостьПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // СтоимостьБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Сумма накопленной амортизации
// (износа) (БУ)".
//
Процедура АмортизацияПриИзменении(Элемент)
	
	Если ОтражатьВНалоговомУчете И НЕ УСН Тогда
		
		Если АмортизацияНУ = 0 Тогда
		   
			АмортизацияНУ = Амортизация;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // АмортизацияБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Первоначальная стоимость (НУ)". 
//
Процедура ПервоначальнаяСтоимостьНУПриИзменении(Элемент)
	
	Если СтоимостьНУ = 0 И НЕ (ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету)Тогда
		СтоимостьНУ = ПервоначальнаяСтоимостьНУ;
	КонецЕсли;
	
КонецПроцедуры // ПервоначальнаяСтоимостьНУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Cтоимость на момент ввода
// остатков (НУ)".
//
Процедура СтоимостьНУПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // СтоимостьНУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Cтоимость на момент ввода
// остатков (ПР)".
//
Процедура СтоимостьПРПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // СтоимостьПРПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Сумма накопленной амортизации
// (износа) (НУ)".
//
Процедура АмортизацияНУПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // АмортизацияНУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Сумма накопленной амортизации
// (износа) (ПР)".
//
Процедура АмортизацияПРПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // АмортизацияПРПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ЗАКЛАДКИ "БУХГАЛТЕРСКИЙ УЧЕТ"

// Обработчик события "ПриИзменении" поля ввода "Порядок учета (БУ)".
//
Процедура ПорядокПогашенияСтоимостиПриИзменении(Элемент)
	
	Если НЕ (Элемент.Значение = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
	         ИЛИ Элемент.Значение = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ) Тогда
			 
		НачислятьАмортизацию = Ложь;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ПорядокПогашенияСтоимостиПриИзменении()

// Обработчик события "Очистка" поля ввода "Порядок учета (БУ)".
//
Процедура ПорядокПогашенияСтоимостиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПорядокПогашенияСтоимостиОчистка()

// Обработчик события "ПриИзменении" поля ввода "Способ начисления амортизации
// (БУ)".
//
Процедура СпособНачисленияАмортизацииПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СпособНачисленияАмортизацииПриИзменении()

// Обработчик события "Очистка" поля ввода "Способ начисления амортизации
// (БУ)".
//
Процедура СпособНачисленияАмортизацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // СпособНачисленияАмортизацииОчистка()

// Обработчик события "ПриИзменении" поля ввода "Срок полезного использования 
// (НУ)". 
//
Процедура СрокПолезногоИспользованияПриИзменении(Элемент)
	
	Если ОтражатьВНалоговомУчете И НЕ УСН Тогда
		
		Если СрокПолезногоИспользованияНУ = 0 Тогда
			СрокПолезногоИспользованияНУ = СрокПолезногоИспользования;
		КонецЕсли;
		
	ИначеЕсли ОтражатьВНалоговомУчете И (УСН И НЕ УСНДоходы) Тогда
		
		Если СрокПолезногоИспользованияУСН = 0 Тогда
			СрокПолезногоИспользованияУСН = СрокПолезногоИспользования;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // СрокПолезногоИспользованияПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Параметр выработки (БУ)".
//
Процедура ПараметрВыработкиПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // ПараметрВыработкиПриИзменении()

// Обработчик события "ПриИзменении" флага "Сезонный характер производства".
//
Процедура СезонныйХарактерПриИзменении(Элемент)
	
	Если СезонныйХарактер = Ложь Тогда
	
		Если НЕ ГрафикАмортизации.Пустая() Тогда
			
			ТекстВопроса =
			"Поле ""График амортизации по году"" будет очищено.
			|Продолжить?";
			
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
				ГрафикАмортизации = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
			Иначе
				СезонныйХарактер = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // СезонныйХарактерПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ЗАКЛАДКИ "НАЛОГОВЫЙ УЧЕТ"

// Обработчик события "ПриИзменении" поля ввода "Порядок включения стоимости
// в состав расходов (НУ)".
//
Процедура ПорядокВключенияСтоимостиВСоставРасходовНУПриИзменении(Элемент)
	
	Если ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы
	 ИЛИ ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
	 
		СчетАмортизацииНУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
		АмортизацияНУ = 0;
		АмортизацияПР = 0;
		АмортизацияВР = 0;
		
		НачислятьАмортизацию = Ложь;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ПорядокВключенияСтоимостиВСоставРасходовНУПриИзменении()

// Обработчик события "Очистка" поля ввода "Порядок включения стоимости
// в состав расходов (НУ)".
//
Процедура ПорядокВключенияСтоимостиВСоставРасходовНУОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПорядокВключенияСтоимостиВСоставРасходовНУОчистка()

// Обработчик события "ПриИзменении" поля ввода "Срок полезного использования 
// (НУ)". 
//
Процедура СрокПолезногоИспользованияНУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СрокПолезногоИспользованияНУПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ЗАКЛАДКИ "НАЛОГОВЫЙ УЧЕТ (УСН)"

// Обработчик события "Очистка" поля ввода "Порядок включения стоимости
// в состав расходов (УСН)".
//
Процедура ПорядокВключенияСтоимостиВСоставРасходовУСНОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПорядокВключенияСтоимостиВСоставРасходовУСНОчистка()

// Обработчик события "ПриИзменении" поля ввода "Срок полезного использования 
// (УСН)". 
//
Процедура СрокПолезногоИспользованияУСНПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СрокПолезногоИспользованияУСНПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик нажатия на кнопку "ОК" в нижней командной панели формы.
//
Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Отказ = Ложь;
	
	ЗаписатьДанные(Отказ);
	
	Если НЕ Отказ Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыОК()

// Обработчик нажатия на кнопку "Записать" в нижней командной панели формы.
//
Процедура ОсновныеДействияФормыЗаписать(Кнопка)
	
	ЗаписатьДанные();
	
	УстановитьВидимость();

КонецПроцедуры // ОсновныеДействияФормыЗаписать()

// Обработчик нажатия на кнопку "Закрыть" в нижней командной панели формы.
//
Процедура ОсновныеДействияФормыЗакрыть(Кнопка)
	
	Закрыть();
	
КонецПроцедуры // ОсновныеДействияФормыЗакрыть()

