////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОстатокПФРСтраховая;
Перем мОстатокПФРНакопительная;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Функция ОписаниеПереплатыЗадолженности(МассивПериодов, ТекущийОтчетныйПериодПерсучетаПФР)

	Описание = "";
	Для каждого МесяцПереплатыЗадолженности Из МассивПериодов Цикл
		Если МесяцПереплатыЗадолженности < ТекущийОтчетныйПериодПерсучетаПФР Тогда
			Описание = Описание + ПроцедурыПерсонифицированногоУчета.ОписаниеОтчетногоПериодаДляПоказа(МесяцПереплатыЗадолженности) + "; "
		Иначе
			Описание = Описание + Формат(МесяцПереплатыЗадолженности,"ДФ='MMMM yyyy'") + " г.; "
		КонецЕсли;
	КонецЦикла;
	Возврат Лев(Описание, СтрДлина(Описание) - 2);
	
КонецФункции // ОписаниеПереплатыЗадолженности()

Процедура ОбновитьОписаниеОстатковПФРПредыдущихПериодов()
    Если ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.УплатаПФР Тогда
		
		ТекущийОтчетныйПериодПерсучетаПФР = ПроцедурыПерсонифицированногоУчета.НачалоОтчетногоПериодаПерсучета(МесяцРасчетногоПериода);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоСтраховымВзносамОстатки.ПФРСтраховаяОстаток,
		|	РасчетыПоСтраховымВзносамОстатки.ПФРНакопительнаяОстаток,
		|	РасчетыПоСтраховымВзносамОстатки.МесяцРасчетногоПериода КАК МесяцРасчетногоПериода
		|ИЗ
		|	РегистрНакопления.РасчетыПоСтраховымВзносам.Остатки(
		|			&ДатаОстатка,
		|			ВидПлатежа = &ВидПлатежа
		|				И Организация = &Организация
		|				И МесяцРасчетногоПериода >= &НачалоТекущегоОтчетногоПериода
		|				И МесяцРасчетногоПериода < &МесяцРасчетногоПериода) КАК РасчетыПоСтраховымВзносамОстатки
		|ГДЕ
		|	(РасчетыПоСтраховымВзносамОстатки.ПФРСтраховаяОстаток <> 0
		|			ИЛИ РасчетыПоСтраховымВзносамОстатки.ПФРНакопительнаяОстаток <> 0)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РасчетыПоСтраховымВзносамОстатки.ПФРСтраховаяОстаток,
		|	РасчетыПоСтраховымВзносамОстатки.ПФРНакопительнаяОстаток,
		|	РасчетыПоСтраховымВзносамОстатки.ОтчетныйПериодПерсучетаПФР
		|ИЗ
		|	РегистрНакопления.РасчетыПоСтраховымВзносам.Остатки(
		|			&ДатаОстатка,
		|			ВидПлатежа = &ВидПлатежа
		|				И Организация = &Организация
		|				И МесяцРасчетногоПериода >= &НачалоПредыдущихОтчетныхПериодов
		|				И МесяцРасчетногоПериода < &НачалоТекущегоОтчетногоПериода) КАК РасчетыПоСтраховымВзносамОстатки
		|ГДЕ
		|	(РасчетыПоСтраховымВзносамОстатки.ПФРСтраховаяОстаток <> 0
		|			ИЛИ РасчетыПоСтраховымВзносамОстатки.ПФРНакопительнаяОстаток <> 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	МесяцРасчетногоПериода";
		Запрос.УстановитьПараметр("ДатаОстатка", Дата);
		Запрос.УстановитьПараметр("ВидПлатежа", ВидПлатежа);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("МесяцРасчетногоПериода", МесяцРасчетногоПериода);
		Запрос.УстановитьПараметр("НачалоПредыдущихОтчетныхПериодов", ?(Месяц(МесяцРасчетногоПериода) > 3, НачалоГода(МесяцРасчетногоПериода), ПроцедурыПерсонифицированногоУчета.ПредшествующийОтчетныйПериодПерсучета(МесяцРасчетногоПериода)));
		Запрос.УстановитьПараметр("НачалоТекущегоОтчетногоПериода", ТекущийОтчетныйПериодПерсучетаПФР);
		Выборка = Запрос.Выполнить().Выбрать();
		ПереплатаПоСтраховой = Новый Массив;
		ПереплатаПоНакопительной = Новый Массив;
		НедоплатаПоСтраховой = Новый Массив;
		НедоплатаПоНакопительной = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПФРСтраховаяОстаток > 0 Тогда
				НедоплатаПоСтраховой.Добавить(Выборка.МесяцРасчетногоПериода)
			ИначеЕсли Выборка.ПФРСтраховаяОстаток < 0 Тогда
				ПереплатаПоСтраховой.Добавить(Выборка.МесяцРасчетногоПериода)
			КонецЕсли;
			Если Выборка.ПФРНакопительнаяОстаток > 0 Тогда
				НедоплатаПоНакопительной.Добавить(Выборка.МесяцРасчетногоПериода)
			ИначеЕсли Выборка.ПФРНакопительнаяОстаток < 0 Тогда
				ПереплатаПоНакопительной.Добавить(Выборка.МесяцРасчетногоПериода)
			КонецЕсли;
		КонецЦикла;
		Если ПереплатаПоСтраховой.Количество() = 0 И НедоплатаПоСтраховой.Количество() = 0 Тогда
			РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждениеСтраховая,ЭлементыФормы.ПолеКартинкиПредупреждениеСтраховая, "Задолженность либо переплата за предыдущие месяцы отсутствуют!", "Информация");
		Иначе
			ОписаниеСтраховойЧасти = "";
			Если НедоплатаПоСтраховой.Количество() > 0 Тогда
				ОписаниеСтраховойЧасти = "Задолженность выявлена за: " + ОписаниеПереплатыЗадолженности(НедоплатаПоСтраховой, ТекущийОтчетныйПериодПерсучетаПФР);
			КонецЕсли;
			Если ПереплатаПоСтраховой.Количество() > 0 Тогда
				ОписаниеСтраховойЧасти = ОписаниеСтраховойЧасти + ?(ЗначениеЗаполнено(ОписаниеСтраховойЧасти),Символы.ПС,"") + "Переплата выявлена за: " + ОписаниеПереплатыЗадолженности(ПереплатаПоСтраховой, ТекущийОтчетныйПериодПерсучетаПФР);
			КонецЕсли;
			РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждениеСтраховая,ЭлементыФормы.ПолеКартинкиПредупреждениеСтраховая, ОписаниеСтраховойЧасти, "СообщениеОПроблемах");
		КонецЕсли;
		Если ПереплатаПоНакопительной.Количество() = 0 И НедоплатаПоНакопительной.Количество() = 0 Тогда
			РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждениеНакопительная,ЭлементыФормы.ПолеКартинкиПредупреждениеНакопительная, "Задолженность либо переплата за предыдущие месяцы отсутствуют!", "Информация");
		Иначе
			ОписаниеНакопительнойЧасти = "";
			Если НедоплатаПоНакопительной.Количество() > 0 Тогда
				ОписаниеНакопительнойЧасти = "Задолженность выявлена за: " + ОписаниеПереплатыЗадолженности(НедоплатаПоНакопительной, ТекущийОтчетныйПериодПерсучетаПФР);
			КонецЕсли;
			Если ПереплатаПоНакопительной.Количество() > 0 Тогда
				ОписаниеНакопительнойЧасти = ОписаниеНакопительнойЧасти + ?(ЗначениеЗаполнено(ОписаниеНакопительнойЧасти),Символы.ПС,"") + "Переплата выявлена за: " + ОписаниеПереплатыЗадолженности(ПереплатаПоНакопительной, ТекущийОтчетныйПериодПерсучетаПФР);
			КонецЕсли;
			РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждениеНакопительная,ЭлементыФормы.ПолеКартинкиПредупреждениеНакопительная, ОписаниеНакопительнойЧасти, "СообщениеОПроблемах");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьОстаткиПФРТекущегоПериода()
    Если ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.УплатаПФР Тогда
		СтруктураОстатков = ТекущиеОстатки(Организация, Дата, МесяцРасчетногоПериода, ВидПлатежа, Проведен, Ссылка, ДатаПлатежа);
		мОстатокПФРСтраховая = СтруктураОстатков.ПФРСтраховая;
	 	мОстатокПФРНакопительная = СтруктураОстатков.ПФРНакопительная;
	КонецЕсли;
КонецПроцедуры

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Если ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.Начисление Тогда
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.Начисление;
		ДоступныеЗначения = ЭлементыФормы.ВидПлатежа.ДоступныеЗначения;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.УплатаПФР Тогда
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.Уплата;
		ДоступныеЗначения = ЭлементыФормы.ВидПлатежа1.ДоступныеЗначения;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.УплатаФСС Тогда
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.УплатаФСС;
		ДоступныеЗначения = ЭлементыФормы.ВидПлатежа4.ДоступныеЗначения;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.УплатаФОМС Тогда
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.УплатаФОМС;
		ДоступныеЗначения = ЭлементыФормы.ВидПлатежа5.ДоступныеЗначения;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.УдалитьУплата Тогда
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.УстаревшиеДанные;
		ДоступныеЗначения = ЭлементыФормы.ВидПлатежа6.ДоступныеЗначения;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.ПособияПоСтрахованию Тогда
		Если МесяцРасчетногоПериода < ПроведениеРасчетов.ДатаРасширенияПеречняЛьготныхТарифовСтраховыхВзносов() Тогда
			ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.ПособияПоСтрахованию;
			ДоступныеЗначения = ЭлементыФормы.ВидПлатежа2.ДоступныеЗначения;
		Иначе
			ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.ПособияПоСтрахованию2011;
			ДоступныеЗначения = ЭлементыФормы.ВидПлатежа3.ДоступныеЗначения;
		КонецЕсли;
	КонецЕсли;

	Если ДоступныеЗначения.НайтиПоЗначению(ВидПлатежа) = Неопределено Тогда
		ВидПлатежа = ДоступныеЗначения[0].Значение
	КонецЕсли;
	
	ОбновитьОстаткиПФРТекущегоПериода();
	ОбновитьОписаниеОстатковПФРПредыдущихПериодов();
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		МассивИсключений = Новый Массив;
		МассивИсключений.Добавить("УдалитьУплата");
		
		РаботаСДиалогами.ВыбратьВидОперации(ЭтотОбъект, Отказ, МассивИсключений);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , "Продажа");
		
		Если ВидПлатежа.Пустая() Тогда
			ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.Налог
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(МесяцРасчетногоПериода) Тогда
			МесяцРасчетногоПериода = НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату())
		КонецЕсли;
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("УдалитьУплата");
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                    ВидОперации.Метаданные().ЗначенияПеречисления,
	                                    Новый Действие("ДействияФормыДействиеУстановитьОперацию"), МассивИсключений);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(МесяцРасчетногоПериода);
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	ВидыНачисленийУплат = Новый СписокЗначений;
	ВидыНачисленийУплат.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ВидыНачисленийУплат.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
	ВидыНачисленийУплат.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
	ВидыНачисленийУплат.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениСам);
	ВидыНачисленийУплат.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениАкт);
	ВидыНачисленийУплат.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Штраф);
	ЭлементыФормы.ВидПлатежа1.ДоступныеЗначения = ВидыНачисленийУплат;
	ЭлементыФормы.ВидПлатежа4.ДоступныеЗначения = ВидыНачисленийУплат;
	ЭлементыФормы.ВидПлатежа6.ДоступныеЗначения = ВидыНачисленийУплат;
	
	ВидыНачисленийУплат = Новый СписокЗначений;
	ВидыНачисленийУплат.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ВидыНачисленийУплат.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
	ВидыНачисленийУплат.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
	ЭлементыФормы.ВидПлатежа.ДоступныеЗначения = ВидыНачисленийУплат;
	ЭлементыФормы.ВидПлатежа5.ДоступныеЗначения = ВидыНачисленийУплат;
	
	ВидыРасходов = Новый СписокЗначений;
	ВидыРасходов.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда);
	ВидыРасходов.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
	ВидыРасходов.Добавить(Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
	ЭлементыФормы.ВидПлатежа2.ДоступныеЗначения = ВидыРасходов;
	ЭлементыФормы.ВидПлатежа3.ДоступныеЗначения = ВидыРасходов;
	
	УстановитьВидимость();
	
	Для каждого КнопкаМеню Из ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Кнопки Цикл
		КнопкаМеню.Пометка = ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам[КнопкаМеню.Имя]
	КонецЦикла;
		
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		Если ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.УплатаПФР Тогда
			Если Не ЗначениеЗаполнено(ДатаПлатежа) Тогда
				ТекущийЭлемент = ЭлементыФормы.ДатаПлатежа;
			Иначе
				ТекущийЭлемент = ЭлементыФормы.ПФРСтраховая;
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.УплатаФСС Тогда
			Если Не ЗначениеЗаполнено(ДатаПлатежа) Тогда
				ТекущийЭлемент = ЭлементыФормы.ДатаПлатежа4;
			Иначе
				ТекущийЭлемент = ЭлементыФормы.ФСС;
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.УплатаФОМС Тогда
			Если Не ЗначениеЗаполнено(ДатаПлатежа) Тогда
				ТекущийЭлемент = ЭлементыФормы.ДатаПлатежа5;
			Иначе
				ТекущийЭлемент = ЭлементыФормы.ФФОМС;
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.Начисление Тогда
			Если Не ЗначениеЗаполнено(ДатаПлатежа) Тогда
				ТекущийЭлемент = ЭлементыФормы.ДатаПлатежа1;
			Иначе
				ТекущийЭлемент = ЭлементыФормы.ПФРСтраховая1;
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.УдалитьУплата Тогда
			Если Не ЗначениеЗаполнено(ДатаПлатежа) Тогда
				ТекущийЭлемент = ЭлементыФормы.ДатаПлатежа6;
			Иначе
				ТекущийЭлемент = ЭлементыФормы.ПФРСтраховая2;
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.ПособияПоСтрахованию Тогда
			Если Не ЗначениеЗаполнено(ДатаПлатежа) Тогда
				ТекущийЭлемент = ЭлементыФормы.ДатаПлатежа3;
			Иначе
				ТекущийЭлемент = ЭлементыФормы.ФСС4;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
 
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Если ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.Уплата Тогда
		Описание = "Регистрируется переплата за " + Формат(МесяцРасчетногоПериода,"ДФ='MMMM yyyy'") + " г.!";
		ЭлементыФормы.НадписьКомментарийПлатежаСтраховая.Заголовок = ?(ПФРСтраховая > мОстатокПФРСтраховая, Описание, "");
		ЭлементыФормы.НадписьКомментарийПлатежаНакопительная.Заголовок = ?(ПФРНакопительная > мОстатокПФРНакопительная, Описание, "");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.УплатаПФР
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.УплатаФОМС
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.УплатаФСС Тогда

		ЭлементыФормы.ДействияФормы.Кнопки.Заполнить.Кнопки.ЗаполнитьПоОстаткамРасчетов.Доступность = Истина;
		ЭлементыФормы.ДействияФормы.Кнопки.Заполнить.Кнопки.ЗаполнитьПоУплатам.Доступность = Истина;
		
	Иначе
		
		ЭлементыФормы.ДействияФормы.Кнопки.Заполнить.Кнопки.ЗаполнитьПоОстаткамРасчетов.Доступность = Ложь;
		ЭлементыФормы.ДействияФормы.Кнопки.Заполнить.Кнопки.ЗаполнитьПоУплатам.Доступность = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		Если ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам[Кнопка.Имя] Тогда
			Возврат;
		КонецЕсли; 
		ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам[Кнопка.Имя];
	Иначе
		Возврат;
	КонецЕсли;
	
	Для каждого КнопкаМеню Из ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Кнопки Цикл
		КнопкаМеню.Пометка	= КнопкаМеню.Имя = Кнопка.Имя;
	КонецЦикла;
	
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	УстановитьВидимость();

	Если ВидОперации = Перечисления.ВидыОперацийРасчетыПоСтраховымВзносам.ПособияПоСтрахованию Тогда
		Если (ПФРСтраховая + ПФРНакопительная + ФФОМС + ТФОМС + ПФРПоДополнительномуТарифу) <> 0 Тогда
			ПФРСтраховая = 0;
			ПФРНакопительная = 0;		
			ФФОМС = 0;
			ТФОМС = 0;
			ПФРПоДополнительномуТарифу = 0;		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;
	ДатаПлатежа = Дата;
	
	ОбновитьОстаткиПФРТекущегоПериода();
	ОбновитьОписаниеОстатковПФРПредыдущихПериодов();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
  	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении реквизита Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	ОбновитьОстаткиПФРТекущегоПериода();
	ОбновитьОписаниеОстатковПФРПредыдущихПериодов();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура МесяцРасчетногоПериодаПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, МесяцРасчетногоПериода);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(МесяцРасчетногоПериода);
	УстановитьВидимость();
	
КонецПроцедуры // МесяцРасчетногоПериодаПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура МесяцРасчетногоПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	МесяцРасчетногоПериода = ДобавитьМесяц(МесяцРасчетногоПериода, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(МесяцРасчетногоПериода);
	УстановитьВидимость();
	
КонецПроцедуры // МесяцРасчетногоПериодаРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура МесяцРасчетногоПериодаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // МесяцРасчетногоПериодаОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура МесяцРасчетногоПериодаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, МесяцРасчетногоПериода, ЭтаФорма);
	УстановитьВидимость();
	
КонецПроцедуры // МесяцРасчетногоПериодаНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура МесяцРасчетногоПериодаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // МесяцРасчетногоПериодаАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура МесяцРасчетногоПериодаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // МесяцРасчетногоПериодаОкончаниеВводаТекста()

Процедура ДатаПлатежаПриИзменении(Элемент)
	ОбновитьОстаткиПФРТекущегоПериода();
КонецПроцедуры

Процедура ВидПлатежаПриИзменении(Элемент)
	ОбновитьОстаткиПФРТекущегоПериода();
	ОбновитьОписаниеОстатковПФРПредыдущихПериодов();
КонецПроцедуры

Процедура КнопкаЗаполнитьНажатие(Элемент)
	
	Отказ = Ложь;

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация!", СтатусСообщения.Важное );		
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МесяцРасчетногоПериода) Тогда
		Сообщить("Не указан месяц расчетного периода, за который производится уплата!", СтатусСообщения.Важное );
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПлатежа) Тогда
		Сообщить("Не указан вид расчетов!", СтатусСообщения.Важное );
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ ЗаписатьДокументОтменивПроведение("заполнить") Тогда
		Возврат;
	КонецЕсли; 
	
	Если (ПФРСтраховая + ПФРНакопительная + ФСС + ФССЕНВД + ФФОМС + ТФОМС + ФССНесчастныеСлучаи + ПФРПоДополнительномуТарифу+ ПФРНаДоплатуКПенсииШахтерам) <> 0 Тогда
		ТекстВопроса = "Перед заполнением документ будет очищен. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ПФРСтраховая = 0;
		ПФРНакопительная = 0;
		ФСС = 0;
		ФССЕНВД = 0;
		ФФОМС = 0;
		ТФОМС = 0;
		ФССНесчастныеСлучаи = 0;
		ПФРПоДополнительномуТарифу = 0;		
		ПФРНаДоплатуКПенсииШахтерам = 0;
	КонецЕсли;
	
	Автозаполнение();	
КонецПроцедуры

Функция ЗаписатьДокументОтменивПроведение(Действие = "заполнить")

	Если Проведен Тогда
		
		Если Вопрос("Автоматически " + Действие +" документ можно только после отмены его проведения. Выполнить отмену проведения документа?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
		
	ИначеЕсли Модифицированность ИЛИ ЭтоНовый() Тогда
		
		Если Вопрос("Автоматически " + Действие +" документ можно только после его записи. Записать?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
Процедура ДействияФормыЗаполнитьПоУплатам(Кнопка)

	
	Отказ = Ложь;

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация!", СтатусСообщения.Важное );		
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МесяцРасчетногоПериода) Тогда
		Сообщить("Не указан месяц расчетного периода, за который производится уплата!", СтатусСообщения.Важное );
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПлатежа) Тогда
		Сообщить("Не указан вид расчетов!", СтатусСообщения.Важное );
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ ЗаписатьДокументОтменивПроведение("заполнить") Тогда
		Возврат;
	КонецЕсли; 
	
	Если (ПФРСтраховая + ПФРНакопительная + ФСС + ФССЕНВД + ФФОМС + ТФОМС + ФССНесчастныеСлучаи + ПФРПоДополнительномуТарифу+ ПФРНаДоплатуКПенсииШахтерам) <> 0 Тогда
		ТекстВопроса = "Перед заполнением документ будет очищен. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ПФРСтраховая = 0;
		ПФРНакопительная = 0;
		ФСС = 0;
		ФССЕНВД = 0;
		ФФОМС = 0;
		ТФОМС = 0;
		ФССНесчастныеСлучаи = 0;
		ПФРПоДополнительномуТарифу = 0;		
		ПФРНаДоплатуКПенсииШахтерам = 0;
	КонецЕсли;
	
	АвтозаполнениеПоУплатам();	
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

