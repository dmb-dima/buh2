Перем мКэшВидовСубконтоПоСчетам;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Дополняет структуру шапки документа значениями, требуемыми для проведения
//
Процедура ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента, Отказ)
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента, Отказ);
	
КонецПроцедуры	

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, СчетСписанияНДС");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуСписания(РезультатЗапроса)

	ТаблицаСписания = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаСписания;

КонецФункции // ПодготовитьТаблицуПоОплатам()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСостав(ТаблицаВосстановления, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, Поставщик, СчетФактура, СтавкаНДС, СчетУчетаНДС"); 
	
	// Используем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаВосстановления, Отказ, Заголовок);
	
	Если ТаблицаВосстановления.Количество() =0 Тогда
		Возврат;
	КонецЕсли; 
	
	ПроводитьДокументПоРазделуУчета_НДС = ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата);
	
	Если ПроводитьДокументПоРазделуУчета_НДС 
		И НЕ СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		//////////////////////////////////////////////////////
		// Сторнирование расхода по регистру НДС предъявленный
		ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВосстановления, ТаблицаДвижений_НДСПредъявленный);
		ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСсписанНаРасходы,"Событие");
		ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"ДатаСобытия");
		
		Движения.НДСПредъявленный.мПериод 		   = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ВыполнитьРасход();
		// Сторнирование записей книги покупок
		/////////////////////////////////////////////////
		
	КонецЕсли;
	Для Каждого Строка Из ТаблицаВосстановления Цикл

		Если (Строка.СуммаБезНДС = 0) и (Строка.НДС = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		/////////////////////////////////////////////////
		// Формирование проводки по восстановлению НДС
		Если (Строка.НДС <> 0) Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Списан НДС";

			Проводка.СчетДт       = СтруктураШапкиДокумента.СчетСписанияНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоСписанияНДС1,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка.СчетДт, мКэшВидовСубконтоПоСчетам));
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоСписанияНДС2,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка.СчетДт, мКэшВидовСубконтоПоСчетам));
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоСписанияНДС3,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка.СчетДт, мКэшВидовСубконтоПоСчетам));
			
			Проводка.СчетКт       = Строка.СчетУчетаНДС; //19.XX
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Строка.Поставщик,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка.СчетКт, мКэшВидовСубконтоПоСчетам));
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", Строка.СчетФактура,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка.СчетКт, мКэшВидовСубконтоПоСчетам));
			Проводка.Сумма        = Строка.НДС;
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Проводка.Сумма, , , , , , Проводка);
			
		КонецЕсли; 
		// Формирование проводки по восстановлению НДС
		/////////////////////////////////////////////////

	КонецЦикла; // Пока Выборка.Следующий() Цикл
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	Перем СтруктураШапкиДокумента;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",					"Ссылка.Организация");
	СтруктураПолей.Вставить("Поставщик",					"Поставщик");
	СтруктураПолей.Вставить("СчетФактура",					"СчетФактура");
	СтруктураПолей.Вставить("СчетФактураДоговорКонтрагента","СчетФактура.ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВидЦенности",					"ВидЦенности");
	СтруктураПолей.Вставить("СтавкаНДС",					"СтавкаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС",					"СчетУчетаНДС");
	СтруктураПолей.Вставить("ДатаОплаты",					"ДатаОплаты");
	СтруктураПолей.Вставить("ДокументОплаты",				"ДокументОплаты");
	СтруктураПолей.Вставить("СуммаБезНДС",					"СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",							"НДС");

	РезультатЗапроса = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураПолей);
	ТаблицаСписания = ПодготовитьТаблицуСписания(РезультатЗапроса);
	
	ПроверитьЗаполнениеТабличнойЧастиСостав(ТаблицаСписания, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаСписания, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения(


Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
КонецПроцедуры

