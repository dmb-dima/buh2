////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ОткрыватьНастройкуДвижений;

Перем ОтражатьВНалоговомУчете;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает список значений доступных способов амортизации для бух. учета
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
Функция ПолучитьСписокСпособовАмортизацииБУ() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.Линейный);
	
	Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка);
	КонецЕсли;
	
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции);
	
	Возврат СписокПеречисления;

КонецФункции // ПолучитьСписокСпособовАмортизацииБУ()

Процедура ЗаполнитьСчетаУчета(БезВопросов = Истина)

	Если НематериальныйАктив.ВидОбъектаУчета <> ВидОбъектаУчета Тогда
		НематериальныйАктив = Неопределено;
	КонецЕсли; 
	
	Если не БезВопросов Тогда
		Текст = "Установить значения счетов учета, используемые по умолчанию?";
		Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		СчетНачисленияАмортизации    = ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов;
		СчетУчета                    = ПланыСчетов.Хозрасчетный.НематериальныеАктивыОрганизации;
		СчетУчетаВнеоборотногоАктива = ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов;
		
	Иначе
		СчетНачисленияАмортизации      = Неопределено;
		СчетУчета                    = ПланыСчетов.Хозрасчетный.РасходыНаНИОКР;
		СчетУчетаВнеоборотногоАктива = ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Возвращает сумму вложений во внеоборотные активы 
// по данным бухгалтерского учета.
//
Функция СтоимостьНМА_БУ(СчетУчета);
	
	Подразделение = Неопределено;
	
	// {ОбособленныеПодразделения
	Подразделение = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НМА",            НематериальныйАктив);
	Запрос.УстановитьПараметр("Счет",           СчетУчета);
	Запрос.УстановитьПараметр("Дата",           Новый Граница(КонецМесяца(Дата)));
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("Подразделение",  Подразделение);
	Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	ИначеЕсли ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
		Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР);
	КонецЕсли;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет = &Счет,
	|			&ВидСубконто,
	|			Субконто1 = &НМА
	|				И Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL)) КАК ХозрасчетныйОстатки";
				   
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаОстатков.Количество() > 0 Тогда
		Возврат ТаблицаОстатков.Итог("СуммаОстатокДт");
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // СтоимостьНМА_БУ(СчетУчета)

// Возвращает сумму вложений во внеоборотные активы 
// по данным налогового учета (по налогу на прибыль).
//
Функция СтоимостьНМА_НУ(СчетУчета);
	
	Подразделение = Неопределено;
	
	// {ОбособленныеПодразделения
	Подразделение = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	СтруктураСтоимость = Новый Структура;
	СтруктураСтоимость.Вставить("СтоимостьНУ", 0);
	СтруктураСтоимость.Вставить("СтоимостьПР", 0);
	СтруктураСтоимость.Вставить("СтоимостьВР", 0);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НМА",            НематериальныйАктив);
	Запрос.УстановитьПараметр("Счет",           СчетУчета);
	Запрос.УстановитьПараметр("Дата",           Новый Граница(КонецМесяца(Дата)));
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("Подразделение",  Подразделение);
	Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	ИначеЕсли ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
		Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР);
	КонецЕсли;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СтоимостьНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СтоимостьПР,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СтоимостьВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет = &Счет,
	|			&ВидСубконто,
	|			Субконто1 = &НМА
	|				И Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL)) КАК ХозрасчетныйОстатки";
				   
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() > 0 Тогда

		СтруктураСтоимость.СтоимостьНУ = ТЗ.Итог("СтоимостьНУ");
		СтруктураСтоимость.СтоимостьПР = ТЗ.Итог("СтоимостьПР");
		СтруктураСтоимость.СтоимостьВР = ТЗ.Итог("СтоимостьВР");

	КонецЕсли;

	Возврат СтруктураСтоимость;
	
КонецФункции // СтоимостьНМА_НУ(СчетУчета)

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает видимость элементов формы в зависимости от вида операции и 
// взведенных флагов
//
Процедура УстановитьВидимость()

	ЭтоУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	ОСН_ФизЛицо = ОбщегоНазначения.Предприниматель(Организация, Дата);
	ОСН_Юр = (НЕ ОСН_ФизЛицо И НЕ ЭтоУСН);
	
	// зависимость объема работ от способа амортизации
	Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОбщиеСведения.Заголовок = "Нематериальный актив";
		ЭлементыФормы.НадписьНематериальныйАктив.Заголовок = "Нематериальный актив:";
		ЭлементыФормы.РамкаГруппы3.Заголовок = "Параметры амортизации";
		ЭлементыФормы.НадписьСпособОтраженияРасходов.Заголовок = "Способ отражения расходов по амортизации:";
		ЭлементыФормы.НадписьСпособПоступления.Видимость = Истина;
		ЭлементыФормы.СпособПоступления.Видимость = Истина;
		ЭлементыФормы.РамкаГруппы5.Заголовок = "Параметры амортизации";
		ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Заголовок = "Способ начисления амортизации:";
		ЭлементыФормы.РамкаГруппы7.Заголовок = "Параметры амортизации";
		ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Заголовок = "Срок полезного использования, мес.:";
		ЭлементыФормы.НадписьНачислятьАмортизациюБУ.Заголовок = "Начислять амортизацию:";
		ЭлементыФормы.НадписьНачислятьАмортизациюНУ.Заголовок = "Начислять амортизацию:";
		
		ЭлементыФормы.НадписьСрокПолезногоИспользованияНУ.Видимость = НачислятьАмортизациюНУ;
		ЭлементыФормы.СрокПолезногоИспользованияНУ.Видимость = НачислятьАмортизациюНУ;
		ЭлементыФормы.НадписьСпециальныйКоэффициентНУ.Видимость = НачислятьАмортизациюНУ И ОСН_Юр;
		ЭлементыФормы.СпециальныйКоэффициентНУ.Видимость = НачислятьАмортизациюНУ И ОСН_Юр;
		ЭлементыФормы.НадписьСчетНачисленияАмортизацииНУ.Видимость = НачислятьАмортизациюНУ И ОСН_Юр И НЕ НачислятьАмортизациюБУ;
		ЭлементыФормы.СчетНачисленияАмортизацииНУ.Видимость = НачислятьАмортизациюНУ И ОСН_Юр И НЕ НачислятьАмортизациюБУ;
		ЭлементыФормы.РамкаГруппы7.Видимость = НачислятьАмортизациюНУ;
		ЭлементыФормы.Надпись3.Видимость = НачислятьАмортизациюНУ;
		
		ЭлементыФормы.НадписьДатаПриобретенияИП.Видимость = ОСН_ФизЛицо;
		ЭлементыФормы.ДатаПриобретенияИП.Видимость = ОСН_ФизЛицо;
			
		Если НачислятьАмортизациюБУ Тогда
			ЭлементыФормы.РамкаГруппы5.Видимость = Истина;
			ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Видимость = Истина;
			ЭлементыФормы.СрокПолезногоИспользованияБУ.Видимость = Истина;
			ЭлементыФормы.НадписьСчетНачисленияАмортизации.Видимость = Истина;
			ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Видимость = Истина;
			ЭлементыФормы.СчетНачисленияАмортизации.Видимость = Истина;
			ЭлементыФормы.СпособНачисленияАмортизацииБУ.Видимость = Истина;
			ЭлементыФормы.ПанельПараметрыАмортизацииБУ.Видимость = НЕ СпособНачисленияАмортизацииБУ.Пустая();
			Если НЕ СпособНачисленияАмортизацииБУ.Пустая() Тогда
			    ЭлементыФормы.ПанельПараметрыАмортизацииБУ.ТекущаяСтраница = ЭлементыФормы.ПанельПараметрыАмортизацииБУ.Страницы[СпособНачисленияАмортизацииБУ.Метаданные().ЗначенияПеречисления[Перечисления.СпособыНачисленияАмортизацииНМА.Индекс(СпособНачисленияАмортизацииБУ)].Имя];
			КонецЕсли;
		Иначе
			ЭлементыФормы.РамкаГруппы5.Видимость = Ложь;
			ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Видимость = Ложь;
			ЭлементыФормы.СрокПолезногоИспользованияБУ.Видимость = Ложь;
			ЭлементыФормы.НадписьСчетНачисленияАмортизации.Видимость = Ложь;
			ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Видимость = Ложь;
			ЭлементыФормы.СчетНачисленияАмортизации.Видимость = Ложь;
			ЭлементыФормы.СпособНачисленияАмортизацииБУ.Видимость = Ложь;
			ЭлементыФормы.ПанельПараметрыАмортизацииБУ.Видимость         = Ложь;
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОбщиеСведения.Заголовок = "Расходы на НИОКР";
		ЭлементыФормы.НадписьНематериальныйАктив.Заголовок = "НИОКР:";
		ЭлементыФормы.РамкаГруппы3.Заголовок = "Параметры списания расходов";
		ЭлементыФормы.НадписьСпособОтраженияРасходов.Заголовок = "Способ отражения расходов в учете:";
		ЭлементыФормы.НадписьСпособПоступления.Видимость = Ложь;
		ЭлементыФормы.СпособПоступления.Видимость = Ложь;
		ЭлементыФормы.РамкаГруппы5.Заголовок = "Параметры списания расходов";
		ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Заголовок = "Способ списания расходов:";
		ЭлементыФормы.НадписьСчетНачисленияАмортизации.Видимость = Ложь;
		ЭлементыФормы.СчетНачисленияАмортизации.Видимость = Ложь;
		ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Заголовок = "Срок списания, мес.:";
		ЭлементыФормы.НадписьНачислятьАмортизациюБУ.Заголовок = "Списывать расходы:";
		ЭлементыФормы.РамкаГруппы7.Заголовок = "Параметры списания расходов";
		ЭлементыФормы.НадписьНачислятьАмортизациюНУ.Заголовок = "Списывать расходы:";
		
		ЭлементыФормы.НадписьСрокПолезногоИспользованияНУ.Заголовок = "Срок списания, мес.:";
		ЭлементыФормы.НадписьСрокПолезногоИспользованияНУ.Видимость = НачислятьАмортизациюНУ;
		ЭлементыФормы.СрокПолезногоИспользованияНУ.Видимость = НачислятьАмортизациюНУ;
		ЭлементыФормы.РамкаГруппы7.Видимость = НачислятьАмортизациюНУ;
		ЭлементыФормы.Надпись3.Видимость = НачислятьАмортизациюНУ;
		
		ЭлементыФормы.НадписьДатаПриобретенияИП.Видимость = ОСН_ФизЛицо;
		ЭлементыФормы.ДатаПриобретенияИП.Видимость = ОСН_ФизЛицо;

		Если НачислятьАмортизациюБУ Тогда

			ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Видимость  = Истина;
			ЭлементыФормы.СрокПолезногоИспользованияБУ.Видимость         = Истина;
			ЭлементыФормы.РамкаГруппы5.Видимость                         = Истина;
			ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Видимость = Истина;
			ЭлементыФормы.СпособНачисленияАмортизацииБУ.Видимость        = Истина;
			ЭлементыФормы.ПанельПараметрыАмортизацииБУ.Видимость   = НЕ СпособНачисленияАмортизацииБУ.Пустая();
			Если НЕ СпособНачисленияАмортизацииБУ.Пустая() Тогда
			    ЭлементыФормы.ПанельПараметрыАмортизацииБУ.ТекущаяСтраница = ЭлементыФормы.ПанельПараметрыАмортизацииБУ.Страницы[СпособНачисленияАмортизацииБУ.Метаданные().ЗначенияПеречисления[Перечисления.СпособыНачисленияАмортизацииНМА.Индекс(СпособНачисленияАмортизацииБУ)].Имя];
			КонецЕсли;
		Иначе
			ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Видимость  = Ложь;
			ЭлементыФормы.СрокПолезногоИспользованияБУ.Видимость         = Ложь;
			ЭлементыФормы.РамкаГруппы5.Видимость                         = Ложь;
			ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Видимость = Ложь;
			ЭлементыФормы.СпособНачисленияАмортизацииБУ.Видимость        = Ложь;
			ЭлементыФормы.ПанельПараметрыАмортизацииБУ.Видимость         = Ложь;
		КонецЕсли;

		ЭлементыФормы.НадписьСпециальныйКоэффициентНУ.Видимость    = Ложь;
		ЭлементыФормы.СпециальныйКоэффициентНУ.Видимость           = Ложь;
		ЭлементыФормы.НадписьСчетНачисленияАмортизацииНУ.Видимость = Ложь;
		ЭлементыФормы.СчетНачисленияАмортизацииНУ.Видимость        = Ложь;
	КонецЕсли;

	Если ЭтоУСН Тогда
		ЭтоРасходыУСН = НЕ НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	Иначе
		ЭтоРасходыУСН = Ложь;
	КонецЕсли;
	
	ОСН_ФизЛицо		= ОбщегоНазначения.Предприниматель(Организация, Дата);
	ОСН_ЮрЛицо		= НЕ ЭтоУСН И НЕ ОСН_ФизЛицо;
	
	Если ЭтоРасходыУСН Тогда
		ЭлементыФормы.РамкаГруппы10.Видимость 		= НЕ (Дата < Дата("20060101"));
		ЭлементыФормы.КоманднаяПанель1.Видимость 	= НЕ (Дата < Дата("20060101"));
		ЭлементыФормы.ОплатаНМА.Видимость 			= НЕ (Дата < Дата("20060101"));
		ЭлементыФормы.НадписьПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость	= НЕ (Дата < Дата("20060101"));
		ЭлементыФормы.ПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость 		= НЕ (Дата < Дата("20060101"));
	КонецЕсли;

	ОтметкаНезаполненного = (НачислятьАмортизациюБУ ИЛИ НачислятьАмортизациюНУ);
	ЭлементыФормы.СпособОтраженияРасходов.АвтоОтметкаНезаполненного = ОтметкаНезаполненного;
	ЭлементыФормы.СпособОтраженияРасходов.АвтоВыборНезаполненного   = ОтметкаНезаполненного;
	ЭлементыФормы.СпособОтраженияРасходов.ОтметкаНезаполненного     = ?(ОтметкаНезаполненного, 
	                                                                    ?(НЕ ЗначениеЗаполнено(СпособОтраженияРасходов), 
	                                                                      Истина, 
	                                                                      Ложь), 
	                                                                    Ложь);
		
	// Установка видимости страниц панелей в зависимости от вида учета
	ЭлементыФормы.ОсновнаяПанель.Страницы.НалУчет.Видимость = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.ОсновнаяПанель.Страницы.УСНУчет.Видимость = ОтражатьВНалоговомУчете И ЭтоРасходыУСН;
		
	// Установка видимости полей ввода временных и постоянных разниц в зависимости
	// от поддержки положений ПБУ 18/02.
	ПБУ18 = НалоговыйУчет.ПрименениеПБУ18(Организация, Дата);
	
	ЭлементыФормы.НадписьСтоимостьПР.Видимость = ОтражатьВНалоговомУчете И ОСН_Юр И ПБУ18;
	ЭлементыФормы.СтоимостьПР.Видимость        = ОтражатьВНалоговомУчете И ОСН_Юр И ПБУ18;
	ЭлементыФормы.НадписьСтоимостьВР.Видимость = ОтражатьВНалоговомУчете И ОСН_Юр И ПБУ18;
	ЭлементыФормы.СтоимостьВР.Видимость        = ОтражатьВНалоговомУчете И ОСН_Юр И ПБУ18;
	
	ЭлементыФормы.НадписьРеквизитыДокументаОплаты.Видимость = ОтражатьВНалоговомУчете И ОСН_ФизЛицо;
	ЭлементыФормы.РеквизитыДокументаОплаты.Видимость = ОтражатьВНалоговомУчете И ОСН_ФизЛицо;
	ЭлементыФормы.РассчитатьСтоимостьНУ.Видимость = ОтражатьВНалоговомУчете И ОСН_Юр;

КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	      
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		Если ПараметрОбъектКопирования = Неопределено Тогда // если объект создан не копированием
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,,ПараметрОбъектКопирования);
			
			ОтражатьВНалоговомУчете  = Истина;
			
			ФормироватьПроводки = Истина;

			НачислятьАмортизациюБУ   = Истина;
			НачислятьАмортизациюНУ   = Истина;
			ВидОбъектаУчета          = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив;
			СпециальныйКоэффициентНУ = 1;
			ПорядокВключенияСтоимостиВСоставРасходовУСН = Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставАмортизируемогоИмущества;

			ЗаполнитьСчетаУчета();
			
		КонецЕсли;

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(ВидОбъектаУчета, ЭтотОбъект, ЭтаФорма);
	УстановитьВидимость();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
    // }ОбособленныеПодразделения
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
    // Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(ВидОбъектаУчета, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);
    
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
    

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ДействияФормыПринятиеКУчетуНематериальногоАктива(Кнопка)
	
	ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив;
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(ВидОбъектаУчета, ЭтотОбъект, ЭтаФорма);
	ЗаполнитьСчетаУчета(Ложь);
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДействияФормыПринятиеКУчетуРезультатовНИОКР(Кнопка)
	
	ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР;
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(ВидОбъектаУчета, ЭтотОбъект, ЭтаФорма);
	ЗаполнитьСчетаУчета(Ложь);
	УстановитьВидимость();
		
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
    УстановитьВидимость();
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Организация 
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
    УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СпособНачисленияАмортизации.
//
Процедура СпособНачисленияАмортизацииБУПриИзменении(Элемент)
	
	УстановитьВидимость();
	Если СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции Тогда
		ПредполагаемыйОбъемПродукцииБУ = 0;
	КонецЕсли;
	
	Если СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
		КоэффициентБУ = 0;
	Иначе
		КоэффициентБУ = 1;
	КонецЕсли;
	
КонецПроцедуры // СпособНачисленияАмортизацииПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода счета.
//
Процедура СчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СчетОбработкаВыбора()

Процедура СпособНачисленияАмортизацииБУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
 	Элемент.ДоступныеЗначения = ПолучитьСписокСпособовАмортизацииБУ();
	
КонецПроцедуры

Процедура НематериальныйАктивНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеВнеоборотнымиАктивами.ОткрытьФормуВыбораНМА(ВидОбъектаУчета, СтандартнаяОбработка, Элемент, "ПринятиеКУчетуНМА");
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля ввода "Нематериальный актив".
//
//  Проверяет соответствие выбранного вида нематериального актива
// виду операции и выдает соответствующее предупреждение.
//
Процедура НематериальныйАктивПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(НематериальныйАктив.ВидОбъектаУчета)
	     И НЕ (НематериальныйАктив.ВидОбъектаУчета = ВидОбъектаУчета) Тогда
		Сообщить("Вид выбранного объекта учета не совпадает с видом операции, указанным в документе: " + ВидОбъектаУчета, СтатусСообщения.Внимание);
	КонецЕсли;
	
КонецПроцедуры // НематериальныйАктивПриИзменении()

Процедура НачислятьАмортизациюНУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура НачислятьАмортизациюБУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РассчитатьСтоимостьНУНажатие(Элемент)
	
	СтоимостьНМА_НУ = СтоимостьНМА_НУ(СчетУчетаВнеоборотногоАктива);
	
	СтоимостьНУ = СтоимостьНМА_НУ.СтоимостьНУ;
	СтоимостьПР = СтоимостьНМА_НУ.СтоимостьПР;
	СтоимостьВР = СтоимостьНМА_НУ.СтоимостьВР;
	
КонецПроцедуры

Процедура РассчитатьСтоимостьБУНажатие(Элемент)
	
	СтоимостьБУ = СтоимостьНМА_БУ(СчетУчетаВнеоборотногоАктива);
	
	ЭтоУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	ОСН_ФизЛицо = ОбщегоНазначения.Предприниматель(Организация, Дата);
	
	Если ОСН_ФизЛицо Тогда
		СтоимостьНУ = СтоимостьБУ;
	КонецЕсли;
	
КонецПроцедуры

Процедура СпособОтраженияРасходовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеВнеоборотнымиАктивами.НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации(Элемент, Организация, СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// {ОбособленныеПодразделения
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()

// }ОбособленныеПодразделения

ОтражатьВНалоговомУчете = Истина;

