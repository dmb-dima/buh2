Перем мДатаПерехода;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "НачислятьАмортизациюБУ,
								|ОбъемПродукцииРаботДляВычисленияАмортизации,
								|СпособНачисленияАмортизацииБУ,
								|СрокПолезногоИспользованияБУ,
								|СтоимостьБУ,
								|СчетНачисленияАмортизации,
								|СчетУчета,
								|СчетУчетаВнеоборотногоАктива
								|";

	мСтрокаРеквизитыНалУчета =  "НачислятьАмортизациюНУ,
								|СпециальныйКоэффициентНУ,
								|СрокПолезногоИспользованияНУ,
								|СтоимостьНУ
								|";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(Реквизиты,СтруктураШапкиДокумента)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СтоимостьБУ,СчетУчетаВнеоборотногоАктива,СчетУчета";

	Если СтруктураШапкиДокумента.НачислятьАмортизациюБУ Тогда
		Реквизиты = Реквизиты + ",СпособНачисленияАмортизацииБУ,СрокПолезногоИспользованияБУ";

		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ) Тогда

			Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
				Реквизиты = Реквизиты + ",ОбъемПродукцииРаботДляВычисленияАмортизации";
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
				Реквизиты = Реквизиты + ",КоэффициентБУ";
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Реквизиты = Реквизиты + ",СтоимостьНУ";  //СчетУчетаНУВнеоборотногоАктива
	
		Если СтруктураШапкиДокумента.НачислятьАмортизациюНУ Тогда
			
			Реквизиты = Реквизиты + ",СрокПолезногоИспользованияНУ";
			
			Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
				Реквизиты = Реквизиты + ",СпециальныйКоэффициентНУ";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.НачислятьАмортизациюБУ 
	 ИЛИ СтруктураШапкиДокумента.НачислятьАмортизациюНУ Тогда
	 
		Реквизиты = Реквизиты + ",СпособОтраженияРасходов";
		
		Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
			Реквизиты = Реквизиты + ",СчетНачисленияАмортизации";
		КонецЕсли;
	 
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения регл. реквизитов шапки
//
Процедура ПроверитьЗаполнениеШапкиРегл(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не заполнено поле Организация", Отказ,Заголовок);
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "ВидОбъектаУчета";
	ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "НематериальныйАктив";

	ДополнитьОбязательныеРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки,СтруктураШапкиДокумента);

	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки,, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	Если ВидОбъектаУчета <> Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		СтруктураОбязательныхПолей.Вставить("НематериальныйАктив", "Не заполнено значение реквизита ""НИОКР""!");
		Если СтруктураШапкиДокумента.НачислятьАмортизациюБУ Тогда
			СтруктураОбязательныхПолей.Вставить("СпособНачисленияАмортизацииБУ", "Не заполнено значение реквизита ""Способ списания расходов (БУ)""!");
			СтруктураОбязательныхПолей.Вставить("СрокПолезногоИспользованияБУ", "Не заполнено значение реквизита ""Срок списания (БУ), мес.""!");
		КонецЕсли;
	КонецЕсли;

	// Проверим реквизиты со сложным порядком проверки
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
		Если СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
			Если (СтруктураШапкиДокумента.СтоимостьНУ + СтруктураШапкиДокумента.СтоимостьПР + СтруктураШапкиДокумента.СтоимостьВР) = 0 Тогда
				ОбщегоНазначения.ОшибкаПриПроведении("Не заполнены значения реквизитов ""Первоначальная стоимость (НУ)"", ""Первоначальная стоимость (ПР)"", ""Первоначальная стоимость (ВР)""!", Отказ, Заголовок);
			Конецесли;
		Иначе
			СтруктураОбязательныхПолей.Вставить("СтоимостьНУ");
		КонецЕсли;
			
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  Таблица			        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаНМА(ТаблицаПоСтрокамНМА, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (СтруктураШапкиДокумента.Дата < мДатаПерехода) Тогда
		ТаблицаПоСтрокамНМА.Очистить();
		Возврат;
	КонецЕсли;
		
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	ДатаПереходаНаУСН = УчетнаяПолитикаНУ["ДатаПереходаНаУСН"];
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДатаОплаты, СуммаОплаты");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОплатаНМА", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Для Каждого СтрокаНМА Из ТаблицаПоСтрокамНМА Цикл
		ДатаВвода		 = СтруктураШапкиДокумента.Дата;
		ДатаПриобретенияНМА = СтруктураШапкиДокумента.ДатаПриобретения;
		
		Если (ДатаПриобретенияНМА < мДатаПерехода) И 
			(ДатаПереходаНаУСН < ДатаПриобретенияНМА) И 
			(СтрокаНМА.ДатаОплаты < мДатаПерехода) Тогда
			
			ТекстСообщения = "По "+ Строка(НематериальныйАктив) + " оплата от "+СтрокаНМА.ДатаОплаты+" не зарегистрирована. Расходы по данной оплате принимаются в порядке, действовавшем до 01.01.2006 г.";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
			СтрокаНМА.СуммаОплаты = 0;
		КонецЕсли;
				
	КонецЦикла;	
		
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура формирования движений регистров
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаОплатНМА, Отказ,Заголовок)

	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаОплатНМА, Отказ,Заголовок);
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, НематериальныйАктив, Отказ, Заголовок);
	
КонецПроцедуры // ФормированиеДвижений()

// Процедура формирования движений регл. регистров
Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаОплатНМА, Отказ,Заголовок)

	ЭтоНМА = (НематериальныйАктив.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив);
	
	// Движения по регистру Состояние
	Движение = Движения.СостоянияНМАОрганизаций.Добавить();
	Движение.Период              = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация         = СтруктураШапкиДокумента.Организация;
	Движение.Состояние           = Перечисления.ВидыСостоянийНМА.ПринятКУчету;
	
	СостояниеНМА                 = Движения.СостоянияНМАОрганизаций;
	
	УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийНМА(СтруктураШапкиДокумента.Организация,
	                                                                        СтруктураШапкиДокумента.Дата, 
	                                                                        СостояниеНМА,
	                                                                        Отказ,
	                                                                        Заголовок);
	
	Если Отказ Тогда
	    // НМА уже было принят к учету ранее.
		// Повторное принятие к учету НМА недопустимо.
		Возврат;
	КонецЕсли; 

	// Проводки.
	Проводки = Движения.Хозрасчетный;

	Проводка = Проводки.Добавить();

	Проводка.Период      = СтруктураШапкиДокумента.Дата;
	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Сумма       = СтруктураШапкиДокумента.СтоимостьБУ;
	
	Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчета;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтруктураШапкиДокумента.НематериальныйАктив);
	
	Проводка.СчетКт          = СтруктураШапкиДокумента.СчетУчетаВнеоборотногоАктива;

	БухгалтерскийУчет.УстановитьПодразделенияПроводки(
		Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
	
	Если ЭтоНМА тогда
		Проводка.Содержание = "Принят к учету НМА";
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтруктураШапкиДокумента.НематериальныйАктив);
	Иначе
		Проводка.Содержание = "Приняты к учету расходы на НИОКР";
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР", СтруктураШапкиДокумента.НематериальныйАктив);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	
		Проводка.СуммаНУДт = СтруктураШапкиДокумента.СтоимостьНУ;
		Проводка.СуммаНУКт = СтруктураШапкиДокумента.СтоимостьНУ;
		
		Если СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
		
			Проводка.СуммаПРДт = СтруктураШапкиДокумента.СтоимостьПР;
			Проводка.СуммаПРКт = СтруктураШапкиДокумента.СтоимостьПР;
			Проводка.СуммаВРДт = СтруктураШапкиДокумента.СтоимостьВР;
			Проводка.СуммаВРКт = СтруктураШапкиДокумента.СтоимостьВР;
			
		КонецЕсли;
		
	КонецЕсли;

	// Движения по регистру СпособыОтраженияРасходов
	Движение = Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Добавить();
	Движение.Период                  = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив     = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация             = СтруктураШапкиДокумента.Организация;
	Движение.СпособОтраженияРасходов = СтруктураШапкиДокумента.СпособОтраженияРасходов;

	// Движения по регистру ПервоначальныеСведения
	Движение = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Добавить();
	Движение.Период                      = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив         = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация                 = СтруктураШапкиДокумента.Организация;
	Движение.НачислятьАмортизацию        = СтруктураШапкиДокумента.НачислятьАмортизациюБУ;
	Движение.ПервоначальнаяСтоимость     = СтруктураШапкиДокумента.СтоимостьБУ;
	Движение.СпособНачисленияАмортизации = СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ;
	Движение.СпособПоступления           = СтруктураШапкиДокумента.СпособПоступления;
	Движение.СрокПолезногоИспользования  = СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ;
	Движение.Коэффициент                 = СтруктураШапкиДокумента.КоэффициентБУ;

	Если СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции тогда
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтруктураШапкиДокумента.ОбъемПродукцииРаботДляВычисленияАмортизации;
	КонецЕсли;

	// Движения по регистру СчетаБухгалтерскогоУчета
	Движение = Движения.СчетаБухгалтерскогоУчетаНМА.Добавить();
	Движение.Период                    = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив       = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация               = СтруктураШапкиДокумента.Организация;
	Движение.СчетУчета                 = СтруктураШапкиДокумента.СчетУчета;
	Движение.СчетНачисленияАмортизации = СтруктураШапкиДокумента.СчетНачисленияАмортизации;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		// Движения по регистру ПервоначальныеСведенияНМАНалоговыйУчетУСН
		
		ПервоначальныеСведения = Движения.ПервоначальныеСведенияНМАНалоговыйУчетУСН;
		Движение = ПервоначальныеСведения.Добавить();
		
		Движение.Период                     = СтруктураШапкиДокумента.Дата;
		Движение.НематериальныйАктив        = СтруктураШапкиДокумента.НематериальныйАктив;
		Движение.Организация                = СтруктураШапкиДокумента.Организация;
		Движение.ПервоначальнаяСтоимостьУСН = СтруктураШапкиДокумента.СтоимостьУСН;
		Движение.СрокПолезногоИспользования = СтруктураШапкиДокумента.СрокПолезногоИспользованияУСН;
		Движение.ДатаПриобретения           = СтруктураШапкиДокумента.ДатаПриобретения;
		Движение.ПорядокВключенияСтоимостиВСоставРасходовУСН = СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовУСН;
		
		РегОплаты = Движения.ОплатыНМАДляУСН;

		Для Каждого Запись Из ТаблицаОплатНМА Цикл
			
			Если Запись.СуммаОплаты <> 0 Тогда
				
				СтрокаОплаты  = РегОплаты.Добавить();
				
				СтрокаОплаты.Период           = Запись.ДатаОплаты;
				СтрокаОплаты.Организация      = СтруктураШапкиДокумента.Организация;
				СтрокаОплаты.НематериальныйАктив = СтруктураШапкиДокумента.НематериальныйАктив;
				СтрокаОплаты.ДатаОплаты       = Запись.ДатаОплаты;
				СтрокаОплаты.СуммаОплаты      = Запись.СуммаОплаты;
				
			КонецЕсли;
			
		КонецЦикла;
		
	// {УчетДоходовИРасходовИП
	ИначеЕсли (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя) И (СтруктураШапкиДокумента.СтоимостьНУ <> 0) Тогда
		
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		
		Движение = Движения.ИПМПЗ.ДобавитьПриход();
		Движение.Активность                	= Истина;
		Движение.Период						= СтруктураШапкиДокумента.Дата;
		Движение.Регистратор				= Ссылка;
		Движение.ХарактерДеятельности		= ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(,,,, УчетнаяПолитикаНУ);
		Движение.НоменклатурнаяГруппа		= ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации(,,, Перечисления.ВидыМПЗ.НМА, УчетнаяПолитикаНУ);
		Движение.Номенклатура				= СтруктураШапкиДокумента.НематериальныйАктив;
		Движение.Организация				= СтруктураШапкиДокумента.Организация;
		Движение.ВидМПЗ						= Перечисления.ВидыМПЗ.НМА;
		Движение.Партия						= Ссылка;
		Движение.ДокументОплаты				= Ссылка;
		Движение.РеквизитыДокументаОплаты	= СтруктураШапкиДокумента.РеквизитыДокументаОплаты;
		Движение.Сумма						= СтруктураШапкиДокумента.СтоимостьНУ;
		
	// }УчетДоходовИРасходовИП
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
	// {УчетДоходовИРасходовИП
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя
	// }УчетДоходовИРасходовИП
	Тогда
		
		Движение = Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Добавить();
		Движение.НематериальныйАктив        = СтруктураШапкиДокумента.НематериальныйАктив;
		Движение.Организация                = СтруктураШапкиДокумента.Организация;
		Движение.Период                     = СтруктураШапкиДокумента.Дата;
		Движение.НачислятьАмортизацию       = СтруктураШапкиДокумента.НачислятьАмортизациюНУ;
		Движение.ПервоначальнаяСтоимостьНУ  = СтруктураШапкиДокумента.СтоимостьНУ;
		Движение.СрокПолезногоИспользования = СтруктураШапкиДокумента.СрокПолезногоИспользованияНУ;
				
		// {УчетДоходовИРасходовИП
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
			Движение.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный;
			Движение.ДатаПриобретения			= СтруктураШапкиДокумента.ДатаПриобретения;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		// }УчетДоходовИРасходовИП
			
			Движение = Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Добавить();
			Движение.НематериальныйАктив     = СтруктураШапкиДокумента.НематериальныйАктив;
			Движение.Организация             = СтруктураШапкиДокумента.Организация;
			Движение.Период                  = СтруктураШапкиДокумента.Дата;
			Движение.СпециальныйКоэффициент  = СтруктураШапкиДокумента.СпециальныйКоэффициентНУ;
			
		// {УчетДоходовИРасходовИП
		КонецЕсли;
		// }УчетДоходовИРасходовИП
		
	КонецЕсли;

КонецПроцедуры // ФормированиеДвиженийРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" 
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, НематериальныйАктив, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	// Разблокируется весь НДС, заблокированный до момента принятия к учету. 
	// Остатков быть не может, так как один объект НМА нельзя принять к учету частично.
	КоэффициентРаспределения = 1;
	
	// Снимается блокировка вычета после принятия к учету НМА.
	ДатаЗаписи = СтруктураШапкиДокумента.Дата;
	
	//Разблокируем полностью вычет
	//отразим погашение события ОжидаетсяВводВЭксплуатацию
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СтруктураШапкиДокумента.НематериальныйАктив);
	
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС(СтруктураШапкиДокумента,
														МассивОбъектов,
														Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию,
														Перечисления.СобытияПоНДСПокупки.ОСВведеноВЭксплуатацию,
														ДатаЗаписи,КоэффициентРаспределения, Движения, Отказ);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ,РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);

	// Проверим правильность заполнения шапки документа
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Оплата НМА".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("ДатаОплаты"      		, "ДатаОплаты");
	СтруктураПолей.Вставить("СуммаОплаты"     		, "СуммаОплаты");

	РезультатЗапросаПоСтрокам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаНМА", СтруктураПолей);
	ТаблицаОплатНМА = РезультатЗапросаПоСтрокам.Выгрузить();

	ПроверитьЗаполнениеТабличнойЧастиОплатаНМА(ТаблицаОплатНМА, СтруктураШапкиДокумента, Отказ, Заголовок);
    
	Если НЕ Отказ Тогда
	// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаОплатНМА, Отказ, Заголовок);
	КонецЕсли;


КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

мДатаПерехода = Дата("20060101");
