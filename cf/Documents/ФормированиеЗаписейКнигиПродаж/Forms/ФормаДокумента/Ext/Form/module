
// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

Перем ОткрыватьНастройкуДвижений;

Перем мТекущаяОрганизация;

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Реализация,ЭлементыФормы.КоманднаяПанельРеализация.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Авансы,ЭлементыФормы.КоманднаяПанельАвансы.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.НачисленКУплате,ЭлементыФормы.КоманднаяПанельНачисленКУплате.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Восстановлен,ЭлементыФормы.КоманднаяПанельВосстановлен.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.НеОтражаетсяВКниге,ЭлементыФормы.КоманднаяПанельНеОтражаетсяВКниге.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВосстановленПоАвансам,ЭлементыФормы.КоманднаяПанельВосстановленПоАвансам.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
             

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ДействияФормыЗаполнитьДокумент(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Реализация.Количество() > 0 
		или Авансы.Количество() >0
		или НачисленКУплате.Количество() >0
		или Восстановлен.Количество() >0
		или НеОтражаетсяВКниге.Количество() >0
		или ВосстановленПоАвансам.Количество() >0
		Тогда
		ОтветНаВопрос = Вопрос("Заполненные ранее табличные поля документа будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДокумент(, , , Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);
	
	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Реализация",				"Реализация");
	Страницы.Добавить("Авансы",					"Авансы");
	Страницы.Добавить("НачисленКУплате",		"НачисленКУплате");
	Страницы.Добавить("Восстановлен",			"Восстановлен");
	Страницы.Добавить("НеОтражаетсяВКниге",		"НеОтражаетсяВКниге");
	Страницы.Добавить("ВосстановленПоАвансам",	"ВосстановленПоАвансам");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.НДСПоВидамНачисления, Страницы,);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КоманднаяПанельРеализацияЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРазделРеализация(Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КоманднаяПанельАвансыЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРазделАвансы(Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельНачисленКУплатеЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРазделНачисленКУплате(Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельНеОтражаетсяВКнигеЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРазделНеОтражаетсяВКниге(Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельВосстановленЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРазделВосстановлен(Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельВосстановленПоАвансамЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРазделВосстановленПоАвансам(Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	УстановитьВидимостьФлагаСторнирующихЗаписей();
	
	ЭлементыФормы.Реализация0.Видимость = Не мУпрощенныйУчетНДС;
	
	ЭлементыФормы.Реализация.Колонки.Состояние.Видимость = Реализация0;
	
	ЭлементыФормы.НДСПоВидамНачисления.Страницы.Реализация.Видимость            = Не мУпрощенныйУчетНДС;
	ЭлементыФормы.НДСПоВидамНачисления.Страницы.Авансы.Видимость             	= Не Реализация0 И Не мУпрощенныйУчетНДС;
	ЭлементыФормы.НДСПоВидамНачисления.Страницы.НачисленКУплате.Видимость    	= Не Реализация0 И Не мУпрощенныйУчетНДС;
	ЭлементыФормы.НДСПоВидамНачисления.Страницы.НеОтражаетсяВКниге.Видимость 	= Не Реализация0 И Не мУпрощенныйУчетНДС;
	ЭлементыФормы.НДСПоВидамНачисления.Страницы.Восстановлен.Видимость		 	= Не Реализация0 И Не мУпрощенныйУчетНДС;
	ЭлементыФормы.НДСПоВидамНачисления.Страницы.ВосстановленПоАвансам.Видимость	= Не Реализация0;
	
	УстановитьВидимостьКолонкиДоговораКомиссии();
	
	Для Каждого КнопкаЗаполнить Из ЭлементыФормы.КоманднаяПанельРеализация.Кнопки.ПодменюЗаполнить.Кнопки Цикл
		КнопкаЗаполнить.Доступность = Не ТолькоПросмотр;
	КонецЦикла;
	
	Для Каждого КнопкаЗаполнить Из ЭлементыФормы.КоманднаяПанельАвансы.Кнопки.ПодменюЗаполнить.Кнопки Цикл
		КнопкаЗаполнить.Доступность = Не ТолькоПросмотр;
	КонецЦикла;
	
	Для Каждого КнопкаЗаполнить Из ЭлементыФормы.КоманднаяПанельНачисленКУплате.Кнопки.ПодменюЗаполнить.Кнопки Цикл
		КнопкаЗаполнить.Доступность = Не ТолькоПросмотр;
	КонецЦикла;
	
	Для Каждого КнопкаЗаполнить Из ЭлементыФормы.КоманднаяПанельВосстановлен.Кнопки.ПодменюЗаполнить.Кнопки Цикл
		КнопкаЗаполнить.Доступность = Не ТолькоПросмотр;
	КонецЦикла;
	
	Для Каждого КнопкаЗаполнить Из ЭлементыФормы.КоманднаяПанельНеОтражаетсяВКниге.Кнопки.ПодменюЗаполнить.Кнопки Цикл
		КнопкаЗаполнить.Доступность = Не ТолькоПросмотр;
	КонецЦикла;
	
	Для Каждого КнопкаЗаполнить Из ЭлементыФормы.КоманднаяПанельВосстановленПоАвансам.Кнопки.ПодменюЗаполнить.Кнопки Цикл
		КнопкаЗаполнить.Доступность = Не ТолькоПросмотр;
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимость()
  
Процедура УстановитьВидимостьФлагаСторнирующихЗаписей()
	
	ВидимостьФлага = Реализация.Найти(Истина, "ЗаписьДополнительногоЛиста") <> Неопределено;
	Если Не ВидимостьФлага И Не Реализация0 Тогда
		ВидимостьФлага = Авансы.Найти(Истина, "ЗаписьДополнительногоЛиста") <> Неопределено 
						Или ВосстановленПоАвансам.Найти(Истина, "ЗаписьДополнительногоЛиста") <> Неопределено;
	КонецЕсли;
	
	Если Не ВидимостьФлага И Не Реализация0 Тогда
		ВидимостьФлага = Авансы.Найти(Истина, "ЗаписьДополнительногоЛиста") <> Неопределено 
						Или ВосстановленПоАвансам.Найти(Истина, "ЗаписьДополнительногоЛиста") <> Неопределено
						Или НачисленКУплате.Найти(Истина, "ЗаписьДополнительногоЛиста") <> Неопределено
						Или Восстановлен.Найти(Истина, "ЗаписьДополнительногоЛиста") <> Неопределено;
	КонецЕсли;
	
	ЭлементыФормы.ФормироватьСторнирующиеЗаписиДопЛистовВручную.Видимость = ВидимостьФлага;
	
	ЭлементыФормы.Реализация.Колонки.СторнирующаяЗаписьДопЛиста.Видимость = ВидимостьФлага И ФормироватьСторнирующиеЗаписиДопЛистовВручную;
	ЭлементыФормы.Авансы.Колонки.СторнирующаяЗаписьДопЛиста.Видимость = ВидимостьФлага И ФормироватьСторнирующиеЗаписиДопЛистовВручную;
	ЭлементыФормы.НачисленКУплате.Колонки.СторнирующаяЗаписьДопЛиста.Видимость = ВидимостьФлага И ФормироватьСторнирующиеЗаписиДопЛистовВручную;
	ЭлементыФормы.ВосстановленПоАвансам.Колонки.СторнирующаяЗаписьДопЛиста.Видимость = ВидимостьФлага И ФормироватьСторнирующиеЗаписиДопЛистовВручную;
	ЭлементыФормы.Восстановлен.Колонки.СторнирующаяЗаписьДопЛиста.Видимость = ВидимостьФлага И ФормироватьСторнирующиеЗаписиДопЛистовВручную;
	
КонецПроцедуры // УстановитьВидимостьФлагаСторнирующихЗаписей()

Процедура УстановитьВидимостьКолонкиДоговораКомиссии()
	
	ВидимостьФлага = Реализация.Найти(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент, "ВидЦенности") <> Неопределено;
	ЭлементыФормы.Реализация.Колонки.ДоговорКонтрагента.Видимость = ВидимостьФлага;
	
КонецПроцедуры // УстановитьВидимостьКолонкиДоговораКомиссии()

Процедура ОбновитьПодвал()
	
	ЭлементыФормы.СуммаБезНДС1.Значение = ОбщегоНазначения.ФорматСумм(Реализация.Итог("СуммаБезНДС"));
	ЭлементыФормы.НДС1.Значение = ОбщегоНазначения.ФорматСумм(Реализация.Итог("НДС"));
	ЭлементыФормы.СуммаБезНДС2.Значение = ОбщегоНазначения.ФорматСумм(Авансы.Итог("СуммаБезНДС"));
	ЭлементыФормы.НДС2.Значение = ОбщегоНазначения.ФорматСумм(Авансы.Итог("НДС"));
	ЭлементыФормы.СуммаБезНДС3.Значение = ОбщегоНазначения.ФорматСумм(НачисленКУплате.Итог("СуммаБезНДС"));
	ЭлементыФормы.НДС3.Значение = ОбщегоНазначения.ФорматСумм(НачисленКУплате.Итог("НДС"));
	ЭлементыФормы.СуммаБезНДС4.Значение = ОбщегоНазначения.ФорматСумм(Восстановлен.Итог("СуммаБезНДС"));
	ЭлементыФормы.НДС4.Значение = ОбщегоНазначения.ФорматСумм(Восстановлен.Итог("НДС"));
	ЭлементыФормы.СуммаБезНДС5.Значение = ОбщегоНазначения.ФорматСумм(НеОтражаетсяВКниге.Итог("СуммаБезНДС"));
	ЭлементыФормы.НДС5.Значение = ОбщегоНазначения.ФорматСумм(НеОтражаетсяВКниге.Итог("НДС"));
	ЭлементыФормы.СуммаБезНДС6.Значение = ОбщегоНазначения.ФорматСумм(ВосстановленПоАвансам.Итог("СуммаБезНДС"));
	ЭлементыФормы.НДС6.Значение = ОбщегоНазначения.ФорматСумм(ВосстановленПоАвансам.Итог("НДС"));
	
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(Реализация.Итог("НДС")
																			+ Авансы.Итог("НДС") 
																			+ НачисленКУплате.Итог("НДС") 
																			+ Восстановлен.Итог("НДС")
																			+ ВосстановленПоАвансам.Итог("НДС")
																			+ НеОтражаетсяВКниге.Итог("НДС"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ 

Процедура ОпределитьУпрощенныйУчетНДС()
	
	мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	Если мУпрощенныйУчетНДС И Реализация0 Тогда
		Реализация0 = Ложь;
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Организация = мТекущаяОрганизация Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;

	Если Реализация.Количество() > 0
		Или Авансы.Количество() > 0 
		Или НачисленКУплате.Количество() > 0 
		Или НеОтражаетсяВКниге.Количество() > 0 
		Или Восстановлен.Количество() > 0 
		Или ВосстановленПоАвансам.Количество() > 0 Тогда

		Если Вопрос("Необходимо очистить табличные части. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Реализация.Очистить();
			Авансы.Очистить();
			НачисленКУплате.Очистить();
			НеОтражаетсяВКниге.Очистить();
			Восстановлен.Очистить();
			ВосстановленПоАвансам.Очистить();
		Иначе
			Организация = мТекущаяОрганизация;
		КонецЕсли;

	КонецЕсли;
	
	мТекущаяОрганизация = Организация;
	
	ОпределитьУпрощенныйУчетНДС();
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура СтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ЭлементыФормы.Реализация.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.Реализация.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.Реализация.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля дата 
// в диалоге документа.
//
Процедура ДатаПриИзменении(Элемент)

	УстановитьВремя(РежимАвтоВремя.Последним);
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры

Процедура ФормироватьСторнирующиеЗаписиДопЛистовВручнуюПриИзменении(Элемент)
	
	Если Не ФормироватьСторнирующиеЗаписиДопЛистовВручную 
		И (Реализация.Найти(Истина, "СторнирующаяЗаписьДопЛиста") <> Неопределено 
		Или Авансы.Найти(Истина, "СторнирующаяЗаписьДопЛиста") <> Неопределено) Тогда
		
		ОтветНаВопрос = Вопрос("Удалить строки с установленным флагом «Сторнирующая запись доп. листа» из табличных частей?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			СтруктураОтбора = Новый Структура("СторнирующаяЗаписьДопЛиста", Истина);
			СтрокиКУдалению = Реализация.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Реализация.Удалить(СтрокаКУдалению);
			КонецЦикла;
			СтрокиКУдалению = Авансы.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Авансы.Удалить(СтрокаКУдалению);
			КонецЦикла;
			СтрокиКУдалению = ВосстановленПоАвансам.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ВосстановленПоАвансам.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура Реализация0ПриИзменении(Элемент)

	Если Реализация.Количество() > 0
		Или Авансы.Количество() > 0 
		Или НачисленКУплате.Количество() > 0 
		Или НеОтражаетсяВКниге.Количество() > 0 
		Или Восстановлен.Количество() > 0 
		Или ВосстановленПоАвансам.Количество() > 0 Тогда

		Если Вопрос("Необходимо очистить табличные части. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Реализация.Очистить();
			Авансы.Очистить();
			НачисленКУплате.Очистить();
			НеОтражаетсяВКниге.Очистить();
			Восстановлен.Очистить();
			ВосстановленПоАвансам.Очистить();
		Иначе
			Реализация0 = НЕ Реализация0;
		КонецЕсли;

	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	     
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , "Продажа");

		УстановитьВремя(РежимАвтоВремя.Последним);

		НачалоПериода = НачалоМесяца(Дата); 
		КонецПериода  = КонецМесяца(Дата);

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	мВестиУчетНДС = УчетНДС.ПроводитьПоРазделуУчетаНДС(Дата);
	
	мТекущаяДатаДокумента        = Дата;
	мТекущаяОрганизация = Организация;
	мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	УстановитьВидимость();
	
	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Реализация",			"Реализация");
	Страницы.Добавить("Авансы",				"Авансы");
	Страницы.Добавить("НачисленКУплате",	"НачисленКУплате");
	Страницы.Добавить("Восстановлен",		"Восстановлен");
	Страницы.Добавить("НеОтражаетсяВКниге",	"НеОтражаетсяВКниге");
	Страницы.Добавить("ВосстановленПоАвансам",	"ВосстановленПоАвансам");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.НДСПоВидамНачисления, Страницы,);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,,ЭлементыФормы.НДСПоВидамНачисления.ТекущаяСтраница,Страницы);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры

Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);
	Оповестить("РегОперация", ?(Проведен, Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено, Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено), "НДС");
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если НЕ ЗначениеЗаполнено(Организация) Тогда

		Предупреждение("Не указана организация. Операция не записана.");

		Отказ = Истина;

		ТекущийЭлемент = ЭлементыФормы.Организация;

		Возврат;

	КонецЕсли;

КонецПроцедуры

Процедура СоставДокументОплатыПриИзменении(Элемент)
	ТД = ЭлементыФормы.Реализация.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТД.ДокументОплаты) Тогда
		ТД.ДатаОплаты = ТД.ДокументОплаты.Дата;
	КонецЕсли;  
КонецПроцедуры

Процедура СуммаБезНДСПриИзменении(Элемент)
	// Рассчитать реквизиты табличной части.
	ЭлементыФормы.Реализация.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.Реализация.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.Реализация.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	СтраницаПанели  = ЭлементыФормы.НДСПоВидамНачисления.Страницы;
	
	СтраницаПанели.Реализация.Заголовок = "По реализации ("   + ДокументОбъект.Реализация.Количество() + " поз.)";
	СтраницаПанели.Авансы.Заголовок = "С авансов (" + ДокументОбъект.Авансы.Количество() + " поз.)";
	СтраницаПанели.НачисленКУплате.Заголовок = "Начислен к уплате (" + ДокументОбъект.НачисленКУплате.Количество() + " поз.)";
	СтраницаПанели.НеОтражаетсяВКниге.Заголовок = "Не отражается в книге (" + ДокументОбъект.НеОтражаетсяВКниге.Количество() + " поз.)";
	СтраницаПанели.Восстановлен.Заголовок = "Восстановление по другим операциям (" + ДокументОбъект.Восстановлен.Количество() + " поз.)";
	СтраницаПанели.ВосстановленПоАвансам.Заголовок = "Восстановление по авансам (" + ДокументОбъект.ВосстановленПоАвансам.Количество() + " поз.)";
	
	ОбновитьПодвал();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТЧ РЕАЛИЗАЦИЯ

Процедура РеализацияСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТД = ЭлементыФормы.Реализация.ТекущиеДанные;
	Если ТД = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Организация,Контрагент", Организация,ТД.Покупатель);
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "Реализация");

КонецПроцедуры

Процедура РеализацияДокументОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТД = ЭлементыФормы.Реализация.ТекущиеДанные;
	Если ТД = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Организация,Контрагент", Организация,ТД.Покупатель);
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "Реализация");
КонецПроцедуры

Процедура РеализацияСостояниеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	СписокВыбора.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	
	РаботаСДиалогами.УстановитьСписокПоляВыбора(Элемент, СписокВыбора);
	
КонецПроцедуры

Процедура РеализацияСобытиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	Если Не Реализация0 Тогда
		СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
		СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
		СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Иначе
		СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0);
		СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
	КонецЕсли;
	РаботаСДиалогами.УстановитьСписокПоляВыбора(Элемент, СписокВыбора);
	
КонецПроцедуры

Процедура РеализацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.КорректируемыйПериод.ОтметкаНезаполненного = (ДанныеСтроки.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(ДанныеСтроки.КорректируемыйПериод));
	ОформлениеСтроки.Ячейки.ДоговорКонтрагента.ОтметкаНезаполненного = (ДанныеСтроки.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент и НЕ ЗначениеЗаполнено(ДанныеСтроки.ДоговорКонтрагента));
	
КонецПроцедуры

Процедура РеализацияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьВидимостьФлагаСторнирующихЗаписей();
	
КонецПроцедуры

Процедура РеализацияВидЦенностиПриИзменении(Элемент)
	Если Элемент.Значение = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент 
		и не ЭлементыФормы.Реализация.Колонки.ДоговорКонтрагента.Видимость Тогда
		ЭлементыФормы.Реализация.Колонки.ДоговорКонтрагента.Видимость = Истина;
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ АВАНСЫ

Процедура АвансыСобытиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	РаботаСДиалогами.УстановитьСписокПоляВыбора(Элемент, СписокВыбора);
	
КонецПроцедуры

Процедура АвансыСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.Авансы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Организация, Контрагент", Организация, ТекущиеДанные.Покупатель);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		Отбор.Вставить( "ДокументыПоДоговоруКонтрагента", ТекущиеДанные.ДоговорКонтрагента);
	КонецЕсли;

	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "Авансы");
	
КонецПроцедуры

Процедура АвансыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.КорректируемыйПериод.ОтметкаНезаполненного = (ДанныеСтроки.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(ДанныеСтроки.КорректируемыйПериод));
	
КонецПроцедуры

Процедура АвансыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьВидимостьФлагаСторнирующихЗаписей();
	
КонецПроцедуры

Процедура АвансыСтавкаНДСПриИзменении(Элемент)
		// Рассчитать реквизиты табличной части.
	ЭлементыФормы.Авансы.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.Авансы.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.Авансы.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

Процедура АвансыСуммаБезНДСПриИзменении(Элемент)
		// Рассчитать реквизиты табличной части.
	ЭлементыФормы.Авансы.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.Авансы.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.Авансы.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

Процедура АвансыДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Авансы.ТекущиеДанные;
	
	СПокупателем  	= Новый СписокЗначений;
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.Покупатель, 
			СтрокаТабличнойЧасти.ДоговорКонтрагента, СПокупателем, СтандартнаяОбработка);

КонецПроцедуры

Процедура АвансыПокупательПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Авансы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ДоговорКонтрагента.Владелец <> СтрокаТабличнойЧасти.Покупатель Тогда
		СтрокаТабличнойЧасти.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТЧ НАЧИСЛЕН К УПЛАТЕ

Процедура НачисленКУплатеСобытиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	РаботаСДиалогами.УстановитьСписокПоляВыбора(Элемент, СписокВыбора);
	
КонецПроцедуры

Процедура НачисленКУплатеСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.НачисленКУплате.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Организация", Организация);
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "НачисленКУплате");
		
КонецПроцедуры

Процедура НачисленКУплатеДокументОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.НачисленКУплате.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Организация", Организация);
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "НачисленКУплате");
	
КонецПроцедуры

Процедура НачисленКУплатеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.КорректируемыйПериод.ОтметкаНезаполненного = (ДанныеСтроки.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(ДанныеСтроки.КорректируемыйПериод));
	
КонецПроцедуры

Процедура НачисленКУплатеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	УстановитьВидимостьФлагаСторнирующихЗаписей();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТЧ НЕ ОТРАЖАЕТСЯ В КНИГЕ

Процедура НеОтражаетсяВКнигеСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.НеОтражаетсяВКниге.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Организация", Организация);
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "НеОтражаетсяВКниге");
	
КонецПроцедуры

Процедура НеОтражаетсяВКнигеДокументОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.НеОтражаетсяВКниге.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Организация", Организация);
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "НеОтражаетсяВКниге");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТЧ НДС ВОССТАНОВЛЕННЫЙ

Процедура ВосстановленСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.Восстановлен.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Организация,Контрагент", Организация,ТекущиеДанные.Покупатель);
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "Восстановлен");

КонецПроцедуры

Процедура ВосстановленПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.КорректируемыйПериод.ОтметкаНезаполненного = (ДанныеСтроки.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(ДанныеСтроки.КорректируемыйПериод));
	
КонецПроцедуры


Процедура ВосстановленПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	УстановитьВидимостьФлагаСторнирующихЗаписей();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ НДС ВОССТАНОВЛЕННЫЙ ПО АВАНСАМ

Процедура ВосстановленПоАвансамПоставщикПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ДоговорКонтрагента.Владелец <> СтрокаТабличнойЧасти.Поставщик Тогда
		СтрокаТабличнойЧасти.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

Процедура ВосстановленПоАвансамДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные;
	
	СПоставщиком  	= Новый СписокЗначений;
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.Поставщик, 
			СтрокаТабличнойЧасти.ДоговорКонтрагента, СПоставщиком, СтандартнаяОбработка);

КонецПроцедуры

Процедура ВосстановленПоАвансамСуммаБезНДСПриИзменении(Элемент)
	
	ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

Процедура ВосстановленПоАвансамСтавкаНДСПриИзменении(Элемент)
	
	ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

Процедура ВосстановленПоАвансамПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
		
	ОформлениеСтроки.Ячейки.КорректируемыйПериод.ОтметкаНезаполненного = (ДанныеСтроки.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(ДанныеСтроки.КорректируемыйПериод));

КонецПроцедуры

Процедура ВосстановленПоАвансамПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
		
	УстановитьВидимостьФлагаСторнирующихЗаписей();
	
КонецПроцедуры

Процедура ВосстановленПоАвансамСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Организация, Контрагент", Организация, ТекущиеДанные.Поставщик);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		Отбор.Вставить( "ДокументыПоДоговоруКонтрагента", ТекущиеДанные.ДоговорКонтрагента);
	КонецЕсли;

	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "ВосстановленПоАвансам");
	
КонецПроцедуры
