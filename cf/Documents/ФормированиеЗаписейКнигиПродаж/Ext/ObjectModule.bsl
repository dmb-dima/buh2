Перем мВестиУчетНДС Экспорт;
Перем мУпрощенныйУчетНДС Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ АВТОЗАПОЛНЕНИЯ СТРОК ДОКУМЕНТА

// Процедура вызывается при нажатии на кнопку "Заполнить" в диалоге документа
// Реализует алгоритм автоматического заполнения табличной части.
//
Процедура ЗаполнитьДокумент(ОшибкаЗаполнения = Ложь, Сообщать = Истина, СтрокаСообщения = "", ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ОшибкаЗаполнения = Истина;
			СтрокаСообщения = " перед заполнением требуется отменить проведение документа";
			Если Сообщать Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:" + СтрокаСообщения, , Строка(Ссылка));
			КонецЕсли; 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаПолученияУчетнойПолитики = Ложь;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаПолученияУчетнойПолитики, Организация);
	
	ЗаполнитьРазделРеализация(ОтменитьПроведение);
	
	Если Реализация0 Тогда
		Авансы.Очистить();
		НачисленКУплате.Очистить();
		Восстановлен.Очистить();
		НеОтражаетсяВКниге.Очистить();
		ВосстановленПоАвансам.Очистить();
	Иначе
		ЗаполнитьРазделАвансы();
		ЗаполнитьРазделНачисленКУплате();
		ЗаполнитьРазделНеОтражаетсяВКниге();
		ЗаполнитьРазделВосстановлен();
		ЗаполнитьРазделВосстановленПоАвансам();
	КонецЕсли;
	
	Если Не (Реализация.Количество() > 0 
		Или Авансы.Количество() > 0
		Или НачисленКУплате.Количество() > 0
		Или Восстановлен.Количество() > 0
		Или НеОтражаетсяВКниге.Количество() > 0
		Или ВосстановленПоАвансам.Количество() > 0
        ) Тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + " - не обнаружены записи к отражению в книге продаж"
	КонецЕсли;	

   Если ОшибкаЗаполнения Тогда
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:" + СтрокаСообщения,,Строка(Ссылка));
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьДокумент()

// Заполняет раздел "Реализация"
Процедура ЗаполнитьРазделРеализация(ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//ТаблицаРезультатов = Реализация.ВыгрузитьКолонки();
	
	Если Реализация0 Тогда
		Таблица_НДСНачисленный = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0();
	Иначе	
		Таблица_НДСНачисленный = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный();
	КонецЕсли; 
	
	Если Таблица_НДСНачисленный.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		Реализация.Очистить();
		Возврат;
	КонецЕсли;

	Реализация.Загрузить(Таблица_НДСНачисленный);
	
	Реализация.Сортировать("СчетФактура, Покупатель, ДоговорКонтрагента, ВидЦенности, СтавкаНДС, ДокументОплаты, ДатаОплаты, Событие, Состояние");

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Вызывается из процедуры ЗаполнитьРазделРеализация.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (за вычетом реализации 0%)
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный(СписокСчетовФактур = неопределено)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
		|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
		|	ЗНАЧЕНИЕ(Перечисление.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке) КАК МоментОпределенияНалоговойБазыНДС,
		|	НДСНачисленныйОстатки.ВидЦенности,
		|	НДСНачисленныйОстатки.СтавкаНДС,
		|	НДСНачисленныйОстатки.Покупатель,
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0)) КАК НДС,
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0)) КАК СуммаСНДС,
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДоговорКонтрагента,
		|	НДСНачисленныйОстатки.ДатаОплаты,
		|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.Реализация) КАК Событие
		|ИЗ
		|	РегистрНакопления.НДСНачисленный.Остатки(
		|			&КонецПериодаГраница,
		|			Организация = &Организация
		|				И (НЕ ВидНачисления В (&ИсключаемыеВидыНачисления))) КАК НДСНачисленныйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСНачисленныйОстатки.ВидЦенности,
		|	НДСНачисленныйОстатки.СчетФактура,
		|	НДСНачисленныйОстатки.СтавкаНДС,
		|	НДСНачисленныйОстатки.Покупатель,
		|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода),
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	НДСНачисленныйОстатки.ДатаОплаты
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата,
		|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыНачисления = Новый СписокЗначений;
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);		// не отражается в книге продаж
	
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСНачисленКУплате);	// Отражается отдельно
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСсАвансов);			// Отражается отдельно
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСВосстановлен);		// Отражается отдельно
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыНачисления", ИсключаемыеВидыНачисления);

	Если не СписокСчетовФактур = Неопределено Тогда
	   Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация"," 
			|		Организация = &Организация
			|		    И СчетФактура В (&СписокСчетовФактур)
			|");
		Запрос.УстановитьПараметр("СписокСчетовФактур",СписокСчетовФактур);
		
	КонецЕсли; 
	
	Таблица_НДСНачисленный = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСРеализация0Остатки.СчетФактура КАК СчетФактура,
		|	НДСРеализация0Остатки.ВидЦенности,
		|	НДСРеализация0Остатки.СтавкаНДС,
		|	НДСРеализация0Остатки.Покупатель,
		|	СУММА(ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
		|	СУММА(ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК НДС,
		|	СУММА(ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК СуммаСНДС
		|ИЗ
		|	РегистрНакопления.НДСРеализация0.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСРеализация0Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСРеализация0Остатки.ВидЦенности,
		|	НДСРеализация0Остатки.СчетФактура,
		|	НДСРеализация0Остатки.СтавкаНДС,
		|	НДСРеализация0Остатки.Покупатель";
		
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	Таблица_НДСРеализация0 = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтбора = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС, Покупатель");
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаРеализация0 Из Таблица_НДСРеализация0 Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаРеализация0);
		
		СтрокиНДСНачисленный = Таблица_НДСНачисленный.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаНДСНачисленный Из СтрокиНДСНачисленный Цикл
			
			СуммаБезНДС = Мин(СтрокаНДСНачисленный.СуммаБезНДС, СтрокаРеализация0.СуммаБезНДС);
			НДС = Мин(СтрокаНДСНачисленный.НДС, СтрокаРеализация0.НДС);
			СуммаСНДС = Мин(СтрокаНДСНачисленный.СуммаСНДС, СтрокаРеализация0.СуммаСНДС);
			
			СтрокаНДСНачисленный.СуммаБезНДС = СтрокаНДСНачисленный.СуммаБезНДС - СуммаБезНДС;
			СтрокаНДСНачисленный.НДС = СтрокаНДСНачисленный.НДС - НДС;
			СтрокаНДСНачисленный.СуммаСНДС = СтрокаНДСНачисленный.СуммаСНДС - СуммаСНДС;
			СтрокаРеализация0.СуммаБезНДС = СтрокаРеализация0.СуммаБезНДС - СуммаБезНДС;
			СтрокаРеализация0.НДС = СтрокаРеализация0.НДС - НДС;
			СтрокаРеализация0.СуммаСНДС = СтрокаРеализация0.СуммаСНДС - СуммаСНДС;
			
			Если СтрокаНДСНачисленный.СуммаБезНДС = 0
				И СтрокаНДСНачисленный.НДС = 0
				И СтрокаНДСНачисленный.СуммаСНДС = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаНДСНачисленный);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(СтрокиКУдалению);
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Таблица_НДСНачисленный.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Возврат Таблица_НДСНачисленный;
		
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Вызывается из процедуры ЗаполнитьРазделРеализация.
// Заполняет ТЧ Реализация по данным регистра НДСПредъявленныйРеализация0
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0(ВключитьОжиданиеПодтверждения = ложь, СписокСчетовФактур = Неопределено)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСРеализация0Остатки.Организация,
		|	НДСРеализация0Остатки.СчетФактура КАК СчетФактура,
		|	ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
		|	ЗНАЧЕНИЕ(Перечисление.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке) КАК МоментОпределенияНалоговойБазыНДС,
		|	НДСРеализация0Остатки.ВидЦенности,
		|	НДСРеализация0Остатки.СтавкаНДС,
		|	ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) КАК СуммаБезНДС,
		|	ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0) КАК НДС,
		|	ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0) КАК СуммаСНДС,
		|	НДСРеализация0Остатки.Состояние,
		|	НДСНачисленныйОстатки.Покупатель,
		|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС_НачисленоВсего,
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток < НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток
		|				И (НЕ НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток < 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяКорректировка,
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА НДСРеализация0Остатки.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ПодтвержденаСтавка0)
		|		КОГДА НДСРеализация0Остатки.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.НеПодтвержденаСтавка0)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПустаяСсылка)
		|	КОНЕЦ КАК Событие,
		|	ВЫБОР
		|		КОГДА НДСРеализация0Остатки.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0)
		|				И КОНЕЦПЕРИОДА(ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода), КВАРТАЛ) <> КОНЕЦПЕРИОДА(&КонецПериода, КВАРТАЛ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
		|	ВЫБОР
		|		КОГДА НДСРеализация0Остатки.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0)
		|				И КОНЕЦПЕРИОДА(ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода), КВАРТАЛ) <> КОНЕЦПЕРИОДА(&КонецПериода, КВАРТАЛ)
		|			ТОГДА ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода)
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК КорректируемыйПериод
		|ИЗ
		|	РегистрНакопления.НДСРеализация0.Остатки(
		|			&КонецПериодаГраница,
		|			Организация = &Организация
		|				И Состояние В (&ОтрабатываемыеСостояния)) КАК НДСРеализация0Остатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСНачисленный.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСНачисленныйОстатки
		|		ПО НДСРеализация0Остатки.СчетФактура = НДСНачисленныйОстатки.СчетФактура
		|			И НДСРеализация0Остатки.ВидЦенности = НДСНачисленныйОстатки.ВидЦенности
		|			И НДСРеализация0Остатки.СтавкаНДС = НДСНачисленныйОстатки.СтавкаНДС
		|ГДЕ
		|	(НДСРеализация0Остатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСРеализация0Остатки.НДСОстаток > 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	Если ВключитьОжиданиеПодтверждения Тогда
		ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния",ОтрабатываемыеСостояния);
	Если не СписокСчетовФактур = Неопределено Тогда
	   Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация"," 
			|		Организация = &Организация
			|		    И СчетФактура В (&СписокСчетовФактур)
			|");
		Запрос.УстановитьПараметр("СписокСчетовФактур",СписокСчетовФактур);
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаСФ Из РезультатЗапроса
		Цикл
		Если СтрокаСФ.ТребуетсяКорректировка Тогда
			СтрокаСФ.НДС = (СтрокаСФ.НДС*СтрокаСФ.СуммаСНДС_НачисленоВсего/СтрокаСФ.СуммаСНДС);
			СтрокаСФ.СуммаСНДС = СтрокаСФ.СуммаСНДС_НачисленоВсего;
			СтрокаСФ.СуммаБезНДС = СтрокаСФ.СуммаСНДС - СтрокаСФ.НДС;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат РезультатЗапроса;
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСРеализация0()

// Заполняет раздел "Авансы"
Процедура ЗаполнитьРазделАвансы(ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультатов = Авансы.ВыгрузитьКолонки();
	
	Таблица_НДСcАвансов = ЗаполнитьНДСНачисленныйДаннымиПоАвансам();
	
	Если Таблица_НДСcАвансов.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		Авансы.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_НДСcАвансов,ТаблицаРезультатов);

	Авансы.Загрузить(ТаблицаРезультатов);
	
	Авансы.Сортировать("СчетФактура, Покупатель, ДоговорКонтрагента, ВидЦенности, СтавкаНДС, Событие");

КонецПроцедуры // ЗаполнитьРазделАвансы()

// Вызывается из процедуры ЗаполнитьРазделАвансы.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС с авансов)
Функция ЗаполнитьНДСНачисленныйДаннымиПоАвансам()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	&Событие_НДСсАвансов КАК Событие,
	|	НДСНачисленныйОстатки.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И ВидНачисления = &НДСВидНачисления_НДСсАвансов) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления_НДСсАвансов", Перечисления.НДСВидНачисления.НДСсАвансов);
	Запрос.УстановитьПараметр("Событие_НДСсАвансов", Перечисления.СобытияПоНДСПродажи.ПолученАванс);

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
КонецФункции // ЗаполнитьНДСНачисленныйДаннымиПоАвансам()

// Заполняет раздел "НачисленКУплате"
Процедура ЗаполнитьРазделНачисленКУплате(ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультатов = НачисленКУплате.ВыгрузитьКолонки();
	
	Таблица_НДСНачисленКУплате = ЗаполнитьНДСНачисленныйДаннымиПоНДСНачисленномуКУплате();
	
	Если Таблица_НДСНачисленКУплате.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		НачисленКУплате.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_НДСНачисленКУплате,ТаблицаРезультатов);

	НачисленКУплате.Загрузить(ТаблицаРезультатов);
	НачисленКУплате.Сортировать("СчетФактура, Покупатель, ДоговорКонтрагента, ВидЦенности, СтавкаНДС, ДокументОплаты, ДатаОплаты, Событие");

КонецПроцедуры // ЗаполнитьРазделНачисленКУплате()

// Заполняет раздел "Восстановлен"
Процедура ЗаполнитьРазделВосстановлен(ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультатов = Восстановлен.ВыгрузитьКолонки();
	
	Таблица_Восстановлен = ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленному();
	
	Если Таблица_Восстановлен.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		Восстановлен.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_Восстановлен,ТаблицаРезультатов);

	Восстановлен.Загрузить(ТаблицаРезультатов);
	
	Восстановлен.Сортировать("СчетФактура, Покупатель, ВидЦенности, СтавкаНДС, СчетУчетаНДС");

КонецПроцедуры // ЗаполнитьРазделВосстановлен()

// Заполняет раздел "Восстановлен по авансам"
Процедура ЗаполнитьРазделВосстановленПоАвансам(ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультатов = ВосстановленПоАвансам.ВыгрузитьКолонки();
	
	ОшибкаПолученияУчетнойПолитики = Ложь;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаПолученияУчетнойПолитики, Организация);
	
	Если ОшибкаПолученияУчетнойПолитики Тогда
		Возврат;
	КонецЕсли;

	Если мУпрощенныйУчетНДС = Неопределено Тогда
		мУпрощенныйУчетНДС = УчетнаяПолитикаНУ.УпрощенныйУчетНДС;
	КонецЕсли;
	
	Если Не мУпрощенныйУчетНДС Тогда
		Таблица_Восстановлен = ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленномуПоАвансам();
	Иначе
		Таблица_Восстановлен = ЗаполнитьРазделВосстановленПоАвансам_УпрощенныйУчетНДС();
	КонецЕсли;
	
	Если Таблица_Восстановлен.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		ВосстановленПоАвансам.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_Восстановлен, ТаблицаРезультатов);

	ВосстановленПоАвансам.Загрузить(ТаблицаРезультатов);
	
	ВосстановленПоАвансам.Сортировать("СчетФактура, Поставщик, ДоговорКонтрагента, СтавкаНДС");

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Вызывается из процедуры ЗаполнитьРазделНачисленКУплате.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС начисленному к уплате)
Функция ЗаполнитьНДСНачисленныйДаннымиПоНДСНачисленномуКУплате()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.ДоговорКонтрагента,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток < 0
	|				ИЛИ НДСНачисленныйОстатки.НДСОстаток < 0
	|			ТОГДА &Событие_Скорректирован
	|		ИНАЧЕ &Событие_НДСНачисленКУплате
	|	КОНЕЦ КАК Событие,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.ВидЦенности = &ВидЦенностиСуммыСвязанныеСРасчетами
	|			ТОГДА НДСНачисленныйОстатки.СчетФактура.Дата
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК ДатаОплаты
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ВидНачисления = &НДСВидНачисления_НДСНачисленКУплате) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления_НДСНачисленКУплате", Перечисления.НДСВидНачисления.НДСНачисленКУплате);
	Запрос.УстановитьПараметр("Событие_НДСНачисленКУплате", 		 Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	Запрос.УстановитьПараметр("Событие_Скорректирован", 			 Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("ВидЦенностиСуммыСвязанныеСРасчетами", Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Вызывается из процедуры ЗаполнитьРазделВосстановлен.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС начисленному к уплате)
Функция ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленному()

	ТаблицаВосстановлен = Восстановлен.ВыгрузитьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ВидНачисления = &НДСВидНачисления) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления", 	 Перечисления.НДСВидНачисления.НДСВосстановлен);
	
	НДСкВосстановлению = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	НДСкВосстановлению.Колонки.Добавить("СчетУчетаНДС", новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Если Не НДСкВосстановлению.Количество() = 0 Тогда
	
		//Определение счетов учета НДС для формирования проводки по восстановлению
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСНачисленный.СчетФактура КАК СчетФактура,
		|	НДСНачисленный.ВидЦенности,
		|	НДСНачисленный.СтавкаНДС,
		|	НДСНачисленный.СчетУчетаНДС,
		|	СУММА(ВЫБОР
		|			КОГДА НДСНачисленный.ВидДвижения = &ДвижениеПриход
		|				ТОГДА НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС
		|			ИНАЧЕ (НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС) * -1
		|		КОНЕЦ) КАК СуммаСНДС
		|ИЗ
		|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
		|ГДЕ
		|	НДСНачисленный.Организация = &Организация
		|	И НДСНачисленный.СчетФактура В(&СписокСчетовФактур)
		|	И НДСНачисленный.ВидНачисления = &НДСВидНачисления
		|	И НДСНачисленный.ВидЦенности В(&СписокВидовЦенностей)
		|	И НДСНачисленный.СтавкаНДС В(&СписокСтавокНДС)
		|	И НДСНачисленный.Период <= &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСНачисленный.Организация,
		|	НДСНачисленный.ВидЦенности,
		|	НДСНачисленный.СчетУчетаНДС,
		|	НДСНачисленный.СчетФактура,
		|	НДСНачисленный.СтавкаНДС
		|
		|ИМЕЮЩИЕ
		|	(НЕ СУММА(ВЫБОР
		|				КОГДА НДСНачисленный.ВидДвижения = &ДвижениеПриход
		|					ТОГДА НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС
		|				ИНАЧЕ (НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС) * -1
		|			КОНЕЦ) = 0)
		|ИТОГИ ПО
		|	СчетФактура";
		
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
		Запрос.УстановитьПараметр("Организация",  Организация);
		Запрос.УстановитьПараметр("НДСВидНачисления", 	 Перечисления.НДСВидНачисления.НДСВосстановлен);
		
		Запрос.УстановитьПараметр("СписокСчетовФактур", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(НДСкВосстановлению.ВыгрузитьКолонку("СчетФактура"),Истина));
		Запрос.УстановитьПараметр("СписокВидовЦенностей", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(НДСкВосстановлению.ВыгрузитьКолонку("ВидЦенности"),Истина));
		Запрос.УстановитьПараметр("СписокСтавокНДС", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(НДСкВосстановлению.ВыгрузитьКолонку("СтавкаНДС"),Истина));
		
		Запрос.УстановитьПараметр("ДвижениеПриход", ВидДвиженияНакопления.Приход);
		
		НДСкВосстановлениюВРазрезеСчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		СтрокиКУдалению = Новый Массив();
		КоличествоБазовыхСтрок = НДСкВосстановлению.Количество();
		
		Для НомерСтрокиВосстановления =1 по КоличествоБазовыхСтрок Цикл
			СтрокаВосстановления = НДСкВосстановлению[НомерСтрокиВосстановления-1];
			СтрокаСФВРазрезеСчетов = НДСкВосстановлениюВРазрезеСчетов.Строки.Найти(СтрокаВосстановления.СчетФактура,"СчетФактура");
			Если СтрокаСФВРазрезеСчетов = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			РасшифровкаСФвРазрезеСчетов = СтрокаСФВРазрезеСчетов.Строки.НайтиСтроки(Новый Структура("ВидЦенности,СтавкаНДС",СтрокаВосстановления.ВидЦенности,СтрокаВосстановления.СтавкаНДС));
			
			Если РасшифровкаСФвРазрезеСчетов.Количество() =0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СуммаСНДСПоСтроке = СтрокаВосстановления.СуммаСНДС;
			Для Каждого СтрокаРасшифровки Из РасшифровкаСФвРазрезеСчетов Цикл
				СуммаПокрытия = 0;
				Если не СуммаСНДСПоСтроке*СтрокаРасшифровки.СуммаСНДС>0 Тогда
					Продолжить;
				КонецЕсли; 
				
				СуммаПокрытия = ?(СуммаСНДСПоСтроке>0, Мин(СуммаСНДСПоСтроке,СтрокаРасшифровки.СуммаСНДС), Макс(СуммаСНДСПоСтроке,СтрокаРасшифровки.СуммаСНДС));
				
				//Добавление новой строки по восстановлению в разрезе СФ
				НоваяСтрокаВосстановления = НДСкВосстановлению.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВосстановления, СтрокаВосстановления);
				НоваяСтрокаВосстановления.СуммаСНДС = СуммаПокрытия;
				НоваяСтрокаВосстановления.СуммаБезНДС = Окр(НоваяСтрокаВосстановления.СуммаБезНДС*СуммаПокрытия/СуммаСНДСПоСтроке,2);
				НоваяСтрокаВосстановления.НДС = НоваяСтрокаВосстановления.СуммаСНДС - НоваяСтрокаВосстановления.СуммаБезНДС;
				НоваяСтрокаВосстановления.СчетУчетаНДС = СтрокаРасшифровки.СчетУчетаНДС;
				
				СуммаСНДСПоСтроке = СуммаСНДСПоСтроке - СуммаПокрытия;
				
				//Уменьшение суммы по строке восстановления без указания счета
				СтрокаВосстановления.СуммаСНДС = СтрокаВосстановления.СуммаСНДС - НоваяСтрокаВосстановления.СуммаСНДС;
				СтрокаВосстановления.СуммаБезНДС = СтрокаВосстановления.СуммаБезНДС - НоваяСтрокаВосстановления.СуммаБезНДС;
				СтрокаВосстановления.НДС = СтрокаВосстановления.НДС - НоваяСтрокаВосстановления.НДС;
				
				//Уменьшение остатка в таблице расшифровки 
				СтрокаРасшифровки.СуммаСНДС = СтрокаРасшифровки.СуммаСНДС - НоваяСтрокаВосстановления.СуммаСНДС;
				
				Если СуммаСНДСПоСтроке = 0 Тогда
					СтрокиКУдалению.Добавить(СтрокаВосстановления);
					Прервать;
				КонецЕсли; 
				
			КонецЦикла; 
			
			Если Не СуммаСНДСПоСтроке = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаВосстановления);
				НоваяСтрокаВосстановления = НДСкВосстановлению.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВосстановления, СтрокаВосстановления);
			КонецЕсли; 
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			НДСкВосстановлению.Удалить(СтрокаКУдалению);
		КонецЦикла; 

	КонецЕсли; 
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(НДСкВосстановлению, ТаблицаВосстановлен);
	
	Возврат НДСкВосстановлению;
		
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Вызывается из процедуры ЗаполнитьРазделВосстановленПоАвансам.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС начисленному к уплате)
Функция ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленномуПоАвансам()

	ТаблицаВосстановлен = ВосстановленПоАвансам .ВыгрузитьКолонки();
	
	// Восстановление НДС по авансам выданным
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСсАвансовОстатки.Организация,
	|	НДСсАвансовОстатки.СчетФактура КАК СчетФактура,
	|	НДСсАвансовОстатки.Покупатель КАК Поставщик,
	|	НДСсАвансовОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) КАК СуммаБезНДС,
	|	НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) КАК НДС,
	|	НДСсАвансовОстатки.ВидЦенности
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСсАвансовОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(
	|				&КонецПериодаГраница,
	|				Организация = &Организация
	|					И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСПредъявленныйОстатки
	|		ПО НДСсАвансовОстатки.Организация = НДСПредъявленныйОстатки.Организация
	|			И НДСсАвансовОстатки.СчетФактура = НДСПредъявленныйОстатки.СчетФактура
	|			И НДСсАвансовОстатки.Покупатель = НДСПредъявленныйОстатки.Поставщик
	|			И НДСсАвансовОстатки.ДоговорКонтрагента = НДСПредъявленныйОстатки.ДоговорКонтрагента
	|			И НДСсАвансовОстатки.СтавкаНДС = НДСПредъявленныйОстатки.СтавкаНДС
	|			И НДСсАвансовОстатки.ВидЦенности = НДСПредъявленныйОстатки.ВидЦенности
	|ГДЕ
	|	НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) > 0
	|	И НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Поставщик,
	|	ДоговорКонтрагента,
	|	СчетФактура
	|АВТОУПОРЯДОЧИВАНИЕ";
				   
				   
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат ТаблицаВосстановлен;
	КонецЕсли;

	ТаблицаНДССАвансов = Результат.Выгрузить();
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНДССАвансов", ТаблицаНДССАвансов);
	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным); // 62.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал); // 62.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ); // 62.32
	
	// Движения по курсовым разницам не должны вызывать регистрации аванса
	Запрос.УстановитьПараметр("МассивСчетовАвансов", МассивСчетовАвансов);
	
	СубконтоСчетаРасчетов_ЕстьДР = Новый Массив();
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("СубконтоСчетаРасчетов_ЕстьДР",  СубконтоСчетаРасчетов_ЕстьДР);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНДССАвансов.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ ТаблицаНДССАвансов
	|ИЗ
	|	&ТаблицаНДССАвансов КАК ТаблицаНДССАвансов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Поставщик,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.Субконто3 КАК СчетФактура,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериодаГраница,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Хозрасчетный.Ссылка
	|				ИЗ
	|					ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|				ГДЕ
	|					Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовАвансов)
	|					И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСконтрагентами)),
	|			,
	|			Организация = &Организация
	|				И Субконто3 В
	|					(ВЫБРАТЬ
	|						ТаблицаНДССАвансов.СчетФактура
	|					ИЗ
	|						ТаблицаНДССАвансов КАК ТаблицаНДССАвансов)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Поставщик,
	|	ДоговорКонтрагента,
	|	СчетФактура
	|АВТОУПОРЯДОЧИВАНИЕ";
				   
	ТаблицаНезачтенныхАвансов = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтбора = Новый Структура("Поставщик, ДоговорКонтрагента, СчетФактура");
	МассивРаспределения = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНезачтенныхАвансов Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
		СтрокиОтбора = ТаблицаНДССАвансов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			Если (СтрокаОтбора.СуммаБезНДС = 0
				И СтрокаОтбора.НДС = 0) Или СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаРаспределения = Мин(СтрокаТаблицы.Сумма, СтрокаОтбора.СуммаБезНДС + СтрокаОтбора.НДС);
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма - СуммаРаспределения;
			МассивРаспределения.Очистить();
			
			МассивРаспределения.Добавить(СтрокаОтбора.СуммаБезНДС);
			МассивРаспределения.Добавить(СтрокаОтбора.НДС);
			
			ИтогРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СуммаРаспределения, МассивРаспределения);
			
			СтрокаОтбора.СуммаБезНДС = СтрокаОтбора.СуммаБезНДС - ИтогРаспределения[0];
			СтрокаОтбора.НДС = СтрокаОтбора.НДС - ИтогРаспределения[1];
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтрокиКУдалению = Новый Массив;
	Для	Каждого СтрокаТаблицыНДССАвансов Из ТаблицаНДССАвансов Цикл
		Если СтрокаТаблицыНДССАвансов.СуммаБезНДС = 0
			И СтрокаТаблицыНДССАвансов.НДС = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицыНДССАвансов);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаНДССАвансов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДССАвансов, ТаблицаВосстановлен);
	
	Возврат ТаблицаВосстановлен;
		
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Вызывается из процедуры ЗаполнитьРазделВосстановленПоАвансам_УпрощенныйУчетНДС.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС начисленному к уплате)
Функция ЗаполнитьРазделВосстановленПоАвансам_УпрощенныйУчетНДС()

	ТаблицаВосстановлен = ВосстановленПоАвансам .ВыгрузитьКолонки();
	
	Запрос = Новый Запрос;
	
	ВидыСубконто = Новый Массив;

	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Поставщик,
	|	ХозрасчетныйОстатки.Субконто2 КАК СчетФактура,
	|	-1 * ХозрасчетныйОстатки.СуммаОстаток КАК СуммаНДСАванса
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаГраница, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	ОстаткиПоСчету = Запрос.Выполнить().Выгрузить();
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОстаткиПоСчету", ОстаткиПоСчету);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиПоСчету.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ ОстаткиПоСчету
	|ИЗ
	|	&ОстаткиПоСчету КАК ОстаткиПоСчету
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупокОбороты.Организация,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик КАК Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0) КАК СуммаБезНДС,
	|	ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0) КАК НДС,
	|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&ДатаГраница,
	|			,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|				И СчетФактура В
	|					(ВЫБРАТЬ
	|						ОстаткиПоСчету.СчетФактура
	|					ИЗ
	|						ОстаткиПоСчету КАК ОстаткиПоСчету)) КАК НДСЗаписиКнигиПокупокОбороты
	|ГДЕ
	|	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот > 0
	|	И НДСЗаписиКнигиПокупокОбороты.НДСОборот > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Поставщик,
	|	ДоговорКонтрагента,
	|	СчетФактура
	|АВТОУПОРЯДОЧИВАНИЕ";
				   			   
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат ТаблицаВосстановлен;
	КонецЕсли;

	ОстаткиПоРегистру = Результат.Выгрузить();
	
	СтруктураОтбора = Новый Структура("СчетФактура, Поставщик");
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаОстаткаПоСчету Из ОстаткиПоСчету Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаОстаткаПоСчету);
		
		СтрокиОстаткаПоРегистру = ОстаткиПоРегистру.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаОстаткаПоРегистру Из СтрокиОстаткаПоРегистру Цикл
			
			Если СтрокаОстаткаПоСчету.СуммаНДСАванса = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаОстаткаПоРегистру);
				Продолжить;
			КонецЕсли;
			
			Если СтрокаОстаткаПоСчету.СуммаНДСАванса >= СтрокаОстаткаПоРегистру.НДС Тогда
				СтрокаОстаткаПоСчету.СуммаНДСАванса = СтрокаОстаткаПоСчету.СуммаНДСАванса - СтрокаОстаткаПоРегистру.НДС;
			Иначе				
				СтрокаОстаткаПоРегистру.СуммаБезНДС = СтрокаОстаткаПоРегистру.СуммаБезНДС - (СтрокаОстаткаПоРегистру.СуммаБезНДС/СтрокаОстаткаПоРегистру.НДС) * СтрокаОстаткаПоСчету.СуммаНДСАванса;
				СтрокаОстаткаПоРегистру.НДС = СтрокаОстаткаПоРегистру.НДС - СтрокаОстаткаПоСчету.СуммаНДСАванса;
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ОстаткиПоРегистру.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Если ОстаткиПоРегистру.Количество() = 0 Тогда
		Возврат ТаблицаВосстановлен;
	КонецЕсли;
	
	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным); // 60.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал); // 60.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ); // 60.32
	
	// Движения по курсовым разницам не должны вызывать регистрации аванса
	Запрос.УстановитьПараметр("МассивСчетовАвансов", МассивСчетовАвансов);
	
	СубконтоСчетаРасчетов_ЕстьДР = Новый Массив();
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("СубконтоСчетаРасчетов_ЕстьДР",  СубконтоСчетаРасчетов_ЕстьДР);
	
	// Получим остатки по авансам для определения суммы незачтенного аванса.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Поставщик,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.Субконто3 КАК СчетФактура,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаГраница,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Хозрасчетный.Ссылка
	|				ИЗ
	|					ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|				ГДЕ
	|					Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовАвансов)
	|					И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСконтрагентами)),
	|			&СубконтоСчетаРасчетов_ЕстьДР,
	|			Организация = &Организация
	|				И Субконто3 В
	|					(ВЫБРАТЬ
	|						ОстаткиПоСчету.СчетФактура
	|					ИЗ
	|						ОстаткиПоСчету КАК ОстаткиПоСчету)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3
	|
	|УПОРЯДОЧИТЬ ПО
	|	Поставщик,
	|	ДоговорКонтрагента,
	|	СчетФактура";
					   
	ТаблицаНезачтенныхАвансов = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтбора = Новый Структура("Поставщик, ДоговорКонтрагента");
	МассивРаспределения = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНезачтенныхАвансов Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.СчетФактура = Неопределено Тогда
			Если СтруктураОтбора.Свойство("СчетФактура") Тогда
				СтруктураОтбора.Удалить("СчетФактура");
			КонецЕсли;
		Иначе
			Если Не СтруктураОтбора.Свойство("СчетФактура") Тогда
				СтруктураОтбора.Вставить("СчетФактура");
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
		СтрокиОтбора = ОстаткиПоРегистру.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			Если (СтрокаОтбора.СуммаБезНДС = 0
				И СтрокаОтбора.НДС = 0) Или СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаРаспределения = Мин(СтрокаТаблицы.Сумма, СтрокаОтбора.СуммаБезНДС + СтрокаОтбора.НДС);
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма - СуммаРаспределения;
			МассивРаспределения.Очистить();
			
			МассивРаспределения.Добавить(СтрокаОтбора.СуммаБезНДС);
			МассивРаспределения.Добавить(СтрокаОтбора.НДС);
			
			ИтогРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СуммаРаспределения, МассивРаспределения);
			
			СтрокаОтбора.СуммаБезНДС = СтрокаОтбора.СуммаБезНДС - ИтогРаспределения[0];
			СтрокаОтбора.НДС = СтрокаОтбора.НДС - ИтогРаспределения[1];
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтрокиКУдалению = Новый Массив;
	Для	Каждого СтрокаТаблицыНДССАвансов Из ОстаткиПоРегистру Цикл
		Если СтрокаТаблицыНДССАвансов.СуммаБезНДС = 0
			И СтрокаТаблицыНДССАвансов.НДС = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицыНДССАвансов);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ОстаткиПоРегистру.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ОстаткиПоРегистру, ТаблицаВосстановлен);
	
	Возврат ТаблицаВосстановлен;
		
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Заполняет раздел "НеОтражаетсяВКниге"
Процедура ЗаполнитьРазделНеОтражаетсяВКниге(ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Таблица_НДСНачисленный = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный_Неотражаемые();
	
	Если Таблица_НДСНачисленный.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		НеОтражаетсяВКниге.Очистить();
		Возврат;
	КонецЕсли;

	НеОтражаетсяВКниге.Загрузить(Таблица_НДСНачисленный);
	
	НеОтражаетсяВКниге.Сортировать("СчетФактура, Покупатель, ВидЦенности, ДокументОплаты, ДатаОплаты, Событие, ВидНачисления");

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Вызывается из процедуры ЗаполнитьРазделНеОтражаетсяВКниге.
// Заполняет ТЧ НеОтражаетсяВКниге по данным регистра НДС начисленный (по реализации ЕНВД)
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный_Неотражаемые()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
	|	ЗНАЧЕНИЕ(Перечисление.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке) КАК МоментОпределенияНалоговойБазыНДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток < 0
	|				ИЛИ НДСНачисленныйОстатки.НДСОстаток < 0
	|			ТОГДА &Событие_Скорректирован
	|		ИНАЧЕ &Событие_НДСНачисленКУплате
	|	КОНЕЦ КАК Событие,
	|	НДСНачисленныйОстатки.ВидНачисления,
	|	НДСНачисленныйОстатки.ДатаОплаты
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И ВидНачисления В (&НДСВидыНачисления_Неотражаемые)) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	НДСВидыНачисления_Неотражаемые = новый массив();
	НДСВидыНачисления_Неотражаемые.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	Запрос.УстановитьПараметр("НДСВидыНачисления_Неотражаемые", 	 НДСВидыНачисления_Неотражаемые);
	Запрос.УстановитьПараметр("Событие_НДСНачисленКУплате", 		 Перечисления.СобытияПоНДСПродажи.Реализация);
	Запрос.УстановитьПараметр("Событие_Скорректирован", 			 Перечисления.СобытияПоНДСПродажи.НДССкорректирован);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуЗаписей(СтруктураШапкиДокумента)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Начало2008", '20080101');
	Запрос.УстановитьПараметр("ВидНачисления_Реализация0", Перечисления.НДСВидНачисления.Реализация0);
	
	// Виды ценностей расчеты по которым не отражаются в расчетах с покупателями
	ВидаЦенностиБезОплаты = Новый Массив();
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидаЦенностиБезОплаты", ВидаЦенностиБезОплаты);
	
	Если СтруктураШапкиДокумента.Реализация0 Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата) КАК СчетФактураДата,
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ТаблицаЗаписей.КорректируемыйПериод,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
		|				И ТаблицаЗаписей.Ссылка.ФормироватьСторнирующиеЗаписиДопЛистовВручную = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.СторнирующаяЗаписьДопЛиста
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ КАК ДатаОплаты,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ КАК ДатаОплатыКнигаПродаж,
		|	ТаблицаЗаписей.Событие,
		|	&ВидНачисления_Реализация0 КАК ВидНачисления,
		|	ИСТИНА КАК ОтражатьВКниге,
		|	ТаблицаЗаписей.Состояние,
		|	ЗНАЧЕНИЕ(Перечисление.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке) КАК МоментОпределенияНалоговойБазыНДС,
		|	""По реализации"" КАК НазваниеТаблицы,
		|	ТаблицаЗаписей.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности В (&ВидаЦенностиБезОплаты)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВлияетНаРасчеты,
		|	ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал) КАК НДСНалоговыйПериодДополнительногоЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА ТаблицаЗаписей.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДоговорКонтрагента
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Реализация КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата) КАК СчетФактураДата,
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ТаблицаЗаписей.КорректируемыйПериод,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
		|				И ТаблицаЗаписей.Ссылка.ФормироватьСторнирующиеЗаписиДопЛистовВручную = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.СторнирующаяЗаписьДопЛиста
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ КАК ДатаОплаты,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ КАК ДатаОплатыКнигаПродаж,
		|	ТаблицаЗаписей.Событие,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.СтавкаНДС = &СтавкаНДС_БезНДС
		|			ТОГДА &ВидНачисления_РеализацияБезНДС
		|		КОГДА ТаблицаЗаписей.СтавкаНДС = &СтавкаНДС_0
		|			ТОГДА &ВидНачисления_Реализация0
		|		ИНАЧЕ &ВидНачисления_РеализацияСНДС
		|	КОНЕЦ КАК ВидНачисления,
		|	ИСТИНА КАК ОтражатьВКниге,
		|	ЗНАЧЕНИЕ(Перечисление.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке) КАК МоментОпределенияНалоговойБазыНДС,
		|	""По реализации"" КАК НазваниеТаблицы,
		|	ТаблицаЗаписей.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности В (&ВидаЦенностиБезОплаты)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВлияетНаРасчеты,
		|	NULL КАК СчетУчетаНДС,
		|	ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал) КАК НДСНалоговыйПериодДополнительногоЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА ТаблицаЗаписей.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДоговорКонтрагента
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Реализация КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.СчетФактура,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ТаблицаЗаписей.КорректируемыйПериод,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
		|				И ТаблицаЗаписей.Ссылка.ФормироватьСторнирующиеЗаписиДопЛистовВручную = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.СторнирующаяЗаписьДопЛиста
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	&ПустаяДата,
		|	ТаблицаЗаписей.СчетФактура.Дата,
		|	ТаблицаЗаписей.Событие,
		|	&ВидНачисления_Авансы,
		|	ИСТИНА,
		|	НЕОПРЕДЕЛЕНО,
		|	""С авансов"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ЛОЖЬ,
		|	NULL,
		|	ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал),
		|	ТаблицаЗаписей.ДоговорКонтрагента
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Авансы КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ТаблицаЗаписей.КорректируемыйПериод,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
		|				И ТаблицаЗаписей.Ссылка.ФормироватьСторнирующиеЗаписиДопЛистовВручную = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.СторнирующаяЗаписьДопЛиста
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ,
		|	ТаблицаЗаписей.Событие,
		|	&ВидНачисления_НачисленКУплате,
		|	ИСТИНА,
		|	НЕОПРЕДЕЛЕНО,
		|	""Начисленный к уплате"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ЛОЖЬ,
		|	NULL,
		|	ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал),
		|	ТаблицаЗаписей.ДоговорКонтрагента
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.НачисленКУплате КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ЛОЖЬ,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ,
		|	ТаблицаЗаписей.Событие,
		|	ТаблицаЗаписей.ВидНачисления,
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(Перечисление.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке),
		|	""Не отражается в книге"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности В (&ВидаЦенностиБезОплаты)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.НеОтражаетсяВКниге КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ТаблицаЗаписей.КорректируемыйПериод,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
		|				И ТаблицаЗаписей.Ссылка.ФормироватьСторнирующиеЗаписиДопЛистовВручную = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.СторнирующаяЗаписьДопЛиста
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	&ПустаяДата,
		|	&ПустаяДата,
		|	&Событие_НДСВосстановлен,
		|	&ВидНачисления_Восстановлен,
		|	ИСТИНА,
		|	НЕОПРЕДЕЛЕНО,
		|	""Восстановление по другим операциям"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ЛОЖЬ,
		|	ТаблицаЗаписей.СчетУчетаНДС,
		|	ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал),
		|	NULL
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Восстановлен КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("СтавкаНДС_БезНДС", Перечисления.СтавкиНДС.БезНДС);
		Запрос.УстановитьПараметр("СтавкаНДС_0", Перечисления.СтавкиНДС.НДС0);
		
		Запрос.УстановитьПараметр("ВидНачисления_РеализацияБезНДС", Перечисления.НДСВидНачисления.РеализацияБезНДС);
		Запрос.УстановитьПараметр("ВидНачисления_РеализацияСНДС",	Перечисления.НДСВидНачисления.РеализацияСНДС);
		Запрос.УстановитьПараметр("ВидНачисления_Авансы", 			Перечисления.НДСВидНачисления.НДСсАвансов);
		Запрос.УстановитьПараметр("ВидНачисления_НачисленКУплате",	Перечисления.НДСВидНачисления.НДСНачисленКУплате);
		Запрос.УстановитьПараметр("ВидНачисления_Восстановлен",		Перечисления.НДСВидНачисления.НДСВосстановлен);
		Запрос.УстановитьПараметр("Событие_НДСВосстановлен",		Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС);
		
	КонецЕсли; 
	
	Результат = Запрос.Выполнить();
	
	ТаблицаЗаписей = Результат.Выгрузить();
	ТаблицаЗаписей.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	
	Для каждого СтрокаТаблицы из ТаблицаЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты) Тогда
			СтрокаТаблицы.ДатаОплаты = '00010101';
		КонецЕсли; 
		
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
		Иначе
			СтрокаТаблицы.ДатаСобытия = Макс(СтрокаТаблицы.ДатаОплаты,СтрокаТаблицы.СчетФактураДата);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ТаблицаЗаписей;

КонецФункции // ПодготовитьТаблицуЗаписей()

Функция ПодготовитьТаблицуПоВосстановлениюПоАвансам(РезультатЗапросаПоВосстановлениюПоАвансам, СтруктураШапкиДокумента)
	
	ТаблицаПоВосстановлениюПоАвансам = РезультатЗапросаПоВосстановлениюПоАвансам.Выгрузить();
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыВыданные, "ВидЦенности");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ВидНачисления", Новый ОписаниеТипов("ПеречислениеСсылка.НДСВидНачисления"));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСВосстановлен, "ВидНачисления");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("Событие", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПродажи"));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС, "Событие");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ДатаСобытия");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("НДСНалоговыйПериодДополнительногоЛиста", Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(Перечисления.Периодичность.Квартал, "НДСНалоговыйПериодДополнительногоЛиста");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ДатаОплаты", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ДатаОплаты");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ДокументОплаты", Новый ОписаниеТипов(ТаблицаПоВосстановлениюПоАвансам.Колонки.СчетФактура.ТипЗначения));
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоВосстановлениюПоАвансам Цикл
		
		Если Не СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = '00010101000000';
		КонецЕсли;
		
		СтрокаТаблицы.ДатаОплаты = СтрокаТаблицы.ДатаСчетаФактуры;
		СтрокаТаблицы.ДокументОплаты = СтрокаТаблицы.СчетФактура;
		
	КонецЦикла; 
	
	Возврат ТаблицаПоВосстановлениюПоАвансам;
	
КонецФункции // ПодготовитьТаблицуПоВосстановлениюПоАвансам()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличныхЧастей(СтруктураШапкиДокумента, ТаблицаПоНачислению, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, СчетФактура, СтавкаНДС"); 
	
	Если СтруктураШапкиДокумента.Реализация0 Тогда
		СтруктураОбязательныхПолей.Вставить("Состояние"); 
	КонецЕсли; 
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Реализация", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если не СтруктураШапкиДокумента.Реализация0 Тогда
		
		// Теперь вызовем общую процедуру проверки.
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		// Для НДС начисленного к уплате может быть не заполнен покупатель по СМР подрядным и внутреннему потреблению
		
		// Теперь вызовем общую процедуру проверки.
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НачисленКУплате", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		// Теперь вызовем общую процедуру проверки.
		// Для НДС начисленного к уплате может быть не заполнен покупатель по СМР подрядным и внутреннему потреблению
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НеОтражаетсяВКниге", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		
		// Для НДС восстановленного должен быть заполнен счет учета НДС для формирования проводки
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Восстановлен", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		СтруктураОбязательныхПолей.Удалить("СчетУчетаНДС");
		СтруктураОбязательныхПолей.Удалить("ВидЦенности");
		СтруктураОбязательныхПолей.Вставить("Поставщик");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
		// Для НДС восстановленного должен быть заполнен счет учета НДС для формирования проводки
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВосстановленПоАвансам", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	КонецЕсли;                                          
	
	// Проверка полей на логическое соответствие
	//СтрокаСообщенияДатаОплаты = "Не заполнены документ оплаты и дата оплаты. В книге покупок по данной записи в качестве даты оплаты будет установлена дата текущего документа!";
	СтрокаСообщенияПокупатель = "Не заполнено значение реквизита ""Покупатель""!";
	СтрокаСообщенияПоставщик = "Не заполнено значение реквизита ""Поставщик""!";
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";
	Для каждого СтрокаТаблицы Из ТаблицаПоНачислению Цикл
		Если  СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ВнутреннееПотребление
			Или СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
			// Покупателем является сама организация
		ИначеЕсли ТипЗнч(СтрокаТаблицы.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") 
			Или (ТипЗнч(СтрокаТаблицы.СчетФактура) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
			И Не (
				СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные 
				Или СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0 
				Или СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате
				)) 
			Тогда
			// По рознице покупатель не указывается
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.Покупатель) тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части """ + СтрокаТаблицы.НазваниеТаблицы + """: ";
			Если СтрокаТаблицы.НазваниеТаблицы = "Восстановление по другим операциям" Тогда 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияПоставщик, Отказ, Заголовок);
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияПокупатель, Отказ, Заголовок);
			КонецЕсли;			
		КонецЕсли; 
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части """ + СтрокаТаблицы.НазваниеТаблицы + """: ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщенияКорПериод, Отказ ,Заголовок);		
		КонецЕсли;
	КонецЦикла; 

	Для Каждого СтрокаТаблицы Из ТаблицаПоВосстановлениюПоАвансам Цикл
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста 
			И Не ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """ + СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части """ + ВосстановленПоАвансам + """: ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияКорПериод, Отказ ,Заголовок);		
		КонецЕсли;
	КонецЦикла; 
		
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНачислению, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок)
	
	ДвиженияПоРегистрамНачисления(СтруктураШапкиДокумента, ТаблицаПоНачислению, Отказ, Заголовок);
	ДвиженияПоРегистрамВосстановлениеПоАвансам(СтруктураШапкиДокумента, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// По результату запроса по шапке документа формируем движения по регистрам.
//
//
Процедура ДвиженияПоРегистрамНачисления(СтруктураШапкиДокумента, ТаблицаПоНачислению, Отказ, Заголовок)
	
	Если ТаблицаПоНачислению.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если мВестиУчетНДС Тогда
		// Отражение по регистру "НДС начисленный"
		ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНачислению,ТаблицаДвижений_НДСНачисленный);
		ТаблицаДвижений_НДСНачисленный.Свернуть("Период,Активность,Организация,СчетФактура,ВидЦенности,СтавкаНДС,Покупатель,ДатаСобытия,Событие,ВидНачисления,ДоговорКонтрагента,СчетУчетаНДС,ДатаОплаты","СуммаБезНДС,НДС");
			
		Движения.НДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ВыполнитьРасход();
		
	КонецЕсли;
	
	ТаблицаПоНачислению.Колонки.Удалить("ДатаОплаты");
	ТаблицаПоНачислению.Колонки.ДатаОплатыКнигаПродаж.Имя = "ДатаОплаты";
	
	// Отражение по регистру НДСЗаписиКнигиПродаж
	ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("ОтражатьВКниге",Новый ОписаниеТипов("Булево"));
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("НДСНалоговыйПериодДополнительногоЛиста");
	Если СтруктураШапкиДокумента.Реализация0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("СчетФактураДата",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНачислению,ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	
	СтрокиКУдалению = Новый Массив();
	Для каждого СтрокаЗаписи Из ТаблицаДвижений_НДСЗаписиКнигиПродаж Цикл
		Если не СтрокаЗаписи.ОтражатьВКниге Тогда
			СтрокиКУдалению.Добавить(СтрокаЗаписи);
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.Реализация0 и СтрокаЗаписи.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 тогда
			Если СтрокаЗаписи.ЗаписьДополнительногоЛиста = Ложь Тогда
				СтрокаЗаписи.Период = Макс(СтрокаЗаписи.ДатаОплаты, СтрокаЗаписи.СчетФактураДата);
			Иначе				
				СтрокаЗаписи.Период = СтруктураШапкиДокумента.Дата;
			КонецЕсли; 
			СтрокаЗаписи.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
		КонецЕсли;
	КонецЦикла; 
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
	    ТаблицаДвижений_НДСЗаписиКнигиПродаж.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.ОтражатьВКниге);
	
	ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШапкиДокумента, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДСНалоговыйПериодДополнительногоЛиста);
	
	Если СтруктураШапкиДокумента.Реализация0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Состояние);
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СчетФактураДата);
	КонецЕсли;
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты, ДатаОплаты,СтавкаНДС,Покупатель,ДатаСобытия,Событие,ВидЦенности,ЗаписьДополнительногоЛиста,КорректируемыйПериод,СторнирующаяЗаписьДопЛиста, ДоговорКонтрагента","СуммаБезНДС,НДС");
	
	Движения.НДСЗаписиКнигиПродаж.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж;
	Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение(Ложь);
	
	Если мВестиУчетНДС Тогда
		Если СтруктураШапкиДокумента.Реализация0 Тогда
			// Отражение по регистру НДСРеализация0
			ТаблицаДвижений_НДСРеализация0 = Движения.НДСРеализация0.ВыгрузитьКолонки();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНачислению,ТаблицаДвижений_НДСРеализация0);
			ТаблицаДвижений_НДСРеализация0.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
			
			Движения.НДСРеализация0.мПериод 		 = СтруктураШапкиДокумента.Дата;
			Движения.НДСРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСРеализация0;
			Движения.НДСРеализация0.ДобавитьДвижение(Ложь);

		КонецЕслИ;
	КонецЕсли;
	
	ВидыНачисления_Реализация = Новый СписокЗначений;
	ВидыНачисления_Реализация.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);
	ВидыНачисления_Реализация.Добавить(Перечисления.НДСВидНачисления.Реализация0);
	ВидыНачисления_Реализация.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);
	ВидыНачисления_Реализация.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	// Сформировать проводи по записям книги продаж
	Для каждого ТекСтрокаВычета Из ТаблицаПоНачислению Цикл
			
		Если Не ТекСтрокаВычета.ОтражатьВКниге Тогда
			Продолжить;
		ИначеЕсли ТекСтрокаВычета.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрокаВычета.ВидНачисления = Перечисления.НДСВидНачисления.НДСВосстановлен Тогда
			// Проводка по восстановлению НДС на 19 счет 
			Движение = Движения.Хозрасчетный.Добавить();
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.Организация =  СтруктураШапкиДокумента.Организация;
			Движение.Сумма = ТекСтрокаВычета.НДС;
			Движение.Содержание = "Восстановление НДС";
					
			Движение.СчетДт = ТекСтрокаВычета.СчетУчетаНДС; //19.ХХ
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", ТекСтрокаВычета.Покупатель);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФполученные", ТекСтрокаВычета.СчетФактура);
					
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС; //68.02
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				
		КонецЕсли; 			
       
	КонецЦикла; 
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамВосстановлениеПоАвансам(СтруктураШапкиДокумента, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок)
	
	Если ТаблицаПоВосстановлениюПоАвансам.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Отражение по регистру НДСсАвансов
	Если Не СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		
		ТаблицаДвижений_НДСсАвансов = Движения.НДСсАвансов.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВосстановлениюПоАвансам, ТаблицаДвижений_НДСсАвансов);
		ТаблицаДвижений_НДСсАвансов.Свернуть("Период, Активность, Организация, СчетФактура, ВидЦенности, СтавкаНДС, Покупатель, ДоговорКонтрагента, ДатаСобытия", "СуммаБезНДС, НДС");
			
		Движения.НДСсАвансов.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений_НДСсАвансов;
		Движения.НДСсАвансов.ВыполнитьРасход();
		
	КонецЕсли;
	
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("НДСНалоговыйПериодДополнительногоЛиста");
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВосстановлениюПоАвансам, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	                                                                                                                                                                                                                                           
	ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШапкиДокумента, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДСНалоговыйПериодДополнительногоЛиста);
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты, ДатаОплаты,СтавкаНДС,Покупатель,ДатаСобытия,Событие,ВидЦенности,ЗаписьДополнительногоЛиста,КорректируемыйПериод,СторнирующаяЗаписьДопЛиста, ДоговорКонтрагента","СуммаБезНДС,НДС");
		
	Движения.НДСЗаписиКнигиПродаж.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж;
	Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение(Ложь);
	
	// Сформировать проводки по записям книги покупок
	Для каждого СтрокаТаблицы Из ТаблицаПоВосстановлениюПоАвансам Цикл
		Если СтрокаТаблицы.НДС = 0 Тогда
			ПродолжитЬ;
		КонецЕсли; 
		
		Движение = Движения.Хозрасчетный.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация =  СтруктураШапкиДокумента.Организация;
		Движение.Сумма = СтрокаТаблицы.НДС;
		Движение.Содержание = "Восстановление НДС с выданного аванса";
		
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным; //76.ВА

		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", СтрокаТаблицы.Покупатель);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФПолученные", СтрокаТаблицы.СчетФактура);
		
		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС; //68.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
	КонецЦикла; 
	
	
КонецПроцедуры

Процедура ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШапкиДокумента, ТаблицаДвижений_НДСЗаписиКнигиПродаж)
	
	Если СтруктураШапкиДокумента.ФормироватьСторнирующиеЗаписиДопЛистовВручную Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Индексы.Добавить("ЗаписьДополнительногоЛиста");
	Если ТаблицаДвижений_НДСЗаписиКнигиПродаж.Найти( Истина, "ЗаписьДополнительногоЛиста") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвернутаяТаблицаЗаписейДопЛиста = ТаблицаДвижений_НДСЗаписиКнигиПродаж.Скопировать();
	
	Для каждого ТекущаяСтрока Из СвернутаяТаблицаЗаписейДопЛиста Цикл
		// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фактура)
		Если Не (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			Или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
			Или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные)
			Тогда
			ТекущаяСтрока.СтавкаНДС = Неопределено;
		КонецЕсли; 
		// Авансы и налоговый агент (комитент) отрабатываются с учетом договора (на каждый
		// договор отдельный счет-фактура или отдельный лист декларации)
		Если Не (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			Или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
			Или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент
			Или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные)
			Тогда
			// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фактура)
			ТекущаяСтрока.ДоговорКонтрагента = Неопределено;
		КонецЕсли; 
	КонецЦикла; 
	
	СвернутаяТаблицаЗаписейДопЛиста.Свернуть("СчетФактура,СтавкаНДС,ДоговорКонтрагента,ЗаписьДополнительногоЛиста,КорректируемыйПериод,НДСНалоговыйПериодДополнительногоЛиста","СуммаБезНДС,НДС");
	
	СвернутаяТаблицаЗаписейДопЛиста.Индексы.Добавить("ЗаписьДополнительногоЛиста");
	СтрокиДопЛистов = СвернутаяТаблицаЗаписейДопЛиста.НайтиСтроки(Новый Структура("ЗаписьДополнительногоЛиста", Истина));
	
	ОтработанныеСФпоПериодам = Новый ТаблицаЗначений();
	ОтработанныеСФпоПериодам.Колонки.Добавить("СчетФактура");
	ОтработанныеСФпоПериодам.Колонки.Добавить("НалоговыйПериод");
	ОтработанныеСФпоПериодам.Колонки.Добавить("СтавкаНДС");
	ОтработанныеСФпоПериодам.Колонки.Добавить("ДоговорКонтрагента");
	ОтработанныеСФпоПериодам.Индексы.Добавить("СчетФактура,НалоговыйПериод");
	
	Для Каждого СтрокаДопЛиста Из СтрокиДопЛистов Цикл
		НачалоНалоговогоПериодаКорректировки = ?(СтрокаДопЛиста.НДСНалоговыйПериодДополнительногоЛиста = Перечисления.Периодичность.Квартал, НачалоКвартала(СтрокаДопЛиста.КорректируемыйПериод), НачалоМесяца(СтрокаДопЛиста.КорректируемыйПериод));
		ОтборОтработанныхЗаписей = Новый Структура("СчетФактура,НалоговыйПериод", СтрокаДопЛиста.СчетФактура, НачалоНалоговогоПериодаКорректировки);
		
		Если ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС) Тогда
			ОтборОтработанныхЗаписей.Вставить("СтавкаНДС", СтрокаДопЛиста.СтавкаНДС);
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорКонтрагента) Тогда
			ОтборОтработанныхЗаписей.Вставить("ДоговорКонтрагента", СтрокаДопЛиста.ДоговорКонтрагента);
		КонецЕсли; 
		
		Если не (ОтработанныеСФпоПериодам.НайтиСтроки(ОтборОтработанныхЗаписей).Количество() = 0) Тогда
			// СФ по данному налоговому периоду уже отработан
			Продолжить;
		Иначе
			НоваяЗапись = ОтработанныеСФпоПериодам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ОтборОтработанныхЗаписей);
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПродажОбороты.Организация,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.ДатаОплаты,
		|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты,
		|	НДСЗаписиКнигиПродажОбороты.Событие,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот * -1 КАК СуммаБезНДССторно,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот * -1 КАК НДССторно,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДС,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДС,
		|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаГраница,
		|			Месяц,
		|			СчетФактура = &СчетФактура
		|				И ВЫБОР
		|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ДоговорКонтрагента = &ДоговорКонтрагента
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &СтавкаНДС = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ СтавкаНДС = &СтавкаНДС
		|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	((НЕ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста)
		|				И НДСЗаписиКнигиПродажОбороты.Период = &НачалоПериода
		|			ИЛИ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста
		|				И (НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод МЕЖДУ &НачалоПериода И КОНЕЦПЕРИОДА(&НачалоПериода, МЕСЯЦ)))
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты";
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоНалоговогоПериодаКорректировки);
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтруктураШапкиДокумента.Дата), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("СчетФактура", СтрокаДопЛиста.СчетФактура);
		Запрос.УстановитьПараметр("СтавкаНДС", ?(ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС), СтрокаДопЛиста.СтавкаНДС, Неопределено));
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ?(ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорКонтрагента), СтрокаДопЛиста.ДоговорКонтрагента, Неопределено));
		
		Если СтрокаДопЛиста.НДСНалоговыйПериодДополнительногоЛиста = Перечисления.Периодичность.Квартал Тогда
			Запрос.Текст = СтрЗаменить(Нрег(Запрос.Текст),"месяц","квартал");
		КонецЕсли; 
		
		Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
					
			СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "НДСЗаписиКнигиПродаж");
			
			ЗначенияБлокировки = Новый Соответствие;
			ЗначенияБлокировки.Вставить("Период", Новый Диапазон(НачалоНалоговогоПериодаКорректировки, КонецДня(СтруктураШапкиДокумента.Дата))); 
			ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
			ЗначенияБлокировки.Вставить("СчетФактура", СтрокаДопЛиста.СчетФактура); 
			ЗначенияБлокировки.Вставить("СтавкаНДС", СтрокаДопЛиста.СтавкаНДС); 
			ЗначенияБлокировки.Вставить("ДоговорКонтрагента", СтрокаДопЛиста.ДоговорКонтрагента); 
			
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
									
		КонецЕсли;

		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			ТаблицаЗаписей = Результат.Выгрузить();
			
			ТаблицаЗаписей.Колонки.Добавить("ЗаписьДополнительногоЛиста");
			ТаблицаЗаписей.Колонки.Добавить("КорректируемыйПериод");
			ТаблицаЗаписей.Колонки.Добавить("ДатаСобытия");
			ТаблицаЗаписей.Колонки.Добавить("СторнирующаяЗаписьДопЛиста");
			
			ТаблицаЗаписей.ЗаполнитьЗначения(Истина, "ЗаписьДополнительногоЛиста,СторнирующаяЗаписьДопЛиста");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтрокаДопЛиста.КорректируемыйПериод, "КорректируемыйПериод");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ДатаСобытия");
			
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СуммаБезНДС.Имя = "СуммаБезНДССторно";
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДС.Имя = "НДССторно";
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
			
			ТаблицаЗаписей.ЗаполнитьЗначения(Ложь, "СторнирующаяЗаписьДопЛиста");
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СуммаБезНДССторно.Имя = "СуммаБезНДС";
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДССторно.Имя = "НДС";
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС", Ложь);
	КонецЕсли; 
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	ТаблицаПоНачислению = ПодготовитьТаблицуЗаписей(СтруктураШапкиДокумента);
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части по восстановлению по авансам.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",		 "Ссылка.Организация");
	СтруктураПолей.Вставить("Покупатель",		 "Поставщик");
	СтруктураПолей.Вставить("ДоговорКонтрагента","ДоговорКонтрагента");
	СтруктураПолей.Вставить("СчетФактура",	 	 "СчетФактура");
	СтруктураПолей.Вставить("ДатаСчетаФактуры",	 "СчетФактура.Дата");
	СтруктураПолей.Вставить("СтавкаНДС",		 "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",		 "СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",				 "НДС");
	СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
	СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
	
	РезультатЗапросаПоВосстановлениюПоАвансам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВосстановленПоАвансам", СтруктураПолей);
	ТаблицаПоВосстановлениюПоАвансам = ПодготовитьТаблицуПоВосстановлениюПоАвансам(РезультатЗапросаПоВосстановлениюПоАвансам, СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеТабличныхЧастей(СтруктураШапкиДокумента, ТаблицаПоНачислению, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок);
	
	мВестиУчетНДС = УчетНДС.ПроводитьПоРазделуУчетаНДС(Дата);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНачислению, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок);
	КонецЕсли;
	
	Если Не Отказ Тогда
		УниверсальныеМеханизмы.ЗафиксироватьФактВыполненияРегламентнойОперации(НачалоМесяца(Дата),
													  СтруктураШапкиДокумента.Организация,
													  Ссылка,														  
													  ?(СтруктураШапкиДокумента.Реализация0,Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0,Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж));
	ЗакрытиеМесяца.ЗаписатьСписокНеАктуальныхРегОпераций(Организация, Дата, "НДС");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	УниверсальныеМеханизмы.СброситьФактВыполненияОперации(Ссылка);
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	ЗакрытиеМесяца.ЗаписатьСписокНеАктуальныхРегОпераций(Организация, Дата, "НДС");
	
КонецПроцедуры


