Перем ОшибкаВыгрузки;
Перем ТаблицаСообщений;
Перем РежимВызоваЭкспортируемогоМетодаФормы;
Перем Месяц;
Перем мТекущаяДатаДокумента;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция отрабатывает изменение одного из параметров отбора документов.
//
Функция ИзменениеПараметровОтбора() 
	
	Если (Основания.Количество() = 0) И (Выгрузки.Количество() = 0) Тогда
		Основания.Очистить();
		ЭлементыФормы.КодИМНС.СписокВыбора.Очистить();
		Возврат Истина;
	КонецЕсли;
	Если Вопрос("При изменении реквизита будут очищены список документов и тексты выгрузок." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	Иначе
		Основания.Очистить();
		ЭлементыФормы.КодИМНС.СписокВыбора.Очистить();
		Выгрузки.Очистить();
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура формирует электронные представления выбранных в списке СпДокОсн документов.
//
Процедура СформироватьТекстыВыгрузки(ПечатаемыеЛисты = Неопределено, ДляЦелейФормированияМЧБ = Ложь, ПроверкаБлокировкиФормы = Ложь, ДляОтправкиВФНС = Ложь)
	
	ОшибкаВыгрузки = Ложь;
	
	ФормаНавигацииПоОшибкам = Документы.ВыгрузкаРегламентированныхОтчетов.ПолучитьФорму("ФормаНавигацииПоОшибкам");
	Если ФормаНавигацииПоОшибкам.Открыта() Тогда
		ФормаНавигацииПоОшибкам.Закрыть();
	КонецЕсли;
	
	КоличествоДокументовДляВыгрузки = 0;
	Для Каждого Стр Из Основания Цикл
		Если Стр.Пометка Тогда
			КоличествоДокументовДляВыгрузки = КоличествоДокументовДляВыгрузки + 1;
		КонецЕсли;
	КонецЦикла;
		
	Если КоличествоДокументовДляВыгрузки = 0 Тогда
		Предупреждение("Не выбраны документы!");
		ОшибкаВыгрузки = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Основания Цикл
		Док = Стр.Ссылка;
		Если Док.Организация <> Основания.Получить(0).Ссылка.Организация Тогда
			Предупреждение("У выбранных отчетов различаются реквизиты ""Организация"". Пакетная выгрузка невозможна!");
			ОшибкаВыгрузки = Истина;
			Возврат;
		КонецЕсли;
		Если КонецДня(Док.ДатаОкончания) <> КонецДня(Основания.Получить(0).Ссылка.ДатаОкончания) Тогда
			Предупреждение("У выбранных отчетов различаются даты окончания периодов составления. Пакетная выгрузка невозможна!");
			ОшибкаВыгрузки = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;

	//проверка на то, что у всех документов-оснований один код ИМНС
	ИМНСы = Новый ТаблицаЗначений;
	ИМНСы.Колонки.Добавить("КодИМНС");
	Для Каждого Стр из Основания Цикл
		Если Стр.Пометка И СокрЛП(Стр.Ссылка.КодИМНС) <> "" Тогда //исключаем из проверки отчеты в ПФР и в ФСС с пустым кодом ИМНС
			НовСтр = ИМНСы.Добавить();
			НовСтр.КодИМНС = Стр.Ссылка.КодИМНС;
		КонецЕсли;
	КонецЦикла;
	ИМНСы.Свернуть("КодИМНС");
	Если ИМНСы.Количество() > 1 Тогда
		Сообщить("У выбранных отчетов различаются коды ИМНС, в которую они должны представляться. Процесс прерван!", СтатусСообщения.Важное);
		ОшибкаВыгрузки = Истина;
		Возврат;
	КонецЕсли;
	//конец проверки
	
	//очищаем табличную часть, в которой хранятся ранее сформированные выгрузки
	Выгрузки.Очистить();
	
	Основания.ЗаполнитьЗначения(0, "НомерСтрокиТекстаВыгрузки");
	
	ОтчетыВыгружаемыеТолькоИзФормы = Новый Массив;
	
	//заполняем таблицу "документ для выгрузки <-> версия формата выгрузки"
	ВерсииИОтчеты = Новый ТаблицаЗначений;
	ВерсииИОтчеты.Колонки.Добавить("Док");
	ВерсииИОтчеты.Колонки.Добавить("Версия");
	
	ЕстьНеопределенныеФорматы = Ложь;
	Для Каждого Стр из Основания Цикл
		Если Стр.Пометка Тогда
			НовСтр = ВерсииИОтчеты.Добавить();
			НовСтр.Док = Стр.Ссылка;
			НовСтр.Версия = РегламентированнаяОтчетность.ВерсияФорматаВыгрузки(Стр.Ссылка, Стр.Ссылка.ДатаОкончания);
			Если Стр.Ссылка.ИсточникОтчета = "РегламентированныйОтчетЗаявлениеОВвозеТоваров" Тогда
				ОтчетыВыгружаемыеТолькоИзФормы.Добавить(Стр.Ссылка);
			ИначеЕсли НовСтр.Версия = Неопределено Тогда
				ЕстьНеопределенныеФорматы = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//заполнили таблицу
	
	Если ОтчетыВыгружаемыеТолькоИзФормы.Количество() > 0 Тогда
		Сообщить("Выгрузка следующих отчетов возможна только из формы отчета:", СтатусСообщения.Важное);
		Для Каждого Док Из ОтчетыВыгружаемыеТолькоИзФормы Цикл
			Сообщить(" - " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(Док));
		КонецЦикла;
		ОшибкаВыгрузки = Истина;
		Возврат;
	КонецЕсли;
	
	//Если среди выбранных присутствуют отчеты с неопределенным форматом выгрузки, то 
	//выведем список этих отчетов и прекратим формирование электронного представления
	Если ЕстьНеопределенныеФорматы Тогда
		Сообщить("Для следующих отчетов выгрузка не предусмотрена:", СтатусСообщения.Важное);
		Для Каждого Стр Из ВерсииИОтчеты Цикл
			Если Стр.Версия = Неопределено Тогда
				Сообщить(" - " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(Стр.Док));
			КонецЕсли;
		КонецЦикла;
		Сообщить("Продолжение невозможно. Формирование текстов выгрузки прервано.", СтатусСообщения.Важное);
		ОшибкаВыгрузки = Истина;
		Возврат;
	КонецЕсли;
	
	//Определим список отчетов, которые должны выгружаться в формате <> Перечисления.ПорядкиОкругленияОтчетности.Окр1
	ОтчетыСохраненныеСНевернымОкруглением = Новый СписокЗначений;
	
	// Определим список отчетов, которые не могут отправляться в ФНС
	Если ДляОтправкиВФНС Тогда
		ОтчетыНеотправляемыеВФНС = Новый Массив;
	КонецЕсли;
	
	ОтчетыБаланса = Новый СписокЗначений;
	ОтчетыБаланса.Добавить("РегламентированныйОтчетБаланс");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма2");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма3");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма4");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма5");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма6");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетБухОтчетность");
	
	ОтчетыАлко = Новый СписокЗначений;
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение1");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение2");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение3");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение4");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение5");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение6");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение7");
	
	ОтчетыФЛ =  Новый СписокЗначений;
	ОтчетыФЛ.Добавить("РегламентированныйОтчет3НДФЛ");
	ОтчетыФЛ.Добавить("РегламентированныйОтчет4НДФЛ");
	
	ОтчетыФСС = Новый СписокЗначений;
	ОтчетыФСС.Добавить("РегламентированныйОтчет4ФСС");
	
	ОтчетыРСВ2 = Новый СписокЗначений;
	ОтчетыРСВ2.Добавить("РегламентированныйОтчетРСВ2");
	
	ОтчетыФСГС = Новый СписокЗначений;
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1РП");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Т");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма3Ф");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма5З");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1И");
    ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП1");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП1Приложение3");
    ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП2");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП2к");
    ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП3");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП4");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП5М");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаПМ");
	
	Для Каждого Стр Из ВерсииИОтчеты Цикл
		Док = Стр.Док;
		ЕдИзм = Док.ЕдиницаИзмерения;
		Точность = Док.ТочностьЕдиницыИзмерения;
		Отч = Док.ИсточникОтчета;
		Если ОтчетыАлко.НайтиПоЗначению(Отч) <> Неопределено Тогда
			Если ДляОтправкиВФНС Тогда
				ОтчетыНеотправляемыеВФНС.Добавить(Стр);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если ОтчетыФЛ.НайтиПоЗначению(Отч) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОтчетыФСГС.НайтиПоЗначению(Отч) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОтчетыБаланса.НайтиПоЗначению(Отч) <> Неопределено Тогда
			Если ЕдИзм <> Перечисления.ПорядкиОкругленияОтчетности.Окр1000 И
				 ЕдИзм <> Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
				Продолжить;
			КонецЕсли;
		ИначеЕсли ОтчетыФСС.НайтиПоЗначению(Отч) <> Неопределено Тогда
			Если ЕдИзм <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
			КонецЕсли;
			Продолжить;
		ИначеЕсли ОтчетыРСВ2.НайтиПоЗначению(Отч) <> Неопределено Тогда
			Если ЕдИзм <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
			КонецЕсли;
			Продолжить;
		Иначе
			Если ЕдИзм <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Точность <> 0 Тогда
			ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	
	// если отчетов, которые нельзя отправлять в ФНС, больше нуля,
	// тогда сообщим пользователю
	Если ДляОтправкиВФНС И ОтчетыНеотправляемыеВФНС.Количество() > 0 Тогда
		Сообщить("Следующие отчеты не предназначены для отправки в ФНС по каналам связи:", СтатусСообщения.Важное);
		Для Каждого ОтчетНеотправляемыйВФНС Из ОтчетыНеотправляемыеВФНС Цикл
			Сообщить(" - " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ОтчетНеотправляемыйВФНС.Док), СтатусСообщения.Важное);
		КонецЦикла;
		ОшибкаВыгрузки = Истина;
		Возврат;
	КонецЕсли;
	
	//если отчетов, которые сохранены с неверным округлением, больше 0, тогда сообщим пользователю,
	//взведем флаг ошибки и прервемся
	Если ОтчетыСохраненныеСНевернымОкруглением.Количество() <> 0 Тогда
		Сообщить("Следующие отчеты сохранены с единицей измерения и/или точностью, не соответствующими требованиям формата выгрузки:", СтатусСообщения.Внимание);
		Для Каждого Сч Из ОтчетыСохраненныеСНевернымОкруглением Цикл
			ТекстСообщения = " - " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(Сч.Значение.Док);
			ТекстСообщения = ТекстСообщения + " должен быть сохранен с единицей измерения ";
			Если ОтчетыБаланса.НайтиПоЗначению(Сч.Значение.Док.ИсточникОтчета) <> Неопределено Тогда
				ТекстСообщения = ТекстСообщения + """в тысячах рублей"" или ""в миллионах рублей"" с точностью ""0""";
			ИначеЕсли ОтчетыФСС.НайтиПоЗначению(Сч.Значение.Док.ИсточникОтчета) <> Неопределено Тогда
				ТекстСообщения = ТекстСообщения + """в рублях"" с точностью ""2""";
			ИначеЕсли ОтчетыРСВ2.НайтиПоЗначению(Сч.Значение.Док.ИсточникОтчета) <> Неопределено Тогда
				ТекстСообщения = ТекстСообщения + """в рублях""";
			Иначе
				ТекстСообщения = ТекстСообщения + """в рублях"" с точностью ""0""";
			КонецЕсли;
			Сообщить(ТекстСообщения);
		КонецЦикла;
		Сообщить("Сохраните отчеты с нужной единицей измерения и перезапустите процесс формирования.", СтатусСообщения.Внимание);
		Сообщить("Продолжение невозможно! Формирование текстов выгрузки прервано.", СтатусСообщения.Внимание);
		ОшибкаВыгрузки = Истина;
		Возврат;
	КонецЕсли;
	
	ТаблицаСообщений.Очистить();
	
	ОтборФСС		= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.ВерсияФСС		));
	Отбор700ПФР		= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.Версия700ПФР	));
	Отбор500		= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.Версия500		));
	Отбор400		= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.Версия400		));
	Отбор300		= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.Версия300		));
	Отбор201		= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.Версия201		));
	Отбор201алко	= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.Версия201алко	));
	Отбор302алко	= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.Версия302алко	));
	Отбор401алко	= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.Версия401алко	));
	ОтборФСГС		= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.ВерсияФСГС	));
	
	СчетчикВыгруженныхДокументов = 0;
	НомОтч = 0;
	ВыгрузкаПрервана = Ложь;
	
	//выгрузка в формате ФСС
	Если ОтборФСС.Количество() <> 0 Тогда
		Текст = Новый ТекстовыйДокумент;
		ТекТекст = Новый ТекстовыйДокумент;
	
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из ОтборФСС Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			Состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			
			Попытка
				ТекстВыгрузкиВXML = "";
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.мВыбраннаяФорма = ТекДок.ВыбраннаяФорма;
				ТекФорма.Организация = ТекДок.Организация;
				
				Если ПроверкаБлокировкиФормы Тогда
					Отказ = Ложь;
					РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ТекФорма, Отказ);
					Если Отказ Тогда
						ВызватьИсключение Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекФорма.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML, НЕ ДляЦелейФормированияМЧБ) Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
				ТекстСообщения = "Не удалось выгрузить " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок.Ссылка) + "!";
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				ОшибкаВыгрузки = Истина;
				ОтобразитьФормуНавигацииПоОшибкам();
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если НЕ ВыгрузкаПрервана Тогда
				НовСтр = Выгрузки.Добавить();
				НовСтр.ИмяФайла	= ОпределитьИмяФайлаВыгрукиФССПоТекстуВыгрузки(ТекстВыгрузкиВXML);
				НовСтр.Тип		= Перечисления.ВерсииФорматовВыгрузки.ВерсияФСС;
				НовСтр.Текст	= ТекстВыгрузкиВXML;
				ТекСтр			= Основания.Найти(ТекДок, "Ссылка");
				Если ТекСтр <> Неопределено И ТекСтр.Пометка Тогда
					ТекСтр.НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате ФСС
	
	//выгрузка в формате 7.00
	Если Отбор700ПФР.Количество() <> 0 И (НЕ ВыгрузкаПрервана) Тогда
		Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате 7.00
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
	
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из Отбор700ПФР Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			Состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			
			Попытка
				ТекстВыгрузкиВXML = "";
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.мВыбраннаяФорма = ТекДок.ВыбраннаяФорма;
				ТекФорма.Организация = ТекДок.Организация;
				
				Если ПроверкаБлокировкиФормы Тогда
					Отказ = Ложь;
					РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ТекФорма, Отказ);
					Если Отказ Тогда
						ВызватьИсключение Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекФорма.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML, НЕ ДляЦелейФормированияМЧБ) Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
				ТекстСообщения = "Не удалось выгрузить " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок.Ссылка) + "!";
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				ОшибкаВыгрузки = Истина;
				ОтобразитьФормуНавигацииПоОшибкам();
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если НЕ ВыгрузкаПрервана Тогда
				НовСтр = Выгрузки.Добавить();
				НовСтр.ИмяФайла	= ИзвлечьИмяФайлаИзТекстаXML700ПФР(ТекстВыгрузкиВXML);
				НовСтр.Тип		= Перечисления.ВерсииФорматовВыгрузки.Версия700ПФР;
				НовСтр.Текст	= ТекстВыгрузкиВXML;
				ТекСтр			= Основания.Найти(ТекДок, "Ссылка");
				Если ТекСтр <> Неопределено И ТекСтр.Пометка Тогда
					ТекСтр.НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 7.00
	
	//выгрузка в формате 5.00
	Если Отбор500.Количество() <> 0 И (НЕ ВыгрузкаПрервана) Тогда
		
		Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате 5.00
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
	
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из Отбор500 Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			Состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			
			Попытка
				ТекстВыгрузкиВXML = "";
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.мВыбраннаяФорма = ТекДок.ВыбраннаяФорма;
				ТекФорма.Организация = ТекДок.Организация;
				
				Если ПроверкаБлокировкиФормы Тогда
					Отказ = Ложь;
					РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ТекФорма, Отказ);
					Если Отказ Тогда
						ВызватьИсключение Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекФорма.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML, НЕ ДляЦелейФормированияМЧБ) Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
				ТекстСообщения = "Не удалось выгрузить " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок.Ссылка) + "!";
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				ОшибкаВыгрузки = Истина;
				ОтобразитьФормуНавигацииПоОшибкам();
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если НЕ ВыгрузкаПрервана Тогда
				НовСтр = Выгрузки.Добавить();
				НовСтр.ИмяФайла	= ИзвлечьИмяФайлаИзТекстаXML(ТекстВыгрузкиВXML);
				НовСтр.Тип		= Перечисления.ВерсииФорматовВыгрузки.Версия500;
				НовСтр.Текст	= ТекстВыгрузкиВXML;
				ТекСтр			= Основания.Найти(ТекДок, "Ссылка");
				Если ТекСтр <> Неопределено И ТекСтр.Пометка Тогда
					ТекСтр.НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 5.00
	
	//выгрузка в формате 4.00
	Если Отбор400.Количество() <> 0 И (НЕ ВыгрузкаПрервана) Тогда
		
		Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате 4.00
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
	
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из Отбор400 Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			Состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			
			Попытка
				ТекстВыгрузкиВXML = "";
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.мВыбраннаяФорма = ТекДок.ВыбраннаяФорма;
				ТекФорма.Организация = ТекДок.Организация;
				
				Если ПроверкаБлокировкиФормы Тогда
					Отказ = Ложь;
					РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ТекФорма, Отказ);
					Если Отказ Тогда
						ВызватьИсключение Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекФорма.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML, НЕ ДляЦелейФормированияМЧБ) Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
				ТекстСообщения = "Не удалось выгрузить " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок.Ссылка) + "!";
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				ОшибкаВыгрузки = Истина;
				ОтобразитьФормуНавигацииПоОшибкам();
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если НЕ ВыгрузкаПрервана Тогда
				НовСтр = Выгрузки.Добавить();
				НовСтр.ИмяФайла	= ИзвлечьИмяФайлаИзТекстаXML(ТекстВыгрузкиВXML);
				НовСтр.Тип		= Перечисления.ВерсииФорматовВыгрузки.Версия400;
				НовСтр.Текст	= ТекстВыгрузкиВXML;
				ТекСтр			= Основания.Найти(ТекДок, "Ссылка");
				Если ТекСтр <> Неопределено И ТекСтр.Пометка Тогда
					ТекСтр.НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 4.00
	
	//выгрузка в формате 4.01 алко
	Если Отбор401алко.Количество() <> 0 И (НЕ ВыгрузкаПрервана) Тогда
		
		Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате 4.01 алко
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
	
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из Отбор401алко Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			Состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			
			Попытка
				ТекстВыгрузкиВXML = "";
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.мВыбраннаяФорма = ТекДок.ВыбраннаяФорма;
				ТекФорма.Организация = ТекДок.Организация;
				
				Если ПроверкаБлокировкиФормы Тогда
					Отказ = Ложь;
					РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ТекФорма, Отказ);
					Если Отказ Тогда
						ВызватьИсключение Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекФорма.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML, НЕ ДляЦелейФормированияМЧБ) Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
				ТекстСообщения = "Не удалось выгрузить " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок.Ссылка) + "!";
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				ОшибкаВыгрузки = Истина;
				ОтобразитьФормуНавигацииПоОшибкам();
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если НЕ ВыгрузкаПрервана Тогда
				НовСтр = Выгрузки.Добавить();
				НовСтр.ИмяФайла	= ИзвлечьИмяФайлаИзТекстаXML(ТекстВыгрузкиВXML);
				НовСтр.Тип		= Перечисления.ВерсииФорматовВыгрузки.Версия401алко;
				НовСтр.Текст	= ТекстВыгрузкиВXML;
				ТекСтр			= Основания.Найти(ТекДок, "Ссылка");
				Если ТекСтр <> Неопределено И ТекСтр.Пометка Тогда
					ТекСтр.НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 4.01 алко
	
	//выгрузка в формате 3.00
	Если Отбор300.Количество() <> 0 И (НЕ ВыгрузкаПрервана) Тогда
		
		Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате 3.00
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
	
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из Отбор300 Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			Состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			КПП = ТекДок.КПП;
			Если НЕ ЗначениеЗаполнено(КПП) Тогда
				КПП = РегламентированнаяОтчетность.КПППоКомбинацииОрганизацииИКодаИФНС(Организация, КодИМНС);
			КонецЕсли;
			
			Если КПП = Неопределено Тогда
				ОшибкаВыгрузки = Истина;
				Возврат;
			КонецЕсли;
			
			//пытаемся сформировать служебную часть выгрузки и сведения об отправителе
			//если не получается - взводим флаг ошибки и прерываемся
			Текст.Очистить();
			Если (НЕ РегламентированнаяОтчетность.ВывестиСведенияСлужебнойЧасти30(Текст, Организация, , , КПП, СокрЛП(КодИМНС))) ИЛИ (НЕ РегламентированнаяОтчетность.ВывестиСведенияОбОтправителе30(Текст, Организация)) Тогда
				Сообщить("Не удалось сформировать общую информацию для файла выгрузки формата 3.00!", СтатусСообщения.Внимание);
				ОшибкаВыгрузки = Истина;			
				Возврат;
			КонецЕсли;
			
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.мВыбраннаяФорма = ТекДок.ВыбраннаяФорма;
				
				Если ПроверкаБлокировкиФормы Тогда
					Отказ = Ложь;
					РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ТекФорма, Отказ);
					Если Отказ Тогда
						ВызватьИсключение Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				ТекФорма.ИнициализацияСоставаПоказателей();
				
				Если ТекФорма.УниверсальнаяВыгрузка(ТекТекст, НЕ ДляЦелейФормированияМЧБ) Тогда
				    Текст.УстановитьТекст(Текст.ПолучитьТекст() + ТекТекст.ПолучитьТекст());
					Текст.ДобавитьСтроку("@@@");
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
				ТекстСообщения = "Не удалось выгрузить " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок.Ссылка) + "!";
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				ОшибкаВыгрузки = Истина;
				ОтобразитьФормуНавигацииПоОшибкам();
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если НЕ ВыгрузкаПрервана Тогда
				Текст.ДобавитьСтроку("===");
				Текст.ЗаменитьСтроку(6, "КолДок:1");	
				ПроставитьИдДок(Текст, Организация);//+наращиваем счетчик
				НовСтр = Выгрузки.Добавить();
				ИмяФайлаВыгрузки = СформироватьИмяФайла(ТекДок);
				Если ИмяФайлаВыгрузки = Неопределено Тогда
					ОшибкаВыгрузки = Истина;
					ВыгрузкаПрервана = Истина;
					Прервать;
				КонецЕсли;
				НовСтр.ИмяФайла = ИмяФайлаВыгрузки;
				НовСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия300;
				НовСтр.Текст = Текст.ПолучитьТекст();
				ТекСтр = Основания.Найти(ТекДок, "Ссылка");
				Если ТекСтр <> Неопределено И ТекСтр.Пометка Тогда
					ТекСтр.НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 3.00
	
	//выгрузка в формате 2.01
	СчетчикВыгруженныхДокументов201 = 0;
	Если (Отбор201.Количество() <> 0) И (Не ВыгрузкаПрервана) Тогда
		
		Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате 2.01
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
		
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из Отбор201 Цикл
			
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			Состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			
			Текст.Очистить();
			//пытаемся сформировать служебную часть выгрузки и сведения об отправителе
			//если не получается - взводим флаг ошибки и прерываемся
			Если (НЕ РегламентированнаяОтчетность.ВывестиСведенияСлужебнойЧасти30(Текст, Организация, , , , СокрЛП(КодИМНС), , "2.01")) ИЛИ (НЕ РегламентированнаяОтчетность.ВывестиСведенияОбОтправителе30(Текст, Организация)) Тогда
				Сообщить("Не удалось сформировать общую информацию для файла выгрузки формата 2.01!", СтатусСообщения.Внимание);
				ОшибкаВыгрузки = Истина;			
				Возврат;
			КонецЕсли;
				
			Если Не ВывестиСведенияИнформационнойЧасти201ИСведенияОбОрганизации(Текст, Организация) Тогда
				Сообщить("Не удалось выгрузить сведения об организации для файла выгрузки формата 2.01!", СтатусСообщения.Внимание);
				ОшибкаВыгрузки = Истина;			
				Возврат;
			КонецЕсли;
				
			Если НЕ ВывестиСведенияОРуководствеОрганизации201(Текст, Организация) Тогда
				Сообщить("Не удалось выгрузить сведения о руководстве организации для файла выгрузки формата 2.01!", СтатусСообщения.Внимание);
				ОшибкаВыгрузки = Истина;			
				Возврат;
			КонецЕсли;
			
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				Текформа = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				//инициализируем "окружение" для универсальной выгрузки
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.мВыбраннаяФорма = ТекДок.ВыбраннаяФорма;
				
				Если ПроверкаБлокировкиФормы Тогда
					Отказ = Ложь;
					РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ТекФорма, Отказ);
					Если Отказ Тогда
						ВызватьИсключение Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				ТекФорма.ИнициализацияСоставаПоказателей();
				
				//вызываем универсальную выгрузку
				Если ТекФорма.УниверсальнаяВыгрузка(ТекТекст, НЕ ДляЦелейФормированияМЧБ) Тогда
				    Текст.УстановитьТекст(Текст.ПолучитьТекст() + ТекТекст.ПолучитьТекст());
					//Текст.ДобавитьСтроку("@@@");
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
					СчетчикВыгруженныхДокументов201 = СчетчикВыгруженныхДокументов201 + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
				ТекстСообщения = "Не удалось выгрузить " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок.Ссылка) + "!";
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				ОшибкаВыгрузки = Истина;
				ОтобразитьФормуНавигацииПоОшибкам();
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если НЕ ВыгрузкаПрервана Тогда
				//добавляем признак конца файла выгрузки
				Текст.ДобавитьСтроку("@@@");
				Текст.ДобавитьСтроку("===");
				Если СчетчикВыгруженныхДокументов <> 0 Тогда
					ПроставитьКолФОтч(Текст, 1);	
					ПроставитьИдДок(Текст, Организация);//+наращиваем счетчик
					НовСтр = Выгрузки.Добавить();
					ИмяФайлаВыгрузки = СформироватьИмяФайла(ТекДок);
					Если ИмяФайлаВыгрузки = Неопределено Тогда
						ОшибкаВыгрузки = Истина;
						ВыгрузкаПрервана = Истина;
						Прервать;
					КонецЕсли;
					НовСтр.ИмяФайла = ИмяФайлаВыгрузки;
					НовСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия201;
					НовСтр.Текст = Текст.ПолучитьТекст();
					ТекСтр = Основания.Найти(ТекДок, "Ссылка");
					Если ТекСтр <> Неопределено И ТекСтр.Пометка Тогда
						ТекСтр.НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла;
		//скомпилировали общий текст выгрузки из текстов для каждого документа
		
	КонецЕсли;
	
	// выгрузка в формате 2.01 алко
	Если (Отбор201алко.Количество() <> 0) И (Не ВыгрузкаПрервана) Тогда
		
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
		
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из Отбор201алко Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				//инициализируем "окружение" для универсальной выгрузки
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.мВыбраннаяФорма = ТекДок.ВыбраннаяФорма;
				
				Если ПроверкаБлокировкиФормы Тогда
					Отказ = Ложь;
					РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ТекФорма, Отказ);
					Если Отказ Тогда
						ВызватьИсключение Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				ТекФорма.Инициализация(Истина);
				
				//вызываем универсальную выгрузку
				Если ТекФорма.УниверсальнаяВыгрузка(ТекТекст, НЕ ДляЦелейФормированияМЧБ) Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
				ТекстСообщения = "Не удалось выгрузить " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок.Ссылка) + "!";
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				ОшибкаВыгрузки = Истина;
				ОтобразитьФормуНавигацииПоОшибкам();
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если СчетчикВыгруженныхДокументов <> 0 Тогда
				НовСтр = Выгрузки.Добавить();
				ИмяФайлаВыгрузки = СформироватьИмяФайла(ТекДок, Перечисления.ВерсииФорматовВыгрузки.Версия201алко);
				Если ИмяФайлаВыгрузки = Неопределено Тогда
					ОшибкаВыгрузки = Истина;
					ВыгрузкаПрервана = Истина;
					Прервать;
				КонецЕсли;
				НовСтр.ИмяФайла = ИмяФайлаВыгрузки;
				НовСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия201алко;
				НовСтр.Текст = ТекТекст.ПолучитьТекст();
				ТекСтр = Основания.Найти(ТекДок, "Ссылка");
				Если ТекСтр <> Неопределено И ТекСтр.Пометка Тогда
					ТекСтр.НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// выгрузка в формате 3.02 алко
	Если (Отбор302алко.Количество() <> 0) И (Не ВыгрузкаПрервана) Тогда
		
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
		
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из Отбор302алко Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				//инициализируем "окружение" для универсальной выгрузки
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.мВыбраннаяФорма = ТекДок.ВыбраннаяФорма;
				
				Если ПроверкаБлокировкиФормы Тогда
					Отказ = Ложь;
					РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ТекФорма, Отказ);
					Если Отказ Тогда
						ВызватьИсключение Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				ТекФорма.Инициализация(Истина);
				
				//вызываем универсальную выгрузку
				Если ТекФорма.УниверсальнаяВыгрузка(ТекТекст, НЕ ДляЦелейФормированияМЧБ) Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
				ТекстСообщения = "Не удалось выгрузить " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок.Ссылка) + "!";
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				ОшибкаВыгрузки = Истина;
				ОтобразитьФормуНавигацииПоОшибкам();
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если СчетчикВыгруженныхДокументов <> 0 Тогда
				НовСтр = Выгрузки.Добавить();
				ИмяФайлаВыгрузки = СформироватьИмяФайла(ТекДок, Перечисления.ВерсииФорматовВыгрузки.Версия302алко);
				Если ИмяФайлаВыгрузки = Неопределено Тогда
					ОшибкаВыгрузки = Истина;
					ВыгрузкаПрервана = Истина;
					Прервать;
				КонецЕсли;
				НовСтр.ИмяФайла = ИмяФайлаВыгрузки;
				НовСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия302алко;
				НовСтр.Текст = ТекТекст.ПолучитьТекст();
				ТекСтр = Основания.Найти(ТекДок, "Ссылка");
				Если ТекСтр <> Неопределено И ТекСтр.Пометка Тогда
					ТекСтр.НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//выгрузка в формате ФСГС
	Если ОтборФСГС.Количество() <> 0 И (НЕ ВыгрузкаПрервана) Тогда
		
		Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате 5.00
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
	
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из ОтборФСГС Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			Состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			
			ТекстВыгрузкиВXML = ""; ИмяФайлаXML = "";
			
			Попытка
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.мПериодичность = ТекДок.Периодичность;
				ТекФорма.мВыбраннаяФорма = ТекДок.ВыбраннаяФорма;
				ТекФорма.Организация = ТекДок.Организация;
				
				Если ПроверкаБлокировкиФормы Тогда
					Отказ = Ложь;
					РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ТекФорма, Отказ);
					Если Отказ Тогда
						ВызватьИсключение Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекФорма.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML, Истина, ИмяФайлаXML) Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
				ТекстСообщения = "Не удалось выгрузить " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок.Ссылка) + "!";
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				ОшибкаВыгрузки = Истина;
				ОтобразитьФормуНавигацииПоОшибкам();
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если ТекДок.НаименованиеОтчета = "Статистика: Форма П-1" Тогда
				
				ТекстВыгрузкиВXML_П1Пр3 = ""; ИмяФайлаXML_П1Пр3 = "";
				
				КритерийОтбораОтчета = Новый Структура("Организация, Периодичность, Период");
				КритерийОтбораОтчета.Вставить("Организация", ТекДок.Организация);
				КритерийОтбораОтчета.Вставить("Периодичность", ТекДок.Периодичность);
				КритерийОтбораОтчета.Вставить("Период", ТекДок.Период);
				
				ТекДокП1Пр3 = Неопределено;
				ТекФормаП1Пр3 = ТекФорма.ПолучитьФормуП1Пр3(КритерийОтбораОтчета, ТекДокП1Пр3);
				
				Если ТекФормаП1Пр3 = Неопределено Тогда
					Сообщить("Не найден сохраненный отчет ""П-1 Приложение 3"" для выгрузки в файл XML - соответствующий раздел будет пустым.", СтатусСообщения.Внимание);
				Иначе
					Попытка
						ТекФормаП1Пр3.мСохраненныйДок = ТекДокП1Пр3;
						ТекФормаП1Пр3.мДатаНачалаПериодаОтчета = ТекДокП1Пр3.ДатаНачала;
						ТекФормаП1Пр3.мДатаКонцаПериодаОтчета = ТекДокП1Пр3.ДатаОкончания;
						ТекФормаП1Пр3.мПериодичность = ТекДокП1Пр3.Периодичность;
						ТекФормаП1Пр3.мВыбраннаяФорма = ТекДокП1Пр3.ВыбраннаяФорма;
						ТекФормаП1Пр3.Организация = ТекДокП1Пр3.Организация;
						
						Если ПроверкаБлокировкиФормы Тогда
							Отказ = Ложь;
							РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ТекФормаП1Пр3, Отказ);
							Если Отказ Тогда
								ВызватьИсключение Неопределено;
							КонецЕсли;
						КонецЕсли;
						
						Если ТекФормаП1Пр3.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML_П1Пр3, Истина, ИмяФайлаXML_П1Пр3) Тогда
							СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
						Иначе
							ВызватьИсключение Неопределено;
						КонецЕсли;
						
						ТекстВыгрузкиВXML = ТекФорма.ОбъединитьТекстыXML_П1(ТекстВыгрузкиВXML, ТекстВыгрузкиВXML_П1Пр3);

						ТекстСообщения = "Сохраненный отчет """ + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДокП1Пр3) + 
									     """ выгружен вместе с отчетом ""Форма П-1"".";
						Сообщить(ТекстСообщения , СтатусСообщения.Информация);
					Исключение
						Попытка
							Для Каждого СтрСообщ Из ТекФормаП1Пр3.ТаблицаСообщений Цикл
								НовСтр = ТаблицаСообщений.Добавить();
								НовСтр.ОтчетДок = ТекДокП1Пр3.Ссылка;
								НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДокП1Пр3);
								НовСтр.Раздел = СтрСообщ.Раздел;
								НовСтр.Страница = СтрСообщ.Страница;
								НовСтр.Строка = СтрСообщ.Строка;
								НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
								НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
								НовСтр.Графа = СтрСообщ.Графа;
								НовСтр.Описание = СтрСообщ.Описание;
							КонецЦикла;
						Исключение
						КонецПопытки;
						ТекстСообщения = "Не удалось выгрузить " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДокП1Пр3.Ссылка) + "!";
						Сообщить(ТекстСообщения, СтатусСообщения.Важное);
						ОшибкаВыгрузки = Истина;
						ОтобразитьФормуНавигацииПоОшибкам();
						ВыгрузкаПрервана = Истина;
						Прервать;
					КонецПопытки;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если НЕ ВыгрузкаПрервана Тогда
				НовСтр = Выгрузки.Добавить();
				НовСтр.ИмяФайла	= ИмяФайлаXML;
				НовСтр.Тип		= Перечисления.ВерсииФорматовВыгрузки.ВерсияФСГС;
				НовСтр.Текст	= ТекстВыгрузкиВXML;
				ТекСтр			= Основания.Найти(ТекДок, "Ссылка");
				Если ТекСтр <> Неопределено И ТекСтр.Пометка Тогда
					ТекСтр.НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате ФСГС
	
	Если ВыгрузкаПрервана Тогда
		Сообщить("Не удалось сформировать тексты выгрузки!", СтатусСообщения.Внимание);
		Если ТаблицаСообщений.Количество() <> 0 Тогда
			Сообщить("Для исправления ошибок используйте окно навигации по ошибкам.", СтатусСообщения.Информация); 
		КонецЕсли;
	Иначе
		//Сообщить("Формирование текстов выгрузки успешно завершено!", СтатусСообщения.Информация);
	КонецЕсли;
	
	Если НЕ РежимВызоваЭкспортируемогоМетодаФормы Тогда
		Если ТаблицаСообщений.Количество() <> 0 Тогда
			ОтобразитьФормуНавигацииПоОшибкам();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает или активизирует окно навигации по ошибкам.
//
// Параметры:
//	Нет.
//
Процедура ОтобразитьФормуНавигацииПоОшибкам()
	
	Если ТаблицаСообщений.Количество() = 0 Тогда
		НовСтр = ТаблицаСообщений.Добавить();
		НовСтр.Описание = "Выгрузка прервана!";
	КонецЕсли;
	
	ФормаНавигацииПоОшибкам = Документы.ВыгрузкаРегламентированныхОтчетов.ПолучитьФорму("ФормаНавигацииПоОшибкам");
	ФормаНавигацииПоОшибкам.ВладелецТС = ТаблицаСообщений;
	ФормаНавигацииПоОшибкам.Открыть();
	
КонецПроцедуры

// Процедура устанавливает значение показателей ИдДок в тексте выгрузки. 
//
// Параметры:
//	Текст - ТекстовыйДокумент, хранящий текст, который необходимо изменить.
//	Организация - Организация для получения и установки счетчиков.
//
Процедура ПроставитьИдДок(Текст, Организация)
	
	ПериодДляСчетчика = ?(Основания.Количество() = 0, ПериодПо, Основания.Получить(0).Ссылка.ДатаНачала);
	СчДок = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхДокументов(Организация, ПериодДляСчетчика) + 1;
	ИсходноеЗначениеСчетчика = СчДок;
	Для Сч = 1 По Текст.КоличествоСтрок() Цикл
		ТекИнд = Текст.КоличествоСтрок() - Сч + 1;
		ТекСтр = Текст.ПолучитьСтроку(ТекИнд);
		Если Лев(ТекСтр, 6) = "ИдДок:" Тогда
			ЭтоАлко = (Найти(Текст.ПолучитьТекст(), Символы.ПС + "ТипИнф:11520") <> 0);
			Если ЭтоАлко Тогда
				Текст.ЗаменитьСтроку(ТекИнд, Лев(ТекСтр,СтрДлина(ТекСтр) - 4) + Формат(СчДок, "ЧЦ=2; ЧДЦ=0; ЧН=; ЧВН=; ЧГ=0") + Прав(ТекСтр, 2));
			Иначе
				Текст.ЗаменитьСтроку(ТекИнд, Лев(ТекСтр,СтрДлина(ТекСтр) - 8) + Формат(СчДок, "ЧЦ=8; ЧВН=; ЧГ=0"));
			КонецЕсли;
			СчДок = СчДок + 1;
		КонецЕсли;
	КонецЦикла;
	Если ИсходноеЗначениеСчетчика <> СчДок Тогда
		РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхДокументов(Организация, СчДок - 1, ПериодДляСчетчика);
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует и возвращает имя файла выгрузки в электронном виде.
//
// Параметры:
//	БезРасширения - Булево, признак формирования имени без расширения.
//
// Возвращаемое значение:
//	Строка - имя файла.
//
Функция СформироватьИмяФайла(Док, ВерсияФормата = Неопределено)
	
	Если ВерсияФормата = Неопределено Тогда
		Если РабочаяДата < '20070701' Тогда
			ОргИНН = СокрЛП(Организация.ИНН);
			Если СтрДлина(СокрЛП(ОргИНН)) < 12 Тогда
				КатегорияНП = 1;
			Иначе
				КатегорияНП = 2;
			КонецЕсли;
			Возврат "O" 
					+ ?(КатегорияНП = 1, Сред(СокрЛП(ОргИНН),5,5), Сред(СокрЛП(ОргИНН),6,5))
					+ Прав(Формат(ПериодПо, "ДФ=dd.MM.yy"),2);
		ИначеЕсли РабочаяДата < '20081001' Тогда
			КППОтчета = Док.КПП;
			Если КППОтчета = Неопределено ИЛИ НЕ ЗначениеЗаполнено(КППОтчета) Тогда
				КППОтчета = Организация.КПП;
			КонецЕсли;

			Если КППОтчета <> Неопределено Тогда
				ИННОтчета = Организация.ИНН;
				Если СтрДлина(СокрЛП(ИННОтчета)) < 12 Тогда
					КатегорияНП = 1;
				Иначе
					КатегорияНП = 2;
				КонецЕсли;
				Если КатегорияНП = 1 Тогда
					Возврат "O"
							+ ИННОтчета
							+ "_"
							+ СокрЛП(КППОтчета)
							+ "_"
							+ Формат(ПериодПо, "ДФ=yy")
							+ "_"
							+ "NNNNNN"
							+ ".txt";
				ИначеЕсли КатегорияНП = 2 Тогда
					Возврат "O"
							+ ИННОтчета
							+ "_"
							+ Формат(ПериодПо, "ДФ=yy")
							+ "_"
							+ "NNNNNN"
							+ ".txt";
				КонецЕсли;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			
			КППОтчета = Док.КПП;
			Если КППОтчета = Неопределено ИЛИ НЕ ЗначениеЗаполнено(КППОтчета) Тогда
				КППОтчета = Организация.КПП;
			КонецЕсли;

			Если КППОтчета <> Неопределено Тогда
				ИННОтчета = Организация.ИНН;
				КодИФНСПосредника = Организация.КодИФНСПолучателя;
				Если СтрДлина(СокрЛП(ИННОтчета)) < 12 Тогда
					КатегорияНП = 1;
				Иначе
					КатегорияНП = 2;
				КонецЕсли;
				Если КатегорияНП = 1 Тогда
					Возврат "O"
							+ ИННОтчета
							+ "_" + СокрЛП(КППОтчета)
							+ "_" + СокрЛП(?(ПустаяСтрока(КодИФНСПосредника), КодИМНС, КодИФНСПосредника))
							+ СокрЛП(КодИМНС)
							+ "_" + Формат(ПериодПо, "ДФ=yy")
							+ "_" + "NNNNNNNN"
							+ ".txt";
				ИначеЕсли КатегорияНП = 2 Тогда
					Возврат "O"
							+ ИННОтчета
							+ "_" + СокрЛП(?(ПустаяСтрока(КодИФНСПосредника), КодИМНС, КодИФНСПосредника))
							+ СокрЛП(КодИМНС)
							+ "_" + Формат(ПериодПо, "ДФ=yy")
							+ "_" + "NNNNNNNN"
							+ ".txt";
				КонецЕсли;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВерсияФормата <> Перечисления.ВерсииФорматовВыгрузки.Версия302алко Тогда
		Возврат "A"
				+ Сред(Док.ИсточникОтчета, 38, 1)
				+ Сред(СокрЛП(Организация.ИНН), 5, 5)
				+ Прав(Формат(Док.ДатаОкончания, "ДФ=y; ДП=0"), 1);
	Иначе
		ПризнакПериодаОтчета = ?(Док.Периодичность = Перечисления.Периодичность.Квартал, 2, 1);
		Возврат "A"
				+ Сред(Док.ИсточникОтчета, 38, 1)
				+ СокрЛП(Док.Организация.ИНН)
				+ Док.Организация.КПП
				+ ПризнакПериодаОтчета
				+ Формат(Месяц(Док.ДатаОкончания) % ?(ПризнакПериодаОтчета = 2, 12, 13), "ЧЦ=2; ЧН=00; ЧВН=")
				+ Прав(Формат(Строка(Год(Док.ДатаНачала))), 1);
	КонецЕсли;
			
КонецФункции

// Процедура устанавливает показатель КолФОтч в тексте выгрузки в электронном виде.
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который осуществляется вывод.
//	СчетчикВыгруженныхДокументов201 - значение, которое следует установить.
//
Процедура ПроставитьКолФОтч(Текст, СчетчикВыгруженныхДокументов201)
	
	Для Сч = 1 По Текст.КоличествоСтрок() Цикл
		Если Лев(Текст.ПолучитьСтроку(Сч), 8) = "КолФОтч:" Тогда
			Текст.ЗаменитьСтроку(Сч, "КолФОтч:" + СчетчикВыгруженныхДокументов201);
			Возврат;
		КонецЕсли;
	КонецЦикла;
		
Конецпроцедуры

Функция ПроверитьИОбработатьАдрЮр(Сведения)
	
	Результат = Истина;
	
	Сведения.АдрЮр = ?(Лев(СокрЛП(Сведения.АдрЮр), 1) = ",", "643" + СокрЛП(Сведения.АдрЮр), СокрЛП(Сведения.АдрЮр));
	
	Если (Сведения.АдрЮр = "643,,,,,,,,,") ИЛИ (Сведения.АдрЮр = "643,,,,,,,,,,,,") Тогда
		Сообщить("Не удалось определить юридический адрес организации!", СтатусСообщения.Важное);
		Результат = Ложь;
	Иначе
		Если (СтрЧислоВхождений(Сведения.АдрЮр, ",") <> 9) И (СтрЧислоВхождений(Сведения.АдрЮр, ",") <> 12) Тогда
			Сообщить("В информационной базе указан некорректный юридический адрес организации (число запятых в адресе должно быть равно девяти)!", СтатусСообщения.Важное);
			Результат = Ложь;
		Иначе
			СтрАдрес = РегламентированнаяОтчетность.РазложитьАдрес(Сведения.АдрЮр);
			Если ПустаяСтрока(СтрАдрес.Индекс) Тогда
				Сообщить("В юридическом адресе организации, хранящемся в информационной базе, не указан индекс!", СтатусСообщения.Важное);
				Результат = Ложь;
			КонецЕсли;
			Если ПустаяСтрока(СтрАдрес.Регион) Тогда
				Сообщить("В юридическом адресе организации, хранящемся в информационной базе, не указан регион!", СтатусСообщения.Важное);
				Результат = Ложь;
			Иначе
				КодРегиона = РегламентированнаяОтчетность.КодРегионаПоНазванию(СтрАдрес.Регион);
				Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
					Сообщить("Не удалось определить код региона по его названию, выделенному из юридического адреса организации.
							|Проверьте правильность указания названия региона в юридическом адресе!", СтатусСообщения.Важное);
					Результат = Ложь;
				Иначе
					СтрАдрес.Вставить("Регион", КодРегиона);
					Сведения.Вставить("АдрЮр", РегламентированнаяОтчетность.СобратьАдрес(СтрАдрес));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьИОбработатьАдрГолОрг(Сведения)
	
	Результат = Истина;
	
	Сведения.АдрЮр = ?(Лев(СокрЛП(Сведения.АдрЮр), 1) = ",", "643" + СокрЛП(Сведения.АдрЮр), СокрЛП(Сведения.АдрЮр));
	
	Если (Сведения.АдрЮр = "643,,,,,,,,,") ИЛИ (Сведения.АдрЮр = "643,,,,,,,,,,,,") Тогда
		Сообщить("Не удалось определить юридический адрес головной организации!", СтатусСообщения.Важное);
		Результат = Ложь;
	Иначе
		Если (СтрЧислоВхождений(Сведения.АдрЮр, ",") <> 9) И (СтрЧислоВхождений(Сведения.АдрЮр, ",") <> 12) Тогда
			Сообщить("В информационной базе указан некорректный юридический адрес головной организации (число запятых в адресе должно быть равно девяти)!", СтатусСообщения.Важное);
			Результат = Ложь;
		Иначе
			СтрАдрес = РегламентированнаяОтчетность.РазложитьАдрес(Сведения.АдрЮр);
			Если ПустаяСтрока(СтрАдрес.Индекс) Тогда
				Сообщить("В юридическом адресе головной организации, хранящемся в информационной базе, не указан индекс!", СтатусСообщения.Важное);
				Результат = Ложь;
			КонецЕсли;
			Если ПустаяСтрока(СтрАдрес.Регион) Тогда
				Сообщить("В юридическом адресе головной организации, хранящемся в информационной базе, не указан регион!", СтатусСообщения.Важное);
				Результат = Ложь;
			Иначе
				КодРегиона = РегламентированнаяОтчетность.КодРегионаПоНазванию(СтрАдрес.Регион);
				Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
					Сообщить("Не удалось определить код региона по его названию, выделенному из юридического адреса головной организации.
							|Проверьте правильность указания названия региона в юридическом адресе головной организации!", СтатусСообщения.Важное);
					Результат = Ложь;
				Иначе
					СтрАдрес.Вставить("Регион", КодРегиона);
					Сведения.Вставить("АдрЮр", РегламентированнаяОтчетность.СобратьАдрес(СтрАдрес));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция выводит сведения информационной части в текст выгрузки в
// электронном виде формата 2.01.
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который осуществляется вывод.
//	Орг - организация, от лица которой сдается отчетность.
//
// Возвращаемое значение:
//	Булево - Истина, если сведения выведены; Ложь - в противном случае.
//
Функция ВывестиСведенияИнформационнойЧасти201ИСведенияОбОрганизации(Текст, Орг)
	
	Результат = Истина;
	
	Св = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Орг);//берем на дату выгрузки.
	
	ДатаДокС = Формат(РабочаяДата, "ДФ=dd.MM.yyyy");
	ОргИНН = СокрЛП(Орг.ИНН);
	ОргКПП = Орг.КПП;
	КатегорияНП = ?(Св.ТипНП = 3, 2, 1);
	
	Если НЕ ПустаяСтрока(ОргКПП) Тогда
		ИДОтпр = ОргИНН + ?(СтрДлина(ОргИНН) = 12, "", "**") + ОргКПП;
	Иначе
		Если КатегорияНП = 1 Тогда 
			// налогоплательщик - ЮЛ
			ИДОтпр = ОргИНН + "***********";
		Иначе
			// налогоплательщик - ФЛ
			ИДОтпр = ОргИНН + "*********";
		КонецЕсли;
	КонецЕсли;
	
	СчДок = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхДокументов(Орг, Основания.Получить(0).Ссылка.ДатаНачала) + 1;
	
	ИдДок = ИДОтпр + Формат(Год(Основания.Получить(0).Ссылка.ДатаНачала), "ЧГ=") + Формат(СчДок, "ЧЦ=8; ЧН=; ЧВН=; ЧГ=");
	
	Текст.ДобавитьСтроку("ИдДок:" + СокрЛП(ИдДок)); 
	Текст.ДобавитьСтроку("ДатаДок:" + ДатаДокС);
	
	КодНО = СОкрЛП(Св.КодНО);
	НаимОИВ = ВРЕГ(СокрЛП(Св.НаимНО));
	Докпредст = СокрЛП(Св.ТипНП);
	Свидетельство = ВРЕГ(СокрЛП(Св.СвидСН) + "," + Формат(Св.СвидДВ, "ДФ=dd.MM.yyyy; ДЛФ=D") + "," + Св.СвидНОКод);
	ОКВЭД = СокрЛП(Св.ОКВЭД);
	ОКАТО = СокрЛП(Св.ОКАТО);
	//КБК = 
	КатНП = "01";
	КолФОтч = "1";
	
	Если НЕ ПроверитьИОбработатьАдрЮр(Св) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Текст.ДобавитьСтроку("КодНО:"			+ КодНО			);
	Текст.ДобавитьСтроку("НаимОИВ:"			+ НаимОИВ		);
	Текст.ДобавитьСтроку("ДокПредст:"		+ ДокПредст		);
	Текст.ДобавитьСтроку("Свидетельство:"	+ Свидетельство	);
	Текст.ДобавитьСтроку("ОКВЭД:"			+ ОКВЭД			);
	Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(ОКАТО) Тогда
		Текст.ДобавитьСтроку("ОКАТО:" + ОКАТО);
	КонецЕсли;
	Текст.ДобавитьСтроку("КатНП:"			+ КатНП			);	
	Текст.ДобавитьСтроку("КолФОтч:"			+ КолФОтч		);
	Текст.ДобавитьСтроку("###");
	
	Если Св.ТипНП = 1 Тогда//российская организация
		НаимЮЛПол = СокрЛП(Св.НаимЮЛПол);
		ИННЮЛ = СокрЛП(Св.ИННЮЛ);
		КППЮЛ = СокрЛП(Св.КППЮЛ);
		ОГРН = СокрЛП(Св.ОГРН);
		ПризАдр = "1";
		АдрЮр = СокрЛП(Св.АдрЮр);
		
		Если РегламентированнаяОтчетность.ПустоеЗначение(НаимЮЛПол) Тогда
			Сообщить("Для организации не задано полное наименование!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
		
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ИННЮЛ, Ложь) Тогда
			Сообщить("Для организации неверно задан ИНН!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОГРН) И НЕ РегламентированнаяОтчетность.ОГРНСоответствуетТребованиям(ОГРН) Тогда
			Сообщить("Для организации неверно задан ОГРН!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
		
		Текст.ДобавитьСтроку("НаимЮЛПол:"	+ ВРЕГ(СтрЗаменить(НаимЮлПол, Символы.ПС, "")));
		Текст.ДобавитьСтроку("ИННЮЛ:"		+ ИННЮЛ				);
		Текст.ДобавитьСтроку("КППЮЛ:"		+ КППЮЛ				);
		Текст.ДобавитьСтроку("ОГРН:"		+ ОГРН				);
		Текст.ДобавитьСтроку("ПризАдр:"		+ ПризАдр			);
		Текст.ДобавитьСтроку("АдрЮр:"		+ ВРЕГ(АдрЮр)		);
		
	ИначеЕсли Св.ТипНП = 2 Тогда//обособленное подразделение
		НаимЮЛПол = СокрЛП(Орг.ГоловнаяОрганизация.НаименованиеПолное);
		НаимОППол = СокрЛП(Св.НаимОППол);
		ИННЮЛ = СокрЛП(Св.ИННЮЛ);
		КППЮЛ = СокрЛП(Орг.ГоловнаяОрганизация.КПП);
		КППОП = СокрЛП(Св.КППОП);
		ОГРН = СокрЛП(Св.ОГРН);
		ПризАдр = 1;
		АдрОП = СокрЛП(Св.АдрЮр);
		СвГоловОрг = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Орг.ГоловнаяОрганизация);
		Если НЕ ПроверитьИОбработатьАдрГолОрг(СвГоловОрг) Тогда
			Возврат Ложь;
		КонецЕсли;
		АдрЮр = СвГоловОрг.АдрЮр;
		
		Если РегламентированнаяОтчетность.ПустоеЗначение(НаимЮЛПол) Тогда
			Сообщить("Для головной организации не задано полное наименование!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
		
		Если РегламентированнаяОтчетность.ПустоеЗначение(НаимОППол) Тогда
			Сообщить("Для обособленного подразделения не задано полное наименование!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
		
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ИННЮЛ) Тогда
			Сообщить("Для организации неверно задан ИНН!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОГРН) И НЕ РегламентированнаяОтчетность.ОГРНСоответствуетТребованиям(ОГРН) Тогда
			Сообщить("Для организации неверно задан ОГРН!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
		
		Текст.ДобавитьСтроку("НаимЮЛПол:"	+ ВРЕГ(СтрЗаменить(НаимЮлПол, Символы.ПС, "")));
		Текст.ДобавитьСтроку("НаимОППол:"	+ ВРЕГ(СтрЗаменить(НаимОППол, Символы.ПС, "")));
		Текст.ДобавитьСтроку("ИННЮЛ:"		+ ИННЮЛ				);
		Текст.ДобавитьСтроку("КППЮЛ:"		+ КППЮЛ				);
		Текст.ДобавитьСтроку("КППОП:"		+ КППОП				);
		Текст.ДобавитьСтроку("ОГРН:"		+ ОГРН				);
		Текст.ДобавитьСтроку("ПризАдр:"		+ ПризАдр			);
		Текст.ДобавитьСтроку("АдрЮр:"		+ ВРЕГ(АдрЮр)		);
		Текст.ДобавитьСтроку("АдрОП:"		+ ВРЕГ(АдрОП)		);
		Текст.ДобавитьСтроку("ТелОП:");
		
	ИначеЕсли Св.ТипНП = 3 Тогда//ИП
		ФИО = ВРЕГ(СокрЛП(РегламентированнаяОтчетность.СтрЗаменитьПробелы(Св.ФИО)));
		ИННФЛ = СокрЛП(Св.ИННФЛ);
		ТелСлуж = СокрЛП(Св.ТелСлуж);
		ТелДом = СокрЛП(Св.ТелДом);
		
		Если РегламентированнаяОтчетность.ПустоеЗначение(Св.ФИО) Тогда
			Сообщить("Для индивидуального предпринимателя не задано ФИО!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
		
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ИННФЛ) Тогда
			Сообщить("Для индивидуального предпринимателя неверно задан ИНН!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
		
		Текст.ДобавитьСтроку("ФИО:"		+ ФИО		);
		Текст.ДобавитьСтроку("ИННФЛ:"	+ ИННФЛ		);
		Текст.ДобавитьСтроку("ТелСлуж:"	+ ТелСлуж	);
		Текст.ДобавитьСтроку("ТелДом:"	+ ТелДом	);
		
	ИначеЕсли Св.ТипНП = 5 Тогда//иностранная организация
		НаимОИОПол = СокрЛП(Св.НаимОИОПол);
		ИННИО = СокрЛП(Св.ИННИО);
		КППИО = СокрЛП(Св.КППИО);
		КППИмИО = "";
		КодИОСтрРег =  СокрЛП(Св.КодИОСтрРег);
		НаимИОПол = СокрЛП(Св.НаимИоПол);
		СтрИО = СокрЛП(Св.СтрИО);
		КодСтрИО = СокрЛП(Св.КодСТрИО);
		АдрИО = ?(Св.АдрИО = ",,,,,,,,,", "", СокрЛП(Св.АдрИО));
		
		Если РегламентированнаяОтчетность.ПустоеЗначение(НаимОИОПол) Тогда
			Сообщить("Для отделения иностранной организации не задано полное наименование!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
		
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ИННИО) Тогда
			Сообщить("Для иностранной организации неверно задан ИНН!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
		
		Текст.ДобавитьСтроку("НаимОИОПол:"	+ ВРЕГ(СтрЗаменить(НаимОИОПол, Символы.ПС, "")));
		Текст.ДобавитьСтроку("ИННИО:"		+ ИННИО				);
		Текст.ДобавитьСтроку("КППИО:"		+ КППИО				);
		Текст.ДобавитьСтроку("КППИмИО:"		+ КППИмИО			);
		Текст.ДобавитьСтроку("КодИОСтрРег:"	+ ВРЕГ(КодИОСтрРег)	);
		Текст.ДобавитьСтроку("НаимИОПол:"	+ ВРЕГ(СтрЗаменить(НаимИОПол, Символы.ПС, "")));
		Текст.ДобавитьСтроку("СтрИО:"		+ ВРЕГ(СтрИО)		);
		Текст.ДобавитьСтроку("КодСтрИО:"	+ ВРЕГ(КодСтрИО)	);
		Текст.ДобавитьСтроку("АдрИО:"		+ ВРЕГ(АдрИО)		);
		
	КонецЕсли;
	
	Текст.ДобавитьСтроку("###");
	
	Возврат Результат;
	
КонецФункции

// Функция выводит сведения о руководстве организации в текст выгрузки в
// электронном виде формата 2.01.
//
// Параметры:
//	Текст - ТекстовыйДокумент, в который осуществляется вывод.
//	Орг - организация, от лица которой сдается отчетность.
//
// Возвращаемое значение:
//	Булево - Истина, если сведения выведены; Ложь - в противном случае.
//
Функция ВывестиСведенияОРуководствеОрганизации201(Текст, Орг)
	
	Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Орг) Тогда // для ИП сведения о руководстве не выводятся
		Возврат Истина;
	КонецЕсли;
	
	Результат = Истина;
	
	Св = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Орг, , "ИННРук, ФИОРук, КодУдЛичнРук, СерияУдЛичнРук, НомерУдЛичнРук, ДатаУдЛичнРук, АдрМЖРукРФ, ТелРук, " +
											  							   "ИННБух, ФИОБух, КодУдЛичнБух, СерияУдЛичнБух, НомерУдЛичнБух, ДатаУдЛичнБух, АдрМЖБухРФ, ТелБух");//берем на дату выгрузки.
	
	Св.ИННРук = СокрЛП(Св.ИННРук);
	Св.ФИОРук = СокрЛП(Св.ФИОРук);
	Св.КодУдЛичнРук = СокрЛП(Св.КодУдЛичнРук);
	Св.СерияУдЛичнРук = СокрЛП(Св.СерияУдЛичнРук);
	Св.НомерУдЛичнРук = СокрЛП(Св.НомерУдЛичнРук);
	Св.Вставить("СерияИНомерУдЛичнРук", СокрЛП(Св.СерияУдЛичнРук + " " + Св.НомерУдЛичнРук));
	Св.ДатаУдЛичнРук = Св.ДатаУдЛичнРук;
	Св.АдрМЖРукРФ = ?(Лев(СокрЛП(Св.АдрМЖРукРФ), 1) = ",", "643" + СокрЛП(Св.АдрМЖРукРФ), СокрЛП(Св.АдрМЖРукРФ));
	Св.ИННБух = СокрЛП(Св.ИННБух);
	Св.ФИОБух = СокрЛП(Св.ФИОБух);
	Св.КодУдЛичнБух = СокрЛП(Св.КодУдЛичнБух);
	Св.СерияУдЛичнБух = СокрЛП(Св.СерияУдЛичнБух);
	Св.НомерУдЛичнБух = СокрЛП(Св.НомерУдЛичнБух);
	Св.Вставить("СерияИНомерУдЛичнБух", СокрЛП(Св.СерияУдЛичнБух + " " + Св.НомерУдЛичнБух));
	Св.ДатаУдЛичнБух = Св.ДатаУдЛичнБух;
	Св.АдрМЖБухРФ = ?(Лев(СокрЛП(Св.АдрМЖБухРФ), 1) = ",", "643" + СокрЛП(Св.АдрМЖБухРФ), СокрЛП(Св.АдрМЖБухРФ));
	
	Если ПустаяСтрока(Св.ФИОРук) Тогда
		Сообщить("Не удалось определить ФИО руководителя организации!", СтатусСообщения.Важное);
		Результат = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Св.ИННРук)
	И НЕ ЗначениеЗаполнено(Св.КодУдЛичнРук)
	И НЕ ЗначениеЗаполнено(Св.СерияИНомерУдЛичнРук)
	И НЕ ЗначениеЗаполнено(Св.ДатаУдЛичнРук)
	И ((Св.АдрМЖРукРф = "643,,,,,,,,,") ИЛИ (Св.АдрМЖРукРф = "643,,,,,,,,,,,,")) Тогда
		Сообщить("Не удалось определить ИНН руководителя организации!", СтатусСообщения.Важное);
		Результат = Ложь;
	ИначеЕсли ЗначениеЗаполнено(Св.ИННРук) Тогда
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Св.ИННРук, Истина) Тогда
			Сообщить("ИНН руководителя организации не соответствует требованиям!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(Св.КодУдЛичнРук) Тогда
			Сообщить("Не удалось определить код вида документа, удостоверяющего личность руководителя организации!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Св.СерияИНомерУдЛичнРук) Тогда
			Сообщить("Не удалось определить серию и номер документа, удостоверяющего личность руководителя организации!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Св.ДатаУдЛичнРук) Тогда
			Сообщить("Не удалось определить дату выдачи удостоверения личности руководителя организации!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
		Если (Св.АдрМЖРукРФ = "643,,,,,,,,,") ИЛИ (Св.АдрМЖРукРФ = "643,,,,,,,,,,,,") Тогда
			Сообщить("Не удалось определить адрес места жительства руководителя организации!", СтатусСообщения.Важное);
			Результат = Ложь;
		Иначе	
			Если (СтрЧислоВхождений(Св.АдрМЖРукРФ, ",") <> 9) И (СтрЧислоВхождений(Св.АдрМЖРукРФ, ",") <> 12) Тогда
				Сообщить("В информационной базе указан некорректный адрес места жительства руководителя организации (число запятых в адресе должно быть равно девяти)!", СтатусСообщения.Важное);
				Результат = Ложь;
			Иначе
				СтрАдресРук = РегламентированнаяОтчетность.РазложитьАдрес(Св.АдрМЖРукРф);
				Если ПустаяСтрока(СтрАдресРук.Индекс) Тогда
					Сообщить("Не указан индекс в адресе места жительства руководителя организации!", СтатусСообщения.Важное);
					Результат = Ложь;
				КонецЕсли;
				Если ПустаяСтрока(СтрАдресРук.Регион) Тогда
					Сообщить("Не указан регион в адресе места жительства руководителя организации!", СтатусСообщения.Важное);
					Результат = Ложь;
				Иначе
					КодРегионаРук = РегламентированнаяОтчетность.КодРегионаПоНазванию(СтрАдресРук.Регион);
					Если Не ЗначениеЗаполнено(КодРегионаРук) Тогда
						Сообщить("Не удалось определить код региона по его названию, выделенному из адреса места жительства руководителя организации.
								|Проверьте правильность указания названия региона в адресе места жительства руководителя!", СтатусСообщения.Важное);
						Результат = Ложь;
					Иначе
						СтрАдресРук.Вставить("Регион", КодРегионаРук);
						АдресРук = РегламентированнаяОтчетность.СобратьАдрес(СтрАдресРук);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Св.ФИОБух) Тогда
		Сообщить("Не удалось определить ФИО главного бухгалтера организации!", СтатусСообщения.Важное);
		Результат = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Св.ИННБух)
	И НЕ ЗначениеЗаполнено(Св.КодУдЛичнБух)
	И НЕ ЗначениеЗаполнено(Св.СерияИНомерУдЛичнБух)
	И НЕ ЗначениеЗаполнено(Св.ДатаУдЛичнБух)
	И ((Св.АдрМЖБухРф = "643,,,,,,,,,") ИЛИ (Св.АдрМЖБухРф = "643,,,,,,,,,,,,")) Тогда
		Сообщить("Не удалось определить ИНН главного бухгалтера организации!", СтатусСообщения.Важное);
		Результат = Ложь;
	ИначеЕсли ЗначениеЗаполнено(Св.ИННБух) Тогда
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Св.ИННБух, Истина) Тогда
			Сообщить("ИНН главного бухгалтера организации не соответствует требованиям!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(Св.КодУдЛичнБух) Тогда
			Сообщить("Не удалось определить код вида документа, удостоверяющего личность главного бухгалтера организации!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Св.СерияИНомерУдЛичнБух) Тогда
			Сообщить("Не удалось определить серию и номер документа, удостоверяющего личность главного бухгалтера организации!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Св.ДатаУдЛичнБух) Тогда
			Сообщить("Не удалось определить дату выдачи удостоверения личности главного бухгалтера организации!", СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
		Если (Св.АдрМЖБухРФ = "643,,,,,,,,,") ИЛИ (Св.АдрМЖБухРФ = "643,,,,,,,,,,,,") Тогда
			Сообщить("Не удалось определить адрес места жительства главного бухгалтера организации!", СтатусСообщения.Важное);
			Результат = Ложь;
		Иначе	
			Если (СтрЧислоВхождений(Св.АдрМЖБухРФ, ",") <> 9) И (СтрЧислоВхождений(Св.АдрМЖБухРФ, ",") <> 12) Тогда
				Сообщить("В информационной базе указан некорректный адрес места жительства главного бухгалтера организации (число запятых в адресе должно быть равно девяти)!", СтатусСообщения.Важное);
				Результат = Ложь;
			Иначе
				СтрАдресБух = РегламентированнаяОтчетность.РазложитьАдрес(Св.АдрМЖБухРф);
				Если ПустаяСтрока(СтрАдресБух.Индекс) Тогда
					Сообщить("Не указан индекс в адресе места жительства главного бухгалтера организации!", СтатусСообщения.Важное);
					Результат = Ложь;
				КонецЕсли;
				Если ПустаяСтрока(СтрАдресБух.Регион) Тогда
					Сообщить("Не указан регион в адресе места жительства главного бухгалтера организации!", СтатусСообщения.Важное);
					Результат = Ложь;
				Иначе
					КодРегионаБух = РегламентированнаяОтчетность.КодРегионаПоНазванию(СтрАдресБух.Регион);
					Если Не ЗначениеЗаполнено(КодРегионаБух) Тогда
						Сообщить("Не удалось определить код региона по его названию, выделенному из адреса места жительства главного бухгалтера организации.
								|Проверьте правильность указания названия региона в адресе места жительства главного бухгалтера!", СтатусСообщения.Важное);
						Результат = Ложь;
					Иначе
						СтрАдресБух.Вставить("Регион", КодРегионаБух);
						АдресБух = РегламентированнаяОтчетность.СобратьАдрес(СтрАдресБух);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Результат Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(Св.ФИОРук));
	Текст.ДобавитьСтроку("ИННРук:" + Св.ИННРук);			
	Текст.ДобавитьСтроку("ТелРук:" + ВРЕГ(СокрЛП(Лев(Св.ТелРук, 20))));
	Если ПустаяСтрока(Св.ИННРук) Тогда
		Текст.ДобавитьСтроку("УдЛичнРук:" + ВРЕГ(СокрЛП(Лев(Св.КодУдЛичнРук, 2))) + "," + ВРЕГ(СокрЛП(Лев(Св.СерияИНомерУдЛичнРук, 25))));
		Текст.ДобавитьСтроку("ДатаУдЛичнРук:" + Формат(Св.ДатаУдЛичнРук, "ДФ=dd.MM.yyyy"));
		Текст.ДобавитьСтроку("АдрМЖРукРФ:" + ВРЕГ(АдресРук));
	КонецЕсли;
	
	Текст.ДобавитьСтроку("ФИОБух:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(Св.ФИОБух));
	Текст.ДобавитьСтроку("ИННБух:" + Св.ИННБух);
	Текст.ДобавитьСтроку("ТелБух:" + ВРЕГ(СокрЛП(Лев(Св.ТелБух, 20))));
	Если НЕ ПустаяСтрока(Св.ФИОБух) И ПустаяСтрока(Св.ИННБух) Тогда
		Текст.ДобавитьСтроку("УдЛичнБух:" + ВРЕГ(СокрЛП(Лев(Св.КодУдЛичнБух, 2))) + "," + ВРЕГ(СокрЛП(Лев(Св.СерияИНомерУдЛичнБух, 25))));
		Текст.ДобавитьСтроку("ДатаУдЛичнБух:" + Формат(Св.ДатаУдЛичнБух, "ДФ=dd.MM.yyyy"));
		Текст.ДобавитьСтроку("АдрМЖБухРФ:" + ВРЕГ(АдресБух));
	КонецЕсли;
	
	Текст.ДобавитьСтроку("ФИОУпПред:,,");
	Текст.ДобавитьСтроку("###");
	
	Возврат Результат;
	
КонецФункции

// Процедура проверяет на корректность заполнения выбранные в списке СпДокОсн документы.
//
Процедура ПроверитьОтчеты()
	
	ОшибкаВыгрузки = Ложь;
	
	ФормаНавигацииПоОшибкам = Документы.ВыгрузкаРегламентированныхОтчетов.ПолучитьФорму("ФормаНавигацииПоОшибкам");
	Если ФормаНавигацииПоОшибкам.Открыта() Тогда
		ФормаНавигацииПоОшибкам.Закрыть();
	КонецЕсли;
	
	КоличествоДокументовДляВыгрузки = 0;
	Для Каждого Стр Из Основания Цикл
		Если Стр.Пометка Тогда
			КоличествоДокументовДляВыгрузки = КоличествоДокументовДляВыгрузки + 1;
		КонецЕсли;
	КонецЦикла;
		
	Если КоличествоДокументовДляВыгрузки = 0 Тогда
		Предупреждение("Не выбраны документы!");
		Возврат;
	КонецЕсли;

	Если РежимВызоваЭкспортируемогоМетодаФормы <> Истина Тогда
		Для Каждого Стр Из Основания Цикл
			Док = Стр.Ссылка;
			Если Док.Организация <> Основания.Получить(0).Ссылка.Организация Тогда
				Предупреждение("У выбранных отчетов различаются реквизиты ""Организация"". Пакетная выгрузка невозможна!");
				ОшибкаВыгрузки = Истина;
				Возврат;
			КонецЕсли;
			Если КонецДня(Док.ДатаОкончания) <> КонецДня(Основания.Получить(0).Ссылка.ДатаОкончания) Тогда
				Предупреждение("У выбранных отчетов различаются даты окончания периодов составления. Пакетная выгрузка невозможна!");
				ОшибкаВыгрузки = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	//проверка на то, что у всех документов-оснований один код ИМНС
	Если РежимВызоваЭкспортируемогоМетодаФормы <> Истина Тогда
		ИМНСы = Новый ТаблицаЗначений;
		ИМНСы.Колонки.Добавить("КодИМНС");
		Для Каждого Стр из Основания Цикл
			Если Стр.Пометка И СокрЛП(Стр.Ссылка.КодИМНС) <> "" Тогда //исключаем из проверки отчеты в ПФР с пустым кодом ИМНС
				НовСтр = ИМНСы.Добавить();
				НовСтр.КодИМНС = Стр.Ссылка.КодИМНС;
			КонецЕсли;
		КонецЦикла;
		ИМНСы.Свернуть("КодИМНС");
		Если ИМНСы.Количество() > 1 Тогда
			Сообщить("У выбранных отчетов различаются коды ИФНС, в которую они должны представляться. Процесс прерван!", СтатусСообщения.Важное);
			ОшибкаВыгрузки = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//конец проверки
	
	ОтчетыВыгружаемыеТолькоИзФормы = Новый Массив;
	
	//заполняем таблицу "документ для выгрузки <-> версия формата выгрузки"
	ВерсииИОтчеты = Новый ТаблицаЗначений;
	ВерсииИОтчеты.Колонки.Добавить("Док");
	ВерсииИОтчеты.Колонки.Добавить("Версия");
	
	ЕстьНеопределенныеФорматы = Ложь;
	Для Каждого Стр из Основания Цикл
		Если Стр.Пометка Тогда
			НовСтр = ВерсииИОтчеты.Добавить();
			НовСтр.Док = Стр.Ссылка;
			НовСтр.Версия = РегламентированнаяОтчетность.ВерсияФорматаВыгрузки(Стр.Ссылка, Стр.Ссылка.ДатаОкончания);
			Если Стр.Ссылка.ИсточникОтчета = "РегламентированныйОтчетЗаявлениеОВвозеТоваров" Тогда
				ОтчетыВыгружаемыеТолькоИзФормы.Добавить(Стр.Ссылка);
			ИначеЕсли НовСтр.Версия = Неопределено Тогда
				ЕстьНеопределенныеФорматы = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//заполнили таблицу
	
	Если ОтчетыВыгружаемыеТолькоИзФормы.Количество() > 0 Тогда
		Сообщить("Выгрузка следующих отчетов возможна только из формы отчета:", СтатусСообщения.Важное);
		Для Каждого Док Из ОтчетыВыгружаемыеТолькоИзФормы Цикл
			Сообщить(" - " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(Док));
		КонецЦикла;
		ОшибкаВыгрузки = Истина;
		Возврат;
	КонецЕсли;
	
	//Если среди выбранных присутствуют отчеты с неопределенным форматом выгрузки, то 
	//выведем список этих отчетов и прекратим формирование электронного представления
	Если ЕстьНеопределенныеФорматы Тогда
		Сообщить("Для следующих отчетов выгрузка и проверка не предусмотрены:", СтатусСообщения.Важное);
		Для Каждого Стр Из ВерсииИОтчеты Цикл
			Если Стр.Версия = Неопределено Тогда
				Сообщить(" - " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(Стр.Док));
			КонецЕсли;
		КонецЦикла;
		ОшибкаВыгрузки = Истина;
		Возврат;
	КонецЕсли;
	
	//Определим список отчетов, которые должны выгружаться в формате <> Перечисления.ПорядкиОкругленияОтчетности.Окр1
	ОтчетыСохраненныеСНевернымОкруглением = Новый СписокЗначений;
	ОтчетыБаланса = Новый СписокЗначений;
	ОтчетыБаланса.Добавить("РегламентированныйОтчетБаланс");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма2");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма3");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма4");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма5");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма6");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетБухОтчетность");
	
	ОтчетыАлко = Новый СписокЗначений;
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение1");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение2");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение3");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение4");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение5");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение6");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение7");
	
	ОтчетыФЛ =  Новый СписокЗначений;
	ОтчетыФЛ.Добавить("РегламентированныйОтчет3НДФЛ");
	ОтчетыФЛ.Добавить("РегламентированныйОтчет4НДФЛ");
	
	ОтчетыФСС = Новый СписокЗначений;
	ОтчетыФСС.Добавить("РегламентированныйОтчет4ФСС");
	
	ОтчетыРСВ2 = Новый СписокЗначений;
	ОтчетыРСВ2.Добавить("РегламентированныйОтчетРСВ2");
	
	ОтчетыФСГС = Новый СписокЗначений;
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1РП");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Т");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1И");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма3Ф");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма5З");
    ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП1");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП1Приложение3");
    ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП2");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП2к");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП3");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП4");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП5М");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаПМ");
	
	Для Каждого Стр Из ВерсииИОтчеты Цикл
		Док = Стр.Док;
		ЕдИзм = Док.ЕдиницаИзмерения;
		Точность = Док.ТочностьЕдиницыИзмерения;
		Отч = Док.ИсточникОтчета;
		Если ОтчетыАлко.НайтиПоЗначению(Отч) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОтчетыФЛ.НайтиПоЗначению(Отч) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОтчетыФСГС.НайтиПоЗначению(Отч) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОтчетыБаланса.НайтиПоЗначению(Отч) <> Неопределено Тогда
			Если ЕдИзм <> Перечисления.ПорядкиОкругленияОтчетности.Окр1000 И
				 ЕдИзм <> Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
				Продолжить;
			КонецЕсли;
		ИначеЕсли ОтчетыФСС.НайтиПоЗначению(Отч) <> Неопределено Тогда
			Если ЕдИзм <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 ИЛИ Точность <> 2 Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
			КонецЕсли;
			Продолжить;
		ИначеЕсли ОтчетыРСВ2.НайтиПоЗначению(Отч) <> Неопределено Тогда
			Если ЕдИзм <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
			КонецЕсли;
			Продолжить;
		Иначе
			Если ЕдИзм <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Точность <> 0 Тогда
			ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	
	//если отчетов, которые сохранены с неверным округлением, больше 0, тогда сообщим пользователю,
	//взведем флаг ошибки и прервемся
	Если ОтчетыСохраненныеСНевернымОкруглением.Количество() <> 0 Тогда
		Сообщить("Следующие отчеты сохранены с единицей измерения и/или точностью, не соответствующими требованиям формата выгрузки:", СтатусСообщения.Внимание);
		Для Каждого Сч Из ОтчетыСохраненныеСНевернымОкруглением Цикл
			ТекстСообщения = " - " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(Сч.Значение.Док);
			ТекстСообщения = ТекстСообщения + " должен быть сохранен с единицей измерения ";
			Если ОтчетыБаланса.НайтиПоЗначению(Сч.Значение.Док.ИсточникОтчета) <> Неопределено Тогда
				ТекстСообщения = ТекстСообщения + """в тысячах рублей"" или ""в миллионах рублей"" с точностью ""0""";
			ИначеЕсли ОтчетыФСС.НайтиПоЗначению(Сч.Значение.Док.ИсточникОтчета) <> Неопределено Тогда
				ТекстСообщения = ТекстСообщения + """в рублях"" с точностью ""2""";
			ИначеЕсли ОтчетыРСВ2.НайтиПоЗначению(Сч.Значение.Док.ИсточникОтчета) <> Неопределено Тогда
				ТекстСообщения = ТекстСообщения + """в рублях""";
			Иначе
				ТекстСообщения = ТекстСообщения + """в рублях"" с точностью ""0""";
			КонецЕсли;
			Сообщить(ТекстСообщения);
		КонецЦикла;
		ОшибкаВыгрузки = Истина;
		Сообщить("Сохраните отчеты с нужной единицей измерения и запустите проверку повторно.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	ТаблицаСообщений.Очистить();
	
	ОтборФСС		= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.ВерсияФСС		));
	Отбор700ПФР		= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.Версия700ПФР	));
	Отбор500		= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.Версия500		));
	Отбор400		= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.Версия400		));
	Отбор300		= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.Версия300		));
	Отбор201		= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.Версия201		));
	Отбор201алко	= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.Версия201алко	));
	Отбор302алко	= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.Версия302алко	));
	Отбор401алко	= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.Версия401алко	));
	ОтборФСГС    	= ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", Перечисления.ВерсииФорматовВыгрузки.ВерсияФСГС	));
	
	Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате 3.00
	ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
	СчетчикВыгруженныхДокументов = 0;
	
	НомОтч = 0;
	
	ВыгрузкаПрервана = Ложь;
	
	//выгрузка в формате ФСС
	Если ОтборФСС.Количество() <> 0 Тогда
		
		Для Каждого Стр Из ОтборФСС Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			Состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.Организация = ТекДок.Организация;
				
				Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
					ВызватьИсключение "";
				КонецЕсли;
			Исключение
				ОшибкаВыгрузки = Истина;
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате ФСС

	//выгрузка в формате 7.00
	Если Отбор700ПФР.Количество() <> 0 Тогда
		
		Для Каждого Стр Из Отбор700ПФР Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			Состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.Организация = ТекДок.Организация;
				
				Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
					ВызватьИсключение "";
				КонецЕсли;
			Исключение
				ОшибкаВыгрузки = Истина;
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 7.00

	//выгрузка в формате 5.00
	Если Отбор500.Количество() <> 0 Тогда
		
		Для Каждого Стр Из Отбор500 Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			Состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.Организация = ТекДок.Организация;
				
				Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
					ВызватьИсключение "";
				КонецЕсли;
			Исключение
				ОшибкаВыгрузки = Истина;
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 5.00
	
	//выгрузка в формате 4.00
	Если Отбор400.Количество() <> 0 Тогда
		
		Для Каждого Стр Из Отбор400 Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			Состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.Организация = ТекДок.Организация;
				
				Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
					ВызватьИсключение "";
				КонецЕсли;
			Исключение
				ОшибкаВыгрузки = Истина;
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 4.00
	
	//выгрузка в формате 4.01 алко
	Если Отбор401алко.Количество() <> 0 Тогда
		
		Для Каждого Стр Из Отбор401алко Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			Состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.Организация = ТекДок.Организация;
				
				Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
					ВызватьИсключение "";
				КонецЕсли;
			Исключение
				ОшибкаВыгрузки = Истина;
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 4.01 алко
	
	//**********************************************************
	//выгрузка в формате 3.00
	Если Отбор300.Количество() <> 0 Тогда
		
		КПП = РегламентированнаяОтчетность.КПППоКомбинацииОрганизацииИКодаИФНС(Организация, КодИМНС);
		Если КПП = Неопределено Тогда
			ОшибкаВыгрузки = Истина;
			Возврат;
		КонецЕсли;
		Если (НЕ РегламентированнаяОтчетность.ВывестиСведенияСлужебнойЧасти30(Текст, Организация, , , КПП, СокрЛП(КодИМНС))) ИЛИ (НЕ РегламентированнаяОтчетность.ВывестиСведенияОбОтправителе30(Текст, Организация)) Тогда
			ОшибкаВыгрузки = Истина;			
			Возврат;
		КонецЕсли;
		
		Для Каждого Стр Из Отбор300 Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			Состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.ИнициализацияСоставаПоказателей();
				
				Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
					ВызватьИсключение "";
				КонецЕсли;
			Исключение
				ОшибкаВыгрузки = Истина;
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 3.00
	//**********************************************************
	
	//*****************************************
	СчетчикВыгруженныхДокументов201 = 0;
	//выгрузка в формате 2.01
	Если (Отбор201.Количество() <> 0) И (Не ВыгрузкаПрервана) Тогда
		
		Текст = Новый ТекстовыйДокумент;
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
		
		Если (НЕ РегламентированнаяОтчетность.ВывестиСведенияСлужебнойЧасти30(Текст, Организация, , , , СокрЛП(КодИМНС), , "2.01")) ИЛИ (НЕ РегламентированнаяОтчетность.ВывестиСведенияОбОтправителе30(Текст, Организация)) Тогда
			ОшибкаВыгрузки = Истина;			
			Возврат;
		КонецЕсли;
		
		Если Не ВывестиСведенияИнформационнойЧасти201ИСведенияОбОрганизации(Текст, Организация) Тогда
			ОшибкаВыгрузки = Истина;			
			Возврат;
		КонецЕсли;
		
		Если НЕ ВывестиСведенияОРуководствеОрганизации201(Текст, Организация) Тогда
			ОшибкаВыгрузки = Истина;			
			Возврат;
		КонецЕсли;
		
		Для Каждого Стр Из Отбор201 Цикл
			
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				Текформа = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.ИнициализацияСоставаПоказателей();
				
				Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
					ВызватьИсключение "";
				КонецЕсли;
			Исключение
				ОшибкаВыгрузки = Истина;
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	//*****************************************
	
	//*****************************************
	//выгрузка в формате 2.01 алко
	Если (Отбор201алко.Количество() <> 0) И (Не ВыгрузкаПрервана) Тогда
		
		Для Каждого Стр Из Отбор201Алко Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			Состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				
				ТекФорма.Инициализация(Истина);
				
				Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
					ВызватьИсключение "";
				КонецЕсли;
			Исключение
				ОшибкаВыгрузки = Истина;
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	//*****************************************
	
	//*****************************************
	//выгрузка в формате 3.02 алко
	Если (Отбор302алко.Количество() <> 0) И (Не ВыгрузкаПрервана) Тогда
		
		Для Каждого Стр Из Отбор302алко Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			Состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				
				ТекФорма.Инициализация(Истина);
				
				Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
					ВызватьИсключение "";
				КонецЕсли;
			Исключение
				ОшибкаВыгрузки = Истина;
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	//*****************************************
	
	//*****************************************
	//выгрузка в формате ФСГС
	Если (ОтборФСГС.Количество() <> 0) И (Не ВыгрузкаПрервана) Тогда
		
		Для Каждого Стр Из ОтборФСГС Цикл
			ТекДок = Стр.Док;
			НомОтч = НомОтч + 1;
			Состояние("Обработка отчета " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + " (" + НомОтч + " из " + (ВерсииИОтчеты.Количество()) + ") ...");
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = ТекДок.ВыбраннаяФорма;
				Если ПустаяСтрока(ИмяТекФормы) Тогда
					ИмяТекФормы = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор).ПолучитьФормуДляПериода(ПериодПо);
				КонецЕсли;
				ТекФорма = РегламентированнаяОтчетность.РеглОтчеты(ТекДок.ИсточникОтчета).ПолучитьФорму(ИмяТекФормы, , Новый УникальныйИдентификатор);
				
				ТекФорма.мСохраненныйДок = ТекДок;
				ТекФорма.мДатаНачалаПериодаОтчета = ТекДок.ДатаНачала;
				ТекФорма.мДатаКонцаПериодаОтчета = ТекДок.ДатаОкончания;
				ТекФорма.мПериодичность = ТекДок.Периодичность;

				ТекФорма.Инициализация(Истина);
				
				Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
					ВызватьИсключение "";
				КонецЕсли;
			Исключение
				ОшибкаВыгрузки = Истина;
				Попытка
					Для Каждого СтрСообщ Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = ТекДок.Ссылка;
						НовСтр.Отчет = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок);
						НовСтр.Раздел = СтрСообщ.Раздел;
						НовСтр.Страница = СтрСообщ.Страница;
						НовСтр.Строка = СтрСообщ.Строка;
						НовСтр.СтрокаПП = СтрСообщ.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщ.ИмяЯчейки;
						НовСтр.Графа = СтрСообщ.Графа;
						НовСтр.Описание = СтрСообщ.Описание;
					КонецЦикла;
				Исключение
				КонецПопытки;
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате ФСГС
	//*****************************************
	
	Если ОшибкаВыгрузки = Истина ИЛИ ТаблицаСообщений.Количество() <> 0 Тогда
		ТекстСообщения = "В ходе проверки были найдены ошибки, препятствующие выгрузке.";
		Если ТаблицаСообщений.Количество() <> 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Для исправления ошибок используйте специальное окно навигации по ошибкам.";
		КонецЕсли;
		Предупреждение(ТекстСообщения);
		ОтобразитьФормуНавигацииПоОшибкам();
	Иначе
		Предупреждение("Ошибок не обнаружено!");
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьИмяФайлаВыгрукиФССПоТекстуВыгрузки(ТекстВыгрузки)
	
	// загружаем строку в дерево
	ДеревоXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстВыгрузки);
	Если ДеревоXML = Неопределено Тогда
		Сообщить("Не удалось определить имя файла выгрузки ФСС по тексту выгрузки.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// ищем элемент TITLE
	ЭлементыTITLE = ДеревоXML.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "TITLE", "Э"), Истина);
	Если ЭлементыTITLE.Количество() = 0 Тогда
		Сообщить("Не удалось определить имя файла выгрузки ФСС по тексту выгрузки.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	ЭлементTITLE = ЭлементыTITLE[0];
	
	// находим атрибуты REG_NUM, DOP_NUM и QUART_NUM
	АтрибутREG_NUM = ЭлементTITLE.Строки.Найти("REG_NUM", "Имя");
	АтрибутDOP_NUM = ЭлементTITLE.Строки.Найти("DOP_NUM", "Имя");
	АтрибутYEAR_NUM = ЭлементTITLE.Строки.Найти("YEAR_NUM", "Имя");
	АтрибутQUART_NUM = ЭлементTITLE.Строки.Найти("QUART_NUM", "Имя");
	
	// проверяем достаточность
	Если (АтрибутREG_NUM = Неопределено И АтрибутDOP_NUM = Неопределено) ИЛИ АтрибутYEAR_NUM = Неопределено Тогда
		Сообщить("Не удалось определить имя файла выгрузки ФСС по тексту выгрузки.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// определяем значения
	ЗначениеREG_NUM = ?(АтрибутREG_NUM = Неопределено, "", СокрЛП(АтрибутREG_NUM.Значение));
	ЗначениеDOP_NUM = ?(АтрибутDOP_NUM = Неопределено, "", СокрЛП(АтрибутDOP_NUM.Значение));
	ЗначениеYEAR_NUM = ?(АтрибутYEAR_NUM = Неопределено, "", СокрЛП(АтрибутYEAR_NUM.Значение));
	ЗначениеQUART_NUM = ?(АтрибутQUART_NUM = Неопределено, "", СокрЛП(АтрибутQUART_NUM.Значение));
	
	// формируем имя файла
	ИмяФайла = ?(ЗначениеЗаполнено(ЗначениеDOP_NUM), ЗначениеDOP_NUM, ЗначениеREG_NUM) + "_" + ЗначениеYEAR_NUM + ?(ЗначениеЗаполнено(ЗначениеQUART_NUM), "_" + ЗначениеQUART_NUM, "") + ".xml";
	
	Возврат ИмяФайла;
	
КонецФункции

Функция СоздатьДеревоСтруктурыXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки = Неопределено, ЧтениеXML = Неопределено, Знач ТекУзел = Неопределено)
	
	ПерваяИтерация = (ТекУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекУзел = СоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовУзел = ТекУзел.Строки.Добавить();
				НовУзел.Имя = ЧтениеXML.Имя;
				НовУзел.Тип = "Э";
				НовУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовАтрибут = НовУзел.Строки.Добавить();
					НовАтрибут.Имя = ЧтениеXML.Имя;
					НовАтрибут.Тип = "А";
					НовАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовУзел);
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					Возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТипУзла = ТипУзлаXML.Текст И ТипЗнч(ТекУзел) = Тип("СтрокаДереваЗначений") И ТекУзел.Тип = "Э" Тогда
				ТекУзел.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекУзел;
	КонецЕсли;
	
КонецФункции

// Процедура помещает ссылки на выгружаемые документы из табличного поля Основания
// в табличную чать Основная.
//
Процедура СохранитьДокументыОснования()
	
	Основная.Очистить();
	Для Каждого Стр Из Основания Цикл
		Если Стр.Пометка Тогда
			НовСтр = Основная.Добавить();
			НовСтр.Основание = Стр.Ссылка;
			НовСтр.НомерСтрокиТекстаВыгрузки = Стр.НомерСтрокиТекстаВыгрузки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Экспортная функция, вызываемая из регламентированных отчетов, в которых предусмотрена выгрузка.
// Функция формирует тексты выгрузки, сохраняет их в указанную пользователем папку.
// 
// Параметры:
// ДокументыОснования - список значений, содержащий перечень документов-оснований для выгрузки.
// ТекстВыгрузки - переменная, в которую помещается текст выгрузки.
// 
// Возвращает Истина, если выгрузка прошла успешно. В противном случае возвращает Ложь.
//
Функция СформироватьИЗаписать(ДокументыОснования, ТекстВыгрузки = Неопределено, ПечатаемыеЛисты = Неопределено, ФайлДляСохранения = Неопределено, ДляЦелейФормированияМЧБ = Ложь, ПроверкаБлокировкиФормы = Ложь) Экспорт
	
	// реквизиты шапки берем из первого документа, если такой есть
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РежимВызоваЭкспортируемогоМетодаФормы	= Истина;
	ПервыйДок								= ДокументыОснования.Получить(0).Значение;
	Дата									= РабочаяДата;
	КодИМНС									= ПервыйДок.КодИМНС;
	ПериодПо								= КонецДня(ПервыйДок.ДатаОкончания);
	Организация								= ПервыйДок.Организация;
	
	// заполняем табличную часть "Выгрузки" документами-основаниями
	Для Каждого Стр Из ДокументыОснования Цикл
		НовСтр = Основания.Добавить();
		НовСтр.Ссылка = Стр.Значение.Ссылка;
		НовСтр.Пометка = Истина;
	КонецЦикла;
	
	// формируем текст выгрузки. Если во время формирования произошла ошибка - вернем признак ошибки
	Попытка
		СформироватьТекстыВыгрузки(ПечатаемыеЛисты, ДляЦелейФормированияМЧБ, ПроверкаБлокировкиФормы);
	Исключение
		Сообщить(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()), СтатусСообщения.Важное);
		ОшибкаВыгрузки = Истина;
	КонецПопытки;
	Если ОшибкаВыгрузки = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекстВыгрузки <> Неопределено Тогда
		Для Каждого Стр Из Выгрузки Цикл
			Если НЕ ПустаяСтрока(Стр.Текст) Тогда
				ТекстВыгрузки = Стр.Текст;
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//выгружаем сформированный текст. если во время выгрузки произошла ошибка - вернем признак ошибки
	Если ФайлДляСохранения = Неопределено Тогда
		Попытка
			СохранитьТексты();
		Исключение
			Сообщить(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()), СтатусСообщения.Важное);
			ОшибкаВыгрузки = Истина;
		КонецПопытки;
		Если ОшибкаВыгрузки Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если Выгрузки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(Выгрузки.Получить(0).Текст);
		Попытка
			Текст.Записать(ФайлДляСохранения, ?(Выгрузки.Получить(0).Тип = Перечисления.ВерсииФорматовВыгрузки.Версия400 
											ИЛИ Выгрузки.Получить(0).Тип = Перечисления.ВерсииФорматовВыгрузки.Версия500
											ИЛИ Выгрузки.Получить(0).Тип = Перечисления.ВерсииФорматовВыгрузки.Версия401алко, 
											КодировкаТекста.ANSI, ?(Выгрузки.Получить(0).Тип = Перечисления.ВерсииФорматовВыгрузки.ВерсияФСГС, КодировкаТекста.UTF8, КодировкаТекста.OEM)));
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Экспортная функция, вызываемая из регламентированных отчетов, в которых предусмотрена выгрузка.
// Функция проверяет данные отчетов перед выгрузкой.
// 
// Параметры:
// ДокументыОснования - список значений, содержащий перечень документов-оснований для проверки.
// 
// Возвращает Истина, если проверка прошла успешно. В противном случае возвращает Ложь.
//
Процедура Проверить(ДокументыОснования) Экспорт
	
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РежимВызоваЭкспортируемогоМетодаФормы	= Истина;
	ПервыйДок								= ДокументыОснования.Получить(0).Значение;
	КодИМНС									= ПервыйДок.КодИМНС;
	ПериодПо								= КонецДня(ПервыйДок.ДатаОкончания);
	Организация								= ПервыйДок.Организация;
	
	Для Каждого Стр Из ДокументыОснования Цикл
		НовСтр = Основания.Добавить();
		НовСтр.Ссылка = Стр.Значение.Ссылка;
		НовСтр.Пометка = Истина;
	КонецЦикла;
	
	ПроверитьОтчеты();
	
КонецПроцедуры

// Сохраняет выбранные пользователем тексты выгрузки в файлы.
//
// Параметры:
//	ТолькоСохранениеТекстов - Булево. Если признак не равен Истина, то запись документа после сохранения не производится.
//
Процедура СохранитьТексты(НЕЗаписыватьДокумент = Ложь, ДляСпринтера = Ложь, КаталогСохранения = Неопределено, КаталогВызоваДипост = Неопределено, ИмяКонечногоФайла = Неопределено) Экспорт
	
	Если Выгрузки.Количество() = 0 Тогда
		Предупреждение("Нет текстов выгрузки для сохранения!");
		ОшибкаВыгрузки = Истина;
		Возврат;
	КонецЕсли;
	
	// определяем каталог выгрузки
	Если КаталогСохранения = Неопределено Тогда
		ПутьВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки();
		Если ПутьВыгрузки = Ложь Тогда
			ОшибкаВыгрузки = Истина;
			Возврат;
		КонецЕсли;
	Иначе
		ПутьВыгрузки = КаталогСохранения;
		КодИМНСПриОбмене = Лев(Организация.ОбменКодАбонента, 4);
	КонецЕсли;
	
	// формируем список отчетов для выгрузки
	СписокВыбора = Новый СписокЗначений;
	Для Каждого Стр Из Выгрузки Цикл
		Если Не ПустаяСтрока(Стр.Текст) Тогда
			НовСтр = СписокВыбора.Добавить(Стр, Формат(Стр.НомерСтроки, "ЧГ=") + ". Файл: " + Стр.ИмяФайла + " (" + Стр.Тип + ")");
			Если ЭлементыФормы.Основания.ВыделенныеСтроки.Количество() > 1 Тогда
				НовСтр.Пометка = (ЭлементыФормы.ТекстыВыгрузки.ВыделенныеСтроки.Содержит(Стр));
			Иначе
				НовСтр.Пометка = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// даем выбрать выгружаемые отчеты из списка
	Если НЕ ДляСпринтера И НЕ РежимВызоваЭкспортируемогоМетодаФормы Тогда
		Если СписокВыбора.Количество() > 1 И НЕ СписокВыбора.ОтметитьЭлементы("Выберите информацию для сохранения") Тогда
			ОшибкаВыгрузки = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// если не выбран ни один отчет, то прерываемся
	ЧислоВыгружаемыхОтчетов = 0;
	Для Каждого Эл Из СписокВыбора Цикл
		Если Эл.Пометка Тогда
			ЧислоВыгружаемыхОтчетов = ЧислоВыгружаемыхОтчетов + 1;
		КонецЕсли;
	КонецЦикла;
	Если ЧислоВыгружаемыхОтчетов = 0 Тогда
		Сообщить("Нет информации для сохранения!", СтатусСообщения.Важное);
		ОшибкаВыгрузки = Истина;
		Возврат;
	КонецЕсли;
	
	ИменаЗаписанныхФайловВыгрузки = Новый Массив;
	
	ВыгруженХотяБыОдинФайл = Ложь;
	БылаОшибкаЗаписи = Ложь;
	
	// инициализируем счетчики выгрузки
	СчетчикФайловОбщий = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайлов(Организация, , ПериодПо, КодИМНС);
	СчетчикФайловАлко = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайлов(Организация, Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайловАлко, ПериодПо);
	ИсходныйСчетчикФайловОбщий = СчетчикФайловОбщий;
	ИсходныйСчетчикФайловАлко = СчетчикФайловАлко;
	
	ЕстьСтатОтчет = Ложь;
	
	// последовательно пытаемся записать выбранные пользователем файлы,
	// в случае неудачи - информируем пользователя, взводим флаг ошибки записи и прерываемся.
	Для Каждого Стр из СписокВыбора Цикл
		
		Если НЕ Стр.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ТекСтр = Стр.Значение;
		
		Если НЕ ПустаяСтрока(ТекСтр.ИмяФайла) Тогда
			
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(ТекСтр.Текст);
			
			Если ТекСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия400 
			 ИЛИ ТекСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия401алко
			 ИЛИ ТекСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия500
			 ИЛИ ТекСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия700ПФР 
			 ИЛИ ТекСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.ВерсияФСС
			 ИЛИ ТекСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.ВерсияФСГС Тогда
				
				Попытка
					ИмяВременногоФайла = КаталогВременныхФайлов() + ТекСтр.ИмяФайла;
					ИмяКонечногоФайла = ПутьВыгрузки + ТекСтр.ИмяФайла;
					Текст.Записать(ИмяВременногоФайла, ?(ТекСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.ВерсияФСГС, КодировкаТекста.UTF8, КодировкаТекста.ANSI));
					ПереместитьФайл(ИмяВременногоФайла, ИмяКонечногоФайла);
					ИменаЗаписанныхФайловВыгрузки.Добавить(ТекСтр.ИмяФайла);
					Если ТекСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.ВерсияФСГС Тогда
						ЕстьСтатОтчет = Истина;
					КонецЕсли;	
				Исключение
					Сообщить("Не удалось записать файл """ + ИмяКонечногоФайла + """! Возможно, недостаточно места на диске или диск защищен от записи.", СтатусСообщения.Важное);
					БылаОшибкаЗаписи = Истина;
					Прервать;
				КонецПопытки;
				
			Иначе
				
				Попытка
					
					Если ТекСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия201алко ИЛИ ТекСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия300алко
					ИЛИ ТекСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия301алко ИЛИ ТекСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия302алко Тогда
						СчФ = СчетчикФайловАлко;
					Иначе
						СчФ = СчетчикФайловОбщий;
					КонецЕсли;
					
					ИмяВременногоФайла = КаталогВременныхФайлов() + ТекСтр.ИмяФайла + "." + Формат(СчФ, "ЧЦ=3; ЧН=; ЧВН=; ЧГ=");
					Если ВРЕГ(Прав(ТекСтр.ИмяФайла, 4)) = ".TXT" Тогда // это "обычная" налоговая отчетность
						Если Найти(ТекСтр.ИмяФайла, "NNNNNNNN") = 0 Тогда
							КороткоеИмяФайла = Сред(ТекСтр.ИмяФайла, 1, СтрДлина(ТекСтр.ИмяФайла) - 10) + Формат(СчФ, "ЧЦ=6; ЧН=; ЧВН=; ЧГ=") + ".txt";
						Иначе
							КороткоеИмяФайла = Сред(ТекСтр.ИмяФайла, 1, СтрДлина(ТекСтр.ИмяФайла) - 12) + Формат(СчФ, "ЧЦ=8; ЧН=; ЧВН=; ЧГ=") + ".txt";
						КонецЕсли;
					Иначе // это декларация по алкоголю
						Если НЕ ДляСпринтера Тогда
							КороткоеИмяФайла = ТекСтр.ИмяФайла + "." + Формат(СчФ, "ЧЦ=3; ЧН=; ЧВН=; ЧГ=");
						Иначе
							КороткоеИмяФайла = КодИМНСПриОбмене + Формат(СчФ, "ЧЦ=4; ЧДЦ=0; ЧН=; ЧВН=; ЧГ=0") + "." + Прав(Организация.ОбменКодАбонента, 3);
						КонецЕсли;
					КонецЕсли;
					
					Если ТекСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия700ПФР Тогда
						КороткоеИмяФайла = ТекСтр.ИмяФайла;
					КонецЕсли;
					
					ИмяКонечногоФайла = ПутьВыгрузки + КороткоеИмяФайла;
					
					Текст.Записать(ИмяВременногоФайла, КодировкаТекста.OEM);
					ПереместитьФайл(ИмяВременногоФайла, ИмяКонечногоФайла);
					
					ИменаЗаписанныхФайловВыгрузки.Добавить(КороткоеИмяФайла);
					
					Если ТекСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия201алко ИЛИ ТекСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия300алко
					ИЛИ ТекСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия301алко ИЛИ ТекСтр.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия302алко Тогда
						СчетчикФайловАлко = СчетчикФайловАлко + 1;
					Иначе
						СчетчикФайловОбщий = СчетчикФайловОбщий + 1;
					КонецЕсли;
					
				Исключение
					
					Сообщить("Не удалось записать файл """ + ИмяКонечногоФайла + """! Возможно, недостаточно места на диске или диск защищен от записи.", СтатусСообщения.Важное);
					БылаОшибкаЗаписи = Истина;
					Прервать;
					
				КонецПопытки;
				
			КонецЕсли;
			ВыгруженХотяБыОдинФайл = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИсходныйСчетчикФайловОбщий <> СчетчикФайловОбщий Тогда
		РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайлов(Организация, СчетчикФайловОбщий - 1, , ПериодПо, КодИМНС);
	КонецЕсли;
	Если ИсходныйСчетчикФайловАлко <> СчетчикФайловАлко Тогда
		РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайлов(Организация, СчетчикФайловАлко - 1, Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайловАлко, ПериодПо);
	КонецЕсли;
	
	// Если был выгружен хотя бы один файл и не было ошибок записи - сохраним
	// и проведем документ. Иначе выведем соответствующее сообщение.
	Если ВыгруженХотяБыОдинФайл Тогда
		
		Если БылаОшибкаЗаписи = Истина Тогда
			Если НЕ РежимВызоваЭкспортируемогоМетодаФормы Тогда
				Сообщить("В процессе записи отчетов произошла ошибка!", СтатусСообщения.Важное);
			КонецЕсли;
		Иначе
			
			Если НЕ НЕЗаписыватьДокумент Тогда
				СохранитьДокументыОснования();
				Если НЕ ЭтоНовый() Тогда
					УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
				КонецЕсли;
				Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
			Если КаталогСохранения = Неопределено Тогда
				Если ИменаЗаписанныхФайловВыгрузки.Количество() = 1 Тогда
					ТекстСообщения = "Файл выгрузки регламентированного отчета """ + ИменаЗаписанныхФайловВыгрузки[0] + """ сохранен в каталог """ + ПутьВыгрузки + """.";
				Иначе
					ТекстСообщения = "Файлы выгрузки регламентированных отчетов:";
					Для Каждого ИмяЗаписанногоФайлаВыгрузки Из ИменаЗаписанныхФайловВыгрузки Цикл
						ТекстСообщения = ТекстСообщения + Символы.ПС + "- """ + ИмяЗаписанногоФайлаВыгрузки + """;";
					КонецЦикла;
					ТекстСообщения = ТекстСообщения +  Символы.ПС + "сохранены в каталог """ + ПутьВыгрузки + """.";
				КонецЕсли;
				Сообщить(ТекстСообщения, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ОшибкаВыгрузки = Истина;
	КонецЕсли;
	
	// если задан каталог Dipost'а, то передаем управление ему
	Если КаталогВызоваДипост <> Неопределено Тогда
		Попытка
			ЗапуститьПриложение(КаталогВызоваДипост + "run_dipost.bat " + КаталогВызоваДипост + " " + Организация.ОбменКодАбонента + " -t", КаталогВызоваДипост);
			
			ТекстПредупреждения = "Файлы успешно переданы в ПК ""Спринтер""!";
			Если ЕстьСтатОтчет = Истина Тогда
				ТекстПредупреждения = РегламентированнаяОтчетность.ДополнитьСтроку(ТекстПредупреждения, 65) + Символы.ПС + Символы.ПС
				+ "Для импортирования подготовленных файлов статистической отчетности" + Символы.ПС + "  "
				+ "нужно в программе ""Референт"" перейти в раздел ""Выходной контроль""" + Символы.ПС + " "
				+ "и нажать кнопку  ""Статистическая отчетность"" на панели инструментов.";
			КонецЕсли; 
			Предупреждение(ТекстПредупреждения);
		Исключение
			Предупреждение("При запуске приложения для отправки отчетности произошла ошибка:" + Символы.ПС + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура регулирует видимость кнопки нижней командной панели формы "Шифрование и отправка в ИФНС".
//
Процедура ВидимостьКнопкиШифрованиеИОтправкаВИФНС()
	
	ОбъектКнопка = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Найти("КнопкаШифрованиеИОтправка");
	Если ОбъектКнопка <> Неопределено И Организация.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменЧерезСпринтер Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Индекс(
															ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Найти("РазделительШифрованиеИОтправка")));
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Индекс(ОбъектКнопка));
	ИначеЕсли ОбъектКнопка = Неопределено И Организация.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменЧерезСпринтер Тогда
		РазделительШифрованиеИОтправка = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Добавить("РазделительШифрованиеИОтправка", ТипКнопкиКоманднойПанели.Разделитель);
		КнопкаШифрованиеИОтправка = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Добавить("КнопкаШифрованиеИОтправка", ТипКнопкиКоманднойПанели.Действие, 
															"Зашифровать и отправить", Новый Действие("ОсновныеДействияФормыКнопкаШифрованиеИОтправка"));
		КнопкаШифрованиеИОтправка.Пояснение = "";
		КнопкаШифрованиеИОтправка.Подсказка = "";
		Смещение = -ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Индекс(КнопкаШифрованиеИОтправка);
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Сдвинуть(РазделительШифрованиеИОтправка, Смещение);
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Сдвинуть(КнопкаШифрованиеИОтправка, Смещение);
	КонецЕсли;
	
КонецПроцедуры

// Регулирует цвет текста у надписей - названий месяцев/кварталов.
//
// Параметры:
//	Нет.
//
Процедура УправлениеНадписямиМесяцев()
	
	Для Сч = 1 По 12 Цикл
		ЭлементыФормы["НадписьМесяц" + Сч].ЦветТекста = ?(Сч = Месяц(ПериодПо), Новый Цвет(0, 0, 255), Новый Цвет());
	КонецЦикла;
	ПереключательМесяц = Месяц - 1;
	
КонецПроцедуры

Функция ИзвлечьИмяФайлаИзТекстаXML(Знач ТекстXML)
	
	ИмяФайла = "";
	ВхождениеИдФайл = Найти(ТекстXML, " ИдФайл");
	Если ВхождениеИдФайл <> 0 Тогда
		ТекстXML = Сред(ТекстXML, ВхождениеИдФайл);
		ВхождениеПервойКавычки = Найти(ТекстXML, """");
		Если ВхождениеПервойКавычки <> 0 Тогда
			ТекстXML = Сред(ТекстXML, ВхождениеПервойКавычки + 1);
			ВхождениеВторойКавычки = Найти(ТекстXML, """");
			Если ВхождениеВторойКавычки <> 0 Тогда
				ИмяФайла = СокрЛп(Лев(ТекстXML, ВхождениеВторойКавычки - 1)) + ".xml";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ИмяФайла;
	
КонецФункции

Функция ИзвлечьИмяФайлаИзТекстаXML700ПФР(Знач ТекстXML)
	
	ИмяФайла = "";
	ВхождениеИмяФайла = Найти(ТекстXML, "ИмяФайла");
	Если ВхождениеИмяФайла <> 0 Тогда
		ТекстXML = Сред(ТекстXML, ВхождениеИмяФайла);
		НачалоИмениФайла = Найти(ТекстXML, "PFR");
		КонецИмениФайла = Найти(ТекстXML, ".XML");
		Если НачалоИмениФайла <> 0 И КонецИмениФайла <> 0 Тогда
			ИмяФайла = СокрЛп(Сред(ТекстXML, НачалоИмениФайла, КонецИмениФайла - НачалоИмениФайла) + ".XML");
		КонецЕсли;
	КонецЕсли;
	Возврат ИмяФайла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


// Процедура - обработчик события ПередЗаписью формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	СохранитьДокументыОснования();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - действие кнопки ПометитьВсе командной панели КоманднаяПанельОснования.
//
Процедура КоманднаяПанельОснованияПометитьВсе(Кнопка)
	
	Если Выгрузки.Количество() <> 0 Тогда
		Если Вопрос("При изменении списка документов будут очищены тексты выгрузки." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		Иначе
			Выгрузки.Очистить();
		КонецЕсли;
	КонецЕсли;
	Основания.ЗаполнитьЗначения(Истина, "Пометка");
	
КонецПроцедуры

// Процедура - действие кнопки РаспометитьВсе командной панели КоманднаяПанельОснования.
//
Процедура КоманднаяПанельОснованияРаспометитьВсе(Кнопка)
	
	Если Выгрузки.Количество() <> 0 Тогда
		Если Вопрос("При изменении списка документов будут очищены тексты выгрузки." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		Иначе
			Выгрузки.Очистить();
		КонецЕсли;
	КонецЕсли;
	Основания.ЗаполнитьЗначения(Ложь, "Пометка");
	
КонецПроцедуры

// Процедура - действие кнопки Заполнить командной панели КоманднаяПанельОснования.
//
Процедура КоманднаяПанельОснованияЗаполнить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Укажите организацию!");
		Возврат;
	КонецЕсли;
	
	Если Выгрузки.Количество() <> 0 И Вопрос("Тексты выгрузки будут очищены!" + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Внимание!") <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если флОтборИФНС И ПустаяСтрока(КодИМНС) Тогда
		Основания.Очистить();
		Выгрузки.Очистить();
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегламентированныйОтчет.Ссылка
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.ДатаОкончания >= &ДатаНачала
	               |	И РегламентированныйОтчет.ДатаОкончания <= &ДатаОкончания
	               |	И РегламентированныйОтчет.Организация = &Организация
	               |	И РегламентированныйОтчет.ФорматВыгрузки <> """"
				   |	" + ?(флОтборИФНС, "И РегламентированныйОтчет.КодИМНС = &КодИМНС", "") + "
	               |УПОРЯДОЧИТЬ ПО
	               |	РегламентированныйОтчет.НаименованиеОтчета,
	               |	РегламентированныйОтчет.Вид";

	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ПериодПо));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ПериодПо));
	Запрос.УстановитьПараметр("Организация", Организация);
	Если флОтборИФНС Тогда
		Запрос.УстановитьПараметр("КодИМНС", КодИМНС);
	КонецЕсли;
	
	Основания.Очистить();
	Ссылки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Для Каждого Стр Из Ссылки Цикл
		Основания.Добавить();
	КонецЦикла;
	Основания.ЗагрузитьКолонку(Ссылки, "Ссылка");
	Основания.ЗаполнитьЗначения(Истина, "Пометка");
	
	Выгрузки.Очистить();
	
КонецПроцедуры

// Процедура - действие кнопки Текст командной панели КоманднаяПанельОснования.
//
Процедура КоманднаяПанельОснованияТекст(Кнопка)
	
	Если ЭлементыФормы.Основания.ТекущиеДанные = Неопределено Тогда
		Предупреждение("Не задана текущая строка!");
		Возврат;
	КонецЕсли;
	
	НепривязанныеТекстыВыгрузки = Новый Массив;
	Для Инд = 1 По Выгрузки.Количество() Цикл
		Если Основания.Найти(Инд, "НомерСтрокиТекстаВыгрузки") = Неопределено Тогда
			НепривязанныеТекстыВыгрузки.Добавить(Выгрузки.Получить(Инд - 1));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НепривязанныеТекстыВыгрузки.Количество() = 0 И ЭлементыФормы.Основания.ТекущиеДанные.НомерСтрокиТекстаВыгрузки = 0 Тогда
		Предупреждение("Для выбранного отчета текст выгрузки не сформирован!");
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.Основания.ТекущиеДанные.НомерСтрокиТекстаВыгрузки <> 0 Тогда
		Выгрузка = Выгрузки.Получить(ЭлементыФормы.Основания.ТекущиеДанные.НомерСтрокиТекстаВыгрузки - 1);
	Иначе
		Если НепривязанныеТекстыВыгрузки.Количество() = 1 Тогда
			Выгрузка = НепривязанныеТекстыВыгрузки[0];
		Иначе
			СписокНепривязанныхТекстовВыгрузки = Новый СписокЗначений;
			Для Каждого Стр из НепривязанныеТекстыВыгрузки Цикл
				СписокНепривязанныхТекстовВыгрузки.Добавить(Стр, Стр.ИмяФайла + " (" + Стр.Тип + ")");
			КонецЦикла;
			ВыбранныйЭлемент = СписокНепривязанныхТекстовВыгрузки.ВыбратьЭлемент();
			Если ВыбранныйЭлемент = Неопределено Тогда
				Возврат;
			КонецЕсли;
			Выгрузка = ВыбранныйЭлемент.Значение;
		КонецЕсли;
	КонецЕсли;
		
	Если Выгрузка.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия400 
	 ИЛИ Выгрузка.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия401алко 
	 ИЛИ Выгрузка.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия500 Тогда
		ОкноПоказаXML = ПолучитьФорму("ФормаПросмотраXML");
		ОкноПоказаXML.ТекстXML = Выгрузка.Текст;
		ОкноПоказаXML.Заголовок = Выгрузка.ИмяФайла;
		ОкноПоказаXML.Открыть();
	Иначе
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(Выгрузка.Текст);
		Текст.ТолькоПросмотр = Истина;
		Текст.УстановитьТипФайла(КодировкаТекста.OEM);
		Текст.Показать(РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ЭлементыФормы.Основания.ТекущиеДанные.Ссылка) + " - электронное представление");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - действие кнопки ШифрованиеИОтправка командной панели ОсновныеДействияФормы.
//
Процедура ОсновныеДействияФормыКнопкаШифрованиеИОтправка(Кнопка)
	
	// Проверка реквизитов для интеграции с Такском
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Выберите организацию!");
		Возврат;
	КонецЕсли;
	
	Если Выгрузки.Количество() = 0 Тогда
		Предупреждение("Тексты выгрузки не сформированы!");
		Возврат;
	КонецЕсли;
	
	Если Организация.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменЧерезСпринтер Тогда
		Предупреждение("В параметрах выбранной организации не включена возможность отправки отчетности через ПК ""Спринтер""!");
		Возврат;
	КонецЕсли;
	
	КодАбонента = Организация.ОбменКодАбонента;
	КаталогПрограммыЭлПочты = СокрЛП(Организация.ОбменКаталогПрограммыЭлектроннойПочты);
	КаталогОтправкиДанныхОтчетности = СокрЛП(Организация.ОбменКаталогОтправкиДанныхОтчетности);
	Если Прав(КаталогОтправкиДанныхОтчетности, 1) <> "\" Тогда
		КаталогОтправкиДанныхОтчетности = КаталогОтправкиДанныхОтчетности + "\";
	КонецЕсли;
	
	Если СтрДлина(КодАбонента) <> 7 Тогда 
		Предупреждение("Неверно задан логин абонента в параметрах интеграции с ПК ""Спринтер""!");
		Возврат;
	КонецЕсли;
	
	РезультатФормыИзмененияСчетчиков = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ФормаПередШифрованиемИОтправкой", ЭтаФорма).ОткрытьМодально();
	Если НЕ РезультатФормыИзмененияСчетчиков Тогда
		Возврат;
	КонецЕсли;
		
	Файл1 = Новый Файл(КаталогПрограммыЭлПочты);
	Файл2 = Новый Файл(КаталогОтправкиДанныхОтчетности);
		
	Если ПустаяСтрока(КаталогПрограммыЭлПочты) ИЛИ НЕ Файл1.Существует() Тогда
		Предупреждение("Неверно задан каталог программы электронной почты!");
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(КаталогОтправкиДанныхОтчетности) Тогда
		Предупреждение("Не задан каталог отправки данных отчетности!");
		Возврат;
	КонецЕсли;
	
	Если НЕ Файл2.Существует() Тогда
		Попытка
			СоздатьКаталог(КаталогОтправкиДанныхОтчетности);
		Исключение
			Предупреждение("Не удалось создать каталог отправки данных отчетности!");
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Файл4 = Новый Файл(КаталогПрограммыЭлПочты + "run_dipost.bat");
	
	Если НЕ Файл4.Существует() Тогда
		Предупреждение("В каталоге программы электронной почты не найден файл run_dipost.bat!");
		Возврат;
	КонецЕсли;
	
	СохранитьТексты(Ложь, Истина, КаталогОтправкиДанныхОтчетности, КаталогПрограммыЭлПочты);
	
КонецПроцедуры

// Процедура - действие кнопки СформироватьТекстыВыгрузки командной панели ОсновныеДействияФормы.
//
Процедура ОсновныеДействияФормыСформироватьТекстыВыгрузки(Кнопка)
	
	СформироватьТекстыВыгрузки( , , Истина);
	Если ОшибкаВыгрузки <> Истина Тогда
		Предупреждение("Формирование текстов выгрузки успешно завершено.");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - действие кнопки Сохранить командной панели ОсновныеДействияФормы.
//
Процедура ОсновныеДействияФормыСохранить(Кнопка)
	
	СохранитьТексты();
	
КонецПроцедуры

// Процедура - действие кнопки Проверить командной панели ОсновныеДействияФормы.
//
Процедура ОсновныеДействияФормыПроверить(Кнопка)
	
	ПроверитьОтчеты();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события Очистка поля ввода Организация.
//
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ИзменениеПараметровОтбора() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	ВидимостьКнопкиШифрованиеИОтправкаВИФНС();
	КодИМНС = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, , "КодНО").КодНО;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора поля ввода Организация.
//
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Организация Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИзменениеПараметровОтбора() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Выбор табличного поля Основания.
//
Процедура ОснованияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ОткрытьЗначение(ВыбраннаяСтрока.Ссылка);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзмененииФлажка табличного поля Основания.
//
Процедура ОснованияПриИзмененииФлажка(Элемент, Колонка)
	
	Если Выгрузки.Количество() <> 0 Тогда
		Если Вопрос("При изменении списка документов будут очищены тексты выгрузки." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Выгрузки.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриПолученииДанных табличного поля Основания.
//
Процедура ОснованияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	СуществуютНепривязанныеТекстыВыгрузки = Ложь;
	Для Инд = 1 По Выгрузки.Количество() Цикл
		Если Основания.Найти(Инд, "НомерСтрокиТекстаВыгрузки") = Неопределено Тогда
			СуществуютНепривязанныеТекстыВыгрузки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СсылкиНаОтчеты = Новый Массив;
	СоответствиеСсылкиОформлениюСтроки = Новый Соответствие;
	Для Каждого Стр Из ОформленияСтрок Цикл
		СсылкаНаОтчет = Стр.ДанныеСтроки.Ссылка;
		СоответствиеСсылкиОформлениюСтроки.Вставить(СсылкаНаОтчет, Стр);
		СсылкиНаОтчеты.Добавить(СсылкаНаОтчет);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйОтчет.НаименованиеОтчета,
	               |	РегламентированныйОтчет.ФорматВыгрузки,
	               |	РегламентированныйОтчет.ЕдиницаИзмерения,
	               |	РегламентированныйОтчет.ТочностьЕдиницыИзмерения,
	               |	РегламентированныйОтчет.Вид,
	               |	РегламентированныйОтчет.Комментарий,
	               |	РегламентированныйОтчет.ДатаНачала,
	               |	РегламентированныйОтчет.ДатаОкончания,
	               |	РегламентированныйОтчет.Ссылка
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.Ссылка В(&Ссылка)";
	Запрос.УстановитьПараметр("Ссылка", СсылкиНаОтчеты);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Стр = СоответствиеСсылкиОформлениюСтроки[Выборка.Ссылка];
		Стр.Ячейки.НомерСтрокиТекстаВыгрузки.ЦветТекста = ?(Стр.ДанныеСтроки.НомерСтрокиТекстаВыгрузки = 0 И НЕ СуществуютНепривязанныеТекстыВыгрузки, Новый Цвет(255, 0, 0), Новый Цвет());
		Стр.Ячейки.Отчет.УстановитьТекст(Выборка.НаименованиеОтчета);
		Стр.Ячейки.Вид.УстановитьТекст(РегламентированнаяОтчетность.ПредставлениеВидаДокумента(Выборка.Вид));
		Стр.Ячейки.Период.УстановитьТекст(ПредставлениеПериода(НачалоДня(Выборка.ДатаНачала), КонецДня(Выборка.ДатаОкончания), "ФП=Истина"));
		Стр.Ячейки.Комментарий.УстановитьТекст(Выборка.Комментарий);
		Стр.Ячейки.НомерСтрокиТекстаВыгрузки.УстановитьТекст(?(Стр.ДанныеСтроки.НомерСтрокиТекстаВыгрузки = 0 И НЕ СуществуютНепривязанныеТекстыВыгрузки, "Нет", "Да"));
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода КодИМНС.
//
Процедура КодИМНСНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	РегламентированныйОтчет.КодИМНС
	                      |ИЗ
	                      |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
						  |ГДЕ
						  |	РегламентированныйОтчет.КодИМНС <> """" И
						  |	РегламентированныйОтчет.КодИМНС <> "" "" И
						  |	РегламентированныйОтчет.КодИМНС <> ""  "" И
						  |	РегламентированныйОтчет.КодИМНС <> ""   "" И
						  |	РегламентированныйОтчет.КодИМНС <> ""    "" И
			              |	РегламентированныйОтчет.ДатаОкончания >= &ДатаНачала И
			              |	РегламентированныйОтчет.ДатаОкончания <= &ДатаОкончания");
						  
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = Запрос.Текст + " И
	                      |	РегламентированныйОтчет.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ПериодПо));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ПериодПо));
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КодИМНС"));
	СписокВыбора.СортироватьПоЗначению();
	СписокВыбора.Вставить(0, "", "<<>>");
	РезультатВыбора = ВыбратьИзСписка(СписокВыбора, ЭлементыФормы.КодИМНС, КодИМНС);
	Если РезультатВыбора <> Неопределено И (КодИМНС <> РезультатВыбора.Значение И НЕ (ПустаяСтрока(КодИМНС) И ПустаяСтрока(РезультатВыбора.Значение)))И ИзменениеПараметровОтбора() Тогда
		КодИМНС = РезультатВыбора.Значение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик событий Нажатие надписей НадписьМесяц1,  НадписьМесяц2, ... , НадписьМесяц12.
//
Процедура НадписьМесяц1Нажатие(Элемент)
	
	Месяц = Число(Сред(Элемент.Имя, 13));
	Если Месяц <> Месяц(ПериодПо) И НЕ ИзменениеПараметровОтбора() Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииМесяца();
	
КонецПроцедуры

// Процедура вызывается при изменении периода нажатием на одну из надписей с указанием периода
// или при изменении положения ползунка у полосы регулирования периода.
//
// Параметры:
//	Нет.
//
Процедура ПриИзмененииМесяца()
	
	ПериодПо = КонецМесяца(Дата(Год, Месяц, 1));
	УправлениеНадписямиМесяцев();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Год.
//
Процедура ГодПриИзменении(Элемент)
	
	Если Год <> Год(ПериодПо) Тогда
		Если ИзменениеПараметровОтбора() Тогда
			ПериодПо = КонецМесяца(Дата(Год, Месяц(ПериодПо), 1));
		Иначе
			Год = Год(ПериодПо);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события выбор ПриИзменении полосы регулирования ПолосаРегулированияПериода.
//
Процедура ПолосаРегулированияПериодаПриИзменении(Элемент)
	
	Месяц = ПереключательМесяц + 1;
	Если Месяц <> Месяц(ПериодПо) И НЕ ИзменениеПараметровОтбора() Тогда
		Месяц = Месяц(ПериодПо);
		Возврат;
	КонецЕсли;
	ПриИзмененииМесяца();
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
		ПериодПо  = КонецМесяца(ДобавитьМесяц(КонецКвартала(РабочаяДата), -3));
		ОргПоУмолчанию = РегламентированнаяОтчетность.ПолучитьОрганизациюПоУмолчанию();
		Если ЗначениеЗаполнено(ОргПоУмолчанию) Тогда
			Организация = ОргПоУмолчанию;
		КонецЕсли;

		флОтборИФНС = Истина;
	ИначеЕсли СокрЛП(КодИМНС) <> "" Тогда
		флОтборИФНС = Истина;
	КонецЕсли;
	
	ЭлементыФормы.КодИМНС.Доступность = флОтборИФНС;
	
	Для Каждого Стр из Основная Цикл
		НовСтр = Основания.Добавить();
		НовСтр.Ссылка = Стр.Основание;
		НовСтр.НомерСтрокиТекстаВыгрузки = Стр.НомерСтрокиТекстаВыгрузки;
		НовСтр.Пометка = Истина;
	КонецЦикла;

	Год = Год(ПериодПо);
	Месяц = Месяц(ПериодПо);
	УправлениеНадписямиМесяцев();
	
	ВидимостьКнопкиШифрованиеИОтправкаВИФНС();
	ЭлементыФормы.Организация.ТолькоПросмотр = НЕ РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	
	//МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	СтруктураРеквизитов = Новый Структура("Дата, Организация, Год");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма, СтруктураРеквизитов);
	
	мТекущаяДатаДокумента = Дата;
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата;
	
КонецПроцедуры

Функция ВыгрузитьОтчет(Отчет, ПроверкаБлокировкиФормы = Истина, ДляОтправкиВФНС = Истина) Экспорт
	Перем ИмяКонечногоФайла;
	
	Если НЕ ЗначениеЗаполнено(Отчет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РежимВызоваЭкспортируемогоМетодаФормы	= Истина;
	ПервыйДок								= Отчет;
	Дата									= РабочаяДата;
	КодИМНС									= Отчет.КодИМНС;
	ПериодПо								= КонецДня(Отчет.ДатаОкончания);
	Организация								= Отчет.Организация;
	
	// заполняем табличную часть "Выгрузки" документами-основаниями
	НовСтр = Основания.Добавить();
	НовСтр.Ссылка = Отчет;
	НовСтр.Пометка = Истина;
	
	// формируем текст выгрузки. Если во время формирования произошла ошибка - вернем признак ошибки
	СформироватьТекстыВыгрузки( , , ПроверкаБлокировкиФормы, ДляОтправкиВФНС);
	Если ОшибкаВыгрузки = Истина Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// создаем временный каталог, куда выгружаем файл
	ВремКаталог = ПолучитьИмяВременногоФайла() + "\";
	СоздатьКаталог(ВремКаталог);
	СохранитьТексты(Истина, , ВремКаталог, , ИмяКонечногоФайла);
	Если ОшибкаВыгрузки = Истина Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИмяКонечногоФайла;
	
КонецФункции

Процедура флОтборИФНСПриИзменении(Элемент)
	
	ЭлементыФормы.КодИМНС.Доступность = флОтборИФНС;
	
	Если НЕ флОтборИФНС Тогда
		КодИМНС = "";
	КонецЕсли;
	
КонецПроцедуры

РежимВызоваЭкспортируемогоМетодаФормы = Ложь;

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("ОтчетДок");
ТаблицаСообщений.Колонки.Добавить("Отчет");
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Описание");
