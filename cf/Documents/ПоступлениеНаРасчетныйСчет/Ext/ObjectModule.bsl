// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;
Перем ЕстьРасчетыПоПлатежнымКартам Экспорт;

// Хранит признак ведения в конфигурации учета по статьям движения денежных средств
Перем ЕстьУчетПоСтатьямДДС Экспорт;

Перем СодержаниеПроводки;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

	ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);

КонецПроцедуры // ПересчитатьСуммуНДС()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);

	Если Не СтрокаПлатеж = Неопределено Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов);
			СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		Иначе
			СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
			СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверкаКурсовВалют()

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	СодержаниеПроводки = НазначениеПлатежа + " по вх.д." + НомерВходящегоДокумента + " от " + Формат(ДатаВходящегоДокумента, "ДЛФ=Д");
	ДатаДока = СтруктураШапкиДокумента.Дата;
	
	Проводки  = Движения.Хозрасчетный;

	СчетДт = СтруктураШапкиДокумента.СчетБанк;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		Тогда
		СтруктураШапкиДокумента.Вставить("КоррПодразделение", СтруктураШапкиДокумента.ПодразделениеОрганизации);
	Иначе
		СтруктураШапкиДокумента.Вставить("КоррПодразделение", СтруктураШапкиДокумента.ПодразделениеКт);
	КонецЕсли; 
	Если ЕстьРасчетыПоПлатежнымКартам Тогда
		СтруктураШапкиДокумента.Вставить("ПодразделениеРасчетов", ПодразделениеКт);
	КонецЕсли;

	РасчетыВВалюте = СчетДт.Валютный;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыПоПлатежнымКартам Тогда

		СтруктураШапкиДокумента.Вставить("КоррСчет", СчетДт);
		
		ТаблицаДокумента = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		
		Если ЕстьРасчетыПоПлатежнымКартам И (СтруктураШапкиДокумента.СуммаУслуг > 0) Тогда
		
			СтрокаУслуг = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУслуг, ТаблицаДокумента[0]);
			СтрокаУслуг.СуммаБУ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтруктураШапкиДокумента.СуммаУслуг,
				ВалютаДокумента, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсДокумента, 1,
				СтруктураШапкиДокумента.КратностьДокумента, 1);
			СтрокаУслуг.СуммаВзаиморасчетов = СтруктураШапкиДокумента.СуммаУслуг;
			
			СтрокаУслуг.КоррСчет      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			СтрокаУслуг.КоррСубконто1 = СубконтоКт1;
			СтрокаУслуг.КоррСубконто2 = СубконтоКт2;
			СтрокаУслуг.КоррСубконто3 = СубконтоКт3;
			
			СтрокаУслуг.КоррПодразделение = СтрокаУслуг.Подразделение;
		
		КонецЕсли;
		
		Если ТаблицаДокумента.Количество()= 0 Тогда
			// Таблица оплат не заполнена, не требуется обработка
			Возврат;
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты 
			ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
			ИЛИ ЕстьРасчетыПоПлатежнымКартам 
			Тогда
			// Возможен учет на счете 57
			ЕстьСубконтоДокументыНаСчетеОплаты = (ТаблицаДокумента[0].СчетОплаты.ВидыСубконто.Найти(
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто") <> Неопределено);
		Иначе
			ЕстьСубконтоДокументыНаСчетеОплаты = Истина;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда

			ТаблицаДокумента.Колонки.Добавить("СодержаниеПроводки", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
			
			СтрокаСписания = ТаблицаДокумента[0];
			
			СтрокаСписания.СчетАванса = СтрокаСписания.СчетОплаты;
			СтрокаСписания.СодержаниеПроводки = СодержаниеПроводки;
			СтрокаСписания.КоррСчет = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
			Для каждого Субконто из СтрокаСписания.КоррСчет.ВидыСубконто Цикл
				Если Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы тогда
					СтрокаСписания["КоррСубконто"+Субконто.НомерСтроки] = Справочники.ПрочиеДоходыИРасходы.ДоходыРасходыПриПродажеПокупкеВалюты;
				Иначе
					СтрокаСписания["КоррСубконто"+Субконто.НомерСтроки] = Неопределено;
				КонецЕсли;
			КонецЦикла;
			
			СуммаРубПоКурсуБанка = СтрокаСписания.СуммаБУ;
			
			СуммаРубПоКурсуЦБ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаСписания.СуммаВзаиморасчетов, 
				СтрокаСписания.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсНаДатуПриобретенияРеализацииВалюты, 1,
				СтрокаСписания.КратностьВзаиморасчетов, 1);
			
			СтрокаСписания.СуммаБУ = СуммаРубПоКурсуЦБ;
			// В НУ эта проводка не отражается
	
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			
			ТаблицаДокумента.Колонки.Добавить("СодержаниеПроводки", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
			
			ТаблицаДокумента.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
			
			//При приобретении валюты используется только первая строка реестра платежей
			СтрокаПриобретения = ТаблицаДокумента[0];
			
			СтрокаПриобретения.ВалютнаяСумма = СтрокаПриобретения.СуммаВзаиморасчетов;
			
			СтрокаПриобретения.СчетАванса = СтрокаПриобретения.СчетОплаты;
			СтрокаПриобретения.СодержаниеПроводки = СодержаниеПроводки;
			
			СуммаРасчетовПоКурсуБанка = СтрокаПриобретения.СуммаБУ;
			
			Если СтруктураШапкиДокумента.КурсНаДатуПриобретенияРеализацииВалюты <> СтрокаПриобретения.КурсВзаиморасчетов Тогда
				СтрокаПриобретения.СуммаБУ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					СтрокаПриобретения.СуммаВзаиморасчетов,
					СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
					СтруктураШапкиДокумента.КурсНаДатуПриобретенияРеализацииВалюты, 1,
					СтруктураШапкиДокумента.КратностьДокумента, 1);
			КонецЕсли; 
			СтрокаПриобретения.СуммаВзаиморасчетов = СтрокаПриобретения.СуммаБУ;
			
			ФинРезультатПриобретения = СуммаРасчетовПоКурсуБанка - СтрокаПриобретения.СуммаБУ;
			
			Если (ФинРезультатПриобретения <> 0) 
				И (ЕстьСубконтоДокументыНаСчетеОплаты ИЛИ СтруктураШапкиДокумента.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов) 
				Тогда
				
				СтрокаРазницыКурсов = ТаблицаДокумента.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаРазницыКурсов, СтрокаПриобретения);
				
				СтрокаРазницыКурсов.ВалютнаяСумма       = 0;
				СтрокаРазницыКурсов.СуммаБУ             = ФинРезультатПриобретения;
				СтрокаРазницыКурсов.СуммаВзаиморасчетов = ФинРезультатПриобретения;
				
				Если СтруктураШапкиДокумента.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов тогда
					СтрокаРазницыКурсов.КоррСчет = ?(СтрокаРазницыКурсов.СуммаБУ > 0, ПланыСчетов.Хозрасчетный.ПрочиеРасходы, ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
					СтрокаРазницыКурсов.КоррСубконто1 = Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты;
				Иначе
					СтрокаРазницыКурсов.КоррСчет = СтрокаРазницыКурсов.СчетОплаты;
					Для каждого Субконто из СтрокаРазницыКурсов.КоррСчет.ВидыСубконто Цикл
						Если Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты тогда
							СтрокаРазницыКурсов["КоррСубконто"+Субконто.НомерСтроки] = СтрокаРазницыКурсов.Контрагент;
						ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры тогда
							СтрокаРазницыКурсов["КоррСубконто"+Субконто.НомерСтроки] = СтрокаРазницыКурсов.ДоговорКонтрагента;
						ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами тогда
							СтрокаРазницыКурсов["КоррСубконто"+Субконто.НомерСтроки] = СтруктураШапкиДокумента.Ссылка;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами 
			ИЛИ ЕстьРасчетыПоКредитам
			ИЛИ ЕстьРасчетыПоПлатежнымКартам 
			Тогда
			ТаблицаДокумента.ЗагрузитьКолонку(ТаблицаДокумента.ВыгрузитьКолонку("СчетОплаты"),"СчетАванса");
		КонецЕсли;
		
		ОпределятьСостояниеРасчетов = (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоПлатежнымКартам)
			И (ЕстьСубконтоДокументыНаСчетеОплаты ИЛИ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН);
		
		ТаблицаРаспределенияОплат = УправлениеВзаиморасчетами.ПогаситьЗадолженностьКонтрагентов(
			СтруктураШапкиДокумента, ТаблицаДокумента, ЭтотОбъект, 
			Отказ, Заголовок, СодержаниеПроводки, ОпределятьСостояниеРасчетов);

		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		// {УчетДоходовИРасходовИП
		// Движения по учету ИП для услуг банка по платежным картам
		Если ЕстьРасчетыПоПлатежнымКартам 
			И (СтруктураШапкиДокумента.СуммаУслуг > 0)
			И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя 
			Тогда
			
			ТаблицаАвансов = Новый ТаблицаЗначений;
			ТаблицаАвансов.Колонки.Добавить("ДокументОплаты");
			ТаблицаАвансов.Колонки.Добавить("РеквизитыДокументаОплаты");
			ТаблицаАвансов.Колонки.Добавить("Сумма");
			
			СуммаУслугРуб = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтруктураШапкиДокумента.СуммаУслуг,
				ВалютаДокумента, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсДокумента, 1,
				СтруктураШапкиДокумента.КратностьДокумента, 1);
				
			ДокументОплаты = ТаблицаАвансов.Добавить();
			ДокументОплаты.ДокументОплаты = СтруктураШапкиДокумента.Ссылка;
			ДокументОплаты.РеквизитыДокументаОплаты = ДоходыИРасходыПредпринимателя.РеквизитыДокументаОплаты(СтруктураШапкиДокумента);
			ДокументОплаты.Сумма = СуммаУслугРуб;
			
			ТаблицаПоУслугам = Новый ТаблицаЗначений;
			ТаблицаПоУслугам.Колонки.Добавить("Номенклатура");
			ТаблицаПоУслугам.Колонки.Добавить("Счет");
			ТаблицаПоУслугам.Колонки.Добавить("Субконто1");
			ТаблицаПоУслугам.Колонки.Добавить("Субконто2");
			ТаблицаПоУслугам.Колонки.Добавить("Субконто3");
			ТаблицаПоУслугам.Колонки.Добавить("Количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
			ТаблицаПоУслугам.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			ТаблицаПоУслугам.Колонки.Добавить("НДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			
			Услуга = ТаблицаПоУслугам.Добавить();
			Услуга.Счет = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			Услуга.Субконто1 = СтруктураШапкиДокумента.СубконтоКт1;
			Услуга.Субконто2 = СтруктураШапкиДокумента.СубконтоКт2;
			Услуга.Субконто3 = СтруктураШапкиДокумента.СубконтоКт3;
			Услуга.СуммаБезНДС = СуммаУслугРуб;
			
			мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация);
			ДоходыИРасходыПредпринимателя.ПоступлениеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, мУчетнаяПолитика, 1, ТаблицаПоУслугам, "Счет", "Номенклатура", "Субконто", "Субконто", ТаблицаАвансов);
			
		КонецЕсли;
		// }УчетДоходовИРасходовИП
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
			
			СтрокаСписания = ТаблицаДокумента[0];
			
			// Доходная часть операции - БУ
			
			Проводка = Проводки.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = СодержаниеПроводки;
			
			Проводка.СчетДт      = СчетДт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "БанковскиеСчета", СтруктураШапкиДокумента.СчетОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтрокаСписания.СтатьяДДС);
			
			Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ДоходыРасходыПриПродажеПокупкеВалюты);
			
			Проводка.Сумма   = СуммаРубПоКурсуБанка;
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.КоррПодразделение);
			
			// В налоговом учете надо отразить только отклонение между курсами ЦБ и банка
			
			Если СуммаРубПоКурсуБанка - СуммаРубПоКурсуЦБ > 0 Тогда // Доход
				
				Проводка = Проводки.Добавить();

				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = СодержаниеПроводки;
				
				Проводка.СчетДт      = СтрокаСписания.СчетОплаты;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаСписания.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаСписания.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
				
				Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
				
				Проводка.Сумма = 0; // проводка только для НУ
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.КоррПодразделение);
				
				СуммаНУ = СуммаРубПоКурсуБанка - СуммаРубПоКурсуЦБ;
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,,,,,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
				
			ИначеЕсли СуммаРубПоКурсуБанка - СуммаРубПоКурсуЦБ < 0 Тогда // Расход
				
				Проводка = Проводки.Добавить();

				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = СодержаниеПроводки;
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
				
				Проводка.СчетКт      = СтрокаСписания.СчетОплаты;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаСписания.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтрокаСписания.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
				
				Проводка.Сумма = 0; // проводка только для НУ
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.КоррПодразделение, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
				СуммаНУ = СуммаРубПоКурсуЦБ - СуммаРубПоКурсуБанка;
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,,,,,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
				
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		
		Для каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
			
			Проводка = Проводки.Добавить();

			Проводка.Период     = ДатаДока;
			Проводка.Содержание = СодержаниеПроводки;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;

			Проводка.СчетДт     = СчетДт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);

			Проводка.СчетКт = СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаПлатежа.СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаПлатежа.СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаПлатежа.СубконтоКт3);

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтрокаПлатежа.ПодразделениеКт);
			
			Если РасчетыВВалюте Тогда

				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = СтрокаПлатежа.СуммаПлатежа;
				КонецЕсли;

				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СтрокаПлатежа.СуммаПлатежа;
				КонецЕсли;

				Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатежа.СуммаПлатежа, 
					СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
					СтруктураШапкиДокумента.КурсДокумента, 1, 
					СтруктураШапкиДокумента.КратностьДокумента, 1);
				
			Иначе
				Проводка.Сумма = СтрокаПлатежа.СуммаПлатежа;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда

		Проводка = Проводки.Добавить();

		Проводка.Период     = ДатаДока;
		Проводка.Содержание = СодержаниеПроводки;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;

		Проводка.СчетДт     = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);

		Проводка.СчетКт = СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоКт3);

		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.КоррПодразделение);
		
		Если РасчетыВВалюте Тогда

			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;

			Проводка.Сумма  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СуммаДокумента, 
				СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсДокумента, 1, 
				СтруктураШапкиДокумента.КратностьДокумента, 1);
		Иначе
			Проводка.Сумма = СуммаДокумента;
		КонецЕсли;
		
	КонецЕсли;
	
	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);
	
    //Движения по подсистеме УСН
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыПоПлатежнымКартам Тогда
			НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, Новый Структура("ТаблицаРасчетов", ТаблицаРаспределенияОплат));
		Иначе
			НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения);
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Проверка шапки документа
	
	СтруктураПолей = Новый Структура("Организация");

	СтруктураПолей.Вставить("СчетБанк",       "Не указан счет учета денежных средств");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	СтруктураПолей.Вставить("СуммаДокумента");

	Если СчетБанк.Валютный Тогда
		СтруктураПолей.Вставить("ВалютаДокумента","Не указана валюта документа.");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда

		СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом","Не указан счет кредита.");

	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыПоПлатежнымКартам Тогда
		
		СтруктураПолей.Вставить("Контрагент");
		
		Если ЕстьРасчетыПоПлатежнымКартам И (СуммаУслуг > 0) Тогда
			СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", "Не заполнен счет затрат (закладка ""Учет услуг банка"")");
		КонецЕсли;
		
	КонецЕсли;

	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);

	// Проверки на логическое соответствие реквизитов шапки
	
	Если (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты)
		И (СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда
		
		ОбщегоНазначения.ОшибкаПриПроведении("Выручка от реализации иностранной валюты "
			+ "может зачисляться только на рублевый банковский счет организации.",
			Отказ, Заголовок);
			
	ИначеЕсли (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты)
		И (СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		
		ОбщегоНазначения.ОшибкаПриПроведении("Приобретенная иностранная валюта "
			+ "может зачисляться только на валютный банковский счет организации.",
			Отказ, Заголовок);
		
	КонецЕсли;
	
	// Проверка табличной части РасшифровкаПлатежа
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыПоПлатежнымКартам Тогда

		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа") = СуммаДокумента Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не совпадают сумма документа и ее расшифровка.",Отказ,Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	КолСтрок = РасшифровкаПлатежа.Количество();
	
	Для каждого Платеж из РасшифровкаПлатежа Цикл
		
		Если КолСтрок = 1 Тогда
			ТекстНомераСтроки = "";
		Иначе
			ТекстНомераСтроки = "Строка " + Платеж.НомерСтроки + " расшифровки платежа: ";
		КонецЕсли;
		
		ЕстьРасчетыСПоставщикамиПокупателями = 
			(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
			ИЛИ (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика);
		
		Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыПоПлатежнымКартам) Тогда
			
			Если (ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация)
				И НЕ ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Договор контрагента"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			Если ЕстьРасчетыСПоставщикамиПокупателями Тогда
				
				Если НЕ ЗначениеЗаполнено(Платеж.СпособПогашенияЗадолженности) Тогда
					СтрокаСообщения = ТекстНомераСтроки
						+ "Не заполнено значение реквизита ""Распределение оплаты"".";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
				ИначеЕсли (Платеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу)
					И НЕ ЗначениеЗаполнено(Платеж.Сделка) Тогда
					СтрокаСообщения = ТекстНомераСтроки
						+ "Не заполнено значение реквизита ""Документ расчетов"".";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
			Если (ЕстьРасчетыПоКредитам 
				ИЛИ ЕстьРасчетыПоПлатежнымКартам
				ИЛИ (Платеж.СпособПогашенияЗадолженности <> Перечисления.СпособыПогашенияЗадолженности.НеПогашать))
				И НЕ ЗначениеЗаполнено(Платеж.СчетУчетаРасчетовСКонтрагентом) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Счет расчетов"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			Если ЕстьРасчетыСПоставщикамиПокупателями
				И НЕ ЗначениеЗаполнено(Платеж.СчетУчетаРасчетовПоАвансам) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Счет авансов"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) Тогда
				
				ВидДоговораКонтрагента = Платеж.ДоговорКонтрагента.ВидДоговора;
				Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
					
					СтрокаСообщения = ТекстНомераСтроки
						+ "Договор """ + Строка(Платеж.ДоговорКонтрагента) + """ с видом """ + Строка(ВидДоговораКонтрагента) + "
						| не может использоваться в операции """ + Строка(ВидОперации) + """.
						|Допускается использовать только договоры вида: ""C покупателем"", ""С комиссионером"", ""С комитентом"".";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
					
				ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) Тогда
					
					СтрокаСообщения = ТекстНомераСтроки
						+ "Договор """ + Строка(Платеж.ДоговорКонтрагента) + """ с видом """ + Строка(ВидДоговораКонтрагента) + "
						| не может использоваться в операции """ + Строка(ВидОперации) + """.
						|Допускается использовать только договоры вида: ""C поставщиком"", ""С комитентом"", ""С комиссионером""."; 
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);

				ИначеЕсли(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
					ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
					ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
					ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
					ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.Прочее) Тогда
					
					СтрокаСообщения = ТекстНомераСтроки
						+	"Договор """ + Строка(Платеж.ДоговорКонтрагента) + """ с видом """ + Строка(ВидДоговораКонтрагента) + "
						| не может использоваться в операции """ + Строка(ВидОперации) + """.
						|Допускается использовать только договоры вида ""Прочее"".";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);

				КонецЕсли;
				
				УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(
					Организация, Платеж.ДоговорКонтрагента, Платеж.ДоговорКонтрагента.Организация, Отказ, Заголовок);
														  
				//Сопоставление валюты расчетов по договору и валюты документа
				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
					
					Если Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
						ОбщегоНазначения.ОшибкаПриПроведении("При отражении операции реализации иностранной валюты "
							+ "валюта договора должна соответствовать реализуемой валюте.",
							Отказ, Заголовок);
					КонецЕсли;

				ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
					
					Если Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
						ОбщегоНазначения.ОшибкаПриПроведении("При отражении операции приобретения иностранной валюты "
							+ "валюта договора должна соответствовать валюте регламентированного учета.",
							Отказ, Заголовок);
					КонецЕсли;
					
			 	Иначе
				   
					УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
						СтруктураШапкиДокумента, Платеж.ДоговорКонтрагента, Отказ, Заголовок, ТекстНомераСтроки);
					
		        КонецЕсли;
														  
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если (Основание = Неопределено) ИЛИ Не ЭтотОбъект.Метаданные().Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		Возврат;
	КонецЕсли;

	ВидДокументаОснования       = Основание.Метаданные().Имя;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание, Ложь);

	ВалютаДокумента    = мВалютаРегламентированногоУчета;
	КурсДокумента      = 1;
	КратностьДокумента = 1;
	ПараметрыДокументаОснования = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Основание);

	ДокументОснование = ПараметрыДокументаОснования.Ссылка;

	Если ВидДокументаОснования = "РеализацияТоваровУслуг"
		или ВидДокументаОснования = "АктОбОказанииПроизводственныхУслуг" 
		или ВидДокументаОснования = "ОтчетКомиссионераОПродажах" 
		или ВидДокументаОснования = "ОтчетКомитентуОПродажах" 
		или ВидДокументаОснования = "ПередачаОС" 
		или ВидДокументаОснования = "ПередачаНМА" 
		или ВидДокументаОснования = "СчетНаОплатуПокупателю" тогда

		ВидОперации  = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
		Контрагент   = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору           = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
		Если ВидРасчетовПоДоговору=Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте тогда
			ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		Если Не (ВидДокументаОснования = "ОтчетКомитентуОПродажах" или ВидДокументаОснования = "ПередачаНМА") тогда
			ТаблицаСуммДокументаОснования = УчетНДС.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			ТаблицаСуммДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		Иначе
		    ТаблицаСуммДокументаОснования = Новый ТаблицаЗначений();
			ТаблицаСуммДокументаОснования.Колонки.Добавить("СуммаПлатежа",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			ТаблицаСуммДокументаОснования.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			ТаблицаСуммДокументаОснования.Колонки.Добавить("СуммаНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СтрокаТаблицыСумм = ТаблицаСуммДокументаОснования.Добавить();
			Если ВидДокументаОснования = "ОтчетКомитентуОПродажах" тогда
				СтрокаТаблицыСумм.СуммаПлатежа	= ПараметрыДокументаОснования.СуммаВознаграждения;
				СтрокаТаблицыСумм.СтавкаНДС	= ПараметрыДокументаОснования.СтавкаНДСВознаграждения;
				СтрокаТаблицыСумм.СуммаНДС	= Основание.Товары.Итог("СуммаНДСВознаграждения");
				
			ИначеЕсли ВидДокументаОснования = "ПередачаНМА" тогда
				СтрокаТаблицыСумм.СуммаПлатежа	= ПараметрыДокументаОснования.СуммаДокумента;
				СтрокаТаблицыСумм.СтавкаНДС	= ПараметрыДокументаОснования.СтавкаНДС;
				СтрокаТаблицыСумм.СуммаНДС	= ПараметрыДокументаОснования.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаСуммДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,"КратностьВзаиморасчетов");
		// При вводе на основании устанавливаем режим распределения оплаты "По документу"
		ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.ПоДокументу,"СпособПогашенияЗадолженности");
		ТаблицаПлатежей.ЗаполнитьЗначения(Основание,"Сделка");

		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");

		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
			Если ПараметрыДокументаОснования.РасчетыВУсловныхЕдиницах тогда
				Если ПараметрыДокументаОснования.ВалютаДокумента = мВалютаРегламентированногоУчета тогда
					СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
																				мВалютаРегламентированногоУчета,ПараметрыДокументаОснования.ВалютаВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КурсВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КратностьВзаиморасчетов);
					СтрокаПлатеж.СуммаНДС 			 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаНДС,
																				мВалютаРегламентированногоУчета,ПараметрыДокументаОснования.ВалютаВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КурсВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КратностьВзаиморасчетов);
				КонецЕсли;

				СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
																		ПараметрыДокументаОснования.ВалютаВзаиморасчетов,мВалютаРегламентированногоУчета,
																		СтрокаПлатеж.КурсВзаиморасчетов,1,
																		СтрокаПлатеж.КратностьВзаиморасчетов,1);
																		
				ПересчитатьНДС = Ложь;
				Если ТаблицаПлатежей.Колонки.Найти("СтавкаНДС") <> Неопределено Тогда
					Если ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС) Тогда
						ПересчитатьНДС = Истина;						
					КонецЕсли;
				КонецЕсли;
				
				Если ПересчитатьНДС Тогда
					ПересчитатьСуммуНДС(СтрокаПлатеж);
				Иначе																					
					СтрокаПлатеж.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту	  (СтрокаПлатеж.СуммаНДС,
																			ПараметрыДокументаОснования.ВалютаВзаиморасчетов,мВалютаРегламентированногоУчета,
																			СтрокаПлатеж.КурсВзаиморасчетов,1,
																			СтрокаПлатеж.КратностьВзаиморасчетов,1);
				КонецЕсли;														
			КонецЕсли;
		КонецЦикла; 

		Если ВидДокументаОснования = "ОтчетКомиссионераОПродажах" тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом"); 
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансамПолученным, "СчетУчетаРасчетовПоАвансам") ;
		ИначеЕсли ВидДокументаОснования = "СчетНаОплатуПокупателю" Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание, "СчетНаОплату");
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом") ;
			Если ВидДокументаОснования = "ОтчетКомитентуОПродажах" и ПараметрыДокументаОснования.УдержатьВознаграждение тогда
				СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ПараметрыДокументаОснования.Организация, Контрагент, ДоговорКонтрагента);
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетАвансовПокупателя, "СчетУчетаРасчетовПоАвансам") ;
			Иначе
				ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам") ;
			КонецЕсли;
		КонецЕсли;
		
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж = РасшифровкаПлатежа[0];
		
	ИначеЕсли ВидДокументаОснования = "РасходныйКассовыйОрдер" Тогда
		
		Если НЕ Основание.ВидОперации=Перечисления.ВидыОперацийРКО.Инкассация Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ ""Поступление на расчетный счет"" " 
				+ "вводится только на основании расходного кассового ордера
				| с видом операции ""Инкассация денежных средств"".");
			Возврат;
		КонецЕсли;
		
		ВидОперации=Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация;
		
		СчетУчетаРасчетовСКонтрагентом=Основание.СчетУчетаРасчетовСКонтрагентом;
		СубконтоКт1=Основание.СубконтоДт1;
		СубконтоКт2=Основание.СубконтоДт2;
		СубконтоКт3=Основание.СубконтоДт3;
		
		СтатьяДвиженияДенежныхСредств= Основание.СтатьяДвиженияДенежныхСредств;
		
		СуммаДокумента=Основание.СуммаДокумента;
		
		Если Основание.СчетКасса.Валютный Тогда
			СчетБанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
			ВалютаДокумента = Основание.ВалютаДокумента;                                            
		Иначе
			СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
			ВалютаДокумента = Основание.ВалютаДокумента;                                            
		КонецЕсли;
		
		УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетОрганизации, Организация, ВалютаДокумента, Истина);

		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		
		СуммаДокументаОснования = Новый ТаблицаЗначений();
		СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		СуммаДокументаОснования.Колонки.Добавить("СтатьяДвиженияДенежныхСредств",Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
		СуммаДокументаОснования.Колонки.Добавить("СубконтоКт1");

		СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();                           
		СтрокаТаблицыСумм.СуммаПлатежа	= ПараметрыДокументаОснования.СуммаДокумента;
		СтрокаТаблицыСумм.СтатьяДвиженияДенежныхСредств	= Основание.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		СтрокаТаблицыСумм.СубконтоКт1 = СубконтоКт1; 
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		РасшифровкаПлатежа[0].СубконтоКт1 = СубконтоКт1;
		РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
				
		
	ИначеЕсли ВидДокументаОснования = "ПлатежноеТребование" Тогда
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
		
		ДатаВходящегоДокумента  = Основание.Дата;
		НомерВходящегоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
		СчетКонтрагента = Основание.СчетКонтрагента;
		ПлатежныйДокумент = Основание;
		
		НазначениеПлатежа = СтрЗаменить(Основание.НазначениеПлатежа, Символы.ПС, " ");
		
		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа = Основание.СуммаДокумента;
		СтрокаПлатеж.СтавкаНДС = Основание.СтавкаНДС;
		СтрокаПлатеж.СуммаНДС = Основание.СуммаНДС;
		
		СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
		УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(
			ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговора);
				
		СтрокаПлатеж.ДоговорКонтрагента      = ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(
			ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаПлатежа,
			ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов,
			КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
			КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) или ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	Иначе
		СчетБанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
	КонецЕсли; 

	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ЕстьРасчетыСКонтрагентами    = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам        = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	ЕстьРасчетыПоПлатежнымКартам = УправлениеДенежнымиСредствами.ЕстьРасчетыПоПлатежнымКартам(ВидОперации);
	Ответственный                = глЗначениеПеременной("глТекущийПользователь");
	
	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
    
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ЕстьРасчетыСКонтрагентами    = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам        = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	ЕстьРасчетыПоПлатежнымКартам = УправлениеДенежнымиСредствами.ЕстьРасчетыПоПлатежнымКартам(ВидОперации);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента,Отказ, Заголовок);

	// Движения по документу
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(Режим, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	ДоговорКонтрагента = РасшифровкаПлатежа[0].ДоговорКонтрагента;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

ЕстьУчетПоСтатьямДДС = УправлениеДенежнымиСредствами.ЕстьУчетПоСтатьямДДС();

