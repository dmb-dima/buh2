////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

Перем СтараяВалютаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

//Используется для определения необходимости открытия настроек движения после сохранения
Перем ОткрыватьНастройкуДвижений;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасшифровкаПлатежа,ЭлементыФормы.КоманднаяПанельПлатежи);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость закладок. 
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	// Видимость реквизитов шапки
	
	НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата);
	УСН       = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	УСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	ВидимостьУСН = УСН И (НЕ УСНДоходы);

	ЭлементыФормы.НадписьВалютаДокумент.Заголовок = Строка(ВалютаДокумента);
	ЭлементыФормы.НадписьВалютаДокумент.Видимость = СчетБанк.Валютный;
	
	ЭтоОплатаПокупателя = (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
	
	ЭлементыФормы.НадписьПлатежныйДокумент.Видимость = ЭтоОплатаПокупателя;
	ЭлементыФормы.ПлатежныйДокумент.Видимость        = ЭтоОплатаПокупателя;
	
	ЭтоИнкассация = (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация);
	
	ЭлементыФормы.НадписьКонтрагент.Доступность      = НЕ ЭтоИнкассация;
	ЭлементыФормы.Контрагент.Доступность             = НЕ ЭтоИнкассация;
	ЭлементыФормы.НадписьСчетКонтрагента.Доступность = НЕ ЭтоИнкассация;
	ЭлементыФормы.СчетКонтрагента.Доступность        = НЕ ЭтоИнкассация;
	
	ЭлементыФормы.Контрагент.АвтоОтметкаНезаполненного = НЕ ЭтоИнкассация;
	Если ЭтоИнкассация Тогда
		ЭлементыФормы.Контрагент.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	// Видимость реквизитов расшифровки платежа
	
	ЭлементыФормы.ПанельРамкиРасшифровкиПлатежа.Свертка = РежимСверткиЭлементаУправления.Нет;
	ЭлементыФормы.ПанельПлатежи.ОтображениеЗакладок     = ОтображениеЗакладок.НеИспользовать;
	ЭлементыФормы.ПанельПлатежи.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание);
	
	КолонкиРасшифровкиПлатежа = ЭлементыФормы.РасшифровкаПлатежа.Колонки;
	
	Если ЕстьРасчетыСКонтрагентами Тогда

		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			
			РаботаСДиалогами.УстановитьТекущуюСтраницу("КупляПродажаВалюты", ЭлементыФормы.ПанельПлатежи);
			
			ЭлементыФормы.НадписьКурсВалюта.Заголовок                             = "Курс приобретения валюты:";
			ЭлементыФормы.НадписьКурсНаДатуПриобретенияРеализацииВалюты.Заголовок = "Курс ЦБ РФ на дату приобретения валюты:";
			ЭлементыФормы.НадписьРубСуммаВалюта.Заголовок                         = "Сумма в рублях по курсу приобретения:";
			
			ЭлементыФормы.СтатьяДвиженияДенежныхСредствВалюта.Видимость = ЕстьУчетПоСтатьямДДС;
			ЭлементыФормы.НадписьСтатьяДДСВалюта.Видимость 	  	    	= ЕстьУчетПоСтатьямДДС;
	
			ЭлементыФормы.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов.Видимость = Истина;
			
			ЭлементыФормы.СписокПлатежей.Доступность = Ложь;

		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
			
			РаботаСДиалогами.УстановитьТекущуюСтраницу("КупляПродажаВалюты", ЭлементыФормы.ПанельПлатежи);
			
			ЭлементыФормы.НадписьКурсВалюта.Заголовок                             = "Курс реализации валюты:";
			ЭлементыФормы.НадписьКурсНаДатуПриобретенияРеализацииВалюты.Заголовок = "Курс ЦБ РФ на дату реализации валюты:";
			ЭлементыФормы.НадписьРубСуммаВалюта.Заголовок                         = "Сумма реализованной валюты"
				+ ?(ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента), 
				" (" + СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов + ")", "") + ":";
			
			ЭлементыФормы.СтатьяДвиженияДенежныхСредствВалюта.Видимость = ЕстьУчетПоСтатьямДДС;
			ЭлементыФормы.НадписьСтатьяДДСВалюта.Видимость 	  	    	= ЕстьУчетПоСтатьямДДС;
	
			ЭлементыФормы.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов.Видимость = Ложь;
			
			ЭлементыФормы.СписокПлатежей.Доступность = Ложь;
		
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда

			РаботаСДиалогами.УстановитьТекущуюСтраницу("ПрочиеРасчеты", ЭлементыФормы.ПанельПлатежи);
			
			ЭлементыФормы.СтатьяДвиженияДенежныхСредствПрочиеРасчеты.Видимость = ЕстьУчетПоСтатьямДДС;
			ЭлементыФормы.НадписьСтатьяДДСПрочиеРасчеты.Видимость 	  		    = ЕстьУчетПоСтатьямДДС;
			
			ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = УСН;
			
			ЭлементыФормы.СписокПлатежей.Доступность = Ложь;
			
		Иначе // Оплата покупателя или возврат поставщика
			
			Если СписокПлатежей Тогда
				РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
				ЭлементыФормы.ПанельПлатежи.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
			Иначе
				РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
			КонецЕсли;
			
			ЭтоРасчетыВ_УЕ = ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) 
				И СтрокаПлатеж.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
   		
			ЭлементыФормы.НадписьКурсВзаиморасчетов.Видимость = ЭтоРасчетыВ_УЕ;
			ЭлементыФормы.КурсВзаиморасчетов.Видимость        = ЭтоРасчетыВ_УЕ;
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Видимость = ЭтоРасчетыВ_УЕ;
			ЭлементыФормы.СуммаВзаиморасчетов.Видимость        = ЭтоРасчетыВ_УЕ;
				
			ЭлементыФормы.СчетНаОплату.Видимость             = ЭтоОплатаПокупателя;
			ЭлементыФормы.НадписьСчетНаОплату.Видимость      = ЭтоОплатаПокупателя;
			КолонкиРасшифровкиПлатежа.СчетНаОплату.Видимость = ЭтоОплатаПокупателя;
			
			ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Видимость             = ПоказыватьВДокументахСчетаУчета;
			ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентом.Видимость      = ПоказыватьВДокументахСчетаУчета;
			КолонкиРасшифровкиПлатежа.СчетУчетаРасчетовСКонтрагентом.Видимость = ПоказыватьВДокументахСчетаУчета;
			
			ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Видимость             = ПоказыватьВДокументахСчетаУчета;
			ЭлементыФормы.НадписьСчетУчетаРасчетовПоАвансам.Видимость      = ПоказыватьВДокументахСчетаУчета;
			КолонкиРасшифровкиПлатежа.СчетУчетаРасчетовПоАвансам.Видимость = ПоказыватьВДокументахСчетаУчета;
			
			ЭлементыФормы.СтатьяДвиженияДенежныхСредств.Видимость             = ЕстьУчетПоСтатьямДДС;
			ЭлементыФормы.НадписьСтатьяДДС.Видимость 	  		              = ЕстьУчетПоСтатьямДДС;
			КолонкиРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств.Видимость = ЕстьУчетПоСтатьямДДС;

			// Распределение оплаты
			
			ЭтоОплатаПоДокументу = (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
			ЭлементыФормы.Сделка.Видимость                  = ЭтоОплатаПоДокументу;
			ЭлементыФормы.НадписьСделка.Видимость           = ЭтоОплатаПоДокументу;
			КолонкиРасшифровкиПлатежа.Сделка.ТолькоПросмотр = НЕ ЭтоОплатаПоДокументу;
			
			ЭтоАванс = (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
			ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Доступность                = НЕ ЭтоАванс;
			ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентом.Доступность         = НЕ ЭтоАванс;
			КолонкиРасшифровкиПлатежа.СчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр = ЭтоАванс;
			
			ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.АвтоОтметкаНезаполненного = НЕ ЭтоАванс;
			Если ЭтоАванс Тогда
				ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.ОтметкаНезаполненного = Ложь;
			КонецЕсли;
			
			ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = УСНДоходы;
			
			ЭлементыФормы.СписокПлатежей.Доступность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда

		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);

		ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = УСН;
		
		ЭлементыФормы.СтатьяДвиженияДенежныхСредствПрочие.Видимость = ЕстьУчетПоСтатьямДДС;
		ЭлементыФормы.НадписьСтатьяДДСПрочие.Видимость 	  		    = ЕстьУчетПоСтатьямДДС;
	
		УстановитьВидимостьСубконто();
		
		ЭлементыФормы.СписокПлатежей.Доступность = Ложь;
		
	ИначеЕсли ЭтоИнкассация Тогда
		
		Если СписокПлатежей Тогда
			РаботаСДиалогами.УстановитьТекущуюСтраницу("ИнкассацияСписком", ЭлементыФормы.ПанельПлатежи);
		Иначе
			РаботаСДиалогами.УстановитьТекущуюСтраницу("Инкассация", ЭлементыФормы.ПанельПлатежи);
		КонецЕсли;
				
		ЭлементыФормы.СтатьяДвиженияДенежныхСредствИнкассация.Видимость = ЕстьУчетПоСтатьямДДС;
		ЭлементыФормы.НадписьСтатьяДДСИнкассация.Видимость              = ЕстьУчетПоСтатьямДДС;
	
		УстановитьВидимостьСубконто("Инк");

		ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = УСН;

		ЭлементыФормы.СписокПлатежей.Доступность = Истина;
		
	ИначеЕсли ЕстьРасчетыПоКредитам Тогда

		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПрочиеРасчеты", ЭлементыФормы.ПанельПлатежи);

		ЭлементыФормы.СтатьяДвиженияДенежныхСредствПрочиеРасчеты.Видимость = ЕстьУчетПоСтатьямДДС;
		ЭлементыФормы.НадписьСтатьяДДСПрочиеРасчеты.Видимость 	  		    = ЕстьУчетПоСтатьямДДС;
	
		ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = УСН;

		ЭлементыФормы.СписокПлатежей.Доступность = Ложь;
		
	ИначеЕсли ЕстьРасчетыПоПлатежнымКартам Тогда
		
		ЭлементыФормы.ПанельРамкиРасшифровкиПлатежа.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельПлатежи.ОтображениеЗакладок     = ОтображениеЗакладок.Сверху;
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежныеКарты", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.ПанельПлатежи.Страницы.ПлатежныеКартыУслугиБанка.Видимость = Истина;
		ЭлементыФормы.ПанельПлатежи.Страницы.ПлатежныеКарты.Заголовок            = "Расшифровка платежа";
		ЭлементыФормы.ПанельПлатежи.Страницы.ПлатежныеКартыУслугиБанка.Заголовок = "Учет услуг банка";
		
		ЭлементыФормы.СчетУчетаПлатежныеКартыУслуги.АвтоОтметкаНезаполненного = (СуммаУслуг > 0);
		ЭлементыФормы.СчетУчетаПлатежныеКартыУслуги.АвтоВыборНезаполненного   = (СуммаУслуг > 0);
		Если СуммаУслуг = 0 Тогда
			ЭлементыФормы.СчетУчетаПлатежныеКартыУслуги.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		ЭлементыФормы.СтатьяДвиженияДенежныхСредствПлатежныеКарты.Видимость = ЕстьУчетПоСтатьямДДС;
		ЭлементыФормы.НадписьСтатьяДДСПлатежныеКарты.Видимость 	  		    = ЕстьУчетПоСтатьямДДС;
	
		ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = УСНДоходы;
		
		УстановитьВидимостьСубконто();
		
		ЭлементыФормы.СписокПлатежей.Доступность = Ложь;
		
	КонецЕсли;

	ЭлементыФормы.РасшифровкаПлатежа.Ширина = ЭлементыФормы.ПанельПлатежи.Ширина;
	ЭлементыФормы.РасшифровкаПлатежа.Высота = ЭлементыФормы.ПанельПлатежи.Высота;
	
КонецПроцедуры // УстановитьВидимость()

Процедура УстановитьПодразделениеКт()

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		Тогда
		ПодразделениеКт = Неопределено;
	// {ОбособленныеПодразделения	
	Иначе
		ПодразделениеКт = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьВидимостьСубконто(Постфикс="")
	
	Если Постфикс = "Инк" Тогда
		ТекСчетУчета = ЭлементыФормы.РасшифровкаПлатежаИнкассация.ТекущиеДанные.СчетУчетаРасчетовСКонтрагентом;
	Иначе
		ТекСчетУчета = СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;
	
	Для Ном = 1 по 3 Цикл

		Если (Ном <= ТекСчетУчета.ВидыСубконто.Количество()) и (ЗначениеЗаполнено(ТекСчетУчета)) Тогда
			ЭлементыФормы["НадписьСубконтоКт"+Ном+Постфикс].Заголовок = Строка(ТекСчетУчета.ВидыСубконто[Ном-1].ВидСубконто);
			ЭлементыФормы["НадписьСубконтоКт"+Ном+Постфикс].Видимость = Истина;
			ЭлементыФормы["СубконтоКт"+Ном+Постфикс].Видимость        = Истина;
		Иначе
			ЭлементыФормы["НадписьСубконтоКт"+Ном+Постфикс].Видимость = Ложь;
			ЭлементыФормы["СубконтоКт"+Ном+Постфикс].Видимость        = Ложь;
		КонецЕсли;

		Если (Ном <= ТекСчетУчета.ВидыСубконто.Количество()) и (ЗначениеЗаполнено(ТекСчетУчета)) Тогда
			ЭлементыФормы["НадписьСубконтоКт"+Ном+"ПлатежныеКартыУслуги"].Заголовок = Строка(ТекСчетУчета.ВидыСубконто[Ном-1].ВидСубконто);
			ЭлементыФормы["НадписьСубконтоКт"+Ном+"ПлатежныеКартыУслуги"].Видимость = Истина;
			ЭлементыФормы["СубконтоКт"+Ном+"ПлатежныеКартыУслуги"].Видимость        = Истина;
		Иначе
			ЭлементыФормы["НадписьСубконтоКт"+Ном+"ПлатежныеКартыУслуги"].Видимость = Ложь;
			ЭлементыФормы["СубконтоКт"+Ном+"ПлатежныеКартыУслуги"].Видимость        = Ложь;
		КонецЕсли;
		
	КонецЦикла;

	ЭлементыФормы["НадписьПодразделениеКтПрочие"].Видимость = ТекСчетУчета.УчетПоПодразделениям;
	ЭлементыФормы["ПодразделениеКтПрочие"].Видимость        = ТекСчетУчета.УчетПоПодразделениям;
		
	ЭлементыФормы["НадписьПодразделениеКтИнкассация"].Видимость = ТекСчетУчета.УчетПоПодразделениям;
	ЭлементыФормы["ПодразделениеКтИнкассация"].Видимость        = ТекСчетУчета.УчетПоПодразделениям;
		
КонецПроцедуры // УстановитьВидимостьСубконто()

Процедура ЗаполнитьСчетаИнкассации()

	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути_);
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты);
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты);
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам);
	
	ЭлементыФормы.СчетИнкассация.СписокВыбора = РаботаСДиалогами.ЗаполнитьСписокВыбораСчетовДенежныхСредств(МассивОтбора, Истина, СчетБанк, МассивИсключений);
	
КонецПроцедуры

Процедура ОпределитьСчетаУчетаРасчетовСКонтрагентом()

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		Если ОтражатьРазницуВКурсеВСоставеОперационныхРасходов Тогда
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты;
		Иначе
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
		КонецЕсли; 
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		
		Если СчетБанк.Валютный Тогда
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПереводыВПутиВал;
		Иначе
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПереводыВПути;
		КонецЕсли;
		ПриИзмененииСчетаИнкассации();
		
	ИначеЕсли НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам) Тогда

		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
			Организация, Контрагент, СтрокаПлатеж.ДоговорКонтрагента);

		ЭтоАванс = (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика тогда
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ?(ЭтоАванс, Неопределено, СчетаУчета.СчетРасчетов);
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
		Иначе
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ?(ЭтоАванс, Неопределено, СчетаУчета.СчетРасчетовПокупателя);
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьКурсИСуммуВзаиморасчетов()
	
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(мТекущаяВалютаВзаиморасчетов, Дата);

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		// Не изменяем курс взаиморасчетов.
		// Курс взиморасчетов используется для хранения курса приобретения валюты (в валюте документа)
	Иначе
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
			КурсНаДатуПриобретенияРеализацииВалюты = СтрокаПлатеж.КурсВзаиморасчетов;
		КонецЕсли; 
		
	КонецЕсли; 

	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры // РассчитатьКурсИСуммуВзаиморасчетов()

// Процедура управляет доступностью колонок субконто в табличной части инкассации
Процедура УстановитьДоступностьСубконто(ТекДанные)

	Если НЕ ЗначениеЗаполнено(ТекДанные) Тогда
		Возврат;
	КонецЕсли;

	Колонки = ЭлементыФормы.РасшифровкаПлатежаИнкассация.Колонки;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(
		ТекДанные.СчетУчетаРасчетовСКонтрагентом,
		ТекДанные.СубконтоКт1, Колонки.СубконтоКт1,
		ТекДанные.СубконтоКт2, Колонки.СубконтоКт2,
		ТекДанные.СубконтоКт3, Колонки.СубконтоКт3,
		ТекДанные.ПодразделениеКт, Колонки.ПодразделениеКт);
		
КонецПроцедуры // УстановитьДоступностьСубконто()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если Контрагент.Пустая() Тогда
		Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;

	РассчитатьКурсИСуммуВзаиморасчетов();
	
	Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика) Тогда
		СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	КонецЕсли;
	
	СтрокаПлатеж.Сделка = Неопределено;
	
	ОпределитьСчетаУчетаРасчетовСКонтрагентом();
	
КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()

	ВосстанавливатьРеквизиты = (РасшифровкаПлатежа.Количество() = 1);
	СтараяСтатьяДДС = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
	СтараяСтавкаНДС = СтрокаПлатеж.СтавкаНДС;
	СтараяСуммаНДС  = СтрокаПлатеж.СуммаНДС;
	СтарыйДоговор   = СтрокаПлатеж.ДоговорКонтрагента;
	
	РасшифровкаПлатежа.Очистить();

	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.ДоговорКонтрагента = СтарыйДоговор;
	
	СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(СтрокаПлатеж.ДоговорКонтрагента,Контрагент,Организация,СписокВидовДоговора);		

	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
	
	Если ВосстанавливатьРеквизиты Тогда
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтараяСтатьяДДС;
		СтрокаПлатеж.СтавкаНДС = СтараяСтавкаНДС;
		СтрокаПлатеж.СуммаНДС  = СтараяСуммаНДС;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		ЭлементыФормы.РасшифровкаПлатежаИнкассация.ТекущаяСтрока = СтрокаПлатеж;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииКонтрагента

Процедура ПриИзмененииВалютыДокумента()

	Если НЕ ВалютаДокумента=СтараяВалютаДокумента Тогда

		Если ЕстьРасчетыСКонтрагентами И РасшифровкаПлатежа.Количество()>1 Тогда
			//Для пересчета суммы по таблице расшифровок
			ТекущиеПараметрыДокумента = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента,СуммаДокумента",СтараяВалютаДокумента, КурсДокумента, КратностьДокумента,СуммаДокумента);
		КонецЕсли; 
		
		РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(СтараяВалютаДокумента, КурсДокумента, КратностьДокумента, Дата, СуммаДокумента, ВалютаДокумента);
		СуммаДокументаПриИзменении();

		Если ЕстьРасчетыСКонтрагентами И РасшифровкаПлатежа.Количество()>1 Тогда
			Если не СуммаДокумента = ТекущиеПараметрыДокумента.СуммаДокумента Тогда
			 	//Пересчитана сумма документа.
				//Запомним текущую строку платежа
				ТекущиеПараметрыДокумента.Вставить("ТекущаяСтрока", СтрокаПлатеж);
				
				//Необходимо пересчитать суммы в таблице расшифровок.
				Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
					СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
						ТекущиеПараметрыДокумента.ВалютаДокумента, ВалютаДокумента, 
						ТекущиеПараметрыДокумента.КурсДокумента, КурсДокумента,
						ТекущиеПараметрыДокумента.КратностьДокумента,КратностьДокумента);
					ПересчитатьСуммуНДС(СтрокаПлатеж);
					РассчитатьСуммуВзаиморасчетов();
				КонецЦикла; 
				//Вернем строку платежа в позицию до пересчета
				СтрокаПлатеж = ТекущиеПараметрыДокумента.ТекущаяСтрока;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииВалютыДокумента()

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов()

	ПроверкаКурсовВалют(СтрокаПлатеж);
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		
		КурсНаДатуПриобретенияРеализацииВалюты = ?(КурсНаДатуПриобретенияРеализацииВалюты      = 0, КурсДокумента, КурсНаДатуПриобретенияРеализацииВалюты);
		
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
											мТекущаяВалютаВзаиморасчетов,
											СтрокаПлатеж.КурсВзаиморасчетов, 1,
											СтрокаПлатеж.КратностьВзаиморасчетов, 1);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		
		КурсНаДатуПриобретенияРеализацииВалюты = ?(КурсНаДатуПриобретенияРеализацииВалюты      = 0, 1, КурсНаДатуПриобретенияРеализацииВалюты);
		
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
											мТекущаяВалютаВзаиморасчетов,
											КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
											КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
											мТекущаяВалютаВзаиморасчетов,
											КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
											КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли; 

КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()

	Если (ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = Неопределено)
		ИЛИ (ЭлементыФормы.РасшифровкаПлатежаИнкассация.ТекущаяСтрока = Неопределено)
		Тогда
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока           = СтрокаПлатеж;
		ЭлементыФормы.РасшифровкаПлатежаИнкассация.ТекущаяСтрока = СтрокаПлатеж;
	КонецЕсли;

КонецПроцедуры // УстановитьФокус()

// Процедура выполняет действия, необходимые при выборе счета организации
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаОрганизации()

	Если СчетОрганизации.Пустая() Тогда
		Возврат;
	КонецЕсли;

	НоваяВалютаДокумента = СчетОрганизации.ВалютаДенежныхСредств;
	Если СтараяВалютаДокумента = НоваяВалютаДокумента Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(
		ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата, СуммаДокумента, НоваяВалютаДокумента);
	СтараяВалютаДокумента = ВалютаДокумента;
	
	РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		ЭлементыФормы.РасшифровкаПлатежаИнкассация.ТекущаяСтрока = СтрокаПлатеж;
	Иначе
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж;
	КонецЕсли;
	
	СуммаДокументаПриИзменении();

	Если НоваяВалютаДокумента <> СчетКонтрагента.ВалютаДенежныхСредств Тогда
		СчетКонтрагента = "";
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		
		СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(НоваяВалютаДокумента, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов        = СтруктураКурсаВалютаДокумента.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов   = СтруктураКурсаВалютаДокумента.Кратность;
		КурсНаДатуПриобретенияРеализацииВалюты = СтруктураКурсаВалютаДокумента.Курс;
		
	КонецЕсли;
	
	// {ОбособленныеПодразделения
	ПодразделениеОрганизации = СчетОрганизации.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	УстановитьПодразделениеКт();

КонецПроцедуры // ПриИзмененииСчетаОрганизации()

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	// Заполняем значения экспортных переменных модуля объекта
	ЕстьРасчетыСКонтрагентами    = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда		
		ЭлементыФормы.РасшифровкаПлатежаИнкассация.ТекущаяСтрока = РасшифровкаПлатежа[0];		
		СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежаИнкассация.ТекущиеДанные;
	Иначе
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
		СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда

		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, ПараметрОбъектКопирования);
		
		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			
			УстановитьПодразделениеКт();
			
			Если ЭлементыФормы.СчетБанк.СписокВыбора.НайтиПоЗначению(СчетБанк) = Неопределено Тогда
				СчетБанк = ЭлементыФормы.СчетБанк.СписокВыбора[0].Значение;
			КонецЕсли;
			
			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
				ОтражатьРазницуВКурсеВСоставеОперационныхРасходов = Истина;
			КонецЕсли;
			
			Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом) Тогда
					Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
						СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ЭлементыФормы.СчетИнкассация.СписокВыбора[0].Значение;
						ПриИзмененииСчетаИнкассации();
					Иначе
						ОпределитьСчетаУчетаРасчетовСКонтрагентом();
					КонецЕсли; 
				КонецЕсли;
				
				Если ((ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
					ИЛИ (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика))
					И (НЕ ЗначениеЗаполнено(СтрокаПлатеж.СпособПогашенияЗадолженности)) Тогда
					СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполняем значения экспортных переменных модуля объекта
	ЕстьРасчетыПоКредитам        = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	ЕстьРасчетыПоПлатежнымКартам = УправлениеДенежнымиСредствами.ЕстьРасчетыПоПлатежнымКартам(ВидОперации);
	УстановитьКурсДокумента();
	
	// Поддержка механизма автонумерации
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
       
	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели формы
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
		ВидОперации.Метаданные().ЗначенияПеречисления, Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СтараяВалютаДокумента        = ВалютаДокумента;
	
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	//Установка меню Клиент-Банк
	РаботаСДиалогами.УстановкаПодменюКлиентБанк(ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Подменю1.Кнопки.КлиентБанк, ЭтотОбъект);
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Показ расшифровки платежа списком
	СписокПлатежей = (РасшифровкаПлатежа.Количество() > 1);

	УстановитьВидимость();
	
    // Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	// Установим активный реквизит.
	УстановитьАктивныйРеквизит();

	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает активный реквизит.
Процедура УстановитьАктивныйРеквизит()
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,СчетОрганизации,ПодразделениеОрганизации,
		|НомерВходящегоДокумента,ДатаВходящегоДокумента,Контрагент,СуммаДокумента");
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		СтруктураРеквизитов.Вставить("ДоговорКонтрагентаПлатежныеКарты");
		СтруктураРеквизитов.Вставить("СчетУчетаРасчетовСКонтрагентомПлатежныеКарты");                                         
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		СтруктураРеквизитов.Вставить("СчетУчета");
	Иначе
		Если Не СписокПлатежей Тогда
			СтруктураРеквизитов.Вставить("ДоговорКонтрагента");
			СтруктураРеквизитов.Вставить("СпособПогашенияЗадолженности");
			СтруктураРеквизитов.Вставить("СчетУчетаРасчетовСКонтрагентом");
			СтруктураРеквизитов.Вставить("СчетУчетаРасчетовПоАвансам");
			СтруктураРеквизитов.Вставить("СуммаВзаиморасчетов");
		КонецЕсли;
	КонецЕсли;
	Если СписокПлатежей Тогда
		РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.РасшифровкаПлатежа);
	Иначе
		РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов);		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа") = СуммаДокумента Тогда
		
		Предупреждение("Не совпадают сумма документа и ее расшифровка.");
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	Оповестить("ОбновитьФорму", ВладелецФормы, ЭтотОбъект);
	         
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств[Кнопка.Имя];
	
	ЗаполнитьСчетаБанка();

	Если ЭлементыФормы.СчетБанк.СписокВыбора.НайтиПоЗначению(СчетБанк) = Неопределено Тогда
		СчетБанк = ЭлементыФормы.СчетБанк.СписокВыбора[0].Значение;
		ПриИзмененииСчетаБанка();
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		ОтражатьРазницуВКурсеВСоставеОперационныхРасходов = Истина;
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами    = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам        = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	ЕстьРасчетыПоПлатежнымКартам = УправлениеДенежнымиСредствами.ЕстьРасчетыПоПлатежнымКартам(ВидОперации);
	
	РасшифровкаПлатежа.Очистить();
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	
	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
	
	Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика) Тогда
		СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		ЗаполнитьСчетаИнкассации();		
	КонецЕсли;
	
	УстановитьФокус();
	
	ОпределитьСчетаУчетаРасчетовСКонтрагентом();
		
	Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
		И СчетУчетаРасчетовСКонтрагентом.Валютный)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
		И (НЕ СчетУчетаРасчетовСКонтрагентом.Валютный))
		Тогда
		СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьВидимость();

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект, Истина);

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	//Открывает форму движений документа для ручного редактирования
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьКурсДокумента();
	
	ИсходнаяСтрокаПлатеж = СтрокаПлатеж;
	
	Для каждого СтрокаРасшифровка Из РасшифровкаПлатежа Цикл
		
		СтрокаПлатеж=СтрокаРасшифровка;
		РассчитатьКурсИСуммуВзаиморасчетов();
		
	КонецЦикла;
	
	СтрокаПлатеж = ИсходнаяСтрокаПлатеж;
	
	УстановитьВидимость();

КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента()

	СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);

	ОбщегоНазначения.УстановитьЗначение(КурсДокумента,      СтруктураКурсаВалютаДокумента.Курс);
	ОбщегоНазначения.УстановитьЗначение(КратностьДокумента, СтруктураКурсаВалютаДокумента.Кратность);
	
	// Если валюта договора совпадает с валютой документа, то курсы взаиморасчетов перезаполяются курсом ЦБ
	// Для приобретения валюты курс приобретения может отличаться от курса ЦБ, перезаполняем его, только если он был пустой
	Для каждого СтрокаРасшифровкиПлатежа Из РасшифровкаПлатежа Цикл
		
		Если (ВалютаДокумента = СтрокаРасшифровкиПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов
			И НЕ СтрокаРасшифровкиПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) Тогда
			
			ОбщегоНазначения.УстановитьЗначение(СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов,      СтруктураКурсаВалютаДокумента.Курс);
			ОбщегоНазначения.УстановитьЗначение(СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов, СтруктураКурсаВалютаДокумента.Кратность);
			
		ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты) Тогда

			Если СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов = 0 Тогда
				СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов = СтруктураКурсаВалютаДокумента.Курс;
			КонецЕсли;
			Если СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов = 0 Тогда
				СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов = СтруктураКурсаВалютаДокумента.Кратность;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Обработчик события "ПриИзменении" реквизита "Организация"
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетОрганизации, Организация, мВалютаРегламентированногоУчета, НЕ СчетБанк.Валютный) Тогда
		ПриИзмененииСчетаОрганизации();
	КонецЕсли;
	
	КонтрагентПриИзменении(Элемент);

	// {ОбособленныеПодразделения
	ОсновноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
	Если ОсновноеПодразделение.Владелец = Организация Тогда
		ПодразделениеОрганизации = ОсновноеПодразделение;
	Иначе
		ПодразделениеОрганизации = Неопределено;
	КонецЕсли;
	// }ОбособленныеПодразделения
	УстановитьПодразделениеКт();

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // ОрганизацияПриИзменении()


// Обработчик события "ПриИзменении" реквизита "СчетОрганизации"
//
Процедура СчетОрганизацииПриИзменении(Элемент)

	ПриИзмененииСчетаОрганизации();
	
	УстановитьВидимость();

КонецПроцедуры // СчетОрганизацииПриИзменении()

// Обработчик события "ПриИзменении" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();
	
	УстановитьВидимость();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
		УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Обработчик события "НачалоВыбора" реквизита "СчетОрганизации"
//
Процедура СчетОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияБанковскогоСчета(
		Организация, Элемент, СтандартнаяОбработка, мВалютаРегламентированногоУчета, НЕ СчетБанк.Валютный);
		
КонецПроцедуры // СчетОрганизацииНачалоВыбора()

// Обработчик события "НачалоВыбора" реквизита "СчетКонтрагента"
//
Процедура СчетКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(СчетОрганизации) Тогда
		ВалютаОтбора      = СчетОрганизации.ВалютаДенежныхСредств;
		ВидСравненияРавно = Истина;
	Иначе
		ВалютаОтбора      = мВалютаРегламентированногоУчета;
		ВидСравненияРавно = НЕ СчетБанк.Валютный;
	КонецЕсли;
		
	РаботаСДиалогами.НачалоВыбораЗначенияБанковскогоСчета(
		Контрагент, Элемент, СтандартнаяОбработка, ВалютаОтбора, ВидСравненияРавно);
		
КонецПроцедуры // СчетКонтрагентаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		ВалютаВзаиморасчетов = ВалютаДокумента;
	Иначе
		ВалютаВзаиморасчетов = Неопределено;
	КонецЕсли;
	РаботаСДиалогами.НачалоВыбораКурсаВзаиморасчетов(СтрокаПлатеж, Дата, СтандартнаяОбработка, ВалютаВзаиморасчетов);
		
	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

Процедура СуммаВзаиморасчетовПриИзменении(Элемент)

	ПроверкаКурсовВалют(СтрокаПлатеж);

	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;

КонецПроцедуры

Процедура СуммаВзаиморасчетов1ПриИзменении(Элемент)
	ПроверкаКурсовВалют(СтрокаПлатеж);

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		
		Если (СтрокаПлатеж.СуммаПлатежа<> 0) И (КратностьДокумента <> 0) Тогда
			СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов
							/ СтрокаПлатеж.СуммаПлатежа / КратностьДокумента; 
		КонецЕсли;					
	иначе
		Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
			СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
								/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
		КонецЕсли;					
	КонецЕсли;

КонецПроцедуры

Процедура КурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры

Процедура ОбновлениеОтображения()

	// Надпись НадписьСуммаВзаиморасчетов
	Если не СтрокаПлатеж = Неопределено Тогда
		ВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
		Иначе
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
		КонецЕсли;
    КонецЕсли;
	ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "+
									Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента);

КонецПроцедуры

Процедура СчетУчетаПриИзменении(Элемент)
	Перем ПодразделениеПоУмолчанию;

	УстановитьВидимостьСубконто();

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		СубконтоКт1, ЭлементыФормы.СубконтоКт1,
		СубконтоКт2, ЭлементыФормы.СубконтоКт2,
		СубконтоКт3, ЭлементыФормы.СубконтоКт3,
		ПодразделениеКт, ЭлементыФормы.ПодразделениеКтПрочие);
			
	// {ОбособленныеПодразделения
	ПодразделениеПоУмолчанию = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	РаботаСДиалогами.УстановитьПодразделениеПоСчету(
		ПодразделениеКт, СчетУчетаРасчетовСКонтрагентом, Организация, ПодразделениеПоУмолчанию);
	
КонецПроцедуры // СчетУчетаПриИзменении()

Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" полей ввода "СубконтоКт1", "СубконтоКт2", "СубконтоКт3"
//
Процедура СубконтоКт1НачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = Новый Структура();
	Для н=1 По 3 Цикл
		Если ТипЗнч(ЭтотОбъект["СубконтоКт"+н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЭтотОбъект["СубконтоКт"+н]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("ЭтоНовыйДокумент", ЭтоНовый());
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);
	
КонецПроцедуры

Процедура СубконтоКтИнкНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.РасшифровкаПлатежаИнкассация.ТекущиеДанные;
	
	СписокПараметров = Новый Структура();
	Для н=1 По 3 Цикл
		Если ТипЗнч(ТекДанные["СубконтоКт"+н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ТекДанные["СубконтоКт"+н]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("ЭтоНовыйДокумент", ЭтоНовый());
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();
	ПриИзмененииДоговора();

	УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетКонтрагента, Контрагент, СчетОрганизации.ВалютаДенежныхСредств);

	УстановитьФокус();

КонецПроцедуры

Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка  = Ложь;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика Тогда
		СчетДляОпределенияОстатков = РасшифровкаПлатежа[0].СчетУчетаРасчетовПоАвансам;
	Иначе
		СчетДляОпределенияОстатков = РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;

	СтруктураПараметров   = Новый Структура;
	СтруктураПараметров.Вставить("Организация",                Организация);
	СтруктураПараметров.Вставить("Контрагент",                 Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",         РасшифровкаПлатежа[0].ДоговорКонтрагента);
	СтруктураПараметров.Вставить("КонецПериода",               Дата-1);
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("СторонаСчета",               "Дт");
	СтруктураПараметров.Вставить("ЭтоНовыйДокумент",           ЭтоНовый());
	СтруктураПараметров.Вставить("РежимОтбораДокументов",      Перечисления.РежимОтбораДокументов.ПоОстаткам);
	
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(
		СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип);

КонецПроцедуры

Процедура СчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СчетНаОплатуНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	СтруктураПараметров = Новый Структура(
		"Организация, Контрагент, ДоговорКонтрагента", 
		Организация, Контрагент, РасшифровкаПлатежа[0].ДоговорКонтрагента);
	
	УправлениеВзаиморасчетами.ВыборСчетаНаОплату(СтруктураПараметров, Элемент);

КонецПроцедуры

Процедура РасшифровкаПлатежаСчетНаОплатуНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента", 
		Организация, Контрагент, ТекущиеДанные.ДоговорКонтрагента);
	
	УправлениеВзаиморасчетами.ВыборСчетаНаОплату(СтруктураПараметров, Элемент);
	
КонецПроцедуры

Процедура СписокПлатежейПриИзменении(Элемент)

	Если НЕ СписокПлатежей И РасшифровкаПлатежа.Количество() > 1 Тогда

		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Имя);

		Если Ответ <> КодВозвратаДиалога.Да Тогда
			СписокПлатежей = Истина;
			Возврат;
		КонецЕсли;

		Пока РасшифровкаПлатежа.Количество() > 1 Цикл

			СтрокаУдаления = РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);

		КонецЦикла;

		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока           = РасшифровкаПлатежа[0];
		ЭлементыФормы.РасшифровкаПлатежаИнкассация.ТекущаяСтрока = РасшифровкаПлатежа[0];

		СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;

		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов();
        
	Иначе

		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока           = РасшифровкаПлатежа[0];
		ЭлементыФормы.РасшифровкаПлатежаИнкассация.ТекущаяСтрока = РасшифровкаПлатежа[0];
		СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	КонецЕсли;
	
	Если СписокПлатежей И (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация) Тогда
		УстановитьДоступностьСубконто(СтрокаПлатеж);
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

// Процедура для открытия формы изменения документа-основания
//
Процедура ДействияФормыИзменитьДокументОснование(Кнопка)
	
	ФормаВыбора = ПолучитьОбщуюФорму("ФормаВыбораДокументаОснования");
	ФормаВыбора.ДокументОбъект = ЭтотОбъект;
	ФормаВыбора.ОткрытьМодально();
	
КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Элемент)

	ПересчитатьСуммуНДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СуммаДокументаПриИзменении()

	Если РасшифровкаПлатежа.Количество() = 1 Тогда
		
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыПоПлатежнымКартам Тогда

			ПересчитатьСуммуНДС(СтрокаПлатеж);
			РассчитатьСуммуВзаиморасчетов();
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты тогда
			РассчитатьСуммуВзаиморасчетов();

		КонецЕсли;

	КонецЕсли;

	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект, Истина);

КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)

	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
	// Распределение оплаты
	
	КолонкиРасшифровкиПлатежа  = ЭлементыФормы.РасшифровкаПлатежа.Колонки;
	
	ЭтоОплатаПоДокументу = (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	ЭлементыФормы.Сделка.Видимость                  = ЭтоОплатаПоДокументу;
	ЭлементыФормы.НадписьСделка.Видимость           = ЭтоОплатаПоДокументу;
	КолонкиРасшифровкиПлатежа.Сделка.ТолькоПросмотр = НЕ ЭтоОплатаПоДокументу;
	
	ПогашатьЗадолженность = (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически)
		ИЛИ (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Доступность                = ПогашатьЗадолженность;
	ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентом.Доступность         = ПогашатьЗадолженность;
	КолонкиРасшифровкиПлатежа.СчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр = НЕ ПогашатьЗадолженность;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ТекДанные = ОформлениеСтроки.ДанныеСтроки;
		Если ОформлениеСтроки.Ячейки.Сделка.Видимость Тогда
			ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного = 
				(ТекДанные.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу)
				И (НЕ ЗначениеЗаполнено(ТекДанные.Сделка));
		КонецЕсли;
		Если ОформлениеСтроки.Ячейки.СчетУчетаРасчетовСКонтрагентом.Видимость Тогда
			ОформлениеСтроки.Ячейки.СчетУчетаРасчетовСКонтрагентом.ОтметкаНезаполненного = 
				(ТекДанные.СпособПогашенияЗадолженности <> Перечисления.СпособыПогашенияЗадолженности.НеПогашать)
				И (НЕ ЗначениеЗаполнено(ТекДанные.СчетУчетаРасчетовСКонтрагентом));
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Отказ = (РасшифровкаПлатежа.Количество() = 1);

КонецПроцедуры

Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
		УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)

	РассчитатьСуммуВзаиморасчетов();
	ПересчитатьСуммуНДС(СтрокаПлатеж);

КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораКурсаВзаиморасчетов(СтрокаПлатеж, Дата, СтандартнаяОбработка);
	
	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)

	ПересчитатьСуммуНДС(СтрокаПлатеж);

КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка  = Ложь;
	
	СтрокаДанных = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика Тогда
		СчетДляОпределенияОстатков = СтрокаДанных.СчетУчетаРасчетовПоАвансам;
	Иначе
		СчетДляОпределенияОстатков = СтрокаДанных.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;

	СтруктураПараметров   = Новый Структура;
	СтруктураПараметров.Вставить("Организация",                Организация);
	СтруктураПараметров.Вставить("Контрагент",                 Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",         СтрокаДанных.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("КонецПериода",               Дата-1);
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("СторонаСчета",               "Дт");
	СтруктураПараметров.Вставить("ЭтоНовыйДокумент",           ЭтоНовый());
	СтруктураПараметров.Вставить("РежимОтбораДокументов",      Перечисления.РежимОтбораДокументов.ПоОстаткам);
	
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(
		СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип);

КонецПроцедуры

Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)

	ПроверкаКурсовВалют(СтрокаПлатеж);

	Если НЕ СтрокаПлатеж.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		
		СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов;
		
	ИначеЕсли (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	УправлениеВзаиморасчетами.ОбработкаПодбораЗадолженностей(
		СтрокаПлатеж,РасшифровкаПлатежа,ЗначениеВыбора, СписокПлатежей, КурсДокумента,КратностьДокумента);

	Если СтрокаПлатеж.СтавкаНДС.Пустая() Тогда
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
			глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
	КонецЕсли;

	ПересчитатьСуммуНДС(СтрокаПлатеж);

	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
		Организация, Контрагент, СтрокаПлатеж.ДоговорКонтрагента);

	СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ?(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом.Пустая(),СчетаУчета.СчетРасчетов,СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом);
	СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = ?(СтрокаПлатеж.СчетУчетаРасчетовПоАвансам.Пустая(),СчетаУчета.СчетАвансов,СтрокаПлатеж.СчетУчетаРасчетовПоАвансам);

	УстановитьФокус();

КонецПроцедуры

Процедура ДействияФормыНастройкаУСН(Кнопка)

	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	
	ФормаНастройки = ПолучитьОбщуюФорму("ФормаНастройкиПлатежаУСН");

	ФормаНастройки.Графа4       = Графа4_УСН;
	ФормаНастройки.Графа5       = Графа5_УСН;
	ФормаНастройки.Графа6       = Графа6_УСН;
	ФормаНастройки.Графа7       = Графа7_УСН;
	ФормаНастройки.НДС          = НДС_УСН;
	ФормаНастройки.ДоходЕНВД    = ДоходыЕНВД_УСН;
	ФормаНастройки.РасходЕНВД   = РасходыЕНВД_УСН;
	ФормаНастройки.Содержание   = Содержание_УСН;
	ФормаНастройки.ТолькоДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	ФормаНастройки.АвтоРежим 	= НЕ РучнаяНастройка_УСН;

	СтруктураПараметров = ФормаНастройки.ОткрытьМодально();

	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Графа4_УСН       	= СтруктураПараметров.Графа4;
	Графа5_УСН       	= СтруктураПараметров.Графа5;
	Графа6_УСН       	= СтруктураПараметров.Графа6;
	Графа7_УСН       	= СтруктураПараметров.Графа7;
	НДС_УСН          	= СтруктураПараметров.НДС;
	ДоходыЕНВД_УСН   	= СтруктураПараметров.ДоходыЕНВД;
	РасходыЕНВД_УСН  	= СтруктураПараметров.РасходыЕНВД;
	Содержание_УСН   	= СтруктураПараметров.Содержание;
	РучнаяНастройка_УСН = НЕ СтруктураПараметров.АвтоРежим;

КонецПроцедуры

// Процедура заполняет реквизиты документа по созданному в режиме обработки "Клиент банк" контрагенту
//
Процедура ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент)
	
	Если Контрагент.Пустая() Тогда
		
		Контрагент            			= НовыйКонтрагент;
		СчетКонтрагента					= НовыйКонтрагент.ОсновнойБанковскийСчет;
		СтрокаПлатеж.ДоговорКонтрагента = НовыйКонтрагент.ОсновнойДоговорКонтрагента;
		
		СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		
		ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, КонецДня(Дата));
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаПлатежа,
			ВалютаДокумента, ВалютаВзаиморасчетов,
			КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
			КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
		ОпределитьСчетаУчетаРасчетовСКонтрагентом();
		
		РеквизитыКонтрагента.Очистить();
		
		//Установка меню Клиент-Банк
		РаботаСДиалогами.УстановкаПодменюКлиентБанк(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1.Кнопки.КлиентБанк, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыПоКонтрагенту()

//Процедура вызывается при выборе пункта подменю "Клиент-Банк" командной панели
Процедура ОсновныеДействияФормыКнопкиКонтрагента(Кнопка)

	Если РеквизитыКонтрагента.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Обработка =Обработки.КлиентБанк.Создать();
	Обработка.Организация =Организация;
	ТипКонтрагента=Лев(РеквизитыКонтрагента[0].Реквизит,10);
	
	СтрокаИНН=РеквизитыКонтрагента.Найти(ТипКонтрагента+"ИНН","Реквизит");
	
	Если НЕ СтрокаИНН=Неопределено Тогда
		
		ИННКраткий=СтрокаИНН.Значение;
		НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
		
		Если НЕ НовыйКонтрагент.Пустая() Тогда
			
			ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент);
			ОткрытьЗначение(НовыйКонтрагент);
			
		Иначе                         
			
			Если РеквизитыКонтрагента.Количество()>0 Тогда
				                            
				ФормаКонтрагентов =Обработка.ПолучитьФорму("ФормаКонтрагентов",ЭтаФорма);
				ФормаКонтрагентов.СформироватьИЗагрузитьДеревоПоТаблицеЗначений(РеквизитыКонтрагента);
				ФормаКонтрагентов.ОткрытьМодально();
				
				//Проверяем, не был ли создан контрагент в сеансе работы с обработкой
				НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
				
				Если НЕ НовыйКонтрагент.Пустая() Тогда
					
					ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;		
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ЗаполнитьСчетаБанка()

	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	МассивОтбора.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	МассивОтбора.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		ТекСчет = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
		ОтбиратьПоВалюте = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		ТекСчет = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		ОтбиратьПоВалюте = Истина;
	Иначе
		ТекСчет = Неопределено;
		ОтбиратьПоВалюте = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.СчетБанк.СписокВыбора = РаботаСДиалогами.ЗаполнитьСписокВыбораСчетовДенежныхСредств(
		МассивОтбора, ОтбиратьПоВалюте, ТекСчет);
	
КонецПроцедуры

Процедура ПриИзмененииСчетаБанка()

	РублевыйСчет = НЕ СчетБанк.Валютный;
	ИзмениласьВалюта = ((СчетОрганизации.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета) <> РублевыйСчет);
	
	Если ИзмениласьВалюта Тогда 
		
		СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
		
		УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетОрганизации, Организация, мВалютаРегламентированногоУчета, РублевыйСчет);
		ПриИзмененииСчетаОрганизации();
		
		УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетКонтрагента, Контрагент, СчетОрганизации.ВалютаДенежныхСредств);
		
		Если РублевыйСчет Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		ИначеЕсли ЗначениеЗаполнено(СчетОрганизации) Тогда
			ВалютаДокумента = СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента = Неопределено;
		КонецЕсли;
		ПриИзмененииВалютыДокумента();
		
		ЗаполнитьСчетаИнкассации();		
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация 
		И ((СчетБанк.Валютный <> СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом.Валютный)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом)) 
		Тогда
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ЭлементыФормы.СчетИнкассация.СписокВыбора[0].Значение;
		ПриИзмененииСчетаИнкассации();
	КонецЕсли;

КонецПроцедуры

Процедура СчетБанкПриИзменении(Элемент)

	Если ЭлементыФормы.СчетБанк.СписокВыбора.НайтиПоЗначению(СчетБанк) = Неопределено Тогда
		Сообщить("Счет "+СчетБанк+" не используется для учета безналичных денежных средств при данной операции.");
		СчетБанк = "";
		Возврат;
	КонецЕсли;
	
	ПриИзмененииСчетаБанка();

	УстановитьВидимость();

КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		РаботаСДиалогами.ВыбратьВидОперации(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	ЗаполнитьСчетаБанка();
	
	ЗаполнитьСчетаИнкассации();
          
КонецПроцедуры

Процедура СчетИнкассацияПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.РасшифровкаПлатежаИнкассация.ТекущиеДанные;
	
	Если ЭлементыФормы.СчетИнкассация.СписокВыбора.НайтиПоЗначению(ТекДанные.СчетУчетаРасчетовСКонтрагентом) = Неопределено Тогда
		Сообщить("Счет " + ТекДанные.СчетУчетаРасчетовСКонтрагентом + " не используется для этой операции.");
		ТекДанные.СчетУчетаРасчетовСКонтрагентом = ЭлементыФормы.СчетИнкассация.СписокВыбора[0].Значение;
	КонецЕсли;
	
	ПриИзмененииСчетаИнкассации();
		
	УстановитьВидимостьСубконто("Инк");
		
КонецПроцедуры

Процедура ПриИзмененииСчетаИнкассации()
	Перем ПодразделениеПоУмолчанию;
	
	ТекДанные = ЭлементыФормы.РасшифровкаПлатежаИнкассация.ТекущиеДанные;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекДанные.СчетУчетаРасчетовСКонтрагентом,
		ТекДанные.СубконтоКт1, ЭлементыФормы.СубконтоКт1Инк,
		ТекДанные.СубконтоКт2, ЭлементыФормы.СубконтоКт2Инк,
		ТекДанные.СубконтоКт3, ЭлементыФормы.СубконтоКт3Инк,
		ТекДанные.ПодразделениеКт, ЭлементыФормы.ПодразделениеКтИнкассация);
		
	// {ОбособленныеПодразделения
	ПодразделениеПоУмолчанию = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	РаботаСДиалогами.УстановитьПодразделениеПоСчету(
		ТекДанные.ПодразделениеКт, ТекДанные.СчетУчетаРасчетовСКонтрагентом, Организация, ПодразделениеПоУмолчанию);
	
КонецПроцедуры

Процедура ОтражатьРазницуВКурсеВСоставеОперационныхРасходовПриИзменении(Элемент)
	
	ОпределитьСчетаУчетаРасчетовСКонтрагентом();
	 
КонецПроцедуры

Процедура ДоговорКонтрагента1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураДопПараметров = Новый Структура();
	
	СтруктураОтбора = Новый Структура();
	
	СтруктураОтбора.Вставить("ЗначениеОтбора",     мВалютаРегламентированногоУчета);
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.Равно);
	Иначе
		СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.НеРавно);
	КонецЕсли; 
	СтруктураДопПараметров.Вставить("ВалютаВзаиморасчетов", СтруктураОтбора);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
		УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка, СтруктураДопПараметров);

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура КурсНаДатуПриобретенияРеализацииВалютыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		ФормаВводаКурсаИКратности.Валюта          = ВалютаДокумента;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ОбщегоНазначения.ПредупреждениеОбОшибке("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	Иначе
		ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Конецесли;
	
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = КурсНаДатуПриобретенияРеализацииВалюты;
	
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> Неопределено Тогда
		КурсНаДатуПриобретенияРеализацииВалюты = СтруктураКурсаИКратности.КурсВалюты;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока и Не Копирование Тогда
		СписокВидовДоговоров = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации); 
		УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(
			Элемент.ТекущиеДанные.ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговоров);
	КонецЕсли;
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура РасшифровкаПлатежаИнкассацияСчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)
	Перем ПодразделениеПоУмолчанию;
	
	ТекДанные = ЭлементыФормы.РасшифровкаПлатежаИнкассация.ТекущиеДанные;
	Колонки   = ЭлементыФормы.РасшифровкаПлатежаИнкассация.Колонки;
	
	Если ЭлементыФормы.СчетИнкассация.СписокВыбора.НайтиПоЗначению(ТекДанные.СчетУчетаРасчетовСКонтрагентом) = Неопределено Тогда
		Сообщить("Счет " + ТекДанные.СчетУчетаРасчетовСКонтрагентом + " не используется для этой операции.");
		ТекДанные.СчетУчетаРасчетовСКонтрагентом = ЭлементыФормы.СчетИнкассация.СписокВыбора[0].Значение;
	КонецЕсли;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекДанные.СчетУчетаРасчетовСКонтрагентом,
		ТекДанные.СубконтоКт1, Колонки.СубконтоКт1,
		ТекДанные.СубконтоКт2, Колонки.СубконтоКт2,
		ТекДанные.СубконтоКт3, Колонки.СубконтоКт3,
		ТекДанные.ПодразделениеКт, Колонки.ПодразделениеКт);

	// {ОбособленныеПодразделения
	ПодразделениеПоУмолчанию = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	РаботаСДиалогами.УстановитьПодразделениеПоСчету(
		ТекДанные.ПодразделениеКт, ТекДанные.СчетУчетаРасчетовСКонтрагентом, Организация, ПодразделениеПоУмолчанию);
		
КонецПроцедуры

Процедура РасшифровкаПлатежаИнкассацияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Элемент.Колонки.СчетУчетаРасчетовСКонтрагентом.ЭлементУправления.СписокВыбора = ЭлементыФормы.СчетИнкассация.СписокВыбора;
	
	Если НоваяСтрока Тогда
		
		ТекДанные = ЭлементыФормы.РасшифровкаПлатежаИнкассация.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(ТекДанные.СчетУчетаРасчетовСКонтрагентом) Тогда
			ТекДанные.СчетУчетаРасчетовСКонтрагентом = ЭлементыФормы.СчетИнкассация.СписокВыбора[0].Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаИнкассацияПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьСубконто(Элемент.ТекущиеДанные);
	
КонецПроцедуры

// {ОбособленныеПодразделения

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	УстановитьПодразделениеКт();
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()

// }ОбособленныеПодразделения

Процедура СпособПогашенияЗадолженностиПриИзменении(Элемент)
	
	Если СтрокаПлатеж.СпособПогашенияЗадолженности <> Перечисления.СпособыПогашенияЗадолженности.ПоДокументу Тогда
		СтрокаПлатеж.Сделка = Неопределено;
	КонецЕсли;
	
	ОпределитьСчетаУчетаРасчетовСКонтрагентом();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СуммаУслугПриИзменении(Элемент)
	
	ЭлементыФормы.СчетУчетаПлатежныеКартыУслуги.АвтоОтметкаНезаполненного = (СуммаУслуг > 0);
	ЭлементыФормы.СчетУчетаПлатежныеКартыУслуги.АвтоВыборНезаполненного   = (СуммаУслуг > 0);
	Если СуммаУслуг = 0 Тогда
		ЭлементыФормы.СчетУчетаПлатежныеКартыУслуги.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
		
КонецПроцедуры


