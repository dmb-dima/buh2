
Перем мЗаконодательство2006 Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ АВТОЗАПОЛНЕНИЯ ТАБЛИЧНОЙ ЧАСТИ ДОКУМЕНТА
//Процедура заполнения табличной части по данным подсистемы НДС
Процедура ЗаполнитьДокумент(ОшибкаЗаполнения = Ложь, Сообщать = Истина, СтрокаСообщения = "", ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ОшибкаЗаполнения = Истина;
			СтрокаСообщения = " перед заполнением требуется отменить проведение документа";
			Если Сообщать Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:" + СтрокаСообщения, , Строка(Ссылка));
			КонецЕсли; 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСтрокиДокумента();

	Если Не (Состав.Количество() > 0 
        ) Тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = СтрокаСообщения+Символы.ПС+" - не обнаружена неподтвержденная реализация по ставке 0"
	КонецЕсли;	

   Если ОшибкаЗаполнения Тогда
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:"+СтрокаСообщения,,Строка(Ссылка));
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиДокумента() Экспорт

	ТаблицаРезультата = Состав.ВыгрузитьКолонки();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("СостояниеПредположения0", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСРеализация0Остатки.СчетФактура,
	|	НДСРеализация0Остатки.ВидЦенности,
	|	НДСРеализация0Остатки.СтавкаНДС,
	|	НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток КАК ПродажиСНДС0,
	|	НДСРеализация0Остатки.КурсоваяРазницаОстаток КАК КурсоваяРазница,
	|	НДСРеализация0Остатки.Покупатель
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Остатки(
	|		&КонецПериода,
	|		Организация = &Организация
	|		    И Состояние = &СостояниеПредположения0) КАК НДСРеализация0Остатки";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатЗапроса,ТаблицаРезультата);
	ТаблицаРезультата.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0,"Событие");

	Состав.Загрузить(ТаблицаРезультата);
	
	Состав.Сортировать("СчетФактура, Покупатель, ВидЦенности, Событие");
	
КонецПроцедуры // ЗаполнитьСтрокиДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ТребуетсяСтатьяПрочихРасходов = Ложь;
	
	Для Каждого СтрокаТаблицы Из Состав Цикл
		Если СтрокаТаблицы.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0 Тогда
			ТребуетсяСтатьяПрочихРасходов = Истина;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Если ТребуетсяСтатьяПрочихРасходов Тогда
		СтруктураОбязательныхПолей.Очистить();
		СтруктураОбязательныхПолей.Вставить("СтатьяПрочихРасходов");
		// Теперь вызовем общую процедуру проверки.
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Неопределено, Заголовок);
	КонецЕсли;
	
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоДокументам(РезультатЗапроса, СтруктураШапкиДокумента)
	
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	
	//Принудительная установка ставки НДС 0% по события "Подтверждена ставка 0%".
	СобытиеПодтвержденаСтавка0 = Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0;
	Ставка0 = Перечисления.СтавкиНДС.НДС0;
	Для каждого СтрокаРезультата Из ТаблицаРезультата Цикл
		Если СтрокаРезультата.Событие = СобытиеПодтвержденаСтавка0 Тогда
			СтрокаРезультата.СтавкаНДС 	= Ставка0;
			СтрокаРезультата.НДС		= 0;
		КонецЕсли;
	КонецЦикла;
	
	//Заполнение организации для записи в регистры
	ТаблицаРезультата.Колонки.Добавить("Организация");
	ТаблицаРезультата.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	
	Возврат ТаблицаРезультата;
	
КонецФункции // ПодготовитьТаблицуПоДокументам()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоДокументам(ТаблицаПоДокументам, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, Покупатель, СчетФактура, Событие"); 
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Для Каждого СтрокаТЧ из Состав Цикл
		Если СтрокаТЧ.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0 Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении("В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
			                         """ табличной части: " + "Не заполнен реквизит ""НДС""!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДокументам, Отказ, Заголовок);
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////
	//Движения по регистру НДСРеализация0
	
	// Подготовка таблицы движений по регистру НДСРеализация0
	ТаблицаДвижений_НДСРеализация0 = Движения.НДСРеализация0.ВыгрузитьКолонки();
	
	// Списываем остатки по предположению
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументам,ТаблицаДвижений_НДСРеализация0);
	ТаблицаДвижений_НДСРеализация0.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НДС0, "СтавкаНДС");
	ТаблицаДвижений_НДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение,"Состояние");
	ТаблицаДвижений_НДСРеализация0.ЗаполнитьЗначения(0, "НДС");
	ТаблицаДвижений_НДСРеализация0.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	
	ТаблицаПоДокументам.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
	ТаблицаПоДокументам.Колонки.Добавить("ВидДвижения");
	ТаблицаПоДокументам.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	
	// Отражаем подтверждение/неподтверждение 
	Для каждого ТекСтрокаСостав Из ТаблицаПоДокументам Цикл
		Если ТекСтрокаСостав.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0 Тогда
			ТекСтрокаСостав.СуммаБезНДС = ?(СтруктураШапкиДокумента.НДСПриНеподтвержденииСверху, 
											ТекСтрокаСостав.СуммаБезНДС,
											ТекСтрокаСостав.СуммаБезНДС - ТекСтрокаСостав.НДС);
			ТекСтрокаСостав.Состояние 	= Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0;
		Иначе
			ТекСтрокаСостав.СтавкаНДС 	= Перечисления.СтавкиНДС.НДС0;
			ТекСтрокаСостав.Состояние 	= Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;
		КонецЕсли; 
		НовоеДвижение = ТаблицаДвижений_НДСРеализация0.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеДвижение, ТекСтрокаСостав, , "КурсоваяРазница");
		Если ТекСтрокаСостав.Событие = Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0
			И СтруктураШапкиДокумента.Дата < '20111001' Тогда
			// Начиная с 01.10.2011 налоговая база по НДС при подтверждении реализации со ставкой 0% 
			// должна определяться по курсу на дату реализации
			НовоеДвижение.СуммаБезНДС = НовоеДвижение.СуммаБезНДС + ТекСтрокаСостав.КурсоваяРазница;
		КонецЕсли;
	КонецЦикла; 
	
	//Запись движений
	Движения.НДСРеализация0.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСРеализация0;
	Движения.НДСРеализация0.ДобавитьДвижение();
	
	//Движения по регистру НДСРеализация0
	////////////////////////////////////////////////////////
	
	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаДвижений_НДСРеализация0.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	ДанныеПоРеализации0 = ПолучитьДанныеПоРеализации0(СтруктураШапкиДокумента,СписокСчетовФактур,Отказ);
	ДанныеПоРеализации0.Индексы.Добавить("СчетФактура");
	
	СформироватьДвиженияПоНеподтверждениюСтавки0_Реализация(СтруктураШапкиДокумента, ТаблицаПоДокументам,ДанныеПоРеализации0, Отказ, Заголовок);
	
	////////////////////////////////////////////////////////
	// Движения по регистрам приобретения, отражающие подтверждение или неподтверждение ставки 0
	// для всех поступлений МПЗ, связанных с данной реализацией
	СформироватьДвижениеНДСПредъявленныйРеализация0_ОтражениеПодтверждения0(СтруктураШапкиДокумента, ТаблицаПоДокументам, ДанныеПоРеализации0, Отказ, Заголовок);
	//Движения по регистру НДС покупки (и проводки)
	////////////////////////////////////////////////////////

	СформироватьКорректирующиеДвиженияРеализация0_Подтверждение0(СтруктураШапкиДокумента, ТаблицаПоДокументам);
	
КонецПроцедуры // ДвиженияПоРегистрам()

Функция ПолучитьДанныеПоРеализации0(СтруктураШапкиДокумента,СписокСчетовФактур,Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСРеализация0Обороты.СчетФактура,
		|	ЕСТЬNULL(НДСРеализация0Обороты.СуммаБезНДСПриход, 0) + ЕСТЬNULL(НДСРеализация0Обороты.НДСПриход, 0) КАК СуммаРеализации,
		|	ЗНАЧЕНИЕ(Перечисление.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке) КАК МоментОпределенияНалоговойБазыНДС
		|ИЗ
		|	РегистрНакопления.НДСРеализация0.Обороты(
		|			,
		|			&КонецПериода,
		|			Период,
		|			Организация = &Организация
		|				И СчетФактура В (&СписокСчетовФактур)
		|				И Состояние = &СостояниеОжидания) КАК НДСРеализация0Обороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитика
		|		ПО НДСРеализация0Обороты.Организация = УчетнаяПолитика.Организация
		|			И (УчетнаяПолитика.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитика.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитика
		|				ГДЕ
		|					НДСРеализация0Обороты.СчетФактура.Дата >= УчетнаяПолитика.Период
		|					И НДСРеализация0Обороты.Организация = УчетнаяПолитика.Организация))";
	
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтруктураШапкиДокумента.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("СостояниеОжидания", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура СформироватьКорректирующиеДвиженияРеализация0_Подтверждение0(СтруктураШапкиДокумента, ТаблицаПоДокументам);
	
	Если СтруктураШапкиДокумента.Дата >= '20111001' Тогда
		// Начиная с 01.10.2011 налоговая база по НДС при подтверждении реализации со ставкой 0% 
		// должна определяться по курсу на дату реализации
		Возврат;
	КонецЕсли;
    	
	ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоДокументам Цикл
		
		Если Не СтрокаТаблицы.КурсоваяРазница = 0 Тогда
			Если СтрокаТаблицы.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
				ДвижениеНДСНачисленный = ТаблицаДвижений_НДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(ДвижениеНДСНачисленный, СтрокаТаблицы);
				
				ДвижениеНДСНачисленный.СуммаБезНДС = СтрокаТаблицы.КурсоваяРазница;
				ДвижениеНДСНачисленный.НДС = 0;
				ДвижениеНДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСНачисленный.Количество() > 0  Тогда
		Движения.НДСНачисленный.мПериод	= СтруктураШапкиДокумента.Дата;
		Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ВыполнитьПриход(Ложь);
	КонецЕсли;
			
КонецПроцедуры

// Процедура вызывается из процедуры ДвиженияПоРегистрам
// Основная задача - на основании данных документа сформировать движения по не подтверждению ставки 0% 
// в регистре "НДС начисленный"
// в бухгалтерском учете (проводки)
Процедура СформироватьДвиженияПоНеподтверждениюСтавки0_Реализация(СтруктураШапкиДокумента, ТаблицаПоДокументам,ДанныеПоРеализации0, Отказ, Заголовок)

	// Подготовка таблицы движений по регистру НДСРеализация0
	ТаблицаДвижений_НДСНачисленный = Неопределено;
	СостояниеНеПодтвержденаСтавка0 = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0;
	Ставка0 = Перечисления.СтавкиНДС.НДС0;
	
	Для каждого СтрокаТаблицы Из ТаблицаПоДокументам Цикл
		Если СтрокаТаблицы.Состояние = СостояниеНеПодтвержденаСтавка0 Тогда
			Если ТаблицаДвижений_НДСНачисленный = Неопределено тогда
				ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
			КонецЕсли;
			СтрокаДвиженияСторно0 = ТаблицаДвижений_НДСНачисленный.Добавить();
			СтрокаДвиженияСторно0.Организация = СтруктураШапкиДокумента.Организация;
			СтрокаДвиженияСторно0.СчетФактура = СтрокаТаблицы.СчетФактура;
			СтрокаДвиженияСторно0.ВидЦенности = СтрокаТаблицы.ВидЦенности;
			СтрокаДвиженияСторно0.СтавкаНДС   = Ставка0;
			СтрокаДвиженияСторно0.Покупатель  = СтрокаТаблицы.Покупатель;
			СтрокаДвиженияСторно0.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
			
			СтрокаДвиженияСторно0.СуммаБезНДС = (-1)*(СтрокаТаблицы.СуммаБезНДС + ?(СтруктураШапкиДокумента.НДСПриНеподтвержденииСверху, 0, СтрокаТаблицы.НДС));
			СтрокаДвиженияСторно0.НДС         = 0;

			СтрокаДвиженияСторно0.Событие     = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
			
			СтрокаДвиженияСторно0.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			СтрокаДвижения = ТаблицаДвижений_НДСНачисленный.Добавить();
			СтрокаДвижения.Организация = СтрокаДвиженияСторно0.Организация;
			СтрокаДвижения.СчетФактура = СтрокаДвиженияСторно0.СчетФактура;
			СтрокаДвижения.ВидЦенности = СтрокаДвиженияСторно0.ВидЦенности;
			СтрокаДвижения.СтавкаНДС   = СтрокаТаблицы.СтавкаНДС;
			СтрокаДвижения.Покупатель  = СтрокаТаблицы.Покупатель;
			СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
			
			СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДС;
			СтрокаДвижения.НДС         = СтрокаТаблицы.НДС;

			СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
			
			СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			СтрокаИнформацииОРеализации = ДанныеПоРеализации0.Найти(СтрокаДвиженияСторно0.СчетФактура,"СчетФактура");
			СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДС;
			
			СформироватьПроводкиПоНеподтверждениюСтавки0_Реализация(СтруктураШапкиДокумента, СтрокаДвижения,СчетУчетаНДС, Движения.Хозрасчетный, Отказ, Заголовок);

		КонецЕсли; 
	КонецЦикла; 
	
	Если не ТаблицаДвижений_НДСНачисленный = Неопределено Тогда
		Движения.НДСНачисленный.мПериод	= СтруктураШапкиДокумента.Дата;
		Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ДобавитьДвижение();
	Иначе 
		Возврат;
	КонецЕсли; 

КонецПроцедуры // СформироватьДвиженияПоНеподтверждениюСтавки0()

// Формирует проводку при неподтверждении ставки НДС по предъявлению НДС .
// Основная задача - отразить изменение состояния НДС в регистре "НДСПокупки", соответствующими
// проводками на субсчетах 19-го счета.
//
Процедура СформироватьПроводкиПоНеподтверждениюСтавки0_Реализация(СтруктураШапкиДокумента, СтрокаДвижения,СчетУчетаНДС, Проводки, Отказ, Заголовок)

	Если не СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0
		или СтрокаДвижения.НДС = 0 
		Тогда
		Возврат;
	КонецЕсли;
	
	// Проводка по отражению НДС к возмещению из бюджета (в соотв. с письмом МинФина от 27 мая 2003 г. N 16-00-14/177)
	СтрокаДвиженияПроводка = Проводки.Добавить();
	
	// Формируем проводку по доначислению НДС с реализации 
	СтрокаДвиженияПроводка.Период       = СтруктураШапкиДокумента.Дата;
	СтрокаДвиженияПроводка.Содержание   = "Не подтвержден НДС 0% по реализации";
	СтрокаДвиженияПроводка.Организация  = СтрокаДвижения.Организация;

	СтрокаДвиженияПроводка.СчетДт       = ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению; //68.22
	//БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт,СтрокаДвиженияПроводка.СубконтоДт,"СтавкиНДС", СтрокаДвижения.СтавкаНДС);
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт,СтрокаДвиженияПроводка.СубконтоДт,"Контрагенты",  СтрокаДвижения.Покупатель);
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт,СтрокаДвиженияПроводка.СубконтоДт,"СФВыданные",  СтрокаДвижения.СчетФактура);
	
	
	СтрокаДвиженияПроводка.СчетКт = СчетУчетаНДС; // 68.02 или 76.Н
	//БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт,СтрокаДвиженияПроводка.СубконтоКт,"СтавкиНДС", СтрокаДвижения.СтавкаНДС);
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт,СтрокаДвиженияПроводка.СубконтоКт,"Контрагенты",  СтрокаДвижения.Покупатель);
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт,СтрокаДвиженияПроводка.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт,СтрокаДвиженияПроводка.СубконтоКт,"СФВыданные",  СтрокаДвижения.СчетФактура);
	                  
	СтрокаДвиженияПроводка.Сумма        = СтрокаДвижения.НДС;
	
	// Проводка по списанию НДС с возмещения из бюджета (последующее подтверждение не поддерживается)
	СтрокаДвиженияПроводка = Проводки.Добавить();
	
	// Формируем проводку по доначислению НДС с реализации 
	СтрокаДвиженияПроводка.Период       = СтруктураШапкиДокумента.Дата;
	СтрокаДвиженияПроводка.Содержание   = "Не подтвержден НДС 0% по реализации";
	СтрокаДвиженияПроводка.Организация  = СтрокаДвижения.Организация;

	СтрокаДвиженияПроводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы; // 91.02
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт,СтрокаДвиженияПроводка.СубконтоДт,"ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СтатьяПрочихРасходов);
	
	СтрокаДвиженияПроводка.СчетКт       = ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению; //68.22
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт,СтрокаДвиженияПроводка.СубконтоКт,"СтавкиНДС", СтрокаДвижения.СтавкаНДС);
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт,СтрокаДвиженияПроводка.СубконтоКт,"Контрагенты",  СтрокаДвижения.Покупатель);
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт,СтрокаДвиженияПроводка.СубконтоКт,"СФВыданные",  СтрокаДвижения.СчетФактура);
	
	СтрокаДвиженияПроводка.Сумма        = СтрокаДвижения.НДС;
	
КонецПроцедуры // СформироватьПроводкиПоНеподтверждениюСтавки0_Реализация()

// Процедура вызывается из процедуры "Обработка проведения".
// Основная задача - на основании движений по регистру НДСПокупки, сделанных документом
// реализации по ставке 0%, заполнить параметры конкретного движения показывающего
// подтверждение или неподтверждение ставки 0%.
//
Процедура СформироватьДвижениеНДСПредъявленныйРеализация0_ОтражениеПодтверждения0(СтруктураШапкиДокумента, ТаблицаДокументовРеализации, ДанныеПоРеализации0, Отказ,Заголовок)

	ТаблицаПодтверждений = ТаблицаДокументовРеализации.Скопировать();
	ТаблицаПодтверждений.Свернуть("СчетФактура,Событие","СуммаБезНДС, НДС");
	ТаблицаПодтверждений.Колонки.Добавить("СуммаРеализации", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	Для каждого СтрокаПодтверждения Из ТаблицаПодтверждений Цикл
		СтрокаРеализации = ДанныеПоРеализации0.Найти(СтрокаПодтверждения.СчетФактура,"СчетФактура");
		Если СтрокаРеализации = Неопределено Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("По документу <"+Строка(СтрокаПодтверждения.СчетФактура)+"> не обнаружена реализация по ставке НДС 0%.",Отказ,Заголовок);
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаРеализации.СуммаРеализации) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("По документу <"+Строка(СтрокаПодтверждения.СчетФактура)+"> не обнаружена реализация по ставке НДС 0%.",Отказ,Заголовок);
		Иначе
			СтрокаПодтверждения.СуммаРеализации = СтрокаРеализации.СуммаРеализации;
		КонецЕсли; 
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ДокументыРеализации = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаДокументовРеализации.ВыгрузитьКолонку("СчетФактура"), Истина);
	
	ТаблицаДвижений_НДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0.ВыгрузитьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0ОстаткиИОбороты.Организация,
	|	НДСПредъявленныйРеализация0ОстаткиИОбороты.СчетФактура,
	|	НДСПредъявленныйРеализация0ОстаткиИОбороты.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0ОстаткиИОбороты.ВидЦенности,
	|	НДСПредъявленныйРеализация0ОстаткиИОбороты.СтавкаНДС,
	|	НДСПредъявленныйРеализация0ОстаткиИОбороты.СчетУчетаНДС,
	|	НДСПредъявленныйРеализация0ОстаткиИОбороты.СуммаБезНДСКонечныйОстаток как ОсталосьСуммаБезНДС,
	|	НДСПредъявленныйРеализация0ОстаткиИОбороты.НДСКонечныйОстаток как ОсталосьНДС,
	|	ЕСТЬNULL(НДСПредъявленныйРеализация0ОстаткиИОбороты.СуммаБезНДСПриход, 0) как СуммаБезНДС,
	|	ЕСТЬNULL(НДСПредъявленныйРеализация0ОстаткиИОбороты.НДСПриход, 0) КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.ОстаткиИОбороты(
	|		,
	|		&КонецПериода,
	|		Период,
	|		,
	|		Организация = &Организация
	|			И ДокументОтгрузки В (&СписокДокументовРеализации)
	|			И Состояние = &СостояниеПредположения0) КАК НДСПредъявленныйРеализация0ОстаткиИОбороты";
	
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтруктураШапкиДокумента.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	СостояниеОжиданияПодтверждения = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;
	Запрос.УстановитьПараметр("СостояниеПредположения0", СостояниеОжиданияПодтверждения);
	Запрос.УстановитьПараметр("СписокДокументовРеализации", ДокументыРеализации);
	
	ТаблицаОжиданияПодтверждения = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	ТаблицаОжиданияПодтверждения.Индексы.Добавить("ДокументОтгрузки");
	
	Для каждого СтрокаПодтверждения Из ТаблицаПодтверждений Цикл
		СтрокиПредположения = ТаблицаОжиданияПодтверждения.НайтиСтроки(Новый Структура("ДокументОтгрузки",СтрокаПодтверждения.СчетФактура));
		Для каждого СтрокаПредположения Из СтрокиПредположения Цикл
			СуммаПодтвержденияПоСтрокеРеализации = СтрокаПодтверждения.СуммаБезНДС + ?(СтрокаПодтверждения.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0 и СтруктураШапкиДокумента.НДСПриНеподтвержденииСверху,0, СтрокаПодтверждения.НДС);
			КПогашениюБезНДС = Окр(СтрокаПредположения.СуммаБезНДС*(СуммаПодтвержденияПоСтрокеРеализации)/СтрокаПодтверждения.СуммаРеализации,2);
			КПогашениюБезНДС = Макс(0, Мин(КПогашениюБезНДС,СтрокаПредположения.ОсталосьСуммаБезНДС));
			КПогашениюНДС = Окр(СтрокаПредположения.НДС*(СуммаПодтвержденияПоСтрокеРеализации)/СтрокаПодтверждения.СуммаРеализации,2);
			КПогашениюНДС = Макс(0, Мин(КПогашениюНДС,СтрокаПредположения.ОсталосьНДС));
			
			Если КПогашениюБезНДС =0 и КПогашениюНДС = 0 тогда
				Продолжить;
			КонецЕсли; 
			
			// регистр НДСПредъявленныйРеализация0
			// погашение суммы предположения 0%
			СтрокаСписанияПредположения = ТаблицаДвижений_НДСПредъявленныйРеализация0.Добавить();
			СтрокаСписанияПредположения.Организация		= СтруктураШапкиДокумента.Организация;
			СтрокаСписанияПредположения.СчетФактура		= СтрокаПредположения.СчетФактура;
			СтрокаСписанияПредположения.Состояние		= СостояниеОжиданияПодтверждения;
			СтрокаСписанияПредположения.ДокументОтгрузки = СтрокаПодтверждения.СчетФактура;
			
			СтрокаСписанияПредположения.ВидЦенности		= СтрокаПредположения.ВидЦенности;
			СтрокаСписанияПредположения.СтавкаНДС		= СтрокаПредположения.СтавкаНДС;
			СтрокаСписанияПредположения.СчетУчетаНДС	= СтрокаПредположения.СчетУчетаНДС;
			//СтрокаСписанияПредположения.Поставщик =   СтрокаПредположения.Поставщик;
			
			СтрокаСписанияПредположения.СуммаБезНДС = КПогашениюБезНДС;
			СтрокаСписанияПредположения.НДС = 		 КПогашениюНДС;
			
			Если СтрокаПодтверждения.Событие = Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0 Тогда
				СтрокаСписанияПредположения.Событие = Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0;
			Иначе
				СтрокаСписанияПредположения.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
			КонецЕсли;
			
			СтрокаСписанияПредположения.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			// Отражение подтверждения/неподтверждения 0%
			СтрокаОтраженияПодтверждения = ТаблицаДвижений_НДСПредъявленныйРеализация0.Добавить();
			СтрокаОтраженияПодтверждения.Организация	= СтрокаСписанияПредположения.Организация;
			СтрокаОтраженияПодтверждения.СчетФактура	= СтрокаСписанияПредположения.СчетФактура;
			Если СтрокаСписанияПредположения.Событие	= Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0 Тогда
				СтрокаОтраженияПодтверждения.Состояние	= Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;
			Иначе
				СтрокаОтраженияПодтверждения.Состояние	= Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0
			КонецЕсли;
			
			СтрокаОтраженияПодтверждения.ДокументОтгрузки = СтрокаСписанияПредположения.ДокументОтгрузки;
			
			СтрокаОтраженияПодтверждения.ВидЦенности	= СтрокаСписанияПредположения.ВидЦенности;
			СтрокаОтраженияПодтверждения.СтавкаНДС		= СтрокаСписанияПредположения.СтавкаНДС;
			СтрокаОтраженияПодтверждения.СчетУчетаНДС	= СтрокаСписанияПредположения.СчетУчетаНДС;
			
			СтрокаОтраженияПодтверждения.СуммаБезНДС	= СтрокаСписанияПредположения.СуммаБезНДС;
			СтрокаОтраженияПодтверждения.НДС			= СтрокаСписанияПредположения.НДС;
			
			СтрокаОтраженияПодтверждения.Событие		=   СтрокаСписанияПредположения.Событие;
			
			СтрокаОтраженияПодтверждения.ВидДвижения	= ВидДвиженияНакопления.Приход;
		
			СтрокаПредположения.ОсталосьСуммаБезНДС = СтрокаПредположения.ОсталосьСуммаБезНДС - КПогашениюБезНДС;
			СтрокаПредположения.ОсталосьНДС	 = СтрокаПредположения.ОсталосьНДС    - КПогашениюНДС;
			
		КонецЦикла; 
	
	КонецЦикла; 
	
	Если ТаблицаДвижений_НДСПредъявленныйРеализация0.Количество()>0 Тогда
		Движения.НДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленныйРеализация0;
		Движения.НДСПредъявленныйРеализация0.ДобавитьДвижение();
	КонецЕсли; 
		
КонецПроцедуры // СформироватьДвижениеНДСПокупкиПоОтражениюСтавки0()
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	мЗаконодательство2006 = Дата >= '20060101000000';
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа: "+СокрЛП(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Дополним структуру шапки документа положениями учетной политики
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("НДСПриНеподтвержденииСверху");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Покупатель",		"Покупатель");
	СтруктураПолей.Вставить("СчетФактура",		"СчетФактура");
	СтруктураПолей.Вставить("ВидЦенности",		"ВидЦенности");
	СтруктураПолей.Вставить("Событие",			"Событие");
	СтруктураПолей.Вставить("СуммаБезНДС",		"ПродажиСНДС0");
	СтруктураПолей.Вставить("СтавкаНДС",		"СтавкаНДС");
	СтруктураПолей.Вставить("НДС",				"СуммаНДС");
	СтруктураПолей.Вставить("КурсоваяРазница",	"КурсоваяРазница");
	СтруктураПолей.Вставить("ДокРеализации",	"СчетФактура");
	СтруктураПолей.Вставить("СтавкаРеализации",	"СтавкаНДС");

	РезультатЗапросаПоДокументам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураПолей);
	ТаблицаПоДокументам = 			ПодготовитьТаблицуПоДокументам(РезультатЗапросаПоДокументам,СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеТабличнойЧастиПоДокументам(ТаблицаПоДокументам, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоДокументам, Отказ, Заголовок);
	КонецЕсли;
	
	Если Не Отказ Тогда
		УниверсальныеМеханизмы.ЗафиксироватьФактВыполненияРегламентнойОперации(НачалоМесяца(Дата),
													  СтруктураШапкиДокумента.Организация,
													  Ссылка,														  
													  Перечисления.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	УниверсальныеМеханизмы.СброситьФактВыполненияОперации(Ссылка);
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мЗаконодательство2006 = Дата >= '20060101000000';
