////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит текущий договор контрагента - для проверки текста назначения при изменении договора
Перем мТекущийДоговорКонтрагента;

// Хранит текущий счет контрагента - для проверки текста назначения при изменении счета
Перем мТекущийСчетКонтрагента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мМассивПлатежныхВедомостей;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИНФОРМАЦИИ О СПИСАНИИ

Процедура ЗаполнитьТекстПроДокументСписания()
	
	ДокументСписания = НайтиДокументСписания(Ссылка);
	ЭлементыФормы.ГиперссылкаДокументСписания.Заголовок = ПолучитьТекстДокументаСписания(ДокументСписания,	ЭтотОбъект, ЭлементыФормы.ГиперссылкаДокументСписания.ГиперСсылка);
	//Если ЗначениеЗаполнено(ДокументСписания) Тогда
	//	ЭлементыФормы.ПровестиСписание.Доступность = Не ДокументСписания.Проведен;
	//КонецЕсли;
																								
КонецПроцедуры

Функция НайтиДокументСписания(ДокументСсылка)
	
	Если ЭтоНовый() Тогда
		Возврат "";
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОснование) И 
		ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		
		Возврат ДокументОснование;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДокСписания.Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК ДокСписания
	|ГДЕ
	|	ДокСписания.ДокументОснование = &ДокументСсылка";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаИзЗапроса.Следующий() Тогда
		НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
	КонецЕсли;

	Возврат НайденныйДокумент;
																								
КонецФункции

Функция ПолучитьТекстДокументаСписания(ДокументСписания, ДокументОснование = Неопределено, Гиперссылка = Истина, ДопИнформация = "")

	Если ЗначениеЗаполнено(ДокументСписания) Тогда
		Гиперссылка = Истина;
		СтрокаДокумент = ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументСписания);
		СтрокаДокумент = "Списание с расчетного счета № "+ СтрокаДокумент +" от "+ Формат(ДокументСписания.Дата,"ДФ=dd.MM.yyyy") + " г.";
		//ИнформационнаяСтрока = СтрокаДокумент + " " + Строка(ДокументСписания.ВидОперации) + ?(ДокументСписания.Проведен, " (Проведен).", " (не проведен).");
		//ДопИнформация = Строка(ДокументСписания.ВидОперации) + ", счет расчетов: " + ?(ДокументСписания.РасшифровкаПлатежа.Количество()>0, ДокументСписания.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом, ДокументСписания.СчетУчетаРасчетовСКонтрагентом);
		Возврат СтрокаДокумент;
	Иначе
		Гиперссылка = Истина;
		Возврат "Ввести документ списания с расчетного счета";
	КонецЕсли;
																								
КонецФункции

Процедура ГиперссылкаДокументСписанияНажатие(Элемент)
	
	ВвестиДокументСписания(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Выполняет общие для всех документов действия при нажатии на гиперссылку на Счет-фактуру
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ФормаДокумента  - форма документа.
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура ВвестиДокументСписания(ДокументОбъект, ФормаДокумента)

	ДокументСписания = НайтиДокументСписания(Ссылка);

	Если (ДокументОбъект.ПометкаУдаления) И Не ЗначениеЗаполнено(ДокументСписания) Тогда
		Предупреждение("Нельзя вводить оплату по документу, помеченного на удаление");
		Возврат;
	КонецЕсли;

	ОбъектДокументСписания = Неопределено;

	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если (НЕ ЗначениеЗаполнено(ДокументСписания)) Тогда
		//Вводим новый документ на основании нашего
		Если ДокументОбъект.Модифицированность() Тогда
			ДокументОбъект.Записать();
		КонецЕсли;

		ОбъектДокументСписания = Документы.СписаниеСРасчетногоСчета.ПолучитьФормуНовогоДокумента(, ФормаДокумента , Строка(ДокументОбъект));
		ОбъектДокументСписания.Заполнить(ДокументОбъект.Ссылка);
				
		ОбъектДокументСписания.ДокументОснование = ДокументОбъект.Ссылка;
				
		ОбъектДокументСписания.Открыть();
		
	Иначе
		
		// Откроем форму для редактирования оплаты
		Если (ФормаДокумента.ВладелецФормы <> Неопределено) И Строка(ФормаДокумента.КлючУникальности) = Строка(ДокументСписания) Тогда
			ФормаДокумента.ВладелецФормы.Открыть();
		Иначе
			ДокументСписания.ПолучитьФорму(, ФормаДокумента , Строка(ДокументОбъект)).Открыть();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВвестиСчетФактуру()

Процедура ОплаченоПриИзменении(Элемент)
	
	ДокументСписания = НайтиДокументСписания(Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет необходимые действия формирования текста назначения платежа
//
Процедура СформироватьНазначениеПлатежа(ТолькоСумму = Ложь)
	
	ПеречислениеНалога = ПеречислениеВБюджет И (СтатусСоставителя <> "08");
	
	ПозицияСумма = Найти(НазначениеПлатежа, "Сумма");
	
	Если ПозицияСумма = 0 Тогда // для совместимости, при редактировании старых платежек
		ПозицияСумма = Найти(НазначениеПлатежа, "В т.ч. НДС");
		Если ПозицияСумма = 0 Тогда
			ПозицияСумма = Найти(НазначениеПлатежа, "Без налога (НДС)");
		КонецЕсли;
	КонецЕсли;
	
	Если ТолькоСумму Тогда
		
		ТекстНазначение = ?(ПозицияСумма = 0, НазначениеПлатежа, Лев(НазначениеПлатежа, ПозицияСумма - 1));
		Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
			ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);
		КонецЕсли;
		
	Иначе
		
		ТекстНазначение = ?(ПозицияСумма = 0, НазначениеПлатежа, Лев(НазначениеПлатежа, ПозицияСумма - 1));
		Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
			ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);				
		КонецЕсли;
		
		Если (мТекущийДоговорКонтрагента <> ДоговорКонтрагента 
			ИЛИ мТекущийСчетКонтрагента <> СчетКонтрагента)
			И ЗначениеЗаполнено(ТекстНазначение) Тогда
			// Текст назначение платежа будет обновлен только при условии, что ранее он был сформирован автоматически
			ОбновитьНазначениеПлатежа = ТекстНазначение = ТекстНазначенияПлатежа(мТекущийСчетКонтрагента, мТекущийДоговорКонтрагента, ПеречислениеНалога);
		Иначе
			ОбновитьНазначениеПлатежа = НЕ ЗначениеЗаполнено(ТекстНазначение);
			
		КонецЕсли;				
		
		Если ОбновитьНазначениеПлатежа Тогда
			
			ТекстНазначение = ТекстНазначенияПлатежа(СчетКонтрагента, ДоговорКонтрагента, ПеречислениеНалога);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПеречислениеНалога Тогда
		НазначениеПлатежа = ТекстНазначение;
		Возврат;
	КонецЕсли;

	ТекстСумма = "Сумма " + Формат(СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		ТекстНДС = "Без налога (НДС)";
	ИначеЕсли СуммаНДС > 0 Тогда
		ТекстНДС = "В т.ч. НДС " 
			+ ?(ЗначениеЗаполнено(СтавкаНДС), " (" + СтавкаНДС + ") ", "")
			+ Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	Иначе
		ТекстНДС = "";
	КонецЕсли;
	
	ТекстСуммаНазначения = ТекстСумма + Символы.ПС + ТекстНДС; 
	
	НазначениеПлатежа = ТекстНазначение
		+ ?(ПустаяСтрока(ТекстСуммаНазначения),   "", Символы.ПС + ТекстСуммаНазначения);
	
КонецПроцедуры // СформироватьНазначениеПлатежа()
	
// Процедура устанавливает видимость элементов формы. 
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	ИмяСтраницы = ?(ПеречислениеВБюджет, "ПеречислениеВБюджет", "ОбычныйПлатеж");
	ЭлементыФормы.ПанельРеквизитовПлатежейВБюджет.ТекущаяСтраница = ЭлементыФормы.ПанельРеквизитовПлатежейВБюджет.Страницы[ИмяСтраницы];
	
	ЭлементыФормы.КнопкаЗаполнить.Доступность = ПеречислениеВБюджет;
	
	ЭлементыФормы.СтатьяДвиженияДенежныхСредств.Видимость = ЕстьУчетПоСтатьямДДС;
	ЭлементыФормы.НадписьСтатьяДДС.Видимость 	  		  = ЕстьУчетПоСтатьямДДС;
	
	ПоказатьКППплательщика = НЕ ПустаяСтрока(КПППлательщика) ИЛИ ПеречислениеВБюджет ИЛИ СчетОрганизации.ВсегдаУказыватьКПП;
	ЭлементыФормы.НадписьРеквизитыПлательщика.Заголовок = 
		"ИНН " + ИННПлательщика 
		+ ?(ПоказатьКППплательщика, ", КПП " + КПППлательщика, "")
		+ ", " + ТекстПлательщика;
	
	ПоказатьКППполучателя = НЕ ПустаяСтрока(КПППолучателя) ИЛИ ПеречислениеВБюджет ИЛИ СчетКонтрагента.ВсегдаУказыватьКПП;
	ЭлементыФормы.НадписьРеквизитыПолучателя.Заголовок = 
		"ИНН " + ИННПолучателя 
		+ ?(ПоказатьКППполучателя, ", КПП " + КПППолучателя, "")
		+ ", " + ТекстПолучателя;
		
	Если ПеречислениеВБюджет Тогда
		ЭлементыФормы.НадписьРеквизитыПлатежейВБюджет.Заголовок = ""
			+ ?(ПустаяСтрока(КодБК), "<КБК не указан>", КодБК)
			+ "; " + ?(НЕ ЗначениеЗаполнено(КодОКАТО), "<ОКАТО не указан>", КодОКАТО)
			+ "; " + ПоказательОснования
			+ "; " + ПоказательПериода
			+ "; " + ПоказательНомера
			+ "; " + ПоказательДаты
			+ "; " + ПоказательТипа
			+ ". Статус: " + ?(ПустаяСтрока(СтатусСоставителя), "<не указан>", СтатусСоставителя);
	КонецЕсли;
		
	ЭлементыФормы.ДоговорКонтрагента.Видимость = НЕ ПеречислениеВБюджет;	
	ЭлементыФормы.НадписьДоговорКонтрагента.Видимость = НЕ ПеречислениеВБюджет;	
	
КонецПроцедуры // УстановитьВидимость()

Процедура УстановитьРеквизитыПлательщика(ТолькоПустые = Ложь)
	
	Если ТолькоПустые Тогда
	
		ТекстПлательщика = ?(ПустаяСтрока(ТекстПлательщика), АвтоЗначенияРеквизитов.ТекстПлательщика, ТекстПлательщика);
		ИННПлательщика   = ?(ПустаяСтрока(ИННПлательщика), АвтоЗначенияРеквизитов.ИННПлательщика, ИННПлательщика);
		КПППлательщика   = ?(ПустаяСтрока(КПППлательщика), АвтоЗначенияРеквизитов.КПППлательщика, КПППлательщика);
	
	Иначе
	
		ТекстПлательщика = АвтоЗначенияРеквизитов.ТекстПлательщика;
		ИННПлательщика   = АвтоЗначенияРеквизитов.ИННПлательщика;
		КПППлательщика   = АвтоЗначенияРеквизитов.КПППлательщика;
	
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьРеквизитыПолучателя(ТолькоПустые = Ложь)

	Если ТолькоПустые Тогда
	
		ТекстПолучателя = ?(ПустаяСтрока(ТекстПолучателя), АвтоЗначенияРеквизитов.ТекстПолучателя, ТекстПолучателя);
		ИННПолучателя   = ?(ПустаяСтрока(ИННПолучателя), АвтоЗначенияРеквизитов.ИННПолучателя, ИННПолучателя);
		КПППолучателя   = ?(ПустаяСтрока(КПППолучателя), АвтоЗначенияРеквизитов.КПППолучателя, КПППолучателя);
	
	Иначе
	
		ТекстПолучателя = АвтоЗначенияРеквизитов.ТекстПолучателя;
		ИННПолучателя   = АвтоЗначенияРеквизитов.ИННПолучателя;
		КПППолучателя   = АвтоЗначенияРеквизитов.КПППолучателя;
	
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет действия, необходимые при выборе счета организации
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаОрганизации()
	
	Если НЕ ЗначениеЗаполнено(СчетОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = СчетОрганизации.Владелец;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриИзмененииСчетаОрганизации()

// Процедура выполняет действия, необходимые при выборе счета контрагента
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаКонтрагента()
	
	Если НЕ СчетОрганизации.ВалютаДенежныхСредств = СчетКонтрагента.ВалютаДенежныхСредств Тогда
		СчетКонтрагента = Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = СчетКонтрагента.Владелец;
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры // ПриИзмененииСчетаКонтрагента()

// Процедура выполняет действия, необходимые при выборе организации
//
// Параметры:
//  Нет.
//
Процедура НачальноеЗаполнениеПриВыбореОрганизации()
	
	Если НЕ Организация.Пустая() Тогда
		
		Если ПеречислениеВБюджет Тогда
			КодОКАТО = Организация.КодПоОКАТО;
		Иначе
			КодОКАТО = "";
		КонецЕсли;
		
	Иначе
		
		СчетОрганизации = "";
		
	КонецЕсли;
	
КонецПроцедуры // НачальноеЗаполнениеПриВыбореОрганизации()

Функция ПодготовитьДанныеРеквизитовПлатежаВБюджетПоРегистру(СтрокаРегистраРеквизитов)

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВидПеречисленияВБюджет", СтрокаРегистраРеквизитов.ВидПеречисленияВБюджет);
	СтруктураДанных.Вставить("КодБК", СтрокаРегистраРеквизитов.ВидПлатежа.КодБК);
	СтруктураДанных.Вставить("Контрагент", СтрокаРегистраРеквизитов.Получатель);
	СтруктураДанных.Вставить("СчетКонтрагента", СтрокаРегистраРеквизитов.СчетПолучателя);
	СтруктураДанных.Вставить("СтатусСоставителя", СтрокаРегистраРеквизитов.СтатусСоставителя);
	СтруктураДанных.Вставить("ПоказательОснования", СтрокаРегистраРеквизитов.ПоказательОснования);
	СтруктураДанных.Вставить("ПоказательТипа", СтрокаРегистраРеквизитов.ПоказательТипа);
	СтруктураДанных.Вставить("ОчередностьПлатежа", СтрокаРегистраРеквизитов.ОчередностьПлатежа);
	СтруктураДанных.Вставить("НазначениеПлатежа", СтрокаРегистраРеквизитов.НазначениеПлатежа);
	
	ЭтоФизЛицо = (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо );
	
	СтруктураДанных.Вставить("КПППлательщика", ?(ЭтоФизЛицо, "0", Организация.КПП));
	СтруктураДанных.Вставить("КодОКАТО", Организация.КодПоОКАТО);
	
	// {КОРП
	Если ЗначениеЗаполнено(СтрокаРегистраРеквизитов.РегистрацияВИФНС) Тогда
		СтруктураДанных.Вставить("КПППлательщика", ?(ЭтоФизЛицо, "0", СтрокаРегистраРеквизитов.РегистрацияВИФНС.КПП));
		СтруктураДанных.Вставить("КодОКАТО", СтрокаРегистраРеквизитов.РегистрацияВИФНС.КодПоОКАТО);
	КонецЕсли;
	// }КОРП
	
	Если СтрокаРегистраРеквизитов.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		
		ДатаНачисленияНалога = НачалоМесяца(Дата) - 1;
		
		Если СтрокаРегистраРеквизитов.ПоказательПериода = "КВ" Тогда
			
			ДатаОкончания = КонецКвартала(ДатаНачисленияНалога);
			ДатаНачала    = НачалоКвартала(ДатаОкончания);
			СтруктураДанных.Вставить("ПоказательПериода", 
				"КВ." + Формат(ДатаОкончания, "ДФ=кк") 
				+ "." + Формат(ДатаОкончания, "ДФ=гггг"));
			СтруктураДанных.Вставить("НазначениеПлатежа", 
				СтрокаРегистраРеквизитов.НазначениеПлатежа 
				+ " за " + ПредставлениеПериода(ДатаНачала, КонецДня(ДатаОкончания), "ФП = Истина"));
				
		ИначеЕсли СтрокаРегистраРеквизитов.ПоказательПериода = "МС" Тогда
				
			ДатаОкончания = КонецМесяца(ДатаНачисленияНалога);
			ДатаНачала    = НачалоМесяца(ДатаОкончания);
			СтруктураДанных.Вставить("ПоказательПериода", 
				"МС." + Формат(ДатаОкончания, "ДФ=ММ") 
				+ "." + Формат(ДатаОкончания, "ДФ=гггг"));
			СтруктураДанных.Вставить("НазначениеПлатежа", 
				СтрокаРегистраРеквизитов.НазначениеПлатежа 
				+ " за " + ПредставлениеПериода(ДатаНачала, КонецДня(ДатаОкончания), "ФП = Истина"));
				
		ИначеЕсли СтрокаРегистраРеквизитов.ПоказательПериода = "ПЛ" Тогда
			
			ДатаОкончания = КонецГода(ДатаНачисленияНалога);
			ДатаНачала    = НачалоГода(ДатаОкончания);
			Если Месяц(ДатаНачисленияНалога) <= 6 Тогда
				СтруктураДанных.Вставить("ПоказательПериода", 
					"ПЛ.01." + Формат(ДатаОкончания, "ДФ=гггг"));
				СтруктураДанных.Вставить("НазначениеПлатежа", 
					СтрокаРегистраРеквизитов.НазначениеПлатежа 
					+ " за 1 полугодие " + ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП = Истина"));
			Иначе
				СтруктураДанных.Вставить("ПоказательПериода", 
					"ПЛ.02." + Формат(ДатаОкончания, "ДФ=гггг"));
				СтруктураДанных.Вставить("НазначениеПлатежа", 
					СтрокаРегистраРеквизитов.НазначениеПлатежа 
					+ " за 2 полугодие " + ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП = Истина"));
			КонецЕсли;
				
		ИначеЕсли СтрокаРегистраРеквизитов.ПоказательПериода = "ГД" Тогда
			
			ДатаОкончания = КонецГода(ДатаНачисленияНалога);
			ДатаНачала    = НачалоГода(ДатаОкончания);
			СтруктураДанных.Вставить("ПоказательПериода", 
				"ГД.00." + Формат(ДатаОкончания, "ДФ=гггг"));
			СтруктураДанных.Вставить("НазначениеПлатежа", 
				СтрокаРегистраРеквизитов.НазначениеПлатежа 
				+ " за " + ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП = Истина"));
			
		Иначе
			
			СтруктураДанных.Вставить("ПоказательПериода", "0");
			СтруктураДанных.Вставить("НазначениеПлатежа", СтрокаРегистраРеквизитов.НазначениеПлатежа);
			
		КонецЕсли;
		
	Иначе
		СтруктураДанных.Вставить("ПоказательПериода", СтрокаРегистраРеквизитов.ПоказательПериода);
		СтруктураДанных.Вставить("НазначениеПлатежа", СтрокаРегистраРеквизитов.НазначениеПлатежа);
	КонецЕсли;
	
	Возврат СтруктураДанных;

КонецФункции // ПодготовитьДанныеРеквизитовПлатежаВБюджетПоРегистру()

Функция ОпределитьСуммуПлатежаВБюджет(СтрокаРегистраРеквизитов)
	
	Если СтрокаРегистраРеквизитов.ВидПеречисленияВБюджет <> Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		Возврат 0;
	КонецЕсли;
	
	СчетУчета = СтрокаРегистраРеквизитов.ВидПлатежа.СчетУчета;
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаПлатежа
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет = &СчетУчета,
	|			&ВидыСубконто,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт > 0";
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("СчетУчета",    СчетУчета);
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	
	Ном = 0;
	ВидыСубконто = Новый Массив;
	ДополнениеТекстаЗапроса = "";
	
	Для каждого СтрокаСубконто Из СчетУчета.ВидыСубконто Цикл
		
		Если СтрокаСубконто.ТолькоОбороты Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет Тогда
			
			Ном = Ном + 1;
			ВидыСубконто.Добавить(СтрокаСубконто.ВидСубконто);
			ДополнениеТекстаЗапроса = ДополнениеТекстаЗапроса + " И Субконто" + Ном + " = &Субконто" + Ном;
			
			Если Найти("СА;АШ;ИШ;", СтрокаРегистраРеквизитов.ПоказательТипа) > 0 Тогда
				Запрос.УстановитьПараметр("Субконто" + Ном, Перечисления.ВидыПлатежейВГосБюджет.Штраф);
			ИначеЕсли Найти("ПЕ;", СтрокаРегистраРеквизитов.ПоказательТипа) > 0 Тогда
				Если Найти("ЗД;", СтрокаРегистраРеквизитов.ПоказательОснования) > 0 Тогда
					Запрос.УстановитьПараметр("Субконто" + Ном, Перечисления.ВидыПлатежейВГосБюджет.ПениСам);
				Иначе
					Запрос.УстановитьПараметр("Субконто" + Ном, Перечисления.ВидыПлатежейВГосБюджет.ПениАкт);
				КонецЕсли;
			Иначе
				Если Найти("ЗД;", СтрокаРегистраРеквизитов.ПоказательОснования) > 0 Тогда
					Запрос.УстановитьПараметр("Субконто" + Ном, Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
				ИначеЕсли Найти("АП;АР;", СтрокаРегистраРеквизитов.ПоказательОснования) > 0 Тогда
					Запрос.УстановитьПараметр("Субконто" + Ном, Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
				Иначе
					Запрос.УстановитьПараметр("Субконто" + Ном, Перечисления.ВидыПлатежейВГосБюджет.Налог);
				КонецЕсли;
			КонецЕсли;
			
		// {ОбособленныеПодразделения
		
		ИначеЕсли СтрокаСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РегистрацияВИФНС Тогда
			
			Ном = Ном + 1;
			ВидыСубконто.Добавить(СтрокаСубконто.ВидСубконто);
			ДополнениеТекстаЗапроса = ДополнениеТекстаЗапроса + " И Субконто" + Ном + " = &Субконто" + Ном;
			
			Запрос.УстановитьПараметр("Субконто" + Ном, СтрокаРегистраРеквизитов.РегистрацияВИФНС);
			
		// }ОбособленныеПодразделения 
		
		ИначеЕсли СтрокаСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов Тогда
			
			Ном = Ном + 1;
			ВидыСубконто.Добавить(СтрокаСубконто.ВидСубконто);
			ДополнениеТекстаЗапроса = ДополнениеТекстаЗапроса + " И Субконто" + Ном + " = &Субконто" + Ном;
			
			Если Сред(СтрокаРегистраРеквизитов.ВидПлатежа.КодБК, 12, 2) = "01" Тогда
				Запрос.УстановитьПараметр("Субконто" + Ном, Перечисления.УровниБюджетов.ФедеральныйБюджет);
			ИначеЕсли Сред(СтрокаРегистраРеквизитов.ВидПлатежа.КодБК, 12, 2) = "02" Тогда
				Запрос.УстановитьПараметр("Субконто" + Ном, Перечисления.УровниБюджетов.РегиональныйБюджет);
			Иначе
				Запрос.УстановитьПараметр("Субконто" + Ном, Перечисления.УровниБюджетов.МестныйБюджет);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидыСубконто.Количество() = 0 Тогда
		Запрос.УстановитьПараметр("ВидыСубконто", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, "Организация = &Организация", "Организация = &Организация" + ДополнениеТекстаЗапроса);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СуммаПлатежа = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СуммаПлатежа = Выборка.СуммаПлатежа;
	КонецЕсли;
	
	Возврат СуммаПлатежа;
	
КонецФункции // ОпределитьСуммуПлатежаВБюджет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	мТекущийСчетКонтрагента = СчетКонтрагента;
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;
	
	Если ЭтоНовый() Тогда
		
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыПлатежногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, ПараметрОбъектКопирования);
		
		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			
			НачальноеЗаполнениеПриВыбореОрганизации();
						
			ПриИзмененииСчетаОрганизации();
			ПриИзмененииСчетаКонтрагента();
			
			АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
			                         Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ПеречислениеВБюджет);
									 
			УстановитьРеквизитыПлательщика();
			УстановитьРеквизитыПолучателя();
			
			Если Не ЗначениеЗаполнено(ВидПлатежа) Тогда
				ВидПлатежаПоУмолчанию = ВосстановитьЗначение("ПлатежноеПоручениеВидПлатежа");
				ВидПлатежаБылСохранен = ВидПлатежаПоУмолчанию = "" 
				ИЛИ ЭлементыФормы.ВидПлатежа.СписокВыбора.НайтиПоЗначению(ВидПлатежаПоУмолчанию) <> Неопределено;
				Если ВидПлатежаБылСохранен Тогда
					ВидПлатежа = ВидПлатежаПоУмолчанию;
				Иначе
					ВидПлатежа = "Электронно";
				КонецЕсли;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОчередностьПлатежа) Тогда
				ОчередностьПлатежа = 6;
			КонецЕсли;
			
			СформироватьНазначениеПлатежа();
						
		КонецЕсли; 
		
	КонецЕсли;
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ПеречислениеВБюджет);

	// Поддержка механизма автонумерации
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
		
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	
	УстановитьВидимость();
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);	
	
	// Установим активный реквизит.
	УстановитьАктивныйРеквизит();

	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
	
	ЗаполнитьТекстПроДокументСписания();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
				
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры //ПриЗакрытии

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	ИначеЕсли ИмяСобытия = "ОбновитьФорму" 
		И ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
		Прочитать();
		Обновить();
		ЗаполнитьТекстПроДокументСписания();
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает активный реквизит.
Процедура УстановитьАктивныйРеквизит()
	
	СтруктураРеквизитов = Новый Структура("Дата,Организация,СчетОрганизации,Контрагент,СчетКонтрагента,СуммаПлатежа");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов);		
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	Оповестить("ОбновитьФорму", ВладелецФормы, ЭтотОбъект);
	
	СохранитьЗначение("ПлатежноеПоручениеВидПлатежа", ВидПлатежа);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Обработчик события "ПриИзменении" реквизита "Организация"
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	НачальноеЗаполнениеПриВыбореОрганизации();
	
	Если УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетОрганизации, Организация, мВалютаРегламентированногоУчета) Тогда
		ПриИзмененииСчетаОрганизации();
	КонецЕсли;
	
	КонтрагентПриИзменении(Элемент);
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
	                         Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ПеречислениеВБюджет);
							 
	УстановитьРеквизитыПлательщика();
	
	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетКонтрагента"
//
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииСчетаКонтрагента();
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
	                         Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ПеречислениеВБюджет);
	
	УстановитьРеквизитыПолучателя();
	
	УстановитьВидимость();
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры // СчетКонтрагентаПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетОрганизации"
//
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииСчетаОрганизации();
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
	                         Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ПеречислениеВБюджет);
							 
	УстановитьРеквизитыПлательщика();
	
	УстановитьВидимость();
	
КонецПроцедуры // СчетОрганизацииПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СуммаПлатежа"
//
Процедура СуммаПлатежаПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС();
	СформироватьНазначениеПлатежа(Истина);
	
КонецПроцедуры

// Обработчик события "ПриИзменении" реквизита "СтавкаНДС"
//
Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС();
	СформироватьНазначениеПлатежа(Истина);
	
КонецПроцедуры // СтавкаНДСПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СуммаНДС"
//
Процедура СуммаНДСПриИзменении(Элемент)
	
	СформироватьНазначениеПлатежа(Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент".
//
Процедура КонтрагентПриИзменении(Элемент)
	
	Если УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, Организация, 
		УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику)) Тогда
		ПриИзмененииДоговора();
	КонецЕсли;
	
	Если УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетКонтрагента, Контрагент, СчетОрганизации.ВалютаДенежныхСредств) Тогда
		ПриИзмененииСчетаКонтрагента();
	КонецЕсли;
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ПеречислениеВБюджет);
	
	УстановитьРеквизитыПолучателя();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        Неопределено, СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()
	
	Если Контрагент.Пустая() Тогда
		Контрагент = ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры // ПриИзмененииДоговора()

// Процедура для открытия формы изменения документа-основания
//
Процедура ДействияФормыИзменитьДокументОснование(Кнопка)
	
	ФормаВыбора = ПолучитьОбщуюФорму("ФормаВыбораДокументаОснования");
	ФормаВыбора.ДокументОбъект = ЭтотОбъект;
	ФормаВыбора.ОткрытьМодально();
	ЗаполнитьТекстПроДокументСписания();
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("ТекущиеДанныеСписка") Тогда
	
		ДанныеДляЗаполнения = ПодготовитьДанныеРеквизитовПлатежаВБюджетПоРегистру(ЗначениеВыбора);
		
		СтруктураРеквизитов = УправлениеДенежнымиСредствами.ПолучитьРеквизитыПлатежаВБюджетПоУмолчанию(
			Дата, Организация, ПеречислениеВБюджет, ДанныеДляЗаполнения.ВидПеречисленияВБюджет);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураРеквизитов);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеДляЗаполнения);
	
		АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
			Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ПеречислениеВБюджет);
	
		УстановитьРеквизитыПолучателя();
		
		СуммаДокумента = ОпределитьСуммуПлатежаВБюджет(ЗначениеВыбора);
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры

Процедура СчетОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаСчета = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(, Элемент);
	
	ФормаСчета.Отбор.ВалютаДенежныхСредств.Установить(мВалютаРегламентированногоУчета);
	
	Если НЕ Организация.Пустая() Тогда
		ФормаСчета.Отбор.Владелец.Установить(Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ФормаСчета.ПараметрТекущаяСтрока = Элемент.Значение;
	КонецЕсли;

	ФормаСчета.Открыть();
	
КонецПроцедуры

Процедура СчетКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мТекущийСчетКонтрагента = СчетКонтрагента;
	
	СтандартнаяОбработка = Ложь;
	
	ФормаСчета = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент);
	
	ФормаСчета.Отбор.ВалютаДенежныхСредств.Установить(мВалютаРегламентированногоУчета);
	
	Если НЕ Контрагент.Пустая() Тогда
		ФормаСчета.Отбор.Владелец.Установить(Контрагент);
	КонецЕсли;
	     	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ФормаСчета.ПараметрТекущаяСтрока = Элемент.Значение;
	КонецЕсли;

	ФормаСчета.Открыть();
	
КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВидПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранныйВидПлатежа = ЭлементыФормы.ВидПлатежа.СписокВыбора.НайтиПоЗначению(ВидПлатежа);
	ВыбранныйВидПлатежа = ВыбратьИзСписка(ЭлементыФормы.ВидПлатежа.СписокВыбора, Элемент, ВыбранныйВидПлатежа);
	Если ВыбранныйВидПлатежа <> Неопределено Тогда
		ВидПлатежа = ВыбранныйВидПлатежа.Значение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура НадписьРеквизитыПлатежейВБюджетНажатие(Элемент)
	
	ФормаРедактирования = ПолучитьФорму("РеквизитыПлатежейВБюджет", ЭтаФорма);
	ФормаРедактирования.ДокументОбъект = ЭтотОбъект;
	
	Если ФормаРедактирования.ОткрытьМодально() = Истина Тогда
		УстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеречислениеВБюджетПриИзменении(Элемент)
	
	Если ПеречислениеВБюджет Тогда
		ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		СтавкаНДС = "";
		СуммаНДС  = 0;
	Иначе
		ВидПеречисленияВБюджет = Неопределено;
		СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		ПересчитатьСуммуНДС();
	КонецЕсли;
	
	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	СформироватьНазначениеПлатежа(Истина);
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ПеречислениеВБюджет);
	УстановитьРеквизитыПлательщика();
	УстановитьРеквизитыПолучателя();
	
	СтруктураРеквизитов = УправлениеДенежнымиСредствами.ПолучитьРеквизитыПлатежаВБюджетПоУмолчанию(
		Дата, Организация, ПеречислениеВБюджет, ВидПеречисленияВБюджет);
		
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураРеквизитов);
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КнопкаЗаполнитьНажатие(Кнопка)
	
	ФормаСписка = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ПолучитьФормуСписка(, ЭтаФорма);
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	СписокОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
	ФормаСписка.РегистрСведенийСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаСписка.РегистрСведенийСписок.Отбор.Организация.Значение      = СписокОрганизаций;
	ФормаСписка.РегистрСведенийСписок.Отбор.Организация.использование = Истина;
	
	ФормаСписка.РежимВыбора = Истина;
	ФормаСписка.Заголовок   = "Выберите вид налога или иного платежа в бюджет";
	ФормаСписка.Открыть();
	
КонецПроцедуры

Процедура НадписьРеквизитыПлательщикаНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не выбрана организация");
		ТекущийЭлемент = ЭлементыФормы.Организация;
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(СчетОрганизации) Тогда
		Предупреждение("Не выбран банковский счет");
		ТекущийЭлемент = ЭлементыФормы.СчетОрганизации;
		Возврат;
	КонецЕсли;
	
	ФормаРедактирования = ПолучитьФорму("РеквизитыПлательщикаПолучателя", ЭтаФорма);
	ФормаРедактирования.ДокументОбъект = ЭтотОбъект;
	ФормаРедактирования.ЭтоПлательщик  = Истина;
	
	Если ФормаРедактирования.ОткрытьМодально() = Истина Тогда
		УстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьРеквизитыПолучателяНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Предупреждение("Не выбран получатель");
		ТекущийЭлемент = ЭлементыФормы.Контрагент;
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(СчетКонтрагента) Тогда
		Предупреждение("Не выбран счет получателя");
		ТекущийЭлемент = ЭлементыФормы.СчетКонтрагента;
		Возврат;
	КонецЕсли;
	
	ФормаРедактирования = ПолучитьФорму("РеквизитыПлательщикаПолучателя", ЭтаФорма);
	ФормаРедактирования.ДокументОбъект = ЭтотОбъект;
	ФормаРедактирования.ЭтоПлательщик  = Ложь;
	
	Если ФормаРедактирования.ОткрытьМодально() = Истина Тогда
		УстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ

ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Почтой");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Телеграфом");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Электронно");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Срочно");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("", "Не указывается");

