Перем мВалютаРегламентированногоУчета Экспорт;
Перем ЕстьУчетПоСтатьямДДС Экспорт;
Перем АвтоЗначенияРеквизитов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Определяет номер расчетного счета по
// переданному банковскому счету
//
// Параметры:
//  СчетКонтрагента - справочник.БанковскиеСчета
//
// Возвращаемое значение
//  Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(СчетКонтрагента)
	
	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);
	
	Возврат Результат;
	
КонецФункции // ВернутьРасчетныйСчет()

Функция ТекстНазначенияПлатежа(СчетКонтрагентаНазначения, ДоговорКонтрагентаНазначения, ПеречислениеНалога) Экспорт
	
	Если ЗначениеЗаполнено(СчетКонтрагентаНазначения.ТекстНазначения) Тогда
		ТекстНазначение = СчетКонтрагентаНазначения.ТекстНазначения;
	ИначеЕсли ПеречислениеНалога Тогда
		ТекстНазначение = "Оплата налога ";
	Иначе
		Если ЗначениеЗаполнено(ДоговорКонтрагентаНазначения) Тогда
			СтрокаДоговор = ДоговорКонтрагентаНазначения.Наименование;
			Если ДоговорКонтрагентаНазначения.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				ТекстНазначение = "Возврат оплаты по договору ";
			Иначе
				ТекстНазначение = "Оплата по договору ";
			КонецЕсли;
			ТекстНазначение = ТекстНазначение + СтрокаДоговор;
		Иначе					
			ТекстНазначение = "Оплата по счету ";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНазначение;
	
КонецФункции

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС() Экспорт
	
	ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС);
	СуммаНДС          = СуммаДокумента * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры // ПересчитатьСуммуНДС()

Процедура ПроверитьЗаполнениеРеквизитовНалоговыхПлатежей(СписокОшибок, П101, П105, П106, П107, П108, П109, П110)

	Если ПустаяСтрока(П105) Тогда
		СписокОшибок.Добавить("Необходимо заполнить поле реквизита для платежей в бюджет ""Код ОКАТО"".");
	КонецЕсли;
	
	Если (П101 = "08") И (СтрЗаменить(П110, "0", "") = "") Тогда
		
		СписокОшибок.Добавить("Возможно, неверно указано значение в поле реквизита для платежей в бюджет ""Статус составителя""." 
			+ Символы.ПС + Символы.Таб + "Статус ""08"" соответствует виду перечисления ""Иной платеж"".");
		
		Если СтрЗаменить(П106, "0", "") <> "" Тогда 
			СписокОшибок.Добавить("При статусе составителя ""08"" следует указать ""0"" в поле реквизита для платежей в бюджет ""Основание платежа"".");
		КонецЕсли;
		Если СтрЗаменить(П107, "0", "") <> "" Тогда
			СписокОшибок.Добавить("При статусе составителя ""08"" следует указать ""0"" в поле реквизита для платежей в бюджет ""Налоговый период"".");
		КонецЕсли;
		Если СтрЗаменить(П108, "0", "") <> "" Тогда
			СписокОшибок.Добавить("При статусе составителя ""08"" не следует заполнять поле реквизита для платежей в бюджет ""Номер документа"".");
		КонецЕсли;
		Если СтрЗаменить(П109, "0", "") <> "" Тогда
			СписокОшибок.Добавить("При статусе составителя ""08"" не следует заполнять поле реквизита для платежей в бюджет ""Дата документа"".");
		КонецЕсли;
		
	Иначе
		
		Если СтрЗаменить(СокрЛП(П106), "0", "") = "" Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					СписокОшибок.Добавить("Возможно, неверно указано значение в поле реквизита для платежей в бюджет ""Налоговый период""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(П106) <> 2 Тогда
			СписокОшибок.ДобавитьЗначение("Возможно, неверно заполнено поле реквизита для платежей в бюджет ""Основание платежа"".");
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					СписокОшибок.Добавить("Возможно, неверно указано значение в поле реквизита для платежей в бюджет ""Налоговый период""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("АП, АР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				СписокОшибок.Добавить("При основании платежа ""АП"" или ""АР"" следует указать ""0"" в поле реквизита для платежей в бюджет ""Налоговый период"".");
			КонецЕсли;
		ИначеЕсли Найти("ТР, РС, ОТ, РТ, ВУ, ПР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					СписокОшибок.Добавить("Возможно, неверно указано значение в поле реквизита для платежей в бюджет ""Налоговый период""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("ТП ,ЗД ", П106) > 0 Тогда
			Если СтрЗаменить(П107,"0","")<>"" Тогда
				ДД = Сред((П107), 1, 2);
				ММ = Сред((П107), 4, 2);
				ГГ = Сред((П107), 7, 4);
				
				Если НЕ ММ="" Тогда
					ММ = Число(Сред((П107), 4, 2));
				Иначе
					ММ = 0;
				КонецЕсли;	
				
				Если НЕ ГГ="" Тогда
					ГГ = Число(Сред((П107), 7, 4));
				Иначе
					ГГ = 0;
				КонецЕсли;
				
				Если (Найти("Д1, Д2, Д3, МС", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 12)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						СписокОшибок.Добавить("Возможно, неверно указано значение в поле реквизита для платежей в бюджет ""Налоговый период""."); 
					КонецЕсли;
				ИначеЕсли (Найти("КВ", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 4)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						СписокОшибок.Добавить("Неверно указано значение в поле реквизита для платежей в бюджет ""Налоговый период""."); 
					КонецЕсли;
				ИначеЕсли (Найти("ПЛ", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 2)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						СписокОшибок.Добавить("Неверно указано значение в поле реквизита для платежей в бюджет ""Налоговый период""."); 
					КонецЕсли;
				ИначеЕсли (Найти("ГД", ДД) > 0) Тогда
					Если (ММ <> 0)или
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						СписокОшибок.Добавить("Неверно указано значение в поле реквизита для платежей в бюджет ""Налоговый период""."); 
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(П107) Тогда
						СписокОшибок.Добавить("Возможно, неверно указано значение в поле реквизита для платежей в бюджет ""Налоговый период""."); 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П108, "0", "") <> "" Тогда
				СписокОшибок.Добавить("При основании платежа ""ТП"" или ""ЗД"" необходимо указывать ""0"" в поле реквизита для платежей в бюджет ""Номер документа"".");
			КонецЕсли;
			Если Найти("ЗД ", П106) > 0 Тогда
				Если СтрЗаменить(П109, "0", "") <> "" Тогда
					СписокОшибок.Добавить("При основании платежа ""ЗД"" не должно заполняться поле реквизита для платежей в бюджет ""Дата документа"".");
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("БФ", П106) > 0 Тогда
		Иначе
			СписокОшибок.Добавить("Неверно указано значение в поле реквизита для платежей в бюджет ""Основание платежа"".");
		КонецЕсли;
		Если СтрЗаменить(П110,"0","")="" Тогда
		ИначеЕсли Найти("НС, АВ, ПЕ, ПЦ, СА, АШ, ИШ, ПЛ, ГП, ВЗ", П110) > 0 Тогда
		Иначе
			СписокОшибок.Добавить("Неверно указано значение в поле реквизита для платежей в бюджет ""Тип платежа"".");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовТаможенныхПлатежей(СписокОшибок, П101, П105, П106, П107, П108, П109, П110)

	Если П101 = "08" Тогда
		СписокОшибок.Добавить("Возможно, неверно указано значение в поле реквизита для платежей в бюджет ""Статус составителя""." 
			+ Символы.ПС + Символы.Таб + "Статус ""08"" соответствует виду перечисления ""Иной платеж"".");
	КонецЕсли;
	
	Если ПустаяСтрока(П105) Тогда
		СписокОшибок.Добавить("Возможно, следует указать значение в поле реквизита для платежей в бюджет ""Код ОКАТО"".");
	КонецЕсли;
	
	Если (СтрЗаменить(СокрЛП(П106), "0", "") <> "")
		И (Найти("ДЕ, ПО, КВ, КТ, ИД, ИП, ТУ, БД, ИН, КП", П106) = 0) Тогда
		СписокОшибок.Добавить("Неверно указано значение в поле реквизита для платежей в бюджет ""Основание платежа""."); 
	КонецЕсли;
	
	Если (СтрЗаменить(СокрЛП(П107), "0", "") = "") Тогда
		Сообщить("Не указан код таможенного органа.", СтатусСообщения.Важное);
		ЕстьОшибки = Истина; 
	КонецЕсли;
	
	Если (СтрЗаменить(П110,"0","") <> "") 
		И (Найти("ТП, ШТ, ЗД, ПЕ", П110) = 0) Тогда
		СписокОшибок.Добавить("Неверно указано значение в поле реквизита для платежей в бюджет ""Тип платежа"".");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовИныхПлатежейВБюджет(СписокОшибок, П101, П105, П106, П107, П108, П109, П110)

	Если П101 <> "08" Тогда
		СписокОшибок.Добавить("Возможно, неверно указано значение в поле реквизита для платежей в бюджет ""Статус составителя""." 
			+ Символы.ПС + Символы.Таб + "Вид перечисления ""Иной платеж"" соответствует статусу составителя ""08"".");
	КонецЕсли;
		
	Если ПустаяСтрока(П105) Тогда
		СписокОшибок.Добавить("Необходимо заполнить поле реквизита для платежей в бюджет ""Код ОКАТО"".");
	КонецЕсли;
	
	Если СтрЗаменить(П106, "0", "") <> "" Тогда 
		СписокОшибок.Добавить("Следует указать ""0"" в поле реквизита для платежей в бюджет ""Основание платежа"".");
	КонецЕсли;
	
	Если СтрЗаменить(П107, "0", "") <> "" Тогда
		СписокОшибок.Добавить("Следует указать ""0"" в поле реквизита для платежей в бюджет ""Налоговый период"".");
	КонецЕсли;
	
	Если СтрЗаменить(П108, "0", "") <> "" Тогда
		СписокОшибок.Добавить("Следует указать ""0"" в поле реквизита для платежей в бюджет ""Номер документа"".");
	КонецЕсли;
	
	Если СтрЗаменить(П109, "0", "") <> "" Тогда
		СписокОшибок.Добавить("Не следует заполнять поле реквизита для платежей в бюджет ""Дата документа"".");
	КонецЕсли;
	
	Если СтрЗаменить(П110, "0", "") <> "" Тогда
		СписокОшибок.Добавить("Следует указать ""0"" в поле реквизита для платежей в бюджет ""Тип платежа"".");
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьДанныеРеквизитовПлатежаВБюджетПоРегистру(СтрокаРегистраРеквизитов)

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВидПеречисленияВБюджет", СтрокаРегистраРеквизитов.ВидПеречисленияВБюджет);
	СтруктураДанных.Вставить("КодБК", СтрокаРегистраРеквизитов.ВидПлатежа.КодБК);
	СтруктураДанных.Вставить("Контрагент", СтрокаРегистраРеквизитов.Получатель);
	СтруктураДанных.Вставить("СчетКонтрагента", СтрокаРегистраРеквизитов.СчетПолучателя);
	СтруктураДанных.Вставить("СтатусСоставителя", СтрокаРегистраРеквизитов.СтатусСоставителя);
	СтруктураДанных.Вставить("ПоказательОснования", СтрокаРегистраРеквизитов.ПоказательОснования);
	СтруктураДанных.Вставить("ПоказательТипа", СтрокаРегистраРеквизитов.ПоказательТипа);
	СтруктураДанных.Вставить("ОчередностьПлатежа", СтрокаРегистраРеквизитов.ОчередностьПлатежа);
	СтруктураДанных.Вставить("НазначениеПлатежа", СтрокаРегистраРеквизитов.НазначениеПлатежа);
	
	ЭтоФизЛицо = (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо );
	
	СтруктураДанных.Вставить("КПППлательщика", ?(ЭтоФизЛицо, "0", Организация.КПП));
	СтруктураДанных.Вставить("КодОКАТО", Организация.КодПоОКАТО);
	
	// {КОРП
	Если ЗначениеЗаполнено(СтрокаРегистраРеквизитов.РегистрацияВИФНС) Тогда
		СтруктураДанных.Вставить("КПППлательщика", ?(ЭтоФизЛицо, "0", СтрокаРегистраРеквизитов.РегистрацияВИФНС.КПП));
		СтруктураДанных.Вставить("КодОКАТО", СтрокаРегистраРеквизитов.РегистрацияВИФНС.КодПоОКАТО);
	КонецЕсли;
	// }КОРП
	
	Если СтрокаРегистраРеквизитов.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		
		ДатаНачисленияНалога = НачалоМесяца(Дата) - 1;
		
		Если СтрокаРегистраРеквизитов.ПоказательПериода = "КВ" Тогда
			
			ДатаОкончания = КонецКвартала(ДатаНачисленияНалога);
			ДатаНачала    = НачалоКвартала(ДатаОкончания);
			СтруктураДанных.Вставить("ПоказательПериода", 
				"КВ." + Формат(ДатаОкончания, "ДФ=кк") 
				+ "." + Формат(ДатаОкончания, "ДФ=гггг"));
			СтруктураДанных.Вставить("НазначениеПлатежа", 
				СтрокаРегистраРеквизитов.НазначениеПлатежа 
				+ " за " + ПредставлениеПериода(ДатаНачала, КонецДня(ДатаОкончания), "ФП = Истина"));
				
		ИначеЕсли СтрокаРегистраРеквизитов.ПоказательПериода = "МС" Тогда
				
			ДатаОкончания = КонецМесяца(ДатаНачисленияНалога);
			ДатаНачала    = НачалоМесяца(ДатаОкончания);
			СтруктураДанных.Вставить("ПоказательПериода", 
				"МС." + Формат(ДатаОкончания, "ДФ=ММ") 
				+ "." + Формат(ДатаОкончания, "ДФ=гггг"));
			СтруктураДанных.Вставить("НазначениеПлатежа", 
				СтрокаРегистраРеквизитов.НазначениеПлатежа 
				+ " за " + ПредставлениеПериода(ДатаНачала, КонецДня(ДатаОкончания), "ФП = Истина"));
				
		ИначеЕсли СтрокаРегистраРеквизитов.ПоказательПериода = "ПЛ" Тогда
			
			ДатаОкончания = КонецГода(ДатаНачисленияНалога);
			ДатаНачала    = НачалоГода(ДатаОкончания);
			Если Месяц(ДатаНачисленияНалога) <= 6 Тогда
				СтруктураДанных.Вставить("ПоказательПериода", 
					"ПЛ.01." + Формат(ДатаОкончания, "ДФ=гггг"));
				СтруктураДанных.Вставить("НазначениеПлатежа", 
					СтрокаРегистраРеквизитов.НазначениеПлатежа 
					+ " за 1 полугодие " + ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП = Истина"));
			Иначе
				СтруктураДанных.Вставить("ПоказательПериода", 
					"ПЛ.02." + Формат(ДатаОкончания, "ДФ=гггг"));
				СтруктураДанных.Вставить("НазначениеПлатежа", 
					СтрокаРегистраРеквизитов.НазначениеПлатежа 
					+ " за 2 полугодие " + ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП = Истина"));
			КонецЕсли;
				
		ИначеЕсли СтрокаРегистраРеквизитов.ПоказательПериода = "ГД" Тогда
			
			ДатаОкончания = КонецГода(ДатаНачисленияНалога);
			ДатаНачала    = НачалоГода(ДатаОкончания);
			СтруктураДанных.Вставить("ПоказательПериода", 
				"ГД.00." + Формат(ДатаОкончания, "ДФ=гггг"));
			СтруктураДанных.Вставить("НазначениеПлатежа", 
				СтрокаРегистраРеквизитов.НазначениеПлатежа 
				+ " за " + ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП = Истина"));
			
		Иначе
			
			СтруктураДанных.Вставить("ПоказательПериода", "0");
			СтруктураДанных.Вставить("НазначениеПлатежа", СтрокаРегистраРеквизитов.НазначениеПлатежа);
			
		КонецЕсли;
		
	Иначе
		СтруктураДанных.Вставить("ПоказательПериода", СтрокаРегистраРеквизитов.ПоказательПериода);
		СтруктураДанных.Вставить("НазначениеПлатежа", СтрокаРегистраРеквизитов.НазначениеПлатежа);
	КонецЕсли;
	
	Возврат СтруктураДанных;

КонецФункции // ПодготовитьДанныеРеквизитовПлатежаВБюджетПоРегистру()

Процедура ОпределитьНалоговыйПлатежПоСчету(Организация, Получатель, СчетПолучателя, Счет, Субконто1, Субконто2, Субконто3)
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Организация);
	МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
	
	ЗначениеОснования = ""; //ПоказательОснования
	КодВидаПлатежа = "";    //14 знак в КБК
			
	Если ЗначениеЗаполнено(Субконто1) и ТипЗнч(Субконто1) = Тип("ПеречислениеСсылка.ВидыПлатежейВГосБюджет") Тогда
		Если Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.НалогСам Тогда
			КодВидаПлатежа = "1";
		ИначеЕсли Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.НалогАкт Тогда
			КодВидаПлатежа = "1";
		ИначеЕсли Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			КодВидаПлатежа = "1";
		ИначеЕсли Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.ПениАкт Тогда
			КодВидаПлатежа = "2";
		ИначеЕсли Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.ПениСам Тогда
			КодВидаПлатежа = "2";
		ИначеЕсли Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Штраф Тогда
			КодВидаПлатежа = "3";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетНалога", Счет);
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("СчетПолучателя", СчетПолучателя);
	Запрос.УстановитьПараметр("Организация", МассивОрганизаций);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа,
	|	РеквизитыУплатыНалоговИПлатежейВБюджет.Организация,
	// {ОбособленныеПодразделения
	|	РеквизитыУплатыНалоговИПлатежейВБюджет.РегистрацияВИФНС,
	// }ОбособленныеПодразделения
	|	РеквизитыУплатыНалоговИПлатежейВБюджет.Получатель,
	|	РеквизитыУплатыНалоговИПлатежейВБюджет.СчетПолучателя,
	|	РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПеречисленияВБюджет,
	|	РеквизитыУплатыНалоговИПлатежейВБюджет.СтатусСоставителя,
	|	РеквизитыУплатыНалоговИПлатежейВБюджет.ПоказательОснования,
	|	РеквизитыУплатыНалоговИПлатежейВБюджет.ПоказательТипа,
	|	РеквизитыУплатыНалоговИПлатежейВБюджет.ОчередностьПлатежа,
	|	РеквизитыУплатыНалоговИПлатежейВБюджет.НазначениеПлатежа,
	|	РеквизитыУплатыНалоговИПлатежейВБюджет.ПоказательПериода
	|ИЗ
	|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК РеквизитыУплатыНалоговИПлатежейВБюджет
	|ГДЕ
	|	РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.СчетУчета = &СчетНалога
	|	И РеквизитыУплатыНалоговИПлатежейВБюджет.Получатель = &Получатель
	|	И РеквизитыУплатыНалоговИПлатежейВБюджет.СчетПолучателя = &СчетПолучателя
	|	И РеквизитыУплатыНалоговИПлатежейВБюджет.Организация В(&Организация)";
	
	Если ЗначениеЗаполнено(КодВидаПлатежа) Тогда
		Запрос.УстановитьПараметр("КодВидаПлатежа", КодВидаПлатежа);
	    Запрос.Текст = Запрос.Текст + "
		|	И ПОДСТРОКА(РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.КодБК, 14, 1) = &КодВидаПлатежа";
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПеречислениеВБюджет = Истина;
		
		ДанныеДляЗаполнения = ПодготовитьДанныеРеквизитовПлатежаВБюджетПоРегистру(Выборка);
		СтруктураРеквизитов = УправлениеДенежнымиСредствами.ПолучитьРеквизитыПлатежаВБюджетПоУмолчанию(Дата, Организация, ПеречислениеВБюджет, ДанныеДляЗаполнения.ВидПеречисленияВБюджет);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураРеквизитов);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеДляЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет()
	
	СписокОшибок = Новый СписокЗначений();
	
	П101 = СокрЛП(СтатусСоставителя);
	П104 = СокрЛП(КодБК);
	П105 = СокрЛП(КодОКАТО);
	Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		П105 = ?(ПустаяСтрока(П105), "0", П105);
	КонецЕсли;
	П106 = СокрЛП(ПоказательОснования);
	П107 = ?(ПустаяСтрока(СокрЛП(СтрЗаменить(ПоказательПериода, ".", ""))) = 1, "", ПоказательПериода);
	П107 = ?(СокрЛП(СтрЗаменить(ПоказательПериода, ".", "")) = "0", "", ПоказательПериода);
	П108 = СокрЛП(ПоказательНомера);
	П109 = ?(НЕ ЗначениеЗаполнено(ПоказательДаты), "0", Строка(ПоказательДаты));
	П110 = СокрЛП(ПоказательТипа);
	
	// Проверки, обшие для всех видов перечислений в бюджет
	
	Если (Найти("01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20", П101) = 0) 
		ИЛИ ПустаяСтрока(СокрЛП(П101)) Тогда
		СписокОшибок.Добавить("Неверное значение поля реквизита для платежей в бюджет ""Статус составителя"".");
	КонецЕсли;
	
	Если (СтрЗаменить(П104, "0", "") = "") И (Найти("07", П101) = 0) Тогда
		СписокОшибок.Добавить("Необходимо заполнить поле реквизита для платежей в бюджет ""КБК"".");
	КонецЕсли;
	
	// Проверки, зависящие от вида перечисления в бюджет
	
	Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		ПроверитьЗаполнениеРеквизитовНалоговыхПлатежей(СписокОшибок, П101, П105, П106, П107, П108, П109, П110);
	ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		ПроверитьЗаполнениеРеквизитовТаможенныхПлатежей(СписокОшибок, П101, П105, П106, П107, П108, П109, П110);
	Иначе
		ПроверитьЗаполнениеРеквизитовИныхПлатежейВБюджет(СписокОшибок, П101, П105, П106, П107, П108, П109, П110);
	КонецЕсли;
	
	//Выводим список найденных ошибок
	
	Для Ном = 0 по СписокОшибок.Количество()-1 Цикл
		Сообщить(СписокОшибок.Получить(Ном), СтатусСообщения.Важное);
	КонецЦикла;
	
	Возврат СписокОшибок;
	
КонецФункции // ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Формирует печатную форму 
// платежного поручения
//
// Параметры:
//  ТабДок - табличный документ
//
Функция ПечатьПлатежногоПоручения() Экспорт
	
	ЕстьОшибки = Ложь;
	
	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		ЕстьОшибки = Истина;
	КонецЕсли;

	Если СчетОрганизации.Пустая() Тогда
		Сообщить("Не указан банковский счет организации.", СтатусСообщения.Важное);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если Контрагент.Пустая() Тогда
		Сообщить("Не указан получатель.", СтатусСообщения.Важное);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если СчетКонтрагента.Пустая() Тогда
		Сообщить("Не указан счет получателя.", СтатусСообщения.Важное);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	НомерПечать = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);

	Если Прав(НомерПечать,3) = "000" Тогда
		Сообщить("Номер платежного поручения не может оканчиваться на ""000""!
		|	(Приложение 4 к Положению Банка России ""О безналичных расчетах в Российской Федерации"" 
		|	от 3 октября 2002 г. No. 2-П в ред. Указания ЦБ РФ от 03.03.2003 No. 1256-У)", 
		СтатусСообщения.Важное);
		ЕстьОшибки = Истина;
	КонецЕсли;

	Если СуммаДокумента = 0 Тогда
		Сообщить("Не указана сумма.", СтатусСообщения.Важное);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";

	Макет = ПолучитьОбщийМакет("ПлатежноеПоручение");
	Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");

	Обл.Параметры.НаименованиеНомер = "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № " + НомерПечать;
	
	МесяцПрописью = СчетОрганизации.МесяцПрописью;
	ФорматДаты    = "ДФ=" + ?(МесяцПрописью, "'дд ММММ гггг'", "'дд.ММ.гггг'");

	Обл.Параметры.ДатаДокумента = Формат(Дата,ФорматДаты);
	
	// Сумма платежного документа
	
	СуммаБезКопеек  = СчетОрганизации.СуммаБезКопеек;
	Обл.Параметры.СуммаЧислом   = ФормированиеПечатныхФорм.ФорматироватьСуммуПлатежногоДокумента(
	                              СуммаДокумента, СуммаБезКопеек);
	Обл.Параметры.СуммаПрописью = ФормированиеПечатныхФорм.ФорматироватьСуммуПрописьюПлатежногоДокумента(
	                              СуммаДокумента, ВалютаДокумента, СуммаБезКопеек);
	
	// Реквизиты плательщика 
	
	Обл.Параметры.ИННПлательщика   = ИННПлательщика;
	Обл.Параметры.КПППлательщика   = КПППлательщика;
	Обл.Параметры.ТекстПлательщика = ТекстПлательщика;
	
	// Реквизиты банка плательщика
	
	БанкПлательщика = ?(НЕ ЗначениеЗаполнено(СчетОрганизации.БанкДляРасчетов), 
		СчетОрганизации.Банк, СчетОрганизации.БанкДляРасчетов);
	Обл.Параметры.НаименованиеБанкаПлательщика = "" + БанкПлательщика + " " + БанкПлательщика.Город;
	Обл.Параметры.НомерСчетаПлательщика         = ВернутьРасчетныйСчет(СчетОрганизации);
	Обл.Параметры.БикБанкаПлательщика           = БанкПлательщика.Код;
	Обл.Параметры.СчетБанкаПлательщика          = БанкПлательщика.КоррСчет;

	// Реквизиты получателя 
	
	Обл.Параметры.ИННПолучателя   = ИННПолучателя;
	Обл.Параметры.КПППолучателя   = КПППолучателя;
	Обл.Параметры.ТекстПолучателя = ТекстПолучателя;
	
	// Реквизиты банка получателя
	
	БанкПолучателя = ?(НЕ ЗначениеЗаполнено(СчетКонтрагента.БанкДляРасчетов), 
		СчетКонтрагента.Банк, СчетКонтрагента.БанкДляРасчетов);
	Обл.Параметры.НаименованиеБанкаПолучателя = "" + БанкПолучателя + " " + БанкПолучателя.Город;
	Обл.Параметры.НомерСчетаПолучателя        = ВернутьРасчетныйСчет(СчетКонтрагента);
	Обл.Параметры.БикБанкаПолучателя          = БанкПолучателя.Код;
	Обл.Параметры.СчетБанкаПолучателя         = БанкПолучателя.КоррСчет;
	
	// Прочие реквизиты
	
	Обл.Параметры.ВидПлатежа        = ВидПлатежа;
	Обл.Параметры.НазначениеПлатежа = СокрЛП(НазначениеПлатежа);
	Обл.Параметры.Очередность       = ОчередностьПлатежа;
	Обл.Параметры.СрокПлатежа       = "";

	// Реквизиты для перечисления налогов
	
	Если ПеречислениеВБюджет Тогда
		
		ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет();
		
		Обл.Параметры.СтатусСоставителя   = СокрЛП(СтатусСоставителя);
		Обл.Параметры.КодБК               = ?(ПустаяСтрока(КодБК),"",СокрЛП(КодБК));
		Обл.Параметры.КодОКАТО            = ?(ПустаяСтрока(КодОКАТО),
			?(ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж, "0", ""),
			СокрЛП(КодОКАТО));
		Обл.Параметры.ПоказательОснования = ?(ПустаяСтрока(ПоказательОснования),"0",СокрЛП(ПоказательОснования));
		Обл.Параметры.ПоказательНомера    = ?(ПустаяСтрока(ПоказательНомера),"0",СокрЛП(ПоказательНомера));
		Обл.Параметры.ПоказательДаты      = ?(ПустаяСтрока(ПоказательДаты),"0",СокрЛП(ПоказательДаты));
		Обл.Параметры.ПоказательТипа      = ?(ПустаяСтрока(ПоказательТипа),"0",СокрЛП(ПоказательТипа));
		Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
			Обл.Параметры.ПоказательПериода = СокрЛП(ПоказательПериода);
			Иначе
			Если (ПустаяСтрока(ПоказательПериода)) ИЛИ (ПоказательПериода = "  .  .    ") Тогда
				Обл.Параметры.ПоказательПериода = "0";
			Иначе
				Обл.Параметры.ПоказательПериода = СокрЛП(ПоказательПериода);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Обл.Параметры.ИННПлательщика = "ИНН " + Обл.Параметры.ИННПлательщика;
	Обл.Параметры.КПППлательщика = "КПП " + Обл.Параметры.КПППлательщика;
	Обл.Параметры.ИННПолучателя  = "ИНН " + Обл.Параметры.ИННПолучателя;
	Обл.Параметры.КПППолучателя  = "КПП " + Обл.Параметры.КПППолучателя;
	
	ТабДокумент.Вывести(Обл);

	Возврат ТабДокумент;

КонецФункции // ПечатьПлатежногоПоручения()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПлатежноеПоручение" тогда
		
		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПлатежногоПоручения();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПлатежноеПоручение","Платежное поручение");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ЗаполнитьДокументПоОснованиюРегл(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")	Тогда
		
		ВалютаДокумента    = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;
		Организация        = Основание.Организация;
		
		УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетОрганизации, Организация, мВалютаРегламентированногоУчета);
		
		СуммаКВыплате  = Основание.Зарплата.Итог("Сумма") + Основание.Зарплата.Итог("КомпенсацияЗаЗадержкуЗарплаты");
		СуммаДокумента = СуммаКВыплате;
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание) 
	
	Если (Основание = Неопределено) ИЛИ Не ЭтотОбъект.Метаданные().Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДокумента             = мВалютаРегламентированногоУчета;
	ПараметрыДокументаОснования = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Основание);
	ВидДокументаОснования       = Основание.Метаданные().Имя;
	ДокументОснование           = ПараметрыДокументаОснования.Ссылка;
	
	Если ВидДокументаОснования = "ПоступлениеТоваровУслуг"
		или ВидДокументаОснования = "ПоступлениеДопРасходов" 
		или ВидДокументаОснования = "ПоступлениеНМА"
		или ВидДокументаОснования = "ОтчетКомиссионераОПродажах"
		или ВидДокументаОснования = "ОтчетКомитентуОПродажах"
		или ВидДокументаОснования = "ВозвратТоваровОтПокупателя" тогда
		
		/// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание, Ложь);
		
		Контрагент   = ПараметрыДокументаОснования.Контрагент;
		ИННПолучателя = Контрагент.ИНН;
		ДоговорКонтрагента = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору           = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
		Если ВидРасчетовПоДоговору=Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте тогда
			ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = Новый ТаблицаЗначений();
		ТаблицаПлатежей.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		ТаблицаПлатежей.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
		ТаблицаПлатежей.Колонки.Добавить("СуммаНДС",     ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		
		Если ВидДокументаОснования = "ОтчетКомиссионераОПродажах"тогда
			СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
			
			СтрокаТаблицыСумм.СтавкаНДС	= ПараметрыДокументаОснования.СтавкаНДСВознаграждения;
			СтрокаТаблицыСумм.СуммаНДС	= Основание.Товары.Итог("СуммаНДСВознаграждения");
			СтрокаТаблицыСумм.СуммаПлатежа	= ?(ПараметрыДокументаОснования.СуммаВключаетНДС, ПараметрыДокументаОснования.СуммаВознаграждения, ПараметрыДокументаОснования.СуммаВознаграждения+СтрокаТаблицыСумм.СуммаНДС);
		Иначе
			СуммаДокументаОснования = УчетНДС.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			Если ВидДокументаОснования = "ОтчетКомитентуОПродажах" Тогда
				СуммаДокументаОснования.ЗаполнитьЗначения(0, "СуммаНДС");
				Если ПараметрыДокументаОснования.УдержатьВознаграждение Тогда 
					СуммаКоррПлатежа= СуммаДокументаОснования.Итог("СуммаПлатежа") - ПараметрыДокументаОснования.СуммаВознаграждения;
					НоваяКолонкаСумм = ОбщегоНазначения.РаспределитьПропорционально(СуммаКоррПлатежа,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
					Если не НоваяКолонкаСумм = Неопределено Тогда
						СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаСумм,"СуммаПлатежа");
					КонецЕсли; 
					
					Если Не ПараметрыДокументаОснования.СуммаВключаетНДС Тогда
						СуммаКоррНДС	= СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДСВознаграждения");
						НоваяКолонкаНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаКоррНДС,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
						Если не НоваяКолонкаНДС = Неопределено Тогда
							СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС,"СуммаПлатежа");
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;
				Если ПараметрыДокументаОснования.ДоговорКонтрагента.УчетАгентскогоНДС И Основание.Дата >= '20060101000000' Тогда
					СуммаКоррНДС	= СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДС");
					НоваяКолонкаНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаКоррНДС,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
					Если не НоваяКолонкаНДС = Неопределено Тогда
						СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС,"СуммаПлатежа");
					КонецЕсли; 
				КонецЕсли;
			ИначеЕсли ВидДокументаОснования = "ПоступлениеДопРасходов" тогда
				Если Не(ПараметрыДокументаОснования.Сумма=0 и ПараметрыДокументаОснования.СуммаНДС=0)  тогда
					Если СуммаДокументаОснования.Количество()=0 тогда
						СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
					Иначе
						СтрокаТаблицыСумм = СуммаДокументаОснования[0];
					КонецЕсли;
					СтрокаТаблицыСумм.СуммаПлатежа	= СтрокаТаблицыСумм.СуммаПлатежа + ПараметрыДокументаОснования.Сумма;
					СтрокаТаблицыСумм.СуммаНДС		= СтрокаТаблицыСумм.СуммаНДС + ПараметрыДокументаОснования.СуммаНДС;
					Если не ПараметрыДокументаОснования.СуммаВключаетНДС Тогда
						СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа+ПараметрыДокументаОснования.СуммаНДС;
					КонецЕсли; 
				КонецЕсли;
				СуммаДокументаОснования.ЗаполнитьЗначения(ПараметрыДокументаОснования.СтавкаНДС,"СтавкаНДС");
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			Если ДоговорКонтрагента.УчетАгентскогоНДС Тогда
				СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаПлатежа - СтрокаПлатеж.СуммаНДС;
				СтрокаПлатеж.СуммаНДС = 0;
				СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПлатежей.Свернуть(, "СуммаПлатежа, СтавкаНДС, СуммаНДС");
		
		СуммаДокумента = ТаблицаПлатежей.Итог("СуммаПлатежа");
		СуммаНДС       = ТаблицаПлатежей.Итог("СуммаНДС");
		СтавкаНДС      = ?(ТаблицаПлатежей.Количество() = 1, ТаблицаПлатежей[0].СтавкаНДС, "");
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
		
		Если Основание.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
			Сообщить("Платежная ведомость оформлена на выплату через кассу.");
			Возврат;
		КонецЕсли;
		
		/// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание, Ложь);
		
		ЗаполнитьДокументПоОснованиюРегл(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		/// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание, Ложь);
				
		СчетКонтрагента					= ПараметрыДокументаОснования.СчетКонтрагента;
		СчетОрганизации					= ПараметрыДокументаОснования.СчетОрганизации;
				
		Контрагент   					= ПараметрыДокументаОснования.Контрагент;
		ИННПолучателя 					= Контрагент.ИНН;
		ДоговорКонтрагента 				= ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору           = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
		
		Если ВидРасчетовПоДоговору=Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте тогда
			ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		НазначениеПлатежа 		= ПараметрыДокументаОснования.НазначениеПлатежа;
		СуммаДокумента 			= ПараметрыДокументаОснования.СуммаДокумента;
		
		Если Основание.РасшифровкаПлатежа.Количество() = 1 Тогда 
			ДоговорКонтрагента 	= Основание.РасшифровкаПлатежа[0].ДоговорКонтрагента;
			СтавкаНДС 			= Основание.РасшифровкаПлатежа[0].СтавкаНДС;
			СуммаНДС 			= Основание.РасшифровкаПлатежа[0].СуммаНДС;
		ИначеЕсли Основание.РасшифровкаПлатежа.Количество() > 1 Тогда 
			СтавкаНДС 			= Перечисления.СтавкиНДС.ПустаяСсылка();
			СуммаНДС 			= Основание.РасшифровкаПлатежа.Итог("СуммаНДС");			
		КонецЕсли;
		
		Если ПараметрыДокументаОснования.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога ИЛИ 
			ПараметрыДокументаОснования.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
			ОпределитьНалоговыйПлатежПоСчету(ПараметрыДокументаОснования.Организация, ПараметрыДокументаОснования.Контрагент, ПараметрыДокументаОснования.СчетКонтрагента, ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, ПараметрыДокументаОснования.СубконтоДт1, ПараметрыДокументаОснования.СубконтоДт2, ПараметрыДокументаОснования.СубконтоДт3);
			
			Если Не ПеречислениеВБюджет И Основание.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
				ПеречислениеВБюджет = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Основание.Проведен Тогда
			Оплачено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Ответственный             = глЗначениеПеременной("глТекущийПользователь");
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = "";
	Оплачено = Ложь;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
ЕстьУчетПоСтатьямДДС = УправлениеДенежнымиСредствами.ЕстьУчетПоСтатьямДДС();
