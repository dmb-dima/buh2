Перем ОбновитьФормуПомощника;

// Процедура установки быстрого отбора
//
Процедура УстановитьОтбор()
	
	ОтключитьОбработчикИзмененияДанных("ДокументСписок.Отбор");
	
	Отбор.Организация.Установить(Организация, НЕ Организация.Пустая());
	Отбор.РазделУчета.Установить(РазделУчета, НЕ РазделУчета.Пустая());	
	
	ПодключитьОбработчикИзмененияДанных("ДокументСписок.Отбор", "ДокументСписокПриИзмененииОтбора", Истина);

КонецПроцедуры // УстановитьОтбор()	

// Процедура вызывается при изменении значения быстрого отбора по организации
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьОтбор();

КонецПроцедуры


// Процедура вызова просмотра движений документа
//
Процедура ДействияФормыРезультатПроведения(Кнопка)
	
	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено тогда
		Возврат
	КонецЕсли;
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(Ложь,ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка,
	ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка.ПолучитьОбъект());
	
КонецПроцедуры

Процедура ДействияФормыДействиеСвойства(Кнопка)
	
	РаботаСДиалогами.ОткрытьСвойстваИзСписка(ЭлементыФормы.ДокументСписок.ТекущаяСтрока, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ДокументСписок.Колонки.Добавить("Организация", Ложь);
	
	// Проверка однофирменности
	ОтборПоОрганизации = РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма,, глЗначениеПеременной("ОсновнаяОрганизация"), "ДокументСписок");
	
	Организация = Неопределено;
	Если ОтборПоОрганизации <> Неопределено Тогда
		Если ОтборПоОрганизации.ВидСравнения = ВидСравнения.Равно
			И ОтборПоОрганизации.Использование Тогда
			Организация = ОтборПоОрганизации.Значение;
		КонецЕсли; 
	КонецЕсли;
	
	// {ОбособленныеПодразделения
	ЭлементыФормы.ДокументСписок.Колонки.ПодразделениеОрганизации.Видимость = Истина;
	// }ОбособленныеПодразделения 	
		
	ОбновитьФормуПомощника = 0;

	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(ЭлементыФормы.ДокументСписок.ТекущаяСтрока));
	
	ПодключитьОбработчикИзмененияДанных("ДокументСписок.Отбор", "ДокументСписокПриИзмененииОтбора", Истина);

КонецПроцедуры // ПриОткрытии()

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = ЭлементыФормы.ДокументСписок.ТекущаяСтрока Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	ИначеЕсли ИмяСобытия = "ИзменениеТекущейОрганизации" Тогда
		РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма,, глЗначениеПеременной("ОсновнаяОрганизация"), "ДокументСписок", Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ

Процедура ДокументСписокПриАктивизацииСтроки(Элемент)
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(ЭлементыФормы.ДокументСписок.ТекущаяСтрока));
	
КонецПроцедуры

// Обработчик события "ПередНачаломДобавления" табличного поля.
//
Процедура ДокументСписокПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность Тогда
		Отказ = Истина;
		
		КлючУникальностиДокумента = Новый Структура();
		КлючУникальностиДокумента.Вставить("Организация", Организация);
		Если ДокументСписок.Отбор.РазделУчета.Использование Тогда
			КлючУникальностиДокумента.Вставить("РазделУчета", РазделУчета);
		КонецЕсли;
		Если ДокументСписок.Отбор.ПодразделениеОрганизации.Использование Тогда
			КлючУникальностиДокумента.Вставить("ПодразделениеОрганизации", ДокументСписок.Отбор.ПодразделениеОрганизации.Значение);
		Иначе
			КлючУникальностиДокумента.Вставить("ПодразделениеОрганизации", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		КонецЕсли;
		ДокументВводНачальныхОстатков = Документы.ВводНачальныхОстатков.ПолучитьФорму("ФормаДокумента",, КлючУникальностиДокумента);
		ДокументВводНачальныхОстатков.Организация = ДокументСписок.Отбор.Организация.Значение;
		ДокументВводНачальныхОстатков.ЭлементыФормы.Организация.ТолькоПросмотр = Истина;
		Если ДокументСписок.Отбор.РазделУчета.Использование Тогда
			ДокументВводНачальныхОстатков.РазделУчета = ДокументСписок.Отбор.РазделУчета.Значение;
		КонецЕсли;
		ДокументВводНачальныхОстатков.Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПередПроведением" табличного поля.
//
Процедура ДокументСписокПередПроведением(Элемент, Отказ)
	
	ОбновитьФормуПомощника = 1;
	
КонецПроцедуры

// Обработчик события "ПередОтменойПроведения" табличного поля.
//
Процедура ДокументСписокПередОтменойПроведения(Элемент, Отказ)
	
	ОбновитьФормуПомощника = 1;
	
КонецПроцедуры

// Обработчик события "ПередУстановкойПометкиУдаления" табличного поля.
//
Процедура ДокументСписокПередУстановкойПометкиУдаления(Элемент, Отказ)
	
	ОбновитьФормуПомощника = 2;
	
КонецПроцедуры

// Обработчик события "ПриПолученииДанных" табличного поля.
//
Процедура ДокументСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновитьФормуПомощника = 1 Тогда
		Оповестить("ОбновитьФормуПомощникаВводаОстатков", Элемент.ТекущиеДанные.Организация, "ВводНачальныхОстатков");
	КонецЕсли;
	Если ОбновитьФормуПомощника > 0 Тогда
		ОбновитьФормуПомощника = ОбновитьФормуПомощника - 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументСписокПриИзмененииОтбора(ПутьКДанным = "")
	
	Если ДокументСписок.Отбор.Организация.Использование
		И ДокументСписок.Отбор.Организация.ВидСравнения = ВидСравнения.Равно Тогда
		Организация = ДокументСписок.Отбор.Организация.Значение;
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	
	Если ДокументСписок.Отбор.РазделУчета.Использование 
		И ДокументСписок.Отбор.РазделУчета.ВидСравнения = ВидСравнения.Равно Тогда
		РазделУчета = ДокументСписок.Отбор.РазделУчета.Значение;
	Иначе
		РазделУчета = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура РазделУчетаПриИзменении(Элемент)

	УстановитьОтбор();

КонецПроцедуры










