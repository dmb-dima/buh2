Перем МакетПомощника;
//Перем мУпрощенныйУчетНДС, мСложныйУчетНДС;
Перем мТекущаяДата;
//Перем УСН, Предприниматель, ОСН;
Перем мРазделУчета;
Перем мТекущаяДатаДокумента;
Перем мСписокСчетов, мСписокСчетовНДС, мСписокСчетовНУ;
Перем ТаблицаДвиженийДокумента;
Перем ТаблицаСчетовРазделовУчета;
Перем ТекущееТабличноеПоле;
Перем ОтображатьСправкуФормы;
Перем мПеренумеровать;
Перем ОткрыватьНастройкуДвижений;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения 

///////////////////////////////////////////////////////////////////////////////////////////////////
//Переменные разделов

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел "Основные средства"

Перем мПредыдущееОС;
Перем мМодифицированаТабличнаяЧасть;

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел "Нематериальные активы"
Перем мПредыдущийНМА;

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел "Нематериальные активы"
Перем СтараяСуммаБезНДС, СтараяСуммаНДС;

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел "РАсчеты по заработной плате"
Перем ВестиУчетПоРаботникам;

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел "Прочие счета бухгалтерского учета"
Перем ПрименениеПБУ18;

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел Расчеты с поставщиками
Перем мСписокВидовДоговоров;

///////////////////////////////////////////////////////////////////////////////////////////////////
//Разделы НДС
Перем ЧисловыеКолонки;
Перем мНДСПриНеподтвержденииСверху;

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел Материалы
Перем мСписокСчетовМатериалов;
Перем мСписокСчетовСпецматериалов;
Перем мСписокСчетовМатериаловВПереработке;

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел Товары
Перем мСписокСчетовТоваров;
Перем мСписокСчетовТоваровВРозницеАТТ;
Перем мСписокСчетовТоваровВРозницеНТТ;

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел Прочие расходы УСН и ИП
Перем мСтатусРасходаИП;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Стандартные обработчики формы

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	//Формируем список разделов учета
	//Внеоборотные активы
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства,							1);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивыИНИОКР,					2);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения,						3);
	//Материально производственные запасы
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.Материалы,									4);
	//НДС
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям,				17);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным,						18);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный,								24);
	//НЗП
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство,					5);
	//Готовая продукция и товары
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.Товары,										6);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты,				7);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные,							8);
	//Денежные средства
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства,							9);
	//Расчеты
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками,			10);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками,			11);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам,					12);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам,	13);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами,					14);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями,						15);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами,		16);
	//Капитал
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.Капитал,									19);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов,						20);
	//Финансовые результаты
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства,		21);
	//Забалансовые счета
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета,				22);
	//Прочие расходы налогового учета УСН и ИП
	РазделыУчета.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНИИП,			23);
	
	СформироватьСписокРазделов();
	
	ОтображатьСправкуФормы = ВосстановитьЗначение("Документ.ВводНачальныхОстатков.ОтображатьСправкуФормы");
	Если ОтображатьСправкуФормы = Неопределено Тогда
		ОтображатьСправкуФормы = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
				
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,,);
		
		// Новый документ всегда на дату ввода остатков.
		ПолучитьДатуНачалаУчета(Ложь);
		
		Если ЭтаФорма.КлючУникальности <> Неопределено Тогда
			ПодразделениеОрганизации = ЭтаФорма.КлючУникальности.ПодразделениеОрганизации;
		КонецЕсли;
		ОтражатьВБухгалтерскомУчете = Истина;
		ОтражатьВНалоговомУчете = Истина;
		ОтражатьПоСпециальнымРегистрам = Истина;
		
	КонецЕсли;
	//Служебная переменная
	мПеренумеровать = 0;
	
	//Заполнение вида входящих остатков
	ОСН = Истина;
	УСН = Ложь;
	Предприниматель = Ложь;
	УчетнаяПолитикаНеЗадана = Ложь;
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата + 24*60*60, УчетнаяПолитикаНеЗадана, Организация);
	Если УчетнаяПолитикаНеЗадана Тогда
		мВестиУчетПоВидамДеятельностиПредпринимателя = Ложь;
		мРозницаВПродажныхЦенах = Ложь;
		мУпрощенныйУчетНДС	= Ложь; 
		мСложныйУчетНДС		= Ложь;
		мНДСПриНеподтвержденииСверху = Ложь;
		мОценкаМПЗПоСредней = Истина;
	Иначе
		мВестиУчетПоВидамДеятельностиПредпринимателя = УчетнаяПолитикаНУ.ВестиУчетПоВидамДеятельности;
		мРозницаВПродажныхЦенах = УчетнаяПолитикаНУ.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
		мУпрощенныйУчетНДС	= УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата+24*60*60);
		мСложныйУчетНДС		= УчетнаяПолитикаНУ.СложныйУчетНДС И Не УчетнаяПолитикаНУ.УСН И Не УчетнаяПолитикаНУ.УпрощенныйУчетНДС;
		мНДСПриНеподтвержденииСверху = УчетнаяПолитикаНУ.НДСПриНеподтвержденииСверху;
		мОценкаМПЗПоСредней = УчетнаяПолитикаНУ.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней;
	КонецЕсли;
	
	// Поддержка механизма автонумерации
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");
	
	//Если в форме списка установлен отбор и он недоступен, то недоступны для редактирования и некоторые реквизиты
	Если ЭтаФорма.ВладелецФормы <> Неопределено Тогда
		Если ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("ТабличноеПоле") И ТипЗнч(ЭтаФорма.ВладелецФормы.ТекущиеДанные) = Тип("ТекущиеДанныеСписка") Тогда
			Если ЭтаФорма.ВладелецФормы.НастройкаОтбора.Найти("Организация") <> Неопределено
				И ЭтаФорма.ВладелецФормы.НастройкаОтбора.Найти("РазделУчета") <> Неопределено Тогда
				ЭлементыФормы.Организация.ТолькоПросмотр = НЕ ЭтаФорма.ВладелецФормы.НастройкаОтбора.Организация.Доступность;
				ЭлементыФормы.РазделУчета.ТолькоПросмотр = НЕ ЭтаФорма.ВладелецФормы.НастройкаОтбора.РазделУчета.Доступность;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("ТабличноеПоле") И ТипЗнч(ЭтаФорма.ВладелецФормы.ТекущиеДанные) = Тип("СтрокаТаблицыЗначений") Тогда
			ЭлементыФормы.Организация.ТолькоПросмотр = Ложь;
			ЭлементыФормы.РазделУчета.ТолькоПросмотр = Ложь;
		Иначе
			Если НЕ ЭтоНовый() Тогда
				ЭлементыФормы.Организация.ТолькоПросмотр = Истина;
				ЭлементыФормы.РазделУчета.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(РазделУчета, ЭтотОбъект, ЭтаФорма);
	
	МакетПомощника = ПолучитьМакет("Справка");
	
	// Предполагается использовать отбор по связанным таблицам
	ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.Ключ.Использование = Истина;
	ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.Ключ.Значение = 0;
	ЭлементыФормы.МПЗСобственныеОбороты.ОтборСтрок.Ключ.Использование = Истина;
	ЭлементыФормы.МПЗСобственныеОбороты.ОтборСтрок.Ключ.Значение = 0;
	ЭлементыФормы.МПЗРеализованныеОбороты.ОтборСтрок.Ключ.Использование = Истина;
	ЭлементыФормы.МПЗРеализованныеОбороты.ОтборСтрок.Ключ.Значение = 0;
	ЭлементыФормы.ДанныеПоСФОтгрузка.ОтборСтрок.Ключ.Использование = Истина;
	ЭлементыФормы.ДанныеПоСФОтгрузка.ОтборСтрок.Ключ.Значение = 0;
	ЭлементыФормы.МПЗСобственныеОборотыОтгрузка.ОтборСтрок.Ключ.Использование = Истина;
	ЭлементыФормы.МПЗСобственныеОборотыОтгрузка.ОтборСтрок.Ключ.Значение = 0;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	УстановитьТипОрганизации();
	Если НЕ ЭтоНовый() Тогда
		Если ОтражатьВБухгалтерскомУчете
			И ОтражатьВНалоговомУчете
			И ОтражатьПоСпециальнымРегистрам Тогда
			ЭлементыФормы.Дата.ТолькоПросмотр = Истина;
		Иначе
			ЭлементыФормы.Дата.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;	
	// }ОбособленныеПодразделения 
	
	ТекущееТабличноеПоле = Неопределено;
	СопоставитьРазделыУчетаСтраницам();
	ЗаполнитьРеквизитыРазделов();
	ПоказатьПодсказку();
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,РазделУчета");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма, СтруктураРеквизитов, ТекущееТабличноеПоле);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		
		Для Каждого СтрокаРасшифровки ИЗ ДанныеПоСФНДС Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДокументОплаты) и не СтрокаРасшифровки.ДокументОплаты = Неопределено Тогда
				СтрокаРасшифровки.ДокументОплаты = Неопределено;
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДокументОтгрузки) и не СтрокаРасшифровки.ДокументОтгрузки = Неопределено Тогда
				СтрокаРасшифровки.ДокументОтгрузки = Неопределено;
			КонецЕсли;
			
			Если СтрокаРасшифровки.ПредъявленСФ И НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СчетФактура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Строка " + СтрокаРасшифровки.НомерСтроки + ": не заполнен расчетный документ!");	
			КонецЕсли;	
			
		КонецЦикла;
		
		мОбновитьСодержанияПодчиненныхДокументов = Истина;
		мОтказЗаписи = Ложь;
		Если РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
			СформироватьСчетаФактуры(Ложь, Истина, Истина, мОтказЗаписи);
		Иначе
			СформироватьСчетаФактуры(Ложь, Ложь, Истина, мОтказЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(РазделУчета, ЭтотОбъект, ЭтаФорма);
	Если ЭтоНовый() Тогда
		ПолучитьДатуНачалаУчета(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(РазделУчета, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);
	
	Оповестить("ОбновитьФормуПомощникаВводаОстатков", Организация, "ВводНачальныхОстатков");
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение("Документ.ВводНачальныхОстатков.ОтображатьСправкуФормы", ОтображатьСправкуФормы);
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);
	
КонецПроцедуры

Процедура ПолучитьДатуНачалаУчета(Установить)

	МенеджерЗаписиРегистра = РегистрыСведений.ДатыВводаНачальныхОстатков.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Организация = Организация;
	МенеджерЗаписиРегистра.Прочитать();
	Если МенеджерЗаписиРегистра.Выбран() Тогда
		Если НачалоДня(Дата) <> НачалоДня(МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков) Тогда
			Дата = МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков;
		КонецЕсли;
		ЭлементыФормы.Дата.ТолькоПросмотр = Истина;
	ИначеЕсли Установить Тогда
		МенеджерЗаписиРегистра.Организация = Организация;
		МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков = Дата;
		МенеджерЗаписиРегистра.Записать();
		ЭлементыФормы.Дата.ТолькоПросмотр = Истина;
		Сообщить("Дата документа установлена в качестве даты ввода начальных остатков в программе!", СтатусСообщения.Важное);
	Иначе
		Дата = '00010101';
	КонецЕсли;
	
КонецПроцедуры // ПолучитьДатуНачалаУчета()

Процедура СформироватьСписокРазделов()
	
	ТаблицаСчетовРазделовУчета = Новый ТаблицаЗначений;
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("СчетаГруппы");
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("Счета");
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("СчетаИсключения");
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("СчетаНДС");
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("СчетаНУ");
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("РазделУчета");
	
	СписокСчетовРазделовУчета = ПолучитьМакет("СписокСчетовРазделовУчета");
	ТаблицаСоответствий = СписокСчетовРазделовУчета.ПолучитьОбласть("Строки|Колонки");
	Для Строка = 1 По ТаблицаСоответствий.ВысотаТаблицы Цикл
		НоваяСтрока = ТаблицаСчетовРазделовУчета.Добавить();
		НоваяСтрока.СчетаГруппы		= ТаблицаСоответствий.Область("R" + Строка + "C1").Текст;
		НоваяСтрока.Счета			= ТаблицаСоответствий.Область("R" + Строка + "C2").Текст;
		НоваяСтрока.СчетаИсключения	= ТаблицаСоответствий.Область("R" + Строка + "C3").Текст;
		НоваяСтрока.СчетаНДС		= ТаблицаСоответствий.Область("R" + Строка + "C4").Текст;
		НоваяСтрока.СчетаНУ			= ТаблицаСоответствий.Область("R" + Строка + "C5").Текст;
		ИмяРазделаУчета				= ТаблицаСоответствий.Область("R" + Строка + "C6").Текст;
		НоваяСтрока.РазделУчета		= Перечисления.РазделыУчетаДляВводаОстатков[ИмяРазделаУчета];
	КонецЦикла;
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


Процедура ДействияФормыНастройка(Кнопка)
		
	ФормаНастройки = ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	ФормаНастройки.ОткрытьМодально();
	ПроверитьДатуДокумента();
	УстановитьТипОрганизации();	
	Если ЗначениеЗаполнено(РазделУчета) Тогда
		СопоставитьРазделыУчетаСтраницам();
		ПоказатьПодсказку();
		Если ЭтоНовый() Тогда
			ЗаполнитьРеквизитыРазделов();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
//Процедура отвечает за прорисовку справки
Процедура ПоказатьПодсказку()
	
	ИзменитьВидимостьПанелиПоГоризонтали(ЭтаФорма, ОтображатьСправкуФормы, "ОсновнаяПанель", "СправкиФормы");
	
	Если НЕ ОтображатьСправкуФормы Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбласти = "Раздел_" + Строка(мРазделУчета);
	ОбластьТекстЗаголовок			= ИмяОбласти + "|Заголовок";
	ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстЗаголовок);
	ТекстЗаголовок = ОбластьТекстаСправки.ТекущаяОбласть.Текст;
	
	ОбластьТекстОбщий			= ИмяОбласти + "|Общий";
	ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОбщий);
	ТекстОбщий = ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
															  |";
	
	Если ОСН Тогда
		ОбластьТекстОсновной = ИмяОбласти + "|ОСН";
	ИначеЕсли УСН_ДР Тогда
		ОбластьТекстОсновной = ИмяОбласти + "|УСН";
	ИначеЕсли Предприниматель Тогда
		ОбластьТекстОсновной = ИмяОбласти + "|ИП";
	КонецЕсли;
	
	Если ОСН ИЛИ УСН_ДР ИЛИ Предприниматель Тогда
		ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОсновной);
		ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
																		   |";
	КонецЕсли;
	
	Если Предприниматель Тогда
		Если мВестиУчетПоВидамДеятельностиПредпринимателя Тогда
			ОбластьТекстОсновной = ИмяОбласти + "|ЕстьВидыДеятельностиПредпринимателя";
			ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОсновной);
			ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
																				  |";
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УСН Тогда
		Если ОСН Тогда
			ОбластьТекстПБУ18 = ИмяОбласти + "|НетПБУ18";
			ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстПБУ18);
			ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
																				  |";
			Если ПрименениеПБУ18 Тогда
				ОбластьТекстПБУ18 = ИмяОбласти + "|ЕстьПБУ18";
				ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстПБУ18);
				ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
																					   |";
			КонецЕсли;
		КонецЕсли;
		Если мУпрощенныйУчетНДС Тогда
			ОбластьТекстНДС = ИмяОбласти + "|УпрощенныйНДС";
		ИначеЕсли мСложныйУчетНДС Тогда
			ОбластьТекстНДС = ИмяОбласти + "|СложныйНДС";
		Иначе
			ОбластьТекстНДС = ИмяОбласти + "|НДС";
		КонецЕсли;
		ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстНДС);
		ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
																			   |";
	КонецЕсли;

	ЦветФонаСправки		= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветФона());
	ЦветСсылкиСправки	= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки());
	
	//ЭлементыФормы.НадписьСкрытьСправку.ЦветФона	= РаботаСДиалогами.ВстроеннаяСправка_ЦветФона();
	
	ТекстВстроеннойСправки = 
	"<HTML>
	|	<HEAD>
	|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогами.ВстроеннаяСправка_СтилиДокумента() + "
	|	</HEAD>
	|	<BODY aLink="+ЦветСсылкиСправки+" vLink="+ЦветСсылкиСправки+" link="+ЦветСсылкиСправки+" bgColor="+ЦветФонаСправки+" scroll=auto>
	|		<IMG src="+РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, ЭлементыФормы.ВстроеннаяСправка)+">
	|		<DIV class=""top"" id=true style=""DISPLAY:inline"">
	|			<DIV><STRONG>" + ТекстЗаголовок + "</STRONG></DIV>
	|		</DIV>";
	
	Если СтрЧислоСтрок(ТекстОбщий) > 0 Тогда
		Для НомСтроки = 1 По СтрЧислоСтрок(ТекстОбщий) Цикл
			ТекстСправки = СтрПолучитьСтроку(ТекстОбщий,НомСтроки);
			ТекстВстроеннойСправки = ТекстВстроеннойСправки + "
			|	<DIV>" + ТекстСправки + "</DIV>";
		КонецЦикла;
	КонецЕсли;
	
	ТекстВстроеннойСправки = ТекстВстроеннойСправки + "
	|	</BODY>
	|</HTML>";
		
	ЭлементыФормы.ВстроеннаяСправка.УстановитьТекст(ТекстВстроеннойСправки);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Отрабатываем действия кнопки по прорисовке справки формы
Процедура КоманднаяПанельСправкиПереключениеСправкиФормы(Кнопка)
	ОтображатьСправкуФормы = НЕ ОтображатьСправкуФормы;
	ПоказатьПодсказку();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Процедура отвечает за прорисовку страниц формы, соответствующих выбранному разделу
Процедура СопоставитьРазделыУчетаСтраницам()
	
	Если ЗначениеЗаполнено(РазделУчета) Тогда
		ТекущийРаздел = РазделыУчета.НайтиПоЗначению(РазделУчета);
		Если ТекущийРаздел <> Неопределено Тогда
			мРазделУчета = Число(ТекущийРаздел.Представление);
		КонецЕсли;
	Иначе
		мРазделУчета = 0;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РазделУчета) Тогда //Стартовая страница
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.Начало;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства Тогда
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.ОС;
		ТекущееТабличноеПоле = ЭлементыФормы.ОС;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивыИНИОКР Тогда
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.НМА;
		ТекущееТабличноеПоле = ЭлементыФормы.НМА;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.РасчетыСконтрагентами;
		ТекущееТабличноеПоле = ЭлементыФормы.РасчетыСКонтрагентами;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.РасчетыПоНалогам;
		ТекущееТабличноеПоле = ЭлементыФормы.РасчетыПоНалогамИСборам;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам Тогда
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.РасчетыССотрудниками;
		ТекущееТабличноеПоле = ЭлементыФормы.РасчетыПоЗаработнойПлате;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.ПодотчетныеЛица;
		ТекущееТабличноеПоле = ЭлементыФормы.РасчетыСПодотчетнымиЛицами;
		
	ИначеЕсли (РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты) 
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
		
		ВидимостьПанелиПоВертикали = Ложь;
		
		Если УСН Тогда
			ВидимостьПанелиПоВертикали = Ложь;
			
		ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты И Предприниматель Тогда
			ВидимостьПанелиПоВертикали = Истина;
			
		ИначеЕсли мУпрощенныйУчетНДС И НЕ(РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты И Предприниматель) Тогда
			ВидимостьПанелиПоВертикали = Ложь;
			
		ИначеЕсли мСложныйУчетНДС И НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
			ВидимостьПанелиПоВертикали = Истина;
			
		ИначеЕсли НЕ мУпрощенныйУчетНДС 
			И РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
			ВидимостьПанелиПоВертикали = Истина;
			
		КонецЕсли;
		
		мПанель			= ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДС;
		Если мПанель.Свертка = РежимСверткиЭлементаУправления.Нет И НЕ ВидимостьПанелиПоВертикали 
			ИЛИ мПанель.Свертка <> РежимСверткиЭлементаУправления.Нет И ВидимостьПанелиПоВертикали Тогда
			ИзменитьВидимостьПанелиПоВертикали(ЭтаФорма, ВидимостьПанелиПоВертикали, "ПанельМПЗ", "НеоплаченныеМатериалыИПартииНДС");
		КонецЕсли;
		
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары
			ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы
			ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
			ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДС.ТекущаяСтраница = ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДС.Страницы.Страница2;
		ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты И Предприниматель Тогда
			ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДС.ТекущаяСтраница = ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДС.Страницы.Страница1;
		КонецЕсли;
				
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.Номенклатура;
		ТекущееТабличноеПоле = ЭлементыФормы.МПЗПриобретенные;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.НДС;
		ТекущееТабличноеПоле = ЭлементыФормы.ДанныеПоСФНДС;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		
		ВидимостьПанелиПоВертикали = Ложь;
		
		Если УСН Тогда
			ВидимостьПанелиПоВертикали = Ложь;
			
		ИначеЕсли Предприниматель Тогда
			ВидимостьПанелиПоВертикали = Истина;
			
		ИначеЕсли мУпрощенныйУчетНДС Тогда
			ВидимостьПанелиПоВертикали = Ложь;
			
		ИначеЕсли мСложныйУчетНДС Тогда
			ВидимостьПанелиПоВертикали = Истина;
			
		КонецЕсли;
		
		мПанель			= ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДСОтгрузка;
		Если мПанель.Свертка = РежимСверткиЭлементаУправления.Нет И НЕ ВидимостьПанелиПоВертикали 
			ИЛИ мПанель.Свертка <> РежимСверткиЭлементаУправления.Нет И ВидимостьПанелиПоВертикали Тогда
			ИзменитьВидимостьПанелиПоВертикали(ЭтаФорма, ВидимостьПанелиПоВертикали, "ПанельМПЗОтгрузка", "НеоплаченныеМатериалыИПартииНДСОтгрузка");
		КонецЕсли;
		
		ВыбратьТекущуюПанельСплитованнойТаблицы();
		
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.НоменклатураОтгруженная;
		ТекущееТабличноеПоле = ЭлементыФормы.МПЗОтгруженные;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов Тогда
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.РБП;
		ТекущееТабличноеПоле = ЭлементыФормы.РасходыБудущихПериодов;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНИИП Тогда
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.ПрочиеРасходыУСНИИП;
			
		Если Предприниматель Тогда
			ЭлементыФормы.ПанельПрочихРасходов.ТекущаяСтраница = ЭлементыФормы.ПанельПрочихРасходов.Страницы.ИП;
			ТекущаяПанель = ЭлементыФормы.ПанельПрочихРасходовИП;
			// Установка текущей страницы
			Страницы = Новый СписокЗначений;
			Страницы.Добавить("МПЗРеализованные",	"МПЗРеализованныеИП");
			Страницы.Добавить("ДополнительныеРасходы",	"ДопРасходыИП");
			Страницы.Добавить("ПрочиеРасходы",	"ПрочиеРасходыИП");
			
		Иначе
			ЭлементыФормы.ПанельПрочихРасходов.ТекущаяСтраница = ЭлементыФормы.ПанельПрочихРасходов.Страницы.УСН;
			ТекущаяПанель = ЭлементыФормы.ПанельПрочихРасходовУСН;
			// Установка текущей страницы
			Страницы = Новый СписокЗначений;
			Страницы.Добавить("МПЗРеализованные",	"МПЗРеализованныеУСН");
			Страницы.Добавить("Услуги",	"УслугиУСН");
			Страницы.Добавить("ДополнительныеРасходы",	"ДопРасходыУСН");
			
		КонецЕсли;
		
		РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ТекущаяПанель, Страницы,);
		Для каждого ЭлементСписка из Страницы Цикл
			ИмяСтраницы = ЭлементСписка.Значение;
			ИмяТаблЧасти = ЭлементСписка.Представление;
			Страница = ТекущаяПанель.Страницы[ИмяСтраницы];
			Если ЭтотОбъект[ИмяТаблЧасти].Количество() > 0 Тогда 
				ТекущееТабличноеПоле = ЭлементыФормы[ИмяТаблЧасти];
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущееТабличноеПоле = Неопределено Тогда
				ТекущееТабличноеПоле = ЭлементыФормы[Страницы.Получить(0).Представление];
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.БухСправка;
		ТекущееТабличноеПоле = ЭлементыФормы.БухСправка;
		
	КонецЕсли;
	
	УстановитьВидимостьПодразделения();
	
	СписокСчетовРазделаУчета();
	УстановитьВидимостьКолонок();
	
КонецПроцедуры

Процедура УстановитьВидимостьПодразделения()
		
	ВидимостьПодразделения = (Найти(Метаданные.Имя, "КОРП") > 0)
		ИЛИ (РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства)
		ИЛИ (РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство)
		ИЛИ (РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов)		
		ИЛИ (РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы);
	
	ЭлементыФормы.ПодразделениеОрганизации.Видимость        = ВидимостьПодразделения;	
	ЭлементыФормы.НадписьПодразделениеОрганизации.Видимость = ВидимостьПодразделения;		
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Процедура отвечает за прорисовку колонок табличных частей формы, соответствующих выбранному разделу
Процедура УстановитьВидимостьКолонок()
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства Тогда
		ТекущийСписокКолонок = ЭлементыФормы.ОС.Колонки;
		
		ТекущийСписокКолонок.ПервоначальнаяСтоимостьУСН.Видимость	= УСН_ДР;
		ТекущийСписокКолонок.ПервоначальнаяСтоимостьНУ.Видимость	= НЕ УСН;
		ТекущийСписокКолонок.ТекущаяСтоимостьНУ.Видимость			= НЕ УСН;
		//управление изменением видимости
		ТекущийСписокКолонок.ПервоначальнаяСтоимостьУСН.ИзменятьВидимость	= УСН_ДР;
		ТекущийСписокКолонок.ПервоначальнаяСтоимостьНУ.ИзменятьВидимость	= НЕ УСН;
		ТекущийСписокКолонок.ТекущаяСтоимостьНУ.ИзменятьВидимость			= НЕ УСН;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивыИНИОКР Тогда
		ТекущийСписокКолонок = ЭлементыФормы.НМА.Колонки;
		
		ТекущийСписокКолонок.СтоимостьНУ.Видимость						= НЕ УСН;
		ТекущийСписокКолонок.СуммаНачисленнойАмортизацииНУ.Видимость	= НЕ УСН;
		ТекущийСписокКолонок.СтоимостьУСН.Видимость						= УСН_ДР;
		ТекущийСписокКолонок.НакопленнаяАмортизацияУСН.Видимость		= УСН_ДР;
		//управление изменением видимости
		ТекущийСписокКолонок.СтоимостьНУ.ИзменятьВидимость						= НЕ УСН;
		ТекущийСписокКолонок.СуммаНачисленнойАмортизацииНУ.ИзменятьВидимость	= НЕ УСН;
		ТекущийСписокКолонок.СтоимостьУСН.ИзменятьВидимость						= УСН_ДР;
		ТекущийСписокКолонок.НакопленнаяАмортизацияУСН.ИзменятьВидимость		= УСН_ДР;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
		
		ТекущийСписокКолонок = ЭлементыФормы.МПЗПриобретенные.Колонки;
		
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
			ТекущийСписокКолонок.Номенклатура.ТекстШапки = "Капитальные вложения"
		Иначе
			ТекущийСписокКолонок.Номенклатура.ТекстШапки = "Номенклатура"
		КонецЕсли; 
		
		ТекущийСписокКолонок.Сумма.ТекстШапки							= "Стоимость";
		ТекущийСписокКолонок.ВалютнаяСумма.ТекстШапки					= "Стоимость (вал.)";
		ТекущийСписокКолонок.ВалютныйНДС.ТекстШапки						= "НДС (вал.)";
		
		НеГотоваяПродукция = НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты;
		НеКапВложения = НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения;
		
		ТекущийСписокКолонок.Оплачен.Видимость					= Предприниматель И НеГотоваяПродукция;
		ТекущийСписокКолонок.РеквизитыДокументаОплаты.Видимость	= Предприниматель И НеГотоваяПродукция;
		ТекущийСписокКолонок.НДСВключенВстоимость.Видимость		= Предприниматель И НеГотоваяПродукция;
		//управление изменением видимости
		ТекущийСписокКолонок.Оплачен.ИзменятьВидимость					= Предприниматель И НеГотоваяПродукция;
		ТекущийСписокКолонок.РеквизитыДокументаОплаты.ИзменятьВидимость	= Предприниматель И НеГотоваяПродукция;
		ТекущийСписокКолонок.НДСВключенВстоимость.ИзменятьВидимость		= Предприниматель И НеГотоваяПродукция;
		//
		
		ТекущийСписокКолонок.НДС.Видимость = (Предприниматель И НеГотоваяПродукция) ИЛИ (УСН_ДР И НеГотоваяПродукция И НеКапВложения);
		//управление изменением видимости
		ТекущийСписокКолонок.НДС.ИзменятьВидимость = (Предприниматель И НеГотоваяПродукция) ИЛИ (УСН_ДР И НеГотоваяПродукция И НеКапВложения);
		//
		
		ТекущийСписокКолонок.СтатусыОплатыРасходовУСН.Видимость	= УСН_ДР И НеГотоваяПродукция И НеКапВложения;
		ТекущийСписокКолонок.Валюта.Видимость					= УСН_ДР И НеГотоваяПродукция И НеКапВложения;
		ТекущийСписокКолонок.ОтражениеВУСН.Видимость			= УСН_ДР И НеГотоваяПродукция И НеКапВложения;
		ТекущийСписокКолонок.РасчетныйДокумент.Видимость		= УСН_ДР И НеГотоваяПродукция И НеКапВложения;
		ТекущийСписокКолонок.ВалютнаяСумма.Видимость			= УСН_ДР И НеГотоваяПродукция И НеКапВложения;
		ТекущийСписокКолонок.ВалютныйНДС.Видимость				= УСН_ДР И НеГотоваяПродукция И НеКапВложения;
		ТекущийСписокКолонок.РасчетныйДокумент.Видимость		= УСН_ДР И НеГотоваяПродукция И НеКапВложения;
		//управление изменением видимости
		ТекущийСписокКолонок.СтатусыОплатыРасходовУСН.ИзменятьВидимость	= УСН_ДР И НеГотоваяПродукция И НеКапВложения;
		ТекущийСписокКолонок.Валюта.ИзменятьВидимость					= УСН_ДР И НеГотоваяПродукция И НеКапВложения;
		ТекущийСписокКолонок.ОтражениеВУСН.ИзменятьВидимость			= УСН_ДР И НеГотоваяПродукция И НеКапВложения;
		ТекущийСписокКолонок.РасчетныйДокумент.ИзменятьВидимость		= УСН_ДР И НеГотоваяПродукция И НеКапВложения;
		ТекущийСписокКолонок.ВалютнаяСумма.ИзменятьВидимость			= УСН_ДР И НеГотоваяПродукция И НеКапВложения;
		ТекущийСписокКолонок.ВалютныйНДС.ИзменятьВидимость				= УСН_ДР И НеГотоваяПродукция И НеКапВложения;
		ТекущийСписокКолонок.РасчетныйДокумент.ИзменятьВидимость		= УСН_ДР И НеГотоваяПродукция И НеКапВложения;
		//
		
		ТекущийСписокКолонок.Контрагент.Видимость								= РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы;
		//управление изменением видимости
		ТекущийСписокКолонок.Контрагент.ИзменятьВидимость						= РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы;
		//
		
		ТекущийСписокКолонок.СуммаНУ.Видимость			= ОСН;
		ТекущийСписокКолонок.СуммаВР.Видимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаПР.Видимость			= ПрименениеПБУ18;
		//управление изменением видимости
		ТекущийСписокКолонок.СуммаНУ.ИзменятьВидимость			= ОСН;
		ТекущийСписокКолонок.СуммаВР.ИзменятьВидимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаПР.ИзменятьВидимость			= ПрименениеПБУ18;
		//
		
		ТекущийСписокКолонок.СпособСтроительства.Видимость		= РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения;
		//управление изменением видимости
		ТекущийСписокКолонок.СпособСтроительства.ИзменятьВидимость		= РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения;
		//
		
		ТекущийСписокКолонок.Склад.Видимость		= УправлениеЗапасамиПартионныйУчет.ВедетсяУчетПоСкладам(ПланыСчетов.Хозрасчетный.НайтиПоКоду(мСписокСчетов.Получить(0).Значение));
		//управление изменением видимости
		ТекущийСписокКолонок.Склад.ИзменятьВидимость= УправлениеЗапасамиПартионныйУчет.ВедетсяУчетПоСкладам(ПланыСчетов.Хозрасчетный.НайтиПоКоду(мСписокСчетов.Получить(0).Значение));
		
		Если Предприниматель ИЛИ УСН_ДР Тогда
			ТекущийСписокКолонок.Партия.Видимость	= Истина;
			//управление изменением видимости
			ТекущийСписокКолонок.Партия.ИзменятьВидимость	= Истина;
			//
		Иначе
			
			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
				ВидимостьПартии = НЕ мУпрощенныйУчетНДС;
			
			Иначе
				ВидимостьПартии = (НЕ мОценкаМПЗПоСредней) ИЛИ (мСложныйУчетНДС И НЕ мУпрощенныйУчетНДС);
				
			КонецЕсли;
			
			ТекущийСписокКолонок.Партия.Видимость			= ВидимостьПартии;
			ТекущийСписокКолонок.Партия.ИзменятьВидимость	= ВидимостьПартии;
		КонецЕсли;
		
		УстановитьВидимостьКолонокНоменклатуры();
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство Тогда
		ТекущийСписокКолонок = ЭлементыФормы.БухСправка.Колонки;
		
		ТекущийСписокКолонок.СуммаНУ.Видимость			= ОСН;
		ТекущийСписокКолонок.СуммаВР.Видимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаПР.Видимость			= ПрименениеПБУ18;
		Если УчетнаяПолитикаНеЗадана Тогда
			ТекущийСписокКолонок.ОтражениеВУСН.Видимость = Ложь;
		Иначе
			ТекущийСписокКолонок.ОтражениеВУСН.Видимость	= УСН_ДР И УчетнаяПолитикаНУ.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.УменьшатьРасходыНаОстатокНЗП;
		КонецЕсли;
		ТекущийСписокКолонок.СуммаКт.Видимость			= Ложь;
		ТекущийСписокКолонок.Количество.Видимость		= Истина;
		ТекущийСписокКолонок.Валюта.Видимость			= Ложь;
		ТекущийСписокКолонок.ВалютнаяСумма.Видимость	= Ложь;
		ТекущийСписокКолонок.Сумма.ТекстШапки			= "Сумма остатка";
		//управление изменением видимости
		ТекущийСписокКолонок.СуммаНУ.ИзменятьВидимость			= ОСН;
		ТекущийСписокКолонок.СуммаВР.ИзменятьВидимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаПР.ИзменятьВидимость			= ПрименениеПБУ18;
		Если УчетнаяПолитикаНеЗадана Тогда
			ТекущийСписокКолонок.ОтражениеВУСН.ИзменятьВидимость = Ложь;
		Иначе
			ТекущийСписокКолонок.ОтражениеВУСН.ИзменятьВидимость	= УСН_ДР И УчетнаяПолитикаНУ.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.УменьшатьРасходыНаОстатокНЗП;
		КонецЕсли;
		ТекущийСписокКолонок.СуммаКт.ИзменятьВидимость			= Ложь;
		ТекущийСписокКолонок.Количество.ИзменятьВидимость		= Истина;
		ТекущийСписокКолонок.Валюта.ИзменятьВидимость			= Ложь;
		ТекущийСписокКолонок.ВалютнаяСумма.ИзменятьВидимость	= Ложь;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		ТекущийСписокКолонок = ЭлементыФормы.МПЗОтгруженные.Колонки;
		
		ТекущийСписокКолонок.СуммаНУ.Видимость			= ОСН;
		ТекущийСписокКолонок.СуммаВР.Видимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаПР.Видимость			= ПрименениеПБУ18;
		
		ТекущийСписокКолонок.ВидМПЗ.Видимость					= Предприниматель;
		ТекущийСписокКолонок.НоменклатурнаяГруппа.Видимость		= Предприниматель И мВестиУчетПоВидамДеятельностиПредпринимателя;
		ТекущийСписокКолонок.ХарактерДеятельности.Видимость		= Предприниматель И мВестиУчетПоВидамДеятельностиПредпринимателя;
		ТекущийСписокКолонок.Оплачен.Видимость					= Предприниматель;
		ТекущийСписокКолонок.РеквизитыДокументаОплаты.Видимость	= Предприниматель;
		ТекущийСписокКолонок.Поставщик.Видимость				= Предприниматель ИЛИ УСН_ДР;
		ТекущийСписокКолонок.ДоговорПоставщика.Видимость		= Предприниматель ИЛИ УСН_ДР;
		ТекущийСписокКолонок.Выручка.Видимость					= Предприниматель;
		ТекущийСписокКолонок.НДС.Видимость						= Предприниматель ИЛИ УСН_ДР;
		ТекущийСписокКолонок.НДСНачисленный.Видимость			= Предприниматель;
		ТекущийСписокКолонок.НДСВключенВстоимость.Видимость		= Предприниматель;
		
		//ТекущийСписокКолонок.ДокументОтгрузки.Видимость	= НЕ ОСН;
		
		ТекущийСписокКолонок.СтатусыОплатыРасходовУСН.Видимость	= УСН_ДР;
		ТекущийСписокКолонок.ОтражениеВУСН.Видимость			= УСН_ДР;
		ТекущийСписокКолонок.Валюта.Видимость					= УСН_ДР;
		ТекущийСписокКолонок.ВалютнаяСумма.Видимость			= УСН_ДР;
		ТекущийСписокКолонок.ВалютныйНДС.Видимость				= УСН_ДР;
		//управление изменением видимости
		ТекущийСписокКолонок.СуммаНУ.ИзменятьВидимость			= ОСН;
		ТекущийСписокКолонок.СуммаВР.ИзменятьВидимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаПР.ИзменятьВидимость			= ПрименениеПБУ18;
		
		ТекущийСписокКолонок.ВидМПЗ.ИзменятьВидимость					= Предприниматель;
		ТекущийСписокКолонок.НоменклатурнаяГруппа.ИзменятьВидимость		= Предприниматель И мВестиУчетПоВидамДеятельностиПредпринимателя;
		ТекущийСписокКолонок.ХарактерДеятельности.ИзменятьВидимость		= Предприниматель И мВестиУчетПоВидамДеятельностиПредпринимателя;
		ТекущийСписокКолонок.Оплачен.ИзменятьВидимость					= Предприниматель;
		ТекущийСписокКолонок.РеквизитыДокументаОплаты.ИзменятьВидимость	= Предприниматель;
		ТекущийСписокКолонок.Поставщик.ИзменятьВидимость				= Предприниматель ИЛИ УСН_ДР;
		ТекущийСписокКолонок.ДоговорПоставщика.ИзменятьВидимость		= Предприниматель ИЛИ УСН_ДР;
		ТекущийСписокКолонок.Выручка.ИзменятьВидимость					= Предприниматель;
		ТекущийСписокКолонок.НДС.ИзменятьВидимость						= Предприниматель ИЛИ УСН_ДР;
		ТекущийСписокКолонок.НДСНачисленный.ИзменятьВидимость			= Предприниматель;
		ТекущийСписокКолонок.НДСВключенВстоимость.ИзменятьВидимость		= Предприниматель;
		
		//ТекущийСписокКолонок.ДокументОтгрузки.ИзменятьВидимость	= НЕ ОСН;
		
		ТекущийСписокКолонок.СтатусыОплатыРасходовУСН.ИзменятьВидимость	= УСН_ДР;
		ТекущийСписокКолонок.ОтражениеВУСН.ИзменятьВидимость			= УСН_ДР;
		ТекущийСписокКолонок.Валюта.ИзменятьВидимость					= УСН_ДР;
		ТекущийСписокКолонок.ВалютнаяСумма.ИзменятьВидимость			= УСН_ДР;
		ТекущийСписокКолонок.ВалютныйНДС.ИзменятьВидимость				= УСН_ДР;
		
		Если Предприниматель ИЛИ УСН_ДР Тогда
			ТекущийСписокКолонок.Партия.Видимость	= Истина;
			//управление изменением видимости
			ТекущийСписокКолонок.Партия.ИзменятьВидимость	= Истина;
			//
		Иначе
			Если (НЕ мОценкаМПЗПоСредней)
				ИЛИ (мСложныйУчетНДС И НЕ мУпрощенныйУчетНДС) Тогда
				ТекущийСписокКолонок.Партия.Видимость	= Истина;
				//управление изменением видимости
				ТекущийСписокКолонок.Партия.ИзменятьВидимость	= Истина;
			Иначе
				ТекущийСписокКолонок.Партия.Видимость	= Ложь;
				//управление изменением видимости
				ТекущийСписокКолонок.Партия.ИзменятьВидимость	= Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства Тогда
		ТекущийСписокКолонок = ЭлементыФормы.БухСправка.Колонки;
		
		ТекущийСписокКолонок.СуммаНУ.Видимость			= ОСН;
		ТекущийСписокКолонок.СуммаВР.Видимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаПР.Видимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаКт.Видимость			= Ложь;
		ТекущийСписокКолонок.Количество.Видимость		= Истина;
		ТекущийСписокКолонок.Валюта.Видимость			= Истина;
		ТекущийСписокКолонок.ВалютнаяСумма.Видимость	= Истина;
		ТекущийСписокКолонок.Сумма.ТекстШапки			= "Сумма остатка";
		ТекущийСписокКолонок.ОтражениеВУСН.Видимость = Ложь;
		//управление изменением видимости
		ТекущийСписокКолонок.СуммаНУ.ИзменятьВидимость			= ОСН;
		ТекущийСписокКолонок.СуммаВР.ИзменятьВидимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаПР.ИзменятьВидимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаКт.ИзменятьВидимость			= Ложь;
		ТекущийСписокКолонок.Количество.ИзменятьВидимость		= Истина;
		ТекущийСписокКолонок.Валюта.ИзменятьВидимость			= Истина;
		ТекущийСписокКолонок.ВалютнаяСумма.ИзменятьВидимость	= Истина;
		ТекущийСписокКолонок.ОтражениеВУСН.ИзменятьВидимость	= Ложь;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками Тогда
		ТекущийСписокКолонок = ЭлементыФормы.РасчетыСКонтрагентами.Колонки;
		
		ТекущийСписокКолонок.Сумма.ТекстШапки				   = "Сумма";
		
		ТекущийСписокКолонок.ДоходЕНВД.Видимость          = Ложь;
		ТекущийСписокКолонок.ДоходКомитента.Видимость     = Ложь;
		ТекущийСписокКолонок.СуммаКт.Видимость            = Ложь;
		ТекущийСписокКолонок.КурсВзаиморасчетов.Видимость = НЕ УСН;
		ТекущийСписокКолонок.СуммаНУ.Видимость            = ОСН;
		//управление изменением видимости
		ТекущийСписокКолонок.ДоходЕНВД.ИзменятьВидимость		  = Ложь;
		ТекущийСписокКолонок.ДоходКомитента.ИзменятьВидимость	  = Ложь;
		ТекущийСписокКолонок.СуммаКт.ИзменятьВидимость			  = Ложь;
		ТекущийСписокКолонок.КурсВзаиморасчетов.ИзменятьВидимость = НЕ УСН;
		ТекущийСписокКолонок.СуммаНУ.ИзменятьВидимость            = ОСН;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками Тогда
		ТекущийСписокКолонок = ЭлементыФормы.РасчетыСКонтрагентами.Колонки;
		
		ТекущийСписокКолонок.Сумма.ТекстШапки			  = "Сумма";
		
		ТекущийСписокКолонок.ДоходЕНВД.Видимость		  = УСН_ДР;
		ТекущийСписокКолонок.ДоходКомитента.Видимость	  = УСН_ДР;
		ТекущийСписокКолонок.СуммаКт.Видимость			  = Ложь;
		ТекущийСписокКолонок.КурсВзаиморасчетов.Видимость = НЕ УСН;
		ТекущийСписокКолонок.СуммаНУ.Видимость            = ОСН;
		//управление изменением видимости
		ТекущийСписокКолонок.ДоходЕНВД.ИзменятьВидимость          = УСН_ДР;
		ТекущийСписокКолонок.ДоходКомитента.ИзменятьВидимость	  = УСН_ДР;
		ТекущийСписокКолонок.СуммаКт.ИзменятьВидимость			  = Ложь;
		ТекущийСписокКолонок.КурсВзаиморасчетов.ИзменятьВидимость = НЕ УСН;
		ТекущийСписокКолонок.СуммаНУ.ИзменятьВидимость            = ОСН;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		ТекущийСписокКолонок = ЭлементыФормы.РасчетыПоНалогамИСборам.Колонки;
		
		ТекущийСписокКолонок.СтатьяЗатрат.Видимость			= Предприниматель;
		ТекущийСписокКолонок.НоменклатурнаяГруппа.Видимость	= Предприниматель И мВестиУчетПоВидамДеятельностиПредпринимателя;
		ТекущийСписокКолонок.ХарактерДеятельности.Видимость	= Предприниматель И мВестиУчетПоВидамДеятельностиПредпринимателя;
		
		ТекущийСписокКолонок.ОтражениеВУСН.Видимость			= УСН_ДР;
		
		//управление изменением видимости
		ТекущийСписокКолонок.СтатьяЗатрат.ИзменятьВидимость			= Предприниматель;
		ТекущийСписокКолонок.НоменклатурнаяГруппа.ИзменятьВидимость	= Предприниматель И мВестиУчетПоВидамДеятельностиПредпринимателя;
		ТекущийСписокКолонок.ХарактерДеятельности.ИзменятьВидимость	= Предприниматель И мВестиУчетПоВидамДеятельностиПредпринимателя;
		
		ТекущийСписокКолонок.ОтражениеВУСН.ИзменятьВидимость			= УСН_ДР;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам Тогда
		ТекущийСписокКолонок = ЭлементыФормы.РасчетыПоЗаработнойПлате.Колонки;
		
		ТекущийСписокКолонок.ВидНачисления.Видимость		= Предприниматель;
		ТекущийСписокКолонок.НоменклатурнаяГруппа.Видимость	= Предприниматель И мВестиУчетПоВидамДеятельностиПредпринимателя;
		ТекущийСписокКолонок.СтатьяЗатрат.Видимость			= Предприниматель;
		ТекущийСписокКолонок.ХарактерДеятельности.Видимость	= Предприниматель И мВестиУчетПоВидамДеятельностиПредпринимателя;
		ТекущийСписокКолонок.ВидУдержания.Видимость				= Предприниматель;
		ТекущийСписокКолонок.Получатель.Видимость				= Предприниматель;
		ТекущийСписокКолонок.СуммаПодлежитУдержанию.Видимость	= Предприниматель;
		
		ТекущийСписокКолонок.ОтражениеВУСН.Видимость		= УСН_ДР;
		
		ВестиУчетПоРаботникам = НЕ (ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") = Неопределено);
		//управление изменением видимости
		ТекущийСписокКолонок.ВидНачисления.ИзменятьВидимость		= Предприниматель;
		ТекущийСписокКолонок.НоменклатурнаяГруппа.ИзменятьВидимость	= Предприниматель И мВестиУчетПоВидамДеятельностиПредпринимателя;
		ТекущийСписокКолонок.СтатьяЗатрат.ИзменятьВидимость			= Предприниматель;
		ТекущийСписокКолонок.ХарактерДеятельности.ИзменятьВидимость	= Предприниматель И мВестиУчетПоВидамДеятельностиПредпринимателя;
		ТекущийСписокКолонок.ВидУдержания.ИзменятьВидимость				= Предприниматель;
		ТекущийСписокКолонок.Получатель.ИзменятьВидимость				= Предприниматель;
		ТекущийСписокКолонок.СуммаПодлежитУдержанию.ИзменятьВидимость	= Предприниматель;
		
		ТекущийСписокКолонок.ОтражениеВУСН.ИзменятьВидимость		= УСН_ДР;
		
		ТекущийСписокКолонок.ПериодРегистрации.Видимость			= ВестиУчетПоРаботникам;
		ТекущийСписокКолонок.ПериодРегистрации.ИзменятьВидимость	= ВестиУчетПоРаботникам;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
		ТекущийСписокКолонок = ЭлементыФормы.РасчетыСПодотчетнымиЛицами.Колонки;
		
		ТекущийСписокКолонок.РасчетныйДокумент.Видимость = УСН_ДР;
		//управление изменением видимости
		ТекущийСписокКолонок.РасчетныйДокумент.ИзменятьВидимость = УСН_ДР;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями Тогда
		ТекущийСписокКолонок = ЭлементыФормы.БухСправка.Колонки;
				
		ТекущийСписокКолонок.СуммаНУ.Видимость			= Ложь;
		ТекущийСписокКолонок.СуммаВР.Видимость			= Ложь;
		ТекущийСписокКолонок.СуммаПР.Видимость			= Ложь;
		ТекущийСписокКолонок.Сумма.Видимость			= Истина;
		ТекущийСписокКолонок.СуммаКт.Видимость			= Истина;
		ТекущийСписокКолонок.Количество.Видимость		= Ложь;
		ТекущийСписокКолонок.Валюта.Видимость			= Ложь;
		ТекущийСписокКолонок.ВалютнаяСумма.Видимость	= Ложь;
		ТекущийСписокКолонок.Сумма.ТекстШапки			= "Остаток по дебету";
		ТекущийСписокКолонок.СуммаКт.ТекстШапки			= "Остаток по кредиту";
		ТекущийСписокКолонок.ОтражениеВУСН.Видимость = Ложь;
		//управление изменением видимости
		ТекущийСписокКолонок.СуммаНУ.ИзменятьВидимость			= Ложь;
		ТекущийСписокКолонок.СуммаВР.ИзменятьВидимость			= Ложь;
		ТекущийСписокКолонок.СуммаПР.ИзменятьВидимость			= Ложь;
		ТекущийСписокКолонок.Сумма.ИзменятьВидимость			= Истина;
		ТекущийСписокКолонок.СуммаКт.ИзменятьВидимость			= Истина;
		ТекущийСписокКолонок.Количество.ИзменятьВидимость		= Ложь;
		ТекущийСписокКолонок.Валюта.ИзменятьВидимость			= Ложь;
		ТекущийСписокКолонок.ВалютнаяСумма.ИзменятьВидимость	= Ложь;
		ТекущийСписокКолонок.ОтражениеВУСН.ИзменятьВидимость	= Ложь;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		ТекущийСписокКолонок = ЭлементыФормы.РасчетыСКонтрагентами.Колонки;
		
		ТекущийСписокКолонок.Сумма.ТекстШапки				   = "Остаток по дебету";
		
		ТекущийСписокКолонок.ДоходЕНВД.Видимость		  = УСН_ДР;
		ТекущийСписокКолонок.ДоходКомитента.Видимость	  = УСН_ДР;
		ТекущийСписокКолонок.СуммаКт.Видимость			  = Истина;
		ТекущийСписокКолонок.КурсВзаиморасчетов.Видимость = НЕ УСН;
		ТекущийСписокКолонок.СуммаНУ.Видимость            = ОСН;
		
		ТекущийСписокКолонок.ДоходЕНВД.ИзменятьВидимость		  = УСН_ДР;
		ТекущийСписокКолонок.ДоходКомитента.ИзменятьВидимость	  = УСН_ДР;
		ТекущийСписокКолонок.СуммаКт.ИзменятьВидимость			  = Истина;
		ТекущийСписокКолонок.КурсВзаиморасчетов.ИзменятьВидимость = НЕ УСН;
		ТекущийСписокКолонок.СуммаНУ.ИзменятьВидимость            = ОСН;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда		
		
		ТекущееТабличноеПоле.Колонки.СуммаБезНДС.АвтоОтметкаНезаполненного = РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям;		
		
		ЭлементыФормы.ПанельДанныеПоСФ.ТекущаяСтраница = ЭлементыФормы.ПанельДанныеПоСФ.Страницы.ОбщиеДанныеОСчетеФактуре;
		
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
			ЭлементыФормы.ДанныеПоСФНДС.Колонки.ДоговорКонтрагента.ЭлементУправления.АвтоОтметкаНезаполненного = Истина;
			ЭлементыФормы.ДанныеПоСФНДС.Колонки.ДоговорКонтрагента.ЭлементУправления.АвтоВыборНезаполненного   = Истина;
			ЭлементыФормы.ДанныеПоСФНДС.Колонки.ДоговорКонтрагента.ЭлементУправления.ОтметкаНезаполненного     = Истина;
		Иначе
			ЭлементыФормы.ДанныеПоСФНДС.Колонки.ДоговорКонтрагента.ЭлементУправления.АвтоОтметкаНезаполненного = Ложь;
			ЭлементыФормы.ДанныеПоСФНДС.Колонки.ДоговорКонтрагента.ЭлементУправления.АвтоВыборНезаполненного   = Ложь;
			ЭлементыФормы.ДанныеПоСФНДС.Колонки.ДоговорКонтрагента.ЭлементУправления.ОтметкаНезаполненного     = Ложь;
		КонецЕсли;
		
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
			ЭлементыФормы.ПанельДанныеПоСФ.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
			ЭлементыФормы.ДанныеПоСФНДС.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
			
		ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям
			И мУпрощенныйУчетНДС Тогда
			ЭлементыФормы.ПанельДанныеПоСФ.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
			ЭлементыФормы.ДанныеПоСФНДС.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
			
		ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
			Если мСложныйУчетНДС Тогда
				ЭлементыФормы.ПанельДанныеПоСФ.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
				ЭлементыФормы.ДанныеПоСФНДС.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.ЧертаСверху);
			Иначе
				ЭлементыФормы.ПанельДанныеПоСФ.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
				ЭлементыФормы.ДанныеПоСФНДС.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
			КонецЕсли;
			
		Иначе
			ЭлементыФормы.ПанельДанныеПоСФ.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
			ЭлементыФормы.ДанныеПоСФНДС.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.ЧертаСверху);
		КонецЕсли;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал Тогда
		ТекущийСписокКолонок = ЭлементыФормы.БухСправка.Колонки;
				
		ТекущийСписокКолонок.СуммаНУ.Видимость			= ОСН;
		ТекущийСписокКолонок.СуммаВР.Видимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаПР.Видимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.Количество.Видимость		= Истина;
		ТекущийСписокКолонок.Валюта.Видимость			= Ложь;
		ТекущийСписокКолонок.ВалютнаяСумма.Видимость	= Ложь;
		ТекущийСписокКолонок.Сумма.Видимость			= Истина;
		ТекущийСписокКолонок.СуммаКт.Видимость			= Истина;
		ТекущийСписокКолонок.Сумма.ТекстШапки			= "Остаток по дебету";
		ТекущийСписокКолонок.СуммаКт.ТекстШапки			= "Остаток по кредиту";
		ТекущийСписокКолонок.ОтражениеВУСН.Видимость = Ложь;
		//управление изменением видимости
		ТекущийСписокКолонок.СуммаНУ.ИзменятьВидимость			= ОСН;
		ТекущийСписокКолонок.СуммаВР.ИзменятьВидимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаПР.ИзменятьВидимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.Количество.ИзменятьВидимость		= Истина;
		ТекущийСписокКолонок.Валюта.ИзменятьВидимость			= Ложь;
		ТекущийСписокКолонок.ВалютнаяСумма.ИзменятьВидимость	= Ложь;
		ТекущийСписокКолонок.Сумма.ИзменятьВидимость			= Истина;
		ТекущийСписокКолонок.СуммаКт.ИзменятьВидимость			= Истина;
		ТекущийСписокКолонок.ОтражениеВУСН.ИзменятьВидимость	= Ложь;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов Тогда
		ТекущийСписокКолонок = ЭлементыФормы.РасходыБудущихПериодов.Колонки;
				
		ТекущийСписокКолонок.СуммаНУ.Видимость					= ОСН;
		ТекущийСписокКолонок.СуммаВР.Видимость					= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаПР.Видимость					= ПрименениеПБУ18;
		ТекущийСписокКолонок.НДС.Видимость						= УСН_ДР;
		ТекущийСписокКолонок.Валюта.Видимость					= УСН_ДР;
		ТекущийСписокКолонок.ВалютнаяСумма.Видимость			= УСН_ДР;
		ТекущийСписокКолонок.ВалютныйНДС.Видимость				= УСН_ДР;
		ТекущийСписокКолонок.ДоговорКонтрагента.Видимость		= УСН_ДР;
		ТекущийСписокКолонок.РасчетныйДокумент.Видимость		= УСН_ДР;
		ТекущийСписокКолонок.СтатусыОплатыРасходовУСН.Видимость	= УСН_ДР;
		ТекущийСписокКолонок.ОтражениеВУСН.Видимость			= УСН_ДР;
		ТекущийСписокКолонок.Контрагент.Видимость				= УСН_ДР;
		//управление изменением видимости
		ТекущийСписокКолонок.СуммаНУ.ИзменятьВидимость					= ОСН;
		ТекущийСписокКолонок.СуммаВР.ИзменятьВидимость					= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаПР.ИзменятьВидимость					= ПрименениеПБУ18;
		ТекущийСписокКолонок.НДС.ИзменятьВидимость						= УСН_ДР;
		ТекущийСписокКолонок.Валюта.ИзменятьВидимость					= УСН_ДР;
		ТекущийСписокКолонок.ВалютнаяСумма.ИзменятьВидимость			= УСН_ДР;
		ТекущийСписокКолонок.ВалютныйНДС.ИзменятьВидимость				= УСН_ДР;
		ТекущийСписокКолонок.ДоговорКонтрагента.ИзменятьВидимость		= УСН_ДР;
		ТекущийСписокКолонок.РасчетныйДокумент.ИзменятьВидимость		= УСН_ДР;
		ТекущийСписокКолонок.СтатусыОплатыРасходовУСН.ИзменятьВидимость	= УСН_ДР;
		ТекущийСписокКолонок.ОтражениеВУСН.ИзменятьВидимость			= УСН_ДР;
		ТекущийСписокКолонок.Контрагент.ИзменятьВидимость				= УСН_ДР;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства Тогда
		ТекущийСписокКолонок = ЭлементыФормы.БухСправка.Колонки;
		
		ТекущийСписокКолонок.СуммаНУ.Видимость			= Ложь;
		ТекущийСписокКолонок.СуммаВР.Видимость			= Ложь;
		ТекущийСписокКолонок.СуммаПР.Видимость			= Ложь;
		ТекущийСписокКолонок.Количество.Видимость		= Ложь;
		ТекущийСписокКолонок.Валюта.Видимость			= Ложь;
		ТекущийСписокКолонок.ВалютнаяСумма.Видимость	= Ложь;
		ТекущийСписокКолонок.Сумма.Видимость			= Истина;
		ТекущийСписокКолонок.СуммаКт.Видимость			= Истина;
		ТекущийСписокКолонок.Сумма.ТекстШапки			= "Остаток по дебету";
		ТекущийСписокКолонок.СуммаКт.ТекстШапки			= "Остаток по кредиту";
		ТекущийСписокКолонок.ОтражениеВУСН.Видимость = Ложь;
		//управление изменением видимости
		ТекущийСписокКолонок.СуммаНУ.ИзменятьВидимость			= Ложь;
		ТекущийСписокКолонок.СуммаВР.ИзменятьВидимость			= Ложь;
		ТекущийСписокКолонок.СуммаПР.ИзменятьВидимость			= Ложь;
		ТекущийСписокКолонок.Количество.ИзменятьВидимость		= Ложь;
		ТекущийСписокКолонок.Валюта.ИзменятьВидимость			= Ложь;
		ТекущийСписокКолонок.ВалютнаяСумма.ИзменятьВидимость	= Ложь;
		ТекущийСписокКолонок.Сумма.ИзменятьВидимость			= Истина;
		ТекущийСписокКолонок.СуммаКт.ИзменятьВидимость			= Истина;
		ТекущийСписокКолонок.ОтражениеВУСН.ИзменятьВидимость	= Ложь;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета Тогда
		ТекущийСписокКолонок = ЭлементыФормы.БухСправка.Колонки;
		
		ТекущийСписокКолонок.СуммаНУ.Видимость			= ОСН;
		ТекущийСписокКолонок.СуммаВР.Видимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаПР.Видимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.Количество.Видимость		= Истина;
		ТекущийСписокКолонок.Валюта.Видимость			= Истина;
		ТекущийСписокКолонок.ВалютнаяСумма.Видимость	= Истина;
		ТекущийСписокКолонок.Сумма.Видимость			= Истина;
		ТекущийСписокКолонок.СуммаКт.Видимость			= Истина;
		ТекущийСписокКолонок.Сумма.ТекстШапки			= "Остаток по дебету";
		ТекущийСписокКолонок.СуммаКт.ТекстШапки			= "Остаток по кредиту";
		ТекущийСписокКолонок.ОтражениеВУСН.Видимость = Ложь;
		//управление изменением видимости
		ТекущийСписокКолонок.СуммаНУ.ИзменятьВидимость			= ОСН;
		ТекущийСписокКолонок.СуммаВР.ИзменятьВидимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаПР.ИзменятьВидимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.Количество.ИзменятьВидимость		= Истина;
		ТекущийСписокКолонок.Валюта.ИзменятьВидимость			= Истина;
		ТекущийСписокКолонок.ВалютнаяСумма.ИзменятьВидимость	= Истина;
		ТекущийСписокКолонок.Сумма.ИзменятьВидимость			= Истина;
		ТекущийСписокКолонок.СуммаКт.ИзменятьВидимость			= Истина;
		ТекущийСписокКолонок.ОтражениеВУСН.ИзменятьВидимость	= Ложь;
		ТекущийСписокКолонок.СуммаВР.ТолькоПросмотр				= Ложь;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНиИП Тогда
		
		Если Предприниматель Тогда
			ЭлементыФормы.МПЗРеализованныеИП.Колонки.НоменклатурнаяГруппа.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
			ЭлементыФормы.МПЗРеализованныеИП.Колонки.ХарактерДеятельности.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
			ЭлементыФормы.ПрочиеРасходыИП.Колонки.НоменклатурнаяГруппа.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
			ЭлементыФормы.ПрочиеРасходыИП.Колонки.ХарактерДеятельности.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
			//управление изменением видимости
			ЭлементыФормы.МПЗРеализованныеИП.Колонки.НоменклатурнаяГруппа.ИзменятьВидимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
			ЭлементыФормы.МПЗРеализованныеИП.Колонки.ХарактерДеятельности.ИзменятьВидимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
			ЭлементыФормы.ПрочиеРасходыИП.Колонки.НоменклатурнаяГруппа.ИзменятьВидимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
			ЭлементыФормы.ПрочиеРасходыИП.Колонки.ХарактерДеятельности.ИзменятьВидимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Процедура отвечает за доступность колонок табличных частей формы, при выборе счета
Процедура УправлениеДоступностьюКолонок(Элемент, ТолькоПросмотр)
	
	СписокКолонок = Элемент.Колонки;
	Для Каждого Колонка ИЗ СписокКолонок Цикл
		Если Колонка.Имя = "СчетУчета" 
			ИЛИ Колонка.Имя = "СуммаВР" Тогда 
			Продолжить;
		ИначеЕсли Колонка.ДанныеФлажка <> "" Тогда
			//Колонка.Доступность = НЕ ТолькоПросмотр;
			Продолжить;
		КонецЕсли;
		Колонка.ТолькоПросмотр = ТолькоПросмотр;
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Процедура устанавливает видимость и доступность отдельных реквизитов формы в зависимости 
//от раздела учета и настроек
Процедура ЗаполнитьРеквизитыРазделов()
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства Тогда
		// Заполним значения по умолчанию
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию = Новый Структура;
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("ПорядокВключенияСтоимостиВСоставРасходовНУ", Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("ПорядокПогашенияСтоимостиБУ",                Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СпособНачисленияАмортизацииБУ",              Перечисления.СпособыНачисленияАмортизацииОС.Линейный);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("МетодНачисленияАмортизацииНУ",               Перечисления.МетодыНачисленияАмортизации.Линейный);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("НачислятьАмортизациюБУ",                     Истина);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("НачислятьАмортизациюНУ",                     Истина);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СпециальныйКоэффициентНУ",                   1);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СчетУчетаБУ",                                ПланыСчетов.Хозрасчетный.ОСвОрганизации);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СчетАмортизацииБУ",                          ПланыСчетов.Хозрасчетный.АмортизацияОС_01);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СпособПоступленияРегл",                      Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату);		
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СостояниеПринятияКУчетуРегл",                УправлениеВнеоборотнымиАктивами.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию));
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("ОтражатьВНалоговомУчете", Истина);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("мСписокСчетов", мСписокСчетов);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("мСписокСчетовНУ", мСписокСчетовНУ);
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивыИНИОКР Тогда
		// Заполним значения по умолчанию
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию = Новый Структура;
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СпособНачисленияАмортизацииБУ",               Перечисления.СпособыНачисленияАмортизацииНМА.Линейный);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("МетодНачисленияАмортизацииНУ",                Перечисления.МетодыНачисленияАмортизации.Линейный);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("НачислятьАмортизациюБУ",                      Истина);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("НачислятьАмортизациюНУ",                      Истина);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СпециальныйКоэффициентНУ",                    1);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СчетУчетаБУ",                                 ПланыСчетов.Хозрасчетный.НематериальныеАктивыОрганизации);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("СчетаНачисленияАмортизацииБУ",                ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("ПорядокВключенияСтоимостиВСоставРасходовУСН", Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставАмортизируемогоИмущества);
		мСтруктураРеквизитовЗаполняемыхПоУмолчанию.Вставить("ОтражатьВНалоговомУчете", Истина);
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
		
		Если НЕ УСН Тогда
			СписокВидовЦенностей = ЭлементыФормы.ДанныеПоСФ.Колонки.ВидЦенности.ЭлементУправления.СписокВыбора;
			
			СписокВидовЦенностей.Очистить();
			
			СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.Товары);
			СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.Материалы);
			СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
			СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.Оборудование);
			СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.ОС);
			СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
			СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
			СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
			СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
		КонецЕсли;
		
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
			мСписокСчетовМатериалов				= мСписокСчетов.Скопировать();
			мСписокСчетовСпецматериалов			= Новый СписокЗначений;
			мСписокСчетовМатериаловВПереработке	= Новый СписокЗначений;
			
			СтрокаСписка = мСписокСчетовМатериалов.НайтиПоЗначению("10.07");
			Если СтрокаСписка <> Неопределено Тогда
				мСписокСчетовМатериаловВПереработке.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление, СтрокаСписка.Пометка, СтрокаСписка.Картинка);
				мСписокСчетовМатериалов.Удалить(СтрокаСписка);
			КонецЕсли;
			СтрокаСписка = мСписокСчетовМатериалов.НайтиПоЗначению("10.11.1");
			Если СтрокаСписка <> Неопределено Тогда
				мСписокСчетовСпецматериалов.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление, СтрокаСписка.Пометка, СтрокаСписка.Картинка);
				мСписокСчетовМатериалов.Удалить(СтрокаСписка);
			КонецЕсли;
			СтрокаСписка = мСписокСчетовМатериалов.НайтиПоЗначению("10.11.2");
			Если СтрокаСписка <> Неопределено Тогда
				мСписокСчетовСпецматериалов.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление, СтрокаСписка.Пометка, СтрокаСписка.Картинка);
				мСписокСчетовМатериалов.Удалить(СтрокаСписка);
			КонецЕсли;
		ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
			мСписокСчетовТоваров				= мСписокСчетов.Скопировать();
			мСписокСчетовТоваровВРозницеАТТ	= Новый СписокЗначений;
			мСписокСчетовТоваровВРозницеНТТ	= Новый СписокЗначений;
			
			СтрокаСписка = мСписокСчетовТоваров.НайтиПоЗначению("41.11");
			Если СтрокаСписка <> Неопределено Тогда
				мСписокСчетовТоваровВРозницеАТТ.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление, СтрокаСписка.Пометка, СтрокаСписка.Картинка);
				мСписокСчетовТоваров.Удалить(СтрокаСписка);
			КонецЕсли;
			СтрокаСписка = мСписокСчетовТоваров.НайтиПоЗначению("41.12");
			Если СтрокаСписка <> Неопределено Тогда
				мСписокСчетовТоваровВРозницеНТТ.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление, СтрокаСписка.Пометка, СтрокаСписка.Картинка);
				мСписокСчетовТоваров.Удалить(СтрокаСписка);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНИИП Тогда
		
		ВидыМПЗДляВыбораПрочие = Новый СписокЗначений;
		ВидыМПЗДляВыбораПрочие.Добавить(Перечисления.ВидыМПЗ.ПрочиеРасходы);
		ВидыМПЗДляВыбораПрочие.Добавить(Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы);
		
		ЭлементыФормы.ПрочиеРасходыИП.Колонки.ВидМПЗ.ЭлементУправления.ДоступныеЗначения = ВидыМПЗДляВыбораПрочие;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		
		ЧисловыеКолонки = Новый Структура();
		Для Каждого Колонка ИЗ ЭлементыФормы.ДанныеПоСФНДС.Колонки Цикл
			Если Колонка.Имя = "НомерСтроки" Тогда
				Продолжить;
			Иначе
				Если ЭлементыФормы.ДанныеПоСФНДС.Колонки[Колонка.Имя].ЭлементУправления <> Неопределено Тогда
					Если ЭлементыФормы.ДанныеПоСФНДС.Колонки[Колонка.Имя].ЭлементУправления.ТипЗначения.Типы()[0] = Тип("Число") Тогда
						ЧисловыеКолонки.Вставить(Колонка.Имя);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		
		СписокВидовЦенностей = ЭлементыФормы.ДанныеПоСФОтгрузка.Колонки.ВидЦенности.ЭлементУправления.СписокВыбора;
		
		СписокВидовЦенностей.Очистить();
		
		СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.Товары);
		СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.Материалы);
		СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
		СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.Оборудование);
		СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.ОС);
		СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
		СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
		СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
		СписокВидовЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Процедура формирует список счетов доступных в данном разделе учета
Процедура СписокСчетовРазделаУчета()
	
	мСписокСчетов		= Новый СписокЗначений;
	мСписокСчетовНДС	= Новый СписокЗначений;
	мСписокСчетовНУ		= Новый СписокЗначений;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНИИП
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыРазделовУчета = ТаблицаСчетовРазделовУчета.Найти(РазделУчета, "РазделУчета");
	Если СтрокаТаблицыРазделовУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетаГруппы		= СтрокаТаблицыРазделовУчета.СчетаГруппы;
	Счета			= СтрокаТаблицыРазделовУчета.Счета;
	СчетаИсключения	= СтрокаТаблицыРазделовУчета.СчетаИсключения;
	СчетаНДС		= СтрокаТаблицыРазделовУчета.СчетаНДС;
	СчетаНУ			= СтрокаТаблицыРазделовУчета.СчетаНУ;
	
	ВыборкаПланаСчетов = ПланыСчетов.Хозрасчетный.Выбрать();
	
	Пока ВыборкаПланаСчетов.Следующий() Цикл
		
		Если ВыборкаПланаСчетов.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПланаСчетов.Код) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета Тогда
			
			Если Найти(СчетаГруппы, Лев(Строка(ВыборкаПланаСчетов.Код), 2)) = 0 И Найти(СчетаИсключения, """" + ВыборкаПланаСчетов.Код + """") = 0 Тогда
				мСписокСчетов.Добавить(СокрЛП(ВыборкаПланаСчетов.Код),СокрЛП(ВыборкаПланаСчетов.Код) + " (" + СокрЛП(ВыборкаПланаСчетов.Наименование) + ")", ВыборкаПланаСчетов.ПометкаУдаления);
			ИначеЕсли Найти(Счета, """" + ВыборкаПланаСчетов.Код + """") <> 0 Тогда
				мСписокСчетов.Добавить(СокрЛП(ВыборкаПланаСчетов.Код),СокрЛП(ВыборкаПланаСчетов.Код) + " (" + СокрЛП(ВыборкаПланаСчетов.Наименование) + ")", ВыборкаПланаСчетов.ПометкаУдаления);
			КонецЕсли;
			
		Иначе
			
			Если Найти(СчетаГруппы, Лев(Строка(ВыборкаПланаСчетов.Код), 2)) > 0 Тогда
				Если Найти(СчетаИсключения, """" + ВыборкаПланаСчетов.Код + """") = 0 Тогда
					мСписокСчетов.Добавить(СокрЛП(ВыборкаПланаСчетов.Код),СокрЛП(ВыборкаПланаСчетов.Код) + " (" + СокрЛП(ВыборкаПланаСчетов.Наименование) + ")", ВыборкаПланаСчетов.ПометкаУдаления);
				КонецЕсли;
			КонецЕсли;
			
			Если Найти(Счета, """" + ВыборкаПланаСчетов.Код + """") <> 0 Тогда
				мСписокСчетов.Добавить(СокрЛП(ВыборкаПланаСчетов.Код),СокрЛП(ВыборкаПланаСчетов.Код) + " (" + СокрЛП(ВыборкаПланаСчетов.Наименование) + ")", ВыборкаПланаСчетов.ПометкаУдаления);
			КонецЕсли;
			
			Если Найти(СчетаНДС, Лев(Строка(ВыборкаПланаСчетов.Код), 2)) > 0 Тогда
				мСписокСчетовНДС.Добавить(СокрЛП(ВыборкаПланаСчетов.Код),СокрЛП(ВыборкаПланаСчетов.Код) + " (" + СокрЛП(ВыборкаПланаСчетов.Наименование) + ")", ВыборкаПланаСчетов.ПометкаУдаления);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьНомерТЧ(ТекущаяТаблица)
	
	мПеренумеровать = 0;
	
	ТабличнаяЧасть = ЭтаФорма[ТекущаяТаблица.Данные];
	РасчетныйНомерСтроки = 0;
	Для Каждого СтрокаТаблицы ИЗ ТабличнаяЧасть Цикл
		Если ТекущаяТаблица.ПроверитьСтроку(СтрокаТаблицы) Тогда
			РасчетныйНомерСтроки = РасчетныйНомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТекущаяТаблица.ТекущиеДанные.НомерСтрокиТЧ = РасчетныйНомерСтроки;
	
КонецПроцедуры

Процедура Перенумеровать(Элемент)
	
	//мПеренумеровать = 0 - ничего не требуется делать
	//мПеренумеровать = 1 - второй вызов процедуры - требуется перенумеровать ТЧ
	//мПеренумеровать = 2 - первый вызов процедуры - ничего не делаем, устанавливаем параметр второго вызова
	//мПеренумеровать = 3 - значение только для проверки при выводе строк
	
	Если мПеренумеровать = 3 Тогда
		ТабличнаяЧасть = ЭтаФорма[Элемент.Данные];
		РасчетныйНомерСтроки = 0;
		Для Каждого СтрокаТаблицы ИЗ ТабличнаяЧасть Цикл
			Если Элемент.ПроверитьСтроку(СтрокаТаблицы) Тогда
				РасчетныйНомерСтроки = РасчетныйНомерСтроки + 1;
				Если СтрокаТаблицы.НомерСтрокиТЧ <> РасчетныйНомерСтроки 
					И СтрокаТаблицы.НомерСтрокиТЧ <> 0 Тогда
					мПеренумеровать = 1;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если мПеренумеровать <> 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если мПеренумеровать = 1 Тогда
		ТабличнаяЧасть = ЭтаФорма[Элемент.Данные];
		РасчетныйНомерСтроки = 0;
		Для Каждого СтрокаТаблицы ИЗ ТабличнаяЧасть Цикл
			Если Элемент.ПроверитьСтроку(СтрокаТаблицы) Тогда
				РасчетныйНомерСтроки = РасчетныйНомерСтроки + 1;
				СтрокаТаблицы.НомерСтрокиТЧ = РасчетныйНомерСтроки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если мПеренумеровать > 0 Тогда
		мПеренумеровать = мПеренумеровать - 1;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Определяем систему налогообложения организации, юр. или физ. лицо
Процедура УстановитьТипОрганизации()
	
	УСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата+24*60*60);
	УСН_ДР = УСН И (НЕ НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата+24*60*60));
	Предприниматель = ОбщегоНазначения.Предприниматель(Организация, Дата+ 24*60*60);
	ОСН = НЕ УСН И НЕ Предприниматель ;
	ПрименениеПБУ18 = ОСН И НалоговыйУчет.ПрименениеПБУ18(Организация, Дата + 24*60*60);
	
	УчетнаяПолитикаНеЗадана = Ложь;
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата + 24*60*60, УчетнаяПолитикаНеЗадана, Организация);
	
	Если УчетнаяПолитикаНеЗадана Тогда
		мУпрощенныйУчетНДС	= Ложь; 
		мСложныйУчетНДС		= Ложь;
		мВестиУчетПоВидамДеятельностиПредпринимателя = Ложь;
		мРозницаВПродажныхЦенах = Ложь;
		мНДСПриНеподтвержденииСверху = Ложь;
		мОценкаМПЗПоСредней = Истина;
	Иначе
		мУпрощенныйУчетНДС	= УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата+24*60*60);
		мСложныйУчетНДС		= УчетнаяПолитикаНУ.СложныйУчетНДС И Не УчетнаяПолитикаНУ.УСН И Не УчетнаяПолитикаНУ.УпрощенныйУчетНДС;
		мВестиУчетПоВидамДеятельностиПредпринимателя = УчетнаяПолитикаНУ.ВестиУчетПоВидамДеятельности;
		мРозницаВПродажныхЦенах = УчетнаяПолитикаНУ.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
		мНДСПриНеподтвержденииСверху = УчетнаяПолитикаНУ.НДСПриНеподтвержденииСверху;
		мОценкаМПЗПоСредней = УчетнаяПолитикаНУ.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней;
		Если УСН Тогда
			мУпрощенныйУчетНДС	= Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Свертка и разворачивание панели по горизонтали (прячем и показываем справку)
Процедура ИзменитьВидимостьПанелиПоГоризонтали(Форма, ОтображатьПанель, ИмяОсновнойПанели, ПостфиксЭлементов)
	
	Перем Элемент, Граница, Пусто;
	
	ОсновнаяПанель	= Форма.ЭлементыФормы[ИмяОсновнойПанели];
	мПанель			= Форма.ЭлементыФормы["Панель" + ПостфиксЭлементов];
	Разделитель		= Форма.ЭлементыФормы["Разделитель" + ПостфиксЭлементов];
	
	Если ОтображатьПанель Тогда
		Если мПанель.Свертка = РежимСверткиЭлементаУправления.Право Тогда
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
			мПанель.Свертка = РежимСверткиЭлементаУправления.Нет;
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право);
			мПанель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Разделитель, ГраницаЭлементаУправления.Право);
		КонецЕсли;
	Иначе
		Если мПанель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			мПанель.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, мПанель, ГраницаЭлементаУправления.Лево);
			мПанель.Свертка = РежимСверткиЭлементаУправления.Право;
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Право;
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Свертка и разворачивание панели по вертикали (прячем и показываем таблицу неоплаченных материалов)
Процедура ИзменитьВидимостьПанелиПоВертикали(Форма, ОтображатьПанель, ИмяОсновнойПанели, ПостфиксЭлементов)
	
	Перем Элемент, Граница, Пусто;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		ТекущаяПанель = ЭлементыФормы.ПанельНоменклатураОтгрузка;
	Иначе
		ТекущаяПанель = ЭлементыФормы.ПанельНоменклатура;
	КонецЕсли;
	
	ОсновнаяПанель	= Форма.ЭлементыФормы[ИмяОсновнойПанели];
	мПанель			= Форма.ЭлементыФормы["Панель" + ПостфиксЭлементов];
	Разделитель		= Форма.ЭлементыФормы["Разделитель" + ПостфиксЭлементов];
	ВысотаНесущейПанели = ТекущаяПанель.Высота;
	
	Если ОтображатьПанель Тогда
		Если мПанель.Свертка = РежимСверткиЭлементаУправления.Низ Тогда
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Верх);
			мПанель.Свертка = РежимСверткиЭлементаУправления.Нет;
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
			мПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
		КонецЕсли;
	Иначе
		Если мПанель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			мПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, мПанель, ГраницаЭлементаУправления.Верх);
			мПанель.Свертка = РежимСверткиЭлементаУправления.Низ;
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Низ;
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Верх);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Действия при изменении даты документа
Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	ПроверитьДатуДокумента();
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	УстановитьТипОрганизации();	
	Если ЗначениеЗаполнено(РазделУчета) Тогда
		СопоставитьРазделыУчетаСтраницам();
		ПоказатьПодсказку();
		Если ЭтоНовый() Тогда
			ЗаполнитьРеквизитыРазделов();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьДатуДокумента()
	
	Если ОтражатьВБухгалтерскомУчете
		И ОтражатьВНалоговомУчете
		И ОтражатьПоСпециальнымРегистрам Тогда
		ЭлементыФормы.Дата.ТолькоПросмотр = Истина;
		ПолучитьДатуНачалаУчета(Истина);
		Если НачалоДня(мТекущаяДатаДокумента) <> НачалоДня(Дата) Тогда
			РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
			МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			Сообщить("Установленный режим ввода остатков используется только на дату ввода начальных остатков.", СтатусСообщения.Информация);
		КонецЕсли;
	Иначе
		ЭлементыФормы.Дата.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////////////
//Действия при изменении организации
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьТипОрганизации();	
	Если ОтражатьВБухгалтерскомУчете
		И ОтражатьВНалоговомУчете
		И ОтражатьПоСпециальнымРегистрам Тогда
		ПолучитьДатуНачалаУчета(Ложь);
		мТекущаяДатаДокумента = Дата;
		ЭлементыФормы.Дата.ТолькоПросмотр = Дата <> '00010101';
	Иначе
		ЭлементыФормы.Дата.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РазделУчета) Тогда
		СопоставитьРазделыУчетаСтраницам();
		ПоказатьПодсказку();
		Если ЭтоНовый() Тогда
			ЗаполнитьРеквизитыРазделов();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Элемент.Значение <> ВыбранноеЗначение Тогда
		Если НЕ ЗначениеЗаполнено(РазделУчета) Тогда
			Возврат;
		КонецЕсли;
		ТекстВопроса = "Изменилась организация! Состав колонок табличной части документа будет изменен. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		ИначеЕсли ДокументЗаполнен() Тогда
			ТекстВопроса = "При изменении организации отдельные реквизиты в табличных частях будут перезаполнены или очищены. Продолжить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				СтандартнаяОбработка = Ложь;
				Возврат;
			Иначе
				ИзменитьРеквизитыТабличныхПолей();
			КонецЕсли;
		КонецЕсли;
		Если Не ПустаяСтрока(Номер) Тогда
			МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// {ОбособленныеПодразделения

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
 	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()

// }ОбособленныеПодразделения 

///////////////////////////////////////////////////////////////////////////////////////////////////
//Действия при изменении раздела учета

Процедура РазделУчетаПриИзменении(Элемент)
	УстановитьТипОрганизации();	
	СопоставитьРазделыУчетаСтраницам();
	ЗаполнитьРеквизитыРазделов();
	ПоказатьПодсказку();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(РазделУчета, ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура РазделУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.Значение = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДокументЗаполнен() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Документ заполнен! Нельзя изменить раздел учета у заполненного документа.
	|Создать новый документ с указанными параметрами?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Записать();
	
	//Создаем новый документ
	КлючУникальностиДокумента = Новый Структура();
	КлючУникальностиДокумента.Вставить("Организация", Организация);
	КлючУникальностиДокумента.Вставить("РазделУчета", ВыбранноеЗначение);
	КлючУникальностиДокумента.Вставить("ПодразделениеОрганизации", ПодразделениеОрганизации);

	ДокументВводаОстатков				= Документы.ВводНачальныхОстатков.ПолучитьФормуНовогоДокумента(, , КлючУникальностиДокумента);
	ДокументВводаОстатков.Организация	= Организация;
	ДокументВводаОстатков.Дата			= Дата;
	ДокументВводаОстатков.РазделУчета	= ВыбранноеЗначение;
	ДокументВводаОстатков.ПодразделениеОрганизации	= ПодразделениеОрганизации;
	ДокументВводаОстатков.Открыть();
		
КонецПроцедуры

Процедура РазделУчетаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Функция ДокументЗаполнен()
	
	// получение списка регистров, по которым существуют движения
	ТаблицаДвижений = ПолныеПрава.ОпределитьНаличиеДвиженийПоРегистратору(ДокументОбъект.Ссылка);
		
	Если ТаблицаДвижений.Количество() > 0 Тогда
		//Документ проведен и им сформированы движения
		Возврат Истина;
	КонецЕсли;
	
	//проверим заполнение табличных частей документа
	Для Каждого ТабличнаяЧасть Из ЭтотОбъект.Метаданные().ТабличныеЧасти Цикл
		Если ЭтаФорма[ТабличнаяЧасть.Имя].Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ИзменитьРеквизитыТабличныхПолей()
	//проверим заполнение табличных частей документа
	Для Каждого ТабличнаяЧасть Из ЭтотОбъект.Метаданные().ТабличныеЧасти Цикл
		ТекущаяТабличнаяЧасть = ЭтаФорма[ТабличнаяЧасть.Имя];
		КоличествоЗаписей = ТекущаяТабличнаяЧасть.Количество();
		Если КоличествоЗаписей > 0 Тогда
			Для Каждого Реквизит ИЗ ТабличнаяЧасть.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов"))
					ИЛИ Реквизит.Тип.СодержитТип(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"))
					ИЛИ Реквизит.Тип.СодержитТип(Тип("ДокументСсылка.РеализацияТоваровУслуг"))
					ИЛИ Реквизит.Тип.СодержитТип(Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")) Тогда
					НовыеЗначения = Новый Массив(КоличествоЗаписей);
					ТекущаяТабличнаяЧасть.ЗагрузитьКолонку(НовыеЗначения, Реквизит.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Формируем отчет по установленному в документе разделу учета
Процедура ОсновныеДействияФормыСформироватьОтчет(Кнопка)
	
	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Показать движения документа в форме редактирования движений документа
Процедура ДействияФормыРезультатПроведения(Кнопка)
	
	//Открывает форму движений документа для ручного редактирования
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Форма выбора счета, ограниченная условиями
Процедура НачалоВыбораСчета(Элемент, СписокСчетов = "", СписокСчетовНУ = "", ТекущийСчет = Неопределено)
	
	СписокСчетовОтбора = "";
	Если ЗначениеЗаполнено(СписокСчетов) Тогда
		ФормаВыбораСчета			= ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора( ,Элемент, );
		СписокСчетовОтбора = СписокСчетов;
	КонецЕсли;
	
	ПолеОтбора					= ФормаВыбораСчета.Отбор.Код;
	
	ПолеОтбора.ВидСравнения		= ВидСравнения.ВСписке;
	ПолеОтбора.Значение			= СписокСчетовОтбора;
	ПолеОтбора.Использование	= Истина;
	
	ФормаВыбораСчета.ЭлементыФормы.Список.НастройкаОтбора.Код.Доступность = Ложь;
	Если ТекущийСчет <>  Неопределено Тогда
		ФормаВыбораСчета.ЭлементыФормы.Список.ТекущаяСтрока = ТекущийСчет;
	КонецЕсли;
	ФормаВыбораСчета.ОткрытьМодально();
	
КонецПроцедуры

Функция СократитьСписокСчетов(Текст, мфСписокСчетов)
	
	ДлинаТекста = СтрДлина(Текст);
	мфТаблицаСчетов = Новый ТаблицаЗначений;
	мфТаблицаСчетов.Колонки.Добавить("Счет");
	мфТаблицаСчетов.Колонки.Добавить("КодСчета");
	мфТаблицаСчетов.Колонки.Добавить("КодБыстрогоВыбораСчета");
	мфТаблицаСчетов.Колонки.Добавить("НаименованиеСчета");
	мфТаблицаСчетов.Колонки.Добавить("ЗначениеСписка");
	Для Каждого СтрокаСписка ИЗ мфСписокСчетов Цикл
		мфТекущийСчет = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаСписка.Значение);
		НоваяСтрока = мфТаблицаСчетов.Добавить();
		НоваяСтрока.Счет = мфТекущийСчет;
		НоваяСтрока.КодСчета = Лев(ВРег(Строка(мфТекущийСчет.Код)),ДлинаТекста);
		НоваяСтрока.КодБыстрогоВыбораСчета = Лев(ВРег(Строка(мфТекущийСчет.КодБыстрогоВыбора)),ДлинаТекста);
		НоваяСтрока.НаименованиеСчета = Лев(ВРег(Строка(мфТекущийСчет.Наименование)),ДлинаТекста);
		НоваяСтрока.ЗначениеСписка = СтрокаСписка.Значение;
	КонецЦикла;
	
	КраткийСписокСчетов = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы ИЗ мфТаблицаСчетов Цикл
		Если Найти(СтрокаТаблицы.КодСчета, ВРег(Текст)) <> 0
			ИЛИ Найти(СтрокаТаблицы.КодБыстрогоВыбораСчета, ВРег(Текст)) <> 0
			ИЛИ Найти(СтрокаТаблицы.НаименованиеСчета, ВРег(Текст)) <> 0 Тогда
			СтрокаСписка = мфСписокСчетов.НайтиПоЗначению(СтрокаТаблицы.ЗначениеСписка);
			КраткийСписокСчетов.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление, СтрокаСписка.Пометка, СтрокаСписка.Картинка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КраткийСписокСчетов;
	
КонецФункции

Процедура ОконченВводТекстаСчета(Элемент, Текст, Значение, СтандартнаяОбработка, СписокСчетов = "", СписокСчетовНУ = "")
	
	СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(СписокСчетов) Тогда
		Если ПланыСчетов.Хозрасчетный.НайтиПоКоду(Текст) = ПланыСчетов.Хозрасчетный.ПустаяСсылка()
			И ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", Текст) = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
			
			КраткийСписокСчетов = СократитьСписокСчетов(Текст, СписокСчетов);
			
			Если КраткийСписокСчетов.Количество()<> 0 Тогда
				Если КраткийСписокСчетов.Количество() = 1 Тогда
					СтандартнаяОбработка = Истина;
				Иначе
					Значение = КраткийСписокСчетов;
				КонецЕсли;
			Иначе
				Значение = Новый СписокЗначений;
			КонецЕсли;
			
		Иначе
			Если СписокСчетов.НайтиПоЗначению(Текст) = Неопределено
				И СписокСчетов.НайтиПоЗначению(ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", Текст).Код) = Неопределено Тогда 
				
				КраткийСписокСчетов = СократитьСписокСчетов(Текст, СписокСчетов);
				
				Если КраткийСписокСчетов.Количество()<> 0 Тогда
					Если КраткийСписокСчетов.Количество() = 1 Тогда
						СтандартнаяОбработка = Истина;
					Иначе
						Значение = КраткийСписокСчетов;
					КонецЕсли;
				Иначе
					Значение = Новый СписокЗначений;
				КонецЕсли;
				
			Иначе
				
				СтандартнаяОбработка = Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаВыбораСчета(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Хозрасчетный = Истина)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если Хозрасчетный Тогда
			Если ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВыбранноеЗначение) <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
				ВыбранноеЗначение = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВыбранноеЗначение);
			ИначеЕсли ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", ВыбранноеЗначение) <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
				ВыбранноеЗначение = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
			Если ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВыбранноеЗначение) <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
				ВыбранноеЗначение = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВыбранноеЗначение);
			ИначеЕсли ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", ВыбранноеЗначение) <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
				ВыбранноеЗначение = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ОпределитьСписокДоступныхВидовДоговоров()
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		Если ЭлементыФормы.МПЗОтгруженные.ТекущаяКолонка = ЭлементыФормы.МПЗОтгруженные.Колонки.ДоговорПокупателя
			ИЛИ ЭлементыФормы.МПЗОтгруженные.ТекущаяКолонка = ЭлементыФормы.МПЗОтгруженные.Колонки.Покупатель Тогда
			мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
			мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		ИначеЕсли ЭлементыФормы.МПЗОтгруженные.ТекущаяКолонка = ЭлементыФормы.МПЗОтгруженные.Колонки.ДоговорПоставщика
			ИЛИ ЭлементыФормы.МПЗОтгруженные.ТекущаяКолонка = ЭлементыФормы.МПЗОтгруженные.Колонки.Поставщик Тогда
			мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		КонецЕсли;
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНиИП Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Иначе
		Для Каждого ЗначениеПеречисления ИЗ Перечисления.ВидыДоговоровКонтрагентов Цикл
			мСписокВидовДоговоров.Добавить(ЗначениеПеречисления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел "Основные средства"

Процедура ОСВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Отказ = Истина;
	
	Форма = ДокументОбъект.ПолучитьФорму("ФормаРедактированияСтрокиОС", Элемент, "Документ_ВводНачальныхОстатков_ФормаРедактированияСтрокиОС_" + СокрЛП(Элемент.ТекущиеДанные.НомерСтроки));
	
	Форма.ДокументОбъект = ДокументОбъект;
	Форма.ТекущиеДанные  = Элемент.ТекущиеДанные;
	
	Форма.Открыть();
	
КонецПроцедуры

Процедура ОСПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	Форма = ДокументОбъект.ПолучитьФорму("ФормаРедактированияСтрокиОС", Элемент, "Документ_ВводНачальныхОстатков_ФормаРедактированияСтрокиОС_НоваяСтрока");
	
	Форма.ДокументОбъект = ДокументОбъект;
	Форма.ТекущиеДанные  = Элемент.ТекущиеДанные;
	Форма.ЭтоНовый       = Истина;
	Форма.Копирование    = Копирование;
	
	Форма.Открыть();
	
КонецПроцедуры

Процедура ОСПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Форма = ДокументОбъект.ПолучитьФорму("ФормаРедактированияСтрокиОС", Элемент, "Документ_ВводНачальныхОстатков_ФормаРедактированияСтрокиОС_" + СокрЛП(Элемент.ТекущиеДанные.НомерСтроки));
	
	Форма.ДокументОбъект = ДокументОбъект;
	Форма.ТекущиеДанные  = Элемент.ТекущиеДанные;
	
	Форма.Открыть();
	
КонецПроцедуры

Процедура ОСПослеУдаления(Элемент)
	
	мМодифицированаТабличнаяЧасть = Истина;
	
КонецПроцедуры

Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	мПредыдущееОС = ЭлементыФормы.ОС.ТекущиеДанные.ОсновноеСредство;
	
	Если НоваяСтрока Тогда
		ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные, ДокументОбъект.мСтруктураРеквизитовЗаполняемыхПоУмолчанию);		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОСПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	СинийЦвет = Новый Цвет(235,245,255);
	
	Если Элемент.ТекущиеДанные = ДанныеСтроки Тогда
		ОформлениеСтроки.ЦветФона = СинийЦвет;
	Иначе
		ОформлениеСтроки.ЦветФона = Новый Цвет;
	КонецЕсли;
	
	Если ОформлениеСтроки.Ячейки.КодОС.Видимость Тогда
		ОформлениеСтроки.Ячейки.КодОС.УстановитьТекст( ДанныеСтроки.ОсновноеСредство.Код);
	КонецЕсли;
	
	СписокДоступныхЗначений = Новый СписокЗначений();
	
	СписокДоступныхЗначений.Добавить(Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации);
	СписокДоступныхЗначений.Добавить(Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету);
	СписокДоступныхЗначений.Добавить(Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается);
	
	Элемент.Колонки.ПорядокПогашенияСтоимостиБУ.ЭлементУправления.ДоступныеЗначения	= СписокДоступныхЗначений;
	
КонецПроцедуры

Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	мМодифицированаТабличнаяЧасть = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел "Нематериальные активы"

Процедура НМАВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Отказ = Истина;
	
	Форма = ДокументОбъект.ПолучитьФорму("ФормаРедактированияСтрокиНМА", Элемент, "Документ_ВводНачальныхОстатков_ФормаРедактированияСтрокиНМА_" + СокрЛП(Элемент.ТекущиеДанные.НомерСтроки));
	
	Форма.ДокументОбъект = ДокументОбъект;
	Форма.ТекущиеДанные  = Элемент.ТекущиеДанные;
	
	Форма.Открыть();
	
КонецПроцедуры

Процедура НМАПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	Форма = ДокументОбъект.ПолучитьФорму("ФормаРедактированияСтрокиНМА", Элемент, "Документ_ВводНачальныхОстатков_ФормаРедактированияСтрокиНМА_НоваяСтрока");
	
	Форма.ДокументОбъект = ДокументОбъект;
	Форма.ТекущиеДанные  = Элемент.ТекущиеДанные;
	Форма.ЭтоНовый       = Истина;
	Форма.Копирование    = Копирование;
	
	Форма.Открыть();
	
КонецПроцедуры

Процедура НМАПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Форма = ДокументОбъект.ПолучитьФорму("ФормаРедактированияСтрокиНМА", Элемент, "Документ_ВводНачальныхОстатков_ФормаРедактированияСтрокиНМА_" + СокрЛП(Элемент.ТекущиеДанные.НомерСтроки));
	
	Форма.ДокументОбъект = ДокументОбъект;
	Форма.ТекущиеДанные  = Элемент.ТекущиеДанные;
	
	Форма.Открыть();
	
КонецПроцедуры

Процедура НМАПослеУдаления(Элемент)
	
	мМодифицированаТабличнаяЧасть = Истина;
	
КонецПроцедуры

Процедура НМАПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	мПредыдущийНМА = ЭлементыФормы.НМА.ТекущиеДанные.НематериальныйАктив;
	
	Если НоваяСтрока Тогда
		ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные, ДокументОбъект.мСтруктураРеквизитовЗаполняемыхПоУмолчанию);		
	КонецЕсли;
	
КонецПроцедуры

Процедура НМАПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	СинийЦвет = Новый Цвет(235,245,255);
	
	Если Элемент.ТекущиеДанные = ДанныеСтроки Тогда
		ОформлениеСтроки.ЦветФона = СинийЦвет;
	Иначе
		ОформлениеСтроки.ЦветФона = Новый Цвет;
	КонецЕсли;
	
КонецПроцедуры

Процедура НМАПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	мМодифицированаТабличнаяЧасть = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел "Прочие счета бухгалтерского учета" и прочие разделы, которые используют ТЧ БухСправка

Процедура БухСправкаСчетУчетаПриИзменении(Элемент)
	
	Если СчетМожноИспользоватьВПроводках(Элемент.Значение) Тогда
		ТекущиеДанные = ЭлементыФормы.БухСправка.ТекущиеДанные;
		ПриВыбореСчетаБухСправки(ТекущиеДанные, ЭлементыФормы.БухСправка, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура БухСправкаСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораСчета(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура БухСправкаПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.БухСправка.ТекущиеДанные;
	ПриВыбореСчетаБухСправки(ТекущиеДанные, ЭлементыФормы.БухСправка);
	
КонецПроцедуры

Процедура БухСправкаСчетУчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоВыбораСчета(Элемент, мСписокСчетов,,Элемент.Значение);
	
КонецПроцедуры

Процедура БухСправкаСчетУчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОконченВводТекстаСчета(Элемент, Текст, Значение, СтандартнаяОбработка, мСписокСчетов);
	
КонецПроцедуры

Процедура БухСправкаСчетУчетаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Пересчитывает стоимость (ВР)
//
Процедура ПересчитатьСуммыРазниц()
	
	Если ТипЗнч(ЭтаФорма.ТекущийЭлемент) <> Тип("ТабличноеПоле") Тогда
		Возврат;
	КонецЕсли;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
		ТекущаяТаблица = ЭлементыФормы.МПЗПриобретенные;
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		ТекущаяТаблица = ЭлементыФормы.РасчетыПоНалогамИСборам;
			
		Если ТекущаяТаблица.ТекущаяКолонка.Имя = "Сумма" 
			И ТекущаяТаблица.ТекущиеДанные.Сумма <> 0 Тогда
			ТекущаяТаблица.ТекущиеДанные.СуммаКт = 0;
		ИначеЕсли ТекущаяТаблица.ТекущаяКолонка.Имя = "СуммаКт" 
			И ТекущаяТаблица.ТекущиеДанные.СуммаКт <> 0 Тогда
			ТекущаяТаблица.ТекущиеДанные.Сумма = 0;
		КонецЕсли;
		
		Если ТекущаяТаблица.ТекущиеДанные.Сумма <> 0 Тогда
			СуммаРасчет = ТекущаяТаблица.ТекущиеДанные.Сумма;
		Иначе
			СуммаРасчет = ТекущаяТаблица.ТекущиеДанные.СуммаКт;
		КонецЕсли;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		ТекущаяТаблица = ЭлементыФормы.МПЗОтгруженные;
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов Тогда
		ТекущаяТаблица = ЭлементыФормы.РасходыБудущихПериодов;
	Иначе
		ТекущаяТаблица = ЭлементыФормы.БухСправка;
		
		Если ТекущаяТаблица.ТекущаяКолонка.Имя = "Сумма" 
			И ТекущаяТаблица.ТекущиеДанные.Сумма <> 0 Тогда
			ТекущаяТаблица.ТекущиеДанные.СуммаКт = 0;
		ИначеЕсли ТекущаяТаблица.ТекущаяКолонка.Имя = "СуммаКт" 
			И ТекущаяТаблица.ТекущиеДанные.СуммаКт <> 0 Тогда
			ТекущаяТаблица.ТекущиеДанные.Сумма = 0;
		КонецЕсли;
		
		Если ТекущаяТаблица.ТекущиеДанные.Сумма <> 0 Тогда
			СуммаРасчет = ТекущаяТаблица.ТекущиеДанные.Сумма;
		Иначе
			СуммаРасчет = ТекущаяТаблица.ТекущиеДанные.СуммаКт;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные = ТекущаяТаблица.ТекущиеДанные;
	
	Если ОСН И НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		
		Если ТекущиеДанные.СуммаНУ = 0 Тогда
			Если ЭтаФорма.ТекущийЭлемент.ТекущаяКолонка.Имя = "Сумма" Тогда
				Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации
					ИЛИ ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации Тогда
					ТекущиеДанные.СуммаНУ = 0;
				Иначе
					ТекущиеДанные.СуммаНУ = ТекущиеДанные.Сумма;
				КонецЕсли;
			ИначеЕсли ЭтаФорма.ТекущийЭлемент.ТекущаяКолонка.Имя = "СуммаКт" Тогда
				ТекущиеДанные.СуммаНУ = ТекущиеДанные.СуммаКт;
			ИначеЕсли ЭтаФорма.ТекущийЭлемент.ТекущаяКолонка.Имя = "СуммаНУ" 
				ИЛИ ЭтаФорма.ТекущийЭлемент.ТекущаяКолонка.Имя = "СуммаПР" Тогда
				//Сумму НУ не трогаем
			Иначе
				Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации
					ИЛИ ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации Тогда
					ТекущиеДанные.СуммаНУ = 0;
				ИначеЕсли ЭтаФорма.ТекущийЭлемент.Колонки.Найти("СуммаКт") <> Неопределено Тогда
					Если ТекущиеДанные.СуммаКт <> 0 Тогда
						ТекущиеДанные.СуммаНУ = ТекущиеДанные.СуммаКт;
					Иначе
						ТекущиеДанные.СуммаНУ = ТекущиеДанные.Сумма;
					КонецЕсли;
				Иначе
					ТекущиеДанные.СуммаНУ = ТекущиеДанные.Сумма;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
				
				Если ЭтаФорма.ТекущийЭлемент.ТекущаяКолонка.Имя = "Сумма" Тогда
					ТекущиеДанные.СуммаНУ = ТекущиеДанные.Сумма;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПрименениеПБУ18 И НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам
			ИЛИ (ТекущаяТаблица.Имя = "БухСправка") Тогда
			ТекущиеДанныеСумма = СуммаРасчет;
		Иначе
			ТекущиеДанныеСумма = ТекущиеДанные.Сумма;
		КонецЕсли;
		
		Если НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета Тогда
			ТекущиеДанные.СуммаВР = ТекущиеДанныеСумма - ТекущиеДанные.СуммаНУ - ТекущиеДанные.СуммаПР;
		Иначе
			Если ТекущиеДанные.СуммаВР = 0 Тогда
				ТекущиеДанные.СуммаВР = ТекущиеДанныеСумма - ТекущиеДанные.СуммаНУ - ТекущиеДанные.СуммаПР;
			КонецЕсли;
		КонецЕсли;	
		
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов Тогда
			ПриВыбореСчетаРБП(ТекущиеДанные, ТекущаяТаблица, Истина, ,Истина);
		ИначеЕсли РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
			ПриВыбореСчетаБухСправки(ТекущиеДанные, ТекущаяТаблица, Истина, Истина);
		КонецЕсли;
		
	ИначеЕсли УСН Тогда
		
		Если НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
			И НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство Тогда
			ПересчитатьСуммыДляУСН(ТекущиеДанные, ТекущаяТаблица);
		КонецЕсли;
		
	ИначеЕсли НЕ ПрименениеПБУ18 Тогда
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов Тогда
			ПриВыбореСчетаРБП(ТекущиеДанные, ТекущаяТаблица, Истина, ,Истина);
		ИначеЕсли РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
			ПриВыбореСчетаБухСправки(ТекущиеДанные, ТекущаяТаблица, Истина, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьСуммыРазниц()

Процедура ПересчитатьСуммыДляУСН(ТекущиеДанные, ТекущаяТаблица)
	
	ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["Номенклатура"];
	ЭтоНоменклатура = ТекущиеДанные.СчетУчета.ВидыСубконто.Найти(ВидСубк) = Неопределено;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		ТекущиеДанныеСумма = ?(ТекущиеДанные.Сумма <> 0, ТекущиеДанные.Сумма, ТекущиеДанные.СуммаКт);
	Иначе
		ТекущиеДанныеСумма = ТекущиеДанные.Сумма;
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов Тогда
			ЭтоНоменклатура = ложь;
		КонецЕсли;
	КонецЕсли;
	
	
	Если НЕ ЭтоНоменклатура Тогда
		
		ВалютаРуб = (НЕ ЗначениеЗаполнено(ТекущиеДанные.Валюта)) ИЛИ (мВалютаРегламентированногоУчета = ТекущиеДанные.Валюта И ЗначениеЗаполнено(ТекущиеДанные.Валюта));
		ТекущаяТаблица.Колонки.ВалютнаяСумма.ТолькоПросмотр	= ВалютаРуб;
		ТекущаяТаблица.Колонки.ВалютныйНДС.ТолькоПросмотр	= ВалютаРуб;
		
		Если ВалютаРуб Тогда
			ТекущиеДанные.ВалютнаяСумма = ТекущиеДанныеСумма;
			ТекущиеДанные.ВалютныйНДС = ТекущиеДанные.НДС;
		Иначе
			Если ТекущиеДанные.ВалютнаяСумма = 0 Тогда
				ТекущиеДанные.ВалютнаяСумма = ТекущиеДанныеСумма;
			КонецЕсли;
			Если ТекущиеДанные.ВалютныйНДС = 0 Тогда
				ТекущиеДанные.ВалютныйНДС = ТекущиеДанные.НДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает типы субконто выбранного счета
//
Процедура ПриВыбореСчетаБухСправки(ТекущиеДанные, ТекущаяТаблица, Редактирование = Ложь, СуммыПересчитаны = Ложь)
	
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущаяТаблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяТаблица.Имя = "БухСправка" Тогда
		РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекущиеДанные.СчетУчета,
	                                 ТекущиеДанные.Субконто1, ТекущаяТаблица.Колонки.Субконто1,
	                                 ТекущиеДанные.Субконто2, ТекущаяТаблица.Колонки.Субконто2,
	                                 ТекущиеДанные.Субконто3, ТекущаяТаблица.Колонки.Субконто3);
	
		ТекущаяТаблица.Колонки.Сумма.ТолькоПросмотр = НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетУчета);
		ТекущаяТаблица.Колонки.СуммаКт.ТолькоПросмотр = НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетУчета);
	
		ТекущаяТаблица.Колонки.Валюта.ТолькоПросмотр			= НЕ ТекущиеДанные.СчетУчета.Валютный;
		ТекущаяТаблица.Колонки.ВалютнаяСумма.ТолькоПросмотр	= НЕ ТекущиеДанные.СчетУчета.Валютный;
	КонецЕсли;
	
	Если ТекущаяТаблица.Колонки.Найти("Количество") <> Неопределено Тогда
		ТекущаяТаблица.Колонки.Количество.ТолькоПросмотр = НЕ ТекущиеДанные.СчетУчета.Количественный;
	КонецЕсли;
	
	Если УСН_ДР Тогда
		Если ТекущаяТаблица.Колонки.ОтражениеВУСН.Видимость Тогда
			ТекущаяТаблица.Колонки.ОтражениеВУСН.ТолькоПросмотр = НЕ ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство
																  И НЕ ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяТаблица.Колонки.СуммаНУ.ТолькоПросмотр	= НЕ ТекущиеДанные.СчетУчета.НалоговыйУчет;
	ТекущаяТаблица.Колонки.СуммаПР.ТолькоПросмотр	= НЕ ТекущиеДанные.СчетУчета.НалоговыйУчет;
	
	Если ТекущаяТаблица.Имя = "БухСправка" Тогда
		Если ТекущаяТаблица.Колонки.СуммаКт.Видимость Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.СчетУчета) Тогда
				Если ТекущиеДанные.СчетУчета.Вид = ВидСчета.Активный Тогда
					ТекущаяТаблица.Колонки.СуммаКт.ТолькоПросмотр = Истина;
					ТекущаяТаблица.Колонки.Сумма.ТолькоПросмотр = Ложь;
				ИначеЕсли ТекущиеДанные.СчетУчета.Вид = ВидСчета.Пассивный Тогда
					ТекущаяТаблица.Колонки.СуммаКт.ТолькоПросмотр = Ложь;
					ТекущаяТаблица.Колонки.Сумма.ТолькоПросмотр = Истина;
				ИначеЕсли ТекущиеДанные.СчетУчета.Вид = ВидСчета.АктивноПассивный Тогда
					ТекущаяТаблица.Колонки.СуммаКт.ТолькоПросмотр = Ложь;
					ТекущаяТаблица.Колонки.Сумма.ТолькоПросмотр = Ложь;
				КонецЕсли;
			Иначе
				ТекущаяТаблица.Колонки.СуммаКт.ТолькоПросмотр = Истина;
				ТекущаяТаблица.Колонки.Сумма.ТолькоПросмотр = Истина;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущиеДанные.СчетУчета) Тогда
				ТекущаяТаблица.Колонки.Сумма.ТолькоПросмотр = Ложь;
			Иначе
				ТекущаяТаблица.Колонки.Сумма.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТекущаяТаблица.Имя = "МПЗПриобретенные" Тогда
		ОбработкаАктивизацииВыбораСтрокиМПЗПриобретенные(ТекущиеДанные, Редактирование);
	КонецЕсли;
	
	//обнулим незадействованные реквизиты
	Если Редактирование Тогда
		
		Если НЕ ТекущиеДанные.СчетУчета.НалоговыйУчет Тогда
			ТекущиеДанные.СуммаНУ = 0;
			ТекущиеДанные.СуммаПР = 0;
			ТекущиеДанные.СуммаВР = 0;
		Иначе
			Если НЕ СуммыПересчитаны Тогда
				ПересчитатьСуммыРазниц();
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяТаблица.Имя = "БухСправка" Тогда
			Если НЕ ТекущиеДанные.СчетУчета.Валютный Тогда
				ТекущиеДанные.ВалютнаяСумма = 0;
				ТекущиеДанные.Валюта = "";
			КонецЕсли;
			
			Если НЕ ТекущиеДанные.СчетУчета.Количественный Тогда
				ТекущиеДанные.Количество = 0;
			КонецЕсли;
			
			Если ТекущаяТаблица.Колонки.СуммаКт.ТолькоПросмотр Тогда
				Если ТекущиеДанные.СуммаКт <> 0 Тогда
					ТекущиеДанные.Сумма = ТекущиеДанные.СуммаКт;
					ТекущиеДанные.СуммаКт = 0;
					ПересчитатьСуммыРазниц();
				КонецЕсли;
			КонецЕсли;
			
			Если ТекущаяТаблица.Колонки.Сумма.ТолькоПросмотр Тогда
				Если ТекущиеДанные.Сумма <> 0 Тогда
					ТекущиеДанные.СуммаКт = ТекущиеДанные.Сумма;
					ТекущиеДанные.Сумма = 0;
					ПересчитатьСуммыРазниц();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Функция проверяет возможность использования счета в проводках.
//
// Параметры:
//  Счет     - Проверяемый счет.
//  Сообщать - признак вывода сообщений.
//
// Возвращаемое значение:
//  Булево - возможность использования счета в проводках
//  
//
Функция СчетМожноИспользоватьВПроводках(Счет, Сообщать = Истина)

	Если ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Возврат Ложь; // Неправильный тип
	КонецЕсли;

	Если ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Если Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
			Возврат Ложь; // Пустая ссылка не может использоваться
		КонецЕсли;
	КонецЕсли;
	
	Если Счет.ЗапретитьИспользоватьВПроводках Тогда
		
		Если Сообщать Тогда
			Предупреждение("Счет " + СокрЛП(Счет)+" """ + Счет.Наименование + """ нельзя использовать в проводках.");
		КонецЕсли;
		
		Возврат Ложь; // Счет использовать в проводках нельзя
		
	КонецЕсли;
	
	Если ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Если мСписокСчетов.НайтиПоЗначению(Счет.Код) = Неопределено Тогда
			
			Если Сообщать Тогда
				Предупреждение("Счет " + СокрЛП(Счет)+" """ + Счет.Наименование + """ нельзя использовать в данном разделе.");
			КонецЕсли;
			
			Возврат Ложь; // Счет использовать в проводках нельзя
			
		КонецЕсли;
	КонецЕсли;
	Возврат Истина; // Счет можно использовать в проводках 

КонецФункции // СчетМожноИспользоватьВПроводках()

Процедура БухСправкаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетУчета) И НЕ ОтменаРедактирования Тогда
		Предупреждение("Укажите счет бухгалтерского учета!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура БухСправкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если УСН_ДР Тогда
		ТекущиеДанные = ЭлементыФормы.БухСправка.ТекущиеДанные;
		Если УчетнаяПолитикаНУ.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.УменьшатьРасходыНаОстатокНЗП Тогда
			Если ТекущиеДанные.СчетУчета <> ПланыСчетов.Хозрасчетный.ОсновноеПроизводство Тогда
				ТекущиеДанные.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
			КонецЕсли;
		Иначе
			ТекущиеДанные.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура БухСправкаСубконтоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокПараметров = Новый Структура;
	ДанныеТекущейСтроки = ЭлементыФормы.БухСправка.ТекущиеДанные;
	
	Если Элемент.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения Тогда
		ДоговорКонтрагента = УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.ДоговорыКонтрагентов", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3);
		Контрагент = УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Контрагенты", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3);
		
		РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
		                                        мСписокВидовДоговоров, СтандартнаяОбработка);
		
	ИначеЕсли Элемент.ОграничениеТипа.СодержитТип(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом")) Тогда
		ДоговорКонтрагента = УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.ДоговорыКонтрагентов", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3);
		Контрагент = УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Контрагенты", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3);
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация, Контрагент, ДоговорКонтрагента, КонецДня(Дата));
		СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		СтруктураПараметров.Вставить("СторонаСчета",              0);
		СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
		УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		
	ИначеЕсли Элемент.ОграничениеТипа.СодержитТип(Тип("СправочникСсылка.БанковскиеСчета")) Тогда
		
		СтандартнаяОбработка = Ложь;
		СчетБанк = ДанныеТекущейСтроки.СчетУчета;
		
		ФормаСчета = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент);
		
		Если НЕ СчетБанк.Пустая() Тогда
			
			ФормаСчета.Отбор.ВалютаДенежныхСредств.ВидСравнения  = ?(СчетБанк.Валютный,ВидСравнения.НеРавно,ВидСравнения.Равно);
			ФормаСчета.Отбор.ВалютаДенежныхСредств.Значение      = мВалютаРегламентированногоУчета;
			ФормаСчета.Отбор.ВалютаДенежныхСредств.Использование = Истина;
			
		КонецЕсли;
		
		ФормаСчета.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
		ФормаСчета.Отбор.Владелец.Значение      = Организация;
		ФормаСчета.Отбор.Владелец.Использование = Истина;
		
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			ФормаСчета.ПараметрТекущаяСтрока = Элемент.Значение;
		КонецЕсли;
		
		ФормаСчета.РежимВыбора = Истина;
		ФормаСчета.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура БухСправкаСубконтоПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = ЭлементыФормы.БухСправка.ТекущиеДанные;
	
	Если Элемент.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения Тогда
		ДоговорКонтрагента = УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.ДоговорыКонтрагентов", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3);
		Контрагент = УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Контрагенты", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3);
		
		Если ДоговорКонтрагента <> Неопределено Тогда
			ОпределитьСписокДоступныхВидовДоговоров();
			НомерСубконто = ДанныеТекущейСтроки.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры).НомерСтроки;
			УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДанныеТекущейСтроки["Субконто" + НомерСубконто],Контрагент,Организация,мСписокВидовДоговоров);
			ДоговорКонтрагента = УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.ДоговорыКонтрагентов", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3);
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				Если ДанныеТекущейСтроки.СчетУчета.Валютный Тогда
					ДанныеТекущейСтроки.Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;
					Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.Валюта) Тогда
						ДанныеТекущейСтроки.Валюта = мВалютаРегламентированногоУчета;
					КонецЕсли;
				Иначе
					ДанныеТекущейСтроки.Валюта = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения Тогда
		ДоговорКонтрагента = УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.ДоговорыКонтрагентов", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3);
		
		Если ДоговорКонтрагента <> Неопределено Тогда
			Если ДанныеТекущейСтроки.СчетУчета.Валютный Тогда
				ДанныеТекущейСтроки.Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;
				Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.Валюта) Тогда
					ДанныеТекущейСтроки.Валюта = мВалютаРегламентированногоУчета;
				КонецЕсли;
			Иначе
				ДанныеТекущейСтроки.Валюта = "";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства И
		Элемент.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета.ТипЗначения Тогда
		
		Если ДанныеТекущейСтроки.СчетУчета.Валютный И ЗначениеЗаполнено(Элемент.Значение) Тогда
			ДанныеТекущейСтроки.Валюта = Элемент.Значение.ВалютаДенежныхСредств;
		Иначе
			ДанныеТекущейСтроки.Валюта = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура БухСправкаСубконтоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = ЭлементыФормы.БухСправка.ТекущиеДанные;
	
	Если Элемент.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения Тогда
		Контрагент = УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Контрагенты", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3);
		ДокументРасчетов = УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("ДокументСсылка.ДокументРасчетовСКонтрагентом", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3);
		
		Если ВыбранноеЗначение <> Контрагент Тогда
			Если ДокументРасчетов <> Неопределено Тогда
				НомерСубконто = 0;
				Для ИндексСубконто = 0 По ДанныеТекущейСтроки.СчетУчета.ВидыСубконто.Количество()-1 Цикл
					Если ДанныеТекущейСтроки.СчетУчета.ВидыСубконто[ИндексСубконто].ВидСубконто.ТипЗначения.СодержитТип(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом")) Тогда
						НомерСубконто = ИндексСубконто + 1;
					КонецЕсли;
				КонецЦикла;
				ДанныеТекущейСтроки["Субконто" + НомерСубконто] = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел "Материалы" , "Товары", "Готовая продукция и полуфабрикаты", "Капитальные вложения"

 Процедура МПЗПриобретенныеСчетУчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		УправлениеДоступностьюКолонок(ЭлементыФормы.МПЗПриобретенные, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СчетМожноИспользоватьВПроводках(Элемент.Значение) Тогда
		ТекущиеДанные = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные;
		ПриВыбореСчетаБухСправки(ТекущиеДанные, ЭлементыФормы.МПЗПриобретенные, Истина);
	КонецЕсли;
	
	ПроверитьНазначениеИспользования(ТекущиеДанные);
	
КонецПроцедуры

Процедура ПанельМПЗПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьВидимостьКолонокНоменклатуры();
	Если ЭлементыФормы.МПЗПриобретенные.ТекущаяСтрока <> Неопределено
		И Не ЭлементыФормы.МПЗПриобретенные.ПроверитьСтроку(ЭлементыФормы.МПЗПриобретенные.ТекущаяСтрока) Тогда
		ЭлементыФормы.МПЗПриобретенные.ОбновитьСтроки();
	КонецЕсли;
	
	ОтобразитьСчетаФактуры();
	УстановитьВидимостьПодразделения();
	
КонецПроцедуры

Процедура УстановитьВидимостьКолонокНоменклатуры()
	
	ТекущаяТаблица = ЭлементыФормы.МПЗПриобретенные;
	ТекущаяПанель = ЭлементыФормы.ПанельМПЗ;
	ТекущийСписокКолонок = ТекущаяТаблица.Колонки;
	
	ТекущаяТаблица.ЗакончитьРедактированиеСтроки(Истина);
	
	ТМЦНаСкладе		 		= ТекущаяПанель.ТекущаяСтраница = ТекущаяПанель.Страницы.МатериалыНаСкладе;
	МатериалыВЭксплуатации	= ТекущаяПанель.ТекущаяСтраница = ТекущаяПанель.Страницы.МатериалыВЭксплуатации;
	МатериалыВПереработке	= ТекущаяПанель.ТекущаяСтраница = ТекущаяПанель.Страницы.МатериалыВПереработке;
	ТоварыВРозницеАТТ		= ТекущаяПанель.ТекущаяСтраница = ТекущаяПанель.Страницы.ТоварыВРозницеАТТ;
	ТоварыВРозницеНТТ		= ТекущаяПанель.ТекущаяСтраница = ТекущаяПанель.Страницы.ТоварыВРозницеНТТ;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
		
		ТекущаяПанель.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
		ТекущаяТаблица.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.ЧертаСверху);
		ТекущаяПанель.Страницы.МатериалыВЭксплуатации.Видимость	= Истина;
		ТекущаяПанель.Страницы.МатериалыВПереработке.Видимость	= Истина;
		ТекущаяПанель.Страницы.ТоварыВРозницеАТТ.Видимость		= Ложь;
		ТекущаяПанель.Страницы.ТоварыВРозницеНТТ.Видимость		= Ложь;
		ТекущийСписокКолонок.СтавкаНДС.Видимость		= Ложь;
		ТекущийСписокКолонок.Количество.Видимость		= Истина;
		ТекущийСписокКолонок.Номенклатура.Видимость		= Истина;
		ТекущийСписокКолонок.ТорговаяНаценка.Видимость	= Ложь;
		//управление изменением видимости
		ТекущийСписокКолонок.СтавкаНДС.ИзменятьВидимость		= Ложь;
		ТекущийСписокКолонок.Количество.ИзменятьВидимость		= Истина;
		ТекущийСписокКолонок.Номенклатура.ИзменятьВидимость		= Истина;
		ТекущийСписокКолонок.ТорговаяНаценка.ИзменятьВидимость	= Ложь;
		//
		ТекущаяПанель.Страницы.МатериалыНаСкладе.Заголовок = "Материалы на складе";
		
		ТекущийСписокКолонок.Склад.Видимость										= ТМЦНаСкладе И УправлениеЗапасамиПартионныйУчет.ВедетсяУчетПоСкладам(ПланыСчетов.Хозрасчетный.СырьеИМатериалы);
		//управление изменением видимости
		ТекущийСписокКолонок.Склад.ИзменятьВидимость								= ТМЦНаСкладе И УправлениеЗапасамиПартионныйУчет.ВедетсяУчетПоСкладам(ПланыСчетов.Хозрасчетный.СырьеИМатериалы);
		
		
		Если Предприниматель ИЛИ УСН_ДР Тогда
			ТекущийСписокКолонок.Партия.Видимость										= Истина;
			//управление изменением видимости
			ТекущийСписокКолонок.Партия.ИзменятьВидимость								= Истина;
			//
		Иначе			
			ТекущийСписокКолонок.Партия.Видимость										= Не мОценкаМПЗПоСредней Или (мСложныйУчетНДС И Не мУпрощенныйУчетНДС);
			//управление изменением видимости			
			ТекущийСписокКолонок.Партия.ИзменятьВидимость								= Не мОценкаМПЗПоСредней Или (мСложныйУчетНДС И Не мУпрощенныйУчетНДС);
			//
		КонецЕсли;
		
		ТекущийСписокКолонок.Контрагент.Видимость									= МатериалыВПереработке;
		ТекущийСписокКолонок.СпецМатериалНазначениеИспользования.Видимость			= МатериалыВЭксплуатации;
		ТекущийСписокКолонок.СпецМатериалПервоначальнаяСтоимость.Видимость			= МатериалыВЭксплуатации;
		ТекущийСписокКолонок.СпецМатериалПодразделениеФизЛицо.Видимость				= МатериалыВЭксплуатации;
		ТекущийСписокКолонок.СпецМатериалПартияМатериалаВЭксплуатации.Видимость		= МатериалыВЭксплуатации;
		//управление изменением видимости
		ТекущийСписокКолонок.Контрагент.ИзменятьВидимость									= МатериалыВПереработке;
		ТекущийСписокКолонок.СпецМатериалНазначениеИспользования.ИзменятьВидимость			= МатериалыВЭксплуатации;
		ТекущийСписокКолонок.СпецМатериалПервоначальнаяСтоимость.ИзменятьВидимость			= МатериалыВЭксплуатации;
		ТекущийСписокКолонок.СпецМатериалПодразделениеФизЛицо.ИзменятьВидимость				= МатериалыВЭксплуатации;
		ТекущийСписокКолонок.СпецМатериалПартияМатериалаВЭксплуатации.ИзменятьВидимость		= МатериалыВЭксплуатации;
		//
		
		СписокСчетовУчетаМатериалов = Новый СписокЗначений;
		СписокСчетовУчетаМатериалов.Добавить(ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации);
		СписокСчетовУчетаМатериалов.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации);
		
		ТекущаяТаблица.ОтборСтрок.СчетУчета.Использование = Истина;
		Если МатериалыВЭксплуатации Тогда
			ТекущаяТаблица.ОтборСтрок.СчетУчета.ВидСравнения = ВидСравнения.ВСписке;
			ТекущаяТаблица.ОтборСтрок.СчетУчета.Значение = СписокСчетовУчетаМатериалов;
			ТекущийСписокКолонок.Сумма.ТекстШапки = "Текущая стоимость";
		ИначеЕсли МатериалыВПереработке Тогда
			ТекущаяТаблица.ОтборСтрок.СчетУчета.ВидСравнения = ВидСравнения.Равно;
			ТекущаяТаблица.ОтборСтрок.СчетУчета.Значение = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
			ТекущийСписокКолонок.Сумма.ТекстШапки = "Стоимость";
		Иначе
			СписокСчетовУчетаМатериалов.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
			ТекущаяТаблица.ОтборСтрок.СчетУчета.ВидСравнения = ВидСравнения.НеВСписке;
			ТекущаяТаблица.ОтборСтрок.СчетУчета.Значение = СписокСчетовУчетаМатериалов;
			ТекущийСписокКолонок.Сумма.ТекстШапки = "Стоимость";
		КонецЕсли;
		
		Если ТоварыВРозницеАТТ ИЛИ ТоварыВРозницеНТТ Тогда
			ТекущаяПанель.ТекущаяСтраница = ТекущаяПанель.Страницы.МатериалыНаСкладе;
		КонецЕсли;
		
		ТекущийСписокКолонок.Оплачен.Видимость					= Предприниматель;
		ТекущийСписокКолонок.РеквизитыДокументаОплаты.Видимость	= Предприниматель;
		ТекущийСписокКолонок.НДСВключенВстоимость.Видимость		= Предприниматель;
		ТекущийСписокКолонок.НДС.Видимость						= Предприниматель ИЛИ УСН_ДР;
		ТекущийСписокКолонок.СтатусыОплатыРасходовУСН.Видимость	= УСН_ДР;
		ТекущийСписокКолонок.Валюта.Видимость					= УСН_ДР;
		ТекущийСписокКолонок.ОтражениеВУСН.Видимость			= УСН_ДР;
		ТекущийСписокКолонок.РасчетныйДокумент.Видимость		= УСН_ДР;
		ТекущийСписокКолонок.ВалютнаяСумма.Видимость			= УСН_ДР;
		ТекущийСписокКолонок.ВалютныйНДС.Видимость				= УСН_ДР;
		ТекущийСписокКолонок.РасчетныйДокумент.Видимость		= УСН_ДР;
		ТекущийСписокКолонок.СуммаНУ.Видимость			= ОСН;
		ТекущийСписокКолонок.СуммаВР.Видимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаПР.Видимость			= ПрименениеПБУ18;
		//управление изменением видимости
		ТекущийСписокКолонок.Оплачен.ИзменятьВидимость					= Предприниматель;
		ТекущийСписокКолонок.РеквизитыДокументаОплаты.ИзменятьВидимость	= Предприниматель;
		ТекущийСписокКолонок.НДСВключенВстоимость.ИзменятьВидимость		= Предприниматель;
		ТекущийСписокКолонок.НДС.ИзменятьВидимость						= Предприниматель ИЛИ УСН_ДР;
		ТекущийСписокКолонок.СтатусыОплатыРасходовУСН.ИзменятьВидимость	= УСН_ДР;
		ТекущийСписокКолонок.Валюта.ИзменятьВидимость					= УСН_ДР;
		ТекущийСписокКолонок.ОтражениеВУСН.ИзменятьВидимость			= УСН_ДР;
		ТекущийСписокКолонок.РасчетныйДокумент.ИзменятьВидимость		= УСН_ДР;
		ТекущийСписокКолонок.ВалютнаяСумма.ИзменятьВидимость			= УСН_ДР;
		ТекущийСписокКолонок.ВалютныйНДС.ИзменятьВидимость				= УСН_ДР;
		ТекущийСписокКолонок.РасчетныйДокумент.ИзменятьВидимость		= УСН_ДР;
		ТекущийСписокКолонок.СуммаНУ.ИзменятьВидимость			= ОСН;
		ТекущийСписокКолонок.СуммаВР.ИзменятьВидимость			= ПрименениеПБУ18;
		ТекущийСписокКолонок.СуммаПР.ИзменятьВидимость			= ПрименениеПБУ18;
		//
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары И мРозницаВПродажныхЦенах Тогда
		
		ТекущаяПанель.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
		ТекущаяТаблица.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.ЧертаСверху);
		ТекущаяПанель.Страницы.МатериалыВЭксплуатации.Видимость	= Ложь;
		ТекущаяПанель.Страницы.МатериалыВПереработке.Видимость	= Ложь;
		ТекущаяПанель.Страницы.ТоварыВРозницеАТТ.Видимость		= Истина;
		ТекущаяПанель.Страницы.ТоварыВРозницеНТТ.Видимость		= Истина;

		ТекущаяПанель.Страницы.МатериалыНаСкладе.Заголовок = "Товары на складе";
		
		ТекущийСписокКолонок.Контрагент.Видимость									= Ложь;
		ТекущийСписокКолонок.СпецМатериалНазначениеИспользования.Видимость			= Ложь;
		ТекущийСписокКолонок.СпецМатериалПервоначальнаяСтоимость.Видимость			= Ложь;
		ТекущийСписокКолонок.СпецМатериалПодразделениеФизЛицо.Видимость				= Ложь;
		ТекущийСписокКолонок.СпецМатериалПартияМатериалаВЭксплуатации.Видимость		= Ложь;
		//управление изменением видимости
		ТекущийСписокКолонок.Контрагент.ИзменятьВидимость									= Ложь;
		ТекущийСписокКолонок.СпецМатериалНазначениеИспользования.ИзменятьВидимость			= Ложь;
		ТекущийСписокКолонок.СпецМатериалПервоначальнаяСтоимость.ИзменятьВидимость			= Ложь;
		ТекущийСписокКолонок.СпецМатериалПодразделениеФизЛицо.ИзменятьВидимость				= Ложь;
		ТекущийСписокКолонок.СпецМатериалПартияМатериалаВЭксплуатации.ИзменятьВидимость		= Ложь;
		//
		
		СписокСчетовУчетаТоваров = Новый СписокЗначений;
		СписокСчетовУчетаТоваров.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		СписокСчетовУчетаТоваров.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
		
		ТекущаяТаблица.ОтборСтрок.СчетУчета.Использование = Истина;
		Если ТМЦНаСкладе Тогда
			ТекущаяТаблица.ОтборСтрок.СчетУчета.ВидСравнения = ВидСравнения.НеВСписке;
			ТекущаяТаблица.ОтборСтрок.СчетУчета.Значение = СписокСчетовУчетаТоваров;
			ТекущийСписокКолонок.СтавкаНДС.Видимость		= Ложь;
			ТекущийСписокКолонок.Количество.Видимость		= Истина;
			ТекущийСписокКолонок.Номенклатура.Видимость		= Истина;
			ТекущийСписокКолонок.ТорговаяНаценка.Видимость	= Ложь;
			//управление изменением видимости
			ТекущийСписокКолонок.СтавкаНДС.ИзменятьВидимость		= Ложь;
			ТекущийСписокКолонок.Количество.ИзменятьВидимость		= Истина;
			ТекущийСписокКолонок.Номенклатура.ИзменятьВидимость		= Истина;
			ТекущийСписокКолонок.ТорговаяНаценка.ИзменятьВидимость	= Ложь;
			//
			
			ТекущийСписокКолонок.Склад.Видимость	= УправлениеЗапасамиПартионныйУчет.ВедетсяУчетПоСкладам(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
			//управление изменением видимости
			ТекущийСписокКолонок.Склад.ИзменятьВидимость	= УправлениеЗапасамиПартионныйУчет.ВедетсяУчетПоСкладам(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
			
			Если Предприниматель ИЛИ УСН_ДР Тогда
				ТекущийСписокКолонок.Партия.Видимость	= Истина;
				//управление изменением видимости
				ТекущийСписокКолонок.Партия.ИзменятьВидимость	= Истина;
				//
			Иначе				
				ТекущийСписокКолонок.Партия.Видимость	= Не мОценкаМПЗПоСредней Или (мСложныйУчетНДС И Не мУпрощенныйУчетНДС);
				//управление изменением видимости				
				ТекущийСписокКолонок.Партия.ИзменятьВидимость	= Не мОценкаМПЗПоСредней Или (мСложныйУчетНДС И Не мУпрощенныйУчетНДС);
				//
			КонецЕсли;
			
			ТекущийСписокКолонок.ВалютнаяСумма.ТекстШапки					= "Стоимость (вал.)";
			ТекущийСписокКолонок.ВалютныйНДС.ТекстШапки						= "НДС (вал.)";
			ТекущийСписокКолонок.Сумма.ТекстШапки							= "Стоимость";
			
			ВидимостьПанелиПоВертикали = Ложь;
			
			Если УСН Тогда
				ВидимостьПанелиПоВертикали = Ложь;
				
			ИначеЕсли мУпрощенныйУчетНДС Тогда
				ВидимостьПанелиПоВертикали = Ложь;
				
			ИначеЕсли мСложныйУчетНДС Тогда
				ВидимостьПанелиПоВертикали = Истина;
				
			КонецЕсли;
			
		ИначеЕсли ТоварыВРозницеАТТ Тогда
			ТекущаяТаблица.ОтборСтрок.СчетУчета.ВидСравнения = ВидСравнения.Равно;
			ТекущаяТаблица.ОтборСтрок.СчетУчета.Значение = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
			ТекущийСписокКолонок.СтавкаНДС.Видимость		= Ложь;
			ТекущийСписокКолонок.Количество.Видимость		= Истина;
			ТекущийСписокКолонок.Номенклатура.Видимость		= Истина;
			ТекущийСписокКолонок.ТорговаяНаценка.Видимость	= Истина;
			ТекущийСписокКолонок.Склад.Видимость			= Истина;
			//управление изменением видимости
			ТекущийСписокКолонок.СтавкаНДС.ИзменятьВидимость		= Ложь;
			ТекущийСписокКолонок.Количество.ИзменятьВидимость		= Истина;
			ТекущийСписокКолонок.Номенклатура.ИзменятьВидимость		= Истина;
			ТекущийСписокКолонок.ТорговаяНаценка.ИзменятьВидимость	= Истина;
			ТекущийСписокКолонок.Склад.ИзменятьВидимость			= Истина;
			//
			
			Если Предприниматель ИЛИ УСН_ДР Тогда
				ТекущийСписокКолонок.Партия.Видимость	= Истина;
				//управление изменением видимости
				ТекущийСписокКолонок.Партия.ИзменятьВидимость	= Истина;
				//
			Иначе
				ТекущийСписокКолонок.Партия.Видимость	= Не мОценкаМПЗПоСредней Или (мСложныйУчетНДС И Не мУпрощенныйУчетНДС);
				//управление изменением видимости
				ТекущийСписокКолонок.Партия.ИзменятьВидимость	= Не мОценкаМПЗПоСредней Или (мСложныйУчетНДС И Не мУпрощенныйУчетНДС);
				//
			КонецЕсли;
			
			ТекущийСписокКолонок.ВалютнаяСумма.ТекстШапки					= "Стоимость УСН (вал.)";
			ТекущийСписокКолонок.ВалютныйНДС.ТекстШапки						= "НДС УСН (вал.)";
			ТекущийСписокКолонок.Сумма.ТекстШапки							= "Стоимость в продажных ценах";
			
			ВидимостьПанелиПоВертикали = Ложь;
			
			Если УСН Тогда
				ВидимостьПанелиПоВертикали = Ложь;
				
			ИначеЕсли мУпрощенныйУчетНДС Тогда
				ВидимостьПанелиПоВертикали = Ложь;
				
			ИначеЕсли мСложныйУчетНДС Тогда
				ВидимостьПанелиПоВертикали = Истина;
				
			КонецЕсли;
			
		Иначе
			ТекущаяТаблица.ОтборСтрок.СчетУчета.ВидСравнения = ВидСравнения.Равно;
			ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["СтавкиНДС"];
			ТекущаяТаблица.ОтборСтрок.СчетУчета.Значение	= ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
			ТекущийСписокКолонок.СтавкаНДС.Видимость		= ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ВидыСубконто.Найти(ВидСубк) <> Неопределено;
			ТекущийСписокКолонок.Количество.Видимость		= Ложь;
			ТекущийСписокКолонок.Номенклатура.Видимость		= Ложь;
			ТекущийСписокКолонок.ТорговаяНаценка.Видимость	= Истина;
			ТекущийСписокКолонок.Склад.Видимость			= Истина;
			ТекущийСписокКолонок.Партия.Видимость			= Ложь;
			//управление изменением видимости
			ТекущийСписокКолонок.СтавкаНДС.ИзменятьВидимость		= ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ВидыСубконто.Найти(ВидСубк) <> Неопределено;
			ТекущийСписокКолонок.Количество.ИзменятьВидимость		= Ложь;
			ТекущийСписокКолонок.Номенклатура.ИзменятьВидимость		= Ложь;
			ТекущийСписокКолонок.ТорговаяНаценка.ИзменятьВидимость	= Истина;
			ТекущийСписокКолонок.Склад.ИзменятьВидимость			= Истина;
			ТекущийСписокКолонок.Партия.ИзменятьВидимость			= Ложь;
			//
			ТекущийСписокКолонок.Сумма.ТекстШапки			= "Стоимость в продажных ценах";
			
			ВидимостьПанелиПоВертикали = Ложь;
			
		КонецЕсли;
		
		Если МатериалыВЭксплуатации ИЛИ МатериалыВПереработке Тогда
			ТекущаяПанель.ТекущаяСтраница = ТекущаяПанель.Страницы.МатериалыНаСкладе;
		КонецЕсли;
		
		ТекущийСписокКолонок.Оплачен.Видимость					= Предприниматель И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.РеквизитыДокументаОплаты.Видимость	= Предприниматель И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.НДСВключенВстоимость.Видимость		= Предприниматель И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.НДС.Видимость						= (Предприниматель ИЛИ УСН_ДР)  И НЕ ТоварыВРозницеНТТ;;
		ТекущийСписокКолонок.СтатусыОплатыРасходовУСН.Видимость	= УСН_ДР И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.Валюта.Видимость					= УСН_ДР И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.ОтражениеВУСН.Видимость			= УСН_ДР И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.РасчетныйДокумент.Видимость		= УСН_ДР И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.ВалютнаяСумма.Видимость			= УСН_ДР И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.ВалютныйНДС.Видимость				= УСН_ДР И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.РасчетныйДокумент.Видимость		= УСН_ДР И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.СуммаНУ.Видимость			= ОСН И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.СуммаВР.Видимость			= ПрименениеПБУ18 И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.СуммаПР.Видимость			= ПрименениеПБУ18 И НЕ ТоварыВРозницеНТТ;
		//управление изменением видимости
		ТекущийСписокКолонок.Оплачен.ИзменятьВидимость					= Предприниматель И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.РеквизитыДокументаОплаты.ИзменятьВидимость	= Предприниматель И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.НДСВключенВстоимость.ИзменятьВидимость		= Предприниматель И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.НДС.ИзменятьВидимость						= (Предприниматель ИЛИ УСН_ДР)  И НЕ ТоварыВРозницеНТТ;;
		ТекущийСписокКолонок.СтатусыОплатыРасходовУСН.ИзменятьВидимость	= УСН_ДР И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.Валюта.ИзменятьВидимость					= УСН_ДР И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.ОтражениеВУСН.ИзменятьВидимость			= УСН_ДР И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.РасчетныйДокумент.ИзменятьВидимость		= УСН_ДР И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.ВалютнаяСумма.ИзменятьВидимость			= УСН_ДР И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.ВалютныйНДС.ИзменятьВидимость				= УСН_ДР И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.РасчетныйДокумент.ИзменятьВидимость		= УСН_ДР И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.СуммаНУ.ИзменятьВидимость			= ОСН И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.СуммаВР.ИзменятьВидимость			= ПрименениеПБУ18 И НЕ ТоварыВРозницеНТТ;
		ТекущийСписокКолонок.СуммаПР.ИзменятьВидимость			= ПрименениеПБУ18 И НЕ ТоварыВРозницеНТТ;
		//
		
		мПанель			= ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДС;
		Если мПанель.Свертка = РежимСверткиЭлементаУправления.Нет И НЕ ВидимостьПанелиПоВертикали 
			ИЛИ мПанель.Свертка <> РежимСверткиЭлементаУправления.Нет И ВидимостьПанелиПоВертикали Тогда
			ИзменитьВидимостьПанелиПоВертикали(ЭтаФорма, ВидимостьПанелиПоВертикали, "ПанельМПЗ", "НеоплаченныеМатериалыИПартииНДС");
		КонецЕсли;
		ВыбратьТекущуюПанельСплитованнойТаблицы();
		
	Иначе
		
		ТекущаяТаблица.ОтборСтрок.СчетУчета.Использование = Ложь;
		ТекущийСписокКолонок.Контрагент.Видимость									= Ложь;
		ТекущийСписокКолонок.СпецМатериалНазначениеИспользования.Видимость			= Ложь;
		ТекущийСписокКолонок.СпецМатериалПервоначальнаяСтоимость.Видимость			= Ложь;
		ТекущийСписокКолонок.СпецМатериалПодразделениеФизЛицо.Видимость				= Ложь;
		ТекущийСписокКолонок.СпецМатериалПартияМатериалаВЭксплуатации.Видимость		= Ложь;
		ТекущийСписокКолонок.СтавкаНДС.Видимость									= Ложь;
		ТекущийСписокКолонок.Количество.Видимость									= Истина;
		ТекущийСписокКолонок.Номенклатура.Видимость									= Истина;
		ТекущийСписокКолонок.ТорговаяНаценка.Видимость								= Ложь;
		//управление изменением видимости
		ТекущийСписокКолонок.Контрагент.ИзменятьВидимость									= Ложь;
		ТекущийСписокКолонок.СпецМатериалНазначениеИспользования.ИзменятьВидимость			= Ложь;
		ТекущийСписокКолонок.СпецМатериалПервоначальнаяСтоимость.ИзменятьВидимость			= Ложь;
		ТекущийСписокКолонок.СпецМатериалПодразделениеФизЛицо.ИзменятьВидимость				= Ложь;
		ТекущийСписокКолонок.СпецМатериалПартияМатериалаВЭксплуатации.ИзменятьВидимость		= Ложь;
		ТекущийСписокКолонок.СтавкаНДС.ИзменятьВидимость									= Ложь;
		ТекущийСписокКолонок.Количество.ИзменятьВидимость									= Истина;
		ТекущийСписокКолонок.Номенклатура.ИзменятьВидимость									= Истина;
		ТекущийСписокКолонок.ТорговаяНаценка.ИзменятьВидимость								= Ложь;
		//
		
		ТекущаяПанель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
		ТекущаяТаблица.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
		ТекущийСписокКолонок.Сумма.ТекстШапки = "Стоимость";
		Если НЕ ТМЦНаСкладе Тогда
			ТекущаяПанель.ТекущаяСтраница = ТекущаяПанель.Страницы.МатериалыНаСкладе;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура МПЗПриобретенныеСпецМатериалПодразделениеФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.СчетУчета) Тогда
			Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации Тогда
				ТипСтр = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
			ИначеЕсли ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации Тогда
				ТипСтр = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
			КонецЕсли;
			
			Элемент.ОграничениеТипа = ТипСтр;
			ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.СпецМатериалПодразделениеФизЛицо = Элемент.ОграничениеТипа.ПривестиЗначение(ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.СпецМатериалПодразделениеФизЛицо);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗПриобретенныеСтатусыОплатыРасходовУСНОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗПриобретенныеСтатусыОплатыРасходовУСННачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗПриобретенныеОтражениеВУСННачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗПриобретенныеОтражениеВУСНОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗПриобретенныеПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
		ТекущаяПанель = ЭлементыФормы.ПанельМПЗ;
		МатериалыВЭксплуатации	= ТекущаяПанель.ТекущаяСтраница = ТекущаяПанель.Страницы.МатериалыВЭксплуатации;
		МатериалыВПереработке	= ТекущаяПанель.ТекущаяСтраница = ТекущаяПанель.Страницы.МатериалыВПереработке;
		Если НЕ МатериалыВПереработке Тогда
			УправлениеДоступностьюКолонок(Элемент, Истина);
		КонецЕсли;
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
		ТекущаяПанель = ЭлементыФормы.ПанельМПЗ;
		ТоварыНаСкладе 			= ТекущаяПанель.ТекущаяСтраница = ТекущаяПанель.Страницы.МатериалыНаСкладе;
		ТоварыВРозницеАТТ		= ТекущаяПанель.ТекущаяСтраница = ТекущаяПанель.Страницы.ТоварыВРозницеАТТ;
		Если ТоварыНаСкладе Тогда
			УправлениеДоступностьюКолонок(Элемент, Истина);
		КонецЕсли;
	Иначе
		УправлениеДоступностьюКолонок(Элемент, Истина);
	КонецЕсли;
	
	//управление списком доступных счетов
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
		Если МатериалыВЭксплуатации Тогда
			мСписокСчетов = мСписокСчетовСпецматериалов;
		ИначеЕсли МатериалыВПереработке Тогда
			мСписокСчетов = мСписокСчетовМатериаловВПереработке;
		Иначе
			мСписокСчетов = мСписокСчетовМатериалов;
		КонецЕсли;
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
		Если ТоварыНаСкладе Тогда
			мСписокСчетов = мСписокСчетовТоваров;
		ИначеЕсли ТоварыВРозницеАТТ Тогда
			мСписокСчетов = мСписокСчетовТоваровВРозницеАТТ;
		Иначе
			мСписокСчетов = мСписокСчетовТоваровВРозницеНТТ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


//*********************************************************************************************
//Встроенная таблица "Данные по счету-фактуре"

Процедура ДанныеПоСФВидЦенностиПриИзменении(Элемент)
	ТД = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	Если не ЗначениеЗаполнено(ТД.СчетУчетаНДС) Тогда
		Если ТД.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги
			или ТД.ВидЦенности = Перечисления.ВидыЦенностей.КомандировочныеРасходы
			или ТД.ВидЦенности = Перечисления.ВидыЦенностей.ПосредническиеУслуги
			или ТД.ВидЦенности = Перечисления.ВидыЦенностей.ПредставительскиеРасходы
			Тогда
			ТД.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		ИначеЕсли ТД.ВидЦенности = Перечисления.ВидыЦенностей.НМА
			Тогда
			ТД.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымНематериальнымАктивам;
		ИначеЕсли ТД.ВидЦенности = Перечисления.ВидыЦенностей.Оборудование
			или ТД.ВидЦенности = Перечисления.ВидыЦенностей.ОС
			Тогда
			ТД.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств;
		Иначе
			ТДП = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные;
			СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, ТДП.Номенклатура, ТДП.Склад);
			Если ТД.ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежи
				или ТД.ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС
				Тогда
				ТД.СчетУчетаНДС = СчетаУчета.СчетНДСТаможни;
			Иначе
				ТД.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования"
// строки табличной части "Дополнительные сведения".
//
Процедура ДанныеПоСФПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		РассчитатьНомерТЧ(Элемент);
		ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.Ключ = ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.Ключ.Значение;
	КонецЕсли; 
		
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора"
// колонки "СчетУчетаНДС" табличной части "Дополнительные сведения".
//
Процедура ДанныеПоСФСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка =  БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении"
// колонки "СтавкаНДС" табличной части "Дополнительные сведения".
//
Процедура ДанныеПоСФСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ТекущиеДанные.Стоимость, Истина, Истина, 
												УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении"
// колонки "Стоимость" табличной части "Дополнительные сведения".
//
Процедура ДанныеПоСФСтоимостьПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ТекущиеДанные.Стоимость, Истина, Истина, 
											УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

Процедура МПЗПриобретенныеПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СчетУчета) Тогда
		УправлениеДоступностьюКолонок(ЭлементыФормы.МПЗПриобретенные, Ложь)
	Иначе 
		Возврат;
	КонецЕсли;
	
	Если ОСН Тогда
		ПриВыбореСчетаБухСправки(ТекущиеДанные, ЭлементыФормы.МПЗПриобретенные);
	Иначе
		ОбработкаАктивизацииВыбораСтрокиМПЗПриобретенные(ТекущиеДанные);
	КонецЕсли;
	
	ОтобразитьСчетаФактуры();
	ОтобразитьМатериалы();
	
КонецПроцедуры

Процедура ОтобразитьМатериалы(ТекСтрока = Неопределено)
	
	Если ((РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты)
		ИЛИ (РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНИИП))
		И НЕ Предприниматель Тогда
		Возврат;
	КонецЕсли;
	
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
		ИмяРамки =	"РамкаГруппыМПЗОбороты";
		ИмяТЧ =		"МПЗПриобретенные";
		ИмяТЧОб =	"МПЗСобственныеОбороты";
	Иначе
		ИмяРамки =	"РамкаГруппыМПЗОбороты2";
		ИмяТЧ =		"МПЗРеализованныеИП";
		ИмяТЧОб =	"МПЗРеализованныеОбороты";
	КонецЕсли;
	
	ТекСтрока = ЭлементыФормы[ИмяТЧ].ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		ЭлементыФормы[ИмяТЧОб].ТолькоПросмотр = Ложь;
	Иначе
		ЭлементыФормы[ИмяТЧОб].ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Отбор = ЭлементыФормы[ИмяТЧОб].ОтборСтрок.Ключ;
	
	Если ТекСтрока <> Неопределено Тогда
		Отбор.Значение = ЭлементыФормы[ИмяТЧ].ТекущиеДанные.Ключ;
		Отбор.Использование = Истина;
		
		ЭлементыФормы[ИмяРамки].Заголовок = "  Материалы, неоплаченные поставщикам, израсходованные на производство номенклатуры """ + ЭлементыФормы[ИмяТЧ].ТекущиеДанные.Номенклатура + """";
		
	Иначе
		Отбор.Значение = 0;
		Отбор.Использование = Истина;
		
		ЭлементыФормы[ИмяРамки].Заголовок = "  Материалы, неоплаченные поставщикам";
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается по кнопке при изменении активной строки в таблице косвенных 
// расходов, а также при переходе на закладку "Косвенные расходы".
Процедура ОтобразитьСчетаФактуры(ТекСтрока = Неопределено)

	Если УСН
		ИЛИ мУпрощенныйУчетНДС
		ИЛИ (НЕ мУпрощенныйУчетНДС И НЕ мСложныйУчетНДС И НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока = Неопределено и не ЭлементыФормы.МПЗПриобретенные.ТекущаяСтрока = Неопределено Тогда
		ТекСтрока = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные;
	КонецЕсли; 

	Если ТекСтрока <> Неопределено Тогда
		ЭлементыФормы.ДанныеПоСФ.ТолькоПросмотр = Ложь;
	Иначе
		ЭлементыФормы.ДанныеПоСФ.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Отбор = ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.Ключ;
	
	Если ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные <> Неопределено Тогда
		Отбор.Значение = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.Ключ;
		Отбор.Использование = Истина;
		
		ЭлементыФормы.РамкаГруппыДанныеПоСФ.Заголовок = "  Данные по счетам-фактурам полученным по номенклатуре """ + ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.Номенклатура + """";
		
	Иначе
		Отбор.Значение = 0;
		Отбор.Использование = Истина;
		
		ЭлементыФормы.РамкаГруппыДанныеПоСФ.Заголовок = "  Данные по счетам-фактурам";
	КонецЕсли;

КонецПроцедуры // ОтобразитьСчетаФактуры()

// Процедура - обработчик события "ПередУдалением" 
// для табличной части "ДанныеПоСФ".
//
Процедура МПЗПриобретенныеПередУдалением(Элемент, Отказ)
	
	// Необходимо очистить дополнительные сведения
	КлючПоиска = Новый Структура("Ключ" , ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.Ключ.Значение);
	
	НайденныеСтроки = ДанныеПоСФ.НайтиСтроки(КлючПоиска);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		ДанныеПоСФ.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" 
// для табличной части "ДанныеПоСФ".
//
Процедура МПЗПриобретенныеПослеУдаления(Элемент)
	
	мПеренумеровать = 2;
	ОтобразитьСчетаФактуры();
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" 
// для табличной части "ДанныеПоСФ".
//
Процедура МПЗПриобретенныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		РассчитатьНомерТЧ(Элемент);
		
		Если НЕ УСН Тогда
			
			// Инициализируем значение "Ключ" для установки связи данной таблицы с таблицей 
			// "МПЗПриобретенные".
			// Значение должно быть уникальным в пределах таблицы ДанныеПоПартиям
			НеУстановлено = Истина;
			Кандидат = МПЗПриобретенные.Количество();
			
			Пока НеУстановлено Цикл
				Если МПЗПриобретенные.Найти(Кандидат, "Ключ") = Неопределено Тогда
					// Уникальное значение ключа
					ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.Ключ = Кандидат;
					НеУстановлено = Ложь;
					
				Иначе
					// Такое значение ключа уже использовано
					Кандидат = Кандидат + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОтобразитьСчетаФактуры();
			
		ИначеЕсли УСН_ДР Тогда
			
			Если Элемент.ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку Тогда
				Элемент.ТекущиеДанные.СтатусыПартийУСН = Перечисления.СтатусыПартийУСН.ВПереработке;
			Иначе
				Элемент.ТекущиеДанные.СтатусыПартийУСН = Перечисления.СтатусыПартийУСН.Купленные;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Валюта) Тогда
				Элемент.ТекущиеДанные.Валюта = мВалютаРегламентированногоУчета;
			КонецЕсли;
			
			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
				Элемент.ТекущиеДанные.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущаяПанель = ЭлементыФормы.ПанельМПЗ;
		МатериалыВПереработке	= ТекущаяПанель.ТекущаяСтраница = ТекущаяПанель.Страницы.МатериалыВПереработке;
		ТоварыВРозницеАТТ		= ТекущаяПанель.ТекущаяСтраница = ТекущаяПанель.Страницы.ТоварыВРозницеАТТ;
		ТоварыВРозницеНТТ		= ТекущаяПанель.ТекущаяСтраница = ТекущаяПанель.Страницы.ТоварыВРозницеНТТ;
		ТекущиеДанные = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные;
		Если МатериалыВПереработке Тогда
			ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
			УправлениеДоступностьюКолонок(ЭлементыФормы.МПЗПриобретенные, Ложь);        
			ТекущиеДанные = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные;
			ПриВыбореСчетаБухСправки(ТекущиеДанные, ЭлементыФормы.МПЗПриобретенные, Истина);
		ИначеЕсли ТоварыВРозницеАТТ Тогда
			ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
			УправлениеДоступностьюКолонок(ЭлементыФормы.МПЗПриобретенные, Ложь);
			ТекущиеДанные = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные;
			ПриВыбореСчетаБухСправки(ТекущиеДанные, ЭлементыФормы.МПЗПриобретенные, Истина);
		ИначеЕсли ТоварыВРозницеНТТ Тогда
			ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
			УправлениеДоступностьюКолонок(ЭлементыФормы.МПЗПриобретенные, Ложь);
			ТекущиеДанные = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные;
			ПриВыбореСчетаБухСправки(ТекущиеДанные, ЭлементыФормы.МПЗПриобретенные, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если УСН_ДР Тогда
		СтатусыОплатыРасходовУСН = ЭтаФорма.ТекущийЭлемент.Колонки.СтатусыОплатыРасходовУСН.ЭлементУправления;
		СтатусыОплатыРасходовУСН.СписокВыбора.Очистить();
		СтатусыОплатыРасходовУСН.СписокВыбора.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
		СтатусыОплатыРасходовУСН.СписокВыбора.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
		СтатусыОплатыРасходовУСН.СписокВыбора.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
		ОтражениеВУСН = ЭтаФорма.ТекущийЭлемент.Колонки.ОтражениеВУСН.ЭлементУправления;
		ОтражениеВУСН.СписокВыбора.Очистить();
		ОтражениеВУСН.СписокВыбора.Добавить(Перечисления.ОтражениеВУСН.Принимаются);
		ОтражениеВУСН.СписокВыбора.Добавить(Перечисления.ОтражениеВУСН.НеПринимаются);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" 
// для табличной части "ДанныеПоСФ".
//
Процедура МПЗПриобретенныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОтобразитьСчетаФактуры(Элемент.ТекущиеДанные);
	
КонецПроцедуры

Процедура ДанныеПоСФСчетУчетаНДСНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоВыбораСчета(Элемент, мСписокСчетовНДС,, Элемент.Значение);
	
КонецПроцедуры


Процедура ДанныеПоСФСчетУчетаНДСОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОконченВводТекстаСчета(Элемент, Текст, Значение, СтандартнаяОбработка, мСписокСчетовНДС);
	
КонецПроцедуры

Процедура ДанныеПоСФПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	ТекСтрока = ЭлементыФормы.МПЗПриобретенные.ТекущаяСтрока;
	ВидСубкНоменклатура = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["Номенклатура"];
	Если ТекСтрока = Неопределено Тогда
		Отказ = Истина;
	Иначе
		Если ТекСтрока.СчетУчета.ВидыСубконто.Найти(ВидСубкНоменклатура) = Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПоСФВидЦенностиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДанныеПоСФВидЦенностиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДанныеПоСФПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Перенумеровать(Элемент);
	
КонецПроцедуры

Процедура ДанныеПоСФПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если мПеренумеровать = 0 Тогда
		мПеренумеровать = 3;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПоСФПослеУдаления(Элемент)
	
	мПеренумеровать = 2;
	
КонецПроцедуры

Процедура ОбработкаАктивизацииВыбораСтрокиМПЗПриобретенные(ТекущиеДанные, Редактирование = Ложь)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяТаблица = ЭлементыФормы.МПЗПриобретенные;
	ТекущийСписокКолонок = ТекущаяТаблица.Колонки;
	
	Если Предприниматель Тогда
		ТекущийСписокКолонок.РеквизитыДокументаОплаты.ТолькоПросмотр = НЕ ТекущиеДанные.Оплачен;
	КонецЕсли;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
		
		ВидСубкСтр = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["СпособыСтроительства"];
		ТекущийСписокКолонок.СпособСтроительства.ТолькоПросмотр = ТекущиеДанные.СчетУчета.ВидыСубконто.Найти(ВидСубкСтр) = Неопределено;
		ТекущийСписокКолонок.Номенклатура.ТолькоПросмотр = ТекущиеДанные.СчетУчета.ВидыСубконто.Найти(ВидСубкСтр) = Неопределено;
		
	КонецЕсли;
	
	ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["Номенклатура"];
	ЭтоНоменклатура = ТекущиеДанные.СчетУчета.ВидыСубконто.Найти(ВидСубк) = Неопределено;
	ВалютаРуб = НЕ ЗначениеЗаполнено(ТекущиеДанные.Валюта) ИЛИ мВалютаРегламентированногоУчета = ТекущиеДанные.Валюта;
	НетСубконто = ТекущиеДанные.СчетУчета.ВидыСубконто.Количество() = 0;
	
	Если Предприниматель И ЭтоНоменклатура И Модифицированность() Тогда
		ТекущиеДанные.Оплачен = Ложь;
		ТекущиеДанные.РеквизитыДокументаОплаты = "";
		ТекущиеДанные.НДСВключенВстоимость = Ложь;
	КонецЕсли;
	//ТекущийСписокКолонок.Оплачен.ТолькоПросмотр						= ЭтоНоменклатура;
	//ТекущийСписокКолонок.НДСВключенВстоимость.ТолькоПросмотр		= ЭтоНоменклатура;
	ТекущийСписокКолонок.Номенклатура.ТолькоПросмотр				= ЭтоНоменклатура И НетСубконто;
	ТекущийСписокКолонок.НДС.ТолькоПросмотр							= ЭтоНоменклатура;
	ТекущийСписокКолонок.СтатусыОплатыРасходовУСН.ТолькоПросмотр	= ЭтоНоменклатура;
	ТекущийСписокКолонок.Валюта.ТолькоПросмотр						= ЭтоНоменклатура;
	ТекущийСписокКолонок.ОтражениеВУСН.ТолькоПросмотр				= ЭтоНоменклатура;
	ТекущийСписокКолонок.РасчетныйДокумент.ТолькоПросмотр			= ЭтоНоменклатура;
	ТекущийСписокКолонок.Количество.ТолькоПросмотр					= НЕ ТекущиеДанные.СчетУчета.Количественный;
	ТекущийСписокКолонок.РеквизитыДокументаОплаты.ТолькоПросмотр	= НЕ ТекущиеДанные.Оплачен;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
		ТекущийСписокКолонок.Склад.ТолькоПросмотр						= Ложь;
		ТекущийСписокКолонок.Партия.ТолькоПросмотр						= Ложь;
		ТекущийСписокКолонок.Номенклатура.ТолькоПросмотр				= Ложь;
		Если ЭлементыФормы.ПанельМПЗ.ТекущаяСтраница = ЭлементыФормы.ПанельМПЗ.Страницы.ТоварыВРозницеАТТ Тогда
			ТекущийСписокКолонок.ВалютнаяСумма.ТолькоПросмотр				= Ложь;
			ТекущийСписокКолонок.ВалютныйНДС.ТолькоПросмотр					= Ложь;
		Иначе
			ТекущийСписокКолонок.ВалютнаяСумма.ТолькоПросмотр				= ВалютаРуб;
			ТекущийСписокКолонок.ВалютныйНДС.ТолькоПросмотр					= ВалютаРуб;
		КонецЕсли;
	Иначе
		ТекущийСписокКолонок.Склад.ТолькоПросмотр						= ЭтоНоменклатура;
		ТекущийСписокКолонок.Партия.ТолькоПросмотр						= ЭтоНоменклатура;
		ТекущийСписокКолонок.ВалютнаяСумма.ТолькоПросмотр				= ЭтоНоменклатура ИЛИ ВалютаРуб;
		ТекущийСписокКолонок.ВалютныйНДС.ТолькоПросмотр					= ЭтоНоменклатура ИЛИ ВалютаРуб;
	КонецЕсли;
	
	Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации
		ИЛИ ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации Тогда
		ТекущийСписокКолонок.СуммаНУ.ТолькоПросмотр = Истина;
		
		Если ТекущиеДанные.СпецМатериалНазначениеИспользования.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию 
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.СпецМатериалНазначениеИспользования.СпособПогашенияСтоимости) Тогда
			ТекущийСписокКолонок.Сумма.ТолькоПросмотр = Истина;
			ТекущийСписокКолонок.СуммаПР.ТолькоПросмотр = Истина;
		Иначе
			ТекущийСписокКолонок.Сумма.ТолькоПросмотр = Ложь;
			ТекущийСписокКолонок.СуммаПР.ТолькоПросмотр = Ложь;			
		КонецЕсли;
	КонецЕсли;
	
	ТекущийСписокКолонок.СпецМатериалПодразделениеФизЛицо.ТолькоПросмотр = ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации;
	
	Если Редактирование Тогда
		
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
			Если ТекущиеДанные.СчетУчета <> ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации Тогда
				Если ЗначениеЗаполнено(ТекущиеДанные.СпецМатериалПодразделениеФизЛицо) Тогда
					ТекущиеДанные.СпецМатериалПодразделениеФизЛицо = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ТекущийСписокКолонок.Номенклатура.ТолькоПросмотр И ТекущийСписокКолонок.Номенклатура.Видимость Тогда
			Если ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку Тогда
				ТипСтр = ТекущиеДанные.СчетУчета.ВидыСубконто[1].ВидСубконто.ТипЗначения;
			Иначе
				ТипСтр = ТекущиеДанные.СчетУчета.ВидыСубконто[0].ВидСубконто.ТипЗначения;
			КонецЕсли;
			
			ТекущийЭлементУправления = ЭлементыФормы.МПЗПриобретенные.Колонки.Номенклатура.ЭлементУправления;
			ТекущийЭлементУправления.ОграничениеТипа = ТипСтр;
			ТекущиеДанные.Номенклатура = ТекущийЭлементУправления.ОграничениеТипа.ПривестиЗначение(ТекущиеДанные.Номенклатура);
		КонецЕсли;
		
		Если ЭтоНоменклатура Тогда
			ТекущиеДанные.ВалютнаяСумма = 0;
			ТекущиеДанные.ВалютныйНДС = 0;
			Если РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
				ТекущиеДанные.Склад = "";
			КонецЕсли;
			ТекущиеДанные.Партия = "";
			ТекущиеДанные.РасчетныйДокумент = "";
			Если НетСубконто Тогда
				ТекущиеДанные.Номенклатура = "";
			КонецЕсли;
			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
				СМР = ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств;
				Если НЕ СМР Тогда
					// Необходимо очистить дополнительные сведения
					КлючПоиска = Новый Структура("Ключ" , ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.Ключ.Значение);
					НайденныеСтроки = ДанныеПоСФ.НайтиСтроки(КлючПоиска);
					Для Каждого Строка Из НайденныеСтроки Цикл
						ДанныеПоСФ.Удалить(Строка);
					КонецЦикла;
					ОтобразитьСчетаФактуры();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ТекущиеДанные.СчетУчета.Количественный Тогда
			ТекущиеДанные.Количество = 0;
		КонецЕсли;
		
		Если РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
			Если ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.СчетУчета.ВидыСубконто.Количество() = 0 Тогда
				ТипыСубконтоСовпадают = Ложь;
			ИначеЕсли ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку Тогда
				ТипыСубконтоСовпадают = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.СчетУчета.ВидыСубконто[1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.Номенклатура));
			Иначе
				ТипыСубконтоСовпадают = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.СчетУчета.ВидыСубконто[0].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.Номенклатура));
			КонецЕсли;
			
			Если НЕ ТипыСубконтоСовпадают Тогда
				ТекущиеДанные.Номенклатура = "";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗПриобретенныеПриАктивизацииЯчейки(Элемент)
	
	ОбработкаАктивизацииВыбораСтрокиМПЗПриобретенные(Элемент.ТекущиеДанные)
	
КонецПроцедуры

Процедура МПЗПриобретенныеПриИзмененииФлажка(Элемент, Колонка)
	
	ОбработкаАктивизацииВыбораСтрокиМПЗПриобретенные(Элемент.ТекущиеДанные);
	Если Колонка.Имя = "Оплачен" Тогда
		Если НЕ Элемент.ТекущиеДанные.Оплачен Тогда
			Элемент.ТекущиеДанные.РеквизитыДокументаОплаты = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗСобственныеОборотыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		РассчитатьНомерТЧ(Элемент);
		Элемент.ТекущиеДанные.Ключ = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.Ключ;
	КонецЕсли;
	
	ВидыМПЗДляВыбора = Новый СписокЗначений;
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Товары);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Продукция);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Полуфабрикаты);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Материалы);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.ВспомогательныеМатериалы);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.КапитальныеВложения);
	
	ЭлементыФормы.МПЗСобственныеОбороты.Колонки.ВидМПЗ.ЭлементУправления.СписокВыбора = ВидыМПЗДляВыбора;
	
КонецПроцедуры

Процедура МПЗСобственныеОборотыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если ЭлементыФормы.МПЗПриобретенные.ТекущаяСтрока = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗСобственныеОборотыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Перенумеровать(Элемент);
	
КонецПроцедуры

Процедура МПЗСобственныеОборотыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если мПеренумеровать = 0 Тогда
		мПеренумеровать = 3;
	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.МПЗСобственныеОбороты.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

Процедура МПЗСобственныеОборотыПослеУдаления(Элемент)
	
	мПеренумеровать = 2;
	
КонецПроцедуры

Процедура МПЗПриобретенныеРасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация,,, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["МПЗПриобретенные"].Реквизиты.РасчетныйДокумент.Тип);
	
КонецПроцедуры

Процедура МПЗПриобретенныеНоменклатураПриИзменении(Элемент)
	
	Если ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку Тогда
		ТипСтр = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.СчетУчета.ВидыСубконто[1].ВидСубконто.ТипЗначения;
	Иначе
		ТипСтр = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.СчетУчета.ВидыСубконто[0].ВидСубконто.ТипЗначения;
	КонецЕсли;
	Элемент.ОграничениеТипа = ТипСтр;
	ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.Номенклатура = Элемент.ОграничениеТипа.ПривестиЗначение(ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.Номенклатура);
	
КонецПроцедуры

Процедура МПЗПриобретенныеНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку Тогда
		ТипСтр = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.СчетУчета.ВидыСубконто[1].ВидСубконто.ТипЗначения;
	Иначе
		ТипСтр = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.СчетУчета.ВидыСубконто[0].ВидСубконто.ТипЗначения;
	КонецЕсли;
	Элемент.ОграничениеТипа = ТипСтр;
	ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.Номенклатура = Элемент.ОграничениеТипа.ПривестиЗначение(ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.Номенклатура);
	
КонецПроцедуры

Процедура МПЗПриобретенныеВалютаПриИзменении(Элемент)
	
	ПересчитатьСуммыДляУСН(ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные, ЭлементыФормы.МПЗПриобретенные)
	
КонецПроцедуры

Процедура МПЗПриобретенныеВалютаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗПриобретенныеПартияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если УСН_ДР Тогда
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.РасчетныйДокумент) Тогда
			ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.РасчетныйДокумент = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗПриобретенныеПартияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация,,, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["МПЗПриобретенные"].Реквизиты.Партия.Тип);
	
КонецПроцедуры

Процедура ДанныеПоСФСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация,,, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["ДанныеПоСФ"].Реквизиты.СчетФактура.Тип);
	
КонецПроцедуры

Процедура МПЗСобственныеОборотыПартияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗСобственныеОбороты.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация,,, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["Обороты"].Реквизиты.Партия.Тип);
	
КонецПроцедуры

Процедура МПЗСобственныеОборотыВидМПЗНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗСобственныеОборотыВидМПЗОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗПриобретенныеСтавкаНДСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗПриобретенныеСкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
		Если мРозницаВПродажныхЦенах Тогда
			СтандартнаяОбработка = Ложь;
			Если ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
				НачалоВыбораСклада(Элемент, Элемент.Значение, Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка,ВидСравнения.Равно);
			ИначеЕсли ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
				НачалоВыбораСклада(Элемент, Элемент.Значение, Перечисления.ВидыСкладов.Розничный,ВидСравнения.Равно);
			Иначе
				НачалоВыбораСклада(Элемент, Элемент.Значение, Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка,ВидСравнения.НеРавно);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачалоВыбораСклада(ЭлементФормы, Склад, Значение,ВидСравненияНТТ)
	
	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.Склады.ПолучитьФормуВыбора(,ЭлементФормы,);

	// уберем из выбора неавтоматизированные торговые точки
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Значение                            = Значение;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Использование                       = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.ВидСравнения                        = ВидСравненияНТТ;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСклада.Доступность = Ложь;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока                         = Склад;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораСкладаНТТ()

Процедура МПЗПриобретенныеПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Перенумеровать(Элемент);
	
КонецПроцедуры

Процедура МПЗПриобретенныеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если мПеренумеровать = 0 Тогда
		мПеренумеровать = 3;
	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.МПЗПриобретенные.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

Процедура МПЗПриобретенныеСпецМатериалНазначениеИспользованияПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные;
	
	Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации
		ИЛИ ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации Тогда
		Если ТекущиеДанные.СпецМатериалНазначениеИспользования.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию 
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.СпецМатериалНазначениеИспользования.СпособПогашенияСтоимости) Тогда
			ТекущиеДанные.Сумма = 0;
			ТекущиеДанные.СуммаПР = 0;
			ТекущиеДанные.СуммаВР = 0;
			ТекущиеДанные.СуммаНУ = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗПриобретенныеСпецМатериалНазначениеИспользованияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные;
	
	Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации Тогда
		
		СтандартнаяОбработка = Ложь;

		ФормаВыбора = Справочники.НазначенияИспользования.ПолучитьФормуВыбора(,Элемент, ТекущиеДанные.СпецМатериалНазначениеИспользования);
		ФормаВыбора.СправочникСписок.Отбор.СпособПогашенияСтоимости.ВидСравнения                        = ВидСравнения.НеРавно;
		ФормаВыбора.СправочникСписок.Отбор.СпособПогашенияСтоимости.Значение                            = Перечисления.СпособыПогашенияСтоимости.ПропорциональноОбъемуПродукцииРабот;
		ФормаВыбора.СправочникСписок.Отбор.СпособПогашенияСтоимости.Использование                       = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.СпособПогашенияСтоимости.Доступность = Ложь;
		
		ФормаВыбора.ПараметрОтборПоВладельцу = ТекущиеДанные.Номенклатура;
		
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНазначениеИспользования(ТекущиеДанные)
	
	Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.СпецМатериалНазначениеИспользования) Тогда
			Если ТекущиеДанные.СпецМатериалНазначениеИспользования.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.ПропорциональноОбъемуПродукцииРабот Тогда
				ТекущиеДанные.СпецМатериалНазначениеИспользования = Справочники.НазначенияИспользования.ПустаяСсылка();
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗПриобретенныеСпецМатериалПервоначальнаяСтоимостьПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные;
	
	Если ТекущиеДанные.СпецМатериалНазначениеИспользования.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию 
		ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.СпецМатериалНазначениеИспользования.СпособПогашенияСтоимости) Тогда
		ТекущиеДанные.Сумма = 0;
		ТекущиеДанные.СуммаПР = 0;
		ТекущиеДанные.СуммаВР = 0;
		ТекущиеДанные.СуммаНУ = 0;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел "Расчеты по налогам и сборам"

Процедура РасчетыПоНалогамИСборамСчетУчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		УправлениеДоступностьюКолонок(ЭлементыФормы.РасчетыПоНалогамИСборам, Ложь)
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СчетМожноИспользоватьВПроводках(Элемент.Значение) Тогда
		ТекущиеДанные = ЭлементыФормы.РасчетыПоНалогамИСборам.ТекущиеДанные;
		ПриВыбореСчетаРасчетыПоНалогамИСборам(ТекущиеДанные, ЭлементыФормы.РасчетыПоНалогамИСборам, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыПоНалогамИСборамСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораСчета(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РасчетыПоНалогамИСборамПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.РасчетыПоНалогамИСборам.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СчетУчета) Тогда
		УправлениеДоступностьюКолонок(ЭлементыФормы.РасчетыПоНалогамИСборам, Ложь)
	Иначе 
		Возврат;
	КонецЕсли;
	
	ПриВыбореСчетаРасчетыПоНалогамИСборам(ТекущиеДанные, ЭлементыФормы.РасчетыПоНалогамИСборам);
	
КонецПроцедуры

Процедура ПриВыбореСчетаРасчетыПоНалогамИСборам(ТекущиеДанные, ТекущаяТаблица, Редактирование = Ложь)
	
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущаяТаблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяТаблица.Колонки.ВидПлатежаВБюджет.ТолькоПросмотр		= ТекущиеДанные.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["ВидыПлатежейВГосБюджет"]) = Неопределено;
	ТекущаяТаблица.Колонки.УровеньБюджета.ТолькоПросмотр		= ТекущиеДанные.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["УровниБюджетов"]) = Неопределено;
	// {ОбособленныеПодразделения
	ТекущаяТаблица.Колонки.РегистрацияВИФНС.ТолькоПросмотр		= ТекущиеДанные.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["РегистрацияВИФНС"]) = Неопределено;
	// }ОбособленныеПодразделения 
	ТекущаяТаблица.Колонки.СтатьяЗатрат.ТолькоПросмотр			= НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетУчета);
	ТекущаяТаблица.Колонки.НоменклатурнаяГруппа.ТолькоПросмотр	= НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетУчета);
	ТекущаяТаблица.Колонки.ХарактерДеятельности.ТолькоПросмотр	= НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетУчета);
	ТекущаяТаблица.Колонки.ОтражениеВУСН.ТолькоПросмотр			= НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетУчета);
	ТекущаяТаблица.Колонки.Сумма.ТолькоПросмотр					= НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетУчета);
	
	//обнулим незадействованные реквизиты
	Если Редактирование Тогда
		
		Если ТекущиеДанные.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["ВидыПлатежейВГосБюджет"]) = Неопределено Тогда
			ТекущиеДанные.ВидПлатежаВБюджет = "";
		КонецЕсли;
		Если ТекущиеДанные.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["УровниБюджетов"]) = Неопределено Тогда
			ТекущиеДанные.УровеньБюджета = "";
		КонецЕсли;
		Если Предприниматель И ТекущиеДанные.СчетУчета.Вид = ВидСчета.Активный Тогда
			ТекущиеДанные.СтатьяЗатрат 			= "";
			ТекущиеДанные.НоменклатурнаяГруппа	= "";
			ТекущиеДанные.ХарактерДеятельности	= "";
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура РасчетыПоНалогамИСборамСчетУчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоВыбораСчета(Элемент, мСписокСчетов,,Элемент.Значение);
	
КонецПроцедуры

Процедура РасчетыПоНалогамИСборамСчетУчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОконченВводТекстаСчета(Элемент, Текст, Значение, СтандартнаяОбработка, мСписокСчетов);
	
КонецПроцедуры

Процедура РасчетыПоНалогамИСборамСчетУчетаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура РасчетыПоНалогамИСборамПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетУчета) И НЕ ОтменаРедактирования Тогда
		Предупреждение("Укажите счет бухгалтерского учета!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыПоНалогамИСборамПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	УправлениеДоступностьюКолонок(Элемент, Истина)
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел "Расчеты с подотчетными лицами"

Процедура РасчетыСПодотчетнымиЛицамиСчетУчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		УправлениеДоступностьюКолонок(ЭлементыФормы.РасчетыСПодотчетнымиЛицами, Ложь)
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СчетМожноИспользоватьВПроводках(Элемент.Значение) Тогда
		ТекущиеДанные = ЭлементыФормы.РасчетыСПодотчетнымиЛицами.ТекущиеДанные;
		ПриВыбореСчетаРасчетыСПодотчетнымиЛицами(ТекущиеДанные, ЭлементыФормы.РасчетыСПодотчетнымиЛицами, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыСПодотчетнымиЛицамиСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораСчета(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РасчетыСПодотчетнымиЛицамиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.РасчетыСПодотчетнымиЛицами.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СчетУчета) Тогда
		УправлениеДоступностьюКолонок(ЭлементыФормы.РасчетыСПодотчетнымиЛицами, Ложь)
	Иначе 
		Возврат;
	КонецЕсли;
	
	ПриВыбореСчетаРасчетыСПодотчетнымиЛицами(ТекущиеДанные, ЭлементыФормы.РасчетыСПодотчетнымиЛицами);
	
КонецПроцедуры

Процедура ПриВыбореСчетаРасчетыСПодотчетнымиЛицами(ТекущиеДанные, ТекущаяТаблица, Редактирование = Ложь)
	
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущаяТаблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяТаблица.Колонки.РаботникОрганизации.ТолькоПросмотр	= НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетУчета);
	ТекущаяТаблица.Колонки.РасчетныйДокумент.ТолькоПросмотр		= НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетУчета);
	ТекущаяТаблица.Колонки.Сумма.ТолькоПросмотр					= НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетУчета);
	ТекущаяТаблица.Колонки.СуммаКт.ТолькоПросмотр				= НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетУчета);
	ТекущаяТаблица.Колонки.Валюта.ТолькоПросмотр				= НЕ ТекущиеДанные.СчетУчета.Валютный;
	ТекущаяТаблица.Колонки.ВалютнаяСумма.ТолькоПросмотр			= НЕ ТекущиеДанные.СчетУчета.Валютный;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетУчета) Тогда
		Если ТекущиеДанные.СчетУчета.Вид = ВидСчета.Активный Тогда
			ТекущаяТаблица.Колонки.СуммаКт.ТолькоПросмотр = Истина;
			ТекущаяТаблица.Колонки.Сумма.ТолькоПросмотр = Ложь;
		ИначеЕсли ТекущиеДанные.СчетУчета.Вид = ВидСчета.Пассивный Тогда
			ТекущаяТаблица.Колонки.СуммаКт.ТолькоПросмотр = Ложь;
			ТекущаяТаблица.Колонки.Сумма.ТолькоПросмотр = Истина;
		ИначеЕсли ТекущиеДанные.СчетУчета.Вид = ВидСчета.АктивноПассивный Тогда
			ТекущаяТаблица.Колонки.СуммаКт.ТолькоПросмотр = Ложь;
			ТекущаяТаблица.Колонки.Сумма.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//обнулим незадействованные реквизиты
	Если Редактирование Тогда
		
		Если НЕ ТекущиеДанные.СчетУчета.Валютный Тогда
			ТекущиеДанные.ВалютнаяСумма = 0;
			ТекущиеДанные.Валюта = "";
		КонецЕсли;
		
		Если ТекущаяТаблица.Колонки.СуммаКт.ТолькоПросмотр Тогда
			ТекущаяТаблица.Колонки.СуммаКт = 0;
		КонецЕсли;
		
		Если ТекущаяТаблица.Колонки.Сумма.ТолькоПросмотр Тогда
			ТекущаяТаблица.Колонки.Сумма = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыСПодотчетнымиЛицамиСчетУчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоВыбораСчета(Элемент, мСписокСчетов,, Элемент.Значение);
	
КонецПроцедуры

Процедура РасчетыСПодотчетнымиЛицамиСчетУчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОконченВводТекстаСчета(Элемент, Текст, Значение, СтандартнаяОбработка, мСписокСчетов);
	
КонецПроцедуры

Процедура РасчетыСПодотчетнымиЛицамиСчетУчетаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура РасчетыСПодотчетнымиЛицамиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетУчета) И НЕ ОтменаРедактирования Тогда
		Предупреждение("Укажите счет бухгалтерского учета!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыСПодотчетнымиЛицамиСуммаПриИзменении(Элемент)
	
	ТекущаяТаблица = ЭлементыФормы.РасчетыСПодотчетнымиЛицами;
	
	Если ТекущаяТаблица.ТекущаяКолонка.Имя = "Сумма" 
		И ТекущаяТаблица.ТекущиеДанные.Сумма <> 0 Тогда
		ТекущаяТаблица.ТекущиеДанные.СуммаКт = 0;
	ИначеЕсли ТекущаяТаблица.ТекущаяКолонка.Имя = "СуммаКт" 
		И ТекущаяТаблица.ТекущиеДанные.СуммаКт <> 0 Тогда
		ТекущаяТаблица.ТекущиеДанные.Сумма = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыСПодотчетнымиЛицамиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	УправлениеДоступностьюКолонок(Элемент, Истина)
	
КонецПроцедуры

Процедура РасчетыСПодотчетнымиЛицамиРасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗПриобретенные.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация,,, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["РасчетыСПодотчетнымиЛицами"].Реквизиты.РасчетныйДокумент.Тип);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел "Расчеты по заработной плате и депонентам"

Процедура РасчетыПоЗаработнойПлатеСчетУчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		УправлениеДоступностьюКолонок(ЭлементыФормы.РасчетыПоЗаработнойПлате, Ложь)
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СчетМожноИспользоватьВПроводках(Элемент.Значение) Тогда
		ТекущиеДанные = ЭлементыФормы.РасчетыПоЗаработнойПлате.ТекущиеДанные;
		ПриВыбореСчетаРасчетыПоЗаработнойПлате(ТекущиеДанные, ЭлементыФормы.РасчетыПоЗаработнойПлате, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораСчета(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеСчетУчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоВыбораСчета(Элемент, мСписокСчетов,,Элемент.Значение);
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.РасчетыПоЗаработнойПлате.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СчетУчета) Тогда
		УправлениеДоступностьюКолонок(ЭлементыФормы.РасчетыПоЗаработнойПлате, Ложь)
	Иначе 
		Возврат;
	КонецЕсли;
	
	ПриВыбореСчетаРасчетыПоЗаработнойПлате(ТекущиеДанные, ЭлементыФормы.РасчетыПоЗаработнойПлате);
	
КонецПроцедуры

Процедура ПриВыбореСчетаРасчетыПоЗаработнойПлате(ТекущиеДанные, ТекущаяТаблица, Редактирование = Ложь)
	
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущаяТаблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяТаблица.Колонки.Ведомость.ТолькоПросмотр					= НЕ ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
	ТекущаяТаблица.Колонки.ПериодРегистрации.ТолькоПросмотр			= ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
	
	Если Предприниматель Тогда
		ТекущаяТаблица.Колонки.Получатель.ТолькоПросмотр = Истина;
		Если ТекущиеДанные.ВидУдержания <> Перечисления.ИПВидыНачисленийУдержаний.УдержаноНДФЛ 
			И ЗначениеЗаполнено(ТекущиеДанные.ВидУдержания) Тогда
			ТекущаяТаблица.Колонки.Получатель.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//обнулим незадействованные реквизиты
	Если Редактирование Тогда
		
		Если НЕ ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам Тогда
			ТекущиеДанные.Ведомость = "";
		Иначе
			ТекущиеДанные.ПериодРегистрации = "";
		КонецЕсли;
		
		Если Предприниматель Тогда
			
			Если ТекущиеДанные.ВидУдержания = Перечисления.ИПВидыНачисленийУдержаний.УдержаноНДФЛ Тогда
				ТекущиеДанные.Получатель = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если Предприниматель Тогда
		Если ДанныеСтроки.ВидУдержания = Перечисления.ИПВидыНачисленийУдержаний.УдержаноНДФЛ Тогда
			ОформлениеСтроки.Ячейки.Получатель.УстановитьТекст("Федеральный бюджет");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеВидУдержанияПриИзменении(Элемент)
	
	ПриВыбореСчетаРасчетыПоЗаработнойПлате(ЭлементыФормы.РасчетыПоЗаработнойПлате.ТекущиеДанные, ЭлементыФормы.РасчетыПоЗаработнойПлате, Истина);
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеСчетУчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОконченВводТекстаСчета(Элемент, Текст, Значение, СтандартнаяОбработка, мСписокСчетов);
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеСчетУчетаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетУчета) И НЕ ОтменаРедактирования Тогда
		Предупреждение("Укажите счет бухгалтерского учета!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораСчета(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	УправлениеДоступностьюКолонок(Элемент, Истина)
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеПериодРегистрацииПриИзменении(Элемент)
	
	Элемент.Значение = НачалоМесяца(Элемент.Значение);
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если Направление = 1 Тогда // увеличиваем значение
		Элемент.Значение = КонецМесяца(Элемент.Значение) + 1
	Иначе // = -1 - уменьшаем значение
		Элемент.Значение = НачалоМесяца(Элемент.Значение - 1)
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И ВестиУчетПоРаботникам И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.ПериодРегистрации = НачалоМесяца(Дата)
	КонецЕсли;
	
	Если Предприниматель Тогда
		
		ВидНачисленияДляВыбора = Новый СписокЗначений;
		ВидНачисленияДляВыбора.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоПовременно);
		ВидНачисленияДляВыбора.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоСдельно);
		ВидНачисленияДляВыбора.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоНатуральныйДоход);
		ВидНачисленияДляВыбора.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоДругое);
		ЭлементыФормы.РасчетыПоЗаработнойПлате.Колонки.ВидНачисления.ЭлементУправления.СписокВыбора = ВидНачисленияДляВыбора;
		
		ВидУдержанияДляВыбора = Новый СписокЗначений;
		ВидУдержанияДляВыбора.Добавить(Перечисления.ИПВидыНачисленийУдержаний.УдержаноНДФЛ);
		ВидУдержанияДляВыбора.Добавить(Перечисления.ИПВидыНачисленийУдержаний.УдержаноИсполнительныйЛист);
		ВидУдержанияДляВыбора.Добавить(Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
		ЭлементыФормы.РасчетыПоЗаработнойПлате.Колонки.ВидУдержания.ЭлементУправления.СписокВыбора = ВидУдержанияДляВыбора;
		
		ЭлементыФормы.РасчетыПоЗаработнойПлате.Колонки.Получатель.ТолькоПросмотр = Истина;
		Если Элемент.ТекущиеДанные.ВидУдержания <> Перечисления.ИПВидыНачисленийУдержаний.УдержаноНДФЛ 
			И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидУдержания) Тогда
			ЭлементыФормы.РасчетыПоЗаработнойПлате.Колонки.Получатель.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеПолучательОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеВедомостьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.ЗарплатаКВыплатеОрганизаций.ПолучитьФормуВыбора(, Элемент,);
	
	ФормаВыбора.Отбор["Организация"].Значение      = Организация;
	ФормаВыбора.Отбор["Организация"].Использование = Истина;
	
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеВидНачисленияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеВидНачисленияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеВидУдержанияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура РасчетыПоЗаработнойПлатеВидУдержанияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел "Расчеты с поставщиками и подрядчиками"

Процедура РасчетыСКонтрагентамиУстановитьВидимость()
	
	ТекущиеДанные = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
	
	СчетУчетаВалютный = (ТекущиеДанные <> Неопределено) 
		И ЗначениеЗаполнено(ТекущиеДанные.СчетУчета) 
		И ТекущиеДанные.СчетУчета.Валютный;
	
		
	ЭлементыФормы.РасчетыСКонтрагентами.Колонки.СуммаНУ.ТолькоПросмотр	          = ?(ТекущиеДанные = Неопределено, Истина, НЕ ТекущиеДанные.СчетУчета.НалоговыйУчет);
	ЭлементыФормы.РасчетыСКонтрагентами.Колонки.ВалютнаяСумма.ТолькоПросмотр	  = НЕ СчетУчетаВалютный;
	ЭлементыФормы.РасчетыСКонтрагентами.Колонки.КурсВзаиморасчетов.ТолькоПросмотр = НЕ СчетУчетаВалютный;
	
	ЭлементыФормы.РасчетыСКонтрагентами.Колонки.СуммаНУ.ПропускатьПриВводе	          = НЕ СчетУчетаВалютный;
	ЭлементыФормы.РасчетыСКонтрагентами.Колонки.ВалютнаяСумма.ПропускатьПриВводе	  = НЕ СчетУчетаВалютный;
	ЭлементыФормы.РасчетыСКонтрагентами.Колонки.КурсВзаиморасчетов.ПропускатьПриВводе = НЕ СчетУчетаВалютный;
	
	Если (ТекущиеДанные <> Неопределено) 
		И (РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами) 
		Тогда
		ЭлементыФормы.РасчетыСКонтрагентами.Колонки.СуммаКт.ТолькоПросмотр = (ТекущиеДанные.СчетУчета.Вид = ВидСчета.Активный);
		ЭлементыФормы.РасчетыСКонтрагентами.Колонки.Сумма.ТолькоПросмотр   = (ТекущиеДанные.СчетУчета.Вид = ВидСчета.Пассивный);
		
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ВестиРасчетыПоДокументам = НЕ (ТекущиеДанные.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто") = Неопределено);
		
		СчетаИсключения = Новый Массив;
		СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);
		
		ЭтоСчетИсключение = СчетаИсключения.Найти(ТекущиеДанные.СчетУчета) <> Неопределено;
		
		Если (ВестиРасчетыПоДокументам
			ИЛИ УСН_ДР
			ИЛИ мСложныйУчетНДС)
			И НЕ ЭтоСчетИсключение Тогда
			ЭлементыФормы.РасчетыСКонтрагентами.Колонки.Документ.ТолькоПросмотр = Ложь;		
		Иначе
			ЭлементыФормы.РасчетыСКонтрагентами.Колонки.Документ.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура РасчетыСКонтрагентамиСчетУчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		УправлениеДоступностьюКолонок(ЭлементыФормы.РасчетыСКонтрагентами, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СчетМожноИспользоватьВПроводках(Элемент.Значение) Тогда
		ТекущиеДанные = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
		ПриВыбореСчетаРасчетыСКонтрагентами(ТекущиеДанные, ЭлементыФормы.РасчетыСКонтрагентами);
	КонецЕсли;
	
	РасчетыСКонтрагентамиУстановитьВидимость();
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораСчета(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СчетУчета) Тогда
		УправлениеДоступностьюКолонок(ЭлементыФормы.РасчетыСКонтрагентами, Ложь);
	Иначе 
		Возврат;
	КонецЕсли;

	РасчетыСКонтрагентамиУстановитьВидимость();
	
КонецПроцедуры

Процедура ПриВыбореСчетаРасчетыСКонтрагентами(ТекущиеДанные, ТекущаяТаблица)
	
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущаяТаблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетУчетаВалютный = ТекущиеДанные.СчетУчета.Валютный;
	ВестиРасчетыПоДокументам = НЕ (ТекущиеДанные.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто") = Неопределено);
	
	//обнулим незадействованные реквизиты

	Если НЕ СчетУчетаВалютный Тогда
		ТекущиеДанные.ВалютнаяСумма = ?(ТекущиеДанные.Сумма <> 0, ТекущиеДанные.Сумма, ТекущиеДанные.СуммаКт);
		ТекущиеДанные.Валюта = мВалютаРегламентированногоУчета;
		ТекущиеДанные.СуммаНУ = ТекущиеДанные.Сумма;
	КонецЕсли;
	
	Если ВестиРасчетыПоДокументам
		ИЛИ УСН_ДР
		ИЛИ мСложныйУчетНДС Тогда
		ТекущаяТаблица.Колонки.Документ.ТолькоПросмотр = Ложь;		
	Иначе
		ТекущиеДанные.Документ = "";
		ТекущаяТаблица.Колонки.Документ.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.СчетУчета.НалоговыйУчет Тогда
		ТекущиеДанные.СуммаНУ = 0;
	КонецЕсли;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками Тогда
		ТекущиеДанные.Аванс = ТекущиеДанные.СчетУчета.Вид = ВидСчета.Активный;
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками Тогда
		ТекущиеДанные.Аванс = ТекущиеДанные.СчетУчета.Вид <> ВидСчета.Активный;
	Иначе
		ТекущиеДанные.Аванс = Ложь;
		Если ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
			Если ТекущиеДанные.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				ТекущиеДанные.Аванс = (ТекущиеДанные.СуммаКт <> 0);
			ИначеЕсли ТекущиеДанные.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				ТекущиеДанные.Аванс = ТекущиеДанные.Сумма <> 0;
			КонецЕсли;
		КонецЕсли;
		Если ТекущаяТаблица.Колонки.СуммаКт.ТолькоПросмотр Тогда
			Если ТекущиеДанные.СуммаКт <> 0 Тогда 
				ТекущиеДанные.Сумма = ТекущиеДанные.СуммаКт;
				ТекущиеДанные.СуммаКт = 0;
				РасчетыСКонтрагентамиСуммаПриИзменении("");
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяТаблица.Колонки.Сумма.ТолькоПросмотр Тогда
			Если ТекущиеДанные.Сумма <> 0 Тогда 
				ТекущиеДанные.Сумма = 0;
				ТекущиеДанные.СуммаКт = ТекущиеДанные.Сумма;
				РасчетыСКонтрагентамиСуммаПриИзменении("");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПриИзмененииДоговораРасчетов(ТекущиеДанные);
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиСчетУчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоВыбораСчета(Элемент, мСписокСчетов,, Элемент.Значение);
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиСчетУчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОконченВводТекстаСчета(Элемент, Текст, Значение, СтандартнаяОбработка, мСписокСчетов);
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиСчетУчетаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетУчета) И НЕ ОтменаРедактирования Тогда
		Предупреждение("Укажите счет бухгалтерского учета!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация, ТекущаяСтрока.Контрагент, ТекущаяСтрока.ДоговорКонтрагента, КонецДня(Дата), '00010101');
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета", ?(РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками И НЕ УСН, 1, 0));
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Элемент.ТипЗначения);
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиКонтрагентПриИзменении(Элемент)
	
	ОпределитьСписокДоступныхВидовДоговоров();
	ПриИзмененииКонтрагентаРасчетов(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	
КонецПроцедуры

Процедура ПриИзмененииКонтрагентаРасчетов(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(СтрокаТабличнойЧасти.ДоговорКонтрагента,СтрокаТабличнойЧасти.Контрагент,Организация,мСписокВидовДоговоров) тогда
		ПриИзмененииДоговораРасчетов(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОпределитьСписокДоступныхВидовДоговоров();
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные.Контрагент, ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные.ДоговорКонтрагента,
	                                        мСписокВидовДоговоров, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		Если ТекущиеДанные.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			ТекущиеДанные.Аванс = ТекущиеДанные.СуммаКт <> 0;
		ИначеЕсли  ТекущиеДанные.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			ТекущиеДанные.Аванс = ТекущиеДанные.Сумма <> 0;
		КонецЕсли;
	КонецЕсли;
	
	ПриИзмененииДоговораРасчетов(ТекущиеДанные);
	
КонецПроцедуры

Процедура ПриИзмененииДоговораРасчетов(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорКонтрагента = СтрокаТабличнойЧасти.ДоговорКонтрагента;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Строка "+СтрокаТабличнойЧасти.НомерСтроки+": не заполнена валюта взаиморасчетов в договоре """+строка(ДоговорКонтрагента)+"""!");
	КонецЕсли; 
	
	Если СтрокаТабличнойЧасти.СчетУчета.Валютный Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) Или Не СтрокаТабличнойЧасти.Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
			ДатаОпределенияКурса = Дата;
			КурсНаДатуДокумента = Ложь;
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
				ДатаОпределенияКурса = СтрокаТабличнойЧасти.Документ.Дата;
				КурсНаДатуДокумента = Истина;
			КонецЕсли; 
			
			СтруктураКурсаВзаиморасчетов 				= МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаОпределенияКурса);
			
			Если КурсНаДатуДокумента И Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс) Тогда
				СтруктураКурсаВзаиморасчетов 			= МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
			КонецЕсли; 
			
			СтрокаТабличнойЧасти.КурсВзаиморасчетов     = ?(Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс), 1, СтруктураКурсаВзаиморасчетов.Курс);
			СтрокаТабличнойЧасти.КратностьВзаиморасчетов= ?(Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Кратность), 1, СтруктураКурсаВзаиморасчетов.Кратность);
			
		КонецЕсли; 
		
		СтрокаТабличнойЧасти.Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаТабличнойЧасти.Валюта = мВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) Тогда
		СтрокаТабличнойЧасти.Валюта = мВалютаРегламентированногоУчета;
	КонецЕсли;
	
	ПересчитатьВалютнуюСуммуВзаиморасчетов(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Процедура ПересчитатьВалютнуюСуммуВзаиморасчетов(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетУчетаВалютный = СтрокаТабличнойЧасти.СчетУчета.Валютный;
	
	Если НЕ СчетУчетаВалютный Тогда
		СтрокаТабличнойЧасти.ВалютнаяСумма = ?(СтрокаТабличнойЧасти.Сумма <> 0, СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.СуммаКт);
		Если ОСН Тогда
			СтрокаТабличнойЧасти.СуммаНУ = ?(СтрокаТабличнойЧасти.Сумма <> 0, СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.СуммаКт);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтрокаТабличнойЧасти.СчетУчета.НалоговыйУчет Тогда
		СтрокаТабличнойЧасти.СуммаНУ = 0;
	КонецЕсли;
	
	ПересчитатьСуммуВзаиморасчетовДляНУ(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Процедура ПересчитатьСуммуВзаиморасчетовДляНУ(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОСН Тогда
		СтрокаТабличнойЧасти.СуммаНУ = 0;
		Возврат;
	КонецЕсли;
	
	Если НЕ СтрокаТабличнойЧасти.СчетУчета.НалоговыйУчет Тогда
		СтрокаТабличнойЧасти.СуммаНУ = 0;
		Возврат;
	КонецЕсли;
	
	СчетУчетаВалютный = СтрокаТабличнойЧасти.СчетУчета.Валютный;
	
	
	Если НЕ СчетУчетаВалютный Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		Если СтрокаТабличнойЧасти.Аванс Тогда
			СтрокаТабличнойЧасти.СуммаНУ = ?(СтрокаТабличнойЧасти.Сумма <> 0, СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.СуммаКт);
		Иначе
			СтрокаТабличнойЧасти.СуммаНУ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ВалютнаяСумма, 
				СтрокаТабличнойЧасти.Валюта, мВалютаРегламентированногоУчета,
				СтрокаТабличнойЧасти.КурсВзаиморасчетов, 1,
				СтрокаТабличнойЧасти.КратностьВзаиморасчетов, 1);
		КонецЕсли;
	Иначе
		Если СтрокаТабличнойЧасти.Аванс Тогда
			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаТабличнойЧасти.Валюта, Дата);
			СтрокаТабличнойЧасти.СуммаНУ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ВалютнаяСумма, 
				СтрокаТабличнойЧасти.Валюта, мВалютаРегламентированногоУчета,
				СтруктураКурса.Курс, 1,
				СтруктураКурса.Кратность, 1);
		Иначе
			СтрокаТабличнойЧасти.СуммаНУ = ?(СтрокаТабличнойЧасти.Сумма <> 0, СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.СуммаКт);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиСуммаПриИзменении(Элемент)
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		
		ТекущиеДанные = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
		Если ЭлементыФормы.РасчетыСКонтрагентами.ТекущаяКолонка.Имя = "Сумма" 
			И ТекущиеДанные.Сумма <> 0 Тогда
			ТекущиеДанные.СуммаКт = 0;
			ИначеЕсли ЭлементыФормы.РасчетыСКонтрагентами.ТекущаяКолонка.Имя = "СуммаКт" 
			И ТекущиеДанные.СуммаКт <> 0 Тогда
			ТекущиеДанные.Сумма = 0;
		КонецЕсли;
		Если ТекущиеДанные.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			ТекущиеДанные.Аванс = (ТекущиеДанные.СуммаКт <> 0);
		ИначеЕсли ТекущиеДанные.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			ТекущиеДанные.Аванс = (ТекущиеДанные.Сумма <> 0);
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьВалютнуюСуммуВзаиморасчетов(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиКурсВзаиморасчетовПриИзменении(Элемент)
	
	ПересчитатьСуммуВзаиморасчетовДляНУ(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
	
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ТекущиеДанные.Валюта;
	ФормаВводаКурсаИКратности.КратностьВалюты = ТекущиеДанные.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = ТекущиеДанные.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;
	
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		
		ТекущиеДанные.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		ТекущиеДанные.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
		
		РасчетыСКонтрагентамиКурсВзаиморасчетовПриИзменении(Элемент);
		
	КонецЕсли;

КонецПроцедуры

Процедура РасчетыСКонтрагентамиВалютнаяСуммаПриИзменении(Элемент)
	
	ПересчитатьСуммуВзаиморасчетовДляНУ(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущаяСтрока.Контрагент Тогда
		ТекущаяСтрока.Документ = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущаяСтрока.ДоговорКонтрагента Тогда
		ТекущаяСтрока.Документ = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиДокументПриИзменении(Элемент)
	
	ОпределениеКурсаРасчетов(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	
	ПересчитатьСуммуВзаиморасчетовДляНУ(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	
КонецПроцедуры

Процедура ОпределениеКурсаРасчетов(СтрокаТабличнойЧасти)
	
	ДоговорКонтрагента = СтрокаТабличнойЧасти.ДоговорКонтрагента;
	
	ДатаОпределенияКурса = Дата;
	КурсНаДатуДокумента = Ложь;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
		ДатаОпределенияКурса = СтрокаТабличнойЧасти.Документ.Дата;
		КурсНаДатуДокумента = Истина;
	КонецЕсли; 
	
	СтруктураКурсаВзаиморасчетов 				= МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаОпределенияКурса);
	
	Если КурсНаДатуДокумента И Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс) Тогда
		СтруктураКурсаВзаиморасчетов 			= МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.КурсВзаиморасчетов     = ?(Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс), 1, СтруктураКурсаВзаиморасчетов.Курс);
	СтрокаТабличнойЧасти.КратностьВзаиморасчетов= ?(Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Кратность), 1, СтруктураКурсаВзаиморасчетов.Кратность);
	
	ПересчитатьСуммуВзаиморасчетовДляНУ(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	УправлениеДоступностьюКолонок(Элемент, Истина);
	РасчетыСКонтрагентамиУстановитьВидимость();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел "Товары отгруженные"

Процедура МПЗОтгруженныеПриИзмененииФлажка(Элемент, Колонка)
	
	ПриВыбореСчетаМПЗОтгруженные(Элемент.ТекущиеДанные, Элемент);
	Если Колонка.Имя = "Оплачен" Тогда
		Если НЕ Элемент.ТекущиеДанные.Оплачен Тогда
			Элемент.ТекущиеДанные.РеквизитыДокументаОплаты = "";
		Иначе
			Элемент.ТекущиеДанные.Поставщик			= "";
			Элемент.ТекущиеДанные.ДоговорПоставщика	= "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗОтгруженныеСчетУчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		УправлениеДоступностьюКолонок(ЭлементыФормы.МПЗОтгруженные, Ложь)
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СчетМожноИспользоватьВПроводках(Элемент.Значение) Тогда
		ТекущиеДанные = ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные;
		ПриВыбореСчетаМПЗОтгруженные(ТекущиеДанные, ЭлементыФормы.МПЗОтгруженные, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриВыбореСчетаМПЗОтгруженные(ТекущиеДанные, ТекущаяТаблица, Редактирование = Ложь)
	
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущаяТаблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяТаблица.Колонки.СуммаНУ.ТолькоПросмотр	= НЕ ТекущиеДанные.СчетУчета.НалоговыйУчет;
	ТекущаяТаблица.Колонки.СуммаПР.ТолькоПросмотр	= НЕ ТекущиеДанные.СчетУчета.НалоговыйУчет;
	
	Если Предприниматель Тогда
		ТекущаяТаблица.Колонки.РеквизитыДокументаОплаты.ТолькоПросмотр	= НЕ ТекущиеДанные.Оплачен;
		ТекущаяТаблица.Колонки.Поставщик.ТолькоПросмотр					= ТекущиеДанные.Оплачен;
		ТекущаяТаблица.Колонки.ДоговорПоставщика.ТолькоПросмотр			= ТекущиеДанные.Оплачен;
	Иначе
		ТекущаяТаблица.Колонки.Поставщик.ТолькоПросмотр					= Ложь;
		ТекущаяТаблица.Колонки.ДоговорПоставщика.ТолькоПросмотр			= Ложь;
	КонецЕсли;
	
	Если УСН_ДР Тогда
		ВалютаРуб = (НЕ ЗначениеЗаполнено(ТекущиеДанные.Валюта)) ИЛИ (мВалютаРегламентированногоУчета = ТекущиеДанные.Валюта И ЗначениеЗаполнено(ТекущиеДанные.Валюта));
		ТекущаяТаблица.Колонки.ВалютнаяСумма.ТолькоПросмотр	= ВалютаРуб;
		ТекущаяТаблица.Колонки.ВалютныйНДС.ТолькоПросмотр	= ВалютаРуб;
		Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная Тогда
			ТекущаяТаблица.Колонки.Поставщик.ТолькоПросмотр					= Истина;
			ТекущаяТаблица.Колонки.ДоговорПоставщика.ТолькоПросмотр			= Истина;
		Иначе
			ТекущаяТаблица.Колонки.Поставщик.ТолькоПросмотр					= Ложь;
			ТекущаяТаблица.Колонки.ДоговорПоставщика.ТолькоПросмотр			= Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Предприниматель ИЛИ мСложныйУчетНДС Тогда
		ВыбратьТекущуюПанельСплитованнойТаблицы(ТекущиеДанные);
		ОтобразитьМатериалыОтгрузка();
		ОтобразитьСчетаФактурыОтгрузка();
	КонецЕсли;
	
	//обнулим незадействованные реквизиты
	Если Редактирование Тогда
		
		Если НЕ ТекущиеДанные.СчетУчета.НалоговыйУчет Тогда
			ТекущиеДанные.СуммаНУ = 0;
			ТекущиеДанные.СуммаПР = 0;
			ТекущиеДанные.СуммаВР = 0;
		КонецЕсли;
		
		Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная Тогда
			Если мСложныйУчетНДС Тогда
				// Необходимо очистить дополнительные сведения
				КлючПоиска = Новый Структура("Ключ" , ЭлементыФормы.ДанныеПоСФОтгрузка.ОтборСтрок.Ключ.Значение);
				НайденныеСтроки = ДанныеПоСФ.НайтиСтроки(КлючПоиска);
				Для Каждого Строка Из НайденныеСтроки Цикл
					ДанныеПоСФ.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
			Если УСН Тогда
				ТекущиеДанные.Поставщик = "";
				ТекущиеДанные.ДоговорПоставщика = "";
			КонецЕсли;
		Иначе
			Если Предприниматель Тогда
				// Необходимо очистить дополнительные сведения
				КлючПоиска = Новый Структура("Ключ" , ЭлементыФормы.МПЗСобственныеОборотыОтгрузка.ОтборСтрок.Ключ.Значение);
				НайденныеСтроки = Обороты.НайтиСтроки(КлючПоиска);
				Для Каждого Строка Из НайденныеСтроки Цикл
					Обороты.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗОтгруженныеСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораСчета(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура МПЗОтгруженныеПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СчетУчета) Тогда
		УправлениеДоступностьюКолонок(ЭлементыФормы.МПЗОтгруженные, Ложь);
		
	Иначе 
		Возврат;
	КонецЕсли;

	
	ПриВыбореСчетаМПЗОтгруженные(ТекущиеДанные, ЭлементыФормы.МПЗОтгруженные);
	
	Если Предприниматель ИЛИ мСложныйУчетНДС Тогда
		ВыбратьТекущуюПанельСплитованнойТаблицы(ТекущиеДанные);
		ОтобразитьМатериалыОтгрузка();
		ОтобразитьСчетаФактурыОтгрузка();
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗОтгруженныеСчетУчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоВыбораСчета(Элемент, мСписокСчетов,, Элемент.Значение);
	
КонецПроцедуры

Процедура МПЗОтгруженныеСчетУчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОконченВводТекстаСчета(Элемент, Текст, Значение, СтандартнаяОбработка, мСписокСчетов);
	
КонецПроцедуры

Процедура МПЗОтгруженныеСчетУчетаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗОтгруженныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Если НЕ УСН Тогда
			
			// Инициализируем значение "Ключ" для установки связи данной таблицы с таблицей 
			// "МПЗПриобретенные".
			// Значение должно быть уникальным в пределах таблицы ДанныеПоПартиям
			НеУстановлено = Истина;
			Кандидат = МПЗОтгруженные.Количество();
			
			Пока НеУстановлено Цикл
				Если МПЗОтгруженные.Найти(Кандидат, "Ключ") = Неопределено Тогда
					// Уникальное значение ключа
					ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные.Ключ = Кандидат;
					НеУстановлено = Ложь;
					
				Иначе
					// Такое значение ключа уже использовано
					Кандидат = Кандидат + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОтобразитьСчетаФактурыОтгрузка();
			ОтобразитьМатериалыОтгрузка();
			
		ИначеЕсли УСН_ДР Тогда
			
			Элемент.ТекущиеДанные.СтатусыПартийУСН = Перечисления.СтатусыПартийУСН.НаРеализации;
			Элемент.ТекущиеДанные.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			
			Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Валюта) Тогда
				Элемент.ТекущиеДанные.Валюта = мВалютаРегламентированногоУчета;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если УСН_ДР Тогда
		СтатусыОплатыРасходовУСН = ЭтаФорма.ТекущийЭлемент.Колонки.СтатусыОплатыРасходовУСН.ЭлементУправления;
		СтатусыОплатыРасходовУСН.СписокВыбора.Очистить();
		СтатусыОплатыРасходовУСН.СписокВыбора.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
		СтатусыОплатыРасходовУСН.СписокВыбора.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
		СтатусыОплатыРасходовУСН.СписокВыбора.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
		ОтражениеВУСН = ЭтаФорма.ТекущийЭлемент.Колонки.ОтражениеВУСН.ЭлементУправления;
		ОтражениеВУСН.СписокВыбора.Очистить();
		ОтражениеВУСН.СписокВыбора.Добавить(Перечисления.ОтражениеВУСН.Принимаются);
		ОтражениеВУСН.СписокВыбора.Добавить(Перечисления.ОтражениеВУСН.НеПринимаются);
	КонецЕсли;
	
	Если Предприниматель Тогда
		ВидыМПЗДляВыбора = Новый СписокЗначений;
		ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Товары);
		ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Продукция);
		ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Полуфабрикаты);
		ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Материалы);
		ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.ВспомогательныеМатериалы);
		ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.КапитальныеВложения);
		
		ЭлементыФормы.МПЗОтгруженные.Колонки.ВидМПЗ.ЭлементУправления.СписокВыбора = ВидыМПЗДляВыбора;
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗОтгруженныеСтатусыОплатыРасходовУСННачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗОтгруженныеСтатусыОплатыРасходовУСНОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗОтгруженныеОтражениеВУСННачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗОтгруженныеОтражениеВУСНОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗОтгруженныеВидМПЗНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗОтгруженныеВидМПЗОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОтобразитьСчетаФактурыОтгрузка(ТекСтрока = Неопределено)

	Если УСН
		ИЛИ мУпрощенныйУчетНДС
		ИЛИ (НЕ мУпрощенныйУчетНДС И НЕ мСложныйУчетНДС) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока = Неопределено и не ЭлементыФормы.МПЗОтгруженные.ТекущаяСтрока = Неопределено Тогда
		ТекСтрока = ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные;
	КонецЕсли; 

	Если ТекСтрока <> Неопределено Тогда
		ЭлементыФормы.ДанныеПоСФОтгрузка.ТолькоПросмотр = Ложь;
	Иначе
		ЭлементыФормы.ДанныеПоСФОтгрузка.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Отбор = ЭлементыФормы.ДанныеПоСФОтгрузка.ОтборСтрок.Ключ;
	
	Если ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные <> Неопределено Тогда
		Отбор.Значение = ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные.Ключ;
		Отбор.Использование = Истина;
		
		ЭлементыФормы.РамкаГруппыДанныеПоСФОтгрузка.Заголовок = "  Данные по счетам-фактурам полученным по номенклатуре """ + ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные.Номенклатура + """";
		
	Иначе
		Отбор.Значение = 0;
		Отбор.Использование = Истина;
		
		ЭлементыФормы.РамкаГруппыДанныеПоСФОтгрузка.Заголовок = "  Данные по счетам-фактурам";
	КонецЕсли;

КонецПроцедуры // ОтобразитьСчетаФактуры()

Процедура ОтобразитьМатериалыОтгрузка(ТекСтрока = Неопределено)
	
	ИмяРамки =	"РамкаГруппыМПЗОборотыОтгрузка";
	ИмяТЧ =		"МПЗОтгруженные";
	ИмяТЧОб =	"МПЗСобственныеОборотыОтгрузка";
	
	ТекСтрока = ЭлементыФормы[ИмяТЧ].ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		ЭлементыФормы[ИмяТЧОб].ТолькоПросмотр = НЕ ТекСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная;
	Иначе
		ЭлементыФормы[ИмяТЧОб].ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Отбор = ЭлементыФормы[ИмяТЧОб].ОтборСтрок.Ключ;
	
	Если ТекСтрока <> Неопределено Тогда
		Отбор.Значение = ЭлементыФормы[ИмяТЧ].ТекущиеДанные.Ключ;
		Отбор.Использование = Истина;
		
		ЭлементыФормы[ИмяРамки].Заголовок = "  Материалы, неоплаченные поставщикам, израсходованные на производство номенклатуры """ + ЭлементыФормы[ИмяТЧ].ТекущиеДанные.Номенклатура + """";
		
	Иначе
		Отбор.Значение = 0;
		Отбор.Использование = Истина;
		
		ЭлементыФормы[ИмяРамки].Заголовок = "  Материалы, неоплаченные поставщикам";
	КонецЕсли;

КонецПроцедуры

Процедура МПЗОтгруженныеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетУчета) И НЕ ОтменаРедактирования Тогда
		Предупреждение("Укажите счет бухгалтерского учета!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗОтгруженныеВалютаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗОтгруженныеВалютаПриИзменении(Элемент)
	
	ПересчитатьСуммыДляУСН(ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные, ЭлементыФормы.МПЗОтгруженные)
	
КонецПроцедуры

Процедура МПЗОтгруженныеДоговорПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОпределитьСписокДоступныхВидовДоговоров();
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные.Покупатель, ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные.ДоговорПокупателя,
	                                        мСписокВидовДоговоров, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура МПЗОтгруженныеДоговорПоставщикаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОпределитьСписокДоступныхВидовДоговоров();
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные.Поставщик, ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные.ДоговорПоставщика,
	                                        мСписокВидовДоговоров, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура МПЗОтгруженныеПокупательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущаяСтрока.Покупатель Тогда
		ТекущаяСтрока.ДокументОтгрузки = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗОтгруженныеДоговорПокупателяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущаяСтрока.ДоговорПокупателя Тогда
		ТекущаяСтрока.ДокументОтгрузки = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗОтгруженныеПоставщикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущаяСтрока.Поставщик Тогда
		ТекущаяСтрока.Партия = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗОтгруженныеДоговорПоставщикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущаяСтрока.ДоговорПоставщика Тогда
		ТекущаяСтрока.Партия = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗОтгруженныеПокупательПриИзменении(Элемент)
	
	ОпределитьСписокДоступныхВидовДоговоров();
	СтрокаТабличнойЧасти = ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные;
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(СтрокаТабличнойЧасти.ДоговорПокупателя,СтрокаТабличнойЧасти.Покупатель,Организация,мСписокВидовДоговоров);
	
КонецПроцедуры

Процедура МПЗОтгруженныеПоставщикПриИзменении(Элемент)
	
	ОпределитьСписокДоступныхВидовДоговоров();
	СтрокаТабличнойЧасти = ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные;
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(СтрокаТабличнойЧасти.ДоговорПоставщика,СтрокаТабличнойЧасти.Поставщик,Организация,мСписокВидовДоговоров);
	УстановитьВалютуРасчетов(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Процедура МПЗОтгруженныеДоговорПоставщикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные;
	УстановитьВалютуРасчетов(СтрокаТабличнойЧасти);
	
КонецПроцедуры


Процедура МПЗОтгруженныеДокументОтгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	
	Если Значениезаполнено(ТекущаяСтрока.ДоговорПокупателя) Тогда
		Если ТекущаяСтрока.ДоговорПокупателя.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
			// значение было присвоено стандартно.
			ФормаВыбора = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора(, Элемент,);
			
			ФормаВыбора.Отбор["Организация"].Значение      = Организация;
			ФормаВыбора.Отбор["Организация"].Использование = Истина;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.Покупатель) Тогда
				ФормаВыбора.Отбор["Контрагент"].Значение      = ТекущаяСтрока.Покупатель;
				ФормаВыбора.Отбор["Контрагент"].Использование = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.ДоговорПокупателя) Тогда
				ФормаВыбора.Отбор["ДоговорКонтрагента"].Значение      = ТекущаяСтрока.ДоговорПокупателя;
				ФормаВыбора.Отбор["ДоговорКонтрагента"].Использование = Истина;
			КонецЕсли;
			
			ФормаВыбора.Отбор["ВидОперации"].Значение      = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности;
			ФормаВыбора.Отбор["ВидОперации"].Использование = Истина;
			
			ФормаВыбора.РежимВыбора = Истина;
			ФормаВыбора.Открыть();
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация, ТекущаяСтрока.Покупатель, ТекущаяСтрока.ДоговорПокупателя, КонецДня(Дата), '00010101');
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["МПЗОтгруженные"].Реквизиты.ДокументОтгрузки.Тип);
	
	
КонецПроцедуры

Процедура МПЗОтгруженныеПартияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	
	Если УСН Тогда
		СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента,КонецПериода, НачалоПериода", Организация, ТекущаяСтрока.Поставщик, ТекущаяСтрока.ДоговорПоставщика, КонецДня(Дата));
	ИначеЕсли Предприниматель Тогда
		СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация, ТекущаяСтрока.Поставщик, ТекущаяСтрока.ДоговорПоставщика, КонецДня(Дата), '00010101');
	Иначе
		СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация, , , КонецДня(Дата), '00010101');
	КонецЕсли;
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета", 0);
	СтруктураПараметров.Вставить("КонецПериода", КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Элемент.ТипЗначения);
	
КонецПроцедуры

Процедура МПЗОтгруженныеПередУдалением(Элемент, Отказ)
	
	// Необходимо очистить дополнительные сведения
	КлючПоиска = Новый Структура("Ключ" , ЭлементыФормы.ДанныеПоСФОтгрузка.ОтборСтрок.Ключ.Значение);
	
	НайденныеСтроки = ДанныеПоСФ.НайтиСтроки(КлючПоиска);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		ДанныеПоСФ.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура МПЗОтгруженныеПослеУдаления(Элемент)
	
	Если НЕ УСН И мСложныйУчетНДС Тогда
		ОтобразитьСчетаФактурыОтгрузка(Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗОтгруженныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ УСН И мСложныйУчетНДС Тогда
		ОтобразитьСчетаФактурыОтгрузка(Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗОтгруженныеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.МПЗОтгруженные.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

Процедура ДанныеПоСФОтгрузкаПередНачаломДобавления(Элемент, Отказ, Копирование)
		
	ТекСтрока = ЭлементыФормы.МПЗОтгруженные.ТекущаяСтрока;
	ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["Номенклатура"];
	Если ТекСтрока = Неопределено Тогда
		Отказ = Истина;
	ИначеЕсли ТекСтрока.СчетУчета.ВидыСубконто.Найти(ВидСубк) = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПоСФОтгрузкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		РассчитатьНомерТЧ(Элемент);
		ЭлементыФормы.ДанныеПоСФОтгрузка.ТекущиеДанные.Ключ = ЭлементыФормы.ДанныеПоСФОтгрузка.ОтборСтрок.Ключ.Значение;
	КонецЕсли; 
		
КонецПроцедуры

Процедура ДанныеПоСФОтгрузкаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Перенумеровать(Элемент);
	
КонецПроцедуры

Процедура ДанныеПоСФОтгрузкаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если мПеренумеровать = 0 Тогда
		мПеренумеровать = 3;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПоСФОтгрузкаПослеУдаления(Элемент)
	
	мПеренумеровать = 2;
	
КонецПроцедуры

Процедура ДанныеПоСФОтгрузкаВидЦенностиПриИзменении(Элемент)
	ТД = ЭлементыФормы.ДанныеПоСФОтгрузка.ТекущиеДанные;
	Если не ЗначениеЗаполнено(ТД.СчетУчетаНДС) Тогда
		Если ТД.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги
			или ТД.ВидЦенности = Перечисления.ВидыЦенностей.КомандировочныеРасходы
			или ТД.ВидЦенности = Перечисления.ВидыЦенностей.ПосредническиеУслуги
			или ТД.ВидЦенности = Перечисления.ВидыЦенностей.ПредставительскиеРасходы
			Тогда
			ТД.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		ИначеЕсли ТД.ВидЦенности = Перечисления.ВидыЦенностей.НМА
			Тогда
			ТД.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымНематериальнымАктивам;
		ИначеЕсли ТД.ВидЦенности = Перечисления.ВидыЦенностей.Оборудование
			или ТД.ВидЦенности = Перечисления.ВидыЦенностей.ОС
			Тогда
			ТД.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств;
		Иначе
			ТДП = ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные;
			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
				СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, ТДП.Номенклатура,);
			Иначе
				СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, ТДП.Номенклатура, ТДП.Склад);
			КонецЕсли;
			Если ТД.ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежи
				или ТД.ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС
				Тогда
				ТД.СчетУчетаНДС = СчетаУчета.СчетНДСТаможни;
			Иначе
				ТД.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

Процедура ДанныеПоСФОтгрузкаСчетУчетаНДСНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	НачалоВыбораСчета(Элемент, мСписокСчетовНДС,, Элемент.Значение);
	
КонецПроцедуры


Процедура ДанныеПоСФОтгрузкаСчетУчетаНДСОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОконченВводТекстаСчета(Элемент, Текст, Значение, СтандартнаяОбработка, мСписокСчетовНДС);
	
КонецПроцедуры

Процедура ДанныеПоСФОтгрузкаСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка =  БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ДанныеПоСФОтгрузкаСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДанныеПоСФОтгрузка.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ТекущиеДанные.Стоимость, Истина, Истина, 
												УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПоСФОтгрузкаСтоимостьПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДанныеПоСФОтгрузка.ТекущиеДанные;
	ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ТекущиеДанные.Стоимость, Истина, Истина, 
											УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

Процедура МПЗСобственныеОборотыОтгрузкаПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если ЭлементыФормы.МПЗОтгруженные.ТекущаяСтрока = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗСобственныеОборотыОтгрузкаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Перенумеровать(Элемент);
	
КонецПроцедуры

Процедура МПЗСобственныеОборотыОтгрузкаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если мПеренумеровать = 0 Тогда
		мПеренумеровать = 3;
	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.МПЗСобственныеОборотыОтгрузка.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

Процедура МПЗСобственныеОборотыОтгрузкаПослеУдаления(Элемент)
	
	мПеренумеровать = 2;
	
КонецПроцедуры

Процедура МПЗСобственныеОборотыОтгрузкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		РассчитатьНомерТЧ(Элемент);
		Элемент.ТекущиеДанные.Ключ = ЭлементыФормы.МПЗОтгруженные.ТекущиеДанные.Ключ;
	КонецЕсли;
	
	ВидыМПЗДляВыбора = Новый СписокЗначений;
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Товары);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Продукция);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Полуфабрикаты);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Материалы);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.ВспомогательныеМатериалы);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.КапитальныеВложения);
	
	ЭлементыФормы.МПЗСобственныеОборотыОтгрузка.Колонки.ВидМПЗ.ЭлементУправления.СписокВыбора = ВидыМПЗДляВыбора;
	
КонецПроцедуры

Процедура ВыбратьТекущуюПанельСплитованнойТаблицы(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		Если Предприниматель И мСложныйУчетНДС Тогда
			ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДСОтгрузка.ТекущаяСтраница = ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДСОтгрузка.Страницы.Страница2;
		ИначеЕсли Предприниматель Тогда
			ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДСОтгрузка.ТекущаяСтраница = ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДСОтгрузка.Страницы.Страница1;
		ИначеЕсли мСложныйУчетНДС Тогда
			ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДСОтгрузка.ТекущаяСтраница = ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДСОтгрузка.Страницы.Страница2;
		КонецЕсли;
	Иначе
		Если Предприниматель Тогда
			Если ТекущаяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная Тогда
				ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДСОтгрузка.ТекущаяСтраница = ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДСОтгрузка.Страницы.Страница1;
			ИначеЕсли мСложныйУчетНДС Тогда
				ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДСОтгрузка.ТекущаяСтраница = ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДСОтгрузка.Страницы.Страница2;
			Иначе
				ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДСОтгрузка.ТекущаяСтраница = ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДСОтгрузка.Страницы.Страница1;
			КонецЕсли;
		ИначеЕсли мСложныйУчетНДС Тогда
			ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДСОтгрузка.ТекущаяСтраница = ЭлементыФормы.ПанельНеоплаченныеМатериалыИПартииНДСОтгрузка.Страницы.Страница2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗОтгруженныеПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	УправлениеДоступностьюКолонок(Элемент, Истина)
	
КонецПроцедуры

Процедура МПЗСобственныеОборотыОтгрузкаПартияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗСобственныеОборотыОтгрузка.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация,,, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["Обороты"].Реквизиты.Партия.Тип);
	
КонецПроцедуры

Процедура МПЗСобственныеОборотыОтгрузкаВидМПЗНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗСобственныеОборотыОтгрузкаВидМПЗОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДанныеПоСФОтгрузкаСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ДанныеПоСФОтгрузка.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация,,, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["ДанныеПоСФ"].Реквизиты.СчетФактура.Тип);
	
КонецПроцедуры

Процедура ДанныеПоСФОтгрузкаВидЦенностиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДанныеПоСФОтгрузкаВидЦенностиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел "Расходы будущих периодов"

Процедура РасходыБудущихПериодовСчетУчетаПриИзменении(Элемент)
	
	Если СчетМожноИспользоватьВПроводках(Элемент.Значение) Тогда
		ТекущиеДанные = ЭлементыФормы.РасходыБудущихПериодов.ТекущиеДанные;
		ПриВыбореСчетаРБП(ТекущиеДанные, ЭлементыФормы.РасходыБудущихПериодов, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриВыбореСчетаРБП(ТекущиеДанные, ТекущаяТаблица, Редактирование = Ложь, СчетНУОпределен = Ложь, СуммыПересчитаны = Ложь)
	
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущаяТаблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекущиеДанные.СчетУчета,
	ТекущиеДанные.Субконто1, ТекущаяТаблица.Колонки.Субконто1,
	ТекущиеДанные.Субконто2, ТекущаяТаблица.Колонки.Субконто2,
	ТекущиеДанные.Субконто3, ТекущаяТаблица.Колонки.Субконто3);
	
	ТекущаяТаблица.Колонки.Сумма.ТолькоПросмотр = НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетУчета);
	ТекущаяТаблица.Колонки.СуммаНУ.ТолькоПросмотр = НЕ ТекущиеДанные.СчетУчета.НалоговыйУчет;
	ТекущаяТаблица.Колонки.СуммаПР.ТолькоПросмотр = НЕ ТекущиеДанные.СчетУчета.НалоговыйУчет;
	
	Если УСН_ДР Тогда
		ВалютаРуб = (НЕ ЗначениеЗаполнено(ТекущиеДанные.Валюта)) ИЛИ (мВалютаРегламентированногоУчета = ТекущиеДанные.Валюта И ЗначениеЗаполнено(ТекущиеДанные.Валюта));
		ТекущаяТаблица.Колонки.ВалютнаяСумма.ТолькоПросмотр	= ВалютаРуб;
		ТекущаяТаблица.Колонки.ВалютныйНДС.ТолькоПросмотр	= ВалютаРуб;
		Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников Тогда
			ТекущаяТаблица.Колонки.Контрагент.ТолькоПросмотр = Истина;
		ИначеЕсли ТекущиеДанные.СчетУчета = ПланыСЧетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов Тогда
			ТекущаяТаблица.Колонки.Контрагент.ТолькоПросмотр = Истина;
		Иначе
			ТекущаяТаблица.Колонки.Контрагент.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//обнулим незадействованные реквизиты
	Если Редактирование Тогда

		Если НЕ ТекущиеДанные.СчетУчета.НалоговыйУчет Тогда
			ТекущиеДанные.СуммаНУ = 0;
			ТекущиеДанные.СуммаПР = 0;
			ТекущиеДанные.СуммаВР = 0;
		Иначе
			Если НЕ СуммыПересчитаны Тогда
				ПересчитатьСуммыРазниц();
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов Тогда
			ТекущиеДанные.Контрагент = "";
			ТекущиеДанные.ДоговорКонтрагента = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасходыБудущихПериодовСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораСчета(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РасходыБудущихПериодовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.РасходыБудущихПериодов.ТекущиеДанные;
	ПриВыбореСчетаРБП(ТекущиеДанные, ЭлементыФормы.РасходыБудущихПериодов);
	
КонецПроцедуры

Процедура РасходыБудущихПериодовСчетУчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоВыбораСчета(Элемент, мСписокСчетов,, Элемент.Значение);
	
КонецПроцедуры

Процедура РасходыБудущихПериодовСчетУчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОконченВводТекстаСчета(Элемент, Текст, Значение, СтандартнаяОбработка, мСписокСчетов);
	
КонецПроцедуры

Процедура РасходыБудущихПериодовСчетУчетаОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ОСН Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасходыБудущихПериодовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетУчета) И НЕ ОтменаРедактирования Тогда
		Предупреждение("Укажите счет бухгалтерского учета!");
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

Процедура РасходыБудущихПериодовВалютаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура РасходыБудущихПериодовВалютаПриИзменении(Элемент)
	
	ПересчитатьСуммыДляУСН(ЭлементыФормы.РасходыБудущихПериодов.ТекущиеДанные, ЭлементыФормы.РасходыБудущихПериодов)
	
КонецПроцедуры

Процедура РасходыБудущихПериодовКонтрагентПриИзменении(Элемент)
	
	ОпределитьСписокДоступныхВидовДоговоров();
	СтрокаТабличнойЧасти = ЭлементыФормы.РасходыБудущихПериодов.ТекущиеДанные;
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(СтрокаТабличнойЧасти.ДоговорКонтрагента,СтрокаТабличнойЧасти.Контрагент,Организация,мСписокВидовДоговоров);
	УстановитьВалютуРасчетов(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Процедура РасходыБудущихПериодовДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РасходыБудущихПериодов.ТекущиеДанные;
	УстановитьВалютуРасчетов(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Процедура РасходыБудущихПериодовДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОпределитьСписокДоступныхВидовДоговоров();
	СтрокаТабличнойЧасти = ЭлементыФормы.РасходыБудущихПериодов.ТекущиеДанные;
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента,
																мСписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры

Процедура РасходыБудущихПериодовСубконто1ПриИзменении(Элемент)
	
	Если УСН_ДР Тогда
		ТекущиеДанные = ЭлементыФормы.РасходыБудущихПериодов.ТекущиеДанные;
		Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников Тогда
			ТекущиеДанные.Контрагент = ТекущиеДанные.Субконто1;
			УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ТекущиеДанные.ДоговорКонтрагента,ТекущиеДанные.Контрагент,Организация,мСписокВидовДоговоров);
			УстановитьВалютуРасчетов(ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасходыБудущихПериодовКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.РасходыБудущихПериодов.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущаяСтрока.Контрагент Тогда
		ТекущаяСтрока.РасчетныйДокумент = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура РасходыБудущихПериодовДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.РасходыБудущихПериодов.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущаяСтрока.ДоговорКонтрагента Тогда
		ТекущаяСтрока.РасчетныйДокумент = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура РасходыБудущихПериодовСтатусыОплатыРасходовУСНОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура РасходыБудущихПериодовСтатусыОплатыРасходовУСННачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура РасходыБудущихПериодовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если УСН_ДР Тогда
		СтатусыОплатыРасходовУСН = ЭтаФорма.ТекущийЭлемент.Колонки.СтатусыОплатыРасходовУСН.ЭлементУправления;
		СтатусыОплатыРасходовУСН.СписокВыбора.Очистить();
		СтатусыОплатыРасходовУСН.СписокВыбора.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
		СтатусыОплатыРасходовУСН.СписокВыбора.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
		
		Если НоваяСтрока Тогда
			Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Валюта) Тогда
				Элемент.ТекущиеДанные.Валюта = мВалютаРегламентированногоУчета;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПриВыбореСчетаРБП(Элемент.ТекущиеДанные, Элемент);
	
КонецПроцедуры

Процедура РасходыБудущихПериодовРасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.РасходыБудущихПериодов.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация, ТекущаяСтрока.Контрагент, ТекущаяСтрока.ДоговорКонтрагента, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["РасходыБудущихПериодов"].Реквизиты.РасчетныйДокумент.Тип);
	
КонецПроцедуры

Процедура РасходыБудущихПериодовНДСПриИзменении(Элемент)
	
	ТекущаяТаблица = ЭлементыФормы.РасходыБудущихПериодов;
	ТекущиеДанные = ТекущаяТаблица.ТекущиеДанные;
	ПересчитатьСуммыДляУСН(ТекущиеДанные, ТекущаяТаблица);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел "НДС"

Процедура УстановитьВидимостьКолонокНДС()
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		Видимость0		= Ложь;
		ВидимостьВНА	= Ложь;
		ВидимостьАванс	= Истина;
		ВидимостьОбщ	= Истина;
	Иначе
		Если ЭлементыФормы.ПанельДанныеПоСФ.ТекущаяСтраница.Имя = "ОбщиеДанныеОСчетеФактуре" Тогда
			Видимость0		= Ложь;
			ВидимостьВНА	= Ложь;
			ВидимостьАванс	= Ложь;
			ВидимостьОбщ	= Истина;
		ИначеЕсли ЭлементыФормы.ПанельДанныеПоСФ.ТекущаяСтраница.Имя = "НДСПоСтавке0" Тогда
			Видимость0		= Истина;
			ВидимостьВНА	= Ложь;
			ВидимостьАванс	= Ложь;
			ВидимостьОбщ	= Ложь;
		ИначеЕсли ЭлементыФормы.ПанельДанныеПоСФ.ТекущаяСтраница.Имя = "ВНА" Тогда
			Видимость0		= Ложь;
			ВидимостьВНА	= Истина;
			ВидимостьАванс	= Ложь;
			ВидимостьОбщ	= Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		НДСНачисленный = Истина;
	Иначе
		НДСНачисленный = Ложь;
	КонецЕсли;
	
	Авансы = РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным;
	ЭлементыФормы.ПанельДанныеПоСФ.Страницы.ВНА.Видимость = НЕ Авансы И НЕ мУпрощенныйУчетНДС И НЕ НДСНачисленный;
	ЭлементыФормы.ПанельДанныеПоСФ.Страницы.НДСПоСтавке0.Видимость = мСложныйУчетНДС;
	
	ТекущийСписокКолонок = ЭлементыФормы.ДанныеПоСФНДС.Колонки;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		ТекущийСписокКолонок.СуммаБезНДСОплата.ТекстШапки	= "Сумма без НДС зачтено";
		ТекущийСписокКолонок.НДСОплата.ТекстШапки			= "НДС зачтено";
	Иначе
		ТекущийСписокКолонок.СуммаБезНДСОплата.ТекстШапки	= "Сумма без НДС оплата";
		ТекущийСписокКолонок.НДСОплата.ТекстШапки			= "НДС оплата";
	КонецЕсли;
	
	Если НДСНачисленный Тогда
		ТекущийСписокКолонок.СтавкаНДС.Положение = ПоложениеКолонки.НоваяКолонка;
	Иначе
		ТекущийСписокКолонок.СтавкаНДС.Положение = ПоложениеКолонки.НаСледующейСтроке;
	КонецЕсли;
	
	//ТекущийСписокКолонок.РасчетныйДокумент.Видимость						= ВидимостьОбщ;
	ТекущийСписокКолонок.СчетУчета.Видимость								= НЕ НДСНачисленный;
	ТекущийСписокКолонок.СуммаБезНДСОплата.Видимость						= ВидимостьОбщ;
	ТекущийСписокКолонок.НДСОплата.Видимость								= ВидимостьОбщ;
	ТекущийСписокКолонок.ДокументОплаты.Видимость							= ВидимостьОбщ И Не мУпрощенныйУчетНДС И НЕ ВидимостьАванс;
	ТекущийСписокКолонок.СуммаБезНДСВведеноВЭксплуатацию.Видимость			= ВидимостьВНА;
	ТекущийСписокКолонок.СуммаБезНДСПредъявлено.Видимость					= ВидимостьОбщ И НЕ ВидимостьАванс И НЕ НДСНачисленный;
	ТекущийСписокКолонок.НДСПредъявлено.Видимость							= ВидимостьОбщ И НЕ ВидимостьАванс И НЕ НДСНачисленный;
	ТекущийСписокКолонок.НДСВведеноВЭксплуатацию.Видимость					= ВидимостьВНА;
	ТекущийСписокКолонок.СуммаБезНДССтроительство.Видимость					= ВидимостьВНА;
	ТекущийСписокКолонок.НДССтроительство.Видимость							= ВидимостьВНА;
	ТекущийСписокКолонок.ОбъектСтроительства.Видимость						= ВидимостьВНА;
	ТекущийСписокКолонок.НеВлияетНаВычет.Видимость							= ВидимостьВНА;
	ТекущийСписокКолонок.СуммаБезНДСНеПодтверждено0.Видимость				= Видимость0;
	ТекущийСписокКолонок.НДСНеПодтверждено0.Видимость						= Видимость0;
	ТекущийСписокКолонок.СуммаБезНДСПодтверждено0.Видимость					= Видимость0;
	ТекущийСписокКолонок.НДСПодтверждено0.Видимость							= Видимость0;
	ТекущийСписокКолонок.СуммаБезНДСПредъявлено0.Видимость					= Видимость0 И НЕ НДСНачисленный;
	ТекущийСписокКолонок.НДСПредъявлено0.Видимость							= Видимость0 И НЕ НДСНачисленный;
	ТекущийСписокКолонок.СуммаБезНДСПредъявленоНеПодтверждено0.Видимость	= Видимость0 И НЕ НДСНачисленный;
	ТекущийСписокКолонок.НДСПредъявленоНеПодтверждено0.Видимость			= Видимость0 И НЕ НДСНачисленный;
	ТекущийСписокКолонок.СуммаБезНДССтавка0.Видимость						= Видимость0 И НЕ НДСНачисленный;
	ТекущийСписокКолонок.НДССтавка0.Видимость								= Видимость0 И НЕ НДСНачисленный;
	ТекущийСписокКолонок.ДокументОтгрузки.Видимость							= Видимость0 И НЕ НДСНачисленный;
	ТекущийСписокКолонок.ВалютаАванса.Видимость								= ВидимостьАванс И НЕ мУпрощенныйУчетНДС;
	ТекущийСписокКолонок.ВалютнаяСуммаСНДС.Видимость						= ВидимостьАванс И НЕ мУпрощенныйУчетНДС;
	ТекущийСписокКолонок.ПредъявленСФ.Видимость								= НЕ ВидимостьАванс И НЕ НДСНачисленный;
	ТекущийСписокКолонок.СтавкаНДСНеПодтверждена0.Видимость					= Видимость0 И НДСНачисленный;
	ТекущийСписокКолонок.ВидЦенности.ТолькоПросмотр							= Авансы;
	//управление изменением видимости
	ТекущийСписокКолонок.СчетУчета.ИзменятьВидимость								= НЕ НДСНачисленный;
	ТекущийСписокКолонок.СуммаБезНДСОплата.ИзменятьВидимость						= ВидимостьОбщ;
	ТекущийСписокКолонок.НДСОплата.ИзменятьВидимость								= ВидимостьОбщ;
	ТекущийСписокКолонок.ДокументОплаты.ИзменятьВидимость							= ВидимостьОбщ И Не мУпрощенныйУчетНДС И НЕ ВидимостьАванс;
	ТекущийСписокКолонок.СуммаБезНДСВведеноВЭксплуатацию.ИзменятьВидимость			= ВидимостьВНА;
	ТекущийСписокКолонок.СуммаБезНДСПредъявлено.ИзменятьВидимость					= ВидимостьОбщ И НЕ ВидимостьАванс И НЕ НДСНачисленный;
	ТекущийСписокКолонок.НДСПредъявлено.ИзменятьВидимость							= ВидимостьОбщ И НЕ ВидимостьАванс И НЕ НДСНачисленный;
	ТекущийСписокКолонок.НДСВведеноВЭксплуатацию.ИзменятьВидимость					= ВидимостьВНА;
	ТекущийСписокКолонок.СуммаБезНДССтроительство.ИзменятьВидимость					= ВидимостьВНА;
	ТекущийСписокКолонок.НДССтроительство.ИзменятьВидимость							= ВидимостьВНА;
	ТекущийСписокКолонок.ОбъектСтроительства.ИзменятьВидимость						= ВидимостьВНА;
	ТекущийСписокКолонок.НеВлияетНаВычет.ИзменятьВидимость							= ВидимостьВНА;
	ТекущийСписокКолонок.СуммаБезНДСНеПодтверждено0.ИзменятьВидимость				= Видимость0;
	ТекущийСписокКолонок.НДСНеПодтверждено0.ИзменятьВидимость						= Видимость0;
	ТекущийСписокКолонок.СуммаБезНДСПодтверждено0.ИзменятьВидимость					= Видимость0;
	ТекущийСписокКолонок.НДСПодтверждено0.ИзменятьВидимость							= Видимость0;
	ТекущийСписокКолонок.СуммаБезНДСПредъявлено0.ИзменятьВидимость					= Видимость0 И НЕ НДСНачисленный;
	ТекущийСписокКолонок.НДСПредъявлено0.ИзменятьВидимость							= Видимость0 И НЕ НДСНачисленный;
	ТекущийСписокКолонок.СуммаБезНДСПредъявленоНеПодтверждено0.ИзменятьВидимость	= Видимость0 И НЕ НДСНачисленный;
	ТекущийСписокКолонок.НДСПредъявленоНеПодтверждено0.ИзменятьВидимость			= Видимость0 И НЕ НДСНачисленный;
	ТекущийСписокКолонок.СуммаБезНДССтавка0.ИзменятьВидимость						= Видимость0 И НЕ НДСНачисленный;
	ТекущийСписокКолонок.НДССтавка0.ИзменятьВидимость								= Видимость0 И НЕ НДСНачисленный;
	ТекущийСписокКолонок.ДокументОтгрузки.ИзменятьВидимость							= Видимость0 И НЕ НДСНачисленный;
	ТекущийСписокКолонок.ВалютаАванса.ИзменятьВидимость								= ВидимостьАванс И НЕ мУпрощенныйУчетНДС;
	ТекущийСписокКолонок.ВалютнаяСуммаСНДС.ИзменятьВидимость						= ВидимостьАванс И НЕ мУпрощенныйУчетНДС;
	ТекущийСписокКолонок.ПредъявленСФ.ИзменятьВидимость								= НЕ ВидимостьАванс И НЕ НДСНачисленный;
	ТекущийСписокКолонок.СтавкаНДСНеПодтверждена0.ИзменятьВидимость					= Видимость0 и НДСНачисленный;
	
	
КонецПроцедуры

Процедура ПанельДанныеПоСФПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьВидимостьКолонокНДС();
	
КонецПроцедуры

Процедура ДанныеПоСФНДССчетУчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		УправлениеДоступностьюКолонок(ЭлементыФормы.ДанныеПоСФНДС, Ложь)
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СчетМожноИспользоватьВПроводках(Элемент.Значение) Тогда
		ТекущиеДанные = ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные;
		ПриВыбореСчетаНДС(ТекущиеДанные, ЭлементыФормы.ДанныеПоСФНДС, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриВыбореСчетаНДС(ТекущиеДанные, ТекущаяТаблица, Редактирование = Ложь)
	
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущаяТаблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОпределениеСпискаДоступныхВидовЦенностей(ТекущаяТаблица, ТекущиеДанные.СчетУчета);
	ОпределениеСпискаДоступныхСтавокНДС(ТекущаяТаблица);
	
	Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам Тогда
		ТекущаяТаблица.Колонки.ВалютнаяСуммаСНДС.ТолькоПросмотр = (ТекущиеДанные.ВалютаАванса=мВалютаРегламентированногоУчета);
		ТекущаяТаблица.Колонки.ВалютаАванса.ТолькоПросмотр = Истина;
		Если Редактирование Тогда
			ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ВалютаАванса) Тогда
				ТекущиеДанные.ВалютаАванса = мВалютаРегламентированногоУчета;
			КонецЕсли;
			Если ТекущиеДанные.ВалютаАванса=мВалютаРегламентированногоУчета Тогда
				ТекущиеДанные.ВалютнаяСуммаСНДС = ТекущиеДанные.СуммаБезНДС + ТекущиеДанные.НДС;
			КонецЕсли;
		КонецЕсли;
		ТекущаяТаблица.Колонки.ВидЦенности.ТолькоПросмотр = Истина;
		
	ИначеЕсли ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным Тогда
		ТекущаяТаблица.Колонки.ВалютнаяСуммаСНДС.ТолькоПросмотр = Истина;
		ТекущаяТаблица.Колонки.ВалютаАванса.ТолькоПросмотр = Истина;
		Если Редактирование Тогда
			ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные;
			ТекущиеДанные.ВалютаАванса = "";
			ТекущиеДанные.ВалютнаяСуммаСНДС = 0;
		КонецЕсли;
		ТекущаяТаблица.Колонки.ВидЦенности.ТолькоПросмотр = Истина;
	Иначе
		ТекущаяТаблица.Колонки.ВидЦенности.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств Тогда
		Если Редактирование Тогда
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ВидЦенности) Тогда
				ТекущиеДанные.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОпределениеСпискаДоступныхВидовЦенностей(ТекущаяТаблица, СчетУчета)
	
	Элемент = ТекущаяТаблица.Колонки.ВидЦенности.ЭлементУправления;
	Элемент.СписокВыбора.Очистить();
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Товары);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Материалы);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.НМА);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ОС);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Оборудование);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
		
	Иначе
			Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Товары);
			Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Материалы);
			Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.НМА);
			Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ОС);
			Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Оборудование);
			Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства);
			Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
			Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
			Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
			Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.СМРПодрядные);
			Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.КомандировочныеРасходы);
			Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПредставительскиеРасходы);
			Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
			Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
			Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределениеСпискаДоступныхСтавокНДС(ТекущаяТаблица)
	
	Элемент = ТекущаяТаблица.Колонки.СтавкаНДС.ЭлементУправления;
	Элемент.СписокВыбора.Очистить();
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		Элемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС10_110);
		Элемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	Иначе
		Элемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС18);
		Элемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС18_118);
		Элемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС10);
		Элемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС10_110);
		Элемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС0);
		Элемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.БезНДС);
		Элемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС20);
		Элемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПоСФНДССчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораСчета(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ДанныеПоСФНДСПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		УправлениеДоступностьюКолонок(ЭлементыФормы.ДанныеПоСФНДС, Ложь);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СчетУчета) Тогда
		УправлениеДоступностьюКолонок(ЭлементыФормы.ДанныеПоСФНДС, Ложь)
	Иначе 
		Возврат;
	КонецЕсли;
	
	ПриВыбореСчетаНДС(ТекущиеДанные, ЭлементыФормы.ДанныеПоСФНДС);
	
КонецПроцедуры

Процедура ДанныеПоСФНДССчетУчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоВыбораСчета(Элемент, мСписокСчетов,, Элемент.Значение);
	
КонецПроцедуры

Процедура ДанныеПоСФНДССчетУчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОконченВводТекстаСчета(Элемент, Текст, Значение, СтандартнаяОбработка, мСписокСчетов);
	
КонецПроцедуры

Процедура ДанныеПоСФНДССчетУчетаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДанныеПоСФНДСПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетУчета) И НЕ ОтменаРедактирования Тогда
			Предупреждение("Укажите счет бухгалтерского учета!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПоСФНДСВидЦенностиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДанныеПоСФНДСРасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные.ТипЗначения;
	Иначе
		ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные.ТипЗначения;
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация, ТекущаяСтрока.Контрагент, ТекущаяСтрока.ДоговорКонтрагента, КонецДня(Дата), '00010101');
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета", ?((РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный) И НЕ УСН, 1, 0));
	СтруктураПараметров.Вставить("КонецПериода", КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, ОграничениеТипа);
	
КонецПроцедуры

Процедура ДанныеПоСФНДСДокументОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		ОграничениеТипа = Метаданные.РегистрыНакопления.НДСЗаписиКнигиПродаж.Измерения.ДокументОплаты.Тип;
	Иначе
		ОграничениеТипа = Метаданные.РегистрыНакопления.НДСЗаписиКнигиПокупок.Измерения.ДокументОплаты.Тип;
	КонецЕсли;

	ТекущаяСтрока = ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация, ТекущаяСтрока.Контрагент, ТекущаяСтрока.ДоговорКонтрагента, КонецДня(Дата), '00010101');
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета", ?((РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный) И НЕ УСН, 1, 0));
	СтруктураПараметров.Вставить("КонецПериода", КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, ОграничениеТипа);
	
	
КонецПроцедуры

Процедура ДанныеПоСФНДСДокументОтгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация, , , КонецДня(Дата), '00010101');
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета", ?((РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный) И НЕ УСН, 1, 0));
	СтруктураПараметров.Вставить("КонецПериода", КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Элемент.ТипЗначения);
	
КонецПроцедуры

Процедура ДанныеПоСФНДСДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОпределитьСписокДоступныхВидовДоговоров();
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные.Контрагент, ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные.ДоговорКонтрагента,
	                                        мСписокВидовДоговоров, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ДанныеПоСФНДСКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущаяСтрока.Контрагент Тогда
		ТекущаяСтрока.СчетФактура = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПоСФНДСДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущаяСтрока.ДоговорКонтрагента Тогда
		ТекущаяСтрока.СчетФактура = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПоСФНДСКонтрагентПриИзменении(Элемент)
	
	ОпределитьСписокДоступныхВидовДоговоров();
	СтрокаТабличнойЧасти = ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные;
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(СтрокаТабличнойЧасти.ДоговорКонтрагента,СтрокаТабличнойЧасти.Контрагент,Организация,мСписокВидовДоговоров);
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
		ДанныеПоСФНДСДоговорКонтрагентаПриИзменении("");
	КонецЕсли;
	ДанныеПоСФНДСДоговорКонтрагентаПриИзменении("");
	
КонецПроцедуры

Процедура ДанныеПоСФНДСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		СтараяСуммаБезНДС = ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные.СуммаБезНДС;
		СтараяСуммаНДС = ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные.НДС;
	КонецЕсли;
	
КонецПроцедуры

//Расчет Суммы НДС

Процедура ДанныеПоСФНДССуммаБезНДСПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
		//Определение валютной суммы
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным Тогда
		ТекущиеДанные = ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные;
		Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам Тогда
			Если ТекущиеДанные.ВалютаАванса = мВалютаРегламентированногоУчета Тогда
				ТекущиеДанные.ВалютнаяСуммаСНДС = ТекущиеДанные.СуммаБезНДС + ТекущиеДанные.НДС;
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ВалютнаяСуммаСНДС) или (СтараяСуммаБезНДС+СтараяСуммаНДС)=0) Тогда
				// Расчет по курсу на дату документа
				ДатаОпределенияКурса = Дата;
				КурсНаДатуДокумента = Ложь;
				Если ЗначениеЗаполнено(ТекущиеДанные.СчетФактура) Тогда
					ДатаОпределенияКурса = ТекущиеДанные.СчетФактура.Дата;
					КурсНаДатуДокумента = Истина;
				ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ДатаСФ) Тогда
					ДатаОпределенияКурса = ТекущиеДанные.ДатаСФ;
					КурсНаДатуДокумента = Истина;
				КонецЕсли; 
				
				СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекущиеДанные.ВалютаАванса, ДатаОпределенияКурса);
				
				Если КурсНаДатуДокумента И Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс) Тогда
					СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекущиеДанные.ВалютаАванса, Дата);
				КонецЕсли; 
				
				ТекущиеДанные.ВалютнаяСуммаСНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаБезНДС + ТекущиеДанные.НДС,
				мВалютаРегламентированногоУчета, ТекущиеДанные.ВалютаАванса, 1, СтруктураКурсаВзаиморасчетов.Курс, 
				1, СтруктураКурсаВзаиморасчетов.Кратность); 
				
			Иначе
				// Пересчет исходя из указанной ранее суммы
				ТекущиеДанные.ВалютнаяСуммаСНДС = ТекущиеДанные.ВалютнаяСуммаСНДС*(ТекущиеДанные.СуммаБезНДС + ТекущиеДанные.НДС)/(СтараяСуммаБезНДС+СтараяСуммаНДС);
			КонецЕсли;
			СтараяСуммаБезНДС = ТекущиеДанные.СуммаБезНДС;
			СтараяСуммаНДС = 	ТекущиеДанные.НДС;
		Иначе
			ТекущиеДанные.ВалютаАванса = "";
			ТекущиеДанные.ВалютнаяСуммаСНДС = 0;
		КонецЕсли; 
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ДанныеПоСФНДСВалютаАвансаПриИзменении(Элемент)
	
	//Определение валютной суммы
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным Тогда
		ТекущиеДанные = ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные;
		Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам Тогда
			Если ТекущиеДанные.ВалютаАванса = мВалютаРегламентированногоУчета Тогда
				ТекущиеДанные.ВалютнаяСуммаСНДС = ТекущиеДанные.СуммаБезНДС + ТекущиеДанные.НДС;
			Иначе
				// Расчет по курсу на дату документа
				ДатаОпределенияКурса = Дата;
				КурсНаДатуДокумента = Ложь;
				Если ЗначениеЗаполнено(ТекущиеДанные.СчетФактура) Тогда
					ДатаОпределенияКурса = ТекущиеДанные.СчетФактура.Дата;
					КурсНаДатуДокумента = Истина;
				ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ДатаСФ) Тогда
					ДатаОпределенияКурса = ТекущиеДанные.ДатаСФ;
					КурсНаДатуДокумента = Истина;
				КонецЕсли; 
				
				СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекущиеДанные.ВалютаАванса, ДатаОпределенияКурса);
				
				Если КурсНаДатуДокумента И Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс) Тогда
					СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекущиеДанные.ВалютаАванса, Дата);
				КонецЕсли; 
				
				ТекущиеДанные.ВалютнаяСуммаСНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаБезНДС + ТекущиеДанные.НДС,
				мВалютаРегламентированногоУчета, ТекущиеДанные.ВалютаАванса, 1, СтруктураКурсаВзаиморасчетов.Курс, 
				1, СтруктураКурсаВзаиморасчетов.Кратность); 
				
			КонецЕсли;
			СтараяСуммаБезНДС = ТекущиеДанные.СуммаБезНДС;
			СтараяСуммаНДС = 	ТекущиеДанные.НДС;
		Иначе
			ТекущиеДанные.ВалютаАванса = "";
			ТекущиеДанные.ВалютнаяСуммаСНДС = 0;
		КонецЕсли;	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДанныеПоСФНДСРасчетныйДокументПриИзменении(Элемент)
	
	ДанныеПоСФНДСВалютаАвансаПриИзменении("");
	
КонецПроцедуры

Процедура ДанныеПоСФНДСНДСПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
	//Определение валютной суммы
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным Тогда
		ТекущиеДанные = ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные;
		Если ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам Тогда
			Если ТекущиеДанные.ВалютаАванса = мВалютаРегламентированногоУчета Тогда
				ТекущиеДанные.ВалютнаяСуммаСНДС = ТекущиеДанные.СуммаБезНДС + ТекущиеДанные.НДС;
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ВалютнаяСуммаСНДС) или (СтараяСуммаБезНДС+СтараяСуммаНДС)=0) Тогда
				// Расчет по курсу на дату документа
				ДатаОпределенияКурса = Дата;
				КурсНаДатуДокумента = Ложь;
				Если ЗначениеЗаполнено(ТекущиеДанные.СчетФактура) Тогда
					ДатаОпределенияКурса = ТекущиеДанные.СчетФактура.Дата;
					КурсНаДатуДокумента = Истина;
				ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ДатаСФ) Тогда
					ДатаОпределенияКурса = ТекущиеДанные.ДатаСФ;
					КурсНаДатуДокумента = Истина;
				КонецЕсли; 
				
				СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекущиеДанные.ВалютаАванса, ДатаОпределенияКурса);
				
				Если КурсНаДатуДокумента И Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс) Тогда
					СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекущиеДанные.ВалютаАванса, Дата);
				КонецЕсли; 
				
				ТекущиеДанные.ВалютнаяСуммаСНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаБезНДС + ТекущиеДанные.НДС,
				мВалютаРегламентированногоУчета, ТекущиеДанные.ВалютаАванса, 1, СтруктураКурсаВзаиморасчетов.Курс, 
				1, СтруктураКурсаВзаиморасчетов.Кратность); 
				
			Иначе
				// Пересчет исходя из указанной ранее суммы
				ТекущиеДанные.ВалютнаяСуммаСНДС = ТекущиеДанные.ВалютнаяСуммаСНДС*(ТекущиеДанные.СуммаБезНДС + ТекущиеДанные.НДС)/(СтараяСуммаБезНДС+СтараяСуммаНДС);
			КонецЕсли;
			СтараяСуммаНДС = 	ТекущиеДанные.НДС;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДанныеПоСФНДССуммаБезНДСОплатаПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДСНДСОплатаПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДССуммаБезНДСПредъявленоПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДСНДСПредъявленоПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДССуммаБезНДССтроительствоПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДСНДССтроительствоПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДССуммаБезНДСВведеноВЭксплуатациюПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДСНДСВведеноВЭксплуатациюПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДССуммаБезНДСВключеноВСтоимостьПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДСНДСВключеноВСтоимостьПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДССуммаБезНДССтавка0ПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДСНДССтавка0ПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДССуммаБезНДСПодтверждено0ПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДСНДСПодтверждено0ПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДССуммаБезНДСПредъявлено0ПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДСНДСПредъявлено0ПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДССуммаБезНДСНеПодтверждено0ПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДСНДСНеПодтверждено0ПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДССуммаБезНДСПредъявленоНеПодтверждено0ПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДСНДСПредъявленоНеПодтверждено0ПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДСВалютнаяСуммаСНДСПриИзменении(Элемент)
	
	ДанныеПоСФНДССумма_ПриИзменении(ЭлементыФормы.ДанныеПоСФНДС.ТекущаяКолонка.Имя);
	
КонецПроцедуры

Процедура ДанныеПоСФНДССумма_ПриИзменении(ИзменяемаяКолонка)
	
	ТекСтрокаСФ = ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные;
	
	Если НЕ Найти(ИзменяемаяКолонка,"СуммаБезНДС") = 0 Тогда
		КолонкаНДС = СтрЗаменить(ИзменяемаяКолонка, "СуммаБезНДС", "НДС");
		Если НЕ ЭлементыФормы.ДанныеПоСФНДС.Колонки.Найти(КолонкаНДС) = Неопределено Тогда
			
			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
				И КолонкаНДС = "НДСНеПодтверждено0" Тогда
				СтавкаНДС = УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные.СтавкаНДСНеПодтверждена0);
			Иначе
				СтавкаНДС = УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные.СтавкаНДС);
			КонецЕсли;
		
			СуммаНДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные[ИзменяемаяКолонка],
								Истина,
								Ложь,
								СтавкаНДС);
		
			ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные[КолонкаНДС] = СуммаНДС;
			
			Если ЧисловыеКолонки.Свойство(ИзменяемаяКолонка) Тогда
				ДанныеПоСФНДССумма_ПриИзменении(КолонкаНДС);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

Процедура ДанныеПоСФНДСДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено тогда
	 	Возврат;
	КонецЕсли;
	
	ДоговорКонтрагента = СтрокаТабличнойЧасти.ДоговорКонтрагента;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным Тогда 
		Если СтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам Тогда
			Если ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Или НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
				ВалютаАванса = мВалютаРегламентированногоУчета;
			Иначе
				ВалютаАванса = ДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(ВалютаАванса) Тогда
				ВалютаАванса = мВалютаРегламентированногоУчета;
			КонецЕсли;
			
			Если ВалютаАванса = мВалютаРегламентированногоУчета Тогда
				СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС = 0;
				СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС = СтрокаТабличнойЧасти.СуммаБезНДС+СтрокаТабличнойЧасти.НДС;
				
			ИначеЕсли не СтрокаТабличнойЧасти.ВалютаАванса = ВалютаАванса Тогда
				СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС = 0;
			КонецЕсли; 
			СтрокаТабличнойЧасти.ВалютаАванса = ВалютаАванса;
			
			Если СтрокаТабличнойЧасти.ВалютаАванса = мВалютаРегламентированногоУчета Тогда
				СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС = СтрокаТабличнойЧасти.СуммаБезНДС + СтрокаТабличнойЧасти.НДС;
			ИначеЕсли (НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС) или (СтараяСуммаБезНДС+СтараяСуммаНДС)=0) Тогда
				// Расчет по курсу на дату документа
				ДатаОпределенияКурса = Дата;
				КурсНаДатуДокумента = Ложь;
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
					ДатаОпределенияКурса = СтрокаТабличнойЧасти.СчетФактура.Дата;
					КурсНаДатуДокумента = Истина;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаСФ) Тогда
					ДатаОпределенияКурса = СтрокаТабличнойЧасти.ДатаСФ;
					КурсНаДатуДокумента = Истина;
				КонецЕсли; 
				
				СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаТабличнойЧасти.ВалютаАванса, ДатаОпределенияКурса);
				
				Если КурсНаДатуДокумента И Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс) Тогда
					СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаТабличнойЧасти.ВалютаАванса, Дата);
				КонецЕсли; 
				
				СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаБезНДС + СтрокаТабличнойЧасти.НДС,
				мВалютаРегламентированногоУчета, СтрокаТабличнойЧасти.ВалютаАванса, 1, СтруктураКурсаВзаиморасчетов.Курс, 
				1, СтруктураКурсаВзаиморасчетов.Кратность);
			Иначе
				// Пересчет исходя из указанной ранее суммы
				СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС = СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС*(СтрокаТабличнойЧасти.СуммаБезНДС + СтрокаТабличнойЧасти.НДС)/(СтараяСуммаБезНДС+СтараяСуммаНДС);
			КонецЕсли;
			СтараяСуммаБезНДС = СтрокаТабличнойЧасти.СуммаБезНДС;
			СтараяСуммаНДС = 	СтрокаТабличнойЧасти.НДС;
			
			ЭлементыФормы.ДанныеПоСФНДС.Колонки.ВалютнаяСуммаСНДС.ТолькоПросмотр = (СтрокаТабличнойЧасти.ВалютаАванса=мВалютаРегламентированногоУчета);
			//ЭлементыФормы.ДанныеПоСФНДС.Колонки.ВалютаАванса.ТолькоПросмотр = (СтрокаТабличнойЧасти.ВалютаАванса=мВалютаРегламентированногоУчета);
		Иначе
			СтрокаТабличнойЧасти.ВалютаАванса = Справочники.Валюты.ПустаяСсылка();
			СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС = 0;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.ВалютаАванса = Справочники.Валюты.ПустаяСсылка();
		//СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС = 0;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДанныеПоСФНДСВидЦенностиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДанныеПоСФНДСПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		УправлениеДоступностьюКолонок(Элемент, Истина)
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПоСФНДССтавкаНДСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ОпределениеСпискаДоступныхСтавокНДС(ЭлементыФормы.ДанныеПоСФНДС);
	
КонецПроцедуры

Процедура ДанныеПоСФНДССтавкаНДСПриИзменении(Элемент)
	
	ТекСтрокаСФ = ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные;
	
	Для каждого Колонка Из ЧисловыеКолонки Цикл
	    Если Найти(Колонка.Ключ,"СуммаБезНДС")>0 Тогда
			КолонкаНДС = СтрЗаменить(Колонка.Ключ,"СуммаБезНДС","НДС");
			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
				И КолонкаНДС = "НДСНеПодтверждено0" Тогда
				Продолжить;
			КонецЕсли;
			Если не ЭлементыФормы.ДанныеПоСФНДС.Колонки.Найти(КолонкаНДС)= Неопределено Тогда
				СуммаНДС   = УчетНДС.РассчитатьСуммуНДС(ТекСтрокаСФ[Колонка.Ключ],
								Истина,
								Ложь,
								УчетНДС.ПолучитьСтавкуНДС(ТекСтрокаСФ.СтавкаНДС));
			    ТекСтрокаСФ[КолонкаНДС] = СуммаНДС;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным Тогда
		Если ТекСтрокаСФ.СчетУчета = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам Тогда
			Если ТекСтрокаСФ.ВалютаАванса = мВалютаРегламентированногоУчета Тогда
				ТекСтрокаСФ.ВалютнаяСуммаСНДС = ТекСтрокаСФ.СуммаБезНДС + ТекСтрокаСФ.НДС;
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекСтрокаСФ.ВалютнаяСуммаСНДС) или (СтараяСуммаБезНДС+СтараяСуммаНДС)=0) Тогда
				// Расчет по курсу на дату документа
				ДатаОпределенияКурса = Дата;
				КурсНаДатуДокумента = Ложь;
				Если ЗначениеЗаполнено(ТекСтрокаСФ.СчетФактура) Тогда
					ДатаОпределенияКурса = ТекСтрокаСФ.СчетФактура.Дата;
					КурсНаДатуДокумента = Истина;
				ИначеЕсли ЗначениеЗаполнено(ТекСтрокаСФ.ДатаСФ) Тогда
					ДатаОпределенияКурса = ТекСтрокаСФ.ДатаСФ;
					КурсНаДатуДокумента = Истина;
				КонецЕсли; 
				
				СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекСтрокаСФ.ВалютаАванса, ДатаОпределенияКурса);
				
				Если КурсНаДатуДокумента И Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс) Тогда
					СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекСтрокаСФ.ВалютаАванса, Дата);
				КонецЕсли; 
				
				ТекСтрокаСФ.ВалютнаяСуммаСНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекСтрокаСФ.СуммаБезНДС + ТекСтрокаСФ.НДС,
				мВалютаРегламентированногоУчета, ТекСтрокаСФ.ВалютаАванса, 1, СтруктураКурсаВзаиморасчетов.Курс, 
				1, СтруктураКурсаВзаиморасчетов.Кратность); 
				
			Иначе
				// Пересчет исходя из указанной ранее суммы
				ТекСтрокаСФ.ВалютнаяСуммаСНДС = ТекСтрокаСФ.ВалютнаяСуммаСНДС*(ТекСтрокаСФ.СуммаБезНДС + ТекСтрокаСФ.НДС)/(СтараяСуммаБезНДС+СтараяСуммаНДС);
			КонецЕсли;
			СтараяСуммаБезНДС = ТекСтрокаСФ.СуммаБезНДС;
			СтараяСуммаНДС = 	ТекСтрокаСФ.НДС;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДанныеПоСФНДССтавкаНДСНеПодтверждена0ПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДанныеПоСФНДС.ТекущиеДанные;
	
	СуммаНеПодтверждено = ТекущиеДанные.СуммаБезНДСНеПодтверждено0 + ТекущиеДанные.НДСНеПодтверждено0;
	
	Если СуммаНеПодтверждено = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.НДСНеПодтверждено0 = УчетНДС.РассчитатьСуммуНДС(СуммаНеПодтверждено, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДСНеПодтверждена0));
	ТекущиеДанные.СуммаБезНДСНеПодтверждено0 = СуммаНеПодтверждено - ТекущиеДанные.НДСНеПодтверждено0;
	
КонецПроцедуры

Процедура ДанныеПоСФНДССтавкаНДСНеПодтверждена0НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Если мНДСПриНеподтвержденииСверху Тогда
		Элемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС10);
		Элемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС18);
		Элемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС20);
	Иначе
		Элемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС10_110);
		Элемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС18_118);
		Элемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
//Раздел "Прочие расходы УСН и ИП

//********************************************************************************************
//Прочие расходы ИП

Процедура ДопРасходыИППриИзмененииФлажка(Элемент, Колонка)
	
	ОбработкаАктивизацииВыбораСтрокиДопРасходыИП(Элемент.ТекущиеДанные);
	Если Колонка.Имя = "Оплачен" Тогда
		Если НЕ Элемент.ТекущиеДанные.Оплачен Тогда
			Элемент.ТекущиеДанные.РеквизитыДокументаОплаты = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДопРасходыИППриАктивизацииЯчейки(Элемент)
	
	ОбработкаАктивизацииВыбораСтрокиДопРасходыИП(Элемент.ТекущиеДанные);
	
КонецПроцедуры

Процедура ОбработкаАктивизацииВыбораСтрокиДопРасходыИП(ТекущиеДанные, Редактирование = Ложь)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяТаблица = ЭлементыФормы.ДопРасходыИП;
	
	ТекущаяТаблица.Колонки.РеквизитыДокументаОплаты.ТолькоПросмотр = НЕ ТекущиеДанные.Оплачен;
	
КонецПроцедуры

Процедура МПЗРеализованныеОборотыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		РассчитатьНомерТЧ(Элемент);
		Элемент.ТекущиеДанные.Ключ = ЭлементыФормы.МПЗРеализованныеИП.ТекущиеДанные.Ключ;
	КонецЕсли;
	
		
	ВидыМПЗДляВыбора = Новый СписокЗначений;
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Товары);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Продукция);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Полуфабрикаты);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Материалы);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.ВспомогательныеМатериалы);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.КапитальныеВложения);
	
	ЭлементыФормы.МПЗРеализованныеОбороты.Колонки.ВидМПЗ.ЭлементУправления.СписокВыбора = ВидыМПЗДляВыбора;
	
КонецПроцедуры

Процедура МПЗРеализованныеОборотыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если ЭлементыФормы.МПЗРеализованныеИП.ТекущаяСтрока = Неопределено Тогда
		Отказ = Истина;
	ИначеЕсли ЭлементыФормы.МПЗРеализованныеИП.ТекущиеДанные.СтатусыОплатыРасходовИП = Перечисления.СтатусыРасходовИП.НеОплаченоПокупателем 
		ИЛИ НЕ ЗначениеЗаполнено(ЭлементыФормы.МПЗРеализованныеИП.ТекущиеДанные.СтатусыОплатыРасходовИП) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗРеализованныеИППередУдалением(Элемент, Отказ)
	
	// Необходимо очистить дополнительные сведения
	КлючПоиска = Новый Структура("Ключ" , ЭлементыФормы.МПЗРеализованныеОбороты.ОтборСтрок.Ключ.Значение);
	
	НайденныеСтроки = Обороты.НайтиСтроки(КлючПоиска);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Обороты.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура МПЗРеализованныеИППриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.МПЗРеализованныеИП.ТекущиеДанные;
	
	ОтобразитьМатериалы();
	
КонецПроцедуры

Процедура ПрочиеРасходыИППриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьХарактераДеятельности(ЭлементыФормы.ПрочиеРасходыИП);
	
КонецПроцедуры

Процедура ПрочиеРасходыИППриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УстановитьДоступностьХарактераДеятельности(ЭлементыФормы.ПрочиеРасходыИП);
	
			
	ВидыМПЗДляВыбора = Новый СписокЗначений;
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.ПрочиеРасходы);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы);
	
	ЭлементыФормы.ПрочиеРасходыИП.Колонки.ВидМПЗ.ЭлементУправления.СписокВыбора = ВидыМПЗДляВыбора;
	
КонецПроцедуры

Процедура УстановитьДоступностьХарактераДеятельности(ВыбТабПоле)
	
	Если ВыбТабПоле.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на неотражение в налоговом учете
	УстановитьДоступность = Истина;
	СтатьяЗатрат = ВыбТабПоле.ТекущиеДанные.СтатьяЗатрат;
	
	Если ТипЗнч(СтатьяЗатрат) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		Если СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			УстановитьДоступность = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтатьяЗатрат) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		Если НЕ СтатьяЗатрат.ПринятиеКналоговомуУчету Тогда
			УстановитьДоступность = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	Если УстановитьДоступность Тогда
		ВыбТабПоле.Колонки.ХарактерДеятельности.ЭлементУправления.Доступность = Истина;
		ВыбТабПоле.Колонки.НоменклатурнаяГруппа.ЭлементУправления.Доступность = Истина;
	
	Иначе
		ВыбТабПоле.Колонки.ХарактерДеятельности.ЭлементУправления.Доступность = Ложь;
		ВыбТабПоле.Колонки.НоменклатурнаяГруппа.ЭлементУправления.Доступность = Ложь;
				
		ВыбТабПоле.ТекущиеДанные.ХарактерДеятельности = Неопределено;
		ВыбТабПоле.ТекущиеДанные.НоменклатурнаяГруппа = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

//********************************************************************************************
//Прочие расходы УСН

Процедура МПЗРеализованныеУСНПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		Элемент.ТекущиеДанные.СтатусыПартийУСН = Перечисления.СтатусыПартийУСН.Списанные;
		Элемент.ТекущиеДанные.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	КонецЕсли;
	
	Если НЕ Предприниматель Тогда
		СтатусыОплатыРасходовУСН = ЭтаФорма.ТекущийЭлемент.Колонки.СтатусыОплатыРасходовУСН.ЭлементУправления;
		СтатусыОплатыРасходовУСН.СписокВыбора.Очистить();
		СтатусыОплатыРасходовУСН.СписокВыбора.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		СтатусыОплатыРасходовУСН.СписокВыбора.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем);
		СтатусыОплатыРасходовУСН.СписокВыбора.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДопРасходыУСНДокументОприходованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ДопРасходыУСН.ТекущиеДанные.РасчетныйДокумент) Тогда
		ЭлементыФормы.ДопРасходыУСН.ТекущиеДанные.РасчетныйДокумент = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗРеализованныеУСНДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОпределитьСписокДоступныхВидовДоговоров();
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.МПЗРеализованныеУСН.ТекущиеДанные.Контрагент, ЭлементыФормы.МПЗРеализованныеУСН.ТекущиеДанные.ДоговорКонтрагента,
	мСписокВидовДоговоров, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПрочиеРасходыУСНПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущаяКолонка.Имя <> "ДоговорКонтрагента" Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элемент.ТекущиеДанные.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Элемент.Колонки.ДоговорКонтрагента.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочиеРасходыУСНПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Элемент.Колонки.ДоговорКонтрагента.ТолькоПросмотр = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элемент.ТекущиеДанные.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Элемент.Колонки.ДоговорКонтрагента.ТолькоПросмотр = Истина;
	Иначе
		Элемент.Колонки.ДоговорКонтрагента.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура УслугиУСНДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОпределитьСписокДоступныхВидовДоговоров();
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.УслугиУСН.ТекущиеДанные.Контрагент, ЭлементыФормы.УслугиУСН.ТекущиеДанные.ДоговорКонтрагента,
	мСписокВидовДоговоров, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ДопРасходыУСНДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОпределитьСписокДоступныхВидовДоговоров();
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.ДопРасходыУСН.ТекущиеДанные.Контрагент, ЭлементыФормы.ДопРасходыУСН.ТекущиеДанные.ДоговорКонтрагента,
	мСписокВидовДоговоров, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ДопРасходыУСНКонтрагентПриИзменении(Элемент)
	
	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОпределитьСписокДоступныхВидовДоговоров();
		СтрокаТабличнойЧасти = ЭлементыФормы.ДопРасходыУСН.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
			СтрокаТабличнойЧасти.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(СтрокаТабличнойЧасти.ДоговорКонтрагента,СтрокаТабличнойЧасти.Контрагент,Организация,мСписокВидовДоговоров);
		УстановитьВалютуРасчетов(СтрокаТабличнойЧасти);
		ЭлементыФормы.ДопРасходыУСН.Колонки.ДоговорКонтрагента.ТолькоПросмотр = Ложь;
	Иначе
		ЭлементыФормы.ДопРасходыУСН.ТекущиеДанные.ДоговорКонтрагента = "";
		ЭлементыФормы.ДопРасходыУСН.Колонки.ДоговорКонтрагента.ТолькоПросмотр = Истина;
		ЭлементыФормы.ДопРасходыУСН.ТекущиеДанные.Валюта = мВалютаРегламентированногоУчета;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДопРасходыУСНДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ДопРасходыУСН.ТекущиеДанные;
	УстановитьВалютуРасчетов(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Процедура ДопРасходыУСНКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ДопРасходыУСН.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущаяСтрока.Контрагент Тогда
		ТекущаяСтрока.РасчетныйДокумент = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ДопРасходыУСНДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ДопРасходыУСН.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущаяСтрока.ДоговорКонтрагента Тогда
		ТекущаяСтрока.РасчетныйДокумент = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура УслугиУСНКонтрагентПриИзменении(Элемент)
	
	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОпределитьСписокДоступныхВидовДоговоров();
		СтрокаТабличнойЧасти = ЭлементыФормы.УслугиУСН.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
			СтрокаТабличнойЧасти.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(СтрокаТабличнойЧасти.ДоговорКонтрагента,СтрокаТабличнойЧасти.Контрагент,Организация,мСписокВидовДоговоров);
		УстановитьВалютуРасчетов(СтрокаТабличнойЧасти);
		ЭлементыФормы.УслугиУСН.Колонки.ДоговорКонтрагента.ТолькоПросмотр = Ложь;
	Иначе
		ЭлементыФормы.УслугиУСН.ТекущиеДанные.ДоговорКонтрагента = "";
		ЭлементыФормы.УслугиУСН.Колонки.ДоговорКонтрагента.ТолькоПросмотр = Истина;
		ЭлементыФормы.УслугиУСН.ТекущиеДанные.Валюта = мВалютаРегламентированногоУчета;
	КонецЕсли;
	
КонецПроцедуры

Процедура УслугиУСНДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.УслугиУСН.ТекущиеДанные;
	УстановитьВалютуРасчетов(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Процедура УслугиУСНКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.УслугиУСН.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущаяСтрока.Контрагент Тогда
		ТекущаяСтрока.РасчетныйДокумент = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура УслугиУСНДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.УслугиУСН.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущаяСтрока.ДоговорКонтрагента Тогда
		ТекущаяСтрока.РасчетныйДокумент = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура УслугиУСНРасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.УслугиУСН.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация, ТекущаяСтрока.Контрагент, ТекущаяСтрока.ДоговорКонтрагента, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["УслугиУСН"].Реквизиты.РасчетныйДокумент.Тип);
	
КонецПроцедуры

Процедура МПЗРеализованныеУСНКонтрагентПриИзменении(Элемент)
	
	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОпределитьСписокДоступныхВидовДоговоров();
		СтрокаТабличнойЧасти = ЭлементыФормы.МПЗРеализованныеУСН.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
			СтрокаТабличнойЧасти.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(СтрокаТабличнойЧасти.ДоговорКонтрагента,СтрокаТабличнойЧасти.Контрагент,Организация,мСписокВидовДоговоров);
		УстановитьВалютуРасчетов(СтрокаТабличнойЧасти);
		ЭлементыФормы.МПЗРеализованныеУСН.Колонки.ДоговорКонтрагента.ТолькоПросмотр = Ложь;
	Иначе
		ЭлементыФормы.МПЗРеализованныеУСН.ТекущиеДанные.ДоговорКонтрагента = "";
		ЭлементыФормы.МПЗРеализованныеУСН.Колонки.ДоговорКонтрагента.ТолькоПросмотр = Истина;
		ЭлементыФормы.МПЗРеализованныеУСН.ТекущиеДанные.Валюта = мВалютаРегламентированногоУчета;
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗРеализованныеУСНДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.МПЗРеализованныеУСН.ТекущиеДанные;
	УстановитьВалютуРасчетов(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Процедура УстановитьВалютуРасчетов(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		ДоговорКонтрагента = СтрокаТабличнойЧасти.ДоговорПоставщика;
	Иначе
		ДоговорКонтрагента = СтрокаТабличнойЧасти.ДоговорКонтрагента;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Строка "+СтрокаТабличнойЧасти.НомерСтроки+": не заполнена валюта взаиморасчетов в договоре """+строка(ДоговорКонтрагента)+"""!");
	Иначе
		СтрокаТабличнойЧасти.Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) Тогда
		СтрокаТабличнойЧасти.Валюта = мВалютаРегламентированногоУчета;
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗРеализованныеУСНКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗРеализованныеУСН.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущаяСтрока.Контрагент Тогда
		ТекущаяСтрока.РасчетныйДокумент = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗРеализованныеУСНДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗРеализованныеУСН.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущаяСтрока.ДоговорКонтрагента Тогда
		ТекущаяСтрока.РасчетныйДокумент = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ДопРасходыУСНПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	КонецЕсли;
	
	СтатусыОплатыРасходовУСН = ЭтаФорма.ТекущийЭлемент.Колонки.СтатусыОплатыРасходовУСН.ЭлементУправления;
	СтатусыОплатыРасходовУСН.СписокВыбора.Очистить();
	СтатусыОплатыРасходовУСН.СписокВыбора.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
	СтатусыОплатыРасходовУСН.СписокВыбора.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
	СтатусыОплатыРасходовУСН.СписокВыбора.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	
КонецПроцедуры

Процедура МПЗРеализованныеУСНСтатусыОплатыРасходовУСНОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗРеализованныеУСНСтатусыОплатыРасходовУСННачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗРеализованныеУСНДокументОприходованияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗРеализованныеУСН.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация,,, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["МПЗРеализованныеУСН"].Реквизиты.РасчетныйДокумент.Тип);
	
КонецПроцедуры

Процедура МПЗРеализованныеУСНРасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗРеализованныеУСН.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация, ТекущаяСтрока.Контрагент, ТекущаяСтрока.ДоговорКонтрагента, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["МПЗРеализованныеУСН"].Реквизиты.РасчетныйДокумент.Тип);
	
КонецПроцедуры

Процедура ДопРасходыУСНРасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ДопРасходыУСН.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация, ТекущаяСтрока.Контрагент, ТекущаяСтрока.ДоговорКонтрагента, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["ДопРасходыУСН"].Реквизиты.РасчетныйДокумент.Тип);
	
КонецПроцедуры

Процедура ДопРасходыУСНСпособРаспределенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ДопРасходыУСН.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация, , , КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["ДопРасходыУСН"].Реквизиты.РасчетныйДокумент.Тип);
	
КонецПроцедуры

Процедура МПЗРеализованныеУСНВалютаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура УслугиУСНВалютаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДопРасходыУСНВалютаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗРеализованныеОборотыПартияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗРеализованныеОбороты.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, НачалоПериода, КонецПериода", Организация,,,, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["Обороты"].Реквизиты.Партия.Тип);
	
КонецПроцедуры

Процедура МПЗРеализованныеИППриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		// Инициализируем значение "Ключ" для установки связи данной таблицы с таблицей 
		// "МПЗПриобретенные".
		// Значение должно быть уникальным в пределах таблицы ДанныеПоПартиям
		НеУстановлено = Истина;
		Кандидат = МПЗРеализованныеИП.Количество();
		
		Пока НеУстановлено Цикл
			Если МПЗРеализованныеИП.Найти(Кандидат, "Ключ") = Неопределено Тогда
				// Уникальное значение ключа
				ЭлементыФормы.МПЗРеализованныеИП.ТекущиеДанные.Ключ = Кандидат;
				НеУстановлено = Ложь;
				
			Иначе
				// Такое значение ключа уже использовано
				Кандидат = Кандидат + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВидыМПЗДляВыбора = Новый СписокЗначений;
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Товары);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Продукция);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Полуфабрикаты);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.Материалы);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.ВспомогательныеМатериалы);
	ВидыМПЗДляВыбора.Добавить(Перечисления.ВидыМПЗ.КапитальныеВложения);
	
	ЭлементыФормы.МПЗРеализованныеИП.Колонки.ВидМПЗ.ЭлементУправления.СписокВыбора = ВидыМПЗДляВыбора;
	
КонецПроцедуры

Процедура МПЗРеализованныеОборотыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Перенумеровать(Элемент);
	
КонецПроцедуры

Процедура МПЗРеализованныеОборотыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если мПеренумеровать = 0 Тогда
		мПеренумеровать = 3;
	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.МПЗРеализованныеОбороты.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

Процедура МПЗРеализованныеОборотыПослеУдаления(Элемент)
	
	мПеренумеровать = 2;
	
КонецПроцедуры

Процедура МПЗРеализованныеИППартияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗРеализованныеИП.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, НачалоПериода, КонецПериода", Организация,,,, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["МПЗРеализованныеИП"].Реквизиты.Партия.Тип);
	
КонецПроцедуры

Процедура ДопРасходыИППартияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ДопРасходыИП.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, НачалоПериода, КонецПериода", Организация,,,, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["ДопРасходыИП"].Реквизиты.Партия.Тип);
	
КонецПроцедуры

Процедура ДопРасходыИППартияМПЗНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ДопРасходыИП.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, НачалоПериода, КонецПериода", Организация,,,, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["ДопРасходыИП"].Реквизиты.ПартияМПЗ.Тип);
	
КонецПроцедуры

Процедура ПрочиеРасходыИППартияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ПрочиеРасходыИП.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, НачалоПериода, КонецПериода", Организация,,,, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["ДопРасходыИП"].Реквизиты.Партия.Тип);
	
КонецПроцедуры

Процедура МПЗРеализованныеОборотыВидМПЗНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗРеализованныеОборотыВидМПЗОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗРеализованныеИПСтатусыОплатыРасходовИПОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МПЗРеализованныеИПСтатусыОплатыРасходовИППриИзменении(Элемент)
	
	Если Элемент.Значение = Перечисления.СтатусыРасходовИП.НеОплаченоПокупателем Тогда
			// Необходимо очистить дополнительные сведения
			КлючПоиска = Новый Структура("Ключ" , ЭлементыФормы.МПЗРеализованныеОбороты.ОтборСтрок.Ключ.Значение);
			НайденныеСтроки = Обороты.НайтиСтроки(КлючПоиска);
			Если НайденныеСтроки.Количество() <> 0 Тогда
				Если Вопрос("Данные по неоплаченным материалам будут удалены. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
					Для Каждого Строка Из НайденныеСтроки Цикл
						Обороты.Удалить(Строка);
					КонецЦикла;
				Иначе
					Элемент.Значение = мСтатусРасходаИП;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

КонецПроцедуры

Процедура МПЗРеализованныеИПСтатусыОплатыРасходовИПОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	мСтатусРасходаИП = Элемент.Значение;
	Если НЕ ЗначениеЗаполнено(мСтатусРасходаИП) Тогда
		мСтатусРасходаИП = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗРеализованныеИПРасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.МПЗРеализованныеИП.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, НачалоПериода, КонецПериода", Организация,,,, КонецДня(Дата));
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета",              0);
	СтруктураПараметров.Вставить("КонецПериода",КонецДня(Дата));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти["МПЗРеализованныеИП"].Реквизиты.Партия.Тип);
	
КонецПроцедуры

Процедура МПЗРеализованныеИПНоменклатураПриИзменении(Элемент)
	
	ЭлементыФормы.МПЗРеализованныеИП.ТекущиеДанные.Услуга = Элемент.Значение.Услуга;
	Если Элемент.Значение.Услуга Тогда
		ЭлементыФормы.МПЗРеализованныеИП.ТекущиеДанные.ВидМПЗ = Перечисления.ВидыМПЗ.Продукция;
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы.МПЗРеализованныеИП.ТекущиеДанные.СтатусыОплатыРасходовИП) Тогда
			ЭлементыФормы.МПЗРеализованныеИП.ТекущиеДанные.СтатусыОплатыРасходовИП = Перечисления.СтатусыРасходовИП.НеОплаченоПокупателем;
		КонецЕсли;
		Если ЭлементыФормы.МПЗРеализованныеИП.ТекущиеДанные.СтатусыОплатыРасходовИП <> Перечисления.СтатусыРасходовИП.НеОплаченоПокупателем Тогда
			мСтатусРасходаИП = ЭлементыФормы.МПЗРеализованныеИП.ТекущиеДанные.СтатусыОплатыРасходовИП;
			// Необходимо очистить дополнительные сведения
			КлючПоиска = Новый Структура("Ключ" , ЭлементыФормы.МПЗРеализованныеОбороты.ОтборСтрок.Ключ.Значение);
			НайденныеСтроки = Обороты.НайтиСтроки(КлючПоиска);
			Если НайденныеСтроки.Количество() <> 0 Тогда
				Если Вопрос("В качестве номенклатуры указана услуга. Данные по неоплаченным материалам будут удалены. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
					ЭлементыФормы.МПЗРеализованныеИП.ТекущиеДанные.СтатусыОплатыРасходовИП = Перечисления.СтатусыРасходовИП.НеОплаченоПокупателем;
					Для Каждого Строка Из НайденныеСтроки Цикл
						Обороты.Удалить(Строка);
					КонецЦикла;
				Иначе
					ЭлементыФормы.МПЗРеализованныеИП.ТекущиеДанные.СтатусыОплатыРасходовИП = мСтатусРасходаИП;
				КонецЕсли;
			КонецЕсли;
			мСтатусРасходаИП = ЭлементыФормы.МПЗРеализованныеИП.ТекущиеДанные.СтатусыОплатыРасходовИП;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура МПЗРеализованныеИППриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.МПЗРеализованныеИП.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

Процедура МПЗРеализованныеУСНПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.МПЗРеализованныеУСН.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////
//*********************************************************************************************


