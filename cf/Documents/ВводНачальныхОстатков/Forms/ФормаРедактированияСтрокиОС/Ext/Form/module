////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ЗаголовокФормы;

Перем ПрименениеПБУ18;
Перем УСН;
Перем УСНДоходы;
Перем ОтражатьВНалоговомУчете;
//Перем мСписокСчетов;
//Перем мСписокСчетовНУ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Пересчитывает текущую стоимость (ВР) и сумму амортизации (ВР).
//
Процедура ПересчитатьСуммыРазниц()
	
	Если СчетУчетаБУ.НалоговыйУчет Тогда
		ТекущаяСтоимостьВР       = ТекущаяСтоимостьБУ - ТекущаяСтоимостьНУ - ТекущаяСтоимостьПР;
	Иначе
		ТекущаяСтоимостьВР = 0;
		ТекущаяСтоимостьПР = 0;
	КонецЕсли;
	Если СчетАмортизацииБУ.НалоговыйУчет Тогда
		НакопленнаяАмортизацияВР = НакопленнаяАмортизацияБУ
		- НакопленнаяАмортизацияНУ 
		- НакопленнаяАмортизацияПР;
	Иначе
		НакопленнаяАмортизацияВР = 0;
		НакопленнаяАмортизацияПР = 0;
	КонецЕсли;
				
	Если ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы Тогда
		НакопленнаяАмортизацияНУ = 0;
		НакопленнаяАмортизацияПР = 0;
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьСуммыРазниц()

// Записывает данные в строку формы документа.
//
Процедура ЗаписатьДанные(Отказ = Ложь)
	
	ОчиститьНеиспользуемыеРеквизиты();
	
	Если ЭтоНовый Тогда
		ДанныеДляЗаписи = ВладелецФормы.Значение.Добавить();
		ВладелецФормы.ТекущаяСтрока = ДанныеДляЗаписи;
	Иначе
		ДанныеДляЗаписи = ТекущиеДанные;
	КонецЕсли;
	
	Попытка
		
		ЗаполнитьЗначенияСвойств(ДанныеДляЗаписи, ЭтаФорма);
		
	Исключение
		
		Предупреждение("Операция не может быть выполнена из-за несоответствия версии или отсутствия строки документа (возможно, строка была изменена или удалена)!");
		
		ТекущиеДанные = Неопределено;
		
		КлючУникальности = "Документ_ВводНачальныхОстатков_ФормаРедактированияСтроки_" + СокрЛП(Новый УникальныйИдентификатор);
		
		Отказ = Истина;
		
		Возврат;
		
	КонецПопытки;
	
	Если НЕ ВладелецФормы.ПроверитьСтроку(ДанныеДляЗаписи) Тогда
		Предупреждение("Введенные данные не отображены в списке, так как не соответствуют отбору.");
	КонецЕсли;
	
	ТекущиеДанные = ДанныеДляЗаписи;
	
	КлючУникальности = "Документ_ВводНачальныхОстатков_ФормаРедактированияСтроки_" + СокрЛП(ТекущиеДанные.НомерСтроки);
	
	Модифицированность = Ложь;
	ЭтоНовый           = Ложь;
	
КонецПроцедуры // ЗаписатьДанные()

// Функция проверяет, является ли счет забалансовым, и выдает соответствующее
// предупреждение. Используется для контроля за выбираемыми пользователем 
// счетами.
//
// Параметры:
//  Счет         - ПланыСчетов, Строка - счет (или код счета), который 
//                 необходимо проверить на забалансовость
//
// Возвращаемое значение:
//  Булево.      
//  
Функция ПроверитьЗабалансовыйСчет(Счет)
	
	ВозвращаемоеЗначение = Истина;
	
	СчетНаПроверку = Счет;
	
	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		
		СчетНаПроверку = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Счет);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетНаПроверку) Тогда
		
		Если НЕ СчетНаПроверку.Забалансовый Тогда
			
			ВозвращаемоеЗначение = Ложь;
		
			Предупреждение("Счет " + СокрЛП(СчетНаПроверку)+" """ + СчетНаПроверку.Наименование + """ не является забалансовым.
			               |В этом поле можно указать только забалансовый счет.");
						   
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции // ПроверитьЗабалансовыйСчет()

// Очищает неиспользуемые реквизиты в форме.
//
Процедура ОчиститьНеиспользуемыеРеквизиты()
	
	// Бухгалтерский учет.
	
	Если ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		
		Если СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
			
			КоэффициентУскоренияБУ                        = 0;
			КоэффициентАмортизацииБУ                      = 0;
			ПараметрВыработкиБУ                           = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
			ОбъемПродукцииРаботБУ                         = 0;
			ОбъемПродукцииРаботДляВычисленияАмортизацииБУ = 0;
			
		ИначеЕсли СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			
			КоэффициентАмортизацииБУ                      = 0;
			ПараметрВыработкиБУ                           = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
			ОбъемПродукцииРаботБУ                         = 0;
			ОбъемПродукцииРаботДляВычисленияАмортизацииБУ = 0;

		ИначеЕсли СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
			
			КоэффициентУскоренияБУ                        = 0;
			КоэффициентАмортизацииБУ                      = 0;
			ПараметрВыработкиБУ                           = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
			ОбъемПродукцииРаботБУ                         = 0;
			ОбъемПродукцииРаботДляВычисленияАмортизацииБУ = 0;
			
		ИначеЕсли СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			
			КоэффициентУскоренияБУ                        = 0;
			КоэффициентАмортизацииБУ                      = 0;
			ГрафикАмортизацииБУ                           = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
			ОбъемПродукцииРаботДляВычисленияАмортизацииБУ = 0;
			
		ИначеЕсли СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
			
			КоэффициентУскоренияБУ = 0;
			ПараметрВыработкиБУ    = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
			ОбъемПродукцииРаботБУ  = 0;
			СезонныйХарактерБУ     = Ложь;
			
		ИначеЕсли СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
			
			КоэффициентУскоренияБУ                        = 0;
			ГрафикАмортизацииБУ                           = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
			ОбъемПродукцииРаботДляВычисленияАмортизацииБУ = 0;
			
		КонецЕсли;
		
	ИначеЕсли ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается Тогда
		  
		СпособНачисленияАмортизацииБУ               = Перечисления.СпособыНачисленияАмортизацииОС.ПустаяСсылка();
		СрокПолезногоИспользованияБУ                = 0;
		НачислятьАмортизациюБУ                      = Ложь;		
		СезонныйХарактерБУ                          = Ложь;
		ГрафикАмортизацииБУ                         = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
		СтоимостьДляВычисленияАмортизацииБУ         = 0;
		СрокИспользованияДляВычисленияАмортизацииБУ = 0;
		  
	ИначеЕсли ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету Тогда
		  
		СпособНачисленияАмортизацииБУ               = Перечисления.СпособыНачисленияАмортизацииОС.ПустаяСсылка();
		СрокПолезногоИспользованияБУ                = 0;
		НачислятьАмортизациюБУ                      = Ложь;		
		СезонныйХарактерБУ                          = Ложь;
		ГрафикАмортизацииБУ                         = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
		СуммаПоследнейМодернизацииБУ                = 0;
		СтоимостьДляВычисленияАмортизацииБУ         = 0;
		СрокИспользованияДляВычисленияАмортизацииБУ = 0;
		  
	КонецЕсли;
	
	Если (ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается 
		ИЛИ ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету) 
		И (ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы 
			ИЛИ ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету) Тогда
		
		СпособОтраженияРасходовПоАмортизации      = Справочники.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка();
		
	КонецЕсли;
	
	Если НЕ СезонныйХарактерБУ Тогда
		
		ГрафикАмортизацииБУ = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
		
	КонецЕсли;
	
	// Налоговый учет.
	
	Если ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
	ИначеЕсли ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы Тогда
		
		МетодНачисленияАмортизацииНУ             = Перечисления.МетодыНачисленияАмортизации.ПустаяСсылка();
		СрокПолезногоИспользованияНУ             = 0;
		НачислятьАмортизациюНУ                   = 0;
		СпециальныйКоэффициентНУ                 = 0;
		СтоимостьДо2002НУ                        = 0;
		АмортизацияДо2002НУ                      = 0;
		СуммаПоследнейМодернизацииНУ             = 0;
		
	ИначеЕсли ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
		
		МетодНачисленияАмортизацииНУ             = Перечисления.МетодыНачисленияАмортизации.ПустаяСсылка();
		СрокПолезногоИспользованияНУ             = 0;
		НачислятьАмортизациюНУ                   = 0;
		СпециальныйКоэффициентНУ                 = 0;
		СтоимостьДо2002НУ                        = 0;
		АмортизацияДо2002НУ                      = 0;
		
	КонецЕсли;
			
КонецПроцедуры // ОчиститьНеиспользуемыеРеквизиты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Управление видимостью элементов формы.
//
Процедура УстановитьВидимость()
	
	Если ЭтоНовый Тогда
		ЭтаФорма.Заголовок = ЗаголовокФормы + ": Новая строка";
	ИначеЕсли НЕ (ТекущиеДанные = Неопределено) Тогда
		ЭтаФорма.Заголовок = ЗаголовокФормы + ": Строка " + СокрЛП(ТекущиеДанные.НомерСтроки);
	КонецЕсли;
	
	ОСН_ФизЛицо = ОбщегоНазначения.Предприниматель(ДокументОбъект.Организация, ДокументОбъект.Дата+24*60*60);
	ОСН_Юр = (НЕ УСН И НЕ ОСН_ФизЛицо);
	
	НачисляетсяИзнос = ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы 
					ИЛИ ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету;
	ЭлементыФормы.НакопленнаяАмортизацияНУ.Доступность = (НЕ НачисляетсяИзнос);
	ЭлементыФормы.НакопленнаяАмортизацияПР.Доступность = (НЕ НачисляетсяИзнос);
	
	// Пересчет сумм разниц.
	ПересчитатьСуммыРазниц();
	
	// Установка видимости закладок "Налоговый учет" и "Налоговый учет (УСН)".
	ЭлементыФормы.ОсновнаяПанель.Страницы.НалоговыйУчетУСН.Видимость = ОтражатьВНалоговомУчете И УСН И НЕ УСНДоходы;
	ЭлементыФормы.ОсновнаяПанель.Страницы.НалоговыйУчет.Видимость    = ОтражатьВНалоговомУчете И НЕ УСН И НЕ ОСН_ФизЛицо;
	ЭлементыФормы.ОсновнаяПанель.Страницы.НалоговыйУчетИП.Видимость    = ОтражатьВНалоговомУчете И НЕ УСН И НЕ УСНДоходы И ОСН_ФизЛицо;
	
	// Установка видимости элементов колонки "Налоговый учет" на закладке "Начальные остатки".
	ЭлементыФормы.ПанельНадписиБУНУ.Свертка = ?(ОтражатьВНалоговомУчете И НЕ УСН,
	                                            РежимСверткиЭлементаУправления.Нет,
	                                            РежимСверткиЭлементаУправления.Верх);
	
	ЭлементыФормы.ПервоначальнаяСтоимостьНУ.Видимость   = ОтражатьВНалоговомУчете И НЕ УСН;
	ЭлементыФормы.ТекущаяСтоимостьНУ.Видимость          = ОтражатьВНалоговомУчете И ОСН_Юр;
	ЭлементыФормы.НакопленнаяАмортизацияНУ.Видимость    = ОтражатьВНалоговомУчете И НЕ УСН;
	
	// Установка видимости страниц панели ПанельПогашенияСтоимости 
	// в зависимости от выбранного варианта погашения стоимости.
	Если НЕ ЗначениеЗаполнено(ПорядокПогашенияСтоимостиБУ) Тогда
		ЭлементыФормы.ПанельПогашениеСтоимости.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ПанельПогашениеСтоимости.Видимость = Истина;
		ЭлементыФормы.ПанельПогашениеСтоимости.ТекущаяСтраница = ЭлементыФормы.ПанельПогашениеСтоимости.Страницы[ПорядокПогашенияСтоимостиБУ.Метаданные().ЗначенияПеречисления[Перечисления.ПорядокПогашенияСтоимостиОС.Индекс(ПорядокПогашенияСтоимостиБУ)].Имя];
	КонецЕсли;
	
	Если ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается Тогда
		ЭлементыФормы.НакопленнаяАмортизацияБУ.Доступность = Ложь;
	Иначе
		ЭлементыФормы.НакопленнаяАмортизацияБУ.Доступность = Истина;
	КонецЕсли;
	
	Если ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
	 ИЛИ ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ 
	 ИЛИ ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается Тогда
		ЭлементыФормы.ПанельПогашениеСтоимости.Свертка = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельПогашениеСтоимости.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
	Если ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
	 ИЛИ ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда
		ЭлементыФормы.СчетНачисленияАмортизацииБУ.ОтметкаНезаполненного     = Истина И НЕ ЗначениеЗаполнено(СчетАмортизацииБУ);
		ЭлементыФормы.СчетНачисленияАмортизацииБУ.АвтоВыборНезаполненного   = Истина;
		ЭлементыФормы.СчетНачисленияАмортизацииБУ.АвтоОтметкаНезаполненного = Истина;
	Иначе
		ЭлементыФормы.СчетНачисленияАмортизацииБУ.ОтметкаНезаполненного     = Ложь;
		ЭлементыФормы.СчетНачисленияАмортизацииБУ.АвтоВыборНезаполненного   = Ложь;
		ЭлементыФормы.СчетНачисленияАмортизацииБУ.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СпособНачисленияАмортизацииБУ) Тогда
		ЭлементыФормы.ПанельПараметрыАмортизации.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ПанельПараметрыАмортизации.Видимость = Истина;
		ЭлементыФормы.ПанельПараметрыАмортизации.ТекущаяСтраница = ЭлементыФормы.ПанельПараметрыАмортизации.Страницы.Получить(Перечисления.СпособыНачисленияАмортизацииОС.Индекс(СпособНачисленияАмортизацииБУ));
	КонецЕсли;
	
	// Установка видимости страниц панели ПанельВключениеСтоимостиВСоставРасходов
	// в зависимости от выбранного варианта включения стоимости в состав расходов
	Если НЕ ЗначениеЗаполнено(ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
		ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходов.Видимость = Ложь;
		ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходовИП.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходов.Видимость = Истина;
		ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходовИП.Видимость = Истина;
		ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходов.ТекущаяСтраница = ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходов.Страницы[ПорядокВключенияСтоимостиВСоставРасходовНУ.Метаданные().ЗначенияПеречисления[Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.Индекс(ПорядокВключенияСтоимостиВСоставРасходовНУ)].Имя];
		ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходовИП.ТекущаяСтраница = ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходовИП.Страницы[ПорядокВключенияСтоимостиВСоставРасходовНУ.Метаданные().ЗначенияПеречисления[Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.Индекс(ПорядокВключенияСтоимостиВСоставРасходовНУ)].Имя];
	КонецЕсли;
	
	МетодНачисленияАмортизацииНУНелинейный = Ложь;
	Если ОСН_Юр Тогда
		Если НЕ ДокументОбъект.УчетнаяПолитикаНеЗадана Тогда
			// есть сведения что ранее применялся нелинейный метод
			МетодНачисленияАмортизацииНУНелинейный = ДокументОбъект.УчетнаяПолитикаНУ.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный;
			// предполагаем что ранее применялся нелинейный метод
			Если НЕ МетодНачисленияАмортизацииНУНелинейный Тогда
				УчетнаяПолитикаНеЗадана = Ложь;
				УчетнаяПолитикаНУпоОС = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДокументОбъект.Дата+24*60*60, УчетнаяПолитикаНеЗадана, ДокументОбъект.Организация);
				Если НЕ УчетнаяПолитикаНеЗадана Тогда
					 МетодНачисленияАмортизацииНУНелинейный = УчетнаяПолитикаНУпоОС.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Линейный;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если МетодНачисленияАмортизацииНУНелинейный Тогда
		ЭлементыФормы.НачислениеАмортизацииДо2009.Свертка = РежимСверткиЭлементаУправления.Нет;
		Нелинейный = МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный;
		ЭлементыФормы.АмортизацияДо2009.ОтметкаНезаполненного     = Нелинейный И НЕ ЗначениеЗаполнено(АмортизацияДо2009);
		ЭлементыФормы.АмортизацияДо2009.Доступность     = Нелинейный;
		ЭлементыФормы.ФактическийСрокИспользованияДо2009.ОтметкаНезаполненного     = Нелинейный И НЕ ЗначениеЗаполнено(ФактическийСрокИспользованияДо2009);
		ЭлементыФормы.ФактическийСрокИспользованияДо2009.Доступность     = Нелинейный;
	Иначе
		ЭлементыФормы.НачислениеАмортизацииДо2009.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
	ЭлементыФормы.ТекущаяСтоимостьНУ.ОтметкаНезаполненного     = (НЕ (ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету)) И ТекущаяСтоимостьНУ = 0;
	ЭлементыФормы.ТекущаяСтоимостьНУ.АвтоОтметкаНезаполненного = (НЕ (ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету));
	
	Если ОСН_Юр Тогда
		ЭлементыФормы.НадписьРеквизитыДокументаОплаты.Видимость = Ложь;
		ЭлементыФормы.РеквизитыДокументаОплаты.Видимость = Ложь;
		
		ЭлементыФормы.СтоимостьДляВычисленияАмортизацииПР.Видимость = Истина;
		ЭлементыФормы.РамкаСведенияДляНачисленияАмортизации.Видимость = Истина;
		ЭлементыФормы.НадписьСтоимостьДляВычисленияАмортизацииБУ7.Видимость = Истина;
		
	Иначе
		
		ЭлементыФормы.СтоимостьДляВычисленияАмортизацииПР.Видимость = Ложь;
		ЭлементыФормы.РамкаСведенияДляНачисленияАмортизации.Видимость = Ложь;
		ЭлементыФормы.НадписьСтоимостьДляВычисленияАмортизацииБУ7.Видимость = Ложь;
		
		ЭлементыФормы.НадписьРеквизитыДокументаОплаты.Видимость = Истина;
		ЭлементыФормы.РеквизитыДокументаОплаты.Видимость = Истина;
		
		Если МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда
			ЭлементыФормы.НадписьПроцентГодовойАмортизацииНУ.Видимость = Ложь;
			ЭлементыФормы.ГодоваяНормаАмортизацииНУ.Видимость = Ложь;
			ЭлементыФормы.НадписьЕдиницаНормыНУ.Видимость = Ложь;
			ЭлементыФормы.НадписьСпециальныйКоэффициентНУИП.Видимость = Ложь;
			ЭлементыФормы.СпециальныйКоэффициентНУИП.Видимость = Ложь;
			
		Иначе
			ЭлементыФормы.НадписьПроцентГодовойАмортизацииНУ.Видимость = Истина;
			ЭлементыФормы.ГодоваяНормаАмортизацииНУ.Видимость = Истина;
			ЭлементыФормы.НадписьЕдиницаНормыНУ.Видимость = Истина;
			ЭлементыФормы.НадписьСпециальныйКоэффициентНУИП.Видимость = Истина;
			ЭлементыФормы.СпециальныйКоэффициентНУИП.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Установка доступности поля "ГрафикАмортизацииБУ"
	ЭлементыФормы.ГрафикАмортизацииПоГодуБУ1.Доступность = СезонныйХарактерБУ;
	ЭлементыФормы.ГрафикАмортизацииПоГодуБУ2.Доступность = СезонныйХарактерБУ;
	ЭлементыФормы.ГрафикАмортизацииПоГодуБУ3.Доступность = СезонныйХарактерБУ;
	ЭлементыФормы.ГрафикАмортизацииПоГодуБУ4.Доступность = СезонныйХарактерБУ;
	
	// Установка видимости реквизитов ПБУ 18/02
	ОтображениеРеквизитовПБУ18 = ?(ОтражатьВНалоговомУчете И ОСН_Юр И ПрименениеПБУ18,
	                               РежимСверткиЭлементаУправления.Нет,
	                               РежимСверткиЭлементаУправления.Верх);
								   
	ЭлементыФормы.ПанельСтоимостьПБУ18.Свертка   = ОтображениеРеквизитовПБУ18;
	ЭлементыФормы.ПанельАмортизацияПБУ18.Свертка = ОтображениеРеквизитовПБУ18;
	
	// Установка видимости надписи с расшифровкой срока полезного использования
	РасшифровкаСрокаПолезногоИспользованияБУ  = УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияБУ);
	РасшифровкаСрокаПолезногоИспользованияНУ  = УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияНУ);
	РасшифровкаСрокаПолезногоИспользованияУСН = УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияУСН);
	РасшифровкаСрокаПолезногоИспользованияФакт  = УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(ФактическийСрокИспользованияДо2009);
	
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ1.Заголовок = РасшифровкаСрокаПолезногоИспользованияБУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ2.Заголовок = РасшифровкаСрокаПолезногоИспользованияБУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ3.Заголовок = РасшифровкаСрокаПолезногоИспользованияБУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ4.Заголовок = РасшифровкаСрокаПолезногоИспользованияБУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ5.Заголовок = РасшифровкаСрокаПолезногоИспользованияБУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ6.Заголовок = РасшифровкаСрокаПолезногоИспользованияБУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ7.Заголовок = РасшифровкаСрокаПолезногоИспользованияБУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияНУ.Заголовок  = РасшифровкаСрокаПолезногоИспользованияНУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияНУИП.Заголовок  = РасшифровкаСрокаПолезногоИспользованияНУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияФакт.Заголовок  = РасшифровкаСрокаПолезногоИспользованияФакт;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияУСН.Заголовок = РасшифровкаСрокаПолезногоИспользованияУСН;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ8.Заголовок = РасшифровкаСрокаПолезногоИспользованияБУ;
	
	// Установка видимости надписи с единицей измерения объема продукции (работ, услуг)
	ЕдиницаИзмеренияВыработки = ?(ПараметрВыработкиБУ.Пустая(), "", ПараметрВыработкиБУ.ЕдиницаИзмерения);
	ЭлементыФормы.ЕдиницаНормыБУ1.Заголовок = ЕдиницаИзмеренияВыработки;
	ЭлементыФормы.ЕдиницаНормыБУ2.Заголовок = ЕдиницаИзмеренияВыработки;
	ЭлементыФормы.ЕдиницаНормыБУ3.Заголовок = ЕдиницаИзмеренияВыработки;
	ЭлементыФормы.ЕдиницаНормыБУ4.Заголовок = ЕдиницаИзмеренияВыработки;
	
	Если НЕ ОСН_Юр Тогда
		ЭлементыФормы.РамкаДо2002.Видимость = Ложь;
		ЭлементыФормы.НадписьСтоимостьДо2002НУ.Видимость = Ложь;
		ЭлементыФормы.СтоимостьДо2002НУ.Видимость = Ложь;
		ЭлементыФормы.НадписьАмортизацияДо2002НУ.Видимость = Ложь;
		ЭлементыФормы.АмортизацияДо2002НУ.Видимость = Ложь;
		ЭлементыФормы.РамкаПоследняяМодернизацияНУ.Видимость = Ложь;
		ЭлементыФормы.НадписьСуммаПоследнейМодернизацииНУ.Видимость = Ложь;
		ЭлементыФормы.СуммаПоследнейМодернизацииНУ.Видимость = Ложь;
	КонецЕсли;
	
	Если ОСН_Юр Тогда //доступность реквизитов ПР и ВР
		
		ЭлементыФормы.ТекущаяСтоимостьПР.Доступность = СчетУчетаБУ.НалоговыйУчет;
		ЭлементыФормы.НакопленнаяАмортизацияПР.Доступность = СчетАмортизацииБУ.НалоговыйУчет;
		
	КонецЕсли;
	
	ОбязателенСпособОтраженияРасходовПоАмортизации = Истина;
	Если (ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается 
		ИЛИ ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету) 
		И (ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы 
			ИЛИ ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету) Тогда
		
		СпособОтраженияРасходовПоАмортизации = Справочники.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка();
		ОбязателенСпособОтраженияРасходовПоАмортизации = Ложь;

	КонецЕсли;
	
	ЭлементыФормы.СпособОтраженияРасходовПоАмортизации.Доступность = ОбязателенСпособОтраженияРасходовПоАмортизации;
	ЭлементыФормы.СпособОтраженияРасходовПоАмортизации.АвтоВыборНезаполненного = ОбязателенСпособОтраженияРасходовПоАмортизации;
	ЭлементыФормы.СпособОтраженияРасходовПоАмортизации.АвтоОтметкаНезаполненного = ОбязателенСпособОтраженияРасходовПоАмортизации;
	Если НЕ ОбязателенСпособОтраженияРасходовПоАмортизации Тогда
		ЭлементыФормы.СпособОтраженияРасходовПоАмортизации.ОтметкаНезаполненного = ОбязателенСпособОтраженияРасходовПоАмортизации;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПриОткрытии" формы.
// Вызывает процедуру установки видимости элементов управления формы.
//
Процедура ПриОткрытии()
	
	Если НЕ (ЭтоНовый И НЕ Копирование) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ТекущиеДанные);
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ДокументОбъект.мСтруктураРеквизитовЗаполняемыхПоУмолчанию);
	КонецЕсли;
	
	СезонныйХарактерБУ = ЗначениеЗаполнено(ГрафикАмортизацииБУ);
	
	ЗаголовокФормы = ЭтаФорма.Заголовок;
	
	ПрименениеПБУ18 = НалоговыйУчет.ПрименениеПБУ18(ДокументОбъект.Организация, ДокументОбъект.Дата+24*60*60);
	УСН             = НалоговыйУчетУСН.ПрименениеУСН(ДокументОбъект.Организация, ДокументОбъект.Дата+24*60*60);
	УСНДоходы       = НалоговыйУчетУСН.ПрименениеУСНДоходы(ДокументОбъект.Организация, ДокументОбъект.Дата+24*60*60);
	ОСН_ФизЛицо		= НЕ УСН И ДокументОбъект.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	
	ОтражатьВНалоговомУчете = Истина;
	
	Если ЭтоНовый Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	// Установка доступных значений для поля ввода "Порядок погашения стоимости (БУ)".
	СписокДоступныхЗначений = Новый СписокЗначений();
	
	СписокДоступныхЗначений.Добавить(Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации);
	СписокДоступныхЗначений.Добавить(Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ);
	СписокДоступныхЗначений.Добавить(Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету);
	СписокДоступныхЗначений.Добавить(Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается);
		
	ЭлементыФормы.ПорядокПогашенияСтоимостиБУ.ДоступныеЗначения	= СписокДоступныхЗначений;
	
	СписокДоступныхМетодовАмортизации = Новый СписокЗначений();
	
	Если ОСН_ФизЛицо Тогда
		СписокДоступныхМетодовАмортизации.Добавить(Перечисления.МетодыНачисленияАмортизации.Линейный);
		СписокДоступныхМетодовАмортизации.Добавить(Перечисления.МетодыНачисленияАмортизации.ПоЕНАОФ);
		
	Иначе
		СписокДоступныхМетодовАмортизации.Добавить(Перечисления.МетодыНачисленияАмортизации.Линейный);
		СписокДоступныхМетодовАмортизации.Добавить(Перечисления.МетодыНачисленияАмортизации.Нелинейный);
	КонецЕсли;
	
	ЭлементыФормы.МетодНачисленияАмортизацииНУ.ДоступныеЗначения = СписокДоступныхМетодовАмортизации;
	ЭлементыФормы.МетодНачисленияАмортизацииНУИП.ДоступныеЗначения = СписокДоступныхМетодовАмортизации;
		
	УстановитьВидимость();
	мСписокСчетов = ДокументОбъект.мСтруктураРеквизитовЗаполняемыхПоУмолчанию.мСписокСчетов;
	мСписокСчетовНУ = ДокументОбъект.мСтруктураРеквизитовЗаполняемыхПоУмолчанию.мСписокСчетовНУ;
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события "ПередЗакрытием" формы.
// Вызывает процедуру установки видимости элементов управления формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		ТекстВопроса =
		"Данные были изменены. Сохранить изменения?";
		
		КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
		Если КодВозврата = КодВозвратаДиалога.Отмена Тогда
			
			Отказ = Истина;
			
		ИначеЕсли КодВозврата = КодВозвратаДиалога.Да Тогда
			
			ЗаписатьДанные(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Обработчик события "ПриИзменении" поля ввода "Основное средство".
//
Процедура ОсновноеСредствоПриИзменении(Элемент)
	
	ИнвентарныйНомерРегл = Элемент.Значение.Код;
	
КонецПроцедуры // ОсновноеСредствоПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ЗАКЛАДКИ "НАЧАЛЬНЫЕ ОСТАТКИ"

// Обработчик события "ОбработкаВыбора" поля ввода "Счет учета (БУ)".
//
Процедура СчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораСчета(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры // СчетУчетаБУОбработкаВыбора()

// Обработчик события "ПриИзменении" поля ввода "Счет учета (БУ)".
//
Процедура СчетУчетаБУПриИзменении(Элемент)
	УстановитьВидимость();
	
	Если НЕ СчетУчетаБУ.НалоговыйУчет Тогда
		ТекущаяСтоимостьПР = 0;
		ТекущаяСтоимостьВР = 0;
	КонецЕсли;
	
	Если НЕ СчетАмортизацииБУ.НалоговыйУчет Тогда
		НакопленнаяАмортизацияПР = 0;		
		НакопленнаяАмортизацияВР = 0;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля ввода "Первоначальная стоимость (БУ)".
//
Процедура ПервоначальнаяСтоимостьБУПриИзменении(Элемент)
	
	Если ТекущаяСтоимостьБУ = 0 И НЕ (ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету) Тогда
		ТекущаяСтоимостьБУ = ПервоначальнаяСтоимостьБУ;
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете И НЕ УСН Тогда
		
		Если ПервоначальнаяСтоимостьНУ = 0 Тогда
			ПервоначальнаяСтоимостьНУ = ПервоначальнаяСтоимостьБУ;
		КонецЕсли;
		ПервоначальнаяСтоимостьНУПриИзменении(Неопределено);
		
	ИначеЕсли ОтражатьВНалоговомУчете И (УСН И НЕ УСНДоходы) Тогда
		
		Если ПервоначальнаяСтоимостьУСН = 0 Тогда
			ПервоначальнаяСтоимостьУСН = ПервоначальнаяСтоимостьБУ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПервоначальнаяСтоимостьБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Стоимость на момент ввода
// остатков (БУ)".
//
Процедура ТекущаяСтоимостьБУПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // ТекущаяСтоимостьБУПриИзменении()

// Обработчик события "ОбработкаВыбора" поля ввода "Счет начисления амортизации
// (БУ)".
//
Процедура СчетНачисленияАмортизацииБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораСчета(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение); 
	
КонецПроцедуры // СчетНачисленияАмортизацииБУОбработкаВыбора()

// Обработчик события "ОкончаниеВводаТекста" поля ввода "Счет начисления
// амортизации (износа) (БУ)".
//
Процедура СчетНачисленияАмортизацииБУОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОконченВводТекстаСчета(Элемент, Текст, Значение, СтандартнаяОбработка, мСписокСчетов);
	СтандартнаяОбработка = ?(ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса,
	                         ПроверитьЗабалансовыйСчет(Текст),
	                         Истина);
	
КонецПроцедуры // СчетНачисленияАмортизацииБУОкончаниеВводаТекста 

// Обработчик события "ПриИзменении" поля ввода "Счет начисления амортизации
// (БУ)".
//
Процедура СчетНачисленияАмортизацииБУПриИзменении(Элемент)
	
	Если Элемент.Значение.Забалансовый Тогда
		Если ПорядокПогашенияСтоимостиБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда
			ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ;
			Сообщать = НЕ ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы;
			ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы;
			Сообщить("В поле ""Порядок учета"" на закладке ""Бухгалтерский учет"" установлено значение """ + Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ + """");
			Если НЕ УСН и НЕ УСНДоходы И Сообщать Тогда
				Сообщить("В поле ""Порядок включения стоимости в состав расходов:"" на закладке ""Налоговый учет"" установлено значение """ + Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы + """");
			КонецЕсли;
			НакопленнаяАмортизацияНУ = 0;
			НакопленнаяАмортизацияПР = 0;
			НакопленнаяАмортизацияВР = 0;
			УстановитьВидимость();
		КонецЕсли;
	Иначе
		Если ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда
			ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации;
			Сообщать = НЕ ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;
			ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;
			Сообщить("В поле ""Порядок учета"" на закладке ""Бухгалтерский учет"" установлено значение """ + Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации + """");
			Если НЕ УСН и НЕ УСНДоходы И Сообщать Тогда
				Сообщить("В поле ""Порядок включения стоимости в состав расходов:"" на закладке ""Налоговый учет"" установлено значение """ + Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации + """");
			КонецЕсли;
			УстановитьВидимость();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СчетНачисленияАмортизацииБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Сумма накопленной амортизации
// (износа) (БУ)".
//
Процедура НакопленнаяАмортизацияБУПриИзменении(Элемент)
	
	Если ОтражатьВНалоговомУчете И НЕ УСН Тогда
		
		Если ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы 
			ИЛИ ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
			
			НакопленнаяАмортизацияНУ = 0
		Иначе
			Если НакопленнаяАмортизацияНУ = 0 Тогда
				
				НакопленнаяАмортизацияНУ = НакопленнаяАмортизацияБУ;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // НакопленнаяАмортизацияБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Первоначальная стоимость (НУ)". 
//
Процедура ПервоначальнаяСтоимостьНУПриИзменении(Элемент)
	
	Если ТекущаяСтоимостьНУ = 0 И НЕ (ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету)Тогда
		ТекущаяСтоимостьНУ = ПервоначальнаяСтоимостьНУ;
	КонецЕсли;
	
КонецПроцедуры // ПервоначальнаяСтоимостьНУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Cтоимость на момент ввода
// остатков (НУ)".
//
Процедура ТекущаяСтоимостьНУПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // ТекущаяСтоимостьНУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Cтоимость на момент ввода
// остатков (ПР)".
//
Процедура ТекущаяСтоимостьПРПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
	Если АмортизацияДо2002НУ <> 0 Тогда
		СтоимостьДляВычисленияАмортизацииПР = ТекущаяСтоимостьПР - АмортизацияДо2002НУ;	
	КонецЕсли;
	
КонецПроцедуры // ТекущаяСтоимостьПРПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Сумма накопленной амортизации
// (износа) (НУ)".
//
Процедура НакопленнаяАмортизацияНУПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // НакопленнаяАмортизацияНУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Сумма накопленной амортизации
// (износа) (ПР)".
//
Процедура НакопленнаяАмортизацияПРПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // НакопленнаяАмортизацияПРПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ЗАКЛАДКИ "БУХГАЛТЕРСКИЙ УЧЕТ"

// Обработчик события "ПриИзменении" поля ввода "Порядок учета (БУ)".
//
Процедура ПорядокПогашенияСтоимостиБУПриИзменении(Элемент)
	
	Если Элемент.Значение = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда
	
		Если СчетАмортизацииБУ.Пустая()
		 ИЛИ НЕ СчетАмортизацииБУ.Пустая() И НЕ СчетАмортизацииБУ.Забалансовый Тогда
		   
		   	СчетИзноса = ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств;
			
			Если НЕ СчетИзноса.ЗапретитьИспользоватьВПроводках Тогда
			
				СчетАмортизацииБУ = СчетИзноса;
				
				Сообщить("В поле ""Счет начисления амортизации (износа)"" на закладке ""Начальные остатки"" установлен счет " + СокрЛП(СчетИзноса.Код) + " """ + СокрЛП(СчетИзноса.Наименование) + """");
				
			КонецЕсли;
		   
		КонецЕсли;
		
		НакопленнаяАмортизацияНУ = 0;
		НакопленнаяАмортизацияПР = 0;
		НакопленнаяАмортизацияВР = 0;
		
	ИначеЕсли Элемент.Значение = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается Тогда
		
		НакопленнаяАмортизацияБУ = 0;
		
	Иначе
		
		Если СчетАмортизацииБУ.Пустая()
			ИЛИ НЕ СчетАмортизацииБУ.Пустая() И СчетАмортизацииБУ.Забалансовый Тогда
			
			СчетИзноса = ПланыСчетов.Хозрасчетный.АмортизацияОС_01;
			
			Если НЕ СчетИзноса.ЗапретитьИспользоватьВПроводках Тогда
				
				СчетАмортизацииБУ = СчетИзноса;
				
				Сообщить("В поле ""Счет начисления амортизации (износа)"" на закладке ""Начальные остатки"" установлен счет " + СокрЛП(СчетИзноса.Код) + " """ + СокрЛП(СчетИзноса.Наименование) + """");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ПорядокПогашенияСтоимостиБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Способ начисления амортизации
// (БУ)".
//
Процедура СпособНачисленияАмортизацииБУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СпособНачисленияАмортизацииБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Срок полезного использования 
// (НУ)". 
//
Процедура СрокПолезногоИспользованияБУПриИзменении(Элемент)
	
	Если ОтражатьВНалоговомУчете И НЕ УСН Тогда
		
		Если СрокПолезногоИспользованияНУ = 0 Тогда
			СрокПолезногоИспользованияНУ = СрокПолезногоИспользованияБУ;
		КонецЕсли;
		
	ИначеЕсли ОтражатьВНалоговомУчете И (УСН И НЕ УСНДоходы) Тогда
		
		Если СрокПолезногоИспользованияУСН = 0 Тогда
			СрокПолезногоИспользованияУСН = СрокПолезногоИспользованияБУ;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // СрокПолезногоИспользованияБУПриИзменении()

// Обработчик события "ПриИзменении" флага "Начислять амортизацию (БУ)".
//
Процедура НачислятьАмортизациюБУПриИзменении(Элемент)
	
	УстановитьВидимость()
	
КонецПроцедуры // НачислятьАмортизациюБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Параметр выработки (БУ)".
//
Процедура ПараметрВыработкиБУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // ПараметрВыработкиБУПриИзменении()

// Обработчик события "ПриИзменении" флага "Сезонный характер производства".
//
Процедура СезонныйХарактерБУПриИзменении(Элемент)
	
	Если СезонныйХарактерБУ = Ложь Тогда
	
		Если НЕ ГрафикАмортизацииБУ.Пустая() Тогда
			
			ТекстВопроса =
			"Поле ""График амортизации по году"" будет очищено.
			|Продолжить?";
			
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
				ГрафикАмортизацииБУ = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
			Иначе
				СезонныйХарактерБУ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // СезонныйХарактерБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Сумма последней модернизации
// (БУ)".
//
Процедура СуммаПоследнейМодернизацииБУПриИзменении(Элемент)
	
	Если ОтражатьВНалоговомУчете И НЕ УСН Тогда
		
		Если СуммаПоследнейМодернизацииНУ = 0 Тогда
			СуммаПоследнейМодернизацииНУ = СуммаПоследнейМодернизацииБУ;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // СуммаПоследнейМодернизацииБУПриИзменении()

// Обработчик события "НачалоВыбора" поля ввода "Способ отражения расходов
// по амортизации".
//
Процедура СпособОтраженияРасходовПоАмортизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеВнеоборотнымиАктивами.НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации(Элемент, ДокументОбъект.Организация, СтандартнаяОбработка);
	
КонецПроцедуры // СпособОтраженияРасходовПоАмортизацииНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ЗАКЛАДКИ "НАЛОГОВЫЙ УЧЕТ"

// Обработчик события "ПриИзменении" поля ввода "Порядок включения стоимости
// в состав расходов (НУ)".
//
Процедура ПорядокВключенияСтоимостиВСоставРасходовНУПриИзменении(Элемент)
	
	Если ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы
		ИЛИ ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
		НакопленнаяАмортизацияНУ = 0;
		НакопленнаяАмортизацияПР = 0;
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры // ПорядокВключенияСтоимостиВСоставРасходовНУПриИзменении()

Процедура ПорядокВключенияСтоимостиВСоставРасходовНУИППриИзменении(Элемент)
	
	Если ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
		НакопленнаяАмортизацияНУ = 0;
	КонецЕсли;
		
	УстановитьВидимость();
	
КонецПроцедуры // ПорядокВключенияСтоимостиВСоставРасходовНУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Метод начисления амортизации 
// (НУ)".
//
Процедура МетодНачисленияАмортизацииНУПриИзменении(Элемент)
	
	Если МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда
		АмортизацияДо2009 = 0;
		ФактическийСрокИспользованияДо2009 = 0;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // МетодНачисленияАмортизацииНУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Срок полезного использования 
// (НУ)". 
//
Процедура СрокПолезногоИспользованияНУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СрокПолезногоИспользованияНУПриИзменении()

// Обработчик события "ПриИзменении" флага "Начислять амортизацию (НУ)".
//
Процедура НачислятьАмортизациюНУПриИзменении(Элемент)
	
	УстановитьВидимость()
	
КонецПроцедуры // НачислятьАмортизациюНУПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ЗАКЛАДКИ "НАЛОГОВЫЙ УЧЕТ (УСН)"

// Обработчик события "ПриИзменении" поля ввода "Срок полезного использования 
// (УСН)". 
//
Процедура СрокПолезногоИспользованияУСНПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СрокПолезногоИспользованияУСНПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ЗАКЛАДКИ "СОБЫТИЯ"

// Обработчик события "НачалоВыбора" поля ввода "Событие принятия к учету".
//
Процедура СостояниеПринятияКУчетуРеглНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВидыСобытий = Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию;
	
	УправлениеВнеоборотнымиАктивами.НачалоВыбораЗначенияСобытийОС(Элемент, ВидыСобытий, СтандартнаяОбработка);
	
КонецПроцедуры // СостояниеПринятияКУчетуРеглНачалоВыбора()

// Обработчик события "НачалоВыбора" поля ввода "Событие последней модернизации".
//
Процедура СостояниеМодернизацииРеглНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВидыСобытий = Новый СписокЗначений;
	
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Достройка);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
	
	УправлениеВнеоборотнымиАктивами.НачалоВыбораЗначенияСобытийОС(Элемент, ВидыСобытий, СтандартнаяОбработка);
	
КонецПроцедуры // СостояниеМодернизацииРеглНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик нажатия на кнопку "ОК" в нижней командной панели формы.
//
Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Отказ = Ложь;
	
	ЗаписатьДанные(Отказ);
	
	Если НЕ Отказ Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыОК()

// Обработчик нажатия на кнопку "Записать" в нижней командной панели формы.
//
Процедура ОсновныеДействияФормыЗаписать(Кнопка)
	
	ЗаписатьДанные();
	
	УстановитьВидимость();

КонецПроцедуры // ОсновныеДействияФормыЗаписать()

// Обработчик нажатия на кнопку "Закрыть" в нижней командной панели формы.
//
Процедура ОсновныеДействияФормыЗакрыть(Кнопка)
	
	Закрыть();
	
КонецПроцедуры // ОсновныеДействияФормыЗакрыть()

Процедура СчетУчетаБУНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоВыбораСчета(Элемент);
	
КонецПроцедуры

Процедура СчетНачисленияАмортизацииБУНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоВыбораСчета(Элемент);
	
КонецПроцедуры

Процедура НачалоВыбораСчета(Элемент)
	
	СписокСчетовОтбора = "";
	Если Прав(Элемент.Имя, 2) = "БУ" Тогда
		ФормаВыбораСчета			= ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора( ,Элемент, );
		СписокСчетовОтбора = мСписокСчетов;
	КонецЕсли;
	
	ПолеОтбора					= ФормаВыбораСчета.Отбор.Код;
	
	ПолеОтбора.ВидСравнения		= ВидСравнения.ВСписке;
	ПолеОтбора.Значение			= СписокСчетовОтбора;
	ПолеОтбора.Использование	= Истина;
	
	ФормаВыбораСчета.ЭлементыФормы.Список.НастройкаОтбора.Код.Доступность = Ложь;
	ФормаВыбораСчета.ОткрытьМодально();
	
КонецПроцедуры

Процедура ОбработкаВыбораСчета(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Хозрасчетный = Истина)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если Хозрасчетный Тогда
			Если ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВыбранноеЗначение) <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
				ВыбранноеЗначение = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВыбранноеЗначение);
			ИначеЕсли ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", ВыбранноеЗначение) <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
				ВыбранноеЗначение = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
			Если ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВыбранноеЗначение) <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
				ВыбранноеЗначение = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВыбранноеЗначение);
			ИначеЕсли ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", ВыбранноеЗначение) <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
				ВыбранноеЗначение = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ОконченВводТекстаСчета(Элемент, Текст, Значение, СтандартнаяОбработка, СписокСчетов = "", СписокСчетовНУ = "")
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(СписокСчетов) Тогда
		Если ПланыСчетов.Хозрасчетный.НайтиПоКоду(Текст) = ПланыСчетов.Хозрасчетный.ПустаяСсылка()
			И ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", Текст) = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
			//СтандартнаяОбработка = Истина;
			Значение = СписокСчетов;
		Иначе
			Если СписокСчетов.НайтиПоЗначению(Текст) = Неопределено
				И СписокСчетов.НайтиПоЗначению(ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", Текст).Код) = Неопределено Тогда 
				Значение = СписокСчетов;
			Иначе
				СтандартнаяОбработка = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетУчетаБУОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОконченВводТекстаСчета(Элемент, Текст, Значение, СтандартнаяОбработка, мСписокСчетов);
	
КонецПроцедуры

Процедура СчетУчетаБУОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура СчетНачисленияАмортизацииБУОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПорядокПогашенияСтоимостиБУОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура СпособНачисленияАмортизацииБУОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПорядокВключенияСтоимостиВСоставРасходовНУОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МетодНачисленияАмортизацииНУОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПорядокВключенияСтоимостиВСоставРасходовУСНОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура СостояниеПринятияКУчетуРеглОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура СостояниеМодернизацииРеглОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура СпособОтраженияРасходовПоАмортизацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура АмортизацияДо2002НУПриИзменении(Элемент)
	
	Если АмортизацияДо2002НУ <> 0 Тогда
		СтоимостьДляВычисленияАмортизацииПР = ТекущаяСтоимостьПР - АмортизацияДо2002НУ;	
	КонецЕсли;
	
КонецПроцедуры






