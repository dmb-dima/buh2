////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ЗаголовокФормы;

Перем ПрименениеПБУ18;
Перем УСН;
Перем УСНДоходы;
Перем ОтражатьВНалоговомУчете;
Перем мСписокСчетов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Пересчитывает текущую стоимость (ВР) и сумму амортизации (ВР).
//
Процедура ПересчитатьСуммыРазниц()
	
	ТекущаяСтоимостьВР       = ТекущаяСтоимостьБУ - ТекущаяСтоимостьНУ - ТекущаяСтоимостьПР;
	НакопленнаяАмортизацияВР = НакопленнаяАмортизацияБУ - НакопленнаяАмортизацияНУ - НакопленнаяАмортизацияПР;
	
КонецПроцедуры // ПересчитатьСуммыРазниц()

// Записывает данные в строку формы документа.
//
Процедура ЗаписатьДанные(Отказ = Ложь)
	
	Если ЭтоНовый Тогда
		ДанныеДляЗаписи = ВладелецФормы.Значение.Добавить();
		ВладелецФормы.ТекущаяСтрока = ДанныеДляЗаписи;
	Иначе
		ДанныеДляЗаписи = ТекущиеДанные;
	КонецЕсли;
	
	Попытка
		
		ЗаполнитьЗначенияСвойств(ДанныеДляЗаписи, ЭтаФорма);
		
	Исключение
		
		Предупреждение("Операция не может быть выполнена из-за несоответствия версии или отсутствия строки документа (возможно, строка была изменена или удалена)!");
		
		ТекущиеДанные = Неопределено;
		
		КлючУникальности = "Документ_ВводНачальныхОстатков_ФормаРедактированияСтроки_" + СокрЛП(Новый УникальныйИдентификатор);
		
		Отказ = Истина;
		
		Возврат;
		
	КонецПопытки;
	
	Если НЕ ВладелецФормы.ПроверитьСтроку(ДанныеДляЗаписи) Тогда
		Предупреждение("Введенные данные не отображены в списке, так как не соответствуют отбору.");
	КонецЕсли;
	
	ТекущиеДанные = ДанныеДляЗаписи;
	
	КлючУникальности = "Документ_ВводНачальныхОстатков_ФормаРедактированияСтроки_" + СокрЛП(ТекущиеДанные.НомерСтроки);
	
	Модифицированность = Ложь;
	ЭтоНовый           = Ложь;
	
КонецПроцедуры // ЗаписатьДанные()

// Функция возвращает список значений доступных способов амортизации для бух. учета
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
Функция ПолучитьСписокСпособовАмортизацииБУ() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.Линейный);
	
	Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка);
	КонецЕсли;
	
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции);
	
	Возврат СписокПеречисления;

КонецФункции // ПолучитьСписокСпособовАмортизацииБУ()

Процедура ЗаполнитьСчетаУчета(БезВопросов = Истина)

	Если НематериальныйАктив.ВидОбъектаУчета <> ВидОбъектаУчета Тогда
		НематериальныйАктив = Неопределено;
	КонецЕсли; 
	
	Если не БезВопросов Тогда
		Текст = "Установить значения счетов учета, используемые по умолчанию?";
		Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		СчетНачисленияАмортизацииБУ = ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов;
		СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НематериальныеАктивыОрганизации;
		
	Иначе
		СчетНачисленияАмортизацииБУ = Неопределено;
		СчетУчетаБУ = ПланыСчетов.Хозрасчетный.РасходыНаНИОКР;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Управление видимостью элементов формы.
//
Процедура УстановитьВидимость()
	
	Если ЭтоНовый Тогда
		ЭтаФорма.Заголовок = ЗаголовокФормы + ": Новая строка";
	ИначеЕсли НЕ (ТекущиеДанные = Неопределено) Тогда
		ЭтаФорма.Заголовок = ЗаголовокФормы + ": Строка " + СокрЛП(ТекущиеДанные.НомерСтроки);
	КонецЕсли;
	
	ЭлементыФормы.ПредполагаемыйОбъемПродукцииБУ.Видимость = Ложь;
	ЭлементыФормы.НадписьПредполагаемыйОбъемРаботБУ.Видимость = Ложь;
	
	ЭлементыФормы.КоэффициентБУ.Видимость = Ложь;
	ЭлементыФормы.НадписьКоэффициентБУ.Видимость = Ложь;
	
	ОСН_ФизЛицо = ОбщегоНазначения.Предприниматель(ДокументОбъект.Организация, ДокументОбъект.Дата+24*60*60);
	ОСН_Юр = (НЕ УСН И НЕ ОСН_ФизЛицо);
		
	// Пересчет сумм разниц.
	ПересчитатьСуммыРазниц();
	
	// Установка видимости закладок "Налоговый учет" и "Налоговый учет (УСН)".
	ЭлементыФормы.ОсновнаяПанель.Страницы.НалоговыйУчетУСН.Видимость = ОтражатьВНалоговомУчете И УСН И НЕ УСНДоходы;
	ЭлементыФормы.ОсновнаяПанель.Страницы.НалоговыйУчет.Видимость    = ОтражатьВНалоговомУчете И НЕ УСН И НЕ ОСН_ФизЛицо;
	ЭлементыФормы.ОсновнаяПанель.Страницы.НалоговыйУчетИП.Видимость    = ОтражатьВНалоговомУчете И НЕ УСН И НЕ УСНДоходы И ОСН_ФизЛицо;
	
	// Установка видимости элементов колонки "Налоговый учет" на закладке "Начальные остатки".
	ЭлементыФормы.ПанельНадписиБУНУ.Свертка = ?(ОтражатьВНалоговомУчете И НЕ УСН,
	                                            РежимСверткиЭлементаУправления.Нет,
	                                            РежимСверткиЭлементаУправления.Верх);
	
	ЭлементыФормы.ПервоначальнаяСтоимостьНУ.Видимость						= ОтражатьВНалоговомУчете И НЕ УСН;
	ЭлементыФормы.НакопленнаяАмортизацияНУ.Видимость	= ОтражатьВНалоговомУчете И НЕ УСН;
	ЭлементыФормы.ПервоначальнаяСтоимостьНУ.Видимость	= ОтражатьВНалоговомУчете И НЕ УСН;
	ЭлементыФормы.ТекущаяСтоимостьНУ.Видимость	= ОтражатьВНалоговомУчете И НЕ УСН;
	
	// Установка видимости реквизитов ПБУ 18/02
	ОтображениеРеквизитовНМА = ?(ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив ИЛИ НЕ ЗначениеЗаполнено(НематериальныйАктив),
	                             РежимСверткиЭлементаУправления.Нет,
	                             РежимСверткиЭлементаУправления.Верх);

	ОтображениеРеквизитовПБУ18 = ?(ОтражатьВНалоговомУчете И ОСН_Юр И ПрименениеПБУ18,
	                               РежимСверткиЭлементаУправления.Нет,
	                               РежимСверткиЭлементаУправления.Верх);
	
	ЭлементыФормы.ПанельСтоимостьПБУ18.Свертка   = ОтображениеРеквизитовПБУ18;
	Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
		ЭлементыФормы.ПанельАмортизацияПБУ18.Свертка = ОтображениеРеквизитовНМА;
	Иначе
		ЭлементыФормы.ПанельАмортизацияПБУ18.Свертка = ОтображениеРеквизитовПБУ18;
	КонецЕсли;
	ЭлементыФормы.ПанельНакопленнойАмортизации.Свертка = ОтображениеРеквизитовНМА;
	
	// Установка видимости надписи с расшифровкой срока полезного использования
	РасшифровкаСрокаПолезногоИспользованияБУ  = УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияБУ);
	РасшифровкаСрокаПолезногоИспользованияНУ  = УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияНУ);
	РасшифровкаСрокаПолезногоИспользованияУСН = УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияУСН);
	
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ.Заголовок = РасшифровкаСрокаПолезногоИспользованияБУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияНУ.Заголовок  = РасшифровкаСрокаПолезногоИспользованияНУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияУСН.Заголовок  = РасшифровкаСрокаПолезногоИспользованияУСН;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияНУИП.Заголовок  = РасшифровкаСрокаПолезногоИспользованияНУ;
	
	ЭлементыФормы.НадписьСчетНачисленияАмортизацииБУ.Видимость = Истина;
	ЭлементыФормы.СчетНачисленияАмортизацииБУ.Видимость = Истина;
	
	Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив ИЛИ НЕ ЗначениеЗаполнено(НематериальныйАктив) Тогда
		//ЭлементыФормы.НадписьНематериальныйАктив.Заголовок = "Нематериальный актив:";
		ЭлементыФормы.РамкаГруппы3.Заголовок = "Параметры амортизации";
		ЭлементыФормы.НадписьСпособОтраженияРасходов.Заголовок = "Способ отражения расходов по амортизации:";
		ЭлементыФормы.НадписьСпособПоступления.Видимость = Истина;
		ЭлементыФормы.СпособПоступления.Видимость = Истина;
		ЭлементыФормы.РамкаГруппы4.Видимость = Истина;
		ЭлементыФормы.РамкаГруппы5.Заголовок = "Параметры амортизации";
		ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Заголовок = "Способ начисления амортизации:";
		ЭлементыФормы.РамкаГруппы7.Заголовок = "Параметры амортизации";
		ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Заголовок = "Срок полезного использования:";
		ЭлементыФормы.НадписьНачислятьАмортизациюБУ.Заголовок = "Начислять амортизацию:";
		ЭлементыФормы.НадписьНачислятьАмортизациюНУ.Заголовок = "Начислять амортизацию:";
		
		ЭлементыФормы.НачислениеАмортизацииДо2009.Видимость = НачислятьАмортизациюНУ И ОСН_Юр;
		
		Если НачислятьАмортизациюНУ Тогда
			МетодНачисленияАмортизацииНУНелинейный = Ложь;
			Если ОСН_Юр Тогда
				Если НЕ ДокументОбъект.УчетнаяПолитикаНеЗадана Тогда
					// есть сведения что ранее применялся нелинейный метод
					МетодНачисленияАмортизацииНУНелинейный = ДокументОбъект.УчетнаяПолитикаНУ.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный;
					// предполагаем что ранее применялся нелинейный метод
					Если НЕ МетодНачисленияАмортизацииНУНелинейный Тогда
						УчетнаяПолитикаНеЗадана = Ложь;
						УчетнаяПолитикаНУпоОС = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДокументОбъект.Дата+24*60*60, УчетнаяПолитикаНеЗадана, ДокументОбъект.Организация);
						Если НЕ УчетнаяПолитикаНеЗадана Тогда
							МетодНачисленияАмортизацииНУНелинейный = УчетнаяПолитикаНУпоОС.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Линейный;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если МетодНачисленияАмортизацииНУНелинейный Тогда
				ЭлементыФормы.НачислениеАмортизацииДо2009.Видимость = Истина;
				Нелинейный = МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный;
				ЭлементыФормы.АмортизацияДо2009.ОтметкаНезаполненного     = Нелинейный И НЕ ЗначениеЗаполнено(АмортизацияДо2009);
				ЭлементыФормы.АмортизацияДо2009.Доступность     = Нелинейный;
				ЭлементыФормы.ФактическийСрокИспользованияДо2009.ОтметкаНезаполненного     = Нелинейный И НЕ ЗначениеЗаполнено(ФактическийСрокИспользованияДо2009);
				ЭлементыФормы.ФактическийСрокИспользованияДо2009.Доступность     = Нелинейный;
			Иначе
				ЭлементыФормы.НачислениеАмортизацииДо2009.Видимость = Ложь;
			КонецЕсли;
		Иначе
			ЭлементыФормы.НачислениеАмортизацииДо2009.Видимость = Ложь;
		КонецЕсли;
		
		
		ЭлементыФормы.НадписьСрокПолезногоИспользованияНУ.Видимость = НачислятьАмортизациюНУ;
		ЭлементыФормы.СрокПолезногоИспользованияНУ.Видимость = НачислятьАмортизациюНУ;
		ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияНУ.Видимость = НачислятьАмортизациюНУ;
		ЭлементыФормы.НадписьСпециальныйКоэффициентНУ.Видимость = НачислятьАмортизациюНУ И ОСН_Юр;
		ЭлементыФормы.СпециальныйКоэффициентНУ.Видимость = НачислятьАмортизациюНУ И ОСН_Юр;
		
		ЭлементыФормы.НадписьСрокПолезногоИспользованияНУИП.Видимость = НачислятьАмортизациюНУ;
		ЭлементыФормы.СрокПолезногоИспользованияНУИП.Видимость = НачислятьАмортизациюНУ;
		ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияНУИП.Видимость = НачислятьАмортизациюНУ;
		
		ЭлементыФормы.НадписьДатаПриобретенияИП.Видимость = ОСН_ФизЛицо;
		ЭлементыФормы.ДатаПриобретенияИП.Видимость = ОСН_ФизЛицо;
		ЭлементыФормы.РамкаГруппы6.Видимость = ОСН_ФизЛицо;
			
		Если НачислятьАмортизациюБУ Тогда
			ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Видимость = Истина;
			ЭлементыФормы.СрокПолезногоИспользованияБУ.Видимость = Истина;
			ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ.Видимость = Истина;
			ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Видимость = Истина;
			ЭлементыФормы.СпособНачисленияАмортизацииБУ.Видимость = Истина;
			
			Если СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции Тогда
				ЭлементыФормы.ПредполагаемыйОбъемПродукцииБУ.Видимость = Истина;
				ЭлементыФормы.НадписьПредполагаемыйОбъемРаботБУ.Видимость = Истина;
			КонецЕсли;
			
			Если СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
				ЭлементыФормы.КоэффициентБУ.Видимость = Истина;
				ЭлементыФормы.НадписьКоэффициентБУ.Видимость = Истина;
			КонецЕсли;
			
		Иначе
			ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Видимость = Ложь;
			ЭлементыФормы.СрокПолезногоИспользованияБУ.Видимость = Ложь;
			ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ.Видимость = Ложь;
			ЭлементыФормы.ПредполагаемыйОбъемПродукцииБУ.Видимость = Ложь;
			ЭлементыФормы.НадписьПредполагаемыйОбъемРаботБУ.Видимость = Ложь;
			ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Видимость = Ложь;
			ЭлементыФормы.СпособНачисленияАмортизацииБУ.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		//ЭлементыФормы.НадписьНематериальныйАктив.Заголовок = "НИОКР:";
		ЭлементыФормы.РамкаГруппы3.Заголовок = "Параметры списания расходов";
		ЭлементыФормы.НадписьСпособОтраженияРасходов.Заголовок = "Способ отражения расходов в учете:";
		ЭлементыФормы.НадписьСпособПоступления.Видимость = Ложь;
		ЭлементыФормы.СпособПоступления.Видимость = Ложь;
		СпособПоступления = "";
		ЭлементыФормы.РамкаГруппы4.Видимость = Ложь;
		ЭлементыФормы.РамкаГруппы5.Заголовок = "Параметры списания расходов";
		ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Заголовок = "Способ списания расходов:";
		ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Заголовок = "Срок списания:";
		ЭлементыФормы.РамкаГруппы7.Заголовок = "Параметры списания расходов";
		ЭлементыФормы.НачислениеАмортизацииДо2009.Видимость = Ложь;
		ЭлементыФормы.НадписьНачислятьАмортизациюБУ.Заголовок = "Списывать расходы:";
		ЭлементыФормы.НадписьНачислятьАмортизациюНУ.Заголовок = "Списывать расходы:";
		
		ЭлементыФормы.НадписьСрокПолезногоИспользованияНУ.Видимость = НачислятьАмортизациюНУ;
		ЭлементыФормы.СрокПолезногоИспользованияНУ.Видимость = НачислятьАмортизациюНУ;
		ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияНУ.Видимость = НачислятьАмортизациюНУ;
		
		ЭлементыФормы.НадписьСрокПолезногоИспользованияНУИП.Видимость = НачислятьАмортизациюНУ;
		ЭлементыФормы.СрокПолезногоИспользованияНУИП.Видимость = НачислятьАмортизациюНУ;
		ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияНУИП.Видимость = НачислятьАмортизациюНУ;
		
		ЭлементыФормы.НадписьДатаПриобретенияИП.Видимость = ОСН_ФизЛицо;
		ЭлементыФормы.ДатаПриобретенияИП.Видимость = ОСН_ФизЛицо;
		ЭлементыФормы.РамкаГруппы6.Видимость = ОСН_ФизЛицо;

		Если НачислятьАмортизациюБУ Тогда

			ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Видимость  = Истина;
			ЭлементыФормы.СрокПолезногоИспользованияБУ.Видимость         = Истина;
			ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ.Видимость = Истина;
			ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Видимость = Истина;
			ЭлементыФормы.СпособНачисленияАмортизацииБУ.Видимость        = Истина;

			Если СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции Тогда
				ЭлементыФормы.ПредполагаемыйОбъемПродукцииБУ.Видимость = Истина;
				ЭлементыФормы.НадписьПредполагаемыйОбъемРаботБУ.Видимость = Истина;
			КонецЕсли;

		Иначе
			ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Видимость  = Ложь;
			ЭлементыФормы.СрокПолезногоИспользованияБУ.Видимость         = Ложь;
			ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ.Видимость = Ложь;
			ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Видимость = Ложь;
			ЭлементыФормы.СпособНачисленияАмортизацииБУ.Видимость        = Ложь;
		КонецЕсли;

		ЭлементыФормы.НадписьСпециальныйКоэффициентНУ.Видимость = Ложь;
		ЭлементыФормы.СпециальныйКоэффициентНУ.Видимость        = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПриОткрытии" формы.
// Вызывает процедуру установки видимости элементов управления формы.
//
Процедура ПриОткрытии()
	
	Если НЕ (ЭтоНовый И НЕ Копирование) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ТекущиеДанные);
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ДокументОбъект.мСтруктураРеквизитовЗаполняемыхПоУмолчанию);
	КонецЕсли;
	
	ЗаголовокФормы = ЭтаФорма.Заголовок;
	
	ПрименениеПБУ18 = НалоговыйУчет.ПрименениеПБУ18(ДокументОбъект.Организация, ДокументОбъект.Дата+24*60*60);
	УСН             = НалоговыйУчетУСН.ПрименениеУСН(ДокументОбъект.Организация, ДокументОбъект.Дата+24*60*60);
	УСНДоходы       = НалоговыйУчетУСН.ПрименениеУСНДоходы(ДокументОбъект.Организация, ДокументОбъект.Дата+24*60*60);
	ОСН_ФизЛицо		= НЕ УСН И ДокументОбъект.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	
	ОтражатьВНалоговомУчете = Истина;
	
	Если ЭтоНовый Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	СписокДоступныхМетодовАмортизации = Новый СписокЗначений();
	
	СписокДоступныхМетодовАмортизации.Добавить(Перечисления.МетодыНачисленияАмортизации.Линейный);
	СписокДоступныхМетодовАмортизации.Добавить(Перечисления.МетодыНачисленияАмортизации.Нелинейный);
	
	ЭлементыФормы.МетодНачисленияАмортизацииНУ.ДоступныеЗначения = СписокДоступныхМетодовАмортизации;
	
	УстановитьВидимость();
	СписокСчетовРазделаУчета();
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события "ПередЗакрытием" формы.
// Вызывает процедуру установки видимости элементов управления формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		ТекстВопроса =
		"Данные были изменены. Сохранить изменения?";
		
		КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
		Если КодВозврата = КодВозвратаДиалога.Отмена Тогда
			
			Отказ = Истина;
			
		ИначеЕсли КодВозврата = КодВозвратаДиалога.Да Тогда
			
			ЗаписатьДанные(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОМЫ

// Обработчик события "ПриИзменении" поля ввода "Нематериальный актив".
//
//  Проверяет соответствие выбранного вида нематериального актива
// виду операции и выдает соответствующее предупреждение.
//
Процедура НематериальныйАктивПриИзменении(Элемент)
	
	ВидОбъектаУчета = НематериальныйАктив.ВидОбъектаУчета;
	УстановитьВидимость();
	ЗаполнитьСчетаУчета();
	
КонецПроцедуры // НематериальныйАктивПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ЗАКЛАДКИ "НАЧАЛЬНЫЕ ОСТАТКИ"

// Обработчик события "ОбработкаВыбора" поля ввода "Счет учета (БУ)".
//
Процедура СчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СчетУчетаБУОбработкаВыбора()


// Обработчик события "ПриИзменении" поля ввода "Первоначальная стоимость (БУ)".
//
Процедура ПервоначальнаяСтоимостьБУПриИзменении(Элемент)
	
	Если ТекущаяСтоимостьБУ = 0 Тогда
		ТекущаяСтоимостьБУ = ПервоначальнаяСтоимостьБУ;
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете И НЕ УСН Тогда
		
		Если ПервоначальнаяСтоимостьНУ = 0 Тогда
			ПервоначальнаяСтоимостьНУ = ПервоначальнаяСтоимостьБУ;
		КонецЕсли;
		ПервоначальнаяСтоимостьНУПриИзменении(Неопределено);
		
	ИначеЕсли ОтражатьВНалоговомУчете И (УСН И НЕ УСНДоходы) Тогда
		
		Если ПервоначальнаяСтоимостьУСН = 0 Тогда
			ПервоначальнаяСтоимостьУСН = ПервоначальнаяСтоимостьБУ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПервоначальнаяСтоимостьБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Стоимость на момент ввода
// остатков (БУ)".
//
Процедура ТекущаяСтоимостьБУПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // ТекущаяСтоимостьБУПриИзменении()

// Обработчик события "ОбработкаВыбора" поля ввода "Счет начисления амортизации
// (БУ)".
//
Процедура СчетНачисленияАмортизацииБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораСчета(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры // СчетНачисленияАмортизацииБУОбработкаВыбора()


// Обработчик события "ПриИзменении" поля ввода "Сумма начисленной амортизации
// (износа) (БУ)".
//
Процедура НакопленнаяАмортизацияБУПриИзменении(Элемент)
	
	Если ОтражатьВНалоговомУчете И НЕ УСН Тогда
		
		Если НакопленнаяАмортизацияНУ = 0 Тогда
			
			НакопленнаяАмортизацияНУ = НакопленнаяАмортизацияБУ;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля ввода "Первоначальная стоимость (НУ)". 
//
Процедура ПервоначальнаяСтоимостьНУПриИзменении(Элемент)
	
	Если ТекущаяСтоимостьНУ = 0 Тогда
		ТекущаяСтоимостьНУ = ПервоначальнаяСтоимостьНУ;
	КонецЕсли;
	
КонецПроцедуры // ПервоначальнаяСтоимостьНУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Cтоимость на момент ввода
// остатков (НУ)".
//
Процедура ТекущаяСтоимостьНУПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // ТекущаяСтоимостьНУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Cтоимость на момент ввода
// остатков (ПР)".
//
Процедура ТекущаяСтоимостьПРПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // ТекущаяСтоимостьПРПриИзменении()


// Обработчик события "ПриИзменении" поля ввода "Сумма накопленной амортизации
// (износа) (НУ)".
//
Процедура НакопленнаяАмортизацияНУПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // НакопленнаяАмортизацияНУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Сумма накопленной амортизации
// (износа) (ПР)".
//
Процедура НакопленнаяАмортизацияПРПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // НакопленнаяАмортизацияПРПриИзменении()

// Обработчик события "НачалоВыбора" поля ввода "Способ отражения расходов по амортизации
//
Процедура СпособОтраженияРасходовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеВнеоборотнымиАктивами.НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации(Элемент, ДокументОбъект.Организация, СтандартнаяОбработка);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ЗАКЛАДКИ "БУХГАЛТЕРСКИЙ УЧЕТ"

// Обработчик события "ПриИзменении" поля ввода "Срок полезного использования 
// (НУ)". 
//
Процедура СрокПолезногоИспользованияБУПриИзменении(Элемент)
	
	Если ОтражатьВНалоговомУчете И НЕ УСН Тогда
		
		Если СрокПолезногоИспользованияНУ = 0 Тогда
			СрокПолезногоИспользованияНУ = СрокПолезногоИспользованияБУ;
		КонецЕсли;
		
	ИначеЕсли ОтражатьВНалоговомУчете И (УСН И НЕ УСНДоходы) Тогда
		
		Если СрокПолезногоИспользованияУСН = 0 Тогда
			СрокПолезногоИспользованияУСН = СрокПолезногоИспользованияБУ;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // СрокПолезногоИспользованияБУПриИзменении()

Процедура СрокПолезногоИспользованияНУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СрокПолезногоИспользованияУСНПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Обработчик события "ПриИзменении" флага "Начислять амортизацию (БУ)".
//
Процедура НачислятьАмортизациюБУПриИзменении(Элемент)
	
	УстановитьВидимость()
	
КонецПроцедуры // НачислятьАмортизациюБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля СпособНачисленияАмортизацииБУ
//
Процедура СпособНачисленияАмортизацииБУПриИзменении(Элемент)
	
	УстановитьВидимость();
	Если СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции Тогда
		ПредполагаемыйОбъемПродукцииБУ = 0;
	КонецЕсли;
	
	Если СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
		КоэффициентБУ = 0;
	Иначе
		КоэффициентБУ = 1;
	КонецЕсли;
	
КонецПроцедуры // СпособНачисленияАмортизацииБУПриИзменении()

// Процедура - обработчик события "ПриНачалеВыбораИзСписка" поля СпособНачисленияАмортизацииБУ
//
Процедура СпособНачисленияАмортизацииБУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
 	Элемент.ДоступныеЗначения = ПолучитьСписокСпособовАмортизацииБУ();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ЗАКЛАДКИ "НАЛОГОВЫЙ УЧЕТ"

Процедура НачислятьАмортизациюНУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик нажатия на кнопку "ОК" в нижней командной панели формы.
//
Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Отказ = Ложь;
	
	ЗаписатьДанные(Отказ);
	
	Если НЕ Отказ Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыОК()

// Обработчик нажатия на кнопку "Записать" в нижней командной панели формы.
//
Процедура ОсновныеДействияФормыЗаписать(Кнопка)
	
	ЗаписатьДанные();
	
	УстановитьВидимость();

КонецПроцедуры // ОсновныеДействияФормыЗаписать()

// Обработчик нажатия на кнопку "Закрыть" в нижней командной панели формы.
//
Процедура ОсновныеДействияФормыЗакрыть(Кнопка)
	
	Закрыть();
	
КонецПроцедуры // ОсновныеДействияФормыЗакрыть()

Процедура СчетНачисленияАмортизацииБУНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоВыбораСчета(Элемент);
	
КонецПроцедуры


Процедура СписокСчетовРазделаУчета()
	
	мСписокСчетов = Новый СписокЗначений;
	Счет = ПланыСчетов.Хозрасчетный.НематериальныеАктивыОрганизации;
	мСписокСчетов.Добавить(Счет,СокрЛП(Счет.Код) + " (" + СокрЛП(Счет.Наименование) + ")", Счет.ПометкаУдаления);
	Счет = ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов;
	мСписокСчетов.Добавить(Счет,СокрЛП(Счет.Код) + " (" + СокрЛП(Счет.Наименование) + ")", Счет.ПометкаУдаления);
	
КонецПроцедуры

Процедура НачалоВыбораСчета(Элемент)
	
	СписокСчетовОтбора = "";
	Если Элемент.Имя = "СчетНачисленияАмортизацииБУ" Тогда
		ФормаВыбораСчета			= ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора( ,Элемент, );
		СписокСчетовОтбора = мСписокСчетов;
	КонецЕсли;
	
	ПолеОтбора					= ФормаВыбораСчета.Отбор.Код;
	
	ПолеОтбора.ВидСравнения		= ВидСравнения.ВСписке;
	ПолеОтбора.Значение			= СписокСчетовОтбора;
	ПолеОтбора.Использование	= Истина;
	
	ФормаВыбораСчета.ЭлементыФормы.Список.НастройкаОтбора.Код.Доступность = Ложь;
	ФормаВыбораСчета.ОткрытьМодально();
	
КонецПроцедуры

Процедура ОбработкаВыбораСчета(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Хозрасчетный = Истина)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если Хозрасчетный Тогда
			Если ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВыбранноеЗначение) <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
				ВыбранноеЗначение = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВыбранноеЗначение);
			ИначеЕсли ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", ВыбранноеЗначение) <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
				ВыбранноеЗначение = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
			Если ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВыбранноеЗначение) <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
				ВыбранноеЗначение = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ВыбранноеЗначение);
			ИначеЕсли ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", ВыбранноеЗначение) <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
				ВыбранноеЗначение = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СчетНачисленияАмортизацииБУОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОконченВводТекстаСчета(Элемент, Текст, Значение, СтандартнаяОбработка, мСписокСчетов);
	
КонецПроцедуры


Процедура ОконченВводТекстаСчета(Элемент, Текст, Значение, СтандартнаяОбработка, СписокСчетов = "", СписокСчетовНУ = "")
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(СписокСчетов) Тогда
		Если ПланыСчетов.Хозрасчетный.НайтиПоКоду(Текст) = ПланыСчетов.Хозрасчетный.ПустаяСсылка()
			И ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", Текст) = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
			//СтандартнаяОбработка = Истина;
			Значение = СписокСчетов;
		Иначе
			Если СписокСчетов.НайтиПоЗначению(Текст) = Неопределено
				И СписокСчетов.НайтиПоЗначению(ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", Текст).Код) = Неопределено Тогда 
				Значение = СписокСчетов;
			Иначе
				СтандартнаяОбработка = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СпособНачисленияАмортизацииБУОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МетодНачисленияАмортизацииНУОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПорядокВключенияСтоимостиВСоставРасходовУСНОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура МетодНачисленияАмортизацииНУПриИзменении(Элемент)
	
	Если МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда
		АмортизацияДо2009 = 0;
		ФактическийСрокИспользованияДо2009 = 0;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры








