///////////////////////////////////////////////////////////////////////////////////////////////////
//Переменные

Перем мСтруктураРеквизитовЗаполняемыхПоУмолчанию Экспорт;
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчетаУСН Экспорт; // (Регл)
Перем мУчетнаяПолитика Экспорт;                 // (Общ)
Перем УчетнаяПолитикаНУ Экспорт;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем СтруктРекв Экспорт;
Перем ПоддержкаПБУ18 Экспорт;
Перем мФормаДокумента Экспорт;
Перем мУпрощенныйУчетНДС Экспорт;
Перем мСложныйУчетНДС Экспорт;
Перем мВестиУчетНДС;
Перем УСН Экспорт;
Перем УСН_ДР Экспорт;
Перем Предприниматель Экспорт;
Перем ОСН Экспорт;
Перем УчетнаяПолитикаНеЗадана Экспорт;
Перем СодержаниеПроводки;
Перем СтруктураШапкиДокумента;
Перем Заголовок;

Перем мУчетнаяБУПолитикаПоДатам;
Перем мУчетнаяНУПолитикаПоДатам;

Перем мПодчиненныеДокументы;

Перем мВестиУчетПоВидамДеятельностиПредпринимателя Экспорт;
Перем мРозницаВПродажныхЦенах Экспорт;
Перем мТаблицаУсловий;
Перем мТаблицаУсловийПодчБезКоличества;
Перем мСтруктураОбязательныхРеквизитовПодчКоличество;
Перем мПустаяСтруктура;
Перем мПустаяСтруктураТЧ;
Перем мСписокВидовЦенностейУслуги;

Перем мОценкаМПЗПоСредней Экспорт;
Перем мОтказЗаписи Экспорт;
Перем мОбновитьСодержанияПодчиненныхДокументов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура проверяет корректность заполнения реквизитов шапки документа
//
Процедура ПроверитьЗаполнениеШапки(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	Если НЕ ОтражатьВБухгалтерскомУчете И НЕ ОтражатьВНалоговомУчете И НЕ ОтражатьПоСпециальнымРегистрам Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("У документ должен быть включен хотя бы один из режимов проведения: ""Ввод остатков по бухгалтерскому учету"" и (или) ""Ввод остатков по налоговому учету"" и (или) ""Ввод остатков по специальным регистрам"".", Отказ, Заголовок);
	КонецЕсли;
	
	// Укажем, что надо проверить:
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("РазделУчета"	, "Раздел учета");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураРеквизитов, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента)
	
	СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС", УчетНДС.ПолучитьУПУпрощенныйУчетНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата + 24*60*60));
	СтруктураШапкиДокумента.Вставить("ПроводитьПоПодсистемеНДС", ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата+24*60*60) И Не СтруктураШапкиДокумента.УпрощенныйУчетНДС);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН", ?(СтруктураШапкиДокумента.Свойство("Организация"), НалоговыйУчетУСН.ПрименениеУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата+24*60*60),Ложь));
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеПредпринимателя", Ложь);
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Ложь);
		Если НалоговыйУчетУСН.ПрименениеУСНДоходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата+24*60*60) Тогда
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Истина);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
		Иначе
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
		КонецЕсли;
		Если НЕ ОтражатьВНалоговомУчете Тогда
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
		КонецЕсли;
	Иначе
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);		
		Если СтруктураШапкиДокумента.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеПредпринимателя", ОтражатьВНалоговомУчете);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Ложь);
		Иначе
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеПредпринимателя", Ложь);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", ОтражатьВНалоговомУчете);
		КонецЕсли;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("ПодразделениеОрганизации", ПодразделениеОрганизации);
	
	СтруктураШапкиДокумента.Вставить("ПрименениеПБУ18", Ложь);	
	// Установка флага применения положений ПБУ 18/02.
	Если НалоговыйУчет.ПрименениеПБУ18(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата+24*60*60) Тогда
		СтруктураШапкиДокумента.Вставить("ПрименениеПБУ18", Истина);
	Иначе
		СтруктураШапкиДокумента.Вставить("ПрименениеПБУ18", Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(РазделУчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит ""Раздел учета"", документ не записан.");
		Отказ = Истина;
	КонецЕсли;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		
		Если мОбновитьСодержанияПодчиненныхДокументов = Неопределено Тогда
			мОбновитьСодержанияПодчиненныхДокументов = Ложь;
		КонецЕсли;
		
		Если мОтказЗаписи = Неопределено Тогда
			мОтказЗаписи = Ложь;
		КонецЕсли;
		
		Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			//При отмене проведения документы не создаем
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись 
			И ПометкаУдаления <> Ссылка.ПометкаУдаления Тогда
			//При снятии пометки удаления документы не создаем
		Иначе
			Если ЗначениеЗаполнено(Ссылка) Тогда
				Если НЕ мОбновитьСодержанияПодчиненныхДокументов Тогда
					СформироватьСчетаФактуры(Ложь, Истина, Истина, мОтказЗаписи);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			СинхронизацияСостоянияПодчиненныхДокументов();
		КонецЕсли;
		
	Конецесли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		Отказ = мОтказЗаписи;
		Если НЕ Проведен Тогда
			СинхронизацияСостоянияПодчиненныхДокументов();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)
	
	мФормаДокумента = Неопределено;
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента.Ссылка);
	
	// Проверим правильность заполнения шапки документа	
	ПроверитьЗаполнениеШапки(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата+24*60*60, УчетнаяПолитикаНеЗадана, СтруктураШапкиДокумента.Организация);
	ПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(ЭтотОбъект.Организация, СтруктураШапкиДокумента.Дата+24*60*60);
	УСН = НалоговыйУчетУСН.ПрименениеУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата+24*60*60);
	УСН_ДР = УСН И (НЕ НалоговыйУчетУСН.ПрименениеУСНДоходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата+24*60*60));
	Предприниматель = (СтруктураШапкиДокумента.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И НЕ УСН);
	ОСН = НЕ УСН И НЕ Предприниматель;
	Если УчетнаяПолитикаНеЗадана Тогда
		мВестиУчетПоВидамДеятельностиПредпринимателя = Ложь;
		мРозницаВПродажныхЦенах = Ложь;
		мОценкаМПЗПоСредней = Истина;
		СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоНДС", Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
		Отказ = Истина;
	Иначе
		Если Предприниматель Тогда
			мВестиУчетПоВидамДеятельностиПредпринимателя = мУчетнаяПолитика.ВестиУчетПоВидамДеятельности;
		Иначе
			мВестиУчетПоВидамДеятельностиПредпринимателя = Ложь;
		КонецЕсли;
		мРозницаВПродажныхЦенах = мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
		мОценкаМПЗПоСредней = мУчетнаяПолитика.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней;
		СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоНДС", мУчетнаяПолитика.ПорядокПризнанияРасходовПоНДС);
	КонецЕсли;
	
	СодержаниеПроводки = СодержаниеПроводки(СтруктураШапкиДокумента.РазделУчета);
	
	мУпрощенныйУчетНДС	= Ложь; 
	мСложныйУчетНДС		= Ложь;
	
	Если НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
		Если НЕ УчетнаяПолитикаНеЗадана Тогда
			мУпрощенныйУчетНДС	= УчетНДС.ПолучитьУПУпрощенныйУчетНДС(СтруктураШапкиДокумента.Организация, Дата+24*60*60);
			мСложныйУчетНДС		= мУчетнаяПолитика.СложныйУчетНДС И Не мУчетнаяПолитика.УпрощенныйУчетНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ОтражатьВБухгалтерскомУчете
			ИЛИ ОтражатьВНалоговомУчете
			ИЛИ ОтражатьПоСпециальнымРегистрам Тогда
			
			Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства Тогда
				ОбработкаПроведения_ОсновныеСредства(Отказ);
				
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивыИНИОКР Тогда
				ОбработкаПроведения_НематериальныеАктивыИНИОКР(Отказ);
				
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство Тогда
				ОбработкаПроведения_БухСправка(Отказ);
				
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
				ОбработкаПроведения_Номенклатура(Отказ);
				
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
				ОбработкаПроведения_РасчетыПоНалогамИСборам(Отказ);
				
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
				ОбработкаПроведения_РасчетыСПодотчетнымиЛицами(Отказ);
				
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам Тогда
				ОбработкаПроведения_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(Отказ);
				
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
				ОбработкаПроведения_РасчетыСКонтрагентами(Отказ);
				
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
				ОбработкаПроведения_ТоварыОтгруженные(Отказ);
				
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
				//Отказ = УСН;
				//Если НЕ Отказ Тогда
				ОбработкаПроведения_ОстаткиПоНДС(Отказ);
				//КонецЕсли;
				
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов Тогда
				ОбработкаПроведения_РасходыБудущихПериодов(Отказ);
				
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНИИП Тогда
				НеПроводить = (НЕ УСН_ДР) И (НЕ Предприниматель);
				Если НеПроводить Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для организации """ + СтруктураШапкиДокумента.Организация + """ по разделу учета ""Прочие расходы налогового учета УСН и ИП"" вводить начальные остатки не требуется.");
				Иначе
					ОбработкаПроведения_ПрочиеРасходыНалоговогоУчетаУСНИИП(Отказ);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		СинхронизацияСостоянияПодчиненныхДокументов();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Текст содержания проводки
Функция СодержаниеПроводки(РазделУчета)
	
	СодержаниеТекст = "Остатки по разделу: """ + РазделУчета + """";
	
	Возврат(СодержаниеТекст);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//ОБРАБОТКИ ПРОВЕДЕНИЯ ПО РАЗЛИЧНЫМ РАЗДЕЛАМ

////////////////////////////////////////////////////////////////////////////////
//Общий блок - формирования проводок и движений регистров

Функция ТипСчетаСубконто(Значение, СтрокаБухСправки, НаправлениеПроводки = Неопределено)
	
	Если Значение = 1 Тогда //Тип счета
		Строка = "Счет";
	Иначе //Тип субконто
		Строка = "Субконто";
	КонецЕсли;
	
	СчетУчета = СтрокаБухСправки.СчетУчета;
	ВидСчетаУчета = СчетУчета.Вид;
	Если ВидСчетаУчета = ВидСчета.Активный Тогда
		Строка = Строка + "Дт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда
		Строка = Строка + "Кт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
		Если НаправлениеПроводки = Неопределено Тогда
			Если СтрокаБухСправки.Сумма <> 0 Тогда
				Строка = Строка + "Дт";
			Иначе
				Строка = Строка + "Кт";
			КонецЕсли;
		Иначе
			Строка = Строка + НаправлениеПроводки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

Функция СформироватьПроводкуБух(Операция, СтрокаБухСправки)
	
	СчетУчета = СтрокаБухСправки.СчетУчета;
	ВидСчетаУчета = СчетУчета.Вид;
	
	Проводка = Операция.Добавить();
	Проводка.Период      = СтруктураШапкиДокумента.Дата;
	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание  = СодержаниеПроводки;
	
	Забалансовый = СчетУчета.Забалансовый;
	
	СуммаПроводки = 0;
	Если ВидСчетаУчета = ВидСчета.Активный Тогда
		СуммаПроводки = СтрокаБухСправки.Сумма;
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			Проводка.Сумма       = СуммаПроводки;
		КонецЕсли;
		ОтразитьПоДебету = Истина;
	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда
		ОтразитьПоДебету = Ложь;
		СуммаПроводки = 0;
		Если СтрокаБухСправки.Сумма <> 0 Тогда
			СуммаПроводки       = СтрокаБухСправки.Сумма;
		Иначе
			Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями Тогда
				СуммаПроводки       = СтрокаБухСправки.СуммаКт;
			КонецЕсли;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			Проводка.Сумма       = СуммаПроводки;
		КонецЕсли;
	ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
		СуммаПроводки = 0;
		Если СтрокаБухСправки.Сумма <> 0 
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов 
			ИЛИ (СтрокаБухСправки.СуммаКт = 0 И СтрокаБухСправки.Сумма = 0) Тогда
			СуммаПроводки       = СтрокаБухСправки.Сумма;
			ОтразитьПоДебету = Истина;
		Иначе			
			СуммаПроводки       = СтрокаБухСправки.СуммаКт;
			ОтразитьПоДебету = Ложь;			
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			Проводка.Сумма       = СуммаПроводки;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Если СчетУчета.НалоговыйУчет Тогда
			Если СтруктураШапкиДокумента.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам
				И СтруктураШапкиДокумента.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами
				И СтруктураШапкиДокумента.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
				И СтруктураШапкиДокумента.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
				И СтруктураШапкиДокумента.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
				И СтруктураШапкиДокумента.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
				И СтруктураШапкиДокумента.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям
				И СтруктураШапкиДокумента.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам
				И СтруктураШапкиДокумента.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
				
				Если ОтразитьПоДебету Тогда
					Проводка.СуммаНУДт       = СтрокаБухСправки.СуммаНУ;
				Иначе
					Проводка.СуммаНУКт       = СтрокаБухСправки.СуммаНУ;
				КонецЕсли;
				Если ПоддержкаПБУ18 Тогда
					Если ОтразитьПоДебету Тогда
						Проводка.СуммаПРДт       = СтрокаБухСправки.СуммаПР;
						Проводка.СуммаВРДт       = СтрокаБухСправки.СуммаВР;
					Иначе
						Проводка.СуммаПРКт       = СтрокаБухСправки.СуммаПР;
						Проводка.СуммаВРКт       = СтрокаБухСправки.СуммаВР;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли  СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
				
				Если Дата >= '20070101' Тогда
					Если ОтразитьПоДебету Тогда
						Проводка.СуммаНУДт       = СтрокаБухСправки.СуммаНУ;
					Иначе
						Проводка.СуммаНУКт       = СтрокаБухСправки.СуммаНУ;
					КонецЕсли;
					Если ПоддержкаПБУ18 Тогда
						Если ОтразитьПоДебету Тогда
							Проводка.СуммаПРДт       = Проводка.Сумма - СтрокаБухСправки.СуммаНУ;
							Проводка.СуммаВРДт       = 0;
						Иначе
							Проводка.СуммаПРКт       = Проводка.Сумма - СтрокаБухСправки.СуммаНУ;
							Проводка.СуммаВРКт       = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам Тогда
				
				Если ОтразитьПоДебету Тогда
					Проводка.СуммаНУДт       = СуммаПроводки;
				Иначе
					Проводка.СуммаНУКт       = СуммаПроводки;
				КонецЕсли;
				Если ПоддержкаПБУ18 Тогда
					Если ОтразитьПоДебету Тогда
						Проводка.СуммаПРДт       = 0;
						Проводка.СуммаВРДт       = 0;
					Иначе
						Проводка.СуммаПРКт       = 0;
						Проводка.СуммаВРКт       = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтразитьПоДебету Тогда
		Проводка.СчетДт = СчетУчета;
		Если НЕ Забалансовый Тогда
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
		КонецЕсли;
		Если СчетУчета.Валютный Тогда
			Проводка.ВалютаДт = СтрокаБухСправки.Валюта;
			Проводка.ВалютнаяСуммаДт = СтрокаБухСправки.ВалютнаяСумма;
		КонецЕсли;
		Если СчетУчета.Количественный Тогда
			Проводка.КоличествоДт = СтрокаБухСправки.Количество;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");

	Иначе
		Проводка.СчетКт = СчетУчета;
		Если НЕ Забалансовый Тогда
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
		КонецЕсли;
		Если СчетУчета.Валютный Тогда
			Проводка.ВалютаКт = СтрокаБухСправки.Валюта;
			Проводка.ВалютнаяСуммаКт = СтрокаБухСправки.ВалютнаяСумма;
		КонецЕсли;
		Если СчетУчета.Количественный Тогда
			Проводка.КоличествоКт = СтрокаБухСправки.Количество;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Кт");

	КонецЕсли;
	
	Возврат Проводка;
	
КонецФункции

Функция СобратьТаблицыРасходов(МассивТаблиц)
	
	ИтоговаяТаблица = Движения.РасходыПриУСН.ВыгрузитьКолонки();
	
	Для Каждого Таблица Из МассивТаблиц Цикл
		Для Каждого Строка Из Таблица Цикл
			Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
				Если Строка.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам Тогда
				Если Строка.Сумма <= 0 Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда	
				Если Строка.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если НЕ Таблица.Колонки.Найти("Контрагент") = Неопределено Тогда
				Если ТипЗнч(Строка.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
					Строка.ДоговорКонтрагента = Строка.Контрагент;
				КонецЕсли;
			Иначе
				Если НЕ Таблица.Колонки.Найти("РасчетныйДокумент") = Неопределено Тогда
					Если ЗначениеЗаполнено(Строка.РасчетныйДокумент) Тогда
						Если Строка.РасчетныйДокумент.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
							Строка.ДоговорКонтрагента = Строка.РасчетныйДокумент.ДоговорКонтрагента;
						ИначеЕсли Строка.РасчетныйДокумент.Метаданные().Реквизиты.Найти("ФизЛицо") <> Неопределено Тогда
							Строка.ДоговорКонтрагента = Строка.РасчетныйДокумент.ФизЛицо;
						ИначеЕсли Строка.РасчетныйДокумент.Метаданные().Реквизиты.Найти("Конрагент") <> Неопределено Тогда
							Строка.ДоговорКонтрагента = Строка.РасчетныйДокумент.Конрагент;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока = ИтоговаяТаблица.Добавить();
			Для Каждого Кол Из Таблица.Колонки Цикл
				Если ПустаяСтрока(Кол.Имя) ИЛИ Кол.Имя = "QuieryId" 
					ИЛИ Кол.Имя = "Контрагент" ИЛИ Кол.Имя = "ВидыСубконто" 
					ИЛИ Кол.Имя = "ВидЗадолженности" Тогда
					Продолжить;
				КонецЕсли; 
				НоваяСтрока[Кол.Имя] = Строка[Кол.Имя];
			КонецЦикла;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		КонецЦикла;
	КонецЦикла;
	
	//Недостающие поля.
	ИтоговаяТаблица.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ИтоговаяТаблица.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "Период");
	ИтоговаяТаблица.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "Регистратор");
	ИтоговаяТаблица.ЗаполнитьЗначения(Истина, "Активность");
	
	Возврат ИтоговаяТаблица;
	
КонецФункции

Функция СобратьТаблицыВзаиморасчетов(МассивТаблиц)
	
	ИтоговаяТаблица = Движения.ПрочиеРасчеты.ВыгрузитьКолонки();
	
	Для Каждого Таблица Из МассивТаблиц Цикл
		Если Таблица.Колонки.Найти("РасчетныйДокумент") = Неопределено Тогда
			Таблица.Колонки.Добавить("РасчетныйДокумент");
			Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
				Таблица.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "РасчетныйДокумент");
			Иначе
				Таблица.ЗаполнитьЗначения(Неопределено, "РасчетныйДокумент");
			КонецЕсли;
		КонецЕсли;
		Если Таблица.Колонки.Найти("ОтразитьПоДебету") = Неопределено Тогда
			Таблица.Колонки.Добавить("ОтразитьПоДебету");
			Таблица.ЗаполнитьЗначения(Истина, "ОтразитьПоДебету");
		КонецЕсли;
		Если Таблица.Колонки.Найти("Работник") <> Неопределено Тогда
			Таблица.Колонки.Работник.Имя = "Контрагент";
		КонецЕсли;

		
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам 
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
			Для Каждого Строка Из Таблица Цикл
				Если Строка.СуммаВзаиморасчетовКт <> 0 Тогда
					Строка.СуммаВзаиморасчетов = Строка.СуммаВзаиморасчетовКт;
					Строка.ОтразитьПоДебету = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Строка Из Таблица Цикл
			
			Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам Тогда
				Если Строка.СуммаВзаиморасчетов = 0 Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли;
			
			НоваяСтрока = ИтоговаяТаблица.Добавить();
			Для Каждого Кол Из Таблица.Колонки Цикл
				Если ПустаяСтрока(Кол.Имя) ИЛИ Кол.Имя = "QuieryId" 
					ИЛИ Кол.Имя = "ВидЗадолженности" ИЛИ Кол.Имя = "ОтразитьПоДебету"
					ИЛИ Кол.Имя = "СуммаВзаиморасчетовКт" Тогда
					Продолжить;
				ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам
					ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
					ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
					ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам
					ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
					Если Кол.Имя = "ДоговорКонтрагента" Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				КолИмя = ?(Кол.Имя = "СуммаВзаиморасчетов", "Сумма",Кол.Имя);
				НоваяСтрока[КолИмя] = Строка[Кол.Имя];
			КонецЦикла;
			Если СтруктураШапкиДокумента.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам Тогда
				
				ВидСчетаУчета = Строка.СчетУчета.Вид;
				
				Если ВидСчетаУчета = ВидСчета.Активный Тогда
					ОтразитьПоДебету = Истина;
				ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда
					ОтразитьПоДебету = Ложь;
				ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
					Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами
						ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам
						ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
						ОтразитьПоДебету = Строка.ОтразитьПоДебету;
					КонецЕсли;
				КонецЕсли;
				
				Если ОтразитьПоДебету Тогда
					НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
				Иначе
					НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
				КонецЕсли;
			Иначе
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//Недостающие поля.
	ИтоговаяТаблица.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ИтоговаяТаблица.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "Период");
	ИтоговаяТаблица.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "Регистратор");
	ИтоговаяТаблица.ЗаполнитьЗначения(Истина, "Активность");
	
	Возврат ИтоговаяТаблица;
	
КонецФункции

Процедура ДвиженияПоРегиструРасходовУСН(ТаблицаРасходы, Отказ)
	
	//ПО РЕГИСТРУ РАСХОДОВ УСН
	
	ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	Если ВыделятьНДСУСН Тогда
		Для Каждого СтрокаТаблицыРасходы ИЗ ТаблицаРасходы Цикл
			СтрокаТаблицыРасходы.Сумма = СтрокаТаблицыРасходы.Сумма - СтрокаТаблицыРасходы.НДС;
		КонецЦикла;
	КонецЕсли;
	
	Движения.РасходыПриУСН.Очистить();
	НаборДвижений = Движения.РасходыПриУСН;
	НаборДвижений.мПериод            = СтруктураШапкиДокумента.Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаРасходы;
	
	Если Не Отказ Тогда
		Движения.РасходыПриУСН.ВыполнитьПриход();
		НаборДвижений.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструВзаиморасчетовУСН(ТаблицаВзаиморасчеты, Отказ)
	
	//ПО ВЗАИМОРАСЧЕТАМ УСН
	НаборДвижений = Движения.ПрочиеРасчеты;
	НаборДвижений.мПериод            = СтруктураШапкиДокумента.Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаВзаиморасчеты;
	
	Если Не Отказ Тогда
		Движения.ПрочиеРасчеты.ВыполнитьДвижения();
		НаборДвижений.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

// {УчетДоходовИРасходовИП
Процедура ДвиженияПоРегиструИП(РежимПроведения, ТаблЧасть, ИмяРегистра, ВидДвижения, МПЗ = Ложь, Поставщик = Ложь, Покупатель = Ложь)
	
	//Сначала соберем данные таблицы в соответствии со структурой регистров
	
	Для Каждого СтрокаТЧ Из ТаблЧасть Цикл
		
		Движение = Движения[ИмяРегистра].Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТЧ);
		
		Если мУчетнаяПолитика.ВестиУчетПоВидамДеятельности Тогда
			Движение.НоменклатурнаяГруппа = СтрокаТЧ.НоменклатурнаяГруппа;
			Движение.ХарактерДеятельности = СтрокаТЧ.ХарактерДеятельности;
			
		Иначе
			Движение.НоменклатурнаяГруппа = мУчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа;
			Движение.ХарактерДеятельности = мУчетнаяПолитика.ОсновнойХарактерДеятельности;
		КонецЕсли;
		
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация = СтруктураШапкиДокумента.Организация;
		
		Если ВидДвижения <> Неопределено Тогда
			Движение.ВидДвижения = ВидДвижения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
// }УчетДоходовИРасходовИП

////////////////////////////////////////////////////////
//Движения по регистрам партий НДС

Процедура ДвиженияПоРегистрамПартийНДС_Номенклатура(ТаблицаДанных, Отказ)
	
	ПроверитьЗаполнениеТабЧастиНДС(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
		ТаблицаДокумента = ПодготовитьТаблицуДвиженийДокументаНДСПоГотовойПродукции(Отказ);
	Иначе
		ТаблицаДокумента = ПодготовитьТаблицуДвиженийДокументаНДС(Отказ);
	КонецЕсли;
	
	мВестиУчетНДС = УчетНДС.ПроводитьПоРазделуУчетаНДС(СтруктураШапкиДокумента.Дата);
	
	Если Не Отказ Тогда
				
		ДвиженияПоРегистрамНДС(ТаблицаДокумента, Отказ);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабЧастиНДС(Отказ);
	
	БУ = ПланыСчетов.Хозрасчетный.Товары.ПолучитьОбъект();
	ВестиПартионныйУчетБУ = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	//проверка заполнения обязательных реквизитов
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
		Возврат;
	КонецЕсли; 
	
	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная);
	                                                                           
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("СсылкаВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["Номенклатура"]);
	Запрос.УстановитьПараметр("СписокВидовЦенностейУслуги", мСписокВидовЦенностейУслуги);
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводНачальныхОстатковДанныеПоСФ.Ключ,
	|	ВводНачальныхОстатковДанныеПоСФ.Количество КАК Количество,
	|	ВводНачальныхОстатковДанныеПоСФ.Ссылка
	|ПОМЕСТИТЬ ТЧПоСФ
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоСФ КАК ВводНачальныхОстатковДанныеПоСФ
	|ГДЕ
	|	(НЕ ВводНачальныхОстатковДанныеПоСФ.ВидЦенности В (&СписокВидовЦенностейУслуги))
	|	И ВводНачальныхОстатковДанныеПоСФ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ТЧПоСФ.Количество), 0) КАК Количество,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Количество КАК КоличествоПоПартии,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.НомерСтрокиТЧ КАК НомерСтроки,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Партия,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.СчетУчета,
	|	ВЫБОР
	|		КОГДА СУММА(ТЧПоСФ.Количество) ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПроверятьПартииНДС
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МПЗПриобретенные КАК ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЧПоСФ КАК ТЧПоСФ
	|		ПО ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Ключ = ТЧПоСФ.Ключ
	|ГДЕ
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Ссылка = &Ссылка
	|	И (НЕ ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.СчетУчета В (&СчетаИсключения))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Количество,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.НомерСтрокиТЧ,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Партия,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.СчетУчета";
		
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МПЗПриобретенные", "МПЗОтгруженные");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НомерСтрокиТЧ", "НомерСтроки");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из Результат Цикл
		Если Строка.ПроверятьПартииНДС Тогда
			Если Строка.Количество <> Строка.КоличествоПоПартии Тогда
				СтрокаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
				""" табличной части: Количество по партии не соответствует количеству по счетам-фактурам (табличная часть ""Данные по счетам-фактурам"")";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщенияОбОшибке, Отказ, Заголовок);
			КонецЕсли; 
		КонецЕсли; 
		
		//Если НЕ ЗначениеЗаполнено(Строка.Партия) и ВестиПартионныйУчетБУ Тогда
		//	СтрокаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
		//								   """ табличной части: Не заполнена партия, возможно расхождение данных с бухгалтерским учетом.";
		//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщенияОбОшибке, , Заголовок, СтатусСообщения.Информация);
		//КонецЕсли; 
			

	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабЧастиНДС()

Функция ПодготовитьТаблицуДвиженийДокументаНДС(Отказ)
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		ИмяТЧ = "МПЗОтгруженные";
	Иначе
		ИмяТЧ = "МПЗПриобретенные";
	КонецЕсли;
	
	ТаблицаДокумента = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("СсылкаВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["Номенклатура"]);
    Запрос.УстановитьПараметр("СписокВидовЦенностейУслуги", мСписокВидовЦенностейУслуги);                          

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Номенклатура,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.СчетУчета,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Партия," + ?(ИмяТЧ = "МПЗПриобретенные","
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Склад,", "         
	|") + "
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.СчетФактура,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.ВидЦенности,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.НДСВключенВСтоимость,
	|	ВЫБОР
	|		КОГДА ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.ВидЦенности В (&СписокВидовЦенностейУслуги)
	|			ТОГДА 0
	|		ИНАЧЕ ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Количество
	|	КОНЕЦ КАК Количество,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Стоимость,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.СчетУчетаНДС,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.СтавкаНДС,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.НДС,
	|	Хозрасчетный.ВидыСубконто.(
	|		ВидСубконто
	|	)
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоСФ КАК ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатков." +ИмяТЧ + " КАК ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|			ПО ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.СчетУчета = Хозрасчетный.Ссылка
	|		ПО (ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Ключ = ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Ключ)
	|ГДЕ
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Ссылка = &Ссылка
	|	И ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Ссылка = &Ссылка
	|	И Хозрасчетный.ВидыСубконто.ВидСубконто = &СсылкаВидСубконто";
	
	ТаблицаДокумента = Запрос.Выполнить().Выгрузить();
	
	Если ИмяТЧ = "МПЗОтгруженные" Тогда
		ТаблицаДокумента.Колонки.Добавить("Склад");
		ТаблицаДокумента.ЗаполнитьЗначения(Справочники.Склады.ПустаяСсылка(), "Склад");
	КонецЕсли;
	
	Запрос.Текст = 
    "ВЫБРАТЬ
    |	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Номенклатура,
    |	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.СчетУчета,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Партия," + ?(ИмяТЧ = "МПЗПриобретенные","
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Склад,", "         
	|") + "
    |	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Количество,
    |	Хозрасчетный.ВидыСубконто.(
    |		ВидСубконто
    |	)
    |ИЗ
    |	Документ.ВводНачальныхОстатков." +ИмяТЧ + " КАК ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям
    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатков.ДанныеПоСФ КАК ВводНачальныхОстатковДанныеПоСФ
    |		ПО ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Ключ = ВводНачальныхОстатковДанныеПоСФ.Ключ
    |			И ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Ссылка = ВводНачальныхОстатковДанныеПоСФ.Ссылка
    |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
    |		ПО ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.СчетУчета = Хозрасчетный.Ссылка
    |ГДЕ
    |	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Ссылка = &Ссылка
    |	И Хозрасчетный.ВидыСубконто.ВидСубконто = &СсылкаВидСубконто
    |	И ВводНачальныхОстатковДанныеПоСФ.Ключ ЕСТЬ NULL ";
	
	ТаблицаДокументаБезПартий = Запрос.Выполнить().Выгрузить();
	
	Если ИмяТЧ = "МПЗОтгруженные" Тогда
		ТаблицаДокументаБезПартий.Колонки.Добавить("Склад");
		ТаблицаДокументаБезПартий.ЗаполнитьЗначения(Справочники.Склады.ПустаяСсылка(), "Склад");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыДокументаБезПартий ИЗ ТаблицаДокументаБезПартий Цикл
		НоваяСтрокаТаблицы = ТаблицаДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаТаблицыДокументаБезПартий);
	КонецЦикла;
	
	ПустаяПартия = Документы.Партия.ПустаяСсылка();
	Для каждого СтрокаТаблицыДокумента Из ТаблицаДокумента Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДокумента.Партия) Тогда
			СтрокаТаблицыДокумента.Партия = ПустаяПартия;
		КонецЕсли;
		
		БУ = СтрокаТаблицыДокумента.СчетУчета.ПолучитьОбъект();
		ВестиСкладскойУчетБУ  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
		Если ВестиСкладскойУчетБУ Тогда
			ВестиСуммовойУчетПоСкладамБУ = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой;
		Иначе
			ВестиСуммовойУчетПоСкладамБУ = Ложь;
		КонецЕсли;
		
		Если Не ВестиСуммовойУчетПоСкладамБУ Тогда
			СтрокаТаблицыДокумента.Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ТаблицаДокумента;
	
КонецФункции

Функция ПодготовитьТаблицуДвиженийДокументаНДСПоГотовойПродукции(Отказ)
	
	ТаблицаДокумента = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("СсылкаВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["Номенклатура"]);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Номенклатура,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.СчетУчета,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Партия,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Склад,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Количество
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МПЗПриобретенные КАК ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям
	|ГДЕ
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Ссылка = &Ссылка
	|	";
	
	ТаблицаДокумента = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДокумента.Колонки.Добавить("ВидЦенности");
	ТаблицаДокумента.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.Товары, "ВидЦенности");
	
	ПустаяПартия = Документы.Партия.ПустаяСсылка();
	Для каждого СтрокаТаблицыДокумента Из ТаблицаДокумента Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДокумента.Партия) Тогда
			СтрокаТаблицыДокумента.Партия = ПустаяПартия;
		КонецЕсли;
		
		БУ = СтрокаТаблицыДокумента.СчетУчета.ПолучитьОбъект();
		ВестиСкладскойУчетБУ  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
		Если ВестиСкладскойУчетБУ Тогда
			ВестиСуммовойУчетПоСкладамБУ = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой;
		Иначе
			ВестиСуммовойУчетПоСкладамБУ = Ложь;
		КонецЕсли;
		
		Если Не ВестиСуммовойУчетПоСкладамБУ Тогда
			СтрокаТаблицыДокумента.Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ТаблицаДокумента;
	
КонецФункции

Процедура ДвиженияПоРегистрамНДС(ТаблицаДокумента, Отказ)

	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДокумента.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений = ЭтотОбъект.Движения.НДСПоПриобретеннымЦенностям.Выгрузить();
	ТаблицаДвижений.Очистить();
	ТаблицаДокумента.Колонки.Добавить("Организация");
	ТаблицаДокумента.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДокумента,ТаблицаДвижений);
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
		ЭтотОбъект.Движения.НДСПоПриобретеннымЦенностям.мПериод          = СтруктураШапкиДокумента.Дата;
		ЭтотОбъект.Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвижений;

		ЭтотОбъект.Движения.НДСПоПриобретеннымЦенностям.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

//*****************************************************************************************************************************
// ПО ТАБЛИЦЕ БУХГАЛТЕРСКАЯ СПРАВКА (ПРОЧИЕ СЧЕТА УЧЕТА)

Процедура ОбработкаПроведения_БухСправка(Отказ)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ФормированиеПроводокБух_БухСправка(БухСправка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_БухСправка(БухСправка)
	
	Операция = Движения.Хозрасчетный;
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		Если СтрокаБухСправки.Сумма = 0 И СтрокаБухСправки.Количество = 0 И СтрокаБухСправки.СуммаКт = 0 
			И СтрокаБухСправки.СуммаНУ = 0 И СтрокаБухСправки.СуммаПР = 0 И СтрокаБухСправки.СуммаВР = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		СчетУчета = СтрокаБухСправки.СчетУчета;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);
		
		ЧислоАктивныхСубконто = СчетУчета.ВидыСубконто.Количество();
		
		НаправлениеПроводки = Неопределено;
		
		ВидСчетаУчета = СчетУчета.Вид;
		Если ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
			Если СтрокаБухСправки.Сумма = 0 И СтрокаБухСправки.СуммаКт = 0 Тогда
				НаправлениеПроводки = "Дт"
			КонецЕсли;
		КонецЕсли;
	
		Для Сч = 1 По ЧислоАктивныхСубконто Цикл
			БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки, НаправлениеПроводки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки, НаправлениеПроводки)], Сч, СтрокаБухСправки["Субконто"+Сч]);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//*****************************************************************************************************************************
// РАСЧЕТЫ ПО НАЛОГАМ И СБОРАМ

Процедура ОбработкаПроведения_РасчетыПоНалогамИСборам(Отказ)
	
	ПроверитьЗаполнениеТабличнойЧасти_РасчетыПоНалогамИСборам(Отказ);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ФормированиеПроводокБух_РасчетыПоНалогамИСборам(РасчетыПоНалогамИСборам);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		ДвиженияПоРегистрамУСН_РасчетыПоНалогамИСборам(РасчетыПоНалогамИСборам, Отказ);
	// {УчетДоходовИРасходовИП
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		ДвиженияПоРегистрамИП_РасчетыПоНалогамИСборам(РасчетыПоНалогамИСборам, Отказ);
	// }УчетДоходовИРасходовИП
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти_РасчетыПоНалогамИСборам(Отказ)
	
	СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета");
	Если УСН_ДР Тогда
		СтруктураОбязательныхРеквизитов.Вставить("ОтражениеВУСН");
	ИначеЕсли Предприниматель Тогда
		СтруктураОбязательныхРеквизитов.Вставить("СтатьяЗатрат");
		Если мВестиУчетПоВидамДеятельностиПредпринимателя Тогда
			СтруктураОбязательныхРеквизитов.Вставить("НоменклатурнаяГруппа");
			СтруктураОбязательныхРеквизитов.Вставить("ХарактерДеятельности");
		КонецЕсли;
	КонецЕсли;
	мТаблицаУсловий.Очистить();
	НовоеУсловие = мТаблицаУсловий.Добавить();
	НовоеУсловие.ИмяРеквизита = "СчетУчета";
	НовоеУсловие.ВидСравнения = "В";
	НовоеУсловие.УсловиеОбъединения = "И ";
	СписокСчетов = Новый СписокЗначений();
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_УСН);
	НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
	ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "РасчетыПоНалогамИСборам", , мТаблицаУсловий);
	
	СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, ВидПлатежаВБюджет, УровеньБюджета");
	Если УСН_ДР Тогда
		СтруктураОбязательныхРеквизитов.Вставить("ОтражениеВУСН");
	ИначеЕсли Предприниматель Тогда
		СтруктураОбязательныхРеквизитов.Вставить("СтатьяЗатрат");
		Если мВестиУчетПоВидамДеятельностиПредпринимателя Тогда
			СтруктураОбязательныхРеквизитов.Вставить("НоменклатурнаяГруппа");
			СтруктураОбязательныхРеквизитов.Вставить("ХарактерДеятельности");
		КонецЕсли;
	КонецЕсли;
	мТаблицаУсловий.Очистить();
	НовоеУсловие = мТаблицаУсловий.Добавить();
	НовоеУсловие.ИмяРеквизита = "СчетУчета";
	НовоеУсловие.ВидСравнения = "В";
	НовоеУсловие.УсловиеОбъединения = "И ";
	СписокСчетов = Новый СписокЗначений();
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСБюджетом);
	НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
	ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "РасчетыПоНалогамИСборам", , мТаблицаУсловий);
	
	СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, ВидПлатежаВБюджет");
	Если УСН_ДР Тогда
		СтруктураОбязательныхРеквизитов.Вставить("ОтражениеВУСН");
	ИначеЕсли Предприниматель Тогда
		СтруктураОбязательныхРеквизитов.Вставить("СтатьяЗатрат");
		Если мВестиУчетПоВидамДеятельностиПредпринимателя Тогда
			СтруктураОбязательныхРеквизитов.Вставить("НоменклатурнаяГруппа");
			СтруктураОбязательныхРеквизитов.Вставить("ХарактерДеятельности");
		КонецЕсли;
	КонецЕсли;
	мТаблицаУсловий.Очистить();
	НовоеУсловие = мТаблицаУсловий.Добавить();
	НовоеУсловие.ИмяРеквизита = "СчетУчета";
	НовоеУсловие.ВидСравнения = "В";
	НовоеУсловие.УсловиеОбъединения = "И НЕ";
	СписокСчетов = Новый СписокЗначений();
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_УСН);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСБюджетом);
	НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
	ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "РасчетыПоНалогамИСборам", , мТаблицаУсловий);
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_РасчетыПоНалогамИСборам(БухСправка)
	
	Операция = Движения.Хозрасчетный;
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		Если СтрокаБухСправки.Сумма = 0 И СтрокаБухСправки.СуммаКт = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "ВидыПлатежейВГосБюджет", СтрокаБухСправки["ВидПлатежаВБюджет"]);
		БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "УровниБюджетов", СтрокаБухСправки["УровеньБюджета"]);
		// {ОбособленныеПодразделения
		БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "РегистрацияВИФНС", СтрокаБухСправки["РегистрацияВИФНС"]);
		// }ОбособленныеПодразделения 
		
	КонецЦикла;
	
КонецПроцедуры

// {УчетДоходовИРасходовИП
////////////////////////////////////////////////////////
//Движения по регистрам ПБОЮЛ

Процедура ДвиженияПоРегистрамИП_РасчетыПоНалогамИСборам(ТаблицаДанных, Отказ)

	РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	
	ИмяТабличнойЧасти = "РасчетыПоНалогамИСборам";
	
	Если НЕ Отказ Тогда
		ТабМПЗ = ПолучитьТабличнуюЧастьБюджетПереплата();
		ДвиженияПоРасчетамСБюджетом(РежимПроведения, ТабМПЗ,ВидДвиженияНакопления.Расход);
	Иначе
		Возврат;
	КонецЕсли;
	
	СтруктураОбязательныхПолей = Новый Структура("СчетУчета,СтатьяЗатрат");
	Если мУчетнаяПолитика.ВестиУчетПоВидамДеятельности Тогда
		СтруктураОбязательныхПолей.Вставить("НоменклатурнаяГруппа");
		СтруктураОбязательныхПолей.Вставить("ХарактерДеятельности");
	КонецЕсли;
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ТабМПЗ = ПолучитьТабличнуюЧастьБюджетЗадолженность();
		ДвиженияПоРасчетамСБюджетомРасходы(РежимПроведения, ТабМПЗ);
		
		ТабМПЗ.Свернуть("СчетУчета", "Сумма");
		ДвиженияПоРасчетамСБюджетом(РежимПроведения, ТабМПЗ, ВидДвиженияНакопления.Приход);
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРасчетамСБюджетом(РежимПроведения, ТаблЧасть, ВидДвижения)
	
	Для Каждого СтрокаТЧ Из ТаблЧасть Цикл
		
		Движение					= Движения.ПрочиеРасчеты.Добавить();
		Движение.ВидДвижения		= ВидДвижения;
		Движение.Период				= СтруктураШапкиДокумента.Дата;
		Движение.Организация		= СтруктураШапкиДокумента.Организация;
		Движение.РасчетныйДокумент	= СтруктураШапкиДокумента.Ссылка;
		Движение.СчетУчета			= СтрокаТЧ.СчетУчета;
		Движение.Сумма				= СтрокаТЧ.Сумма;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДвиженияПоРасчетамСБюджетомРасходы(РежимПроведения, ТаблЧасть)
	
	Для Каждого СтрокаТЧ Из ТаблЧасть Цикл
		
		Движение					= Движения.ИППрочиеРасходы.Добавить();
		Движение.Период				= СтруктураШапкиДокумента.Дата;
		Движение.Организация		= СтруктураШапкиДокумента.Организация;
		Движение.РасчетныйДокумент	= СтруктураШапкиДокумента.Ссылка;
		
		Если мУчетнаяПолитика.ВестиУчетПоВидамДеятельности Тогда
			Движение.НоменклатурнаяГруппа = СтрокаТЧ.НоменклатурнаяГруппа;
			Движение.ХарактерДеятельности = СтрокаТЧ.ХарактерДеятельности;
			
		Иначе
			Движение.НоменклатурнаяГруппа = мУчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа;
			Движение.ХарактерДеятельности = мУчетнаяПолитика.ОсновнойХарактерДеятельности;
		КонецЕсли;
		
		Движение.СтатьяЗатрат = СтрокаТЧ.СтатьяЗатрат;
		
		Движение.СчетУчета = СтрокаТЧ.СчетУчета;
		Движение.Сумма = СтрокаТЧ.Сумма;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТабличнуюЧастьБюджетПереплата()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Бюджет.СчетУчета,
	|	Бюджет.Сумма КАК Сумма
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоНалогамИСборам КАК Бюджет
	|ГДЕ
	|	Бюджет.Ссылка = &Ссылка
	|	И Бюджет.СуммаКт = 0";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПолучитьТабличнуюЧастьБюджетЗадолженность()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("НДФЛ", 	ПланыСчетов.Хозрасчетный.НДФЛ.Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Бюджет.СчетУчета,
	|	Бюджет.СуммаКт КАК Сумма,
	|	Бюджет.СтатьяЗатрат,
	|	Бюджет.НоменклатурнаяГруппа,
	|	Бюджет.ХарактерДеятельности
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоНалогамИСборам КАК Бюджет
	|ГДЕ
	|	Бюджет.Ссылка = &Ссылка
	|	И (НЕ Бюджет.СчетУчета = &НДФЛ)
	|	И Бюджет.Сумма = 0";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции
// }УчетДоходовИРасходовИП

////////////////////////////////////////////////////////
//Движения по регистрам УСН

Процедура ДвиженияПоРегистрамУСН_РасчетыПоНалогамИСборам(ТаблицаДанных, Отказ)
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Очистить();
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("СчетУчета", 			"СчетУчета");
	СтруктураПолей.Вставить("ДоговорКонтрагента", 	"СчетУчета");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов", 	"Сумма");
	СтруктураПолей.Вставить("СуммаВзаиморасчетовКт", 	"СуммаКт");
	
	МассивТаблиц.Добавить(ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасчетыПоНалогамИСборам", СтруктураПолей).Выгрузить());
	
	//Подготовим таблицу движений регистра взаиморасчетов УСН
	ТаблицаВзаиморасчеты = СобратьТаблицыВзаиморасчетов(МассивТаблиц);

	МассивТаблиц.Очистить();
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "РасходыНалоги".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("СчетУчета", 			"СчетУчета");
	СтруктураПолей.Вставить("ОтражениеВУСН", 		"ОтражениеВУСН");
	СтруктураПолей.Вставить("Сумма", 	"СуммаКт");
	СтруктураПолей.Вставить("РасчетныйДокумент", 	"Ссылка");
	
	ВременнаяТаблица = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасчетыПоНалогамИСборам", СтруктураПолей).Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("ВидРасхода");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.Налоги, "ВидРасхода");
	ВременнаяТаблица.Колонки.Добавить("СтатусыОплатыРасходовУСН");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.СтатусыРасходовУСН.НеОплачено, "СтатусыОплатыРасходовУСН");
	ВременнаяТаблица.Колонки.Добавить("Валюта");
	ВременнаяТаблица.ЗаполнитьЗначения(Константы.ВалютаРегламентированногоУчета.Получить(), "Валюта");
	МассивТаблиц.Добавить(ВременнаяТаблица);
	
	//Подготовим таблицу движений регистра взаиморасчетов УСН
	ТаблицаРасходы = СобратьТаблицыРасходов(МассивТаблиц);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам_РасчетыПоНалогамИСборам(ТаблицаВзаиморасчеты, ТаблицаРасходы, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам_РасчетыПоНалогамИСборам(ТаблицаВзаиморасчеты, ТаблицаРасходы, Отказ)
	
	//ПО ВЗАИМОРАСЧЕТАМ УСН
	ДвиженияПоРегиструВзаиморасчетовУСН(ТаблицаВзаиморасчеты, Отказ);
	
	//ПО РЕГИСТРУ РАСХОДОВ УСН
	ДвиженияПоРегиструРасходовУСН(ТаблицаРасходы, Отказ);
	
КонецПроцедуры

//*****************************************************************************************************************************
// ОСТАТКИ НОМЕНКЛАТУРЫ

Процедура ОбработкаПроведения_Номенклатура(Отказ)
	
	ПроверитьЗаполнениеТабличнойЧасти_Номенклатура(Отказ);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ФормированиеПроводокБух_Номенклатура(МПЗПриобретенные);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		ДвиженияПоРегистрамУСН_Номенклатура(МПЗПриобретенные, Отказ);
	// {УчетДоходовИРасходовИП
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		ДвиженияПоРегистрамИП_Номенклатура(МПЗПриобретенные, Отказ);
	// }УчетДоходовИРасходовИП
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
		Если (НЕ мУпрощенныйУчетНДС И мСложныйУчетНДС) ИЛИ (НЕ мУпрощенныйУчетНДС И СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения) Тогда
			Если СтруктураШапкиДокумента.ОтражатьПоСпециальнымРегистрам Тогда
				ДвиженияПоРегистрамПартийНДС_Номенклатура(МПЗПриобретенные, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти_Номенклатура(Отказ)
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
		
		Если УСН_ДР Тогда
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, Количество, Партия, РасчетныйДокумент, СтатусыОплатыРасходовУСН, ОтражениеВУСН, Валюта");
		ИначеЕсли Предприниматель Тогда
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, Количество, Партия");
		Иначе
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, Количество");
			Если НЕ мОценкаМПЗПоСредней Тогда
				СтруктураОбязательныхРеквизитов.Вставить("Партия");
			КонецЕсли;
		КонецЕсли;
		
		Если УправлениеЗапасамиПартионныйУчет.ВедетсяУчетПоСкладам (ПланыСчетов.Хозрасчетный.СырьеИМатериалы) Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Склад");
		КонецЕсли;
		
		//Проверка материалов на складах
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		Если мСложныйУчетНДС И НЕ УСН Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Партия");
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ, НомерСтрокиТЧ, ВидЦенности");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Материалы на складе", мТаблицаУсловий, СтруктураОбязательныхРеквизитовПодч, "ДанныеПоСФ", "Данные по счетам-фактурам");
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Материалы на складе", мТаблицаУсловий);
		КонецЕсли;
		
		//Поверка материалов в переработке
		Если СтруктураОбязательныхРеквизитов.Свойство("Склад") Тогда
			СтруктураОбязательныхРеквизитов.Удалить("Склад");
		КонецЕсли;
		СтруктураОбязательныхРеквизитов.Вставить("Контрагент");
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		Если мСложныйУчетНДС И НЕ УСН Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ, НомерСтрокиТЧ, ВидЦенности");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Материалы переданные в переработку (счет 10.7)", мТаблицаУсловий, СтруктураОбязательныхРеквизитовПодч, "ДанныеПоСФ", "Данные по счетам-фактурам");
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Материалы переданные в переработку (счет 10.7)", мТаблицаУсловий);
		КонецЕсли;
		
		//Поверка материалов в эксплуатации
		СтруктураОбязательныхРеквизитов.Удалить("Контрагент");
		СтруктураОбязательныхРеквизитов.Вставить("СпецМатериалНазначениеИспользования");
		СтруктураОбязательныхРеквизитов.Вставить("СпецМатериалПартияМатериалаВЭксплуатации");
		СтруктураОбязательныхРеквизитов.Вставить("СпецМатериалПодразделениеФизЛицо");
		СтруктураОбязательныхРеквизитов.Вставить("СпецМатериалПервоначальнаяСтоимость");
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		
		Если мСложныйУчетНДС И НЕ УСН Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ, НомерСтрокиТЧ, ВидЦенности");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Спецодежда и спецоснастка в эксплуатации (счет 10.11)", мТаблицаУсловий, СтруктураОбязательныхРеквизитовПодч, "ДанныеПоСФ", "Данные по счетам-фактурам");
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Спецодежда и спецоснастка в эксплуатации (счет 10.11)", мТаблицаУсловий);
		КонецЕсли;
		
		//Поверка материалов в эксплуатации
		СтруктураОбязательныхРеквизитов.Удалить("СпецМатериалПодразделениеФизЛицо");
		СтруктураОбязательныхРеквизитов.Вставить("СпецМатериалНазначениеИспользования");
		СтруктураОбязательныхРеквизитов.Вставить("СпецМатериалПартияМатериалаВЭксплуатации");
		СтруктураОбязательныхРеквизитов.Вставить("СпецМатериалПервоначальнаяСтоимость");
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		
		Если мСложныйУчетНДС И НЕ УСН Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ, НомерСтрокиТЧ, ВидЦенности");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Спецодежда и спецоснастка в эксплуатации (счет 10.11)", мТаблицаУсловий, СтруктураОбязательныхРеквизитовПодч, "ДанныеПоСФ", "Данные по счетам-фактурам");
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Спецодежда и спецоснастка в эксплуатации (счет 10.11)", мТаблицаУсловий);
		КонецЕсли;

		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
		
		Если УСН_ДР Тогда
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, Количество, Партия, РасчетныйДокумент, СтатусыОплатыРасходовУСН, ОтражениеВУСН, Валюта");
		ИначеЕсли Предприниматель Тогда
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, Количество, Партия");
		Иначе
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, Количество");
			Если НЕ мОценкаМПЗПоСредней Тогда
				СтруктураОбязательныхРеквизитов.Вставить("Партия");
			КонецЕсли;
		КонецЕсли;
		
		Если УправлениеЗапасамиПартионныйУчет.ВедетсяУчетПоСкладам (ПланыСчетов.Хозрасчетный.СырьеИМатериалы) Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Склад");
		КонецЕсли;
		
		//Проверка товаров на складах
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		Если мСложныйУчетНДС И НЕ УСН Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Партия");
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ, НомерСтрокиТЧ, ВидЦенности");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Товары на складе", мТаблицаУсловий, СтруктураОбязательныхРеквизитовПодч, "ДанныеПоСФ", "Данные по счетам-фактурам",);
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Товары на складе", мТаблицаУсловий);
		КонецЕсли;
		
		Если мРозницаВПродажныхЦенах Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Склад");
			//Проверка товаров в АТТ
			мТаблицаУсловий.Очистить();
			НовоеУсловие = мТаблицаУсловий.Добавить();
			НовоеУсловие.ИмяРеквизита = "СчетУчета";
			НовоеУсловие.ВидСравнения = "В";
			НовоеУсловие.УсловиеОбъединения = "И ";
			СписокСчетов = Новый СписокЗначений();
			СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
			НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
			Если мСложныйУчетНДС И НЕ УСН Тогда
				СтруктураОбязательныхРеквизитов.Вставить("Ключ");
				СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ, НомерСтрокиТЧ, ВидЦенности");
				ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Товары на в розничной торговле (в АТТ, счета 41.11, 42.01)", мТаблицаУсловий,СтруктураОбязательныхРеквизитовПодч, "ДанныеПоСФ", "Данные по счетам-фактурам");
			Иначе
				ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Товары на в розничной торговле (в АТТ, счета 41.11, 42.01)", мТаблицаУсловий);
			КонецЕсли;
			
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Склад");
			ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["СтавкиНДС"];
			Если ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ВидыСубконто.Найти(ВидСубк) <> Неопределено Тогда
				СтруктураОбязательныхРеквизитов.Вставить("СтавкаНДС");
			КонецЕсли;
			
			//Проверка товаров в НТТ
			мТаблицаУсловий.Очистить();
			НовоеУсловие = мТаблицаУсловий.Добавить();
			НовоеУсловие.ИмяРеквизита = "СчетУчета";
			НовоеУсловие.ВидСравнения = "В";
			НовоеУсловие.УсловиеОбъединения = "И ";
			СписокСчетов = Новый СписокЗначений();
			СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
			НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Товары в розничной торговле (в НТТ, счета 41.12, 42.02)", мТаблицаУсловий);
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, Количество");
		Если ОСН ИЛИ УСН Тогда
			Если НЕ мОценкаМПЗПоСредней Тогда
				СтруктураОбязательныхРеквизитов.Вставить("Партия");
			КонецЕсли;
		ИначеЕсли Предприниматель Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Партия");
		КонецЕсли;
		
		Если УправлениеЗапасамиПартионныйУчет.ВедетсяУчетПоСкладам (ПланыСчетов.Хозрасчетный.ГотоваяПродукция) Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Склад");
		КонецЕсли;
		
		//Проверка готовой продукции
		Если Предприниматель Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ,НомерСтрокиТЧ, Номенклатура, ВидМПЗ, Партия, Количество");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", , ,СтруктураОбязательныхРеквизитовПодч, "Обороты", "Материалы, неоплаченные поставщикам",);
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", ,);
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
		
		Если УСН_ДР ИЛИ Предприниматель Тогда
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, Количество, Партия");		
		Иначе
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, Количество");
			Если НЕ мУпрощенныйУчетНДС И НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
				СтруктураОбязательныхРеквизитов.Вставить("Партия");
			КонецЕсли;
		КонецЕсли;
		
		Если УправлениеЗапасамиПартионныйУчет.ВедетсяУчетПоСкладам (ПланыСчетов.Хозрасчетный.СырьеИМатериалы) Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Склад");
		КонецЕсли;
		
		//Проверка ВНА на складах
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		Если НЕ мУпрощенныйУчетНДС И НЕ УСН Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ, НомерСтрокиТЧ, ВидЦенности");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", , мТаблицаУсловий, СтруктураОбязательныхРеквизитовПодч, "ДанныеПоСФ", "Данные по счетам-фактурам");
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", , мТаблицаУсловий);
		КонецЕсли;
		
		//Проверка объектов строительства
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, СпособСтроительства");
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		Если мУпрощенныйУчетНДС И НЕ УСН Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ, НомерСтрокиТЧ, ВидЦенности");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", , мТаблицаУсловий, СтруктураОбязательныхРеквизитовПодч, "ДанныеПоСФ", "Данные по счетам-фактурам");
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", , мТаблицаУсловий);
		КонецЕсли;
		
		//Животные
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Количество");
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПереводМолоднякаЖивотныхВОсновноеСтадо);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеВзрослыхЖивотных);		
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", , мТаблицаУсловий);
		
		//Прочие
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура");
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПереводМолоднякаЖивотныхВОсновноеСтадо);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеВзрослыхЖивотных);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", , мТаблицаУсловий);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_Номенклатура(БухСправка)
	
	Операция = Движения.Хозрасчетный;
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		Если СтрокаБухСправки.Сумма = 0 И СтрокаБухСправки.Количество = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);
		
		СчетУчета = СтрокаБухСправки.СчетУчета;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаБухСправки["Номенклатура"]);
		
		Если СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаБухСправки["СтавкаНДС"]);
		КонецЕсли;
		
		Если НЕ мОценкаМПЗПоСредней Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаБухСправки["Партия"]);
		КонецЕсли;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтрокаБухСправки["Склад"]);
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаБухСправки["Номенклатура"]);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыСтроительства", СтрокаБухСправки["СпособСтроительства"]);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаБухСправки["Номенклатура"]);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР", СтрокаБухСправки["Номенклатура"]);
		КонецЕсли;
		
		Если СчетУчета = ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации
			ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации
			ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПартииМатериаловВЭксплуатации", СтрокаБухСправки["СпецМатериалПартияМатериалаВЭксплуатации"]);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаБухСправки["СпецМатериалПодразделениеФизЛицо"]);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаБухСправки["Контрагент"]);
		КонецЕсли;
		
		//Для спецматериалов в эксплуатации
		Если СчетУчета = ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации
			ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации Тогда
			
			Если СтрокаБухСправки.СпецМатериалНазначениеИспользования.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию Тогда
				Операция.Удалить(Операция.Индекс(Проводка));
			КонецЕсли;
			
			Проводка = Операция.Добавить();
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = СодержаниеПроводки;
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				Проводка.Сумма       = СтрокаБухСправки.СпецМатериалПервоначальнаяСтоимость;
			КонецЕсли;
			Если СчетУчета = ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации Тогда
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатацииВспомогательный;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатацииВспомогательный;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаБухСправки["Номенклатура"]);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПартииМатериаловВЭксплуатации", СтрокаБухСправки["СпецМатериалПартияМатериалаВЭксплуатации"]);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаБухСправки["СпецМатериалПодразделениеФизЛицо"]);
			Если Проводка.СчетДт.Количественный Тогда
				Проводка.КоличествоДт = СтрокаБухСправки.Количество;
			КонецЕсли;
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");

			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
				СуммаПРДт = 0;
				СуммаВРДт = 0;
				
				Если СтрокаБухСправки.СпецМатериалНазначениеИспользования.СпособПогашенияСтоимости <> Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию Тогда
					КоэффициентНУ = ?(СтрокаБухСправки.Сумма = 0, 0, СтрокаБухСправки.СуммаПР/СтрокаБухСправки.Сумма);				
					СуммаПРДт = Мин(СтрокаБухСправки.СпецМатериалПервоначальнаяСтоимость, СтрокаБухСправки.СпецМатериалПервоначальнаяСтоимость * КоэффициентНУ);
					СуммаВРДт = СтрокаБухСправки.СпецМатериалПервоначальнаяСтоимость - СуммаПРДт;
				КонецЕсли;
				
				Проводка.СуммаНУДт    = 0;
				Проводка.СуммаПРДт    = СуммаПРДт;
				Проводка.СуммаВРДт    = СуммаВРДт;
			КонецЕсли;
			
		ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ
			ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
			Если СтрокаБухСправки.ТорговаяНаценка <> 0 Тогда
				Проводка = Операция.Добавить();
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = СодержаниеПроводки;
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
					Проводка.Сумма       = СтрокаБухСправки.ТорговаяНаценка;
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					Проводка.СуммаНУКт     = СтрокаБухСправки.ТорговаяНаценка;
					Проводка.СуммаПРКт     = 0;
					Проводка.СуммаВРКт     = 0;
				КонецЕсли;
				
				Если СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				Иначе
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаБухСправки["Номенклатура"]);
				Если НЕ мОценкаМПЗПоСредней Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаБухСправки["Партия"]);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаБухСправки["СтавкаНДС"]);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаБухСправки["Склад"]);
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Кт");

			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// {УчетДоходовИРасходовИП
////////////////////////////////////////////////////////
//Движения по регистрам ПБОЮЛ

Процедура ДвиженияПоРегистрамИП_Номенклатура(ТаблицаДанных,Отказ)
	
	РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы
		ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары
		ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
		ТабМПЗ = ПолучитьТабличнуюЧастьМПЗПриобретенные();
		ИмяТабличнойЧасти = "МПЗПриобретенные";
	Иначе
		ТабМПЗ = ПолучитьТабличнуюЧастьМПЗСобственные();
		ИмяТабличнойЧасти = "МПЗПриобретенные";
	КонецЕсли;
	
	ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗ", ВидДвиженияНакопления.Приход, Истина, Истина,);
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
		
		ТабМПЗ = ПолучитьТабличнуюЧастьОборотыМПЗ();
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗОбороты",,, Истина,);
		
		ТабМПЗ.Колонки.НоменклатураСписанная.Имя = "Номенклатура";
		ТабМПЗ.Колонки.ВидСписанногоМПЗ.Имя = "ВидМПЗ";
		ТабМПЗ.Колонки.ПартияСписаннойНоменклатуры.Имя = "Партия";
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗ", ВидДвиженияНакопления.Приход,,,);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗ", ВидДвиженияНакопления.Расход,,,);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТабличнуюЧастьМПЗПриобретенные()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("СсылкаВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["Номенклатура"]);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.Номенклатура,
		|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.Склад,
		|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.СчетУчета,
		|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.Партия,
		|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.Количество,
		|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.Оплачен,
		|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.РеквизитыДокументаОплаты,
		|	ВЫБОР
		|		КОГДА ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.НДСВключенВстоимость
		|			ТОГДА ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.Сумма - ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.НДС - ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.ТорговаяНаценка
		|		ИНАЧЕ ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.Сумма - ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.ТорговаяНаценка
		|	КОНЕЦ КАК Сумма,
		|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.Сумма КАК СтоимостьБУ,
		|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.НДС,
		|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.НДСВключенВстоимость,
		|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.Склад.ВидСклада КАК ВидСклада,
		|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.Номенклатура.Услуга КАК Услуга,
		|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	Хозрасчетный.Ссылка,
		|	Хозрасчетный.ВидыСубконто.(
		|		ВидСубконто
		|	)
		|ИЗ
		|	Документ.ВводНачальныхОстатков.МПЗПриобретенные КАК ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|		ПО ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.СчетУчета = Хозрасчетный.Ссылка
		|ГДЕ
		|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗПриобретенные.Ссылка = &Ссылка
		|	И Хозрасчетный.ВидыСубконто.ВидСубконто = &СсылкаВидСубконто";

		
	ТабМПЗ = Запрос.Выполнить().Выгрузить();
	ТабМПЗ.Колонки.Добавить("ХарактерДеятельности");
	ТабМПЗ.Колонки.Добавить("ВидМПЗ");
	ТабМПЗ.Колонки.Добавить("ДокументОплаты");
	
	Для Каждого МПЗ Из ТабМПЗ Цикл
		
		СтруктураШапкиДокумента.Вставить("ВидСклада", МПЗ.ВидСклада);
		
		МПЗ.ВидМПЗ = ДоходыИРасходыПредпринимателя.ВидМПЗПоСчетуУчета(МПЗ.СчетУчета);
		МПЗ.НоменклатурнаяГруппа = ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации( Истина, МПЗ.Номенклатура, МПЗ.НоменклатурнаяГруппа, МПЗ.ВидМПЗ, мУчетнаяПолитика);
		МПЗ.ХарактерДеятельности = ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, МПЗ.СчетУчета,,, мУчетнаяПолитика);
		Если МПЗ.Оплачен Тогда
			МПЗ.ДокументОплаты = СтруктураШапкиДокумента.Ссылка;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ТабМПЗ;
	
КонецФункции

Функция ПолучитьТабличнуюЧастьМПЗСобственные()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗСобственные.Номенклатура,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗСобственные.Номенклатура.Услуга КАК Услуга,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗСобственные.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗСобственные.Партия,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗСобственные.Склад,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗСобственные.СчетУчета,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗСобственные.Количество,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗСобственные.Сумма,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗСобственные.Ключ
	|ПОМЕСТИТЬ МПЗСобственные
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МПЗПриобретенные КАК ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗСобственные
	|ГДЕ
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяМПЗСобственные.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВводНачальныхОстатковОбороты.Ключ,
	|	ВводНачальныхОстатковОбороты.Сумма,
	|	ВводНачальныхОстатковОбороты.НДС,
	|	ВводНачальныхОстатковОбороты.НДСВключенВстоимость
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	Документ.ВводНачальныхОстатков.Обороты КАК ВводНачальныхОстатковОбороты
	|ГДЕ
	|	ВводНачальныхОстатковОбороты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МПЗСобственные.Номенклатура,
	|	МПЗСобственные.Услуга,
	|	МПЗСобственные.НоменклатурнаяГруппа,
	|	МПЗСобственные.Партия,
	|	МПЗСобственные.Склад,
	|	ВЫБОР
	|		КОГДА Обороты.Сумма ЕСТЬ NULL 
	|			ТОГДА &Ссылка
	|	КОНЕЦ КАК ДокументОплаты,
	|	МПЗСобственные.СчетУчета,
	|	МПЗСобственные.Количество,
	|	СУММА(ВЫБОР
	|			КОГДА Обороты.Сумма ЕСТЬ NULL 
	|				ТОГДА МПЗСобственные.Сумма
	|			ИНАЧЕ ВЫБОР
	|					КОГДА Обороты.НДСВключенВстоимость
	|						ТОГДА Обороты.Сумма - Обороты.НДС
	|					ИНАЧЕ Обороты.Сумма
	|				КОНЕЦ
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(Обороты.НДС) КАК НДС,
	|	СУММА(Обороты.Сумма) КАК СтоимостьБУ,
	|	МПЗСобственные.Склад.ВидСклада КАК ВидСклада
	|ИЗ
	|	МПЗСобственные КАК МПЗСобственные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Обороты КАК Обороты
	|		ПО МПЗСобственные.Ключ = Обороты.Ключ
	|
	|СГРУППИРОВАТЬ ПО
	|	МПЗСобственные.Номенклатура,
	|	МПЗСобственные.Услуга,
	|	МПЗСобственные.НоменклатурнаяГруппа,
	|	МПЗСобственные.Партия,
	|	МПЗСобственные.Склад,
	|	МПЗСобственные.СчетУчета,
	|	МПЗСобственные.Количество,
	|	ВЫБОР
	|		КОГДА Обороты.Сумма ЕСТЬ NULL 
	|			ТОГДА &Ссылка
	|	КОНЕЦ,
	|	МПЗСобственные.Склад.ВидСклада";
	
	ТабМПЗ = Запрос.Выполнить().Выгрузить();
	ТабМПЗ.Колонки.Добавить("ХарактерДеятельности");
	ТабМПЗ.Колонки.Добавить("ВидМПЗ");
	
	Для Каждого МПЗ Из ТабМПЗ Цикл
		
		СтруктураШапкиДокумента.Вставить("ВидСклада", МПЗ.ВидСклада);
		
		МПЗ.ВидМПЗ = ДоходыИРасходыПредпринимателя.ВидМПЗПоСчетуУчета(МПЗ.СчетУчета);
		МПЗ.НоменклатурнаяГруппа = ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации(Истина, МПЗ.Номенклатура, МПЗ.НоменклатурнаяГруппа, МПЗ.ВидМПЗ, мУчетнаяПолитика);
		МПЗ.ХарактерДеятельности = ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, МПЗ.СчетУчета,,, мУчетнаяПолитика);
	КонецЦикла;
	
	Возврат ТабМПЗ;
	
КонецФункции

Функция ПолучитьТабличнуюЧастьОборотыМПЗ()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Обороты.Номенклатура КАК НоменклатураСписанная,
	|	Обороты.ВидМПЗ КАК ВидСписанногоМПЗ,
	|	Обороты.Партия КАК ПартияСписаннойНоменклатуры,
	|	Обороты.Количество,
	|	ВЫБОР
	|		КОГДА Обороты.НДСВключенВстоимость
	|			ТОГДА Обороты.Сумма - Обороты.НДС
	|		ИНАЧЕ Обороты.Сумма
	|	КОНЕЦ КАК Сумма,
	|	Обороты.НДС,
	|	Обороты.НДСВключенВстоимость,
	|	МПЗ.Номенклатура КАК НоменклатураПоступившая,
	|	МПЗ.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	МПЗ.Партия КАК ПартияПоступившейНоменклатуры,
	|	МПЗ.СчетУчета
	|ИЗ
	|	Документ.ВводНачальныхОстатков.Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатков.МПЗПриобретенные КАК МПЗ
	|		ПО Обороты.Ключ = МПЗ.Ключ
	|ГДЕ
	|	Обороты.Ссылка = &Ссылка
	|	И МПЗ.Ссылка = &Ссылка";
	
	ТабМПЗ = Запрос.Выполнить().Выгрузить();
	ТабМПЗ.Колонки.Добавить("ХарактерДеятельности");
	ТабМПЗ.Колонки.Добавить("ВидПоступившегоМПЗ");
	
	Для Каждого МПЗ Из ТабМПЗ Цикл
		МПЗ.ВидПоступившегоМПЗ = ДоходыИРасходыПредпринимателя.ВидМПЗПоСчетуУчета(МПЗ.СчетУчета);
		МПЗ.НоменклатурнаяГруппа = ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации(Истина, МПЗ.НоменклатураПоступившая, МПЗ.НоменклатурнаяГруппа, МПЗ.ВидПоступившегоМПЗ, мУчетнаяПолитика);
		МПЗ.ХарактерДеятельности = ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, МПЗ.СчетУчета,,, мУчетнаяПолитика);
	КонецЦикла;
	
	Возврат ТабМПЗ;
		
КонецФункции
// }УчетДоходовИРасходовИП

////////////////////////////////////////////////////////
//Движения по регистрам УСН

Процедура ДвиженияПоРегистрамУСН_Номенклатура(ТаблицаДанных, Отказ)
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Очистить();
	
	Если НЕ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты 
		И НЕ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
		
		// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "РасходыНоменклатура".
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("ЭлементРасхода", 		"Номенклатура");
		СтруктураПолей.Вставить("СчетУчета", 			"СчетУчета");
		СтруктураПолей.Вставить("Партия",				"Партия");
		СтруктураПолей.Вставить("СтатусыПартийУСН", 	"СтатусыПартийУСН");
		СтруктураПолей.Вставить("РасчетныйДокумент", 	"РасчетныйДокумент");
		СтруктураПолей.Вставить("СтатусыОплатыРасходовУСН", "СтатусыОплатыРасходовУСН");
		СтруктураПолей.Вставить("ОтражениеВУСН", 		"ОтражениеВУСН");
		СтруктураПолей.Вставить("Валюта", 				"Валюта");
		СтруктураПолей.Вставить("Количество", 			"Количество");
		СтруктураПолей.Вставить("Сумма", 				"ВалютнаяСумма");
		СтруктураПолей.Вставить("НДС", 					"ВалютныйНДС");
		
		ВременнаяТаблица = СформироватьЗапросПоТабличнойЧасти("МПЗПриобретенные", СтруктураПолей).Выгрузить();
		ВременнаяТаблица.Колонки.Добавить("ВидРасхода");
		ВременнаяТаблица.Колонки.Добавить("ДоговорКонтрагента");
		ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.Номенклатура, "ВидРасхода");
		Для Каждого СтрокаВТ ИЗ ВременнаяТаблица Цикл
			СтрокаВТ.ДоговорКонтрагента = СтрокаВТ.Партия.ДоговорКонтрагента;
		КонецЦикла;
		МассивТаблиц.Добавить(ВременнаяТаблица);
		
		//Подготовим таблицу движений регистра взаиморасчетов УСН
		ТаблицаРасходы = СобратьТаблицыРасходов(МассивТаблиц);
		
	Иначе
		ТаблицаРасходы = Новый ТаблицаЗначений();
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам_Номенклатура(ТаблицаРасходы, Отказ);
	КонецЕсли;
	

КонецПроцедуры

Процедура ДвиженияПоРегистрам_Номенклатура(ТаблицаРасходы, Отказ)
	
	Если НЕ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
		//ПО РЕГИСТРУ РАСХОДОВ УСН
		ДвиженияПоРегиструРасходовУСН(ТаблицаРасходы, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗапросПоТабличнойЧасти(ИмяТабличнойЧасти, СтруктураПолей)

	ТекстЗапроса = "";

	Для Каждого Реквизит Из СтруктураПолей Цикл

		ТекстЗапроса  = ТекстЗапроса + ",
		|	Док." + Реквизит.Значение + " КАК " + СокрЛП(Реквизит.Ключ);

	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Док.НомерСтроки " + ТекстЗапроса + ",
	|	Хозрасчетный.ВидыСубконто.(ВидСубконто)
	|ИЗ 
	|	Документ.ВводНачальныхОстатков."+ СокрЛП(ИмяТабличнойЧасти) + " КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО Док.СчетУчета = Хозрасчетный.Ссылка
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|	И Хозрасчетный.ВидыСубконто.ВидСубконто = &СсылкаВидСубконто";

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("СсылкаВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["Номенклатура"]);

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоТабличнойЧасти()

//*****************************************************************************************************************************
// РАСЧЕТЫ С ПОДОТЧЕТНЫМИ ЛИЦАМИ

Процедура ОбработкаПроведения_РасчетыСПодотчетнымиЛицами(Отказ)
	
	ПроверитьЗаполнениеТабличнойЧасти_РасчетыСПодотчетнымиЛицами(Отказ);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ФормированиеПроводокБух_РасчетыСПодотчетнымиЛицами(РасчетыСПодотчетнымиЛицами);
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		ДвиженияПоРегистрамУСН_РасчетыСПодотчетнымиЛицами(РасчетыСПодотчетнымиЛицами, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти_РасчетыСПодотчетнымиЛицами(Отказ)
	
	СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, РаботникОрганизации");
	Если УСН_ДР Тогда
		СтруктураОбязательныхРеквизитов.Вставить("РасчетныйДокумент");
	КонецЕсли;
	ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "РасчетыСПодотчетнымиЛицами", , );
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_РасчетыСПодотчетнымиЛицами(БухСправка)
	
	Операция = ЭтотОбъект.Движения.Хозрасчетный;
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		Если СтрокаБухСправки.Сумма = 0 И СтрокаБухСправки.СуммаКт = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "РаботникиОрганизаций", СтрокаБухСправки["РаботникОрганизации"]);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам УСН

Процедура ДвиженияПоРегистрамУСН_РасчетыСПодотчетнымиЛицами(ТаблицаДанных, Отказ)
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Очистить();
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "РасчетыСПодотчетнымиЛицами".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("СчетУчета", 	"СчетУчета");
	СтруктураПолей.Вставить("Контрагент", 	"РаботникОрганизации");
	СтруктураПолей.Вставить("РасчетныйДокумент", 	"РасчетныйДокумент");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов", 	"Сумма");
	СтруктураПолей.Вставить("СуммаВзаиморасчетовКт", 	"СуммаКт");

	МассивТаблиц.Добавить(ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасчетыСПодотчетнымиЛицами", СтруктураПолей).Выгрузить());
	
	//Подготовим таблицу движений регистра взаиморасчетов УСН
	ТаблицаВзаиморасчеты = СобратьТаблицыВзаиморасчетов(МассивТаблиц);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам_РасчетыСПодотчетнымиЛицами(ТаблицаВзаиморасчеты, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам_РасчетыСПодотчетнымиЛицами(ТаблицаВзаиморасчеты, Отказ)
	
	//ПО ВЗАИМОРАСЧЕТАМ УСН
	ДвиженияПоРегиструВзаиморасчетовУСН(ТаблицаВзаиморасчеты, Отказ);
	
КонецПроцедуры

//*****************************************************************************************************************************
// РАСЧЕТЫ ПО ЗАРАБОТНОЙ ПЛАТЕ

Процедура ОбработкаПроведения_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(Отказ)
	
	ВестиУчетПоРаботникам = НЕ (ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") = Неопределено);
	
	ПроверитьЗаполнениеТабличнойЧасти_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(ВестиУчетПоРаботникам, Отказ);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ФормированиеПроводокБух_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(РасчетыПоЗаработнойПлате);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		ДвиженияПоРегистрамУСН_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(РасчетыПоЗаработнойПлате,Отказ);
	// {УчетДоходовИРасходовИП
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		ДвиженияПоРегистрамИП_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(РасчетыПоЗаработнойПлате, Отказ);
	// }УчетДоходовИРасходовИП
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьПоСпециальнымРегистрам Тогда
		Если ВестиУчетПоРаботникам Тогда
			ФормированиеРегистровЗарплаты(РасчетыПоЗаработнойПлате, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(ВестиУчетПоРаботникам, Отказ)
	
	Если НЕ ВестиУчетПоРаботникам И ОСН Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета");
	Если ВестиУчетПоРаботникам Тогда
		СтруктураОбязательныхРеквизитов.Вставить("РаботникОрганизации");
		СтруктураОбязательныхРеквизитов.Вставить("ПериодРегистрации");
	КонецЕсли;
	
	Если УСН_ДР Тогда
		СтруктураОбязательныхРеквизитов.Вставить("ОтражениеВУСН");
	ИначеЕсли Предприниматель Тогда
		СтруктураОбязательныхРеквизитов.Вставить("ВидНачисления");
		СтруктураОбязательныхРеквизитов.Вставить("СтатьяЗатрат");
		Если мВестиУчетПоВидамДеятельностиПредпринимателя Тогда
			СтруктураОбязательныхРеквизитов.Вставить("НоменклатурнаяГруппа");
			СтруктураОбязательныхРеквизитов.Вставить("ХарактерДеятельности");
		КонецЕсли;
	КонецЕсли;
	
	мТаблицаУсловий.Очистить();
	НовоеУсловие = мТаблицаУсловий.Добавить();
	НовоеУсловие.ИмяРеквизита = "СчетУчета";
	НовоеУсловие.ВидСравнения = "В";
	НовоеУсловие.УсловиеОбъединения = "И ";
	СписокСчетов = Новый СписокЗначений();
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	Если НЕ ВестиУчетПоРаботникам Тогда
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам);
	КонецЕсли;
	НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
	ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "РасчетыПоЗаработнойПлате", , мТаблицаУсловий);
	
	Если ВестиУчетПоРаботникам Тогда
		СтруктураОбязательныхРеквизитов.Удалить("ПериодРегистрации");
		СтруктураОбязательныхРеквизитов.Вставить("Ведомость");
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "РасчетыПоЗаработнойПлате", , мТаблицаУсловий);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(БухСправка)
	
	Операция = ЭтотОбъект.Движения.Хозрасчетный;
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		Если СтрокаБухСправки.Сумма = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаБухСправки["РаботникОрганизации"]);
		
	КонецЦикла;
	
КонецПроцедуры

// {УчетДоходовИРасходовИП
////////////////////////////////////////////////////////
//Движения по регистрам ПБОЮЛ

Процедура ДвиженияПоРегистрамИП_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(ТаблицаДанных, Отказ)

	РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента.Ссылка);
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам Тогда
		ИмяТабличнойЧасти = "РасчетыПоЗаработнойПлате";
	Иначе
		Возврат
	КонецЕсли;
	
	СтруктураОбязательныхПолей = Новый Структура("РаботникОрганизации, ВидНачисления, СтатьяЗатрат,Сумма");
	Если мУчетнаяПолитика.ВестиУчетПоВидамДеятельности Тогда
		СтруктураОбязательныхПолей.Вставить("НоменклатурнаяГруппа");
		СтруктураОбязательныхПолей.Вставить("ХарактерДеятельности");
	КонецЕсли;
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		
		Начислено = ПолучитьТабличнуюЧастьРаботникиНачислено();
		Начислено.Колонки.Добавить("Контрагент");
		Начислено.Свернуть("СчетУчета,НоменклатурнаяГруппа,ХарактерДеятельности,СтатьяЗатрат,ВидНачисления,ФизЛицо,Контрагент", "Сумма");
		
		Удержано = ПолучитьТабличнуюЧастьРаботникиУдержано();
		Удержано.Свернуть("НоменклатурнаяГруппа,ХарактерДеятельности,СтатьяЗатрат,ВидУдержания,ФизЛицо,Контрагент", "Сумма");
		Удержано.Колонки.ВидУдержания.Имя = "ВидНачисления";
		
		МассивКоэф = Новый Массив;
		СтруктураОтбора = Новый Структура("ФизЛицо");
		
		ДвиженияПоРасходамПоОплатеТруда(РежимПроведения, Начислено);
		ДвиженияПоРасходамПоОплатеТруда(РежимПроведения, Удержано);
		
		// Проводки по задолженности работникам
		Начислено.Свернуть("ФизЛицо", "Сумма");
		ДвиженияПоРасчетамСРаботникамиНачисления(РежимПроведения, Начислено);
		
		Удержано.Колонки.Добавить("СчетУчета");
		Для Каждого СтрокаУдержания ИЗ Удержано Цикл
			Если СтрокаУдержания.ВидНачисления = Перечисления.ИПВидыНачисленийУдержаний.УдержаноНДФЛ Тогда
				СтрокаУдержания.СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ;
			Иначе
				СтрокаУдержания.СчетУчета = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
			КонецЕсли;
		КонецЦикла;
		
		Удержано.Свернуть("СчетУчета, Контрагент", "Сумма");
		ДвиженияПоРасчетамСРаботникамиУдержания(РежимПроведения, Удержано);
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТабличнуюЧастьРаботникиНачислено()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("СчетУчетаЗаработнойПлаты", ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Работники.РаботникОрганизации КАК ФизЛицо,
	|	Работники.Сумма + Работники.СуммаПодлежитУдержанию КАК Сумма,
	|	Работники.ВидНачисления,
	|	Работники.НоменклатурнаяГруппа,
	|	Работники.ХарактерДеятельности,
	|	Работники.СтатьяЗатрат,
	|	Работники.СчетУчета
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоЗаработнойПлате КАК Работники
	|ГДЕ
	|	Работники.Ссылка = &Ссылка
	|	И Работники.СчетУчета = &СчетУчетаЗаработнойПлаты";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПолучитьТабличнуюЧастьРаботникиУдержано()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Работники.РаботникОрганизации КАК ФизЛицо,
	|	Работники.СуммаПодлежитУдержанию КАК Сумма,
	|	Работники.ВидУдержания,
	|	Работники.НоменклатурнаяГруппа,
	|	Работники.ХарактерДеятельности,
	|	Работники.СтатьяЗатрат,
	|	Работники.Получатель Как Контрагент
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоЗаработнойПлате КАК Работники
	|ГДЕ
	|	Работники.Ссылка = &Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Процедура ДвиженияПоРасходамПоОплатеТруда(РежимПроведения, ТаблЧасть)

	Для Каждого СтрокаТЧ Из ТаблЧасть Цикл
		Если СтрокаТЧ.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = ЭтотОбъект.Движения.ИПРасходыНаОплатуТруда.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация = СтруктураШапкиДокумента.Организация;
		Движение.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
		Движение.ФизЛицо = СтрокаТЧ.ФизЛицо;
		
		Если мУчетнаяПолитика.ВестиУчетПоВидамДеятельности Тогда
			Движение.НоменклатурнаяГруппа = СтрокаТЧ.НоменклатурнаяГруппа;
			Движение.ХарактерДеятельности = СтрокаТЧ.ХарактерДеятельности;
			
		Иначе
			Движение.НоменклатурнаяГруппа = мУчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа;
			Движение.ХарактерДеятельности = мУчетнаяПолитика.ОсновнойХарактерДеятельности;
		КонецЕсли;
		
		Движение.СтатьяЗатрат = СтрокаТЧ.СтатьяЗатрат;
		Движение.ВидНачисленияУдержания = СтрокаТЧ.ВидНачисления;
		Движение.Контрагент = СтрокаТЧ.Контрагент;
		
		Движение.Сумма = СтрокаТЧ.Сумма;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРасчетамСРаботникамиНачисления(РежимПроведения, ТаблЧасть)

	Для Каждого СтрокаТЧ Из ТаблЧасть Цикл
		
		Если СтрокаТЧ.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = ЭтотОбъект.Движения.ПрочиеРасчеты.Добавить();
		Движение.ВидДвижения = ?(СтрокаТЧ.Сумма > 0, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация = СтруктураШапкиДокумента.Организация;
		Движение.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
		Движение.Контрагент = СтрокаТЧ.ФизЛицо;
		Движение.Сумма = ?(СтрокаТЧ.Сумма > 0, СтрокаТЧ.Сумма, -СтрокаТЧ.Сумма);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРасчетамСРаботникамиУдержания(РежимПроведения, ТаблЧасть)

	Для Каждого СтрокаТЧ Из ТаблЧасть Цикл
		
		Если СтрокаТЧ.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = ЭтотОбъект.Движения.ПрочиеРасчеты.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация = СтруктураШапкиДокумента.Организация;
		Движение.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
		Движение.Контрагент = СтрокаТЧ.Контрагент;
		Движение.СчетУчета = СтрокаТЧ.СчетУчета;
		Движение.Сумма = СтрокаТЧ.Сумма;
		
	КонецЦикла;
	
КонецПроцедуры
// }УчетДоходовИРасходовИП

////////////////////////////////////////////////////////
//Движения по регистрам УСН

Процедура ДвиженияПоРегистрамУСН_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(ТаблицаДанных, Отказ)
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Очистить();
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ВзаиморасчетыССотрудниками".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Работник", 			"РаботникОрганизации");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов", 	"Сумма");
	СтруктураПолей.Вставить("СчетУчета", 	"СчетУчета");
	СтруктураПолей.Вставить("РасчетныйДокумент", 	"Ссылка");

	МассивТаблиц.Добавить(ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасчетыПоЗаработнойПлате", СтруктураПолей).Выгрузить());
	
	//Подготовим таблицу движений регистра взаиморасчетов УСН
	ТаблицаВзаиморасчеты = СобратьТаблицыВзаиморасчетов(МассивТаблиц);
	
	МассивТаблиц.Очистить();
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "РасходыЗарплата".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ЭлементРасхода", 		"РаботникОрганизации");
	СтруктураПолей.Вставить("ОтражениеВУСН", 		"ОтражениеВУСН");
	СтруктураПолей.Вставить("Сумма", 				"Сумма");
	СтруктураПолей.Вставить("РасчетныйДокумент", 	"Ссылка");
	
	ВременнаяТаблица = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасчетыПоЗаработнойПлате", СтруктураПолей).Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("ВидРасхода");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.Зарплата, "ВидРасхода");
	ВременнаяТаблица.Колонки.Добавить("СтатусыОплатыРасходовУСН");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.СтатусыРасходовУСН.НеОплачено, "СтатусыОплатыРасходовУСН");
	ВременнаяТаблица.Колонки.Добавить("Валюта");
	ВременнаяТаблица.ЗаполнитьЗначения(Константы.ВалютаРегламентированногоУчета.Получить(), "Валюта");
	МассивТаблиц.Добавить(ВременнаяТаблица);
	
	//Подготовим таблицу движений регистра взаиморасчетов УСН
	ТаблицаРасходы = СобратьТаблицыРасходов(МассивТаблиц);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(ТаблицаВзаиморасчеты, ТаблицаРасходы, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(ТаблицаВзаиморасчеты, ТаблицаРасходы, Отказ)
	
	
	//ПО ВЗАИМОРАСЧЕТАМ УСН
	ДвиженияПоРегиструВзаиморасчетовУСН(ТаблицаВзаиморасчеты, Отказ);
	
	//ПО РЕГИСТРУ РАСХОДОВ УСН
	ДвиженияПоРегиструРасходовУСН(ТаблицаРасходы, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам зарплаты

Процедура ФормированиеРегистровЗарплаты(ТаблицаДанных, Отказ)
	
	ФормироватьДвиженияПоВзаиморасчетамСРаботникамиОрганизаций = Истина;
	Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() Тогда
		ФормироватьДвиженияПоВзаиморасчетамСРаботникамиОрганизаций = Ложь;
	КонецЕсли;


		
	Для Каждого СтрокаТЧ ИЗ ТаблицаДанных Цикл
		
		Если СтрокаТЧ.Сумма  = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам Тогда
			
			Движение				= Движения.ВзаиморасчетыСДепонентамиОрганизаций.Добавить();
			Движение.ВидДвижения	= ?(СтрокаТЧ.Сумма > 0, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
			Движение.Период			= СтруктураШапкиДокумента.Дата;
			Движение.Организация	= СтруктураШапкиДокумента.Организация;
			Движение.Сумма			= ?(СтрокаТЧ.Сумма > 0, СтрокаТЧ.Сумма, -СтрокаТЧ.Сумма);
			Движение.Ведомость		= СтрокаТЧ.Ведомость;
			Движение.Физлицо		= СтрокаТЧ.РаботникОрганизации;
			
		Иначе
			
			Если ФормироватьДвиженияПоВзаиморасчетамСРаботникамиОрганизаций Тогда
				Движение						= Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
				Движение.ВидДвижения			= ?(СтрокаТЧ.Сумма > 0, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
				Движение.Период					= СтруктураШапкиДокумента.Дата;
				Движение.Организация			= СтруктураШапкиДокумента.Организация;
				Движение.СуммаВзаиморасчетов	= ?(СтрокаТЧ.Сумма > 0, СтрокаТЧ.Сумма, -СтрокаТЧ.Сумма);
				Движение.ПериодВзаиморасчетов	= СтрокаТЧ.ПериодРегистрации;
				Движение.Физлицо				= СтрокаТЧ.РаботникОрганизации;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//*****************************************************************************************************************************
// РАСЧЕТЫ С КОНТРАГЕНТАМИ

Процедура ОбработкаПроведения_РасчетыСКонтрагентами(Отказ)
	
	ПроверитьЗаполнениеТабличнойЧасти_РасчетыСКонтрагентами(Отказ);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ФормированиеПроводокБух_РасчетыСКонтрагентами(РасчетыСКонтрагентами);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти_РасчетыСКонтрагентами(Отказ)
	
	СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, Контрагент, ДоговорКонтрагента, Документ");
			
	мТаблицаУсловий.Очистить();
	НовоеУсловие = мТаблицаУсловий.Добавить();
	НовоеУсловие.ИмяРеквизита = "СчетУчета";
	НовоеУсловие.ВидСравнения = "В";
	НовоеУсловие.УсловиеОбъединения = "И НЕ";
	СписокСчетов = Новый СписокЗначений();
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);
	НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
	ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "РасчетыСКонтрагентами", , мТаблицаУсловий);

	СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, Контрагент, ДоговорКонтрагента");			

	мТаблицаУсловий.Очистить();
	НовоеУсловие = мТаблицаУсловий.Добавить();
	НовоеУсловие.ИмяРеквизита = "СчетУчета";
	НовоеУсловие.ВидСравнения = "В";
	НовоеУсловие.УсловиеОбъединения = "И";
	СписокСчетов = Новый СписокЗначений();
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);
	НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
	ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "РасчетыСКонтрагентами", , мТаблицаУсловий);
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_РасчетыСКонтрагентами(БухСправка)
	
	Операция = ЭтотОбъект.Движения.Хозрасчетный;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		Если СтрокаБухСправки.Сумма = 0 И СтрокаБухСправки.СуммаКт = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "Контрагенты", СтрокаБухСправки["Контрагент"]);
		БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "Договоры", СтрокаБухСправки["ДоговорКонтрагента"]);
		БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "ДокументыРасчетовСКонтрагентами", СтрокаБухСправки["Документ"]);
		
		СуммаПроводкиРуб = Проводка.Сумма;
		
		Если УСН И УСН_ДР Тогда
			Если СтрокаБухСправки.ДоходЕНВД <> 0 Тогда
				Проводка = Операция.Добавить();
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = СодержаниеПроводки;
				Если СтрокаБухСправки.СчетУчета.Валютный Тогда
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД;
					Проводка.ВалютаДт = СтрокаБухСправки.Валюта;
					Проводка.ВалютнаяСуммаДт = СтрокаБухСправки.ДоходЕНВД;
					Проводка.Сумма = СтрокаБухСправки.ДоходЕНВД * (СуммаПроводкиРуб / СтрокаБухСправки.ВалютнаяСумма);
				Иначе
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
					Проводка.Сумма = СтрокаБухСправки.ДоходЕНВД;
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "Контрагенты", СтрокаБухСправки["Контрагент"]);
				БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "Договоры", СтрокаБухСправки["ДоговорКонтрагента"]);
				БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "ДокументыРасчетовСКонтрагентами", СтрокаБухСправки["Документ"]);
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");
			КонецЕсли;
			
			Если СтрокаБухСправки.ДоходКомитента <> 0 Тогда
				Проводка = Операция.Добавить();
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = СодержаниеПроводки;
				Если СтрокаБухСправки.СчетУчета.Валютный Тогда
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент;
					Проводка.ВалютаДт = СтрокаБухСправки.Валюта;
					Проводка.ВалютнаяСуммаДт = СтрокаБухСправки.ДоходКомитента;
					Проводка.Сумма = СтрокаБухСправки.ДоходКомитента * (СуммаПроводкиРуб / СтрокаБухСправки.ВалютнаяСумма);
				Иначе
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
					Проводка.Сумма = СтрокаБухСправки.ДоходКомитента;
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "Контрагенты", СтрокаБухСправки["Контрагент"]);
				БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "Договоры", СтрокаБухСправки["ДоговорКонтрагента"]);
				БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "ДокументыРасчетовСКонтрагентами", СтрокаБухСправки["Документ"]);
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//*****************************************************************************************************************************
// НОМЕНКЛАТУРА ОТГРУЖЕННАЯ

Процедура ОбработкаПроведения_ТоварыОтгруженные(Отказ)
	
	ПроверитьЗаполнениеТабличнойЧасти_ТоварыОтгруженные(Отказ);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ФормированиеПроводокБух_ТоварыОтгруженные(МПЗОтгруженные);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		ДвиженияПоРегистрамУСН_ТоварыОтгруженные(МПЗОтгруженные, Отказ);
	// {УчетДоходовИРасходовИП
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		ДвиженияПоРегистрамИП_ТоварыОтгруженные(МПЗОтгруженные, Отказ);
	// }УчетДоходовИРасходовИП
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
		Если (НЕ мУпрощенныйУчетНДС И мСложныйУчетНДС) Тогда
			Если СтруктураШапкиДокумента.ОтражатьПоСпециальнымРегистрам Тогда
				ДвиженияПоРегистрамПартийНДС_Номенклатура(МПЗОтгруженные, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти_ТоварыОтгруженные(Отказ)
	
	Если Предприниматель Тогда
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, Номенклатура, ВидМПЗ, Покупатель, ДоговорПокупателя, ДокументОтгрузки, Поставщик, ДоговорПоставщика, Партия, Количество");
		Если мВестиУчетПоВидамДеятельностиПредпринимателя Тогда
			СтруктураОбязательныхРеквизитов.Вставить("НоменклатурнаяГруппа");
			СтруктураОбязательныхРеквизитов.Вставить("ХарактерДеятельности");
		КонецЕсли;
	Иначе
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, Номенклатура, Покупатель, Количество");
		Если (НЕ мУпрощенныйУчетНДС и мСложныйУчетНДС) Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Партия");
		КонецЕсли;
	КонецЕсли;
	
	//Проверка товаров отгруженных
	Если УСН_ДР Тогда
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
				
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "ОтражениеВУСН";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокСтатусов = Новый СписокЗначений();
		СписокСтатусов.Добавить(Перечисления.ОтражениеВУСН.Принимаются);
		НовоеУсловие.ЗначениеРеквизита = СписокСтатусов;
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, Номенклатура,СтатусыОплатыРасходовУСН, ОтражениеВУСН, Покупатель, ДоговорПокупателя, ДокументОтгрузки, Поставщик, ДоговорПоставщика, Партия, Количество, Валюта");
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗОтгруженные", , мТаблицаУсловий);
		
		НовоеУсловие = мТаблицаУсловий.Получить(1);
		НовоеУсловие.ИмяРеквизита = "ОтражениеВУСН";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокСтатусов = Новый СписокЗначений();
		СписокСтатусов.Добавить(Перечисления.ОтражениеВУСН.НеПринимаются);
		НовоеУсловие.ЗначениеРеквизита = СписокСтатусов;
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, Номенклатура,СтатусыОплатыРасходовУСН, ОтражениеВУСН, Покупатель, ДоговорПокупателя, ДокументОтгрузки, Партия, Количество, Валюта");
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗОтгруженные", , мТаблицаУсловий);
		
	ИначеЕсли НЕ ОСН Тогда
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		
		Если Предприниматель Тогда
			НовоеУсловие = мТаблицаУсловий.Добавить();
			НовоеУсловие.ИмяРеквизита = "Оплачен";
			НовоеУсловие.ВидСравнения = "=";
			НовоеУсловие.УсловиеОбъединения = "И ";
			НовоеУсловие.ЗначениеРеквизита = ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УСН_ДР Тогда
		Если мСложныйУчетНДС И НЕ УСН Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ, НомерСтрокиТЧ, ВидЦенности");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗОтгруженные", , мТаблицаУсловий, СтруктураОбязательныхРеквизитовПодч, "ДанныеПоСФ", "Данные по счетам-фактурам");
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗОтгруженные", , мТаблицаУсловий);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОСН Тогда
		//Проверка готовой продукции отгруженной
		СтруктураОбязательныхРеквизитов.Удалить("Поставщик");
		СтруктураОбязательныхРеквизитов.Удалить("ДоговорПоставщика");
		
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		Если Предприниматель Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ,НомерСтрокиТЧ, Номенклатура, ВидМПЗ, Партия, Количество");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗОтгруженные", , мТаблицаУсловий,СтруктураОбязательныхРеквизитовПодч, "Обороты", "Материалы, неоплаченные поставщикам",);
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗОтгруженные", , мТаблицаУсловий);
		КонецЕсли;
	КонецЕсли;
	
	Если Предприниматель Тогда
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "Оплачен";
		НовоеУсловие.ВидСравнения = "=";
		НовоеУсловие.УсловиеОбъединения = "И ";
		НовоеУсловие.ЗначениеРеквизита = ИСТИНА;
		Если мСложныйУчетНДС Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ, НомерСтрокиТЧ, ВидЦенности");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗОтгруженные", , мТаблицаУсловий,СтруктураОбязательныхРеквизитовПодч, "ДанныеПоСФ", "Данные по счетам-фактурам");
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗОтгруженные", , мТаблицаУсловий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_ТоварыОтгруженные(БухСправка)
	
	Операция = ЭтотОбъект.Движения.Хозрасчетный;
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		Если СтрокаБухСправки.Сумма = 0 И СтрокаБухСправки.Количество = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);

		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаБухСправки["Номенклатура"]);
		Если НЕ мОценкаМПЗПоСредней Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаБухСправки["Партия"]);
		КонецЕсли;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаБухСправки["Покупатель"]);
		
	КонецЦикла;
	
КонецПроцедуры

// {УчетДоходовИРасходовИП
////////////////////////////////////////////////////////
//Движения по регистрам ПБОЮЛ

Процедура ДвиженияПоРегистрамИП_ТоварыОтгруженные(МПЗОтгруженные, Отказ)
	
	РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	ИмяТабличнойЧасти = "МПЗОтгруженные";
	
	// ОтгрузкаОплаченного
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура,ВидМПЗ,Покупатель,ДоговорПокупателя,ДокументОтгрузки, СчетУчета");
	Если мУчетнаяПолитика.ВестиУчетПоВидамДеятельности Тогда
		СтруктураОбязательныхПолей.Вставить("НоменклатурнаяГруппа");
		СтруктураОбязательныхПолей.Вставить("ХарактерДеятельности");
	КонецЕсли;
		
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
    	
	Если Не Отказ Тогда
		ТабМПЗ = ПолучитьТабличнуюЧастьОтгрузкаОплаченного(СтруктураШапкиДокумента);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗОтгруженные", ВидДвиженияНакопления.Приход,,, Истина);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗ", ВидДвиженияНакопления.Приход,,,);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗ", ВидДвиженияНакопления.Расход,,,);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	// ОтгрузкаПриобретенного
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура,ВидМПЗ,Покупатель,ДоговорПокупателя,ДокументОтгрузки,СчетУчета");
	Если мУчетнаяПолитика.ВестиУчетПоВидамДеятельности Тогда
		СтруктураОбязательныхПолей.Вставить("НоменклатурнаяГруппа");
		СтруктураОбязательныхПолей.Вставить("ХарактерДеятельности");
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
    	
	Если Не Отказ Тогда
		ТабМПЗ = ПолучитьТабличнуюЧастьОтгрузкаПриобретенного(СтруктураШапкиДокумента);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗОтгруженные", ВидДвиженияНакопления.Приход,, Истина, Истина);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗ", ВидДвиженияНакопления.Приход,,,);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗ", ВидДвиженияНакопления.Расход,,,);
		
	Иначе
		Возврат;
	КонецЕсли;

	// ОтгрузкаСобственного
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура,ВидМПЗ,Покупатель,ДоговорПокупателя,ДокументОтгрузки,СчетУчета");
	Если мУчетнаяПолитика.ВестиУчетПоВидамДеятельности Тогда
		СтруктураОбязательныхПолей.Вставить("НоменклатурнаяГруппа");
		СтруктураОбязательныхПолей.Вставить("ХарактерДеятельности");
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
    	
	Если Не Отказ Тогда
		ТабМПЗ = ПолучитьТабличнуюЧастьОтгрузкаСобственного(СтруктураШапкиДокумента);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗОтгруженные", ВидДвиженияНакопления.Приход,,, Истина);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗ", ВидДвиженияНакопления.Приход,,,);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗ", ВидДвиженияНакопления.Расход,,,);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ТабМПЗ = ПолучитьТабличнуюЧастьОборотыОтгружено(СтруктураШапкиДокумента);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗОбороты",,, Истина,);
		
		ТабМПЗ.Колонки.НоменклатураСписанная.Имя = "Номенклатура";
		ТабМПЗ.Колонки.ВидСписанногоМПЗ.Имя = "ВидМПЗ";
		ТабМПЗ.Колонки.ПартияСписаннойНоменклатуры.Имя = "Партия";
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗ", ВидДвиженияНакопления.Приход,,,);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗ", ВидДвиженияНакопления.Расход,,,);
		
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПолучитьТабличнуюЧастьОтгрузкаОплаченного(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("СчетУчета", ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.Номенклатура,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.ВидМПЗ,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.НоменклатурнаяГруппа,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.Покупатель,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.ДоговорПокупателя,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.ХарактерДеятельности,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.ДокументОтгрузки,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.Партия,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.РеквизитыДокументаОплаты,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.Количество,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.Выручка,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.НДСНачисленный,
	|	ВЫБОР
	|		КОГДА ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.НДСВключенВстоимость
	|			ТОГДА ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.Сумма - ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.НДС
	|		ИНАЧЕ ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.НДС,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.НДСВключенВстоимость,
	|	&Ссылка КАК ДокументОплаты,
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.СчетУчета
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МПЗОтгруженные КАК ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного
	|ГДЕ
	|	ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.Ссылка = &Ссылка
	|	И ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.Оплачен = ИСТИНА
	|	И ВводОстатковПоНалоговомуУчетуПредпринимателяОтгрузкаОплаченного.СчетУчета <> &СчетУчета";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПолучитьТабличнуюЧастьОтгрузкаПриобретенного(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("СчетУчета", ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтгрузкаПриобретенного.Номенклатура,
	|	ОтгрузкаПриобретенного.ВидМПЗ,
	|	ОтгрузкаПриобретенного.НоменклатурнаяГруппа,
	|	ОтгрузкаПриобретенного.Покупатель,
	|	ОтгрузкаПриобретенного.ДоговорПокупателя,
	|	ОтгрузкаПриобретенного.ХарактерДеятельности,
	|	ОтгрузкаПриобретенного.ДокументОтгрузки,
	|	ОтгрузкаПриобретенного.Поставщик,
	|	ОтгрузкаПриобретенного.ДоговорПоставщика,
	|	ОтгрузкаПриобретенного.Партия,
	|	ОтгрузкаПриобретенного.Количество,
	|	ОтгрузкаПриобретенного.Выручка,
	|	ОтгрузкаПриобретенного.НДСНачисленный,
	|	ВЫБОР
	|		КОГДА ОтгрузкаПриобретенного.НДСВключенВстоимость
	|			ТОГДА ОтгрузкаПриобретенного.Сумма - ОтгрузкаПриобретенного.НДС
	|		ИНАЧЕ ОтгрузкаПриобретенного.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ОтгрузкаПриобретенного.НДС,
	|	ОтгрузкаПриобретенного.НДСВключенВстоимость,
	|	ОтгрузкаПриобретенного.СчетУчета,
	|	ОтгрузкаПриобретенного.Оплачен
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МПЗОтгруженные КАК ОтгрузкаПриобретенного
	|ГДЕ
	|	ОтгрузкаПриобретенного.Ссылка = &Ссылка
	|	И ОтгрузкаПриобретенного.Оплачен = ЛОЖЬ
	|	И ОтгрузкаПриобретенного.СчетУчета <> &СчетУчета";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПолучитьТабличнуюЧастьОтгрузкаСобственного(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("СчетУчета", ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА Обороты.НДСВключенВстоимость
	|					ТОГДА Обороты.Сумма - Обороты.НДС
	|				ИНАЧЕ Обороты.Сумма
	|			КОНЕЦ, ОтгрузкаСобственного.Сумма)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(Обороты.НДС, ОтгрузкаСобственного.НДС)) КАК НДС,
	|	ОтгрузкаСобственного.Номенклатура,
	|	ОтгрузкаСобственного.ВидМПЗ,
	|	ОтгрузкаСобственного.НоменклатурнаяГруппа,
	|	ОтгрузкаСобственного.Покупатель,
	|	ОтгрузкаСобственного.ДоговорПокупателя,
	|	ОтгрузкаСобственного.ХарактерДеятельности,
	|	ОтгрузкаСобственного.ДокументОтгрузки,
	|	ОтгрузкаСобственного.Партия,
	|	ОтгрузкаСобственного.Количество,
	|	ОтгрузкаСобственного.Выручка,
	|	ОтгрузкаСобственного.НДСНачисленный,
	|	ОтгрузкаСобственного.СчетУчета
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МПЗОтгруженные КАК ОтгрузкаСобственного
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатков.Обороты КАК Обороты
	|		ПО ОтгрузкаСобственного.Ключ = Обороты.Ключ
	|			И ОтгрузкаСобственного.Ссылка = Обороты.Ссылка
	|ГДЕ
	|	ОтгрузкаСобственного.Ссылка = &Ссылка
	|	И ОтгрузкаСобственного.СчетУчета = &СчетУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтгрузкаСобственного.ДоговорПокупателя,
	|	ОтгрузкаСобственного.Покупатель,
	|	ОтгрузкаСобственного.ХарактерДеятельности,
	|	ОтгрузкаСобственного.Партия,
	|	ОтгрузкаСобственного.ДокументОтгрузки,
	|	ОтгрузкаСобственного.Номенклатура,
	|	ОтгрузкаСобственного.НоменклатурнаяГруппа,
	|	ОтгрузкаСобственного.ВидМПЗ,
	|	ОтгрузкаСобственного.Количество,
	|	ОтгрузкаСобственного.Выручка,
	|	ОтгрузкаСобственного.НДСНачисленный,
	|	ОтгрузкаСобственного.СчетУчета";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПолучитьТабличнуюЧастьОборотыОтгружено(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Обороты.Номенклатура КАК НоменклатураСписанная,
	|	Обороты.ВидМПЗ КАК ВидСписанногоМПЗ,
	|	Обороты.Партия КАК ПартияСписаннойНоменклатуры,
	|	Обороты.Количество,
	|	ВЫБОР
	|		КОГДА Обороты.НДСВключенВстоимость
	|			ТОГДА Обороты.Сумма - Обороты.НДС
	|		ИНАЧЕ Обороты.Сумма
	|	КОНЕЦ КАК Сумма,
	|	Обороты.НДС,
	|	Обороты.НДСВключенВстоимость,
	|	МПЗ.Номенклатура КАК НоменклатураПоступившая,
	|	МПЗ.Партия КАК ПартияПоступившейНоменклатуры,
	|	МПЗ.ВидМПЗ КАК ВидПоступившегоМПЗ,
	|	МПЗ.НоменклатурнаяГруппа,
	|	МПЗ.ХарактерДеятельности
	|ИЗ
	|	Документ.ВводНачальныхОстатков.Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатков.МПЗОтгруженные КАК МПЗ
	|		ПО Обороты.Ключ = МПЗ.Ключ
	|ГДЕ
	|	Обороты.Ссылка = &Ссылка
	|	И МПЗ.Ссылка = &Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции
// }УчетДоходовИРасходовИП

////////////////////////////////////////////////////////
//Движения по регистрам УСН

Процедура ДвиженияПоРегистрамУСН_ТоварыОтгруженные(ТаблицаДанных, Отказ)
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента.Ссылка);
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Очистить();

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "РасходыНоменклатура".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ЭлементРасхода", 		"Номенклатура");
	СтруктураПолей.Вставить("СчетУчета", 			"СчетУчета");
	СтруктураПолей.Вставить("Партия",				"Партия");
	СтруктураПолей.Вставить("СтатусыПартийУСН", 	"СтатусыПартийУСН");
	СтруктураПолей.Вставить("РасчетныйДокумент", 	"Партия");
	СтруктураПолей.Вставить("СтатусыОплатыРасходовУСН", "СтатусыОплатыРасходовУСН");
	СтруктураПолей.Вставить("ОтражениеВУСН", 		"ОтражениеВУСН");
	СтруктураПолей.Вставить("Валюта", 				"Валюта");
	СтруктураПолей.Вставить("Количество", 			"Количество");
	СтруктураПолей.Вставить("Сумма", 				"ВалютнаяСумма");
	СтруктураПолей.Вставить("НДС", 					"ВалютныйНДС");
	
	ВременнаяТаблица = СформироватьЗапросПоТабличнойЧасти("МПЗОтгруженные", СтруктураПолей).Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("ВидРасхода");
	ВременнаяТаблица.Колонки.Добавить("ДоговорКонтрагента");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.Номенклатура, "ВидРасхода");
	Для Каждого СтрокаВТ ИЗ ВременнаяТаблица Цикл
		СтрокаВТ.ДоговорКонтрагента = СтрокаВТ.Партия.ДоговорКонтрагента;
	КонецЦикла;
	МассивТаблиц.Добавить(ВременнаяТаблица);
	
	//Подготовим таблицу движений регистра взаиморасчетов УСН
	ТаблицаРасходы = СобратьТаблицыРасходов(МассивТаблиц);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам_ТоварыОтгруженные(ТаблицаРасходы, Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоРегистрам_ТоварыОтгруженные(ТаблицаРасходы, Отказ)

	//ПО РЕГИСТРУ РАСХОДОВ УСН
	ДвиженияПоРегиструРасходовУСН(ТаблицаРасходы, Отказ);
	
КонецПроцедуры

//*****************************************************************************************************************************
// ОСТАТКИ НДС

Процедура ОбработкаПроведения_ОстаткиПоНДС(Отказ)
	
	//ФормированиеПроводокБух_ОстаткиПоНДС(ДанныеПоСФНДС);
	//Если НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
		
	ПроверитьЗаполнениеТабличнойЧасти_ОстаткиПоНДС(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
		ДвиженияПоРегистрамНДС_ОстаткиПоНДС(ДанныеПоСФНДС, Отказ);
		
		Если Не Отказ Тогда
			СинхронизацияСостоянияПодчиненныхДокументов();
		КонецЕсли;
		
	//КонецЕсли;
	
КонецПроцедуры


// Процедура проверяет корректность заполнения реквизитов таб. части документа
//
Процедура ПроверитьЗаполнениеТабличнойЧасти_ОстаткиПоНДС(Отказ);
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета,СтавкаНДС, ВидЦенности, СчетФактура, ОбъектСтроительства");
		//Для СМР хоз способом
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "ВидЦенности";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокЗнач = Новый СписокЗначений();
		СписокЗнач.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
		НовоеУсловие.ЗначениеРеквизита = СписокЗнач;
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "ДанныеПоСФНДС", , мТаблицаУсловий);
		СтруктураОбязательныхРеквизитов.Удалить("ОбъектСтроительства");
		
		//Для прочих ценностей БЕЗ ПРЕДЪЯВЛЕННОГО сч/ф
		СтруктураОбязательныхРеквизитов.Вставить("ПредъявленСФ");
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "ВидЦенности";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		СписокЗнач = Новый СписокЗначений();
		СписокЗнач.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
		НовоеУсловие.ЗначениеРеквизита = СписокЗнач;
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "ПредъявленСФ";
		НовоеУсловие.ВидСравнения = "=";
		НовоеУсловие.УсловиеОбъединения = "И ";
		НовоеУсловие.ЗначениеРеквизита = ЛОЖЬ;
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "ДанныеПоСФНДС", , мТаблицаУсловий);
		
		//Для прочих ценностей С ПРЕДЪЯВЛЕННЫМ сч/ф
		СтруктураОбязательныхРеквизитов.Вставить("ДатаСФ");
		СтруктураОбязательныхРеквизитов.Вставить("НомерСФ");
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "ВидЦенности";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		СписокЗнач = Новый СписокЗначений();
		СписокЗнач.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
		НовоеУсловие.ЗначениеРеквизита = СписокЗнач;
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "ПредъявленСФ";
		НовоеУсловие.ВидСравнения = "=";
		НовоеУсловие.УсловиеОбъединения = "И ";
		НовоеУсловие.ЗначениеРеквизита = ИСТИНА;
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "ДанныеПоСФНДС", , мТаблицаУсловий);
				
		// Для всех
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводНачальныхОстатковДанныеПоСФНДС.НомерСтроки
		|ИЗ
		|	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ВводНачальныхОстатковДанныеПоСФНДС
		|ГДЕ
		|	ВводНачальныхОстатковДанныеПоСФНДС.Ссылка = &ТекущийДокумент
		|	И ВводНачальныхОстатковДанныеПоСФНДС.СуммаБезНДС + ВводНачальныхОстатковДанныеПоСФНДС.НДС = 0";
		
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если РезультатЗапроса.Количество() <> 0 Тогда
			Для Каждого СтрокаЗапроса ИЗ РезультатЗапроса Цикл
					СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаЗапроса.НомерСтроки) +
					""" табличной части: ";
					СтрокаСообщения = "Не заполнено значение реквизита ""НДС (всего по счету-фактуре)""!";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЦикла;
		КонецЕсли;
	
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным Тогда
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, СтавкаНДС, ВидЦенности, Контрагент, ДоговорКонтрагента, СчетФактура, ДатаСФ, НомерСФ, СуммаБезНДС");
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "ДанныеПоСФНДС", , );
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СтавкаНДС, ВидЦенности, Контрагент, СчетФактура, ДатаСФ, НомерСФ, СуммаБезНДС");
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "ДанныеПоСФНДС", , );
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабЧасти()

////////////////////////////////////////////////////////
//Движения по регистрам НДС

Процедура ДвиженияПоРегистрамНДС_ОстаткиПоНДС(ДанныеПоСФНДС, Отказ);
	
	ТаблицаПоСобытиям = ПодготовитьТаблицуРазвернутуюПоСобытиям(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковПокупка(СтруктураШапкиДокумента, Отказ, Заголовок);
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковПродажа(СтруктураШапкиДокумента, Отказ, Заголовок);
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковАвансы(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаПоРасчетам = "";
	
	Если Не Отказ Тогда

		ДвиженияПоРегистрам_ОстаткиПоНДС(СтруктураШапкиДокумента, ТаблицаПоСобытиям, ТаблицаПоРасчетам, ТаблицаПоДвижениям, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТаблицуРазвернутуюПоСобытиям(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Запрос.УстановитьПараметр("СчетУчетаНДС0",	ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0);
	Запрос.УстановитьПараметр("СчетУчетаНДССтр",ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств);
	Запрос.УстановитьПараметр("мВалютаРегламентированногоУчета",мВалютаРегламентированногоУчета);
	
	СоответствиеСобытияИколонки  = новый Соответствие();
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком,	"НДС");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.НДСОплачен,				"НДСОплата");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,"НДССтроительство");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ОСВведеноВЭксплуатацию,	"НДСВведеноВЭксплуатацию");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость,		"НДСВключеноВСтоимость");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0,	"НДССтавка0");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, 	"НДСПредъявлено");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0,	"НДСПредъявлено0");
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПродажи.Реализация,				"НДС");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПродажи.Оплата,					"НДСОплата");
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПродажи.ПолученАванс,				"НДС");
	КонецЕсли; 
	
	Счетчик = 0;
	ТекстЗапроса = "";
	Для каждого Событие из СоответствиеСобытияИколонки Цикл
		Если Счетчик>0 Тогда
			ТекстЗапроса = ТекстЗапроса+ Символы.ПС+"Объединить все " + Символы.ПС;
		КонецЕсли; 
		Счетчик = Счетчик + 1;
		Запрос.УстановитьПараметр("Параметр"+ Счетчик,Событие.Ключ);
		Если ТипЗнч(Событие.Ключ) = Тип("ПеречислениеСсылка.СобытияПоНДСПокупки") Тогда
			Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Перечисления.СобытияПоНДСПокупки.Индекс(Событие.Ключ));
		ИначеЕсли ТипЗнч(Событие.Ключ) = Тип("ПеречислениеСсылка.СобытияПоНДСПродажи") Тогда
			Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Перечисления.СобытияПоНДСПродажи.Индекс(Событие.Ключ));
		Иначе
			Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Счетчик);
		КонецЕсли; 
		
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	&Организация как Организация,
		|	&Параметр"+Счетчик+" как Событие,
		|	&ПорядокСобытия"+Счетчик+" как ПорядокСобытия,
		|	ОсновныеДанные.Контрагент,
		|	ОсновныеДанные.ДоговорКонтрагента,
		|	ОсновныеДанные.ПредъявленСФ,";
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
			ПустыеВалюты = новый массив();
			ПустыеВалюты.Добавить(Справочники.Валюты.ПустаяСсылка());
			ПустыеВалюты.Добавить(Неопределено);
			Запрос.УстановитьПараметр("ПустыеВалюты",ПустыеВалюты);
			Запрос.УстановитьПараметр("мВалютаРегламентированногоУчета",мВалютаРегламентированногоУчета);
			ТекстЗапроса = ТекстЗапроса +"
			|	(выбор когда ОсновныеДанные.ВалютнаяСуммаСНДС = 0 или (ОсновныеДанные.ВалютаАванса в (&ПустыеВалюты) или ОсновныеДанные.ВалютаАванса = &мВалютаРегламентированногоУчета) тогда ОсновныеДанные.СуммаБез" + Событие.Значение +" + ОсновныеДанные."+Событие.Значение+" иначе ОсновныеДанные.ВалютнаяСуммаСНДС конец) как ВалютнаяСуммаСНДС,
			|	(выбор когда ОсновныеДанные.ВалютаАванса в (&ПустыеВалюты) или ОсновныеДанные.ВалютнаяСуммаСНДС = 0 тогда &мВалютаРегламентированногоУчета иначе ОсновныеДанные.ВалютаАванса конец) как ВалютаДокумента,
			|	(выбор когда ОсновныеДанные.ВалютаАванса в (&ПустыеВалюты) тогда &мВалютаРегламентированногоУчета иначе ОсновныеДанные.ВалютаАванса конец) как ОригинальнаяВалютаАванса,
			|	ОсновныеДанные.СчетФактура,";
		Иначе
			ТекстЗапроса = ТекстЗапроса +"
			|	ОсновныеДанные.СчетФактура,";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса +"
		|	ОсновныеДанные.ВидЦенности,
		|	ОсновныеДанные.СтавкаНДС,";
		
		Если ТипЗнч(Событие.Ключ) = Тип("ПеречислениеСсылка.СобытияПоНДСПродажи") Тогда
			ТекстЗапроса = ТекстЗапроса +"
			|	Неопределено  как СчетУчетаНДС,";
		ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство тогда
			ТекстЗапроса = ТекстЗапроса +"
			|	&СчетУчетаНДССтр  как СчетУчетаНДС,";
		Иначе	
			ТекстЗапроса = ТекстЗапроса +"
			|	ОсновныеДанные.СчетУчета как СчетУчетаНДС,";
		КонецЕсли; 
		
		ТекстЗапроса = ТекстЗапроса +"
		|	ОсновныеДанные.СуммаБез" + Событие.Значение +" как СуммаБезНДС,
		|	ОсновныеДанные."+Событие.Значение+" как НДС,
		|	ОсновныеДанные.НомерСтроки";
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
			Если Событие.Ключ = Перечисления.СобытияПоНДСПокупки.НДСОплачен 
				или Событие.Ключ = Перечисления.СобытияПоНДСПродажи.Оплата 
				тогда
				ТекстЗапроса = ТекстЗапроса +"
				|	, Выбор когда ОсновныеДанные.ДокументОплаты = Неопределено тогда ОсновныеДанные.СчетФактура иначе ОсновныеДанные.ДокументОплаты Конец как ДокументОплаты
				|	, Выбор когда ОсновныеДанные.ДокументОплаты = Неопределено тогда ОсновныеДанные.СчетФактура.дата иначе ОсновныеДанные.ДокументОплаты.дата Конец как ДатаСобытия
				|	";
			ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком 
				или Событие.Ключ = Перечисления.СобытияПоНДСПродажи.Реализация 
				тогда
				ТекстЗапроса = ТекстЗапроса +"
				|	, Неопределено как ДокументОплаты
				|	, ОсновныеДанные.СчетФактура.дата как ДатаСобытия
				|	";
			ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0
				тогда
				//Заполнение даты события далее
				ТекстЗапроса = ТекстЗапроса +"
				|	, Неопределено как ДокументОплаты
				|	";
				
			Иначе
				ТекстЗапроса = ТекстЗапроса +"
				|	, Неопределено как ДокументОплаты
				|	, ОсновныеДанные.Ссылка.дата как ДатаСобытия
				|	";
			КонецЕслИ;
		Иначе
			Если Событие.Ключ = Перечисления.СобытияПоНДСПродажи.ПолученАванс тогда
				ТекстЗапроса = ТекстЗапроса +"
				|	, ОсновныеДанные.СчетФактура.дата как ДатаСобытия
				|	";
			Иначе
				ТекстЗапроса = ТекстЗапроса +"
				|	, ОсновныеДанные.Ссылка.дата как ДатаСобытия
				|	";
			КонецЕслИ;
			
		КонецЕсли; 
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
			Если Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0
				тогда
				ТекстЗапроса = ТекстЗапроса +"
				|	, Выбор когда ОсновныеДанные.ДокументОтгрузки = Неопределено тогда ОсновныеДанные.Ссылка.дата иначе ОсновныеДанные.ДокументОтгрузки.дата Конец как ДатаСобытия
				|	, ОсновныеДанные.ДокументОтгрузки как ДокументОтгрузки";
				
			ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0
				тогда
				ТекстЗапроса = ТекстЗапроса +"
				|	, ОсновныеДанные.ДокументОтгрузки как ДокументОтгрузки";
			Иначе
				ТекстЗапроса = ТекстЗапроса +"
				|	, Неопределено как ДокументОтгрузки";
			КонецЕслИ;	 
			
		КонецЕсли; 
		ТекстЗапроса = ТекстЗапроса +"
		|ИЗ
		|	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ОсновныеДанные";
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
			ТекстЗапроса = ТекстЗапроса +"
			|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СчетФактураВыданный.Ссылка КАК СчетФактура,
			|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
			|	СчетФактураВыданный.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	СчетФактураВыданный.СтавкаНДС КАК СтавкаНДС
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|	
			|ГДЕ
			|	(СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС = ИСТИНА)) КАК СвязанныйСФ
			|	ПО ОсновныеДанные.ДоговорКонтрагента = СвязанныйСФ.ДоговорКонтрагента И ОсновныеДанные.СчетФактура = СвязанныйСФ.ДокументОснование
			|	";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса +"
		|
		|ГДЕ
		|	ОсновныеДанные.Ссылка = &Ссылка И
		|	(ОсновныеДанные.СуммаБез" + Событие.Значение +" <> 0 или ОсновныеДанные."+Событие.Значение+" <> 0)";
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		Если Счетчик>0 Тогда
			ТекстЗапроса = ТекстЗапроса+ Символы.ПС+"Объединить все " + Символы.ПС;
		КонецЕсли; 
		Счетчик = Счетчик + 1;
		Запрос.УстановитьПараметр("Параметр"+ Счетчик,Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура);
		Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Перечисления.СобытияПоНДСПокупки.Индекс(Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура));
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	&Организация как Организация,
		|	&Параметр"+Счетчик+" как Событие,
		|	&ПорядокСобытия"+Счетчик+" как ПорядокСобытия,
		|	ОсновныеДанные.Контрагент,
		|	ОсновныеДанные.ДоговорКонтрагента,
		|	ОсновныеДанные.ПредъявленСФ,
		|	ОсновныеДанные.СчетФактура,
		|	ОсновныеДанные.ВидЦенности,
		|	ОсновныеДанные.СтавкаНДС,
		|	ОсновныеДанные.СчетУчета КАК СчетУчетаНДС,
		|	ОсновныеДанные.СуммаБезНДС КАК СуммаБезНДС,
		|	ОсновныеДанные.НДС,
		|	ОсновныеДанные.НомерСтроки
		|	, Неопределено как ДокументОплаты
		|	, ОсновныеДанные.СчетФактура.Дата как ДатаСобытия
		|	, Неопределено как ДокументОтгрузки
		|ИЗ
		|	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ОсновныеДанные
		|
		|ГДЕ
		|	ОсновныеДанные.Ссылка = &Ссылка И
		|	(ОсновныеДанные.СуммаБезНДС <> 0 или ОсновныеДанные.НДС <> 0)
		|	и ОсновныеДанные.ПредъявленСФ = Истина ";
	КонецЕсли; 
	Если Счетчик = 0  Тогда
		Возврат новый ТаблицаЗначений();
	КонецЕсли; 
	Запрос.Текст = ТекстЗапроса + "
	|	УПОРЯДОЧИТЬ ПО
	|	ОсновныеДанные.НомерСтроки,
	|	ПорядокСобытия";
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДокумента = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаДокумента;
	
КонецФункции // ПодготовитьТаблицуРазвернутуюПоСобытиям()

Функция ПодготовитьТаблицуНачальныхОстатковПокупка(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОсновныеДанные.Контрагент КАК Поставщик,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.ВидЦенности,
	|	СУММА(ОсновныеДанные.НДС) КАК НДС,
	|	СУММА(ОсновныеДанные.НДСОплата) КАК НДСОплата,
	|	СУММА(ОсновныеДанные.НДССтроительство) КАК НДССтроительство,
	|	СУММА(ОсновныеДанные.НДСВведеноВЭксплуатацию) КАК НДСВведеноВЭксплуатацию,
	|	СУММА(ОсновныеДанные.НДСВключеноВСтоимость) КАК НДСВключеноВСтоимость,
	|	СУММА(ОсновныеДанные.НДССтавка0) КАК НДССтавка0,
	|	СУММА(ОсновныеДанные.НДСПредъявлено) КАК НДСПредъявлено,
	|	СУММА(ОсновныеДанные.НДСПредъявлено0) КАК НДСПредъявлено0,
	|	СУММА(ОсновныеДанные.НДСПредъявленоНеПодтверждено0) КАК НДСПредъявленоНеПодтверждено0,
	|	СУММА(ОсновныеДанные.НДСПодтверждено0) КАК НДСПодтверждено0,
	|	СУММА(ОсновныеДанные.НДСНеПодтверждено0) КАК НДСНеПодтверждено0,
	|	СУММА(ОсновныеДанные.НДС - ОсновныеДанные.НДСВключеноВСтоимость - ОсновныеДанные.НДСПредъявлено - ОсновныеДанные.НДССтавка0) КАК НДСНаСчетУчета,
	|	СУММА(ОсновныеДанные.НДССтавка0 - ОсновныеДанные.НДСПредъявлено0) КАК НДСНаСчет0,
	|	СУММА(ВЫБОР
	|			КОГДА ОсновныеДанные.НДССтроительство = 0
	|				ТОГДА 0
	|			КОГДА ОсновныеДанные.НДСПредъявлено = 0
	|					ИЛИ ОсновныеДанные.НДС = 0
	|				ТОГДА ОсновныеДанные.НДССтроительство
	|			КОГДА ОсновныеДанные.НДСВведеноВЭксплуатацию = 0
	|				ТОГДА ВЫБОР
	|						КОГДА -ОсновныеДанные.НДС - ОсновныеДанные.НДССтроительство - ОсновныеДанные.НДСВключеноВСтоимость - ОсновныеДанные.НДСПредъявлено - ОсновныеДанные.НДССтавка0 > ОсновныеДанные.НДССтроительство
	|							ТОГДА ОсновныеДанные.НДССтроительство
	|						ИНАЧЕ -ОсновныеДанные.НДС - ОсновныеДанные.НДССтроительство - ОсновныеДанные.НДСВключеноВСтоимость - ОсновныеДанные.НДСПредъявлено - ОсновныеДанные.НДССтавка0
	|					КОНЕЦ
	|			ИНАЧЕ ОсновныеДанные.НДССтроительство
	|		КОНЕЦ) КАК НДСНаСчетСтроительства,
	|	ВЫБОР
	|		КОГДА ОсновныеДанные.НДССтроительство > 0
	|				И ОсновныеДанные.НДС > 0
	|				И ОсновныеДанные.НДСПредъявлено > 0
	|				И ОсновныеДанные.НДСВведеноВЭксплуатацию > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РаспределитьВычетПоСтроительству,
	|	ОсновныеДанные.ДокументОтгрузки,
	|	СУММА(ОсновныеДанные.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ОсновныеДанные.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	|	СУММА(ОсновныеДанные.СуммаБезНДССтроительство) КАК СуммаБезНДССтроительство,
	|	СУММА(ОсновныеДанные.СуммаБезНДСВведеноВЭксплуатацию) КАК СуммаБезНДСВведеноВЭксплуатацию,
	|	СУММА(ОсновныеДанные.СуммаБезНДСВключеноВСтоимость) КАК СуммаБезНДСВключеноВСтоимость,
	|	СУММА(ОсновныеДанные.СуммаБезНДССтавка0) КАК СуммаБезНДССтавка0,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПредъявлено) КАК СуммаБезНДСПредъявлено,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПредъявлено0) КАК СуммаБезНДСПредъявлено0,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПредъявленоНеПодтверждено0) КАК СуммаБезНДСПредъявленоНеПодтверждено0,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПодтверждено0) КАК СуммаБезНДСПодтверждено0,
	|	СУММА(ОсновныеДанные.СуммаБезНДСНеПодтверждено0) КАК СуммаБезНДСНеПодтверждено0,
	|	ОсновныеДанные.СтавкаНДС,
	|	ОсновныеДанные.СчетУчета КАК СчетУчетаНДС,
	|	ОсновныеДанные.ОбъектСтроительства КАК Объект,
	|	ОсновныеДанные.Ссылка.Дата КАК ДатаСобытия,
	|	ОсновныеДанные.НеВлияетНаВычет,
	|	ОсновныеДанные.ДокументОплаты
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ОсновныеДанные
	|ГДЕ
	|	ОсновныеДанные.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеДанные.ДокументОтгрузки,
	|	ОсновныеДанные.ВидЦенности,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.Контрагент,
	|	ВЫБОР
	|		КОГДА ОсновныеДанные.НДССтроительство > 0
	|				И ОсновныеДанные.НДС > 0
	|				И ОсновныеДанные.НДСПредъявлено > 0
	|				И ОсновныеДанные.НДСВведеноВЭксплуатацию > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ОсновныеДанные.СчетУчета,
	|	ОсновныеДанные.СтавкаНДС,
	|	ОсновныеДанные.ОбъектСтроительства,
	|	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	|	ОсновныеДанные.ВалютаВзаиморасчетов,
	|	ОсновныеДанные.КурсВзаиморасчетов,
	|	ОсновныеДанные.КратностьВзаиморасчетов,
	|	ОсновныеДанные.Ссылка.Дата,
	|	ОсновныеДанные.НеВлияетНаВычет,
	|	ОсновныеДанные.ДокументОплаты";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует и выгружает таблицу для формирования движений по виду операции "НДС неоплаченный покупателями"
//
Функция ПодготовитьТаблицуНачальныхОстатковПродажа(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОсновныеДанные.Контрагент КАК Покупатель,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.ВидЦенности,
	|	СУММА(ОсновныеДанные.НДС) КАК НДС,
	|	СУММА(ОсновныеДанные.НДСОплата) КАК НДСОплата,
	|	ОсновныеДанные.ДокументОтгрузки,
	|	СУММА(ОсновныеДанные.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ОсновныеДанные.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	|	ОсновныеДанные.СтавкаНДС,
	|	ОсновныеДанные.СчетУчета КАК СчетУчетаНДС,
	|	ОсновныеДанные.ОбъектСтроительства КАК Объект,
	|	ОсновныеДанные.ДокументОплаты,
	|	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПодтверждено0) КАК СуммаБезНДСПодтверждено0,
	|	СУММА(ОсновныеДанные.НДСПодтверждено0) КАК НДСПодтверждено0,
	|	СУММА(ОсновныеДанные.СуммаБезНДСНеПодтверждено0) КАК СуммаБезНДСНеПодтверждено0,
	|	СУММА(ОсновныеДанные.НДСНеПодтверждено0) КАК НДСНеПодтверждено0,
	|	ОсновныеДанные.Ссылка.Дата КАК ДатаСобытия,
	|	ОсновныеДанные.СтавкаНДСНеПодтверждена0
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ОсновныеДанные
	|ГДЕ
	|	ОсновныеДанные.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеДанные.ДокументОтгрузки,
	|	ОсновныеДанные.ВидЦенности,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.Контрагент,
	|	ОсновныеДанные.СчетУчета,
	|	ОсновныеДанные.СтавкаНДС,
	|	ОсновныеДанные.ОбъектСтроительства,
	|	ОсновныеДанные.ДокументОплаты,
	|	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	|	ОсновныеДанные.Ссылка.Дата,
	|	ОсновныеДанные.СтавкаНДСНеПодтверждена0";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПодготовитьТаблицуНачальныхОстатковАвансы(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОсновныеДанные.Контрагент КАК Покупатель,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.ВидЦенности,
	|	СУММА(ОсновныеДанные.НДС) КАК НДС,
	|	СУММА(ОсновныеДанные.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ОсновныеДанные.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	|	ОсновныеДанные.СтавкаНДС,
	|	ОсновныеДанные.СчетУчета КАК СчетУчетаНДС,
	|	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	|	СУММА(ОсновныеДанные.НДСОплата) КАК НДСОплата,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПодтверждено0) КАК СуммаБезНДСПодтверждено0,
	|	СУММА(ОсновныеДанные.НДСПодтверждено0) КАК НДСПодтверждено0,
	|	СУММА(ОсновныеДанные.СуммаБезНДСНеПодтверждено0) КАК СуммаБезНДСНеПодтверждено0,
	|	СУММА(ОсновныеДанные.НДСНеПодтверждено0) КАК НДСНеПодтверждено0,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПредъявлено) КАК СуммаБезНДСПредъявлено,
	|	СУММА(ОсновныеДанные.НДСПредъявлено) КАК НДСПредъявлено,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПредъявлено0) КАК СуммаБезНДСПредъявлено0,
	|	СУММА(ОсновныеДанные.НДСПредъявлено0) КАК НДСПредъявлено0,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПредъявленоНеПодтверждено0) КАК СуммаБезНДСПредъявленоНеПодтверждено0,
	|	СУММА(ОсновныеДанные.НДСПредъявленоНеПодтверждено0) КАК НДСПредъявленоНеПодтверждено0,
	|	ОсновныеДанные.ВалютаАванса,
	|	СУММА(ОсновныеДанные.ВалютнаяСуммаСНДС) КАК ВалютнаяСуммаСНДС,
	|	ОсновныеДанные.СчетФактура КАК СчетФактура,
	|	ОсновныеДанные.ДокументОтгрузки,
	|	ОсновныеДанные.ДокументОтгрузки.Дата КАК ДатаОплаты,
	|	ОсновныеДанные.Ссылка.Дата КАК ДатаСобытия,
	|	СУММА(ВЫБОР
	|			КОГДА ОсновныеДанные.ВалютнаяСуммаСНДС = 0
	|				ТОГДА 1
	|			ИНАЧЕ (ОсновныеДанные.СуммаБезНДС + ОсновныеДанные.НДС) / ОсновныеДанные.ВалютнаяСуммаСНДС
	|		КОНЕЦ) КАК КурсАванса,
	|	ОсновныеДанные.ДокументОплаты
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ОсновныеДанные
	|ГДЕ
	|	ОсновныеДанные.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеДанные.ВидЦенности,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.Контрагент,
	|	ОсновныеДанные.СчетУчета,
	|	ОсновныеДанные.СтавкаНДС,
	|	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	|	ОсновныеДанные.ВалютаВзаиморасчетов,
	|	ОсновныеДанные.КурсВзаиморасчетов,
	|	ОсновныеДанные.КратностьВзаиморасчетов,
	|	ОсновныеДанные.ВалютаАванса,
	|	ОсновныеДанные.ВалютнаяСуммаСНДС,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.ДокументОтгрузки,
	|	ОсновныеДанные.ДокументОтгрузки.Дата,
	|	ОсновныеДанные.Ссылка.Дата,
	|	ОсновныеДанные.ДокументОплаты";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПокупки(СтруктураШапкиДокумента, Отказ,Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОсновныеДанные.Контрагент,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.ВидЦенности,
	|	ОсновныеДанные.ОбъектСтроительства,
	|	ОсновныеДанные.СчетУчета КАК СчетУчетаНДС,
	|	ОсновныеДанные.НДС,
	|	ОсновныеДанные.НДСОплата,
	|	ОсновныеДанные.НДССтроительство,
	|	ОсновныеДанные.НДСВведеноВЭксплуатацию,
	|	ОсновныеДанные.НДСВключеноВСтоимость,
	|	ОсновныеДанные.НДССтавка0,
	|	ОсновныеДанные.НДСПредъявлено,
	|	ОсновныеДанные.НДСПредъявлено0,
	|	ОсновныеДанные.НДС - ОсновныеДанные.НДСВключеноВСтоимость - ОсновныеДанные.НДСПредъявлено - ОсновныеДанные.НДССтавка0 КАК НДСНаСчетУчета,
	|	ОсновныеДанные.НДССтавка0 - ОсновныеДанные.НДСПредъявлено0 - ОсновныеДанные.НДСПредъявленоНеПодтверждено0 КАК НДСНаСчет0,
	|	ОсновныеДанные.НомерСтроки КАК НомерСтроки,
	|	ОсновныеДанные.ДокументОтгрузки
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ОсновныеДанные
	|ГДЕ
	|	ОсновныеДанные.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДокумента = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаДокумента;
	
КонецФункции //ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПокупки()	

Функция ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПродажи(СтруктураШапкиДокумента, Отказ,Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Запрос.УстановитьПараметр("Авансы0", Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОсновныеДанные.Контрагент,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.НДС КАК НДСНаСчетУчета,
	|	ОсновныеДанные.НомерСтроки,
	|	ОсновныеДанные.СчетУчета,
	|	" + ?(СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным, "ВЫБОР КОГДА ОсновныеДанные.ВидЦенности = &Авансы0 ТОГДА ОсновныеДанные.НДСПредъявлено0 + ОсновныеДанные.НДСПредъявленоНеПодтверждено0 ИНАЧЕ ОсновныеДанные.НДСОплата КОНЕЦ", "0") + " КАК НДСКВычету
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ОсновныеДанные
	|
	|ГДЕ
	|	ОсновныеДанные.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновныеДанные.НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДокумента = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаДокумента;
	
КонецФункции //ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПродажи()	

Процедура ДвиженияПоРегистрам_ОстаткиПоНДС(СтруктураШапкиДокумента, ТаблицаДокумента, ТаблицаРасчетов, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если ТаблицаДокумента.Количество() = 0 И ТаблицаПоДвижениям.Количество() = 0 Тогда //И ТаблицаРасчетов.Количество() = 0
		Возврат;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СформироватьПроводкиПоВводуОстатковНДСПокупателей(СтруктураШапкиДокумента, Отказ,Заголовок);
		КонецЕсли;
		
		Если Не УСН Тогда
			
			Если СтруктураШапкиДокумента.ОтражатьПоСпециальнымРегистрам Тогда
				
				СформироватьДвиженияВводОстатковПоРегиструНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);		
				
				СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
				
				СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
				
				СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
				
				СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);		
				
				ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковПокупка(СтруктураШапкиДокумента, Отказ, Заголовок);
				СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СформироватьПроводкиПоВводуОстатковНДСПокупателей(СтруктураШапкиДокумента, Отказ,Заголовок);
		КонецЕсли;
		
		Если Не УСН Тогда
			Если СтруктураШапкиДокумента.ОтражатьПоСпециальнымРегистрам Тогда
				
				СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
				
				СформироватьДвиженияВводОстатковПоРегиструНДСРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
				
				СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
				
			КонецЕсли;			
		КонецЕсли;
			
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СформироватьПроводкиПоВводуОстатковНДСПоставщиков(СтруктураШапкиДокумента,  Отказ, Заголовок);
		КонецЕсли;
		
		Если Не УСН Тогда
			Если СтруктураШапкиДокумента.ОтражатьПоСпециальнымРегистрам Тогда
				
				СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок);
				
				СформироватьДвиженияВводОстатковПоРегиструНДСВключенныйВСтоимость(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок);
				
				СформироватьДвиженияВводОстатковПоРегиструНДСпоОСиНМА(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);	
				
				СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
				
				СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
				
				СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
				
				СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамНДС()

Процедура СформироватьПроводкиПоВводуОстатковНДСПоставщиков(СтруктураШапкиДокумента, Отказ,Заголовок)
	
	ТаблицаДляПроводок = ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПокупки(СтруктураШапкиДокумента, Отказ,Заголовок);
	
	Счет000 = ПланыСчетов.Хозрасчетный.Вспомогательный;
	Для Каждого СтрокаДок Из ТаблицаДляПроводок Цикл
		
		Если СтрокаДок.НДСНаСчет0<>0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = СодержаниеПроводки;
			
			Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДок.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаДок.СчетФактура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРеализации", СтрокаДок.ДокументОтгрузки);
			
			Проводка.СчетКт       = Счет000;
			Проводка.Сумма        = СтрокаДок.НДСНаСчет0;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				Если Проводка.СчетДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт        = СтрокаДок.НДСНаСчет0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли; 
		
		Если СтрокаДок.НДСНаСчетУчета <> 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = СодержаниеПроводки;
			
			Проводка.СчетДт       = СтрокаДок.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДок.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаДок.СчетФактура);
			Если ТипЗнч(СтрокаДок.ОбъектСтроительства) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаДок.ОбъектСтроительства);
			КонецЕсли;
			
			Проводка.СчетКт       = Счет000;
			Проводка.Сумма        = СтрокаДок.НДСНаСчетУчета;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				Если Проводка.СчетДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт        = СтрокаДок.НДСНаСчетУчета;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры // СформироватьПроводкиПоВводуОстатковНДСПоставщиков()

Процедура СформироватьПроводкиПоВводуОстатковНДСПокупателей(СтруктураШапкиДокумента, Отказ,Заголовок)
	
	ТаблицаДляПроводок = ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПродажи(СтруктураШапкиДокумента, Отказ,Заголовок);
	
	Счет000 = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	Для Каждого СтрокаДок Из ТаблицаДляПроводок Цикл
		Если СтрокаДок.НДСНаСчетУчета=0 И СтрокаДок.НДСКВычету = 0 Тогда
			//Нет необходимости формировать проводку с 0 суммой.
			Продолжить;
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
			
			Если СтрокаДок.СчетУчета = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам Тогда
				Если СтрокаДок.НДСНаСчетУчета=0 Тогда
					Продолжить;
				КонецЕсли;
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = СодержаниеПроводки;
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДок.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные", СтрокаДок.СчетФактура);
				
				Проводка.СчетКт       = Счет000;
				
				Если СтрокаДок.НДСКВычету <> 0 Тогда
					
					Проводка2 = Движения.Хозрасчетный.Добавить();
					
					Проводка2.Период       = СтруктураШапкиДокумента.Дата;
					Проводка2.Организация  = СтруктураШапкиДокумента.Организация;
					
					Проводка2.СчетДт       = Счет000;
					
					Проводка2.Содержание   = СодержаниеПроводки;
					Проводка2.СчетКт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, "Контрагенты", СтрокаДок.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, "СФВыданные", СтрокаДок.СчетФактура);
					
					Проводка2.Сумма = СтрокаДок.НДСКВычету;
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						Если Проводка2.СчетКт.НалоговыйУчет Тогда
							Проводка2.СуммаНУКт        = СтрокаДок.НДСКВычету;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				Проводка.Сумма        = СтрокаДок.НДСНаСчетУчета;
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					Если Проводка.СчетДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт        = СтрокаДок.НДСНаСчетУчета;
					КонецЕсли;
				КонецЕсли;
			Иначе
				
				Если СтрокаДок.НДСКВычету <> 0 Тогда
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период       = СтруктураШапкиДокумента.Дата;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание   = СодержаниеПроводки;
					Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаДок.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", СтрокаДок.СчетФактура);
					
					Проводка.СчетДт       = Счет000;
					
					Проводка.Сумма        = СтрокаДок.НДСКВычету;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьПроводкиПоВводуОстатковНДСПокупателей()

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоДвижениям.Колонки.Добавить("ДатаОплаты");
	Для Каждого СтрокаДвижения Из ТаблицаПоДвижениям Цикл
		Если ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты) Тогда
			СтрокаДвижения.ДатаОплаты = ?(ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты.ДатаВходящегоДокумента),СтрокаДвижения.ДокументОплаты.ДатаВходящегоДокумента,СтрокаДвижения.ДокументОплаты.Дата);
		КонецЕсли;
	КонецЦикла;
	
	МассивВидовЦенностейНалоговогоАгента = Новый Массив;
	МассивВидовЦенностейНалоговогоАгента.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	МассивВидовЦенностейНалоговогоАгента.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	МассивВидовЦенностейНалоговогоАгента.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	МассивВидовЦенностейНалоговогоАгента.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	
	ДвиженияНДСПредъявленный = Движения.НДСПредъявленный;
	
	ТаблицаДвиженийНДСПредъявленный = ДвиженияНДСПредъявленный.ВыгрузитьКолонки();
	// НДС предъявленный поставщиком
	//ТаблицаДвиженийНДСПредъявленный.Очистить();
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		Для Каждого СтрокаДвижения Из ТаблицаПоДвижениям Цикл
			Если СтрокаДвижения.ВидЦенности <> Перечисления.ВидыЦенностей.АвансыВыданные Тогда
				СтрокаДвижения.СуммаБезНДС = 0;
				СтрокаДвижения.НДС = 0;
				Продолжить;
			Иначе
				СтрокаДвижения.СуммаБезНДС = СтрокаДвижения.СуммаБезНДС - СтрокаДвижения.СуммаБезНДСОплата;
				СтрокаДвижения.НДС = СтрокаДвижения.НДС - СтрокаДвижения.НДСОплата;
				СтрокаДвижения.СчетУчетаНДС = "";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСпредъявленный);
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСпредъявленный Цикл
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
			Если СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
				СтрокаДвижения.Поставщик = Неопределено;
			КонецЕсли;
			Если МассивВидовЦенностейНалоговогоАгента.Найти(СтрокаДвижения.ВидЦенности) = Неопределено Тогда				
				СтрокаДвижения.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Иначе
				Если НЕ СтрокаДвижения.ДоговорКонтрагента.НалоговыйАгентПоОплате Тогда 
					СтрокаДвижения.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтрокаДвижения.ДатаСобытия = ?(СтрокаДвижения.СчетФактура = Неопределено, "", СтрокаДвижения.СчетФактура.Дата);
		СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленный);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленный.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленный;
		ДвиженияНДСПредъявленный.ВыполнитьПриход();
		
	КонецЕсли;	
	
	// НДС включенный в стоимость
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям 
		ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		ТаблицаДвиженийНДСПредъявленный.Очистить();
		
		ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость");
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСпредъявленный);
		ТаблицаДвиженийНДСПредъявленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость, "Событие");
		
		ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость", Ложь);
		
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСпредъявленный Цикл
			Если СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
				СтрокаДвижения.Поставщик = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленный);
		
		Если Не Отказ Тогда
			
			ДвиженияНДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСПредъявленный.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленный;
			ДвиженияНДСПредъявленный.ВыполнитьРасход();
			
		КонецЕсли;	
	КонецЕсли;
	
	// НДС принятый к вычету
	ТаблицаДвиженийНДСПредъявленный.Очистить();
	
	ТаблицаКВычету = ТаблицаПоДвижениям.Скопировать();
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		Для Каждого СтрокаТаблицы ИЗ ТаблицаКВычету Цикл
			Если МассивВидовЦенностейНалоговогоАгента.Найти(СтрокаТаблицы.ВидЦенности) = Неопределено Тогда				
				СтрокаТаблицы.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Иначе
				Если НЕ СтрокаТаблицы.ДоговорКонтрагента.НалоговыйАгентПоОплате Тогда 
					СтрокаТаблицы.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ТаблицаКВычету.Свернуть("Организация, СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС, Поставщик, ДоговорКонтрагента, ДатаСобытия, ДатаОплаты",
		"СуммаБезНДСПредъявлено, НДСПредъявлено, СуммаБезНДСПредъявлено0, НДСПредъявлено0, 
		|СуммаБезНДСПредъявленоНеПодтверждено0, НДСПредъявленоНеПодтверждено0");
	Иначе
		ТаблицаКВычету.Свернуть("Организация, СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС, Поставщик, ДоговорКонтрагента, ДатаСобытия, ДатаОплаты",
		"СуммаБезНДСПредъявлено, НДСПредъявлено, СуммаБезНДСПредъявлено0, НДСПредъявлено0, 
		|СуммаБезНДСПредъявленоНеПодтверждено0, НДСПредъявленоНеПодтверждено0");
	КонецЕсли;
	
	// НДС принятый к вычету						
	ТаблицаКВычету.Колонки.СуммаБезНДСПредъявлено.Имя = "СуммаБезНДС";
	ТаблицаКВычету.Колонки.НДСПредъявлено.Имя = "НДС";
	ТаблицаКВычету.Колонки.Добавить("Событие");
	ТаблицаКВычету.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКВычету, ТаблицаДвиженийНДСПредъявленный);
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		// НДС по ставке 0% принятый к вычету
		ТаблицаКВычету.Колонки.Удалить("СуммаБезНДС");
		ТаблицаКВычету.Колонки.Удалить("НДС");
		ТаблицаКВычету.Колонки.СуммаБезНДСПредъявлено0.Имя = "СуммаБезНДС";
		ТаблицаКВычету.Колонки.НДСПредъявлено0.Имя = "НДС";
		ТаблицаКВычету.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКВычету, ТаблицаДвиженийНДСПредъявленный);
		
		// НДС по ставке 0% (не подтверждено) принятый к вычету
		ТаблицаКВычету.Колонки.Удалить("СуммаБезНДС");
		ТаблицаКВычету.Колонки.Удалить("НДС");
		ТаблицаКВычету.Колонки.СуммаБезНДСПредъявленоНеПодтверждено0.Имя = "СуммаБезНДС";
		ТаблицаКВычету.Колонки.НДСПредъявленоНеПодтверждено0.Имя = "НДС";
		ТаблицаКВычету.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКВычету, ТаблицаДвиженийНДСПредъявленный);
		
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСпредъявленный Цикл
			Если СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
				СтрокаДвижения.Поставщик = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленный);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленный.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленный;
		ДвиженияНДСПредъявленный.ВыполнитьРасход();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСВключенныйВСтоимость(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСВключенныйВСтоимость = Движения.НДСВключенныйВСтоимость;
	
	ТаблицаДвиженийНДСВключенныйВСтоимость = ДвиженияНДСВключенныйВСтоимость.ВыгрузитьКолонки();
	//ТаблицаДвиженийНДСВключенныйВСтоимость.Очистить();
	
	ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость");
	ТаблицаПоДвижениямНДС = ТаблицаПоДвижениям.Скопировать();
	УдалитьДвиженияПоВидуЦенности(ТаблицаПоДвижениямНДС, Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениямНДС, ТаблицаДвиженийНДСВключенныйВСтоимость);
	
	ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость", Ложь);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСВключенныйВСтоимость);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСВключенныйВСтоимость.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСВключенныйВСтоимость.мТаблицаДвижений = ТаблицаДвиженийНДСВключенныйВСтоимость;
		ДвиженияНДСВключенныйВСтоимость.ДобавитьДвижение();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСпоОСиНМА(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоОСиНМА = Движения.НДСпоОСиНМА;
	ТаблицаДвиженийНДСПоОСиНМА = ДвиженияПоОСиНМА.ВыгрузитьКолонки();
	
	// Движение по объектам строительства ожидающим принятия к учету
	//ТаблицаДвиженийНДСПоОСиНМА.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Объект) Тогда
			
			Если ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
				Состояние = Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
				Состояние = Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОС;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.ОсновныеСредства") 
				ИЛИ ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
				Состояние = Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию;
			КонецЕсли;
			Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСПоОСиНМА.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.Состояние	= Состояние;
				СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство;
				СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
			КонецЕсли;
			// Ценность отнесена на объект строительства
			Если СтрокаТаблицы.ВидЦенности <> Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
				Если СтрокаТаблицы.СуммаБезНДССтроительство <> 0 ИЛИ СтрокаТаблицы.НДССтроительство <> 0 Тогда
					СтрокаДвижения = ТаблицаДвиженийНДСПоОСиНМА.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
					СтрокаДвижения.СуммаБезНДС 	= СтрокаТаблицы.СуммаБезНДССтроительство;
					СтрокаДвижения.НДС			= СтрокаТаблицы.НДССтроительство;
					СтрокаДвижения.Состояние	= Состояние;
					Если ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.НематериальныеАктивы") 
						Или ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.Номенклатура") Тогда				
						СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
					ИначеЕсли ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
						СтрокаДвижения.Событие		= Неопределено;
					Иначе
						СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство;
					КонецЕсли;
					СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
				КонецЕсли;
			КонецЕсли;
			//Объект строительства введен в эксплуатацию
			Если СтрокаТаблицы.СуммаБезНДСВведеноВЭксплуатацию <> 0 ИЛИ СтрокаТаблицы.НДСВведеноВЭксплуатацию <> 0 Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСПоОСиНМА.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС 	= СтрокаТаблицы.СуммаБезНДСВведеноВЭксплуатацию;
				СтрокаДвижения.НДС			= СтрокаТаблицы.НДСВведеноВЭксплуатацию;
				СтрокаДвижения.Состояние	= Состояние;
				СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ОСВведеноВЭксплуатацию;
				СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Расход;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПоОСиНМА);
	Если Не Отказ Тогда
		
		ДвиженияПоОСиНМА.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияПоОСиНМА.мТаблицаДвижений = ТаблицаДвиженийНДСПоОСиНМА;
		ДвиженияПоОСиНМА.ДобавитьДвижение();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0;
	ТаблицаДвиженийНДСПредъявленныйРеализация0 = ДвиженияНДСПредъявленныйРеализация0.ВыгрузитьКолонки(); 
	
	// Движение по НДС по ставке 0% ожидается подтверждение
	//ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
	
	ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
	УдалитьДвиженияПоВидуЦенности(ТаблицаДвижений, Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			Если СтрокаТаблицы.ВидЦенности <> Перечисления.ВидыЦенностей.АвансыПолученные0 Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			СтрокаТаблицы.СуммаБезНДС 	= СтрокаТаблицы.СуммаБезНДССтавка0;
			СтрокаТаблицы.НДС			= СтрокаТаблицы.НДССтавка0;
			СтрокаТаблицы.ДатаСобытия 	= ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
			СтруктураШапкиДокумента.Дата, 
			СтрокаТаблицы.ДокументОтгрузки.Дата);
		КонецЦикла;
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			Если СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным Тогда
				СтрокаТаблицы.СуммаБезНДС = 0;
				СтрокаТаблицы.НДС = 0;
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСОплата;
			СтрокаТаблицы.НДС = СтрокаТаблицы.НДСОплата;
			СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
			СтруктураШапкиДокумента.Дата, 
			СтрокаТаблицы.ДокументОтгрузки.Дата);
		КонецЦикла;
	КонецЕсли;							
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0, "Событие");
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьПриход(Ложь);
		
	КонецЕсли;
	
	// Движение по НДС по ставке 0% подтверждена
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПодтверждено0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
		СтруктураШапкиДокумента.Дата, 
		СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
		
	КонецЕсли;	
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0, "Состояние");
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьПриход(Ложь);
		
	КонецЕсли;	
	
	// Движение по НДС по ставке 0% не подтверждена
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
		СтруктураШапкиДокумента.Дата, 
		СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
		
	КонецЕсли;	
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0, "Состояние");
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьПриход(Ложь);
		
	КонецЕсли;	
	
	// Движение по НДС по ставке 0% предъявлена к вычету
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПредъявлено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПредъявлено0;
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход();
		
	КонецЕсли;
	// Движение по НДС по ставке 0% не подтверждено предъявлена к вычету
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПредъявленоНеПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПредъявленоНеПодтверждено0;
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	ДвиженияНДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок;
	
	ТаблицаДвиженийНДСЗаписиКнигиПокупок = ДвиженияНДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	//ТаблицаДвиженийНДСЗаписиКнигиПокупок.Очистить();
	
	ТаблицаЗаписей = ТаблицаПоДвижениям.Скопировать();
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		ТаблицаЗаписей.Колонки.Покупатель.Имя = "Поставщик";
	КонецЕсли;
	
	КолонкиГруппировки 	= "";
	КолонкиСуммирования	= "СуммаБезНДСПредъявлено0, НДСПредъявлено0, СуммаБезНДСПредъявленоНеПодтверждено0, НДСПредъявленоНеПодтверждено0";
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		КолонкиГруппировки 	= "Организация, СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС, Поставщик, ДокументОплаты";
		КолонкиСуммирования	= КолонкиСуммирования+ ", СуммаБезНДСПредъявлено, НДСПредъявлено"; 
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		КолонкиГруппировки 	= "Организация, СчетФактура, ВидЦенности, СтавкаНДС, Поставщик, ДоговорКонтрагента, ДатаОплаты";
		КолонкиСуммирования	= КолонкиСуммирования+ ", СуммаБезНДСОплата, НДСОплата";
	КонецЕсли;
	
	ТаблицаЗаписей.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
	ТаблицаЗаписей.Колонки.Добавить("Событие");
	
	Если не СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		
		ТаблицаЗаписей.Колонки.СуммаБезНДСПредъявлено.Имя = "СуммаБезНДС";
		ТаблицаЗаписей.Колонки.НДСПредъявлено.Имя = "НДС";
		ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвиженийНДСЗаписиКнигиПокупок);
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПокупок Цикл
			Если СтрокаДвижения.ВидЦенности <> Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДвижения.Поставщик = Справочники.Контрагенты.ПустаяСсылка();
			СтрокаДвижения.ДатаОплаты = ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты), 
			Неопределено,
			СтрокаДвижения.ДокументОплаты.Дата);
		КонецЦикла;
		
	Иначе
		
		ТаблицаЗаписей.Колонки.СуммаБезНДСОплата.Имя = "СуммаБезНДС";
		ТаблицаЗаписей.Колонки.НДСОплата.Имя = "НДС";
		ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
		Для каждого СтрокаЗаписи Из ТаблицаЗаписей Цикл
			Если не СтрокаЗаписи.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0 
				и не (СтрокаЗаписи.СуммаБезНДС = 0 и СтрокаЗаписи.НДС = 0)
				Тогда
				СтрокаКниги = ТаблицаДвиженийНДСЗаписиКнигиПокупок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКниги,СтрокаЗаписи);
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли;
	
	УдалитьДвиженияПоВидуЦенности(ТаблицаЗаписей, Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	// НДС по ставке 0% принятый к вычету
	ТаблицаЗаписей.Колонки.Удалить("СуммаБезНДС");
	ТаблицаЗаписей.Колонки.Удалить("НДС");
	ТаблицаЗаписей.Колонки.СуммаБезНДСПредъявлено0.Имя = "СуммаБезНДС";
	ТаблицаЗаписей.Колонки.НДСПредъявлено0.Имя = "НДС";
	ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвиженийНДСЗаписиКнигиПокупок);
	
	// НДС по ставке 0% (не подтверждено) принятый к вычету
	ТаблицаЗаписей.Колонки.Удалить("СуммаБезНДС");
	ТаблицаЗаписей.Колонки.Удалить("НДС");
	ТаблицаЗаписей.Колонки.СуммаБезНДСПредъявленоНеПодтверждено0.Имя = "СуммаБезНДС";
	ТаблицаЗаписей.Колонки.НДСПредъявленоНеПодтверждено0.Имя = "НДС";
	ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвиженийНДСЗаписиКнигиПокупок);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСЗаписиКнигиПокупок);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСЗаписиКнигиПокупок.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвиженийНДСЗаписиКнигиПокупок;
		ДвиженияНДСЗаписиКнигиПокупок.ДобавитьДвижение();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	ДвиженияНДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж;
	
	ТаблицаДвиженийНДСЗаписиКнигиПродаж = ДвиженияНДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСЗаписиКнигиПродаж);
		
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПродаж Цикл
			
			Если СтрокаДвижения.ВидЦенности		= Перечисления.ВидыЦенностей.АвансыВыданные Тогда
				СтрокаДвижения.СуммаБезНДС = 0;
				СтрокаДвижения.НДС = 0;
			Иначе
				
				СтрокаДвижения.ДокументОплаты 	= СтрокаДвижения.СчетФактура;
				СтрокаДвижения.ДатаОплаты		= СтрокаДвижения.СчетФактура.Дата;
				СтрокаДвижения.ВидЦенности		= Перечисления.ВидыЦенностей.АвансыПолученные;
				СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.ПолученАванс;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		
		ТаблицаПоДвижениямСМР = ТаблицаПоДвижениям.Скопировать();
		УдалитьДвиженияПоВидуЦенности(ТаблицаПоДвижениямСМР, Перечисления.ВидыЦенностей.СМРСобственнымиСилами, Ложь);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениямСМР, ТаблицаДвиженийНДСЗаписиКнигиПродаж);
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПродаж Цикл
			СтрокаДвижения.ДатаОплаты		= ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты),
			СтрокаДвижения.СчетФактура.Дата,
			СтрокаДвижения.ДокументОплаты.Дата);
			СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
			СтрокаДвижения.ДоговорКонтрагента = Неопределено;
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
			
			Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
				СтрокаДвижения.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
				СтрокаДвижения.ДатаОплаты 		= ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты), СтруктураШапкиДокумента.Дата, СтрокаДвижения.ДокументОплаты.Дата);
				СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
				Если не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
				СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСПодтверждено0;
				
				СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0;
				Если не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
			Иначе
				
				СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС 		= СтрокаТаблицы.СуммаБезНДСОплата;
				СтрокаДвижения.НДС 				= СтрокаТаблицы.НДСОплата;
				СтрокаДвижения.ДатаОплаты 		= ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты), СтруктураШапкиДокумента.Дата, СтрокаДвижения.ДокументОплаты.Дата);
				СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.Реализация;
				Если не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
			
				СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС 		= СтрокаДвижения.СуммаБезНДС - СтрокаТаблицы.СуммаБезНДСОплата;
				СтрокаДвижения.НДС 				= СтрокаДвижения.НДС - СтрокаТаблицы.НДСОплата;
				СтрокаДвижения.ДокументОплаты 	= Неопределено;
				СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.Реализация;
				Если не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСЗаписиКнигиПродаж);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСЗаписиКнигиПродаж.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвиженийНДСЗаписиКнигиПродаж;
		ДвиженияНДСЗаписиКнигиПродаж.ДобавитьДвижение();
		
	КонецЕсли;	
	
	
КонецПроцедуры

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСНачисленный = Движения.НДСНачисленный;
	
	ТаблицаДвиженийНДСНачисленный = ДвиженияНДСНачисленный.ВыгрузитьКолонки();
	
	//ТаблицаДвиженийНДСНачисленный.Очистить();
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным
		ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		// Авансы и СМРХозпособом
		
		ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
		
		Для Каждого СтрокаТаблицы ИЗ ТаблицаДвижений Цикл
			Если СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным Тогда
				СтрокаТаблицы.СуммаБезНДС = 0;
				СтрокаТаблицы.НДС = 0;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСНачисленный);
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСНачисленный);
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
			УдалитьДвиженияПоВидуЦенности(ТаблицаДвиженийНДСНачисленный, Перечисления.ВидыЦенностей.СМРСобственнымиСилами, Ложь);
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСНачисленКУплате, "ВидНачисления");
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Неопределено, "Покупатель, ДоговорКонтрагента");
		Иначе	
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСсАвансов, "ВидНачисления");
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыПолученные , "ВидЦенности");
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения("" , "СчетУчетаНДС");
		КонецЕсли;
		Если Не Отказ Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьПриход(Ложь);
			// Отражение в книге продаж сразу же, по факту начисления НДС с аванса
			ДвиженияНДСНачисленный.ВыполнитьРасход(Ложь);
			
		КонецЕсли;
		
	Иначе
		// Продажа
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСНачисленный);
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения("" , "СчетУчетаНДС");
		
		Для Каждого СтрокаДвижения из ТаблицаДвиженийНДСНачисленный Цикл
			Если СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС;
			ИначеЕсли СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
			Иначе
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
			КонецЕсли;	
			СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
			СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
			Если не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
				СтрокаДвижения.ДоговорКонтрагента = Неопределено;
			КонецЕсли; 
		КонецЦикла;
		
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСНачисленный);
		Если Не Отказ Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьПриход(Ложь);
			
		КонецЕсли;
		
		// Не подтверждение 0%
		ТаблицаДвиженийНДСНачисленный.Очистить();
		ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
		
		СтрокиКУдалению = Новый Массив();
		
		Для Каждого СтрокаТаблицы из ТаблицаДвижений Цикл
			Если (Не СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0) Или (СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 = 0) Или 
				(СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 И ТипЗнч(СтрокаТаблицы.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			Иначе
				СтрокаТаблицы.СуммаБезНДС = - (СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 + СтрокаТаблицы.НДСНеПодтверждено0);
				СтрокаТаблицы.НДС = 0;
				СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты),
				СтрокаТаблицы.СчетФактура.Дата,
				СтрокаТаблицы.ДокументОплаты.Дата);
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
				
				Если не СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаТаблицы.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСНачисленный);
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения("" , "СчетУчетаНДС");
		
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл;
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
			СтрокаТаблицы.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
			СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
			
			Если не СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
				СтрокаТаблицы.ДоговорКонтрагента = Неопределено;
			КонецЕсли; 
		КонецЦикла;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСНачисленный);
		
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0, "Событие");
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.Реализация0, "ВидНачисления");
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения("" , "СчетУчетаНДС");
		
		Если Не Отказ Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьПриход(Ложь);
			
		КонецЕсли;
		
		ТаблицаДвиженийНДСНачисленный.Очистить();
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
			
			Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
				СтрокаДвижения.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
				Если не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСПодтверждено0;
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
				Если не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
			Иначе
				
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.ВидНачисления = ?(СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, 
				Перечисления.НДСВидНачисления.РеализацияБезНДС,
				Перечисления.НДСВидНачисления.РеализацияСНДС);
				Если не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла;
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСНачисленный);
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения("" , "СчетУчетаНДС");
		
		Если Не Отказ Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьРасход(Ложь);
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСРеализация0 = Движения.НДСРеализация0;
	
	ТаблицаДвиженийНДСРеализация0 = ДвиженияНДСРеализация0.ВыгрузитьКолонки();
	//ТаблицаДвиженийНДСРеализация0.Очистить();
	
	ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
	Счетчик = ТаблицаДвижений.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		Если ТаблицаДвижений[Счетчик].СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Или 
			(ТаблицаДвижений[Счетчик].СтавкаНДС = Перечисления.СтавкиНДС.НДС0 И ТипЗнч(ТаблицаДвижений[Счетчик].СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")) Тогда
			ТаблицаДвижений.Удалить(ТаблицаДвижений[Счетчик]);
		Иначе	
			ТаблицаДвижений[Счетчик].ДатаСобытия = ?(НЕ ЗначениеЗаполнено(ТаблицаДвижений[Счетчик].СчетФактура),
			СтруктураШапкиДокумента.Дата,
			ТаблицаДвижений[Счетчик].СчетФактура.Дата);
		КонецЕсли;
	КонецЦикла;
	
	// Ожидается подтверждение ставки 0%
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	Если Не Отказ Тогда
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьПриход();
		
	КонецЕсли;
	
	// Ставка 0% подтверждена
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПодтверждено0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
		СтруктураШапкиДокумента.Дата,
		СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьРасход();
		
	КонецЕсли;
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0, "Состояние");
	
	Если Не Отказ Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьПриход();
		
	КонецЕсли;
	
	// Ставка 0% не подтверждена
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 + СтрокаТаблицы.НДСНеПодтверждено0;
		СтрокаТаблицы.НДС = 0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
		СтруктураШапкиДокумента.Дата,
		СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьРасход();
		
	КонецЕсли;
	
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
		СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
		СтруктураШапкиДокумента.Дата,
		СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьПриход();
		
	КонецЕсли;
	
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
		Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаДвижения = ТаблицаДвиженийНДСРеализация0.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
			СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
			СтрокаДвижения.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
			СтрокаДвижения.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
			СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0;
			
			СтрокаДвижения = ТаблицаДвиженийНДСРеализация0.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
			СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
			СтрокаДвижения.НДС = СтрокаТаблицы.НДСПодтверждено0;
			СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;
			
		КонецЕсли;
		
	КонецЦикла;
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьРасход();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСсАвансов = Движения.НДСсАвансов;
	
	ТаблицаДвиженийНДСсАвансов = ДвиженияНДСсАвансов.ВыгрузитьКолонки();
	// НДС с аванса начисленный
	//ТаблицаДвиженийНДСсАвансов.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСсАвансов);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСсАвансов Цикл
		СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСсАвансов);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСсАвансов.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСсАвансов.мТаблицаДвижений = ТаблицаДвиженийНДСсАвансов;
		ДвиженияНДСсАвансов.ВыполнитьПриход(Ложь);
		
	КонецЕсли;
	
	// НДС с аванса к вычету
	ТаблицаДвиженийНДСсАвансов.Очистить();
	ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
	
	Для Каждого	СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным Тогда
			СтрокаТаблицы.СуммаБезНДС = 0;
			СтрокаТаблицы.НДС = 0;
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.СуммаБезНДС = ?(СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0, 
		СтрокаТаблицы.СуммаБезНДСПредъявлено0 + СтрокаТаблицы.СуммаБезНДСПредъявленоНеПодтверждено0, 
		СтрокаТаблицы.СуммаБезНДСОплата);
		СтрокаТаблицы.НДС = ?(СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0, 
		СтрокаТаблицы.НДСПредъявлено0 + СтрокаТаблицы.НДСПредъявленоНеПодтверждено0, 
		СтрокаТаблицы.НДСОплата);
		СтрокаТаблицы.ВалютнаяСуммаСНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС,
		мВалютаРегламентированногоУчета,
		СтрокаТаблицы.ВалютаАванса,
		1, СтрокаТаблицы.КурсАванса,
		1, 1);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСсАвансов);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСсАвансов Цикл
		СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСсАвансов);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСсАвансов.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСсАвансов.мТаблицаДвижений = ТаблицаДвиженийНДСсАвансов;
		ДвиженияНДСсАвансов.ВыполнитьРасход();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, ИмяСуммаБезНДС, ИмяНДС, Заменить = Истина)
	
	Если Заменить Тогда
		ТаблицаПоДвижениям.Колонки.СуммаБезНДС.Имя = "УдалитьСуммаБезНДС";
		ТаблицаПоДвижениям.Колонки.НДС.Имя = "УдалитьНДС";
		ТаблицаПоДвижениям.Колонки[ИмяСуммаБезНДС].Имя = "СуммаБезНДС";
		ТаблицаПоДвижениям.Колонки[ИмяНДС].Имя = "НДС";
	Иначе
		ТаблицаПоДвижениям.Колонки.СуммаБезНДС.Имя = ИмяСуммаБезНДС;
		ТаблицаПоДвижениям.Колонки.НДС.Имя = ИмяНДС;
		ТаблицаПоДвижениям.Колонки.УдалитьСуммаБезНДС.Имя = "СуммаБезНДС";
		ТаблицаПоДвижениям.Колонки.УдалитьНДС.Имя = "НДС";
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПустыеДвижения(ТаблицаПоДвижениям)
	
	Счетчик = ТаблицаПоДвижениям.Количество();
	
	Пока Счетчик <> 0 Цикл
		
		Счетчик = Счетчик - 1;
		
		Если (ТаблицаПоДвижениям[Счетчик].СуммаБезНДС = 0) И (ТаблицаПоДвижениям[Счетчик].НДС = 0) Тогда
			
			ТаблицаПоДвижениям.Удалить(ТаблицаПоДвижениям[Счетчик]);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДвиженияПоВидуЦенности(ТаблицаПоДвижениям, ВидЦенности, ВидСравненияРавно = Истина)
	
	Счетчик = ТаблицаПоДвижениям.Количество();
	
	Пока Счетчик <> 0 Цикл
		
		Счетчик = Счетчик - 1;
		
		Если ВидСравненияРавно Тогда
			Если (ТаблицаПоДвижениям[Счетчик].ВидЦенности = ВидЦенности) Тогда
				ТаблицаПоДвижениям.Удалить(ТаблицаПоДвижениям[Счетчик]);
			КонецЕсли;
			
		Иначе
			Если (ТаблицаПоДвижениям[Счетчик].ВидЦенности <> ВидЦенности) Тогда
				ТаблицаПоДвижениям.Удалить(ТаблицаПоДвижениям[Счетчик]);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСчетаФактуры(СоздаватьПодчиненныеДокументыОснования = Ложь, ОбновитьСодержаниеПодчиненныхДокументов = Истина, СоздаватьСчетаФактуры = Истина, Отказ = Ложь) Экспорт
	
	МассивВидовЦенностейНалоговогоАгента = Новый Массив;
	МассивВидовЦенностейНалоговогоАгента.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	МассивВидовЦенностейНалоговогоАгента.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	МассивВидовЦенностейНалоговогоАгента.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	МассивВидовЦенностейНалоговогоАгента.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВНО_НДС",Ссылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ДанныеПоСФ", ДанныеПоСФНДС);
	Запрос.УстановитьПараметр("РазделУчета", РазделУчета);
	Запрос.УстановитьПараметр("МассивВидовЦенностейНалоговогоАгента", МассивВидовЦенностейНалоговогоАгента);
	
	РезультатЗапроса = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = РезультатЗапроса;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВНО_НДСДанныеПоСФ.Контрагент,
	|	ВНО_НДСДанныеПоСФ.ДоговорКонтрагента,
	|	ВНО_НДСДанныеПоСФ.ПредъявленСФ,
	|	ВНО_НДСДанныеПоСФ.ДатаСФ,
	|	ВНО_НДСДанныеПоСФ.НомерСФ,
	|	ВНО_НДСДанныеПоСФ.ВидЦенности,
	|	ВНО_НДСДанныеПоСФ.ДокументОплаты,
	|	ВНО_НДСДанныеПоСФ.СчетФактура,
	|	ВНО_НДСДанныеПоСФ.НомерСтроки,
	|	ВНО_НДСДанныеПоСФ.СуммаБезНДС,
	|	ВНО_НДСДанныеПоСФ.НДС,
	|	ВНО_НДСДанныеПоСФ.ВалютаАванса,
	|	ВНО_НДСДанныеПоСФ.ВалютнаяСуммаСНДС
	|ПОМЕСТИТЬ ВТДанныеПоСФ
	|ИЗ
	|	&ДанныеПоСФ КАК ВНО_НДСДанныеПоСФ
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|ВЫБРАТЬ
	|	ВНО_НДСДанныеПоСФ.Контрагент КАК Контрагент,
	|	ВНО_НДСДанныеПоСФ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям)
	|			ТОГДА ВНО_НДСДанныеПоСФ.ПредъявленСФ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПредъявленСФ,
	|	ВНО_НДСДанныеПоСФ.ДатаСФ КАК ДатаСФ,
	|	ВНО_НДСДанныеПоСФ.НомерСФ КАК НомерСФКакУказан,
	|	ВЫБОР 
	|		КОГДА ВНО_НДСДанныеПоСФ.ВидЦенности В (&МассивВидовЦенностейНалоговогоАгента) 
	|				И ВНО_НДСДанныеПоСФ.ДоговорКонтрагента.НалоговыйАгентПоОплате = ИСТИНА
	|				И ВНО_НДСДанныеПоСФ.ДоговорКонтрагента.УчетАгентскогоНДС = ИСТИНА
	|				И &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям) 
	|			ТОГДА ВНО_НДСДанныеПоСФ.ДокументОплаты
	|		ИНАЧЕ ВНО_НДСДанныеПоСФ.СчетФактура
	|	КОНЕЦ КАК ТекущийДокумент,
	|	ВЫБОР 
	|		КОГДА ВНО_НДСДанныеПоСФ.ВидЦенности В (&МассивВидовЦенностейНалоговогоАгента) 
	|				И ВНО_НДСДанныеПоСФ.ДоговорКонтрагента.НалоговыйАгентПоОплате = ИСТИНА
	|				И ВНО_НДСДанныеПоСФ.ДоговорКонтрагента.УчетАгентскогоНДС = ИСТИНА
	|				И &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям) 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК НалоговыйАгент,
	|	ВНО_НДСДанныеПоСФ.НомерСтроки КАК НомерСтроки,
	|	ВНО_НДСДанныеПоСФ.СуммаБезНДС Как Сумма,
	|	ВНО_НДСДанныеПоСФ.НДС Как СуммаНДС,
	|";
		
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям 
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		Запрос.Текст = Запрос.Текст + "
		|ВНО_НДСДанныеПоСФ.ВидЦенности КАК ВидЦенности,
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	ВЫБОР
	|		КОГДА &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным)
	|			ТОГДА ВНО_НДСДанныеПоСФ.ВалютаАванса
	|		ИНАЧЕ &ВалютаРегламентированногоУчета
	|	КОНЕЦ КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным)
	|			ТОГДА ВНО_НДСДанныеПоСФ.ВалютнаяСуммаСНДС
	|		ИНАЧЕ ВНО_НДСДанныеПоСФ.СуммаБезНДС + ВНО_НДСДанныеПоСФ.НДС
	|	КОНЕЦ КАК СуммаДокумента
	|ИЗ
	|	ВТДанныеПоСФ КАК ВНО_НДСДанныеПоСФ
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ПараметрыДокументов = Запрос.Выполнить().Выгрузить();
	
	ПараметрыДокументов.Колонки.Добавить("НомерСФ");
	ПараметрыДокументов.Колонки.Добавить("НомерВходящего");
	ПараметрыДокументов.Колонки.Добавить("ДатаВходящего");
	ПараметрыДокументов.Колонки.Добавить("НомерВходящегоКакУказан");
	
	Для Каждого СтрокаПараметров ИЗ ПараметрыДокументов Цикл
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
			Если СтрокаПараметров.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
				СтрокаПараметров.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
				СтрокаПараметров.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ИначеЕсли РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
				Если МассивВидовЦенностейНалоговогоАгента.Найти(СтрокаПараметров.ВидЦенности) = Неопределено Тогда										
					СтрокаПараметров.ВидЦенности = Перечисления.ВидыЦенностей.ПустаяСсылка();					
				Иначе
					Если НЕ СтрокаПараметров.НалоговыйАгент Тогда
						СтрокаПараметров.ВидЦенности = Перечисления.ВидыЦенностей.ПустаяСсылка();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаПараметров.ТекущийДокумент <> Неопределено Тогда
			СтрокаПараметров.ДатаВходящего = СтрокаПараметров.ТекущийДокумент.ДатаВходящегоДокумента;
			СтрокаПараметров.НомерВходящегоКакУказан = СтрокаПараметров.ТекущийДокумент.НомерВходящегоДокумента;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыДокументов.Индексы.Добавить("Контрагент, ДоговорКонтрагента");
	ПараметрыДокументов.Индексы.Добавить("ТекущийДокумент");
	
	ИспользоватьПрефиксыПриОтработкеНомеров = НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям;
	ПрефиксОрганизации = ?(ЗначениеЗаполнено(Организация.Префикс),Организация.Префикс,"0");
	СписокПрефиксов = Новый СписокЗначений();
	
	Если ИспользоватьПрефиксыПриОтработкеНомеров Тогда
		МассивПрефиксов = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным Тогда
			МассивПрефиксов.Добавить("А"+ПрефиксОрганизации);
		КонецЕсли; 
		СписокПрефиксов.ЗагрузитьЗначения(МассивПрефиксов);
	КонецЕсли; 
	
	Для каждого СтрокаПараметров Из ПараметрыДокументов Цикл
		СтрокаПараметров.НомерВходящего = ПолучитьНомерДляСравнения(СтрокаПараметров.НомерВходящегоКакУказан);
		СтрокаПараметров.НомерСФ		= ПолучитьНомерДляСравнения(СтрокаПараметров.НомерСФКакУказан, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
	КонецЦикла; 
	
	ПодчиненныеДокументы = ПолучитьТаблицуПодчиненныхДокументов(Ссылка, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
	
	ОтработкаИзмененияДатыИлиНомераПодчиненныхДокументов(ПараметрыДокументов,ПодчиненныеДокументы);
	
	СокращеннаяТаблица = ПараметрыДокументов.Скопировать();
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		СокращеннаяТаблица.Свернуть("Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ, ДатаВходящего, НомерВходящего, ТекущийДокумент","");
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		СокращеннаяТаблица.Свернуть("Контрагент, ДоговорКонтрагента, ВидЦенности, ПредъявленСФ, ДатаСФ, НомерСФ, ДатаВходящего, НомерВходящего, ТекущийДокумент,НалоговыйАгент","");
	Иначе
		СокращеннаяТаблица.Свернуть("Контрагент, ДоговорКонтрагента, ВидЦенности, ПредъявленСФ, ДатаСФ, НомерСФ, ДатаВходящего, НомерВходящего, ТекущийДокумент","");
	КонецЕсли;
	
	СокращеннаяТаблица.Колонки.Добавить("МассивОснований");
	СокращеннаяТаблица.Колонки.Добавить("СчетФактура");
	
	СтруктураПоискаОснования= Новый Структура("ДокументОснование");
	СтруктураПоискаСФ		= Новый Структура("Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ");
	
	Для каждого СтрокаПараметров Из СокращеннаяТаблица Цикл
		
		СтруктураПоискаОснования.Вставить("ДокументОснование", СтрокаПараметров.ТекущийДокумент);
		//ЗаполнитьЗначенияСвойств(СтруктураПоискаОснования, СтрокаПараметров);
		СтрокиОснований = ПодчиненныеДокументы.НайтиСтроки(СтруктураПоискаОснования);
		АвансВыданный = Ложь;
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
			Если СтрокаПараметров.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные Тогда
				АвансВыданный = Истина;
			КонецЕсли;
		КонецЕсли;
		
		НалоговыйАгент = Ложь;
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
			НалоговыйАгент = СтрокаПараметров.НалоговыйАгент;
		КонецЕсли;
		
		МассивОснований = новый Массив();
		НоваяСтрокаОснования = Неопределено;
		Если СтрокиОснований.Количество() = 0 Тогда
			МассивОснований.Добавить(СтрокаПараметров.ТекущийДокумент);
		Иначе
			Для каждого СтрокаОснования Из СтрокиОснований Цикл
				МассивОснований.Добавить(СтрокаОснования.ДокументОснование);
			КонецЦикла; 
		КонецЕсли;
		
		СтрокаПараметров.МассивОснований = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОснований,Истина);
		
		Если СтрокаПараметров.ПредъявленСФ тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоискаСФ, СтрокаПараметров);
			СтрокиСФ = ПодчиненныеДокументы.НайтиСтроки(СтруктураПоискаСФ);
			Если СтрокиСФ.Количество() = 0 Тогда
				Если НЕ СоздаватьСчетаФактуры Тогда
					//не создаем документы
				ИначеЕсли СтрокаПараметров.МассивОснований.Количество()>0 Тогда
					// Ничего не найдено.
					Если (РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям И НЕ НалоговыйАгент)
						или (РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным И АвансВыданный) Тогда
						ОснованиеСФ = СоздатьДокументСчетФактураПолученный(СтрокаПараметров, Ссылка, РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным);
						Попытка
							ОснованиеСФ.Записать(РежимЗаписиДокумента.Запись);
						Исключение
							ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать полученный счет-фактуру "+СтрокаПараметров.НомерСФ+" от "+СтрокаПараметров.ДатаСФ+". Вероятно счет-фактура с таким номером уже записан в информационной базе.");
							ОснованиеСФ = Неопределено;
							Отказ = Истина;
						КонецПопытки; 
							
					Иначе
						ОснованиеСФ = СоздатьДокументСчетФактураВыданный(СтрокаПараметров, Ссылка, ПрефиксОрганизации);
						Попытка
							ОснованиеСФ.Записать(РежимЗаписиДокумента.Запись);
						Исключение
							Попытка
								Если не ОснованиеСФ.Номер = СтрокаПараметров.НомерСФ Тогда
									ОснованиеСФ.Номер = СтрокаПараметров.НомерСФ;
									ОснованиеСФ.Записать(РежимЗаписиДокумента.Запись);
								Иначе
									ОбщегоНазначения.СообщитьОбОшибке("Не удалось выписать выданный счет-фактуру "+СтрокаПараметров.НомерСФ+" от "+СтрокаПараметров.ДатаСФ+". Вероятно счет-фактура с таким номером уже записан в информационной базе.");
									ОснованиеСФ = Неопределено;
									Отказ = Истина;
								КонецЕсли; 
							Исключение
								ОбщегоНазначения.СообщитьОбОшибке("Не удалось выписать выданный счет-фактуру "+СтрокаПараметров.НомерСФ+" от "+СтрокаПараметров.ДатаСФ+". Вероятно счет-фактура с таким номером уже записан в информационной базе.");
								ОснованиеСФ = Неопределено;
								Отказ = Истина;
							КонецПопытки; 
						КонецПопытки;
					КонецЕсли; 
					СтрокаПараметров.СчетФактура = ?(ОснованиеСФ = Неопределено, Неопределено,ОснованиеСФ.Ссылка);
					
					Если не НоваяСтрокаОснования = Неопределено Тогда
						НоваяСтрокаОснования = ПодчиненныеДокументы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаОснования, СтрокаПараметров);
					КонецЕсли;
				КонецЕсли; 
			Иначе
				СтрокаПараметров.СчетФактура = СтрокиСФ[0].СчетФактура;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ, ДатаВходящего, НомерВходящего");
	
	ПараметрыДокументов.Колонки.Добавить("НовоеОснование");
	ПараметрыДокументов.Колонки.Добавить("НовыйСчетФактура");
	
	Для каждого СтрокаПараметров Из ПараметрыДокументов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПараметров);
		СтрокиОснований = СокращеннаяТаблица.НайтиСтроки(СтруктураПоиска);
		
		// Таблица получена из таблицы параметров, всегда находится одна строка
		СтрокаОснований = СтрокиОснований[0];
		
		// Не более чем одна строка
		Если СтрокаОснований.МассивОснований.Количество() = 0 Тогда
			// Ничего не найдено.
		Иначе
			Если ЗначениеЗаполнено(СтрокаПараметров.ТекущийДокумент) Тогда
				//Ищем в массиве выбранное ранее основание. Если есть - используем его, чтобы не подменять ссылки.
				Для каждого ЭлементМассива Из СтрокаОснований.МассивОснований Цикл
					Если СтрокаПараметров.ТекущийДокумент = ЭлементМассива Тогда
						СтрокаПараметров.НовоеОснование = СтрокаПараметров.ТекущийДокумент;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(СтрокаПараметров.НовоеОснование) и СоздаватьПодчиненныеДокументыОснования Тогда
				СтрокаПараметров.НовоеОснование = СтрокаОснований.МассивОснований[0];
			КонецЕсли;
			СтрокаПараметров.НовыйСчетФактура = СтрокаОснований.СчетФактура;
		КонецЕсли; 
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		#Если Клиент Тогда
		ОбновитьСодержаниеПодчиненныхДокументов(ПараметрыДокументов, СоздаватьПодчиненныеДокументыОснования, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
		#КонецЕсли
	КонецЕсли;
	
	мПодчиненныеДокументы = Новый ТаблицаЗначений();
	мПодчиненныеДокументы.Колонки.Добавить("Ссылка",Новый ОписаниеТипов(ПодчиненныеДокументы.Колонки.ДокументОснование.ТипЗначения,ПодчиненныеДокументы.Колонки.СчетФактура.ТипЗначения.Типы()));
	мПодчиненныеДокументы.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	мПодчиненныеДокументы.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	ИспользуемыеПодчиненныеДокументы = Новый списокЗначений();
	ИспользуемыеПодчиненныеДокументы.ЗагрузитьЗначения(ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПараметрыДокументов.ВыгрузитьКолонку("НовоеОснование"),Истина));
	
	ИспользуемыеСчетаФактуры = Новый списокЗначений();
	ИспользуемыеСчетаФактуры.ЗагрузитьЗначения(ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПараметрыДокументов.ВыгрузитьКолонку("НовыйСчетФактура"),Истина));
	
	ВсеПодчиненныеДокументы = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПодчиненныеДокументы.ВыгрузитьКолонку("ДокументОснование"),Истина);
	Для каждого Документ Из ВсеПодчиненныеДокументы Цикл
		Если ЗначениеЗаполнено(Документ) тогда
			НоваяСтрока = мПодчиненныеДокументы.Добавить();
			НоваяСтрока.Ссылка = Документ;
			НоваяСтрока.Использован = не (ИспользуемыеПодчиненныеДокументы.НайтиПоЗначению(Документ) = Неопределено);
			НоваяСтрока.НомерСтроки = мПодчиненныеДокументы.Количество();
		КонецЕсли; 
	КонецЦикла; 
	
	ВсеПодчиненныеСчетаФактуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПодчиненныеДокументы.ВыгрузитьКолонку("СчетФактура"),Истина);
	Для каждого Документ Из ВсеПодчиненныеСчетаФактуры Цикл
		Если ЗначениеЗаполнено(Документ) тогда
			НоваяСтрока = мПодчиненныеДокументы.Добавить();
			НоваяСтрока.Ссылка = Документ;
			НоваяСтрока.Использован = не (ИспользуемыеСчетаФактуры.НайтиПоЗначению(Документ) = Неопределено);
			НоваяСтрока.НомерСтроки = мПодчиненныеДокументы.Количество();
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Сокращает номер документа - удаляет префиксы и лидирующие 0
//
// Возвращаемое значение:
//   Строка   – <описание возвращаемого значения>
//
Функция ПолучитьНомерДляСравнения(Знач Номер, ИспользоватьПрефиксы = Ложь, СписокПрефиксов = Неопределено)
	
	Если не ЗначениеЗаполнено(Номер) Тогда
	    Возврат "";
	КонецЕсли; 
	
	Если ИспользоватьПрефиксы Тогда
		//Список префиксов определен ранее	
	Иначе
		СписокПрефиксов = Новый СписокЗначений();
	КонецЕсли;
	
	Если СписокПрефиксов.Количество() = 0 Тогда
		СписокПрефиксов.Добавить("");
	КонецЕсли;
	
	Для Каждого ЭлементСписка ИЗ СписокПрефиксов Цикл
		
		ТекущийПрефикс = ЭлементСписка.Значение;
		
		// удаление префикса из номера документа
		Если Найти(Номер, ТекущийПрефикс)=1 Тогда 
			Номер = Сред(Номер, СтрДлина(ТекущийПрефикс)+1);
		КонецЕсли;
		
		// так же, может остаться "минус" впереди
		Если Лев(Номер, 1) = "-" Тогда
			Номер = Сред(Номер, 2);
		КонецЕсли;
		
		// удаление ведущих нулей
		Пока Лев(Номер, 1)="0" Цикл
			Номер = Сред(Номер, 2);
		КонецЦикла;
	КонецЦикла;

	Возврат СокрЛП(Номер);

КонецФункции // СократитьНомерДокумента()

Функция ПолучитьТаблицуПодчиненныхДокументов(ДокументОснование, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов) экспорт
	
	МассивВидовЦенностейНалоговогоАгента = Новый Массив;
	МассивВидовЦенностейНалоговогоАгента.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	МассивВидовЦенностейНалоговогоАгента.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	МассивВидовЦенностейНалоговогоАгента.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	МассивВидовЦенностейНалоговогоАгента.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВНО_НДС",ДокументОснование);
	Запрос.УстановитьПараметр("МассивВидовЦенностейНалоговогоАгента",МассивВидовЦенностейНалоговогоАгента);
	Запрос.УстановитьПараметр("РазделУчета", РазделУчета);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВводНачальныхОстатков.Контрагент,
	               |	ВводНачальныхОстатков.ДоговорКонтрагента,
	               |	ВводНачальныхОстатков.ВидЦенности,
	               |	ВЫБОР
	               |		КОГДА ВводНачальныхОстатков.ВидЦенности В (&МассивВидовЦенностейНалоговогоАгента)
	               |				И &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям)
	               |				И ВводНачальныхОстатков.ДоговорКонтрагента.НалоговыйАгентПоОплате = ИСТИНА
	               |			ТОГДА ВводНачальныхОстатков.ДокументОплаты.Дата
	               |		ИНАЧЕ ВводНачальныхОстатков.СчетФактура.Дата
	               |	КОНЕЦ КАК ДатаВходящего,
	               |	ВЫБОР
	               |		КОГДА ВводНачальныхОстатков.ВидЦенности В (&МассивВидовЦенностейНалоговогоАгента)
	               |				И &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям)
	               |				И ВводНачальныхОстатков.ДоговорКонтрагента.НалоговыйАгентПоОплате = ИСТИНА
	               |			ТОГДА ВводНачальныхОстатков.ДокументОплаты.Номер
	               |		ИНАЧЕ ВводНачальныхОстатков.СчетФактура.Номер
	               |	КОНЕЦ КАК НомерВходящегоКакУказан,
	               |	ВЫБОР
	               |		КОГДА СчетаФактуры.Ссылка ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ПредъявленСФ,
	               |	ЕСТЬNULL(СчетаФактуры.ДатаСФ, НЕОПРЕДЕЛЕНО) КАК ДатаСФ,
	               |	ЕСТЬNULL(СчетаФактуры.НомерСФ, НЕОПРЕДЕЛЕНО) КАК НомерСФКакУказан,
	               |	ВЫБОР
	               |		КОГДА ВводНачальныхОстатков.ВидЦенности В (&МассивВидовЦенностейНалоговогоАгента)
	               |				И &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям)
	               |				И ВводНачальныхОстатков.ДоговорКонтрагента.НалоговыйАгентПоОплате = ИСТИНА
	               |			ТОГДА ВводНачальныхОстатков.ДокументОплаты
	               |		ИНАЧЕ ВводНачальныхОстатков.СчетФактура
	               |	КОНЕЦ КАК ДокументОснование,
	               |	СчетаФактуры.Ссылка КАК СчетФактура
	               |ИЗ
	               |	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ВводНачальныхОстатков
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ОснованияСФ.Ссылка КАК Ссылка,
	               |			НАЧАЛОПЕРИОДА(ОснованияСФ.Ссылка.Дата, ДЕНЬ) КАК ДатаСФ,
	               |			ОснованияСФ.Ссылка.Номер КАК НомерСФ,
	               |			ОснованияСФ.ДокументОснование КАК ДокументОснование
	               |		ИЗ
	               |			Документ.СчетФактураВыданный.ДокументыОснования КАК ОснованияСФ
	               |		ГДЕ
	               |			ОснованияСФ.Ссылка.СформированПриВводеНачальныхОстатковНДС
	               |			И ОснованияСФ.ДокументОснование ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ОснованияСФ.Ссылка,
	               |			ОснованияСФ.Ссылка.ДатаВходящегоДокумента,
	               |			ОснованияСФ.Ссылка.НомерВходящегоДокумента,
	               |			ОснованияСФ.ДокументОснование
	               |		ИЗ
	               |			Документ.СчетФактураПолученный.ДокументыОснования КАК ОснованияСФ
	               |		ГДЕ
	               |			ОснованияСФ.Ссылка.СформированПриВводеНачальныхОстатковНДС
	               |			И ОснованияСФ.ДокументОснование ССЫЛКА Документ.ДокументРасчетовСКонтрагентом) КАК СчетаФактуры
	               |		ПО ВводНачальныхОстатков.СчетФактура = СчетаФактуры.ДокументОснование
	               |ГДЕ
	               |	ВводНачальныхОстатков.Ссылка = &ВНО_НДС
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВводНачальныхОстатков.Контрагент,
	               |	ВводНачальныхОстатков.ДоговорКонтрагента,
	               |	ВводНачальныхОстатков.ВидЦенности,
	               |	ВЫБОР
	               |		КОГДА ВводНачальныхОстатков.ВидЦенности В (&МассивВидовЦенностейНалоговогоАгента)
	               |				И &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям)
	               |				И ВводНачальныхОстатков.ДоговорКонтрагента.НалоговыйАгентПоОплате = ИСТИНА
	               |			ТОГДА ВводНачальныхОстатков.ДокументОплаты.Дата
	               |		ИНАЧЕ ВводНачальныхОстатков.СчетФактура.Дата
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА ВводНачальныхОстатков.ВидЦенности В (&МассивВидовЦенностейНалоговогоАгента)
	               |				И &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям)
	               |				И ВводНачальныхОстатков.ДоговорКонтрагента.НалоговыйАгентПоОплате = ИСТИНА
	               |			ТОГДА ВводНачальныхОстатков.ДокументОплаты.Номер
	               |		ИНАЧЕ ВводНачальныхОстатков.СчетФактура.Номер
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА СчетаФактуры.Ссылка ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ,
	               |	ЕСТЬNULL(СчетаФактуры.ДатаСФ, НЕОПРЕДЕЛЕНО),
	               |	ЕСТЬNULL(СчетаФактуры.НомерСФ, НЕОПРЕДЕЛЕНО),
	               |	ВЫБОР
	               |		КОГДА ВводНачальныхОстатков.ВидЦенности В (&МассивВидовЦенностейНалоговогоАгента)
	               |				И &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям)
	               |				И ВводНачальныхОстатков.ДоговорКонтрагента.НалоговыйАгентПоОплате = ИСТИНА
	               |			ТОГДА ВводНачальныхОстатков.ДокументОплаты
	               |		ИНАЧЕ ВводНачальныхОстатков.СчетФактура
	               |	КОНЕЦ,
	               |	СчетаФактуры.Ссылка
	               |ИЗ
	               |	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ВводНачальныхОстатков
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ОснованияСФ.Ссылка КАК Ссылка,
	               |			НАЧАЛОПЕРИОДА(ОснованияСФ.Ссылка.Дата, ДЕНЬ) КАК ДатаСФ,
	               |			ОснованияСФ.Ссылка.Номер КАК НомерСФ,
	               |			ОснованияСФ.ДокументОснование КАК ДокументОснование
	               |		ИЗ
	               |			Документ.СчетФактураВыданный.ДокументыОснования КАК ОснованияСФ
	               |		ГДЕ
	               |			ОснованияСФ.Ссылка.СформированПриВводеНачальныхОстатковНДС
	               |			И ОснованияСФ.ДокументОснование ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ОснованияСФ.Ссылка,
	               |			ОснованияСФ.Ссылка.ДатаВходящегоДокумента,
	               |			ОснованияСФ.Ссылка.НомерВходящегоДокумента,
	               |			ОснованияСФ.ДокументОснование
	               |		ИЗ
	               |			Документ.СчетФактураПолученный.ДокументыОснования КАК ОснованияСФ
	               |		ГДЕ
	               |			ОснованияСФ.Ссылка.СформированПриВводеНачальныхОстатковНДС
	               |			И ОснованияСФ.ДокументОснование ССЫЛКА Документ.ДокументРасчетовСКонтрагентом) КАК СчетаФактуры
	               |		ПО ВводНачальныхОстатков.ДокументОплаты = СчетаФактуры.ДокументОснование
	               |ГДЕ
	               |	ВводНачальныхОстатков.Ссылка = &ВНО_НДС";
		
	
	ПараметрыДокументов = Запрос.Выполнить().Выгрузить();
	ПараметрыДокументов.Колонки.Добавить("НомерСФ");
	ПараметрыДокументов.Колонки.Добавить("НомерВходящего");
	ПараметрыДокументов.Индексы.Добавить("Контрагент, ДоговорКонтрагента");
	
	Для каждого СтрокаПараметров Из ПараметрыДокументов Цикл
		СтрокаПараметров.НомерВходящего = ПолучитьНомерДляСравнения(СтрокаПараметров.НомерВходящегоКакУказан);
		СтрокаПараметров.НомерСФ		= ПолучитьНомерДляСравнения(СтрокаПараметров.НомерСФКакУказан, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
		Если СтрокаПараметров.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
			СтрокаПараметров.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			СтрокаПараметров.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла; 
	ПараметрыДокументов.Свернуть("Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ, ДатаВходящего, НомерВходящего, ДокументОснование, СчетФактура","");
	
	Возврат ПараметрыДокументов;
	
КонецФункции

Процедура ОтработкаИзмененияДатыИлиНомераПодчиненныхДокументов(ПараметрыДокументов,ПодчиненныеДокументы)
	
	НаборТекущихДокументов = ПараметрыДокументов.Скопировать();
	НаборТекущихДокументов.Свернуть("ДатаВходящего,НомерВходящего,ТекущийДокумент, ДатаСФ, НомерСФ");
	
	НаборТекущихДокументов = УчетНДС.ТаблицуЗначенийВДеревоСГруппировкой(НаборТекущихДокументов, "ТекущийДокумент");
	
	Для каждого СтрокаДокумента Из НаборТекущихДокументов.Строки Цикл
		Если не ЗначениеЗаполнено(СтрокаДокумента.ТекущийДокумент) Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаНовогоНомера = Неопределено;
		// По одному документу разные номера. Это недопустимо.
		// Необходимо затереть ссылки на текущий документ в таблице параметров.
		Для каждого СтрокаДаты_Номера Из СтрокаДокумента.Строки Цикл
			СтруктураПоиска = Новый Структура ("ДокументОснование, ДатаВходящего, НомерВходящего"
							, СтрокаДаты_Номера.ТекущийДокумент,СтрокаДаты_Номера.ДатаВходящего,СтрокаДаты_Номера.НомерВходящего);
			СтрокиПодчиненныхДокументов = ПодчиненныеДокументы.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПодчиненныхДокументов.Количество() > 0 Тогда
				// Это старый номер. Оставляем его у основания, Затираем ссылки на текущий документ по строкам таблицы параметров.
				СтрокаНовогоНомера = СтрокаДаты_Номера;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
			 
		Если СтрокаНовогоНомера = Неопределено Тогда
			// Ни один из номеров не соответствует введенному ранее. 
			// Берем номер из первой строки
			СтрокаНовогоНомера = СтрокаДокумента.Строки[0];
			ЗаменитьНомерВТаблицеПодчиненныхДокументов = Истина;
		Иначе
			ЗаменитьНомерВТаблицеПодчиненныхДокументов = Ложь;
		КонецЕсли; 
		
		Если ЗаменитьНомерВТаблицеПодчиненныхДокументов Тогда
			СтрокиДляЗамены = ПодчиненныеДокументы.НайтиСтроки(Новый Структура("ДокументОснование",СтрокаНовогоНомера.ТекущийДокумент));
			Для каждого СтрокаДляЗаменыНомера Из СтрокиДляЗамены Цикл
				СтрокаДляЗаменыНомера.ДатаВходящего		= СтрокаНовогоНомера.ДатаВходящего;
				СтрокаДляЗаменыНомера.НомерВходящего	= СтрокаНовогоНомера.НомерВходящего;
			КонецЦикла; 
		КонецЕсли; 
		
		Если СтрокаДокумента.Строки.Количество()>1 Тогда
			СтрокиТаблицыПараметров = ПараметрыДокументов.НайтиСтроки(Новый Структура("ТекущийДокумент",СтрокаДокумента.ТекущийДокумент));
			Для каждого СтрокаТаблицыПараметров Из СтрокиТаблицыПараметров Цикл
				Если СтрокаТаблицыПараметров.ДатаВходящего = СтрокаНовогоНомера.ДатаВходящего
					и СтрокаТаблицыПараметров.НомерВходящего = СтрокаНовогоНомера.НомерВходящего
				 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТаблицыПараметров.ТекущийДокумент = Неопределено;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

// Создает документ вида СчетФактураПолученный
// и заполняет его реквизиты по по данным переданным в строке параметров
//
// Возвращаемое значение:
//   ДокументОбъект.СчетФактураПолученный (не записан)
//
Функция СоздатьДокументСчетФактураПолученный(СтрокаПараметров, ДокументОснование, НаАванс = Ложь)
	НовыйДокумент = Документы.СчетФактураПолученный.СоздатьДокумент();
	НовыйДокумент.Организация				= Организация;
	НовыйДокумент.Дата						= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ), СтрокаПараметров.ДатаСФ,ДокументОснование.Дата);
	НовыйДокумент.Контрагент				= СтрокаПараметров.Контрагент;
	НовыйДокумент.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
	НовыйДокумент.ДокументОснование			= СтрокаПараметров.МассивОснований[0];
	НовыйДокумент.ДокументыОснования.Добавить().ДокументОснование = СтрокаПараметров.МассивОснований[0];
	НовыйДокумент.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаСФ;
	НовыйДокумент.НомерВходящегоДокумента	= СтрокаПараметров.НомерСФ;
	НовыйДокумент.СформированПриВводеНачальныхОстатковНДС = Истина;
	НовыйДокумент.НаАванс = НаАванс;
	
	Возврат НовыйДокумент;
	
КонецФункции // ()

// Создает документ вида СчетФактураВыданный
// и заполняет его реквизиты по по данным переданным в строке параметров
//
// Возвращаемое значение:
//   ДокументОбъект.СчетФактураПолученный (не записан)
//
Функция СоздатьДокументСчетФактураВыданный(СтрокаПараметров, ДокументОснование, ПрефиксОрганизации)
	НовыйДокумент = Документы.СчетФактураВыданный.СоздатьДокумент();
	НовыйДокумент.Организация				= Организация;
	НовыйДокумент.Дата						= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ), СтрокаПараметров.ДатаСФ,ДокументОснование.Дата);
	НовыйДокумент.Контрагент				= СтрокаПараметров.Контрагент;
	НовыйДокумент.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
	НовыйДокумент.ДокументОснование			= СтрокаПараметров.МассивОснований[0];
	НовыйДокумент.ДокументыОснования.Добавить().ДокументОснование = СтрокаПараметров.МассивОснований[0];
	//НовыйДокумент.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаСФ;
	//НовыйДокумент.НомерВходящегоДокумента	= СтрокаПараметров.НомерСФ;
	НовыйДокумент.СформированПриВводеНачальныхОстатковНДС = Истина;
	НовыйДокумент.ВидСчетаФактуры = ?(ДокументОснование.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным
									, Перечисления.НДСВидСчетаФактуры.НаАванс
									, Перечисления.НДСВидСчетаФактуры.НаРеализацию);
	// Установка номера формируемого документа
	НовыйДокумент.Номер = УстановитьНомерСФсУчетомПрефикса(СтрокаПараметров.НомерСФ, ПрефиксОрганизации, НовыйДокумент.Метаданные().ДлинаНомера);
	
	Возврат НовыйДокумент;
	
КонецФункции // ()

// Формирует номер документа с учетом префиксов с указанной значащей частью
Функция УстановитьНомерСФсУчетомПрефикса(НомерСФ, Префикс,ДлинаНомераДок)
	
	ЧистыйНомер = СокрЛП(НомерСФ);
	НовыйНомер = Префикс;
	
	Если СтрДлина(ЧистыйНомер) + СтрДлина(НовыйНомер) > ДлинаНомераДок Тогда
		Возврат ЧистыйНомер;
	КонецЕсли;		
	
	Пока СтрДлина(ЧистыйНомер) + СтрДлина(НовыйНомер) < ДлинаНомераДок Цикл
		НовыйНомер = НовыйНомер + "0";
	КонецЦикла;
	
	Возврат НовыйНомер+ЧистыйНомер;

КонецФункции

#Если Клиент Тогда
Процедура ОбновитьСодержаниеПодчиненныхДокументов(ПараметрыДокументов, СоздаватьПодчиненныеДокументыОснования, ИспользоватьПрефиксыПриОтработкеНомеров = Ложь, СписокПрефиксов = Неопределено) Экспорт
		
	//Обновление документов-оснований
	ДеревоДокументов = УчетНДС.ТаблицуЗначенийВДеревоСГруппировкой(ПараметрыДокументов, "НовоеОснование","СуммаДокумента, Сумма, СуммаНДС");
	ЗаголовокДокумента = СокрЛП("Ввод начальных остатков "+Номер+" от "+Формат(Дата,"ДЛФ =Д"));
	
	РасшифровкаСФ = Неопределено;
	
	//Обновление счетов-фактур
	ПараметрыДокументов.Свернуть("НовыйСчетФактура,Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ,НовоеОснование, ВалютаДокумента,НомерСтроки, ДатаВходящего, НомерВходящего", "Сумма, СуммаНДС, СуммаДокумента");
	ДеревоДокументов = УчетНДС.ТаблицуЗначенийВДеревоСГруппировкой(ПараметрыДокументов, "НовыйСчетФактура","СуммаДокумента, Сумма, СуммаНДС");

	Для каждого СтрокаДокументаОснования Из ДеревоДокументов.Строки Цикл
		Если не СтрокаДокументаОснования.Строки[0].ПредъявленСФ 
			или не ЗначениеЗаполнено(СтрокаДокументаОснования.НовыйСчетФактура) Тогда
			Продолжить;
		КонецЕсли; 
		
		
		ОснованиеОбъект = СтрокаДокументаОснования.НовыйСчетФактура.ПолучитьОбъект();
		СтрокаПараметров = СтрокаДокументаОснования.Строки[0];
		
		Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") тогда
			ОснованиеОбъект.Организация				= Организация;
			ОснованиеОбъект.Дата					= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ), СтрокаПараметров.ДатаСФ,Дата);
		Иначе
			Если не ОснованиеОбъект.Организация = Организация Тогда
				ОснованиеОбъект.Номер = "";
			КонецЕсли; 
			
			ОснованиеОбъект.Организация				= Организация;
			СтараяДата = ОснованиеОбъект.Дата;
			ОснованиеОбъект.Дата					= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ), СтрокаПараметров.ДатаСФ,Дата);
			РаботаСДиалогами.ПроверитьНомерДокумента(ОснованиеОбъект, СтараяДата);
		КонецЕсли; 
		
		ОснованиеОбъект.Контрагент				= СтрокаПараметров.Контрагент;
		ОснованиеОбъект.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
	
		ОснованиеОбъект.СуммаДокумента			= СтрокаДокументаОснования.СуммаДокумента;
		ОснованиеОбъект.ВалютаДокумента			= СтрокаПараметров.ВалютаДокумента;
		Если ТипЗнч(ОснованиеОбъект.Ссылка) <> Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
			ОснованиеОбъект.Комментарий				= "Создан автоматически документом <"+ЗаголовокДокумента+">";
		КонецЕсли;
		ОснованиеОбъект.ПометкаУдаления			= Ложь;
		
		ОснованиеОбъект.СформированПриВводеНачальныхОстатковНДС = Истина;
		Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным Тогда
				ОснованиеОбъект.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс;
			ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
				ОснованиеОбъект.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент;
			Иначе
				ОснованиеОбъект.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию;
			КонецЕсли;
										
			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным 
				ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
				
				Если ОснованиеОбъект.Авансы.Количество() = 0 Тогда
					СтрокаАвансов = ОснованиеОбъект.Авансы.Добавить();
				Иначе
					СтрокаАвансов = ОснованиеОбъект.Авансы.Получить(0);
				КонецЕсли;
				
				СтрокаАвансов.Сумма	= СтрокаДокументаОснования.Сумма + СтрокаДокументаОснования.СуммаНДС;
				СтрокаАвансов.СуммаНДС	= СтрокаДокументаОснования.СуммаНДС;
				Если РасшифровкаСФ= Неопределено Тогда
					РасшифровкаСФ = ДанныеПоСФНДС.Выгрузить(); 
					Для Каждого СтрокаРасшифровкиСФ ИЗ РасшифровкаСФ Цикл
						СтрокаРасшифровкиСФ.НомерСФ = ПолучитьНомерДляСравнения(СтрокаРасшифровкиСФ.НомерСФ, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
					КонецЦикла;
				КонецЕсли;
				СтрокаАвансов.СтавкаНДС = "";
				СтруктураПоиска = Новый Структура;
				Если ОснованиеОбъект.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
					СтруктураПоиска.Вставить("ДокументОплаты",СтрокаДокументаОснования.Строки[0].НовоеОснование);
				Иначе
					СтруктураПоиска.Вставить("СчетФактура",СтрокаДокументаОснования.Строки[0].НовоеОснование);
				КонецЕсли;
				СтруктураПоиска.Вставить("ДатаСФ",СтрокаДокументаОснования.Строки[0].ДатаСФ);
				СтруктураПоиска.Вставить("НомерСФ",СтрокаДокументаОснования.Строки[0].НомерСФ);
				СтрокиРасшифровки = РасшифровкаСФ.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
					СтрокаАвансов.СтавкаНДС = СтрокаРасшифровки.СтавкаНДС;
					Прервать; 
				КонецЦикла; 
				Если не ЗначениеЗаполнено(СтрокаАвансов.СтавкаНДС) Тогда
					СтрокаАвансов.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли; 
				
			КонецЕсли;
		Иначе
			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным Тогда
				
				ОснованиеОбъект.СуммаДокумента = СтрокаДокументаОснования.Сумма + СтрокаДокументаОснования.СуммаНДС;				
				
				Если РасшифровкаСФ= Неопределено Тогда
					РасшифровкаСФ = ДанныеПоСФНДС.Выгрузить(); 
					Для Каждого СтрокаРасшифровкиСФ ИЗ РасшифровкаСФ Цикл
						СтрокаРасшифровкиСФ.НомерСФ = ПолучитьНомерДляСравнения(СтрокаРасшифровкиСФ.НомерСФ, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
					КонецЦикла;
				КонецЕсли;

				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("СчетФактура",СтрокаДокументаОснования.Строки[0].НовоеОснование);
				СтруктураПоиска.Вставить("ДатаСФ",СтрокаДокументаОснования.Строки[0].ДатаСФ);
				СтруктураПоиска.Вставить("НомерСФ",СтрокаДокументаОснования.Строки[0].НомерСФ);
				СтрокиРасшифровки = РасшифровкаСФ.НайтиСтроки(СтруктураПоиска);
				ОснованиеОбъект.Авансы.Очистить();
				Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
					СтрокаАвансов = ОснованиеОбъект.Авансы.Добавить();
					СтрокаАвансов.Сумма = СтрокаРасшифровки.СуммаБезНДС + СтрокаРасшифровки.НДС;
					СтрокаАвансов.СуммаНДС = СтрокаРасшифровки.НДС;
					СтрокаАвансов.СтавкаНДС = СтрокаРасшифровки.СтавкаНДС;
					Если не ЗначениеЗаполнено(СтрокаАвансов.СтавкаНДС) Тогда
						СтрокаАвансов.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
					КонецЕсли; 
				КонецЦикла;
				
			КонецЕсли;
			ОснованиеОбъект.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаСФ;
			ОснованиеОбъект.НомерВходящегоДокумента	= СтрокаПараметров.НомерСФ;
		КонецЕсли; 
		ОснованиеОбъект.ДокументыОснования.Очистить();
		
		Для каждого СтрокаПараметров Из СтрокаДокументаОснования.Строки Цикл
			Если ЗначениеЗаполнено(СтрокаПараметров.НовоеОснование) 
				и ОснованиеОбъект.ДокументыОснования.Найти(СтрокаПараметров.НовоеОснование, "ДокументОснование") = неопределено Тогда
				ОснованиеОбъект.ДокументыОснования.Добавить().ДокументОснование = СтрокаПараметров.НовоеОснование;
			КонецЕсли; 
		КонецЦикла; 
		
		Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") тогда
			
			ОснованиеОбъект.ДатаНомерДокументовОплаты.Очистить();
			ОснованиеОбъект.ДатаНомерДокументовОплаты.Добавить();
			
			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным Тогда
				ОснованиеОбъект.ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента = СтрокаПараметров.ДатаВходящего;
				ОснованиеОбъект.ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента = СтрокаПараметров.НомерВходящего;
				
				ОснованиеОбъект.ДатаПлатежноРасчетногоДокумента	= СтрокаПараметров.ДатаВходящего;
				ОснованиеОбъект.НомерПлатежноРасчетногоДокумента= СтрокаПараметров.НомерВходящего;
			Иначе
				ОснованиеОбъект.ДатаПлатежноРасчетногоДокумента	= Неопределено;
				ОснованиеОбъект.НомерПлатежноРасчетногоДокумента= Неопределено;
			КонецЕсли;
		КонецЕсли;
		Попытка
			ОснованиеОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Для каждого СтрокаТабличнойЧасти Из СтрокаДокументаОснования.Строки Цикл
				ОбщегоНазначения.СообщитьОбОшибке("Для строки №" + СтрокаТабличнойЧасти.НомерСтроки + " не удалось обновить параметры документа-основания счета-фактуры.");
			КонецЦикла; 
		Конецпопытки;

	КонецЦикла;
	
КонецПроцедуры
#КонецЕсли

Процедура СинхронизацияСостоянияПодчиненныхДокументов() Экспорт
	
	Если мОтказЗаписи Тогда
		Возврат;
	КонецЕсли;
	//Если мПодчиненныеДокументы = Неопределено Тогда
			СформироватьСчетаФактуры(Ложь, Ложь, Ложь);
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	РезультатЗапроса = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = РезультатЗапроса;
	Запрос.УстановитьПараметр("таблица", мПодчиненныеДокументы);
	Запрос.УстановитьПараметр("ПометкаУдаления",ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен", 		Проведен и не ПометкаУдаления);
	
	Запрос.Текст = 
		"ВЫБРАТЬ *
		| Поместить ПодчиненныеДокументы
		|ИЗ
		|	&таблица КАК ПодчиненныеДокументы ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		// Синхронизация состояния не требуется
		Возврат;
	КонецЕсли; 
	
	Запрос.Текст ="Выбрать 
		|	ПодчиненныеДокументы.Ссылка КАК Ссылка,
		|	ПодчиненныеДокументы.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
		|	ПодчиненныеДокументы.Ссылка.Проведен КАК Проведен,
		|	ВЫБОР
		|		КОГДА ПодчиненныеДокументы.Ссылка Ссылка Документ.ДокументРасчетовСКонтрагентом
		|			 ТОГДА ЛОЖЬ
		|		КОГДА ПодчиненныеДокументы.Использован
		|			 ТОГДА &Проведен 
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Провести,
		|	ВЫБОР
		|		КОГДА ПодчиненныеДокументы.Использован
		|			ТОГДА &ПометкаУдаления
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПометитьНаУдаление
		|ИЗ
		|	ПодчиненныеДокументы КАК ПодчиненныеДокументы
		|ГДЕ
		|	ВЫБОР
		|			КОГДА не Использован
		|				ТОГДА (НЕ ПодчиненныеДокументы.Ссылка.ПометкаУдаления)
		|			КОГДА ПодчиненныеДокументы.Ссылка Ссылка Документ.ДокументРасчетовСКонтрагентом
		|				ТОГДА НЕ ПодчиненныеДокументы.Ссылка.ПометкаУдаления = &ПометкаУдаления
		|			ИНАЧЕ (НЕ(ПодчиненныеДокументы.Ссылка.Проведен = &Проведен
		|							И ПодчиненныеДокументы.Ссылка.ПометкаУдаления = &ПометкаУдаления))
		|		КОНЕЦ
		|	Упорядочить По НомерСтроки " + ?(ПометкаУдаления," Убыв","");
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пока Результат.Следующий() Цикл
		Если не ЗначениеЗаполнено(Результат.Ссылка) Тогда
			Продолжить;
		КонецЕсли; 
		
		Попытка
			ДокументОбъект = Результат.Ссылка.ПолучитьОбъект();
			Если Результат.ПометитьНаУдаление Тогда
			 	ДокументОбъект.УстановитьПометкуУдаления(Истина);
			ИначеЕсли Результат.Провести тогда
				Если Результат.ПометкаУдаления тогда
					ДокументОбъект.ПометкаУдаления = Ложь;
				КонецЕсли;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);				
			ИначеЕсли Результат.Проведен тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);  
			Иначе
			 	ДокументОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли; 
		Исключение
		    // Не удалось обновить документ. Он сам об этом расскажет.
		КонецПопытки;
	КонецЦикла; 
	
КонецПроцедуры

//*****************************************************************************************************************************
// ОСТАТКИ РБП

Процедура ОбработкаПроведения_РасходыБудущихПериодов(Отказ)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ФормированиеПроводокБух_РасходыБудущихПериодов(РасходыБудущихПериодов);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		ДвиженияПоРегистрамУСН_РасходыБудущихПериодов(РасходыБудущихПериодов, Отказ);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_РасходыБудущихПериодов(БухСправка)
	
	Операция = ЭтотОбъект.Движения.Хозрасчетный;
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		СчетУчета = СтрокаБухСправки.СчетУчета;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);
		
		ЧислоАктивныхСубконто = СчетУчета.ВидыСубконто.Количество();
		
		Для Сч = 1 По ЧислоАктивныхСубконто Цикл
			БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки, "Дт")], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки, "Дт")], Сч, СтрокаБухСправки["Субконто"+Сч]);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам УСН

Процедура ДвиженияПоРегистрамУСН_РасходыБудущихПериодов(ТаблицаДанных, Отказ)
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента.Ссылка);
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Очистить();
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "РасходыРБП".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Субконто1", 		"Субконто1");
	СтруктураПолей.Вставить("Субконто2", 		"Субконто2");
	СтруктураПолей.Вставить("Контрагент", 			"Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента", 	"ДоговорКонтрагента");
	СтруктураПолей.Вставить("РасчетныйДокумент", 	"РасчетныйДокумент");
	СтруктураПолей.Вставить("СтатусыОплатыРасходовУСН", "СтатусыОплатыРасходовУСН");
	СтруктураПолей.Вставить("ОтражениеВУСН", 		"ОтражениеВУСН");
	СтруктураПолей.Вставить("Валюта", 				"Валюта");
	СтруктураПолей.Вставить("Сумма", 				"ВалютнаяСумма");
	СтруктураПолей.Вставить("НДС", 					"ВалютныйНДС");
	
	ВременнаяТаблица = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасходыБудущихПериодов", СтруктураПолей).Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("ВидРасхода");
	ВременнаяТаблица.Колонки.Добавить("ЭлементРасхода");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.РБП, "ВидРасхода");
	
	Для Каждого СтрокаТаблицы ИЗ ВременнаяТаблица Цикл
		Если ТипЗнч(СтрокаТаблицы.Субконто1) = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
			СтрокаТаблицы.ЭлементРасхода = СтрокаТаблицы.Субконто1;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.Субконто2) = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
			СтрокаТаблицы.ЭлементРасхода = СтрокаТаблицы.Субконто2;
		Иначе
			СтрокаТаблицы.ЭлементРасхода = Справочники.РасходыБудущихПериодов.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ВременнаяТаблица.Колонки.Удалить("Субконто1");
	ВременнаяТаблица.Колонки.Удалить("Субконто2");
	
	МассивТаблиц.Добавить(ВременнаяТаблица);
	
	//Подготовим таблицу движений регистра взаиморасчетов УСН
	ТаблицаРасходы = СобратьТаблицыРасходов(МассивТаблиц);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам_РасходыБудущихПериодов(ТаблицаРасходы, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам_РасходыБудущихПериодов(ТаблицаРасходы, Отказ)
	
	//ПО РЕГИСТРУ РАСХОДОВ УСН
	ДвиженияПоРегиструРасходовУСН(ТаблицаРасходы, Отказ);
	
КонецПроцедуры

//*****************************************************************************************************************************
// ПРОЧИЕ РАСХОДЫ УСН И ИП

Процедура ОбработкаПроведения_ПрочиеРасходыНалоговогоУчетаУСНИИП(Отказ)
	
	ПроверитьЗаполнениеТабличнойЧасти_ПрочиеРасходыНалоговогоУчетаУСНИИП(Отказ);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		ДвиженияПоРегистрамУСН_ПрочиеРасходыНалоговогоУчетаУСНИИП(Отказ);
	// {УчетДоходовИРасходовИП
	ИначеЕсли Предприниматель И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		ДвиженияПоРегистрамИП_ПрочиеРасходыНалоговогоУчетаУСНИИП(Отказ);
	// }УчетДоходовИРасходовИП
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти_ПрочиеРасходыНалоговогоУчетаУСНИИП(Отказ)
	
	Если УСН_ДР Тогда
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, Номенклатура, СтатусыОплатыРасходовУСН, Контрагент, РасчетныйДокумент, Валюта, Количество");
		
		//Для МПЗ неоплаченных
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СтатусыОплатыРасходовУСН";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокЗнач = Новый СписокЗначений();
		СписокЗнач.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		НовоеУсловие.ЗначениеРеквизита = СписокЗнач;
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗРеализованныеУСН", "Номенклатура", мТаблицаУсловий);
		
		//Для МПЗ остальных
		СтруктураОбязательныхРеквизитов.Вставить("ДокументОприходования");
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СтатусыОплатыРасходовУСН";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		СписокЗнач = Новый СписокЗначений();
		СписокЗнач.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		НовоеУсловие.ЗначениеРеквизита = СписокЗнач;
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗРеализованныеУСН", "Номенклатура", мТаблицаУсловий);
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, ОтражениеВУСН, Контрагент, РасчетныйДокумент, Валюта");
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "УслугиУСН", "Услуги", );
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, ДокументОприходования, СпособРаспределения, СтатусыОплатыРасходовУСН, Контрагент, РасчетныйДокумент, Валюта");
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "ДопРасходыУСН", "Дополнительные расходы", );
		
	// {УчетДоходовИРасходовИП
	ИначеЕсли Предприниматель Тогда
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, Номенклатура, ВидМПЗ, Партия, СтатусыОплатыРасходовИП, Количество");
		Если мВестиУчетПоВидамДеятельностиПредпринимателя Тогда
			СтруктураОбязательныхРеквизитов.Вставить("НоменклатурнаяГруппа");
			СтруктураОбязательныхРеквизитов.Вставить("ХарактерДеятельности");
		КонецЕсли;
		
		//реализованные товары неоплаченные поставщику
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СтатусыОплатыРасходовИП";
		НовоеУсловие.ВидСравнения = "=";
		НовоеУсловие.УсловиеОбъединения = "И ";
		НовоеУсловие.ЗначениеРеквизита = Перечисления.СтатусыРасходовИП.НеОплачено;
		СтруктураОбязательныхРеквизитов.Вставить("Ключ");
		СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ,НомерСтрокиТЧ, Номенклатура, ВидМПЗ, Партия, Количество");
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗРеализованныеИП", "Реализованные МПЗ", мТаблицаУсловий,СтруктураОбязательныхРеквизитовПодч, "Обороты", "Материалы, неоплаченные поставщикам",);

		//ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗРеализованныеИП", "Реализованные МПЗ", мТаблицаУсловий);
		
		//Реализованные товары неоплаченные поставщику инеоплаченные покупателем
		СтруктураОбязательныхРеквизитов.Вставить("РасчетныйДокумент");
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СтатусыОплатыРасходовИП";
		НовоеУсловие.ВидСравнения = "=";
		НовоеУсловие.УсловиеОбъединения = "И ";
		НовоеУсловие.ЗначениеРеквизита = Перечисления.СтатусыРасходовИП.НеОплаченоНеОплаченоПокупателем;
		СтруктураОбязательныхРеквизитов.Вставить("Ключ");
		СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ,НомерСтрокиТЧ, Номенклатура, ВидМПЗ, Партия, Количество");
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗРеализованныеИП", , мТаблицаУсловий,СтруктураОбязательныхРеквизитовПодч, "Обороты", "Материалы, неоплаченные поставщикам",);
		
		//реализованные товары
		СтруктураОбязательныхРеквизитов.Удалить("Партия");
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СтатусыОплатыРасходовИП";
		НовоеУсловие.ВидСравнения = "=";
		НовоеУсловие.УсловиеОбъединения = "И ";
		НовоеУсловие.ЗначениеРеквизита = Перечисления.СтатусыРасходовИП.НеОплаченоПокупателем;
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "Услуга";
		НовоеУсловие.ВидСравнения = "=";
		НовоеУсловие.УсловиеОбъединения = "И ";
		НовоеУсловие.ЗначениеРеквизита = Ложь;		
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗРеализованныеИП", "Реализованные МПЗ", мТаблицаУсловий);
		
		//реализованные услуги
		СтруктураОбязательныхРеквизитов.Удалить("Количество");
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СтатусыОплатыРасходовИП";
		НовоеУсловие.ВидСравнения = "=";
		НовоеУсловие.УсловиеОбъединения = "И ";
		НовоеУсловие.ЗначениеРеквизита = Перечисления.СтатусыРасходовИП.НеОплаченоПокупателем;
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "Услуга";
		НовоеУсловие.ВидСравнения = "=";
		НовоеУсловие.УсловиеОбъединения = "И ";
		НовоеУсловие.ЗначениеРеквизита = ИСТИНА;
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗРеализованныеИП", "Реализованные МПЗ", мТаблицаУсловий);
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СтатьяЗатрат, Партия, МПЗ, ПартияМПЗ, Количество");
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "ДопРасходыИП", "Дополнительные расходы", );
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СтатьяЗатрат, ВидМПЗ, Партия, Количество");
		Если мВестиУчетПоВидамДеятельностиПредпринимателя Тогда
			СтруктураОбязательныхРеквизитов.Вставить("НоменклатурнаяГруппа");
			СтруктураОбязательныхРеквизитов.Вставить("ХарактерДеятельности");
		КонецЕсли;
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "ПрочиеРасходыИП", "ПрочиеРасходы", );
		
		ПроверитьЗаполнениеТабличнойЧастиОбороты(Отказ);
		
	// }УчетДоходовИРасходовИП
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам УСН

Процедура ДвиженияПоРегистрамУСН_ПрочиеРасходыНалоговогоУчетаУСНИИП(Отказ)
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента.Ссылка);
	
	МассивТаблиц = Новый Массив;
    МассивТаблиц.Очистить();
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "МПЗРеализованныеУСН".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ЭлементРасхода", 		"Номенклатура");
	СтруктураПолей.Вставить("СчетУчета", 			"СчетУчета");
	СтруктураПолей.Вставить("Контрагент", 			"Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента", 	"ДоговорКонтрагента");
	СтруктураПолей.Вставить("Партия",				"ДокументОприходования");
	СтруктураПолей.Вставить("СтатусыПартийУСН", 	"СтатусыПартийУСН");
	СтруктураПолей.Вставить("РасчетныйДокумент", 	"РасчетныйДокумент");
	СтруктураПолей.Вставить("СтатусыОплатыРасходовУСН", "СтатусыОплатыРасходовУСН");
	СтруктураПолей.Вставить("ОтражениеВУСН", 		"ОтражениеВУСН");
	СтруктураПолей.Вставить("Валюта", 				"Валюта");
	СтруктураПолей.Вставить("Количество", 			"Количество");
	СтруктураПолей.Вставить("Сумма", 				"Сумма");
	СтруктураПолей.Вставить("НДС", 					"НДС");
	
	ВременнаяТаблица = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "МПЗРеализованныеУСН", СтруктураПолей).Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("ВидРасхода");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.Номенклатура, "ВидРасхода");
	МассивТаблиц.Добавить(ВременнаяТаблица);
	
		// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "УслугиУСН".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ЭлементРасхода", 		"Номенклатура");
	СтруктураПолей.Вставить("Контрагент", 			"Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента", 	"ДоговорКонтрагента");
	СтруктураПолей.Вставить("РасчетныйДокумент", 	"РасчетныйДокумент");
	СтруктураПолей.Вставить("ОтражениеВУСН", 		"ОтражениеВУСН");
	СтруктураПолей.Вставить("Валюта", 				"Валюта");
	СтруктураПолей.Вставить("Сумма", 				"Сумма");
	СтруктураПолей.Вставить("НДС", 					"НДС");
	
	ВременнаяТаблица = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "УслугиУСН", СтруктураПолей).Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("ВидРасхода");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.Услуги, "ВидРасхода");
	ВременнаяТаблица.Колонки.Добавить("СтатусыОплатыРасходовУСН");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.СтатусыРасходовУСН.НеОплачено, "СтатусыОплатыРасходовУСН");
	МассивТаблиц.Добавить(ВременнаяТаблица);
	
	//Подготовим таблицу движений регистра взаиморасчетов УСН
	ТаблицаРасходы = СобратьТаблицыРасходов(МассивТаблиц);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ДопРасходыУСН".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Партия",				"ДокументОприходования");
	СтруктураПолей.Вставить("СпособРаспределения", 	"СпособРаспределения");
	СтруктураПолей.Вставить("Контрагент", 			"Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента", 	"ДоговорКонтрагента");
	СтруктураПолей.Вставить("РасчетныйДокумент", 	"РасчетныйДокумент");
	СтруктураПолей.Вставить("СтатусыОплатыРасходовУСН", "СтатусыОплатыРасходовУСН");
	СтруктураПолей.Вставить("ОтражениеВУСН", 		"ОтражениеВУСН");
	СтруктураПолей.Вставить("Валюта", 				"Валюта");
	СтруктураПолей.Вставить("Сумма", 				"Сумма");
	СтруктураПолей.Вставить("НДС", 					"НДС");
	
	ТаблицаДопРасходы = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДопРасходыУСН", СтруктураПолей).Выгрузить();
	ТаблицаДопРасходы.Колонки.Добавить("ВидРасхода");
	ТаблицаДопРасходы.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.ДопРасходы, "ВидРасхода");
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам_ПрочиеРасходыНалоговогоУчетаУСНИИП(ТаблицаРасходы, ТаблицаДопРасходы, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам_ПрочиеРасходыНалоговогоУчетаУСНИИП(ТаблицаРасходы, ТаблицаДопРасходы, Отказ)
	
	//ПО РЕГИСТРУ РАСХОДОВ УСН
	ДвиженияПоРегиструРасходовУСН(ТаблицаРасходы, Отказ);
	
	//РАСПРЕДЕЛЕНИЕ ДОП РАСХОДОВ НА КОНКРЕТНЫЕ НОМЕНКЛАТУРНЫЕ ПОЗИЦИИ ПО ОСТАТКА В РЕГИСТРЕ РАСХОДОВ
	Если ТаблицаДопРасходы.Количество() > 0 Тогда
		РаспределениеДопРасходов(ТаблицаДопРасходы, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределениеДопРасходов(ТаблицаДопРасходы, Отказ)
	
	//Соберем информацию об остатках расходов
	
	МассивПартий = ТаблицаДопРасходы.ВыгрузитьКолонку("Партия");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивПартий);
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
		
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ВидРасхода";
	Фильтр.ЗначениеПоля		= Перечисления.ВидыРасходовУСН.Номенклатура;
	Фильтр.Условие			= "=";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "Партия";
	Фильтр.ЗначениеПоля		= МассивПартий;
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля		= Статусы;
	Фильтр.Условие			= "В";
	
	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = НалоговыйУчетУСН.ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	ТаблицаРасходов.Свернуть("ЭлементРасхода, Партия", "Количество, Сумма");
	
	ТаблицаРасходов.Индексы.Добавить("Партия");
	
	Движения.РасходыПриУСН.Очистить();
	Расходы = Движения.РасходыПриУСН;
	ТаблицаДвижений = Расходы.ВыгрузитьКолонки();
		
	Для Каждого СтрокаДопРасходы Из ТаблицаДопРасходы Цикл
		Если СтрокаДопРасходы.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено Тогда
			//Распределение не выполняем, регистрируем без указания номенклатуры (расходы уже списаны и номенклатура не нужна)
			ЗаписьРасходов = ТаблицаДвижений.Добавить();
			ЗаписьРасходов.Период          			= СтруктураШапкиДокумента.Дата;
			ЗаписьРасходов.Организация 				= СтруктураШапкиДокумента.Организация;
			ЗаписьРасходов.ВидРасхода 				= СтрокаДопРасходы.ВидРасхода;
			ЗаписьРасходов.Партия 					= СтрокаДопРасходы.Партия;
			ЗаписьРасходов.ДоговорКонтрагента 		= СтрокаДопРасходы.ДоговорКонтрагента;
			ЗаписьРасходов.РасчетныйДокумент 		= СтрокаДопРасходы.РасчетныйДокумент;
			ЗаписьРасходов.СтатусыОплатыРасходовУСН = СтрокаДопРасходы.СтатусыОплатыРасходовУСН;
			ЗаписьРасходов.СтатусыПартийУСН 		= Перечисления.СтатусыПартийУСН.Купленные;
			ЗаписьРасходов.ОтражениеВУСН 			= СтрокаДопРасходы.ОтражениеВУСН;
			ЗаписьРасходов.Валюта 					= СтрокаДопРасходы.Валюта;
			ЗаписьРасходов.Сумма 					= СтрокаДопРасходы.Сумма;
			ЗаписьРасходов.НДС 						= СтрокаДопРасходы.НДС;
			
		Иначе
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Партия",	СтрокаДопРасходы.Партия);
			НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
			
			ИмяРесурсаРаспределения = ?(СтрокаДопРасходы.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству, "Количество", "Сумма");
			БазаРаспределения = 0;
			СуммаКРаспределению = СтрокаДопРасходы.Сумма;
			НДСКРаспределению 	= СтрокаДопРасходы.НДС;
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				ЗначениеПоСтроке = Строка[ИмяРесурсаРаспределения];
				Если ЗначениеПоСтроке > 0 Тогда
					БазаРаспределения = БазаРаспределения + ЗначениеПоСтроке;
				КонецЕсли;
			КонецЦикла;
						
			Если БазаРаспределения = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Табличная часть ""Дополнительные расходы"", строка " + Строка(ТаблицаДопРасходы.Индекс(СтрокаДопРасходы) + 1) +
								". Не удалось распределить доп. расходы - нет остатка по партии """ + СтрокаДопРасходы.Партия + """", ,Заголовок);
				Продолжить;
			КонецЕсли;
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				ЗначениеПоСтроке = Строка[ИмяРесурсаРаспределения];
				Если ЗначениеПоСтроке > 0 Тогда
					Коэффициент 	= ?(БазаРаспределения = 0, 0, ЗначениеПоСтроке / БазаРаспределения);
					СуммаПоСтроке 	= Окр(СуммаКРаспределению * Коэффициент, 2, 1);
					НДСПоСтроке 	= Окр(НДСКРаспределению * Коэффициент, 2, 1);
					Если СуммаПоСтроке > 0 Тогда
						ЗаписьРасходов = ТаблицаДвижений.Добавить();
						ЗаписьРасходов.Период          			= СтруктураШапкиДокумента.Дата;
						ЗаписьРасходов.Организация 				= СтруктураШапкиДокумента.Организация;
						ЗаписьРасходов.ЭлементРасхода			= Строка.ЭлементРасхода;
						ЗаписьРасходов.ВидРасхода 				= СтрокаДопРасходы.ВидРасхода;
						ЗаписьРасходов.Партия 					= СтрокаДопРасходы.Партия;
						ЗаписьРасходов.ДоговорКонтрагента 		= СтрокаДопРасходы.ДоговорКонтрагента;
						ЗаписьРасходов.РасчетныйДокумент 		= СтрокаДопРасходы.РасчетныйДокумент;
						ЗаписьРасходов.СтатусыОплатыРасходовУСН = СтрокаДопРасходы.СтатусыОплатыРасходовУСН;
						ЗаписьРасходов.СтатусыПартийУСН 		= Перечисления.СтатусыПартийУСН.Купленные;
						ЗаписьРасходов.ОтражениеВУСН 			= СтрокаДопРасходы.ОтражениеВУСН;
						ЗаписьРасходов.Валюта 					= СтрокаДопРасходы.Валюта;
						ЗаписьРасходов.Количество				= Строка.Количество;
						ЗаписьРасходов.Сумма 					= СуммаПоСтроке;
						ЗаписьРасходов.НДС 						= НДСПоСтроке;
					КонецЕсли;
					СуммаКРаспределению = СуммаКРаспределению - СуммаПоСтроке;
					НДСКРаспределению = НДСКРаспределению - НДСПоСтроке;
					БазаРаспределения = БазаРаспределения - ЗначениеПоСтроке;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Не Отказ Тогда
		Расходы.мПериод            = СтруктураШапкиДокумента.Дата;
		Расходы.мТаблицаДвижений   = ТаблицаДвижений;
		Движения.РасходыПриУСН.ВыполнитьПриход();
		Расходы.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

// {УчетДоходовИРасходовИП
////////////////////////////////////////////////////////
//Движения по регистрам ПБОЮЛ

Процедура ДвиженияПоРегистрамИП_ПрочиеРасходыНалоговогоУчетаУСНИИП(Отказ)
	
	РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента.Ссылка);
	
	//Проверим заполнение обязательных полей
	// РеализованоСобственного
	ИмяТабличнойЧасти = "МПЗРеализованныеИП";
	
	Если Не Отказ Тогда

		СтатусыОплатыРасходовИПСписок = Новый СписокЗначений;
		СтатусыОплатыРасходовИПСписок.Добавить(Перечисления.СтатусыРасходовИП.НеОплачено);
		СтатусыОплатыРасходовИПСписок.Добавить(Перечисления.СтатусыРасходовИП.НеОплаченоНеОплаченоПокупателем);
		
		ТабМПЗ = ПолучитьТабличнуюЧастьРеализовано(СтатусыОплатыРасходовИПСписок);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗ", ВидДвиженияНакопления.Приход,,,);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗ", ВидДвиженияНакопления.Расход,,,);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗОтгруженные", ВидДвиженияНакопления.Приход,,,);
		
		СтатусыОплатыРасходовИПСписок = Новый СписокЗначений;
		СтатусыОплатыРасходовИПСписок.Добавить(Перечисления.СтатусыРасходовИП.НеОплачено);
		
		ТабМПЗ = ПолучитьТабличнуюЧастьРеализовано(СтатусыОплатыРасходовИПСписок);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗОтгруженные", ВидДвиженияНакопления.Расход,,,);
		
		// Обороты
		ИмяТабличнойЧасти = "Обороты";
		
		Если Не Отказ Тогда
			
			ТабМПЗ = ПолучитьТабличнуюЧастьОборотыРеализовано();
			ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗОбороты",,, Истина,);
			
			ТабМПЗ.Колонки.НоменклатураСписанная.Имя = "Номенклатура";
			ТабМПЗ.Колонки.ВидСписанногоМПЗ.Имя = "ВидМПЗ";
			ТабМПЗ.Колонки.ПартияСписаннойНоменклатуры.Имя = "Партия";
			ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗ", ВидДвиженияНакопления.Приход,,,);
			ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗ", ВидДвиженияНакопления.Расход,,,);
			
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		СтатусыОплатыРасходовИПСписок = Новый СписокЗначений;
		СтатусыОплатыРасходовИПСписок.Добавить(Перечисления.СтатусыРасходовИП.НеОплаченоПокупателем);
		
		ТабМПЗ = ПолучитьТабличнуюЧастьРеализовано(СтатусыОплатыРасходовИПСписок);
		//ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗ", ВидДвиженияНакопления.Приход,,,);
		//ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗ", ВидДвиженияНакопления.Расход,,,);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗОтгруженные", ВидДвиженияНакопления.Приход,, Истина,);
		//ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПМПЗОтгруженные", ВидДвиженияНакопления.Расход,,,);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	// ДопРасходыОплаченные
	ИмяТабличнойЧасти = "ДопРасходыИП";
	
	Если Не Отказ Тогда
		ТабМПЗ = ПолучитьТабличнуюЧастьДопРасходыОплаченные();
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПИныеМатериальныеРасходы", ВидДвиженияНакопления.Приход,,,);
		
		ТабМПЗ = ПолучитьТабличнуюЧастьДопРасходыНеОплаченные();
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПИныеМатериальныеРасходы", ВидДвиженияНакопления.Приход,,,);
	Иначе
		Возврат;
	КонецЕсли;
	
	// ПрочиеНеоплаченные
	ИмяТабличнойЧасти = "ПрочиеРасходыИП";
		
	Если Не Отказ Тогда
		ТабМПЗ = ПолучитьТабличнуюЧастьПрочиеНеоплаченные(Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИПИныеМатериальныеРасходы", ВидДвиженияНакопления.Приход,, Истина,);
		
		ТабМПЗ = ПолучитьТабличнуюЧастьПрочиеНеоплаченные(Перечисления.ВидыМПЗ.ПрочиеРасходы);
		ДвиженияПоРегиструИП(РежимПроведения, ТабМПЗ, "ИППрочиеРасходы",,, Истина,);
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТабличнуюЧастьРеализовано(СтатусыОплатыРасходовИПСписок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("СтатусыОплатыРасходовИП", СтатусыОплатыРасходовИПСписок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реализовано.Номенклатура,
	|	Реализовано.ВидМПЗ,
	|	Реализовано.НоменклатурнаяГруппа,
	|	Реализовано.ХарактерДеятельности,
	|	ВЫБОР
	|		КОГДА Реализовано.СтатусыОплатыРасходовИП = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходовИП.НеОплачено)
	|			ТОГДА &Ссылка
	|		ИНАЧЕ Реализовано.РасчетныйДокумент
	|	КОНЕЦ КАК ДокументОтгрузки,
	|	Реализовано.Партия,
	|	Реализовано.Количество,
	|	ВЫБОР
	|		КОГДА Реализовано.НДСВключенВстоимость
	|			ТОГДА Реализовано.Сумма - Реализовано.НДС
	|		ИНАЧЕ Реализовано.Сумма
	|	КОНЕЦ КАК Сумма,
	|	Реализовано.НДС,
	|	Реализовано.НДСВключенВстоимость,
	|	Реализовано.Выручка,
	|	Реализовано.НДСНачисленный,
	|	Реализовано.Номенклатура.Услуга,
	|	ВЫБОР
	|		КОГДА Реализовано.СтатусыОплатыРасходовИП = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходовИП.НеОплаченоПокупателем)
	|			ТОГДА &Ссылка
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ДокументОплаты
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МПЗРеализованныеИП КАК Реализовано
	|ГДЕ
	|	Реализовано.Ссылка = &Ссылка
	|	И Реализовано.СтатусыОплатыРасходовИП В(&СтатусыОплатыРасходовИП)";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПолучитьТабличнуюЧастьОборотыРеализовано()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Обороты.Номенклатура КАК НоменклатураСписанная,
	|	Обороты.ВидМПЗ КАК ВидСписанногоМПЗ,
	|	Обороты.Партия КАК ПартияСписаннойНоменклатуры,
	|	Обороты.Количество,
	|	ВЫБОР
	|		КОГДА Обороты.НДСВключенВстоимость
	|			ТОГДА Обороты.Сумма - Обороты.НДС
	|		ИНАЧЕ Обороты.Сумма
	|	КОНЕЦ КАК Сумма,
	|	Обороты.НДС,
	|	Обороты.НДСВключенВстоимость,
	|	МПЗ.Номенклатура КАК НоменклатураПоступившая,
	|	МПЗ.Партия КАК ПартияПоступившейНоменклатуры,
	|	МПЗ.ВидМПЗ КАК ВидПоступившегоМПЗ,
	|	МПЗ.НоменклатурнаяГруппа,
	|	МПЗ.ХарактерДеятельности
	|ИЗ
	|	Документ.ВводНачальныхОстатков.Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатков.МПЗРеализованныеИП КАК МПЗ
	|		ПО Обороты.Ключ = МПЗ.Ключ
	|ГДЕ
	|	Обороты.Ссылка = &Ссылка
	|	И МПЗ.Ссылка = &Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПолучитьТабличнуюЧастьДопРасходыОплаченные()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДопРасходыОплаченные.НДСВключенВстоимость
	|			ТОГДА ДопРасходыОплаченные.Сумма - ДопРасходыОплаченные.НДС
	|		ИНАЧЕ ДопРасходыОплаченные.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ДопРасходыОплаченные.НДС,
	|	ДопРасходыОплаченные.НДСВключенВстоимость,
	|	ДопРасходыОплаченные.СтатьяЗатрат,
	|	ДопРасходыОплаченные.Партия,
	|	ДопРасходыОплаченные.РеквизитыДокументаОплаты,
	|	ДопРасходыОплаченные.МПЗ,
	|	ДопРасходыОплаченные.ПартияМПЗ,
	|	ДопРасходыОплаченные.Количество,
	|	&Ссылка КАК ДокументОплаты,
	|	ДопРасходыОплаченные.Оплачен
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДопРасходыИП КАК ДопРасходыОплаченные
	|ГДЕ
	|	ДопРасходыОплаченные.Ссылка = &Ссылка
	|	И ДопРасходыОплаченные.Оплачен = ИСТИНА";
	
	ТабМПЗ = Запрос.Выполнить().Выгрузить();
	ТабМПЗ.Колонки.Добавить("НоменклатурнаяГруппа");
	ТабМПЗ.Колонки.Добавить("ХарактерДеятельности");
	
	Для Каждого МПЗ Из ТабМПЗ Цикл
		ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы;
		МПЗ.НоменклатурнаяГруппа = ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации( , МПЗ.СтатьяЗатрат, , ВидМПЗ, мУчетнаяПолитика);
		МПЗ.ХарактерДеятельности = ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента,,,, мУчетнаяПолитика);
	КонецЦикла;
	
	Возврат ТабМПЗ;
	
КонецФункции

Функция ПолучитьТабличнуюЧастьДопРасходыНеоплаченные()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДопРасходыНеоплаченные.НДСВключенВстоимость
	|			ТОГДА ДопРасходыНеоплаченные.Сумма - ДопРасходыНеоплаченные.НДС
	|		ИНАЧЕ ДопРасходыНеоплаченные.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ДопРасходыНеоплаченные.НДС,
	|	ДопРасходыНеоплаченные.НДСВключенВстоимость,
	|	ДопРасходыНеоплаченные.СтатьяЗатрат,
	|	ДопРасходыНеоплаченные.Партия,
	|	ДопРасходыНеоплаченные.МПЗ,
	|	ДопРасходыНеоплаченные.ПартияМПЗ,
	|	ДопРасходыНеоплаченные.Количество,
	|	ДопРасходыНеоплаченные.Оплачен
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДопРасходыИП КАК ДопРасходыНеоплаченные
	|ГДЕ
	|	ДопРасходыНеоплаченные.Ссылка = &Ссылка
	|	И ДопРасходыНеоплаченные.Оплачен = ЛОЖЬ";
	
	ТабМПЗ = Запрос.Выполнить().Выгрузить();
	ТабМПЗ.Колонки.Добавить("НоменклатурнаяГруппа");
	ТабМПЗ.Колонки.Добавить("ХарактерДеятельности");
	
	Для Каждого МПЗ Из ТабМПЗ Цикл
		ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы;
		МПЗ.НоменклатурнаяГруппа = ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации( , МПЗ.СтатьяЗатрат, , ВидМПЗ, мУчетнаяПолитика);
		МПЗ.ХарактерДеятельности = ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента,,,, мУчетнаяПолитика);
	КонецЦикла;
	
	Возврат ТабМПЗ;
	
КонецФункции

Функция ПолучитьТабличнуюЧастьПрочиеНеоплаченные(ВидМПЗ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("ВидМПЗ", ВидМПЗ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПрочиеНеоплаченные.НДСВключенВстоимость
	|			ТОГДА ПрочиеНеоплаченные.Сумма - ПрочиеНеоплаченные.НДС
	|		ИНАЧЕ ПрочиеНеоплаченные.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ПрочиеНеоплаченные.НДС,
	|	ПрочиеНеоплаченные.НДСВключенВстоимость,
	|	ПрочиеНеоплаченные.СтатьяЗатрат,
	|	ПрочиеНеоплаченные.Партия,
	|	ПрочиеНеоплаченные.Количество,
	|	ПрочиеНеоплаченные.НоменклатурнаяГруппа,
	|	ПрочиеНеоплаченные.ХарактерДеятельности,
	|	ПрочиеНеоплаченные.Партия КАК РасчетныйДокумент
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ПрочиеРасходыИП КАК ПрочиеНеоплаченные
	|ГДЕ
	|	ПрочиеНеоплаченные.Ссылка = &Ссылка
	|	И ПрочиеНеоплаченные.ВидМПЗ = &ВидМПЗ";
	
	ТабМПЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТабМПЗ;
	
КонецФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиОбороты(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Обороты.Сумма,0) КАК Сумма,
	|	МПЗРеализованныеИП.Сумма КАК СуммаПоПартии,
	|	МПЗРеализованныеИП.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МПЗРеализованныеИП КАК МПЗРеализованныеИП
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(Обороты.Сумма) КАК Сумма,
	|			Обороты.Ключ КАК Ключ
	|		ИЗ
	|			Документ.ВводНачальныхОстатков.Обороты КАК Обороты
	|		ГДЕ
	|			Обороты.Ссылка = &Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Обороты.Ключ) КАК Обороты
	|		ПО МПЗРеализованныеИП.Ключ = Обороты.Ключ
	|ГДЕ
	|	МПЗРеализованныеИП.Ссылка = &Ссылка";
		
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из Результат Цикл
		Если Строка.Сумма <> 0 Тогда
			Если Строка.Сумма <> Строка.СуммаПоПартии Тогда
				СтрокаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
				""" табличной части: Стоимость по партии не соответствует стоимости списанных материалов (табличная часть ""Материалы, неоплаченные поставщикам"")";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщенияОбОшибке, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
// }УчетДоходовИРасходовИП

//*****************************************************************************************************************************
// РАСХОДЫ ПО НМА И НИОКР

Процедура ОбработкаПроведения_НематериальныеАктивыИНИОКР(Отказ)
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата + 24*60*60, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	мСтрокаОбязательныхРеквизитов = "";
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаНМА(мСтрокаОбязательныхРеквизитов);
	// Проверим правильность заполнения табличной части документа
	ПроверитьЗаполнениеТабЧастиНМА(Отказ, Заголовок, мСтрокаОбязательныхРеквизитов);
	
	Если НЕ Отказ Тогда
	// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ДвиженияПоРегистрамНМА(Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОшибкаПроведенияПоСтрокеНМА(СтрокаНМА, ТекстСообщения,Заголовок,Статус)
	НачалоСообщения = "- строка № "+СтрокаНМА.НомерСтроки+", НМА (НИОКР) <"+СтрокаНМА.НематериальныйАктив+"> : ";
	ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения+ТекстСообщения, ,Заголовок ,Статус)
КонецПроцедуры

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаНМА(мСтрокаОбязательныхРеквизитов)
	
	мСтрокаРеквизитыБухУчета =  "НачислятьАмортизациюБУ,
	|ОбъемПродукцииРаботДляВычисленияАмортизации,
	|СпособНачисленияАмортизацииБУ,
	|СрокПолезногоИспользованияБУ,
	|СтоимостьБУ,
	|СчетНачисленияАмортизацииБУ,
	|СчетУчетаБУ,
	|СчетУчетаБУВнеоборотногоАктива
	|";
	
	Если ОСН Тогда
		мСтрокаРеквизитыНалУчета =  "НачислятьАмортизациюНУ,
		|СпециальныйКоэффициентНУ,
		|МетодНачисленияАмортизации,
		|СрокПолезногоИспользованияНУ,
		|СтоимостьНУ,
		|СчетНачисленияАмортизацииНУ,
		|СчетУчетаНУ,
		|СчетУчетаНУВнеоборотногоАктива
		|";
	ИначеЕсли УСН_ДР Тогда
		мСтрокаРеквизитыНалУчета =  "ПервоначальнаяСтоимостьУСН,
		|ДатаПриобретения,
		|СрокПолезногоИспользованияУСН,
		|ПорядокВключенияСтоимостиВСоставРасходовУСН,
		|";
	Иначе
		мСтрокаРеквизитыНалУчета =  "НачислятьАмортизациюНУ,
		|СрокПолезногоИспользованияНУ,
		|СтоимостьНУ,
		|ДатаПриобретенияИП,
		|";
	КонецЕсли;
	
	мОбщиеРеквизиты         =  "НематериальныйАктив,
								|ДатаПринятияКУчетуРегл,
								|";
	
	мСтрокаОбязательныхРеквизитов = мОбщиеРеквизиты + мСтрокаРеквизитыБухУчета + мСтрокаРеквизитыНалУчета;

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаНМА()

// Процедура проверяет корректность заполнения реквизитов таб. части документа
//
Процедура ПроверитьЗаполнениеТабЧастиНМА(Отказ, Заголовок, мСтрокаОбязательныхРеквизитов);

	ОбязательныеРеквизиты =  "НематериальныйАктив,
								|ДатаПринятияКУчетуРегл,
								|";
;
	//проверка заполнения обязательных реквизитов
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НМА", Новый Структура(ОбязательныеРеквизиты), Отказ, Заголовок);

	БухУчет    = Истина;
	НалУчет    = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
	НалУчетУСН = СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН;

	РеквизитыВысокойВажности = "ВидОбъектаУчета";

	Если БухУчет тогда
		РеквизитыВысокойВажности = РеквизитыВысокойВажности +",ПервоначальнаяСтоимостьБУ,СчетУчетаБУ, ТекущаяСтоимостьБУ";
	КонецЕсли;

	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти.НМА.Реквизиты;

	Для Каждого СтрокаТЧ Из ЭтотОбъект.НМА Цикл

		ПроверкаПоСтрокеНМА(СтрокаТЧ, РеквизитыВысокойВажности, БухУчет, НалУчет, НалУчетУСН,Отказ,МетаданныеРеквизиты);

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабЧастиНМА()

//Проверка заполнения реквизитов
Функция ПроверкаПоСтрокеНМА(СтрокаНМА,БезусловныеРеквизиты, БухУчет, НалУчет, НалУчетУСН, Отказ, МетаданныеРеквизиты)
	
	РеквизитыДляПроверки = Новый Структура(БезусловныеРеквизиты);
	Для каждого ТекРеквизит из РеквизитыДляПроверки Цикл
		РеквизитыДляПроверки.Вставить(ТекРеквизит.Ключ, СтатусСообщения.Важное);
	КонецЦикла;
	
	ОСН_ФизЛицо = (ЭтотОбъект.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И НЕ НалУчетУСН);

	//Проверка реквизитов общей группы
	Если БухУчет или НалУчет или НалУчетУСН тогда
		
		Если СтрокаНМА.НачислятьАмортизациюБУ Тогда
		
			//По видам учета
			Если БухУчет тогда
				Если СтрокаНМА.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
					РеквизитыДляПроверки.Вставить("СчетНачисленияАмортизацииБУ"  ,СтатусСообщения.Важное);
				КонецЕсли;
				РеквизитыДляПроверки.Вставить("ТекущаяСтоимостьБУ" ,СтатусСообщения.Важное);
				РеквизитыДляПроверки.Вставить("СрокПолезногоИспользованияБУ" ,СтатусСообщения.Важное);
			КонецЕсли;
			
			Если НалУчетУСН тогда
				РеквизитыДляПроверки.Вставить("ПервоначальнаяСтоимостьУСН"				,СтатусСообщения.Важное);
				РеквизитыДляПроверки.Вставить("ДатаПриобретения"							,СтатусСообщения.Важное);
				РеквизитыДляПроверки.Вставить("СрокПолезногоИспользованияУСН"				,СтатусСообщения.Важное);
				РеквизитыДляПроверки.Вставить("ПорядокВключенияСтоимостиВСоставРасходовУСН"	,СтатусСообщения.Важное);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаНМА.НачислятьАмортизациюНУ 
		   И НалУчет Тогда
		   РеквизитыДляПроверки.Вставить("ПервоначальнаяСтоимостьНУ"					,СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("СрокПолезногоИспользованияНУ"				,СтатусСообщения.Важное);
			
			Если НЕ ОСН_ФизЛицо Тогда
				РеквизитыДляПроверки.Вставить("ТекущаяСтоимостьНУ"							,СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	//Проверка реквизитов групп амортизации
	Если БухУчет Тогда
		
		РеквизитыДляПроверки.Вставить("СпособНачисленияАмортизацииБУ"			,СтатусСообщения.Важное);
		Если СтрокаНМА.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
			РеквизитыДляПроверки.Вставить("КоэффициентБУ"			,СтатусСообщения.Важное);
		КонецЕсли;
		Если СтрокаНМА.НачислятьАмортизациюБУ Тогда
			РеквизитыДляПроверки.Вставить("СпособОтраженияРасходов"	,СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НалУчет
	   И СтрокаНМА.НачислятьАмортизациюНУ Тогда
	   
	   Если СтрокаНМА.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив И ОСН Тогда
		   Если СтрокаНМА.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный тогда
			   РеквизитыДляПроверки.Вставить("АмортизацияДо2009"				,СтатусСообщения.Внимание);
			   РеквизитыДляПроверки.Вставить("ФактическийСрокИспользованияДо2009"				,СтатусСообщения.Внимание);
		   Конецесли;
		   РеквизитыДляПроверки.Вставить("СпециальныйКоэффициентНУ"				,СтатусСообщения.Внимание);
	   КонецЕсли;
		
		Если СтрокаНМА.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
			РеквизитыДляПроверки.Вставить("НакопленнаяАмортизацияНУ"				,СтатусСообщения.Внимание);
		КонецЕсли;
		
		Если СтрокаНМА.НачислятьАмортизациюНУ И НЕ ОСН_ФизЛицо Тогда
			РеквизитыДляПроверки.Вставить("СпособОтраженияРасходов"	,СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЕслИ;
	
	// Цикл по проверяемым полям
	Для каждого КлючЗначение Из РеквизитыДляПроверки Цикл
		Значение = СтрокаНМА[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда // 
			ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
			ВидУчета = ""; 
			Если Прав(КлючЗначение.Ключ,2) = "БУ" тогда
				ВидУчета = "(БУ) ";
			ИначеЕсли Прав(КлючЗначение.Ключ,2) = "НУ" тогда
				ВидУчета = "(НУ) ";
			ИначеЕсли Прав(КлючЗначение.Ключ,3) = "УСН" тогда
				ВидУчета = "(УСН) ";
			КонецЕсли;
			СтрокаСообщения = ВидУчета+ "не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			
			ОшибкаПроведенияПоСтрокеНМА(СтрокаНМА, СтрокаСообщения,Заголовок,КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура формирования движений регистров
Процедура ДвиженияПоРегистрамНМА(Отказ,Заголовок)
	
	ТабНМА = НМА.Выгрузить();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияНМАОрганизаций.НематериальныйАктив КАК НематериальныйАктив
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
	|ГДЕ
	|	СостоянияНМАОрганизаций.Организация = &Организация
	|	И СостоянияНМАОрганизаций.Состояние В(&СписокСостоянийНМА)";
	
	СписокСостоянийНМА = Новый СписокЗначений;
	СписокСостоянийНМА.Добавить(Перечисления.ВидыСостоянийНМА.ПринятКУчету);
	
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация );
	Запрос.УстановитьПараметр("СписокСостоянийНМА",СписокСостоянийНМА);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаНМА ИЗ ТабНМА Цикл
		ДвиженияПоРегистрамРеглНМА(СтрокаНМА, Отказ, Заголовок, Результат);
	КонецЦикла;
	
КонецПроцедуры // ФормированиеДвижений()

// Процедура формирования движений регл. регистров
Процедура ДвиженияПоРегистрамРеглНМА(СтрокаНМА, Отказ, Заголовок, ТабПоНМА)

	Если СтруктураШапкиДокумента.ОтражатьПоСпециальнымРегистрам Тогда
		Если ТабПоНМА.Найти(СтрокаНМА.НематериальныйАктив, "НематериальныйАктив") = Неопределено Тогда
			// Движения по регистру Состояние
			Движение = Движения.СостоянияНМАОрганизаций.Добавить();
			Движение.Период              = СтрокаНМА.ДатаПринятияКУчетуРегл;
			Движение.НематериальныйАктив = СтрокаНМА.НематериальныйАктив;
			Движение.Организация         = СтруктураШапкиДокумента.Организация;
			Движение.Состояние           = Перечисления.ВидыСостоянийНМА.ПринятКУчету;
			
			СостояниеНМА            = Движения.СостоянияНМАОрганизаций;
			//УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийНМА(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата, СостояниеНМА,Отказ,Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	
	Если Отказ Тогда
	    // НМА уже было принято к учету ранее.
		// Повторное принятие к учету НМА недопустимо.
		Возврат;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		Проводки = Движения.Хозрасчетный;
		
		
		Проводка = Проводки.Добавить();
		
		Проводка.Период       = СтруктураШапкиДокумента.Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		
		Проводка.Содержание = СодержаниеПроводки;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			Проводка.Сумма        = СтрокаНМА.ТекущаяСтоимостьБУ;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			Проводка.СуммаНУДт        = СтрокаНМА.ТекущаяСтоимостьНУ;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРДт        = СтрокаНМА.ТекущаяСтоимостьПР;
				Проводка.СуммаВРДт        = СтрокаНМА.ТекущаяСтоимостьВР;
			КонецЕсли;
		КонецЕсли;
		
		ЭтоНМА = (СтрокаНМА.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив);
		Проводка.СчетДт       = СтрокаНМА.СчетУчетаБУ;
		Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.Вспомогательный;
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");

		//Расходы на НИОКР.
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР", СтрокаНМА.НематериальныйАктив);
		
		
		Если ЭтоНМА Тогда
			
			Если СтрокаНМА.НакопленнаяАмортизацияБУ <> 0
				ИЛИ СтрокаНМА.НакопленнаяАмортизацияНУ <> 0
				ИЛИ СтрокаНМА.НакопленнаяАмортизацияПР <> 0 Тогда
				
				Проводка = Проводки.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				
				Проводка.Содержание = СодержаниеПроводки;
				
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
					Проводка.Сумма        = СтрокаНМА.НакопленнаяАмортизацияБУ;
				КонецЕсли;
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					Проводка.СуммаНУКт        = СтрокаНМА.НакопленнаяАмортизацияНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт        = СтрокаНМА.НакопленнаяАмортизацияПР;
						Проводка.СуммаВРКт        = СтрокаНМА.НакопленнаяАмортизацияВР;
					КонецЕсли;
				КонецЕсли;
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.Вспомогательный;
				Проводка.СчетКт       = СтрокаНМА.СчетНачисленияАмортизацииБУ;
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Кт");
				
				//Расходы на НМА.
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
		
	Если СтруктураШапкиДокумента.ОтражатьПоСпециальнымРегистрам Тогда
		// Движения по регистру СпособыОтраженияРасходов
		Движение = Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Добавить();
		Движение.Период                      = СтрокаНМА.ДатаПринятияКУчетуРегл;
		Движение.НематериальныйАктив         = СтрокаНМА.НематериальныйАктив;
		Движение.Организация                 = СтруктураШапкиДокумента.Организация;
		Движение.СпособОтраженияРасходов     = СтрокаНМА.СпособОтраженияРасходов;
		
		// Движения по регистру ПервоначальныеСведения
		Движение = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Добавить();
		Движение.Период                      = СтрокаНМА.ДатаПринятияКУчетуРегл;
		Движение.НематериальныйАктив         = СтрокаНМА.НематериальныйАктив;
		Движение.Организация                 = СтруктураШапкиДокумента.Организация;
		Движение.НачислятьАмортизацию        = СтрокаНМА.НачислятьАмортизациюБУ;
		Движение.ПервоначальнаяСтоимость     = СтрокаНМА.ПервоначальнаяСтоимостьБУ;
		Движение.СпособНачисленияАмортизации = СтрокаНМА.СпособНачисленияАмортизацииБУ;
		Движение.СпособПоступления           = СтрокаНМА.СпособПоступления;
		Движение.СрокПолезногоИспользования  = СтрокаНМА.СрокПолезногоИспользованияБУ;
		Движение.Коэффициент                 = СтрокаНМА.КоэффициентБУ;
		
		// Движения по регистру СчетаБухгалтерскогоУчета
		Движение = Движения.СчетаБухгалтерскогоУчетаНМА.Добавить();
		Движение.Период                      = СтрокаНМА.ДатаПринятияКУчетуРегл;
		Движение.НематериальныйАктив         = СтрокаНМА.НематериальныйАктив;
		Движение.Организация                 = СтруктураШапкиДокумента.Организация;
		Движение.СчетУчета                   = СтрокаНМА.СчетУчетаБУ;
		Движение.СчетНачисленияАмортизации   = СтрокаНМА.СчетНачисленияАмортизацииБУ;
		
		Если УСН Тогда
			
			// Движения по регистру ПервоначальныеСведенияНМАНалоговыйУчетУСН
			
			ПервоначальныеСведения = Движения.ПервоначальныеСведенияНМАНалоговыйУчетУСН;
			Движение = ПервоначальныеСведения.Добавить();
			
			Движение.Период                     = СтрокаНМА.ДатаПринятияКУчетуРегл;
			Движение.НематериальныйАктив        = СтрокаНМА.НематериальныйАктив;
			Движение.Организация                = СтруктураШапкиДокумента.Организация;
			Движение.ПервоначальнаяСтоимостьУСН = СтрокаНМА.ПервоначальнаяСтоимостьУСН;
			Движение.СрокПолезногоИспользования = СтрокаНМА.СрокПолезногоИспользованияУСН;
			Движение.ДатаПриобретения           = СтрокаНМА.ДатаПриобретения;
			Движение.СуммаНачисленнойАмортизации= СтрокаНМА.НакопленнаяАмортизацияУСН;
			Движение.ПорядокВключенияСтоимостиВСоставРасходовУСН = СтрокаНМА.ПорядокВключенияСтоимостиВСоставРасходовУСН;
			
		КонецЕсли;
	КонецЕсли;

	// {УчетДоходовИРасходовИП
	Если (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя) И (СтрокаНМА.ТекущаяСтоимостьНУ <> 0) Тогда
		
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата+24*60*60, Отказ, СтруктураШапкиДокумента.Организация);
		
		Движение = Движения.ИПМПЗ.ДобавитьПриход();
		Движение.Активность                	= Истина;
		Движение.Период						= СтруктураШапкиДокумента.Дата;
		Движение.Регистратор				= СтруктураШапкиДокумента.Ссылка;
		Движение.ХарактерДеятельности		= ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(,,,, УчетнаяПолитикаНУ);
		Движение.НоменклатурнаяГруппа		= ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации(Ложь, СтрокаНМА.НематериальныйАктив, , Перечисления.ВидыМПЗ.НМА, УчетнаяПолитикаНУ);
		Движение.Номенклатура				= СтрокаНМА.НематериальныйАктив;
		Движение.Организация				= СтруктураШапкиДокумента.Организация;
		Движение.ВидМПЗ						= Перечисления.ВидыМПЗ.НМА;
		Движение.Партия						= СтруктураШапкиДокумента.Ссылка;
		Движение.ДокументОплаты				= СтруктураШапкиДокумента.Ссылка;
		Движение.РеквизитыДокументаОплаты	= СтрокаНМА.РеквизитыДокументаОплаты;
		Движение.Сумма						= СтрокаНМА.ТекущаяСтоимостьНУ;
		
		Если СтрокаНМА.НакопленнаяАмортизацияНУ <> 0 Тогда
			
			ТабЗатрат = Новый ТаблицаЗначений;
			ТабЗатрат.Колонки.Добавить("ОбъектУчета");
			ТабЗатрат.Колонки.Добавить("Субконто");
			ТабЗатрат.Колонки.Добавить("СчетЗатрат");
			ТабЗатрат.Колонки.Добавить("РасчетныйДокумент");
			ТабЗатрат.Колонки.Добавить("ДокументОплаты");
			ТабЗатрат.Колонки.Добавить("РеквизитыДокументаОплаты");
			ТабЗатрат.Колонки.Добавить("Сумма");
			
			СтрНМА = ТабЗатрат.Добавить();
			СтрНМА.ОбъектУчета = СтрокаНМА.НематериальныйАктив;
			СтрНМА.Субконто = СтрокаНМА.НематериальныйАктив;
			СтрНМА.СчетЗатрат = СтрокаНМА.СчетУчетаБУ;
			СтрНМА.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
			СтрНМА.ДокументОплаты = СтруктураШапкиДокумента.Ссылка;
			СтрНМА.РеквизитыДокументаОплаты = СтрокаНМА.РеквизитыДокументаОплаты;
			СтрНМА.Сумма = СтрокаНМА.НакопленнаяАмортизацияНУ;
			
			ДоходыИРасходыПредпринимателя.ОтражениеАмортизации(ЭтотОбъект, СтруктураШапкиДокумента, ТабЗатрат, УчетнаяполитикаНУ);
		КонецЕсли;
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	Если СтруктураШапкиДокумента.ОтражатьПоСпециальнымРегистрам Тогда
		Если ОСН ИЛИ Предприниматель Тогда
			
			Движение = Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Добавить();
			Движение.НематериальныйАктив        = СтрокаНМА.НематериальныйАктив;
			Движение.Организация                = СтруктураШапкиДокумента.Организация;
			Движение.Период                     = СтрокаНМА.ДатаПринятияКУчетуРегл;
			Движение.НачислятьАмортизацию       = СтрокаНМА.НачислятьАмортизациюНУ;
			Движение.ПервоначальнаяСтоимостьНУ  = СтрокаНМА.ПервоначальнаяСтоимостьНУ;
			Движение.СрокПолезногоИспользования = СтрокаНМА.СрокПолезногоИспользованияНУ;
			
			Если Предприниматель Тогда
				Движение.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный;
				Движение.ДатаПриобретения			= СтрокаНМА.ДатаПриобретения;
				
			Иначе
				Движение.МетодНачисленияАмортизации = СтрокаНМА.МетодНачисленияАмортизацииНУ;
				Движение.ДатаПриобретения			= СтрокаНМА.ДатаПринятияКУчетуРегл;
				Движение.АмортизацияДо2009                        = СтрокаНМА.АмортизацияДо2009;
				Движение.ФактическийСрокИспользованияДо2009       = СтрокаНМА.ФактическийСрокИспользованияДо2009;
			КонецЕсли;
			
			Если ОСН Тогда
				
				Движение = Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Добавить();
				Движение.НематериальныйАктив     = СтрокаНМА.НематериальныйАктив;
				Движение.Организация             = СтруктураШапкиДокумента.Организация;
				Движение.Период                  = СтрокаНМА.ДатаПринятияКУчетуРегл;
				Движение.СпециальныйКоэффициент  = СтрокаНМА.СпециальныйКоэффициентНУ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ФормированиеДвиженийРегл()

//*****************************************************************************************************************************
// ОСНОВНЫЕ СРЕДСТВА

Процедура ОбработкаПроведения_ОсновныеСредства(Отказ)
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	// Проверим правильность заполнения табличной части документа
	ПроверитьЗаполнениеТабЧасти(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	СтруктураПолей.Вставить("НомерСтроки",      "НомерСтроки");
	СтруктураПолей.Вставить("ИнвентарныйНомер", "ИнвентарныйНомерРегл");

	РезультатЗапросаПоОС = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);

	// Проверим, нет ли одинаковых инвентарных номеров основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиИнвентарныхНомеровОС(ТаблицаПоОС, Отказ, Заголовок);
	
	// Проверим, нет числятся ли перечисленные в таблице по ОС объекты в других организациях.
	ПроверитьПринятиеКУчетуВДругихОрганизациях(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Проверяет факт принятия к учету основного средства в других организациях.
//
Процедура ПроверитьПринятиеКУчетуВДругихОрганизациях(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	ВыборкаОС = ПолныеПрава.ПроверитьПринятиеКУчетуВДругихОрганизациях(СтруктураШапкиДокумента, ТаблицаПоОС).Выбрать();
	
	Пока ВыборкаОС.Следующий() Цикл
		
		ТекстСообщенияОбОшибке =
		"Основное средство " + ВыборкаОС.ОсновноеСредство + " (" + СокрЛП(ВыборкаОС.КодОсновногоСредства) + ") " + Формат(ВыборкаОС.ДатаСостояния, "ДФ=dd.MM.yyyy") + " принято к учету в организации " + ВыборкаОС.Организация;
		
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьПринятиеКУчетуВДругихОрганизациях()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаНал();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаНал()
	
	мСтрокаРеквизитыНалУчета = "
		|ОС.ПорядокВключенияСтоимостиВСоставРасходовНУ,
		|ОС.АмортизацияДо2002НУ,
		|ОС.НакопленнаяАмортизацияНУ,
		|ОС.НачислятьАмортизациюНУ,
		|ОС.ПервоначальнаяСтоимостьНУ,
		|ОС.СпециальныйКоэффициентНУ,
		|ОС.СрокПолезногоИспользованияНУ,
		|ОС.СтоимостьДо2002НУ,
		|ОС.СуммаПоследнейМодернизацииНУ,
		|ОС.СчетАмортизацииНУ,
		|ОС.СчетУчетаНУ,
		|ОС.ТекущаяСтоимостьНУ";
		
	мСтрокаРеквизитыНалУчетаУСН = "
		|ОС.ПервоначальнаяСтоимостьУСН,
		|ОС.ДатаПриобретенияУСН,
		|ОС.СрокПолезногоИспользованияУСН,
		|ОС.СуммаНачисленнойАмортизацииУСН";
		
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Процедура проверяет корректность заполнения реквизитов таб. части документа
//
Процедура ПроверитьЗаполнениеТабЧасти(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);

	ОбязательныеРеквизиты = "ОсновноеСредство,ДатаПринятияКУчетуРегл";
	//проверка заполнения обязательных реквизитов
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(ОбязательныеРеквизиты), Отказ, Заголовок);

	БухУчет    = Истина;
	НалУчет    = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
	НалУчетУСН = СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН;

	РеквизитыВысокойВажности = "ИнвентарныйНомерРегл";

	Если БухУчет тогда
		РеквизитыВысокойВажности = РеквизитыВысокойВажности +",ПервоначальнаяСтоимостьБУ,СчетУчетаБУ";
	КонецЕсли;

	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти.ОС.Реквизиты;

	Для Каждого СтрокаТЧ Из ЭтотОбъект.ОС Цикл

		ПроверкаПоСтроке(ЭтотОбъект, СтрокаТЧ, РеквизитыВысокойВажности, БухУчет, НалУчет, НалУчетУСН,Отказ,Заголовок,МетаданныеРеквизиты);

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабЧасти()

//Проверка заполнения реквизитов
Функция ПроверкаПоСтроке(ЭтотОбъект, СтрокаОС,БезусловныеРеквизиты, БухУчет, НалУчет, НалУчетУСН, Отказ, Заголовок,МетаданныеРеквизиты)
	
	РеквизитыДляПроверки = Новый Структура(БезусловныеРеквизиты);
	Для каждого ТекРеквизит из РеквизитыДляПроверки Цикл
		РеквизитыДляПроверки.Вставить(ТекРеквизит.Ключ, СтатусСообщения.Важное);
	КонецЦикла;
	
	ОСН_ФизЛицо = (ЭтотОбъект.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И НЕ НалУчетУСН);

	//Проверка реквизитов общей группы
	Если БухУчет или НалУчет или НалУчетУСН тогда
		РеквизитыДляПроверки.Вставить("СостояниеПринятияКУчетуРегл"			,СтатусСообщения.Внимание);
		РеквизитыДляПроверки.Вставить("НомерДокументаПринятияКУчетуРегл"	,СтатусСообщения.Внимание);
		РеквизитыДляПроверки.Вставить("НазваниеДокументаПринятияКУчетуРегл"	,СтатусСообщения.Внимание);
		
		Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		
			//По видам учета
			Если БухУчет тогда
				РеквизитыДляПроверки.Вставить("СчетАмортизацииБУ"  ,СтатусСообщения.Важное);
				РеквизитыДляПроверки.Вставить("ТекущаяСтоимостьБУ" ,СтатусСообщения.Важное);
				Если СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный 
				 ИЛИ СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования 
				 ИЛИ СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
					РеквизитыДляПроверки.Вставить("СрокПолезногоИспользованияБУ" ,СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;
			
			Если НалУчетУСН тогда
				//РеквизитыДляПроверки.Вставить("ПервоначальнаяСтоимостьУСН"				,СтатусСообщения.Важное);
				РеквизитыДляПроверки.Вставить("ДатаПриобретенияУСН"							,СтатусСообщения.Важное);
				РеквизитыДляПроверки.Вставить("СрокПолезногоИспользованияУСН"				,СтатусСообщения.Важное);
				РеквизитыДляПроверки.Вставить("ПорядокВключенияСтоимостиВСоставРасходовУСН"	,СтатусСообщения.Важное);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
		   И НалУчет Тогда
			РеквизитыДляПроверки.Вставить("ПервоначальнаяСтоимостьНУ"					,СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("СрокПолезногоИспользованияНУ"				,СтатусСообщения.Важное);
			
			Если НЕ ОСН_ФизЛицо Тогда
				РеквизитыДляПроверки.Вставить("ТекущаяСтоимостьНУ"							,СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	//Проверка реквизитов дополнительной группы
	Если (БухУчет ИЛИ НалУчет) 
	   И ((НЕ СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету) 
	     ИЛИ (НЕ СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету)) Тогда
		Модернизация = Новый структура("ДатаПоследнейМодернизацииРегл,
			|СостояниеМодернизацииРегл,
			|НомерДокументаМодернизацииРегл,
			|НазваниеДокументаМодернизацииРегл");
		Если БухУчет тогда
			Модернизация.Вставить("СуммаПоследнейМодернизацииБУ");
		КонецЕсли;
		Если НалУчет тогда
			Модернизация.Вставить("СуммаПоследнейМодернизацииНУ");
		КонецЕсли;
		
		Для Каждого ТекРеквизит Из Модернизация Цикл
			Если ЗначениеЗаполнено(СтрокаОС[ТекРеквизит.Ключ]) тогда
				РеквизитыДляПроверки.Вставить("ДатаПоследнейМодернизацииРегл"		,СтатусСообщения.Важное);
				РеквизитыДляПроверки.Вставить("СостояниеМодернизацииРегл"			,СтатусСообщения.Внимание);
				РеквизитыДляПроверки.Вставить("НомерДокументаМодернизацииРегл"		,СтатусСообщения.Внимание);
				РеквизитыДляПроверки.Вставить("НазваниеДокументаМодернизацииРегл"	,СтатусСообщения.Внимание);
				Если БухУчет тогда
					РеквизитыДляПроверки.Вставить("СуммаПоследнейМодернизацииБУ"	,СтатусСообщения.Внимание);
					РеквизитыДляПроверки.Вставить("СтоимостьДляВычисленияАмортизацииБУ"	,СтатусСообщения.Важное);
					
					Если СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный 
						или СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования 
						или СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
						РеквизитыДляПроверки.Вставить("СрокИспользованияДляВычисленияАмортизацииБУ"	,СтатусСообщения.Важное);
					ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
						РеквизитыДляПроверки.Вставить("ОбъемПродукцииРаботДляВычисленияАмортизацииБУ"	,СтатусСообщения.Важное);
					КонецЕсли;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	//Проверка реквизитов групп амортизации
	Если БухУчет 
	   И СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
	   
		РеквизитыДляПроверки.Вставить("СпособНачисленияАмортизацииБУ"			,СтатусСообщения.Важное);
		
		Если СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ тогда
			РеквизитыДляПроверки.Вставить("КоэффициентАмортизацииБУ"				,СтатусСообщения.Важное);
		ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега тогда
			РеквизитыДляПроверки.Вставить("ПараметрВыработкиБУ"					,СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("КоэффициентАмортизацииБУ"			,СтатусСообщения.Важное);
		ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			РеквизитыДляПроверки.Вставить("ПараметрВыработкиБУ"					,СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("ОбъемПродукцииРаботБУ"				,СтатусСообщения.Важное);
		ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка тогда
			РеквизитыДляПроверки.Вставить("КоэффициентУскоренияБУ"				,СтатусСообщения.Важное);
		Конецесли;

		Если СтрокаОС.НачислятьАмортизациюБУ Тогда
			РеквизитыДляПроверки.Вставить("СпособОтраженияРасходовПоАмортизации"	,СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НалУчет
	   И СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
	   
	   Если НЕ ОСН Тогда
		   РеквизитыДляПроверки.Вставить("МетодНачисленияАмортизацииНУ"			,СтатусСообщения.Важное);
	   КонецЕсли;
	   РеквизитыДляПроверки.Вставить("СпециальныйКоэффициентНУ"				,СтатусСообщения.Внимание);
	   
	   Если ОСН Тогда
		   Если СтрокаОС.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный тогда
			   РеквизитыДляПроверки.Вставить("АмортизацияДо2009"				,СтатусСообщения.Внимание);
			   РеквизитыДляПроверки.Вставить("ФактическийСрокИспользованияДо2009"				,СтатусСообщения.Внимание);
		   Конецесли;
	   Конецесли;

		Если СтрокаОС.НачислятьАмортизациюНУ И НЕ ОСН_ФизЛицо Тогда
			РеквизитыДляПроверки.Вставить("СпособОтраженияРасходовПоАмортизации"	,СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЕслИ;
	
	// Цикл по проверяемым полям
	Для каждого КлючЗначение Из РеквизитыДляПроверки Цикл
		Значение = СтрокаОС[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда // 
			ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
			ВидУчета = ""; 
			Если Прав(КлючЗначение.Ключ,2) = "БУ" тогда
				ВидУчета = "(БУ) ";
			ИначеЕсли Прав(КлючЗначение.Ключ,2) = "НУ" тогда
				ВидУчета = "(НУ) ";
			ИначеЕсли Прав(КлючЗначение.Ключ,3) = "УСН" тогда
				ВидУчета = "(УСН) ";
			КонецЕсли;
			СтрокаСообщения = ВидУчета+ "не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			
			ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения,Заголовок,КлючЗначение.Значение);
		КонецЕсли;

	КонецЦикла;
	
	//Логические проверки
	Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету Тогда 
		
		//Запрет некоторых движений если ОС списано при принятии
		Если БухУчет и СтрокаОС.НачислятьАмортизациюБУ тогда
			СтрокаСообщения = "(БУ) по ОС не может начисляться амортизация, если оно списано на затраты при принятии к учету.
			|Документ не будет проведен.";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения ,Заголовок,СтатусСообщения.ОченьВажное);
			Отказ = Истина;
		КонецЕсли;
	
		Если БухУчет и ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимостьБУ) тогда
			СтрокаСообщения = "(БУ) текущая стоимость ОС должна быть равна 0, если оно списано на затраты при принятии к учету
			|(проводка не будет сформирована)";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения ,Заголовок,СтатусСообщения.Обычное);
		КонецЕсли;
		
		Если БухУчет и ЗначениеЗаполнено(СтрокаОС.НакопленнаяАмортизацияБУ) тогда
			СтрокаСообщения = "(БУ) накопленная амортизация по  ОС должна быть равна 0, если оно списано на затраты при принятии к учету
			|(проводка не будет сформирована)";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения ,Заголовок,СтатусСообщения.Обычное);
		КонецЕсли;
		
	КонецЕсли;

	Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда 
		
		//Запрет некоторых движений если ОС списано при принятии
		Если НалУчет и СтрокаОС.НачислятьАмортизациюНУ тогда
			СтрокаСообщения = "(НУ) по ОС не может начисляться амортизация, если оно списано на затраты при принятии к учету";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения ,Заголовок,СтатусСообщения.Важное);
		КонецЕсли;

		Если НалУчет и ЗначениеЗаполнено(СтрокаОС.НакопленнаяАмортизацияНУ) тогда
			СтрокаСообщения = "(НУ) накопленная амортизация по  ОС должна быть равна 0, если оно списано на затраты при принятии к учету
			|(проводка не будет сформирована)";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения ,Заголовок,СтатусСообщения.Обычное);
		КонецЕсли;
		
		Если НалУчет и ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимостьНУ) тогда
			СтрокаСообщения = "(НУ) текущая стоимость ОС должна быть равна 0, если оно списано на затраты при принятии к учету
			|(проводка не будет сформирована)";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения ,Заголовок,СтатусСообщения.Обычное);
		КонецЕсли;

	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА ПО РЕГИСТРАМ

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ВыработкаОС
//
Процедура ДвижениеПоРегиструВыработкаОС(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)

	НаборДвижений   = ЭтотОбъект.Движения.ВыработкаОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	Для Каждого СтрокаОС Из ТабОС Цикл

		Если СтрокаОС.ВыработкаКоличествоБУ > 0
		   И ЗначениеЗаполнено(СтрокаОС.ПараметрВыработкиБУ) Тогда

			НоваяСтрока = ТаблицаДвижений.Добавить();

			НоваяСтрока.Период            = ЭтотОбъект.Дата;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ПараметрВыработки = СтрокаОС.ПараметрВыработкиБУ;
			НоваяСтрока.Количество        = СтрокаОС.ВыработкаКоличествоБУ;

		КонецЕсли;

	КонецЦикла;

	НаборДвижений.мПериод = ЭтотОбъект.Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ДобавитьДвижение();
	
КонецПроцедуры // ДвижениеПоРегиструВыработкаОС()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Первоначальные сведения об ОС бух.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ИнвентарныйНомер            = СтрокаОС.ИнвентарныйНомерРегл;
		НоваяСтрока.СпособПоступления			= СтрокаОС.СпособПоступленияРегл;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаОС.ПервоначальнаяСтоимостьБУ;
		НоваяСтрока.ПорядокПогашенияСтоимости   = СтрокаОС.ПорядокПогашенияСтоимостиБУ;
		НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизацииБУ;
		НоваяСтрока.ПараметрВыработки           = СтрокаОС.ПараметрВыработкиБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСБух()

// Процедура формирования движений по регистру Первоначальные сведения об ОС нал.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСНал(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.ПервоначальныеСведенияОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                                   = Макс(СтрокаОС.ДатаПринятияКУчетуРегл, '20020101000000');
		НоваяСтрока.Организация                              = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство                         = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимостьНУ                = СтрокаОС.ПервоначальнаяСтоимостьНУ;
		НоваяСтрока.ПорядокВключенияСтоимостиВСоставРасходов = СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ;
		НоваяСтрока.МетодНачисленияАмортизации               = СтрокаОС.МетодНачисленияАмортизацииНУ;
		НоваяСтрока.СтоимостьДо2002                          = СтрокаОС.СтоимостьДо2002НУ;
		НоваяСтрока.АмортизацияДо2002                        = СтрокаОС.АмортизацияДо2002НУ;
		НоваяСтрока.АмортизацияДо2009                        = СтрокаОС.АмортизацияДо2009;
		НоваяСтрока.ФактическийСрокИспользованияДо2009       = СтрокаОС.ФактическийСрокИспользованияДо2009;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСНал()

// Процедура формирования движений по регистру Первоначальные сведения об ОС нал.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСУСН(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = макс(СтрокаОС.ДатаПринятияКУчетуРегл,'20020101000000');
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимостьУСН  = СтрокаОС.ПервоначальнаяСтоимостьУСН;
		НоваяСтрока.СрокПолезногоИспользования  = СтрокаОС.СрокПолезногоИспользованияУСН;
		НоваяСтрока.СуммаНачисленнойАмортизации = СтрокаОС.СуммаНачисленнойАмортизацииУСН;
		НоваяСтрока.ДатаПриобретения            = СтрокаОС.ДатаПриобретенияУСН;
		НоваяСтрока.ПорядокВключенияСтоимостиВСоставРасходовУСН = СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовУСН;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Местонахождение ОС бух.
//
Процедура ДвижениеПоРегиструМестонахождениеОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.МестонахождениеОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТекПодразделение = СтруктураШапкиДокумента.ПодразделениеОрганизации;
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = ЭтотОбъект.Дата;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.МОЛ              = СтрокаОС.МОЛРегл;
		НоваяСтрока.Местонахождение  = ТекПодразделение;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Графики амортизации ОС бух.
//
Процедура ДвижениеПоРегиструГрафикиАмортизацииОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.ГрафикиАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.ГрафикАмортизацииБУ) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ЭтотОбъект.Дата;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ГрафикАмортизации = СтрокаОС.ГрафикАмортизацииБУ;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструГрафикиАмортизацииОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Начисление амортизации бух.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = ЭтотОбъект.Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период               = ?(ЭтотОбъект.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо, СтрокаОС.ДатаПринятияКУчетуРегл, ЭтотОбъект.Дата);
		НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииБух()

// Процедура формирования движений по регистру Начисление амортизации нал.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииНал(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = ЭтотОбъект.Движения.НачислениеАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		Если НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период               = ЭтотОбъект.Дата;
		НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюНУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ПараметрыАмортизации ОС бух.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		ДатаДвижения = СтрокаОС.ДатаПринятияКУчетуРегл;
		Если ЗначениеЗаполнено(СтрокаОС.ДатаПоследнейМодернизацииРегл) тогда
			ДатаДвижения = ?(СтрокаОС.ДатаПринятияКУчетуРегл=СтрокаОС.ДатаПоследнейМодернизацииРегл,СтрокаОС.ДатаПринятияКУчетуРегл+1 ,?(СтрокаОС.ДатаПринятияКУчетуРегл=СтрокаОС.ДатаПоследнейМодернизацииРегл,СтрокаОС.ДатаПринятияКУчетуРегл+1,СтрокаОС.ДатаПоследнейМодернизацииРегл));
		ИначеЕсли ЗначениеЗаполнено(СтрокаОС.ДатаПринятияКУчетуРегл) тогда
			ДатаДвижения = ?(СтрокаОС.ДатаПринятияКУчетуРегл=СтрокаОС.ДатаПринятияКУчетуРегл,СтрокаОС.ДатаПринятияКУчетуРегл+1 ,СтрокаОС.ДатаПринятияКУчетуРегл);
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = ДатаДвижения;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		
		НоваяСтрока.СрокПолезногоИспользования                  = СтрокаОС.СрокПолезногоИспользованияБУ;
		НоваяСтрока.ОбъемПродукцииРабот                         = СтрокаОС.ОбъемПродукцииРаботБУ;
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ) тогда
			НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокПолезногоИспользованияБУ;
		Иначе
			НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ) тогда
			НоваяСтрока.СтоимостьДляВычисленияАмортизации           = СтрокаОС.ТекущаяСтоимостьБУ;
		Иначе
			НоваяСтрока.СтоимостьДляВычисленияАмортизации           = СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ) тогда
			НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботБУ;
		Иначе
			НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
		КонецЕсли;
		НоваяСтрока.КоэффициентАмортизации                      = СтрокаОС.КоэффициентАмортизацииБУ;
		НоваяСтрока.КоэффициентУскорения                        = СтрокаОС.КоэффициентУскоренияБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииБух()

// Процедура формирования движений по регистру ПараметрыАмортизации ОС нал.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииНал(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.ПараметрыАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для каждого СтрокаОС Из ТабОС Цикл
		
		Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы Тогда 
			Продолжить;
		КонецЕсли;
		
		ДатаДвижения = СтрокаОС.ДатаПринятияКУчетуРегл + 1;
		Если ЗначениеЗаполнено(СтрокаОС.ДатаПоследнейМодернизацииРегл) Тогда
			ДатаДвижения = ?(СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл,
							 СтрокаОС.ДатаПринятияКУчетуРегл + 1,
							 ?(СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл,
							 СтрокаОС.ДатаПринятияКУчетуРегл + 1,
							 СтрокаОС.ДатаПоследнейМодернизацииРегл));
		КонецЕсли;
		ДатаДвижения = Макс(ДатаДвижения,'20020101000000');
		
		Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
			СрокПолезногоИспользованияНУ = 0;
			КоэффициентАмортизацииНУ = 0;
			СтоимостьДляВычисленияАмортизацииПР = СтрокаОС.ТекущаяСтоимостьПР;
		Иначе 
			СрокПолезногоИспользованияНУ = СтрокаОС.СрокПолезногоИспользованияНУ;
			КоэффициентАмортизацииНУ = СтрокаОС.КоэффициентАмортизацииНУ;
			СтоимостьДляВычисленияАмортизацииПР = СтрокаОС.СтоимостьДляВычисленияАмортизацииПР;
		КонецЕсли;	
			
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период						= ДатаДвижения;
		НоваяСтрока.Организация					= СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство			= СтрокаОС.ОсновноеСредство;
		НоваяСтрока.СрокПолезногоИспользования	= СрокПолезногоИспользованияНУ;
		НоваяСтрока.КоэффициентАмортизации		= КоэффициентАмортизацииНУ;
		НоваяСтрока.ПРДляВычисленияАмортизации  = СтоимостьДляВычисленияАмортизацииПР;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Состояния ОС бух.
//
Процедура ДвижениеПоРегиструСостоянияОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента,Отказ,Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Организация = &Организация
	|	И СостоянияОСОрганизаций.Состояние В(&СписокСостоянийОС)";
	
	СписокСостоянийОС = Новый СписокЗначений;
	СписокСостоянийОС.Добавить(Перечисления.СостоянияОС.ПринятоКУчету);
    	
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСостоянийОС",СписокСостоянийОС);
	
	Результат = Запрос.Выполнить().Выгрузить();
		
	НаборДвижений   = ЭтотОбъект.Движения.СостоянияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Результат.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.ДатаСостояния     = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Состояние         = Перечисления.СостоянияОС.ПринятоКУчету;
		
	КонецЦикла;
	
	//УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийОС(СтруктураШапкиДокумента.Организация, ТаблицаДвижений,Отказ,Заголовок);
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()

// Процедура формирования движений по регистру Состояния ОС бух.
//
Процедура ДвижениеПоРегиструОперацииОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.СобытияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Событие           = СтрокаОС.СостояниеПринятияКУчетуРегл;
		НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаПринятияКУчетуРегл;
		НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаПринятияКУчетуРегл;
		
		Если ЗначениеЗаполнено(СтрокаОС.ДатаПоследнейМодернизацииРегл) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаПринятияКУчетуРегл=СтрокаОС.ДатаПоследнейМодернизацииРегл,СтрокаОС.ДатаПринятияКУчетуРегл+1 ,?(СтрокаОС.ДатаПринятияКУчетуРегл=СтрокаОС.ДатаПоследнейМодернизацииРегл,СтрокаОС.ДатаПринятияКУчетуРегл+1,СтрокаОС.ДатаПоследнейМодернизацииРегл));
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Событие           = СтрокаОС.СостояниеМодернизацииРегл;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаМодернизацииРегл;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаМодернизацииРегл;
			
			Если НЕ (СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") И СтруктураШапкиДокумента.ОрганизацияПрименяетУСН) Тогда
				НоваяСтрока.СуммаЗатратБУ     = СтрокаОС.СуммаПоследнейМодернизацииБУ;
				НоваяСтрока.СуммаЗатратНУ     = СтрокаОС.СуммаПоследнейМодернизацииНУ;
			КонецЕсли;	
							
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()
////////////////////////////////////////////////////////////////////////////////

Процедура ДвижениеПоРегиструСпособыОтраженияБух	     (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = ЭтотОбъект.Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету
			И НЕ СтрокаОС.НачислятьАмортизациюНУ Тогда
			Продолжить;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАмортизации) тогда
			Продолжить;
		КонецЕслИ;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтруктураШапкиДокумента.Дата;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизации;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру СчетаУчета ОС бух.
//
Процедура ДвижениеПоРегиструСчетовУчетаОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Этотобъект.Движения.СчетаБухгалтерскогоУчетаОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период     		  = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета         = СтрокаОС.СчетУчетаБУ;
		НоваяСтрока.СчетНачисленияАмортизации = СтрокаОС.СчетАмортизацииБУ;
		
	КонецЦикла;
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСчетовУчетаОСБух()

// Процедура формирования движений по регистру Спец. коэф. амортизации ОС нал.
//
Процедура ДвижениеПоРегиструСпецКоэффициентНал(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			  И СтрокаОС.СпециальныйКоэффициентНУ > 0 Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период                 = СтруктураШапкиДокумента.Дата;
	 		НоваяСтрока.Активность             = Истина;
			НоваяСтрока.ОсновноеСредство       = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация            = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.СпециальныйКоэффициент = СтрокаОС.СпециальныйКоэффициентНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);

КонецПроцедуры // ДвижениеПоРегиструСпецКоэффициентНал()

// {УчетДоходовИРасходовИП
Процедура ДвижениеПоРегистрамУчетаРасходовПредпринимателей(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
	
	ТаблицаНаправлений = Новый ТаблицаЗначений;
	ТаблицаНаправлений.Колонки.Добавить("ОбъектУчета");
	ТаблицаНаправлений.Колонки.Добавить("НаправлениеАмортизации");
	//ТаблицаНаправлений.Колонки.Добавить("СчетАмортизации");
	ТаблицаНаправлений.Колонки.Добавить("СчетНачисленияАмортизации");
	//ТаблицаНаправлений.Колонки.Добавить("СчетАмортизацииНУ");
	ТаблицаНаправлений.Колонки.Добавить("ИмяСубконто");
	//ТаблицаНаправлений.Колонки.Добавить("НакопленнаяАмортизацияНУ");
	ТаблицаНаправлений.Колонки.Добавить("СуммаАмортизации");
	ТаблицаНаправлений.Колонки.Добавить("РасчетныйДокумент");
	ТаблицаНаправлений.Колонки.Добавить("ДокументОплаты");
	ТаблицаНаправлений.Колонки.Добавить("РеквизитыДокументаОплаты");
	//ТаблицаНаправлений.Колонки.Добавить("Сумма");
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		НоваяСтрока = ЭтотОбъект.Движения.ИПМПЗ.ДобавитьПриход();
		НоваяСтрока.Активность                	= Истина;
		НоваяСтрока.Период						= СтруктураШапкиДокумента.Дата;
		НоваяСтрока.Регистратор					= ЭтотОбъект.Ссылка;
		НоваяСтрока.ХарактерДеятельности		= ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(,,,, мУчетнаяПолитика);
		НоваяСтрока.НоменклатурнаяГруппа		= ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации(Ложь, СтрокаОС.ОсновноеСредство, , Перечисления.ВидыМПЗ.ОС, мУчетнаяПолитика);
		НоваяСтрока.Номенклатура				= СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация					= СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ВидМПЗ						= Перечисления.ВидыМПЗ.ОС;
		НоваяСтрока.Партия						= ЭтотОбъект.Ссылка;
		НоваяСтрока.ДокументОплаты				= ЭтотОбъект.Ссылка;
		НоваяСтрока.РеквизитыДокументаОплаты	= СтрокаОС.РеквизитыДокументаОплаты;
		НоваяСтрока.Сумма						= СтрокаОС.ПервоначальнаяСтоимостьНУ;
		
		Направление = ТаблицаНаправлений.Добавить();
		Направление.ОбъектУчета = СтрокаОС.ОсновноеСредство;
		Направление.РасчетныйДокумент = ЭтотОбъект.Ссылка;
		Направление.ДокументОплаты = ЭтотОбъект.Ссылка;
		Направление.РеквизитыДокументаОплаты = СтрокаОС.РеквизитыДокументаОплаты;
		Направление.НаправлениеАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизации;
		Направление.СчетНачисленияАмортизации = СтрокаОС.СчетАмортизацииБУ;
		//Направление.Сумма = СтрокаОС.НакопленнаяАмортизацияНУ;
		Направление.СуммаАмортизации = СтрокаОС.НакопленнаяАмортизацияНУ;
	КонецЦикла;
	
	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект,,, ТаблицаНаправлений, СтруктураШапкиДокумента, "");
	ДоходыИРасходыПредпринимателя.ОтражениеАмортизации(ЭтотОбъект, СтруктураШапкиДокумента, ТабЗатрат, мУчетнаяПолитика);
	
КонецПроцедуры
// }УчетДоходовИРасходовИП

////////////////////////////////////////////////////////////////////////////////
// Процедура формирование проводок.
//
Процедура ФормированиеПроводокБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		И НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Возврат; // Проводки не формируются.
	КонецЕсли;
	
	Операция = ЭтотОбъект.Движения.Хозрасчетный;
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		ОтражатьОСВБухгалтерскомУчете = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
		
		Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету Тогда
			//Проводки БУ не формируются
			ОтражатьОСВБухгалтерскомУчете = Ложь;			
		КонецЕсли;
		
		СуммаПроводки = СтрокаОС.ТекущаяСтоимостьБУ;
		
		Если ЗначениеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
			
			// Ввод балансовой стоимости ОС.
			Проводка = Операция.Добавить();
			Проводка.Период      = ЭтотОбъект.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = СодержаниеПроводки;
			Если ОтражатьОСВБухгалтерскомУчете Тогда
				Проводка.Сумма       = СуммаПроводки;
			КонецЕсли;
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				Если СтрокаОС.СчетУчетаБУ.НалоговыйУчет Тогда
					Проводка.СуммаНУДт       = СтрокаОС.ТекущаяСтоимостьНУ;
					Если СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
						Проводка.СуммаПРДт       = СтрокаОС.ТекущаяСтоимостьПР;
						ТекущаяСтоимостьВР = СтрокаОС.ТекущаяСтоимостьБУ - СтрокаОС.ТекущаяСтоимостьНУ - СтрокаОС.ТекущаяСтоимостьПР;
						Проводка.СуммаВРДт       = ТекущаяСтоимостьВР;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Проводка.СчетДт = СтрокаОС.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОС.СчетАмортизацииБУ) Тогда
			
			Если СтрокаОС.НакопленнаяАмортизацияБУ = 0
				И СтрокаОС.НакопленнаяАмортизацияНУ = 0
				И СтрокаОС.НакопленнаяАмортизацияПР = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаПроводки = СтрокаОС.НакопленнаяАмортизацияБУ;
			
			Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
				
				// Ввод начисленной амортизации.
				Проводка = Операция.Добавить();
				Проводка.Период      = ЭтотОбъект.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = СодержаниеПроводки;
				Если ОтражатьОСВБухгалтерскомУчете Тогда
					Проводка.Сумма       = СуммаПроводки;
				КонецЕсли;
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					Если СтрокаОС.СчетАмортизацииБУ.НалоговыйУчет Тогда
						Проводка.СуммаНУКт       = СтрокаОС.НакопленнаяАмортизацияНУ;
						Если СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
							Проводка.СуммаПРКт       = СтрокаОС.НакопленнаяАмортизацияПР;
							НакопленнаяАмортизацияВР = СтрокаОС.НакопленнаяАмортизацияБУ - СтрокаОС.НакопленнаяАмортизацияНУ - СтрокаОС.НакопленнаяАмортизацияПР;
							Проводка.СуммаВРКт       = НакопленнаяАмортизацияВР;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
				Проводка.СчетКт = СтрокаОС.СчетАмортизацииБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Кт");
				
			ИначеЕсли СтрокаОс.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда
				
					// Ввод начисленного износа.
					Проводка = Операция.Добавить();
					Проводка.Период      = ЭтотОбъект.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = СодержаниеПроводки;
					Если ОтражатьОСВБухгалтерскомУчете Тогда
						Проводка.Сумма       = СуммаПроводки;
					КонецЕсли;
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						Если СтрокаОС.СчетАмортизацииБУ.НалоговыйУчет Тогда
							Проводка.СуммаНУДт       = СтрокаОС.НакопленнаяАмортизацияНУ;
							Если СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
								Проводка.СуммаПРДт       = СтрокаОС.НакопленнаяАмортизацияПР;
								НакопленнаяАмортизацияВР = СтрокаОС.НакопленнаяАмортизацияБУ - СтрокаОС.НакопленнаяАмортизацияНУ - СтрокаОС.НакопленнаяАмортизацияПР;
								Проводка.СуммаВРДт       = НакопленнаяАмортизацияВР;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Проводка.СчетДт = СтрокаОС.СчетАмортизацииБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
					
					БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");
					
				Иначе
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						Если СтрокаОС.СчетАмортизацииБУ.НалоговыйУчет Тогда
							Если СтрокаОС.НакопленнаяАмортизацияНУ <> 0
								ИЛИ СтрокаОС.НакопленнаяАмортизацияПР <> 0 Тогда
								
								// Ввод начисленной амортизации только по НУ
								Проводка = Операция.Добавить();
								Проводка.Период      = ЭтотОбъект.Дата;
								Проводка.Организация = СтруктураШапкиДокумента.Организация;
								Проводка.Содержание  = СодержаниеПроводки;
								Проводка.СуммаНУКт       = СтрокаОС.НакопленнаяАмортизацияНУ;
								Если СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
									Проводка.СуммаПРКт       = СтрокаОС.НакопленнаяАмортизацияПР;
									НакопленнаяАмортизацияВР = СтрокаОС.НакопленнаяАмортизацияБУ - СтрокаОС.НакопленнаяАмортизацияНУ - СтрокаОС.НакопленнаяАмортизацияПР;
									Проводка.СуммаВРКт       = НакопленнаяАмортизацияВР;
								КонецЕсли;
								
								Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
								
								Проводка.СчетКт = СтрокаОС.СчетАмортизацииБУ;
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
								
								БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Кт");
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ФормированиеПроводокБух

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистрам.
//
Процедура ДвиженияПоРегистрам(ЭтотОбъект, СтруктураШапкиДокумента, Отказ,Заголовок)

    ПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(ЭтотОбъект.Организация, СтруктураШапкиДокумента.Дата+24*60*60);
	
	ТабОС = ЭтотОбъект.ОС.Выгрузить();

	Если СтруктураШапкиДокумента.ОтражатьПоСпециальнымРегистрам Тогда
		// Движение по регистрам общим для упр. и регл. учета
		ДвижениеПоРегиструВыработкаОС(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
		
		// Движение по регл. регистрам
		
		ДвижениеПоРегиструПервоначальныеСведенияОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСостоянияОСБух             (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента,Отказ,  Заголовок);
		ДвижениеПоРегиструМестонахождениеОСБух       (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструГрафикиАмортизацииОСБух    (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструНачислениеАмортизацииБух   (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок);
		ДвижениеПоРегиструПараметрыАмортизацииБух    (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСпособыОтраженияБух	     (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок);
		ДвижениеПоРегиструОперацииОСБух              (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСчетовУчетаОСБух           (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
		
		Если ОСН Тогда
			ДвижениеПоРегиструПервоначальныеСведенияОСНал(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
			ДвижениеПоРегиструНачислениеАмортизацииНал   (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок);
			ДвижениеПоРегиструПараметрыАмортизацииНал    (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
			ДвижениеПоРегиструСпецКоэффициентНал(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
		ИначеЕсли УСН Тогда
			ДвижениеПоРегиструПервоначальныеСведенияОСУСН(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
		ИначеЕсли Предприниматель Тогда
			ДвижениеПоРегиструПервоначальныеСведенияОСНал(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
			ДвижениеПоРегиструНачислениеАмортизацииНал   (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок);
			ДвижениеПоРегиструПараметрыАмортизацииНал    (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
			ДвижениеПоРегиструСпецКоэффициентНал(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);		
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ФормированиеПроводокБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
	КонецЕсли;
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда

		ДвижениеПоРегистрамУчетаРасходовПредпринимателей(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
		
	КонецЕсли;
	// }УчетДоходовИРасходовИП

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ОшибкаПроведенияПоСтроке(СтрокаОС, ТекстСообщения,Заголовок,Статус)
	НачалоСообщения = "- строка № "+СтрокаОС.НомерСтроки+", инв. номер ОС <"+СтрокаОС.ИнвентарныйНомерРегл+"> : ";
	ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения+ТекстСообщения, ,Заголовок ,Статус)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//******************************************************************************

Процедура ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхПолей, ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти = "", ТаблицаУсловий = Неопределено, СтруктураОбязательныхПолейПодч = Неопределено, ИмяТабличнойЧастиПодч = Неопределено, ПредставлениеТабличнойЧастиПодч = "", ТаблицаУсловийПодч = Неопределено, Отступ = "")
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СтруктураШапкиДокумента.Ссылка);
	Если ТаблицаУсловий <> Неопределено Тогда
		Для Каждого Условие ИЗ ТаблицаУсловий Цикл
			Запрос.УстановитьПараметр(Условие.ИмяРеквизита, Условие.ЗначениеРеквизита);
		КонецЦикла;
	КонецЕсли;

	Запрос.Текст = "ВЫБРАТЬ
	|";
	
	Шаг = 0;
	Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		Шаг = Шаг + 1;
		Запрос.Текст = Запрос.Текст + "ВводНачальныхОстатков." + КлючЗначение.Ключ + ?(СтруктураОбязательныхПолей.Количество() = Шаг, "", ",") + "
		|";
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	               |ИЗ
	               |	Документ.ВводНачальныхОстатков." + ИмяТабличнойЧасти + " КАК ВводНачальныхОстатков
	               |ГДЕ
	               |	ВводНачальныхОстатков.Ссылка = &ТекущийДокумент
				   |";
	
	Если ТаблицаУсловий <> Неопределено Тогда
		Для Каждого Условие ИЗ ТаблицаУсловий Цикл
			Запрос.Текст = Запрос.Текст + "
			| " + Условие.УсловиеОбъединения + " ВводНачальныхОстатков." + Условие.ИмяРеквизита + " " + Условие.ВидСравнения +
			?(Условие.ВидСравнения = "В", "(", "") + " &" + Условие.ИмяРеквизита + ?(Условие.ВидСравнения = "В", ")", "") + "
			|";
		КонецЦикла;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Соберем данные о связанных таблицах
	Если ИмяТабличнойЧастиПодч <> Неопределено Тогда
		МетаданныеРеквизитыПодч = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧастиПодч].Реквизиты;
		ТаблицаПодч = ПолучитьПодчиненнуюТаблицу(Отказ, СтруктураОбязательныхПолейПодч, ИмяТабличнойЧастиПодч, МетаданныеРеквизитыПодч);
	КонецЕсли;
	
	//Обработка ситуации исключения № 1
	Если РезультатЗапроса.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		ИмяКолонкиНомерСтроки = "НомерСтрокиТЧ";
	Иначе
		ИмяКолонкиНомерСтроки = "НомерСтроки";
	КонецЕсли;
	
	Для Каждого СтрокаЗапроса ИЗ РезультатЗапроса Цикл
		Если ПредставлениеТабличнойЧасти = "" Тогда
			СтрокаНачалаСообщенияОбОшибке = Отступ + "В строке номер """+ СокрЛП(СтрокаЗапроса[ИмяКолонкиНомерСтроки]) +
			""" табличной части: ";	
		Иначе
			СтрокаНачалаСообщенияОбОшибке = Отступ + "В строке номер """+ СокрЛП(СтрокаЗапроса[ИмяКолонкиНомерСтроки]) +
			""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		КонецЕсли;
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			
			Значение = СтрокаЗапроса[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда 
				
				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					
					//Обработка ситуации исключения № 2
					Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
						Если ПредставлениеРеквизита = "Номенклатура" Тогда
							ПредставлениеРеквизита = "Капитальные вложения";
						КонецЕсли;
					КонецЕсли;
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
					
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;
					
				КонецЕсли;
				
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				
			КонецЕсли;
			
		КонецЦикла;
		
		//если есть сплиттованная таблица то ее проверку следует осуществлять параллельно с проверкой строки-основания таблицы-родителя
		Если ИмяТабличнойЧастиПодч <> Неопределено Тогда
			СтрокаНачалаСообщенияОбОшибкеПодч = "Подчиненная таблица """ + ПредставлениеТабличнойЧастиПодч + """." +
												"В строке номер """+ СокрЛП(СтрокаЗапроса[ИмяКолонкиНомерСтроки]) +
												""" табличной части: ";
			
			ПодчиненныеСтроки = ТаблицаПодч.НайтиСтроки(Новый Структура("Ключ", СтрокаЗапроса.Ключ));
			Для Каждого СтрокаПодчТаблицы Из ПодчиненныеСтроки Цикл
				Для Каждого КлючКолонки ИЗ СтруктураОбязательныхПолейПодч Цикл
					ЗначениеПодч = СтрокаПодчТаблицы[КлючКолонки.Ключ];
						
					Если НЕ ЗначениеЗаполнено(ЗначениеПодч) Тогда 
						ПредставлениеРеквизита = МетаданныеРеквизитыПодч[КлючКолонки.Ключ].Представление();
						СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
						ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибкеПодч + СтрокаСообщения, Отказ, Заголовок);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПодчиненнуюТаблицу(Отказ, СтруктураОбязательныхПолей, ИмяТабличнойЧасти, МетаданныеРеквизиты)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СтруктураШапкиДокумента.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	|";
	
	Шаг = 0;
	Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		Шаг = Шаг + 1;
		
		Если (КлючЗначение.Ключ = "Количество") И (ИмяТабличнойЧасти <> "Обороты") Тогда
			Запрос.УстановитьПараметр("мСписокВидовЦенностейУслуги", мСписокВидовЦенностейУслуги);
			Запрос.Текст = Запрос.Текст + "ВЫБОР 
			|		КОГДА ВводНачальныхОстатков.ВидЦенности В (&мСписокВидовЦенностейУслуги) ТОГДА
			|			NULL
			|		ИНАЧЕ ВводНачальныхОстатков.Количество
			|	КОНЕЦ КАК Количество";
			Запрос.Текст = Запрос.Текст + ?(СтруктураОбязательныхПолей.Количество() = Шаг, "", ",") + "
			|";
		Иначе
			
			Запрос.Текст = Запрос.Текст + "ВводНачальныхОстатков." + КлючЗначение.Ключ + ?(СтруктураОбязательныхПолей.Количество() = Шаг, "", ",") + "
			|";
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	               |ИЗ
	               |	Документ.ВводНачальныхОстатков." + ИмяТабличнойЧасти + " КАК ВводНачальныхОстатков
	               |ГДЕ
	               |	ВводНачальныхОстатков.Ссылка = &ТекущийДокумент
				   |";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

мТаблицаУсловий = Новый ТаблицаЗначений();
мТаблицаУсловий.Колонки.Добавить("ИмяРеквизита");
мТаблицаУсловий.Колонки.Добавить("ВидСравнения");
мТаблицаУсловий.Колонки.Добавить("ЗначениеРеквизита");
мТаблицаУсловий.Колонки.Добавить("УсловиеОбъединения");

мТаблицаУсловийПодчБезКоличества = Новый ТаблицаЗначений();
мТаблицаУсловийПодчБезКоличества.Колонки.Добавить("ИмяРеквизита");
мТаблицаУсловийПодчБезКоличества.Колонки.Добавить("ВидСравнения");
мТаблицаУсловийПодчБезКоличества.Колонки.Добавить("ЗначениеРеквизита");
мТаблицаУсловийПодчБезКоличества.Колонки.Добавить("УсловиеОбъединения");
НовоеУсловие = мТаблицаУсловийПодчБезКоличества.Добавить();
НовоеУсловие.ИмяРеквизита = "ВидЦенности";
НовоеУсловие.ВидСравнения = "В";
НовоеУсловие.УсловиеОбъединения = "И НЕ";
мСписокВидовЦенностейУслуги = Новый СписокЗначений();
мСписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
мСписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
мСписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ПредставительскиеРасходы);
мСписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
мСписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
НовоеУсловие.ЗначениеРеквизита = мСписокВидовЦенностейУслуги;

мСтруктураОбязательныхРеквизитовПодчКоличество = Новый Структура("Ключ, НомерСтрокиТЧ, Количество");
мПустаяСтруктураТЧ = Новый Структура("Ключ, НомерСтрокиТЧ");
мПустаяСтруктура = Новый Структура("Ключ, НомерСтроки");
