
Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

#Если Клиент Тогда

// Функция формирует табличный документ с печатными формами актов об обказании услуг
// для каждой строки табличной части
//
// Возвращаемое значение:
//  Табличный документ - печатные формы актов
//
Функция ПечатьАктовОбОказанииУслуг()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОказаниеУслуг.Ссылка.Номер,
	|	ОказаниеУслуг.Ссылка.Дата,
	|	ОказаниеУслуг.Ссылка.Организация,
	|	ОказаниеУслуг.Ссылка.Организация КАК Поставщик,
	// {ОбособленныеПодразделения
	|	ОказаниеУслуг.Ссылка.ПодразделениеОрганизации,
	// }ОбособленныеПодразделения
	|	ОказаниеУслуг.Ссылка.УчитыватьНДС,
	|	ОказаниеУслуг.Ссылка.СуммаВключаетНДС,
	|	ОказаниеУслуг.Ссылка.СтавкаНДС,
	|	ОказаниеУслуг.Ссылка.Номенклатура,
	|	ВЫБОР
	|		КОГДА (НЕ ОказаниеУслуг.Ссылка.Номенклатура.НаименованиеПолное ПОДОБНО """")
	|			ТОГДА ВЫРАЗИТЬ(ОказаниеУслуг.Ссылка.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		ИНАЧЕ ОказаниеУслуг.Ссылка.Номенклатура.Наименование
	|	КОНЕЦ КАК Товар,
	|	ОказаниеУслуг.Количество КАК Количество,
	|	ОказаниеУслуг.Ссылка.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОказаниеУслуг.НомерСтроки КАК НомерСтроки,
	|	ОказаниеУслуг.Контрагент КАК Получатель,
	|	ОказаниеУслуг.ДоговорКонтрагента,
	|	ОказаниеУслуг.Цена КАК Цена,
	|	ОказаниеУслуг.Сумма,
	|	ОказаниеУслуг.СуммаНДС
	|ИЗ
	|	Документ.ОказаниеУслуг.Контрагенты КАК ОказаниеУслуг
	|ГДЕ
	|	ОказаниеУслуг.Ссылка = &ТекущийДокумент
	|	И ОказаниеУслуг.Сумма > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОказаниеУслуг_Акты";

	Пока Выборка.Следующий() Цикл
		
		Макет = ПолучитьМакет("Акт");
		ОбластьМакета = Макет.ПолучитьОбласть("Акт");
		ОбластьМакета.Параметры.ТекстЗаголовка = "Акт № " + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка)+"/"+Выборка.НомерСтроки
	                          + " от " + Формат(Выборка.Дата, "ДФ='дд ММММ гггг'")+ " г.";;

		ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата), "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик 				= Выборка.Поставщик;

		ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Выборка.Получатель, Выборка.Дата), "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель = Выборка.Получатель;

		// Вывести табличную часть
		ОбластьМакета.Параметры.Заполнить(Выборка);
		ОбластьМакета.Параметры.НомерСтроки = 1;
		ОбластьМакета.Параметры.Товар = СокрЛП(Выборка.Товар);
		
		Сумма    = Выборка.Сумма;
		СуммаНДС = Выборка.СуммаНДС;

		ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);

		Если Выборка.УчитыватьНДС Тогда

			Если СуммаНДС <> 0 Тогда
				ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
				ОбластьМакета.Параметры.НДС      = ?(Выборка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
			Иначе
				ОбластьМакета.Параметры.ВсегоНДС = "-";
				ОбластьМакета.Параметры.НДС      = "Без налога (НДС)";
			КонецЕсли;

		КонецЕсли;

		СуммаКПрописи = Сумма + ?(Выборка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг 1, на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, мВалютаРегламентированногоУчета);
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, мВалютаРегламентированногоУчета);

		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции // ПечатьАктовОбОказанииУслуг()

// Функция создает табличный документ с ун. печатными формами счетов-фактур
//
// Параметры 
//
Функция ПечатьСчетовФактур()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойСчетФактура", Документы.СчетФактураВыданный.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОказаниеУслуг.Ссылка,
	|	ОказаниеУслуг.СчетФактура
	|ИЗ
	|	Документ.ОказаниеУслуг.Контрагенты КАК ОказаниеУслуг
	|ГДЕ
	|	ОказаниеУслуг.Ссылка = &ТекущийДокумент
	|	И ОказаниеУслуг.ВыданСФ = ИСТИНА
	|	И ОказаниеУслуг.СчетФактура <> &ПустойСчетФактура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОказаниеУслуг.НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОказаниеУслуг_СчетФактура283";
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектСФ = Выборка.СчетФактура.ПолучитьОбъект();
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Определим какую форму СФ будем печатать - встроенную или внешнюю
		Попытка
			СтруктураВнутреннихПечатныхФорм = ОбъектСФ.ПолучитьСтруктуруПечатныхФорм();
		Исключение
			СтруктураВнутреннихПечатныхФорм = Новый Структура;
		КонецПопытки;
		
		ДеревоМакетовПечати = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Выборка.СчетФактура, СтруктураВнутреннихПечатныхФорм);
		
		СтрокаКнопки = ДеревоМакетовПечати.Строки.Найти("Счет-фактура","Текст");
		
		Расшифровка = СтрокаКнопки.Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
			ТабДокументСФ = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Выборка.СчетФактура, Расшифровка);
		Иначе
			ДанныеДляПечати = ОбъектСФ.СобратьДанныеПоОказаниюУслуг(Выборка.Ссылка, "Контрагенты");
			Если ДанныеДляПечати = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДанныеДляПечати.ТабличнаяЧасть.ЗаполнитьЗначения(ДанныеДляПечати.СуммаВключаетНДС,"СуммаВключаетНДС");
			
			ТаблицаДатОплат = ОбъектСФ.ДатаНомерДокументовОплаты.Выгрузить();
			ТаблицаДатОплат.Свернуть("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента");
			СтрокиКУдалению = Новый массив();
			Для каждого СтрокаОплат Из ТаблицаДатОплат Цикл
				Если не ЗначениеЗаполнено(СтрокаОплат.ДатаПлатежноРасчетногоДокумента) 
					и ПустаяСтрока(СтрокаОплат.НомерПлатежноРасчетногоДокумента) Тогда
					СтрокиКУдалению.Добавить(СтрокаОплат);
				КонецЕсли; 
			КонецЦикла; 
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаДатОплат.Удалить(СтрокаКУдалению);
			КонецЦикла; 
			
			ДанныеДляПечати.Вставить("ТаблицаДатОплат", ТаблицаДатОплат);
			
			ТабДокументСФ = ОбъектСФ.ПечатьСчетаФактуры(ДанныеДляПечати);
		КонецЕсли;
		
		ТабДокумент.Вывести(ТабДокументСФ);
		
	КонецЦикла;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 13;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаФактуры()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Акты" Тогда
		ТабДокумент = ПечатьАктовОбОказанииУслуг();
		
	ИначеЕсли ИмяМакета = "СчетаФактуры" Тогда
		ТабДокумент = ПечатьСчетовФактур();
		Если ТабДокумент.ВысотаТаблицы = 0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Акты,СчетаФактуры", "Акты об оказании услуг", "Счета-фактуры");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура проведения подчиненных документов счет-фактура.
// Выбирает все счета-фактуры в которых в качестве документа
// основания указан текущий документ и перепроводит их.
//
Процедура ОбработкаПодчиненныхДокументовСчетФактура(Провести = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакПроведения", Не Провести);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СчетФактураВыданный.Ссылка
	               |ИЗ
	               |	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	               |ГДЕ
	               |	СчетФактураВыданный.Ссылка.Проведен = &ПризнакПроведения
	               |	И (НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления)
	               |	И СчетФактураВыданный.Ссылка.ДокументОснование = &ДокументОснование";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		ТекущийДокумент = СтрокаРезультата.Ссылка.ПолучитьОбъект();
		ТекущийДокумент.Проведен = Провести;
		ТекущийДокумент.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура СинхронизацияПометкиНаУдалениеУПодчиненныхСчетовФактур(ПометитьНаУдаление = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакУдаления", Не ПометитьНаУдаление);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СчетФактураВыданный.Ссылка
	               |ИЗ
	               |	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	               |ГДЕ
	               |	СчетФактураВыданный.Ссылка.ПометкаУдаления = &ПризнакУдаления
	               |	И СчетФактураВыданный.Ссылка.ДокументОснование = &ДокументОснование";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		ТекущийДокумент = СтрокаРезультата.Ссылка.ПолучитьОбъект();
		ТекущийДокумент.Проведен = ?(ПометитьНаУдаление, Ложь, ТекущийДокумент.Проведен);
		ТекущийДокумент.ПометкаУдаления = ПометитьНаУдаление;
		ТекущийДокумент.Записать();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоНачислениям - результат запроса по табличной части "Контрагенты",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуНачислений(РезультатЗапросаПоНачислениям, СтруктураШапкиДокумента)

	ТаблицаНачислений = РезультатЗапросаПоНачислениям.Выгрузить();

	ТаблицаНачислений.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	Для каждого СтрокаТаблицы Из ТаблицаНачислений Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
								  ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;

	Возврат ТаблицаНачислений;

КонецФункции // ПодготовитьТаблицуНачислений()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,СчетДоходов");
	СтруктураОбязательныхПолей.Вставить("Номенклатура", "Не заполнено значение реквизита ""Услуга""!");
	
	Если СтруктураШапкиДокумента.РазрешитьУчетУслугБезПлановыхЦен Тогда
		СтруктураОбязательныхПолей.Вставить("СчетРасходов");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПоРеализации");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверим вид деятельности
	Если НЕ НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтруктураШапкиДокумента.СчетДоходов) = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтруктураШапкиДокумента.СчетРасходов) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Счета доходов и расходов для бухгалтерского учета относятся к разным видам деятельности!", Отказ, Заголовок);
	КонецЕсли;
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя 
		И Не СтруктураШапкиДокумента.СчетаСНоменклатурнымиГруппами.Найти(СтруктураШапкиДокумента.СчетДоходов) = Неопределено 
		И Не ЗначениеЗаполнено(СтруктураШапкиДокумента.Субконто) 
		Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не заполнено значение реквизита ""Субконто""!", Отказ, Заголовок);
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Контрагенты".
//
// Параметры:
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиКонтрагенты(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Контрагент, ДоговорКонтрагента, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам,Сумма");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Контрагенты",СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если НЕ Отказ Тогда
		
		// Проверим вид взаиморасчетов
		Для Каждого Строка Из Контрагенты Цикл
			Если Строка.ДоговорКонтрагента.ВидВзаиморасчетов<>ВидВзаиморасчетов Тогда
				Сообщить("Вид взаиморасчетов по договору """+Строка.ДоговорКонтрагента+""" ("+Строка.ДоговорКонтрагента.ВидВзаиморасчетов+")
						|не совпадает с установленным в документе (строка "+Строка.НомерСтроки+")!", СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;

		// Проверим дубли строк
		ТаблицаДляПроверки = Контрагенты.Выгрузить(, "Контрагент,ДоговорКонтрагента");
		ТаблицаДляПроверки.Колонки.Добавить("КоличествоСтрок");
		ТаблицаДляПроверки.ЗаполнитьЗначения(1, "КоличествоСтрок");
		ТаблицаДляПроверки.Свернуть("Контрагент,ДоговорКонтрагента", "КоличествоСтрок");
		Для Каждого СтрокаТаблицы Из ТаблицаДляПроверки Цикл
			Если СтрокаТаблицы.КоличествоСтрок>1 И ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) И ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
				ТекстОшибки = "Строка с контрагентом "+СтрокаТаблицы.Контрагент+" и договором "+СтрокаТаблицы.ДоговорКонтрагента+" указана повторно (строки ";
				МассивСтрок = Контрагенты.НайтиСтроки(Новый Структура("Контрагент,ДоговорКонтрагента",
								СтрокаТаблицы.Контрагент, СтрокаТаблицы.ДоговорКонтрагента));
				Для каждого Строка Из МассивСтрок Цикл
					ТекстОшибки = ТекстОшибки+Строка.НомерСтроки+",";
				КонецЦикла;
				ТекстОшибки = Лев(ТекстОшибки, СтрДлина(ТекстОшибки)-1);
				ТекстОшибки = ТекстОшибки + ")!";
				
				Сообщить(ТекстОшибки, СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиКонтрагенты()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаНачислений, ТаблицаВзаиморасчетов, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаНачислений, Движения, Отказ);
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда

		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СчетОтнесенияНДС = ПланыСчетов.Хозрасчетный.НДС;
		
		ТаблицаВзаиморасчетовДляНДС = ТаблицаВзаиморасчетов.СкопироватьКолонки();
		
		Для Каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
			Если СтрокаВзаиморасчетов.ДокументРасчетов <> СтруктураШапкиДокумента.Ссылка Тогда
				СтрокаВзаиморасчетовДляНДС = ТаблицаВзаиморасчетовДляНДС.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетовДляНДС, СтрокаВзаиморасчетов);
			КонецЕсли;
		КонецЦикла;		
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаНачислений, Движения, Отказ, СчетОтнесенияНДС, ТаблицаВзаиморасчетовДляНДС);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистру "РеализацияУслуг"
//
Процедура ДвиженияПоРегиструРеализацияУслуг(СтруктураШапкиДокумента, ДатаДока, ТаблицаНачислений)
	
	Если НЕ СтруктураШапкиДокумента.РазрешитьУчетУслугБезПлановыхЦен
	 ИЛИ Лев(СтруктураШапкиДокумента.СчетРасходов.Код, 2) = "91"
	Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРеализацияУслуг = Движения["РеализацияУслуг"];
	
	СтрокаДвижения                       = ДвиженияРеализацияУслуг.Добавить();
	СтрокаДвижения.Период                = ДатаДока;
	СтрокаДвижения.Организация           = СтруктураШапкиДокумента.Организация;
	СтрокаДвижения.СчетРасходов          = СтруктураШапкиДокумента.СчетРасходов;
	СтрокаДвижения.НоменклатурнаяГруппа  = СтруктураШапкиДокумента.Субконто;
	// {ОбособленныеПодразделения
	СтрокаДвижения.Подразделение         = СтруктураШапкиДокумента.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	СтрокаДвижения.Сумма                 = ТаблицаНачислений.Итог("СуммаБезНДС");
	
КонецПроцедуры

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаНачислений, Отказ, Заголовок)
	
	Перем ТаблицаВзаиморасчетовСводная;
	
	Проводки = Движения.Хозрасчетный;
	
	ДатаДока = СтруктураШапкиДокумента.Дата;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНачислений Цикл
		
		Если СтрокаТаблицы.Сумма=0 Тогда
			Продолжить;
		КонецЕсли;
		
		// I. Зачет аванса контрагента
		
		// Дополним структуру шапки документа данными для зачета аванса
		КопияСтруктурыШапкиДокумента = Новый Структура("Ссылка,ВидДокумента,Дата,Организация,ПодразделениеОрганизации,СпособЗачетаАвансов,
										|ВалютаРегламентированногоУчета,ОтражатьВНалоговомУчете,ПрименениеПБУ18,ОрганизацияПрименяетУСН");
		ЗаполнитьЗначенияСвойств(КопияСтруктурыШапкиДокумента, СтруктураШапкиДокумента);
		КопияСтруктурыШапкиДокумента.Вставить("Контрагент", СтрокаТаблицы.Контрагент);
		КопияСтруктурыШапкиДокумента.Вставить("ДоговорКонтрагента", СтрокаТаблицы.ДоговорКонтрагента);
		КопияСтруктурыШапкиДокумента.Вставить("ВидДоговора", СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора);
		КопияСтруктурыШапкиДокумента.Вставить("ВалютаВзаиморасчетов", СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов);
		КопияСтруктурыШапкиДокумента.Вставить("РасчетыВУсловныхЕдиницах", СтрокаТаблицы.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах);
		КопияСтруктурыШапкиДокумента.Вставить("ВалютаДокумента", мВалютаРегламентированногоУчета);
		КопияСтруктурыШапкиДокумента.Вставить("СчетУчетаРасчетовСКонтрагентом", СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом);
		КопияСтруктурыШапкиДокумента.Вставить("СчетУчетаРасчетовПоАвансам", СтрокаТаблицы.СчетУчетаРасчетовПоАвансам);
		
		// Формируем таблицу начислений для зачета аванса
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(СтрокаТаблицы);
		ТаблицаНачисленийДляЗачетаАванса = ТаблицаНачислений.Скопировать(МассивСтрок);
		ТаблицыДокумента = Новый Структура("ТаблицаНачисленийДляЗачетаАванса", ТаблицаНачисленийДляЗачетаАванса);
		
		ТаблицаЗачетаАвансов = Новый ТаблицаЗначений;
		ТаблицаЗачетаАвансов.Колонки.Добавить("ДокументРасчетов", Новый ОписаниеТипов("ДокументСсылка.ОказаниеУслуг"));
		ТаблицаЗачетаАвансов.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
			КопияСтруктурыШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, Истина, Отказ, Заголовок);
			
		// Формируем таблицу ТаблицаВзаиморасчетовСводная
		Если ТаблицаВзаиморасчетовСводная = Неопределено Тогда
			ТаблицаВзаиморасчетовСводная = ТаблицаВзаиморасчетов.СкопироватьКолонки();	// при первом проходе создаем структуру
		КонецЕсли;
		Для Каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
			СтрокаВзаиморасчетовСводная = ТаблицаВзаиморасчетовСводная.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетовСводная, СтрокаВзаиморасчетов);
		КонецЦикла;

		// II. Взаиморасчеты с контрагентом
		
		Проводка = Проводки.Добавить();

		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма       = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",						СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",						СтрокаТаблицы.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",	СтруктураШапкиДокумента.Ссылка);

		Если СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда

			//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
			Проводка.ВалютаДт        = СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;

		КонецЕсли;

		Проводка.СчетКт = СтруктураШапкиДокумента.СчетДоходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,           СтруктураШапкиДокумента.Субконто);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтруктураШапкиДокумента.СтавкаНДС);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтруктураШапкиДокумента.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РеализуемыеАктивы", СтруктураШапкиДокумента.Номенклатура);
		Если Проводка.СчетКт.Количественный Тогда
			Проводка.КоличествоКт = СтрокаТаблицы.Количество;
		КОнецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
		Проводка.Содержание = "Реализация услуг";

		Если Проводка.СчетКт.Валютный Тогда
			//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			СуммаНУ = СтрокаТаблицы.Сумма;
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ - СтрокаТаблицы.НДС,Проводка.Сумма - СуммаНУ,Проводка.Сумма - СуммаНУ,,,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
			
		КонецЕсли;
		
		// III. НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС
			И СтрокаТаблицы.НДС > 0 Тогда
			
			Проводка = Проводки.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = СтрокаТаблицы.НДС;
			Проводка.Содержание  = "Реализация услуг";
			
			Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаНДСПоРеализации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,           СтруктураШапкиДокумента.Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтруктураШапкиДокумента.СтавкаНДС);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РеализуемыеАктивы", СтруктураШапкиДокумента.Номенклатура);

			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет",Перечисления.ВидыПлатежейВГосБюджет.Налог);

		КонецЕсли;
		
	КонецЦикла;
	
	// {УчетДоходовИРасходовИП
	// Отражение в налоговом учете предпринимателя
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	ДоходыИРасходыПредпринимателя.ОказаниеУслуг(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, ТаблицаНачислений, "Субконто", "СчетРасходов");
	ДоходыИРасходыПредпринимателя.ЗачетОплатыПокупателя(ЭтотОбъект, СтруктураШапкиДокумента, Движения.ИПМПЗОтгруженные.Выгрузить(), ТаблицаВзаиморасчетов);
	// }УчетДоходовИРасходовИП
		
	
	// Движения по подсистеме УСН.
	ДвиженияПоРегистрамУСНРегл(СтруктураШапкиДокумента, ТаблицаВзаиморасчетовСводная, Отказ, Заголовок);
	
	// V. Движения регистров подсистемы НДС
	ТаблицаНачисленийДляНДС = ТаблицаНачислений.Скопировать(Новый Структура("ВыданСФ", Истина));
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаНачисленийДляНДС, ТаблицаВзаиморасчетовСводная, Отказ, Заголовок);
	
	// VI. РеализацияУслуг
	ДвиженияПоРегиструРеализацияУслуг(СтруктураШапкиДокумента, ДатаДока, ТаблицаНачислений);

КонецПроцедуры // ДвиженияПоРегистрам

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета УСН
Процедура ДвиженияПоРегистрамУСНРегл(СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, Отказ, Заголовок)
	
	Если НЕ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, , Новый Структура("ТаблицаРасчетов", ТаблицаВзаиморасчетов));
		
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ)
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("СпособЗачетаАвансов", Перечисления.СпособыЗачетаАвансов.Автоматически); // документ поддерживает только автоматический зачет авансов
	
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, СтруктураШапкиДокумента.Организация);
	Если Не Отказ Тогда
		РазрешитьУчетУслугБезПлановыхЦен = Не ПараметрыУчетнойПолитики.ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам;
	Иначе
		РазрешитьУчетУслугБезПлановыхЦен = Ложь;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("РазрешитьУчетУслугБезПлановыхЦен", РазрешитьУчетУслугБезПлановыхЦен);
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС, НачислятьНДСПоОтгрузке, УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ,ложь);
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ХозрасчетныйВидыСубконто.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|ГДЕ
		|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
		|	И ХозрасчетныйВидыСубконто.НомерСтроки = 1";
		
		СчетаСНоменклатурнымиГруппами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		СтруктураШапкиДокумента.Вставить("СчетаСНоменклатурнымиГруппами", СчетаСНоменклатурнымиГруппами);
	КонецЕсли;
	// }УчетДоходовИРасходовИП

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем СтруктураШапкиДокумента;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиКонтрагенты(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Контрагент",						"Контрагент");
	СтруктураПолей.Вставить("Покупатель",						"Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента",				"ДоговорКонтрагента");
	СтруктураПолей.Вставить("Сумма",							"Сумма");
	СтруктураПолей.Вставить("СуммаВал",							"Сумма");
	СтруктураПолей.Вставить("НДС",								"СуммаНДС");
	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом",	"СчетУчетаРасчетовСКонтрагентом");
	СтруктураПолей.Вставить("СчетУчетаРасчетовПоАвансам",		"СчетУчетаРасчетовПоАвансам");
	СтруктураПолей.Вставить("ВыданСФ",							"ВыданСФ");
	СтруктураПолей.Вставить("СчетФактура",						"СчетФактура");
	СтруктураПолей.Вставить("СтавкаНДС",						"Ссылка.СтавкаНДС");
	СтруктураПолей.Вставить("СчетДоходов",						"Ссылка.СчетДоходов");
	СтруктураПолей.Вставить("СчетРасходов",						"Ссылка.СчетРасходов");
	СтруктураПолей.Вставить("Номенклатура",						"Ссылка.Номенклатура");
	СтруктураПолей.Вставить("Количество",						"Количество");
	СтруктураПолей.Вставить("Субконто",							"Ссылка.Субконто");

	РезультатЗапросаПоНачислениям	= ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Контрагенты", СтруктураПолей);
	ТаблицаНачислений				= ПодготовитьТаблицуНачислений(РезультатЗапросаПоНачислениям, СтруктураШапкиДокумента);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаНачислений, СтруктураШапкиДокумента, Истина);

	Если Не Отказ Тогда
		ОбработкаПодчиненныхДокументовСчетФактура();
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаНачислений, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ОбработкаПодчиненныхДокументовСчетФактура(Ложь);
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Контрагенты");
	
	СинхронизацияПометкиНаУдалениеУПодчиненныхСчетовФактур(ПометкаУдаления);
КонецПроцедуры // ПередЗаписью

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
