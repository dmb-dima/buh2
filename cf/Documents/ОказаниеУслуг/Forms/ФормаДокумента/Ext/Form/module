////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ОткрыватьНастройкуДвижений;

// Хранит список видов договоров, доступных для данного документа
Перем мСписокВидовДоговоров; 

// Хранит список счетов-фактур, сформированных перед записью документа
Перем мМассивСформированныхСФ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Контрагенты,ЭлементыФормы.КоманднаяПанельКонтрагенты.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость элементов формы
//
Процедура УстановитьВидимость()
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость = ПоказыватьВДокументахСчетаУчета;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаФактуры.Видимость = УчитыватьНДС;

	// Колонки налога показываем только тогда, когда его учитываем.
	ЭлементыФормы.УчитыватьНДС.Заголовок = ?(УчитыватьНДС, "Учитывать НДС:", "Учитывать НДС");
	ЭлементыФормы.СуммаВключаетНДС.Видимость = УчитыватьНДС;
	ЭлементыФормы.СтавкаНДС.Видимость = УчитыватьНДС;
	ЭлементыФормы.НадписьСчетУчетаНДСПоРеализации.Видимость = УчитыватьНДС;
	ЭлементыФормы.СчетУчетаНДСПоРеализации.Видимость = УчитыватьНДС;
	
	КолонкиКонтрагенты = ЭлементыФормы.Контрагенты.Колонки;
	КолонкиКонтрагенты.СчетУчетаРасчетовСКонтрагентом.Видимость = ПоказыватьВДокументахСчетаУчета;
	КолонкиКонтрагенты.СчетУчетаРасчетовПоАвансам.Видимость = ПоказыватьВДокументахСчетаУчета;
	КолонкиКонтрагенты.СуммаНДС.Видимость = УчитыватьНДС;
	
КонецПроцедуры

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Контрагенты"));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(Контрагенты.Итог("СуммаНДС"));
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;
	
	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;
	
	// Надпись про счета-фактуры
	ВыписаноСчетовФактур = 0;
	ВыписаноСчетовФактурНДС = 0;
	НайденныеСтроки = Контрагенты.НайтиСтроки(Новый Структура("ВыданСФ", Истина));
	Для Каждого Строка Из НайденныеСтроки Цикл
		ВыписаноСчетовФактур = ВыписаноСчетовФактур + Строка.Сумма + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, Строка.СуммаНДС, 0);
		ВыписаноСчетовФактурНДС = ВыписаноСчетовФактурНДС + Строка.СуммаНДС;
	КонецЦикла;
	ЭлементыФормы.НадписьСчетФактура.Заголовок = "Выписаны счета-фактуры на сумму "+ОбщегоНазначения.ФорматСумм(ВыписаноСчетовФактур, ДокументОбъект.ВалютаДокумента, "0")
		+ ", сумма НДС "+ОбщегоНазначения.ФорматСумм(ВыписаноСчетовФактурНДС, ДокументОбъект.ВалютаДокумента, "0");
	
КонецПроцедуры

// Процедура заполняет документ списком договоров по виду взаиморасчетов,
// указанному в шапке документа
//
Процедура ЗаполнитьПоВидуВзаиморасчетов()
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не указана организация, заполнение невозможно!", 60);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|	И ДоговорыКонтрагентов.ЭтоГруппа = ЛОЖЬ
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|	И ДоговорыКонтрагентов.ВидВзаиморасчетов = &ВидВзаиморасчетов
	|	И (ДоговорыКонтрагентов.СрокДействия = &ПустаяДата
	|			ИЛИ НАЧАЛОПЕРИОДА(ДоговорыКонтрагентов.СрокДействия, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(&ДатаСреза, МЕСЯЦ))";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВидВзаиморасчетов", ВидВзаиморасчетов);
	
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Если ТаблицаРезультатов.Количество()=0 Тогда
		Контрагенты.Очистить();
	Иначе
		Контрагенты.Загрузить(ТаблицаРезультатов);
	КонецЕсли;
	
	Для Каждого Строка Из Контрагенты Цикл
		ПриИзмененииДоговора(Строка);
	КонецЦикла;
	
КонецПроцедуры

// {ОбособленныеПодразделения
// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()
// }ОбособленныеПодразделения

// Процедура обрабатывает изменение контрагента в строке таб. части
//
Процедура ПриИзмененииКонтрагента(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(СтрокаТабличнойЧасти.ДоговорКонтрагента,
								СтрокаТабличнойЧасти.Контрагент, Организация,
								мСписокВидовДоговоров, Новый Структура("ВидВзаиморасчетов,ВалютаВзаиморасчетов",
															Новый Структура("ЗначениеОтбора", ВидВзаиморасчетов),
															Новый Структура("ЗначениеОтбора", мВалютаРегламентированногоУчета)));
	ПриИзмененииДоговора(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура обрабатывает изменение договора в строке таб. части
//
Процедура ПриИзмененииДоговора(СтрокаТабличнойЧасти, ЗадаватьВопросОПерезаполненииСчетовУчета=Ложь)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);
	
	ЗаполнятьСчетаРасчета  = Ложь; //Заполнять ли счета расчетов
	
	Если ПоказыватьВДокументахСчетаУчета И ЗадаватьВопросОПерезаполненииСчетовУчета Тогда
		
		СтруктураОбязательныхПолей = Новый Структура;
		СтруктураНеОбязательныхПолей = Новый Структура;
		
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетовПокупателя);
		
		БухгалтерскийУчет.ПроверитьНеобходимостьПерезаполненияСчетовУчета(СтрокаТабличнойЧасти, СтруктураОбязательныхПолей,СтруктураНеОбязательныхПолей, ЗадаватьВопросОПерезаполненииСчетовУчета, ЗаполнятьСчетаРасчета);
		
		Если ЗадаватьВопросОПерезаполненииСчетовУчета Тогда
			
			Ответ = Вопрос("Установить счета учета в соответствии со значениями по умолчанию?", 
			РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета при смене договора");
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				ЗаполнятьСчетаРасчета = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЗаполнятьСчетаРасчета = Истина;
		
	КонецЕсли;

	Если ЗаполнятьСчетаРасчета Тогда
		СтрокаТабличнойЧасти.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		СтрокаТабличнойЧасти.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;
	
		ЗаполнитьЦенуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, 1);
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
										УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
	
КонецПроцедуры

// Процедура заполняет ставку НДС
//
Процедура ЗаполнитьСтавкуНДС()

	СтавкаНДС = Номенклатура.СтавкаНДС;
	
	//В документах реализации, для организаций применяющих УСН устанавливать ставку "БезНДС"
	Если НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)
	 ИЛИ НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетДоходов)
	Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	СтавкаНДСПриИзменении(ЭлементыФормы.СтавкаНДС);

КонецПроцедуры // ЗаполнитьСтавкуНДС()

// Процедура заполняет цену в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура ЗаполнитьЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект)

	ТипЦен = СтрокаТабличнойЧасти.ДоговорКонтрагента.ТипЦен;
	
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда 

		СтрокаТабличнойЧасти.Цена = 0;

	Иначе
		// из регистра
		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ДокументОбъект.Номенклатура,
		                            ТипЦен, ДокументОбъект.Дата,
		                            ДокументОбъект.ВалютаДокумента, 1, 1);

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
						ТипЦен.ЦенаВключаетНДС,
						ДокументОбъект.УчитыватьНДС, 
						ДокументОбъект.СуммаВключаетНДС, 
						УчетНДС.ПолучитьСтавкуНДС(ДокументОбъект.СтавкаНДС));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЕдиницуЦенуПродажиТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда 
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, ,ПараметрОбъектКопирования);
		
	КонецЕсли;
	
	// Поддержка механизма автонумерации
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("Контрагент");
	СтруктураКолонок.Вставить("ДоговорКонтрагента");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");

	// Установить ограничение - изменять видимость колонок для табличной части "Контрагенты".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Контрагенты.Колонки, СтруктураКолонок);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,ПодразделениеОрганизации,Номенклатура,ВидВзаиморасчетов,УчитыватьНДС,СтавкаНДС,СуммаВключаетНДС");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов);		
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	
	ОбновитьПодвал();
	
	СтраницаПанели  = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Контрагенты.Заголовок = "Контрагенты (" + ДокументОбъект.Контрагенты.Количество() + " поз.)";
	СтраницаПанели.СчетаФактуры.Заголовок = "Счета-фактуры (" + ДокументОбъект.Контрагенты.НайтиСтроки(Новый Структура("ВыданСФ", Истина)).Количество() + " поз.)";
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СформироватьСчетаФактурыВыданныеДляСтрокДокумента();
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	ОбновитьСсылкиСчетовФактур();
	ОбработкаПодчиненныхДокументовСчетФактура(Проведен);
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, РЕАЛИЗУЮЩИЕ ФУНКЦИИ СОЗДАНИЯ СЧЕТОВ-ФАКТУР

// Процедура вызывается сразу же после записи документа.
// Выполняется сопоставление строк документа и соответствующих им
// выданных счетов - факутр. Результаты данного сопоставления
// фиксируются в строках документа, в реквизите "СчетФакутра"
//
Процедура СформироватьСчетаФактурыВыданныеДляСтрокДокумента(ТабЧасть = "")

	мМассивСформированныхСФ = Новый Массив;
	
	// В данной таблице содержится информация о том, какие счета-фактуры уже были
	// выписаны ранее на основании данных документов
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактур(Ссылка);
	Иначе
		ТаблицаСФ  = Новый ТаблицаЗначений();
		ТаблицаСФ.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
		ТаблицаСФ.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаСФ.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ТаблицаСФ.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
		ТаблицаСФ.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	ТаблицаСФ.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	
	СписокТабЧастей = Новый СписокЗначений;
	Если ПустаяСтрока(ТабЧасть) Тогда
		СписокТабЧастей.Добавить("Контрагенты");
	Иначе
		СписокТабЧастей.Добавить(ТабЧасть);
	КонецЕсли;  
	
	Для Каждого ТабЧасть Из СписокТабЧастей Цикл
		ТаблицаДокумента = Новый ТаблицаЗначений;
		ТаблицаДокумента.Колонки.Добавить("Контрагент");
		ТаблицаДокумента.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаДокумента.Колонки.Добавить("СчетФактура");
		ТаблицаДокумента.Колонки.Добавить("СуммаБезНДС");
		ТаблицаДокумента.Колонки.Добавить("НДС");
			
		// подготовим таблицу документа
		Для Каждого СтрокаДок Из ЭтотОбъект[ТабЧасть.Значение] Цикл
			Если не СтрокаДок.ВыданСФ Тогда
				// СФ не выдан.
				Продолжить;
			КонецЕсли; 
			Если СтрокаДок.Сумма=0 И СтрокаДок.СуммаНДС=0 Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТаблицыДок = ТаблицаДокумента.Добавить();
			СтрокаТаблицыДок.Контрагент	= СтрокаДок.Контрагент;
			СтрокаТаблицыДок.ДоговорКонтрагента	= СтрокаДок.ДоговорКонтрагента;
			СтрокаТаблицыДок.СчетФактура= СтрокаДок.СчетФактура;
			
			СтрокаТаблицыДок.СуммаБезНДС= СтрокаДок.Сумма - ?(СуммаВключаетНДС,СтрокаДок.СуммаНДС,0);
			СтрокаТаблицыДок.НДС		= СтрокаДок.СуммаНДС;
			
		КонецЦикла;
			
		// В данной таблице содержится информация о том, какие счета-фактуры необходимо выписать
		ТаблицаДокумента.Свернуть("Контрагент, ДоговорКонтрагента, СчетФактура", "СуммаБезНДС, НДС");// , СтавкаНДС
			
		Для Каждого СтрокаТаблицыДок Из ТаблицаДокумента Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицыДок.Контрагент)
			 или Не ЗначениеЗаполнено(СтрокаТаблицыДок.ДоговорКонтрагента) Тогда
			    // В строке документа не указаны параметры для создания счета-фактуры
				Продолжить;
			КонецЕсли;
			
			// Поиск существующего документа счет-фактура выданный
			ДокСФ = НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаТаблицыДок);
			
			Если ДокСФ = Неопределено Тогда
				// Если существующий счет-фактура не найден, нужно создать новый счет-фактуру
				ДокСФ = Документы.СчетФактураВыданный.СоздатьДокумент();
				
				Если ЗначениеЗаполнено(Ссылка) Тогда
					ДокСФ.ДокументыОснования.Добавить().ДокументОснование = Ссылка;
					ДокСФ.ДокументОснование = Ссылка;
				КонецЕсли; 
				
				ДокСФ.Дата = Дата;
				ДокСФ.Организация = Организация;
				ДокСФ.Контрагент  = СтрокаТаблицыДок.Контрагент;
				ДокСФ.ДоговорКонтрагента = СтрокаТаблицыДок.ДоговорКонтрагента;
				ДокСФ.ВидСчетаФактуры    = Перечисления.НДСВидСчетаФактуры.НаРеализацию;
				
				ДокСФ.Записать();
				
				Сообщить("Сформирован документ «"+СокрЛП(ДокСФ.Ссылка)+"» (контрагент «"+СокрЛП(СтрокаТаблицыДок.Контрагент)+"», с.-ф. № "+СокрЛП(ДокСФ.Номер)+" от "+Формат(ДокСФ.Дата, "ДФ=dd.MM.yyyy") +")."); 
				
				мМассивСформированныхСФ.Добавить(ДокСФ.Ссылка);
				
				// Этот новый счет-фактуру нужно зафиксировать в таблице счетов-фактур
				СтрокаСФ = ТаблицаСФ.Добавить();
				СтрокаСФ.Контрагент = СтрокаТаблицыДок.Контрагент;
				СтрокаСФ.ДоговорКонтрагента = СтрокаТаблицыДок.ДоговорКонтрагента;
				СтрокаСФ.Ссылка = ДокСФ.Ссылка;
				СтрокаСФ.Использован = Истина;
				
			Иначе
				// Информацию об этом счете-фактуре нужно обновить в таблице счетов-фактур
				СтрокаСФ = ТаблицаСФ.Найти(ДокСФ.Ссылка, "Ссылка");
				Если ЗначениеЗаполнено(Ссылка) 
					и ДокСФ.ДокументыОснования.Найти(Ссылка,"ДокументОснование") = Неопределено 
					Тогда
					ДокСФ.ДокументыОснования.Добавить().ДокументОснование = Ссылка;
				КонецЕсли; 
				
			КонецЕсли;
			
			Если ДокСФ.ПометкаУдаления Тогда
				ДокСФ.ПометкаУдаления = Ложь;
				мМассивСформированныхСФ.Добавить(ДокСФ.Ссылка);
			КонецЕсли; 
			
			Если ДокСФ.Модифицированность() Тогда
				ДокСФ.Записать();
			КонецЕсли; 
			
		КонецЦикла;
	
		// далее необходимо прописать ссылки на созданные счета-фактуры в строки документа
		Для Каждого СтрокаДок Из ЭтотОбъект[ТабЧасть.Значение] Цикл
			
			Если (не СтрокаДок.ВыданСФ) ИЛИ (СтрокаДок.Сумма=0 И СтрокаДок.СуммаНДС=0) тогда
				// Для строки не нужен счет-фактура
				Если ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
					СтрокаДок.СчетФактура = Неопределено;
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
			
			ДокСФ = НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаДок, Ложь);	
			Если ДокСФ <> Неопределено Тогда
				// Если есть счет-фактура - регистрируем его в строке табличной части
				Если не СтрокаДок.СчетФактура = ДокСФ.Ссылка Тогда
					Если ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
						Сообщить("Изменен счет-фактура по строке "+СтрокаДок.НомерСтроки+" """+ТабЧасть.Значение+""".",СтатусСообщения.Информация); 
					КонецЕсли; 
					СтрокаДок.СчетФактура = ДокСФ.Ссылка;
				КонецЕсли; 
			Иначе
				Если Не ЗначениеЗаполнено(СтрокаДок.Контрагент) Тогда
					Сообщить("В строке "+СтрокаДок.НомерСтроки+" """+ТабЧасть.Значение+""" "+
					?(Не ЗначениеЗаполнено(СтрокаДок.Контрагент),"не указан контрагент, ","")+
					" счет-фактура по строке не зарегистрирован!",СтатусСообщения.Важное);
				ИначеЕсли Не ЗначениеЗаполнено(СтрокаДок.ДоговорКонтрагента) Тогда
					Сообщить("В строке "+СтрокаДок.НомерСтроки+" """+ТабЧасть.Значение+""" "+
					?(Не ЗначениеЗаполнено(СтрокаДок.ДоговорКонтрагента),"не указан договор контрагента, ","")+
					" счет-фактура по строке не зарегистрирован!",СтатусСообщения.Важное);
				КонецЕсли;
					
				// Для строки не создан счет-фактура
				СтрокаДок.СчетФактура = Неопределено;
			КонецЕсли;
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры // СформироватьСчетаФактурыВыданныеДляСтрокДокумента()

// Формирует перечень документов счет-фактура выданный, введенных на 
// основании текущего документа.
//
Функция ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Ссылка.Контрагент КАК Контрагент,
	|	СчетФактураВыданный.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СчетФактураВыданный.Ссылка.Проведен,
	|	СчетФактураВыданный.Ссылка.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.Ссылка.Дата,
	|	ПометкаУдаления УБЫВ,
	|	Ссылка";
	
	РезТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат РезТаблица;
	
КонецФункции // ПолучитьТаблицуПодчиненныхСчетовФактур()

// Процедура вызывается сразу перед записью документа.
// выполняется поиск существующего счета-фактуры  по заданным 
// параметрам.
Функция НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаДокумента, УстановитьПризнакИспользования = Истина)
	
	ДокСФ = Неопределено;
	Если ЗначениеЗаполнено(СтрокаДокумента.СчетФактура)
		И Не ТаблицаСФ.Найти(СтрокаДокумента.СчетФактура,"Ссылка") = Неопределено Тогда
	    СтрокаСФ = ТаблицаСФ.Найти(СтрокаДокумента.СчетФактура,"Ссылка");
		
		Если (СтрокаСФ.Контрагент = СтрокаДокумента.Контрагент Или Не ЗначениеЗаполнено(СтрокаСФ.Контрагент))
			И (СтрокаСФ.ДоговорКонтрагента = СтрокаДокумента.ДоговорКонтрагента Или Не ЗначениеЗаполнено(СтрокаСФ.ДоговорКонтрагента)) Тогда
			// найден подходящий счет-фактура
			ДокСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
			Если ТаблицаСФ.Колонки.Найти("Использован") <> Неопределено И УстановитьПризнакИспользования Тогда
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
			Возврат ДокСФ;
		КонецЕсли;
	КонецЕсли; 
	
	Для Каждого СтрокаСФ Из ТаблицаСФ Цикл
		// Поиск существующего счета-фактуры выполняется по контрагенту и договору.
		Если (СтрокаСФ.Контрагент = СтрокаДокумента.Контрагент Или Не ЗначениеЗаполнено(СтрокаСФ.Контрагент))
			И (СтрокаСФ.ДоговорКонтрагента = СтрокаДокумента.ДоговорКонтрагента Или Не ЗначениеЗаполнено(СтрокаСФ.ДоговорКонтрагента)) Тогда
			// найден подходящий счет-фактура
			ДокСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
			Если ТаблицаСФ.Колонки.Найти("Использован") <> Неопределено И УстановитьПризнакИспользования Тогда
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокСФ;
		
КонецФункции // НайтиСчетФактуруВСписке()

// Процедура "просматривает" строки табличных частей документа.
// и для тех строк, в которых указан счет-фактура выданный,
// обновляет ссылку на текущий документ
// в этом счете-фактуре.
//
Процедура ОбновитьСсылкиСчетовФактур()

	СписокТабЧастей = Новый СписокЗначений;
	СписокТабЧастей.Добавить("Контрагенты");
	
	ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактур(Ссылка);
	ТаблицаСФ.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ТабЧасть Из СписокТабЧастей Цикл
		Для Каждого СтрокаДок Из ЭтотОбъект[ТабЧасть.Значение] Цикл
			Если СтрокаДок.ВыданСФ и НЕ СтрокаДок.СчетФактура.Пустая() тогда 
				ДокСФ = СтрокаДок.СчетФактура.ПолучитьОбъект();
				Если ДокСФ.ДокументыОснования.Найти(Ссылка,"ДокументОснование")= Неопределено Тогда
					// Необходимо модифицировать ссылку в счете-фактуре
					ДокСФ.ДокументыОснования.Добавить().ДокументОснование = Ссылка;
				КонецЕсли;
				ДокСФ.ОпределениеПараметровСчетаФактуры(ДокСФ);
				
				Если мМассивСформированныхСФ.Найти(СтрокаДок.СчетФактура) <> Неопределено Тогда
					// счет-фактура только что сформирован, заполним данные платежно-расчетных документов
					ДокСФ.ДатаНомерДокументовОплаты.Очистить();
					ДокСФ.ЗаполнитьДатуИНомерВходящегоДокумента();
				КонецЕсли;
				
				Если ДокСФ.Модифицированность() тогда
					ДокСФ.Записать();
				КонецЕсли;
				
				СтрокиСФ = ТаблицаСФ.НайтиСтроки(Новый Структура("Ссылка, Использован",СтрокаДок.СчетФактура,Ложь));
				Для каждого СтрокаТаблицыСФ Из СтрокиСФ  Цикл
					СтрокаТаблицыСФ.Использован = Истина;
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// удаляем незадействованные счета-фактуры
	Для Каждого СтрокаСчета Из ТаблицаСФ Цикл
		Если НЕ СтрокаСчета.Использован Тогда
			ТекСФ = СтрокаСчета.Ссылка.ПолучитьОбъект();
			//Проверим - только ли текущий документ зарегистрирован в счете-фактуре
			Если ТекСФ.ДокументыОснования.Количество()>1 Тогда
				//Удалим строки, относящиеся к текущему счету-фактуре
				СтрокаДок = ТекСФ.ДокументыОснования.Найти(Ссылка,"ДокументОснование");
				Если не СтрокаДок = неопределено Тогда
					ТекСФ.ДокументыОснования.удалить(СтрокаДок);
					ТекСФ.Записать();
					Сообщить("Из документа «"+СокрЛП(ТекСФ.Ссылка)+"» удалена ссылка на текущий документ 
					|(контрагент «"+СокрЛП(СтрокаСчета.Контрагент)+"», с.-ф. № <"+СокрЛП(ТекСФ.Номер)+"> от "+Формат(ТекСФ.Дата, "ДФ=dd.MM.yyyy")+")"); 
				КонецЕсли; 
			Иначе
				Если ТекСФ.ПометкаУдаления = Ложь Тогда
					ТекСФ.УстановитьПометкуУдаления(Истина);
					ТекСФ.Записать();
					Сообщить("Документ «"+СокрЛП(ТекСФ.Ссылка)+"» 
					|(контрагент «"+СокрЛП(СтрокаСчета.Контрагент)+"», с.-ф. № <"+СокрЛП(ТекСФ.Номер)+"> от "+Формат(ТекСФ.Дата, "ДФ=dd.MM.yyyy")+") не используется. 
					|Счет-фактура помечен на удаление."); 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры // ОбновитьСсылкиСчетовФактур()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" реквизита Организация.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	Для Каждого Строка Из Контрагенты Цикл
		Строка.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(Строка.ДоговорКонтрагента,
									Строка.Контрагент, Организация,
									мСписокВидовДоговоров, Новый Структура("ВидВзаиморасчетов,ВалютаВзаиморасчетов",
																Новый Структура("ЗначениеОтбора", ВидВзаиморасчетов),
																Новый Структура("ЗначениеОтбора", мВалютаРегламентированногоУчета)));
		ПриИзмененииДоговора(Строка);
	КонецЦикла;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// {ОбособленныеПодразделения
// Процедура - обработчик события "ПриИзменении" реквизита ПодразделениеОрганизации.
//
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры
// }ОбособленныеПодразделения

// Процедура - обработчик события "ПриИзменении" реквизита ВидВзаиморасчетов.
//
Процедура ВидВзаиморасчетовПриИзменении(Элемент)
	
	Для Каждого Строка Из Контрагенты Цикл
		Строка.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(Строка.ДоговорКонтрагента,
									Строка.Контрагент, Организация,
									мСписокВидовДоговоров, Новый Структура("ВидВзаиморасчетов,ВалютаВзаиморасчетов",
																Новый Структура("ЗначениеОтбора", ВидВзаиморасчетов),
																Новый Структура("ЗначениеОтбора", мВалютаРегламентированногоУчета)));
		ПриИзмененииДоговора(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" реквизита Номенклатура.
//
Процедура НоменклатураПриИзменении(Элемент)
	
	// заполним счета учета
	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура);
	СчетДоходов					= СчетаУчета.СчетДоходов;
	СчетРасходов				= СчетаУчета.СчетРасходов;
	СчетУчетаНДСПоРеализации	= СчетаУчета.СчетУчетаНДСПродажи;
	СчетДоходовПриИзменении(ЭлементыФормы.СчетДоходов);

	Если СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
		Субконто = Новый(СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
		Если ТипЗнч(Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			Субконто = Номенклатура.НоменклатурнаяГруппа;
			ЭлементыФормы.НадписьСубконто.Заголовок = "Номенклатурная группа";
		КонецЕсли;
	Иначе
		Субконто = Неопределено;
	КонецЕсли;
	
	// заполним ставку НДС
	ЗаполнитьСтавкуНДС();
	
	НеобходимоПересчитатьЦены = ЗначениеЗаполнено(Номенклатура) И Контрагенты.Количество()>0 И
		(Вопрос("Установить для выбранной услуги цены в документе в соответствии с типами цен, указанными в договорах?",
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да);
	
	// Рассчитать реквизиты табличной части.
	Если НеобходимоПересчитатьЦены Тогда
		Для Каждого СтрокаТабличнойЧасти Из Контрагенты Цикл
			ЗаполнитьЦенуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, 1);
			СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
											УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита Номенклатура.
//
Процедура НоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора(,Элемент,);

	ФормаВыбора.СправочникСписок.Отбор.Услуга.Использование	= Истина;
	ФормаВыбора.СправочникСписок.Отбор.Услуга.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбора.СправочникСписок.Отбор.Услуга.Значение		= Истина;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Услуга.Доступность = Ложь;
	
	ФормаВыбора.ПараметрТекущаяСтрока = Номенклатура;

	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" реквизита СтавкаНДС.
//
Процедура СтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	Для Каждого СтрокаТабличнойЧасти Из Контрагенты Цикл
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
										УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" реквизита УчитыватьНДС.
//
Процедура УчитыватьНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	Для Каждого СтрокаТабличнойЧасти Из Контрагенты Цикл
		Если НЕ УчитыватьНДС Тогда
			СтрокаТабличнойЧасти.ВыданСФ  = Ложь;	// снимаем флаг выписки СФ
		КонецЕсли;
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
										УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
	КонецЦикла;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" реквизита СуммаВключаетНДС.
//
Процедура СуммаВключаетНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	Для Каждого СтрокаТабличнойЧасти Из Контрагенты Цикл
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
										УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" счета.
//
Процедура СчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" реквизита СчетДоходов.
//
Процедура СчетДоходовПриИзменении(Элемент)

	Счет = Элемент.Значение;

	Если Счет.ВидыСубконто.Количество() > 0 Тогда
		Субконто = Новый(Счет.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
	Иначе
		Субконто = Неопределено;
	КонецЕсли;

	ЭлементыФормы.Субконто.Доступность = НЕ (НЕ ЗначениеЗаполнено(Счет) ИЛИ (Счет.ВидыСубконто.Количество() = 0));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ "Контрагенты"
 
Процедура КоманднаяПанельКонтрагентыЗаполнитьПоВидуВзаиморасчетов(Кнопка)

	Если Контрагенты.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		Контрагенты.Очистить();
	КонецЕсли;
	
	ЗаполнитьПоВидуВзаиморасчетов();
	
КонецПроцедуры

Процедура КоманднаяПанельКонтрагентыДействиеПодбор(Кнопка)

	Форма = Справочники.Контрагенты.ПолучитьФормуВыбора(, ЭлементыФормы.Контрагенты, Ссылка);
	Форма.ПараметрВыборГруппИЭлементов	= ИспользованиеГруппИЭлементов.Элементы;
	Форма.РежимВыбора					= Истина;
	Форма.ЗакрыватьПриВыборе			= Ложь;
	Форма.Открыть();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "Контрагенты"

Процедура КонтрагентыКонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагента(ЭлементыФормы.Контрагенты.ТекущиеДанные);
	
КонецПроцедуры

Процедура КонтрагентыДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент,
											ЭлементыФормы.Контрагенты.ТекущиеДанные.Контрагент, Элемент.Значение,
											мСписокВидовДоговоров, СтандартнаяОбработка,
											Новый Структура("ВидВзаиморасчетов,ВалютаВзаиморасчетов",
												Новый Структура("ЗначениеОтбора", ВидВзаиморасчетов),
												Новый Структура("ЗначениеОтбора", мВалютаРегламентированногоУчета)));
											
КонецПроцедуры

Процедура КонтрагентыДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора(ЭлементыФормы.Контрагенты.ТекущиеДанные, Истина);
	
КонецПроцедуры

Процедура КонтрагентыКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Контрагенты.ТекущиеДанные;
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, 1);
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
									УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));

КонецПроцедуры

Процедура КонтрагентыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Контрагенты.ТекущиеДанные;
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, 1);
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
									УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));

КонецПроцедуры

Процедура КонтрагентыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Контрагенты.ТекущиеДанные;
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, 1);
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
									УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
	
КонецПроцедуры

Процедура КонтрагентыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Контрагенты.Колонки.Всего.Видимость Тогда

		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));

	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТипВыбранногоЗначения = ТипЗнч(ВыбранноеЗначение);
	Если ТипВыбранногоЗначения = Тип("СправочникСсылка.Контрагенты") Тогда
		
		СтрокаТабличнойЧасти = Контрагенты.Добавить();
		СтрокаТабличнойЧасти.Контрагент = ВыбранноеЗначение;
		СтрокаТабличнойЧасти.Количество = 1;
		
		СтандартнаяОбработка = Ложь;
		
		ПриИзмененииКонтрагента(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ "СЧЕТА-ФАКТУРЫ"
 
Процедура КоманднаяПанельСчетаФактурыУстановитьФлажки(Кнопка)

	Для Каждого Строка Из Контрагенты Цикл
		Строка.ВыданСФ = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельСчетаФактурыСнятьФлажки(Кнопка)

	Для Каждого Строка Из Контрагенты Цикл
		Строка.ВыданСФ = Ложь;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "СЧЕТА-ФАКТУРЫ"

Процедура СчетаФактурыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.СчетаФактуры.Колонки.Всего.Видимость Тогда

		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));

	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

мСписокВидовДоговоров = Новый СписокЗначений;
мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
