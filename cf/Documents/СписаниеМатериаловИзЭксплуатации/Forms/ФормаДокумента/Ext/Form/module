////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

Перем мВалютаРегламентированногоУчета;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит текущую форму подбора номенклатуры
Перем мФормаПодбораНоменклатуры;

Перем ОткрыватьНастройкуДвижений;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Спецодежда,ЭлементыФормы.КоманднаяПанельСпецодежда.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Спецоснастка,ЭлементыФормы.КоманднаяПанельСпецоснастка.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ИнвентарьИХозяйственныеПринадлежности,ЭлементыФормы.КоманднаяПанельИнвентарьИХозяйственныеПринадлежности.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение реквизитов шапки документа значениями по умолчанию
//
Процедура ЗаполнитьДаннымиПоУмолчанию(ДокументОбъект)

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.СпособСписанияРасходов) Тогда
		ДокументОбъект.СпособСписанияРасходов = Перечисления.СпособыСписанияРасходов.ПоНазначениюИспользования;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДаннымиПоУмолчанию()
	
// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбораНоменклатуры, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Производит открывает форму подбора данных в табличные части документа
//
// Параметры:
//  Нет.
//
Процедура ДействиеПодбор()

	Перем Команда, Валюта;

	ЕстьЦена  = Истина;

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Команда = "ПодборВТабличнуюЧасть";

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокЗапросов);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);

	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер);

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, мФормаПодбораНоменклатуры);

КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, Количество, Цена;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура" , Номенклатура);
	ЗначениеВыбора.Свойство("Количество"   , Количество);
	ЗначениеВыбора.Свойство("Цена"         , Цена);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
		СтрокаТабличнойЧасти.Количество   = Количество;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти);
		
	КонецЕсли;

	АктивноеТабличноеПоле = ЭлементыФормы.Найти(ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя);
	
	АктивноеТабличноеПоле.ТекущаяСтрока  = СтрокаТабличнойЧасти;
	АктивноеТабличноеПоле.ТекущаяКолонка = АктивноеТабличноеПоле.Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Возвращает структуру параметров, необходимы для обработки
// выбора субконто.
//  
// Параметры:
//  Элемент      - элемент формы, в котором осуществляется выбор субконто
//  Учет         - строка - вид учета ("Бух" или "Нал"). Не обязательный
//                 параметр. Значение по умолчанию: "Бух"
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыНеобходимыеДляВыбораСубконто(Элемент, Учет = "Бух")

	// Если тип выбираемого субконто - Партия, то создадим 
	// структуру дополнительных параметров.
	Если Элемент.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения  Тогда
		СписокПараметров = Новый Структура;
		СписокПараметров.Вставить("Дата", Дата);
		СписокПараметров.Вставить("ЭтоНовыйДокумент",ЭтоНовый());
	    Если Учет = "Бух" Тогда
			СписокПараметров.Вставить("СчетУчета",    СчетДТ);
			СписокПараметров.Вставить("Номенклатура", УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Номенклатура", СубконтоДт1, СубконтоДт2, СубконтоДт3));
			СписокПараметров.Вставить("Склад",        УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Склады", СубконтоДт1, СубконтоДт2, СубконтоДт3));
		КонецЕсли; 
		
	Иначе // Тип выбираемого субконто - не Партия.
		СписокПараметров = Неопределено;
	КонецЕсли; 
	
	Возврат СписокПараметров;

КонецФункции // ПараметрыНеобходимыеДляВыбораСубконто()

// Функция проверяет возможность заполнения табличной части.
//
// Параметры:
//   Табличнаячасть - Табличная часть, возможность заполнения
//                 которой нужно проверить
//
// Возвращаемое значение:
//   Булево - положительный или отрицательный результат проверки
//
Функция ПроверитьВозможностьЗаполненияТабличнойЧасти(ТабличнаяЧасть)
	
	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе." , 60,);
		Возврат Ложь;
	КонецЕсли;
		
	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		Ответ = Вопрос("При заполнении табличная часть будет очищена.
		               |Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
					   
		Если НЕ (Ответ = КодВозвратаДиалога.Да) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьВозможностьЗаполненияТабличнойЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает отметку незаполненного поля ввода
//
// Параметры:
//  Элемент      - элемент формы, для которого нужно установить отметку 
//                 незаполненного
//  Отметка      - Булево, признак отметки незаполненного
//
Процедура УстановитьОтметкуНезаполненного(Элемент, Отметка)
	
	Элемент.АвтоОтметкаНезаполненного = Отметка;
	Элемент.АвтоВыборНезаполненного   = Отметка;
	Элемент.ОтметкаНезаполненного     = Отметка И НЕ ЗначениеЗаполнено(Элемент.Значение);
	
КонецПроцедуры // УстановитьОтметкуНезаполненного()

// Процедура управляет видимостью, доступностью и свойством "ТолькоПросмотр"
// элементов формы.
//
Процедура УстановитьВидимость()

	УСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	Предприниматель = ОбщегоНазначения.Предприниматель(Организация, Дата);
	
	КолонкиСпецодежда   = ЭлементыФормы.Спецодежда.Колонки;
	КолонкиСпецоснастка = ЭлементыФормы.Спецоснастка.Колонки;
	
	КолонкиСпецодежда.СчетПередачи.Видимость = ПоказыватьВДокументахСчетаУчета;
	
	КолонкиСпецоснастка.СчетПередачи.Видимость = ПоказыватьВДокументахСчетаУчета;
	
	ЭлементыФормы.ПанельСчетУчетаЗатрат.Видимость = (СпособСписанияРасходов = Перечисления.СпособыСписанияРасходов.ВДебетСчетаУказанногоВДокументе);	
	
	Для Ном = 1 по 3 Цикл

		Если (Ном <= СчетДт.ВидыСубконто.Количество()) 
		   И ЗначениеЗаполнено(СчетДт) Тогда
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Заголовок = Строка(СчетДт.ВидыСубконто[Ном-1].ВидСубконто);
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Видимость = Истина;
			ЭлементыФормы["СубконтоДт"+Ном].Видимость        = Истина;
		Иначе
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Видимость = Ложь;
			ЭлементыФормы["СубконтоДт"+Ном].Видимость        = Ложь;
		КонецЕсли;

	КонецЦикла;
	
	// Установим отметку незаполненного для поля ввода "Подразделение", если
	// заполнено табличное поле "Спецоснастка".
	УстановитьОтметкуНезаполненного(ЭлементыФормы.ПодразделениеОрганизации, (Спецоснастка.Количество() > 0));

КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	 
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,,ПараметрОбъектКопирования);
		ЗаполнитьДаннымиПоУмолчанию(ЭтотОбъект);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Спецодежда.Колонки, СтруктураКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Спецоснастка.Колонки, СтруктураКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ИнвентарьИХозяйственныеПринадлежности.Колонки, СтруктураКолонок);
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
	УстановитьВидимость();// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Спецодежда",								"Спецодежда");
	Страницы.Добавить("Спецоснастка",							"Спецоснастка");
	Страницы.Добавить("ИнвентарьИХозяйственныеПринадлежности",	"ИнвентарьИХозяйственныеПринадлежности");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,,ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница, Страницы);

	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	
	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Спецодежда.Заголовок = "Спецодежда (" + Спецодежда.Количество() + " поз.)";
	СтраницаПанели.Спецоснастка.Заголовок = "Спецоснастка (" + Спецоснастка.Количество() + " поз.)";
	СтраницаПанели.ИнвентарьИХозяйственныеПринадлежности.Заголовок = "Инвентарь и хозяйственные принадлежности (" + ИнвентарьИХозяйственныеПринадлежности.Количество() + " поз.)";
	
	// Установим отметку незаполненного для поля ввода "Подразделение", если
	// заполнено табличное поле "Спецоснастка".
	УстановитьОтметкуНезаполненного(ЭлементыФормы.ПодразделениеОрганизации, (Спецоснастка.Количество() > 0));
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧасть" Тогда
			
			АктивноеТабличноеПоле = ЭлементыФормы.Найти(ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя);
			ОбработкаПодбора(АктивноеТабличноеПоле.Значение, ЗначениеВыбора);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Спецодежда"
//
Процедура КоманднаяПанельСпецодеждаПодбор(Кнопка)
	
	ДействиеПодбор();
	
КонецПроцедуры // КоманднаяПанельСпецодеждаПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Спецоснастка"
//
Процедура КоманднаяПанельСпецоснасткаПодбор(Кнопка)
	
	ДействиеПодбор();
	
КонецПроцедуры // КоманднаяПанельСпецоснасткаПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Инвентарь и хозяйственные принадлежности"
//
Процедура КоманднаяПанельИнвентарьИХозяйственныеПринадлежностиПодбор(Кнопка)
	
	ДействиеПодбор();
	
КонецПроцедуры // КоманднаяПанельИнвентарьИХозяйственныеПринадлежностиПодбор()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры


// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()
 
// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Спецодежда"
//
Процедура КоманднаяПанельСпецодеждаЗаполнитьПоОстаткам(Кнопка)
	
	Если НЕ ПроверитьВозможностьЗаполненияТабличнойЧасти(Спецодежда) Тогда
		Возврат;
	КонецЕсли;
	
	Спецодежда.Очистить();
	
	СпецодеждаИСпецоснастка.ЗаполнитьСпецодеждуПоОстаткамВЭксплуатации(ЭтотОбъект, Спецодежда);
	
КонецПроцедуры // КоманднаяПанельСпецодеждаЗаполнитьПоОстаткам()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Спецодежда"
//
Процедура КоманднаяПанельСпецодеждаПоОстаткамСИстекшимСрокомПолезногоИспользования(Кнопка)
	
	Если НЕ ПроверитьВозможностьЗаполненияТабличнойЧасти(Спецодежда) Тогда
		Возврат;
	КонецЕсли;
	
	Спецодежда.Очистить();
	
	СпецодеждаИСпецоснастка.ЗаполнитьСпецодеждуПоОстаткамВЭксплуатации(ЭтотОбъект, Спецодежда, , Истина);
	
КонецПроцедуры // КоманднаяПанельСпецодеждаПоОстаткамСИстекшимСрокомПолезногоИспользования()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Спецоснастка"
//
Процедура КоманднаяПанельСпецоснасткаЗаполнитьПоОстаткам(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Предупреждение("Не указано подразделение организации!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьВозможностьЗаполненияТабличнойЧасти(Спецоснастка) Тогда
		Возврат;
	КонецЕсли;
	
	Спецоснастка.Очистить();
	
	СпецодеждаИСпецоснастка.ЗаполнитьСпецоснасткуПоОстаткамВЭксплуатации(ЭтотОбъект, Спецоснастка);
	
КонецПроцедуры // КоманднаяПанельСпецоснасткаЗаполнитьПоОстаткам()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Спецоснастка"
//
Процедура КоманднаяПанельСпецоснасткаПоОстаткамСИстекшимСрокомПолезногоИспользования(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Предупреждение("Не указано подразделение организации!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьВозможностьЗаполненияТабличнойЧасти(Спецоснастка) Тогда
		Возврат;
	КонецЕсли;
	
	Спецоснастка.Очистить();
	
	СпецодеждаИСпецоснастка.ЗаполнитьСпецоснасткуПоОстаткамВЭксплуатации(ЭтотОбъект, Спецоснастка, , Истина);
	
КонецПроцедуры // КоманднаяПанельСпецоснасткаПоОстаткамСИстекшимСрокомПолезногоИспользования()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Спецоснастка"
//
Процедура КоманднаяПанельИнвентарьИХозяйственныеПринадлежностиЗаполнитьПоОстаткам(Кнопка)
	
	Если ИнвентарьИХозяйственныеПринадлежности.Количество() > 0 Тогда
		
		Ответ = Вопрос("При заполнении табличная часть будет очищена.
		               |Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
					   
		Если НЕ (Ответ = КодВозвратаДиалога.Да) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ИнвентарьИХозяйственныеПринадлежности.Очистить();
	
	СпецодеждаИСпецоснастка.ЗаполнитьИнвентарьИХозяйственныеПринадлежностиПоОстаткамВЭксплуатации(ЭтотОбъект, ИнвентарьИХозяйственныеПринадлежности);
	
КонецПроцедуры // КоманднаяПанельИнвентарьИХозяйственныеПринадлежностиЗаполнитьПоОстаткам()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	УстановитьВидимость();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении реквизита Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	УстановитьВидимость();

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода 
// "СпособСписанияРасходов".
//
Процедура СпособСписанияРасходовПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СпособСписанияРасходовПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Счет"
//
Процедура СчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СчетДтОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "Счет".
//
Процедура СчетДтПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		СубконтоДт1, ЭлементыФормы.СубконтоДт1,
		СубконтоДт2, ЭлементыФормы.СубконтоДт2,
		СубконтоДт3, ЭлементыФормы.СубконтоДт3);
		
	УстановитьВидимость();
	
КонецПроцедуры // СчетДтПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода субконто.
//
Процедура СубконтоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокПараметров = ПараметрыНеобходимыеДляВыбораСубконто(Элемент, "Бух");
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры // СубконтоНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Спецодежда

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура"
// табличной части "Спецодежда".
//
//  Вызывает процедуру подстановки счетов учета номенклатуры.
//
Процедура СпецодеждаНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Спецодежда.ТекущиеДанные;
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры // СпецодеждаНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Партия материалов
// в эксплуатации" табличной части "Спецодежда".
//
//  Вызывает процедуру подстановки счетов учета номенклатуры.
//
Процедура СпецодеждаПартияМатериаловВЭксплуатацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Спецодежда.ТекущиеДанные;
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти);
		
КонецПроцедуры // СпецодеждаПартияМатериаловВЭксплуатацииПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" табличной части
// "Спецодежда".
//
Процедура СпецодеждаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущиеДанные.Физлицо = ВыбранноеЗначение.Физлицо;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // СпецодеждаОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Счет передачи".
//
Процедура СпецодеждаСчетПередачиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СпецодеждаСчетПередачиОбработкаВыбора()

Процедура СпецодеждаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Спецодежда.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Спецоснастка

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура".
//
//  Вызывает процедуру подстановки счетов учета номенклатуры.
//
Процедура СпецоснасткаНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Спецоснастка.ТекущиеДанные;
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти);
		
КонецПроцедуры // СпецоснасткаНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Партия материалов
// в эксплуатации".
//
//  Вызывает процедуру подстановки счетов учета номенклатуры.
//
Процедура СпецоснасткаПартияМатериаловВЭксплуатацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Спецоснастка.ТекущиеДанные;
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти);
		
КонецПроцедуры // СпецоснасткаПартияМатериаловВЭксплуатацииПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Счет передачи".
//
Процедура СпецоснасткаСчетПередачиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СпецоснасткаСчетПередачиОбработкаВыбора()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// {ОбособленныеПодразделения

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()

// }ОбособленныеПодразделения 

Процедура СпецоснасткаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Спецоснастка.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ИнвентарьИХозяйственныеПринадлежности

Процедура ИнвентарьИХозяйственныеПринадлежностиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.ИнвентарьИХозяйственныеПринадлежности.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

