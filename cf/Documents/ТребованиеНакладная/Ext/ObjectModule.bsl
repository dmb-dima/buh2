// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизиты Экспорт; // (Регл)
Перем мДокументОснование       Экспорт;

Перем мУчетнаяПолитика;                 // (Общ)

Перем мВалютаРегламентированногоУчета Экспорт;

#Если Клиент Тогда

// Функция формирует печатную форму М-11
//
Функция ПечатьМ11()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТребованиеНакладная_М11";

	Макет = ПолучитьОбщийМакет("М11");

	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заголовок                = "ТРЕБОВАНИЕ-НАКЛАДНАЯ № " + Строка(Номер);
	Область.Параметры.КодОКПО                  = Организация.КодПоОКПО;
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	Область.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
	Область.Параметры.ДатаСоставления          = Формат( Дата, "ДФ=dd.MM.yy");
	Область.Параметры.Склад                    = Склад;
	Область.Параметры.КоррСчет                 = СчетЗатрат.Код;
	Область.Параметры.ПредставлениеПодразделения = ПодразделениеЗатрат.Наименование;
	// {ОбособленныеПодразделения
	Если ЗначениеЗаполнено(ПодразделениеЗатрат.НаименованиеПолное) Тогда
		Область.Параметры.ПредставлениеПодразделения = ПодразделениеЗатрат.НаименованиеПолное;
	КонецЕсли;
	// }ОбособленныеПодразделения
	ТабДокумент.Вывести(Область);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Счет",                         "Счет");
	СтруктураПолей.Вставить("Материал",                     "Номенклатура");
	СтруктураПолей.Вставить("МатериалНаименование",         "Номенклатура.НаименованиеПолное");
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		СтруктураПолей.Вставить("НоменклатурныйНомер",          "Номенклатура.Артикул");
	Иначе
		СтруктураПолей.Вставить("НоменклатурныйНомер",          "Номенклатура.Код");
	КонецЕсли;
	
	СтруктураПолей.Вставить("ЕдиницаИзмеренияНаименование", "Номенклатура.БазоваяЕдиницаИзмерения");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияКод",          "Номенклатура.БазоваяЕдиницаИзмерения.Код");
	СтруктураПолей.Вставить("Количество",                   "Количество");
                                           
	Область = Макет.ПолучитьОбласть("Строка");
	
	ТаблицаМатериалов = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей).Выгрузить();
	ТаблицаМатериалов.Свернуть("Материал, МатериалНаименование, Счет, НоменклатурныйНомер,ЕдиницаИзмеренияКод,ЕдиницаИзмеренияНаименование", "Количество");

	// Поиск сумм списания активов для заполнения Цены и Суммы
	ТаблицаСуммСписания = БухгалтерскийУчет.ПолучитьСуммуСписанияАктивов(ЭтотОБъект);
	
	Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл

		Область.Параметры.Заполнить(СтрокаТЧ);
		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(СтрокаТЧ.Материал, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			 Область.Параметры.Цена = 0;
			 Область.Параметры.Сумма = 0;
		 Иначе
			 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			 Область.Параметры.Цена  = Цена;
			 Область.Параметры.Сумма = Цена * СтрокаТЧ.Количество;
		 КонецЕсли;
		ТабДокумент.Вывести(Область);

	КонецЦикла;
	
	ТаблицаМатериалов = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "МатериалыЗаказчика", СтруктураПолей).Выгрузить();

	Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл

		Область.Параметры.Заполнить(СтрокаТЧ);
		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(СтрокаТЧ.Материал, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			 Область.Параметры.Цена = 0;
			 Область.Параметры.Сумма = 0;
		 Иначе
			 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			 Область.Параметры.Цена  = Цена;
			 Область.Параметры.Сумма = Цена * СтрокаТЧ.Количество;
		 КонецЕсли;
		ТабДокумент.Вывести(Область);

	КонецЦикла;

	Область = Макет.ПолучитьОбласть("Подвал");

	ТабДокумент.Вывести(Область);

	Возврат ТабДокумент;

КонецФункции // ПечатьМ11()

// Функция формирует печатную форму документа
//
Функция ПечатьТребованиеНакладная()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	Иначе
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|
	|ГДЕ
	|	ТребованиеНакладная.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТребованиеНакладная.Номенклатура." + ТекстКодАртикул + " КАК Код,
	|	ТребованиеНакладная.Номенклатура.НаименованиеПолное КАК Имя,
	|	ТребованиеНакладная.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдИзм,
	|	ТребованиеНакладная.Количество КАК Количество,
	|	ТребованиеНакладная.ЕдиницаИзмерения КАК ЕдИзмМест,
	|	ТребованиеНакладная.КоличествоМест
	|ИЗ
	|	Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладная
	|ГДЕ
	|	ТребованиеНакладная.Ссылка = &ТекущийДокумент";

	ЗапросПоНоменклатуре = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТребованиеНакладная_ТН";
	
	// Вывод заголовка
	Макет = ПолучитьМакет("ТребованиеНакладная");
	Область = Макет.ПолучитьОбласть("Заголовок");
	
	Область.Параметры.ИмяКолонкиКодов = Колонка;
	
	Область.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка, "Требование-накладная");
	Область.Параметры.Заполнить(Шапка);
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	Область.Параметры.Организация = ПредставлениеОрганизации;
	ТабДокумент.Вывести(Область);

	ВыборкаПоСтрокам = ЗапросПоНоменклатуре.Выгрузить();
    ВыборкаПоСтрокам.Свернуть("Код, Имя, ЕдИзм, ЕдИзмМест", "Количество,КоличествоМест");
	
	НомерТекущий = 1;
 	Для Каждого СтрокаТЧ Из ВыборкаПоСтрокам Цикл

		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(СтрокаТЧ);
		Область.Параметры.НомерТекущий = НомерТекущий;
		ТабДокумент.Вывести(Область);
        НомерТекущий = НомерТекущий + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТребованиеНакладная.Номенклатура." + ТекстКодАртикул + " КАК Код,
	|	ТребованиеНакладная.Номенклатура.НаименованиеПолное КАК Имя,
	|	ТребованиеНакладная.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдИзм,
	|	ТребованиеНакладная.Количество КАК Количество,
	|	ТребованиеНакладная.ЕдиницаИзмерения КАК ЕдИзмМест,
	|	ТребованиеНакладная.КоличествоМест
	|ИЗ
	|	Документ.ТребованиеНакладная.МатериалыЗаказчика КАК ТребованиеНакладная
	|ГДЕ
	|	ТребованиеНакладная.Ссылка = &ТекущийДокумент";

	ЗапросПоНоменклатуре = Запрос.Выполнить();
	
	ВыборкаПоСтрокам = ЗапросПоНоменклатуре.Выгрузить();
    ВыборкаПоСтрокам.Свернуть("Код, Имя, ЕдИзм, ЕдИзмМест", "Количество,КоличествоМест");
	
 	Для Каждого СтрокаТЧ Из ВыборкаПоСтрокам Цикл

		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(СтрокаТЧ);
		Область.Параметры.НомерТекущий = НомерТекущий;
		ТабДокумент.Вывести(Область);
        НомерТекущий = НомерТекущий + 1;

	КонецЦикла;

	// Вывод подвала
	Область = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(Область);

	Возврат ТабДокумент;

КонецФункции // ПечатьТребованиеНакладная()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Накладная" Тогда
		ТабДокумент = ПечатьТребованиеНакладная();
		
	ИначеЕсли ИмяМакета = "М11" Тогда
		ТабДокумент = ПечатьМ11();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка), НепосредственнаяПечать);
	
КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("М11,Накладная","M-11 (Требование-накладная)","Требование-накладная");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет счета учета по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, Заполнять) Экспорт

	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);

	Если Заполнять = Истина Тогда
		СтрокаТЧ.Счет = СчетаУчета.СчетУчета;
	ИначеЕсли Заполнять = Ложь Тогда
		СтрокаТЧ.Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизиты = "СчетЗатрат, Субконто1, Субконто2, Субконто3,
								|НадписьСчетЗатрат, НадписьСубконто1, НадписьСубконто2, НадписьСубконто3,
								|Материалы.Счет";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация, Склад"; 

	Если Материалы.Количество() <> 0 Тогда
		Если Не СчетаУчетаЗатратВТаблице Тогда
			ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ", СчетЗатрат";
			Если СчетЗатрат.УчетПоПодразделениям И 
				(СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_) Или
				СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства) Или
				СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы) Или
				СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы) Или
				СчетЗатрат = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства Или
				СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы Или
				СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы) Тогда
				ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ", ПодразделениеЗатрат";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если СтруктураШапкиДокумента.Свойство("СложныйУчетНДС")
		И СтруктураШапкиДокумента.СложныйУчетНДС = Истина Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ", НДСвСтоимостиТоваров";
	КонецЕсли;

	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, "", мСтрокаРеквизиты, "");

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Документ нельзя оформлять на неавтоматизированную торговую точку!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	РеквизитыТабМат = "Номенклатура, Количество, Счет"  + ?(СтруктураШапкиДокумента.СчетаУчетаЗатратВТаблице, " ,СчетЗатрат," + ",НоменклатурнаяГруппа,СтатьяЗатрат", "");

	// Здесь услуг быть не должно.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Услуга", "Номенклатура.Услуга");
	ТаблицаМатериалов = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей).Выгрузить();
	
	ПроверитьЗаполнениеТабличнойЧастиМатериалы(Новый Структура(РеквизитыТабМат), Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// Проверим что нет услуг
	Для Каждого Строка Из ТаблицаМатериалов Цикл

		Если Строка.Услуга Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Нельзя использовать услугу! (строка № " + Строка.НомерСтроки + " таблица ""Материалы"")", Отказ, Заголовок);
		КонецЕсли;

	КонецЦикла;

	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабМат, "", мСтрокаРеквизиты, "", "Материалы");
	
	// Проверка номера ГТД
	Для каждого СтрокаТЧ Из Материалы Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Материалы"": ";

		Если УправлениеЗапасами.НеУказанНомерГТД(СтрокаТЧ.НомерГТД, СтрокаТЧ.СтранаПроисхождения) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Номер ГТД""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, Заголовок);
		КонецЕсли;
		
	КонецЦикла;


КонецПроцедуры // ПроверкаРеквизитовТЧ()

Процедура ПроверитьЗаполнениеТабличнойЧастиМатериалы(СтруктураОбязательныхПолей,Отказ)

	ТабличнаяЧасть      = Материалы;
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти.Материалы.Реквизиты;
	
	КэшСчетов = Новый Соответствие;
	
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части ""Материалы"": ";
									   
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если КлючЗначение.Ключ = "НоменклатурнаяГруппа" И Лев(СтрокаТаблицы.СчетЗатрат.Код, 2) = "26" Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Значение) Тогда 

				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";

				Иначе
					СтрокаСообщения = КлючЗначение.Значение;

				КонецЕсли;

				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, "");

			КонецЕсли;

		КонецЦикла;
		
		Если СтрокаТаблицы.Счет.Забалансовый Тогда
            ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Указан забалансовый счет! Материалы, принятые в переработку указываются на закладке ""Материалы заказчика""", Отказ, "");
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧасти()


// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаМатериалов = РезультатЗапросаПоТоварам.Выгрузить();

	//ТаблицаМатериалов.Колонки.Добавить("ДокументОприходования");
	ТаблицаМатериалов.Колонки.Добавить("Регистратор");
	ТаблицаМатериалов.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаМатериалов.Колонки.Добавить("Организация");
	ТаблицаМатериалов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаМатериалов.Колонки.Добавить("Валюта");
	ТаблицаМатериалов.Колонки.Добавить("ВходящийНДС");
	
	ТаблицаМатериалов.Колонки.Добавить("КорСчетСписания");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания2");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания3");
	ТаблицаМатериалов.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаМатериалов.Колонки.Добавить("КорПодразделениеОрганизации");
	
	ТаблицаМатериалов.ЗаполнитьЗначения(ЭтотОбъект,    							"Регистратор");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,      	"Склад");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,	"Организация");
	Если СчетаУчетаЗатратВТаблице Тогда
		
		Для Каждого СтрокаМатериалов ИЗ ТаблицаМатериалов Цикл
			
			СтрокаМатериалов.КорСчетСписания = СтрокаМатериалов.СчетЗатрат;
			СтрокаМатериалов.КорПодразделениеОрганизации = СтрокаМатериалов.ПодразделениеЗатрат;
			СтрокаСубконто = СтрокаМатериалов.СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
			Если Не СтрокаСубконто = Неопределено Тогда
				СтрокаМатериалов["КорСубконтоСписания" + (СтрокаМатериалов.СчетЗатрат.ВидыСубконто.Индекс(СтрокаСубконто)+1)] = СтрокаМатериалов.НоменклатурнаяГруппа;
			КонецЕсли;
			СтрокаСубконто = СтрокаМатериалов.СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
			Если Не СтрокаСубконто = Неопределено Тогда
				СтрокаМатериалов["КорСубконтоСписания" + (СтрокаМатериалов.СчетЗатрат.ВидыСубконто.Индекс(СтрокаСубконто)+1)] = СтрокаМатериалов.СтатьяЗатрат;
			КонецЕсли;
						
		КонецЦикла;
		
	Иначе
		ТаблицаМатериалов.ЗаполнитьЗначения(СчетЗатрат,    							"КорСчетСписания");
		ТаблицаМатериалов.ЗаполнитьЗначения(Субконто1,     							"КорСубконтоСписания1");
		ТаблицаМатериалов.ЗаполнитьЗначения(Субконто2,     							"КорСубконтоСписания2");
		ТаблицаМатериалов.ЗаполнитьЗначения(Субконто3,     							"КорСубконтоСписания3");
		ТаблицаМатериалов.ЗаполнитьЗначения(ПодразделениеЗатрат,"КорПодразделениеОрганизации");
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость Тогда
		ТаблицаМатериалов.Колонки.Добавить("СчетСписанияНДС");
		ТаблицаМатериалов.Колонки.Добавить("СубконтоСписанияНДС1");
		ТаблицаМатериалов.Колонки.Добавить("СубконтоСписанияНДС2");
		ТаблицаМатериалов.Колонки.Добавить("СубконтоСписанияНДС3");
		
		Если СтруктураШапкиДокумента.ДляСписанияНДСИспользоватьСчетИАналитикуУчетаЗатрат Тогда
			Если Не СчетаУчетаЗатратВТаблице Тогда
				ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетЗатрат, "СчетСписанияНДС");
				ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Субконто1, "СубконтоСписанияНДС1");
				ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Субконто2, "СубконтоСписанияНДС2");
				ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Субконто3, "СубконтоСписанияНДС3");
			Иначе
				Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл
					СтрокаТЧ.СчетСписанияНДС = СтрокаТЧ.КорСчетСписания;
					СтрокаТЧ.СубконтоСписанияНДС1 = СтрокаТЧ.КорСубконтоСписания1;
					СтрокаТЧ.СубконтоСписанияНДС2 = СтрокаТЧ.КорСубконтоСписания2;
					СтрокаТЧ.СубконтоСписанияНДС3 = СтрокаТЧ.КорСубконтоСписания3;
				КонецЦикла;
			КонецЕсли;				
		Иначе
			ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетСписанияНДС, "СчетСписанияНДС");
			ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоСписанияНДС1, "СубконтоСписанияНДС1");
			ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоСписанияНДС2, "СубконтоСписанияНДС2");
			ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоСписанияНДС3, "СубконтоСписанияНДС3");
		КонецЕсли; 
	
	КонецЕсли; 
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации,"ПодразделениеОрганизации");
		
	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуТоваров()

 // Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуМатериалыЗаказчика(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаМатериалов = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаМатериалов.Колонки.Добавить("ДокументОприходования");
	ТаблицаМатериалов.Колонки.Добавить("Регистратор");
	ТаблицаМатериалов.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаМатериалов.Колонки.Добавить("Организация");
	ТаблицаМатериалов.Колонки.Добавить("ДоговорКонтрагента");
	//ТаблицаМатериалов.Колонки.Добавить("ОтражениеВНУ");
	ТаблицаМатериалов.Колонки.Добавить("Валюта");
	ТаблицаМатериалов.Колонки.Добавить("ВходящийНДС");
	
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания2");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания3");
	ТаблицаМатериалов.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаМатериалов.Колонки.Добавить("КорПодразделениеОрганизации");
	//ТаблицаМатериалов.Колонки.Добавить("ОтражениеВУСН");
	
	ТаблицаМатериалов.ЗаполнитьЗначения(ЭтотОбъект,    							"Регистратор");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,       	"Склад");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, 	"Организация");
	ТаблицаМатериалов.ЗаполнитьЗначения(Контрагент,     						"КорСубконтоСписания1");
	ТаблицаМатериалов.ЗаполнитьЗначения(Субконто2,     							"КорСубконтоСписания2");
	ТаблицаМатериалов.ЗаполнитьЗначения(Субконто3,     							"КорСубконтоСписания3");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации,               "ПодразделениеОрганизации");
	ТаблицаМатериалов.ЗаполнитьЗначения(ПодразделениеЗатрат,                    "КорПодразделениеОрганизации");
	//ТаблицаМатериалов.ЗаполнитьЗначения(ОтражениеВУСН,    						"ОтражениеВУСН");	

	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуТоваров()


// Функция списания материалов с регистра ТоварыНаСкладе
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаМатериалов, ТаблицаДавальческихМатериалов, Отказ, Заголовок, РежимПроведения)
	
	Если СчетаУчетаЗатратВТаблице Тогда
		Текст = "в производство";
	ИначеЕсли СчетаУчетаЗатратВТаблице Или Лев(СчетЗатрат.Код, "1") = "2"  Тогда
		Текст = "в производство";
	ИначеЕсли СчетаУчетаЗатратВТаблице Или Лев(СчетЗатрат.Код, "2") = "44"  Тогда
		Текст = "на издержки";
	ИначеЕсли СчетаУчетаЗатратВТаблице Или Лев(СчетЗатрат.Код, "2") = "91"  Тогда
		Текст = "на прочие расходы";
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаМатериалов, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, ,"Списание материалов " + Текст);
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаДавальческихМатериалов, Истина, , Отказ, , "Списание давальческих материалов " + Текст);
	
	// Отражение включения НДС в стоимость (и исключения из стоимости) при наличии сложного учета НДС
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаМатериалов, Отказ, Заголовок);
	
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаМатериалов, Отказ, Заголовок);
	
	// {УчетДоходовИРасходовИП
	//Списание по партиям в налоговом учете предпринимателя
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		
		Если НЕ СчетаУчетаЗатратВТаблице Тогда
			ТаблицаМатериалов.Колонки.Добавить("СчетЗатрат");
			ТаблицаМатериалов.Колонки.Добавить("НоменклатурнаяГруппа");
			ТаблицаМатериалов.Колонки.Добавить("СтатьяЗатрат");
			
			ТаблицаМатериалов.ЗаполнитьЗначения(СчетЗатрат, "СчетЗатрат");
			
			Для НомерСубконто = 1 по 3 Цикл
				ЗначениеСубконто = ЭтотОбъект["Субконто"+НомерСубконто];
				ТипСубконто = ТипЗнч(ЗначениеСубконто);
				Если ТипСубконто = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					ТаблицаМатериалов.ЗаполнитьЗначения(ЗначениеСубконто, "НоменклатурнаяГруппа");
				КонецЕсли;
				
				Если ТипСубконто = Тип("СправочникСсылка.СтатьиЗатрат") ИЛИ ТипСубконто = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") ИЛИ ТипСубконто = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
					ТаблицаМатериалов.ЗаполнитьЗначения(ЗначениеСубконто, "СтатьяЗатрат");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаМатериалов.Колонки.Добавить("Продукция");
		ТаблицаМатериалов.ЗагрузитьКолонку(ТаблицаМатериалов.ВыгрузитьКолонку("СтатьяЗатрат"), "Продукция");
			
		СтоимостьПродукции = ДоходыИРасходыПредпринимателя.СписаниеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, 2, ТаблицаМатериалов, "НоменклатурнаяГруппа", "СчетУчета", "СчетЗатрат", "СтатьяЗатрат",, Отказ);
		
		ПолученоПродукции = ТаблицаМатериалов.Скопировать(,"Продукция,СчетЗатрат,НоменклатурнаяГруппа");
		ПолученоПродукции.Свернуть("Продукция,СчетЗатрат,НоменклатурнаяГруппа");
		ПолученоПродукции.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		
		ДоходыИРасходыПредпринимателя.ПоступлениеПродукции(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, ПолученоПродукции, "СчетЗатрат",, "НоменклатурнаяГруппа", "Продукция", СтоимостьПродукции);
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	// Учет товаров по номерам ГТД
	УправлениеЗапасами.ПроведениеДокументаСписанияПоСчетуГТД(ЭтотОбъект, ТаблицаМатериалов);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		Возврат;
	ИначеЕсли Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоТоварам.Количество() = 0 Тогда
		//Отработка по партиям НДС не требуется. 
		Возврат;
	КонецЕсли; 
	
	/////////////////////////////////////////////////////////////////////////////////
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	ТаблицаНДСПартииСписания = УчетНДС.ПодготовитьТаблицуСписанияПартийДляНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	/////////////////////////////////////////////////////////////////////////////////
	
	Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		//Партии не найдены или отражение в партионном учете НДС не производится.
		//Дальнейшая обработка не требуется
		Возврат;
	КонецЕсли; 
	
	ТаблицаДвиженийПартии = Движения.НДСПоПриобретеннымЦенностям.Выгрузить();
	Движения.НДСПоПриобретеннымЦенностям.мПериод          = СтруктураШапкиДокумента.Дата;
	
	ТаблицаДвиженийПартии.Очистить();
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
	УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии, Истина, Движения.Хозрасчетный, Заголовок, Движения);
	УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии, Ложь, Движения.Хозрасчетный, Заголовок, Движения);
	
	Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
		Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
		Движения.НДСПоПриобретеннымЦенностям.ВыполнитьПриход();
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по партиям - отразить непосредственное списание.
	ТаблицаДвиженийПартии.Очистить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
	Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
	Движения.НДСПоПриобретеннымЦенностям.ВыполнитьРасход();
	// НДС по партиям - отразить непосредственное списание.
	/////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по переданным ТМЦ на объект строительства или НМА - движения по регистру НДСпоОСиНМА для
	// последующего учета НДС.
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_СписаниеМатериаловНаОСиНМА(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, Движения, Отказ);
    // НДС по переданным ТМЦ на объект строительства
	/////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по косвенным расходам - движения по регистру НДСКосвенныеРасходы для
	// статей с распределением расходов или с расходами не относящимися к ЕНВД
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, Движения, Отказ);	
	// НДС по косвенным расходам 
	/////////////////////////////////////////////////////////////////////////////////
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета УСН
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДопПараметров = Новый Структура("ТаблицаТМЦ", ТаблицаПоТоварам);
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, СтруктураДопПараметров);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения"
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполнение шапки
		Организация                 = Основание.Организация;
		Склад                       = Основание.Склад;
		мДокументОснование 			= Основание;
		// {ОбособленныеПодразделения
		ПодразделениеОрганизации    = Основание.ПодразделениеОрганизации;
		// }ОбособленныеПодразделения
		Если Основание.ВидОперации  = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			Контрагент               = Основание.Контрагент;
			СтрокаТЧ                 = МатериалыЗаказчика;
		Иначе
			СтрокаТЧ                 = Материалы;
		КонецЕсли;
		

		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл

			НоваяСтрока = СтрокаТЧ.Добавить();
			НоваяСтрока.Номенклатура     = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.Количество       = ТекСтрокаТовары.Количество;
			СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, НоваяСтрока.Номенклатура, Склад);
			Если Основание.ВидОперации  = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
				НоваяСтрока.Счет        = СчетаУчета.СчетУчетаДавСырья;
				НоваяСтрока.СчетПередачи= СчетаУчета.СчетПередачиЗаб;
			Иначе
				НоваяСтрока.Счет        = СчетаУчета.СчетУчета;
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.КоличествоМест   = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент      = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			
			КонецЕсли;
			

		КонецЦикла;

	ИначеЕсли (ТипЗнч(Основание)=Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Или (ТипЗнч(Основание)=Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"))) Тогда

		Организация                 = Основание.Организация;
		СчетаУчетаЗатратВТаблице    = Истина;
		мДокументОснование = 		Основание;
		// {ОбособленныеПодразделения
		ПодразделениеОрганизации    = Основание.ПодразделениеОрганизации;
		// }ОбособленныеПодразделения
		СчетЗатрат                  = Основание.СчетЗатрат;
		ПодразделениеЗатрат         = Основание.ПодразделениеЗатрат;
		Субконто1                   = Основание.НоменклатурнаяГруппа; 
		Субконто2                   = Справочники.СтатьиЗатрат.ПустаяСсылка(); 
		
		РезультатУслуги = Неопределено;
			
		Если ТипЗнч(Основание)=Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
			Склад  = Основание.Склад;
			Результат       = УправлениеПроизводством.РассчитатьРасходСырьяПоСпецификации(Основание.Ссылка);
			РезультатУслуги = УправлениеПроизводством.РассчитатьРасходСырьяПоСпецификации(Основание.Ссылка, "Услуги");
			СписокКолонок = "Номенклатура,ЕдиницаИзмерения,НоменклатурнаяГруппа";
			
		Иначе
			НоменклатурнаяГрупп         = Основание.НоменклатурнаяГруппа;  
			Результат = УправлениеПроизводством.РассчитатьРасходСырьяПоСпецификации(Основание.Ссылка);
			СписокКолонок = "Номенклатура,ЕдиницаИзмерения";
			
		КонецЕсли;
	
		ТаблицаМатериалов = Результат.Выгрузить();
		
        ТаблицаМатериалов.Свернуть(СписокКолонок,"Количество");
		Материалы.Загрузить(ТаблицаМатериалов);
		Для Каждого Стр Из Материалы Цикл
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Стр, "Материалы", Истина);
			Стр.Коэффициент      = 1;
			Стр.ОтражениеВУСН    = Перечисления.ОтражениеВУСН.Принимаются;
	    	Стр.СтатьяЗатрат     = Стр.Номенклатура.СтатьяЗатрат;
			Стр.ПодразделениеЗатрат  = Основание.ПодразделениеЗатрат;
	    	Стр.СчетЗатрат       = Основание.СчетЗатрат;
			Если ТипЗнч(Основание)=Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
				Стр.НоменклатурнаяГруппа = Основание.НоменклатурнаяГруппа;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ РезультатУслуги = Неопределено Тогда
			ТаблицаМатериалов = РезультатУслуги.Выгрузить();
			ТаблицаМатериалов.Свернуть(СписокКолонок,"Количество");
			Для Каждого Стр Из ТаблицаМатериалов Цикл
				НоваяСтрока = Материалы.Добавить();
				НоваяСтрока.Номенклатура = Стр.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
				НоваяСтрока.НоменклатурнаяГруппа = Стр.НоменклатурнаяГруппа;
				НоваяСтрока.Количество = Стр.Количество;
				ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Материалы", Истина);
				НоваяСтрока.Коэффициент      = 1;
				НоваяСтрока.ОтражениеВУСН    = Перечисления.ОтражениеВУСН.Принимаются;
				НоваяСтрока.СтатьяЗатрат     = Стр.Номенклатура.СтатьяЗатрат;
				НоваяСтрока.СчетЗатрат       = Основание.СчетЗатрат;
			КонецЦикла;
		КонецЕсли;


	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		// Заполнение шапки
		Комментарий = Основание.Комментарий;
		Контрагент = Основание.Контрагент;
		Организация = Основание.Организация;
		Ответственный = Основание.Ответственный;
		мДокументОснование = Основание;
		// {ОбособленныеПодразделения
		ПодразделениеОрганизации    = Основание.ПодразделениеОрганизации;
		// }ОбособленныеПодразделения
		Для Каждого ТекСтрокаМатериалыЗаказчика Из Основание.МатериалыЗаказчика Цикл
			НоваяСтрока = МатериалыЗаказчика.Добавить();
			НоваяСтрока.Количество = ТекСтрокаМатериалыЗаказчика.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаМатериалыЗаказчика.Номенклатура;
			НоваяСтрока.Счет = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
			НоваяСтрока.СчетПередачи = ТекСтрокаМатериалыЗаказчика.СчетУчета;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ = Ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС, УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	//Если сложный учет НДС не ведется - затрем параметры сложного учета ндс
	Если Не Отказ И Не СтруктураШапкиДокумента.СложныйУчетНДС И Не СтруктураШапкиДокумента.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять Тогда
		СтруктураШапкиДокумента.Вставить("НДСвСтоимостиТоваров",Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять);
	КонецЕсли;

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад" , "ВидСклада" , "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаМатериалов, ТаблицаДавальческихМатериалов) Экспорт
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("НомерСтроки" , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("СчетУчета" , "Счет");
	СтруктураПолей.Вставить("НомерГТД"     , "НомерГТД");
	СтруктураПолей.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	СтруктураПолей.Вставить("ДокументОприходования", "ДокументОприходования");
	СтруктураПолей.Вставить("Себестоимость"		   , "Себестоимость");
	СтруктураПолей.Вставить("ОтражениеВУСН"		   , "ОтражениеВУСН");
	Если СчетаУчетаЗатратВТаблице Тогда
		СтруктураПолей.Вставить("СтатьяЗатрат"		         , "СтатьяЗатрат");
		СтруктураПолей.Вставить("НоменклатурнаяГруппа" , "НоменклатурнаяГруппа");
		СтруктураПолей.Вставить("СчетЗатрат" ,   "СчетЗатрат");
		СтруктураПолей.Вставить("ПодразделениеЗатрат" , "ПодразделениеЗатрат");
	КонецЕсли;
	

	РезультатЗапросаПоМатериалам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаМатериалов = ПодготовитьТаблицуТоваров(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("НомерСтроки"      , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"     , "Номенклатура");
	СтруктураПолей.Вставить("Количество"       , "Количество");
	СтруктураПолей.Вставить("СчетУчета"        , "Счет");
	СтруктураПолей.Вставить("КорСчетСписания"  , "СчетПередачи");

	РезультатЗапросаПоМатериалам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "МатериалыЗаказчика", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаДавальческихМатериалов = ПодготовитьТаблицуМатериалыЗаказчика(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);
	
КонецПроцедуры // СформироватьТаблицыДокумента()

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаМатериалов, ТаблицаДавальческихМатериалов;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	Если МатериалыЗаказчика.Количество() <> 0 И НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("На закладке ""Материалы заказчика"" в реквизите ""Контрагент"" не указан поставщик давальческого сырья", Отказ, Заголовок);
	КонецЕсли;

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаМатериалов, ТаблицаДавальческихМатериалов);
	
	ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если НЕ Отказ Тогда
		// Формирование движения регистров
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаМатериалов, ТаблицаДавальческихМатериалов, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
