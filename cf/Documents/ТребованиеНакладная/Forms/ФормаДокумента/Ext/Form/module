////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит текущую форму подбора номенклатуры
Перем мФормаПодбораНоменклатуры; 

//Используется для определения необходимости отображения действий над НДС в документе
Перем мСложныйУчетНДС;
// Используется для определения необходимости указания счета списания НДС на расходы
Перем мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

//Используется для определения необходимости открытия настроек движения после сохранения
Перем ОткрыватьНастройкуДвижений;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Материалы,ЭлементыФормы.КоманднаяПанельМатериалы);
	СоответствиеТЧ.Вставить(ЭлементыФормы.МатериалыЗаказчика,ЭлементыФормы.КоманднаяПанельМатериалыЗаказчика);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбораНоменклатуры, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Производит открывает форму подбора данных в табличные части документа
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Ложь;
	ЕстьСерия = Истина;

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,                      "По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", "Остатки номенклатуры");

	Если  ТабличнаяЧасть = Материалы Тогда
		Команда           = "ПодборВТабличнуюЧастьМатериалы";
		ИмяТабличнойЧасти = "Материалы";
	Иначе
		Команда           = "ПодборВТабличнуюЧастьМатериалыЗаказчика";
		ИмяТабличнойЧасти = "МатериалыЗаказчика";
	КонецЕсли;


	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокЗапросов);
	СтруктураПараметровПодбора.Вставить("Организация"        , Организация);
	СтруктураПараметровПодбора.Вставить("Склад"              , Склад);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);

	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, мФормаПодбораНоменклатуры);

КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура",     Номенклатура);
		Если ТабличнаяЧасть = Материалы Тогда
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
        КонецЕсли;
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		Если КоличествоМест = Неопределено Тогда
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		Иначе
			СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.КоличествоМест + КоличествоМест;
		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Материалы Тогда
			
			Если КоличествоМест = Неопределено Тогда
				СтрокаТабличнойЧасти.Количество     = Количество;
			Иначе
				СтрокаТабличнойЧасти.КоличествоМест = КоличествоМест;
			КонецЕсли;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = 1;
	 		СтрокаТабличнойЧасти.ОтражениеВУСН 	  = Перечисления.ОтражениеВУСН.Принимаются;

			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Материалы", Истина);
			ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти, Ложь, Организация, Дата);
			ЭлементыФормы.Материалы.ТекущаяСтрока = СтрокаТабличнойЧасти;
			ЭлементыФормы.Материалы.ТекущаяКолонка = ЭлементыФормы.Материалы.Колонки["Количество"];
        	УстановитьСчетаУчетаИАналитикуЗатрат(СтрокаТабличнойЧасти, 2);
		Иначе
			СтрокаТабличнойЧасти.Количество     = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = 1;
			СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура, Склад);
			СтрокаТабличнойЧасти.Счет = СчетаУчета.СчетУчетаДавСырья;
			СтрокаТабличнойЧасти.СчетПередачи = СчетаУчета.СчетПередачиЗаб;
			
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры // ОбработкаПодбора()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели  = ЭлементыФормы.ОсновнаяПанель.Страницы;
	
	СтраницаПанели.Материалы.Заголовок          = "Материалы ("   + ДокументОбъект.Материалы.Количество() + " поз.)";
	СтраницаПанели.МатериалыЗаказчика.Заголовок = "Материалы заказчика ("   + ДокументОбъект.МатериалыЗаказчика.Количество() + " поз.)";
	
	ЕстьМатериалыЗаказчикаНетЗаказчика = (МатериалыЗаказчика.Количество() <> 0 И НЕ ЗначениеЗаполнено(Контрагент));
	
	ЭлементыФормы.Контрагент.АвтоВыборНезаполненного   = ЕстьМатериалыЗаказчикаНетЗаказчика;
	ЭлементыФормы.Контрагент.АвтоОтметкаНезаполненного = ЕстьМатериалыЗаказчикаНетЗаказчика;
	ЭлементыФормы.Контрагент.ОтметкаНезаполненного     = ЕстьМатериалыЗаказчикаНетЗаказчика;
	
КонецПроцедуры // ОбновлениеОтображения()

// Производит заполнение и установку необходимых полей при изменении номенклатуры в табличной части.
//
Процедура ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.Коэффициент      = 1;
    СтрокаТабличнойЧасти.ОтражениеВУСН 	  = Перечисления.ОтражениеВУСН.Принимаются;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
	УстановитьСчетаУчетаИАналитикуЗатрат(СтрокаТабличнойЧасти, 1);
	
	// Заполним номер ГТД и страну происхождения
	ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти, Ложь, Организация, Дата);

КонецПроцедуры // ПриИзмененииНоменклатуры()

//Определяет параметры учетной политики (сложный учет НДС по организации)
Процедура ОпределитьСложныйУчетНДС()
	
	ПараметрыНеПолучены = Ложь;
	ПараметрыНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ПараметрыНеПолучены, Организация,, Ложь);
	Если ПараметрыНеПолучены Тогда
		мСложныйУчетНДС = Ложь;    
		мЕстьЕНВД = Ложь;
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
	Иначе
		мСложныйУчетНДС = ПараметрыНУ.СложныйУчетНДС И Не ПараметрыНУ.УСН И Не ПараметрыНУ.УпрощенныйУчетНДС;
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = ПараметрыНУ.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;
		Если НЕ ЗначениеЗаполнено(мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость) Тогда
			мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	УСН       = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	УСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата);
	Предприниматель = ОбщегоНазначения.Предприниматель(Организация, Дата);

	КолонкиМатериалы          = ЭлементыФормы.Материалы.Колонки;
	КолонкиМатериалыЗаказчика = ЭлементыФормы.МатериалыЗаказчика.Колонки;
	
	КолонкиМатериалы.Счет.Видимость    = ПоказыватьВДокументахСчетаУчета;
	
	КолонкиМатериалыЗаказчика.Счет.Видимость         = ПоказыватьВДокументахСчетаУчета;
	КолонкиМатериалыЗаказчика.СчетПередачи.Видимость = ПоказыватьВДокументахСчетаУчета;
	
	Для Ном = 1 по 3 Цикл

		Если (Ном <= СчетЗатрат.ВидыСубконто.Количество()) и (ЗначениеЗаполнено(СчетЗатрат)) Тогда
			ЭлементыФормы["НадписьСубконто"+Ном].Заголовок = Строка(СчетЗатрат.ВидыСубконто[Ном-1].ВидСубконто);
			ЭлементыФормы["НадписьСубконто"+Ном].Видимость   = Истина;
			ЭлементыФормы["Субконто"+Ном].Видимость          = Истина;
		Иначе
			ЭлементыФормы["НадписьСубконто"+Ном].Видимость   = Ложь;
			ЭлементыФормы["Субконто"+Ном].Видимость          = Ложь;
		КонецЕсли;

	КонецЦикла;
	
	ЭлементыФормы["НадписьПодразделениеЗатрат"].Видимость = СчетЗатрат.УчетПоПодразделениям;
	ЭлементыФормы["ПодразделениеЗатрат"].Видимость        = СчетЗатрат.УчетПоПодразделениям;
	
	АвтоОтметкаНезаполненногоПодразделенияЗатрат = СчетЗатрат.УчетПоПодразделениям И 
		(СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_) Или
		СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства) Или
		СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы) Или
		СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы) Или
		СчетЗатрат = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства Или
		СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы Или
		СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		
	ЭлементыФормы["ПодразделениеЗатрат"].АвтоОтметкаНезаполненного = АвтоОтметкаНезаполненногоПодразделенияЗатрат;
	ЭлементыФормы["ПодразделениеЗатрат"].ОтметкаНезаполненного = (НЕ ЗначениеЗаполнено(ПодразделениеЗатрат) И АвтоОтметкаНезаполненногоПодразделенияЗатрат);

	
	Если ЭлементыФормы.Субконто2.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения Тогда
		ЭлементыФормы.Субконто2.Доступность = Ложь;
	КонецЕсли;
	Если ЭлементыФормы.Субконто3.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения Тогда
		ЭлементыФормы.Субконто3.Доступность = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаСписанияНДС.Видимость = мСложныйУчетНДС;
	ЭлементыФормы.НадписьНДСвСтоимостиТоваров.Видимость = мСложныйУчетНДС;
	ЭлементыФормы.НДСвСтоимостиТоваров.Видимость        = мСложныйУчетНДС;
	ПоказатьВариантыСписанияНДС = (мСложныйУчетНДС и НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость);
	ЭлементыФормы.ДляСписанияНДСИспользоватьСчетИАналитикуУчетаЗатрат.Видимость  = ПоказатьВариантыСписанияНДС;
	ЭлементыФормы.ДляСписанияНДСИспользоватьСчетИАналитикуУчетаЗатрат2.Видимость = ПоказатьВариантыСписанияНДС;
	ПоказатьСписаниеНДС = (ПоказатьВариантыСписанияНДС И НЕ ДляСписанияНДСИспользоватьСчетИАналитикуУчетаЗатрат);
	ЭлементыФормы.СчетСписанияНДС.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.НадписьСчетСписанияНДС.Видимость	= ПоказатьСписаниеНДС;
	ЭлементыФормы.СубконтоСписанияНДС1.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.СубконтоСписанияНДС2.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.СубконтоСписанияНДС3.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.НадписьСубконтоСписанияНДС1.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.НадписьСубконтоСписанияНДС2.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.НадписьСубконтоСписанияНДС3.Видимость = ПоказатьСписаниеНДС;
	УстановитьВидимостьСубконто(СчетСписанияНДС, "СписанияНДС", ПоказатьСписаниеНДС);
	
	УчетнаяПолитикаНеЗадана = Ложь;
	УчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	Если УчетнаяПолитикаБУ.Количество() > 0 Тогда	
		Если УчетнаяПолитикаБУ.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
			ЭлементыФормы.Материалы.Колонки.ДокументОприходования.Видимость = Ложь;
			ЭлементыФормы.Материалы.Колонки.ДокументОприходования.ИзменятьВидимость = Ложь;
		Иначе
			Если ЭлементыФормы.Материалы.Колонки.Себестоимость.Видимость Тогда
				ЭлементыФормы.Материалы.Колонки.ДокументОприходования.Видимость = Истина;
			КонецЕсли;
			ЭлементыФормы.Материалы.Колонки.ДокументОприходования.ИзменятьВидимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЗатратыВТЧ = СчетаУчетаЗатратВТаблице;
	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчетаЗатрат.Видимость = НЕ ЗатратыВТЧ;
	КолонкиМатериалы.СтатьяЗатрат.Видимость                 = ЗатратыВТЧ;
	КолонкиМатериалы.СчетЗатрат.Видимость                   = ЗатратыВТЧ;
	КолонкиМатериалы.НоменклатурнаяГруппа.Видимость         = ЗатратыВТЧ;
	КолонкиМатериалы.ПодразделениеЗатрат.Видимость          = ЗатратыВТЧ;
	
	ЭтаФорма.Обновить();
КонецПроцедуры // УстановитьВидимость()

// Устанавливает типы субконто при изменении счета
//
// Параметры
//  Счет  – <ПланыСчетов. .Ссылка> – Счет изменившийся
//  Суффикс- <Строка> – Суффикс реквизитов
//
Процедура ПриИзмененииСчета(Счет, Суффикс)

	ВидыСубконтоСчета = Счет.ВидыСубконто;

	Для Ном = 1 по 3 Цикл
		Если (Ном <= ВидыСубконтоСчета.Количество()) и (ЗначениеЗаполнено(Счет)) и
			ВидыСубконтоСчета[Ном-1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЭтотОбъект["Субконто"+Суффикс+Ном]))  Тогда
			// Без изменений
		ИначеЕсли Ном <= ВидыСубконтоСчета.Количество() тогда
			ЭтотОбъект["Субконто"+Суффикс+Ном] = Новый(ВидыСубконтоСчета[Ном-1].ВидСубконто.ТипЗначения.Типы()[0]);
		Иначе
			ЭтотОбъект["Субконто"+Суффикс+Ном] = Неопределено;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПриИзмененииСчета()

Процедура УстановитьВидимостьСубконто(Счет, Суффикс, ВидимостьСчета)
	
	ВидыСубконтоСчета = Счет.ВидыСубконто;
	КоличествоСубконто = ВидыСубконтоСчета.Количество();
	Для Ном = 1 по 3 Цикл
		
		Если ВидимостьСчета и (Ном <= КоличествоСубконто) и  (ЗначениеЗаполнено(Счет)) Тогда
			ЭлементыФормы["НадписьСубконто"+Суффикс+Ном].Заголовок = Строка(ВидыСубконтоСчета[Ном-1].ВидСубконто);
			ЭлементыФормы["НадписьСубконто"+Суффикс+Ном].Видимость = Истина;
			ЭлементыФормы["Субконто"+Суффикс+Ном].Видимость        = Истина;
		Иначе
			ЭлементыФормы["НадписьСубконто"+Суффикс+Ном].Видимость = Ложь;
			ЭлементыФормы["Субконто"+Суффикс+Ном].Видимость        = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	   
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,,ПараметрОбъектКопирования);
		
		Если  ПараметрОбъектКопирования = Неопределено Тогда
			НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			ДляСписанияНДСИспользоватьСчетИАналитикуУчетаЗатрат = Ложь;
			
			// установить флаг "Счета учета затрат в таблице"
			СчетаУчетаЗатратВТаблице = ?(СчетаУчетаЗатратВТаблице = Неопределено, Ложь, СчетаУчетаЗатратВТаблице);
		КонецЕсли;
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

   	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Счет");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Материалы.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
    // }ОбособленныеПодразделения
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	// Определим параметры сложного учета НДС
	ОпределитьСложныйУчетНДС();
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Установка видимости реквизитов.
	УстановитьВидимость();
	
	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Материалы",			"Материалы");
	Страницы.Добавить("МатериалыЗаказчика",	"МатериалыЗаказчика");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,Склад,ПодразделениеОрганизации");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница,Страницы);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);	

	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//Если сложный учет НДС не ведется - затрем параметры сложного учета ндс
	Если не мСложныйУчетНДС и не НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять Тогда
		НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
          	
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьМатериалы" Тогда
			ОбработкаПодбора(Материалы, ЗначениеВыбора);
		КонецЕсли;
		Если Команда = "ПодборВТабличнуюЧастьМатериалыЗаказчика" Тогда
			ОбработкаПодбора(МатериалыЗаказчика, ЗначениеВыбора);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

 
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыПодбор(Кнопка)
	
	ДействиеПодбор(Материалы);
	
КонецПроцедуры // КоманднаяПанельМатериалыПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "МатериалыЗаказчика"
//
Процедура КоманднаяПанельМатериалыЗаказчикаПодбор(Кнопка)
	
	ДействиеПодбор(МатериалыЗаказчика);
	
КонецПроцедуры // КоманднаяПанельМатериалыПодбор()


// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
       

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)
	
	//Открывает форму движений документа для ручного редактирования
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	Если НачалоМесяца(мТекущаяДатаДокумента) <> НачалоМесяца(Дата) Тогда
		ОпределитьСложныйУчетНДС();
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	УстановитьВидимость();
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	Подразделение = Неопределено;
	// {ОбособленныеПодразделения
	Подразделение = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	РаботаСДиалогами.УстановитьПодразделениеПоСчету(
		ПодразделениеЗатрат, СчетЗатрат, Организация, Подразделение);

	
	Для каждого СтрокаМатериалы Из Материалы Цикл
		Подразделение = ПодразделениеЗатрат;
		РаботаСДиалогами.УстановитьПодразделениеПоСчету(
			СтрокаМатериалы.ПодразделениеЗатрат, СтрокаМатериалы.СчетЗатрат, Организация, Подразделение);
	КонецЦикла;
	
	// Определим параметры сложного учета НДС
	ОпределитьСложныйУчетНДС();
	
    УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетЗатрат
//
Процедура СчетЗатратПриИзменении(Элемент)

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		Субконто1, ЭлементыФормы.Субконто1,
		Субконто2, ЭлементыФормы.Субконто2,
		Субконто3, ЭлементыФормы.Субконто3,
		ПодразделениеЗатрат, ЭлементыФормы.ПодразделениеЗатрат);
								 
	Подразделение = Неопределено;
	// {ОбособленныеПодразделения
	Подразделение = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	РаботаСДиалогами.УстановитьПодразделениеПоСчету(
		ПодразделениеЗатрат, СчетЗатрат, Организация, Подразделение);
	
	Если ЭлементыФормы.Субконто2.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения Тогда
		ЭлементыФормы.Субконто2.Доступность = Ложь;
		ЭлементыФормы.Субконто2.Значение = "Из табличной части";
	ИначеЕсли (2 <= СчетЗатрат.ВидыСубконто.Количество()) и (ЗначениеЗаполнено(СчетЗатрат)) Тогда
		ЭлементыФормы.Субконто2.Доступность = Истина;
	КонецЕсли;
	Если ЭлементыФормы.Субконто3.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения Тогда
		ЭлементыФормы.Субконто3.Доступность = Ложь;
	ИначеЕсли (3 <= СчетЗатрат.ВидыСубконто.Количество()) и (ЗначениеЗаполнено(СчетЗатрат)) Тогда
		ЭлементыФормы.Субконто3.Доступность = Истина;
	КонецЕсли;
	
	Если НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) И ОтражениеВУСН = Перечисления.ОтражениеВУСН.ПустаяСсылка() Тогда
		ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // СчетЗатратПриИзменении

Процедура УстановитьСчетаУчетаИАналитикуЗатрат(СтрокаТЧ, Шаг)
	
	Если СчетаУчетаЗатратВТаблице Тогда
		СтрокаТЧ.СтатьяЗатрат     = СтрокаТЧ.Номенклатура.СтатьяЗатрат;
		УстновитьНоменклатурнуюГруппу(СтрокаТЧ, Шаг);
		УстановитьСчетаУчетаЗатрат(СтрокаТЧ, Шаг);
	Иначе
		СтрокаТЧ.СтатьяЗатрат     = "";
		СтрокаТЧ.НоменклатурнаяГруппа = "";
		СтрокаТЧ.СчетЗатрат = "";
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик событий изменения номенклатуры в табличной части "Товары"
// в случае включения режима ввода данных "Затраты в ТЧ"
//
Процедура УстановитьСчетаУчетаЗатрат(СтрокаТЧ, Шаг)
	
	Если СчетаУчетаЗатратВТаблице Тогда
		Если Материалы.Количество() = 1 Тогда
			ТекущийСчетЗатрат      = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
			// {ОбособленныеПодразделения
			ТекущееПодразделениеЗатрат = ПодразделениеОрганизации;
			// }ОбособленныеПодразделения
		Иначе
			ПредыдущаяСтрокаТЧ = Материалы.Получить(СтрокаТЧ.НомерСтроки - Шаг);
			ТекущийСчетЗатрат = ПредыдущаяСтрокаТЧ.СчетЗатрат;
			// {ОбособленныеПодразделения
			ТекущееПодразделениеЗатрат  = ПредыдущаяСтрокаТЧ.ПодразделениеЗатрат;
			// }ОбособленныеПодразделения
		КонецЕсли;
		СтрокаТЧ.СчетЗатрат = ТекущийСчетЗатрат;
		// {ОбособленныеПодразделения
		СтрокаТЧ.ПодразделениеЗатрат = ТекущееПодразделениеЗатрат;
		// }ОбособленныеПодразделения
	Иначе
		Если Не ЗначениеЗаполнено(СчетЗатрат) Тогда
			СчетЗатрат      = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
		КонецЕсли;
		// {ОбособленныеПодразделения
		Если Не ЗначениеЗаполнено(ПодразделениеЗатрат) Тогда
			ПодразделениеЗатрат = ПодразделениеОрганизации;
		КонецЕсли;
		// }ОбособленныеПодразделения
	КонецЕсли;

КонецПроцедуры

Процедура УстновитьНоменклатурнуюГруппу(СтрокаТЧ, Шаг)
	
	Если Материалы.Количество() > 1 Тогда
		ПредыдущаяСтрокаТЧ = Материалы.Получить(СтрокаТЧ.НомерСтроки - Шаг);
		СтрокаТЧ.НоменклатурнаяГруппа = ПредыдущаяСтрокаТЧ.НоменклатурнаяГруппа;
	КонецЕсли;

КонецПроцедуры

Функция ПараметрыНеобходимыеДляВыбораСубконто(Элемент, Учет = "Бух")

	// Если тип выбираемого субконто - Партия, то создадим 
	// структуру дополнительных параметров.
	Если Элемент.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения  Тогда
		СписокПараметров = Новый Структура;
		СписокПараметров.Вставить("Дата", Дата);
		СписокПараметров.Вставить("ЭтоНовыйДокумент",ЭтоНовый());
	    Если Учет = "Бух" Тогда
			СписокПараметров.Вставить("СчетУчета",    СчетЗатрат);
			СписокПараметров.Вставить("Номенклатура", УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Номенклатура", Субконто1, Субконто2, Субконто3));
			СписокПараметров.Вставить("Склад",        УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Склады", Субконто1, Субконто2, Субконто3));
		КонецЕсли; 
		
	Иначе // Тип выбираемого субконто - не Партия.
		СписокПараметров = Неопределено;
	КонецЕсли; 
	
	Возврат СписокПараметров;

КонецФункции // ПараметрыНеобходимыеДляВыбораСубконто()

// Процедура - обработчик события "НачалоВыбора" поля ввода Субконто
//
Процедура СубконтоНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = ПараметрыНеобходимыеДляВыбораСубконто(Элемент, "Бух");
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

Процедура ДляСписанияНДСИспользоватьСчетИАналитикуУчетаЗатрат1ПриИзменении(Элемент)
	Если не ДляСписанияНДСИспользоватьСчетИАналитикуУчетаЗатрат Тогда
		ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию(Истина);
	КонецЕсли; 
	УстановитьВидимость();
КонецПроцедуры

// {ОбособленныеПодразделения

Процедура СкладПриИзменении(Элемент)
	
	ПодразделениеОрганизации = УправлениеПодразделениями.ПолучитьПодразделение(Организация, Склад);
	
КонецПроцедуры

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()

// }ОбособленныеПодразделения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Материалы

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Материалы", Истина);

	ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);
КонецПроцедуры // МатериалыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "МатериалыЗаказчика".
//
Процедура МатериалыЗаказчикаНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.МатериалыЗаказчика.ТекущиеДанные;

	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.Коэффициент = 1;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
	
	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура, Склад);
	
	СтрокаТабличнойЧасти.Счет = СчетаУчета.СчетУчетаДавСырья;
	СтрокаТабличнойЧасти.СчетПередачи = СчетаУчета.СчетПередачиЗаб;
	
КонецПроцедуры // МатериалыНоменклатураПриИзменении()

Процедура МатериалыСчетПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Материалы.ТекущиеДанные;

	УстановитьСчетаУчетаЗатрат(СтрокаТЧ, 1)
	
КонецПроцедуры

Процедура МатериалыСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // МатериалыСчетОбработкаВыбора()

// Процедура - обработчик начала выбора номера ГТД
//
Процедура МатериалыНомерГТДНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеЗапасами.ОткрытьФормуВыбораНомераГТД(ЭлементыФормы.Материалы, СтандартнаяОбработка, Ссылка, Организация, ЭлементыФормы.Материалы.ТекущиеДанные.Номенклатура, Дата);
	
КонецПроцедуры

Процедура СчетПередачиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура МатериалыЗаказчикаСчетПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.МатериалыЗаказчика.ТекущиеДанные;

	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура, Склад);
	
	СтрокаТабличнойЧасти.СчетПередачи = СчетаУчета.СчетПередачиЗаб;

КонецПроцедуры

Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УстановитьВидимость();
КонецПроцедуры

Процедура СчетСписанияНДСПриИзменении(Элемент)
	ПриИзмененииСчета(СчетСписанияНДС, "СписанияНДС");
	УстановитьВидимостьСубконто(СчетСписанияНДС, "СписанияНДС", Элемент.Видимость);
КонецПроцедуры

Процедура СчетСписанияНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
КонецПроцедуры

Процедура НДСвСтоимостиТоваровПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

Процедура ДляСписанияНДСИспользоватьСчетИАналитикуУчетаЗатратПриИзменении(Элемент)
	Если не ДляСписанияНДСИспользоватьСчетИАналитикуУчетаЗатрат Тогда
		ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию(Истина);
	КонецЕсли; 
	
	УстановитьВидимость();
КонецПроцедуры

// Процедура для заполнения счетов списания НДС значениями по умолчанию
//
// Параметры
//  ВыводитьВопрос  – <Булево> – задавать вопрос перед заполнением счетов
//
Процедура ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию(ВыводитьВопрос = Ложь)
	Если ВыводитьВопрос Тогда
		Ответ = Вопрос("Установить счета и аналитику для списания НДС
					|в соответствие со значениями счета учета затрат?", 
					РежимДиалогаВопрос.ДаНет, , , "Изменения счетов списания НДС");
	Иначе
		Ответ = КодВозвратаДиалога.Да;
	КонецЕсли;
				
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СчетСписанияНДС = СчетЗатрат;
		СубконтоСписанияНДС1 = Субконто1;
		СубконтоСписанияНДС2 = Субконто2;
		СубконтоСписанияНДС3 = Субконто3;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию()

Процедура МатериалыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	// Если заполнен документ партии, то себестоимость будет браться из него.
	// Поэтому если колонка видна, будем выводить в нее текст.
	Если ЭлементыФормы.Материалы.Колонки.ДокументОприходования.Видимость
	   И НЕ ЗначениеЗаполнено(ДанныеСтроки.ДокументОприходования) Тогда

		ОформлениеСтроки.Ячейки.ДокументОприходования.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ДокументОприходования.Текст           = "<Авто>";
		ОформлениеСтроки.Ячейки.Себестоимость.ТолькоПросмотр  = Истина;

	КонецЕсли;
	
	Если ЭлементыФормы.Материалы.Колонки.Себестоимость.Видимость
	   И НЕ ЗначениеЗаполнено(ДанныеСтроки.Себестоимость) Тогда

		ОформлениеСтроки.Ячейки.Себестоимость.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Себестоимость.Текст           = "<Авто>";

	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Материалы.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

Процедура МатериалыДокументОприходованияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Строка = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	СтандартнаяОбработка    = Ложь;
	ФормаВыбора             = Документы.Партия.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.Организация = Организация;
	
	ФормаВыбора.Счет         = Строка.Счет;
	ФормаВыбора.Номенклатура = Строка.Номенклатура;
	ФормаВыбора.Склад        = Склад;
	ФормаВыбора.ВидСубконто  = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	Если ЭтоНовый() Тогда
		ФормаВыбора.КонПериода         = КонецДня(РабочаяДата);
	Иначе
		ФормаВыбора.КонПериода         = Дата;
	КонецЕсли;

	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура МатериалыДокументОприходованияПриИзменении(Элемент)
	
	Строка = ЭлементыФормы.Материалы.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(Строка.ДокументОприходования) Тогда
		Строка.Себестоимость = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗатратыВТабличнойЧастиПриИзменении(Элемент)
	
	УстановитьВидимость();
	
	Если Материалы.Количество() > 0 Тогда
		Ответ = Вопрос(?(СчетаУчетаЗатратВТаблице, "Установить", "Счета затрат будут заданы на закладке ""Счета затрат"". Очистить") + 
		" счета и статьи затрат в таблице ""Материалы""" + 
		?(СчетаУчетаЗатратВТаблице, " в соответствии со значениями по умолчанию?","?"), 
		РежимДиалогаВопрос.ДаНет, , , "Счета затрат");
		
	Иначе
		
		Ответ = КодВозвратаДиалога.Нет;
		
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для Каждого Стр Из Материалы Цикл
			УстановитьСчетаУчетаИАналитикуЗатрат(Стр, 1);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура МатериалыСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	Если Лев(Элемент.Значение.Код, 2) = "26" Тогда
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = "";
	КонецЕсли;
	
	Подразделение = ПодразделениеЗатрат;
	РаботаСДиалогами.УстановитьПодразделениеПоСчету(
		СтрокаТабличнойЧасти.ПодразделениеЗатрат, СтрокаТабличнойЧасти.СчетЗатрат, Организация, Подразделение);
		
КонецПроцедуры

Процедура МатериалыЗаказчикаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.МатериалыЗаказчика.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура МатериалыНоменклатурнаяГруппаПриИзменении(Элемент)
	
	#Если Клиент Тогда
		
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
		Если Лев(СтрокаТабличнойЧасти.СчетЗатрат.Код, 2) = "26" Тогда
				Элемент.Значение = "";
			КонецЕсли;
	#КонецЕсли	
	

КонецПроцедуры


Процедура МатериалыСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

