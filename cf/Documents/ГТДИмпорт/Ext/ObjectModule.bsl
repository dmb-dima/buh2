Перем ПартионныйУчет;
Перем СтруктураИтогов;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПоддержкаПБУ18;

// Заполняет счета БУ в строке табличной части
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ,  СчетаУчета, ЗаполнятьБУ)
	
	Если ЗаполнятьБУ = Истина Тогда
		СтрокаТЧ.СчетУчета  = СчетаУчета.СчетУчета;
		СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетНДСТаможни;
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		СтрокаТЧ.СчетУчета  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет счета НУ в строке табличной части
//
Процедура ЗаполнитьСчетаНУ(СтрокаТЧ, СчетаУчета, ЗаполнятьНУ)
	
	Если ЗаполнятьНУ  = Истина Тогда
		СтрокаТЧ.СчетУчетаНУ = СчетаУчета.СчетУчета;
		
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		СтрокаТЧ.СчетУчетаНУ  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	Склад = Неопределено;
	
	Если ЗначениеЗаполнено(СтрокаТЧ.ДокументПартии) Тогда
		Склад = СтрокаТЧ.ДокументПартии.Склад;
	КонецЕсли;
	
	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
	
	ЗаполнитьСчетаБУ(СтрокаТЧ, СчетаУчета, ЗаполнятьБУ);
	ЗаполнитьСчетаНУ(СтрокаТЧ, СчетаУчета, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Добавляет строку в табличную часть "Разделы"
//
// Возвращаемое значение:
//   строка табличной части, которую добавили.
//
Функция ДобавитьРаздел() Экспорт
	
	НовыйРаздел = Разделы.Добавить();
	
	НовыйРаздел.НДСВВалюте     = Ложь;
	НовыйРаздел.ПошлинаВВалюте = ЗначениеЗаполнено(ДоговорКонтрагента);
	
	НовыйРаздел.СтавкаНДС     = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
	
	#Если Клиент Тогда
		НовыйРаздел.СтавкаПошлины = ВосстановитьЗначение("СтавкаТаможеннойПошлины");
	#КонецЕсли
	
	Возврат НовыйРаздел;
	
КонецФункции // ДобавитьРаздел()

// Вычисляет суммы по данным раздела.
//
// Параметры
//  НомерРаздела   - число, номер раздела по которому надо получить итоги,
//  ВсегоСтоимость - число, в этот параметр будет возвращена сумма фактурной стоимости,
//  ВсегоПошлина   - число, в этот параметр будет возвращена сумма пошлины, 
//  ВсегоНДС       - число, в этот параметр будет возвращена сумма НДС.
//
Процедура ПосчитатьИтогиПоРазделу(НомерРаздела, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС)  Экспорт
	
	ВсегоСтоимость = 0;
	ВсегоПошлина   = 0;
	ВсегоНДС       = 0;
	МассивСтрок    = Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		
		ВсегоСтоимость = ВсегоСтоимость + ЭлементМассива.ФактурнаяСтоимость;
		ВсегоПошлина   = ВсегоПошлина   + ЭлементМассива.СуммаПошлины;
		ВсегоНДС       = ВсегоНДС       + ЭлементМассива.СуммаНДС;
		
	КонецЦикла;
	
КонецПроцедуры // ПосчитатьИтогиПоРазделу()

// Заполняет таб часть Товары по указанному поступлению товаров
//
// Параметры
//  ДокументПоступления - ссылка на документ ПоступлениеТоваровУслуг, определяет документ поступления, по которому надо заполнить этот документ,
//  НомерРаздела        - число, номер раздела, который надо заполнить.
//
Процедура ЗаполнитьПоПоступлению(ДокументПоступления, НомерРаздела) Экспорт
	
	ОснованиеВидОперации = ДокументПоступления.ВидОперации;
	
	Если ОснованиеВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда 
		ТаблицаЗначенийТовары = ДокументПоступления.Товары.Выгрузить();
		
	ИначеЕсли ОснованиеВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		ТаблицаЗначенийТовары = ДокументПоступления.Товары.Выгрузить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДокументПоступления.Оборудование.Выгрузить(),ТаблицаЗначенийТовары);
	Иначе
		Возврат;
		
	КонецЕсли;
	
	Для каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийТовары Цикл
		
		НоваяСтрока = Товары.Добавить();
		
		НоваяСтрока.НомерРаздела     = НомерРаздела;
		НоваяСтрока.ДокументПартии   = ДокументПоступления;
		НоваяСтрока.Количество       = СтрокаТаблицыЗначений.Количество;
		НоваяСтрока.Номенклатура     = СтрокаТаблицыЗначений.Номенклатура;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, Истина, Истина);
		
		НоваяСтрока.СчетУчета		 = СтрокаТаблицыЗначений.СчетУчета;
		НоваяСтрока.СчетУчетаНУ		 = СтрокаТаблицыЗначений.СчетУчета;
		
		// Реквизиты, которых нет в оборудовании.
		Если ОснованиеВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда 
			НоваяСтрока.СтранаПроисхождения = СтрокаТаблицыЗначений.СтранаПроисхождения;
		КонецЕсли;

		
		НоваяСтрока.ФактурнаяСтоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицыЗначений.Сумма, ДокументПоступления.ВалютаДокумента,
		ВалютаДокумента, 
		ЗаполнениеДокументов.КурсДокумента(ДокументПоступления, мВалютаРегламентированногоУчета),КурсДокумента,
		ЗаполнениеДокументов.КратностьДокумента(ДокументПоступления, мВалютаРегламентированногоУчета),КратностьДокумента);
				
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоПоступлению()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРазделы(ТаблицаПоРазделам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ТаможеннаяСтоимость");  //, СтавкаПошлины, СуммаПошлины
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Разделы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Суммы пошлины и НДС в каждом разделе должны совпадать с итогами по разделу в ТЧ Товары.
	Для каждого Раздел Из ТаблицаПоРазделам Цикл
		
		ВсегоСтоимость = 0;
		ВсегоПошлина   = 0;
		ВсегоНДС       = 0;
		НомерРаздела  = ТаблицаПоРазделам.Индекс(Раздел) + 1;
		
		ПосчитатьИтогиПоРазделу(НомерРаздела, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС);
		
		Если ВсегоПошлина <> Раздел.СуммаПошлины Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По разделу """ + СокрЛП(НомерРаздела) + """ сумма пошлины не совпадает с итогом по товарам раздела", Отказ, Заголовок);
		КонецЕсли;
		
		Если ВсегоНДС <> Раздел.СуммаНДС Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По разделу """ + СокрЛП(НомерРаздела) + """ сумма НДС не совпадает с итогом по товарам раздела", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла; // Для каждого Раздел Из ТаблицаПоРазделам Цикл
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаВалюта, ТаблицаРубли, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ФактурнаяСтоимость, ДокументПартии");
	
	СтруктураОбязательныхПолей.Вставить("СчетУчета");
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ТаблицаПоТоварам = ТаблицаВалюта.Скопировать();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРубли,ТаблицаПоТоварам);
	
	ТаблицаПоТоварам.Свернуть("НомерРаздела,НомерСтроки,Номенклатура, Услуга,СчетУчетаНУ,СтатьяЗатратНУ,СчетУчетаНДС", "НДС");
	ТаблицаПоТоварам.Сортировать("НомерРаздела Возр,НомерСтроки возр");
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["Товары"].Представление();
	
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
			
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			Если ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНУ) 
				и СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.СтатьиЗатрат") 
				Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтатьяЗатратНУ) Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Статья затрат НУ""!";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДС) 
			и СтрокаТЧ.НДС <> 0 
			Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, НомерГТД,
	|ВалютаДокумента, КурсДокумента, КратностьДокумента, Контрагент, ДоговорКонтрагентаРегл,
	|КурсВзаиморасчетов,КратностьВзаиморасчетов");
	
	СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
	Если (СтруктураШапкиДокумента.ТаможенныйСборВал > 0) ИЛИ
		(СтруктураШапкиДокумента.ТаможенныйШтрафВал > 0) Тогда		
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентомВал");
	КонецЕсли;
	
	Для каждого Раздел из Разделы Цикл
		Если Раздел.НДСВВалюте ИЛИ Раздел.ПошлинаВВалюте Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентомВал");
			СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ТаможенныйШтраф) тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасходов");
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасходовНУ");
		КонецЕсли;
	КонецЕсли;
		
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагентаРегл, СтруктураШапкиДокумента.ДоговорОрганизацияРегл, Отказ, Заголовок);
	
	// С таможней Оба договора должны иметь вид "Прочее" 
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагента) тогда
		Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Договор расчетов с таможней в валюте (""Валютный депозит"") должен иметь вид ""Прочее"".", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагентаРегл) тогда
		Если СтруктураШапкиДокумента.ВидДоговораРегл <> Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Договор расчетов с таможней в рублях (""Депозит на таможне (руб.)"") должен иметь вид ""Прочее"".", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Подготавливает таблицы для проведения документа
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, ТоварыВВалюте, ТоварыВРублях) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	///////////////////////////////////////////////////
	//Подготовка таблицы по договору расчетов в валюте
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НДС"" КАК Содержание,
	|	2 КАК ПорядокОтражения,
	|	ГТДИмпортРазделы.НомерСтроки КАК НомерРаздела,
	|	ГТДИмпортТовары.НомерСтроки КАК НомерСтроки,
	|	ГТДИмпортТовары.СчетУчета,
	|	ГТДИмпортТовары.Номенклатура,
	|	ГТДИмпортТовары.Количество,
	|	ГТДИмпортТовары.Номенклатура.Услуга как Услуга,
	|	ГТДИмпортТовары.ДокументПартии.Склад КАК Склад,
	|	&ПустоеПодразделение КАК ПодразделениеОрганизации,
	|	ГТДИмпортТовары.ДокументПартии КАК ДокументОприходования,
	|	ГТДИмпортТовары.СчетУчетаНДС,
	|	ГТДИмпортРазделы.СтавкаНДС,
	|	ГТДИмпортТовары.СчетУчетаНУ,
	|	ГТДИмпортТовары.СтатьяЗатратНУ,
	|	0 КАК Сумма,
	|	ГТДИмпортТовары.СуммаНДС как НДС,
	|	0 КАК ФактурнаяСтоимость
	|ИЗ
	|	Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
	|		ПО ГТДИмпортРазделы.НомерСтроки = ГТДИмпортТовары.НомерРаздела
	|
	|ГДЕ
	|	(ГТДИмпортРазделы.НДСВВалюте = ИСТИНА) И
	|	ГТДИмпортРазделы.Ссылка = &Ссылка И
	|	ГТДИмпортТовары.Ссылка = &Ссылка И
	|	(ГТДИмпортТовары.СуммаНДС > 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Пошлина"",
	|	1 КАК ПорядокОтражения,
	|	ГТДИмпортРазделы.НомерСтроки,
	|	ГТДИмпортТовары.НомерСтроки,
	|	ГТДИмпортТовары.СчетУчета,
	|	ГТДИмпортТовары.Номенклатура,
	|	ГТДИмпортТовары.Количество,
	|	ГТДИмпортТовары.Номенклатура.Услуга как Услуга,
	|	ГТДИмпортТовары.ДокументПартии.Склад,
	|	&ПустоеПодразделение,
	|	ГТДИмпортТовары.ДокументПартии,
	|	ГТДИмпортТовары.СчетУчетаНДС,
	|	ГТДИмпортРазделы.СтавкаНДС,
	|	ГТДИмпортТовары.СчетУчетаНУ,
	|	ГТДИмпортТовары.СтатьяЗатратНУ,
	|	ГТДИмпортТовары.СуммаПошлины,
	|	0,
	|	0
	|ИЗ
	|	Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
	|		ПО ГТДИмпортРазделы.НомерСтроки = ГТДИмпортТовары.НомерРаздела
	|
	|ГДЕ
	|	(ГТДИмпортРазделы.ПошлинаВВалюте = ИСТИНА) И
	|	ГТДИмпортРазделы.Ссылка = &Ссылка И
	|	ГТДИмпортТовары.Ссылка = &Ссылка И
	|	(ГТДИмпортТовары.СуммаПошлины > 0)
	|";  
	Если не СтруктураШапкиДокумента.ТаможенныйСборВал = 0 тогда
		Запрос.Текст = Запрос.Текст + "
		| объединить все
		| 
		|"+ 
		"ВЫБРАТЬ
		|	""Сбор"",
		|	3 КАК ПорядокОтражения,
		|	ГТДИмпортРазделы.НомерСтроки,
		|	ГТДИмпортТовары.НомерСтроки,
		|	ГТДИмпортТовары.СчетУчета,
		|	ГТДИмпортТовары.Номенклатура,
		|	ГТДИмпортТовары.Количество,
		|	ГТДИмпортТовары.Номенклатура.Услуга как Услуга,
		|	ГТДИмпортТовары.ДокументПартии.Склад КАК Склад,
		|	&ПустоеПодразделение КАК ПодразделениеОрганизации,
		|	ГТДИмпортТовары.ДокументПартии КАК Партия,
		|	ГТДИмпортТовары.СчетУчетаНДС,
		|	ГТДИмпортРазделы.СтавкаНДС,
		|	ГТДИмпортТовары.СчетУчетаНУ,
		|	ГТДИмпортТовары.СтатьяЗатратНУ,
		|	0 КАК Сумма,
		|	0 КАК СуммаНДС,
		|	ГТДИмпортТовары.ФактурнаяСтоимость КАК ФактурнаяСтоимость
		|ИЗ
		|	Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
		|		ПО ГТДИмпортРазделы.НомерСтроки = ГТДИмпортТовары.НомерРаздела
		|
		|ГДЕ
		|	ГТДИмпортРазделы.Ссылка = &Ссылка И
		|	ГТДИмпортТовары.Ссылка = &Ссылка И
		|	(ГТДИмпортТовары.ФактурнаяСтоимость > 0)
	    |";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	НомерРаздела Возр,
	|	НомерСтроки Возр,
	|	ПорядокОтражения Возр";
	
	// {ОбособленныеПодразделения
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ПустоеПодразделение",
		"ГТДИмпортТовары.ДокументПартии.ПодразделениеОрганизации");
	// }ОбособленныеПодразделения 
	
	ТоварыВВалюте = Запрос.Выполнить().Выгрузить();//Подготовка таблицы по таможенному сбору в валюте
	Если не СтруктураШапкиДокумента.ТаможенныйСборВал = 0 и не ТоварыВВалюте.Итог("ФактурнаяСтоимость") = 0  тогда
        МассивРезультата = ОбщегоНазначения.РаспределитьПропорционально(СтруктураШапкиДокумента.ТаможенныйСборВал,ТоварыВВалюте.ВыгрузитьКолонку("ФактурнаяСтоимость"));
		ТоварыВВалюте.ЗагрузитьКолонку(МассивРезультата,"ФактурнаяСтоимость");
		ТоварыВВалюте.Индексы.Добавить("Содержание");
		СтрокиСбора = ТоварыВВалюте.НайтиСтроки(Новый Структура("Содержание","Сбор"));
		Для каждого СтрокаСбора Из СтрокиСбора Цикл
			СтрокаСбора.Сумма = СтрокаСбора.ФактурнаяСтоимость;
		КонецЦикла;
	КонецЕсли;
	//Подготовка таблицы по договору расчетов в валюте
	///////////////////////////////////////////////////
	
	///////////////////////////////////////////////////
	//Подготовка таблицы по договору расчетов в рублях
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НДС"" КАК Содержание,
	|	2 КАК ПорядокОтражения,
	|	ГТДИмпортРазделы.НомерСтроки КАК НомерРаздела,
	|	ГТДИмпортТовары.НомерСтроки КАК НомерСтроки,
	|	ГТДИмпортТовары.СчетУчета,
	|	ГТДИмпортТовары.Номенклатура,
	|	ГТДИмпортТовары.Количество,
	|	ГТДИмпортТовары.Номенклатура.Услуга как Услуга,
	|	ГТДИмпортТовары.ДокументПартии.Склад КАК Склад,
	|	&ПустоеПодразделение КАК ПодразделениеОрганизации,
	|	ГТДИмпортТовары.ДокументПартии КАК ДокументОприходования,
	|	ГТДИмпортТовары.СчетУчетаНДС,
	|	ГТДИмпортРазделы.СтавкаНДС,
	|	ГТДИмпортТовары.СчетУчетаНУ,
	|	ГТДИмпортТовары.СтатьяЗатратНУ,
	|	0 КАК Сумма,
	|	ГТДИмпортТовары.СуммаНДС как НДС,
	|	0 КАК ФактурнаяСтоимость
	|ИЗ
	|	Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
	|		ПО ГТДИмпортРазделы.НомерСтроки = ГТДИмпортТовары.НомерРаздела
	|
	|ГДЕ
	|	(ГТДИмпортРазделы.НДСВВалюте = Ложь) И
	|	ГТДИмпортРазделы.Ссылка = &Ссылка И
	|	ГТДИмпортТовары.Ссылка = &Ссылка И
	|	(ГТДИмпортТовары.СуммаНДС > 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Пошлина"",
	|	1 КАК ПорядокОтражения,
	|	ГТДИмпортРазделы.НомерСтроки,
	|	ГТДИмпортТовары.НомерСтроки,
	|	ГТДИмпортТовары.СчетУчета,
	|	ГТДИмпортТовары.Номенклатура,
	|	ГТДИмпортТовары.Количество,
	|	ГТДИмпортТовары.Номенклатура.Услуга как Услуга,
	|	ГТДИмпортТовары.ДокументПартии.Склад,
	|	&ПустоеПодразделение КАК ПодразделениеОрганизации,
	|	ГТДИмпортТовары.ДокументПартии,
	|	ГТДИмпортТовары.СчетУчетаНДС,
	|	ГТДИмпортРазделы.СтавкаНДС,
	|	ГТДИмпортТовары.СчетУчетаНУ,
	|	ГТДИмпортТовары.СтатьяЗатратНУ,
	|	ГТДИмпортТовары.СуммаПошлины,
	|	0,
	|	0
	|ИЗ
	|	Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
	|		ПО ГТДИмпортРазделы.НомерСтроки = ГТДИмпортТовары.НомерРаздела
	|
	|ГДЕ
	|	(ГТДИмпортРазделы.ПошлинаВВалюте = Ложь) И
	|	ГТДИмпортРазделы.Ссылка = &Ссылка И
	|	ГТДИмпортТовары.Ссылка = &Ссылка И
	|	(ГТДИмпортТовары.СуммаПошлины > 0)
	|";  
	Если не СтруктураШапкиДокумента.ТаможенныйСбор = 0 тогда
		Запрос.Текст = Запрос.Текст + "
		| объединить все
		| 
		|"+ 
		"ВЫБРАТЬ
		|	""Сбор"",
		|	3 КАК ПорядокОтражения,
		|	ГТДИмпортРазделы.НомерСтроки,
		|	ГТДИмпортТовары.НомерСтроки,
		|	ГТДИмпортТовары.СчетУчета,
		|	ГТДИмпортТовары.Номенклатура,
		|	ГТДИмпортТовары.Количество,
		|	ГТДИмпортТовары.Номенклатура.Услуга как Услуга,
		|	ГТДИмпортТовары.ДокументПартии.Склад КАК Склад,
		|	&ПустоеПодразделение КАК ПодразделениеОрганизации,
		|	ГТДИмпортТовары.ДокументПартии КАК Партия,
		|	ГТДИмпортТовары.СчетУчетаНДС,
		|	ГТДИмпортРазделы.СтавкаНДС,
		|	ГТДИмпортТовары.СчетУчетаНУ,
		|	ГТДИмпортТовары.СтатьяЗатратНУ,
		|	0 КАК Сумма,
		|	0 КАК СуммаНДС,
		|	ГТДИмпортТовары.ФактурнаяСтоимость КАК ФактурнаяСтоимость
		|ИЗ
		|	Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
		|		ПО ГТДИмпортРазделы.НомерСтроки = ГТДИмпортТовары.НомерРаздела
		|
		|ГДЕ
		|	ГТДИмпортРазделы.Ссылка = &Ссылка И
		|	ГТДИмпортТовары.Ссылка = &Ссылка И
		|	(ГТДИмпортТовары.ФактурнаяСтоимость > 0)
	    |";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	НомерРаздела Возр,
	|	НомерСтроки Возр,
	|	ПорядокОтражения Возр";
	
	// {ОбособленныеПодразделения
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ПустоеПодразделение",
		"ГТДИмпортТовары.ДокументПартии.ПодразделениеОрганизации");
	// }ОбособленныеПодразделения 
	
	ТоварыВРублях = Запрос.Выполнить().Выгрузить();
	
	//Подготовка таблицы по таможенному сбору в рублях
	Если не СтруктураШапкиДокумента.ТаможенныйСбор = 0 и не ТоварыВРублях.Итог("ФактурнаяСтоимость") = 0  тогда
        МассивРезультата = ОбщегоНазначения.РаспределитьПропорционально(СтруктураШапкиДокумента.ТаможенныйСбор,ТоварыВРублях.ВыгрузитьКолонку("ФактурнаяСтоимость"));
		ТоварыВРублях.ЗагрузитьКолонку(МассивРезультата,"ФактурнаяСтоимость");
		ТоварыВРублях.Индексы.Добавить("Содержание");
		СтрокиСбора = ТоварыВРублях.НайтиСтроки(Новый Структура("Содержание","Сбор"));
		Для каждого СтрокаСбора Из СтрокиСбора Цикл
			СтрокаСбора.Сумма = СтрокаСбора.ФактурнаяСтоимость;
		КонецЦикла;
	КонецЕсли;//Подготовка таблицы по таможенному сбору в рублях
	//Подготовка таблицы по договору расчетов в рублях
	///////////////////////////////////////////////////
							  
	ДополнениеТаблицыСтрокойШтрафа(СтруктураШапкиДокумента, ТоварыВВалюте, Истина);
	ДополнениеТаблицыСтрокойШтрафа(СтруктураШапкиДокумента, ТоварыВРублях, Ложь);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТоварыВВалюте, СтруктураШапкиДокументаВалюта, Ложь, мВалютаРегламентированногоУчета); //, Разделы
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТоварыВРублях,  СтруктураШапкиДокументаРубли, Ложь, мВалютаРегламентированногоУчета); //, Разделы
	
КонецПроцедуры // ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)()

// Дополняет таблицу товаров строкой штрафа
//
// Параметры
//  СтруктураШапкиДокумента
//  <ТаблицаТоваров>  – <ТаблицаЗНачений> – таблица товаров в нужной валюте
//  <ВалютныйШтраф>  – <Булево> 		  – валюта добавления "Истина" - ин.валюта, "Ложь" - рубли
//
Процедура ДополнениеТаблицыСтрокойШтрафа(СтруктураШапкиДокумента,ТаблицаТоваров,ВалютныйШтраф)
	//Дополним строкой штрафа в валюте
	Если ?(ВалютныйШтраф,СтруктураШапкиДокумента.ТаможенныйШтрафВал<>0,СтруктураШапкиДокумента.ТаможенныйШтраф<>0) Тогда
		СтрокаШтрафа = ТаблицаТоваров.Добавить();
		СтрокаШтрафа.Содержание		= "Штраф";
		СтрокаШтрафа.СчетУчета	= СтруктураШапкиДокумента.СчетУчетаРасходов;
		СтрокаШтрафа.СчетУчетаНУ	= СтруктураШапкиДокумента.СчетУчетаРасходовНУ;
		СтрокаШтрафа.СтатьяЗатратНУ = СтруктураШапкиДокумента.СтатьяПрочихДоходовРасходов;
		СтрокаШтрафа.Сумма 			= СтруктураШапкиДокумента[?(ВалютныйШтраф,"ТаможенныйШтрафВал","ТаможенныйШтраф")];
		СтрокаШтрафа.НДС		= 0;
		СтрокаШтрафа.Услуга			= Истина;
		СтрокаШтрафа.ПодразделениеОрганизации = СтруктураШапкиДокумента.ПодразделениеОрганизации;		
	КонецЕсли; 
КонецПроцедуры // ДополнениеТаблицыСтрокойШтрафа()
 
// Формируем движения по регистрам.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ,Заголовок)
	
	ТаблицаВзаиморасчетов = Неопределено;
	
	ДвиженияПоРегистрамБухгалтерии(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаВзаиморасчетов, Отказ,Заголовок);
	ДвиженияПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
	
	// {УчетДоходовИРасходовИП
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	
	// Из таблицы взаиморасчетов удаляем сумму на оплату НДС.
	Если ТаблицаВзаиморасчетов <> Неопределено И ТаблицаВзаиморасчетов.Количество() > 0 Тогда
		ИндексСтроки = 0;
		Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
			Если СтрокаТЧ.Содержание = "НДС" Тогда
				СуммаНДС = СтрокаТЧ.НДС;
				Пока СуммаНДС > 0 И ИндексСтроки < ТаблицаВзаиморасчетов.Количество() Цикл
					СуммаОплаченногоНДС = Мин(СуммаНДС, ТаблицаВзаиморасчетов[ИндексСтроки].СуммаБУ);
					СуммаНДС = СуммаНДС - СуммаОплаченногоНДС;
					ТаблицаВзаиморасчетов[ИндексСтроки].СуммаБУ = ТаблицаВзаиморасчетов[ИндексСтроки].СуммаБУ - СуммаОплаченногоНДС;
					
					Если ТаблицаВзаиморасчетов[ИндексСтроки].СуммаБУ = 0 И СуммаНДС <> 0 Тогда
						ИндексСтроки = ИндексСтроки + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДоходыИРасходыПредпринимателя.ПоступлениеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, 2, ТаблицаПоТоварам,,,, "СтатьяЗатратНУ", ТаблицаВзаиморасчетов);
	
	// }УчетДоходовИРасходовИП
	
КонецПроцедуры

// Формирует бухгалтерские и налоговые проводки по регистрам бухгалтерии
//
Процедура ДвиженияПоРегистрамБухгалтерии(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаВзаиморасчетов, Отказ,Заголовок)
	
	Проводки = Движения.Хозрасчетный;
	ДатаДок    = СтруктураШапкиДокумента.Дата;
	
	ВидыСубконтоСчетов = Новый Соответствие; // кэш видов субконто
	
	ДополнениеКСодержанию = ?(СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета,""," (в валюте)");
	
	ТаблицыДокумента = Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам);
	
	// По договорам вида "Прочее" зачет авансов происходит только в режиме "Автоматически"
	СтруктураШапкиДокумента.Вставить("СпособЗачетаАвансов", Перечисления.СпособыЗачетаАвансов.Автоматически);
	СтруктураШапкиДокумента.Вставить("СчетУчетаРасчетовПоАвансам", СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
	ТаблицаЗачетаАвансов = Новый ТаблицаЗначений;
		
	ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
		СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, 
		СтруктураШапкиДокумента.НДСВключенВСтоимость, Отказ, Заголовок);
		
	Для каждого СтрокаТЧ из ТаблицаПоТоварам Цикл 
			
		Если СтрокаТЧ.Содержание = "Пошлина" или СтрокаТЧ.Содержание = "Сбор" Тогда
			
			Если СтрокаТЧ.Сумма = 0 Тогда // Пошлина обычно 41.1 - 60.1
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТЧ.Содержание = "Пошлина" тогда
				СодержаниеПроводки  = "Таможенная пошлина "+ДополнениеКСодержанию;
				СтруктураИтогов.Пошлина = СтруктураИтогов.Пошлина + СтрокаТЧ.СуммаБУ;
			Иначе
				СодержаниеПроводки  = "Таможенный сбор "+ДополнениеКСодержанию;
				СтруктураИтогов.Сбор = СтруктураИтогов.Сбор + СтрокаТЧ.СуммаБУ;
			КонецЕсли;
			
			Проводка = Проводки.Добавить();
			
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = СодержаниеПроводки;
			Проводка.Сумма       = СтрокаТЧ.Сумма;
			
			Проводка.СчетДт          = СтрокаТЧ.СчетУчета;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", ?(ПартионныйУчет, СтрокаТЧ.ДокументОприходования, Неопределено));
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтрокаТЧ.Склад);
			
			Если Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["СтатьиЗатрат"]) <> Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаТЧ.СтатьяЗатратНУ);
			ИначеЕсли Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["ПрочиеДоходыИРасходы"]) <> Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СтрокаТЧ.СтатьяЗатратНУ);
			КонецЕсли;
			
			Если НЕ СтрокаТЧ.СчетУчета.Забалансовый Тогда
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
				
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТЧ.СуммаВал;
				КонецЕсли;
				
			Конецесли;
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтрокаТЧ.ПодразделениеОрганизации, СтрокаТЧ.ПодразделениеОрганизации);
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
				Если СтрокаТЧ.СчетУчета = СтрокаТЧ.СчетУчетаНУ Тогда
					СубконтоНУ1 = СтрокаТЧ.Номенклатура;
					СубконтоНУ2 = Новый Структура("Тип,Значение", "Партии", ?(ПартионныйУчет, СтрокаТЧ.ДокументОприходования, Неопределено));
					СубконтоНУ3 = Новый Структура("Тип,Значение", "Склады", СтрокаТЧ.Склад);
				Иначе
					СубконтоНУ1 = СтрокаТЧ.СтатьяЗатратНУ;
					СубконтоНУ2 = Неопределено;
					СубконтоНУ3 = Неопределено;
				КонецЕсли;
				
				СуммаНУ = СтрокаТЧ.Сумма;
				
				НалоговыйУчет.СоздатьПроводкиПоРазнымСчетамБУиНУ(
					СтруктураШапкиДокумента, Проводки, Проводка, Заголовок, СуммаНУ,
					СтрокаТЧ.СчетУчетаНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3);
				
			КонецЕсли;
		
		ИначеЕсли СтрокаТЧ.Содержание = "НДС" Тогда
			
			Если СтрокаТЧ.НДС > 0  Тогда // НДС
				Проводка = Проводки.Добавить();
				
				СтруктураИтогов.НДС = СтруктураИтогов.НДС + СтрокаТЧ.НДС;
				
				Проводка.Период      = ДатаДок;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = СтрокаТЧ.НДС;
				Проводка.Содержание  = "Таможенная стоимость, пошлина " + ДополнениеКСодержанию;
				Проводка.СчетДт      = СтрокаТЧ.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтруктураШапкиДокумента.Ссылка);
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтрокаТЧ.ПодразделениеОрганизации, СтрокаТЧ.ПодразделениеОрганизации);
					
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТЧ.НДСВал;
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.УпрощенныйУчетНДС 
					И СтруктураШапкиДокумента.НДСПредъявленКВычету Тогда
					// Проводки по вычету в случае упрощенного учета НДС

					Проводка = Проводки.Добавить();

					Проводка.Период      = СтруктураШапкиДокумента.Дата;

					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Таможенная пошлина, сбор, штраф";

					Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НДС; //68.02
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

					Проводка.СчетКт      = СтрокаТЧ.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"СФПолученные", СтруктураШапкиДокумента.Ссылка, Истина, Заголовок);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент, Истина);

					Проводка.Сумма       = СтрокаТЧ.НДС;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СтрокаТЧ.Содержание = "Штраф" Тогда
			
			Если СтрокаТЧ.Сумма = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Проводка = Проводки.Добавить();
			
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Таможенный штраф" + ДополнениеКСодержанию;
			Проводка.Сумма       = СтрокаТЧ.Сумма;
			
			Проводка.СчетДт          = СтрокаТЧ.СчетУчета;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СтатьяПрочихДоходовРасходов);
			
			Если НЕ СтрокаТЧ.СчетУчета.Забалансовый Тогда
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
				
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТЧ.СуммаВал;
				КонецЕсли;
				
			Конецесли;
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтрокаТЧ.ПодразделениеОрганизации, СтрокаТЧ.ПодразделениеОрганизации);
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
				Если СтрокаТЧ.СчетУчета = СтрокаТЧ.СчетУчетаНУ Тогда
					СубконтоНУ1 = СтруктураШапкиДокумента.СтатьяПрочихДоходовРасходов;
					СубконтоНУ2 = Неопределено;
					СубконтоНУ3 = Неопределено;
				Иначе
					СубконтоНУ1 = СтрокаТЧ.СтатьяЗатратНУ;
					СубконтоНУ2 = Неопределено;
					СубконтоНУ3 = Неопределено;
				КонецЕсли;
				
				СуммаНУ = СтрокаТЧ.Сумма;
				
				НалоговыйУчет.СоздатьПроводкиПоРазнымСчетамБУиНУ(
					СтруктураШапкиДокумента, Проводки, Проводка, Заголовок, СуммаНУ,
					СтрокаТЧ.СчетУчетаНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрамБухгалтерииРегл()

Функция ПодготовитьТаблицуДляНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	
	ТаблицаДляДвижений = ТаблицаПоТоварам.Скопировать();
	
	СчетаУчетаОС = УчетНДС.ОпределитьСчетаУчетаЦенностей("ОС");
	// Удалим все строки, не относящиеся непосредственно к НДС
	СтрокиКУдалению = Новый массив();
	Для каждого СтрокаТаблицыТоваров Из ТаблицаДляДвижений Цикл
		Если Не СтрокаТаблицыТоваров.Содержание = "НДС" Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицыТоваров);
		Иначе
			Если СтруктураШапкиДокумента.Дата >= '20060101' И Не СчетаУчетаОС.НайтиПоЗначению(СтрокаТаблицыТоваров.СчетУчетаЦенности) = Неопределено Тогда
			    СтрокаТаблицыТоваров.ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС;
			Иначе
				СтрокаТаблицыТоваров.ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежи;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДляДвижений.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Возврат ТаблицаДляДвижений;
	
КонецФункции

// Вызывается из тела процедуры "ДвиженияПоРегистрам" в процедуре формируются движения, отражающие
// поступление доп. расходов в подсистеме учета НДС
Процедура ДвиженияПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		
		Если ТаблицаПоТоварам.Количество() = 0 тогда 
			Возврат; 
		КонецЕсли;

		ТаблицаДляДвижений = ПодготовитьТаблицуДляНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		
		Если ТаблицаДляДвижений.Количество()= 0 Тогда 
			Возврат; 
		КонецЕсли;
	
		УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСПредъявленномуПоставщиком(СтруктураШапкиДокумента, ТаблицаДляДвижений, Движения, Отказ);
		Возврат;
		
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоТоварам.Количество() = 0 тогда 
		Возврат; 
	КонецЕсли;

	ТаблицаДляДвижений = ПодготовитьТаблицуДляНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам);

	Если ТаблицаДляДвижений.Количество() = 0 Тогда 
		Возврат; 
	КонецЕсли;
	
	// Отразим в регистре "НДС предъявленный"
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаДляДвижений, "Товары", ,Движения, Отказ);
	
	ТаблицаДляНДСПартии = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаДляДвижений
				, Новый Структура("ДокументОприходования, Склад, ВидЦенности,СчетУчетаЦенности,СчетУчетаНДС, СтавкаНДС, Номенклатура,Услуга,НДС,СуммаБезНДС,Содержание","Партия"));
	ТаблицаДляНДСПартии.Колонки.Добавить("Количество",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		
	////////////////////////////////////////////////////////////////////
	// При необходимости  - отражаем в регистре партионного учета для НДС
	
	Если ТаблицаДляНДСПартии.Количество()=0 Тогда
		// ГТД только по услугам, товары не обнаружены
		Возврат;
	КонецЕсли; 
		
	//ТаблицаДляНДСПартии.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.ТаможенныеПлатежи,"ВидЦенности");
	ТаблицаДляНДСПартии.ЗаполнитьЗначения(Истина,"Услуга");
	
    ТаблицаДвиженийНДСПартии = Движения.НДСПоПриобретеннымЦенностям;
	
	УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураШапкиДокумента,ТаблицаДляНДСПартии, ТаблицаДвиженийНДСПартии, Отказ);
	// При необходимости  - отражаем в регистре партионного учета для НДС
	////////////////////////////////////////////////////////////////////
	
КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()

Процедура ДвиженияПоРегистрамУСНРегл(СтруктураШапкиДокумента,Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	КУДиР = Движения.КнигаУчетаДоходовИРасходов;
	
	//Пошлина
	Если СтруктураИтогов.Пошлина > 0 Тогда
		СтрокаКУДиР = КУДиР.Добавить();
		СтрокаКУДиР.Период 							= СтруктураШапкиДокумента.Дата;
		СтрокаКУДиР.Организация 					= СтруктураШапкиДокумента.Организация;
		СтрокаКУДиР.РеквизитыПервичногоДокумента 	= НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		СтрокаКУДиР.Содержание 						= "Таможенная пошлина по ГТД " + СтруктураШапкиДокумента.НомерГТД;
		СтрокаКУДиР.Графа7 							= СтруктураИтогов.Пошлина;
	КонецЕсли;
	
	//Сбор
	Если СтруктураИтогов.Сбор > 0 Тогда
		СтрокаКУДиР = КУДиР.Добавить();
		СтрокаКУДиР.Период 							= СтруктураШапкиДокумента.Дата;
		СтрокаКУДиР.Организация 					= СтруктураШапкиДокумента.Организация;
		СтрокаКУДиР.РеквизитыПервичногоДокумента 	= НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		СтрокаКУДиР.Содержание 						= "Таможенный сбор по ГТД " + СтруктураШапкиДокумента.НомерГТД;
		СтрокаКУДиР.Графа7 							= СтруктураИтогов.Сбор;
	КонецЕсли;
	
	//НДС
	Если СтруктураИтогов.НДС > 0 Тогда
		СтрокаКУДиР = КУДиР.Добавить();
		СтрокаКУДиР.Период 							= СтруктураШапкиДокумента.Дата;
		СтрокаКУДиР.Организация 					= СтруктураШапкиДокумента.Организация;
		СтрокаКУДиР.РеквизитыПервичногоДокумента 	= НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		СтрокаКУДиР.Содержание 						= "НДС, уплаченный таможенным органам по ГТД " + СтруктураШапкиДокумента.НомерГТД;
		СтрокаКУДиР.Графа7 							= СтруктураИтогов.НДС;
	КонецЕсли;
		
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, Отказ) Экспорт
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
 	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС, УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов",     "Организация"          , "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов",     "ВидДоговора"          , "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентовРегл", "ВидДоговора"          , "ВидДоговораРегл");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентовРегл", "Организация"          , "ДоговорОрганизацияРегл");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	//Сформируем структуру, аналогичную структуре шапки документа для отработки по валютному договору
	СтруктураШапкиДокументаВалюта = Новый структура();
	Для каждого Параметр Из СтруктураШапкиДокумента Цикл
		Если Прав(Параметр.Ключ,4) = "Регл" тогда
			//Данные, специфические для договора в рублях не требуются
			Продолжить;
		ИначеЕсли Прав(Параметр.Ключ,3) = "Вал" тогда
			//Необходимо установить данные реквизиты без специфического окончания 
			СтруктураШапкиДокументаВалюта.Вставить(Сред(Параметр.Ключ,1,СтрДлина(Параметр.Ключ)-3),Параметр.Значение);	
		ИначеЕсли СтруктураШапкиДокументаВалюта.Свойство(Параметр.Ключ) Тогда
			// Заполнено ранее, возможно - при переименовании реквизитов с постфиксом "Вал"
			продолжить;
		Иначе
			СтруктураШапкиДокументаВалюта.Вставить(Параметр.Ключ,Параметр.Значение);
		КонецЕсли; 
	КонецЦикла; 
	// Устанавливаем валюту документа для данной структуры равной валюте взаиморасчетов
	СтруктураШапкиДокументаВалюта.Вставить("ВалютаДокумента",СтруктураШапкиДокументаВалюта.ВалютаВзаиморасчетов);
	СтруктураШапкиДокументаВалюта.Вставить("КурсДокумента",  СтруктураШапкиДокументаВалюта.КурсВзаиморасчетов);
	СтруктураШапкиДокументаВалюта.Вставить("КратностьДокумента",  СтруктураШапкиДокументаВалюта.КратностьВзаиморасчетов);
	
	//Дополним структуру данными, необходимыми для отработки некоторых стандартных механизмов
	СтруктураШапкиДокументаВалюта.Вставить("НДСВключенВСтоимость", Ложь);
	
	СтруктураШапкиДокументаВалюта.Вставить("СтатьяПрочихДоходовРасходов",СтруктураШапкиДокумента.СтатьяПрочихДоходовРасходов);
	СтруктураШапкиДокументаВалюта.Вставить("СчетУчетаРасходов",  СтруктураШапкиДокумента.СчетУчетаРасходов);
	СтруктураШапкиДокументаВалюта.Вставить("СчетУчетаРасходовНУ",  СтруктураШапкиДокумента.СчетУчетаРасходовНУ);
	
	//Сформируем структуру, аналогичную структуре шапки документа для отработки по валютному договору
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	//Сформируем структуру, аналогичную структуре шапки документа для отработки по рублевому договору
	СтруктураШапкиДокументаРубли = Новый структура();
	Для каждого Параметр Из СтруктураШапкиДокумента Цикл
		Если Прав(Параметр.Ключ,3) = "Вал" тогда
			//Данные, специфические для договора в валюте не требуются
			Продолжить;
		ИначеЕсли Прав(Параметр.Ключ,4) = "Регл" тогда
			//Необходимо установить данные реквизиты без специфического окончания 
			СтруктураШапкиДокументаРубли.Вставить(Сред(Параметр.Ключ,1,СтрДлина(Параметр.Ключ)-4),Параметр.Значение);	
		ИначеЕсли СтруктураШапкиДокументаРубли.Свойство(Параметр.Ключ) Тогда
			// Заполнено ранее, возможно - при переименовании реквизитов с постфиксом "Регл"
			продолжить;
		Иначе
			СтруктураШапкиДокументаРубли.Вставить(Параметр.Ключ,Параметр.Значение);
		КонецЕсли; 
	КонецЦикла; 
	// Устанавливаем валюту документа для данной структуры равной валюте регл. учета
	СтруктураШапкиДокументаРубли.Вставить("ВалютаДокумента",мВалютаРегламентированногоУчета);
	СтруктураШапкиДокументаРубли.Вставить("КурсДокумента",  1);
	СтруктураШапкиДокументаРубли.Вставить("КратностьДокумента",  1);
	// Устанавливаем валюту документа для данной структуры равной валюте регл. учета
	СтруктураШапкиДокументаРубли.Вставить("ВалютаВзаиморасчетов",мВалютаРегламентированногоУчета);
	СтруктураШапкиДокументаРубли.Вставить("КурсВзаиморасчетов",  1);
	СтруктураШапкиДокументаРубли.Вставить("КратностьВзаиморасчетов",  1);
	
	//Дополним структуру данными, необходимыми для отработки некоторых стандартных механизмов
	СтруктураШапкиДокументаРубли.Вставить("НДСВключенВСтоимость", Ложь);
	//Сформируем структуру, аналогичную структуре шапки документа для отработки по рублевому договору
	///////////////////////////////////////////////////////////////////////////////////////////////
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если НЕ (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) Тогда
		Возврат;
	КонецЕсли;
	
	Если (Не Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия) 
		И (Не Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	// Контрагент у нас другой
	Контрагент         = Неопределено;
	ДоговорКонтрагента = Неопределено;
	Сделка             = Неопределено;
	
	// Заполним Табличную часть
	Раздел = ДобавитьРаздел();
	
	ЗаполнитьПоПоступлению(Основание, 1);
	
	ВсегоСтоимость = 0;
	ВсегоПошлина   = 0;
	ВсегоНДС       = 0;
	
	ПосчитатьИтогиПоРазделу(1, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС);
	
	Раздел.ТаможеннаяСтоимость = ВсегоСтоимость;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, Отказ);
	
	СтруктураИтогов = Новый Структура("Пошлина, Сбор, НДС", 0, 0, 0);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиРазделы(Разделы, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварамВалюта,ТаблицаПоТоварамРубли, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПартионныйУчет = УправлениеЗапасами.ВедетсяПартионныйУчет(ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация));
	
	мПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(Организация, Дата);	

	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокументаВалюта, ТаблицаПоТоварамВалюта, Отказ,Заголовок);
		ДвиженияПоРегистрам(СтруктураШапкиДокументаРубли , ТаблицаПоТоварамРубли,  Отказ,Заголовок);
		
		ДвиженияПоРегистрамУСНРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		//Учет курсовых разниц
		БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

