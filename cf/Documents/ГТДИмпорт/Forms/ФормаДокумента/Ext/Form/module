////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// Хранит текущую форму подбора номенклатуры
Перем мФормаПодбораНоменклатуры; 

// Хранит список видов договоров для фильтрации при выборе контрагента договора и параметры
Перем мСписокВидовДоговоров;
Перем мСтруктураДополнительныхПараметров;
Перем мСтруктураДополнительныхПараметровРегл;

// Хранит значение параметра учетной политики УпрощенныйУчетНДС
Перем мУпрощенныйУчетНДС;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ОткрыватьНастройкуДвижений;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Вычисляем суммы по данному разделу.
//
//  Раздел - строка табличной части, определяет раздел, по которому надо посчитать суммы.
//
Процедура ВычислимСуммы(Раздел)

	//ВсегоСтоимость = 0;
	//ВсегоПошлина   = 0;
	//ВсегоНДС       = 0;
	//
	//НомерРаздела = Разделы.Индекс(Раздел) + 1;
	//
	//ПосчитатьИтогиПоРазделу(НомерРаздела, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС);

	//ЭлементыФормы.Всего.Значение        = ОбщегоНазначения.ФорматСумм(ВсегоСтоимость);
	//ЭлементыФормы.ВсегоПошлина.Значение = ОбщегоНазначения.ФорматСумм(ВсегоПошлина);
	//ЭлементыФормы.ВсегоНДС.Значение     = ОбщегоНазначения.ФорматСумм(ВсегоНДС);

	//Раздел.ТаможеннаяСтоимость = ВсегоСтоимость;
	//
	//Раздел.СуммаПошлины = 
	//	   РассчитатьСуммуПошлиныГТД(Раздел.ТаможеннаяСтоимость, Раздел.СтавкаПошлины, Раздел.ПошлинаВВалюте);

	//Раздел.СуммаНДС = РассчитатьСуммуНДСГТД(Раздел.ТаможеннаяСтоимость, Раздел.СуммаПошлины, Раздел.ПошлинаВВалюте, Раздел.СтавкаНДС, Раздел.НДСВВалюте);

КонецПроцедуры // ВычислимСуммы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Считает итоги по ТЧ Товары и выводит строку в подвале.
//
// Параметры
//  Раздел          - строка табличной части, определяет раздел, по которому надо посчитать суммы.
//  ВсегоСтоимость  – число, в этот параметр будет возвращен итог по колонке "ФактурнаяСтоимость",
//  ВсегоПошлина    – число, в этот параметр будет возвращен итог по колонке "СуммаПошлины",
//  ВсегоНДС        – число, в этот параметр будет возвращен итог по колонке "СуммаНДС",
//
Процедура ПосчитатьИтогиПоТоварам(Раздел, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС)
	
	НомерРаздела = Разделы.Индекс(Раздел) + 1;
	
	ПосчитатьИтогиПоРазделу(НомерРаздела, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС);

	ЭлементыФормы.Всего.Значение        = ОбщегоНазначения.ФорматСумм(ВсегоСтоимость);
	ЭлементыФормы.ВсегоПошлина.Значение = ОбщегоНазначения.ФорматСумм(ВсегоПошлина);
	ЭлементыФормы.ВсегоНДС.Значение     = ОбщегоНазначения.ФорматСумм(ВсегоНДС);

КонецПроцедуры // ПосчитатьИтогиПоТоварам()

// Рассчитывает сумму таможенной пошлины.
//
// Параметры
//  ТаможеннаяСтоимость - число, величина таможенной стоимости в валюте документа,
//  СтавкаПошлины       - число, ставка пошлины, 
//  ПошлинаВВалюте      - булево, признак того, что пошлину надо платить в валюте основного договора с таможней.
//
// Возвращаемое значение:
//   Число  – сумма пошлины.
//
Функция РассчитатьСуммуПошлиныГТД(ТаможеннаяСтоимость, СтавкаПошлины, ПошлинаВВалюте)

	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда

		Предупреждение("Не выбрана валюта документа!");
		ТаможеннаяСтоимостьВал = ТаможеннаяСтоимость;
	
	ИначеЕсли ПошлинаВВалюте Тогда

		Если НЕ ЗначениеЗаполнено(мТекущаяВалютаВзаиморасчетов) Тогда

			Предупреждение("Не выбран договор с таможней, который определяет валюту таможенных платежей!");
			ТаможеннаяСтоимостьВал = ТаможеннаяСтоимость;

		Иначе

			ТаможеннаяСтоимостьВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТаможеннаяСтоимость,
			                         ВалютаДокумента, мТекущаяВалютаВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			                         КурсВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);
		КонецЕсли;

	
	Иначе
		ТаможеннаяСтоимостьВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТаможеннаяСтоимость,
		                         ВалютаДокумента, мВалютаРегламентированногоУчета,
		                         ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),1,
		                         ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 1);
	КонецЕсли;

	Возврат ТаможеннаяСтоимостьВал * СтавкаПошлины / 100;

КонецФункции // РассчитатьСуммуПошлиныГТД()

// Рассчитывает сумму таможенной пошлины.
//
// Параметры
//  ТаможеннаяСтоимость -  число, величина таможенной стоимости в валюте документа,
//  СуммаПошлины        - число, сумма пошлины, 
//  СтавкаПошлины       - число, ставка пошлины, 
//  ПошлинаВВалюте      - булево, признак того, что пошлина в валюте основного договора с таможней (иначе в валюте регл. учета).
//  СтавкаНДС           - ссылка на перечисление, определяющая ставку НДС, 
//  НДСВВалюте          - булево, признак того, что НДС надо считать в валюте основного договора с таможней (иначе в валюте регл. учета).
//
// Возвращаемое значение:
//   Число  – сумма НДС.
//
Функция РассчитатьСуммуНДСГТД(ТаможеннаяСтоимость, СуммаПошлины, ПошлинаВВалюте, СтавкаНДС, НДСВВалюте)

	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда

		Предупреждение("Не выбрана валюта документа!");
		БазаНДС = 0;

	ИначеЕсли НДСВВалюте Тогда  // Надо все пересчитать в валюту расчетов с таможней.

		Если НЕ ЗначениеЗаполнено(мТекущаяВалютаВзаиморасчетов) Тогда
			Предупреждение("Не выбран договор с таможней, который определяет валюту таможенных платежей!");
			ТаможеннаяСтоимостьВал = ТаможеннаяСтоимость;

		Иначе

			ТаможеннаяСтоимостьВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТаможеннаяСтоимость,
			                         ВалютаДокумента, мТекущаяВалютаВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			                         КурсВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);
		КонецЕсли;

		Если ПошлинаВВалюте Тогда
			СуммаПошлиныВал = СуммаПошлины;
		Иначе
			Если НЕ ЗначениеЗаполнено(мТекущаяВалютаВзаиморасчетов) Тогда
				СуммаПошлиныВал = СуммаПошлины;
			Иначе
				СуммаПошлиныВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПошлины,
				                   мВалютаРегламентированногоУчета, мТекущаяВалютаВзаиморасчетов,
				                   1, КурсВзаиморасчетов, 1, КратностьВзаиморасчетов);
			КонецЕсли;
		КонецЕсли;

		БазаНДС = ТаможеннаяСтоимостьВал + СуммаПошлиныВал;
	
	Иначе // Надо все пересчитать в валюту регл. учета.

		ТаможеннаяСтоимостьВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТаможеннаяСтоимость,
		                         ВалютаДокумента, мВалютаРегламентированногоУчета,
		                         ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 1,
		                         ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 1);

		Если ПошлинаВВалюте Тогда

			Если НЕ ЗначениеЗаполнено(мТекущаяВалютаВзаиморасчетов) Тогда
				СуммаПошлиныВал = СуммаПошлины;
			Иначе
				СуммаПошлиныВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПошлины,
				                   мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
				                   КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);
			КонецЕсли;
							   
		Иначе
			СуммаПошлиныВал = СуммаПошлины;
		КонецЕсли;

		БазаНДС = ТаможеннаяСтоимостьВал + СуммаПошлиныВал;
	
	КонецЕсли;

	Возврат УчетНДС.РассчитатьСуммуНДС(БазаНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС)); // УчитыватьНДС, Сумма не включает НДС.

КонецФункции // РассчитатьСуммуНДСГТД()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбораНоменклатуры, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Ложь;
	ЕстьСерия = Истина;

	Команда = "ПодборВТабличнуюЧастьТовары";
	Валюта  = ВалютаДокумента;
	ИмяТабличнойЧасти = "Товары";
	
	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"              , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"   , СписокВидовПодбора);
	
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);
	
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, мФормаПодбораНоменклатуры);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, Количество, Цена;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("Количество"      , Количество);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура",     Номенклатура);

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;			

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();

		СтрокаТабличнойЧасти.НомерРаздела     = Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1;
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		СтрокаТабличнойЧасти.Количество     = Количество;
		
		ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти);

		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, Истина, Истина);

	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	ЭлементыФормы["Товары"].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы["Товары"].ТекущаяКолонка = ЭлементыФормы["Товары"].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора(Валютный = Истина)

	Если Валютный Тогда
		Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
			ТаможенныйСборВал  = 0;
			ТаможенныйШтрафВал = 0;
			
			НуженПересчетРазделов = Разделы.Найти(Истина, "НДСВВалюте, ПошлинаВВалюте") <> Неопределено;
			Если НуженПересчетРазделов Тогда
				
				Предупреждение("Валютные суммы НДС и пошлины будут пересчитаны в рубли
				|и перераспределены по строкам разделов.");
				
				Для каждого Раздел Из Разделы Цикл
					
					Если НЕ Раздел.НДСВВалюте И НЕ Раздел.ПошлинаВВалюте Тогда
						Продолжить;
					КонецЕсли;
					
					Если Раздел.НДСВВалюте Тогда
						Раздел.НДСВВалюте = Ложь;
						Раздел.СуммаНДС   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Раздел.СуммаНДС,
					                        мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, 
					                        КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);
					КонецЕсли;
				
					Если Раздел.ПошлинаВВалюте Тогда
						Раздел.ПошлинаВВалюте = Ложь;
						Раздел.СуммаПошлины   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Раздел.СуммаПошлины,
					                            мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, 
					                            КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);
					КонецЕсли;
					
					РаспределитьНДСИПошлинуПоРазделу(Разделы.Индекс(Раздел) + 1);
					
				КонецЦикла;
				
			КонецЕсли;
		
			мТекущаяВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
			КурсВзаиморасчетов           = 1;
			КратностьВзаиморасчетов      = 1;
				
		Иначе
			Если Контрагент <> ДоговорКонтрагента.Владелец Тогда
				Контрагент = ДоговорКонтрагента.Владелец;
			КонецЕсли;
			
			НоваяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(НоваяВалютаВзаиморасчетов, Дата);
			//Предложим пересчитать Таможенный сбор и штрафы
			Если ЗначениеЗаполнено(мТекущаяВалютаВзаиморасчетов)
			   И ЗначениеЗаполнено(НоваяВалютаВзаиморасчетов)
			   И (ТаможенныйСборВал <> 0 ИЛИ ТаможенныйШтрафВал <> 0)
			   И мТекущаяВалютаВзаиморасчетов <> НоваяВалютаВзаиморасчетов Тогда

				Ответ = Вопрос("Изменилась валюта таможенных платежей. Пересчитать суммы таможенного сбора и штрафа? ", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда

					ТаможенныйСборВал  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТаможенныйСборВал, мТекущаяВалютаВзаиморасчетов, НоваяВалютаВзаиморасчетов,
					                                               КурсВзаиморасчетов, СтруктураКурса.Курс, КратностьВзаиморасчетов, СтруктураКурса.Кратность);
				
					ТаможенныйШтрафВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТаможенныйШтрафВал, мТекущаяВалютаВзаиморасчетов, НоваяВалютаВзаиморасчетов,
					                                               КурсВзаиморасчетов, СтруктураКурса.Курс, КратностьВзаиморасчетов, СтруктураКурса.Кратность);
				КонецЕсли;

			КонецЕсли;
			
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
			СчетУчетаРасчетовСКонтрагентомВал = СчетаУчета.СчетРасчетов;

			// Присвоим новые значения
			мТекущаяВалютаВзаиморасчетов = НоваяВалютаВзаиморасчетов;
			КурсВзаиморасчетов           = СтруктураКурса.Курс;
			КратностьВзаиморасчетов      = СтруктураКурса.Кратность;
			
		КонецЕсли;
			
		// Установим заголовки по новой валюте взаиморасчетов
		ПоменятьНадписи();
		
	Иначе // изменился рублевый договор
		
		Если ЗначениеЗаполнено(ДоговорКонтрагентаРегл) Тогда
		
			Если Контрагент <> ДоговорКонтрагентаРегл.Владелец Тогда
				Контрагент = ДоговорКонтрагентаРегл.Владелец;
			КонецЕсли;
		
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагентаРегл);
			СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		
		КонецЕсли;
		
	КонецЕсли; 

	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

// Процедура добавляет строку в ТЧ Разделы и заполняет ее значениями по умолчанию.
//
Процедура ДобавитьРазделГТД()

	ЭлементыФормы.Разделы.ТекущаяСтрока = ДобавитьРаздел();
	УстановитьСтраницуПоРазделамГТД();

КонецПроцедуры // ДобавитьРазделГТД()

// Определяет, какую страницу нужно показывать по разделам ГТД.
//
Процедура УстановитьСтраницуПоРазделамГТД()

//	РаботаСДиалогами.УстановитьТекущуюСтраницу("ПанельРазделов",ЭлементыФормы.ОсновнаяПанель);

	Если Разделы.Количество() < 2 Тогда // есть только один раздел
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ОдинРаздел", ЭлементыФормы.ПанельРазделов);

	Иначе
		РаботаСДиалогами.УстановитьТекущуюСтраницу("НесколькоРазделов", ЭлементыФормы.ПанельРазделов);

	КонецЕсли;

	НомерРаздела = Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1;
	ЭлементыФормы.Товары.ОтборСтрок.НомерРаздела.Использование = Истина;
	ЭлементыФормы.Товары.ОтборСтрок.НомерРаздела.Значение      = НомерРаздела;
	
КонецПроцедуры // УстановитьСтраницуПоРазделамГТД()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Формирует заголовок исходя из переданной валюты (добавляет валюту в конец заголовка).
//
// Параметры
//  ТекстЗаголовка  – строка, текст заголовка,
//  Валюта          – ссылка на справочник валют.
//
Функция СформироватьЗаголовокПоВалюте(ТекстЗаголовка, Валюта)

	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		ТекстЗаголовка  = ТекстЗаголовка + " (<>):";
	Иначе
		ТекстЗаголовка  = ТекстЗаголовка + " (" + СокрЛП(Валюта) + "):";
	КонецЕсли;

	Возврат ТекстЗаголовка;

КонецФункции // СформироватьЗаголовокПоВалюте()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	УСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	ОСН_Физ = (ОбщегоНазначения.Предприниматель(Организация, Дата));
	ОСН_Юр = (НЕ ОСН_Физ И НЕ УСН);
		
	Колонки = ЭлементыФормы.Товары.Колонки;

	Колонки.СчетУчета.Видимость                      = ПоказыватьВДокументахСчетаУчета;
	Колонки.СчетУчетаНДС.Видимость                     = ПоказыватьВДокументахСчетаУчета;
	Колонки.СчетУчетаНУ.Видимость                      = ПоказыватьВДокументахСчетаУчета И ОСН_Юр;
	Колонки.СтатьяЗатратНУ.Видимость                   = ОСН_Юр ИЛИ ОСН_Физ;
	
	ЭлементыФормы.ПанельСчетаУчетаРасчетовСТаможней.Свертка = ?(ПоказыватьВДокументахСчетаУчета,
	                                                            РежимСверткиЭлементаУправления.Нет,
	                                                            РежимСверткиЭлементаУправления.Верх);
												
	ВозможныВалютныеРасчеты = ЗначениеЗаполнено(ДоговорКонтрагента);
	
	ЭлементыФормы.ТаможенныйСборВал.Доступность        = ВозможныВалютныеРасчеты;
	ЭлементыФормы.НадписьТаможенныйСборВал.Доступность = ВозможныВалютныеРасчеты;
	
	ЭлементыФормы.ТаможенныйШтрафВал.Доступность        = ВозможныВалютныеРасчеты;
	ЭлементыФормы.НадписьТаможенныйШтрафВал.Доступность = ВозможныВалютныеРасчеты;
	
	ЭлементыФормы.ПошлинаВВалюте.Доступность = ВозможныВалютныеРасчеты;
	ЭлементыФормы.НДСВВалюте.Доступность     = ВозможныВалютныеРасчеты;
	
	ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомВал.АвтоОтметкаНезаполненного = ВозможныВалютныеРасчеты;
	Если НЕ ВозможныВалютныеРасчеты Тогда
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомВал.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	ЕстьШтрафы = ТаможенныйШтрафВал > 0 ИЛИ ТаможенныйШтраф > 0;
	ЭлементыФормы.СчетУчетаРасходовБУ.АвтоОтметкаНезаполненного = ЕстьШтрафы;
	Если НЕ ЕстьШтрафы Тогда
		ЭлементыФормы.СчетУчетаРасходовБУ.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	ЭлементыФормы.СчетУчетаРасходовНУ.АвтоОтметкаНезаполненного = ЕстьШтрафы;
	Если НЕ ЕстьШтрафы Тогда
		ЭлементыФормы.СчетУчетаРасходовНУ.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.НДС.Видимость = мУпрощенныйУчетНДС;
	
КонецПроцедуры // УстановитьВидимость()

// Формирует надписи элементов формы, в частности при смене валют
//
Процедура ПоменятьНадписи()

	Если ЭлементыФормы.Разделы.ТекущиеДанные.ПошлинаВВалюте Тогда
		ЭлементыФормы.НадписьСуммаПошлины.Заголовок           = СформироватьЗаголовокПоВалюте("Пошлина", мТекущаяВалютаВзаиморасчетов);
		ЭлементыФормы.Товары.Колонки.СуммаПошлины.ТекстШапки  = СформироватьЗаголовокПоВалюте("Пошлина", мТекущаяВалютаВзаиморасчетов);
		ЭлементыФормы.НадписьВсегоПошлина.Заголовок           = СформироватьЗаголовокПоВалюте("Пошлина", мТекущаяВалютаВзаиморасчетов);

	Иначе
		ЭлементыФормы.НадписьСуммаПошлины.Заголовок           = СформироватьЗаголовокПоВалюте("Пошлина",мВалютаРегламентированногоУчета);
		ЭлементыФормы.Товары.Колонки.СуммаПошлины.ТекстШапки  = СформироватьЗаголовокПоВалюте("Пошлина", мВалютаРегламентированногоУчета);
		ЭлементыФормы.НадписьВсегоПошлина.Заголовок           = СформироватьЗаголовокПоВалюте("Пошлина", мВалютаРегламентированногоУчета);

	КонецЕсли;

	Если ЭлементыФормы.Разделы.ТекущиеДанные.НДСВВалюте Тогда
		ЭлементыФормы.НадписьСуммаНДС.Заголовок          = СформироватьЗаголовокПоВалюте("НДС",мТекущаяВалютаВзаиморасчетов);
		ЭлементыФормы.Товары.Колонки.СуммаНДС.ТекстШапки = СформироватьЗаголовокПоВалюте("НДС", мТекущаяВалютаВзаиморасчетов);
		ЭлементыФормы.НадписьВсегоНДС.Заголовок          = СформироватьЗаголовокПоВалюте("НДС", мТекущаяВалютаВзаиморасчетов);

	Иначе
		ЭлементыФормы.НадписьСуммаНДС.Заголовок          = СформироватьЗаголовокПоВалюте("НДС",мВалютаРегламентированногоУчета);
		ЭлементыФормы.Товары.Колонки.СуммаНДС.ТекстШапки = СформироватьЗаголовокПоВалюте("НДС", мВалютаРегламентированногоУчета);
		ЭлементыФормы.НадписьВсегоНДС.Заголовок          = СформироватьЗаголовокПоВалюте("НДС", мВалютаРегламентированногоУчета);

	КонецЕсли;

	ЭлементыФормы.НадписьВсего.Заголовок = СформироватьЗаголовокПоВалюте("Всего", ВалютаДокумента);

	ЭлементыФормы.НадписьТаможеннаяСтоимость.Заголовок           = СформироватьЗаголовокПоВалюте("Таможенная стоимость", ВалютаДокумента);
	ЭлементыФормы.Разделы.Колонки.ТаможеннаяСтоимость.ТекстШапки = СформироватьЗаголовокПоВалюте("Таможенная стоимость", ВалютаДокумента);

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = "(" + РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента,
	                                                                                     КурсДокумента,КратностьДокумента,
	                                                                                     мВалютаРегламентированногоУчета) + ")";

	ЭлементыФормы.НадписьДоговорРегл.Заголовок        = СформироватьЗаголовокПоВалюте("Депозит на таможне", мВалютаРегламентированногоУчета);
	ЭлементыФормы.НадписьТаможенныйСбор.Заголовок     = СформироватьЗаголовокПоВалюте("Таможенный сбор",    мВалютаРегламентированногоУчета);
	ЭлементыФормы.НадписьТаможенныйШтраф.Заголовок    = СформироватьЗаголовокПоВалюте("Таможенный штраф",   мВалютаРегламентированногоУчета);
	
	ТекстВалюты = ?(мТекущаяВалютаВзаиморасчетов = мВалютаРегламентированногоУчета, "", мТекущаяВалютаВзаиморасчетов);
	ЭлементыФормы.НадписьДоговор.Заголовок            = СформироватьЗаголовокПоВалюте("Валютный депозит", ТекстВалюты);
	ЭлементыФормы.НадписьТаможенныйСборВал.Заголовок  = СформироватьЗаголовокПоВалюте("Таможенный сбор",  ТекстВалюты);
	ЭлементыФормы.НадписьТаможенныйШтрафВал.Заголовок = СформироватьЗаголовокПоВалюте("Таможенный штраф", ТекстВалюты);

	ЭлементыФормы.РамкаТоварыРаздела.Заголовок = "Товары по разделу " + (Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1);

	ФорматнаяСтрока = "БЛ='" + СокрЛП(мВалютаРегламентированногоУчета) + "'; БИ='" + СокрЛП(мТекущаяВалютаВзаиморасчетов) + "'";

	ЭлементыФормы.Разделы.Колонки.ПошлинаВВалюте.Формат                   = ФорматнаяСтрока;
	ЭлементыФормы.Разделы.Колонки.ПошлинаВВалюте.ЭлементУправления.Формат = ФорматнаяСтрока;
	ЭлементыФормы.Разделы.Колонки.НДСВВалюте.Формат                       = ФорматнаяСтрока;
	ЭлементыФормы.Разделы.Колонки.НДСВВалюте.ЭлементУправления.Формат     = ФорматнаяСтрока;

КонецПроцедуры // ПоменятьНадписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
	   И (Не ПараметрОснование.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
	   И (Не ПараметрОснование.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование) Тогда
		Предупреждение("Документ можно вводить только на основании документа """ + СокрЛП(ПараметрОснование.Метаданные().Представление())
		               + """ с видом операции """ + СокрЛП(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
		               + """ или """ + СокрЛП(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование)
		               + """.");

		Отказ = Истина;

		Возврат;

	КонецЕсли;
	  	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Покупка",ПараметрОбъектКопирования);

		Если Разделы.Количество() = 0 Тогда
			ДобавитьРазделГТД(); // В ГТД должен быть хотя бы один раздел.
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
			СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
			НДСПредъявленКВычету = Истина;
		КонецЕсли;

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");


	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("ЕдиницаХранения");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("ФактурнаяСтоимость");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("СуммаПошлины");
	СтруктураКолонок.Вставить("СчетУчета");
	СтруктураКолонок.Вставить("СчетУчетаНДС");
	СтруктураКолонок.Вставить("СчетУчетаНУ");
	СтруктураКолонок.Вставить("СтатьяЗатратНУ");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("ТаможеннаяСтоимость");
	СтруктураКолонок.Вставить("СтавкаПошлины");
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаПошлины");
	СтруктураКолонок.Вставить("СуммаНДС");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Разделы.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
 	мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	
	// {ОбособленныеПодразделения
 	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	ЭлементыФормы.Разделы.ТекущаяСтрока = Разделы[0];

	// Установим страницу по разделам ГТД.
	УстановитьСтраницуПоРазделамГТД();

	ПоменятьНадписи();

	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,Контрагент,НомерГТД");

	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		ТаможеннаяСтоимость = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимость;
		СтавкаПошлины       = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаПошлины;
		ПошлинаВВалюте      = ЭлементыФормы.Разделы.ТекущиеДанные.ПошлинаВВалюте;
		СтавкаНДС           = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаНДС;
		НДСВВалюте          = ЭлементыФормы.Разделы.ТекущиеДанные.НДСВВалюте;
		
		Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
			СуммаПошлины = ТаможеннаяСтоимость * СтавкаПошлины / 100;
		Иначе
			СуммаПошлины = РассчитатьСуммуПошлиныГТД(ТаможеннаяСтоимость, СтавкаПошлины, ПошлинаВВалюте)
		КонецЕсли;

		ЭлементыФормы.Разделы.ТекущиеДанные.СуммаПошлины = СуммаПошлины ;
		ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС = РассчитатьСуммуНДСГТД(ТаможеннаяСтоимость, СуммаПошлины, ПошлинаВВалюте, СтавкаНДС, НДСВВалюте);
		
	КонецЕсли;
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если (РежимЗаписи = РежимЗаписиДокумента.Запись ИЛИ РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		
		Если Разделы.Количество() <> 0 Тогда
			СтруктураПоиска = Новый Структура("НомерРаздела");
		КонецЕсли;
		Для Каждого Раздел Из Разделы Цикл
			
			СтруктураПоиска.НомерРаздела = Раздел.НомерСтроки;
			СтрокиТовары = Товары.НайтиСтроки(СтруктураПоиска);
			СуммаПоТоварам = 0;
			Для Каждого СтрокаТовары Из СтрокиТовары Цикл
				СуммаПоТоварам = СуммаПоТоварам + СтрокаТовары.ФактурнаяСтоимость;
			КонецЦикла;
			Если СуммаПоТоварам <> Раздел.ТаможеннаяСтоимость Тогда
				Ответ = Вопрос("Не совпадают таможенная стоимость и фактурная стоимость по разделу "+Раздел.НомерСтроки+" . Пересчитать таможенную стоимость?",
								РежимДиалогаВопрос.ДаНет,
								,
								КодВозвратаДиалога.Да);
		
				Если Ответ = КодВозвратаДиалога.Да Тогда
					Раздел.ТаможеннаяСтоимость = СуммаПоТоварам;
				КонецЕсли;
			КонецЕсли;
	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// формы, вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПустаяСсылка();
	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ТекущаяВалютаДокумента = ВалютаДокумента;

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента,
	                                            мВалютаРегламентированногоУчета, , "Товары");

	Если СтруктураЗначений <> Неопределено Тогда

		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", 
		                   мВалютаРегламентированногоУчета, , СтруктураЗначений);

		// рассчитаем недостающие реквизиты
		Для Каждого СтрокаТабличнойЧасти Из Разделы Цикл

			// Посчитаем суммы
			ВычислимСуммы(СтрокаТабличнойЧасти);

		КонецЦикла;

	КонецЕсли;

	УстановитьВидимость();

	ПоменятьНадписи();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()


// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// формы, вызывает процедуру добавления раздела ГТД.
//
Процедура ДействияФормыДобавитьРаздел(Кнопка)

	ДобавитьРазделГТД();

КонецПроцедуры // ДействияФормыДобавитьРаздел()

// Процедура вызывается при нажатии кнопки "УдалитьРаздел" командной панели
// формы, вызывает процедуру добавления раздела ГТД.
//
Процедура ДействияФормыУдалитьРаздел(Кнопка)

	Если Разделы.Количество() = 1 Тогда 
		Предупреждение("В ГТД должен быть хотя бы один раздел!");
		Возврат;
	КонецЕсли;

	НомерРаздела = Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1;

	Разделы.Удалить(Разделы[НомерРаздела - 1]);

	//Надо грохнуть все записи этого раздела
	МассивСтрок = Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));

	Для каждого ЭлементМассива Из МассивСтрок Цикл
		Товары.Удалить(ЭлементМассива);
	КонецЦикла;

	// Надо переименовать все последующие разделы.
	Для Сч = НомерРаздела + 1 По Разделы.Количество()+ 1 Цикл

		МассивСтрок = Товары.НайтиСтроки(Новый Структура("НомерРаздела", Сч));
		КоличествоСтрок = МассивСтрок.Количество();
		Для каждого ЭлементМассива Из МассивСтрок Цикл
			ЭлементМассива.НомерРаздела = Сч - 1;
		КонецЦикла;

	КонецЦикла;

	НомерРаздела = ?(НомерРаздела > 2,НомерРаздела - 1 , 1);

	ЭлементыФормы.Разделы.ТекущаяСтрока = Разделы[НомерРаздела - 1];

	УстановитьСтраницуПоРазделамГТД();

КонецПроцедуры // ДействияФормыУдалитьРаздел()



Процедура РаспределитьНДСИПошлинуПоРазделу(НомерРаздела)

	// Проверим, есть ли что распределять.
	ТаможеннаяСтоимость = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимость;
	СуммаПошлины        = ЭлементыФормы.Разделы.ТекущиеДанные.СуммаПошлины;
	СуммаНДС            = ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС;

	МассивСтрок  = Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
    БазисРаспределения = Новый Массив();
	
	ВсегоСтоимость = 0;
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		ВсегоСтоимость = ВсегоСтоимость + ЭлементМассива.ФактурнаяСтоимость;
		БазисРаспределения.Добавить(ЭлементМассива.ФактурнаяСтоимость);
	КонецЦикла;

	ЭлементыФормы.Всего.Значение        = ОбщегоНазначения.ФорматСумм(ВсегоСтоимость);
	ЭлементыФормы.ВсегоПошлина.Значение = ОбщегоНазначения.ФорматСумм(СуммаПошлины);
	ЭлементыФормы.ВсегоНДС.Значение     = ОбщегоНазначения.ФорматСумм(СуммаНДС);
	
	Если ВсегоСтоимость = 0 Тогда

		Сообщить("Общая сумма фактурной стоимости раздела " + НомерРаздела + " нулевая!
		               |Распределение невозможно.", СтатусСообщения.Важное);
		Возврат;

	КонецЕсли;

	Если не СуммаПошлины = 0 Тогда
		МассивРезультатаРаспределения_Пошлина = ОбщегоНазначения.РаспределитьПропорционально(СуммаПошлины, БазисРаспределения);
	КонецЕсли; 
	Если не СуммаНДС = 0 Тогда
		МассивРезультатаРаспределения_НДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаНДС, БазисРаспределения);
	КонецЕсли; 
	
	Для ИндексСтроки =0 по МассивСтрок.Количество()-1 Цикл
		Если не СуммаПошлины = 0 Тогда
			МассивСтрок[ИндексСтроки].СуммаПошлины = МассивРезультатаРаспределения_Пошлина[ИндексСтроки];
		Иначе
			МассивСтрок[ИндексСтроки].СуммаПошлины = 0;
		КонецЕсли; 
		Если не СуммаНДС = 0 Тогда
			МассивСтрок[ИндексСтроки].СуммаНДС = МассивРезультатаРаспределения_НДС[ИндексСтроки];
		Иначе
			МассивСтрок[ИндексСтроки].СуммаНДС = 0;
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Распределить" командной панели
// ТЧ Товары, вызывает распределение сумм пошлины и НДС по строкам раздела.
//
Процедура КоманднаяПанельТоварыРаспределить(Кнопка)

	НомерРаздела = Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1;
	
	РаспределитьНДСИПошлинуПоРазделу(НомерРаздела);
	
	ПоменятьНадписи();

КонецПроцедуры //  КоманднаяПанельТоварыРаспределить()

// Процедура вызывается при нажатии кнопки "ДобавитьИзПоступления" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДобавитьИзПоступления(Кнопка)

	НомерРаздела = Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1;
	
	ФормаВыбора = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора("ФормаВыбора" , ЭтаФорма);
	ФормаВыбора.ДокументСписок.Отбор.Организация.Установить(Организация);
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	ДокументПоступления = ФормаВыбора.ОткрытьМодально();
	
	ВыборПроизведен = ДокументПоступления <> Неопределено;

	Если ВыборПроизведен Тогда
		ЗаполнитьПоПоступлению(ДокументПоступления, НомерРаздела);
	КонецЕсли;

	// Посчитаем суммы
	ВычислимСуммы(ЭлементыФормы.Разделы.ТекущиеДанные);

КонецПроцедуры // КоманднаяПанельТоварыДобавитьИзПоступления()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Если НачалоМесяца(мТекущаяДатаДокумента) <> НачалоМесяца(Дата) Тогда
		мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
		УстановитьВидимость();
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	УстановитьВидимость();
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект,мСписокВидовДоговоров,мСтруктураДополнительныхПараметров);
	ПриИзмененииДоговора();
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект,мСписокВидовДоговоров,мСтруктураДополнительныхПараметровРегл,"ДоговорКонтрагентаРегл");
	ПриИзмененииДоговора(Ложь);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)


	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект,мСписокВидовДоговоров,мСтруктураДополнительныхПараметров);

	// Могли поменять договор.
	ПриИзмененииДоговора();
	
	//Подбор валютного договора
	////////////////////////////////////////

	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект,мСписокВидовДоговоров,мСтруктураДополнительныхПараметровРегл,"ДоговорКонтрагентаРегл");
	
	// Могли поменять договор.
	ПриИзмененииДоговора(Ложь);
	
	//Подбор договора регл.
	////////////////////////////////////////


КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        Перечисления.ВидыДоговоровКонтрагентов.Прочее, СтандартнаяОбработка, мСтруктураДополнительныхПараметров)

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()


Процедура ДоговорКонтрагентаРеглПриИзменении(Элемент)
	ПриИзмененииДоговора(Ложь);
КонецПроцедуры


// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагентаРегл
//
Процедура ДоговорКонтрагентаРеглНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагентаРегл,
	                                        Перечисления.ВидыДоговоровКонтрагентов.Прочее, СтандартнаяОбработка, мСтруктураДополнительныхПараметровРегл)

КонецПроцедуры // ДоговорКонтрагентаРеглНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СчетУчетаРасчетовСКонтрагентом".
//
Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СчетУчетаРасходовБУ".
//
Процедура СчетУчетаРасходовБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетУчетаРасходов".
//
Процедура СчетУчетаРасходовБУПриИзменении(Элемент)
	
	СчетУчетаРасходовНУ = Элемент.Значение;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СчетУчетаРасходовНУ".
//
Процедура СчетУчетаРасходовНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СчетУчетаРасчетовСКонтрагентомВал".
//
Процедура СчетУчетаРасчетовСКонтрагентомВалОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ РАЗДЕЛЫ

// Процедура - обработчик события "ПриИзменении" поля ПошлинаВВалюте
//
Процедура РазделыПошлинаВВалютеПриИзменении(Элемент)

	ТаможеннаяСтоимость = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимость;
	СтавкаПошлины       = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаПошлины;
	СуммаПошлины        = ЭлементыФормы.Разделы.ТекущиеДанные.СуммаПошлины;
	ПошлинаВВалюте      = ЭлементыФормы.Разделы.ТекущиеДанные.ПошлинаВВалюте;
	СтавкаНДС           = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаНДС;
	НДСВВалюте          = ЭлементыФормы.Разделы.ТекущиеДанные.НДСВВалюте;

	Если ЗначениеЗаполнено(СуммаПошлины) Тогда

		Ответ = Вопрос("Пересчитать сумму пошлины и сумму НДС?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда

			Если ПошлинаВВалюте Тогда // была не в валюте, надо пересчитывать в валюту

				СуммаПошлины = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПошлины,
				                         мВалютаРегламентированногоУчета, мТекущаяВалютаВзаиморасчетов,
				                         1, КурсВзаиморасчетов, 1, КратностьВзаиморасчетов);

			Иначе // Была в валюте, надо пересчитывать в регл. учет.

				СуммаПошлины = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПошлины,
				                         мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, 
				                         КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);

			КонецЕсли;

			ЭлементыФормы.Разделы.ТекущиеДанные.СуммаПошлины = СуммаПошлины;
			ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС     = РассчитатьСуммуНДСГТД(ТаможеннаяСтоимость, СуммаПошлины, ПошлинаВВалюте, СтавкаНДС, НДСВВалюте);
			
			РаспределитьНДСИПошлинуПоРазделу(Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1);

		КонецЕсли;

	КонецЕсли; // Если ЗначениеЗаполнено(СуммаПошлины) Тогда

	// Поменяем надписи
	ПоменятьНадписи();

КонецПроцедуры // РазделыПошлинаВВалютеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля НДСВВалюте
//
Процедура РазделыНДСВВалютеПриИзменении(Элемент)

	НДСВВалюте          = ЭлементыФормы.Разделы.ТекущиеДанные.НДСВВалюте;
	СуммаНДС            = ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС;

	Если ЗначениеЗаполнено(СуммаНДС) Тогда

		Ответ = Вопрос("Пересчитать сумму НДС?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда

			Если НДСВВалюте Тогда // была не в валюте, надо пересчитывать в валюту

				СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДС,
				                         мВалютаРегламентированногоУчета, мТекущаяВалютаВзаиморасчетов,
				                         1, КурсВзаиморасчетов, 1, КратностьВзаиморасчетов);

			Иначе // Была в валюте, надо пересчитывать в регл. учет.

				СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДС,
				                         мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, 
				                         КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);

			КонецЕсли; 

			ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС = СуммаНДС;
			РаспределитьНДСИПошлинуПоРазделу(Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1);

		КонецЕсли; 

	КонецЕсли; // Если ЗначениеЗаполнено(СуммаНДС) Тогда

	// Поменяем надписи.
	ПоменятьНадписи();

КонецПроцедуры // РазделыНДСВВалютеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ТаможеннаяСтоимость
//
Процедура РазделыТаможеннаяСтоимостьПриИзменении(Элемент)

	ТаможеннаяСтоимость = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимость;
	СтавкаПошлины       = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаПошлины;
	ПошлинаВВалюте      = ЭлементыФормы.Разделы.ТекущиеДанные.ПошлинаВВалюте;
	СтавкаНДС           = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаНДС;
	НДСВВалюте          = ЭлементыФормы.Разделы.ТекущиеДанные.НДСВВалюте;
	СуммаПошлины        = РассчитатьСуммуПошлиныГТД(ТаможеннаяСтоимость, СтавкаПошлины, ПошлинаВВалюте);

	ЭлементыФормы.Разделы.ТекущиеДанные.СуммаПошлины = СуммаПошлины ;
	ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС     = РассчитатьСуммуНДСГТД(ТаможеннаяСтоимость, СуммаПошлины, ПошлинаВВалюте, СтавкаНДС, НДСВВалюте);

КонецПроцедуры // РазделыТаможеннаяСтоимостьПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля СтавкаПошлины
//
Процедура РазделыСтавкаПошлиныПриИзменении(Элемент)

	СохранитьЗначение("СтавкаТаможеннойПошлины", ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаПошлины);

	ТаможеннаяСтоимость = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимость;
	СтавкаПошлины       = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаПошлины;
	ПошлинаВВалюте      = ЭлементыФормы.Разделы.ТекущиеДанные.ПошлинаВВалюте;
	СтавкаНДС           = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаНДС;
	НДСВВалюте          = ЭлементыФормы.Разделы.ТекущиеДанные.НДСВВалюте;
	СуммаПошлины        = РассчитатьСуммуПошлиныГТД(ТаможеннаяСтоимость, СтавкаПошлины, ПошлинаВВалюте);

	ЭлементыФормы.Разделы.ТекущиеДанные.СуммаПошлины = СуммаПошлины;
	ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС     = РассчитатьСуммуНДСГТД(ТаможеннаяСтоимость, СуммаПошлины, ПошлинаВВалюте, СтавкаНДС, НДСВВалюте);

КонецПроцедуры // РазделыСтавкаПошлиныПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля СуммаПошлины
//
Процедура РазделыСуммаПошлиныПриИзменении(Элемент)

	ТаможеннаяСтоимость = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимость;
	СуммаПошлины        = ЭлементыФормы.Разделы.ТекущиеДанные.СуммаПошлины;
	ПошлинаВВалюте      = ЭлементыФормы.Разделы.ТекущиеДанные.ПошлинаВВалюте;
	СтавкаНДС           = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаНДС;
	НДСВВалюте          = ЭлементыФормы.Разделы.ТекущиеДанные.НДСВВалюте;

	ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС = РассчитатьСуммуНДСГТД(ТаможеннаяСтоимость, СуммаПошлины, ПошлинаВВалюте, СтавкаНДС, НДСВВалюте);

КонецПроцедуры // РазделыСуммаПошлиныПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля СтавкаНДС
//
Процедура РазделыСтавкаНДСПриИзменении(Элемент)

	ТаможеннаяСтоимость = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимость;
	СтавкаПошлины       = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаПошлины;
	ПошлинаВВалюте      = ЭлементыФормы.Разделы.ТекущиеДанные.ПошлинаВВалюте;
	СуммаПошлины        = ЭлементыФормы.Разделы.ТекущиеДанные.СуммаПошлины;
	СтавкаНДС           = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаНДС;
	НДСВВалюте          = ЭлементыФормы.Разделы.ТекущиеДанные.НДСВВалюте;

	ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС = РассчитатьСуммуНДСГТД(ТаможеннаяСтоимость, СуммаПошлины, ПошлинаВВалюте, СтавкаНДС, НДСВВалюте);

КонецПроцедуры // РазделыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части "Разделы"
//
Процедура РазделыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикОжиданияРазделыПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры //РазделыПриАктивизацииСтроки()

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля Разделы
//
Процедура ОбработчикОжиданияРазделыПриАктивизацииСтроки()
	НомерРаздела = Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1;
	ЭлементыФормы.Разделы.ТекущаяСтрока = Разделы[НомерРаздела - 1];
	
	ЭлементыФормы.Товары.ОтборСтрок.НомерРаздела.Использование = Истина;
	ЭлементыФормы.Товары.ОтборСтрок.НомерРаздела.Значение      = НомерРаздела;

	// Посчитаем суммы
	ВсегоСтоимость = 0;
	ВсегоПошлина   = 0;
	ВсегоНДС       = 0;
	ПосчитатьИтогиПоТоварам(ЭлементыФормы.Разделы.ТекущиеДанные, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС);

	// Поменяем надписи.
	ПоменятьНадписи();
КонецПроцедуры // ОбработчикОжиданияРазделыПриАктивизацииСтроки

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда
		ЭлементыФормы.Товары.ТекущиеДанные.НомерРаздела = ЭлементыФормы.Товары.ОтборСтрок.НомерРаздела.Значение;
	КонецЕсли; 

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриОкончанииРедактирования" табличной части "Товары".
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	// Посчитаем суммы
	ВычислимСуммы(ЭлементыФормы.Разделы.ТекущиеДанные);

КонецПроцедуры // ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" табличной части "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	// Посчитаем суммы
	ВычислимСуммы(ЭлементыФормы.Разделы.ТекущиеДанные);

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	// Заполним страну происхождения по умолчанию.
	ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТЧ);

	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, Истина, Истина);

	ТоварыПриАктивизацииСтроки(Элемент);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" колонки "Документ партии"
// табличной части "Товары".
// 
//  Вызывает процедуру подстановки счетов учета номенклатуры.
//
Процедура ТоварыДокументПартииПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;	
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, Истина, Истина);

	ТоварыПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры // ТоварыДокументПартииПриИзменении()

// Процедура - обработчик события "НачалоВыбора" колонки "Документ партии"
// табличной части "Товары".
// 
//  Открывает форму выбора с отбором по организации 
//
Процедура ТоварыДокументПартииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора("ФормаВыбора" , Элемент);
	ФормаВыбора.ДокументСписок.Отбор.Организация.Установить(Организация);
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ТоварыПриАктивизацииСтроки(Элемент)

	Если НЕ (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
		СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

		Если СтрокаТЧ = Неопределено Тогда
			ЭлементыФормы.Товары.Колонки.СтатьяЗатратНУ.Доступность = Ложь;
			Возврат;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНУ) Тогда
			ЭлементыФормы.Товары.Колонки.СтатьяЗатратНУ.Доступность = Ложь;
			Возврат;
		КонецЕсли;

		Если СтрокаТЧ.СчетУчетаНУ.ВидыСубконто.Количество() = 0 Тогда
			ЭлементыФормы.Товары.Колонки.СтатьяЗатратНУ.Доступность = Ложь;
			Возврат;
		КонецЕсли;

		Если СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.СтатьиЗатрат")  ИЛИ СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ЭлементыФормы.Товары.Колонки.СтатьяЗатратНУ.Доступность = Истина;
		Иначе
			ЭлементыФормы.Товары.Колонки.СтатьяЗатратНУ.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыПриАктивизацииСтроки()

Процедура ТоварыСчетУчетаНУПриИзменении(Элемент)

	ТоварыПриАктивизацииСтроки(Элемент);

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНУ) Тогда
		СтрокаТЧ.СтатьяЗатратНУ = Неопределено;
		Возврат;
	КонецЕсли;

	Если СтрокаТЧ.СчетУчетаНУ.ВидыСубконто.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если НЕ (СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.СтатьиЗатрат"))  И (НЕ (СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.ПрочиеДоходыИРасходы"))) Тогда
		СтрокаТЧ.СтатьяЗатратНУ = Неопределено;
	Иначе
		СтрокаТЧ.СтатьяЗатратНУ = Новый(СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
	КонецЕсли;

КонецПроцедуры // ТоварыСчетУчетаНУПриИзменении()

Процедура ТоварыСчетУчетаНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	
	ЭлементыФормы.Товары.ТекущиеДанные.СчетУчетаНУ = ЭлементыФормы.Товары.ТекущиеДанные.СчетУчета;
	
КонецПроцедуры

Процедура ТоварыСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура ТоварыСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ТаможенныйШтрафВалПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

Процедура ТаможенныйШтрафПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.СчетУчетаНДС.ОтметкаНезаполненного = (ДанныеСтроки.СуммаНДС <> 0 И Не ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДС));
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

// {ОбособленныеПодразделения

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()

// }ОбособленныеПодразделения 

мСписокВидовДоговоров = Новый СписокЗначений;
мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);

// Нам нужны договоры с валютой взаиморасчетов, отличной от валюты регл. учета.
мСтруктураДополнительныхПараметров = Новый Структура();
// Нам нужны договоры с валютой взаиморасчетов, равной валюте регл. учета.
мСтруктураДополнительныхПараметровРегл = Новый Структура();

СтруктураОтбора = Новый Структура();
СтруктураОтбора.Вставить("ЗначениеОтбора",     мВалютаРегламентированногоУчета);
СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.НеРавно);
мСтруктураДополнительныхПараметров.Вставить("ВалютаВзаиморасчетов", СтруктураОтбора);

СтруктураОтбора = Новый Структура();
СтруктураОтбора.Вставить("ЗначениеОтбора",     мВалютаРегламентированногоУчета);
СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.Равно);
мСтруктураДополнительныхПараметровРегл.Вставить("ВалютаВзаиморасчетов", СтруктураОтбора);


