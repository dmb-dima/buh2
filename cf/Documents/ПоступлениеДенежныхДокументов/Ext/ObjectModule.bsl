Перем мВалютаРегламентированногоУчета Экспорт;
Перем мУчетнаяПолитика Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой приходного ордера на поступление денежных документов
//
// Возвращаемое значение:
//  Табличный документ - печатная форма расходного ордера
//
Функция ПечатьПоступлениеДенежныхДокументов()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номер,
	|	Док.Дата,
	|	Док.ПринятоОт,
	|	Док.Организация,
	// {ОбособленныеПодразделения
	|	ВЫРАЗИТЬ(Док.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200)) КАК ПредставлениеПодразделения,
	// }ОбособленныеПодразделения 
	|	Док.СуммаДокумента,
	|	Док.ВалютаДокумента
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов КАК Док
	|ГДЕ
	|	Док.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоДенежнымДокументам = Новый Запрос();
	ЗапросПоДенежнымДокументам.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросПоДенежнымДокументам.Текст =
	"ВЫБРАТЬ
	|	ДенежныеДокументы.НомерСтроки КАК НомерСтроки,
	|	ДенежныеДокументы.ДенежныйДокумент КАК ДенежныйДокумент,
	|	ПРЕДСТАВЛЕНИЕ(ДенежныеДокументы.ДенежныйДокумент) КАК ДенежныйДокументПредставление,
	|	ДенежныеДокументы.Количество КАК Количество,
	|	ДенежныеДокументы.Сумма
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов.ДенежныеДокументы КАК ДенежныеДокументы
	|ГДЕ
	|	ДенежныеДокументы.Ссылка = &ТекущийДокумент";
	ТаблицаДенежныхДокументов = ЗапросПоДенежнымДокументам.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеДенежныхДокументов_ПриходныйОрдер";
	Макет       = ПолучитьМакет("ПриходныйОрдер");

	// Выводим шапку 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Приходный ордер");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Организация");
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подразделение");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПринятоОт");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого СтрокаДенежногоДокумента Из ТаблицаДенежныхДокументов Цикл

		ОбластьМакета.Параметры.Заполнить(СтрокаДенежногоДокумента);
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + ТаблицаДенежныхДокументов.Количество()
		+ ", на сумму " + ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = 
		ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПоступлениеДенежныхДокументов()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПриходныйОрдер" тогда
		
		ТабДокумент = ПечатьПоступлениеДенежныхДокументов();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("ПриходныйОрдер", "Приходный ордер");
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация, СчетУчетаДенежныхДокументов");

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика Тогда

		СтруктураОбязательныхПолей.Вставить("Контрагент");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПодотчетногоЛица Тогда

		СтруктураОбязательныхПолей.Вставить("Контрагент", "Не указано подотчетное лицо");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПрочееПоступление Тогда

		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", "Не указан счет кредита");
		
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "ДенежныеДокументы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоДенежнымДокументам - таблица значений, содержащая данные для проведения и проверки ТЧ ДенежныеДокументы
//  СтруктураШапкиДокумента     - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                       - флаг отказа в проведении.
//  Заголовок                   - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДенежныеДокументы(ТаблицаПоДенежнымДокументам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДенежныйДокумент, Количество");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДенежныеДокументы", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиДенежныеДокументы()

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоДенежнымДокументам,Отказ, Заголовок);

	Проводки = Движения.Хозрасчетный;
	
	// Проводки по взаиморасчетам
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика Тогда
		
		// По договорам вида "Прочее" зачет авансов происходит только в режиме "Автоматически"
		СтруктураШапкиДокумента.Вставить("СпособЗачетаАвансов", Перечисления.СпособыЗачетаАвансов.Автоматически);
		СтруктураШапкиДокумента.Вставить("СчетУчетаРасчетовПоАвансам", СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
		ТаблицаЗачетаАвансов = Новый ТаблицаЗначений;
		
		ТаблицыДокумента = Новый Структура();
		ТаблицыДокумента.Вставить("ТаблицаПоДенежнымДокументам", ТаблицаПоДенежнымДокументам);

		ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
			СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, Истина, Отказ, Заголовок);

	Иначе
		
		ТаблицаВзаиморасчетов = Неопределено;
		
	КонецЕсли; // Проводки по взаиморасчетам
	
	// Проводки по поступлению денежных документов

	ДатаДока   = СтруктураШапкиДокумента.Дата;
	
	СодержаниеПроводок = "Поступление денежных документов "
		+ "по вх.д." + НомерВходящегоДокумента + " от " + Формат(ДатаВходящегоДокумента, "ДЛФ=Д");
	
	Для каждого СтрокаТаблицы Из ТаблицаПоДенежнымДокументам Цикл

		Проводка = Проводки.Добавить();

		Проводка.Период      = Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = СодержаниеПроводок;
		Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;

		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаДенежныхДокументов;
		Если Проводка.СчетДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;

		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеДокументы", СтрокаТаблицы.ДенежныйДокумент, Истина);

		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика Тогда
			
			Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент, Истина);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Ссылка);
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПодотчетногоЛица Тогда

			Если Проводка.СчетДт.Валютный Тогда
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
			Иначе
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.Контрагент, Истина);
			
		Иначе
			
			Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СубконтоКт3);
			
		КонецЕсли;
		
		Если Проводка.СчетКт.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
		КонецЕсли;
		
		// {ОбособленныеПодразделения
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		// }ОбособленныеПодразделения
		
	КонецЦикла;
	
	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН  ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
		НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика Тогда
		
		// Заполним по шапке документа дерево параметров, нужных при проведении.
		ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"          , "ДоговорОрганизация");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"          , "ВидДоговора");
		
		// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
		СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, );

	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДенежнымДокументам) Экспорт
	
	// Получим необходимые данные по табличной части "Денежные документы".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДенежныйДокумент"	, "ДенежныйДокумент");
	СтруктураПолей.Вставить("Количество"  		, "Количество");
	СтруктураПолей.Вставить("Сумма"       		, "Сумма");

	РезультатЗапроса = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(
		ЭтотОбъект, "ДенежныеДокументы", СтруктураПолей);
		
	ТаблицаПоДенежнымДокументам = РезультатЗапроса.Выгрузить();
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(
		ТаблицаПоДенежнымДокументам, СтруктураШапкиДокумента, Истина, мВалютаРегламентированногоУчета);

КонецПроцедуры	
	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
		
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем СтруктураШапкиДокумента, ТаблицаПоДенежнымДокументам;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
     
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДенежнымДокументам);

	ПроверитьЗаполнениеТабличнойЧастиДенежныеДокументы(
		ТаблицаПоДенежнымДокументам, СтруктураШапкиДокумента, Отказ, Заголовок);

	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
		СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента, Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоДенежнымДокументам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураПолученный", Ложь);
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
