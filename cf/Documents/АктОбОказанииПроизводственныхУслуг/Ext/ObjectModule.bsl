Перем мСтруктураШапкиДокумента;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем ТаблицаВзаиморасчетов;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Функция проверяет правильность заполнения реквизитов документа
// Также формирует запрос по шапке документа, результат которого
// сохраняется в переменной мСтруктураШапкиДокумента
//
Процедура ПроверкаРеквизитов(Отказ, Заголовок) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	РеквизитыШапки = "Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
	|СчетУчетаРасчетовСКонтрагентом,СчетЗатрат, ПодразделениеЗатрат, НоменклатурнаяГруппа";//, СчетУчетаРасчетовПоАвансам

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	мСтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, Новый Структура(РеквизитыШапки), мВалютаРегламентированногоУчета);

	СтруктураОбязательныхПолей = Новый Структура(РеквизитыШапки);

	// Зачет авансов
	СтруктураОбязательныхПолей.Вставить("СпособЗачетаАвансов");
	Если (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически)
		ИЛИ (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу) Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, мСтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	РеквизитыУсл = "Номенклатура, Количество, Сумма, ПлановаяСтоимость";
	Если УчитыватьНДС Тогда
		РеквизитыУсл = РеквизитыУсл + ", СтавкаНДС";
	КонецЕсли;

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", Новый Структура(РеквизитыУсл), Отказ, Заголовок);

	// Получим необходимые данные для проверки заполенения данные по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить( "Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить( "Услуга",       "Номенклатура.Услуга");

	ТабУслуги = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей).Выгрузить();
	УправлениеЗапасами.ПроверитьЧтоНетТоваров( ЭтотОбъект, "Услуги", ТабУслуги, Отказ, Заголовок);
	
	//Построчная проверка для реквизитов по условию
	Для каждого СтрокаТЧ Из Услуги Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Услуги"": ";

		Если УчитыватьНДС 
			И НЕ (СтрокаТЧ.СуммаНДС =0)
			Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДСПоРеализации) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС по реализации""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;


КонецПроцедуры // ПроверкаРеквизитов()

Процедура ЗаполнитьСчетаВСтрокеУслуг(СтрокаТЧ, СчетаУчета, Заполнять, МетаданныеДокумента)

	МетаданныеДокумента = Метаданные();

	Если Заполнять = Истина Тогда

		СтрокаТЧ.СчетДоходов  = СчетаУчета.СчетДоходов;
		СтрокаТЧ.СчетРасходов = СчетаУчета.СчетРасходов;
		СтрокаТЧ.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;

		Если СтрокаТЧ.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
			СтрокаТЧ.Субконто = Новый(СтрокаТЧ.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
			Если ТипЗнч(СтрокаТЧ.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				СтрокаТЧ.Субконто = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
			КонецЕсли;
		Иначе
			СтрокаТЧ.Субконто = Неопределено;
		КонецЕсли;

	ИначеЕсли Заполнять = Ложь Тогда

		СтрокаТЧ.СчетДоходов  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.СчетРасходов = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.Субконто     = Неопределено;
		СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.ПустаяСсылка()

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаВСтрокеУслуг

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, Заполнять) Экспорт

	СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	МетаданныеДока = Метаданные();

	ЗаполнитьСчетаВСтрокеУслуг(СтрокаТЧ, СчетаУчета, Заполнять, МетаданныеДока);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги()

Процедура ЗаполнитьСчетаУчетаВТабЧастиУслуги(Заполнять) Экспорт

	Для каждого СтрокаТЧ Из Услуги Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, Заполнять)
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧастиУслуги()

Процедура ЗаполнитьСчетаУчетаРасчетов(СчетаУчета = неопределено) Экспорт
	
    Если СчетаУчета = неопределено Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	КонецЕсли;
	СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;

КонецПроцедуры // ЗаполнитьСчетаУчетаРасчетов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();

	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

// Процедуры и  функции, обслуживающие зачет авансов

Функция ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ТаблицаЗачетаАвансов = ЗачетАвансов.ВыгрузитьКолонки();
	Иначе
		ТаблицаЗачетаАвансов = ЗачетАвансов.Выгрузить();
		ТаблицаЗачетаАвансов.Свернуть("ДокументАванса", "СуммаЗачета");
	КонецЕсли;
	ТаблицаЗачетаАвансов.Колонки.ДокументАванса.Имя = "ДокументРасчетов";
	ТаблицаЗачетаАвансов.Колонки.СуммаЗачета.Имя    = "СуммаВзаиморасчетов";
	
	Возврат ТаблицаЗачетаАвансов;

КонецФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если (ТаблицаЗачетаАвансов.Количество() = 0) Тогда
		
		Если СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли (ТаблицаЗачетаАвансов.Количество() = 1) 
		И (НЕ ЗначениеЗаполнено(ТаблицаЗачетаАвансов[0].ДокументРасчетов)) Тогда
	
		ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		
	Иначе
	
		СтруктураОбязательныхПолей = Новый Структура("ДокументАванса");
    	
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(
			ЭтотОбъект, "ЗачетАвансов", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаЗачетаАвансов, Отказ, Заголовок)

	// Формирование движений регистров
	ДвиженияПоТабличнойЧастиУслуги(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаЗачетаАвансов, Заголовок, Отказ, РежимПроведения);

	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура формирует движения регистров по табличной части Услуги
//
Процедура ДвиженияПоТабличнойЧастиУслуги(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаЗачетаАвансов, Заголовок, Отказ, РежимПроведения)

	Если ТаблицаПоУслугам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФормированиеПроводокПоОтражениюВыручкиИНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаЗачетаАвансов, Отказ, Заголовок, РежимПроведения);
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам,ТаблицаВзаиморасчетов, Отказ);
	
	ДвиженияРегистровВыпускаПродукцииУслуг(СтруктураШапкиДокумента, ТаблицаПоУслугам);
	
	// {УчетДоходовИРасходовИП
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Ссылка.Дата, Ложь, Ссылка.Организация);
	ДоходыИРасходыПредпринимателя.ОказаниеУслуг(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитика, ТаблицаПоУслугам, "Субконто", "СчетРасходов");
	ДоходыИРасходыПредпринимателя.ЗачетОплатыПокупателя(ЭтотОбъект, СтруктураШапкиДокумента, Движения.ИПМПЗОтгруженные.Выгрузить(), ТаблицаВзаиморасчетов);
	// }УчетДоходовИРасходовИП
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиУслуги()

Процедура ДвиженияРегистровВыпускаПродукцииУслуг(СтруктураШапкиДокумента, ТаблицаПоУслугам)

	ДвиженияВыпускПродукцииУслуг = Движения.ВыпускПродукцииУслуг;
	ТаблицаДвиженийВыпускБУ        = ДвиженияВыпускПродукцииУслуг.ВыгрузитьКолонки();
	
	Проводки  = Движения.Хозрасчетный;
	
	Счет40 = ?(ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация).СпособУчетаВыпускаГотовойПродукции = Перечисления.СпособыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40, Истина, Ложь);

	Для каждого СтрокаУслуги Из ТаблицаПоУслугам Цикл

		// Отражение в регистре выпуска продукции.
		СтрокаДвижения = ТаблицаДвиженийВыпускБУ.Добавить();

		СтрокаДвижения.Организация          = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.Продукция            = СтрокаУслуги.Номенклатура;
		СтрокаДвижения.СчетЗатрат           = СтруктураШапкиДокумента.СчетЗатрат;
		СтрокаДвижения.Подразделение        = СтруктураШапкиДокумента.ПодразделениеЗатрат;
		// {ОбособленныеПодразделения
	    СтрокаДвижения.ПодразделениеСписания = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		// }ОбособленныеПодразделения 
		СтрокаДвижения.НоменклатурнаяГруппа = СтруктураШапкиДокумента.НоменклатурнаяГруппа;
		СтрокаДвижения.СчетСписания         = СтрокаУслуги.СчетРасходов;
		СтрокаДвижения.СубконтоСписания1    = СтрокаУслуги.Субконто;
		СтрокаДвижения.Количество           = СтрокаУслуги.Количество;
		СтрокаДвижения.ПлановаяСтоимость    = СтрокаУслуги.СуммаПлановая;
		
		Проводка = Проводки.Добавить();

		Проводка.Период       = СтруктураШапкиДокумента.Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма        = СтрокаУслуги.СуммаПлановая;
		Проводка.Содержание   = СтрокаУслуги.Номенклатура.НаименованиеПолное;

		Проводка.СчетДт      = СтрокаУслуги.СчетРасходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаУслуги.Субконто);

		Если Счет40 Тогда
			Проводка.СчетКт           = ПланыСчетов.Хозрасчетный.ВыпускПродукции;
		    БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Перечисления.ВидыСтоимости.Плановая);
		Иначе
			Проводка.СчетКт = СтруктураШапкиДокумента.СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.НоменклатурнаяГруппа);
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеЗатрат, "Кт");

	КонецЦикла;

	ДвиженияВыпускПродукцииУслуг.мПериод = Дата;
	ДвиженияВыпускПродукцииУслуг.мТаблицаДвижений = ТаблицаДвиженийВыпускБУ;
	ДвиженияВыпускПродукцииУслуг.ДобавитьДвижение();

КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета УСН
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ, Заголовок)
	
	Если НЕ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, Новый Структура("ТаблицаРасчетов", ТаблицаВзаиморасчетов));
		
КонецПроцедуры

// Процедура формирует движения регистров по табличной части Услуги
//
Процедура ФормированиеПроводокПоОтражениюВыручкиИНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаЗачетаАвансов, Отказ, Заголовок, РежимПроведения)

	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	ДатаДока       = Дата;

	//Фиксация выручки и НДС (проводки)

	//Определение параметров учетной политики по отражению НДС с продажи
    УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация).МоментОпределенияНалоговойБазыНДС;

	Проводки  = Движения.Хозрасчетный;

	ТаблицыДокумента = Новый Структура("ТаблицаПоУслугам", ТаблицаПоУслугам);
	
	ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
		СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, Истина, Отказ, Заголовок);

	Выручка = ТаблицаПоУслугам.Скопировать();
	Выручка.Свернуть("СчетДоходов, Субконто, СчетУчетаНДСПоРеализации, СтавкаНДС, Номенклатура", 
		"Сумма, СуммаБУ, СуммаНУ, СуммаВал, НДС, НДСВал, Количество");

	Для каждого СтрокаТаблицы из Выручка Цикл

		// Выручка
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Проводки.Добавить();

		Проводка.Период       = ДатаДока;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма        = СтрокаТаблицы.СуммаБУ;
		Проводка.Содержание   = СтрокаТаблицы.Номенклатура.НаименованиеПолное;

		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетДоходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.Субконто);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		Проводка.КоличествоКт = СтрокаТаблицы.Количество;  
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			СуммаНУДт = СтрокаТаблицы.СуммаНУ + СтрокаТаблицы.НДС;
			СуммаНУКт = СтрокаТаблицы.СуммаНУ;
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
				СуммаНУДт, СуммаНУКт, Проводка.Сумма - СуммаНУДт, Проводка.Сумма - СуммаНУДт, , , 
				Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
			
		КонецЕсли;
		
		// НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда

			Проводка = Проводки.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = СтрокаТаблицы.НДС;
			Проводка.Содержание   = СтрокаТаблицы.Номенклатура.НаименованиеПолное;

			Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет",Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		КонецЕсли;

	КонецЦикла;

	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);
	
КонецПроцедуры // ФормированиеПроводокПоОтражениюВыручкиИНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки,ТаблицаВзаиморасчетов, Отказ)
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда

		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СчетОтнесенияНДС = ПланыСчетов.Хозрасчетный.НДС;
			
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ,СчетОтнесенияНДС, ТаблицаВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

 #Если Клиент Тогда 
	 
// Функция формирует табличный документ с печатной формой акта об
// оказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Контрагент КАК Получатель,
	|	Организация КАК Поставщик,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.УстановитьПараметр("Курс",            ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект,      мВалютаРегламентированногоУчета));
	ЗапросУслуги.УстановитьПараметр("Кратность",       ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
 	
	ЗапросУслуги.Текст = "ВЫБРАТЬ
	                     |	АктОбОказанииПроизводственныхУслуг.Номенклатура КАК Номенклатура,
	                     |	АктОбОказанииПроизводственныхУслуг.Номенклатура.НаименованиеПолное КАК Товар,
	                     |	АктОбОказанииПроизводственныхУслуг.Количество,
	                     |	АктОбОказанииПроизводственныхУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                     |	АктОбОказанииПроизводственныхУслуг.Цена * &Курс / &Кратность КАК Цена,
	                     |	АктОбОказанииПроизводственныхУслуг.Сумма * &Курс / &Кратность КАК Сумма,
	                     |	АктОбОказанииПроизводственныхУслуг.СтавкаНДС,
	                     |	АктОбОказанииПроизводственныхУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	                     |	АктОбОказанииПроизводственныхУслуг.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул
	                     |ИЗ
	                     |	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслуг
	                     |ГДЕ
	                     |	АктОбОказанииПроизводственныхУслуг.Ссылка = &ТекущийДокумент";
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
	
	Если Проведен И (Шапка.РасчетыВУсловныхЕдиницах
		ИЛИ (Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета И Дата >= '20090101000000')) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", СчетУчетаРасчетовСКонтрагентом);
		Текст = 
		"ВЫБРАТЬ
		|	СУММА(Хозрасчетный.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Регистратор = &Ссылка
		|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовСКонтрагентом
		|	И Хозрасчетный.СчетКт В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				АктОбОказанииПроизводственныхУслуг.СчетДоходов
		|			ИЗ
		|				Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслуг
		|			ГДЕ
		|				АктОбОказанииПроизводственныхУслуг.Ссылка = &Ссылка)
		|";
		Запрос.Текст = Текст;
		СуммаВзаиморасчетов = Запрос.Выполнить().Выгрузить()[0].Сумма;
		
		РасчетСуммыНДСПоСтавке =  УчетНДС.РасчетНДСвРубляхПоСтавкеДокумента(Шапка.Дата);
		
		Если НЕ СуммаВзаиморасчетов = NULL Тогда
			
			ТаблицаУслуги.Колонки.Добавить("СуммаБезНДС");
			
			МассивРаспределения = Новый Массив;
			
			Для Каждого СтрокаТовар Из ТаблицаУслуги Цикл
				
				СуммаСНДС = СтрокаТовар.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДС);
				СуммаБезНДС = СуммаСНДС - СтрокаТовар.СуммаНДС;

				МассивРаспределения.Добавить(СуммаСНДС);
				СтрокаТовар.СуммаБезНДС = СуммаБезНДС;
			    				
			КонецЦикла;
			
			ТаблицаУслуги.Колонки.Добавить("СуммаРублевая");
			УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, ТаблицаУслуги, "СуммаРублевая");
			
			Для Каждого СтрокаТовар Из ТаблицаУслуги Цикл
				
				Если РасчетСуммыНДСПоСтавке Тогда
					//Выделение суммы НДС, Расчет суммы без НДС
					ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаТовар.СтавкаНДС);
					
					СтрокаТовар.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаТовар.СуммаРублевая * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
					СтрокаТовар.Сумма = СтрокаТовар.СуммаРублевая - СтрокаТовар.СуммаНДС;
					
				Иначе
					МассивРаспределения.Очистить();
					МассивРаспределения.Добавить(СтрокаТовар.СуммаБезНДС);
					МассивРаспределения.Добавить(СтрокаТовар.СуммаНДС);
					МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТовар.СуммаРублевая, МассивРаспределения);
					Если МассивРаспределенныхСумм <> Неопределено Тогда
						СтрокаТовар.Сумма = МассивРаспределенныхСумм[0];
						СтрокаТовар.СуммаНДС = МассивРаспределенныхСумм[1];
					КонецЕсли;
				КонецЕсли;
				
				Если Шапка.СуммаВключаетНДС Тогда
					СтрокаТовар.Сумма = СтрокаТовар.Сумма+СтрокаТовар.СуммаНДС;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктОбОказанииПроизводственныхУслуг_Акт";
	Макет       = ПолучитьМакет("Акт");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Акт");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	СведенияОПоставщике     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	СведенияОПолучателе     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПолучателе, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);


	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	
	НомерСтроки = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл	

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		
		Если Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			ОбластьМакета.Параметры.Цена  = СтрокаТабличнойЧасти.Сумма / ?(СтрокаТабличнойЧасти.Количество = 0, 1, СтрокаТабличнойЧасти.Количество);
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	Если ТаблицаУслуги <> Неопределено Тогда

		Сумма    = ТаблицаУслуги.Итог("Сумма");
		СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");

	Иначе

		Сумма    = 0;
		СуммаНДС = 0;

	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	Если Шапка.УчитыватьНДС Тогда

		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		
		Если НЕ (СуммаНДС = 0) Тогда
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		Иначе
			ОбластьМакета.Параметры.НДС      = "Без налога (НДС)";
			ОбластьМакета.Параметры.ВсегоНДС = "-";
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЕсли;

	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
	                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, мВалютаРегламентированногоУчета);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	// Получить экземпляр документа на печать
	Если  ИмяМакета = "Акт" Тогда
		ТабДокумент = ПечатьАктаОбОказанииУслуг();

	ИначеЕсли ИмяМакета = "СправкаРасчетВал" Тогда
		
		// Справка-расчет формирования рублевой суммы документа в валюте
		БухгалтерскийУчетРасчетовСКонтрагентами.НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(Ссылка);
		Возврат;
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);

КонецПроцедуры // Печать
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Акт, СправкаРасчетВал", "Акт об оказании услуг","Справка-расчет ""Рублевая сумма документа в валюте""");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	// {ОбособленныеПодразделения
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ПодразделениеОрганизации", "ПодразделениеОрганизации", "ПодразделениеОрганизации");
    // }ОбособленныеПодразделения
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ХозрасчетныйВидыСубконто.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|ГДЕ
		|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
		|	И ХозрасчетныйВидыСубконто.НомерСтроки = 1";
		
		СчетаСНоменклатурнымиГруппами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		СтруктураШапкиДокумента.Вставить("СчетаСНоменклатурнымиГруппами", СчетаСНоменклатурнымиГруппами);
	КонецЕсли;
	// }УчетДоходовИРасходовИП

КонецПроцедуры	

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам) Экспорт
	
	// Подготовим таблицу услуг для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"          , "Количество");
	СтруктураПолей.Вставить("Сумма"               , "Сумма");
	СтруктураПолей.Вставить("Цена"                , "Цена");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                 , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"         , "НомерСтроки");
	СтруктураПолей.Вставить("СчетДоходов"         , "СчетДоходов");
	СтруктураПолей.Вставить("СчетРасходов"        , "СчетРасходов");
	СтруктураПолей.Вставить("Субконто"            , "Субконто");
	СтруктураПолей.Вставить("СуммаПлановая"       , "СуммаПлановая");
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации", "СчетУчетаНДСПоРеализации");
	
	РезультатЗапросаПоУслугам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	// Подготовим таблицу услуг для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);

	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");

	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		// Заполнение шапки
		ВалютаДокумента = Основание.ВалютаДокумента;
		Комментарий = Основание.Комментарий;
		Контрагент = Основание.Контрагент;
		мСписокВидовДоговоров = Новый СписокЗначений;
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		//ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект,мСписокВидовДоговоров);
		ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов = Основание.КурсВзаиморасчетов;
		Организация = Основание.Организация;
		Ответственный = Основание.Ответственный;
		СуммаВключаетНДС = Основание.СуммаВключаетНДС;
		СуммаДокумента = Основание.СуммаДокумента;
		ТипЦен = Основание.ТипЦен;
		УчитыватьНДС = Основание.УчитыватьНДС;
		
		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойТипЦенПродажи");
		КонецЕсли;
		
		УчитыватьНДС = Истина;
		Если Не ЗначениеЗаполнено(ТипЦен) Тогда
			СуммаВключаетНДС = Истина;
		Иначе
			СуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Основание.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	СчетНаОплатуПокупателюУслуги.Номенклатура,
		               |	СчетНаОплатуПокупателюУслуги.СтавкаНДС,
		               |	СчетНаОплатуПокупателюУслуги.Цена,
		               |	СчетНаОплатуПокупателюУслуги.Количество КАК Количество,
		               |	СчетНаОплатуПокупателюУслуги.Сумма КАК Сумма
		               |ИЗ
		               |	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
		               |ГДЕ
		               |	СчетНаОплатуПокупателюУслуги.Ссылка = &Ссылка";
		ВыборкаУслуг = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаУслуг.Следующий() Цикл
			
			СтрокаТабличнойЧасти = Услуги.Добавить();
			
			СтрокаТабличнойЧасти.Номенклатура = ВыборкаУслуг.Номенклатура;
			
			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
			
			СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура,Дата);  
			
			СтрокаТабличнойЧасти.Количество   = ВыборкаУслуг.Количество;
			СтрокаТабличнойЧасти.СтавкаНДС    = ВыборкаУслуг.СтавкаНДС;
			СтрокаТабличнойЧасти.Сумма        = ВыборкаУслуг.Сумма;
			СтрокаТабличнойЧасти.Цена         = ВыборкаУслуг.Цена;
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			Ценообразование.ЗаполнитьПлановуюСебестоимость(СтрокаТабличнойЧасти, Дата);
			ОбработкаТабличныхЧастей.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТабличнойЧасти, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры   //ОбработкаЗаполнения()

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем СтруктураШапкиДокумента, ТаблицаПоУслугам;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	ПроверкаРеквизитов(Отказ, Заголовок);

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам);
	
	// Зачет авансов
	ТаблицаЗачетаАвансов = ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок);

	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		
		Для каждого СтрокаТЧ Из ТаблицаПоУслугам Цикл
			
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Услуги"": ";
			
			Если НЕ СтруктураШапкиДокумента.СчетаСНоменклатурнымиГруппами.Найти(СтрокаТЧ.СчетДоходов) = Неопределено 
				И НЕ ЗначениеЗаполнено(СтрокаТЧ.Субконто) 
				Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Субконто""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
		СтруктураШапкиДокумента,СтруктураШапкиДокумента.ДоговорКонтрагента,Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаЗачетаАвансов, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

