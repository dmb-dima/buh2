Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущийСотрудник;
// для синхронизации строк табличных полей
Перем мСинхронизируемыеТабличныеЧасти;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанель2);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеНачисления,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет "пустые" реквизиты ТЧ значениями по умолчанию
Процедура ДоЗаполнитьСтроку()

	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
КонецПроцедуры

// удаляет начисления по работнику, все или автоматически заполняемые
// Параметры:
//   Физлицо - СправочникСсылка.Физлица
//   УдалятьВсе - булево, если Истина - удаляются все начисления по физлицу,
//				например, при его удалении из списка.
//				Если Ложь - удалаются только те, которые вводятся "автоматически",
//				например, при редактировании данных по строке табличной части 
//				со списком работников
Процедура УдалитьНачисленияПоРаботнику(Сотрудник)
	
	СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
	
	// удалять начисления будем в том случае, когда в т.ч. Работники эта строка с сотрудником - последняя
	Если РаботникиОрганизации.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Строки = ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТабличнойЧасти из Строки Цикл
		ОсновныеНачисления.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
		
КонецПроцедуры // УдалитьНачисленияПоРаботнику()

Процедура ВнестиДанныеПоСотруднику(ИзменятьКадровыеДанные = Ложь)
	
	УдалитьНачисленияПоРаботнику(мТекущийСотрудник);
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудник",		ДанныеСтроки.Сотрудник);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК ЭтоДанныеСотрудника,
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.Физлицо
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка = &Сотрудник";

	ДанныеСотрудника = Запрос.Выполнить().Выбрать();
	
	// введем надбавки
	Пока ДанныеСотрудника.Следующий() Цикл
		
		Если ДанныеСотрудника.ЭтоДанныеСотрудника Тогда
			Если ИзменятьКадровыеДанные Тогда
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, ДанныеСотрудника);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьНачисленияПоСтроке(ДанныеСтроки.Сотрудник)
	
КонецПроцедуры //ВнестиДанныеПоСотруднику

Процедура ДобавитьНачисленияПоСтроке(Работник)
	
	// основное начисление
	Строка = ОсновныеНачисления.Добавить();
	Строка.Сотрудник  = Работник;
	Строка.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням;
	
КонецПроцедуры //ДобавитьНачисленияПоСтроке()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	//Проверка источника кадровой информации
	ПроцедурыУправленияПерсоналом.УчетЗарплатыИКадровВоВнешнейПрограмме(Отказ, Ссылка, ЭтаФорма, ЭтоНовый());
	
	
	Если ЭтоНовый() И НЕ Отказ Тогда
		// проверим какую форму надо использовать
		ИспользоватьПомощника = НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "НеИспользоватьПомощникаПриемаНаРаботу");
		Если ОтключитьПомощника ИЛИ ВведенКопированием = Истина Тогда
			ИспользоватьПомощника = Ложь;
		КонецЕсли;
		Если ИспользоватьПомощника Тогда
			Отказ = Истина;
			Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуНовогоЭлемента("ФормаПомощник");
			Если Форма.Открыта() Тогда
				// просто активизируем уже открытую форму
				Форма.Активизировать();
				Возврат;
			КонецЕсли;
			Форма.СоздатьДокумент = Истина;
			Форма.Организация = глЗначениеПеременной("ОсновнаяОрганизация");
			Форма.Открыть();			
			Форма.ЭлементыФормы.ПанельСоздатьПриказ.Свертка = РежимСверткиЭлементаУправления.Верх;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы;
		Если ВведенКопированием <> Истина Тогда
			РаботникиОрганизации.Добавить();
			ОсновныеНачисления.Добавить();
		КонецЕсли;
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ФизЛицо");
	СтруктураКолонок.Вставить("ПодразделениеОрганизации");
	СтруктураКолонок.Вставить("Должность");
	СтруктураКолонок.Вставить("ДатаПриема");

	// Установить ограничение - изменять видимость колонок для табличной части Начисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мТекущийСотрудник		= ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.СотрудникиОрганизаций");
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,ВидЗанятости");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.РаботникиОрганизации);
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
	
	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
				
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры //ПриЗакрытии

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
Процедура ДатаПриИзменении(Элемент = Неопределено)

	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	// Если ПодразделениеОрганизации не соответствует выбранной организации.
	Если НЕ ПодразделениеОрганизации.Владелец = ДокументОбъект.Организация Тогда
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();		
	КонецЕсли;	
	Для Каждого СтрокаРаботникиОрганизации Из РаботникиОрганизации Цикл
		Если НЕ СтрокаРаботникиОрганизации.ПодразделениеОрганизации.Владелец = Организация Тогда
			СтрокаРаботникиОрганизации.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();		
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры // ОрганизацияПриИзменении()

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "РаботникиОрганизации"

// Процедура - обработчик события "ПриАктивизацииСтроки" 
// табличного поля РаботникиОрганизации
//
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикОжиданияРаботникиОрганизацииПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры // РаботникиОрганизацииПриАктивизацииСтроки

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля РаботникиОрганизации
//
Процедура ОбработчикОжиданияРаботникиОрганизацииПриАктивизацииСтроки()
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.РаботникиОрганизации, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
КонецПроцедуры // ОбработчикОжиданияРаботникиОрганизацииПриАктивизацииСтроки

Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	УдалитьНачисленияПоРаботнику(Элемент.ТекущиеДанные.Сотрудник);
	
КонецПроцедуры // РаботникиОрганизацииПередУдалением()

// Процедура обеспечивает начальное значение реквизитов "ЗанимаемыхСтавок", 
//  "ПроизошедшееСобытие" и "ИспытательныйСрок" и проч.
//
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  НоваяСтрока - булево, признак редактирования новой строки
//  
Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	мТекущийСотрудник = Элемент.ТекущаяСтрока.Сотрудник;
	
КонецПроцедуры

Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "РаботникиОрганизации"

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица.
//
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Физлицо = Элемент.Значение.ФизЛицо;
	
	ВнестиДанныеПоСотруднику(Истина);
	
	ДоЗаполнитьСтроку();
	
	мТекущийСотрудник = Элемент.Значение;
	
КонецПроцедуры // РаботникиОрганизацииСотрудникПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода трудового договора.
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникНачалоВыбора()

Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "Сотрудники", Текст, Организация);
	
КонецПроцедуры

Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "Сотрудники", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ОсновныеНачисления"

// Процедура - обработчик события "ПриАктивизацииСтроки" 
// табличного поля ОсновныеНачисления
//
Процедура ОсновныеНачисленияПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля ОсновныеНачисления
//
Процедура ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки()
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.ОсновныеНачисления, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
КонецПроцедуры // ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки

Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	
	ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Физлицо = Элемент.Значение.ФизЛицо;
	
КонецПроцедуры

Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ОсновныеНачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "Сотрудники", Текст, Организация);
	
КонецПроцедуры

Процедура ОсновныеНачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "Сотрудники", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ПриказНаГруппуСотрудниковПриИзменении(Элемент)
	
	Если НЕ ПереключитьПредставление() Тогда
		ПриказНаГруппуСотрудников = НЕ ПриказНаГруппуСотрудников;
		Возврат;
	КонецЕсли;
	
	УстановитьВидимость();		
	
КонецПроцедуры

Функция ПереключитьПредставление()
	
	//проверка возможности переключения с группового ввода на ввод по одному
	Если НЕ ПриказНаГруппуСотрудников Тогда
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""Работники"" введено более одного сотрудника.");
			Возврат Ложь;
		КонецЕсли;
		Если ОсновныеНачисления.Количество() > 1 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""Начисления"" введено более одного начисления.");
			Возврат Ложь;
		Иначе
			Если ОсновныеНачисления.Количество() > 0 
				И РаботникиОрганизации.Количество() > 0 Тогда
				
				Если ОсновныеНачисления[0].Сотрудник <> РаботникиОрганизации[0].Сотрудник Тогда
					ОсновныеНачисления.Очистить();
					ОсновныеНачисления.Добавить();
				КонецЕсли;
			ИначеЕсли ОсновныеНачисления.Количество() > 0 
				И РаботникиОрганизации.Количество() = 0 Тогда
				ОсновныеНачисления.Очистить();
				ОсновныеНачисления.Добавить();
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗаполнитьПервуюСтроку();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьВидимость()
	
	Если ПриказНаГруппуСотрудников Тогда
		ЭлементыФормы.Панель1.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
		ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница1;
		ЭлементыФормы.Панель1.Страницы.Страница3.Видимость = Ложь;
	Иначе
		ЭлементыФормы.Панель1.Страницы.Страница3.Видимость = Истина;		
		ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница3;
		ЭлементыФормы.Панель1.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;		
		ПоказатьСведенияСотрудника();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПоказатьСведенияСотрудника()
	
	Если РаботникиОрганизации.Количество() = 0 Тогда
		РаботникиОрганизации.Добавить();
	КонецЕсли;
	Если ОсновныеНачисления.Количество() = 0 Тогда
		ОсновныеНачисления.Добавить();
	КонецЕсли;
	
	Если РаботникиОрганизации.Количество() <> 0 Тогда
		ТекущийСотрудник = РаботникиОрганизации.Получить(0);		
		Сотрудник = ТекущийСотрудник.Сотрудник;
		ТабельныйНомер = ТекущийСотрудник.Сотрудник.Код;
		ДатаПриема = ТекущийСотрудник.ДатаПриема;
		ПодразделениеОрганизации = ТекущийСотрудник.ПодразделениеОрганизации;
		Должность = ТекущийСотрудник.Должность;
	КонецЕсли;
	
	Если ОсновныеНачисления.Количество() <> 0 Тогда
		ТекущееНачисление = ОсновныеНачисления.Получить(0);		
		Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
			Сотрудник = ТекущееНачисление.Сотрудник;
		КонецЕсли;
		ВидРасчета = ТекущееНачисление.ВидРасчета;
		Размер = ТекущееНачисление.Размер;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ПриказНаГруппуСотрудников Тогда
		ЗаполнитьПервуюСтроку();		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПервуюСтроку()
	
	Если РаботникиОрганизации.Количество() > 1 Тогда
		РаботникиОрганизации.Очистить();
		РаботникиОрганизации.Добавить();
	КонецЕсли;
	Если ОсновныеНачисления.Количество() > 1 Тогда
		ОсновныеНачисления.Очистить();
		ОсновныеНачисления.Добавить();
	КонецЕсли;
	
	РаботникиОрганизации[0].Сотрудник = Сотрудник;
	РаботникиОрганизации[0].ДатаПриема = ДатаПриема;
	РаботникиОрганизации[0].Должность = Должность;
	РаботникиОрганизации[0].ПодразделениеОрганизации = ПодразделениеОрганизации;
	РаботникиОрганизации[0].Физлицо = Сотрудник.Физлицо;
	
	ОсновныеНачисления[0].Сотрудник = Сотрудник;
	ОсновныеНачисления[0].Физлицо = Сотрудник.Физлицо;
	ОсновныеНачисления[0].ВидРасчета = ВидРасчета;
	ОсновныеНачисления[0].Размер = Размер;
	
КонецПроцедуры

Процедура СотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]	= Ложь;
мСинхронизируемыеТабличныеЧасти["ОсновныеНачисления"]	= Ложь;

