Перем мДлинаСуток;
Перем мМаксимальныйТабельныйНомер Экспорт;
Перем ВведенКопированием Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	ПриемНаРаботуВОрганизацию.Номер КАК НомерДок,
		|	ПриемНаРаботуВОрганизацию.Дата КАК ДатаДок,
		|	ПриемНаРаботуВОрганизацию.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ПриемНаРаботуВОрганизацию.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ВЫБОР
		|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование
		|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ
		|	КОНЕЦ КАК ФИОРуководителя
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = &Руководитель)
		|			И ПриемНаРаботуВОрганизацию.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	ПриемНаРаботуВОрганизацию.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтрокиДокумента.НомерСтроки,
		|	СтрокиДокумента.ДатаПриема,
		|	СтрокиДокумента.ТабельныйНомер,
		|	СтрокиДокумента.Работник КАК Работник,
		|	СтрокиДокумента.ПодразделениеОрганизации,
		// {ОбособленныеПодразделения
		|	ВЫБОР
		|		КОГДА СтрокиДокумента.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
		|			ТОГДА СтрокиДокумента.ПодразделениеОрганизации.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(СтрокиДокумента.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200))
		|	КОНЕЦ КАК Подразделение,
		// }ОбособленныеПодразделения 
		|	СтрокиДокумента.Должность.Наименование КАК Должность,
		|	ЕСТЬNULL(СтрокиДокумента.ОкладТарифнаяСтавка, 0) КАК ОкладТарифнаяСтавка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПриемНаРаботуВОрганизациюРаботники.НомерСтроки КАК НомерСтроки,
		|		ПриемНаРаботуВОрганизациюРаботники.ДатаПриема КАК ДатаПриема,
		|		ПриемНаРаботуВОрганизациюРаботники.Сотрудник.Код КАК ТабельныйНомер,
		|		ВЫБОР
		|			КОГДА ФИОФизЛицСрезПоследних.Фамилия ЕСТЬ NULL 
		|				ТОГДА ПриемНаРаботуВОрганизациюРаботники.Сотрудник.Наименование
		|			ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
		|		КОНЕЦ КАК Работник,
		|		ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|		ПриемНаРаботуВОрганизациюРаботники.Должность КАК Должность,
		|		ПриемНаРаботуВОрганизациюОсновныеНачисления.Размер КАК ОкладТарифнаяСтавка
		|	ИЗ
		|		Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботники
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ПриемНаРаботуВОрганизациюРаботники.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
		|			ПО ПриемНаРаботуВОрганизациюРаботники.Ссылка = ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка
		|				И ПриемНаРаботуВОрганизациюРаботники.Сотрудник = ПриемНаРаботуВОрганизациюОсновныеНачисления.Сотрудник
		|	ГДЕ
		|		ПриемНаРаботуВОрганизациюРаботники.Ссылка = &ДокументСсылка) КАК СтрокиДокумента
		|ИТОГИ ПО
		|	Работник";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой "Т-1а",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ1а()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемНаРаботуВОрганизацию_Т1а";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;

	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = РаботникиОрганизации.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет("Т1а_от_5_1_2004");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботник"); // строка работника

	// массив с двумя строками - для разбиения на страницы
    ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
    // выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.

	ВыведеноСтрок = 0;
	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл

		ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
		ВложеннаяВыборка.Следующий();
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Подразделение = Строка(ВложеннаяВыборка.ПодразделениеОрганизации);
		ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);
		// Уточним валюту тарифной ставки
		ОбластьМакета.Параметры.ОкладТарифнаяСтавка = "" + Формат(ВложеннаяВыборка.ОкладТарифнаяСтавка,"ЧЦ=15; ЧДЦ=2") + Символы.ПС;
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = ОбластьМакетаШапка.ВысотаТаблицы Тогда
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТ1а()	

// Функция формирует табличный документ с печатной формой "Т-1",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ1()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемНаРаботуВОрганизацию_Т1";
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	// запоминаем области макета
	Макет = ПолучитьМакет("Т1_от_5_1_2004");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника

	// выводим данные о руководителях организации
    Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
	КонецЕсли;
	
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
		ВложеннаяВыборка.Следующий();
		
		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВложеннаяВыборка.НомерСтроки
		КонецЕсли; 
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Данные по работнику.
		ОбластьМакета.Параметры.Подразделение = Строка(ВложеннаяВыборка.ПодразделениеОрганизации);
		ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);
		
		// Уточним валюту тарифной ставки
		ОбластьМакета.Параметры.ОкладТарифнаяСтавкаЦелаяЧасть = "" + Цел(ВложеннаяВыборка.ОкладТарифнаяСтавка);
		
		ДробнаяЧасть = ВложеннаяВыборка.ОкладТарифнаяСтавка - Цел(ВложеннаяВыборка.ОкладТарифнаяСтавка);
		ОбластьМакета.Параметры.ОкладТарифнаяСтавкаДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100); 
		
		ОбластьМакета.Параметры.ИспытательныйСрок = "Без испытательного срока";
		
		ОбластьМакета.Параметры.НадбавкаЦелаяЧасть   = "";
		ОбластьМакета.Параметры.НадбавкаДробнаяЧасть = "";
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
        ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТ1()	

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Т1_от_5_1_2004" Тогда
		
		ТабДокумент = ПечатьТ1();
		
	ИначеЕсли ИмяМакета = "Т1а_от_5_1_2004" тогда
		
		ТабДокумент = ПечатьТ1а();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Прием на работу в организацию "), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Т1_от_5_1_2004,Т1а_от_5_1_2004","Форма Т-1","Форма Т-1а");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриемНаРаботуВОрганизацию.Дата,
	|	ПриемНаРаботуВОрганизацию.Организация,
	|	ВЫБОР
	|		КОГДА ПриемНаРаботуВОрганизацию.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ПриемНаРаботуВОрганизацию.Организация
	|		ИНАЧЕ ПриемНаРаботуВОрганизацию.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ПриемНаРаботуВОрганизацию.Ссылка,
	|	ПриемНаРаботуВОрганизацию.Организация.Наименование
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
	|ГДЕ
	|	ПриемНаРаботуВОрганизацию.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизаций(ВыборкаПоШапкеДокумента, Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",					Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",					Дата);
	Запрос.УстановитьПараметр("Организация",					Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",			ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);

	// Описание текста запроса:

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	ТЧРаботникиОрганизации.ДатаПриема,
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
	|	ТЧРаботникиОрганизации.Должность,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец <> &Организация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаСотрудникРаботалВОрганизации,
	|	ВЫБОР
	|		КОГДА (РаботникиОрганизацийСрезПоследних.Сотрудник ЕСТЬ NULL )
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ФизЛицоУжеРаботаетПоОсновномуМесту
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
	|				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
	|					И ТЧРаботникиОрганизации.НомерСтроки > ТЧРаботникиОрганизации2.НомерСтроки
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ТЧРаботникиОрганизации.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента, Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОрганизацийСрезПоследних
	|		ПО ТЧРаботникиОрганизации.Физлицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
	|			И (РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|			И (ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы))
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка";

	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизаций()

Функция СформироватьЗапросПоПрежнимМестам(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",			Дата);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	ДанныеПоРаботникуДоНазначения.Регистратор КАК КонфликтныйДокумент,
	|	ДанныеПоРаботникуДоНазначения.Сотрудник.ВидЗанятости КАК ВидЗанятостиПоДругомуМестуРаботы,
	|	ВЫБОР
	|		КОГДА ДанныеПоОсновномуМестуРаботы.Сотрудник ЕСТЬ NULL 
	|				ИЛИ ДанныеПоОсновномуМестуРаботы.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СотрудникРаботаетПоОсновномуМесту,
	|	ДругиеСотрудникиДокумента.НомерСтрокиДругогоСотрудника
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Док.Сотрудник.Физлицо КАК Физлицо,
	|				СостояниеВнутри.Сотрудник КАК Сотрудник,
	|				МАКСИМУМ(СостояниеВнутри.Период) КАК ДатаПоследнегоИзменения
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК СостояниеВнутри
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Док
	|					ПО (Док.Ссылка = &ДокументСсылка)
	|						И СостояниеВнутри.Сотрудник.Физлицо = Док.Сотрудник.Физлицо
	|						И (СостояниеВнутри.Организация = &ГоловнаяОрганизация)
	|						И СостояниеВнутри.Период <= Док.ДатаПриема
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Док.Сотрудник.Физлицо,
	|				СостояниеВнутри.Сотрудник) КАК СписокДат
	|			ПО ДанныеПоРаботникуДоНазначения.Сотрудник = СписокДат.Сотрудник
	|				И ДанныеПоРаботникуДоНазначения.Период = СписокДат.ДатаПоследнегоИзменения
	|				И (ДанныеПоРаботникуДоНазначения.Организация = &ГоловнаяОрганизация)
	|				И (ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|		ПО (ДанныеПоРаботникуДоНазначения.Сотрудник.Физлицо = ТЧРаботникиОрганизации.Сотрудник.Физлицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента, Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК ДанныеПоОсновномуМестуРаботы
	|		ПО (ДанныеПоОсновномуМестуРаботы.Сотрудник.Физлицо = ТЧРаботникиОрганизации.Сотрудник.Физлицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(ДругиеРаботники.НомерСтроки) КАК НомерСтрокиДругогоСотрудника
	|		ИЗ
	|			Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ДругиеРаботники
	|				ПО (ДругиеРаботники.Сотрудник.Физлицо = ТЧРаботникиОрганизации.Сотрудник.Физлицо)
	|					И (ДругиеРаботники.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы))
	|					И (ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы))
	|					И (ДругиеРаботники.НомерСтроки <> ТЧРаботникиОрганизации.НомерСтроки)
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|			И ДругиеРаботники.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДругиеСотрудникиДокумента
	|		ПО (ДругиеСотрудникиДокумента.НомерСтроки = ТЧРаботникиОрганизации.НомерСтроки)
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|ИТОГИ ПО
	|	НомерСтроки";

	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Формирует запрос по таблице "ОсновныеНачисления" документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачисления()

	Запрос = Новый Запрос;

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧНачисления.Ссылка,
	|	ТЧНачисления.НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.ВидРасчета,
	|	ТЧНачисления.Размер,
	|	ТЧРаботникиОрганизации.ДатаПриема,
	|	ДвойныеСтроки.КонфликтнаяСтрокаНомер КАК ДвойнаяСтрока
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧНачисления2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ТЧНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ТЧНачисления2
	|				ПО ТЧНачисления2.Ссылка = ТЧНачисления.Ссылка
	|					И ТЧНачисления.Сотрудник = ТЧНачисления2.Сотрудник
	|					И ТЧНачисления.ВидРасчета = ТЧНачисления2.ВидРасчета
	|					И ТЧНачисления.НомерСтроки < ТЧНачисления2.НомерСтроки
	|		ГДЕ
	|			ТЧНачисления.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ДвойныеСтроки
	|		ПО ТЧНачисления.НомерСтроки = ДвойныеСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ПО ТЧРаботникиОрганизации.Сотрудник = ТЧНачисления.Сотрудник
	|			И ТЧРаботникиОрганизации.Ссылка = ТЧНачисления.Ссылка
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка";

	Запрос.Текст = ТекстЗапроса;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок, ПоддержкаВнутреннегоСовместительства)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, в которую принимается работник!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники организации"": ";
	
	Если НЕ ПриказНаГруппуСотрудников Тогда
		СтрокаНачалаСообщенияОбОшибке = "";
	КонецЕсли;

	//Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда
	
	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не указано подразделение, в которое принимается сотрудник!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
	КонецЕсли;

	// Должность
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Должность) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не указана должность сотрудника!", Отказ, Заголовок);
	КонецЕсли;

	Если ВыборкаПоСтрокамДокумента.ОшибкаСотрудникРаботалВОрганизации тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Сотрудник уже работал в организации, для повторного приема на работу необходимо создать нового сотрудника!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ОшибкаСотрудникРаботалВОрганизации тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Сотрудник уже работал в организации, для повторного приема на работу необходимо создать нового сотрудника!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаПриема
	НетДатыПриема = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаПриема);
	Если НетДатыПриема Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не указана дата приема на работу!", Отказ, Заголовок);
	Иначе
		#Если Клиент Тогда
			Если ВыборкаПоСтрокамДокумента.ДатаПриема > РабочаяДата Тогда
				Сообщить(СтрокаНачалаСообщенияОбОшибке + "Дата приема на работу превышает рабочую дату!", СтатусСообщения.Важное);
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;

	Если НетСотрудника ИЛИ НетДатыПриема Тогда
		Возврат;
	КонецЕсли;
	
	// Сотрудник указан дважды
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		СтрокаСообщениеОбОшибке = "Сотрудник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОсновныеНачисления" документа.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";
	
	Если НЕ ПриказНаГруппуСотрудников Тогда
		СтрокаНачалаСообщенияОбОшибке = "";
	КонецЕсли;
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
		
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не указан вид расчета!", Отказ, Заголовок);
		
	Иначе
		// Двойные строки
		Если ВыборкаПоСтрокамДокумента.ДвойнаяСтрока <> NULL Тогда
			СтрокаСообщениеОбОшибке = "Сотруднику не может быть назначено одно и тоже начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	// проверка на существование работника в табличной части "РаботникиОрганизации"
	Если ВыборкаПоСтрокамДокумента.ДатаПриема = NULL Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Данный сотрудник не введен в приказ - по нему не могут быть введены начисления!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность оформления работника на работу согласно указанному в шапке документа реквизиту "ВидЗанятости"
Процедура ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, Отказ, Заголовок)

	// обходим строки запроса
	Пока ВыборкаСтрокЗапроса.Следующий() Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаСтрокЗапроса.НомерСтроки) +
		""" табл. части ""Работники организации"": ";
		
		Если НЕ ПриказНаГруппуСотрудников Тогда
			СтрокаНачалаСообщенияОбОшибке = "";
		КонецЕсли;

		// Проверка сочетаний видов занятости работника в одной организации
		Если ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы  Тогда

			// Для основного места работы недопустимо наличие внешнего совместительства
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.Совместительство  Тогда
				СтрокаСообщениеОбОшибке = "Нельзя принять сотрудника на основное место работы до тех пор,
				|	пока он оформлен внешним совместителем!
				|	(См. приказ: " + ВыборкаСтрокЗапроса.КонфликтныйДокумент + ")"; 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			ИначеЕсли ВыборкаСтрокЗапроса.СотрудникРаботаетПоОсновномуМесту Тогда
					СтрокаСообщениеОбОшибке = "Сотрудник уже работает по основному месту работы!"; 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			ИначеЕСЛИ НЕ ВыборкаСтрокЗапроса.НомерСтрокиДругогоСотрудника = NULL Тогда
					СтрокаСообщениеОбОшибке = "Сотрудник дважды указан в документе с видом занятости ""Основное место работы""!"; 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;

		ИначеЕсли ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство  Тогда

			// Для внешнего совместительства недопустимо основное место работы
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы  Тогда
				СтрокаСообщениеОбОшибке = "Нельзя оформить сотрудника на внешнее совместительство, 
				|	так как он уже оформлен в организации по основному месту работы! 
				|	(См. приказ: " + ВыборкаСтрокЗапроса.КонфликтныйДокумент + ")"; 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;

		ИначеЕсли ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство  Тогда

			// При оформлении на внутреннее совместительство должно быть основное место работы или внешнее совместительство
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы <> Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы 
				И ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы <> Перечисления.ВидыЗанятостиВОрганизации.Совместительство 
				И НЕ ВыборкаСтрокЗапроса.СотрудникРаботаетПоОсновномуМесту Тогда
				СтрокаСообщениеОбОшибке = "Нельзя оформить сотрудника на внутреннее совместительство, 
				|	так как он не оформлен в организации или по основному месту работы или по внешнему совместительству!"; 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;
	
		КонецЕсли;

	КонецЦикла;

	
КонецПроцедуры

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизаций, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	// Движения на дату приёма
	
	// Движения по регистру "РаботникиОрганизаций"
	Движение = Движения.РаботникиОрганизаций.Добавить();
	// Свойства
	Движение.Период						= ВыборкаПоРаботникиОрганизаций.ДатаПриема;
	// Измерения
	Движение.Сотрудник					= ВыборкаПоРаботникиОрганизаций.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Ресурсы
	Движение.ЗанимаемыхСтавок			= 1;
	Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизаций.ПодразделениеОрганизации;
	Движение.Должность					= ВыборкаПоРаботникиОрганизаций.Должность;
	
	// Реквизиты
	Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений


Процедура ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, УчетнаяПолитикаПоПерсоналуОрганизации)
	// плановые начисления
	Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период						= ВыборкаСтрокЗапроса.ДатаПриема;
	
	// Измерения
	Движение.Сотрудник					= ВыборкаСтрокЗапроса.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ВидРасчетаИзмерение		= ВыборкаСтрокЗапроса.ВидРасчета;
	
	// Ресурсы
	Движение.Размер						= ВыборкаСтрокЗапроса.Размер;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		// данные учетной политики
		УчетнаяПолитикаПоПерсоналуОрганизации	= глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
		ПоддержкаВнутреннегоСовместительства	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналуОрганизации, Организация, "ПоддержкаВнутреннегоСовместительства");
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок, ПоддержкаВнутреннегоСовместительства);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// выполним выборку по табличной части документа
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизаций(ВыборкаПоШапкеДокумента, Режим);
			ВыборкаПоСтрокамДокумента = РезультатЗапросаПоРаботники.Выбрать();
			УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");

			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл 
				
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента , Отказ, Заголовок);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, УчетнаяПолитикаПоПерсоналуОрганизации);
				КонецЕсли; 
				
			КонецЦикла;
			
			// проверим виды занятости работника в организации
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоПрежнимМестам(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента.Выбрать(), Отказ, Заголовок);
			КонецЦикла;

			// выполним выборку по табличной части основных начислений
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоНачисления().Выбрать();

			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок);
				Если не Отказ Тогда
					ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, УчетнаяПолитикаПоПерсоналуОрганизации);
				КонецЕсли;
				
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		Организация = Основание.Организация;

		НоваяСтрока = РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник = Основание;
		НоваяСтрока.Физлицо = Основание.ФизЛицо;
		
		НоваяСтрока = ОсновныеНачисления.Добавить();
		НоваяСтрока.Сотрудник = Основание;
		НоваяСтрока.Физлицо = Основание.ФизЛицо;
		НоваяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ПринадлежностьПоследовательностям.КадровыеПриказыОрганизаций.Очистить();
		Для Каждого СтрокаРаботникиОрганизации Из РаботникиОрганизации Цикл
			ЗаписьРегистрации = ПринадлежностьПоследовательностям.КадровыеПриказыОрганизаций.Добавить();
			ЗаписьРегистрации.Период		= Дата;
			ЗаписьРегистрации.Регистратор	= Ссылка;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ВведенКопированием = Истина;
	
КонецПроцедуры

мДлинаСуток = 86400;

