Перем мВалютаРегламентированногоУчета Экспорт;

Перем мЗаконодательство2006 Экспорт;

Перем ВидыСубконтоСчетов;
Перем ПоддержкаПБУ18;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОтчетаКомитенту()
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетКомитентуОПродажах.Номер,
	|	ОтчетКомитентуОПродажах.Дата,
	|	ОтчетКомитентуОПродажах.ДоговорКонтрагента,
	|	ОтчетКомитентуОПродажах.Контрагент,
	|	ОтчетКомитентуОПродажах.Организация,
	|	ОтчетКомитентуОПродажах.СуммаДокумента,
	|	ОтчетКомитентуОПродажах.ВалютаДокумента,
	|	ОтчетКомитентуОПродажах.СтавкаНДСВознаграждения,
	|	ОтчетКомитентуОПродажах.СуммаВознаграждения,
	// {ОбособленныеПодразделения
	|	ОтчетКомитентуОПродажах.ПодразделениеОрганизации,
	// }ОбособленныеПодразделения
	|	ОтчетКомитентуОПродажах.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|		Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаХранения,
	|		ЦенаПоступления,
	|		СуммаПоступления,
	|		СуммаВознаграждения
	|	)
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();

	Шапка.Следующий();

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомитентуОПродажах_ОтчетКомитентуОПродажах";
	Макет       = ПолучитьМакет("ОтчетКомитентуОПродажах");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Отчет комитенту");
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик               = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель              = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);

	Итого         = 0;

	Пока ВыборкаСтрокТовары.Следующий() Цикл

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьМакета);

		Итого = Итого + ВыборкаСтрокТовары.СуммаПоступления;

	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = Итого;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.СуммаПрописью       = ОбщегоНазначения.СформироватьСуммуПрописью(Итого, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаВознаграждения = "Сумма комиссионного вознаграждения составила " 
	                                            + ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.СуммаВознаграждения, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.ИтоговаяСтрока      = "Всего наименований " + ВыборкаСтрокТовары.Количество() 
	                                            + ", на сумму " + ОбщегоНазначения.ФорматСумм(Итого, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьОтчетаКомитенту()

//  Функция формирует табличиный документ как акт об оказании услуг
// на сумму вознаграждения
// 
Функция ПечатьАкта()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Получатель,
	|	Организация КАК Поставщик,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	СтавкаНДСВознаграждения,
	|	СуммаВознаграждения КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();

	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомитентуОПродажах_АктОбУслугах";
	Макет       = ПолучитьМакет("АктОбУслугах");

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеКонтрагента;

	ОбластьМакета.Параметры.ТекстЗаголовка      = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Акт об оказании услуг");
	ОбластьМакета.Параметры.ТекстОСуммеПрописью = 
		"Сумма комиссионного вознаграждения составила " 
		+ ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.ВалютаДокумента)
		+ ", в том числе НДС " + Шапка.СтавкаНДСВознаграждения;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАкта() 

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если ИмяМакета = "ОтчетКомитентуОПродажах" Тогда
		
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОтчетаКомитенту();
	ИначеЕсли ИмяМакета = "АктОбОказанииУслуг" Тогда
		
		// Напечатаем акт об оказании услуг на сумму комиссионного вознаграждения
		ТабДокумент = ПечатьАкта();
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОтчетКомитентуОПродажах,АктОбОказанииУслуг","Отчет комитенту","Акт об оказании услуг");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ЗаполнитьНастройкуКнигиУСН(ЗадатьВопрос = Истина) Экспорт
	
	Если НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата) и УдержатьВознаграждение Тогда

		#Если Клиент Тогда
		Если РучнаяНастройка_УСН Тогда
			Если ЗадатьВопрос Тогда
				ТекстВопроса = 
				"Отражение платежа в Книге учета доходов и расходов настроено вручную.
				|Перезаполнить показатели Книги учета доходов и расходов?";
				Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
					РучнаяНастройка_УСН = Ложь;
				Иначе
					Возврат;
				КонецЕсли;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		#КонецЕсли
		СуммаДляКУДиР = Товары.Итог("СуммаВознаграждения");
		Если НЕ ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			КурсВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			СуммаДляКУДиР = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДляКУДиР, ВалютаДокумента, Константы.ВалютаРегламентированногоУчета.Получить(), КурсВалюты.Курс, 1, КурсВалюты.Кратность, 1);
		КонецЕсли;
		
		Графа4_УСН = 0;
		Графа5_УСН = СуммаДляКУДиР;
		ДоходыЕНВД_УСН  = Ложь;
		Содержание_УСН  = "Комиссионное вознаграждение удержано из выручки комитента.";

	КонецЕслИ;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаТоваров.Колонки.Добавить("КорПодразделениеОрганизации");

	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорПодразделениеОрганизации");

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов");

	СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
	СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПоРеализации");
	СтруктураОбязательныхПолей.Вставить("СчетДоходов");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура(); //"Номенклатура, Количество, Сумма");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	//УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ, Заголовок);

	ДатаДока   = СтруктураШапкиДокумента.Дата;
	Проводки = Движения.Хозрасчетный;

	ТаблицыДокумента = Новый Структура("ТаблицаПоУслугам", ТаблицаПоУслугам);
	
	// Зачет авансов, полученных от комитента по комиссионному вознаграждению,
	// всегда проводится в автоматическом режиме
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам) Тогда
		СтруктураШапкиДокумента.Вставить("СпособЗачетаАвансов", Перечисления.СпособыЗачетаАвансов.Автоматически);
	Иначе
		СтруктураШапкиДокумента.Вставить("СпособЗачетаАвансов", Перечисления.СпособыЗачетаАвансов.НеЗачитывать);
	КонецЕсли;
	ТаблицаЗачетаАвансов = Новый ТаблицаЗначений;
	
	ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
		СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, Истина, Отказ, Заголовок);
	
	ВидыСубконтоСчетов = Новый Соответствие; // кэш видов субконто
	
	ПоддержкаПБУ18 = СтруктураШапкиДокумента.ПрименениеПБУ18;
	
	УдержаноВознаграждение = 0;
	УдержаноНДС = 0;
	
	Если СтруктураШапкиДокумента.УдержатьВознаграждение 
		И ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам) 
		И СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам <> СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом
		И ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(
			СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.РасчетыСКонтрагентами, СтруктураШапкиДокумента.Дата)
		Тогда
		
		Для каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		
			Если СтрокаВзаиморасчетов.ДокументРасчетов = СтруктураШапкиДокумента.Ссылка Тогда
			
				// Сформируем проводку по переносу задолженности на счет учета расчетов за комиссионные товары.
				Проводка = Проводки.Добавить();

				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Оказание услуг по договору комиссии";
				
				Проводка.Сумма       = СтрокаВзаиморасчетов.СуммаБУ;
				
				Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

				Если СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
				КонецЕсли;
				
		   		Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
				КонецЕсли;
				
				УдержаноВознаграждение = Проводка.Сумма;
			
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли; 
	
	//Фиксация выручки и НДС (проводки)
	ТаблицаВыручки= ТаблицаПоУслугам.Скопировать();
	ТаблицаВыручки.Свернуть("СтавкаНДС","Сумма, СуммаБУ, СуммаНУ, СуммаВал, НДС, НДСВал");

	// Выручка
		
	Если ТаблицаВыручки.Итог("СуммаБУ") <> 0 Тогда

		Проводка = Проводки.Добавить();

		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма       = ТаблицаВыручки.Итог("СуммаБУ");
		Проводка.Содержание  = "Оказание услуг по договору комиссии";

		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = ТаблицаВыручки.Итог("СуммаВал");
		КонецЕсли;

		Проводка.СчетКт = СтруктураШапкиДокумента.СчетДоходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,           СтруктураШапкиДокумента.Субконто);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтруктураШапкиДокумента.СтавкаНДСВознаграждения);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", УслугаПоВознаграждению);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РеализуемыеАктивы", УслугаПоВознаграждению);
		
		Если Проводка.СчетКт.Количественный Тогда
			Проводка.КоличествоКт = 1;  
		КонецЕсли;
	
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			СуммаНУДт = ТаблицаВыручки.Итог("СуммаНУ") + ТаблицаВыручки.Итог("НДС");
			СуммаНУКт = ТаблицаВыручки.Итог("СуммаНУ");
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
				СуммаНУДт, СуммаНУКт, Проводка.Сумма - СуммаНУДт, Проводка.Сумма - СуммаНУДт, , , 
				Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
			
		КонецЕсли;
	
		// {УчетДоходовИРасходовИП
		// Учет доходов предпринимателя
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
			УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация);
			ХарактерДеятельности = ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, СтруктураШапкиДокумента.СчетДоходов,, СтруктураШапкиДокумента.СчетДоходов, УчетнаяПолитикаНУ);
			НоменклатурнаяГруппа = ?(УчетнаяПолитикаНУ.ВестиУчетПоВидамДеятельности, СтруктураШапкиДокумента.Субконто, Неопределено);
			
			// Отражение оказанной услуги.
			Отгружено = Движения.ИПМПЗОтгруженные.ДобавитьПриход();
			Отгружено.Период = СтруктураШапкиДокумента.Дата;
			Отгружено.Организация = СтруктураШапкиДокумента.Организация;
			Отгружено.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
			Отгружено.ХарактерДеятельности = ХарактерДеятельности;
			Отгружено.ВидМПЗ = Перечисления.ВидыМПЗ.Продукция;
			Отгружено.Номенклатура = СтруктураШапкиДокумента.УслугаПоВознаграждению;
			Отгружено.ДокументОтгрузки = СтруктураШапкиДокумента.Ссылка;
			Отгружено.Количество = 1;
			Отгружено.Выручка = ТаблицаВыручки.Итог("Сумма");
			Отгружено.НДСНачисленный = ТаблицаВыручки.Итог("НДС");
				
			ТаблицаВзаиморасчетовВрем = ТаблицаВзаиморасчетов.Скопировать();
			Удержание = ТаблицаВзаиморасчетовВрем.Добавить();
			Удержание.ДокументРасчетов = СтруктураШапкиДокумента.Ссылка;
			Удержание.СуммаБУ = УдержаноВознаграждение;
			
			ДоходыИРасходыПредпринимателя.ЗачетОплатыПокупателя(ЭтотОбъект, СтруктураШапкиДокумента, Движения.ИПМПЗОтгруженные.Выгрузить(), ТаблицаВзаиморасчетовВрем);
			
		КонецЕсли;
		// }УчетДоходовИРасходовИП

		// НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС И не ТаблицаВыручки.Итог("НДС") = 0 Тогда

			Проводка = Проводки.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = ТаблицаВыручки.Итог("НДС");
			Проводка.Содержание  = "Оказание услуг по договору комиссии";

			Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаНДСПоРеализации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,           СтруктураШапкиДокумента.Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтруктураШапкиДокумента.СтавкаНДСВознаграждения);

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет",Перечисления.ВидыПлатежейВГосБюджет.Налог);

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
		КонецЕсли;
			
    КонецЕсли;
	
	ДвиженияПоРегиструРеализованныеТовары(СтруктураШапкиДокумента, ТаблицаПоУслугам);

	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаВзаиморасчетов, Отказ);

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
		ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, ТаблицаПоУслугам, Отказ, Заголовок);
	КонецЕсли;
	
	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки, ТаблицаВзаиморасчетов, Отказ)

	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если ТаблицаВыручки.Итог("Сумма") = 0 и ТаблицаВыручки.Итог("НДС") = 0 Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда

		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		ТаблицаВыручкиДляНДС = ТаблицаВыручки.Скопировать();
		ТаблицаВыручкиДляНДС.ЗаполнитьЗначения(СтруктураШапкиДокумента.УслугаПоВознаграждению,"Ценность,Номенклатура");
		ТаблицаВыручкиДляНДС.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.ПосредническиеУслуги,"ВидЦенности");
		ТаблицаВыручкиДляНДС.ЗаполнитьЗначения(Истина,"Услуга");
		ТаблицаВыручкиДляНДС.Свернуть("ВидЦенности, Ценность, СчетУчетаЦенности, СтавкаНДС, Номенклатура, Услуга",
		"Сумма,СуммаБезНДС,НДС,СуммаВал,СуммаБезНДСВал,НДСВал,Количество");
		
		СчетОтнесенияНДС = ПланыСчетов.Хозрасчетный.НДС;
			
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручкиДляНДС, Движения, Отказ, СчетОтнесенияНДС, ТаблицаВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета УСН
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, ТаблицаПоУслугам, Отказ, Заголовок)
	
	Если НЕ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, Новый Структура("ТаблицаРасчетов", ТаблицаВзаиморасчетов));
		
КонецПроцедуры

Процедура ДвиженияПоРегиструРеализованныеТовары(СтруктураШапкиДокумента, ТаблицаПоУслугам)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",  		СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Контрагент",   		СтруктураШапкиДокумента.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Период", 			Новый МоментВремени(Ссылка.Дата, Ссылка));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализованныеТоварыКомитентовОстатки.Номенклатура,
	               |	СУММА(РеализованныеТоварыКомитентовОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	               |	СУММА(РеализованныеТоварыКомитентовОстатки.ВыручкаОстаток) КАК ВыручкаОстаток,
	               |	СУММА(РеализованныеТоварыКомитентовОстатки.СуммаПоступленияОстаток) КАК СуммаПоступленияОстаток
	               |ИЗ
	               |	РегистрНакопления.РеализованныеТоварыКомитентов.Остатки(
	               |		&Период,
	               |		Организация = &Организация
	               |		    И Контрагент = &Контрагент
	               |		    И ДоговорКонтрагента = &ДоговорКонтрагента) КАК РеализованныеТоварыКомитентовОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализованныеТоварыКомитентовОстатки.Номенклатура";
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	ТаблицаТоваров = ТаблицаПоУслугам.Скопировать();
	ТаблицаТоваров.Свернуть("Номенклатура, Услуга", "Количество, Выручка, СуммаПоступления");
	ТаблицаОстатков.индексы.Добавить("Номенклатура");
			
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		Если Строка.Количество = 0 И (НЕ Строка.Услуга) Тогда
			Продолжить;
		ИначеЕсли Строка.Количество < 0 Тогда
			
			Движение = Движения.РеализованныеТоварыКомитентов.ДобавитьПриход();
			Движение.Активность		= Истина;
			Движение.Период			= СтруктураШапкиДокумента.Дата;
			Движение.Организация 	= СтруктураШапкиДокумента.Организация;
			
			Движение.Контрагент		 	= СтруктураШапкиДокумента.Контрагент;
			Движение.ДоговорКонтрагента	= СтруктураШапкиДокумента.ДоговорКонтрагента;
			Движение.Номенклатура 		= Строка.Номенклатура;
			
			Движение.Количество 		= - Строка.Количество;
			Движение.Выручка 			= - Строка.Выручка;
			Движение.СуммаПоступления	= - Строка.СуммаПоступления;
			
			Продолжить;
		КонецЕсли;
			
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура",	Строка.Номенклатура);
		
		НайденныеСтроки = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
				
		Для Каждого Запись из НайденныеСтроки Цикл
			
			Если  Строка.Услуга Тогда
				Если Запись.ВыручкаОстаток = 0 Тогда
					Продолжить;
				КонецЕсли;
				Списать = Мин(Строка.Выручка, Запись.ВыручкаОстаток);
				Если Списать > 0 Тогда
					Движение = Движения.РеализованныеТоварыКомитентов.ДобавитьРасход();
					Движение.Активность		= Истина;
					Движение.Период			= Дата;
					Движение.Организация 	= СтруктураШапкиДокумента.Организация;
					
					Движение.Контрагент		 	= СтруктураШапкиДокумента.Контрагент;
					Движение.ДоговорКонтрагента	= СтруктураШапкиДокумента.ДоговорКонтрагента;
					Движение.Номенклатура 		= Строка.Номенклатура;
					
					Движение.Количество 		= Окр(Строка.Количество * Списать /Строка.Выручка, 3);
					Движение.Выручка 			= Списать;
					
					Строка.Выручка 			= Строка.Выручка - Движение.Выручка;
					Строка.Количество		= Строка.Количество - Движение.Количество;
					Запись.ВыручкаОстаток	= Запись.ВыручкаОстаток - Движение.Выручка;
				КонецЕсли;
				
				Если Строка.Выручка = 0 Тогда
					Прервать;
				КонецЕсли;
			Иначе
				Если Запись.КоличествоОстаток = 0 Тогда
					Продолжить;
				КонецЕсли;
				Списать = Мин(Строка.Количество, Запись.КоличествоОстаток);
				Если Списать > 0 Тогда
					Движение = Движения.РеализованныеТоварыКомитентов.ДобавитьРасход();
					Движение.Активность		= Истина;
					Движение.Период			= Дата;
					Движение.Организация 	= СтруктураШапкиДокумента.Организация;
					
					Движение.Контрагент		 	= СтруктураШапкиДокумента.Контрагент;
					Движение.ДоговорКонтрагента	= СтруктураШапкиДокумента.ДоговорКонтрагента;
					Движение.Номенклатура 		= Строка.Номенклатура;
					
					Движение.Количество 		= Списать;
					Если Запись.КоличествоОстаток = 0 Тогда
						Движение.Выручка 			= Запись.ВыручкаОстаток;
						Движение.СуммаПоступления	= Запись.СуммаПоступленияОстаток;
					ИначеЕсли Списать = Строка.Количество или Строка.Количество = 0 Тогда
						Движение.Выручка 			= Строка.Выручка;
						Движение.СуммаПоступления	= Строка.СуммаПоступления;
					Иначе 
						Движение.Выручка 			= Окр(Строка.Выручка * Списать /Строка.Количество, 2);
						Движение.СуммаПоступления	= Окр(Строка.СуммаПоступления * Списать /Строка.Количество, 2);
					КонецЕсли;
					Строка.Количество 		= Строка.Количество - Движение.Количество;
					Строка.Выручка 			= Строка.Выручка - Движение.Выручка;
					Строка.СуммаПоступления = Строка.СуммаПоступления - Движение.СуммаПоступления;
					Запись.КоличествоОстаток= Запись.КоличествоОстаток - Движение.Количество;
				КонецЕсли;
				
				Если Строка.Количество = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	//Пока не добавили реквизиты в шапку
	Если не СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС") тогда
		СтруктураШапкиДокумента.Вставить("СуммаВключаетНДС",Истина);
	КонецЕсли;

	Если не СтруктураШапкиДокумента.Свойство("УчитыватьНДС") тогда
		СтруктураШапкиДокумента.Вставить("УчитыватьНДС",Истина);
	КонецЕсли;

	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС, УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)


	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Договор с контрагентом должен иметь вид договора с комитентом!");
			ДоговорКонтрагента =  Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Возврат;
		КонецЕсли;

		СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	ЗаполнитьНастройкуКнигиУСН(Ложь);
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	СуммаВознаграждения = Товары.Итог("СуммаВознаграждения")+?(СуммаВключаетНДС,0,Товары.Итог("СуммаНДСВознаграждения"));

	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем СтруктураШапкиДокумента;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
    
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("СтавкаНДС"   , "Ссылка.СтавкаНДСВознаграждения");
	СтруктураПолей.Вставить("Сумма"       , "СуммаВознаграждения");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДСВознаграждения");
	
	//Поля, необходимые для списания регистра реализованных товаров	
	СтруктураПолей.Вставить("Количество"  			, "Количество");
	СтруктураПолей.Вставить("СуммаПоступления" 		, "СуммаПоступления");
	СтруктураПолей.Вставить("Выручка"  				, "Сумма");
	
	РезультатЗапросаПоУслугам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);

	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);

	//Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураВыданный", Ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мЗаконодательство2006 = Дата >= '20060101000000';

