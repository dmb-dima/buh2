// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

Перем мУчетнаяПолитика Экспорт;
Перем мУчетВПродажныхЦенах Экспорт;

// Хранит признак ведения в конфигурации учета по статьям движения денежных средств
Перем ЕстьУчетПоСтатьямДДС Экспорт;

Перем СодержаниеПроводки;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Определяет коды счетов дебета и кредита для вывода в печатную форму.
//
Функция ОпределитьКодыСчетСубсчет() 
	
	КодыСчетов=Новый Структура("Дебет,Кредит");
	
	// Определяем код счета дебета
	КассаВВалюте = Ложь;
	ВалютаРег    = мВалютаРегламентированногоУчета;
	Если СчетКасса.Валютный Тогда
		КассаВВалюте = Истина;
	КонецЕсли;
	
	СчетДт=СчетКасса;
		
	КодыСчетов.Дебет=СчетДт;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица Тогда
		
		Если КассаВВалюте Тогда
			СтрокаКредит = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал.Код;
		Иначе
			СтрокаКредит = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами.Код;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		
		СтрокаКредит     = СчетУчетаРасчетовСКонтрагентом.Код;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		
		СтрокаКредит     = СчетУчетаРасчетовСКонтрагентом.Код;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		
		СтрокаКредит     = СчетУчетаРасчетовСКонтрагентом.Код;
		
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ТабСчет=РасшифровкаПлатежа.Выгрузить();
		
		ТабСчет.Свернуть("СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам","СуммаПлатежа");
		
		СтрокаКредит="";
		
		Для Каждого Строка Из ТабСчет Цикл
			
			Если НЕ Строка.СчетУчетаРасчетовСКонтрагентом.Пустая() И Найти(СтрокаКредит,Строка.СчетУчетаРасчетовСКонтрагентом.Код)=0 Тогда
				СтрокаКредит=СтрокаКредит+", "+Строка.СчетУчетаРасчетовСКонтрагентом.Код;
			КонецЕсли;
			
			Если НЕ Строка.СчетУчетаРасчетовПоАвансам.Пустая() И Найти(СтрокаКредит,Строка.СчетУчетаРасчетовПоАвансам.Код)=0 Тогда
				СтрокаКредит=СтрокаКредит+", "+Строка.СчетУчетаРасчетовПоАвансам.Код;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаКредит=Сред(СтрокаКредит,2);
		
	КонецЕсли;
	
	КодыСчетов.Кредит=СтрокаКредит;
	
	Возврат КодыСчетов;
	
КонецФункции // ОпределитьКодыСчетСубсчет()

Функция РубКоп(Сумма)
	
	Руб=Цел(Сумма);
	Коп=ОКР(100*(Сумма-Руб),0,1);
	СуммаРубКоп=""+Руб+" руб. "+Цел(Коп/10)+(Коп-10*Цел(Коп/10))+" коп.";
	Возврат СуммаРубКоп;
	
КонецФункции

// Функция формирует табличный документ с печатной формой ПКО
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПКО()
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Номер,
	|	ПриходныйКассовыйОрдер.Дата КАК ДатаДокумента,
	|	ПриходныйКассовыйОрдер.Организация,
	|	ПриходныйКассовыйОрдер.Контрагент,
	|	ПриходныйКассовыйОрдер.Контрагент.Представление КАК Контрагент,
	|	ПриходныйКассовыйОрдер.ПринятоОт КАК ПринятоОт,
	|	ПриходныйКассовыйОрдер.Основание КАК Основание,
	|	ПриходныйКассовыйОрдер.Приложение КАК Приложение,
	|	ПриходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
	|	ПриходныйКассовыйОрдер.ВалютаДокумента,
	|	ПриходныйКассовыйОрдер.ВалютаДокумента.Представление КАК ВалютаПредставление,
	// {ОбособленныеПодразделения
	|	ПриходныйКассовыйОрдер.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ПриходныйКассовыйОрдер.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ПриходныйКассовыйОрдер.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ПриходныйКассовыйОрдер.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	// }ОбособленныеПодразделения
	|	ПриходныйКассовыйОрдер.СтавкаНДС
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Макет       = ПолучитьОбщийМакет("КО1");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_КО1";
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	Валютный = (Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета);

	// Выводим шапку ПКО

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");

	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	
	ОбластьМакета.Параметры.СуммаРубКоп       = ?(Валютный,Формат(Шапка.Сумма,"ЧЦ=15; ЧДЦ=2")+" "+СокрЛП(Шапка.ВалютаДокумента),РубКоп(Шапка.Сумма));
	ОбластьМакета.Параметры.Сумма		      = Формат(Шапка.Сумма,"ЧЦ=15; ЧДЦ=2")+?(Валютный," "+СокрЛП(Шапка.ВалютаДокумента),"");
	ОбластьМакета.Параметры.СуммаПрописью     = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.ВалютаДокумента);
	
	ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерДокумента    = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);

	КодыСчетСубсчет = ОпределитьКодыСчетСубсчет();

	ОбластьМакета.Параметры.КодДебета = КодыСчетСубсчет.Дебет;
	ОбластьМакета.Параметры.СубСчет   = КодыСчетСубсчет.Кредит;

	ТабНДС = РасшифровкаПлатежа.Выгрузить();

	ТабНДС.Свернуть("СтавкаНДС", "СуммаНДС");

	ТекстСуммаНДС = "";

	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		
		Для Каждого СтрокаНДС ИЗ ТабНДС цикл
			ТекстСуммаНДС = ТекстСуммаНДС + Символы.ПС + "НДС (" + ?(НЕ ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС), "без налога", СтрокаНДС.СтавкаНДС) + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00")+" "+Шапка.ВалютаПредставление;
		КонецЦикла;
		
	Иначе
		ТекстСуммаНДС = ТекстСуммаНДС + Символы.ПС + "НДС (без налога) " + Формат(0, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00")+" "+Шапка.ВалютаПредставление;
	КонецЕсли;

	ТекстСуммаНДС = Сред(ТекстСуммаНДС, 2);

	ОбластьМакета.Параметры.ВТомЧисле = ТекстСуммаНДС;

	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	ОтветственныеЛица = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);

	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
	ОбластьМакета.Параметры.ФИОКассира            = ОтветственныеЛица.КассирПредставление;

	ОбластьМакета.Параметры.ПринятоОт  = Шапка.ПринятоОт;
	ОбластьМакета.Параметры.Основание  = Шапка.Основание;
	ОбластьМакета.Параметры.Приложение = Шапка.Приложение;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПКО()

//// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПКО" Тогда
		
		ТабДокумент = ПечатьПКО();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), НепосредственнаяПечать);
	
КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПКО","Приходный кассовый ордер");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);

	Если Не СтрокаПлатеж = Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);

	КонецЕсли;

КонецПроцедуры // ПроверкаКурсовВалют()

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

	ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);

	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);

КонецПроцедуры // ПересчитатьСуммуНДС()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПроверитьЗаполнениеДокумента(Отказ, Заголовок, СтруктураШапкиДокумента)

	// Проверка шапки документа
	
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	СтруктураОбязательныхПолей.Вставить("СуммаДокумента", "Не указана сумма по документу.");
	СтруктураОбязательныхПолей.Вставить("СчетКасса", "Не указан счет учета денежных средств.");

	Если СчетКасса.Валютный Тогда
		 СтруктураОбязательныхПолей.Вставить("ВалютаДокумента", "Не указана валюта документа.");
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", "Не указан счет кредита.");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка И ВыручкаСНТТ Тогда
		
		СтруктураОбязательныхПолей.Вставить("Контрагент", "Не указан склад");
		
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		СтруктураОбязательныхПолей.Вставить("Контрагент", "Не указан контрагент");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица Тогда
		
		СтруктураОбязательныхПолей.Вставить("Контрагент", "Не указано подотчетное лицо");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", "Не указан счет кредита.");
		СтруктураОбязательныхПолей.Вставить("Контрагент", "Не указан банковский счет организации");
		
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверка табличной части РасшифровкаПлатежа
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа") = СуммаДокумента Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не совпадают сумма документа и ее расшифровка.",Отказ,Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	КолСтрок = РасшифровкаПлатежа.Количество();
	
	Для каждого Платеж из РасшифровкаПлатежа Цикл
		
		Если КолСтрок = 1 Тогда
			ТекстНомераСтроки = "";
		Иначе
			ТекстНомераСтроки = "Строка " + Платеж.НомерСтроки + " расшифровки платежа: ";
		КонецЕсли;
		
		ЕстьРасчетыСПоставщикамиПокупателями = 
			(ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя)
			ИЛИ (ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика);
			
		Если ЕстьРасчетыСПоставщикамиПокупателями Тогда
			
			Если НЕ ЗначениеЗаполнено(Платеж.СпособПогашенияЗадолженности) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Распределение оплаты"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			ИначеЕсли (Платеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу)
				И НЕ ЗначениеЗаполнено(Платеж.Сделка) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Документ расчетов"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
			
			Если НЕ ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Договор контрагента"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			Если (ЕстьРасчетыПоКредитам
				ИЛИ (Платеж.СпособПогашенияЗадолженности <> Перечисления.СпособыПогашенияЗадолженности.НеПогашать))
				И НЕ ЗначениеЗаполнено(Платеж.СчетУчетаРасчетовСКонтрагентом) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Счет расчетов"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			Если ЕстьРасчетыСПоставщикамиПокупателями 
				И НЕ ЗначениеЗаполнено(Платеж.СчетУчетаРасчетовПоАвансам) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Счет авансов"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) Тогда
				
				ВидДоговораКонтрагента = Платеж.ДоговорКонтрагента.ВидДоговора;
				Если (ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
					
					СтрокаСообщения = ТекстНомераСтроки
						+ "Договор """ + Строка(Платеж.ДоговорКонтрагента) + """ с видом """ + Строка(ВидДоговораКонтрагента) + "
						| не может использоваться в операции """ + Строка(ВидОперации) + """.
						|Допускается использовать только договоры вида: ""C покупателем"", ""С комиссионером"", ""С комитентом"".";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
					
				ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) Тогда
					
					СтрокаСообщения = ТекстНомераСтроки
						+ "Договор """ + Строка(Платеж.ДоговорКонтрагента) + """ с видом """ + Строка(ВидДоговораКонтрагента) + "
						| не может использоваться в операции """ + Строка(ВидОперации) + """.
						|Допускается использовать только договоры вида: ""C поставщиком"", ""С комитентом"", ""С комиссионером""."; 
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);

				ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.Прочее) Тогда
					
					СтрокаСообщения = ТекстНомераСтроки
						+	"Договор """ + Строка(Платеж.ДоговорКонтрагента) + """ с видом """ + Строка(ВидДоговораКонтрагента) + "
						| не может использоваться в операции """ + Строка(ВидОперации) + """.
						|Допускается использовать только договоры вида ""Прочее"".";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);

				КонецЕсли;
				
				УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(
					Организация, Платеж.ДоговорКонтрагента, Платеж.ДоговорКонтрагента.Организация, Отказ, Заголовок);
														  
				УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
					СтруктураШапкиДокумента, Платеж.ДоговорКонтрагента, Отказ, Заголовок, ТекстНомераСтроки);
														  
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	

	Если (ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка) И мУчетВПродажныхЦенах Тогда
		
		СтруктураПолей = Новый Структура();
        СтруктураПолей.Вставить("СтавкаНДС");
		УправлениеДенежнымиСредствами.ПроверитьЗаполнениеТабличнойЧастиПлатежногоДокумента(
			ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоРегистрам(Режим, Отказ, Заголовок ,СтруктураШапкиДокумента)

	СодержаниеПроводки = Основание + ?(ЗначениеЗаполнено(Приложение), ", " + Приложение, "");
	// Бухгалтерские проводки документа

	ДатаДок            = Дата;
	Проводки           = Движения.Хозрасчетный;

	ВалютаРег          = мВалютаРегламентированногоУчета;
	ДанныеОВалюте      = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДок);

	КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	КассаВВалюте       = СчетКасса.Валютный;
	СчетДт             = СчетКасса;
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка
		Тогда
		СтруктураШапкиДокумента.Вставить("КоррПодразделение", СтруктураШапкиДокумента.ПодразделениеОрганизации);
	Иначе
		СтруктураШапкиДокумента.Вставить("КоррПодразделение", СтруктураШапкиДокумента.ПодразделениеКт);
	КонецЕсли;

	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда

		СтруктураШапкиДокумента.Вставить("КоррСчет",СчетДт);
		
		ТаблицаДокумента = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		
		Если ЕстьРасчетыПоКредитам Тогда
			ТаблицаДокумента.ЗагрузитьКолонку(ТаблицаДокумента.ВыгрузитьКолонку("СчетОплаты"),"СчетАванса");
		КонецЕсли; 

		ОпределятьСостояниеРасчетов = ЕстьРасчетыСКонтрагентами;
		
		ТаблицаРаспределенияОплат = УправлениеВзаиморасчетами.ПогаситьЗадолженностьКонтрагентов(
			СтруктураШапкиДокумента, ТаблицаДокумента, ЭтотОбъект, 
			Отказ, Заголовок, СодержаниеПроводки, ОпределятьСостояниеРасчетов);

		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда

		Если СтруктураШапкиДокумента.ВыручкаСНТТ Тогда
			
			НоменклатурнаяГруппаВыручки = СтруктураШапкиДокумента.Контрагент.НоменклатурнаяГруппа;
			
			Если мУчетВПродажныхЦенах Тогда
				СчетаУчетаВНТТ = БухгалтерскийУчет.ПолучитьСчетаУчетаВНТТ(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Контрагент, СтруктураШапкиДокумента.Дата, мУчетнаяПолитика);
				СчетВыручки			= СчетаУчетаВНТТ.СчетДоходовОтРеализации;
				СчетСебестоимости 	= СчетаУчетаВНТТ.СчетРасходовОтРеализации;
			КонецЕсли;
			
			// {УчетДоходовИРасходовИП
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
				Движение = Движения.ПрочиеРасчеты.ДобавитьПриход();
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.Организация = СтруктураШапкиДокумента.Организация;
				Движение.Контрагент = СтруктураШапкиДокумента.Контрагент;
				Движение.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
				Движение.Сумма = РасшифровкаПлатежа.Итог("СуммаПлатежа");
			КонецЕсли;
			// }УчетДоходовИРасходовИП
			
			СтатьяДДС = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
			
			Для Каждого Строка Из РасшифровкаПлатежа Цикл
				// Запишем проводки по выручке
				Если мУчетВПродажныхЦенах Тогда
					
					Проводка = Проводки.Добавить();
					Проводка.Период      = ДатаДок;
					Проводка.Организация = Организация;
					Проводка.Содержание  = СодержаниеПроводки;
					
					Проводка.СчетДт      = СчетДт;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств",  СтатьяДДС);
										
					Проводка.СчетКт      = СчетВыручки;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.СтавкаНДС);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы",  НоменклатурнаяГруппаВыручки);
					Проводка.Сумма       = Строка.СуммаПлатежа;
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
						
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Строка.СуммаПлатежа, (Строка.СуммаПлатежа - Строка.СуммаНДС), , , , , Проводка);
					
					//списание товаров по продажным ценам
					Проводка = Проводки.Добавить();
					Проводка.Период      = ДатаДок;
					Проводка.Организация = Организация;
					Проводка.Содержание  = "Реализация товаров в розницу";
					
					Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.СтавкаНДС);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Контрагент);
										
					Проводка.СчетДт      = СчетСебестоимости;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы",  НоменклатурнаяГруппаВыручки);
					
					Проводка.Сумма       = Строка.СуммаПлатежа;
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
					//НДС
					Если Строка.СуммаНДС > 0 Тогда
						
						Проводка = Проводки.Добавить();
						
						Проводка.Период      = ДатаДок;
						Проводка.Организация = Организация;
					    Проводка.Содержание  = СодержаниеПроводки;
						
						Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.Продажи_НДС;
						Проводка.СубконтоДт.СтавкиНДС = Строка.СтавкаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы",  НоменклатурнаяГруппаВыручки);
						
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.НДС;
						Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
						
						Проводка.Сумма       = Строка.СуммаНДС;
						
						БухгалтерскийУчет.УстановитьПодразделенияПроводки(
							Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
						
					КонецЕсли;
					
					
				Иначе
					Проводка = Проводки.Добавить();
					
					Проводка.Период      = ДатаДок;
					Проводка.Организация = Организация;
					Проводка.Содержание  = СодержаниеПроводки;
					
					Проводка.СчетДт      = СчетДт;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтатьяДДС);
					
					Если мУчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД Тогда
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД;
					Иначе
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
						Проводка.СубконтоКт.СтавкиНДС = Строка.СтавкаНДС;
					КонецЕсли;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы",  НоменклатурнаяГруппаВыручки);
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.КоррПодразделение);
						
					СуммаРуб = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						Строка.СуммаПлатежа,
						СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
						КурсДокумента, 1, 
						КратностьДокумента, 1);
					СуммаНДСРуб = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						Строка.СуммаНДС,
						СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
						КурсДокумента, 1, 
						КратностьДокумента, 1);
					
					Проводка.Сумма       = СуммаРуб;
					
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаРуб, (СуммаРуб - СуммаНДСРуб), , , , , Проводка);
					
					Если КассаВВалюте Тогда
						
						Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
						Проводка.ВалютнаяСуммаДт = Строка.СуммаПлатежа;
						
						Если СчетДт.Валютный Тогда
							Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
							Проводка.ВалютнаяСуммаДт = Строка.СуммаПлатежа;
						КонецЕсли;
						
					КонецЕсли; // Если КассаВВалюте Тогда

					Если СуммаНДСРуб > 0 Тогда
						
						Проводка = Проводки.Добавить();
						
						Проводка.Период      = ДатаДок;
						Проводка.Организация = Организация;
				    	Проводка.Содержание  = СодержаниеПроводки;
						
						Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.Продажи_НДС;
						Проводка.СубконтоДт.СтавкиНДС = Строка.СтавкаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы",  НоменклатурнаяГруппаВыручки);
						
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.НДС;
						Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
						
						БухгалтерскийУчет.УстановитьПодразделенияПроводки(
							Проводка, СтруктураШапкиДокумента.КоррПодразделение, СтруктураШапкиДокумента.КоррПодразделение);
						
						Проводка.Сумма = СуммаНДСРуб;
						
					КонецЕсли; // Если СуммаНДС > 0 Тогда

					// Запишем проводки по учету розничной выручки - Счета РВ
					Проводка = Проводки.Добавить();
					
					Проводка.Период      = ДатаДок;
					Проводка.Организация = Организация;
					Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручка;
					
					Проводка.СубконтоДт.Склады    = СтруктураШапкиДокумента.Контрагент;
					Проводка.СубконтоДт.СтавкиНДС = Строка.СтавкаНДС;
					
					БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.КоррПодразделение, "Дт");
					
					Проводка.Содержание  = СодержаниеПроводки;
					Проводка.Сумма       = СуммаРуб;
					
					Если СуммаНДСРуб > 0 Тогда												
						Проводка = Проводки.Добавить();
						
						Проводка.Период      = ДатаДок;
						Проводка.Организация = Организация;
				    	Проводка.Содержание  = СодержаниеПроводки;
						
						Проводка.Сумма = СуммаНДСРуб;
						
						Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручке;
						
						Проводка.СубконтоДт.Склады    = СтруктураШапкиДокумента.Контрагент;
						Проводка.СубконтоДт.СтавкиНДС = Строка.СтавкаНДС;
						
						БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.КоррПодразделение, "Дт");
					
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если мУчетВПродажныхЦенах Тогда
				ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	Иначе

		Проводка = Проводки.Добавить();

		Проводка.Период      = ДатаДок;
		Проводка.Организация = Организация;

		Проводка.СчетДт      = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств",  РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица Тогда

			Если КассаВВалюте Тогда
				СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
			Иначе
				СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
			КонецЕсли;

			Проводка.СчетКт     = СчетКт;
			Проводка.Содержание  = СодержаниеПроводки;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", Контрагент);

		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда

			СчетКт = СчетУчетаРасчетовСКонтрагентом;

			Проводка.СчетКт     = СчетКт;
			Проводка.Содержание  = СодержаниеПроводки;

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,СубконтоКт3);

		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда

			СчетКт = СчетУчетаРасчетовСКонтрагентом;

			Проводка.Содержание  = СодержаниеПроводки;
			Проводка.СчетКт     = СчетКт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "БанковскиеСчета", Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);

		КонецЕсли;

		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.КоррПодразделение);
			
		Если КассаВВалюте Тогда

			Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтруктураШапкиДокумента.СуммаДокумента, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				КурсДокумента, ДанныеОВалюте.Курс, 
				КратностьДокумента, ДанныеОВалюте.Кратность);

			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;

			Если СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;

			Если СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;

		Иначе

			Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;

		КонецЕсли; // Если КассаВВалюте Тогда

	КонецЕсли; // Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда

	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);

	//Движения по подсистеме УСН.
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН  ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
		Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
			НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, , Новый Структура("ТаблицаРасчетов", ТаблицаРаспределенияОплат));
		Иначе
			НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, );
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, Отказ, Заголовок)

	Перем ТаблицаВыручки;
	
	Если Не СтруктураШапкиДокумента.УпрощенныйУчетНДС И Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка и СтруктураШапкиДокумента.ВыручкаСНТТ и мУчетВПродажныхЦенах Тогда
		
		ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаВыручки);
		
		Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
			УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
	    Иначе
			
			ТаблицаАвансов = Новый ТаблицаЗначений;
			ТаблицаАвансов.Колонки.Добавить("ДокументРасчетов");
			ТаблицаАвансов.Колонки.Добавить("ДатаДокументаРасчетов");
			ТаблицаАвансов.Колонки.Добавить("СуммаБУ");
			НоваяСтрока = ТаблицаАвансов.Добавить();
			НоваяСтрока.ДатаДокументаРасчетов = СтруктураШапкиДокумента.Дата;
			НоваяСтрока.СуммаБУ = СтруктураШапкиДокумента.СуммаДокумента;
			
			СчетОтнесенияНДС = ПланыСчетов.Хозрасчетный.НДС;
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ, СчетОтнесенияНДС, ТаблицаАвансов);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("УпрощенныйУчетНДС, СпособОценкиТоваровВРознице");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС", Ложь);
	КонецЕсли;
	
	Если мУчетВПродажныхЦенах = Неопределено Тогда
		мУчетВПродажныхЦенах = Ложь;
		Если СтруктураШапкиДокумента.Свойство("СпособОценкиТоваровВРознице")
			И (СтруктураШапкиДокумента.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаВыручки) Экспорт
	
	Если Не (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка и СтруктураШапкиДокумента.ВыручкаСНТТ и мУчетВПродажныхЦенах) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураТаблицыВыручки = Новый Структура("ВидЦенности, СчетДоходов
			|, СтавкаНДС
			|, СуммаПлатежа, СуммаНДС, СуммаБезНДСВал
			|",,
			,
			,"СуммаВал","НДСВал",
			);
	//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
	ТаблицаВыручки = ОбщегоНазначения.СформироватьТаблицуЗначений(РасшифровкаПлатежа.Выгрузить(),СтруктураТаблицыВыручки,,Истина);
	ТаблицаВыручки.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаВыручки.Колонки.Добавить("НДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаВыручки.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаВыручки.Колонки.Добавить("Ценность");
	
	УчетнаяПолитикаНеЗадана = Ложь;
	Если мУчетнаяПолитика = Неопределено Тогда
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	КонецЕсли;
	
	Если Не УчетнаяПолитикаНеЗадана Тогда
		СчетаУчетаВНТТ = БухгалтерскийУчет.ПолучитьСчетаУчетаВНТТ(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Контрагент, СтруктураШапкиДокумента.Дата, мУчетнаяПолитика);
		ТаблицаВыручки.ЗаполнитьЗначения(СчетаУчетаВНТТ.СчетДоходовОтРеализации,"СчетДоходов");
	КонецЕсли;		
	
	ТаблицаВыручки.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.Товары,"ВидЦенности");
	
	Если не СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
		ДанныеОВалютеРегУчета			= МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
		СуммаДокументаВВалютеРеглУчета = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТаблицаВыручки.Итог("СуммаВал"),
																	СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																	КурсДокумента, ДанныеОВалютеРегУчета.Курс, 
																	КратностьДокумента, ДанныеОВалютеРегУчета.Кратность);
		Если не СуммаДокументаВВалютеРеглУчета = 0  Тогда
			ТаблицаВыручки.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СуммаДокументаВВалютеРеглУчета,ТаблицаВыручки.ВыгрузитьКолонку("СуммаВал")),"Сумма");
			НДСВВалютеРегУчета =Окр(СуммаДокументаВВалютеРеглУчета*ТаблицаВыручки.Итог("НДСВал")/ ТаблицаВыручки.Итог("СуммаВал"),2);
			Если НДСВВалютеРегУчета = 0  Тогда
				ТаблицаВыручки.ЗаполнитьЗначения(0,"НДС");
			Иначе
				ТаблицаВыручки.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(НДСВВалютеРегУчета,ТаблицаВыручки.ВыгрузитьКолонку("НДСВал")),"НДС");
			КонецЕсли;
		КонецЕсли; 
																	
																	
	Иначе
		ТаблицаВыручки.ЗагрузитьКолонку(ТаблицаВыручки.ВыгрузитьКОлонку("СуммаВал"),"Сумма");
		ТаблицаВыручки.ЗагрузитьКолонку(ТаблицаВыручки.ВыгрузитьКОлонку("НДСВал"),	"НДС");
	КонецЕсли; 
	
	Для каждого СтрокаВыручки Из ТаблицаВыручки Цикл
		СтрокаВыручки.СуммаБезНДС = СтрокаВыручки.Сумма - СтрокаВыручки.НДС;
		СтрокаВыручки.СуммаБезНДСВал = СтрокаВыручки.СуммаВал - СтрокаВыручки.НДСВал;
	
	КонецЦикла; 
		
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		ТаблицаВыручки.Колонки.Добавить("ДокументОплаты");
		ТаблицаВыручки.Колонки.Добавить("ДатаОплаты");
		ТаблицаВыручки.Колонки.Добавить("СчетУчетаНДСПоРеализации");
		ТаблицаВыручки.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "ДокументОплаты");
		ТаблицаВыручки.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ДатаОплаты");
		ТаблицаВыручки.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.Продажи_НДС, "СчетУчетаНДСПоРеализации");
	КонецЕсли;
	
КонецПроцедуры	
//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

//// Процедура - обработчик события "ОбработкаЗаполнения".
////
Процедура ОбработкаЗаполнения(Основание)

	Если (Основание = Неопределено) ИЛИ Не ЭтотОбъект.Метаданные().Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание, Ложь);

	ВалютаДокумента = мВалютаРегламентированногоУчета;
	//СчетКасса       = ПланыСчетов.Хозрасчетный.КассаОрганизации;

	ПараметрыДокументаОснования = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Основание);
	ВидДокументаОснования       = Основание.Метаданные().Имя;
	Если ВидДокументаОснования = "СчетНаОплатуПокупателю" Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ПараметрыДокументаОснования.Организация, 
		                                                ПараметрыДокументаОснования.Контрагент, ПараметрыДокументаОснования.ДоговорКонтрагента);
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовСКонтрагентом",    СчетаУчета.СчетРасчетовПокупателя);
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовПоАвансам",        СчетаУчета.СчетАвансовПокупателя);
	КонецЕсли;

	ДокументОснование = ПараметрыДокументаОснования.Ссылка;

	Если ВидДокументаОснования = "РеализацияТоваровУслуг"
	 ИЛИ ВидДокументаОснования = "АктОбОказанииПроизводственныхУслуг" 
	 ИЛИ ВидДокументаОснования = "ОтчетКомиссионераОПродажах" 
	 ИЛИ ВидДокументаОснования = "ОтчетКомитентуОПродажах" 
	 ИЛИ ВидДокументаОснования = "ПередачаОС" 
	 ИЛИ ВидДокументаОснования = "СчетНаОплатуПокупателю"
	 ИЛИ ВидДокументаОснования = "ПередачаНМА" Тогда

		ВидОперации  = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		Контрагент   = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору           = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
		Если ВидРасчетовПоДоговору=Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте тогда
			ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.ВыгрузитьКолонки();
		Если НЕ (ВидДокументаОснования = "ОтчетКомитентуОПродажах" ИЛИ ВидДокументаОснования = "ПередачаНМА") Тогда
			ТаблицаСуммОснования = УчетНДС.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			ТаблицаСуммОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		Иначе
		    ТаблицаСуммОснования = Новый ТаблицаЗначений();
			ТаблицаСуммОснования.Колонки.Добавить("СуммаПлатежа",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			ТаблицаСуммОснования.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			ТаблицаСуммОснования.Колонки.Добавить("СуммаНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СтрокаТаблицыСумм = ТаблицаСуммОснования.Добавить();
			Если ВидДокументаОснования = "ОтчетКомитентуОПродажах" Тогда
				СтрокаТаблицыСумм.СуммаПлатежа = ПараметрыДокументаОснования.СуммаВознаграждения;
				СтрокаТаблицыСумм.СтавкаНДС    = ПараметрыДокументаОснования.СтавкаНДСВознаграждения;
				СтрокаТаблицыСумм.СуммаНДС     = Основание.Товары.Итог("СуммаНДСВознаграждения");
				
			ИначеЕсли ВидДокументаОснования = "ПередачаНМА" Тогда
				СтрокаТаблицыСумм.СуммаПлатежа = ПараметрыДокументаОснования.СуммаДокумента;
				СтрокаТаблицыСумм.СтавкаНДС    = ПараметрыДокументаОснования.СтавкаНДС;
				СтрокаТаблицыСумм.СуммаНДС     = ПараметрыДокументаОснования.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаСуммОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 Тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,"КратностьВзаиморасчетов");
		// При вводе на основании устанавливаем режим распределения оплаты "По документу"
		ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.ПоДокументу,"СпособПогашенияЗадолженности");
		ТаблицаПлатежей.ЗаполнитьЗначения(Основание,"Сделка");

		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");

		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
			Если ПараметрыДокументаОснования.РасчетыВУсловныхЕдиницах Тогда
				Если ПараметрыДокументаОснования.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
					СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						СтрокаПлатеж.СуммаПлатежа,
						мВалютаРегламентированногоУчета, ПараметрыДокументаОснования.ВалютаВзаиморасчетов,
						1, ПараметрыДокументаОснования.КурсВзаиморасчетов,
						1, ПараметрыДокументаОснования.КратностьВзаиморасчетов);
					СтрокаПлатеж.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						СтрокаПлатеж.СуммаНДС,
						мВалютаРегламентированногоУчета, ПараметрыДокументаОснования.ВалютаВзаиморасчетов,
						1, ПараметрыДокументаОснования.КурсВзаиморасчетов,
						1, ПараметрыДокументаОснования.КратностьВзаиморасчетов);
				КонецЕсли;

				СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					СтрокаПлатеж.СуммаВзаиморасчетов,
					ПараметрыДокументаОснования.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
					СтрокаПлатеж.КурсВзаиморасчетов, 1,
					СтрокаПлатеж.КратностьВзаиморасчетов, 1);
					
					ПересчитатьНДС = Ложь;
					Если ПараметрыДокументаОснования.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
						Если ТаблицаПлатежей.Колонки.Найти("СтавкаНДС") <> Неопределено Тогда
							Если ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС) Тогда
								ПересчитатьНДС = Истина;						
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если ПересчитатьНДС Тогда
						ПересчитатьСуммуНДС(СтрокаПлатеж);
					Иначе																					
						СтрокаПлатеж.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						СтрокаПлатеж.СуммаНДС,
						ПараметрыДокументаОснования.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
						СтрокаПлатеж.КурсВзаиморасчетов, 1,
						СтрокаПлатеж.КратностьВзаиморасчетов, 1);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла; 
			
		Если ВидДокументаОснования = "ОтчетКомиссионераОПродажах" Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом"); 
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансамПолученным, "СчетУчетаРасчетовПоАвансам") ;			
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом") ;
			Если ВидДокументаОснования = "ОтчетКомитентуОПродажах" И ПараметрыДокументаОснования.УдержатьВознаграждение Тогда
				СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
					ПараметрыДокументаОснования.Организация, Контрагент, ДоговорКонтрагента);
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетАвансовПокупателя, "СчетУчетаРасчетовПоАвансам") ;				
			Иначе
				ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам") ;				
			КонецЕсли;
		КонецЕсли;
		
		Если ВидДокументаОснования = "СчетНаОплатуПокупателю" Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание, "СчетНаОплату");
		КонецЕсли;
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	 ИначеЕсли ВидДокументаОснования = "ОтчетОРозничныхПродажах" Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.РозничнаяВыручка;
		Контрагент   = ПараметрыДокументаОснования.Склад;
		СтатьяДвиженияДенежныхСредств = ПараметрыДокументаОснования.СтатьяДвиженияДенежныхСредств;
		Если ПараметрыДокументаОснования.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
			ВыручкаСНТТ = Истина;
		КонецЕсли;
		
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

		ТаблицаПлатежей = РасшифровкаПлатежа.ВыгрузитьКолонки();
		
		ТаблицаСуммОснования = УчетНДС.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
		ТаблицаСуммОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаСуммОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 Тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		
		// Вычитаем оплату по безналичному расчету
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СУММА(ОтчетОРозничныхПродажахОплата.СуммаОплаты) КАК СуммаБезналичнойОплаты
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
		|ГДЕ
		|	ОтчетОРозничныхПродажахОплата.Ссылка = &Основание
		|	И ОтчетОРозничныхПродажахОплата.ВидОплаты.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплат.БанковскийКредит), ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПлатежнаяКарта))
		|
		|ИМЕЮЩИЕ
		|	СУММА(ОтчетОРозничныхПродажахОплата.СуммаОплаты) ЕСТЬ НЕ NULL ");
		
		Запрос.УстановитьПараметр("Основание", Основание);
		Результат = Запрос.Выполнить();
		
		СуммаБезналичнойОплаты = 0;
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			СуммаБезналичнойОплаты = Выборка.СуммаБезналичнойОплаты;
		КонецЕсли;
		
		Если СуммаБезналичнойОплаты > 0 Тогда
			
			ОстатокБезналичнойОплаты = СуммаБезналичнойОплаты;
			ОстатокОплаты = ТаблицаПлатежей.Итог("СуммаПлатежа");
			Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
				
				БезналичнаяОплата = Окр(ОстатокБезналичнойОплаты * СтрокаПлатеж.СуммаПлатежа / ОстатокОплаты, 2);
				
				ОстатокБезналичнойОплаты  = ОстатокБезналичнойОплаты - БезналичнаяОплата;
				ОстатокОплаты             = ОстатокОплаты - СтрокаПлатеж.СуммаПлатежа;
				
				СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаПлатежа - БезналичнаяОплата;
				ПересчитатьСуммуНДС(СтрокаПлатеж);
				
			КонецЦикла;
		
		КонецЕсли;
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) или ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		СчетКасса= ПланыСчетов.Хозрасчетный.КассаОрганизации;
	Иначе
		СчетКасса= ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
	КонецЕсли; 

	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	Ответственный = глЗначениеПеременной("глТекущийПользователь");

	Если ПринятоОт = "" И ЗначениеЗаполнено(Контрагент) Тогда

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			ПринятоОт = ?(Контрагент.НаименованиеПолное = "", Контрагент.Наименование, Контрагент.НаименованиеПолное);

		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата",    Дата);
			Запрос.УстановитьПараметр("ФизЛицо", Контрагент);
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Результат = Запрос.Выполнить().Выбрать();

			Если Результат.Следующий() Тогда

				ПринятоОт = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
					Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя),
					" " + Лев(Результат.Имя,1) + "." 
					+ ?(НЕ ПустаяСтрока(Результат.Отчество), Лев(Результат.Отчество, 1)+".", ""), 
					""),"");

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитика.Количество() > 0 Тогда	
		Если (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;
	
	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект, , (мУчетВПродажныхЦенах И ВыручкаСНТТ));

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим) //в разработке
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОплата;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	// Документ должен принадлежать хотя бы к одному виду учета (бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверитьЗаполнениеДокумента(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	//Проверим на возможность проведения в БУ и НУ
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам тогда 
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,СтрокаОплаты.ДоговорКонтрагента,
			Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;
	КонецЕсли;	
		
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитика.Количество() > 0 Тогда	
		Если (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;

	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект, , (мУчетВПродажныхЦенах И ВыручкаСНТТ));
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	ДоговорКонтрагента = РасшифровкаПлатежа[0].ДоговорКонтрагента;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

ЕстьУчетПоСтатьямДДС = УправлениеДенежнымиСредствами.ЕстьУчетПоСтатьямДДС();
