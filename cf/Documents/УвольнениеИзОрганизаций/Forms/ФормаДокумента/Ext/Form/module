////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция определяет, необходимо или нет прекращать стандартные вычеты
//
Функция ПрекращатьСтандартныеВычеты(Сотрудник, Дата)
	
	Если Не Сотрудник.Пустая() И Не (Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство) Тогда
		Возврат РегистрыСведений.НДФЛПрименениеВычетов.ПолучитьПоследнее(Дата, Новый Структура("Физлицо", Сотрудник.Физлицо)).Организация = мГоловнаяОрганизация;
	КонецЕсли;
	
КонецФункции // ПрекращатьСтандартныеВычеты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	//Проверка источника кадровой информации
	ПроцедурыУправленияПерсоналом.УчетЗарплатыИКадровВоВнешнейПрограмме(Отказ, Ссылка, ЭтаФорма, ЭтоНовый());
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
   
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		Если ВведенКопированием <> Истина Тогда
			РаботникиОрганизации.Добавить();
		КонецЕсли;
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ФизЛицо");
 	СтруктураКолонок.Вставить("ДатаУвольнения");

	// Установить ограничение - изменять видимость колонок для табличной части Начисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,,ЭлементыФормы.РаботникиОрганизации);
		
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
	
	УстановитьВидимость();		

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
				
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры //ПриЗакрытии

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

//Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
//	
//	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
//		Команда = "";
//		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьПостроительЗапроса" Тогда
//			РаботникиОрганизации.Загрузить(ЗначениеВыбора.Данные.Выгрузить())
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьПостроительЗапроса" Тогда
			Автозаполнение(ЗначениеВыбора.ПостроительЗапроса);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ


// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
       

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 1);
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
Процедура ДатаПриИзменении(Элемент = Неопределено)

	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ
 
// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
		СтрокаТабличнойЧасти.Сотрудник						= ВыбранноеЗначение;
		СтрокаТабличнойЧасти.Физлицо					= ВыбранноеЗначение.Физлицо;
		СтрокаТабличнойЧасти.ПрекращатьСтандартныеВычеты	= ПрекращатьСтандартныеВычеты(ВыбранноеЗначение, Дата);
	КонецЕсли;
	
КонецПроцедуры // ТабличнаяЧастьОбработкаВыбора()

Процедура РаботникиОрганизацииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ПрекращатьСтандартныеВычеты.Видимость = Не (ДанныеСтроки.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	
КонецПроцедуры // РаботникиОрганизацииПриВыводеСтроки()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
КонецПроцедуры // РаботникиОрганизацииПриПолученииДанных()

Процедура ДействияФормыЗаполнитьСписокРаботников(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		РаботникиОрганизации.Очистить();
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, , Организация, , Ложь, Истина);
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица -
// подбирает подходящие должность и подразделение
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	ТекущиеДанные.Физлицо = Элемент.Значение.ФизЛицо;
	Если Элемент.Значение.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
		ТекущиеДанные.ПрекращатьСтандартныеВычеты = Ложь;
	ИначеЕсли ЗначениеЗаполнено(Элемент.Значение) Тогда
		ДатаУвольнения = ТекущиеДанные.ДатаУвольнения;
		ТекущиеДанные.ПрекращатьСтандартныеВычеты = ПрекращатьСтандартныеВычеты(Элемент.Значение, ?(ЗначениеЗаполнено(ДатаУвольнения), ДатаУвольнения, Дата));
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииСотрудникПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникНачалоВыбора()

Процедура РаботникиОрганизацииСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокиРаботников = РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
	Если СтрокиРаботников.Количество() > 0 И Элемент.Значение <> ВыбранноеЗначение Тогда
		Предупреждение("В данном документе по одному работнику можно вводить только одну строку!");
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	Элемент.Значение			= ВыбранноеЗначение;
	ДанныеСтроки.Физлицо	= ВыбранноеЗначение.ФизЛицо;
	
	ДатаУвольнения = ДанныеСтроки.ДатаУвольнения;
	ДанныеСтроки.ПрекращатьСтандартныеВычеты = ПрекращатьСтандартныеВычеты(ВыбранноеЗначение, ?(ЗначениеЗаполнено(ДатаУвольнения), ДатаУвольнения, Дата));
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникОкончаниеВводаТекста()


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ПриказНаГруппуСотрудниковПриИзменении(Элемент)
	
	Если НЕ ПереключитьПредставление() Тогда
		ПриказНаГруппуСотрудников = НЕ ПриказНаГруппуСотрудников;
		Возврат;
	КонецЕсли;
	
	УстановитьВидимость();		
	
КонецПроцедуры

Функция ПереключитьПредставление()
	
	//проверка возможности переключения с группового ввода на ввод по одному
	Если НЕ ПриказНаГруппуСотрудников Тогда
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""Работники"" введено более одного сотрудника.");
			Возврат Ложь;
		КонецЕсли;		
	Иначе
		ЗаполнитьПервуюСтроку();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьВидимость()
	
	Если ПриказНаГруппуСотрудников Тогда
		ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница1;
	Иначе
		ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница2;
		ПоказатьСведенияСотрудника();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПоказатьСведенияСотрудника()
	
	Если РаботникиОрганизации.Количество() = 0 Тогда
		РаботникиОрганизации.Добавить();
	КонецЕсли;
	
	Если РаботникиОрганизации.Количество() <> 0 Тогда
		ТекущийСотрудник = РаботникиОрганизации.Получить(0);		
		Сотрудник = ТекущийСотрудник.Сотрудник;
		ДатаУвольнения = ТекущийСотрудник.ДатаУвольнения;
		ОснованиеУвольнения = ТекущийСотрудник.ОснованиеУвольнения;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ПриказНаГруппуСотрудников Тогда
		ЗаполнитьПервуюСтроку();		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПервуюСтроку()
	
	Если РаботникиОрганизации.Количество() > 1 Тогда
		РаботникиОрганизации.Очистить();
		РаботникиОрганизации.Добавить();
	КонецЕсли;
	
	РаботникиОрганизации[0].Сотрудник = Сотрудник;
	РаботникиОрганизации[0].Физлицо = Сотрудник.Физлицо;
	РаботникиОрганизации[0].ДатаУвольнения = ДатаУвольнения;
	РаботникиОрганизации[0].ОснованиеУвольнения = ОснованиеУвольнения;
	РаботникиОрганизации[0].ПрекращатьСтандартныеВычеты = Истина;
	
КонецПроцедуры

Процедура СотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры


Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры


