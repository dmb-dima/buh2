Перем мДлинаСуток;
Перем ВведенКопированием Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Руководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	УвольнениеИзОрганизаций.Номер КАК НомерДок,
		|	УвольнениеИзОрганизаций.Дата КАК ДатаДок,
		|	УвольнениеИзОрганизаций.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	УвольнениеИзОрганизаций.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ВЫБОР
		|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование
		|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ
		|	КОНЕЦ КАК ФИОРуководителя
		|ИЗ
		|	Документ.УвольнениеИзОрганизаций КАК УвольнениеИзОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = &Руководитель)
		|			И УвольнениеИзОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	УвольнениеИзОрганизаций.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда
		
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ФИОФизЛицСрезПоследних.Фамилия ЕСТЬ NULL 
		|			ТОГДА УвольненияИзОрганизацийРаботники.Сотрудник.Наименование
		|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
		|	КОНЕЦ КАК Работник,
		|	УвольненияИзОрганизацийРаботники.НомерСтроки,
		|	УвольненияИзОрганизацийРаботники.ДатаУвольнения,
		|	УвольненияИзОрганизацийРаботники.ОснованиеУвольнения,
		|	Работники.ПодразделениеОрганизации КАК Подразделение,
		|	Работники.Должность,
		|	Работники.ТабельныйНомер
		|ИЗ
		|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольненияИзОрганизацийРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				ФизЛицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						УвольненияИзОрганизацийРаботники.Сотрудник.Физлицо
		|					ИЗ
		|						Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольненияИзОрганизацийРаботники
		|					ГДЕ
		|						УвольненияИзОрганизацийРаботники.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
		|		ПО УвольненияИзОрганизацийРаботники.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуОрганизацииРаботники
		|		ПО (ПриемНаРаботуОрганизацииРаботники.Сотрудник = УвольненияИзОрганизацийРаботники.Сотрудник)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокДат.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизации,
		|			РаботникиОрганизации.Должность.Наименование КАК Должность,
		|			РаботникиОрганизации.Сотрудник.Код КАК ТабельныйНомер
		|		ИЗ
		|			(ВЫБРАТЬ
		|				РаботникиВнутри.Сотрудник КАК Сотрудник,
		|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
		|					ПО РаботникиВнутри.Сотрудник = Док.Сотрудник
		|						И РаботникиВнутри.Период <= Док.ДатаУвольнения
		|			ГДЕ
		|				Док.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиВнутри.Сотрудник) КАК СписокДат
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|				ПО СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
		|					И СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период) КАК Работники
		|		ПО УвольненияИзОрганизацийРаботники.Сотрудник = Работники.Сотрудник
		|ГДЕ
		|	УвольненияИзОрганизацийРаботники.Ссылка = &ДокументСсылка";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

#Если Клиент Тогда
// Функция формирует табличный документ с печатной формой "Т-8а",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ8а()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УвольненияИзОрганизаций_Т8а";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
    ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;

	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет("Т8а_от_5_1_2004");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботник"); // строка работника

	// массив с двумя строками - для разбиения на страницы
    ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
    // выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки);// Для подвала.
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.

	ВыведеноСтраниц = 0; ВыведеноСтрок = 0;
	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		Текст = ВыборкаРаботники.ОснованиеУвольнения;
		ВхождениеСокращения = Найти(Текст,"ТК");
		Если ВхождениеСокращения <> 0 Тогда
			ОбластьМакета.Параметры.ОснованиеУвольнения = Лев(Текст,ВхождениеСокращения + 2);
		КонецЕсли;
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = ОбластьМакетаШапка.ВысотаТаблицы Тогда
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТ8а()	

// Функция формирует табличный документ с печатной формой "Т-8",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ8()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УвольненияИзОрганизаций_Т8";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет("Т8_от_5_1_2004");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника

	// выводим данные о руководителях организации
    Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
	КонецЕсли;
	
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВыборкаРаботники.НомерСтроки
		КонецЕсли; 
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
	КонецЦикла;
	
	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
        ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТ8()	

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Т8_от_5_1_2004" Тогда
		
		ТабДокумент = ПечатьТ8();
		
	ИначеЕсли ИмяМакета = "Т8а_от_5_1_2004" тогда
		
		ТабДокумент = ПечатьТ8а();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Кадровое перемещение "), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Т8_от_5_1_2004,Т8а_от_5_1_2004", "Форма Т-8", "Форма Т-8а");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция Автозаполнение(ПостроительЗапроса) Экспорт
	
	ИсходныйТекстПостроителя = ПостроительЗапроса.Текст;
	ТекстЗапросаПоСпискуРаботников = СтрЗаменить(ИсходныйТекстПостроителя,"РАЗРЕШЕННЫЕ","");
	ТекстЗапросаПоСпискуРаботников = Лев(ТекстЗапросаПоСпискуРаботников, Найти(ТекстЗапросаПоСпискуРаботников,"УПОРЯДОЧИТЬ") - 1);
	
	ПостроительЗапроса.Параметры.Вставить("ГоловнаяОрганизация", 	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
	ОсновнойТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокРаботников.Сотрудник,
	|	СписокРаботников.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА СписокРаботников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НДФЛПрименениеВычетовСрезПоследних.Организация = &ГоловнаяОрганизация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрекращатьСтандартныеВычеты
	|ИЗ
	|		(" + ТекстЗапросаПоСпискуРаботников + ") КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов.СрезПоследних(&ДатаАктуальности, ) КАК НДФЛПрименениеВычетовСрезПоследних
	|		ПО СписокРаботников.Сотрудник.Физлицо = НДФЛПрименениеВычетовСрезПоследних.Физлицо";
	
	//Основной текст запроса
	ПостроительЗапроса.Текст = ОсновнойТекстЗапроса;
	ПостроительЗапроса.Выполнить();
	РаботникиОрганизации.Загрузить(ПостроительЗапроса.Результат.Выгрузить());
	
КонецФункции //Автозаполнение()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	УвольнениеИзОрганизаций.Дата,
	|	УвольнениеИзОрганизаций.Организация,
	|	ВЫБОР
	|		КОГДА УвольнениеИзОрганизаций.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА УвольнениеИзОрганизаций.Организация
	|		ИНАЧЕ УвольнениеИзОрганизаций.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	УвольнениеИзОрганизаций.Ссылка
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций КАК УвольнениеИзОрганизаций
	|ГДЕ
	|	УвольнениеИзОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются данными о 
//  работниках из регистра сведений РаботникиОрганизации и о начислениях
//  и удержаниях из регистров сведений 
//
Функция СформироватьЗапросПоРаботникиОрганизаций(ВыборкаПоШапкеДокумента, Режим)

	Запрос = Новый Запрос;

	// Заполним список обособленных подразделений организации 
	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",				Ссылка);
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("МассивСотрудников",			РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник"));

	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвиженийКадров": 
	// 1. Выборка "ТЧРаботникиОрганизации": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПриказыОПриеме"
	//		Присоединяем данные о приказах-приемах на работу с целью проверки соответствия выбранных приказов физлицам и организации
	//		(приказ о приеме может быть оформлен от лица любого структурного подразделения организации)
	// 3. Выборка "ДанныеПоРаботникиДоНазначения": 
	//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по регистру РаботникиОрганизаций на дату ДатаНачала
	//		для выполнения движений и проверки "Работает ли работник на дату перемещения" в указанной организации (структурном подразделении). 
	//		(Использует данные выборки "ДатыПоследнихДвиженийРаботников")
	// 4. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки, имеющие одинаковый набор реквизитов <ФизЛицо, Приказ>.
	//
	// Вторая часть запроса - вид строки запроса "НачисленияРаботникаОрганизации" - выборка открытых начислений и удержаний работника для их закрытия
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "СписокВидовРасчета":
	//		Для каждой строки ТЧРаботникиОрганизации по регистрам ПлановыеНачисленияРаботниковОрганизаций выполняем срез последних на дату ДатаУвольнения (выборка СписокВидовРасчета).
	//		Для закрытия нужны только те строки начислений и удержаний, ресурс "Размер" которых не равен нулю.
	//		Удержания физлица закрываем по всем структурным подразделениям только в момент увольнения с основного места работы.

	// Третья часть запроса - вид строки запроса "РабочиеМестаДоУвольнения" - выборка остающихся мест работы после увольнения
	// Данные выборки нужня для проверки "Работник не может быть уволен с основного места работы до тех пор, пока он оформлен внутренним совместителем"
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "ДанныеПоРаботникуДоУвольнения":
	//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по выборке "ДвиженияРаботниковОрганизации" регистру РаботникиОрганизаций на дату ДатаУвольнения.
	//		Где выборка "ДвиженияРаботниковОрганизации" есть объединение движений по регистру "РаботникиОрганизаций" и движений, которые должны выполниться
	//		проверяемым документом. 

	// Четвертая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "КонфликтныеДвижения":
	//		Для каждой строки ТЧРаботникиОрганизации ищем движения по регистрам РаботникиОрганизаций
	//		на дату ДатаУвольнения по набору измерений <ФизЛицо, Приказ>

	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПрежнееПодразделение,
	|	ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение КАК ПрежняяОрганизация,
	|	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
	|	ДанныеПоРаботникуДоНазначения.Сотрудник КАК ПрежнийСотрудник,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	NULL КАК ВидРасчетаИзмерение,
	|	NULL КАК ДокументОснованиеРасчета,
	|	NULL КАК КонфликтныйДокумент,
	|	NULL КАК ВидЗанятостиПоДругомуМестуРаботы
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриказыОПриеме
	|		ПО (ПриказыОПриеме.Сотрудник = ТЧРаботникиОрганизации.Сотрудник)
	|			И (ПриказыОПриеме.Ссылка.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Док.Сотрудник КАК Сотрудник,
	|				МАКСИМУМ(СостояниеВнутри.Период) КАК ДатаПоследнегоИзменения
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК СостояниеВнутри
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|					ПО СостояниеВнутри.Сотрудник = Док.Сотрудник
	|						И (Док.Ссылка = &ДокументСсылка)
	|						И СостояниеВнутри.Период <= Док.ДатаУвольнения
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Док.Сотрудник) КАК СписокДат
	|			ПО ДанныеПоРаботникуДоНазначения.Сотрудник = СписокДат.Сотрудник
	|				И ДанныеПоРаботникуДоНазначения.Период = СписокДат.ДатаПоследнегоИзменения
	|		ПО (ДанныеПоРаботникуДоНазначения.Сотрудник = ТЧРаботникиОрганизации.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботникиОрганизаций2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизаций2
	|				ПО (ТЧРаботникиОрганизаций2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизаций2.Сотрудник
	|					И ТЧРаботникиОрганизации.НомерСтроки <> ТЧРаботникиОрганизаций2.НомерСтроки
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""НачисленияРаботникаОрганизации"",
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СписокВидовРасчета.ДокументОснование,
	|	СписокВидовРасчета.ВидРасчетаИзмерение,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|			НачисленияРаботниковОрганизации.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
	|			NULL КАК ДокументОснование
	|		ИЗ
	|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|					НачисленияРаботниковОрганизации.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
	|					МАКСИМУМ(НачисленияРаботниковОрганизации.Период) КАК ДатаИзмененияРеквизитов
	|				ИЗ
	|					Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
	|						ПО Док.Сотрудник = НачисленияРаботниковОрганизации.Сотрудник
	|							И Док.ДатаУвольнения >= НачисленияРаботниковОрганизации.Период
	|							И (Док.Ссылка = &ДокументСсылка)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					НачисленияРаботниковОрганизации.Сотрудник,
	|					НачисленияРаботниковОрганизации.ВидРасчетаИзмерение) КАК ДатыНачислений
	|				ПО НачисленияРаботниковОрганизации.Период = ДатыНачислений.ДатаИзмененияРеквизитов
	|					И НачисленияРаботниковОрганизации.Сотрудник = ДатыНачислений.Сотрудник
	|					И НачисленияРаботниковОрганизации.ВидРасчетаИзмерение = ДатыНачислений.ВидРасчетаИзмерение
	|					И (НачисленияРаботниковОрганизации.Размер <> 0)) КАК СписокВидовРасчета
	|		ПО ТЧРаботникиОрганизации.Сотрудник = СписокВидовРасчета.Сотрудник
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""КонфликтныйДокумент"",
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	КонфликтныеДвижения.Регистратор,
	|	NULL
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаботникиОрганизации.Период КАК Период,
	|			РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|			РаботникиОрганизации.Регистратор КАК Регистратор
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ГДЕ
	|			РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|			И РаботникиОрганизации.Сотрудник В(&МассивСотрудников)) КАК КонфликтныеДвижения
	|		ПО (КонфликтныеДвижения.Сотрудник = ТЧРаботникиОрганизации.Сотрудник)
	|			И (КонфликтныеДвижения.Период = ДОБАВИТЬКДАТЕ(ТЧРаботникиОрганизации.ДатаУвольнения, ДЕНЬ, 1))
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|ИТОГИ ПО
	|	НомерСтроки,
	|	ВидСтрокиЗапроса";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизаций()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация!", Отказ);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, УчетнаяПолитикаПоПерсоналуОрганизации)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники организации"": ";
	
	Если НЕ ПриказНаГруппуСотрудников Тогда
		СтрокаНачалаСообщенияОбОшибке = "";
	КонецЕсли;

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

		// Сотрудник
		НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НетСотрудника Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не выбран сотрудник!", Отказ);
		КонецЕсли;

		// ДатаУвольнения
		НетДатыУвольнения = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаУвольнения);
		Если НетДатыУвольнения Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не указана дата увольнения!", Отказ);
		КонецЕсли;

		// Организация сотрудника должна совпадать с организацией документа
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Указанный сотрудник оформлен на другую организацию!", Отказ);
		КонецЕсли;
	
		Если НетСотрудника ИЛИ НетДатыУвольнения Тогда
			Возврат; // Дальше не проверяем
		КонецЕсли;

		// Проверка: ранее работник должен быть принят на работу
		Если ВыборкаПоСтрокамДокумента.ПрежнийСотрудник = NULL Тогда
			СтрокаПродолжениеСообщенияОбОшибке = "На " + Формат(ВыборкаПоСтрокамДокумента.ДатаУвольнения, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		ИначеЕсли ПустаяСтрока(ВыборкаПоСтрокамДокумента.ПрежнийСотрудник) Тогда
			СтрокаПродолжениеСообщенияОбОшибке = "На " + Формат(ВыборкаПоСтрокамДокумента.ДатаУвольнения, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		КонецЕсли; 

		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "Сотрудник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ);
		КонецЕсли;	

	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда

		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "Возникает противоречие кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ);

	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента      	- выборка из результата запроса по шапке документа,
//  ВыборкаПоРаботникиОрганизации 	- выборка из результата запроса по табличной части документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		//// Если документ нужно проводить по регистру, то для него есть ключ в структуре
		//ИмяРегистра = "РаботникиОрганизаций";
		//
		Движение = Движения.РаботникиОрганизаций.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
		
		// Измерения
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		// Ресурсы
		Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПрежнееПодразделение;
		
		// не записываем значения для этих ресурсов:
		//Движение.Должность
		//Движение.ТабельныйНомер
		
		// Реквизиты
		Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.Увольнение;
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
		
		
	ИначеЕсли ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "НачисленияРаботникаОрганизации" Тогда
		
		
		Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
		
		// Измерения
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.ВидРасчетаИзмерение		= ВыборкаПоРаботникиОрганизации.ВидРасчетаИзмерение;
		// Ресурсы
		Движение.Размер						= 0;
		
		// Реквизиты
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// По строкам документа, в которых указано "Прекращать стандартные вычеты" удаляются
// записи из рег-ра НДФЛПрименениеВычетов с "пустой" организацией (которые пишет док при проведении) - 
// тем самым восстанавливается то значение, которое было до проведения документа
Процедура УдалитьСтрокиВычетов()

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОрганизацияНеУказана",Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1) КАК ДатаПрекращения
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
	|		ПО (УвольнениеИзОрганизацийРаботникиОрганизации.ПрекращатьСтандартныеВычеты)
	|			И (ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1) = НДФЛПрименениеВычетов.Период)
	|			И (НДФЛПрименениеВычетов.Организация = &ОрганизацияНеУказана)
	|			И УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.Физлицо = НДФЛПрименениеВычетов.Физлицо
	|ГДЕ
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка = &Ссылка
	|	И НДФЛПрименениеВычетов.Физлицо ЕСТЬ НЕ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.НДФЛПрименениеВычетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Использование = Истина;
	НаборЗаписей.Отбор.Физлицо.Использование = Истина;
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Период.Значение = Выборка.ДатаПрекращения;
		НаборЗаписей.Отбор.Физлицо.Значение = Выборка.Физлицо;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры // УдалитьСтрокиВычетов()

// По строкам документа, в которых указано "Прекращать стандартные вычеты" пишутся
// записи из рег-ра НДФЛПрименениеВычетов с "пустой" организацией - 
// тем самым прекращается предоставление вычетов по организации, из которой увольняется 
// работник
Процедура ПрекратитьВычетыРаботникам()

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОрганизацияНеУказана", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1) КАК Период
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДатыРегистра.НомерСтроки КАК НомерСтроки,
	|			НДФЛПрименениеВычетов.Организация КАК Организация,
	|			ДатыРегистра.Период КАК ПериодРегистра
	|		ИЗ
	|			(ВЫБРАТЬ
	|				УвольнениеИзОрганизацийРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|				УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|				МАКСИМУМ(НДФЛПрименениеВычетов.Период) КАК Период
	|			ИЗ
	|				Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
	|					ПО (ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1) >= НДФЛПрименениеВычетов.Период)
	|						И УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.Физлицо = НДФЛПрименениеВычетов.Физлицо
	|			ГДЕ
	|				УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка = &Ссылка
	|				И УвольнениеИзОрганизацийРаботникиОрганизации.ПрекращатьСтандартныеВычеты
	|			
	|			СГРУППИРОВАТЬ ПО
	|				УвольнениеИзОрганизацийРаботникиОрганизации.НомерСтроки,
	|				УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.Физлицо) КАК ДатыРегистра
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
	|				ПО ДатыРегистра.Физлицо = НДФЛПрименениеВычетов.Физлицо
	|					И ДатыРегистра.Период = НДФЛПрименениеВычетов.Период) КАК ПрименениеВычетов
	|		ПО УвольнениеИзОрганизацийРаботникиОрганизации.НомерСтроки = ПрименениеВычетов.НомерСтроки
	|ГДЕ
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка = &Ссылка
	|	И УвольнениеИзОрганизацийРаботникиОрганизации.ПрекращатьСтандартныеВычеты
	|	И ВЫБОР
	|			КОГДА УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация = &ОрганизацияНеУказана
	|				ТОГДА УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Организация
	|			ИНАЧЕ УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация
	|		КОНЕЦ = ПрименениеВычетов.Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.НДФЛПрименениеВычетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Использование = Истина;
	НаборЗаписей.Отбор.Физлицо.Использование = Истина;
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Период.Значение = Выборка.Период;
		НаборЗаписей.Отбор.Физлицо.Значение = Выборка.Физлицо;
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),Выборка);
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;

КонецПроцедуры // ПрекратитьВычетыРаботникам()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизаций(ВыборкаПоШапкеДокумента, Режим);
         	ВыборкаПоСтрокамДокумента = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл 

				// выберем все виды строк запроса для текущей строки документа
				ВыборкаПоВидамСтрокЗапроса = ВыборкаПоСтрокамДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоВидамСтрокЗапроса.Следующий() Цикл 

					// Для каждого вида строки запроса свои проверки
					ВидСтрокиЗапроса = ВыборкаПоВидамСтрокЗапроса.ВидСтрокиЗапроса;
					ВыборкаСтрокЗапроса = ВыборкаПоВидамСтрокЗапроса.Выбрать();
					УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");


					// обходим строки запроса, проверяем данные и формируем движения
					Пока ВыборкаСтрокЗапроса.Следующий() Цикл
						
						ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ, УчетнаяПолитикаПоПерсоналуОрганизации);
						
						Если НЕ Отказ Тогда
							ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, УчетнаяПолитикаПоПерсоналуОрганизации);
						КонецЕсли;  
						
					КонецЦикла;					

				КонецЦикла;

			КонецЦикла; 

			Если НЕ Отказ Тогда
				ПрекратитьВычетыРаботникам();
			КонецЕсли;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Ссылка.Проведен Тогда // удалим строки, "закрывающие" вычеты
		УдалитьСтрокиВычетов();
	КонецЕсли;
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ПринадлежностьПоследовательностям.КадровыеПриказыОрганизаций.Очистить();
		Для Каждого СтрокаРаботникиОрганизации Из РаботникиОрганизации Цикл
			ЗаписьРегистрации = ПринадлежностьПоследовательностям.КадровыеПриказыОрганизаций.Добавить();
			ЗаписьРегистрации.Период		= Дата;
			ЗаписьРегистрации.Регистратор	= Ссылка;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		Организация = Основание.Организация;

		НоваяСтрока = РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник = Основание;
		НоваяСтрока.Физлицо = Основание.ФизЛицо;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ВведенКопированием = Истина;
	
КонецПроцедуры

мДлинаСуток = 86400;

