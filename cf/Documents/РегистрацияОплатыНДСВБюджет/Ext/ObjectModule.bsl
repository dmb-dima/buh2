////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ АВТОЗАПОЛНЕНИЯ СТРОК ДОКУМЕНТА

// Процедура вызывается при нажатии на кнопку "Заполнить" в диалоге документа
// Реализует алгоритм автоматического заполнения документа.
//
Процедура ЗаполнитьДокумент(ОшибкаЗаполнения = Ложь, Сообщать = Истина, СтрокаСообщения = "", ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ОшибкаЗаполнения = Истина;
			СтрокаСообщения = " перед заполнением требуется отменить проведение документа";
			Если Сообщать Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:" + СтрокаСообщения, , Строка(Ссылка));
			КонецЕсли; 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьПоДоговорамНалоговогоАгента();
	ЗаполнитьТабличнуюЧастьДляСобственногоПотребления();
	
	Если Не (ОплатаПоДоговорамНалоговогоАгента.Количество() > 0 
		или ОплатаДляСобственногоПотребления.Количество() >0
        ) Тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = СтрокаСообщения+Символы.ПС+" - не обнаружен НДС к вычету, требующий оплаты в бюджет"
	КонецЕсли;	

   Если ОшибкаЗаполнения Тогда
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:"+СтрокаСообщения,,Строка(Ссылка));
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьДокумент()

// Заполняет табличную часть НДС по договорам налогового агента
//
Процедура ЗаполнитьТабличнуюЧастьПоДоговорамНалоговогоАгента(ОтменитьПроведение = Ложь) Экспорт

	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОплатаПоДоговорамНалоговогоАгента.Очистить();
	
	Результат = ПолучитьОстаткиНДСРасчетыСБюджетом();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока 					= ОплатаПоДоговорамНалоговогоАгента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
		
	КонецЦикла;
	
	ОплатаПоДоговорамНалоговогоАгента.Сортировать("СчетФактура, Поставщик, ВидЦенности, ДокументОплаты, СтавкаНДС, СчетУчетаНДС");
	
КонецПроцедуры

// Заполняет табличную часть НДС по собственному потреблению
//
Процедура ЗаполнитьТабличнуюЧастьДляСобственногоПотребления(ОтменитьПроведение = Ложь) Экспорт

	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОплатаДляСобственногоПотребления.Очистить();
	
	Результат = ПолучитьОстаткиНДСРасчетыСБюджетом(Ложь);
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока 					= ОплатаДляСобственногоПотребления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
		
	КонецЦикла;
	
	ОплатаДляСобственногоПотребления.Сортировать("СчетФактура, ДокументОплаты, СтавкаНДС");	
	
КонецПроцедуры

// Функция возвращает выборку из регистра НДСРасчетыСПоставщиками по расчетам с бюджетом
//
// Параметры
//  ПоДоговорамНалоговогоАгента - если Истина, то выбираются расчеты по агентским договорам
//
Функция ПолучитьОстаткиНДСРасчетыСБюджетом(НалоговыйАгент = Истина)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Если НалоговыйАгент Тогда
		Запрос.УстановитьПараметр("ВидыЦенностей", УчетНДС.ВидыЦенностейНалоговыйАгент(Ложь));
	Иначе
		Запрос.УстановитьПараметр("ВидыЦенностей", УчетНДС.ВидыЦенностейСМРХозспособ());
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.СчетФактура,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	СУММА(НДСПредъявленныйОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
		|	СУММА(НДСПредъявленныйОстатки.НДСОстаток) КАК НДС
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&Дата,
		|			Организация = &Организация
		|				И ВидЦенности В (&ВидыЦенностей)
		|				И ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|				И ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)) КАК НДСПредъявленныйОстатки
		|ГДЕ
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.СчетФактура,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.СтавкаНДС";
				   
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По результату запроса по шапке документа и табличным частям формирует движения по регистрам.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДоговорамНалоговогоАгента, ТаблицаДляСобственногоПотребления, Отказ, Заголовок)
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоДоговорамНалоговогоАгента, Отказ, Заголовок);
	
	ДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаДляСобственногоПотребления, Отказ, Заголовок);
	
КонецПроцедуры

// Движения по регистру НДСРасчетыСПоставщиками
//
Процедура ДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоНДС, Отказ, Заголовок)
	
	Если Отказ Или (ТаблицаПоНДС.Количество() = 0) Тогда
		Возврат;		
	КонецЕсли;
		
	Движения_НДСПредъявленный = Движения.НДСПредъявленный;
	ТаблицаДвижений_НДСПредъявленный = Движения_НДСПредъявленный.ВыгрузитьКолонки();
	
	// Расход по существующим записям в регистре
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНДС, ТаблицаДвижений_НДСПредъявленный);
	ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения('00010101', "ДатаОплаты");
	
	Движения_НДСПредъявленный.мПериод = Дата;
	Движения_НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
	Движения_НДСПредъявленный.ВыполнитьРасход();
	
	
	ТаблицаДвижений_НДСПредъявленный.Очистить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНДС, ТаблицаДвижений_НДСПредъявленный);
	
	Движения_НДСПредъявленный.мПериод = Дата;
	Движения_НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
	Движения_НДСПредъявленный.ВыполнитьПриход();
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
Функция ПодготовитьТаблицуПоДоговорамНалоговогоАгента(РезультатЗапросаПоДоговорамНалоговогоАгента, СтруктураШапкиДокумента)

	ТаблицаПоДоговорамНалоговогоАгента = РезультатЗапросаПоДоговорамНалоговогоАгента.Выгрузить();
	
	Возврат ТаблицаПоДоговорамНалоговогоАгента;

КонецФункции // ПодготовитьТаблицуПоДоговорамНалоговогоАгента()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
Функция ПодготовитьТаблицуДляСобственногоПотребления(РезультатЗапросаДляСобственногоПотребления, СтруктураШапкиДокумента)

	ТаблицаДляСобственногоПотребления = РезультатЗапросаДляСобственногоПотребления.Выгрузить();
	
	ТаблицаДляСобственногоПотребления.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаДляСобственногоПотребления.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.СМРСобственнымиСилами, "ВидЦенности");
	
	Возврат ТаблицаДляСобственногоПотребления;

КонецФункции // ПодготовитьТаблицуПоДоговорамНалоговогоАгента()

// Проверяет правильность заполнения строк табличной части.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоДоговорамНалоговогоАгента(СтруктураШапкиДокумента, ТаблицаПоДоговорамНалоговогоАгента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, Поставщик, СчетФактура, СтавкаНДС, СчетУчетаНДС");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОплатаПоДоговорамНалоговогоАгента", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
 	СтрокаСообщения = "Не заполнен документ оплаты";

	Для каждого СтрокаТаблицы из ОплатаПоДоговорамНалоговогоАгента Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Оплата по договорам налогового агента"": ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщения,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДляСобственногоПотребления(СтруктураШапкиДокумента, ТаблицаДляСобственногоПотребления, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("СчетФактура, СтавкаНДС, СчетУчетаНДС");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОплатаДляСобственногоПотребления", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
 	СтрокаСообщения = "Не заполнен документ оплаты";
	Для каждого СтрокаТаблицы из ОплатаДляСобственногоПотребления Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Оплата для собственного потребления"": ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщения,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличных частей.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",	"Ссылка.Организация");
	СтруктураПолей.Вставить("ВидЦенности",	"ВидЦенности");
	СтруктураПолей.Вставить("Поставщик",	"Поставщик");
	СтруктураПолей.Вставить("СчетФактура",	"СчетФактура");
	СтруктураПолей.Вставить("СтавкаНДС",	"СтавкаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС",	"СчетУчетаНДС");
	СтруктураПолей.Вставить("ДатаОплаты",	"ДокументОплаты.Дата");
	СтруктураПолей.Вставить("СуммаБезНДС",	"СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",			"НДС");
	
	РезультатЗапросаПоДоговорамНалоговогоАгента = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаПоДоговорамНалоговогоАгента", СтруктураПолей);
	
	СтруктураПолей.Удалить("ВидЦенности");
	СтруктураПолей.Удалить("Поставщик");
	
	РезультатЗапросаДляСобственногоПотребления = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаДляСобственногоПотребления", СтруктураПолей);

	ТаблицаПоДоговорамНалоговогоАгента = ПодготовитьТаблицуПоДоговорамНалоговогоАгента(РезультатЗапросаПоДоговорамНалоговогоАгента, СтруктураШапкиДокумента);
	ТаблицаДляСобственногоПотребления = ПодготовитьТаблицуДляСобственногоПотребления(РезультатЗапросаДляСобственногоПотребления, СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеТабличнойЧастиПоДоговорамНалоговогоАгента(СтруктураШапкиДокумента,ТаблицаПоДоговорамНалоговогоАгента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиДляСобственногоПотребления(СтруктураШапкиДокумента,ТаблицаДляСобственногоПотребления, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДоговорамНалоговогоАгента, ТаблицаДляСобственногоПотребления, Отказ, Заголовок);
	КонецЕсли;

	Если Не Отказ Тогда
		УниверсальныеМеханизмы.ЗафиксироватьФактВыполненияРегламентнойОперации(НачалоМесяца(Дата),
													  СтруктураШапкиДокумента.Организация,
													  Ссылка,														  
													  Перечисления.РегламентныеОперации.РегистрацияОплатыНДСВБюджет);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УниверсальныеМеханизмы.СброситьФактВыполненияОперации(Ссылка);
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
КонецПроцедуры

