// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизиты Экспорт;		// (Регл)

Перем мУчетнаяПолитика;						// (Общ)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем ПартионныйУчет;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ унифицированной формы М-15
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-4 (приходный ордер).
//
Функция ПечатьМ15()
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаТоваров.Номер КАК Номер,
	|	ПередачаТоваров.Дата КАК ДатаСоставления,
	|	ПередачаТоваров.Дата КАК ДатаДокумента,
	|	ПередачаТоваров.Организация,
	|	ПередачаТоваров.Организация КАК ЮрФизЛицо,
	|	ПередачаТоваров.Организация КАК Руководители,
	|	ПередачаТоваров.Склад КАК Склад,
	|	ПередачаТоваров.Склад.Наименование КАК СкладНаименование,
	|	ПередачаТоваров.ВалютаДокумента,
	|	ПередачаТоваров.Контрагент.Код КАК КонтрагентКод,
	// {ОбособленныеПодразделения
	|	ПередачаТоваров.ПодразделениеОрганизации,
	// }ОбособленныеПодразделения
	|	ПередачаТоваров.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ПередачаТоваров КАК ПередачаТоваров
	|ГДЕ
	|	ПередачаТоваров.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код КАК ТоварКод,
	|	ВложенныйЗапрос.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.КоличествоПринято,
	|	ВложенныйЗапрос.СчетУчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПередачаТоваров.Номенклатура КАК Номенклатура,
	|		ПередачаТоваров.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		СУММА(ПередачаТоваров.Количество) КАК КоличествоПринято,
	|		ПередачаТоваров.СчетУчета.Представление КАК СчетУчета
	|	ИЗ
	|		Документ.ПередачаТоваров.Товары КАК ПередачаТоваров
	|	ГДЕ
	|		ПередачаТоваров.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПередачаТоваров.Номенклатура,
	|		ПередачаТоваров.Номенклатура.БазоваяЕдиницаИзмерения,
	|		ПередачаТоваров.СчетУчета.Представление) КАК ВложенныйЗапрос";
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ЗапросПоТоварам.Текст = СтрЗаменить(ЗапросПоТоварам.Текст, "Номенклатура.Код", "Номенклатура.Артикул");
	КонецЕсли;
	
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Макет = ПолучитьОбщийМакет("М15");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаТоваров_М15";

	// Выводим общие реквизиты шапки
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаСоставления);
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.КонтрагентНаименование = "" + ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Получатель             = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Основание             = "Договор " + ДоговорКонтрагента.Наименование + " № " + ДоговорКонтрагента.Номер + " от " + Формат(ДоговорКонтрагента.Дата, "ДЛФ=D"); 
	
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	СтрокНаСтранице = 24;
	СтрокШапки      = 9;
	СтрокПодвала    = 3;
	НомерСтраницы   = 1;

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// Инициализация итогов в документе
	ИтогоКоличествоПринято = 0;
	ИтогоСуммаБезНДС    = 0;
	ИтогоСуммаНДС       = 0;
	ИтогоВсегоСНДС      = 0;
	Ном                 = 0;
    ТаблицаСуммСписания = БухгалтерскийУчет.ПолучитьСуммуСписанияАктивов(ЭтотОбъект);
	ТаблицаСуммСписания.Индексы.Добавить("Номенклатура");
	
	// Выводим многострочную часть документа
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			НомерСтраницы	= НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

		Кратность = 1;
		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(ВыборкаСтрокТовары.Номенклатура, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			 ВсегоСНДС = 0;
			 Цена = 0;
		 Иначе
			 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			 ВсегоСНДС = Цена * ВыборкаСтрокТовары.КоличествоПринято;
		 КонецЕсли;

		Количество 		= ВыборкаСтрокТовары.КоличествоПринято;

		ОбластьМакета.Параметры.Количество 		  = Количество;
		ОбластьМакета.Параметры.СуммаСНДС         = ВсегоСНДС;
		ОбластьМакета.Параметры.СуммаБезНДС       = ВсегоСНДС;
		ОбластьМакета.Параметры.СуммаНДС          = 0;
		ОбластьМакета.Параметры.Цена              = Цена;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		ОбластьМакета.Параметры.КоррСчет 		  = СокрЛП(ВыборкаСтрокТовары.СчетУчета);
		ОбластьМакета.Параметры.НоменклатурныйНомер = ВыборкаСтрокТовары.ТоварКод;

		ТабДокумент.Вывести(ОбластьМакета);

		ИтогоКоличествоПринято = ИтогоКоличествоПринято + Количество;
		ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + ВсегоСНДС;
		ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + ВсегоСНДС;

	КонецЦикла;

	// Выводим итоги по документу
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	Руководитель  = Руководители.РуководительПредставление;
	Бухгалтер     = Руководители.ГлавныйБухгалтерПредставление;
	
	ОбластьМакета.Параметры.ФИОРуководителя   = Руководитель;
	ОбластьМакета.Параметры.ФИОГлавБухгалтера = Бухгалтер;
	
	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоВсегоСНДС, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.ИтогНДС = ОбщегоНазначения.СформироватьСуммуПрописью(0, Шапка.ВалютаДокумента);
	
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьМ4()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьТОРГ12()
	Перем ПодразделениеОтветственныхЛиц;

	ЕдиницаИзмеренияВеса = "";

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПередачаТоваров.Номер,
	|	ПередачаТоваров.Дата КАК ДатаДокумента,
	|	ПередачаТоваров.Организация,
	|	ПередачаТоваров.Организация КАК ЮрФизЛицо,
	|	ПередачаТоваров.Организация КАК Поставщик,
	|	ПередачаТоваров.Организация КАК Контрагент,
	|	ПередачаТоваров.Организация КАК Руководители,
	|	ВЫБОР
	|		КОГДА ПередачаТоваров.Грузополучатель = &ПустойКонтрагент
	|			ТОГДА ПередачаТоваров.Контрагент
	|		ИНАЧЕ ПередачаТоваров.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ПередачаТоваров.Грузоотправитель = &ПустойКонтрагент
	|			ТОГДА ПередачаТоваров.Организация
	|		ИНАЧЕ ПередачаТоваров.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ПередачаТоваров.Контрагент КАК Покупатель,
	|	ПередачаТоваров.Контрагент КАК Плательщик,
	|	ПередачаТоваров.ДоговорКонтрагента.Представление КАК Основание,
	|	ПередачаТоваров.ВалютаДокумента,
	// {ОбособленныеПодразделения
	|	ПередачаТоваров.ПодразделениеОрганизации,
	// }ОбособленныеПодразделения
	|	1 КАК Кратность
	|ИЗ
	|	Документ.ПередачаТоваров КАК ПередачаТоваров
	|ГДЕ
	|	ПередачаТоваров.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Если ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		// Документ оформлен в валюте взаиморасчетов
		Запрос.УстановитьПараметр("Курс", 1);
		Запрос.УстановитьПараметр("Кратность", 1);
	Иначе
		// Документ оформлен в валюте регламентированного учета
		Запрос.УстановитьПараметр("Курс", 1);
		Запрос.УстановитьПараметр("Кратность", 1);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                 КАК ТоварКод,
	|	ВложенныйЗапрос.Номенклатура.БазоваяЕдиницаИзмерения.Представление                КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.Номенклатура.БазоваяЕдиницаИзмерения.Код                          КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.Номенклатура.БазоваяЕдиницаИзмерения                              КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Номенклатура.БазоваяЕдиницаИзмерения.Представление                КАК ВидУпаковки,
	|	1                                                             КАК КоличествоВОдномМесте,
	|	ВложенныйЗапрос.Количество                                    КАК МассаБрутто,
	|	ВложенныйЗапрос.Количество           КАК Количество,
	|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		ПередачаТоваров.Номенклатура,
	|		ПередачаТоваров.Номенклатура.БазоваяЕдиницаИзмерения,
	|		СУММА(ПередачаТоваров.Количество)                    КАК Количество,
	|		МИНИМУМ(ПередачаТоваров.НомерСтроки)                 КАК НомерСтроки
	|	ИЗ
	|		Документ.ПередачаТоваров.Товары КАК ПередачаТоваров
	|	ГДЕ
	|		ПередачаТоваров.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		ПередачаТоваров.Номенклатура,
	|		ПередачаТоваров.Номенклатура.БазоваяЕдиницаИзмерения
	|
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки ВОЗР
	|
	|";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент  = Новый ТабличныйДокумент;
		
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаТоваров_ТОРГ12";

	Макет = ПолучитьОбщийМакет("ТОРГ12");

	ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");

	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	
	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	ОбластьМакетаШапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	
	Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОГрузополучателе,"НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);

	// Выводим всевозможные коды
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
	ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ОснованиеНомер             = "";
	ОбластьМакетаШапка.Параметры.ОснованиеДата              = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";

	ТабДокумент.Вывести(ОбластьМакетаШапка);

	// Инициализация счетчика страниц
	НомерСтраницы = 1;

	// Инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаНаСтранице      = 0;
	ИтогоНДСНаСтранице        = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// Инициализация итогов по документу
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	ИтогоСумма      = 0;
	ИтогоНДС        = 0;
	
	// Инициализация счетчика строк
	НомерСтроки     = 0;
	КоличествоСтрок = ЗапросТовары.Количество();
	
	// Выводим заголовок многострочной части
	ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
    ТаблицаСуммСписания = БухгалтерскийУчет.ПолучитьСуммуСписанияАктивов(ЭтотОбъект);	
	ТаблицаСуммСписания.Индексы.Добавить("Номенклатура");

	// Выводим многострочную часть документа
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		НомерСтроки = НомерСтроки + 1;

		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
		
		ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
		
		ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
		ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
				
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);

		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(ВыборкаСтрок.Номенклатура, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			 СуммаСНДС = 0;
			 Цена = 0;
		 Иначе
			 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			 СуммаСНДС = Цена * ВыборкаСтрок.Количество;
		 КонецЕсли;

		Количество  = ВыборкаСтрок.Количество;
		СуммаНДС    = 0;
		СуммаБезНДС = СуммаСНДС - СуммаНДС;

		ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакетаСтрока.Параметры.СтавкаНДС   = "";
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
		ОбластьМакетаСтрока.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);
		
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		Если НомерСтроки = 1 Тогда
			СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
		КонецЕсли;                                                   // помещаться заголовок
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
		Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;

		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда

			Если КоличествоСтрок > 1 Тогда
				
				// Выводим итоги по странице
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
				
				// Очистим итоги по странице
				ИтогоМестНаСтранице       = 0;
				ИтогоКоличествоНаСтранице = 0;
				ИтогоСуммаНаСтранице      = 0;
				ИтогоНДСНаСтранице        = 0;
				ИтогоСуммаСНДСНаСтранице  = 0;
				
				// Выведем заголовок таблицы
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакетаСтрока);

		// Увеличим итоги по странице
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
		ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;

		// Увеличим итоги по документу
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
		ИтогоНДС        = ИтогоНДС        + СуммаНДС;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по странице
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
	ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
	ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
	ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакетаВсего);

	// Выводим подвал документа
	
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	
	ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.РуководительПредставление;
	ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = Руководители.ГлавныйБухгалтерПредставление;
	ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;

	ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
	
	ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель   = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель   = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	
	ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
	ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);	
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ12()

Функция ПечатьТТН()

	ОбработкаПечати = Обработки.ПечатьТТН.ПолучитьФорму("Форма");
	ОбработкаПечати.Документ       = ЭтотОбъект.Ссылка;
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Грузополучатель,  Дата);
	ОбработкаПечати.ПунктРазгрузки = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,"ФактическийАдрес");;
	ОбработкаПечати.Открыть();

	Возврат Неопределено;

КонецФункции // ПечатьТТН()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если      ИмяМакета = "М15" Тогда
		
		ТабДокумент = ПечатьМ15();
		
	ИначеЕсли ИмяМакета = "_1Т" Тогда
		ТабДокумент = ПечатьТТН();
		
	ИначеЕсли ИмяМакета = "ТОРГ12" тогда
		ТабДокумент = ПечатьТОРГ12();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("М15,ТОРГ12,_1Т","М-15 (Накладная)", "ТОРГ-12 (Товарная накладная)","Бланки ТТН");


КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Заполняет счета в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, Заполнять) Экспорт

	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);

	ЗаполнитьСчетаБухРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, Заполнять);
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НоменклатурнаяГруппаОрганизации", МетаданныеДокумента, ИмяТабЧасти) Тогда
		СтрокаТЧ.НоменклатурнаяГруппаОрганизации = СчетаУчета.Группа;
	КонецЕсли;
	
	    СчетУчетаРасчетовПоТаре = СчетаУчета.СчетУчетаТарыПокупателя;
		СчетУчетаДоходовПоТаре  = СчетаУчета.СчетУчетаДоходовПоТаре;
		СчетУчетаРасходовПоТаре = СчетаУчета.СчетУчетаРасходовПоТаре;

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Заполняет счета в строке табличной части
//
Процедура ЗаполнитьСчетаБухРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, Заполнять)

	МетаданныеДокумента = ЭтотОбъект.Метаданные();
	
	Если Заполнять = Истина Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчета", МетаданныеДокумента, ИмяТабЧасти) Тогда	
			СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетПередачи", МетаданныеДокумента, ИмяТабЧасти) Тогда	
			СтрокаТЧ.СчетПередачи = ?(ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку, СчетаУчета.СчетПередачи, СчетаУчета.СчетУчета);
		КонецЕсли;
		
	ИначеЕсли Заполнять = Ложь Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчета", МетаданныеДокумента, ИмяТабЧасти) Тогда	
			СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетПередачи", МетаданныеДокумента, ИмяТабЧасти) Тогда	
			СтрокаТЧ.СчетПередачи = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаБух()

Процедура ЗаполнитьСчетаУчетаРасчетов(СчетаУчета = неопределено) Экспорт
	
    Если СчетаУчета = неопределено Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	КонецЕсли;
	СчетУчетаРасчетовПоТаре = СчетаУчета.СчетУчетаТарыПокупателя;
	СчетУчетаДоходовПоТаре  = СчетаУчета.СчетУчетаДоходовПоТаре;
	СчетУчетаРасходовПоТаре = СчетаУчета.СчетУчетаРасходовПоТаре;

КонецПроцедуры // ЗаполнитьСчетаУчетаРасчетов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("Контрагент");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаТоваров.Колонки.Добавить("КорПодразделениеОрганизации");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорПодразделениеОрганизации");
	
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,   "Регистратор");

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	ТаблицаТары.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("ДокументОприходования");
	ТаблицаТары.Колонки.Добавить("Регистратор");
	ТаблицаТары.Колонки.Добавить("Склад");
	ТаблицаТары.Колонки.Добавить("Организация");
	ТаблицаТары.Колонки.Добавить("Субконто");
	ТаблицаТары.Колонки.Добавить("КорСчетСписания");
	ТаблицаТары.Колонки.Добавить("КорСубконтоСписания1");
	ТаблицаТары.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТары.Колонки.Добавить("СчетДоходов");
    ТаблицаТары.Колонки.Добавить("Тара");
	
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма;

	КонецЦикла;
	
	ТаблицаТары.ЗаполнитьЗначения(Истина, "Тара");
	ТаблицаТары.ЗаполнитьЗначения(ЭтотОбъект,                          "Регистратор");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,       "Склад");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаТары.ЗаполнитьЗначения(СчетУчетаРасчетовПоТаре,             "КорСчетСписания");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,                       "ДоговорКонтрагента");

	ТаблицаТары.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаТары.Колонки.Добавить("КорПодразделениеОрганизации");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорПодразделениеОрганизации");
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	СтруктураОбязательныхПолей.Вставить("СчетУчета");
	СтруктураОбязательныхПолей.Вставить("СчетПередачи");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	// Теперь вызовем общую процедуру проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизиты = "ВозвратнаяТара.СчетУчета";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	
	Если ВозвратнаяТара.Количество() > 0 Тогда
		Реквизиты = Реквизиты + ", СчетУчетаРасчетовПоТаре"; 
	КонецЕсли;
	
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Процедура дополняет список реквизитов табличной части регл. реквизитами
//
Процедура ДополнитьРеквизитыТабличнойЧастиТоварыРегл(Реквизиты)
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
		
		Реквизиты = Реквизиты + ", СчетУчета, СчетПередачи";
		
	КонецЕсли;
	
КонецПроцедуры // ДополнитьРеквизитыТабличнойЧастиТоварыРегл()

// Процедура дополняет список реквизитов табличной части регл. реквизитами
//
Процедура ДополнитьРеквизитыТабличнойЧастиВозвратнаяТараРегл(Реквизиты)
	
	Реквизиты = Реквизиты + ", СчетУчета";
	
КонецПроцедуры // ДополнитьРеквизитыТабличнойЧастиВозвратнаяТараРегл()

// Процедура выполняет проверку документа на корректность заполнения
//  Параметры:
//		Заголовок - заголовок документа при проведении
//		Отказ     - флаг отказа от проведения документа
//		СтруктураШапкиДокумента - структура с данными шапки документа
//
Процедура ПроверкаРеквизитов(СтруктураШапкиДокумента, Отказ, Заголовок, ТаблицаПоТоварам, ТаблицаПоТаре)
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Создать списки реквизитов для проверки
	РеквизитыШапки   = "Организация, Заказ, Склад, ВидПередачи";
	
	ДополнитьРеквизитыШапкиРегл(РеквизитыШапки);
	
	РеквизитыТабПрод = "Номенклатура, Количество, ЕдиницаИзмерения";
	
	ДополнитьРеквизитыТабличнойЧастиТоварыРегл(РеквизитыТабПрод);
	
	РеквизитыТабТара = "Номенклатура, Количество";
	
	ДополнитьРеквизитыТабличнойЧастиВозвратнаяТараРегл(РеквизитыТабТара);
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ДоговорКонтрагента");
	
	// Если в документе имеется возвратная тара, нужно проверить счета учета тары.
	Если ВозвратнаяТара.Количество() > 0 Тогда
		
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаДоходовПоТаре");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасходовПоТаре");
		
	КонецЕсли;
		
	// Прочие проверки
	Если СтруктураШапкиДокумента.Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Документ не может осуществлять реализацию с неавтоматизированной торговой точки!", Отказ, Заголовок);
	КонецЕсли;

	// Выполнить проверку 
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,       СтруктураОбязательныхПолей,   Отказ, Заголовок);
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку  Тогда	
		ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре,    СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитов()

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДВИЖЕНИЙ ПО РЕГИСТРАМ

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	
	Проводки = Движения.Хозрасчетный;
	
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку  Тогда
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТоварам, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ,,"Передача материалов для переработки на сторону");
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТаре,    Истина,, Отказ,, "Передача тары");
	// Корректировка списания партий
	Для Каждого СтрокаТЧ из ТаблицаПоТаре Цикл

		ТаблицаПартий  = СтрокаТЧ.СписанныеПартии;

		СуммаПоПродаже = СтрокаТЧ.Сумма;
		Цена           = СуммаПоПродаже / СтрокаТЧ.Количество;

		РазницаЦен     = (СуммаПоПродаже - ТаблицаПартий.Итог("СуммаСписания"));

		Для Каждого СтрокаТП Из ТаблицаПартий Цикл

			ЦенаПартии = СтрокаТП.СуммаСписания / СтрокаТП.Количество;

			Если НЕ (Цена = ЦенаПартии) Тогда // Есть разница - нужно записать корректирующую проводку.

				ДоляСуммыСписания = СтрокаТП.Количество / СтрокаТЧ.Количество * СтрокаТЧ.Сумма - СтрокаТП.СуммаСписания;

				Если РазницаЦен > 0 Тогда

					Проводка = Проводки.Добавить();

					Проводка.Период      = Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Передача тары";
					Проводка.Сумма       = ДоляСуммыСписания;

					Проводка.СчетДт = СтрокаТЧ.КорСчетСписания;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);

					Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаДоходовПоТаре;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СтатьяДоходовИРасходовПоТаре);

				Иначе

					Проводка = Проводки.Добавить();

					Проводка.Период      = Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Передача тары";
					Проводка.Сумма       = - ДоляСуммыСписания;

					Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасходовПоТаре;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СтатьяДоходовИРасходовПоТаре);

					Проводка.СчетКт = СтрокаТЧ.КорСчетСписания;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);

				КонецЕсли; //Если РазницаЦен >= 0 Тогда

			КонецЕсли; // Если НЕ (Цена = ЦенаПартии) Тогда

		КонецЦикла; // Для Каждого СтрокаТП Из ТаблицаПартий Цикл

	КонецЦикла; // Для Каждого СтрокаТЧ из ТаблицаПоТаре Цикл
	
		
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		СтруктураДопПараметров = Новый Структура("ТаблицаТМЦ", ТаблицаПоТоварам);
	    НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, СтруктураДопПараметров);
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Если ТаблицаПоТоварам.Количество() = 0 Тогда
		//Отработка по партиям НДС не требуется. 
		Возврат;
	КонецЕсли; 
	
	/////////////////////////////////////////////////////////////////////////////////
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	ТаблицаНДСПартииСписания = УчетНДС.ПодготовитьТаблицуСписанияПартийДляНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	/////////////////////////////////////////////////////////////////////////////////
	
	Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		//Партии не найдены или отражение в партионном учете НДС не производится.
		//Дальнейшая обработка не требуется
		Возврат;
	КонецЕсли; 
	
	ТаблицаДвиженийПартии = Движения.НДСПоПриобретеннымЦенностям.ВыгрузитьКолонки();
	Движения.НДСПоПриобретеннымЦенностям.мПериод          = Дата;
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по партиям - отразить непосредственное списание.
	ТаблицаДвиженийПартии.Очистить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
	
	Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
	Движения.НДСПоПриобретеннымЦенностям.ВыполнитьРасход();
	// НДС по партиям - отразить непосредственное списание.
	/////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по партиям - отразить занесение на счета товаров отгруженных (45).
	Если СтруктураШапкиДокумента.СложныйУчетНДС Тогда
		// Для операций перемещения на комиссию необходимо отразить поступление по новому счету учета
		ТаблицаДвиженийПартии.Очистить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
		ТаблицаДвиженийПартии.ЗагрузитьКолонку(ТаблицаНДСПартииСписания.ВыгрузитьКолонку("КорСчетСписания"),"СчетУчета");
		ТаблицаДвиженийПартии.ЗаполнитьЗначения(Справочники.Склады.ПустаяСсылка(),"Склад");
		ТаблицаДвиженийПартии.Колонки.Добавить("Услуга",новый ОписаниеТипов("Булево"));
		ТаблицаДвиженийПартии.ЗаполнитьЗначения(Ложь,"Услуга");
		ТаблицаДвиженийПартии.Колонки.СчетУчета.Имя = "СчетУчетаЦенности";
		
		УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураШапкиДокумента,ТаблицаДвиженийПартии, Движения.НДСПоПриобретеннымЦенностям, Отказ);
	КонецЕсли; 
	// НДС по партиям - отразить занесение на счета товаров отгруженных
	/////////////////////////////////////////////////////////////////////////////////
	
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события ОбработкаПроведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
    
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	ПартионныйУчет = УправлениеЗапасами.ВедетсяПартионныйУчет(ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация), "БУ");
	
	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"    , "Номенклатура");
	СтруктураПолей.Вставить("Количество"      , "Количество");
	СтруктураПолей.Вставить("Услуга"          , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("СчетУчета"     , "СчетУчета");
	СтруктураПолей.Вставить("СчетПередачи", "СчетПередачи");

	// Поля необходимы для партионного учета
	СтруктураПолей.Вставить("Организация",              "Ссылка.Организация");
	СтруктураПолей.Вставить("Склад",                    "Ссылка.Склад");
	СтруктураПолей.Вставить("КорСчетСписания",        "СчетПередачи");
	СтруктураПолей.Вставить("КорСубконтоСписания1",   "Ссылка.Контрагент");
	СтруктураПолей.Вставить("КорСубконтоСписания2",   "Номенклатура");
	СтруктураПолей.Вставить("КорСубконтоСписания3",   "Ссылка.ДоговорКонтрагента");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения данных 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("СчетУчета",  "СчетУчета");

	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	ТаблицаПоТаре    = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
  	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТаре, СтруктураШапкиДокумента, Ложь);

	// Поля необходимы для партионного учета
	СтруктураПолей.Вставить("Организация",            "Ссылка.Организация");
	СтруктураПолей.Вставить("Склад",                  "Ссылка.Склад");
	СтруктураПолей.Вставить("КорСчетСписания",      "Ссылка.СчетУчетаРасчетовПоТаре");
	СтруктураПолей.Вставить("КорСубконтоСписания1", "Ссылка.Контрагент");
	СтруктураПолей.Вставить("КорСубконтоСписания2", "Номенклатура");
	СтруктураПолей.Вставить("КорСубконтоСписания3", "Ссылка.ДоговорКонтрагента");

	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Подготовим таблицу товаров и тары для проведения.
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку  Тогда
		ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	КонецЕсли;
	
	
	ПроверкаРеквизитов(СтруктураШапкиДокумента, Отказ, Заголовок, ТаблицаПоТоварам, ТаблицаПоТаре);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
