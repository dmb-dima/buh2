////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит значение параметра учетной политики УпрощенныйУчетНДС
Перем мУпрощенныйУчетНДС;

Перем ОткрыватьНастройкуДвижений;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Процедура УстановитьВидимость()
	
	ЕстьНеВозврат = Ложь;
	Для Каждого СтрокаТЧ Из ДокументыОснования Цикл
		Если Не ТипЗнч(СтрокаТЧ.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			ЕстьНеВозврат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыФормы.НДСПредъявленКВычету.Видимость = мУпрощенныйУчетНДС И ЕстьНеВозврат;
	
	УказанДокументОснование = ДокументыОснования.Количество() > 0 И ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование);

	ЭлементыФормы.Организация.ТолькоПросмотр		= УказанДокументОснование;
	ЭлементыФормы.Контрагент.ТолькоПросмотр			= УказанДокументОснование И ТипЗнч(ДокументыОснования[0].ДокументОснование) <> Тип("ДокументСсылка.АвансовыйОтчет");
	ЭлементыФормы.ДоговорКонтрагента.ТолькоПросмотр	= УказанДокументОснование И Не НаАванс;
		
	ЭлементыФормы.СписокДокументыОснования.Видимость = Не НаАванс;
	
	ЭлементыФормы.ПанельДокументыОснования.ТекущаяСтраница = ?(СписокДокументыОснования 
		, ЭлементыФормы.ПанельДокументыОснования.Страницы.НесколькоОснований
		, ЭлементыФормы.ПанельДокументыОснования.Страницы.ОдноОснование);
		
	ЭлементыФормы.ПанельДанныеАванс.ТекущаяСтраница = ?(НаАванс, 
														?(СписокАвансы, ЭлементыФормы.ПанельДанныеАванс.Страницы.ДанныеАвансНесколько,
															ЭлементыФормы.ПанельДанныеАванс.Страницы.ДанныеАванс), 
														ЭлементыФормы.ПанельДанныеАванс.Страницы.ОписаниеВозможностей);
		
	Для каждого ТекущийДокументОснование Из ДокументыОснования Цикл
		ЕстьОснованиеАО = Не НаАванс И (ТипЗнч(ТекущийДокументОснование.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет"));
	КонецЦикла; 	
	
	ЭлементыФормы.ДатаВходящего.ТолькоПросмотр	= ЕстьОснованиеАО;
	ЭлементыФормы.НомерВходящего.ТолькоПросмотр	= ЕстьОснованиеАО;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() 
		И ДополнительныеСвойства.Свойство("НайденСуществующийСчетФактура")
		И ДополнительныеСвойства.НайденСуществующийСчетФактура Тогда
		
		Отказ = Истина;
		
	Иначе
		
		// Установка кнопок печати
		УстановитьКнопкиПечати();
		
		// Установка кнопок заполнение ТЧ
		УстановитьКнопкиПодменюЗаполненияТЧ();
	
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ДокументыОснования.Количество() = 0 Тогда
		ДокументыОснования.Добавить().ДокументОснование = ДокументОснование;
	КонецЕсли; 
	
	Если НаАванс И Авансы.Количество() = 0 Тогда
		Авансы.Добавить();
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Покупка",ПараметрОбъектКопирования);
		
		Если Не НаАванс И ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		 	ОпределениеПараметровСчетаФактуры(ЭтотОбъект);			
		КонецЕсли;

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ДокументыОснования[0];

	Если НаАванс Тогда
		ЭлементыФормы.Авансы.ТекущаяСтрока = Авансы[0];
	КонецЕсли;

	Если СформированПриВводеНачальныхОстатковНДС Тогда
		//По документам сформированным вводом начальных остатков по НДС не допускаются изменения
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли; 
	
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Получить учетную политику по НУ
	мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,Контрагент,ДоговорКонтрагента,ДокументОснование");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	СписокДокументыОснования = (ДокументыОснования.Количество()>1);
	СписокАвансы = (Авансы.Количество()>1);
	
	УстановитьВидимость();
	
	Если Не НаАванс И Не ЭтоНовый() и не ЭтаФорма.ТолькоПросмотр Тогда
		ОпределениеПараметровСчетаФактуры(ЭтотОбъект);
	КонецЕсли;
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		возврат;
	КонецЕсли; 
			
	СтрокаСообщения = ПроверитьВозможностьЗаписиСФ(Отказ);
	
	Если Отказ Тогда
		Предупреждение(СтрокаСообщения);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Если открыли данную форму из формы документа, то там надо поменять текст
	Если НЕ ВладелецФормы = Неопределено Тогда

		// Надо поменять текст про счет-фактуру в форме-владельце
		Если ТипЗнч(ВладелецФормы) = Тип("Форма") тогда
			Попытка
			ВладелецФормы.ЗаполнитьТекстПроСчетФактуру();
			Исключение
			КонецПопытки;
		КонецЕсли;

	Иначе
		// Форма документа основания может быть открыта, требуется оповестить об обновлении текста про счет-фактуру
		Оповестить("ОбновлениеТекстаПроСчетФактуру", ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"))
	КонецЕсли; 
            	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка, Истина);
КонецПроцедуры

Процедура НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка, ВыбратьТекущуюКолонку = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура();
	
	СписокТипов = ПолучитьСписокТиповПоВидуСчетаФактуры(НаАванс);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Отбор.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Отбор.Вставить("ДокументыПоДоговоруКонтрагента", ДоговорКонтрагента);
	КонецЕсли;
	
	Отбор.Вставить("ПоставщикуВыставляетсяСчетФактураНаВозврат", Ложь);
	Отбор.Вставить("ПокупателемВыставляетсяСчетФактураНаВозврат", Истина);
	
	Если ВыбратьТекущуюКолонку Тогда
	    ЭлементыФормы.ДокументыОснования.ТекущаяКолонка = ЭлементыФормы.ДокументыОснования.Колонки.ДокументОснование;
	КонецЕсли; 
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "ДокументыОснования", СписокТипов);
	
КонецПроцедуры

Процедура ДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение.Организация) Тогда

		Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение.Организация.Префикс) Тогда
			УстановитьНовыйНомер();

		Иначе
			УстановитьНовыйНомер(ВыбранноеЗначение.Организация.Префикс);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	Если НачалоМесяца(мТекущаяДатаДокумента) <> НачалоМесяца(Дата) Тогда
		мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	УстановитьВидимость();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры


Процедура СписокДокументыОснованияПриИзменении(Элемент)
	Если не СписокДокументыОснования И ДокументыОснования.Количество() > 1 Тогда
		
		ТекстВопроса = "Все строки документов-оснований, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Имя);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			СписокДокументыОснования = Истина;
			Возврат;
		КонецЕсли;
		
		Пока ДокументыОснования.Количество() > 1 Цикл
			
			СтрокаУдаления = ДокументыОснования[1];
			ДокументыОснования.Удалить(СтрокаУдаления);
			
		КонецЦикла;
		
		ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ДокументыОснования[0];
		
		Если Не НаАванс Тогда
			ОпределениеПараметровСчетаФактуры(ЭтотОбъект);
		КонецЕсли;
		
	Иначе
		
		ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ДокументыОснования[0];
		
	КонецЕсли;
	
	УстановитьВидимость();
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);

	УстановитьВидимость();
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент,Организация, СписокВидовДоговоров);

КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
											СписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры

Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если Не НаАванс Тогда
		ОпределениеПараметровСчетаФактуры(ЭтотОбъект);
	Иначе	
		
		СуммаДокумента = 0;
		
		Авансы.Очистить();
				
		ЗаполнитьСчетФактуруНаАванс();
		
		Если Авансы.Количество() = 0 Тогда
			Авансы.Добавить();
		КонецЕсли;
		
		ЭлементыФормы.Авансы.ТекущаяСтрока = Авансы[0];
		
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры

Процедура ДокументыОснованияДокументОснованиеПриИзменении(Элемент)
	// надо проверить, а не выбран ли уже в качестве документа основания этот документ
	ТекЗначение = Элемент.Значение;
	
	Если Не ЗначениеЗаполнено(ТекЗначение) Тогда
	    Возврат;
	КонецЕсли; 
	
	УжеВыбран = Ложь;
	
	Для Каждого СтрДокОснования Из ДокументыОснования Цикл
		Если (СтрДокОснования.ДокументОснование = ТекЗначение)
		   и (СтрДокОснования.НомерСтроки <> ЭлементыФормы.ДокументыОснования.ТекущаяСтрока.НомерСтроки) Тогда
			УжеВыбран = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если УжеВыбран Тогда
		Сообщить("Данный документ уже выбран в качестве документа-основания! Повторный выбор не допускается.");
		Элемент.Значение = Неопределено;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(ТекЗначение) Тогда
		ТекЗначение = Неопределено;
	КонецЕсли;
	
	Если Не НаАванс Тогда
		ОпределениеПараметровСчетаФактуры(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДокументыОснованияПередУдалением(Элемент, Отказ)
	Если ДокументыОснования.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ДокументыОснованияДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ДокументыОснованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущаяСтрока.ДокументОснование = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура НаАвансПриИзменении(Элемент)
	
	Если НаАванс И ДокументыОснования.Количество() > 0 Тогда
		
		Если ДокументыОснования.Количество() > 1 Тогда
			
			ТекстВопроса = "Несколько документов-оснований не может быть указано для счета-фактуры на выданный аванс. 
						|Для продолжения требуется очистить все документы-основания, кроме первого. Продолжить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				НаАванс = Ложь;
				Возврат;
			Иначе
                ДокументОснованиеПервый = ДокументыОснования[0].ДокументОснование;
				ДокументыОснования.Очистить();
				ДокументыОснования.Добавить();
				ДокументыОснования[0].ДокументОснование = ДокументОснованиеПервый;
			КонецЕсли;
			
		Иначе
			СписокТипов = ПолучитьСписокТиповПоВидуСчетаФактуры(Истина);
			Если СписокТипов.Найти(ТипЗнч(ДокументыОснования[0].ДокументОснование)) = Неопределено 
				И ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
				ТекстВопроса = "Выбранный документ-основание не соответствует виду счета-фактуры. 
						|Для продолжения требуется очистить документ-основание. Продолжить?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					НаАванс = Ложь;
					Возврат;
				Иначе	
					ДокументыОснования.Очистить();
					ДокументыОснования.Добавить();
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
		
		ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ДокументыОснования[0];
		
		СписокДокументыОснования = Ложь
			
	КонецЕсли;
	
	Если НаАванс И Авансы.Количество() = 0 Тогда
		
		Авансы.Добавить();
		ЭлементыФормы.Авансы.ТекущаяСтрока = Авансы[0];
		
	ИначеЕсли НЕ НаАванс Тогда
		
		Авансы.Очистить();
		СуммаДокумента = 0;
		
		СписокТипов = ПолучитьСписокТиповПоВидуСчетаФактуры(Ложь);
		Если СписокТипов.Найти(ТипЗнч(ДокументыОснования[0].ДокументОснование)) = Неопределено
			И ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
			ТекстВопроса = "Выбранный документ-основание не соответствует виду счета-фактуры. 
			|Для продолжения требуется очистить документ-основание. Продолжить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				НаАванс = Истина;
				Возврат;
			Иначе	
			    ДокументыОснования.Очистить();
				ДокументыОснования.Добавить();
			КонецЕсли;	
		КонецЕсли;	
		
		ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ДокументыОснования[0];
		
	КонецЕсли;
	
	УстановитьВидимость();	
	
КонецПроцедуры

Процедура РассчитатьСуммуДокумента()
	
	Если НаАванс Тогда
		Сумма = Авансы.Итог("Сумма");
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма,
										мВалютаРегламентированногоУчета, ВалютаДокумента, 1, СтруктураКурсаВзаиморасчетов.Курс, 
										1, СтруктураКурсаВзаиморасчетов.Кратность);
										
		Иначе
										
			СуммаДокумента = Сумма;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СуммаСНДСПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Авансы.ТекущиеДанные;
	ТекущиеДанные.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	
	РассчитатьСуммуДокумента();

КонецПроцедуры      

Процедура СтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Авансы.ТекущиеДанные;
	ТекущиеДанные.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	
КонецПроцедуры

Процедура СписокАвансыНесколькоПриИзменении(Элемент)
	
	Если Не СписокАвансы И Авансы.Количество() > 1 Тогда
		
		ТекстВопроса = "Все строки по суммам авансов, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Имя);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			СписокАвансы = Истина;
			Возврат;
		КонецЕсли;
		
		Пока Авансы.Количество() > 1 Цикл
			
			СтрокаУдаления = Авансы[1];
			Авансы.Удалить(СтрокаУдаления);
			
		КонецЦикла;
		
		ЭлементыФормы.Авансы.ТекущаяСтрока = Авансы[0];
		
	Иначе
		
		ЭлементыФормы.Авансы.ТекущаяСтрока = Авансы[0];
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура АвансыПередУдалением(Элемент, Отказ)
	
	Если Авансы.Количество() = 1 Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АвансыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Авансы.ТекущиеДанные;
	ТекущиеДанные.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

Процедура АвансыСуммаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Авансы.ТекущиеДанные;
	ТекущиеДанные.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

Процедура АвансыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Авансы.ТекущиеДанные;
	ТекущиеДанные.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	
КонецПроцедуры

Процедура АвансыПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

