Перем мВалютаРегламентированногоУчета Экспорт;

Перем мОбновлятьРеквизитыПриЗаписи Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура для СФ определяет его сумму, валюту и контрагента
// на основе анализа данных документов оснований
//
Процедура ОпределениеПараметровСчетаФактуры(ИсточникДанных) Экспорт
	
	Если ДокументыОснования.Количество()=0 
		или не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) тогда
		// Основание не выбрано, параметры не определяем
		Возврат;
	КонецЕсли; 
	
	ПараметрыСФ = Неопределено;
	
	УчетНДС.ПолучитьПараметрыСчетаФактуры(ЭтотОбъект, мВалютаРегламентированногоУчета, ПараметрыСФ);
	
	Если не ПараметрыСФ.Организация = Неопределено 
		и не ПараметрыСФ.Организация = Организация 
		Тогда
		Номер = "";
		Организация		  = ПараметрыСФ.Организация;
	КонецЕсли; 			
	Если не ПараметрыСФ.Контрагент = Неопределено 
		и не ПараметрыСФ.Контрагент = Контрагент 
		Тогда
		Контрагент		  = ПараметрыСФ.Контрагент;
	КонецЕсли; 			
	Если не ПараметрыСФ.Договор = Неопределено 
		и не ПараметрыСФ.Договор = ДоговорКонтрагента 
		Тогда
		ДоговорКонтрагента		  = ПараметрыСФ.Договор;
	КонецЕсли; 			
	Если не СуммаДокумента = ПараметрыСФ.СуммаДокумента Тогда
		СуммаДокумента    = ПараметрыСФ.СуммаДокумента;
	КонецЕсли; 			
	Если не ПараметрыСФ.ВалютаДокумента = Неопределено 
		и не ВалютаДокумента = ПараметрыСФ.ВалютаДокумента 
		Тогда
		ВалютаДокумента   = ПараметрыСФ.ВалютаДокумента;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОснование) и ДокументыОснования.Количество()>0 
		или ДокументыОснования.Количество() = 1 и не ДокументыОснования[0].ДокументОснование = ДокументОснование 
		Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли; 
	
КонецПроцедуры // ОпределениеПараметровСчетаФактуры()

Функция ПроверитьВозможностьЗаписиСФ(Отказ = Ложь) Экспорт
	
	СтрокаСообщения = "";
	СтруктураОтбора = Новый Структура("ПометкаУдаления, НаАванс, ДоговорКонтрагента", Ложь, НаАванс, ДоговорКонтрагента);
	Для Каждого ТекущееОснование Из ДокументыОснования Цикл
		Если ТипЗнч(ТекущееОснование.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда 
			//Может быть много СФ, проверка затруднительна. СФ отрабатываются при записи документа АО.
			Продолжить;
		КонецЕсли;

		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ТекущееОснование.ДокументОснование, "СчетФактураПолученный", СтруктураОтбора, Ссылка);
		
		Если не СуществующийСФ = неопределено Тогда
			Если ПустаяСтрока(СтрокаСообщения) Тогда
				СтрокаСообщения = "Для указанного документа-основания уже зарегистрирован счет-фактура:";
			КонецЕсли;
			СтрокаСообщения = СтрокаСообщения +Символы.ПС+" - "+?(ДокументыОснования.Количество()>1," строка № "+ТекущееОснование.НомерСтроки+": для «"+ТекущееОснование.ДокументОснование+"» зарегистрирован счет-фактура ","");
			#Если Клиент Тогда
				СтрокаСообщения = СтрокаСообщения +" «"+РаботаСДиалогами.ПолучитьТекстСчетаФактуры(СуществующийСФ)+"»";
			#Иначе
				СтрокаСообщения = СтрокаСообщения +" «"+Строка(СуществующийСФ)+"»";
			#КонецЕсли
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Если не ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Регистрация еще одного счета-фактуры не допускается."
	КонецЕсли;
	
	Возврат СтрокаСообщения;

КонецФункции // ПроверитьВозможностьЗаписиСФ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ПЕЧАТНОЙ ФОРМЫ ДОКУМЕНТА

#Если Клиент Тогда

// Функция возвращает пустую таблицу значений под
// табличную часть документа основания.
// 
Функция ИнициализацияТаблицыСтрок()

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Товар");
	Товары.Колонки.Добавить("ТоварНаименование");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС");
	Товары.Колонки.Добавить("СтавкаНП");
	Товары.Колонки.Добавить("Сумма");
 	Товары.Колонки.Добавить("СуммаВключаетНДС");

	Возврат Товары;

КонецФункции

// Функция собирает данные по документу основанию ОтчетКомиссионераОПродажах и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетОПродажахКомиссионера(ТекущееОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ",  ТекущееОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Организация,
	|	ОтчетКомиссионераОПродажах.Организация КАК Покупатель,
	|	ОтчетКомиссионераОПродажах.Контрагент КАК Поставщик,
	|	ОтчетКомиссионераОПродажах.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ОтчетКомиссионераОПродажах.ВалютаДокумента КАК Валюта,
	|	ОтчетКомиссионераОПродажах.СуммаВключаетНДС,
	|	ОтчетКомиссионераОПродажах.УчитыватьНДС,
	|	""Комиссионное вознаграждение"" КАК Товар,
	|	""Комиссионное вознаграждение"" КАК ТоварНаименование,
	|	СУММА(ЕСТЬNULL(ОтчетКомиссионераОПродажахТовары.СуммаВознаграждения, 0) + ЕСТЬNULL(ОтчетКомиссионераОПродажахУслуги.СуммаВознаграждения, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ОтчетКомиссионераОПродажахТовары.СуммаНДСВознаграждения, 0) + ЕСТЬNULL(ОтчетКомиссионераОПродажахУслуги.СуммаНДСВознаграждения, 0)) КАК СуммаНДС,
	|	СУММА(0) КАК Количество,
	|	СУММА(0) КАК Цена
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|		ПО ОтчетКомиссионераОПродажах.Ссылка = ОтчетКомиссионераОПродажахТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Услуги КАК ОтчетКомиссионераОПродажахУслуги
	|		ПО ОтчетКомиссионераОПродажах.Ссылка = ОтчетКомиссионераОПродажахУслуги.Ссылка
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажах.Организация,
	|	ОтчетКомиссионераОПродажах.Контрагент,
	|	ОтчетКомиссионераОПродажах.СтавкаНДСВознаграждения,
	|	ОтчетКомиссионераОПродажах.ВалютаДокумента,
	|	ОтчетКомиссионераОПродажах.СуммаВключаетНДС,
	|	ОтчетКомиссионераОПродажах.УчитыватьНДС,
	|	ОтчетКомиссионераОПродажах.Организация";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель",);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Если Не (Шапка.Сумма = 0 И Шапка.СуммаНДС = 0) Тогда
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, Шапка);
	КонецЕсли;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетОПродажахКомиссионера()

// Функция собирает данные по документу основанию ПоступлениеТоваровИУслуг и 
// структуру с данными
// 
Функция СобратьДанныеПоПоступлениюТоваров(ТекущееОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организация,
		|	Организация           КАК Покупатель,
		|	ВЫБОР 
		|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
		|			ТОГДА Организация 
		|		ИНАЧЕ Грузополучатель 
		|	КОНЕЦ КАК Грузополучатель,
		|	Контрагент            КАК Поставщик,
		|	ВЫБОР 
		|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
		|			ТОГДА ""он же"" 
		|		ИНАЧЕ Грузоотправитель
		|	КОНЕЦ КАК Грузоотправитель,
		|	СуммаДокумента        КАК Сумма,
		|	ВалютаДокумента       КАК Валюта,
		|	УчитыватьНДС          КАК УчитыватьНДС,
		|	СуммаВключаетНДС      КАК СуммаВключаетНДС
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ТекущееОснование);
	ЗапросПоТоварам.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВложенныйЗапрос.Товар,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Товар.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		|	NULL КАК ОбъектСтроительства,
		|	NULL КАК ОбъектСтроительстваНаименование,
		|	ВложенныйЗапрос.СтранаПроисхождения,
		|	ВложенныйЗапрос.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
		|	ВложенныйЗапрос.НомерГТД,
		|	ВложенныйЗапрос.НомерГТД.Представление КАК ПредставлениеГТД,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.Количество,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.Сумма,
		|	ВложенныйЗапрос.СуммаНДС,
		|	ВложенныйЗапрос.СтавкаНДС,
		|	2 КАК ID
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаПоТоварам.НомерСтроки КАК НомерСтроки,
		|		ТаблицаПоТоварам.Номенклатура КАК Товар,
		|		ТаблицаПоТоварам.СтранаПроисхождения КАК СтранаПроисхождения,
		|		ТаблицаПоТоварам.НомерГТД КАК НомерГТД,
		|		ТаблицаПоТоварам.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		СУММА(ТаблицаПоТоварам.Количество) КАК Количество,
		|		ТаблицаПоТоварам.Цена КАК Цена,
		|		ТаблицаПоТоварам.Сумма КАК Сумма,
		|		ТаблицаПоТоварам.СуммаНДС КАК СуммаНДС,
		|		ТаблицаПоТоварам.СтавкаНДС КАК СтавкаНДС
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаПоТоварам
		|	ГДЕ
		|		ТаблицаПоТоварам.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаПоТоварам.НомерСтроки,
		|		ТаблицаПоТоварам.Номенклатура,
		|		ТаблицаПоТоварам.ЕдиницаИзмерения,
		|		ТаблицаПоТоварам.СтавкаНДС,
		|		ТаблицаПоТоварам.Цена,
		|		ТаблицаПоТоварам.СтранаПроисхождения,
		|		ТаблицаПоТоварам.НомерГТД,
		|		ТаблицаПоТоварам.Сумма,
		|		ТаблицаПоТоварам.СуммаНДС,
		|		ТаблицаПоТоварам.Номенклатура.БазоваяЕдиницаИзмерения) КАК ВложенныйЗапрос
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоОборудованию.НомерСтроки,
		|	ТаблицаПоОборудованию.Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаПоОборудованию.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
		|	NULL,
		|	NULL,
		|	ТаблицаПоОборудованию.СтранаПроисхождения,
		|	ТаблицаПоОборудованию.СтранаПроисхождения.НаименованиеПолное,
		|	ТаблицаПоОборудованию.НомерГТД,
		|	ТаблицаПоОборудованию.НомерГТД.Представление,
		|	ТаблицаПоОборудованию.Номенклатура.БазоваяЕдиницаИзмерения.Представление,
		|	ТаблицаПоОборудованию.Количество,
		|	ТаблицаПоОборудованию.Цена,
		|	ТаблицаПоОборудованию.Сумма,
		|	ТаблицаПоОборудованию.СуммаНДС,
		|	ТаблицаПоОборудованию.СтавкаНДС,
		|	1
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ТаблицаПоОборудованию
		|ГДЕ
		|	ТаблицаПоОборудованию.Ссылка = &ТекущийДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоУслугам.НомерСтроки,
		|	ТаблицаПоУслугам.Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаПоУслугам.Содержание КАК СТРОКА(1000)),
		|	NULL,
		|	NULL,
		|	""Россия"",
		|	""Россия"",
		|	""--"",
		|	""--"",
		|	ТаблицаПоУслугам.Номенклатура.БазоваяЕдиницаИзмерения,
		|	ТаблицаПоУслугам.Количество,
		|	ТаблицаПоУслугам.Цена,
		|	ТаблицаПоУслугам.Сумма,
		|	ТаблицаПоУслугам.СуммаНДС,
		|	ТаблицаПоУслугам.СтавкаНДС,
		|	3
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ТаблицаПоУслугам
		|ГДЕ
		|	ТаблицаПоУслугам.Ссылка = &ТекущийДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоОбъектамСтроительства.НомерСтроки,
		|	NULL,
		|	NULL,
		|	ТаблицаПоОбъектамСтроительства.ОбъектСтроительства,
		|	ВЫРАЗИТЬ(ТаблицаПоОбъектамСтроительства.ОбъектСтроительства.Наименование КАК СТРОКА(1000)),
		|	""Россия"",
		|	""Россия"",
		|	""--"",
		|	""--"",
		|	""--"",
		|	0,
		|	ТаблицаПоОбъектамСтроительства.Сумма,
		|	ТаблицаПоОбъектамСтроительства.Сумма,
		|	ТаблицаПоОбъектамСтроительства.СуммаНДС,
		|	ТаблицаПоОбъектамСтроительства.СтавкаНДС,
		|	4
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.ОбъектыСтроительства КАК ТаблицаПоОбъектамСтроительства
		|ГДЕ
		|	ТаблицаПоОбъектамСтроительства.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	НомерСтроки";

	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	ЕстьТовары = Ложь;
	
	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Если ВыборкаСтрокТовары.ID = 1 
			ИЛИ ВыборкаСтрокТовары.ID = 3 
			ИЛИ ВыборкаСтрокТовары.ID = 4 Тогда
			ЕстьТовары = Истина;                            
		КонецЕсли;
		
		Строчка = Товары.Добавить();

		Если ВыборкаСтрокТовары.ID <> 4 Тогда
			Строчка.Товар               = ВыборкаСтрокТовары.Товар;
			Строчка.ТоварНаименование   = ВыборкаСтрокТовары.ТоварНаименование;
		Иначе
			Строчка.Товар               = ВыборкаСтрокТовары.ОбъектСтроительства;
			Строчка.ТоварНаименование   = ВыборкаСтрокТовары.ОбъектСтроительстваНаименование;
		КонецЕсли;

		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;

	КонецЦикла;

	Если Не ЕстьТовары Тогда
		ДанныеДляПечати.Грузоотправитель = "";
		ДанныеДляПечати.Грузополучатель = "";		
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПоступлениюТоваров()

// Функция собирает данные по документу основанию ПоступлениеТоваровИУслуг и 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратуТоваров(ТекущееОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация           КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Организация 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	Контрагент            КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	СуммаДокумента        КАК Сумма,
	|	ВалютаДокумента       КАК Валюта,
	|	УчитыватьНДС          КАК УчитыватьНДС,
	|	СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ТекущееОснование);
	ЗапросПоТоварам.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВложенныйЗапрос.Товар,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Товар.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		|	ВложенныйЗапрос.СтранаПроисхождения,
		|	ВложенныйЗапрос.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
		|	ВложенныйЗапрос.НомерГТД,
		|	ВложенныйЗапрос.НомерГТД.Представление КАК ПредставлениеГТД,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.Количество,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.Сумма,
		|	ВложенныйЗапрос.СуммаНДС,
		|	ВложенныйЗапрос.СтавкаНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаПоТоварам.НомерСтроки КАК НомерСтроки,
		|		ТаблицаПоТоварам.Номенклатура КАК Товар,
		|		ТаблицаПоТоварам.СтранаПроисхождения КАК СтранаПроисхождения,
		|		ТаблицаПоТоварам.НомерГТД КАК НомерГТД,
		|		ТаблицаПоТоварам.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		СУММА(ТаблицаПоТоварам.Количество) КАК Количество,
		|		-ТаблицаПоТоварам.Цена КАК Цена,
		|		-ТаблицаПоТоварам.Сумма КАК Сумма,
		|		-ТаблицаПоТоварам.СуммаНДС КАК СуммаНДС,
		|		ТаблицаПоТоварам.СтавкаНДС КАК СтавкаНДС
		|	ИЗ
		|		Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаПоТоварам
		|	ГДЕ
		|		ТаблицаПоТоварам.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаПоТоварам.НомерСтроки,
		|		ТаблицаПоТоварам.Номенклатура,
		|		ТаблицаПоТоварам.ЕдиницаИзмерения,
		|		ТаблицаПоТоварам.СтавкаНДС,
		|		ТаблицаПоТоварам.Цена,
		|		ТаблицаПоТоварам.СтранаПроисхождения,
		|		ТаблицаПоТоварам.НомерГТД,
		|		ТаблицаПоТоварам.Сумма,
		|		ТаблицаПоТоварам.СуммаНДС,
		|		ТаблицаПоТоварам.Номенклатура.БазоваяЕдиницаИзмерения) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();

		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = ВыборкаСтрокТовары.ТоварНаименование;
		
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПоступлениюТоваров()

// Функция собирает данные по документу основанию ПоступлениеТоваровИУслуг и 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратуТоваровОтПокупателя(ТекущееОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация           КАК Покупатель,
	|	Организация			  КАК Грузополучатель,
	|	Контрагент            КАК Поставщик,
	|	""он же"" КАК Грузоотправитель,
	|	СуммаДокумента        КАК Сумма,
	|	ВалютаДокумента       КАК Валюта,
	|	УчитыватьНДС          КАК УчитыватьНДС,
	|	СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("Курс",            ТекущееОснование.КурсВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("Кратность",       ТекущееОснование.КратностьВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ТекущееОснование);
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	                        |	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	                        |	ВложенныйЗапрос.Товар,
	                        |	ВЫРАЗИТЬ(ВложенныйЗапрос.Товар.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	                        |	ВложенныйЗапрос.СтранаПроисхождения,
	                        |	ВложенныйЗапрос.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	                        |	ВложенныйЗапрос.НомерГТД,
	                        |	ВложенныйЗапрос.НомерГТД.Представление КАК ПредставлениеГТД,
	                        |	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	                        |	ВложенныйЗапрос.Количество,
	                        |	ВложенныйЗапрос.Цена,
	                        |	ВложенныйЗапрос.Сумма,
	                        |	ВложенныйЗапрос.СуммаНДС,
	                        |	ВложенныйЗапрос.СтавкаНДС
	                        |ИЗ
	                        |	(ВЫБРАТЬ
	                        |		ТаблицаПоТоварам.НомерСтроки КАК НомерСтроки,
	                        |		ТаблицаПоТоварам.Номенклатура КАК Товар,
	                        |		ТаблицаПоТоварам.СтранаПроисхождения КАК СтранаПроисхождения,
	                        |		ТаблицаПоТоварам.НомерГТД КАК НомерГТД,
	                        |		ТаблицаПоТоварам.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                        |		СУММА(ТаблицаПоТоварам.Количество) КАК Количество,
	                        |		ТаблицаПоТоварам.Цена КАК Цена,
	                        |		ТаблицаПоТоварам.Сумма КАК Сумма,
	                        |		ТаблицаПоТоварам.СуммаНДС КАК СуммаНДС,
	                        |		ТаблицаПоТоварам.СтавкаНДС КАК СтавкаНДС
	                        |	ИЗ
	                        |		Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаПоТоварам
	                        |	ГДЕ
	                        |		ТаблицаПоТоварам.Ссылка = &ТекущийДокумент
	                        |	
	                        |	СГРУППИРОВАТЬ ПО
	                        |		ТаблицаПоТоварам.НомерСтроки,
	                        |		ТаблицаПоТоварам.Номенклатура,
	                        |		ТаблицаПоТоварам.СтавкаНДС,
	                        |		ТаблицаПоТоварам.Цена,
	                        |		ТаблицаПоТоварам.СтранаПроисхождения,
	                        |		ТаблицаПоТоварам.НомерГТД,
	                        |		ТаблицаПоТоварам.Сумма,
	                        |		ТаблицаПоТоварам.СуммаНДС,
	                        |		ТаблицаПоТоварам.Номенклатура.БазоваяЕдиницаИзмерения) КАК ВложенныйЗапрос
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	НомерСтроки";

	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();

		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = ВыборкаСтрокТовары.ТоварНаименование;
		
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПоступлениюТоваров()

// Функция собирает данные по документу основанию ПоступлениеДопРасходов и
// структуру с данными
// 
Функция СобратьДанныеДопРасходам(ТекущееОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеДопРасходов.Организация,
	|	ПоступлениеДопРасходов.Организация КАК Покупатель,
	|	ПоступлениеДопРасходов.Контрагент КАК Поставщик,
	|	ВЫРАЗИТЬ(ПоступлениеДопРасходов.Содержание КАК СТРОКА(1000)) КАК СтатьяЗатрат,
	|	ПоступлениеДопРасходов.ВалютаДокумента КАК Валюта,
	|	ЕСТЬNULL(ПоступлениеДопРасходов.Сумма, 0) + ЕСТЬNULL(ВложенныйЗапрос.СуммаДенег, 0) КАК Сумма,
	|	ЕСТЬNULL(ПоступлениеДопРасходов.СуммаНДС, 0) + ЕСТЬNULL(ВложенныйЗапрос.СуммаНДС, 0) КАК СуммаНДС,
	|	ПоступлениеДопРасходов.СтавкаНДС,
	|	ПоступлениеДопРасходов.УчитыватьНДС КАК УчитыватьНДС,
	|	ПоступлениеДопРасходов.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ПоступлениеДопРасходовТовары.Сумма) КАК СуммаДенег,
	|		СУММА(ПоступлениеДопРасходовТовары.СуммаНДС) КАК СуммаНДС
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|	ГДЕ
	|		ПоступлениеДопРасходовТовары.Ссылка = &ДокументОснование) КАК ВложенныйЗапрос,
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|ГДЕ
	|	ПоступлениеДопРасходов.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель",);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",);
	ДанныеДляПечати.Вставить("Сумма",            0);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Строчка = Товары.Добавить();
	Строчка.Товар               = Шапка.СтатьяЗатрат;
	Строчка.ТоварНаименование   = Шапка.СтатьяЗатрат;
	Строчка.СтранаПроисхождения = "";
	Строчка.ПредставлениеСтраны = "";
	Строчка.НомерГТД            = "";
	Строчка.ПредставлениеГТД    = "";
	Строчка.Количество          = 1;
	Строчка.ЕдиницаИзмерения    = "";
	СуммаДока         = Шапка.Сумма + 
	                    ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС);
	Строчка.СтавкаНДС = Шапка.СтавкаНДС;
	Строчка.СуммаНДС  = Шапка.СуммаНДС;
	Строчка.Сумма     = Шапка.Сумма;
	Строчка.Цена      = Шапка.Сумма - Шапка.СуммаНДС;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеДопРасходам()

// Функция собирает данные по документу основанию ПоступлениеНМА и 
// структуру с данными
// 
Функция СобратьДанныеПоПоступлениюНМА(ТекущееОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация           КАК Покупатель,
	|	Организация           КАК Грузополучатель,
	|	Контрагент            КАК Поставщик,
	|	Контрагент            КАК Грузоотправитель,
	|	СуммаДокумента        КАК Сумма,
	|	ВалютаДокумента       КАК Валюта,
	|	УчитыватьНДС          КАК УчитыватьНДС,
	|	СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ПоступлениеНМА КАК ПоступлениеНМА
	|
	|ГДЕ
	|	ПоступлениеНМА.Ссылка = &ДокументОснование";

	ЗапросПоОбъектамНМА = Новый Запрос();
	ЗапросПоОбъектамНМА.УстановитьПараметр("ТекущийДокумент", ТекущееОснование);
	ЗапросПоОбъектамНМА.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоНМА.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПоНМА.НематериальныйАктив КАК НМА,
		|	ВЫРАЗИТЬ(ТаблицаПоНМА.НематериальныйАктив.НаименованиеПолное КАК СТРОКА(1000)) КАК НМАНаименование,
		|	0 КАК Количество,
		|	ТаблицаПоНМА.Сумма КАК Цена,
		|	ТаблицаПоНМА.Сумма КАК Сумма,
		|	ТаблицаПоНМА.СуммаНДС КАК СуммаНДС,
		|	ТаблицаПоНМА.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	Документ.ПоступлениеНМА.НематериальныеАктивы КАК ТаблицаПоНМА
		|ГДЕ
		|	ТаблицаПоНМА.Ссылка = &ТекущийДокумент";

	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоОбъектамНМА.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();

		Строчка.Товар               = ВыборкаСтрокТовары.НМА;
		Строчка.ТоварНаименование   = ВыборкаСтрокТовары.НМАНаименование;
		Строчка.СтранаПроисхождения = "Россия";
		Строчка.ПредставлениеСтраны = "Россия";
		Строчка.НомерГТД            = "--";
		Строчка.ПредставлениеГТД    = "--";
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = "--";
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПоступлениюНМА()

// Функция собирает данные по документу основанию ПоступлениеИзПереработки и 
// структуру с данными
// 
Функция СобратьДанныеПоПоступлениюИзПереработки(ТекущееОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация           КАК Покупатель,
	|	Контрагент            КАК Поставщик,
	|	СуммаДокумента        КАК Сумма,
	|	ВалютаДокумента       КАК Валюта,
	|	УчитыватьНДС          КАК УчитыватьНДС,
	|	СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК ПоступлениеИзПереработки
	|
	|ГДЕ
	|	ПоступлениеИзПереработки.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ТекущееОснование);
	ЗапросПоТоварам.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоУслугам.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПоУслугам.Номенклатура КАК Товар,
		|	ТаблицаПоУслугам.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫРАЗИТЬ(ТаблицаПоУслугам.Содержание КАК СТРОКА(1000)) КАК ТоварНаименование,
		|	""Россия"" КАК СтранаПроисхождения,
		|	""Россия"" КАК ПредставлениеСтраны,
		|	""--"" КАК НомерГТД,
		|	""--"" КАК ПредставлениеГТД,
		|	ТаблицаПоУслугам.Количество,
		|	ТаблицаПоУслугам.Цена,
		|	ТаблицаПоУслугам.Сумма,
		|	ТаблицаПоУслугам.СуммаНДС,
		|	ТаблицаПоУслугам.СтавкаНДС
		|ИЗ
		|	Документ.ПоступлениеИзПереработки.Услуги КАК ТаблицаПоУслугам
		|ГДЕ
		|	ТаблицаПоУслугам.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();

		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = ВыборкаСтрокТовары.ТоварНаименование;
		Строчка.ЕдиницаИзмерения	= ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ВыборкаСтрокТовары.ПредставлениеСтраны;
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПоступлениюТоваров()

// Функция собирает данные по документу основанию ОтражениеНДСКВычету и 
// структуру с данными
// 
Функция СобратьДанныеПоОтражениеНДСКВычету(ТекущееОснование)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтражениеНДСКВычету.Организация,
	|	ОтражениеНДСКВычету.Организация КАК Покупатель,
	|	ОтражениеНДСКВычету.Организация КАК Грузополучатель,
	|	ОтражениеНДСКВычету.Контрагент КАК Поставщик,
	|	ОтражениеНДСКВычету.Контрагент КАК Грузоотправитель,
	|	ОтражениеНДСКВычету.СуммаДокумента КАК Сумма,
	|	ОтражениеНДСКВычету.ВалютаДокумента КАК Валюта,
	|	ИСТИНА КАК УчитыватьНДС,
	|	ОтражениеНДСКВычету.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтражениеНДСКВычету КАК ОтражениеНДСКВычету
	|ГДЕ
	|	ОтражениеНДСКВычету.Ссылка = &ДокументОснование";
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ТекущееОснование);
	ЗапросПоТоварам.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоТоварамИУслугам.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПоТоварамИУслугам.Номенклатура КАК Товар,
		|	ВЫРАЗИТЬ(ТаблицаПоТоварамИУслугам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		|	ТаблицаПоТоварамИУслугам.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	0 КАК Количество,
		|	ТаблицаПоТоварамИУслугам.Цена КАК Цена,
		|	ТаблицаПоТоварамИУслугам.Сумма КАК Сумма,
		|	ТаблицаПоТоварамИУслугам.СуммаНДС КАК СуммаНДС,
		|	ТаблицаПоТоварамИУслугам.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаПоТоварамИУслугам.СтранаПроисхождения,
		|	ТаблицаПоТоварамИУслугам.НомерГТД
		|ИЗ
		|	Документ.ОтражениеНДСКВычету.ТоварыИУслуги КАК ТаблицаПоТоварамИУслугам
		|ГДЕ
		|	ТаблицаПоТоварамИУслугам.Ссылка = &ТекущийДокумент";
	
	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();

		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;
	
КонецФункции

// Функция собирает данные по документу основанию АвансовыйОтчет и 
// структуру с данными
// 
Функция СобратьДанныеПоАвансовыйОтчет(ТекущееОснование)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АвансовыйОтчет.Организация,
	|	АвансовыйОтчет.Организация КАК Покупатель,
	|	АвансовыйОтчет.Организация КАК Грузополучатель,
	|	ВложенныйЗапрос.Контрагент КАК Поставщик,
	|	ВложенныйЗапрос.Контрагент КАК Грузоотправитель,
	|	АвансовыйОтчет.ВалютаДокумента КАК Валюта,
	|	АвансовыйОтчет.УчитыватьНДС КАК УчитыватьНДС,
	|	АвансовыйОтчет.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет,
	|	(ВЫБРАТЬ
	|		Товары.Поставщик КАК Контрагент
	|	ИЗ
	|		Документ.АвансовыйОтчет.Товары КАК Товары
	|	ГДЕ
	|		Товары.СчетФактура = &Ссылка
	|		И Товары.Ссылка = &ДокументОснование
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.Поставщик
	|	ИЗ
	|		Документ.АвансовыйОтчет.Прочее КАК Товары
	|	ГДЕ
	|		Товары.СчетФактура = &Ссылка
	|		И Товары.Ссылка = &ДокументОснование) КАК ВложенныйЗапрос
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ДокументОснование";
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ТекущееОснование);
	ЗапросПоТоварам.УстановитьПараметр("СчетФактура", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоТоварам.НомерСтроки,
		|	ТаблицаПоТоварам.Номенклатура КАК Товар,
		|	ВЫРАЗИТЬ(ТаблицаПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		|	ТаблицаПоТоварам.СтранаПроисхождения,
		|	ТаблицаПоТоварам.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
		|	ТаблицаПоТоварам.НомерГТД,
		|	ТаблицаПоТоварам.НомерГТД.Представление КАК ПредставлениеГТД,
		|	ТаблицаПоТоварам.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|	ТаблицаПоТоварам.Количество,
		|	ТаблицаПоТоварам.Цена,
		|	ТаблицаПоТоварам.Сумма,
		|	ТаблицаПоТоварам.СуммаНДС,
		|	ТаблицаПоТоварам.СтавкаНДС,
		|	1 КАК ID
		|ИЗ
		|	Документ.АвансовыйОтчет.Товары КАК ТаблицаПоТоварам
		|ГДЕ
		|	ТаблицаПоТоварам.Ссылка = &ТекущийДокумент
		|	И ТаблицаПоТоварам.СчетФактура = &СчетФактура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоПрочее.НомерСтроки,
		|	ТаблицаПоПрочее.Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаПоПрочее.Содержание КАК СТРОКА(1000)),
		|	""Россия"",
		|	""Россия"",
		|	""--"",
		|	""--"",
		|	""--"",
		|	0,
		|	0,
		|	ТаблицаПоПрочее.Сумма,
		|	ТаблицаПоПрочее.СуммаНДС,
		|	ТаблицаПоПрочее.СтавкаНДС,
		|	2
		|ИЗ
		|	Документ.АвансовыйОтчет.Прочее КАК ТаблицаПоПрочее
		|ГДЕ
		|	ТаблицаПоПрочее.Ссылка = &ТекущийДокумент
		|	И ТаблицаПоПрочее.СчетФактура = &СчетФактура";
	
	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );
	
	Товары = ИнициализацияТаблицыСтрок();
	
	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();

		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		
		Строчка.ПредставлениеСтраны = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);

	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;
	
КонецФункции

// Проверяет правильность заполнения шапки документа.
// проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоля(ОбластьМакета)

	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если (Найти(ТекПараметр, "Продавец:") <> 0)
		   и (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузополучатель и его адрес:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "К платежно-расчетному документу №") <> 0)
		   		и (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");
			
		ИначеЕсли (Найти(ТекПараметр, "Покупатель:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): ----");
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьПрочеркиВПустыеПоля()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьСчетаФактуры(ДанныеДляПечати)

	ТабДокумент = Новый ТабличныйДокумент;

	Если Дата < '20090609' Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура283";
		Макет = ПолучитьОбщийМакет("СчетФактура283");
	Иначе
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура451";
		Макет = ПолучитьОбщийМакет("СчетФактура451");
	КонецЕсли;

	Если ДанныеДляПечати.Покупатель = Null Тогда
		Сообщить("В документе основании не указано юр./физ. лицо у организации.");
		Возврат Неопределено;
	КонецЕсли;
	Если ДанныеДляПечати.Поставщик = Неопределено Тогда
		Сообщить("В документе основании не указано юр./физ. лицо контрагента.");
		Возврат Неопределено;
	КонецЕсли;

	СведенияОбПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель), Дата);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата);

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ОбластьМакета.Параметры.Номер = ОбщегоНазначения.СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.АдресПоставщика = "Адрес: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ЮридическийАдрес,");
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННпоставщика = "ИНН/КПП продавца: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ИНН,", Ложь) + КПП;
	ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "
		+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), 
		"", 
		?(ДанныеДляПечати.Грузоотправитель = "он же", 
			ДанныеДляПечати.Грузоотправитель, 
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе,  "НаименованиеДляПечатныхФорм,ФактическийАдрес,")));
	
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: "
		+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
		"", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ФактическийАдрес,"));
	
	ОбластьМакета.Параметры.ПоДокументу = "К платежно-расчетному документу №  от: ";
	ОбластьМакета.Параметры.ПредставлениеПокупателя = "Покупатель: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.АдресПокупателя = "Адрес: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННПокупателя = "ИНН/КПП покупателя: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь) + КПП;
	
	ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	ОбластьМакета.Параметры.Валюта = "Валюта: " + ДанныеДляПечати.Валюта;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	ИтогоСуммаНДС = 0;
	ИтогоВсего    = 0;

	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаБезНДС");
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаСНДС");

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		Строчка.СуммаСНДС = Строчка.Сумма + ?(Строчка.СуммаВключаетНДС, 0, Строчка.СуммаНДС);
		
		Если (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120)
		 Или (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118)
		 Или (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС;
			Если Не Строчка.СуммаВключаетНДС тогда
				Строчка.Цена = 0;
			КонецЕсли;
		Иначе
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
			Если Строчка.СуммаВключаетНДС тогда
				Строчка.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если Строчка.Цена = 0 Тогда
			Строчка.Цена = ?(Строчка.Количество = 0, 0, Строчка.СуммаБезНДС / Строчка.Количество);
		КонецЕсли;
		
	КонецЦикла;
	
	ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, СтранаПроисхождения, ПредставлениеСтраны, НомерГТД, ПредставлениеГТД, ЕдиницаИзмерения, Цена, СтавкаНДС", "Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС");
	
	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		ОбластьМакета.Параметры.Заполнить(Строчка);

		Если НЕ ЗначениеЗаполнено(Строчка.ТоварНаименование) Тогда
			ОбластьМакета.Параметры.ТоварНаименование = Строчка.Товар;
		КонецЕсли;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ОбластьМакета.Параметры.ТоварНаименование);
		
		Если Строка(Строчка.ПредставлениеСтраны) = "Россия" 
			Или Строка(Строчка.ПредставлениеСтраны) = "Российская Федерация"
			Или Строчка.СтранаПроисхождения = Справочники.КлассификаторСтранМира.РОССИЯ Тогда
			ОбластьМакета.Параметры.ПредставлениеСтраны  = " -- ";
		КонецЕсли; 	

		Если ОбластьМакета.Параметры.ЕдиницаИзмерения = "--" 
			Или Не ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
			ОбластьМакета.Параметры.Количество = 0;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Цена 		= Строчка.Цена;
		ОбластьМакета.Параметры.Стоимость  	= Строчка.СуммаБезНДС;
		ОбластьМакета.Параметры.Всего      	= Строчка.СуммаСНДС;

		ИтогоСуммаНДС = ИтогоСуммаНДС + Строчка.СуммаНДС;
		ИтогоВсего    = ИтогоВсего    + Строчка.СуммаСНДС;
		
		ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	ОбластьМакета.Параметры.ИтогоВсего    = ИтогоВСего;
	
	ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьМакета);

	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаФактуры()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "СчетФактура" Тогда
		
		СписокОснований = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"),Истина);
		
		ОбщиеДанныеДляПечати = Неопределено;
		
		Для каждого ТекущееОснование из СписокОснований Цикл
			Если Не ЗначениеЗаполнено(ТекущееОснование) Тогда
				//Предупреждение("Не выбран документ-основание для данного счета-фактуры!");
				Продолжить;
			КонецЕсли; 
			
			ТипОснования = ТипЗнч(ТекущееОснование);
			ДанныеДляПечати = Неопределено;
			
			Если ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
				ДанныеДляПечати    = СобратьДанныеПоПоступлениюТоваров(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				ДанныеДляПечати    = СобратьДанныеПоВозвратуТоваров(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				ДанныеДляПечати    = СобратьДанныеПоВозвратуТоваровОтПокупателя(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				ДанныеДляПечати    = СобратьДанныеПоОтчетОПродажахКомиссионера(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				ДанныеДляПечати    = СобратьДанныеДопРасходам(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
				ДанныеДляПечати    = СобратьДанныеПоПоступлениюНМА(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда
				ДанныеДляПечати    = СобратьДанныеПоПоступлениюИзПереработки(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				ДанныеДляПечати    = СобратьДанныеПоАвансовыйОтчет(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеНДСКВычету") Тогда
				ДанныеДляПечати    = СобратьДанныеПоОтражениеНДСКВычету(ТекущееОснование);
			КонецЕсли;
			
			Если ДанныеДляПечати = Неопределено или ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеДляПечати.ТабличнаяЧасть.ЗаполнитьЗначения(ДанныеДляПечати.СуммаВключаетНДС,"СуммаВключаетНДС");
		
			Если ОбщиеДанныеДляПечати = Неопределено Тогда
				ОбщиеДанныеДляПечати = ДанныеДляПечати;
			Иначе
				Для Каждого СтрДанных Из ДанныеДляПечати Цикл
					
					Если СтрДанных.Ключ = "ТабличнаяЧасть" Тогда
						ОбщаяТабЧасть = ОбщиеДанныеДляПечати.ТабличнаяЧасть;
						ТекущаяТабЧасть = СтрДанных.Значение;
						
						Для Каждого СтрокаТекущейТабЧасть Из ТекущаяТабЧасть Цикл
							СтрокаТабЧасти = ОбщаяТабЧасть.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТабЧасти, СтрокаТекущейТабЧасть);
						КонецЦикла;
					Иначе
						Если Не ОбщиеДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
							// Если данный параметр для печати шапки документа еще не  определен - то определяем его
							ОбщиеДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла; 
		
		Если ОбщиеДанныеДляПечати = Неопределено Тогда
			ТабДокумент = Неопределено;
		иначе
			ТабДокумент = ПечатьСчетаФактуры(ОбщиеДанныеДляПечати);
		КонецЕсли;
		
	КонецЕсли;
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("СчетФактура", "Счет-фактура");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ЗаполнитьСчетФактуруНаАванс() Экспорт
	
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументыОснования[0].ДокументОснование);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовПоАвансам", МассивСчетов);
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ХозрасчетныйОбороты.СуммаОборот КАК СуммаДокумента,
	               |	ХозрасчетныйОбороты.ВалютнаяСуммаОборот КАК ВалютнаяСумма,
	               |	ХозрасчетныйОбороты.Субконто1 КАК Поставщик,
	               |	ХозрасчетныйОбороты.Субконто2 КАК ДоговорКонтрагента,
	               |	ХозрасчетныйОбороты.ВалютаКор КАК ВалютаРасчетов
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, Счет В (&СчетУчетаРасчетовПоАвансам), &МассивСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	               |ГДЕ
	               |	ХозрасчетныйОбороты.Регистратор = &ДокументОснование";
				   
	Результат = Запрос.Выполнить().Выгрузить();
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.НДС18_118);
	
	ОшибкаПриЗаполнении = Ложь;
	СтрокаСообщения = "";
	Для Каждого СтрокаТаблицы Из Результат Цикл
		
		Если ОбщегоНазначения.ЕстьТабЧастьДокумента("РасшифровкаПлатежа", ДокументыОснования[0].ДокументОснование.Метаданные()) Тогда
			
			ТаблицаПоСтавкам = Новый ТаблицаЗначений();
			ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			
			Для Каждого СтрПлатежа Из ДокументыОснования[0].ДокументОснование.РасшифровкаПлатежа Цикл
				Если СтрПлатежа.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента Тогда
					ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
					Если ТекСтавкаНДС = Неопределено Тогда
						ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
					КонецЕсли; 
					СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
					СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
					СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаПоСтавкам.Свернуть("СтавкаНДС", "Сумма");
			
			//Распределение суммы рег учета
			МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТаблицы.СуммаДокумента, ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
			Если Не МассивСумм = Неопределено Тогда
				ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
			Иначе
				МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
			КонецЕсли; 
			
			Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
				
				Если СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 
					Или СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					// НДС с авансов под экспортные поставки не начисляется
					Продолжить;
				КонецЕсли;
				
				ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
				СуммаДокумента		= СуммаДокумента + СтрокаПоСтавке.Сумма;
				НовыйАванс = Авансы.Добавить();
				НовыйАванс.Сумма = СтрокаПоСтавке.Сумма;
				НовыйАванс.СтавкаНДС	  = ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС]), СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], Перечисления.СтавкиНДС.НДС18_118);;
				НовыйАванс.СуммаНДС		  = УчетНДС.РассчитатьСуммуНДС(НовыйАванс.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(НовыйАванс.СтавкаНДС));
				ОшибкаПриЗаполнении = Ложь;
			КонецЦикла;
			
			СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении);
			Если ОшибкаПриЗаполнении Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Авансы.Очистить();
				СуммаДокумента = 0;
			Иначе
				Прервать;
			КонецЕсли;

		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаТаблицы);
			СтрокаАванса = Авансы.Добавить();
			СтрокаАванса.Сумма = СтрокаТаблицы.СуммаДокумента;
			СтрокаАванса.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
			СтрокаАванса.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаАванса.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаАванса.СтавкаНДС));
			СтрокаСообщения = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда 
		ДокументОснование = Неопределено;
		ДоговорКонтрагента = Неопределено;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		СуммаДокумента = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
	КонецЕсли;		
	
	Если ОшибкаПриЗаполнении Тогда
		ДокументыОснования.Очистить();
		ДокументОснование = Неопределено;
		ДоговорКонтрагента = Неопределено;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		СуммаДокумента = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;	
	
	НДСПредъявленКВычету = УпрощенныйУчетНДС И Не НаАванс;
	
КонецПроцедуры

Функция ПолучитьСписокТиповПоВидуСчетаФактуры(НаАванс) Экспорт
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	СписокТипов.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	СписокТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	Если Не НаАванс Тогда
		СписокТипов = Новый ОписаниеТипов(ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип, ,СписокТипов);
		СписокТипов = СписокТипов.Типы();
	КонецЕсли;
	
	СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	
	Возврат СписокТипов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДГОТОВКИ ДАННЫХ ДЛЯ ПРОВЕДЕНИЯ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Дополним положениями учетной политики
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("УпрощенныйУчетНДС");
	ОшибкаПолученияУП = Ложь;
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, ОшибкаПолученияУП, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ, Ложь);
	
	Если ОшибкаПолученияУП Тогда
		СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС", Ложь);
	КонецЕсли; 
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС И СтруктураШапкиДокумента.НДСПредъявленКВычету Тогда
	    // Заполним по шапке документа дерево параметров, нужных при проведении.
	    ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	    ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", 			"ВидДоговора");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС",       "УчетАгентскогоНДС");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидАгентскогоДоговора",   "ВидАгентскогоДоговора");

		// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
		СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, );
		
	КонецЕсли;
		
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "ДокументыОснования".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, СтруктураШапкиДокумента, Отказ, Заголовок)

	СтрокаСообщения = "";
	Для Каждого СтрокаТЧ Из ТаблицаПоДокументамОснованиям Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) тогда 
			Если  не ТипЗнч(СтрокаТЧ.ДокументОснование) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") 
			и НЕ (СтрокаТЧ.ДокументОснованиеПроведен = Истина) Тогда
				Если ПустаяСтрока(СтрокаСообщения) Тогда
				    СтрокаСообщения = "Счет-фактуру можно провести только на основании проведенного документа";
				КонецЕсли; 
				СтрокаСообщения = СтрокаСообщения + Символы.ПС+ ?(ТаблицаПоДокументамОснованиям.Количество()>1," - строка № " + СтрокаТЧ.НомерСтроки + ":"," - ")
												 + " документ «"+СтрокаТЧ.ДокументОснование+"» не проведен";
			КонецЕслИ;
		Иначе
			Если ТаблицаПоДокументамОснованиям.Количество()>1 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке номер "+СтрокаТЧ.НомерСтроки+" табличной части ""Документы основания"": Не заполнено значение реквизита ""Документ - основание для выписки счета-фактуры""", Отказ, Заголовок);
			Иначе									 
				ОбщегоНазначения.СообщитьОбОшибке("Не заполнен документ-основание счета-фактуры", Отказ, Заголовок);
			КонецЕсли; 
		КонецЕсли;	
										
	КонецЦикла;
	
	Если не ПустаяСтрока(СтрокаСообщения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок)
	КонецЕсли; 

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Авансы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоАвансам(Отказ, Заголовок)

	Если Не НаАванс Тогда
		Возврат;
	КонецЕсли;
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("СтавкаНДС, Сумма");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, ПодготовитьТаблицыДокументовОснования = Ложь) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения по табличной части "ДокументыОснования".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДокументОснование"      	, "ДокументОснование");
	СтруктураПолей.Вставить("ДокументОснованиеПроведен" , "ДокументОснование.Проведен");
	СтруктураПолей.Вставить("УчитыватьНДС"				, "ДокументОснование.УчитыватьНДС");
	СтруктураПолей.Вставить("НДСВключенВСтоимость"		, "ДокументОснование.НДСВключенВСтоимость");
	СтруктураПолей.Вставить("СуммаВключаетНДС"			, "ДокументОснование.СуммаВключаетНДС");
	
	РезультатЗапросаПоДокументамОснованиям = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураПолей);
	
	ТаблицаПоДокументамОснованиям = РезультатЗапросаПоДокументамОснованиям.Выгрузить();
	
	Если СтруктураШапкиДокумента.НаАванс Тогда
		
		ТаблицаПоДокументамОснованиям.Колонки.Добавить("ТаблицаДанных");
		
		Для Каждого СтрокаОснования Из ТаблицаПоДокументамОснованиям Цикл
			
			СтрокаОснования.УчитыватьНДС = Истина;
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Сумма",		"Сумма");
			СтруктураПолей.Вставить("НДС",			"СуммаНДС");
			СтруктураПолей.Вставить("СтавкаНДС",	"СтавкаНДС");
			
			РезультатЗапросаПоАвансам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураПолей);
			
			СтрокаОснования.ТаблицаДанных = РезультатЗапросаПоАвансам.Выгрузить();
			ТаблицаПоАвансам = СтрокаОснования.ТаблицаДанных; 
			
			ТаблицаПоАвансам.Колонки.Добавить("СчетФактура", ТаблицаПоДокументамОснованиям.Колонки.ДокументОснование.ТипЗначения);
			
			ТаблицаПоАвансам.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыВыданные, "ВидЦенности");
			ТаблицаПоАвансам.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Поставщик");
			ТаблицаПоАвансам.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Контрагент");
			ТаблицаПоАвансам.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаПоАвансам.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "СуммаБезНДС");
			ТаблицаПоАвансам.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным, "СчетУчетаНДС");
			ТаблицаПоАвансам.Колонки.Добавить("СчетУчетаНДСПоРеализации", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным, "СчетУчетаНДСПоРеализации");
			ТаблицаПоАвансам.Колонки.Добавить("Событие", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПокупки"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(?(НаАванс И СтруктураШапкиДокумента.УпрощенныйУчетНДС, 
												Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету,
												Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком), "Событие");
			
			Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
				
				СтрокаТаблицы.СчетФактура = СтрокаОснования.ДокументОснование;
				СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС;
			
			КонецЦикла;
			
		КонецЦикла; 
	ИначеЕсли ПодготовитьТаблицыДокументовОснования Тогда
		
		ТаблицаПоДокументамОснованиям.Колонки.Добавить("ТаблицаДанных");
		
		Для Каждого СтрокаОснования Из ТаблицаПоДокументамОснованиям Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаОснования.ДокументОснование) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
				СтрокаОснования.УчитыватьНДС = Истина;
				СтрокаОснования.НДСВключенВСтоимость = Ложь;
				СтрокаОснования.СуммаВключаетНДС = Ложь;
			КонецЕсли;
			
			Если СтрокаОснования.НДСВключенВСтоимость = Null Тогда
				СтрокаОснования.НДСВключенВСтоимость = Ложь;
			КонецЕсли;
			
			Если СтрокаОснования.НДСВключенВСтоимость Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОснования.ТаблицаДанных = УчетНДС.ПолучитьТаблицуДокументаНДС(СтрокаОснования.ДокументОснование);
			
			Если СтрокаОснования.ТаблицаДанных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				СтрокиКУдалению = Новый Массив;
				Для Каждого СтрокаТаблицы Из СтрокаОснования.ТаблицаДанных Цикл
					Если СтрокаТаблицы.СчетФактура <> Ссылка Тогда
						СтрокиКУдалению.Добавить(СтрокаТаблицы);
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
					СтрокаОснования.ТаблицаДанных.Удалить(СтрокаКУдалению);
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокаОснования.ТаблицаДанных.Колонки.Найти("СчетФактура") = Неопределено Тогда
				
				СтрокаОснования.ТаблицаДанных.Колонки.Добавить("СчетФактура", Новый ОписаниеТипов(ТаблицаПоДокументамОснованиям.Колонки.ДокументОснование.ТипЗначения));
				СтрокаОснования.ТаблицаДанных.ЗаполнитьЗначения(СтрокаОснования.ДокументОснование, "СчетФактура");
				
			КонецЕсли;			
			
		КонецЦикла; 
	КонецЕсли;
		
КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДокумента, Отказ, Заголовок)

	Если Не СтруктураШапкиДокумента.НаАванс И СтруктураШапкиДокумента.УпрощенныйУчетНДС
		И СтруктураШапкиДокумента.НДСПредъявленКВычету Тогда
		
		ПроводкиБУ = Движения.Хозрасчетный;
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ТаблицаДанных) Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьСчетУчетаБУ = СтрокаТаблицы.ТаблицаДанных.Колонки.Найти("СчетУчетаБУ") <> Неопределено;
			ЕстьСчетУчетаЦенности = СтрокаТаблицы.ТаблицаДанных.Колонки.Найти("СчетУчетаЦенности") <> Неопределено;
				
			Для Каждого СтрокаДанных Из СтрокаТаблицы.ТаблицаДанных Цикл
				
				Если СтрокаДанных.НДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СчетУчетаБУ = ?(ЕстьСчетУчетаБУ И Не СтрокаДанных.СчетУчетаБУ = Неопределено, СтрокаДанных.СчетУчетаБУ, 
								?(ЕстьСчетУчетаЦенности, СтрокаДанных.СчетУчетаЦенности, Неопределено));
								
				Если СчетУчетаБУ = Неопределено
					Или СчетУчетаБУ.Забалансовый Тогда
					Продолжить;
				КонецЕсли;
				
				// Проводки по вычету в случае упрощенного учета НДС
				
				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период      = СтруктураШапкиДокумента.Дата;

				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "НДС";

				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НДС; //68.02
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

				Проводка.СчетКт      = СтрокаДанных.СчетУчетаНДС;
				СчетФактура = ?(ТипЗнч(СтрокаТаблицы.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет"), СтруктураШапкиДокумента.Ссылка, СтрокаТаблицы.ДокументОснование);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"СФПолученные", СчетФактура, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент, Истина);
				
				Проводка.Сумма       = СтрокаДанных.НДС;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС 
		И СтруктураШапкиДокумента.НаАванс И СтруктураШапкиДокумента.НДСПредъявленКВычету Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			Для Каждого СтрокаДанных Из СтрокаТаблицы.ТаблицаДанных Цикл
				
				// Проводки по вычету НДС с выданного аванса
				
				Если СтрокаДанных.НДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПроводкиБУ = Движения.Хозрасчетный;
				
				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период      = СтруктураШапкиДокумента.Дата;

				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Вычет НДС с выданного аванса";

				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НДС; //68.02
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

				Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"СФПолученные", СтрокаДанных.СчетФактура, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Контрагенты", СтрокаДанных.Контрагент, Истина);

				Проводка.Сумма       = СтрокаДанных.НДС;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ДвижениеПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаДокумента, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвижениеПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС
		И СтруктураШапкиДокумента.НДСПредъявленКВычету Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ТаблицаДанных) Тогда
				УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСПредъявленномуПоставщиком(СтруктураШапкиДокумента, СтрокаТаблицы.ТаблицаДанных, Движения, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.УпрощенныйУчетНДС 
		И СтруктураШапкиДокумента.НаАванс Тогда
		
		ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
		ТаблицаДвижений_НДССАвансов = Движения.НДСсАвансов.ВыгрузитьКолонки();
		
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			Для Каждого СтрокаДанных Из СтрокаТаблицы.ТаблицаДанных Цикл
				
				НоваяЗапись = ТаблицаДвижений_НДСПредъявленный.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаДанных);
				НоваяЗапись.Организация = СтруктураШапкиДокумента.Организация;
				НоваяЗапись.СчетУчетаНДС = Неопределено;
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				НоваяЗапись = ТаблицаДвижений_НДССАвансов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаДанных);
				НоваяЗапись.Организация = СтруктураШапкиДокумента.Организация;
				НоваяЗапись.Покупатель = СтрокаДанных.Контрагент;
				НоваяЗапись.ДатаСобытия = СтруктураШапкиДокумента.Дата;
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				
			КонецЦикла;
		КонецЦикла;
			
		Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда

			Движения.НДСПредъявленный.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
			Движения.НДСПредъявленный.ДобавитьДвижение();
			
		КонецЕсли;
		
		Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда

			Движения.НДСсАвансов.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений_НДССАвансов;
			Движения.НДСсАвансов.ДобавитьДвижение();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если (Основание = Неопределено) 
		Или Не ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		Возврат;
	КонецЕсли;
	
	Если Основание.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено
		И Основание.ДоговорКонтрагента.УчетАгентскогоНДС
		И Основание.ДоговорКонтрагента.НалоговыйАгентПоОплате Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыОснования.Добавить().ДокументОснование = Основание.Ссылка;
	ЭтотОбъект.ДокументОснование = Основание.Ссылка;
    Дата = Основание.Дата;
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактуры(Истина);
	Если СписокТиповНаАванс.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
		
		ВалютаДокумента = мВалютаРегламентированногоУчета;
		НаАванс = Истина;
		ЗаполнитьСчетФактуруНаАванс();
		
	Иначе
		// Ввод счета-фактуры на поступление, требуется проверить существование ранее введенного счета-фактуры
		СуществующийСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание, "СчетФактураПолученный");
		Если Не СуществующийСчетФактура = Неопределено
			И Не СуществующийСчетФактура = Ссылка Тогда
			
			Если Не СуществующийСчетФактура = Основание Тогда
				// Найден ранее введенный счет-фактура, требуется закрыть новый документ и открыть найденный
				// Если найденный счет-фактура - это сам документ-основание, то счет-фактуру также создавать не надо, открывать ничего не надо
				СуществующийСчетФактура.ПолучитьФорму(, , Строка(Основание)).Открыть();
			Иначе
				Сообщить("Данные счета-фактуры введены в документе поступления, ввод отдельного документа ""Счет-фактура полученный"" не требуется");
			КонецЕсли;
			
			ДополнительныеСвойства.Вставить("НайденСуществующийСчетФактура", Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не НаАванс 
		И УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата) Тогда
		НДСПредъявленКВычету = Истина;
	КонецЕсли;

	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, СтруктураШапкиДокумента.УпрощенныйУчетНДС И СтруктураШапкиДокумента.НДСПредъявленКВычету);
	
	ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПоАвансам(Отказ, Заголовок);
	
	Если Не Отказ 
		И Не СформированПриВводеНачальныхОстатковНДС Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Или Не мОбновлятьРеквизитыПриЗаписи Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) И ДокументыОснования.Найти(ДокументОснование) = Неопределено Тогда
		ДокументОснование = Неопределено;
	КонецЕсли;
	
	Если ДокументОснование = Неопределено И ДокументыОснования.Количество() > 0 Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	Если Не НаАванс И Не СформированПриВводеНачальныхОстатковНДС Тогда
		ОпределениеПараметровСчетаФактуры(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мОбновлятьРеквизитыПриЗаписи = Истина;
