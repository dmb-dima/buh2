Перем мВалютаРегламентированногоУчета Экспорт;
Перем мУчетнаяПолитика Экспорт;

///////////////////////////////////////////////////////
//ЗАПОЛНЕНИЕ
///////////////////////////////////////////////////////

// Процедура заполняет счета в табличной части.
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, Заполнять) Экспорт

	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, Заполнять);
		
	КонецЦикла;

КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧасти()

// Процедура заполняет счета в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, Заполнять) Экспорт

	СчетаУчета          = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	ЗаполнитьСчета(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, Заполнять, МетаданныеДокумента);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета в строке табличной части.
//
Процедура ЗаполнитьСчета(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, Заполнять, МетаданныеДокумента)

	Если Заполнять = Истина Тогда

		СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;

	ИначеЕсли Заполнять = Ложь Тогда

		СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчета()

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСФ(ТаблицаПоПартиям, РезультатЗапросаПоСФ, СтруктураШапкиДокумента)
	
	ТаблицаПоСФ = РезультатЗапросаПоСФ.Выгрузить();
	
	ТаблицаПоСФ.Колонки.Добавить("Номенклатура");
	ТаблицаПоСФ.Колонки.Добавить("СчетУчета");
	ТаблицаПоСФ.Колонки.Добавить("Партия");
	ТаблицаПоСФ.Колонки.Добавить("Склад");               
	ТаблицаПоСФ.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад, "Склад");

	Для Каждого Партия Из ТаблицаПоПартиям Цикл
		СФПоПартии = ТаблицаПоСФ.НайтиСтроки(Новый Структура("Ключ", Партия.Ключ));
		Для Каждого СтрокаСФ ИЗ СФПоПартии Цикл
			СтрокаСФ.Номенклатура 	= Партия.Номенклатура; 
			СтрокаСФ.СчетУчета 		= Партия.СчетУчета;
			СтрокаСФ.Партия 		= Партия.ДокументПартии;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПоСФ;
	
КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ОрганизацияОтправитель, СчетРасчетов, Склад");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПартии(ТаблицаПоПартиям, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ДанныеПоПартиям";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, СчетУчета");
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСФ(ТаблицаПоСФ, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ДанныеПоСФ";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("СчетФактура, СтавкаНДС");
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ = Ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВалютаДокумента"		,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("КурсДокумента"		,1);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента"	,1);
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоПартиям, ТаблицаПоСФ) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Партии".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"       , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"         , "Количество"); 
	СтруктураПолей.Вставить("СчетУчета"        	 , "СчетУчета");
	СтруктураПолей.Вставить("НомерГТД"           , "НомерГТД");
	СтруктураПолей.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	СтруктураПолей.Вставить("Сумма"              , "Сумма");
	СтруктураПолей.Вставить("СуммаНУ"            , "СуммаНУ");
	СтруктураПолей.Вставить("СуммаПР"            , "СуммаПР");
	СтруктураПолей.Вставить("СуммаВР"            , "СуммаВР");
	СтруктураПолей.Вставить("ДокументПартии"     , "ДокументПартии");
	СтруктураПолей.Вставить("Ключ"     			 , "Ключ");
	
	// Подготовим таблицу по партиям.
	ТаблицаПоПартиям = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДанныеПоПартиям", СтруктураПолей).Выгрузить();

		// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "СФ".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("СчетФактура"       	, "СчетФактура");
	СтруктураПолей.Вставить("ВидЦенности"       	, "ВидЦенности");
	СтруктураПолей.Вставить("Количество"        	, "Количество"); 
	СтруктураПолей.Вставить("Стоимость"        		, "Стоимость");
	СтруктураПолей.Вставить("СчетУчетаНДС"      	, "СчетУчетаНДС");
	СтруктураПолей.Вставить("СтавкаНДС"         	, "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"               	, "НДС");
	СтруктураПолей.Вставить("НДСВключенВСтоимость"	, "НДСВключенВСтоимость");
	СтруктураПолей.Вставить("Ключ"     			 	, "Ключ");
	
	// Подготовим таблицу по партиям.
	РезультатЗапросаПоСФ = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДанныеПоСФ", СтруктураПолей);
	ТаблицаПоСФ = ПодготовитьТаблицуСФ(ТаблицаПоПартиям, РезультатЗапросаПоСФ, СтруктураШапкиДокумента);
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ДвиженияПоРегистрамНДС(СтруктураШапкиДокумента, ТаблицаПоСФ, Отказ)

	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоСФ.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений = ЭтотОбъект.Движения.НДСПоПриобретеннымЦенностям.Выгрузить();
	ТаблицаДвижений.Очистить();
	ТаблицаПоСФ.Колонки.Добавить("Организация");
	ТаблицаПоСФ.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСФ,ТаблицаДвижений);
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
		
		ЭтотОбъект.Движения.НДСПоПриобретеннымЦенностям.мПериод          = СтруктураШапкиДокумента.Дата;
		ЭтотОбъект.Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвижений;
		ЭтотОбъект.Движения.НДСПоПриобретеннымЦенностям.ВыполнитьПриход();
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПартиям, ТаблицаПоСФ, Отказ, Заголовок)
	
	Для Каждого СтрокаПартии Из ТаблицаПоПартиям Цикл
		Проводка 					= Движения.Хозрасчетный.Добавить();
		Проводка.Период      		= СтруктураШапкиДокумента.Дата;
		Проводка.Организация 		= СтруктураШапкиДокумента.Организация;
		Проводка.Содержание 		= "Поступление МПЗ по авизо";
		Проводка.СчетДт 			= СтрокаПартии.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  СтрокаПартии.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.Склад);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  СтрокаПартии.ДокументПартии);
		
		
		// Балансовый счет учета не может корреспондировать с забалансовым
		Если СтруктураШапкиДокумента.СчетРасчетов.Забалансовый = СтрокаПартии.СчетУчета.Забалансовый Тогда
			Проводка.СчетКт 			= СтруктураШапкиДокумента.СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбособленныеПодразделения",  ОрганизацияОтправитель);			
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");
		
		Проводка.Сумма 		= СтрокаПартии.Сумма;
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаПартии.СуммаНУ,СтрокаПартии.СуммаНУ,СтрокаПартии.СуммаПР,СтрокаПартии.СуммаПР,СтрокаПартии.СуммаВР,СтрокаПартии.СуммаВР,Проводка);
		
		Если Проводка.СчетДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаПартии.Количество;
		КонецЕсли;
		
		Если Проводка.СчетКт.Количественный Тогда
			Проводка.КоличествоКт = СтрокаПартии.Количество;
		КонецЕсли;
		
		Если Проводка.СчетКт.Валютный Тогда
			Проводка.ВалютаКт 			= Константы.ВалютаРегламентированногоУчета.Получить();
			Проводка.ВалютнаяСуммаКт 	= СтрокаПартии.Сумма;			
		КонецЕсли;
		
		Проводка.НеКорректироватьСтоимостьАвтоматически = Истина;
		
		// Учет товаров по номерам ГТД
		Если УправлениеЗапасами.ЭтоИмпортныйТовар(СтрокаПартии.СчетУчета, СтрокаПартии.НомерГТД, СтрокаПартии.СтранаПроисхождения) Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      		= СтруктураШапкиДокумента.Дата;
			Проводка.Организация 		= СтруктураШапкиДокумента.Организация;
			Проводка.Содержание 		= "Поступление МПЗ по авизо";
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ГТД;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаПартии.Номенклатура, Истина, Заголовок);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НомераГТД", СтрокаПартии.НомерГТД, Истина, Заголовок);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтраныПроисхождения", СтрокаПартии.СтранаПроисхождения, Истина, Заголовок);
			
			Проводка.КоличествоДт = СтрокаПартии.Количество;
			
		КонецЕсли;
	КонецЦикла;
	
	ДвиженияПоРегистрамНДС(СтруктураШапкиДокумента, ТаблицаПоСФ, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоПартиям, ТаблицаПоСФ;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(Ложь, Отказ, Заголовок, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

    ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоПартиям, ТаблицаПоСФ);
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиПартии(ТаблицаПоПартиям, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиСФ(ТаблицаПоСФ, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПартиям, ТаблицаПоСФ, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АвизоМПЗИсходящее") Тогда
	
		ЗаполнитьПоОснованию(Основание);
		
	КонецЕсли;

	Ответственный = глЗначениеПеременной("глТекущийПользователь");

КонецПроцедуры

Процедура ЗаполнитьПоОснованию(Основание) Экспорт

	Если Не ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДокументаОснования = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Основание);
	ДокументОснование           = ПараметрыДокументаОснования.Ссылка;
	
	СчетРасчетов = ПараметрыДокументаОснования.СчетРасчетов;
	Организация = ПараметрыДокументаОснования.ОрганизацияПолучатель;
	ОрганизацияОтправитель = ПараметрыДокументаОснования.Организация;
	НомерВходящегоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ПараметрыДокументаОснования);
	ДатаВходящегоДокумента = ПараметрыДокументаОснования.Дата;

	Для Каждого СтрокаТЧ Из ДокументОснование.ДанныеПоПартиям Цикл
		НоваяСтрока = ДанныеПоПартиям.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ДокументОснование.ДанныеПоСФ Цикл
		НоваяСтрока = ДанныеПоСФ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
