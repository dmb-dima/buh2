// Хранит текущую форму подбора номенклатуры
Перем мФормаПодбораНоменклатуры;

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;
Перем мТекущаяОрганизация;

//Используется для определения необходимости заполнения счетов в документе
Перем мСклад;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Вид пересчета номеров сплиттованной таблицы
Перем мПеренумеровать;

//Параметры учетной политики
Перем мПоддержкаПБУ18;
Перем мОценкаМПЗПоСредней;
Перем мУпрощенныйУчетНДС;
Перем мСложныйУчетНДС;
Перем мУСН;

// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;


// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбораНоменклатуры, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	СписокВидовПодбора = Новый СписокЗначений();
	СписокВидовПодбора.Добавить(,"По справочнику");
	
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", "ПодборВТабличнуюЧастьТовары");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

	СтруктураПараметровПодбора.Вставить("ДатаРасчетов",          ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"       ,          Склад);
	СтруктураПараметровПодбора.Вставить("Организация" ,          Организация);
	СтруктураПараметровПодбора.Вставить("Подразделение", ПодразделениеОрганизации);

	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , Ложь);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер);

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, мФормаПодбораНоменклатуры);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем Номенклатура, Количество;

	Если ТабличнаяЧасть = ДанныеПоПартиям Тогда
	
		// Получим параметры подбора из структуры подбора.

		ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
		ЗначениеВыбора.Свойство("Количество"      , Количество);

		Если Номенклатура.Услуга Тогда
			Предупреждение("В данном контексте услуги не подбираются!");
			Возврат;
		КонецЕсли;

		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура"              , Номенклатура);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		Иначе

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
			СтрокаТабличнойЧасти.Количество       = Количество;
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Товары", ИСТИНА);
			ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти, Ложь, Организация, Дата);

		КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено
		
	КонецЕсли; 

	Если ТабличнаяЧасть = ДанныеПоПартиям Тогда
		ИмяТабличнойЧасти = "ДанныеПоПартиям";
	КонецЕсли; 

	ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяКолонка = ЭлементыФормы[ИмяТабличнойЧасти].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);
		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(ДанныеПоПартиям, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДанныеПоПартиям, ЭлементыФормы.КоманднаяПанельДанныеПоПартиям.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДанныеПоСФ, ЭлементыФормы.КоманднаяПанельСчетаФактуры);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Новый Структура(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)     

	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)        

	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда                   
		   УстановитьКнопкиПечати();                             
	КонецЕсли;       

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

///////////////////////////////////////////////////////
//ОБРАБОТКА СОБЫТИЙ ФОРМЫ
///////////////////////////////////////////////////////

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	     
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,,ПараметрОбъектКопирования);
		
		Если Не ЗначениеЗаполнено(СчетРасчетов) Тогда
			СчетРасчетов = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям; // 79.02
		КонецЕсли;
		
	КонецЕсли;

	ЭлементыФормы.ОрганизацияОтправитель.СписокВыбора = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделений(Организация);
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	УстановитьТипОрганизации(УчетнаяПолитикаНеЗадана);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	//Служебная переменная
	мПеренумеровать = 0;

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	мСклад = Склад;
 	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	// Предполагается использовать отбор по связанным таблицам
	ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.Ключ.Использование = Истина;
	ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.Ключ.Значение = 0;

	СтруктураРеквизитов = Новый Структура("Дата,Организация,СкладКомпании");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	// Установить видимость сплиттованной таблицы
	УстановитьВидимостьТЧДанныеПоСФ();
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельДанныеПоПартиямДействиеПодбор(Кнопка)

	ДействиеПодбор(ДанныеПоПартиям);

КонецПроцедуры // КоманднаяПанельДанныеПоПартиямДействиеПодбор()

Процедура КоманднаяПанельДанныеПоПартиямЗаполнитьПоДокументуОснованию(Кнопка)
	
	Если ДанныеПоПартиям.Количество() > 0 Тогда
		
		Ответ = Вопрос("При заполнении табличные части будут очищены.
		               |Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
					   
		Если НЕ (Ответ = КодВозвратаДиалога.Да) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДокументОснование.Пустая() Тогда
		
		ФормаВыбора = Документы.АвизоМПЗИсходящее.ПолучитьФормуВыбора(, ЭтаФорма);
		Выбор = ФормаВыбора.ОткрытьМодально();
		
		Если Выбор <> Неопределено Тогда
			
			ДокументОснование = Выбор;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ДокументОснование.Пустая() Тогда
		
		ДанныеПоПартиям.Очистить();
		ДанныеПоСФ.Очистить();
		
		ЗаполнитьПоОснованию(ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////
//ОБРАБОТКА СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ - ШАПКА
///////////////////////////////////////////////////////

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	УстановитьТипОрганизации(УчетнаяПолитикаНеЗадана);
	
    УстановитьВидимость();
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода организации.
//
Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мТекущаяОрганизация = Организация;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	УстановитьТипОрганизации(УчетнаяПолитикаНеЗадана);
	
	Отказ = Ложь;
	УстановитьВидимостьТЧДанныеПоСФ(Отказ);
	
	Если Отказ Тогда
		Организация = мТекущаяОрганизация;
		ОрганизацияПриИзменении(Элемент);
	КонецЕсли;
	
	УстановитьВидимость();
	
	ЭлементыФормы.ОрганизацияОтправитель.СписокВыбора = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделений(Организация);
	
	Если ЭлементыФормы.ОрганизацияОтправитель.СписокВыбора.НайтиПоЗначению(ОрганизацияОтправитель) = Неопределено Тогда
		ОрганизацияОтправитель = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// считывает настойки учетной политики
Процедура УстановитьТипОрганизации(УчетнаяПолитикаНеЗадана)
	
	Если УчетнаяПолитикаНеЗадана Тогда
		мПоддержкаПБУ18		= Ложь;
		мУСН				= Ложь;
		мОценкаМПЗПоСредней	= Истина;
		мУпрощенныйУчетНДС	= Истина;
		мСложныйУчетНДС		=Ложь;
	Иначе
		мПоддержкаПБУ18		= НалоговыйУчет.ПрименениеПБУ18(Организация, Дата);
		мУСН 				= НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
		мОценкаМПЗПоСредней	= мУчетнаяПолитика.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней;
		мУпрощенныйУчетНДС	= УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
		мСложныйУчетНДС		= мУчетнаяПолитика.СложныйУчетНДС И Не мУчетнаяПолитика.УСН И Не мУчетнаяПолитика.УпрощенныйУчетНДС;
	КонецЕсли;
	
КонецПроцедуры

Процедура СкладКомпанииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.Склады.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.Отбор.ВидСклада.ВидСравнения  = ВидСравнения.Равно;
	ФормаВыбора.Отбор.ВидСклада.Значение      = Перечисления.ВидыСкладов.Оптовый;
	ФормаВыбора.Отбор.ВидСклада.Использование = Истина;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Склад.
//
Процедура СкладПриИзменении(Элемент)

	ПодразделениеОрганизации = УправлениеПодразделениями.ПолучитьПодразделение(Организация, Склад);
	
	Если ДанныеПоПартиям.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если мСклад = Элемент.Значение Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоказыватьВДокументахСчетаУчета Тогда
		
		Ответ = Вопрос("Установить счета учета в соответствии со значениями по умолчанию?", 
		РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета при смене склада");
			
	Иначе

		Ответ = КодВозвратаДиалога.Да;
		
	КонецЕсли;
					   
	Если Ответ = КодВозвратаДиалога.Да Тогда

		ЗаполнитьСчетаУчетаВТабЧасти(ДанныеПоПартиям,         "ДанныеПоПартиям",         ИСТИНА);

	КонецЕсли;
	
	мСклад = Склад;


КонецПроцедуры

Процедура ОрганизацияОтправительНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.ВыбратьЗначениеПоляВводаИзСписка(
		ЭтаФорма, Элемент, СтандартнаяОбработка, ЭлементыФормы.ОрганизацияОтправитель.СписокВыбора, ОрганизацияОтправитель);
	
КонецПроцедуры

Процедура ОрганизацияОтправительАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ОбработатьАвтоПодборТекста(
		Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ЭлементыФормы.ОрганизацияОтправитель.СписокВыбора);
	
КонецПроцедуры

Процедура ОрганизацияОтправительОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ОбработатьОкончаниеВводаТекста(
		Текст, Значение, СтандартнаяОбработка, ЭлементыФормы.ОрганизацияОтправитель.СписокВыбора);
	
КонецПроцедуры

Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ДокументОснование.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоПартиям.Количество() > 0 Тогда
		
		Ответ = Вопрос("Заполнить документ данными из документа-основания?
			           |Перед заполнением табличные части будут очищены.
		               |Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
					   
		Если НЕ (Ответ = КодВозвратаДиалога.Да) Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеПоПартиям.Очистить();
		ДанныеПоСФ.Очистить();
			
	КонецЕсли;

	ЗаполнитьПоОснованию(ДокументОснование);
	
КонецПроцедуры

///////////////////////////////////////////////////////
//ОБРАБОТКА СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ - ТЧ ДАННЫЕ ПО ПАРТИЯМ
///////////////////////////////////////////////////////

Процедура ДанныеПоПартиямНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.Отбор.Услуга.ВидСравнения  = ВидСравнения.Равно;
	ФормаВыбора.Отбор.Услуга.Значение      = Ложь;
	ФормаВыбора.Отбор.Услуга.Использование = Истина;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;
	ФормаВыбора.Открыть();

КонецПроцедуры

Процедура ДанныеПоПартиямСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ДанныеПоПартиям.ТекущаяСтрока;
	ТекущаяСтрока.СуммаНУ = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаПР - ТекущаяСтрока.СуммаВР;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "ДанныеПоПартиям", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	КолонкиПартий				= ЭлементыФормы.ДанныеПоПартиям.Колонки;
	КолонкиСФ					= ЭлементыФормы.ДанныеПоСФ.Колонки;
	
	КолонкиПартий.СуммаНУ.Видимость = НЕ мУСН;
	КолонкиПартий.СуммаПР.Видимость = мПоддержкаПБУ18 и НЕ мУСН;
	КолонкиПартий.СуммаВР.Видимость = мПоддержкаПБУ18 и НЕ мУСН;
	//управление изменением видимости
	КолонкиПартий.СуммаНУ.ИзменятьВидимость = НЕ мУСН;
	КолонкиПартий.СуммаПР.ИзменятьВидимость = мПоддержкаПБУ18 и НЕ мУСН;
	КолонкиПартий.СуммаВР.ИзменятьВидимость = мПоддержкаПБУ18 и НЕ мУСН;
	
	Если (НЕ мОценкаМПЗПоСредней)
		ИЛИ (мСложныйУчетНДС И НЕ мУпрощенныйУчетНДС) Тогда
		КолонкиПартий.ДокументПартии.Видимость	= Истина;
		//управление изменением видимости
		КолонкиПартий.ДокументПартии.ИзменятьВидимость	= Истина;
	Иначе
		КолонкиПартий.ДокументПартии.Видимость	= Ложь;
		//управление изменением видимости
		КолонкиПартий.ДокументПартии.ИзменятьВидимость	= Ложь;
	КонецЕсли;
	
	КолонкиПартий.СчетУчета.Видимость = ПоказыватьВДокументахСчетаУчета;
	
КонецПроцедуры // УстановитьВидимость()

///////////////////////////////////////////////////////////////////////////////
// Обработчики сплиттованной таблицы

Процедура УстановитьВидимостьТЧДанныеПоСФ(Отказ = Ложь)
	
	ВидимостьПанелиПоВертикали = Ложь;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Если НЕ мУпрощенныйУчетНДС И НЕ мУСН Тогда
			ВидимостьПанелиПоВертикали = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ВидимостьПанелиПоВертикали Тогда
		Если ДанныеПоСФ.Количество() <> 0 Тогда
			Ответ = Вопрос("Табличная часть ""Данные по счетам-фактурам"" будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ДанныеПоСФ.Очистить();
			Иначе
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	мПанель = ЭлементыФормы.ПанельСФ;
	Если мПанель.Свертка = РежимСверткиЭлементаУправления.Нет И НЕ ВидимостьПанелиПоВертикали 
		ИЛИ мПанель.Свертка <> РежимСверткиЭлементаУправления.Нет И ВидимостьПанелиПоВертикали Тогда
		ИзменитьВидимостьПанелиПоВертикали(ЭтаФорма, ВидимостьПанелиПоВертикали, "ПанельПартии", "СФ");
	КонецЕсли;
		
КонецПроцедуры

Процедура ИзменитьВидимостьПанелиПоВертикали(Форма, ОтображатьПанель, ИмяОсновнойПанели, ПостфиксЭлементов)
	
	Перем Элемент, Граница, Пусто;
	
	ОсновнаяПанель	= Форма.ЭлементыФормы[ИмяОсновнойПанели];
	мПанель			= Форма.ЭлементыФормы["Панель" + ПостфиксЭлементов];
	Разделитель		= Форма.ЭлементыФормы["Разделитель" + ПостфиксЭлементов];
	
	Если ОтображатьПанель Тогда
		Если мПанель.Свертка = РежимСверткиЭлементаУправления.Низ Тогда
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Верх);
			мПанель.Свертка = РежимСверткиЭлементаУправления.Нет;
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
			мПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
		КонецЕсли;
	Иначе
		Если мПанель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			мПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, мПанель, ГраницаЭлементаУправления.Верх);
			мПанель.Свертка = РежимСверткиЭлементаУправления.Низ;
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Низ;
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Верх);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПоСФПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	ТекСтрока = ЭлементыФормы.ДанныеПоПартиям.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПоСФПослеУдаления(Элемент)
	
	мПеренумеровать = 2;
	
КонецПроцедуры

Процедура ДанныеПоСФПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		РассчитатьНомерТЧ(Элемент);
		ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.Ключ = ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.Ключ.Значение;
	КонецЕсли; 
		
КонецПроцедуры

Процедура ДанныеПоСФПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если мПеренумеровать = 0 Тогда
		мПеренумеровать = 3;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПоСФПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Перенумеровать(Элемент);
	
КонецПроцедуры

Процедура Перенумеровать(Элемент)
	
	Если Элемент.Имя = "ДанныеПоПартиям" Тогда
		Возврат;
	КонецЕсли;
	
	//мПеренумеровать = 0 - ничего не требуется делать
	//мПеренумеровать = 1 - второй вызов процедуры - требуется перенумеровать ТЧ
	//мПеренумеровать = 2 - первый вызов процедуры - ничего не делаем, устанавливаем параметр второго вызова
	//мПеренумеровать = 3 - значение только для проверки при выводе строк
	
	Если мПеренумеровать = 3 Тогда
		ТабличнаяЧасть = ЭтаФорма[Элемент.Данные];
		РасчетныйНомерСтроки = 0;
		Для Каждого СтрокаТаблицы ИЗ ТабличнаяЧасть Цикл
			Если Элемент.ПроверитьСтроку(СтрокаТаблицы) Тогда
				РасчетныйНомерСтроки = РасчетныйНомерСтроки + 1;
				Если СтрокаТаблицы.НомерСтрокиТЧ <> РасчетныйНомерСтроки 
					И СтрокаТаблицы.НомерСтрокиТЧ <> 0 Тогда
					мПеренумеровать = 1;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если мПеренумеровать <> 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если мПеренумеровать = 1 Тогда
		ТабличнаяЧасть = ЭтаФорма[Элемент.Данные];
		РасчетныйНомерСтроки = 0;
		Для Каждого СтрокаТаблицы ИЗ ТабличнаяЧасть Цикл
			Если Элемент.ПроверитьСтроку(СтрокаТаблицы) Тогда
				РасчетныйНомерСтроки = РасчетныйНомерСтроки + 1;
				СтрокаТаблицы.НомерСтрокиТЧ = РасчетныйНомерСтроки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если мПеренумеровать > 0 Тогда
		мПеренумеровать = мПеренумеровать - 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьНомерТЧ(ТекущаяТаблица)
	
	мПеренумеровать = 0;
	
	ТабличнаяЧасть = ЭтаФорма[ТекущаяТаблица.Данные];
	РасчетныйНомерСтроки = 0;
	Для Каждого СтрокаТаблицы ИЗ ТабличнаяЧасть Цикл
		Если ТекущаяТаблица.ПроверитьСтроку(СтрокаТаблицы) Тогда
			РасчетныйНомерСтроки = РасчетныйНомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТекущаяТаблица.ТекущиеДанные.НомерСтрокиТЧ = РасчетныйНомерСтроки;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики основной таблицы

// Процедура вызывается по кнопке при изменении активной строки в таблице косвенных 
// расходов, а также при переходе на закладку "Косвенные расходы".
Процедура ОтобразитьСчетаФактуры(ТекСтрока = Неопределено)
	
	Если ТекСтрока = Неопределено и не ЭлементыФормы.ДанныеПоПартиям.ТекущаяСтрока = Неопределено Тогда
		ТекСтрока = ЭлементыФормы.ДанныеПоПартиям.ТекущиеДанные;
	КонецЕсли; 

	Если ТекСтрока <> Неопределено Тогда
		ЭлементыФормы.ДанныеПоСФ.ТолькоПросмотр = Ложь;
	Иначе
		ЭлементыФормы.ДанныеПоСФ.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Отбор = ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.Ключ;
	
	Если ЭлементыФормы.ДанныеПоПартиям.ТекущиеДанные <> Неопределено Тогда
		Отбор.Значение = ЭлементыФормы.ДанныеПоПартиям.ТекущиеДанные.Ключ;
		Отбор.Использование = Истина;
		
		ЭлементыФормы.РамкаГруппыДанныеПоСФ.Заголовок = "Данные по счетам-фактурам полученным по номенклатуре """ + ЭлементыФормы.ДанныеПоПартиям.ТекущиеДанные.Номенклатура + """";
		
	Иначе
		Отбор.Значение = 0;
		Отбор.Использование = Истина;
		
		ЭлементыФормы.РамкаГруппыДанныеПоСФ.Заголовок = "Данные по счетам-фактурам";
	КонецЕсли;

КонецПроцедуры // ОтобразитьСчетаФактуры()

Процедура ДанныеПоПартиямПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДанныеПоПартиям.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ОтобразитьСчетаФактуры();
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоПартиямПередУдалением(Элемент, Отказ)
	
	// Необходимо очистить дополнительные сведения
	КлючПоиска = Новый Структура("Ключ" , ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.Ключ.Значение);
	
	НайденныеСтроки = ДанныеПоСФ.НайтиСтроки(КлючПоиска);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		ДанныеПоСФ.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоПартиямПослеУдаления(Элемент)
	
	мПеренумеровать = 2;
	ОтобразитьСчетаФактуры();
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоПартиямПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		// Инициализируем значение "Ключ" для установки связи данной таблицы с таблицей 
		// "МПЗПриобретенные".
		// Значение должно быть уникальным в пределах таблицы ДанныеПоПартиям
		НеУстановлено = Истина;
		Кандидат = ДанныеПоПартиям.Количество();
		
		Пока НеУстановлено Цикл
			Если ДанныеПоПартиям.Найти(Кандидат, "Ключ") = Неопределено Тогда
				// Уникальное значение ключа
				ЭлементыФормы.ДанныеПоПартиям.ТекущиеДанные.Ключ = Кандидат;
				НеУстановлено = Ложь;
				
			Иначе
				// Такое значение ключа уже использовано
				Кандидат = Кандидат + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОтобразитьСчетаФактуры();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоПартиямПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если мПеренумеровать = 0 Тогда
		мПеренумеровать = 3;
	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.ДанныеПоПартиям.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

// Процедура - обработчик события "ПриПолученииДанных" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоПартиямПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Перенумеровать(Элемент);
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоПартиямПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОтобразитьСчетаФактуры(Элемент.ТекущиеДанные);
	
КонецПроцедуры

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()
