// Строки, хранят реквизиты имеющие смысл только для бухгалтерского и налогового учетов
// соответственно в случае если документ не отражается в каком-то виде учета,
// делаются невидимыми.
Перем мСтрокаРеквизиты Экспорт; // (Регл)

Перем мСтруктураШапкиДокумента;         // (Общ) Результат запроса по шапке документа

Перем мВалютаРегламентированногоУчета Экспорт;

Перем ТаблицаВзаиморасчетов;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

//// Процедура заполняет структуры именами реквизитов, которые имеют смысл
//// только для определенного вида учета
////

Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизиты = "СчетУчетаРасчетовСКонтрагентом, НадписьСчетУчетаРасчетовСКонтрагентом,
								|СчетУчетаРасчетовПоАвансам, НадписьСчетУчетаРасчетовПоАвансам,
								|Услуги.СчетУчета, Услуги.СчетДоходов, Услуги.СчетРасходов,
								|Услуги.Субконто";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()
							
Процедура ЗаполнитьСубконто(СтрокаТабличнойЧасти)	Экспорт						
	
	Если СтрокаТабличнойЧасти.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
		СтрокаТабличнойЧасти.Субконто = Новый(СтрокаТабличнойЧасти.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
		Если ТипЗнч(СтрокаТабличнойЧасти.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			СтрокаТабличнойЧасти.Субконто = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.Субконто = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет правильность заполнения реквизитов документа
// Также формирует запрос по шапке документа, результат которого
// сохраняется в переменной мСтруктураШапкиДокумента
//
Процедура ПроверкаРеквизитов(Отказ, Заголовок) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	РеквизитыШапки = "Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
					 |СчетУчетаРасчетовСКонтрагентом";//, СчетУчетаРасчетовПоАвансам

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки, "", мСтрокаРеквизиты, "");

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	мСтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, Новый Структура(РеквизитыШапки), мВалютаРегламентированногоУчета);

	СтруктураОбязательныхПолей = Новый Структура(РеквизитыШапки);

	// Зачет авансов
	СтруктураОбязательныхПолей.Вставить("СпособЗачетаАвансов");
	Если (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически)
		ИЛИ (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу) Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, мСтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	РеквизитыУсл = "Номенклатура, Количество, Сумма";
	Если УчитыватьНДС Тогда
		РеквизитыУсл = РеквизитыУсл + ", СтавкаНДС";
	КонецЕсли;

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", Новый Структура(РеквизитыУсл), Отказ, Заголовок);

	Для Каждого СтрокаТЧ Из Услуги Цикл

		Если УчитыватьНДС 
			И СтрокаТЧ.СуммаНДС <> 0
			И Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДСПоРеализации) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Продукция (услуги по переработке)"": ";
			СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС по реализации""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ПроверкаРеквизитов()

Процедура ЗаполнитьСчетаВСтрокеУслуг(СтрокаТЧ, СчетаУчета, Заполнять, МетаданныеДокумента)

	МетаданныеДокумента = Метаданные();

	Если Заполнять = Истина Тогда

		СтрокаТЧ.СчетДоходов  = СчетаУчета.СчетДоходов;
		СтрокаТЧ.СчетРасходов = СчетаУчета.СчетРасходов;
		СтрокаТЧ.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
	ИначеЕсли Заполнять = Ложь Тогда

		СтрокаТЧ.СчетДоходов  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.СчетРасходов = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаВСтрокеУслуг

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, Заполнять) Экспорт

	СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	МетаданныеДока = Метаданные();

	ЗаполнитьСчетаВСтрокеУслуг(СтрокаТЧ, СчетаУчета, Заполнять, МетаданныеДока);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги()

Процедура ЗаполнитьСчетаУчетаВТабЧастиУслуги(Заполнять) Экспорт

	Для каждого СтрокаТЧ Из Услуги Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, Заполнять)
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧастиУслуги()

Процедура ЗаполнитьСчетаУчетаРасчетов(СчетаУчета = неопределено) Экспорт
	
    Если СчетаУчета = неопределено Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	КонецЕсли;
	СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;

КонецПроцедуры // ЗаполнитьСчетаУчетаРасчетов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();
	
	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

Функция ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента)

	ТаблицаМатериалов = РезультатЗапросаПоМатериалам.Выгрузить();

	ТаблицаМатериалов.Колонки.Добавить("ДокументОприходования");
	ТаблицаМатериалов.Колонки.Добавить("Регистратор");
	ТаблицаМатериалов.Колонки.Добавить("Склад");
	ТаблицаМатериалов.Колонки.Добавить("Контрагент");
	ТаблицаМатериалов.Колонки.Добавить("Организация");
	ТаблицаМатериалов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаМатериалов.Колонки.Добавить("Валюта");
	ТаблицаМатериалов.Колонки.Добавить("ВходящийНДС");
	
	ТаблицаМатериалов.Колонки.Добавить("КорСчетСписания");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания2");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания3");
	ТаблицаМатериалов.Колонки.Добавить("ОтражениеВУСН");
	
	
	ТаблицаМатериалов.ЗаполнитьЗначения(ЭтотОбъект,    "Регистратор");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент,         "Контрагент");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,        "Организация");
    ТаблицаМатериалов.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ПустаяСсылка(),    "КорСчетСписания");
	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуТоваров()

// Процедуры и  функции, обслуживающие зачет авансов

Функция ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ТаблицаЗачетаАвансов = ЗачетАвансов.ВыгрузитьКолонки();
	Иначе
		ТаблицаЗачетаАвансов = ЗачетАвансов.Выгрузить();
		ТаблицаЗачетаАвансов.Свернуть("ДокументАванса", "СуммаЗачета");
	КонецЕсли;
	ТаблицаЗачетаАвансов.Колонки.ДокументАванса.Имя = "ДокументРасчетов";
	ТаблицаЗачетаАвансов.Колонки.СуммаЗачета.Имя    = "СуммаВзаиморасчетов";
	
	Возврат ТаблицаЗачетаАвансов;

КонецФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если (ТаблицаЗачетаАвансов.Количество() = 0) Тогда
		
		Если СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли (ТаблицаЗачетаАвансов.Количество() = 1) 
		И (НЕ ЗначениеЗаполнено(ТаблицаЗачетаАвансов[0].ДокументРасчетов)) Тогда
	
		ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		
	Иначе
	
		СтруктураОбязательныхПолей = Новый Структура("ДокументАванса");
    	
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(
			ЭтотОбъект, "ЗачетАвансов", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоМатериалам, ТаблицаЗачетаАвансов, Отказ, Заголовок)

	// Формирование движений регистров
	ДвиженияПоТабличнойЧастиУслуги(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаЗачетаАвансов, Заголовок, Отказ,РежимПроведения);
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоМатериалам, Истина, Ложь, Отказ, ,"Отчет давальцу о списанных в производство материалах");
	ДвиженияПоРегистрамРеглУСН(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	ДвиженияРегистровВыпускаПродукцииУслуг(СтруктураШапкиДокумента, ТаблицаПоУслугам);
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		ДоходыИРасходыПредпринимателя.ОказаниеУслуг(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, ТаблицаПоУслугам, "Субконто", "СчетРасходов");
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Процедура ДвиженияРегистровВыпускаПродукцииУслуг(СтруктураШапкиДокумента, ТаблицаПоУслугам)

	Проводки  = Движения.Хозрасчетный;

	Для каждого СтрокаУслуги Из ТаблицаПоУслугам Цикл

		// Отражение в бухгалтерском регистре выпуска продукции.
		
		Проводка = Проводки.Добавить();

		Проводка.Период       = СтруктураШапкиДокумента.Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		
		Проводка.Сумма        = СтрокаУслуги.СуммаПлановая;
		Проводка.Содержание   = СтрокаУслуги.Содержание;

		Проводка.СчетКт      = СтрокаУслуги.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаУслуги.Номенклатура);
        Проводка.КоличествоКт = СтрокаУслуги.Количество;
		
		Проводка.СчетДт = СтрокаУслуги.СчетРасходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаУслуги.Субконто);

		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
	КонецЦикла;

КонецПроцедуры

// Процедура формирует движения регистров по табличной части Услуги
//
Процедура ДвиженияПоТабличнойЧастиУслуги(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаЗачетаАвансов, Заголовок, Отказ, РежимПроведения)

	ТаблицаВзаиморасчетов = Новый ТаблицаЗначений;
	
	Если ТаблицаПоУслугам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФормированиеПроводокПоОтражениюВыручкиИНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаЗачетаАвансов, Отказ, Заголовок, РежимПроведения);
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаВзаиморасчетов, Отказ);
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиУслуги()

// Процедура формирует движения регистров по табличной части Услуги
//
Процедура ФормированиеПроводокПоОтражениюВыручкиИНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаЗачетаАвансов, Отказ, Заголовок, РежимПроведения)

	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	ДатаДока       = Дата;

	//Фиксация выручки и НДС (проводки)

	Проводки  = Движения.Хозрасчетный;

	ТаблицыДокумента = Новый Структура("ТаблицаПоУслугам", ТаблицаПоУслугам);
	ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
		СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, Истина, Отказ, Заголовок);
	
	ВидыСубконтоСчетов = Новый Соответствие; // кэш видов субконто
	ПоддержкаПБУ18 = СтруктураШапкиДокумента.ПрименениеПБУ18;
	
	Выручка = ТаблицаПоУслугам.Скопировать();
	Выручка.Свернуть("СчетДоходов, Субконто, СтавкаНДС, Содержание,Номенклатура",
		"Сумма, СуммаБУ, СуммаНУ, СуммаВал, НДС, НДСВал,Количество");

	Для каждого СтрокаТаблицы из Выручка Цикл

		// Выручка
		Если СтрокаТаблицы.СуммаБУ = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Проводки.Добавить();

		Проводка.Период       = ДатаДока;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		
		Проводка.Сумма        = СтрокаТаблицы.СуммаБУ;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;

		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;

		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетДоходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.Субконто);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СтавкаНДС);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РеализуемыеАктивы", СтрокаТаблицы.Номенклатура);
		
		Если Проводка.СчетКт.Количественный Тогда
			Проводка.КоличествоКт = СтрокаТаблицы.Количество;  
		КонецЕсли;
					
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
			СуммаНУДт = СтрокаТаблицы.СуммаНУ + СтрокаТаблицы.НДС;
			СуммаНУКт = СтрокаТаблицы.СуммаНУ;
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
				СуммаНУДт, СуммаНУКт, Проводка.Сумма - СуммаНУДт, Проводка.Сумма - СуммаНУДт, , , 
				Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
			
		КонецЕсли;
		
		// НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда

			Проводка = Проводки.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			Проводка.Сумма       = СтрокаТаблицы.НДС;
			Проводка.Содержание		= СтрокаТаблицы.Содержание;

			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Продажи_НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет",Перечисления.ВидыПлатежейВГосБюджет.Налог);

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
		КонецЕсли;

	КонецЦикла;

	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);

КонецПроцедуры // ФормированиеПроводокПоОтражениюВыручкиИНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки,ТаблицаВзаиморасчетов, Отказ)
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС ИЛИ
		(ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) 
		И СтруктураШапкиДокумента.УчитыватьНДС) Тогда
		ТаблицаВыручки.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги, "ВидЦенности");
	КонецЕсли;

	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда

		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СчетОтнесенияНДС = ПланыСчетов.Хозрасчетный.НДС;
			
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ,СчетОтнесенияНДС);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета УСН
Процедура ДвиженияПоРегистрамРеглУСН(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, Новый Структура("ТаблицаРасчетов", ТаблицаВзаиморасчетов));
	
КонецПроцедуры

 #Если Клиент Тогда 
	 
// Функция формирует табличный документ с печатной формой акта об
// оказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг(НазваниеДокумента)

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаТаблицыСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Получатель,
	|	Организация КАК Поставщик,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст = 
	"ВЫБРАТЬ
	|	РеализацияУслугПоПереработке.Содержание КАК Товар,
	|	СУММА(РеализацияУслугПоПереработке.Количество) КАК Количество,
	|	РеализацияУслугПоПереработке.Цена,
	|	СУММА(РеализацияУслугПоПереработке.Сумма) КАК Сумма,
	|	РеализацияУслугПоПереработке.СтавкаНДС,
	|	СУММА(РеализацияУслугПоПереработке.СуммаНДС) КАК СуммаНДС,
	|	МИНИМУМ(РеализацияУслугПоПереработке.НомерСтроки) КАК НомерСтроки,
	|	РеализацияУслугПоПереработке.КодАртикул КАК КодАртикул
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫРАЗИТЬ(РеализацияУслугПоПереработкеУслуги.Содержание КАК СТРОКА(1000)) КАК Содержание,
	|		РеализацияУслугПоПереработкеУслуги.Количество КАК Количество,
	|		РеализацияУслугПоПереработкеУслуги.Цена КАК Цена,
	|		РеализацияУслугПоПереработкеУслуги.Сумма КАК Сумма,
	|		РеализацияУслугПоПереработкеУслуги.СтавкаНДС КАК СтавкаНДС,
	|		РеализацияУслугПоПереработкеУслуги.СуммаНДС КАК СуммаНДС,
	|		РеализацияУслугПоПереработкеУслуги.НомерСтроки КАК НомерСтроки,
	|		РеализацияУслугПоПереработкеУслуги.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул
	|	ИЗ
	|		Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработкеУслуги
	|	ГДЕ
	|		РеализацияУслугПоПереработкеУслуги.Ссылка = &ТекущийДокумент) КАК РеализацияУслугПоПереработке
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияУслугПоПереработке.Содержание,
	|	РеализацияУслугПоПереработке.СтавкаНДС,
	|	РеализацияУслугПоПереработке.Цена,
	|	РеализацияУслугПоПереработке.КодАртикул
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияУслугПоПереработке_Акт";
	Макет       = ПолучитьМакет("Акт");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	НазваниеДокумента = "Акт оказания услуг по переработке ";
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Акт");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);


	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);

	НомерСтроки = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл	

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		ОбластьМакета.Параметры.Товар       = СокрЛП(СтрокаТабличнойЧасти.Товар);

		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	Если ТаблицаУслуги <> Неопределено Тогда

		Сумма    = ТаблицаУслуги.Итог("Сумма");
		СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");

	Иначе

		Сумма    = 0;
		СуммаНДС = 0;

	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	Если Шапка.УчитыватьНДС Тогда

		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЕсли;

	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
	                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

// Функция формирует табличный документ с печатной формой отчета о
// продукции, произведенной из давальческого сырья и переданной давальцу
//
// Возвращаемое значение:
//  Табличный документ - печатная форма отчета
//
Функция ПечатьОтчета(ТабЧасть, НазваниеДокумента)

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ПостфиксШапки  = "СКодом";
		ПостфиксСтроки = "СКодом";
	Иначе
		ПостфиксШапки  = "";
		ПостфиксСтроки = "";
	КонецЕсли;
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Получатель,
	|	Организация КАК Поставщик,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПродукция = Новый Запрос;
	ЗапросПродукция.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПродукция.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура КАК Товар,
	|	Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|   Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения";
	Если ТабЧасть = "Услуги" Тогда
		ЗапросПродукция.Текст = ЗапросПродукция.Текст + "
		|	,
		|	Цена,
		|	Сумма";
	КонецЕсли;
	ЗапросПродукция.Текст = ЗапросПродукция.Текст + "
	
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке." + ТабЧасть + " КАК РеализацияУслугПоПереработке
	|
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ТекущийДокумент
	|";
	ТаблицаПродукция = ЗапросПродукция.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияУслугПоПереработке_Отчет_о_" + ТабЧасть;
	Макет       = ПолучитьМакет("Акт");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	НазваниеДокумента = "Отчет о " + ?(ТабЧасть = "Услуги", "продукции, произведенной из сырья заказчика", "переработанном сырье ");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Отчет о " + ?(ТабЧасть = "Услуги", "продукции, произведенной из сырья заказчика", "переработанном сырье "));	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);


	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы" + ТабЧасть + ПостфиксШапки);
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка" + ТабЧасть + ПостфиксСтроки);
	
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТаблицаПродукция Цикл	

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;


		ТабДокумент.Вывести(ОбластьСтроки);

	КонецЦикла;

		Сумма    = 0;

	Если ТабЧасть = "Услуги" Тогда
		Если ТаблицаПродукция <> Неопределено Тогда
			
			Сумма    = ТаблицаПродукция.Итог("Сумма");
		КонецЕсли;

		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьМакета);
		
		СуммаКПрописи = Сумма;
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего продукции " + НомерСтроки
		+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если ТабЧасть = "МатериалыЗаказчика" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоМатериалы");
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи" + ТабЧасть);
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;

КонецФункции // ПечатьОтчетаОпродукции()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	НазваниеДокумента = "";
	Если ИмяМакета = "Акт" Тогда
		
		ТабДокумент = ПечатьАктаОбОказанииУслуг(НазваниеДокумента);
		
	ИначеЕсли ИмяМакета = "Продукция" Тогда
		
		ТабДокумент = ПечатьОтчета("Услуги", НазваниеДокумента);
		
	ИначеЕсли ИмяМакета = "Материалы" Тогда
		
		ТабДокумент = ПечатьОтчета("МатериалыЗаказчика", НазваниеДокумента);
		
	ИначеЕсли ИмяМакета = "СправкаРасчетВал" Тогда
		
		// Справка-расчет формирования рублевой суммы документа в валюте
		БухгалтерскийУчетРасчетовСКонтрагентами.НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(Ссылка);
		Возврат;
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НазваниеДокумента), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Акт, Продукция, Материалы, СправкаРасчетВал", "Акт об оказании услуг", "Отчет о продукции", "Отчет о материалах", "Справка-расчет ""Рублевая сумма документа в валюте""");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");

	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный");

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ПроверкаРеквизитов(Отказ, Заголовок);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов"	, "Организация"          , "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов"	, "ВидДоговора"          , "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Контрагент"			, "Организация"          , "ДоговорОрганизация");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ХозрасчетныйВидыСубконто.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|ГДЕ
		|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
		|	И ХозрасчетныйВидыСубконто.НомерСтроки = 1";
		
		СчетаСНоменклатурнымиГруппами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		СтруктураШапкиДокумента.Вставить("СчетаСНоменклатурнымиГруппами", СчетаСНоменклатурнымиГруппами);
	КонецЕсли;
	// }УчетДоходовИРасходовИП

	// Подготовим таблицу услуг для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"          , "Количество");
	СтруктураПолей.Вставить("Сумма"               , "Сумма");
	СтруктураПолей.Вставить("СуммаПлановая"       , "СуммаПлановая");
	СтруктураПолей.Вставить("Цена"                , "Цена");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                 , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"         , "НомерСтроки");
	СтруктураПолей.Вставить("СчетРасходов"        , "СчетРасходов");
	СтруктураПолей.Вставить("СчетДоходов"         , "СчетДоходов");
	СтруктураПолей.Вставить("СчетУчета"           , "СчетУчета");
	СтруктураПолей.Вставить("Субконто"            , "Субконто");
	СтруктураПолей.Вставить("Содержание"          , "Содержание");
	
	РезультатЗапросаПоУслугам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	// Подготовим таблицу услуг для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		
		Для каждого СтрокаТЧ Из ТаблицаПоУслугам Цикл
			
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Продукция (услуги по переработке)"": ";
			
			Если НЕ СтруктураШапкиДокумента.СчетаСНоменклатурнымиГруппами.Найти(СтрокаТЧ.СчетДоходов) = Неопределено 
				И НЕ ЗначениеЗаполнено(СтрокаТЧ.Субконто) 
				Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Субконто""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	// Зачет авансов
	ТаблицаЗачетаАвансов = ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок);

	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
		СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента, Отказ, Заголовок);

	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(
		ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);
										 
	// Подготовим таблицу материалам для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("НомерСтроки" , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("СчетУчета"   , "СчетУчета");
	
	РезультатЗапросаПоМатериалам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "МатериалыЗаказчика", СтруктураПолей);
	
	// Подготовим таблицу услуг для проведения.
	ТаблицаПоМатериалам = ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);

	// Движения по документу
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(
			РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоУслугам, ТаблицаПоМатериалам, ТаблицаЗачетаАвансов, 
			Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаЗаполнения(Основание)
	
#Если Клиент Тогда
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
	  Если Основание.МатериалыЗаказчика.Количество() = 0  Тогда
		  Сообщить("Требование накладная №" + основание.Номер + " не отражает перемещение давальческого сырья в производство");
		  Отказ = Истина;
	  КонецЕсли;
	  
	  
	  // Заполним реквизиты шапки по документу основанию.
	  Организация     = Основание.Организация;
	  Контрагент               = Основание.Контрагент;
	  
	  Для Каждого СтрокаОснование Из Основание.МатериалыЗаказчика Цикл
		  
		  Строка = МатериалыЗаказчика.Добавить();	
		  Строка.Номенклатура  =  СтрокаОснование.Номенклатура;
		  Строка.СчетУчета     =  СтрокаОснование.Счет;
		  Строка.Количество	   =  СтрокаОснование.Количество;
		  
	  КонецЦикла;
	  
	КонецЕсли;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
	  
	  // Заполним реквизиты шапки по документу основанию.
	  Организация     = Основание.Организация;
	  Для Каждого СтрокаОснование Из Основание.Продукция Цикл
		  
		  
		  СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаОснование.Номенклатура, Основание.Склад);
		  Строка = Услуги.Добавить();	
		  Строка.Номенклатура  =  СтрокаОснование.Номенклатура;
		  Строка.Количество	 =  СтрокаОснование.Количество;
		  ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(Строка, ЭтотОбъект);
		  ТипЦенПлановойСебестоимости   = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
		  ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		  
		  // Заполнение цены зависит от розничности операции.
		  ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(Строка, ЭтотОбъект, мВалютаРегламентированногоУчета); 
		  
		  Строка.Спецификация     = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Строка.Номенклатура, Дата);
		  
		  
		  // Рассчитываем реквизиты табличной части.
		  ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(Строка, ЭтотОбъект);
		  ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Строка, ЭтотОбъект);
		  
		  СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, Строка.Номенклатура, Основание.Склад);
		  
		  Строка.СчетДоходов  = СчетаУчета.СчетДоходов;
		  Строка.СчетРасходов = СчетаУчета.СчетРасходов;
		  Строка.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
		  Строка.СчетУчета = СчетаУчета.СчетУчета;
		  
		  Строка.ПлановаяСтоимость = СтрокаОснование.ПлановаяСтоимость;
		  Строка.СуммаПлановая = СтрокаОснование.СуммаПлановая;
		  ЗаполнитьСубконто(Строка);

		  
	  КонецЦикла;
	  
	КонецЕсли;
#КонецЕсли 

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураВыданный", Ложь);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

