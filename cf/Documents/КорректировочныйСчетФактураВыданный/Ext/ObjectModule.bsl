Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция СобратьДанныеПоРеализацияТоваровУслуг(Основание)

	Запрос = Новый Запрос;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		Запрос.УстановитьПараметр("ДокументОснование", Основание.ДокументОтгрузки);
	Иначе
		Запрос.УстановитьПараметр("ДокументОснование", Основание);
	КонецЕсли;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК НомерТабЧасти,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА РеализацияТоваровУслугТовары.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК НаименованиеНоменклатуры,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ЕСТЬNULL(РеализацияТоваровУслугТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.Количество КАК КоличествоДоИзменения,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА РеализацияТоваровУслугТовары.Количество <> 0
	|						ТОГДА ВЫРАЗИТЬ((РеализацияТоваровУслугТовары.Сумма - РеализацияТоваровУслугТовары.СуммаНДС) / РеализацияТоваровУслугТовары.Количество КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Цена
	|	КОНЕЦ КАК ЦенаДоИзменения,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугТовары.Сумма - РеализацияТоваровУслугТовары.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма
	|	КОНЕЦ КАК СтоимостьБезНДСДоИзменения,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугТовары.Сумма
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма + РеализацияТоваровУслугТовары.СуммаНДС
	|	КОНЕЦ КАК СтоимостьСНДСДоИзменения
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	РеализацияТоваровУслугУслуги.НомерСтроки,
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Содержание КАК СТРОКА(1000))) = """"
	|			ТОГДА РеализацияТоваровУслугУслуги.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Содержание КАК СТРОКА(1000))
	|	КОНЕЦ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияТоваровУслугУслуги.Количество,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА РеализацияТоваровУслугУслуги.Количество <> 0
	|						ТОГДА ВЫРАЗИТЬ((РеализацияТоваровУслугУслуги.Сумма - РеализацияТоваровУслугУслуги.СуммаНДС) / РеализацияТоваровУслугУслуги.Количество КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Цена
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугУслуги.Сумма - РеализацияТоваровУслугУслуги.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Сумма
	|	КОНЕЦ,
	|	РеализацияТоваровУслугУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугУслуги.СуммаНДС,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугУслуги.Сумма
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Сумма + РеализацияТоваровУслугУслуги.СуммаНДС
	|	КОНЕЦ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	РеализацияТоваровУслугАгентскиеУслуги.НомерСтроки,
	|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(РеализацияТоваровУслугАгентскиеУслуги.Содержание КАК СТРОКА(1000))) = """"
	|			ТОГДА РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслугАгентскиеУслуги.Содержание КАК СТРОКА(1000))
	|	КОНЕЦ,
	|	ИСТИНА,
	|	ИСТИНА,
	|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияТоваровУслугАгентскиеУслуги.Количество,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА РеализацияТоваровУслугАгентскиеУслуги.Количество <> 0
	|						ТОГДА ВЫРАЗИТЬ((РеализацияТоваровУслугАгентскиеУслуги.Сумма - РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС) / РеализацияТоваровУслугАгентскиеУслуги.Количество КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Цена
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугАгентскиеУслуги.Сумма - РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Сумма
	|	КОНЕЦ,
	|	РеализацияТоваровУслугАгентскиеУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугАгентскиеУслуги.Сумма
	|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Сумма + РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС
	|	КОНЕЦ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
	|ГДЕ
	|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабЧасти,
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура РассчитатьРазницыБезНДС(ТекДанные) Экспорт

	Если ТекДанные.СтоимостьБезНДСДоИзменения > ТекДанные.СтоимостьБезНДСПослеИзменения Тогда
		ТекДанные.РазницаБезНДСКУменьшению = ТекДанные.СтоимостьБезНДСДоИзменения - ТекДанные.СтоимостьБезНДСПослеИзменения;
		ТекДанные.РазницаБезНДСКДоплате    = 0;
	Иначе
		ТекДанные.РазницаБезНДСКУменьшению = 0;
		ТекДанные.РазницаБезНДСКДоплате    = ТекДанные.СтоимостьБезНДСПослеИзменения - ТекДанные.СтоимостьБезНДСДоИзменения;
	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьРазницыНДС(ТекДанные) Экспорт

	Если ТекДанные.СуммаНДСДоИзменения > ТекДанные.СуммаНДСПослеИзменения Тогда
		ТекДанные.РазницаНДСКУменьшению = ТекДанные.СуммаНДСДоИзменения - ТекДанные.СуммаНДСПослеИзменения;
		ТекДанные.РазницаНДСКДоплате    = 0;
	Иначе
		ТекДанные.РазницаНДСКУменьшению = 0;
		ТекДанные.РазницаНДСКДоплате    = ТекДанные.СуммаНДСПослеИзменения - ТекДанные.СуммаНДСДоИзменения;
	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьРазницыСНДС(ТекДанные) Экспорт

	Если ТекДанные.СтоимостьСНДСДоИзменения > ТекДанные.СтоимостьСНДСПослеИзменения Тогда
		ТекДанные.РазницаСНДСКУменьшению = ТекДанные.СтоимостьСНДСДоИзменения - ТекДанные.СтоимостьСНДСПослеИзменения;
		ТекДанные.РазницаСНДСКДоплате    = 0;
	Иначе
		ТекДанные.РазницаСНДСКУменьшению = 0;
		ТекДанные.РазницаСНДСКДоплате    = ТекДанные.СтоимостьСНДСПослеИзменения - ТекДанные.СтоимостьСНДСДоИзменения;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТоварыИУслугиПоСчетуФактуре(Основание) Экспорт

	ТаблицаТоварыИУслуги = ТоварыИУслуги.ВыгрузитьКолонки();
	ТаблицаТоварыИУслуги.Колонки.Добавить("ЭтоУслуга",   Новый ОписаниеТипов("Булево"));
	ТаблицаТоварыИУслуги.Колонки.Добавить("ЭтоКомиссия", Новый ОписаниеТипов("Булево"));
	ТаблицаТоварыИУслуги.Колонки.Добавить("СчетУчета",   Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Для каждого СтрокаОснования Из Основание.ДокументыОснования Цикл
	
		Если ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ТаблицаДокумента = СобратьДанныеПоРеализацияТоваровУслуг(СтрокаОснования.ДокументОснование);
		ИначеЕсли ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			ТаблицаДокумента = СобратьДанныеПоРеализацияТоваровУслуг(СтрокаОснования.ДокументОснование);
		Иначе
			ТаблицаДокумента = Новый ТаблицаЗначений;
		КонецЕсли;
		
		Для каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			НоваяСтрока = ТаблицаТоварыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
	
	КонецЦикла;
	
	ТаблицаТоварыИУслуги.ЗагрузитьКолонку(
		ТаблицаТоварыИУслуги.ВыгрузитьКолонку("КоличествоДоИзменения"), "КоличествоПослеИзменения");
	ТаблицаТоварыИУслуги.ЗагрузитьКолонку(
		ТаблицаТоварыИУслуги.ВыгрузитьКолонку("ЦенаДоИзменения"), "ЦенаПослеИзменения");
	ТаблицаТоварыИУслуги.ЗагрузитьКолонку(
		ТаблицаТоварыИУслуги.ВыгрузитьКолонку("СтоимостьБезНДСДоИзменения"), "СтоимостьБезНДСПослеИзменения");
	ТаблицаТоварыИУслуги.ЗагрузитьКолонку(
		ТаблицаТоварыИУслуги.ВыгрузитьКолонку("СуммаНДСДоИзменения"), "СуммаНДСПослеИзменения");
	ТаблицаТоварыИУслуги.ЗагрузитьКолонку(
		ТаблицаТоварыИУслуги.ВыгрузитьКолонку("СтоимостьСНДСДоИзменения"), "СтоимостьСНДСПослеИзменения");
		
	ВидыЦенностейПоСчетамУчета = Новый Соответствие;
	Для каждого СтрокаТаблицы Из ТаблицаТоварыИУслуги Цикл
		
		Если СтрокаТаблицы.ЭтоКомиссия Тогда
			СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ТоварыУслугиКомитентов;
		Иначе
			СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(
				СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СчетУчета, , , , , СтрокаТаблицы.ЭтоУслуга, ВидыЦенностейПоСчетамУчета);
		КонецЕсли;
		РассчитатьРазницыБезНДС(СтрокаТаблицы);
		РассчитатьРазницыНДС(СтрокаТаблицы);
		РассчитатьРазницыСНДС(СтрокаТаблицы);
	
	КонецЦикла;
	
	ТоварыИУслуги.Загрузить(ТаблицаТоварыИУслуги);
	РассчитатьИтоговыеСуммыДокумента();
	УстановитьНДСПредъявленКВычету();

КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) <> Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ Основание.ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.НаРеализацию Тогда
		ТекстСообщения = "Корректировочный счет-фактура вводится на основании документа ""Счет-фактура выданный"" с видом ""На реализацию"".";
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание,
		"Организация, Контрагент, ДоговорКонтрагента");
	Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		ТекстСообщения = "Корректировочный счет-фактура вводится по договорам в рублях.";
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	СчетФактура        = Основание;
	ВалютаДокумента    = мВалютаРегламентированногоУчета;
			
	ЗаполнитьТоварыИУслугиПоСчетуФактуре(Основание);
	
КонецПроцедуры	

Процедура РассчитатьИтоговыеСуммыДокумента() Экспорт
	
	РазницаСНДСКУменьшению = ТоварыИУслуги.Итог("РазницаСНДСКУменьшению");
	РазницаСНДСКДоплате    = ТоварыИУслуги.Итог("РазницаСНДСКДоплате");
	РазницаНДСКУменьшению  = ТоварыИУслуги.Итог("РазницаНДСКУменьшению");
	РазницаНДСКДоплате     = ТоварыИУслуги.Итог("РазницаНДСКДоплате");
	
КонецПроцедуры

Процедура УстановитьНДСПредъявленКВычету() Экспорт

	НДСПредъявленКВычету = (РазницаСНДСКУменьшению > 0);
	
КонецПроцедуры


Функция ПолучитьРеквизитыСчетаФактуры(Знач Организация, Знач Контрагент, Знач ТекущееОснование) Экспорт
	
	Перем ПодразделениеОтветственныхЛиц;
	
	Реквизиты = Новый Структура;
	
	Поставщик  = Организация;
	Покупатель = Контрагент;
	
	Если ЗначениеЗаполнено(ТекущееОснование) Тогда
	
		Если ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			ТекущееОснование = ТекущееОснование.ДокументОтгрузки;
		КонецЕсли;	
		
		МетаданныеОснования = ТекущееОснование.Метаданные();
		
		// {ОбособленныеПодразделения
		Если МетаданныеОснования.Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено Тогда 
			ПодразделениеОтветственныхЛиц = ТекущееОснование.ПодразделениеОрганизации;
		Иначе
			ПодразделениеОтветственныхЛиц = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();			
		КонецЕсли;
       	// }ОбособленныеПодразделения
              		
	КонецЕсли;
	
	// {ОбособленныеПодразделения
	Если ОбщегоНазначения.ЭтоОбособленноеПодразделение(Поставщик) Тогда 
		Поставщик = ОбщегоНазначения.ГоловнаяОрганизация(Поставщик);
	КонецЕсли;
   	// }ОбособленныеПодразделения
		
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Организация, Дата, ПодразделениеОтветственныхЛиц);
		
	// Получение контактной информации
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Покупатель, Дата);
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Поставщик, Дата);
	
	// Формирование строковых реквизитов счета-фактуры
	
	Реквизиты.Вставить("НаименованиеПродавца", СведенияОПоставщике.НаименованиеДляПечатныхФорм);
	Реквизиты.Вставить("АдресПродавца",        СведенияОПоставщике.ЮридическийАдрес);
	Реквизиты.Вставить("ИННПродавца",          СведенияОПоставщике.ИНН);
	Реквизиты.Вставить("КПППродавца",          СведенияОПоставщике.КПП);
	
	// {ОбособленныеПодразделения
	Если ЗначениеЗаполнено(ПодразделениеОтветственныхЛиц) 
		И ПодразделениеОтветственныхЛиц.ОбособленноеПодразделение Тогда
		Реквизиты.Вставить("КПППродавца", ПодразделениеОтветственныхЛиц.КПП);
	ИначеЕсли ОбщегоНазначения.ЭтоОбособленноеПодразделение(Организация) Тогда
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
		Реквизиты.Вставить("КПППродавца", СведенияОбОрганизации.КПП);
	КонецЕсли;
	// }ОбособленныеПодразделения 
	
	Реквизиты.Вставить("НаименованиеПокупателя", СведенияОПокупателе.НаименованиеДляПечатныхФорм);
	Реквизиты.Вставить("АдресПокупателя",        СведенияОПокупателе.ЮридическийАдрес);
	Реквизиты.Вставить("ИННПокупателя",          СведенияОПокупателе.ИНН);
	Реквизиты.Вставить("КПППокупателя",          СведенияОПокупателе.КПП);
	
	Реквизиты.Вставить("ФИОРуководителя", 	    Руководители.РуководительПредставление);
	Реквизиты.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);
	Реквизиты.Вставить("СвидетельствоИП",       СведенияОПоставщике.Свидетельство);
	
	Возврат Реквизиты;
    	
КонецФункции	
             
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ПЕЧАТНОЙ ФОРМЫ ДОКУМЕНТА

#Если Клиент Тогда
	
Функция ПечатьКорректировочногоСчетаФактуры() Экспорт
	
	ДанныеДляПечати = СобратьДанныеДляПечати();	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировочныйСчетФактура_КорректировочныйСчетФактура";
	Макет = ПолучитьМакет("КорректировочныйСчетФактура");
	
	// Выводим шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим заголовок таблицы
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		
	ТаблицаТовары = ДанныеДляПечати.ТабличнаяЧасть;

	// Выводим строки таблицы
	ОбластьМакета   = Макет.ПолучитьОбласть("Строка");
	НомерСтроки     = 0;
	КоличествоСтрок = ТаблицаТовары.Количество();
	
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаИтого  = Макет.ПолучитьОбласть("Итого");

	Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
		
		Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС              = "Без налога (НДС)";
			ОбластьМакета.Параметры.СуммаНДСДоИзменения    = "Без налога (НДС)";
			ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "Без налога (НДС)";
		КонецЕсли;	
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместиться итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
						
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			КонецЕсли;
			
		КонецЕсли;
				
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	Если КоличествоСтрок > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, , ТабДокумент.ВысотаТаблицы, ).ВместеСоСледующим = Истина;
	КонецЕсли; 
	
	// Выводим итоги и подвал документа
	
	ОбластьМакетаИтого.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакетаИтого);
    	
	ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	// Задаем параметры табличного документа
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;

	ТабДокумент.ВерхнийКолонтитул.Выводить              = Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница     = 2;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабДокумент.ВерхнийКолонтитул.ТекстСправа           = "Лист [&НомерСтраницы]";
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева            = "Корректировочный счет-фактура №" 
		+ ДанныеДляПечати.НомерКорректировки + "от " + ДанныеДляПечати.Дата;
	
	Возврат ТабДокумент;

КонецФункции

Функция СобратьДанныеДляПечати()
	
	// Подготовка данных шапки
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировочныйСчетФактура.Дата КАК Дата,
	|	КорректировочныйСчетФактура.Номер КАК Номер,
	|	КорректировочныйСчетФактура.СчетФактура КАК СчетФактура,
	|	КорректировочныйСчетФактура.СчетФактура.Дата КАК ДатаСчетаФактуры,
	|	КорректировочныйСчетФактура.НаименованиеПродавца КАК НаименованиеПродавца,
	|	КорректировочныйСчетФактура.АдресПродавца КАК АдресПродавца,
	|	КорректировочныйСчетФактура.ИННПродавца КАК ИННПродавца,
	|	КорректировочныйСчетФактура.КПППродавца КАК КПППродавца,
	|	КорректировочныйСчетФактура.НаименованиеПокупателя КАК НаименованиеПокупателя,
	|	КорректировочныйСчетФактура.АдресПокупателя КАК АдресПокупателя,
	|	КорректировочныйСчетФактура.ИННПокупателя КАК ИННПокупателя,
	|	КорректировочныйСчетФактура.КПППокупателя КАК КПППокупателя,
	|	КорректировочныйСчетФактура.ФИОРуководителя КАК ФИОРуководителя,
	|	КорректировочныйСчетФактура.ФИОГлавногоБухгалтера КАК ФИОГлавногоБухгалтера,
	|	КорректировочныйСчетФактура.Организация КАК Организация,
	|	КорректировочныйСчетФактура.СвидетельствоИП КАК СвидетельствоИП,
	|	СУММА(ЕСТЬNULL(ТаблицаТоварыИУслуги.РазницаБезНДСКУменьшению, 0)) КАК РазницаБезНДСКУменьшению,
	|	СУММА(ЕСТЬNULL(ТаблицаТоварыИУслуги.РазницаБезНДСКДоплате, 0)) КАК РазницаБезНДСКДоплате,
	|	СУММА(ЕСТЬNULL(ТаблицаТоварыИУслуги.РазницаНДСКУменьшению, 0)) КАК РазницаНДСКУменьшению,
	|	СУММА(ЕСТЬNULL(ТаблицаТоварыИУслуги.РазницаНДСКДоплате, 0)) КАК РазницаНДСКДоплате,
	|	СУММА(ЕСТЬNULL(ТаблицаТоварыИУслуги.РазницаСНДСКУменьшению, 0)) КАК РазницаСНДСКУменьшению,
	|	СУММА(ЕСТЬNULL(ТаблицаТоварыИУслуги.РазницаСНДСКДоплате, 0)) КАК РазницаСНДСКДоплате
	|ИЗ
	|	Документ.КорректировочныйСчетФактураВыданный КАК КорректировочныйСчетФактура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировочныйСчетФактураВыданный.ТоварыИУслуги КАК ТаблицаТоварыИУслуги
	|		ПО КорректировочныйСчетФактура.Ссылка = ТаблицаТоварыИУслуги.Ссылка
	|ГДЕ
	|	КорректировочныйСчетФактура.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировочныйСчетФактура.Ссылка,
	|	КорректировочныйСчетФактура.Дата,
	|	КорректировочныйСчетФактура.Номер,
	|	КорректировочныйСчетФактура.СчетФактура,
	|	КорректировочныйСчетФактура.СчетФактура.Дата,
	|	КорректировочныйСчетФактура.НаименованиеПродавца,
	|	КорректировочныйСчетФактура.АдресПродавца,
	|	КорректировочныйСчетФактура.ИННПродавца,
	|	КорректировочныйСчетФактура.КПППродавца,
	|	КорректировочныйСчетФактура.НаименованиеПокупателя,
	|	КорректировочныйСчетФактура.АдресПокупателя,
	|	КорректировочныйСчетФактура.ИННПокупателя,
	|	КорректировочныйСчетФактура.КПППокупателя,
	|	КорректировочныйСчетФактура.ФИОРуководителя,
	|	КорректировочныйСчетФактура.ФИОГлавногоБухгалтера,
	|	КорректировочныйСчетФактура.Организация,
	|	КорректировочныйСчетФактура.СвидетельствоИП";

	
	ТаблицаШапки = Запрос.Выполнить().Выгрузить();

	ДанныеДляПечати = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаШапки[0]);
	
	// Дополнительная подготовка данных
	Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(ДанныеДляПечати.Организация) Тогда
		ДанныеДляПечати.Вставить("ФИОПБОЮЛ", ДанныеДляПечати.ФИОРуководителя);
		ДанныеДляПечати.ФИОРуководителя = "";
	Иначе
		ДанныеДляПечати.СвидетельствоИП = "";
	КонецЕсли;
	ДанныеДляПечати.Дата             = Формат(ДанныеДляПечати.Дата, "ДФ='дд ММММ гггг'") + " г.";
	ДанныеДляПечати.ДатаСчетаФактуры = Формат(ДанныеДляПечати.ДатаСчетаФактуры, "ДФ='дд ММММ гггг'") + " г.";
	ДанныеДляПечати.Вставить("НомерСчетаФактуры", ОбщегоНазначения.ПолучитьНомерНаПечать(ДанныеДляПечати.СчетФактура));
	ДанныеДляПечати.Вставить("НомерКорректировки", ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка));
	ДанныеДляПечати.Вставить("ИННКПППродавца",    ДанныеДляПечати.ИННПродавца
		+ ?(ПустаяСтрока(ДанныеДляПечати.КПППродавца), "", "/" + ДанныеДляПечати.КПППродавца));
	ДанныеДляПечати.Вставить("ИННКПППокупателя",  ДанныеДляПечати.ИННПокупателя
		+ ?(ПустаяСтрока(ДанныеДляПечати.КПППокупателя), "", "/" + ДанныеДляПечати.КПППокупателя));
		
	// Подготовка данных табличной части
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыИУслуги.НомерСтроки КАК НомерСтроки,
	|	ТоварыИУслуги.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТоварыИУслуги.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
	|	ТоварыИУслуги.ЕдиницаИзмерения.Наименование КАК НаименованиеЕдиницыИзмерения,
	|	ТоварыИУслуги.КоличествоДоИзменения КАК КоличествоДоИзменения,
	|	ТоварыИУслуги.КоличествоПослеИзменения КАК КоличествоПослеИзменения,
	|	ТоварыИУслуги.ЦенаДоИзменения КАК ЦенаДоИзменения,
	|	ТоварыИУслуги.ЦенаПослеИзменения КАК ЦенаПослеИзменения,
	|	ТоварыИУслуги.СтоимостьБезНДСДоИзменения КАК СтоимостьБезНДСДоИзменения,
	|	ТоварыИУслуги.СтоимостьБезНДСПослеИзменения КАК СтоимостьБезНДСПослеИзменения,
	|	ТоварыИУслуги.РазницаБезНДСКУменьшению КАК РазницаБезНДСКУменьшению,
	|	ТоварыИУслуги.РазницаБезНДСКДоплате КАК РазницаБезНДСКДоплате,
	|	ТоварыИУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ТоварыИУслуги.СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|	ТоварыИУслуги.СуммаНДСПослеИзменения КАК СуммаНДСПослеИзменения,
	|	ТоварыИУслуги.РазницаНДСКУменьшению КАК РазницаНДСКУменьшению,
	|	ТоварыИУслуги.РазницаНДСКДоплате КАК РазницаНДСКДоплате,
	|	ТоварыИУслуги.СтоимостьСНДСДоИзменения КАК СтоимостьСНДСДоИзменения,
	|	ТоварыИУслуги.СтоимостьСНДСПослеИзменения КАК СтоимостьСНДСПослеИзменения,
	|	ТоварыИУслуги.РазницаСНДСКУменьшению КАК РазницаСНДСКУменьшению,
	|	ТоварыИУслуги.РазницаСНДСКДоплате КАК РазницаСНДСКДоплате
	|ИЗ
	|	Документ.КорректировочныйСчетФактураВыданный.ТоварыИУслуги КАК ТоварыИУслуги
	|ГДЕ
	|	ТоварыИУслуги.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
    	
	ТаблицаТоварыИУслуги = Запрос.Выполнить().Выгрузить();
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", ТаблицаТоварыИУслуги);
	
	Возврат ДанныеДляПечати;

КонецФункции 
       
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "КорректировочныйСчетФактура" Тогда
        	
		ТабДокумент = ПечатьКорректировочногоСчетаФактуры();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры 

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КорректировочныйСчетФактура", "Корректировочный счет-фактура");

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

Функция ПодготовитьТаблицыДокумента()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоварыИУслуги.Ссылка.Дата КАК Период,
	|	ТаблицаТоварыИУслуги.Ссылка.Организация КАК Организация,
	|	ТаблицаТоварыИУслуги.Ссылка.Контрагент КАК Покупатель,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	ТаблицаТоварыИУслуги.Ссылка КАК СчетФактура,
	|	ТаблицаТоварыИУслуги.ВидЦенности КАК ВидЦенности,
	|	ТаблицаТоварыИУслуги.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаТоварыИУслуги.РазницаБезНДСКДоплате) КАК СуммаБезНДС,
	|	СУММА(ТаблицаТоварыИУслуги.РазницаНДСКДоплате) КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.Реализация) КАК Событие,
	|	ТаблицаТоварыИУслуги.Ссылка.Дата КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.Дата, КВАРТАЛ) = КОНЕЦПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.Дата, КВАРТАЛ) = КОНЕЦПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.СчетФактура.Дата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЛОЖЬ КАК СторнирующаяЗаписьДопЛиста
	|ИЗ
	|	Документ.КорректировочныйСчетФактураВыданный.ТоварыИУслуги КАК ТаблицаТоварыИУслуги
	|ГДЕ
	|	ТаблицаТоварыИУслуги.Ссылка = &Ссылка
	|	И ТаблицаТоварыИУслуги.ВидЦенности <> ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыУслугиКомитентов)
	|	И ТаблицаТоварыИУслуги.РазницаБезНДСКДоплате > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоварыИУслуги.Ссылка,
	|	ТаблицаТоварыИУслуги.ВидЦенности,
	|	ТаблицаТоварыИУслуги.СтавкаНДС,
	|	ТаблицаТоварыИУслуги.Ссылка.Дата,
	|	ТаблицаТоварыИУслуги.Ссылка.Организация,
	|	ТаблицаТоварыИУслуги.Ссылка.Контрагент,
	|	ТаблицаТоварыИУслуги.Ссылка.Дата,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.Дата, КВАРТАЛ) = КОНЕЦПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.Дата, КВАРТАЛ) = КОНЕЦПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ТаблицаТоварыИУслуги.Ссылка.СчетФактура.Дата, КВАРТАЛ)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидЦенности,
	|	СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоварыИУслуги.Ссылка.Дата КАК Период,
	|	ТаблицаТоварыИУслуги.Ссылка.Организация КАК Организация,
	|	ТаблицаТоварыИУслуги.Ссылка.Контрагент КАК Поставщик,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	ТаблицаТоварыИУслуги.Ссылка КАК СчетФактура,
	|	ТаблицаТоварыИУслуги.ВидЦенности КАК ВидЦенности,
	|	ТаблицаТоварыИУслуги.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаТоварыИУслуги.РазницаБезНДСКУменьшению) КАК СуммаБезНДС,
	|	СУММА(ТаблицаТоварыИУслуги.РазницаНДСКУменьшению) КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	ТаблицаТоварыИУслуги.Ссылка.Дата КАК ДатаСобытия,
	|	ЛОЖЬ КАК ЗаписьДополнительногоЛиста,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК КорректируемыйПериод
	|ИЗ
	|	Документ.КорректировочныйСчетФактураВыданный.ТоварыИУслуги КАК ТаблицаТоварыИУслуги
	|ГДЕ
	|	ТаблицаТоварыИУслуги.Ссылка = &Ссылка
	|	И ТаблицаТоварыИУслуги.ВидЦенности <> ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыУслугиКомитентов)
	|	И ТаблицаТоварыИУслуги.РазницаБезНДСКУменьшению > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоварыИУслуги.Ссылка,
	|	ТаблицаТоварыИУслуги.ВидЦенности,
	|	ТаблицаТоварыИУслуги.СтавкаНДС,
	|	ТаблицаТоварыИУслуги.Ссылка.Дата,
	|	ТаблицаТоварыИУслуги.Ссылка.Организация,
	|	ТаблицаТоварыИУслуги.Ссылка.Контрагент,
	|	ТаблицаТоварыИУслуги.Ссылка.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидЦенности,
	|	СтавкаНДС";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицыДокумента = Новый Структура;
	ТаблицыДокумента.Вставить("КДоплате",    Результат[0].Выгрузить());
	ТаблицыДокумента.Вставить("КУменьшению", Результат[1].Выгрузить());
	
	Возврат ТаблицыДокумента;	
	
КонецФункции

// Формирование записей книги покупок при уменьшении стоимости (разницы к уменьшению)
//
Процедура СформироватьДвиженияУменьшениеСтоимостиРеализации(СтруктураШапкиДокумента, ТаблицаКУменьшению, Отказ, Заголовок) 
	
	Если НЕ СтруктураШапкиДокумента.НДСПредъявленКВычету
		ИЛИ ТаблицаКУменьшению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаКУменьшению Цикл
		
		Движение = Движения.НДСЗаписиКнигиПокупок.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		
	КонецЦикла;
		
КонецПроцедуры	

// Формирование записей книги продаж (или доп.листа книги продаж) при увеличении стоимости (разницы к доплате)
//
Процедура СформироватьДвиженияУвеличениеСтоимостиРеализации(СтруктураШапкиДокумента, ТаблицаКДоплате, Отказ, Заголовок) 
	           	
	Если ТаблицаКДоплате.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаКДоплате Цикл
		
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		
	КонецЦикла;
		
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(
		ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета);
		
	Реквизиты = ПолучитьРеквизитыСчетаФактуры(Организация, Контрагент, СчетФактура);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
		
КонецПроцедуры 

Процедура ПриКопировании(ОбъектКопирования)
	
	Ответственный        = глЗначениеПеременной("глТекущийПользователь");

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	РассчитатьИтоговыеСуммыДокумента();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ТаблицыДокумента = ПодготовитьТаблицыДокумента();
	
	СформироватьДвиженияУменьшениеСтоимостиРеализации(
		СтруктураШапкиДокумента, ТаблицыДокумента.КУменьшению, Отказ, Заголовок);	
	
	СформироватьДвиженияУвеличениеСтоимостиРеализации(
		СтруктураШапкиДокумента, ТаблицыДокумента.КДоплате, Отказ, Заголовок);	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
