////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ОткрыватьНастройкуДвижений;

Перем мСписокТипов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗаполнитьПоСчетуФактуре()
	
	Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
		Возврат;
	КонецЕсли;
    
	Если ТоварыИУслуги.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 

		ТоварыИУслуги.Очистить();

	КонецЕсли;
	
	ЗаполнитьТоварыИУслугиПоСчетуФактуре(СчетФактура);
	
КонецПроцедуры	

Процедура ЗаполнитьСпискиВыбораРеквизитовСчетаФактуры(Реквизиты)

	ЭлементыФормы.НаименованиеПродавца.СписокВыбора.Очистить();
	ЭлементыФормы.НаименованиеПродавца.СписокВыбора.Добавить(Реквизиты.НаименованиеПродавца);

	ЭлементыФормы.АдресПродавца.СписокВыбора.Очистить();
	ЭлементыФормы.АдресПродавца.СписокВыбора.Добавить(Реквизиты.АдресПродавца);
	
	ЭлементыФормы.ИННПродавца.СписокВыбора.Очистить();
	ЭлементыФормы.ИННПродавца.СписокВыбора.Добавить(Реквизиты.ИННПродавца);
	
	ЭлементыФормы.КПППродавца.СписокВыбора.Очистить();
	ЭлементыФормы.КПППродавца.СписокВыбора.Добавить(Реквизиты.КПППродавца);
	
	ЭлементыФормы.НаименованиеПокупателя.СписокВыбора.Очистить();
	ЭлементыФормы.НаименованиеПокупателя.СписокВыбора.Добавить(Реквизиты.НаименованиеПокупателя);
	
	ЭлементыФормы.АдресПокупателя.СписокВыбора.Очистить();
	ЭлементыФормы.АдресПокупателя.СписокВыбора.Добавить(Реквизиты.АдресПокупателя);
	
	ЭлементыФормы.ИННПокупателя.СписокВыбора.Очистить();
	ЭлементыФормы.ИННПокупателя.СписокВыбора.Добавить(Реквизиты.ИННПокупателя);
	
	ЭлементыФормы.КПППокупателя.СписокВыбора.Очистить();
	ЭлементыФормы.КПППокупателя.СписокВыбора.Добавить(Реквизиты.КПППокупателя);
	
	ЭлементыФормы.ФИОГлавногоБухгалтера.СписокВыбора.Очистить();
	ЭлементыФормы.ФИОГлавногоБухгалтера.СписокВыбора.Добавить(Реквизиты.ФИОГлавногоБухгалтера);
	
КонецПроцедуры

Процедура УстановитьВидимость()

	ЭлементыФормы.НДСПредъявленКВычету.Доступность = РазницаСНДСКУменьшению > 0;
	
КонецПроцедуры 

Процедура ПриИзмененииДоговора()
	
	Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	СчетФактура        = Неопределено;
	ТоварыИУслуги.Очистить();
	
	РассчитатьИтоговыеСуммыДокумента();
	УстановитьНДСПредъявленКВычету();
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ОбработатьОкончаниеВводаТекстаСтавкиНДС(РасчетнаяСтавка, Текст, Значение, СтандартнаяОбработка)
	
	Если Текст = "18" ИЛИ Текст = "18%" Тогда
		Значение = ?(РасчетнаяСтавка, Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18);
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Текст = "10" ИЛИ Текст = "10%" Тогда
		Значение = ?(РасчетнаяСтавка, Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	УстановитьКнопкиПечати();
	
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры 

Процедура ПриОткрытии()
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	мТекущаяДатаДокумента = Дата;

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	СтруктураРеквизитов = Новый Структура("Дата,Организация,Контрагент,ДоговорКонтрагента,СчетФактура");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов);
	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);	
	
	УстановитьВидимость();
	
	РеквизитыСчетаФактуры = ПолучитьРеквизитыСчетаФактуры(Организация, Контрагент, СчетФактура);
	ЗаполнитьСпискиВыбораРеквизитовСчетаФактуры(РеквизитыСчетаФактуры);
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры 

Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи()

	УстановитьКнопкиПечати();

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(
		ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(
		ЭтотОбъект.Проведен, ОткрыватьНастройкуДвижений, Ссылка, ЭтотОбъект);

КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(
		ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(), Ссылка, ЭтотОбъект);

КонецПроцедуры 

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(
		мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя, "Имя", Истина), ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
		
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	
	СоответствиеТЧ.Вставить(ЭлементыФормы.ТоварыИУслуги,
		ЭлементыФормы.КоманднаяПанельТоварыИУслуги.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(
		Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(
		Ссылка, ПолучитьСтруктуруПечатныхФорм(), 
		Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати(
		мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(
		мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,
		Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если мПодменюПечати <> Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати, Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельТоварыИУслугиЗаполнитьПоСчетуФактуре(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
		Предупреждение("Не выбран счет-фактура.");
		Возврат;
	КонецЕсли;
    
	Если ТоварыИУслуги.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Продолжить?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ТоварыИУслуги.Очистить();

	КонецЕсли;
	
	ЗаполнитьТоварыИУслугиПоСчетуФактуре(СчетФактура);
	
КонецПроцедуры
   
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(
		ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	мТекущаяДатаДокумента = Дата; // Запомним текущую дату документа для контроля номера документа
	
	РассчитатьИтоговыеСуммыДокумента();
	УстановитьНДСПредъявленКВычету();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(
			ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ОтборПоВалюте       = Новый Структура("ЗначениеОтбора", мВалютаРегламентированногоУчета);
	СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(
		ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговоров, СтруктураПараметров);
	
    ПриИзмененииДоговора();
	
	РеквизитыСчетаФактуры = ПолучитьРеквизитыСчетаФактуры(Организация, Контрагент, СчетФактура);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыСчетаФактуры,
		"НаименованиеПродавца,АдресПродавца,ИННПродавца,КПППродавца,
		|ФИОРуководителя,ФИОГлавногоБухгалтера,СвидетельствоИП");
	ЗаполнитьСпискиВыбораРеквизитовСчетаФактуры(РеквизитыСчетаФактуры);
		
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ОтборПоВалюте       = Новый Структура("ЗначениеОтбора", мВалютаРегламентированногоУчета);
	СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(
		ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговоров, СтруктураПараметров);
	
    ПриИзмененииДоговора();
	
	РеквизитыСчетаФактуры = ПолучитьРеквизитыСчетаФактуры(Организация, Контрагент, СчетФактура);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыСчетаФактуры,
		"НаименованиеПокупателя,АдресПокупателя,ИННПокупателя,КПППокупателя");
	ЗаполнитьСпискиВыбораРеквизитовСчетаФактуры(РеквизитыСчетаФактуры);
	
КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ОтборПоВалюте       = Новый Структура("ЗначениеОтбора", мВалютаРегламентированногоУчета);
	СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента, 
		СписокВидовДоговоров, СтандартнаяОбработка, СтруктураПараметров);

КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры
      
Процедура СчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.СчетФактураВыданный.ПолучитьФормуВыбора();
	ФормаВыбора.Отбор.Организация.Установить(Организация);
	ФормаВыбора.Отбор.Контрагент.Установить(Контрагент);
	ФормаВыбора.Отбор.ДоговорКонтрагента.Установить(ДоговорКонтрагента);
	ФормаВыбора.Отбор.ВидСчетаФактуры.Установить(Перечисления.НДСВидСчетаФактуры.НаРеализацию);
	
	ВыбранныйСчетФактура = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйСчетФактура) Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура        = ВыбранныйСчетФактура;
		
	ТекстВопроса = "Заполнить товары и услуги по счету-фактуре?";
	Если ТоварыИУслуги.Количество() > 0 Тогда
		ТекстВопроса = ТекстВопроса +"
			|(Перед заполнением табличная часть будет очищена)";
	КонецЕсли;
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	ТоварыИУслуги.Очистить();
	ЗаполнитьТоварыИУслугиПоСчетуФактуре(СчетФактура);
	
КонецПроцедуры

Процедура СчетФактураПриИзменении(Элемент)
	
	ТоварыИУслуги.Очистить();
	РассчитатьИтоговыеСуммыДокумента();
	УстановитьНДСПредъявленКВычету();
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		ЗаполнитьТоварыИУслугиПоСчетуФактуре(СчетФактура);
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура НаименованиеПродавцаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранныйВариант = ВыбратьИзСписка(Элемент.СписокВыбора, Элемент);
	Если ВыбранныйВариант <> Неопределено Тогда
		Элемент.Значение = ВыбранныйВариант.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура АдресПродавцаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранныйВариант = ВыбратьИзСписка(Элемент.СписокВыбора, Элемент);
	Если ВыбранныйВариант <> Неопределено Тогда
		Элемент.Значение = ВыбранныйВариант.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИННПродавцаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранныйВариант = ВыбратьИзСписка(Элемент.СписокВыбора, Элемент);
	Если ВыбранныйВариант <> Неопределено Тогда
		Элемент.Значение = ВыбранныйВариант.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура КПППродавцаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранныйВариант = ВыбратьИзСписка(Элемент.СписокВыбора, Элемент);
	Если ВыбранныйВариант <> Неопределено Тогда
		Элемент.Значение = ВыбранныйВариант.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура НаименованиеПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранныйВариант = ВыбратьИзСписка(Элемент.СписокВыбора, Элемент);
	Если ВыбранныйВариант <> Неопределено Тогда
		Элемент.Значение = ВыбранныйВариант.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура АдресПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранныйВариант = ВыбратьИзСписка(Элемент.СписокВыбора, Элемент);
	Если ВыбранныйВариант <> Неопределено Тогда
		Элемент.Значение = ВыбранныйВариант.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИННПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранныйВариант = ВыбратьИзСписка(Элемент.СписокВыбора, Элемент);
	Если ВыбранныйВариант <> Неопределено Тогда
		Элемент.Значение = ВыбранныйВариант.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура КПППокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранныйВариант = ВыбратьИзСписка(Элемент.СписокВыбора, Элемент);
	Если ВыбранныйВариант <> Неопределено Тогда
		Элемент.Значение = ВыбранныйВариант.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФИОРуководителяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуВыбора();
	ВыбранныйРуководитель = ФормаВыбора.ОткрытьМодально();
	Если ВыбранныйРуководитель <> Неопределено Тогда
		СтруктураФИО = РегламентированнаяОтчетность.ПолучитьФИОФизЛица(ВыбранныйРуководитель);
		ФИОРуководителя = ОбщегоНазначения.ПолучитьФамилиюИмяОтчество(СтруктураФИО.Фамилия, СтруктураФИО.Имя, СтруктураФИО.Отчество);	
	КонецЕсли;	
	     	
КонецПроцедуры

Процедура ФИОГлавногоБухгалтераНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуВыбора();
	ВыбранныйГлавныйБухгалтер = ФормаВыбора.ОткрытьМодально();
	Если ВыбранныйГлавныйБухгалтер <> Неопределено Тогда
		СтруктураФИО = РегламентированнаяОтчетность.ПолучитьФИОФизЛица(ВыбранныйГлавныйБухгалтер);
		ФИОГлавногоБухгалтера = ОбщегоНазначения.ПолучитьФамилиюИмяОтчество(СтруктураФИО.Фамилия, СтруктураФИО.Имя, СтруктураФИО.Отчество);	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ "Товары и услуги"
    
Процедура ТоварыИУслугиПослеУдаления(Элемент)
	
	РассчитатьИтоговыеСуммыДокумента();
	УстановитьНДСПредъявленКВычету();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ТоварыИУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеСуммыДокумента();
	УстановитьНДСПредъявленКВычету();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РассчитатьСтоимостьСНДСДоИзменения(ТекДанные)

	ТекДанные.СтоимостьСНДСДоИзменения = ТекДанные.СтоимостьБезНДСДоИзменения + ТекДанные.СуммаНДСДоИзменения;
	РассчитатьРазницыСНДС(ТекДанные);

КонецПроцедуры

Процедура РассчитатьСтоимостьСНДСПослеИзменения(ТекДанные)

	ТекДанные.СтоимостьСНДСПослеИзменения = ТекДанные.СтоимостьБезНДСПослеИзменения + ТекДанные.СуммаНДСПослеИзменения;
	РассчитатьРазницыСНДС(ТекДанные);

КонецПроцедуры

Процедура РассчитатьСуммуНДСДоИзменения(ТекДанные)

	ТекДанные.СуммаНДСДоИзменения = Окр(ТекДанные.СтоимостьБезНДСДоИзменения 
		* УчетНДС.ПолучитьСтавкуНДС(ТекДанные.СтавкаНДС) / 100, 2);
	РассчитатьРазницыНДС(ТекДанные);

КонецПроцедуры

Процедура РассчитатьСуммуНДСПослеИзменения(ТекДанные)

	ТекДанные.СуммаНДСПослеИзменения = Окр(ТекДанные.СтоимостьБезНДСПослеИзменения 
		* УчетНДС.ПолучитьСтавкуНДС(ТекДанные.СтавкаНДС) / 100, 2);
	РассчитатьРазницыНДС(ТекДанные);

КонецПроцедуры

Процедура РассчитатьСтоимостьБезНДСДоИзменения(ТекДанные)

	ТекДанные.СтоимостьБезНДСДоИзменения = ?(ТекДанные.КоличествоДоИзменения = 0, 
		ТекДанные.ЦенаДоИзменения, Окр(ТекДанные.КоличествоДоИзменения * ТекДанные.ЦенаДоИзменения, 2));
	РассчитатьРазницыБезНДС(ТекДанные);

КонецПроцедуры

Процедура РассчитатьСтоимостьБезНДСПослеИзменения(ТекДанные)

	ТекДанные.СтоимостьБезНДСПослеИзменения = ?(ТекДанные.КоличествоПослеИзменения = 0, 
		ТекДанные.ЦенаПослеИзменения, Окр(ТекДанные.КоличествоПослеИзменения * ТекДанные.ЦенаПослеИзменения, 2));
	РассчитатьРазницыБезНДС(ТекДанные);

КонецПроцедуры

Процедура ТоварыИУслугиНоменклатураПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;

	НаименованиеПолное = ТекДанные.Номенклатура.НаименованиеПолное;
	ТекДанные.НаименованиеНоменклатуры = ?(ПустаяСтрока(НаименованиеПолное), 
		ТекДанные.Номенклатура.Наименование, НаименованиеПолное);
	ТекДанные.ЕдиницаИзмерения = ТекДанные.Номенклатура.БазоваяЕдиницаИзмерения;
	ТекДанные.СтавкаНДС = ТекДанные.Номенклатура.СтавкаНДС;
	Если ТекДанные.Номенклатура.Услуга Тогда
		ТекДанные.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
	Иначе
		ТекДанные.ВидЦенности = Перечисления.ВидыЦенностей.Товары;
	КонецЕсли;
	
	РассчитатьСуммуНДСДоИзменения(ТекДанные);
	РассчитатьСуммуНДСПослеИзменения(ТекДанные);
	РассчитатьСтоимостьСНДСДоИзменения(ТекДанные);
	РассчитатьСтоимостьСНДСПослеИзменения(ТекДанные);
	
КонецПроцедуры

Процедура ТоварыИУслугиСтавкаНДСОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОбработатьОкончаниеВводаТекстаСтавкиНДС(Ложь, Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ТоварыИУслугиКоличествоДоИзмененияПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;
	РассчитатьСтоимостьБезНДСДоИзменения(ТекДанные);
	РассчитатьСуммуНДСДоИзменения(ТекДанные);
	РассчитатьСтоимостьСНДСДоИзменения(ТекДанные);
	
КонецПроцедуры

Процедура ТоварыИУслугиКоличествоПослеИзмененияПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;
	РассчитатьСтоимостьБезНДСПослеИзменения(ТекДанные);
	РассчитатьСуммуНДСПослеИзменения(ТекДанные);
	РассчитатьСтоимостьСНДСПослеИзменения(ТекДанные);
	
КонецПроцедуры

Процедура ТоварыИУслугиЦенаДоИзмененияПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;
	РассчитатьСтоимостьБезНДСДоИзменения(ТекДанные);
	РассчитатьСуммуНДСДоИзменения(ТекДанные);
	РассчитатьСтоимостьСНДСДоИзменения(ТекДанные);
	
КонецПроцедуры

Процедура ТоварыИУслугиЦенаПослеИзмененияПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;
	РассчитатьСтоимостьБезНДСПослеИзменения(ТекДанные);
	РассчитатьСуммуНДСПослеИзменения(ТекДанные);
	РассчитатьСтоимостьСНДСПослеИзменения(ТекДанные);
	
КонецПроцедуры

Процедура ТоварыИУслугиСтоимостьБезНДСДоИзмененияПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;
	РассчитатьРазницыБезНДС(ТекДанные);
	РассчитатьСуммуНДСДоИзменения(ТекДанные);
	РассчитатьСтоимостьСНДСДоИзменения(ТекДанные);
	
КонецПроцедуры

Процедура ТоварыИУслугиСтоимостьБезНДСПослеИзмененияПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;
	РассчитатьРазницыБезНДС(ТекДанные);
	РассчитатьСуммуНДСПослеИзменения(ТекДанные);
	РассчитатьСтоимостьСНДСПослеИзменения(ТекДанные);
	
КонецПроцедуры

Процедура ТоварыИУслугиСтавкаНДСПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;
	РассчитатьСуммуНДСДоИзменения(ТекДанные);
	РассчитатьСуммуНДСПослеИзменения(ТекДанные);
	РассчитатьСтоимостьСНДСДоИзменения(ТекДанные);
	РассчитатьСтоимостьСНДСПослеИзменения(ТекДанные);
	
КонецПроцедуры

Процедура ТоварыИУслугиСуммаНДСДоИзмененияПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;
	РассчитатьРазницыНДС(ТекДанные);
	РассчитатьСтоимостьСНДСДоИзменения(ТекДанные);
	
КонецПроцедуры

Процедура ТоварыИУслугиСуммаНДСПослеИзмененияПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;
	РассчитатьРазницыНДС(ТекДанные);
	РассчитатьСтоимостьСНДСПослеИзменения(ТекДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
