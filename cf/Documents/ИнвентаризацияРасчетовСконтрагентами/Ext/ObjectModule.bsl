////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//	Процедура выполняет заполнение документа по форме ИНВ-17 данными регистра БУ
//
//	Аргументы:	1.	аргВидЗадолженности 
// 	Тип:	 		Перечисления.ВидыЗадолженности
//	Назначение:     Формирование выборки по конкретному виду задолженности (опция)
//
// 				2.	СписокСчетовВАкт
// 	Тип:			Массив
//	Назначение:     Формирование выборки по счетам (обязательный аргумент)
//
Процедура ЗаполнитьАктДляИнв17(ВидЗадолженности = Неопределено) Экспорт
	
	// Проверка требования на отбор данных по виду задолженности
	Если НЕ (ВидЗадолженности = Неопределено) Тогда
		// Вид задолженности выбран
		// Выполнение очистки записей ТЧ Контрагенты по виду задолженности
		СтруктураОтбора = Новый Структура("ВидЗадолженности", ВидЗадолженности);
		УдаляемыеСтроки = Контрагенты.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Контрагенты.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	Иначе
		// Полная очистка записей в ТЧ Контрагенты
		Контрагенты.Очистить();
	КонецЕсли;
	
	Запрос 		= Новый Запрос;
	ГраницаАкта = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	
	Запрос.УстановитьПараметр("Дата",        	  ГраницаАкта);
	Запрос.УстановитьПараметр("Организация", 	  Организация);
	МассивСчетов = СчетаРасчетов.ВыгрузитьКолонку("СчетРасчетов");
	МассивСчетов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	ВидыСубконто = Новый Массив();
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Запрос.УстановитьПараметр("ВидЗадолженности",  	ВидЗадолженности);
	Запрос.УстановитьПараметр("Дебиторская",  Перечисления.ВидыЗадолженности.Дебиторская);
	Запрос.УстановитьПараметр("Кредиторская", Перечисления.ВидыЗадолженности.Кредиторская);
	Запрос.УстановитьПараметр("Активный", ВидСчета.Активный);
	Запрос.УстановитьПараметр("Пассивный", ВидСчета.Пассивный);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = &Активный
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = &Активный
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА &Дебиторская
	|		ИНАЧЕ &Кредиторская
	|	КОНЕЦ КАК ВидЗадолженности
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет В (&МассивСчетов), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	(&ВидЗадолженности = НЕОПРЕДЕЛЕНО
	|			ИЛИ ВЫБОР
	|				КОГДА ХозрасчетныйОстатки.Счет.Вид = &Активный
	|						ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|					ТОГДА &Дебиторская
	|				ИНАЧЕ &Кредиторская
	|			КОНЕЦ = &ВидЗадолженности)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = &Активный
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА &Дебиторская
	|		ИНАЧЕ &Кредиторская
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1.Представление,
	|	ХозрасчетныйОстатки.Счет.Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока (Выборка.Следующий()) Цикл
		СтрокаДанных = Контрагенты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьАктДляИнв17()

//	Процедура выполняет формирование и вывод итоговых значений документа
//	в форме
//
//	Аргументы:	ОбъектФорма - форма документа, выполнившая вызов функции
//
Функция ПолучитьИтоги() Экспорт
	
	ТабКонтрагентыДт = Контрагенты.Выгрузить();
	ТабКонтрагентыКт = ТабКонтрагентыДт.Скопировать();
	
	ОтборДт	 = Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская);
	ОтборКт	 = Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская);
	мИтогиДт = ТабКонтрагентыДт.НайтиСтроки(ОтборКт);
	мИтогиКт = ТабКонтрагентыКт.НайтиСтроки(ОтборДт);
	
	Для Каждого ЭлмИтогиДт Из мИтогиДт Цикл
		ТабКонтрагентыДт.Удалить(ЭлмИтогиДт);
	КонецЦикла;
	
	Для Каждого ЭлмИтогиКт Из мИтогиКт Цикл
		ТабКонтрагентыКт.Удалить(ЭлмИтогиКт);
	КонецЦикла;
	
	СуммаДт = 	ТабКонтрагентыДт.Итог("Подтверждено")	+ 
				ТабКонтрагентыДт.Итог("НеПодтверждено");
				
	СуммаКт = 	ТабКонтрагентыКт.Итог("Подтверждено")	+ 
				ТабКонтрагентыКт.Итог("НеПодтверждено");
	
	ТекстИтогиДт = "Всего строк:" + Символы.НПП	+ ТабКонтрагентыДт.Количество() + Символы.Таб + 
	"Всего, руб.:" + Символы.НПП + 
	Формат(СуммаДт, "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ "подтверждено:" + Символы.НПП + 
	Формат(ТабКонтрагентыДт.Итог("Подтверждено"), "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ 
	"не подтверждено:" + Символы.НПП + 
	Формат(ТабКонтрагентыДт.Итог("НеПодтверждено"), "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ 
	"истек срок давности:" + Символы.НПП + 
	Формат(ТабКонтрагентыДт.Итог("ИстекСрокДавности"), "ЧЦ=15; ЧДЦ=2; ЧН=-");
	
	ТекстИтогиКт = "Всего строк:" + Символы.НПП	+ ТабКонтрагентыКт.Количество() + Символы.Таб + 
	"Всего, руб.:" + Символы.НПП + 
	Формат(СуммаКт, "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ "подтверждено:" + Символы.НПП + 
	Формат(ТабКонтрагентыКт.Итог("Подтверждено"), "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ 
	"не подтверждено:" + Символы.НПП + 
	Формат(ТабКонтрагентыКт.Итог("НеПодтверждено"), "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ 
	"истек срок давности:" + Символы.НПП + 
	Формат(ТабКонтрагентыКт.Итог("ИстекСрокДавности"), "ЧЦ=15; ЧДЦ=2; ЧН=-");
	
	ТекстИтогиДт = ?(ТабКонтрагентыДт.Количество() = 0,
					"Документ по дебиторской задолженности не заполнен.",
					ТекстИтогиДт);

	ТекстИтогиКт = ?(ТабКонтрагентыКт.Количество() = 0,
					"Документ по кредиторской задолженности не заполнен.",
					ТекстИтогиКт);

	Возврат Новый Структура("СтрокаДт,СтрокаКт", ТекстИтогиДт,ТекстИтогиКт);
	
КонецФункции // ПолучитьИтоги()

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ПЕЧАТНЫХ ФОРМ

# Если Клиент Тогда

// Процедура формирования унифицированной печатной формы документа ИНВ-17
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта инвентаризации.
//
//
Функция ПечатьИнв17() Экспорт
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        "Члены комиссии");
	
	//	Данные для шапки акта
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", 	Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Инвентаризация.Дата КАК Дата,
	|	Инвентаризация.Организация КАК Организация,
	|	Инвентаризация.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	Инвентаризация.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	Инвентаризация.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	Инвентаризация.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	Инвентаризация.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	Инвентаризация.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК ФизЛицо,
	|		Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСконтрагентами КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Ссылка";
	
	Выборка= Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	//	Данные строк таблиц
	ЗапросКонтрагенты = Новый Запрос;
	ЗапросКонтрагенты.УстановитьПараметр("Ссылка", Ссылка);
	
	ЗапросКонтрагенты.Текст =       
	"ВЫБРАТЬ
	|	Инвентаризация.ВидЗадолженности КАК ВидЗадолженности,
	|	Инвентаризация.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Инвентаризация.Контрагент.НаименованиеПолное КАК СТРОКА(200)),"""") КАК КонтрагентНаименованиеПолное,
	|	ЕСТЬNULL(Инвентаризация.Контрагент.Наименование,"""") КАК КонтрагентНаименование,
	|	Инвентаризация.СчетРасчетов КАК СчетРасчетов,
	|	ПРЕДСТАВЛЕНИЕ(Инвентаризация.СчетРасчетов) КАК СчетРасчетовПредставление,
	|	СУММА(Инвентаризация.Подтверждено + Инвентаризация.НеПодтверждено) КАК Всего,
	|	СУММА(Инвентаризация.Подтверждено) КАК Подтверждено,
	|	СУММА(Инвентаризация.НеПодтверждено) КАК НеПодтверждено,
	|	СУММА(Инвентаризация.ИстекСрокДавности) КАК ИстекСрокДавности
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСконтрагентами.Контрагенты КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Инвентаризация.ВидЗадолженности,
	|	Инвентаризация.Контрагент,
	|	ПОДСТРОКА(Инвентаризация.Контрагент.НаименованиеПолное, 1, 200),
	|	Инвентаризация.СчетРасчетов,
	|	Инвентаризация.Контрагент.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтрагентНаименование,
	|	Инвентаризация.СчетРасчетов.Порядок
	|ИТОГИ
	|	СУММА(Всего),
	|	СУММА(Подтверждено),
	|	СУММА(НеПодтверждено),
	|	СУММА(ИстекСрокДавности)
	|ПО
	|	ВидЗадолженности";
	
	РезультатКонтрагенты = ЗапросКонтрагенты.Выполнить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетов_ИНВ17";
	
	Макет       = ПолучитьМакет("ИНВ17");
	
	// Формирование шапки
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Заполнить(Выборка);
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата);
	Шапка.Параметры.Организация          = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	Шапка.Параметры.ОрганизацияКодПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	
	Шапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	Шапка.Параметры.ДеньДокумента  = День(Выборка.Дата);
	Шапка.Параметры.МесяцДокумента = Сред(Формат(Выборка.Дата, "ДЛФ=ДД"), 
													 Найти(Формат(Выборка.Дата, "ДЛФ=ДД"), " "));
													 
	ТабДокумент.Вывести(Шапка);

	// Формирование строк дебиторской задолженности
	ПодвалТаблицыДт = Макет.ПолучитьОбласть("ПодвалТаблицыДт");
	СтрокаТаблицыДт = Макет.ПолучитьОбласть("СтрокаТаблицыДт");
	
	ВыборкаПоВидуЗадолженности = РезультатКонтрагенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаПоВидуЗадолженности.НайтиСледующий(Перечисления.ВидыЗадолженности.Дебиторская, "ВидЗадолженности") Тогда

		ПодвалТаблицыДт.Параметры.Заполнить(ВыборкаПоВидуЗадолженности);
		
		ВыборкаПоКонтрагенту = ВыборкаПоВидуЗадолженности.Выбрать();
		Пока ВыборкаПоКонтрагенту.Следующий() Цикл
			СтрокаТаблицыДт.Параметры.Заполнить(ВыборкаПоКонтрагенту);
			СтрокаТаблицыДт.Параметры.КонтрагентПредставление = ?(ПустаяСтрока(ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное),
				ВыборкаПоКонтрагенту.КонтрагентНаименование, ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное);
			ТабДокумент.Вывести(СтрокаТаблицыДт);
		КонецЦикла;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ПодвалТаблицыДт);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Шапка оборотной стороны Акта
	ШапкаОборот = Макет.ПолучитьОбласть("ШапкаОборот");
	ТабДокумент.Вывести(ШапкаОборот);
	
	// Формирование строк кредиторской задолженности
	ПодвалТаблицыКт = Макет.ПолучитьОбласть("ПодвалТаблицыКт");
	СтрокаТаблицыКт = Макет.ПолучитьОбласть("СтрокаТаблицыКт");
			
	ВыборкаПоВидуЗадолженности.Сбросить();
	Если ВыборкаПоВидуЗадолженности.НайтиСледующий(Перечисления.ВидыЗадолженности.Кредиторская, "ВидЗадолженности") Тогда
		
		ПодвалТаблицыКт.Параметры.Заполнить(ВыборкаПоВидуЗадолженности);
		
		ВыборкаПоКонтрагенту = ВыборкаПоВидуЗадолженности.Выбрать();
		Пока ВыборкаПоКонтрагенту.Следующий() Цикл
			СтрокаТаблицыКт.Параметры.Заполнить(ВыборкаПоКонтрагенту);
			СтрокаТаблицыКт.Параметры.КонтрагентПредставление = ?(ПустаяСтрока(ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное),
				ВыборкаПоКонтрагенту.КонтрагентНаименование, ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное);
			ТабДокумент.Вывести(СтрокаТаблицыКт);
		КонецЦикла;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ПодвалТаблицыКт);
	
	// Подвал печатной формы
	Подвал = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(Подвал);
	
	Подпись = Макет.ПолучитьОбласть("Подпись");
	ТаблицаИнвентаризационнаяКомиссия = Выборка.ИнвентаризационнаяКомиссия.Выгрузить();
	
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		ДанныеПредседателя = ОбщегоНазначения.ДанныеФизЛица(Выборка.Организация, ПредседательКомиссии.ФизЛицо, Выборка.Дата);
			
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		Подпись.Параметры.Должность                = ДанныеПредседателя.Должность;
		Подпись.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		
	Иначе
		
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		Подпись.Параметры.Должность                = "";
		Подпись.Параметры.РасшифровкаПодписи       = "";
		
	КонецЕсли;
		
	ТабДокумент.Вывести(Подпись);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ОбщегоНазначения.ДанныеФизЛиц(Выборка.Организация, СписокЧленовКомиссии, Выборка.Дата);
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
		                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
													   "");
		Подпись.Параметры.Должность                = ЧленКомиссии.Должность;
		Подпись.Параметры.РасшифровкаПодписи       = ЧленКомиссии.Представление;
		
		ТабДокумент.Вывести(Подпись);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	// подписей, как в форме, утвержденной Госкомстатом)
	Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
														   "");
			Подпись.Параметры.Должность                = "";
			Подпись.Параметры.РасшифровкаПодписи       = "";
			
			ТабДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьИнв17()

// Функция формирует табличный документ с печатной формой приказа о проведении
// инвентаризации.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма приказа.
//
Функция ПечатьИНВ22() Экспорт

	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        "Члены комиссии");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Инвентаризация.Дата КАК Дата,
	|	Инвентаризация.Номер КАК Номер,
	|	Инвентаризация.Организация КАК Организация,
	|	Инвентаризация.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	Инвентаризация.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	Инвентаризация.ДокументОснованиеДата КАК ДатаДокумента,
	|	Инвентаризация.ДокументОснованиеНомер КАК номерДокумента,
	|	Инвентаризация.ПричинаПроведенияИнвентаризации КАК ПричинаПроведенияИнвентаризации,
	|	Инвентаризация.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК ФизЛицо,
	|		Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСКонтрагентами КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Инвентаризация.ИнвентаризационнаяКомиссия.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ТаблицаИнвентаризационнаяКомиссия = Выборка.ИнвентаризационнаяКомиссия.Выгрузить();
	
	Макет = ПолучитьОбщийМакет("ИНВ22");
	
	// Получаем области макета для вывода в табличный документ
	Шапка   = Макет.ПолучитьОбласть("Шапка");
	Подпись = Макет.ПолучитьОбласть("Подпись");
	Подвал  = Макет.ПолучитьОбласть("Подвал");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетов_ИНВ22";

	// Выведем шапку документа
	Шапка.Параметры.Заполнить(Выборка);
	Шапка.Параметры.НаименованиеИмуществаОбязательств = "расчетов с покупателями, поставщиками и прочими дебиторами и кредиторами";
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата);
	Шапка.Параметры.Организация          = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	Шапка.Параметры.ОрганизацияКодПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	
	ТабДокумент.Вывести(Шапка);
	
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		ДанныеПредседателя = ОбщегоНазначения.ДанныеФизЛица(Выборка.Организация, ПредседательКомиссии.ФизЛицо, Выборка.Дата);
			
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		Подпись.Параметры.Должность                = ДанныеПредседателя.Должность;
		Подпись.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		
	Иначе
		
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		Подпись.Параметры.Должность                = "";
		Подпись.Параметры.РасшифровкаПодписи       = "";
		
	КонецЕсли;
		
	ТабДокумент.Вывести(Подпись);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ОбщегоНазначения.ДанныеФизЛиц(Выборка.Организация, СписокЧленовКомиссии, Выборка.Дата);
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
		                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
													   "");
		Подпись.Параметры.Должность                = ЧленКомиссии.Должность;
		Подпись.Параметры.РасшифровкаПодписи       = ЧленКомиссии.Представление;
		
		ТабДокумент.Вывести(Подпись);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	// подписей, как в форме, утвержденной Госкомстатом)
	Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
														   "");
			Подпись.Параметры.Должность                = "";
			Подпись.Параметры.РасшифровкаПодписи       = "";
			
			ТабДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
	
	КонецЕсли;
	
	// Выведем подвал приказа
	Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подвал) Тогда
		
		// Выведем разрыв страницы
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЕсли;
	
	Подвал.Параметры.НаименованиеИмуществаОбязательств = "расчеты с покупателями, поставщиками и прочими дебиторами и кредиторами";
	Подвал.Параметры.ДатаНачалаИнвентаризации          = Формат(Выборка.ДатаНачалаИнвентаризации, "ДЛФ=DD");
	Подвал.Параметры.ДатаОкончанияИнвентаризации       = Формат(Выборка.ДатаОкончанияИнвентаризации, "ДЛФ=DD");
	Подвал.Параметры.ПричинаПроведенияИнвентаризации   = Выборка.ПричинаПроведенияИнвентаризации;
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Выборка.Организация, Выборка.Дата);
	Подвал.Параметры.ДолжностьРуководителя          = Руководители.РуководительДолжность;
	Подвал.Параметры.РасшифровкаПодписиРуководителя = Руководители.РуководительПредставление;
	
	ТабДокумент.Вывести(Подвал);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьИНВ22()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ИНВ17" Тогда
		ТабДокумент = ПечатьИнв17();
	ИначеЕсли ИмяМакета = "ИНВ22" Тогда
		ТабДокумент = ПечатьИнв22();
	КонецЕсли;
	
	Если НЕ (ТабДокумент = Неопределено) Тогда
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 
			КоличествоЭкземпляров, 
			НаПринтер, 
			ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Метаданные().Представление()), 
			НепосредственнаяПечать);
	КонецЕсли;
	
КонецПроцедуры // Печать

# КонецЕсли 

//	Функция возвращает доступные варианты печати документа
//
//	Значение: Структура вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ИНВ17, ИНВ22","ИНВ-17 (акт инвентаризации)","ИНВ-22 (приказ)");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()


