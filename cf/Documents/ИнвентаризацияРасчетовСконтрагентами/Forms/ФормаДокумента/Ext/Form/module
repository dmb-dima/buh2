////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПЕРЕМЕННЫЕ

// Дерево макетов печатных форм
Перем мДеревоМакетов;

// Элемент управления подменю печати
Перем мПодменюПечати;

// Элемент управления кнопка печать по умолчанию
Перем мПечатьПоУмолчанию;

Перем СтарыеЗначенияРеквизитов;

// Хранит индекс удаляемого элемента табличного поля - для корректной 
// обработки удаления председателя инвентаризационной комиссии
Перем мУдаляемыйЭлементИндекс;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//	Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию"
//
Процедура УстановитьКнопкиПечати()

	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, 
												 ПолучитьСтруктуруПечатныхФорм(), 
												 Новый Действие("ДействияФормыПечать"), 
												 Новый Действие("ДействияФормыПечать"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати(мПодменюПечати, 
							ЭлементыФормы.ОсновныеДействияФормы, 
							мДеревоМакетов.Строки.Количество() > 0);

	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, 
								ЭлементыФормы.ОсновныеДействияФормы, 
								мДеревоМакетов, 
								Метаданные().Имя,
								Новый Действие("ДействияФормыПечать"));

	Если Не (мПодменюПечати = Неопределено) Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати, Истина, Истина);
	КонецЕсли;

КонецПроцедуры //  УстановитьКнопкиПечати()

//	Процедура заполняет табличное поле "Счета расчетов" значениями, 
//	которые по умолчанию участвуют в формировании Акта ИНВ-17
//
Процедура ЗаполнитьСписокСчетовЗначениямиПоУмолчанию()
	
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФинансовыеВложения);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);

	СписокСчетовИсключить = Новый Массив;
	СписокСчетовИсключить.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("СписокСчетовИсключить", СписокСчетовИсключить);
	Запрос.УстановитьПараметр("Контрагенты", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("Договоры", 	  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК СчетРасчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|	И (НЕ Хозрасчетный.Ссылка В (&СписокСчетовИсключить))
	|	И Хозрасчетный.ВидыСубконто.ВидСубконто = &Контрагенты
	|	И Хозрасчетный.ВидыСубконто.ВидСубконто = &Договоры
	|	И (НЕ Хозрасчетный.Забалансовый)
	|	И (НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Порядок";
						 
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	СчетаРасчетов.Загрузить(ТаблицаСчетов);

КонецПроцедуры // ЗаполнитьСписокСчетовЗначениямиПоУмолчанию()

//	Функция выполняет наличие и проверку значений объектов, участвующих
//	в формировании документа.  
//	Возвращает переменную ЗаполнениеРазрешено. 
//
//	Тип функции: булево
//
// 	Аргумент: 	аргВидЗадолженности
// 	Тип:		Перечисления.ВидыЗадолженности
//
//	Назначение: Указание для вывода корректного сообщения в окне диалога
//
Функция ПроверитьГотовность(ВидЗадолженности = Неопределено)
	
	Если (СчетаРасчетов.Количество() = 0) Тогда
		Сообщить("Не задан список счетов, по которым должен формироваться документ!", СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВопроса = "";
	Если ВидЗадолженности = Неопределено И Контрагенты.Количество() > 0 Тогда
		ТекстВопроса = 
			"Перед заполнением все строки задолженности контрагентов будут удалены. 
			|Продолжить?";
	ИначеЕсли ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская 
		И Контрагенты.Найти(ВидЗадолженности, "ВидЗадолженности") <> Неопределено Тогда
		ТекстВопроса = 
			"Перед заполнением все строки дебиторской задолженности будут удалены. 
			|Продолжить?";
	ИначеЕсли ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская 
		И Контрагенты.Найти(ВидЗадолженности, "ВидЗадолженности") <> Неопределено Тогда
		ТекстВопроса = 
			"Перед заполнением все строки кредиторской задолженности будут удалены. 
			|Продолжить?";
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстВопроса) Тогда
		Возврат Истина;
	Иначе		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат (Ответ = КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецФункции // ПроверкаГотовности()

//	Процедура выполняет заполнение документа данными БУ
//
// 	Аргумент: 	аргВидЗадолженности
// 	Тип:		ПеречислениеСсылка.ВидыЗадолженности
//	Назначение: Определение корректного режима операции при формировании
//				документа по конкретному виду задолженности
//
Процедура ЗаполнитьДокумент(ВидЗадолженности = Неопределено)

	// Выполнение проверки на корректность данных формы
	РазрешеноЗаполнение = ПроверитьГотовность(ВидЗадолженности);
	Если НЕ (РазрешеноЗаполнение) Тогда
		Возврат;
	КонецЕсли;
	
	// Процедура заполнения документа
	ЗаполнитьАктДляИнв17(ВидЗадолженности);
	
	// Получение структуры с текстами для итоговых надписей
	ИтогиТекст = ПолучитьИтоги();
	Элементыформы.НадписьИтогиДт.Заголовок = ИтогиТекст.СтрокаДт;
	Элементыформы.НадписьИтогиКт.Заголовок = ИтогиТекст.СтрокаКт;

КонецПроцедуры // ЗаполнитьДокумент()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

//	Процедура выполняет заполнение ТЧ СписокСчетов значениями, 
//	принятыми по умолчанию
//
Процедура КоманднаяПанельСчетаРасчетовКнопкаЗаполнить(Кнопка)
	
	Если СчетаРасчетов.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением список счетов расчетов будет очищен. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		СчетаРасчетов.Очистить();
	
	КонецЕсли;

	ЗаполнитьСписокСчетовЗначениямиПоУмолчанию();
	
КонецПроцедуры // КоманднаяПанельСписокСчетовКнопкаСчетаПоУмолчанию()

//	Процедура выполняет заполнение ТЧ Контрагенты данными регистра остатков 
//	по дебиторской и кредиторской задолженности
//	Вызов производится с пустым аргументом, что указывает на замещение/заполнение
//	данных по обоим видам задолженности.
//
Процедура ОсновныеДействияФормыЗаполнитьАктДтКт(Кнопка)

	ЗаполнитьДокумент();
		
КонецПроцедуры // ОсновныеДействияФормыЗаполнитьАктДтКт()

//	Процедура выполняет заполнение ТЧ Контрагенты данными регистра остатков
//	по дебиторской задолженности
//	Вызов выполняется с аргументом Вид задолженности для замещения/заполнения данных 
//	только дебиторской задолженности.
//
Процедура КоманднаяПанельДебиторскаяЗадолженностьЗаполнитьАктИзДт(Кнопка)
	
	ЗаполнитьДокумент(Перечисления.ВидыЗадолженности.Дебиторская);

КонецПроцедуры

//	Процедура выполняет заполнение ТЧ Контрагенты данными регистра остатков
//	по кредиторской задолженности
//	Вызов выполняется с аргументом Вид задолженности для замещения/заполнения данных 
//	только кредиторской задолженности.
//
Процедура КоманднаяПанельКредиторскаяЗадолженностьЗаполнитьАктИзКт(Кнопка)
	
	ЗаполнитьДокумент(Перечисления.ВидыЗадолженности.Кредиторская);
	
КонецПроцедуры

//	Процедура выполняет запуск процедуры печати документа из
//	командной панели
//
Процедура ДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ДействияФормыПечать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	УстановитьКнопкиПечати();
	
	// Установка отбора по видам задолженности для табличных полей на соответствующих
	// закладках
	ЭлементыФормы.КонтрагентыДт.ОтборСтрок.ВидЗадолженности.Значение      = Перечисления.ВидыЗадолженности.Дебиторская;
	ЭлементыФормы.КонтрагентыДт.ОтборСтрок.ВидЗадолженности.Использование = Истина;
	ЭлементыФормы.КонтрагентыКт.ОтборСтрок.ВидЗадолженности.Значение      = Перечисления.ВидыЗадолженности.Кредиторская;
	ЭлементыФормы.КонтрагентыКт.ОтборСтрок.ВидЗадолженности.Использование = Истина;
	  	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	Если (ЭтоНовый()) Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		Ответственный = глЗначениеПеременной("глТекущийПользователь");
		ЗаполнитьСписокСчетовЗначениямиПоУмолчанию();
	Иначе
		ИтогиТекст = ПолучитьИтоги();
		Элементыформы.НадписьИтогиДт.Заголовок = ИтогиТекст.СтрокаДт;
		Элементыформы.НадписьИтогиКт.Заголовок = ИтогиТекст.СтрокаКт;
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	СтарыеЗначенияРеквизитов = Новый Структура;
	СтарыеЗначенияРеквизитов.Вставить("Организация", Организация);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,,ЭлементыФормы.КонтрагентыДт);
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
				
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры //ПриЗакрытии

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Обработчки события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		
		// заполнение табличной части ИнвентаризационнаяКомиссия
		Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ФизическиеЛица") Тогда

			СтрокаТабличнойЧасти = ИнвентаризационнаяКомиссия.Найти(ЗначениеВыбора, "ФизЛицо");

			Если НЕ (СтрокаТабличнойЧасти = Неопределено) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Физическое лицо <" + ЗначениеВыбора + "> уже подобрано!",,, СтатусСообщения.Обычное);

			Иначе
				
				НоваяСтрока = ИнвентаризационнаяКомиссия.Добавить();
				
				НоваяСтрока.ФизЛицо = ЗначениеВыбора;
				Если ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
					НоваяСтрока.Председатель = Истина;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ (СтарыеЗначенияРеквизитов.Организация = Организация) Тогда
		
		ТекстВопроса = "При изменении организации введенные ранее данные документа будут очищены. Продолжить?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
		Если (Ответ = КодВозвратаДиалога.Нет) Тогда
			Организация = СтарыеЗначенияРеквизитов.Организация;
			Возврат;
		Иначе
			Контрагенты.Очистить();
			
			ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
			Если Не ПустаяСтрока(Номер) Тогда
				МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			КонецЕсли;
			
			СтарыеЗначенияРеквизитов.Вставить("Организация", Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры // ОрганизацияПриИзменении()
 
Процедура КонтрагентыДтПослеУдаления(Элемент)
	
	// Получение структуры с текстом для формирования надписи итогов
	ИтогиТекст = ПолучитьИтоги();
	Элементыформы.НадписьИтогиДт.Заголовок = ИтогиТекст.СтрокаДт;
	
КонецПроцедуры // КонтрагентыДтПослеУдаления()

Процедура КонтрагентыКтПослеУдаления(Элемент)
	
	// Получение структуры с текстом для формирования надписи итогов
	ИтогиТекст = ПолучитьИтоги();
	Элементыформы.НадписьИтогиКт.Заголовок = ИтогиТекст.СтрокаКт;
	
КонецПроцедуры // КонтрагентыКтПослеУдаления()

Процедура СчетаРасчетовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	// Установка текста колонки Наименование ТП СписокСчетов
	ОформлениеСтроки.Ячейки.Наименование.УстановитьТекст(ДанныеСтроки.СчетРасчетов.Наименование);

КонецПроцедуры

Процедура КонтрагентыДтПодтвержденоПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.КонтрагентыДт.ТекущаяСтрока;
	Если Элемент.Значение+ТекущаяСтрока.НеПодтверждено < ТекущаяСтрока.ИстекСрокДавности Тогда
		ТекущаяСтрока.ИстекСрокДавности = Элемент.Значение+ТекущаяСтрока.НеПодтверждено;
		Сообщить("Сумма с истекшим сроком давности не может быть больше общей суммы задолженности",СтатусСообщения.Внимание);
	КонецЕсли;

	// Получение структуры с текстом для формирования надписи итогов
	ИтогиТекст = ПолучитьИтоги();
	Элементыформы.НадписьИтогиДт.Заголовок = ИтогиТекст.СтрокаДт;
	
КонецПроцедуры

Процедура КонтрагентыДтНеПодтвержденоПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.КонтрагентыДт.ТекущаяСтрока;
	Если ТекущаяСтрока.Подтверждено+ Элемент.Значение < ТекущаяСтрока.ИстекСрокДавности Тогда
		ТекущаяСтрока.ИстекСрокДавности = Элемент.Значение+ТекущаяСтрока.Подтверждено;
		Сообщить("Сумма с истекшим сроком давности не может быть больше общей суммы задолженности",СтатусСообщения.Внимание);
	КонецЕсли;
	
	// Получение структуры с текстом для формирования надписи итогов
	ИтогиТекст = ПолучитьИтоги();
	Элементыформы.НадписьИтогиДт.Заголовок = ИтогиТекст.СтрокаДт;
	
КонецПроцедуры

Процедура КонтрагентыДтИстекСрокДавностиПриИзменении(Элемент)
	ТекущаяСтрока = ЭлементыФормы.КонтрагентыДт.ТекущаяСтрока;
	Если ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено < Элемент.Значение Тогда
		Элемент.Значение = ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено;
		Сообщить("Сумма с истекшим сроком давности не может быть больше общей суммы задолженности",СтатусСообщения.Внимание);
	КонецЕсли;
	// Получение структуры с текстом для формирования надписи итогов
	ИтогиТекст = ПолучитьИтоги();
	Элементыформы.НадписьИтогиДт.Заголовок = ИтогиТекст.СтрокаДт;
	
КонецПроцедуры

Процедура КонтрагентыКтПодтвержденоПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.КонтрагентыКт.ТекущаяСтрока;
	Если Элемент.Значение+ТекущаяСтрока.НеПодтверждено < ТекущаяСтрока.ИстекСрокДавности Тогда
		ТекущаяСтрока.ИстекСрокДавности = Элемент.Значение+ТекущаяСтрока.НеПодтверждено;
		Сообщить("Сумма с истекшим сроком давности не может быть больше общей суммы задолженности",СтатусСообщения.Внимание);
	КонецЕсли;
	
	// Получение структуры с текстом для формирования надписи итогов
	ИтогиТекст = ПолучитьИтоги();
	Элементыформы.НадписьИтогиКт.Заголовок = ИтогиТекст.СтрокаКт;
	
КонецПроцедуры

Процедура КонтрагентыКтНеПодтвержденоПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.КонтрагентыКт.ТекущаяСтрока;
	Если ТекущаяСтрока.Подтверждено+ Элемент.Значение < ТекущаяСтрока.ИстекСрокДавности Тогда
		ТекущаяСтрока.ИстекСрокДавности = Элемент.Значение+ТекущаяСтрока.Подтверждено;
		Сообщить("Сумма с истекшим сроком давности не может быть больше общей суммы задолженности",СтатусСообщения.Внимание);
	КонецЕсли;
	
	// Получение структуры с текстом для формирования надписи итогов
	ИтогиТекст = ПолучитьИтоги();
	Элементыформы.НадписьИтогиКт.Заголовок = ИтогиТекст.СтрокаКт;
	
КонецПроцедуры

Процедура КонтрагентыКтИстекСрокДавностиПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.КонтрагентыКт.ТекущаяСтрока;
	Если ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено < Элемент.Значение Тогда
		Элемент.Значение = ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено;
		Сообщить("Сумма с истекшим сроком давности не может быть больше общей суммы задолженности",СтатусСообщения.Внимание);
	КонецЕсли;

	// Получение структуры с текстом для формирования надписи итогов
	ИтогиТекст = ПолучитьИтоги();
	Элементыформы.НадписьИтогиКт.Заголовок = ИтогиТекст.СтрокаКт;
	
КонецПроцедуры

Процедура КонтрагентыДтПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	// Установка текста колонки Всего по строке в ТП
	ОформлениеСтроки.Ячейки.Всего.Значение = ДанныеСтроки.Подтверждено 	 +
							  			  	 ДанныеСтроки.НеПодтверждено;

КонецПроцедуры

Процедура КонтрагентыКтПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	// Установка текста колонки Всего по строке в ТП	
	ОформлениеСтроки.Ячейки.Всего.Значение = ДанныеСтроки.Подтверждено 	 +
							  			  	 ДанныеСтроки.НеПодтверждено;

КонецПроцедуры

Процедура КонтрагентыДтПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекДанные = ЭлементыФормы.КонтрагентыДт.ТекущиеДанные;
		ТекДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская;
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентыКтПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекДанные = ЭлементыФормы.КонтрагентыКт.ТекущиеДанные;
		ТекДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ "Инвентаризационная комиссия"
//

// Обработчик события "ПриИзмененииФлажка" табличной части 
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "Председатель" Тогда
		
		Если НЕ (Элемент.ТекущиеДанные[Колонка.Имя]) Тогда
			Элемент.ТекущиеДанные[Колонка.Имя] = Истина;
		КонецЕсли;
		
		Для Каждого Строка Из ИнвентаризационнаяКомиссия Цикл
			
			Если НЕ (Строка.НомерСтроки = Элемент.ТекущиеДанные.НомерСтроки) Тогда
				Строка.Председатель = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры // ИнвентаризационнаяКомиссияПриИзмененииФлажка()

// Обработчик события "ПередУдалением" табличной части
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияПередУдалением(Элемент, Отказ)
	
	мУдаляемыйЭлементИндекс = ?(Элемент.ТекущиеДанные.Председатель,
	                            ИнвентаризационнаяКомиссия.Индекс(Элемент.ТекущаяСтрока),
								Неопределено);
	
КонецПроцедуры // ИнвентаризационнаяКомиссияПередУдалением()

// Обработчик события "ПослеУдаления" табличной части
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияПослеУдаления(Элемент)
	
	КоличествоСтрок = ИнвентаризационнаяКомиссия.Количество();
	
	Если КоличествоСтрок > 0 И НЕ (мУдаляемыйЭлементИндекс = Неопределено) Тогда
		
		ИнвентаризационнаяКомиссия[?(мУдаляемыйЭлементИндекс < КоличествоСтрок - 1, 
		                             мУдаляемыйЭлементИндекс,
		                             КоличествоСтрок - 1)].Председатель = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ИнвентаризационнаяКомиссияПослеУдаления()

// Обработчик события "ПриНачалеРедактирования" табличной части
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, 
	                                                        НоваяСтрока, 
                                                            Копирование)
	
	Если Копирование Тогда
		
		Элемент.ТекущиеДанные.ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		Элемент.ТекущиеДанные.Председатель = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ИнвентаризационнаяКомиссияПриНачалеРедактирования()

// Обработчик события "ПриИзменении" колонки "ФизЛицо" табличной части
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияФизЛицоПриИзменении(Элемент)
	
	Если ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
		
		ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	
	КонецЕсли;

КонецПроцедуры // ИнвентаризационнаяКомиссияФизЛицоПриИзменении()

// Обработчик события "ОбработкаВыбора" колонки "ФизЛицо" табличной части
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияФизЛицоОбработкаВыбора(Элемент,
                                                           ВыбранноеЗначение,
                                                           СтандартнаяОбработка)
	
	Если НЕ (Элемент.Значение = ВыбранноеЗначение) Тогда // если выбрано значение, отличное от того, что было
		
		СтрокаТабличнойЧасти = ИнвентаризационнаяКомиссия.Найти(ВыбранноеЗначение, "ФизЛицо");

		Если НЕ (СтрокаТабличнойЧасти = Неопределено) Тогда
					
			Предупреждение("Физическое лицо <" + СокрЛП(ВыбранноеЗначение) + "> уже включено в состав комиссии!", 60);
			СтандартнаяОбработка = Ложь;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИнвентаризационнаяКомиссияФизЛицоОбработкаВыбора()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели табличной
// части "Инвентаризационная комиссия", вызывает диалог подбора из справочника
// "Физические лица".
//
Процедура КоманднаяПанельИнвентаризационнаяКомиссияПодбор(Кнопка)
	
	Форма = Справочники.ФизическиеЛица.ПолучитьФормуВыбора(, ЭтаФорма);
	Форма.РежимВыбора = Истина;
	Форма.ЗакрыватьПриВыборе = Ложь;
	Форма.Открыть();

КонецПроцедуры // КоманднаяПанельИнвентаризационнаяКомиссияПодбор()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ

ЭлементыФормы.ДокументОснованиеВид.СписокВыбора.Добавить("Приказ");
ЭлементыФормы.ДокументОснованиеВид.СписокВыбора.Добавить("Постановление");
ЭлементыФормы.ДокументОснованиеВид.СписокВыбора.Добавить("Распоряжение");

