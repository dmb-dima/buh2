////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ОткрыватьНастройкуДвижений;

Перем мСписокТипов;

Перем мТекущийВидСчетаФактуры;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура устанавливает видимость для реквизитов документа 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	УказанДокументОснование = ДокументыОснования.Количество()>0 и ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование);
	СФНаАвансИлиСР = (ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс или ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу);
	
	ЭлементыФормы.Организация.ТолькоПросмотр		= УказанДокументОснование;
	ЭлементыФормы.Контрагент.ТолькоПросмотр			= УказанДокументОснование;
	ЭлементыФормы.ДоговорКонтрагента.ТолькоПросмотр	= (УказанДокументОснование И ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию) 
														Или ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу;
	ЭлементыФормы.ДоговорКонтрагента.АвтоОтметкаНезаполненного = ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс
																	Или ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент;
	Если Не ЭлементыФормы.ДоговорКонтрагента.АвтоОтметкаНезаполненного Тогда
		ЭлементыФормы.ДоговорКонтрагента.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидСчетаФактуры) Тогда
		ЭлементыФормы.ДанныеСчетаФактуры.ТекущаяСтраница = ЭлементыФормы.ДанныеСчетаФактуры.Страницы[ВидСчетаФактуры.Метаданные().ЗначенияПеречисления[Перечисления.НДСВидСчетаФактуры.Индекс(ВидСчетаФактуры)].Имя];
	КонецЕсли;
			
КонецПроцедуры // УстановитьВидимость()

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ЭтоНовый() 
		И ДополнительныеСвойства.Свойство("НайденСуществующийСчетФактура")
		И ДополнительныеСвойства.НайденСуществующийСчетФактура Тогда
		
		Отказ = Истина;
		
	Иначе
		
		Если ЗначениеЗаполнено(ДокументОснование) 
			И ДокументОснование.Метаданные().Имя = "РеализацияТоваровУслуг" 
			И ДокументОснование.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			Отказ = Истина;
			Предупреждение("При передаче на комиссию выписка счета-фактуры не требуется.");
			
		КонецЕсли;
				
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		// Установка кнопок печати
		УстановитьКнопкиПечати();
		
		// Установка кнопок заполнение ТЧ
		УстановитьКнопкиПодменюЗаполненияТЧ();
		
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если не ЗначениеЗаполнено(ВидСчетаФактуры) Тогда
		ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию;
	КонецЕсли; 
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета);
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	Если ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.НаРеализацию Тогда
		
		Если ДокументыОснования.Количество() = 0 Тогда
			ДокументыОснования.Добавить();
		КонецЕсли;
		
		Если ДатаНомерДокументовОплаты.Количество() = 0 Тогда
			ДатаНомерДокументовОплаты.Добавить();
		КонецЕсли;
		
		ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ДокументыОснования[0];
		ЭлементыФормы.ДатаНомерДокументовОплатыНаРеализацию.ТекущаяСтрока = ДатаНомерДокументовОплаты[0];
		
	КонецЕсли;
		
	Если СформированПриВводеНачальныхОстатковНДС Тогда
		//По документам сформированным вводом начальных остатков по НДС не допускаются изменения
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли; 
	
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,Контрагент,ДоговорКонтрагента,ДокументОснование");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);	
	
	УстановитьДоступныеВидыСчетаФактуры();
	
	УстановитьВидимость();
	
	Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию 
		И Не СформированПриВводеНачальныхОстатковНДС И Не ЭтаФорма.ТолькоПросмотр Тогда
		ОпределениеПараметровСчетаФактуры(ЭтотОбъект);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Если ДокументОснование <> Неопределено Тогда
			ЗаполнитьДатуИНомерВходящегоДокумента();
		КонецЕсли;
	КонецЕсли;
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Не ДокументыОснования.Количество() = 0 Тогда
				
		СтрокаСообщения = ПроверитьВозможностьЗаписиСФ(Отказ);
		
		Если Отказ Тогда
			Предупреждение(СтрокаСообщения);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Если открыли данную форму из формы документа, то там надо поменять текст
	//Если НЕ ВладелецФормы = Неопределено Тогда

	//	Если ТипЗнч(ВладелецФормы) = Тип("Форма") тогда

	//		Попытка
	//		// Надо поменять текст про счет-фактуру в форме-владельце
	//		ВладелецФормы.ЗаполнитьТекстПроСчетФактуру();
	//		Исключение
	//		КонецПопытки;
	//		
	//	КонецЕсли;
	//	
	//Иначе
		// Форма документа основания может быть открыта, требуется оповестить об обновлении текста про счет-фактуру
		Оповестить("ОбновлениеТекстаПроСчетФактуру", ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	//КонецЕсли; 
	       	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура КоманднаяПанельАвансыПоОснованию(Кнопка)
	
	Авансы.Очистить();
	ОпределениеПараметровСчетаФактурыНаАванс(Неопределено);
		
КонецПроцедуры

Процедура КоманднаяПанельАвансыПоСчетуНаОплату(Кнопка)
	
	ФормаВыбора = Документы.СчетНаОплатуПокупателю.ПолучитьФормуВыбора();
	ФормаВыбора.Отбор.Организация.Установить(
	Организация);
	ФормаВыбора.Отбор.Контрагент.Установить(Контрагент);
	ФормаВыбора.Отбор.ДоговорКонтрагента.Установить(ДоговорКонтрагента);
	СчетНаОплату = ФормаВыбора.ОткрытьМодально();
	
	ЗаполнитьПоСчетуНаОплату(СчетНаОплату, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельАвансыПоСчетуНаОплатуДобавить(Кнопка)
	
	ФормаВыбора = Документы.СчетНаОплатуПокупателю.ПолучитьФормуВыбора();
	ФормаВыбора.Отбор.Организация.Установить(
	Организация);
	ФормаВыбора.Отбор.Контрагент.Установить(Контрагент);
	ФормаВыбора.Отбор.ДоговорКонтрагента.Установить(ДоговорКонтрагента);
	СчетНаОплату = ФормаВыбора.ОткрытьМодально();
	
	ЗаполнитьПоСчетуНаОплату(СчетНаОплату, Истина);
		
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КоманднаяПанельНалоговыйАгентПоОснованию(Кнопка)
	
	Авансы.Очистить();
	ОпределениеПараметровСчетаФактурыНалоговыйАгент(Неопределено);
	
КонецПроцедуры

Процедура ЗаполнитьПоСчетуНаОплату(СчетНаОплату, РежимДобавления = Ложь)
	
	Если СчетНаОплату <> Неопределено Тогда
	
		Если Не РежимДобавления Тогда
			Авансы.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");
		КонецЕсли;
		ТаблицаАвансов = Авансы.ВыгрузитьКолонки();
		
		СтрокиКУдаления = Новый Массив;
		
		Для Каждого СтрокаАванса Из Авансы Цикл
			Если Не РежимДобавления
				Или Не ЗначениеЗаполнено(СтрокаАванса.Номенклатура) Тогда
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ПолучитьТаблицуАвансовПоСчетуНаОплату(СтрокаАванса.Сумма, 
																									СтрокаАванса.СуммаНДС, 
																									СтрокаАванса.СтавкаНДС, 
																									СчетНаОплату), ТаблицаАвансов);
				Если РежимДобавления Тогда
					СтрокиКУдаления.Добавить(СтрокаАванса);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если РежимДобавления Тогда
			Для Каждого СтрокаКУдалению Из СтрокиКУдаления Цикл
				Авансы.Удалить(СтрокаКУдалению);
			КонецЦикла;
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, Авансы);
		Иначе
			Авансы.Загрузить(ТаблицаАвансов);
		КонецЕсли;
		
		Авансы.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС"); 
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДокументыОснования,ЭлементыФормы.КоманднаяПанельДокументыОснованияНаРеализацию.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДатаНомерДокументовОплатыНаРеализацию,ЭлементыФормы.КоманднаяПанельДатаНомерДокументовОплатыНаРеализацию.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Авансы,ЭлементыФормы.КоманднаяПанельАвансы.Кнопки.Заполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.НалоговыйАгент,ЭлементыФормы.КоманднаяПанельНалоговыйАгент.Кнопки.Заполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

Процедура УстановитьДоступныеВидыСчетаФактуры()

	ЭлементыФормы.ВидСчетаФактуры.ДоступныеЗначения.Очистить();
	ЭлементыФормы.ВидСчетаФактуры.ДоступныеЗначения.Добавить(Перечисления.НДСВидСчетаФактуры.НаРеализацию);
	ЭлементыФормы.ВидСчетаФактуры.ДоступныеЗначения.Добавить(Перечисления.НДСВидСчетаФактуры.НаАванс);
	ЭлементыФормы.ВидСчетаФактуры.ДоступныеЗначения.Добавить(Перечисления.НДСВидСчетаФактуры.НалоговыйАгент);
	Если Дата < '20111001' Тогда
		ЭлементыФормы.ВидСчетаФактуры.ДоступныеЗначения.Добавить(Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу);
	КонецЕсли;

КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	Если Дата >= '20111001'
		И ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу Тогда
		ВидСчетаФактуры = Неопределено;
	КонецЕсли;
	РассчитатьСуммуДокумента();
	
	УстановитьДоступныеВидыСчетаФактуры();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	КонтрагентПриИзменении(Элемент);
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент,Организация, СписокВидовДоговоров);
	
    ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокВидовДоговоров = Новый СписокЗначений;
	Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Иначе		
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
											СписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура ПриИзмененииДоговора()
	
	Если ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		ВалютаДокумента = ?(ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, мВалютаРегламентированногоУчета, ДоговорКонтрагента.ВалютаВзаиморасчетов);
		РассчитатьСуммуДокумента();

	КонецЕсли;
	
КонецПроцедуры

Процедура ВидСчетаФактурыПриИзменении(Элемент)
	
	СписокТипов = ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактуры);
	
	Если мТекущийВидСчетаФактуры <> ВидСчетаФактуры 
		И ДокументыОснования.Количество() <> 0
		И ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование)
		И СписокТипов.Найти(ТипЗнч(ДокументыОснования[0].ДокументОснование)) = Неопределено Тогда
		
		ТекстВопроса = "Выбранный документа-основание не соответствует виду счета-фактуры. 
						|Для продолжения требуется очистить документ-основание. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ВидСчетаФактуры = мТекущийВидСчетаФактуры;
			Возврат;
		Иначе
			ДокументыОснования.Очистить();
			Если ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.НаРеализацию Тогда
				ДокументыОснования.Добавить();
				ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ДокументыОснования[0];
			КонецЕсли;
			ДатаНомерДокументовОплаты.Очистить();
		КонецЕсли;
			
	КонецЕсли;
	
	Если ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.НаРеализацию 
		И ДокументыОснования.Количество() > 1 Тогда
		
		ТекстВопроса = "Несколько документов-оснований может быть указано только для счета-фактуры на реализацию. 
						|Для продолжения требуется очистить все документы-основания, кроме первого. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ВидСчетаФактуры = мТекущийВидСчетаФактуры;
			Возврат;
		Иначе
			ДокументОснованиеПервый = ДокументыОснования[0].ДокументОснованиеПервый;
			ДокументыОснования.Очистить();
			ДокументыОснования.Добавить();
			ДокументыОснования[0].ДокументОснование = ДокументОснованиеПервый;
			ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ДокументыОснования[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.НаРеализацию Тогда
		Если ДокументыОснования.Количество() = 0 Тогда
			ДокументыОснования.Добавить();
			ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ДокументыОснования[0];
		КонецЕсли;
		Если ДатаНомерДокументовОплаты.Количество() = 0 Тогда
			ДатаНомерДокументовОплаты.Добавить();
			ЭлементыФормы.ДатаНомерДокументовОплатыНаРеализацию.ТекущаяСтрока = ДатаНомерДокументовОплаты[0];
		КонецЕсли;
	Иначе
		ДатаНомерДокументовОплаты.Очистить();
	КонецЕсли;
	
	Если ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.НаАванс И
		ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		Авансы.Очистить();
	КонецЕсли;
	
	мСписокТипов = ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактуры);
	
	Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу Тогда 
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
			РассчитатьСуммуДокумента();
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДоговорКонтрагента = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	
	Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию Тогда
		ОпределениеПараметровСчетаФактуры(Неопределено);
	КонецЕсли;
		
	УстановитьВидимость();

КонецПроцедуры

Процедура ВидСчетаФактурыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мТекущийВидСчетаФактуры = ВидСчетаФактуры;
	
КонецПроцедуры

Процедура ВидСчетаФактурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу И ВыбранноеЗначение <> ВидСчетаФактуры Тогда
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент,Организация, СписокВидовДоговоров);
	КонецЕсли;
	Если не ((ВыбранноеЗначение = Перечисления.НДСВидСчетаФактуры.НаАванс) = (ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс)) Тогда
		СтандартнаяОбработка = Ложь;
		ВидСчетаФактуры = ВыбранноеЗначение;
		Если СокрЛП(Номер)<>"" Тогда
			УстановитьНовыйНомер();
		КонецЕсли;
		ВидСчетаФактурыПриИзменении(Элемент)	
	КонецЕсли; 
	
КонецПроцедуры

Процедура НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка, ВыбратьТекущуюКолонку = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТипов = ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактуры);
	
	Отбор = Новый Структура();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Отбор.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Отбор.Вставить("ДокументыПоДоговоруКонтрагента", ДоговорКонтрагента);
	КонецЕсли;
	
	Отбор.Вставить("ПоставщикуВыставляетсяСчетФактураНаВозврат", Истина);
	Отбор.Вставить("ПокупателемВыставляетсяСчетФактураНаВозврат", Ложь);
	
	Если ВыбратьТекущуюКолонку Тогда
	    ЭлементыФормы.ДокументыОснования.ТекущаяКолонка = ЭлементыФормы.ДокументыОснования.Колонки.ДокументОснование;
	КонецЕсли; 
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "ДокументыОснования", СписокТипов);
	
КонецПроцедуры
 
Процедура РассчитатьСуммуДокумента()
	
	Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс 
		Или ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		Сумма = Авансы.Итог("Сумма");
	КонецЕсли;
	
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма,
									мВалютаРегламентированногоУчета, ВалютаДокумента, 1, СтруктураКурсаВзаиморасчетов.Курс, 
									1, СтруктураКурсаВзаиморасчетов.Кратность);
									
	Иначе
									
		СуммаДокумента = Сумма;
		
	КонецЕсли;
	
КонецПроцедуры

// На реализацию

Процедура ДокументыОснованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущаяСтрока.ДокументОснование = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ДокументыОснованияДокументОснованиеПриИзменении(Элемент)
	
	ТекущееЗначение = Элемент.Значение;
	
	Если Не ЗначениеЗаполнено(ТекущееЗначение) Тогда
	    Возврат;
	КонецЕсли; 
	
	СтрокаДокумента = ДокументыОснования.Найти(ТекущееЗначение, "ДокументОснование");
	УжеВыбран = Ложь;
	
	Если СтрокаДокумента <> ЭлементыФормы.ДокументыОснования.ТекущаяСтрока Тогда
		
		Сообщить("Данный документ уже выбран в качестве документа-основания! Повторный выбор не допускается.");
		Элемент.Значение = Неопределено;
		
	Иначе
		
		ОпределениеПараметровСчетаФактуры(ЭтотОбъект);
		
	КонецЕсли;
	
	Ответ = Вопрос("Перезаполнить данные о платежно-расчетных документах?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДатаНомерДокументовОплаты.Очистить();
		ЗаполнитьДатуИНомерВходящегоДокумента();
		
	КонецЕсли;  
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДокументыОснованияДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ДокументыОснованияПослеУдаления(Элемент)
	
	ОпределениеПараметровСчетаФактуры(ЭтотОбъект);

КонецПроцедуры

// На аванс

Процедура ДокументОснованиеНаАвансНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

Процедура ДокументОснованиеНаАвансПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;	
	
	Авансы.Очистить();
	ОпределениеПараметровСчетаФактурыНаАванс(Неопределено);
		
	Ответ = Вопрос("Перезаполнить данные о платежно-расчетном документе?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДатаНомерДокументовОплаты.Очистить();
		Если ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
			НомерПлатежноРасчетногоДокумента = Элемент.Значение.НомерВходящегоДокумента;
			ДатаПлатежноРасчетногоДокумента =  Элемент.Значение.ДатаВходящегоДокумента;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Элемент.Значение);
			ДатаПлатежноРасчетногоДокумента =  Элемент.Значение.Дата;
		Иначе
			НомерПлатежноРасчетногоДокумента = "";
			ДатаПлатежноРасчетногоДокумента = Неопределено;
		КонецЕсли;
		
		СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
		СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
		СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;
		
		ЭлементыФормы.ДатаНомерДокументовОплатыНаРеализацию.ТекущаяСтрока = ДатаНомерДокументовОплаты[0];
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АвансыПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

Процедура АвансыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

Процедура АвансыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Авансы.ТекущиеДанные;

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) 
		И СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура АвансыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Авансы.ТекущиеДанные;
	ТекущиеДанные.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	
КонецПроцедуры

Процедура АвансыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Авансы.ТекущиеДанные;
	ТекущиеДанные.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	
КонецПроцедуры

// На суммовую разницу

Процедура ДокументОснованиеНаСуммовуюРазницуНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

Процедура ДокументОснованиеНаСуммовуюРазницуПриИзменении(Элемент)
	
	Ответ = Вопрос("Перезаполнить данные о платежно-расчетном документе?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДатаНомерДокументовОплаты.Очистить();
		Если ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
			НомерПлатежноРасчетногоДокумента = Элемент.Значение.НомерВходящегоДокумента;
			ДатаПлатежноРасчетногоДокумента =  Элемент.Значение.ДатаВходящегоДокумента;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Элемент.Значение);
			ДатаПлатежноРасчетногоДокумента =  Элемент.Значение.Дата;
		Иначе
			НомерПлатежноРасчетногоДокумента = "";
			ДатаПлатежноРасчетногоДокумента = Неопределено;
		КонецЕсли;
		
		СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
		СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
		СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;
		
		ЭлементыФормы.ДатаНомерДокументовОплатыНаРеализацию.ТекущаяСтрока = ДатаНомерДокументовОплаты[0];
		
	КонецЕсли;
КонецПроцедуры

Процедура СуммаПриИзменении(Элемент)
	
	СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Элемент)
	
	СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

// Налоговый агент

Процедура ДокументОснованиеНалоговыйАгентНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

Процедура ДокументОснованиеНалоговыйАгентПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;	
	
	Авансы.Очистить();
	
	ОпределениеПараметровСчетаФактурыНалоговыйАгент(Неопределено);
		
	Ответ = Вопрос("Перезаполнить данные о платежно-расчетном документе?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДатаНомерДокументовОплаты.Очистить();
		Если ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
			НомерПлатежноРасчетногоДокумента = Элемент.Значение.НомерВходящегоДокумента;
			ДатаПлатежноРасчетногоДокумента =  Элемент.Значение.ДатаВходящегоДокумента;
		Иначе
			НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Элемент.Значение);
			ДатаПлатежноРасчетногоДокумента = Элемент.Значение.Дата;
		КонецЕсли;
		
		СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
		СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
		СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;
		
		ЭлементыФормы.ДатаНомерДокументовОплатыНаРеализацию.ТекущаяСтрока = ДатаНомерДокументовОплаты[0];
		
	КонецЕсли;
	
	Если Авансы.Количество() = 0 Тогда
		Авансы.Добавить();
	КонецЕсли;
	СписокАвансы			 = (Авансы.Количество()>1);
	ЭлементыФормы.Авансы.ТекущаяСтрока = Авансы[0];

КонецПроцедуры

Процедура НалоговыйАгентПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

Процедура НалоговыйАгентПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

Процедура НалоговыйАгентНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.НалоговыйАгент.ТекущиеДанные;

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) 
		И СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура НалоговыйАгентСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.НалоговыйАгент.ТекущиеДанные;
	ТекущиеДанные.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	
КонецПроцедуры

Процедура НалоговыйАгентСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.НалоговыйАгент.ТекущиеДанные;
	ТекущиеДанные.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	
КонецПроцедуры

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
