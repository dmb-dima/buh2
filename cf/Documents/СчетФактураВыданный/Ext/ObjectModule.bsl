Перем мНадписьПредоплата;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мОбновлятьРеквизитыПриЗаписи Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура для СФ определяет его сумму, валюту и контрагента
// на основе анализа данных документов оснований
//
Процедура ОпределениеПараметровСчетаФактуры(ИсточникДанных) Экспорт
	
	Если ДокументыОснования.Количество()=0 
		или не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) тогда
		// Основание не выбрано, параметры не определяем
		СуммаДокумента = 0;
		Возврат;
	КонецЕсли; 
	
	ПараметрыСФ = Неопределено;
	
	УчетНДС.ПолучитьПараметрыСчетаФактуры(ЭтотОбъект, мВалютаРегламентированногоУчета, ПараметрыСФ);
	
	Если не ПараметрыСФ.Организация = Неопределено 
		и не ПараметрыСФ.Организация = Организация 
		Тогда
		Номер = "";
		Организация		  = ПараметрыСФ.Организация;
	КонецЕсли; 			
	Если не ПараметрыСФ.Контрагент = Неопределено 
		и не ПараметрыСФ.Контрагент = Контрагент 
		Тогда
		Контрагент		  = ПараметрыСФ.Контрагент;
	КонецЕсли; 			
	Если не ПараметрыСФ.Договор = Неопределено 
		и не ПараметрыСФ.Договор = ДоговорКонтрагента 
		Тогда
		ДоговорКонтрагента		  = ПараметрыСФ.Договор;
	КонецЕсли; 			
	Если не СуммаДокумента = ПараметрыСФ.СуммаДокумента Тогда
		СуммаДокумента    = ПараметрыСФ.СуммаДокумента;
	КонецЕсли; 			
	Если не ПараметрыСФ.ВалютаДокумента = Неопределено 
		и не ВалютаДокумента = ПараметрыСФ.ВалютаДокумента 
		Тогда
		ВалютаДокумента   = ПараметрыСФ.ВалютаДокумента;
	КонецЕсли;
	
	Если ДокументыОснования.Количество() = 1 и не ДокументыОснования[0].ДокументОснование = ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли; 
	
КонецПроцедуры // ОпределениеПараметровСчетаФактуры()

// Процедура для определения параметров счета-фактуры на аванс
Процедура ОпределениеПараметровСчетаФактурыНаАванс(ДокументЗаполнен) Экспорт
	
	Если ДокументыОснования.Количество()=0 
		Или Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) тогда
		// Основание не выбрано, параметры не определяем
		Возврат;
	КонецЕсли; 
	
	Если Не ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", ДокументыОснования[0].ДокументОснование.Метаданные()) Тогда
		Возврат;
	Иначе
		Контрагент = ДокументыОснования[0].ДокументОснование.Контрагент;
	КонецЕсли; 
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС18_118);
	
	СтрокаСообщения = "";
	ОшибкаПриЗаполнении = Ложь;
	ДокументЗаполнен = Ложь;
	
	ДокументАванса = ДокументыОснования[0].ДокументОснование;
	ДокументАвансаМетаданные = ДокументАванса.Метаданные();
		
	Если ТипЗнч(ДокументАванса) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтчетКомиссионераОПродажахДенежныеСредства.СтавкаНДС,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента,
			|	СУММА(ОтчетКомиссионераОПродажахДенежныеСредства.Сумма + ВЫБОР
			|			КОГДА ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.СуммаВключаетНДС = ИСТИНА
			|				ТОГДА 0
			|			ИНАЧЕ ОтчетКомиссионераОПродажахДенежныеСредства.СуммаНДС
			|		КОНЕЦ) КАК Сумма,
			|	СУММА(ОтчетКомиссионераОПродажахДенежныеСредства.СуммаНДС) КАК СуммаНДС,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах.ДенежныеСредства КАК ОтчетКомиссионераОПродажахДенежныеСредства
			|ГДЕ
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка = &ДокументОснование
			|	И ОтчетКомиссионераОПродажахДенежныеСредства.ВидОтчетаПоПлатежам = &ВидОтчетаПоПлатежамАванс
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.СтавкаНДС,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КурсВзаиморасчетов,
			|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КратностьВзаиморасчетов";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументыОснования[0].ДокументОснование);
		Запрос.УстановитьПараметр("ВидОтчетаПоПлатежамАванс", Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.Дата >= '20060101' 
					И Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					// НДС с авансов под экспортные поставки не начисляется
					Продолжить;
				ИначеЕсли Выборка.Дата >= '20080101' 
					И Выборка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
					Продолжить;
				КонецЕсли;
				
				ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
				СтавкаНДС			= ?(ЗначениеЗаполнено(СоответствиеСтавок[Выборка.СтавкаНДС]), СоответствиеСтавок[Выборка.СтавкаНДС], Перечисления.СтавкиНДС.НДС18_118);;
				
				Сумма 			= Выборка.Сумма;
				СуммаНДС 		= Выборка.СуммаНДС;
				СуммаДокумента 	= Сумма;
				
				Если Выборка.РасчетыВУсловныхЕдиницах 
					Или Не ЗначениеЗаполнено(Выборка.ВалютаВзаиморасчетов) 
					Или Выборка.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета 
					Тогда
					ВалютаДокумента = мВалютаРегламентированногоУчета;
					ВалютнаяСумма = Выборка.Сумма;
				Иначе
					ВалютнаяСумма  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
											мВалютаРегламентированногоУчета,
											Выборка.ВалютаВзаиморасчетов, 1, 
											Выборка.КурсВзаиморасчетов, 1,
											Выборка.КратностьВзаиморасчетов);

					ВалютаДокумента = Выборка.ВалютаВзаиморасчетов;
				КонецЕсли; 
				
				ОшибкаПриЗаполнении = Ложь;
				СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
				Если ОшибкаПриЗаполнении Тогда
					СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Иначе
					ДокументЗаполнен = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	
	ИначеЕсли ДокументАвансаМетаданные.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		Если ДокументАвансаМетаданные.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("СчетУчетаРасчетовПоАвансам") = Неопределено Тогда
			Возврат;
		КонецЕсли;
	    	
		Запрос = Новый Запрос;
		
		МассивСубконто = Новый Массив;
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		
		Запрос.УстановитьПараметр("СчетУчетаРасчетовПоАвансам", ДокументАванса.РасшифровкаПлатежа.ВыгрузитьКолонку("СчетУчетаРасчетовПоАвансам"));
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", ДокументАванса.РасшифровкаПлатежа.ВыгрузитьКолонку("СчетУчетаРасчетовСКонтрагентом"));
		Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
		Запрос.УстановитьПараметр("СчетУчетаРасходов", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
		Запрос.УстановитьПараметр("ДокументОснование", ДокументАванса);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		ТекстЗапросаАванс =
			"ВЫБРАТЬ
			|	ХозрасчетныйОбороты.СуммаОборот КАК СуммаАванса,
			|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот КАК ВалютнаяСуммаАванса,
			|	ХозрасчетныйОбороты.КорСубконто1 КАК Контрагент,
			|	ХозрасчетныйОбороты.КорСубконто2 КАК ДоговорКонтрагента,
			|	ХозрасчетныйОбороты.КорСубконто2.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
			|	ХозрасчетныйОбороты.КорСчет КАК СчетУчетаРасчетовПоАвансам,
			|	ХозрасчетныйОбороты.ВалютаКор КАК ВалютаРасчетов,
			|	ИСТИНА КАК ЭтоНаАванс
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, , , КорСубконто1 = &Контрагент, КорСчет В (&СчетУчетаРасчетовПоАвансам), &МассивСубконто) КАК ХозрасчетныйОбороты
			|ГДЕ
			|	ХозрасчетныйОбороты.Регистратор = &ДокументОснование";
		ТекстЗапросаСуммовыеРазницы =
			"ВЫБРАТЬ
			|	ХозрасчетныйОбороты.СуммаОборот,
			|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот,
			|	ХозрасчетныйОбороты.Субконто1,
			|	ХозрасчетныйОбороты.Субконто2,
			|	ХозрасчетныйОбороты.Субконто2.РасчетыВУсловныхЕдиницах,
			|	ХозрасчетныйОбороты.Счет,
			|	ХозрасчетныйОбороты.Валюта,
			|	ЛОЖЬ
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			,
			|			,
			|			Регистратор,
			|			Счет В (&СчетУчетаРасчетовСКонтрагентом),
			|			&МассивСубконто,
			|			Субконто1 = &Контрагент
			|				И КорСубконто1 = ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ),
			|			КорСчет В (&СчетУчетаРасходов),
			|			) КАК ХозрасчетныйОбороты
			|ГДЕ
			|	ХозрасчетныйОбороты.Регистратор = &ДокументОснование";
		
		Запрос.Текст = ТекстЗапросаАванс;
		Если Дата < '20111001' Тогда
			Запрос.Текст = Запрос.Текст
			+ "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|"
			+ ТекстЗапросаСуммовыеРазницы;
		КонецЕсли;
		
		Результат = Запрос.Выполнить();

		Если Не Результат.Пустой() Тогда
			
			ЕстьСчетНаОплату = ДокументАвансаМетаданные.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("СчетНаОплату") <> Неопределено;
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() И Не ДокументЗаполнен Цикл
				
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютаРасчетов) или Выборка.РасчетыВУсловныхЕдиницах Тогда
					//Незаполненное значение приравнивается к валюте регл. учета
					ВалютаДокумента = мВалютаРегламентированногоУчета;	
				Иначе
					ВалютаДокумента = Выборка.ВалютаРасчетов;     
				КонецЕсли; 
				
				ТаблицаПоСтавкам = Новый ТаблицаЗначений();
				ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю"));
				
				Для Каждого СтрПлатежа Из ДокументАванса.РасшифровкаПлатежа Цикл
					
					Если СтрПлатежа.ДоговорКонтрагента = Выборка.ДоговорКонтрагента 
						И ((Выборка.ЭтоНаАванс И СтрПлатежа.СчетУчетаРасчетовПоАвансам = Выборка.СчетУчетаРасчетовПоАвансам) 
							ИЛИ (Не Выборка.ЭтоНаАванс И СтрПлатежа.СчетУчетаРасчетовСКонтрагентом = Выборка.СчетУчетаРасчетовПоАвансам)) Тогда
							
						Если СоответствиеСтавок[СтрПлатежа.СтавкаНДС] = Неопределено Тогда
							ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
						Иначе
							ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
						КонецЕсли;
						
						СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
						СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
						СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
						СтрокаПоСтавке.ВалютнаяСумма = СтрПлатежа.СуммаПлатежа;
						
						Если ЕстьСчетНаОплату Тогда
							СтрокаПоСтавке.СчетНаОплату = СтрПлатежа.СчетНаОплату;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ТаблицаПоСтавкам.Свернуть("СтавкаНДС, СчетНаОплату","Сумма, ВалютнаяСумма");
				
				//Распределение суммы рег учета
				МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(Выборка.СуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
				Если не МассивСумм = Неопределено Тогда
					ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
				Иначе
					МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
				КонецЕсли; 
				
				//Распределение валютной суммы
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютнаяСуммаАванса) или ВалютаДокумента  = мВалютаРегламентированногоУчета Тогда
					Если не МассивСумм = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				Иначе
					МассивСуммВал = ОбщегоНазначения.РаспределитьПропорционально(Выборка.ВалютнаяСуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("ВалютнаяСумма"));
					Если не МассивСуммВал = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСуммВал,"ВалютнаяСумма");
					Иначе
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				КонецЕсли; 
				
					Если Выборка.ЭтоНаАванс Тогда
						ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс;
					Иначе 
						ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу;
					КонецЕсли;
					
					ВалютнаяСумма = 0;
					Если Выборка.ЭтоНаАванс Тогда
						Сумма = 0;
						Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
							
							Если ДокументАванса.Дата >= '20060101' 
								И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
								// НДС с авансов под экспортные поставки не начисляется
								Продолжить;
							ИначеЕсли ДокументАванса.Дата >= '20080101' 
								И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
								// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
								Продолжить;
							КонецЕсли;
							
							Контрагент = Выборка.Контрагент;
							ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
							Сумма				= Сумма + СтрокаПоСтавке.Сумма;
							ВалютнаяСумма		= ВалютнаяСумма + СтрокаПоСтавке.ВалютнаяСумма;
							
							СтавкаНДС = ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС]), СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], Перечисления.СтавкиНДС.НДС18_118);
							ТаблицаАвансов = ПолучитьТаблицуАвансовПоСчетуНаОплату(СтрокаПоСтавке.Сумма, 
																	УчетНДС.РассчитатьСуммуНДС(СтрокаПоСтавке.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС)), 
																	СтавкаНДС, 
																	СтрокаПоСтавке.СчетНаОплату);
							ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, Авансы);							
							ОшибкаПриЗаполнении = Ложь;
							
						КонецЦикла; // Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
						
						Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
							СуммаДокумента = Сумма;
						Иначе
							СуммаДокумента = ВалютнаяСумма;
						КонецЕсли;
						
						СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
						Если ОшибкаПриЗаполнении Тогда
							СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
						Иначе
							ДокументЗаполнен = Истина;
							Прервать;
						КонецЕсли;
					Иначе	
						Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
							
							Контрагент 			= Выборка.Контрагент;
							ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
							Сумма				= СтрокаПоСтавке.Сумма;
							ВалютнаяСумма		= СтрокаПоСтавке.ВалютнаяСумма;
							СтавкаНДС			= ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС]), СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], Перечисления.СтавкиНДС.НДС18_118);;
							СуммаНДС			= УчетНДС.РассчитатьСуммуНДС(Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
							СуммаДокумента		= Сумма;
							ОшибкаПриЗаполнении = Ложь;
							СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
							Если ОшибкаПриЗаполнении Тогда
								СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
							Иначе
								ДокументЗаполнен = Истина;
								Прервать;
							КонецЕсли;
							
						КонецЦикла; // Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
					КонецЕсли;
			
			КонецЦикла; // Пока Выборка.Следующий() Цикл
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОшибкаПриЗаполнении Тогда
		ДоговорКонтрагента = Неопределено;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Сумма = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		СуммаДокумента = 0;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуАвансовПоСчетуНаОплату(Сумма, СуммаНДС, СтавкаНДС, СчетНаОплату) Экспорт
	
	ТаблицаРезультата = Авансы.ВыгрузитьКолонки();
	
	Если ЗначениеЗаполнено(СчетНаОплату) Тогда

		СоответствиеСтавок = Новый Соответствие;
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20);
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
		СтавкиНДС = Новый СписокЗначений;
		СтавкиНДС.Добавить(СтавкаНДС);
		СтавкиНДС.Добавить(СоответствиеСтавок[СтавкаНДС]);
		Запрос.УстановитьПараметр("СтавкиНДС", СтавкиНДС);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
		               |	"""" КАК Содержание,
		               |	СчетНаОплатуПокупателюТовары.СтавкаНДС КАК СтавкаНДС,
		               |	СчетНаОплатуПокупателюТовары.СуммаНДС КАК СуммаНДС,
		               |	ВЫБОР
		               |		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС
		               |			ТОГДА СчетНаОплатуПокупателюТовары.Сумма
		               |		ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС
		               |	КОНЕЦ КАК Сумма,
		               |	ВЫБОР
		               |		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС
		               |			ТОГДА СчетНаОплатуПокупателюТовары.Сумма - СчетНаОплатуПокупателюТовары.СуммаНДС
		               |		ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма
		               |	КОНЕЦ КАК СуммаБезНДС,
		               |	СчетНаОплатуПокупателюТовары.НомерСтроки КАК НомерСтроки,
		               |	СчетНаОплатуПокупателюТовары.Ссылка.ВалютаДокумента,
		               |	1 КАК ID
		               |ИЗ
		               |	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
		               |ГДЕ
		               |	СчетНаОплатуПокупателюТовары.Ссылка = &СчетНаОплату
		               |	И СчетНаОплатуПокупателюТовары.СтавкаНДС В(&СтавкиНДС)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СчетНаОплатуПокупателюУслуги.Номенклатура,
		               |	СчетНаОплатуПокупателюУслуги.Содержание,
		               |	СчетНаОплатуПокупателюУслуги.СтавкаНДС,
		               |	СчетНаОплатуПокупателюУслуги.СуммаНДС,
		               |	ВЫБОР
		               |		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС
		               |			ТОГДА СчетНаОплатуПокупателюУслуги.Сумма
		               |		ИНАЧЕ СчетНаОплатуПокупателюУслуги.Сумма + СчетНаОплатуПокупателюУслуги.СуммаНДС
		               |	КОНЕЦ,
		               |	ВЫБОР
		               |		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС
		               |			ТОГДА СчетНаОплатуПокупателюУслуги.Сумма - СчетНаОплатуПокупателюУслуги.СуммаНДС
		               |		ИНАЧЕ СчетНаОплатуПокупателюУслуги.Сумма
		               |	КОНЕЦ,
		               |	СчетНаОплатуПокупателюУслуги.НомерСтроки,
		               |	СчетНаОплатуПокупателюУслуги.Ссылка.ВалютаДокумента,
		               |	2
		               |ИЗ
		               |	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
		               |ГДЕ
		               |	СчетНаОплатуПокупателюУслуги.Ссылка = &СчетНаОплату
		               |	И СчетНаОплатуПокупателюУслуги.СтавкаНДС В(&СтавкиНДС)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ID,
		               |	НомерСтроки";
					   
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() <> 0 Тогда
			
			Результат.Колонки.Добавить("СуммаРаспределение", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			Результат.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(Сумма, Результат.ВыгрузитьКолонку("Сумма")), "СуммаРаспределение");
			
			МассивРаспределения = Новый Массив;
			
			Для Каждого СтрокаРезультата Из Результат Цикл
				
				Если ДокументыОснования.Количество() = 0
					Или Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
					СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРезультата.ВалютаДокумента, Дата);
				Иначе
					СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРезультата.ВалютаДокумента, ДокументыОснования[0].ДокументОснование.Дата);
				КонецЕсли;
				
				Если СтрокаРезультата.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
					СтрокаРезультата.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.Сумма, 
																						СтрокаРезультата.ВалютаДокумента, мВалютаРегламентированногоУчета,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
					СтрокаРезультата.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаРезультата.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаРезультата.СтавкаНДС));
					СтрокаРезультата.СуммаБезНДС = СтрокаРезультата.Сумма - СтрокаРезультата.СуммаНДС;
				КонецЕсли;
				
				МассивРаспределения.Очистить();
				МассивРаспределения.Добавить(СтрокаРезультата.СуммаБезНДС);
				МассивРаспределения.Добавить(СтрокаРезультата.СуммаНДС);
				
				РезультатРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СтрокаРезультата.СуммаРаспределение, МассивРаспределения);
				
				Если Не РезультатРаспределения = Неопределено Тогда
					
					СтрокаРезультата.СуммаНДС = Мин(СтрокаРезультата.СуммаНДС, РезультатРаспределения[1]);
					СтрокаРезультата.СуммаБезНДС = Мин(СтрокаРезультата.СуммаБезНДС, РезультатРаспределения[0]); 
					СтрокаРезультата.Сумма = СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.СуммаНДС; 

					ДобавитьСтрокуАвансы(ТаблицаРезультата, СтрокаРезультата.Номенклатура, СтрокаРезультата.Содержание, СтрокаРезультата.Сумма, СтрокаРезультата.СуммаНДС, СтавкаНДС);
					Сумма = Сумма - СтрокаРезультата.Сумма;
					СуммаНДС = СуммаНДС - СтрокаРезультата.СуммаНДС;
					
				КонецЕсли;
								
			КонецЦикла;	
		КонецЕсли;
		
		Если Сумма <> 0 Тогда
			ДобавитьСтрокуАвансы(ТаблицаРезультата, ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, , Сумма, СуммаНДС, СтавкаНДС);
		КонецЕсли;
		
	Иначе
		ДобавитьСтрокуАвансы(ТаблицаРезультата, ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, , Сумма, СуммаНДС, СтавкаНДС);
	КонецЕсли;
	
	ТаблицаРезультата.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС"); 
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Процедура ДобавитьСтрокуАвансы(ТаблицаРезультата, Номенклатура, Содержание = "", Сумма, СуммаНДС, СтавкаНДС)
	
	НоваяСтрока = ТаблицаРезультата.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.Содержание = Содержание;
	
	Если ПустаяСтрока(НоваяСтрока.Содержание)
		И ЗначениеЗаполнено(НоваяСтрока.Номенклатура)
		И НоваяСтрока.Номенклатура.Услуга Тогда
			НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.НаименованиеПолное;
	КонецЕсли;
		
	НоваяСтрока.Сумма     = Сумма;
	НоваяСтрока.СуммаНДС  = СуммаНДС;
	НоваяСтрока.СтавкаНДС = СтавкаНДС;
		
КонецПроцедуры

Процедура ОпределениеПараметровСчетаФактурыНалоговыйАгент(ДокументЗаполнен) Экспорт
	
	Если ДокументыОснования.Количество()=0 
		Или Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) тогда
		// Основание не выбрано, параметры не определяем
		Возврат;
	КонецЕсли; 
	
	ВалютаДокумента = мВалютаРегламентированногоУчета;	
	ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент;
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС18_118);
	
	СтрокаСообщения = "";
	ОшибкаПриЗаполнении = Ложь;
	ДокументЗаполнен = Ложь;
	ТекущийДоговорКонтрагента = ДоговорКонтрагента;
		
	ДокументОплаты = ДокументыОснования[0].ДокументОснование;
	ДокументОплатыМетаданные = ДокументОплаты.Метаданные();

	Запрос = Новый Запрос;
	
	Если ДокументОплатыМетаданные.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		Запрос.УстановитьПараметр("СчетУчетаРасчетовПоАвансам", ДокументОплаты.РасшифровкаПлатежа.ВыгрузитьКолонку("СчетУчетаРасчетовПоАвансам"));
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", ДокументОплаты.РасшифровкаПлатежа.ВыгрузитьКолонку("СчетУчетаРасчетовСКонтрагентом"));
		Запрос.УстановитьПараметр("ОтбиратьПоСчетам", Истина);
	Иначе
		Запрос.УстановитьПараметр("СчетУчетаРасчетовПоАвансам", Неопределено);
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", Неопределено);
		Запрос.УстановитьПараметр("ОтбиратьПоСчетам", Ложь);
	КонецЕсли;
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОплаты);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОплаты,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК ДоговорКонтрагента
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	               |			,
	               |			,
	               |			Регистратор,
	               |			(НЕ &ОтбиратьПоСчетам)
	               |				ИЛИ (СчетДт В (&СчетУчетаРасчетовПоАвансам)
	               |					ИЛИ СчетДт В (&СчетУчетаРасчетовСКонтрагентом)),
	               |			&ВидыСубконто,
	               |			(НЕ СчетКт.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)),
	               |			,
	               |			СубконтоДт2.УчетАгентскогоНДС
	               |				И СубконтоДт2.НалоговыйАгентПоОплате) КАК ХозрасчетныйОборотыДтКт
	               |ГДЕ
	               |	ХозрасчетныйОборотыДтКт.Регистратор = &ДокументОснование";
				   
	Результат = Запрос.Выполнить();

	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Сумма = 0;
		Пока Выборка.Следующий() И Не ДокументЗаполнен Цикл
			
			Контрагент = Выборка.Контрагент;
			ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
			СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
			СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Выборка.СуммаОплаты, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
			Сумма = Сумма + Выборка.СуммаОплаты + СуммаНДС;
			
			ТаблицаОплат = ПолучитьТаблицуАвансовПоСчетуНаОплату(Выборка.СуммаОплаты + СуммаНДС, СуммаНДС, СтавкаНДС, Неопределено);
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаОплат, Авансы);							
			ОшибкаПриЗаполнении = Ложь;
						
			СуммаДокумента = Сумма;
			ВалютнаяСумма = Сумма;
					
			СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
			Если ОшибкаПриЗаполнении Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
			Иначе
				ДокументЗаполнен = Истина;
				Прервать;
			КонецЕсли;
		
		КонецЦикла; // Пока Выборка.Следующий() Цикл
	КонецЕсли;
	
	Если ОшибкаПриЗаполнении Тогда
		ДоговорКонтрагента = ТекущийДоговорКонтрагента;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Сумма = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		СуммаДокумента = 0;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактурыСписка) Экспорт
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	// {ОбособленныеПодразделения
	СписокТипов.Добавить(Тип("ДокументСсылка.АвизоРасчетыВходящее"));
	// }ОбособленныеПодразделения 
	
	Если ВидСчетаФактурыСписка = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу Тогда
		// Список типов не требует корректировки
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.НДСВидСчетаФактуры.НаРеализацию Тогда 
		// Типы документов оплаты исключаются из состава доступных типом.
		// Дополним типами, не выбираемыми вручную
		СписокТипов.Добавить(Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом"));
		СписокТипов.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
		СписокТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ОказаниеУслуг"));
		
		СписокТипов = Новый ОписаниеТипов(ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип, ,СписокТипов);
		СписокТипов = СписокТипов.Типы();
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда 
		СписокТипов.Очистить();
		СписокТипов.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
		СписокТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		// {ОбособленныеПодразделения
		СписокТипов.Добавить(Тип("ДокументСсылка.АвизоРасчетыВходящее"));
		// }ОбособленныеПодразделения 
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

Процедура ЗаполнитьДатуИНомерВходящегоДокумента(ОбрабатываемыйДокументОснование = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ОбрабатываемыйДокументОснование = Неопределено Тогда
		Запрос.УстановитьПараметр("СписокОснований", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"),Истина));
	Иначе
		Запрос.УстановитьПараметр("СписокОснований", ОбрабатываемыйДокументОснование);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным); // 62.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ); // 62.32
	Запрос.УстановитьПараметр("МассивСчетовАвансов", МассивСчетовАвансов);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК ДокументОплаты,
		|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоДт3.НомерВходящегоДокумента, ХозрасчетныйДвиженияССубконто.СубконтоДт3.Номер) КАК НомерВходящегоДокумента,
		|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоДт3.ДатаВходящегоДокумента, ХозрасчетныйДвиженияССубконто.СубконтоДт3.Дата) КАК ДатаВходящегоДокумента,
		|	ХозрасчетныйДвиженияССубконто.Организация
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			,
		|			&КонецПериода,
		|			Регистратор В (&СписокОснований)
		|				И СчетДт В (&МассивСчетовАвансов)
		|				И СубконтоДт1 = &Контрагент
		|				И СубконтоДт2 = &ДоговорКонтрагента
		|				И ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)) КАК ХозрасчетныйДвиженияССубконто
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВходящегоДокумента,
		|	ДокументОплаты";
		
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовыйПРД = ДатаНомерДокументовОплаты.Добавить();
		НовыйПРД.ДатаПлатежноРасчетногоДокумента = Выборка.ДатаВходящегоДокумента;
		Если ТипЗнч(Выборка.ДокументОплаты) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			НовыйПРД.НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Новый Структура("Дата, Номер, Организация", Выборка.ДатаВходящегоДокумента, Выборка.НомерВходящегоДокумента, Выборка.Организация));
		Иначе
			НовыйПРД.НомерПлатежноРасчетногоДокумента = Выборка.НомерВходящегоДокумента;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ПЕЧАТНОЙ ФОРМЫ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция возвращает пустую таблицу значений под
// табличную часть документа основания.
// 
Функция ИнициализацияТаблицыСтрок()

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Товар");
	Товары.Колонки.Добавить("ТоварНаименование");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС");
	Товары.Колонки.Добавить("Сумма");
	Товары.Колонки.Добавить("СуммаВключаетНДС");

	Возврат Товары;

КонецФункции

// Функция собирает данные по документу основанию ОтчетаКомитенту и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомитентуОПродажах(ТекущееОснование)
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтчетКомитентуОПродажах.Организация,
		|	ОтчетКомитентуОПродажах.Организация КАК Поставщик,
		// {ОбособленныеПодразделения
		|	ОтчетКомитентуОПродажах.ПодразделениеОрганизации КАК Подразделение,
		// }ОбособленныеПодразделения 
		|	ОтчетКомитентуОПродажах.Контрагент КАК Покупатель,
		|	ОтчетКомитентуОПродажах.СуммаВознаграждения КАК Сумма,
		|	ОтчетКомитентуОПродажах.СтавкаНДСВознаграждения КАК СтавкаНДС,
		|	ОтчетКомитентуОПродажах.ВалютаДокумента КАК Валюта,
		|	ОтчетКомитентуОПродажах.УслугаПоВознаграждению КАК Товар,
		|	ОтчетКомитентуОПродажах.УслугаПоВознаграждению.НаименованиеПолное КАК ТоварНаименование,
		|	ОтчетКомитентуОПродажах.Товары.(
		|		СУММА(СуммаВознаграждения) КАК Сумма,
		|		СУММА(СуммаНДСВознаграждения) КАК СуммаНДС
		|	),
		|	ОтчетКомитентуОПродажах.СуммаВключаетНДС,
		|	ОтчетКомитентуОПродажах.УчитыватьНДС
		|ИЗ
		|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
		|ГДЕ
		|	ОтчетКомитентуОПродажах.Ссылка = &ДокументОснование";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.Подразделение;
	ДанныеДляПечати.Вставить("Подразделение", Шапка.Подразделение);
	
	Если ОбщегоНазначения.ЭтоОбособленноеПодразделение(Организация) Тогда 
		Поставщик = ОбщегоНазначения.ГоловнаяОрганизация(Поставщик);
	КонецЕсли;
	// }ОбособленныеПодразделения
	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Дата, ПодразделениеОтветственныхЛиц);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.РуководительПредставление);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);

	Товары = ИнициализацияТаблицыСтрок();

	Если ВыборкаСтрокТовары.Следующий() Тогда
		Строчка = Товары.Добавить();
		Строчка.Товар               = ?(НЕ ЗначениеЗаполнено(Шапка.Товар), "Комиссионное вознаграждение", Шапка.Товар);
		Строчка.ТоварНаименование   = ?(НЕ ЗначениеЗаполнено(Шапка.Товар), "Комиссионное вознаграждение", Шапка.ТоварНаименование);
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.СтавкаНДС = Шапка.СтавкаНДС;
		СуммаДляПечати    = ?(ВыборкаСтрокТовары.Сумма = Null, 0, ВыборкаСтрокТовары.Сумма);
		Строчка.СуммаНДС  = ?(ВыборкаСтрокТовары.СуммаНДС = Null, 0, ВыборкаСтрокТовары.СуммаНДС);
		Строчка.Сумма     = СуммаДляПечати;
		Строчка.Цена      = 0;

	КонецЕсли;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомитентуОПродажах()

// Функция собирает данные по документу основанию ОтчетаКомиссионера и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомиссионераОПродажах(ТекущееОснование)
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Организация,
	|	ОтчетКомиссионераОПродажах.Организация КАК Поставщик,
	// {ОбособленныеПодразделения
	|	ОтчетКомиссионераОПродажах.ПодразделениеОрганизации КАК Подразделение,
	// }ОбособленныеПодразделения 
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтчетКомиссионераОПродажах.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ ОтчетКомиссионераОПродажах.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ОтчетКомиссионераОПродажах.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтчетКомиссионераОПродажах.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ОтчетКомиссионераОПродажах.Контрагент
	|		ИНАЧЕ ОтчетКомиссионераОПродажах.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ОтчетКомиссионераОПродажах.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ОтчетКомиссионераОПродажах.СуммаДокумента КАК Сумма,
	|	ОтчетКомиссионераОПродажах.ВалютаДокумента КАК Валюта,
	|	ОтчетКомиссионераОПродажах.УчитыватьНДС,
	|	ОтчетКомиссионераОПродажах.СуммаВключаетНДС,
	|	ОтчетКомиссионераОПродажах.Товары.(
	|		Номенклатура КАК Товар,
	|		ВЫРАЗИТЬ(ОтчетКомиссионераОПродажах.Товары.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|		СтранаПроисхождения КАК СтранаПроисхождения,
	|		СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|		НомерГТД КАК НомерГТД,
	|		НомерГТД.Представление КАК ПредставлениеГТД,
	|		Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена,
	|		Количество,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС
	|	),
	|	ОтчетКомиссионераОПродажах.Услуги.(
	|		Номенклатура КАК Услуга,
	|		Содержание КАК УслугаНаименование,
	|		Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		Количество
	|	)
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &ДокументОснование";
		
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокУслуги = Шапка.Услуги.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Грузоотправитель = Шапка.Грузоотправитель;
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.Подразделение;
	ДанныеДляПечати.Вставить("Подразделение", Шапка.Подразделение);
	
	Если ОбщегоНазначения.ЭтоОбособленноеПодразделение(Организация) Тогда 
		Поставщик = ОбщегоНазначения.ГоловнаяОрганизация(Поставщик);
		Грузоотправитель = Шапка.Организация;
	КонецЕсли;
	// }ОбособленныеПодразделения
	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Дата, ПодразделениеОтветственныхЛиц);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.РуководительПредставление);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
	КонецЦикла;
	
	Пока ВыборкаСтрокУслуги.Следующий() = 1 Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокУслуги.Услуга;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокУслуги.УслугаНаименование);
		Строчка.СтавкаНДС           = ВыборкаСтрокУслуги.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокУслуги.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокУслуги.Сумма;
		Строчка.Цена                = ВыборкаСтрокУслуги.Цена;
		Строчка.Количество          = ВыборкаСтрокУслуги.Количество;
	КонецЦикла;
		
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомиссионераОПродажах()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоРеализацияТоваровУслуг(ТекущееОснование)
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Если ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование.ДокументОтгрузки);
	Иначе
		Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	// {ОбособленныеПодразделения
	|	РеализацияТоваровУслуг.ПодразделениеОрганизации КАК Подразделение,
	// }ОбособленныеПодразделения 
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Контрагент
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	РеализацияТоваровУслуг.СуммаДокумента КАК Сумма,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
	|	РеализацияТоваровУслуг.УчитыватьНДС КАК УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ДокументОснование";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Если ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование.ДокументОтгрузки);
	Иначе
		Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	КонецЕсли;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	РеализацияТоваровУслугТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	РеализацияТоваровУслугТовары.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.НомерГТД КАК НомерГТД,
	|	РеализацияТоваровУслугТовары.НомерГТД.Представление КАК ПредставлениеГТД,
	|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	1 КАК ID
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|";
	Если Не (ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Или
		   ТекущееОснование.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) Тогда
		Запрос.Текст = Запрос.Текст + 
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Номенклатура,
		|	ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Содержание КАК СТРОКА(1000)),
		|	NULL,
		|	"""",
		|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
		|	NULL,
		|	"""",
		|	РеализацияТоваровУслугУслуги.Количество,
		|	РеализацияТоваровУслугУслуги.Цена,
		|	РеализацияТоваровУслугУслуги.СтавкаНДС,
		|	РеализацияТоваровУслугУслуги.СуммаНДС,
		|	РеализацияТоваровУслугУслуги.Сумма,
		|	РеализацияТоваровУслугУслуги.НомерСтроки,
		|	2
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура,
		|	ВЫРАЗИТЬ(РеализацияТоваровУслугАгентскиеУслуги.Содержание КАК СТРОКА(1000)),
		|	NULL,
		|	"""",
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
		|	NULL,
		|	"""",
		|	РеализацияТоваровУслугАгентскиеУслуги.Количество,
		|	РеализацияТоваровУслугАгентскиеУслуги.Цена,
		|	РеализацияТоваровУслугАгентскиеУслуги.СтавкаНДС,
		|	РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС,
		|	РеализацияТоваровУслугАгентскиеУслуги.Сумма,
		|	РеализацияТоваровУслугАгентскиеУслуги.НомерСтроки,
		|	3
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
		|ГДЕ
		|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	НомерСтроки";
	КонецЕсли;
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Грузоотправитель = Шапка.Грузоотправитель;
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.Подразделение;
	ДанныеДляПечати.Вставить("Подразделение", Шапка.Подразделение);
	
	Если ОбщегоНазначения.ЭтоОбособленноеПодразделение(Поставщик) Тогда 
		Поставщик = ОбщегоНазначения.ГоловнаяОрганизация(Поставщик);
		Грузоотправитель = Шапка.Организация;
	КонецЕсли;
	// }ОбособленныеПодразделения
	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("АдресДоставки",    Шапка.АдресДоставки);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);

	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Дата, ПодразделениеОтветственныхЛиц);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.РуководительПредставление);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);

	Товары = ИнициализацияТаблицыСтрок();
	
	ЕстьТовары = Ложь;

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Если ВыборкаСтрокТовары.ID = 1 Тогда
			ЕстьТовары = Истина;                            
		КонецЕсли;
		
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		
	КонецЦикла;

	Если Не ЕстьТовары Тогда
		ДанныеДляПечати.Грузоотправитель = "";
		ДанныеДляПечати.Грузополучатель = "";		
		ДанныеДляПечати.АдресДоставки = "";		
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслуг()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратТоваровПоставщику(ТекущееОснование)
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.Организация КАК Поставщик,
	// {ОбособленныеПодразделения
	|	ВозвратТоваровПоставщику.ПодразделениеОрганизации КАК Подразделение,
	// }ОбособленныеПодразделения
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщику.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ ВозвратТоваровПоставщику.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВозвратТоваровПоставщику.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщику.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ВозвратТоваровПоставщику.Контрагент
	|		ИНАЧЕ ВозвратТоваровПоставщику.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВозвратТоваровПоставщику.СуммаДокумента КАК Сумма,
	|	ВозвратТоваровПоставщику.ВалютаДокумента КАК Валюта,
	|	ВозвратТоваровПоставщику.УчитыватьНДС КАК УчитыватьНДС,
	|	ВозвратТоваровПоставщику.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Если ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Иначе
		Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	КонецЕсли;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВозвратТоваровПоставщикуТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВозвратТоваровПоставщикуТовары.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВозвратТоваровПоставщикуТовары.НомерГТД КАК НомерГТД,
	|	ВозвратТоваровПоставщикуТовары.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	|	1 КАК ID
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Грузоотправитель = Шапка.Грузоотправитель;
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.Подразделение;
	ДанныеДляПечати.Вставить("Подразделение", Шапка.Подразделение);
	
	Если ОбщегоНазначения.ЭтоОбособленноеПодразделение(Поставщик) Тогда 
		Поставщик = ОбщегоНазначения.ГоловнаяОрганизация(Поставщик);
		Грузоотправитель = Шапка.Организация;
	КонецЕсли;
	// }ОбособленныеПодразделения
	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);

	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Дата, ПодразделениеОтветственныхЛиц);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.РуководительПредставление);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);

	Товары = ИнициализацияТаблицыСтрок();
	
	ЕстьТовары = Ложь;

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Если ВыборкаСтрокТовары.ID = 1 Тогда
			ЕстьТовары = Истина;                            
		КонецЕсли;
		
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		
	КонецЦикла;

	Если Не ЕстьТовары Тогда
		ДанныеДляПечати.Грузоотправитель = "";
		ДанныеДляПечати.Грузополучатель = "";		
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслуг()

Функция СобратьДанныеПоАкту(ТекущееОснование)
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктОбОказанииПроизводственныхУслуг.Организация,
	|	АктОбОказанииПроизводственныхУслуг.Организация КАК Поставщик,
	// {ОбособленныеПодразделения
	|	АктОбОказанииПроизводственныхУслуг.ПодразделениеОрганизации КАК Подразделение,
	// }ОбособленныеПодразделения
	|	АктОбОказанииПроизводственныхУслуг.Контрагент КАК Покупатель,
	|	АктОбОказанииПроизводственныхУслуг.СуммаДокумента КАК Сумма,
	|	АктОбОказанииПроизводственныхУслуг.ВалютаДокумента КАК Валюта,
	|	АктОбОказанииПроизводственныхУслуг.УчитыватьНДС КАК УчитыватьНДС,
	|	АктОбОказанииПроизводственныхУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	АктОбОказанииПроизводственныхУслуг.Услуги.(
	|		Ссылка,
	|		НомерСтроки,
	|		Количество,
	|		Номенклатура КАК Товар,
	|		Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		НоменклатурнаяГруппа,
	|		ВЫРАЗИТЬ(АктОбОказанииПроизводственныхУслуг.Услуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|		Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	)
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Услуги.Выбрать();

	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.Подразделение;
	ДанныеДляПечати.Вставить("Подразделение", Шапка.Подразделение);
	
	Если ОбщегоНазначения.ЭтоОбособленноеПодразделение(Поставщик) Тогда 
		Поставщик = ОбщегоНазначения.ГоловнаяОрганизация(Поставщик);
	КонецЕсли;
	// }ОбособленныеПодразделения
	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);

	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Дата, ПодразделениеОтветственныхЛиц);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.РуководительПредставление);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;


КонецФункции

// Функция собирает данные по документу основанию ПередачаОС и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоПередачеОС(ТекущееОснование)
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаОС.Организация,
	|	ПередачаОС.Организация КАК Поставщик,
	|	ПередачаОС.ПодразделениеОрганизации КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПередачаОС.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ ПередачаОС.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ПередачаОС.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПередачаОС.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ПередачаОС.Контрагент
	|		ИНАЧЕ ПередачаОС.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ПередачаОС.СуммаДокумента КАК Сумма,
	|	ПередачаОС.ВалютаДокумента КАК Валюта,
	|	ПередачаОС.УчитыватьНДС КАК УчитыватьНДС,
	|	ПередачаОС.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ПередачаОС КАК ПередачаОС
	|ГДЕ
	|	ПередачаОС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК Товар,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ТаблицаОС.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаОС.СуммаНДС КАК СуммаНДС,
	|	ТаблицаОС.Сумма КАК Сумма
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товар";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Грузоотправитель = Шапка.Грузоотправитель;
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.Подразделение;
	ДанныеДляПечати.Вставить("Подразделение", Шапка.Подразделение);
	
	Если ОбщегоНазначения.ЭтоОбособленноеПодразделение(Поставщик) Тогда 
		Поставщик = ОбщегоНазначения.ГоловнаяОрганизация(Поставщик);
		Грузоотправитель = Шапка.Организация;
	КонецЕсли;
	// }ОбособленныеПодразделения
	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);

	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Дата, ПодразделениеОтветственныхЛиц);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.РуководительПредставление);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 1;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.Цена                = 0;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Функция собирает данные по документу основанию ПередачаНМА и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоПередачеНМАОрганизаций(ТекущееОснование)
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаНМА.Организация,
	|	ПередачаНМА.Организация КАК Поставщик,
	// {ОбособленныеПодразделения
	|	ПередачаНМА.ПодразделениеОрганизации КАК Подразделение,
	// }ОбособленныеПодразделения
	|	ПередачаНМА.Организация КАК Грузоотправитель,
	|	ПередачаНМА.Контрагент КАК Покупатель,
	|	ПередачаНМА.Контрагент КАК Грузополучатель,
	|	ПередачаНМА.СуммаДокумента КАК СуммаДокумента,
	|	ПередачаНМА.ВалютаДокумента КАК Валюта,
	|	ПередачаНМА.УчитыватьНДС КАК УчитыватьНДС,
	|	ПередачаНМА.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ПередачаНМА.НематериальныйАктив КАК Товар,
	|	ВЫРАЗИТЬ(ПередачаНМА.НематериальныйАктив.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ПередачаНМА.СтавкаНДС КАК СтавкаНДС,
	|	ПередачаНМА.СуммаНДС КАК СуммаНДС,
	|	ПередачаНМА.Сумма КАК Сумма
	|ИЗ
	|	Документ.ПередачаНМА КАК ПередачаНМА
	|ГДЕ
	|	ПередачаНМА.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Грузоотправитель = Шапка.Грузоотправитель;
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.Подразделение;
	ДанныеДляПечати.Вставить("Подразделение", Шапка.Подразделение);
	
	Если ОбщегоНазначения.ЭтоОбособленноеПодразделение(Поставщик) Тогда 
		Поставщик = ОбщегоНазначения.ГоловнаяОрганизация(Поставщик);
		Грузоотправитель = Шапка.Организация;
	КонецЕсли;
	// }ОбособленныеПодразделения
	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.СуммаДокумента);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);

	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Дата, ПодразделениеОтветственныхЛиц);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.РуководительПредставление);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);

	Товары = ИнициализацияТаблицыСтрок();

	Строчка = Товары.Добавить();
	Строчка.Товар               = Шапка.Товар;
	Строчка.ТоварНаименование   = СокрЛП(Шапка.ТоварНаименование);
	Строчка.СтранаПроисхождения = "";
	Строчка.ПредставлениеСтраны = "";
	Строчка.НомерГТД            = "";
	Строчка.ПредставлениеГТД    = "";
	Строчка.Количество          = 1;
	Строчка.ЕдиницаИзмерения    = "";
	Строчка.Цена                = Шапка.Сумма - Шапка.СуммаНДС;
	Строчка.Сумма               = Шапка.Сумма;
	Строчка.СуммаНДС            = Шапка.СуммаНДС;
	Строчка.СтавкаНДС           = Шапка.СтавкаНДС;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Функция собирает данные по документу основанию ОтражениеРеализацииТоваровИУслуг возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоОтражениеНачисленияНДС(ТекущееОснование)
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеНачисленияНДС.Организация,
	|	ОтражениеНачисленияНДС.Организация КАК Поставщик,
	// {ОбособленныеПодразделения
	|	ОтражениеНачисленияНДС.ПодразделениеОрганизации КАК Подразделение,
	// }ОбособленныеПодразделения
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтражениеНачисленияНДС.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ ОтражениеНачисленияНДС.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ОтражениеНачисленияНДС.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтражениеНачисленияНДС.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ОтражениеНачисленияНДС.Контрагент
	|		ИНАЧЕ ОтражениеНачисленияНДС.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ОтражениеНачисленияНДС.СуммаДокумента КАК Сумма,
	|	ОтражениеНачисленияНДС.ВалютаДокумента КАК ВалютаДокумента,
	|	ОтражениеНачисленияНДС.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтражениеНачисленияНДС КАК ОтражениеНачисленияНДС
	|ГДЕ
	|	ОтражениеНачисленияНДС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеНачисленияНДСТоварыИУслуги.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ОтражениеНачисленияНДСТоварыИУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))КАК ТоварНаименование,
	|	ОтражениеНачисленияНДСТоварыИУслуги.СтранаПроисхождения,
	|	ОтражениеНачисленияНДСТоварыИУслуги.СтранаПроисхождения.Представление КАК ПредставлениеСтраны,
	|	ОтражениеНачисленияНДСТоварыИУслуги.НомерГТД,
	|	ОтражениеНачисленияНДСТоварыИУслуги.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ОтражениеНачисленияНДСТоварыИУслуги.Количество,
	|	ОтражениеНачисленияНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОтражениеНачисленияНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ПредставлениеЕдиницыИзмерения,
	|	ОтражениеНачисленияНДСТоварыИУслуги.Цена,
	|	ОтражениеНачисленияНДСТоварыИУслуги.СтавкаНДС,
	|	ОтражениеНачисленияНДСТоварыИУслуги.СуммаНДС,
	|	ОтражениеНачисленияНДСТоварыИУслуги.Сумма
	|ИЗ
	|	Документ.ОтражениеНачисленияНДС.ТоварыИУслуги КАК ОтражениеНачисленияНДСТоварыИУслуги
	
	|ГДЕ
	|	ОтражениеНачисленияНДСТоварыИУслуги.Ссылка = &ДокументОснование
	
	|УПОРЯДОЧИТЬ ПО
	|	Товар";
						
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Грузоотправитель = Шапка.Грузоотправитель;
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.Подразделение;
	ДанныеДляПечати.Вставить("Подразделение", Шапка.Подразделение);
	
	Если ОбщегоНазначения.ЭтоОбособленноеПодразделение(Поставщик) Тогда 
		Поставщик = ОбщегоНазначения.ГоловнаяОрганизация(Поставщик);
		Грузоотправитель = Шапка.Организация;
	КонецЕсли;
	// }ОбособленныеПодразделения
	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.ВалютаДокумента);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);

	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Дата, ПодразделениеОтветственныхЛиц);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.РуководительПредставление);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ВыборкаСтрокТовары.ПредставлениеСтраны;
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ПредставлениеЕдиницыИзмерения;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Функция собирает данные по документу основанию РеализацияУслугПоПереработке и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоРеализацияУслугПоПереработке(ТекущееОснование)
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияУслугПоПереработке.Организация,
	|	РеализацияУслугПоПереработке.Организация КАК Поставщик,
	// {ОбособленныеПодразделения
	|	РеализацияУслугПоПереработке.ПодразделениеОрганизации КАК Подразделение,
	// }ОбособленныеПодразделения
	|	РеализацияУслугПоПереработке.Контрагент КАК Покупатель,
	|	РеализацияУслугПоПереработке.СуммаДокумента КАК Сумма,
	|	РеализацияУслугПоПереработке.ВалютаДокумента КАК Валюта,
	|	РеализацияУслугПоПереработке.УчитыватьНДС КАК УчитыватьНДС,
	|	РеализацияУслугПоПереработке.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(РеализацияУслугПоПереработке.Содержание КАК СТРОКА(1000)) КАК Услуга,
	|	СУММА(РеализацияУслугПоПереработке.Количество) КАК Количество,
	|	СУММА(РеализацияУслугПоПереработке.Цена) КАК Цена,
	|	РеализацияУслугПоПереработке.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(РеализацияУслугПоПереработке.СуммаНДС) КАК СуммаНДС,
	|	СУММА(РеализацияУслугПоПереработке.Сумма) КАК Сумма
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(РеализацияУслугПоПереработке.Содержание КАК СТРОКА(1000)),
	|	РеализацияУслугПоПереработке.СтавкаНДС,
	|	РеализацияУслугПоПереработке.Номенклатура.БазоваяЕдиницаИзмерения";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.Подразделение;
	ДанныеДляПечати.Вставить("Подразделение", Шапка.Подразделение);
	
	Если ОбщегоНазначения.ЭтоОбособленноеПодразделение(Поставщик) Тогда 
		Поставщик = ОбщегоНазначения.ГоловнаяОрганизация(Поставщик);
	КонецЕсли;
	// }ОбособленныеПодразделения
	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузоотправитель", "");
	ДанныеДляПечати.Вставить("Грузополучатель",  "");
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("ОчищатьКоличество", Ложь); // Признак очищения количества при незаполненной единице измерения

	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Дата, ПодразделениеОтветственныхЛиц);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.РуководительПредставление);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Услуга;
		Строчка.ТоварНаименование   = ВыборкаСтрокТовары.Услуга;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслуг()

// Функция собирает данные по документу основанию НачислениеНДСпоСМРхозспособом возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоНачислениеНДСпоСМРхозспособом(ТекущееОснование)
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеНДСпоСМРхозспособом.Организация,
	// {ОбособленныеПодразделения
	|	НачислениеНДСпоСМРхозспособом.ПодразделениеОрганизации КАК Подразделение,
	// }ОбособленныеПодразделения
	|	НачислениеНДСпоСМРхозспособом.Дата КАК ДатаНачисления,
	|	НачислениеНДСпоСМРхозспособом.Организация КАК Поставщик,
	|	НачислениеНДСпоСМРхозспособом.Организация КАК Покупатель
	|ИЗ
	|	Документ.НачислениеНДСпоСМРхозспособом КАК НачислениеНДСпоСМРхозспособом
	|ГДЕ
	|	НачислениеНДСпоСМРхозспособом.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НачислениеНДСпоСМРхозспособомСМРхозспособом.СуммаБезНДС) КАК СуммаБезНДС,
	|	НачислениеНДСпоСМРхозспособомСМРхозспособом.СтавкаНДС,
	|	СУММА(НачислениеНДСпоСМРхозспособомСМРхозспособом.НДС) КАК НДС
	|ИЗ
	|	Документ.НачислениеНДСпоСМРхозспособом.СМРхозспособом КАК НачислениеНДСпоСМРхозспособомСМРхозспособом
	|ГДЕ
	|	НачислениеНДСпоСМРхозспособомСМРхозспособом.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеНДСпоСМРхозспособомСМРхозспособом.СтавкаНДС";
				   
	ВыборкаСтрок = Запрос.Выполнить().Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Покупатель = Шапка.Покупатель;
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.Подразделение;
	ДанныеДляПечати.Вставить("Подразделение", Шапка.Подразделение);
	
	Если ОбщегоНазначения.ЭтоОбособленноеПодразделение(Поставщик) Тогда 
		Поставщик = ОбщегоНазначения.ГоловнаяОрганизация(Поставщик);
		Покупатель = ОбщегоНазначения.ГоловнаяОрганизация(Покупатель);
	КонецЕсли;
	// }ОбособленныеПодразделения
	
	ДанныеДляПечати.Вставить("Организация",      Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", "");
	ДанныеДляПечати.Вставить("Покупатель",       Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  "");
	ДанныеДляПечати.Вставить("Сумма",            0);
	ДанныеДляПечати.Вставить("Валюта",           мВалютаРегламентированногоУчета);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Ложь);

	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Дата, ПодразделениеОтветственныхЛиц);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.РуководительПредставление);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрок.Следующий() Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = "Строительно-монтажные работы для собственного потребления";
		Строчка.ТоварНаименование   = "Строительно-монтажные работы для собственного потребления";
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.Сумма               = ВыборкаСтрок.СуммаБезНДС;
		Строчка.СуммаНДС            = ВыборкаСтрок.НДС;
		Строчка.СтавкаНДС           = ВыборкаСтрок.СтавкаНДС;
		Строчка.СуммаВключаетНДС    = Ложь;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Функция собирает данные по текущему документу в случае, если это СФ на аванс
// 
Функция СобратьДанныеСФнаАвансИСуммовуюРазницу(ТекущееОснование)
	Перем ПодразделениеОтветственныхЛиц;
	
	Если Не (ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс 
		или ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу) 
		Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	мНадписьПредоплата = ?(Дата >= '20060101', "Предварительная оплата", "Авансовый платеж");
	НадписьНаименование = ?(ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс, мНадписьПредоплата, "Суммы, связанные с расчетами по оплате (ст. 162 НК РФ)");
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("Ссылка", Ссылка);
 	Запрос.УстановитьПараметр("ТекущееОснование", ТекущееОснование);
 	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Организация,
	// {ОбособленныеПодразделения
	|	ЕСТЬNULL(СчетФактураВыданныйДокументыОснования.ДокументОснование.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	// }ОбособленныеПодразделения
	|	СчетФактураВыданный.Номер,
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Организация КАК Поставщик,
	|	СчетФактураВыданный.Контрагент КАК Покупатель,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	СчетФактураВыданный.Сумма КАК Сумма,
	|	СчетФактураВыданный.СуммаНДС КАК СуммаНДС,
	|	СчетФактураВыданный.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО СчетФактураВыданный.Ссылка = СчетФактураВыданныйДокументыОснования.Ссылка
	|			И (СчетФактураВыданныйДокументыОснования.ДокументОснование = &ТекущееОснование)
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка
	|	И СчетФактураВыданный.ДокументОснование = &ТекущееОснование";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.Подразделение;
	ДанныеДляПечати.Вставить("Подразделение", Шапка.Подразделение);
	
	Если ОбщегоНазначения.ЭтоОбособленноеПодразделение(Поставщик) Тогда 
		Поставщик = ОбщегоНазначения.ГоловнаяОрганизация(Поставщик);
	КонецЕсли;
	// }ОбособленныеПодразделения
	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Шапка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Шапка.Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Дата, ПодразделениеОтветственныхЛиц);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.РуководительПредставление);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);
	
	Товары = ИнициализацияТаблицыСтрок();
	
	Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйАвансы.Номенклатура КАК Товар,
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000)) КАК Содержание,
		|	СУММА(СчетФактураВыданныйАвансы.Сумма) КАК Сумма,
		|	СУММА(СчетФактураВыданныйАвансы.СуммаНДС) КАК СуммаНДС,
		|	СчетФактураВыданныйАвансы.СтавкаНДС
		|ИЗ
		|	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
		|ГДЕ
		|	СчетФактураВыданныйАвансы.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураВыданныйАвансы.СтавкаНДС,
		|	СчетФактураВыданныйАвансы.Номенклатура,
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
		|	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000))";
		ТаблицаПоАвансам = Запрос.Выполнить().Выгрузить();
				
		СоответствиеСтавок = Новый Соответствие();
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.БезНДС);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.БезНДС);
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
			
			Строчка = Товары.Добавить();
			Строчка.Товар               = ?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СтрокаТаблицы.Товар, НадписьНаименование);
			Строчка.ТоварНаименование   = ?(ЗначениеЗаполнено(СокрЛП(СтрокаТаблицы.Содержание)), СокрЛП(СтрокаТаблицы.Содержание), 
											?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СокрЛП(СтрокаТаблицы.ТоварНаименование), НадписьНаименование));
			Строчка.СтранаПроисхождения = "";
			Строчка.ПредставлениеСтраны = "";
			Строчка.НомерГТД            = "";
			Строчка.ПредставлениеГТД    = "";
			Строчка.Количество          = 0;
			Строчка.ЕдиницаИзмерения    = "";
			Строчка.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
			Строчка.СуммаНДС  = СтрокаТаблицы.СуммаНДС;
			Строчка.Сумма     = СтрокаТаблицы.Сумма;
			
		КонецЦикла;
		
	Иначе

		Строчка = Товары.Добавить();
		Строчка.Товар               = НадписьНаименование;
		Строчка.ТоварНаименование   = НадписьНаименование;
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";

		Строчка.СтавкаНДС = Шапка.СтавкаНДС;
		Строчка.СуммаНДС  = Шапка.СуммаНДС;
		Строчка.Сумма     = Шапка.Сумма;

	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	ДанныеДляПечати.Вставить("ТолькоУслуги",   Истина);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоСВП()

// Функция собирает данные по текущему документу в случае, если это СФ на аванс
// 
Функция СобратьДанныеСФНалоговыйАгент(ТекущееОснование)
	
	Перем ПодразделениеОтветственныхЛиц;
	
	Если Не ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("Ссылка", Ссылка);
 	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Организация,
	// {ОбособленныеПодразделения
	|	ЕСТЬNULL(СчетФактураВыданныйДокументыОснования.ДокументОснование.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	// }ОбособленныеПодразделения
	|	СчетФактураВыданный.Номер,
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Организация КАК Покупатель,
	|	СчетФактураВыданный.Контрагент КАК Поставщик,
	|	СчетФактураВыданный.ДоговорКонтрагента.ВидАгентскогоДоговора КАК ВидАгентскогоДоговора,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	СчетФактураВыданный.Сумма КАК Сумма,
	|	СчетФактураВыданный.СуммаНДС КАК СуммаНДС,
	|	СчетФактураВыданный.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО СчетФактураВыданный.Ссылка = СчетФактураВыданныйДокументыОснования.Ссылка
	|			И (СчетФактураВыданныйДокументыОснования.ДокументОснование = &Ссылка)
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

				   
	ДанныеДляПечати = Новый Структура();
	
	Покупатель = Шапка.Покупатель;
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.Подразделение;
	ДанныеДляПечати.Вставить("Подразделение", Шапка.Подразделение);
	
	Если ОбщегоНазначения.ЭтоОбособленноеПодразделение(Покупатель) Тогда 
		Покупатель = ОбщегоНазначения.ГоловнаяОрганизация(Покупатель);
	КонецЕсли;
	// }ОбособленныеПодразделения
	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Шапка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Шапка.Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Покупатель",       Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Дата, ПодразделениеОтветственныхЛиц);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Организация), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.РуководительПредставление);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);
	
	Товары = ИнициализацияТаблицыСтрок();
	
	Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	СчетФактураВыданныйАвансы.Номенклатура КАК Товар,
		               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000)) КАК Содержание,
		               |	СУММА(СчетФактураВыданныйАвансы.Сумма) КАК Сумма,
		               |	СУММА(СчетФактураВыданныйАвансы.СуммаНДС) КАК СуммаНДС,
		               |	СчетФактураВыданныйАвансы.СтавкаНДС
		               |ИЗ
		               |	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
		               |ГДЕ
		               |	СчетФактураВыданныйАвансы.Ссылка = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	СчетФактураВыданныйАвансы.СтавкаНДС,
		               |	СчетФактураВыданныйАвансы.Номенклатура,
		               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
		               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000))";
		ТаблицаПоАвансам = Запрос.Выполнить().Выгрузить();
				
		СоответствиеСтавок = Новый Соответствие();
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.БезНДС);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.БезНДС);
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
			
			Строчка = Товары.Добавить();
			Строчка.Товар               = ?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СтрокаТаблицы.Товар, Шапка.ВидАгентскогоДоговора);
			Строчка.ТоварНаименование   = ?(ЗначениеЗаполнено(СокрЛП(СтрокаТаблицы.Содержание)), СокрЛП(СтрокаТаблицы.Содержание), 
											?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СокрЛП(СтрокаТаблицы.ТоварНаименование), Шапка.ВидАгентскогоДоговора));
			Строчка.СтранаПроисхождения = "";
			Строчка.ПредставлениеСтраны = "";
			Строчка.НомерГТД            = "";
			Строчка.ПредставлениеГТД    = "";
			Строчка.Количество          = 0;
			Строчка.ЕдиницаИзмерения    = "";
			Строчка.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
			Строчка.СуммаНДС  = СтрокаТаблицы.СуммаНДС;
			Строчка.Сумма     = СтрокаТаблицы.Сумма;
			
		КонецЦикла;
		
	Иначе

		Строчка = Товары.Добавить();
		Строчка.Товар               = Шапка.ВидАгентскогоДоговора;
		Строчка.ТоварНаименование   = Шапка.ВидАгентскогоДоговора;
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";

		Строчка.СтавкаНДС = Шапка.СтавкаНДС;
		Строчка.СуммаНДС  = Шапка.СуммаНДС;
		Строчка.Сумма     = Шапка.Сумма;

	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	ДанныеДляПечати.Вставить("ТолькоУслуги",   Истина);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоСВП()

// Функция собирает данные по оказанию услуг и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоОказаниюУслуг(ТекущееОснование, ИмяТабличнойЧасти) Экспорт
	Перем ПодразделениеОтветственныхЛиц;

	ИмяДокументаОснования = ТекущееОснование.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("СчетФактура", Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОказаниеУслуг.Ссылка.Организация,
	|	ОказаниеУслуг.Ссылка.Организация КАК Поставщик,
	|// {ОбособленныеПодразделения
	|	ОказаниеУслуг.Ссылка.ПодразделениеОрганизации КАК Подразделение,
	|// }ОбособленныеПодразделения
	|	"""" КАК Грузоотправитель,
	|	ОказаниеУслуг.Контрагент КАК Покупатель,
	|	"""" КАК Грузополучатель,
	|	ОказаниеУслуг.Сумма,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	ОказаниеУслуг.Ссылка.УчитыватьНДС,
	|	ОказаниеУслуг.Ссылка.СуммаВключаетНДС,
	|	"""" КАК АдресДоставки
	|ИЗ
	|	Документ."+ИмяДокументаОснования+"."+ИмяТабличнойЧасти+" КАК ОказаниеУслуг
	|ГДЕ
	|	ОказаниеУслуг.Ссылка = &ДокументОснование
	|	И ОказаниеУслуг.СчетФактура = &СчетФактура";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Шапка = Результат.Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("СчетФактура", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОказаниеУслуг.Ссылка.Номенклатура КАК Товар,
	|	ВЫБОР
	|		КОГДА (НЕ ОказаниеУслуг.Ссылка.Номенклатура.НаименованиеПолное ПОДОБНО """")
	|			ТОГДА ВЫРАЗИТЬ(ОказаниеУслуг.Ссылка.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		ИНАЧЕ ОказаниеУслуг.Ссылка.Номенклатура.Наименование
	|	КОНЕЦ КАК ТоварНаименование,
	|	NULL КАК СтранаПроисхождения,
	|	"""" КАК ПредставлениеСтраны,
	|	ОказаниеУслуг.Ссылка.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	NULL КАК НомерГТД,
	|	"""" КАК ПредставлениеГТД,
	|	ОказаниеУслуг.Количество КАК Количество,
	|	ОказаниеУслуг.Цена КАК Цена,
	|	ОказаниеУслуг.Ссылка.СтавкаНДС,
	|	ОказаниеУслуг.СуммаНДС КАК СуммаНДС,
	|	ОказаниеУслуг.Сумма КАК Сумма,
	|	ОказаниеУслуг.НомерСтроки КАК НомерСтроки,
	|	2 КАК ID
	|ИЗ
	|	Документ."+ИмяДокументаОснования+"."+ИмяТабличнойЧасти+" КАК ОказаниеУслуг
	|ГДЕ
	|	ОказаниеУслуг.Ссылка = &ДокументОснование
	|	И ОказаниеУслуг.СчетФактура = &СчетФактура";
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Грузоотправитель = Шапка.Грузоотправитель;
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.Подразделение;
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	
	Если ОбщегоНазначения.ЭтоОбособленноеПодразделение(Поставщик) Тогда 
		Поставщик = ОбщегоНазначения.ГоловнаяОрганизация(Поставщик);
		Грузоотправитель = Шапка.Организация;
	КонецЕсли;
	// }ОбособленныеПодразделения
	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("АдресДоставки",    Шапка.АдресДоставки);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);

	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Дата, ПодразделениеОтветственныхЛиц);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.РуководительПредставление);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);

	Товары = ИнициализацияТаблицыСтрок();
	
	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОказаниюУслуг()

// Проверяет правильность заполнения шапки документа.
// проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоля(ОбластьМакета)

	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если (Найти(ТекПараметр, "Продавец:") <> 0)
		   и (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): ----");
			
		ИначеЕсли (Найти(ТекПараметр, "ИНН/КПП продавца:") <> 0)
			    и (СокрЛП(ТекПараметр) = "ИНН/КПП продавца:") Тогда
			ОбластьМакета.Параметры.Установить(т, "ИНН/КПП продавца: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузополучатель и его адрес:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "К платежно-расчетному документу №") <> 0)
		   		и (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");
			
		ИначеЕсли (Найти(ТекПараметр, "Покупатель:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): ----");
			
		ИначеЕсли (Найти(ТекПараметр, "ИНН/КПП покупателя:") <> 0)
			    и (СокрЛП(ТекПараметр) = "ИНН/КПП покупателя:") Тогда
			ОбластьМакета.Параметры.Установить(т, "ИНН/КПП покупателя: ----");
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьПрочеркиВПустыеПоля()

Процедура ПерезаполнитьСуммыПоУЕвРублях(ДанныеДляПечати, ТекущееОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ТекущееОснование);
	Если УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата) Тогда
		Запрос.Текст = "ВЫБРАТЬ
					   |	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот, 0) + ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.НДСОборот, 0)) КАК СуммаВзаиморасчетов
					   |ИЗ
					   |	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(, , Регистратор, СчетФактура = &Ссылка) КАК НДСЗаписиКнигиПродажОбороты
					   |ГДЕ
					   |	НДСЗаписиКнигиПродажОбороты.Регистратор = &Ссылка";
	ИначеЕсли ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		 Запрос.Текст = "ВЫБРАТЬ
		                |	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0) КАК СуммаВзаиморасчетов
		                |ИЗ
		                |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Регистратор, , , , , ) КАК ХозрасчетныйОборотыДтКт
		                |ГДЕ
		                |	ХозрасчетныйОборотыДтКт.Регистратор = &Ссылка
		                |	И ХозрасчетныйОборотыДтКт.Регистратор.СчетУчетаРасчетовПоПретензиям = ХозрасчетныйОборотыДтКт.СчетДт";
	ИначеЕсли ТекущееОснование.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		 Запрос.Текст = "ВЫБРАТЬ
		                |	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0) КАК СуммаВзаиморасчетов
		                |ИЗ
		                |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Регистратор, , , , , ) КАК ХозрасчетныйОборотыДтКт
		                |ГДЕ
		                |	ХозрасчетныйОборотыДтКт.Регистратор = &Ссылка
		                |	И ХозрасчетныйОборотыДтКт.Регистратор.СчетУчетаРасчетовСКонтрагентом = ХозрасчетныйОборотыДтКт.СчетДт";
	Иначе
		Возврат;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РасчетСуммыНДСПоСтавке =  УчетНДС.РасчетНДСвРубляхПоСтавкеДокумента(ДанныеДляПечати.Дата);
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() И Выборка.СуммаВзаиморасчетов <> 0 Тогда
		СтрокиСчетаФактуры = ДанныеДляПечати.ТабличнаяЧасть;
		СтрокиСчетаФактуры.Колонки.Добавить("СуммаБезНДС");
		СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
		МассивРаспределения = Новый Массив;
		Для Каждого СтрокаСчетаФактуры Из СтрокиСчетаФактуры Цикл
			СуммаСНДС = СтрокаСчетаФактуры.Сумма + ?(ДанныеДляПечати.СуммаВключаетНДС, 0, СтрокаСчетаФактуры.СуммаНДС);
			СуммаБезНДС = СуммаСНДС - СтрокаСчетаФактуры.СуммаНДС;

			МассивРаспределения.Добавить(СуммаСНДС);
			СтрокаСчетаФактуры.СуммаБезНДС = СуммаБезНДС;
			
		КонецЦикла;
		
		СтрокиСчетаФактуры.Колонки.Добавить("СуммаРублевая");
		УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, СтрокиСчетаФактуры, "СуммаРублевая");
		
		Для Каждого СтрокаСчетаФактуры Из СтрокиСчетаФактуры Цикл
			Если РасчетСуммыНДСПоСтавке Тогда
				//Выделение суммы НДС, Расчет суммы без НДС
				ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаСчетаФактуры.СтавкаНДС);
				
				СтрокаСчетаФактуры.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаСчетаФактуры.СуммаРублевая * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
				СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.СуммаРублевая - СтрокаСчетаФактуры.СуммаНДС;
				
			Иначе
				МассивРаспределения.Очистить();
				МассивРаспределения.Добавить(СтрокаСчетаФактуры.СуммаБезНДС);
				МассивРаспределения.Добавить(СтрокаСчетаФактуры.СуммаНДС);
				МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаСчетаФактуры.СуммаРублевая, МассивРаспределения);
				Если МассивРаспределенныхСумм <> Неопределено Тогда
					СтрокаСчетаФактуры.Сумма = МассивРаспределенныхСумм[0];
					СтрокаСчетаФактуры.СуммаНДС = МассивРаспределенныхСумм[1];
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеДляПечати.СуммаВключаетНДС Тогда
				СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.Сумма+СтрокаСчетаФактуры.СуммаНДС;
			КонецЕсли;

		КонецЦикла;
		СтрокиСчетаФактуры.Колонки.Удалить(СтрокиСчетаФактуры.Колонки.СуммаБезНДС);
		СтрокиСчетаФактуры.ЗаполнитьЗначения(0, "Цена");
	КонецЕсли;	
	
КонецПроцедуры

// Функция создает табличный документ ун. формы счета-фактуры
//
// Параметры 
//  ДанныеДляПечати - типизированная структура данных для заполнения параметров макета
//
Функция ПечатьСчетаФактуры(ДанныеДляПечати) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;

	Если Дата < '20090609' Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура283";
		Макет = ПолучитьОбщийМакет("СчетФактура283");
	Иначе
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура451";
		Макет = ПолучитьОбщийМакет("СчетФактура451");
	КонецЕсли;
	
	СведенияОбПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель), Дата);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата);
	// {ОбособленныеПодразделения
	СведенияОбОрганизации     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Организация, Дата);
	// }ОбособленныеПодразделения 
	
	// Выводим шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ЗаголовокДляПечати = ОбщегоНазначения.СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура");
	ОбластьМакета.Параметры.Номер = ЗаголовокДляПечати;
	
	Если ДанныеДляПечати.Свойство("АдресДоставки") 
		И НЕ ПустаяСтрока(ДанныеДляПечати.АдресДоставки) Тогда
		ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " 
			+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
			ДанныеДляПечати.АдресДоставки,
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм") + ", " + ДанныеДляПечати.АдресДоставки);
	Иначе
		ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " 
			+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
			"",
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм, ФактическийАдрес,"));
	КонецЕсли;

	Если Дата < '20090609' 
		ИЛИ ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " 
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,");
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " 
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		СокращенноеНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "СокращенноеНаименование,", Ложь);
		Если НЕ ПустаяСтрока(СокращенноеНаименование) Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбластьМакета.Параметры.ПредставлениеПоставщика + " (" + СокращенноеНаименование + ")";
		КонецЕсли;
	КонецЕсли;
	
	ОбластьМакета.Параметры.АдресПоставщика = "Адрес: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
	
	Если НЕ (ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент
		И ДоговорКонтрагента.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент) Тогда
		
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		// {ОбособленныеПодразделения
		Если ЗначениеЗаполнено(ДанныеДляПечати.Подразделение) 
			И ДанныеДляПечати.Подразделение.ОбособленноеПодразделение Тогда
			КПП = ДанныеДляПечати.Подразделение.КПП;
		ИначеЕсли ОбщегоНазначения.ЭтоОбособленноеПодразделение(ДанныеДляПечати.Организация) Тогда
			КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "КПП,", Ложь);
		КонецЕсли;
		// }ОбособленныеПодразделения 
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННпоставщика = "ИНН/КПП продавца: "
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
			
	Иначе
		ОбластьМакета.Параметры.ИННпоставщика = "ИНН/КПП продавца: "
	КонецЕсли;
		
	ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "
		+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), 
		"", 
		?(ДанныеДляПечати.Грузоотправитель = "он же", 
			ДанныеДляПечати.Грузоотправитель, 
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе,  "НаименованиеДляПечатныхФорм,ФактическийАдрес,")));
	
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = ПредставлениеГрузополучателя;

	Строка_ПоДокументу = "";
	Для каждого ПараметрыДокументаОплаты Из ДанныеДляПечати.ТаблицаДатОплат Цикл
		Строка_ПоДокументу = Строка_ПоДокументу+ ?(ПустаяСтрока(Строка_ПоДокументу), "К платежно-расчетному документу № ",", ")
			+ ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента 
			+ " от " + Формат(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy");
	КонецЦикла; 
	Если ПустаяСтрока(Строка_ПоДокументу) Тогда
		Строка_ПоДокументу = "К платежно-расчетному документу № -- от --"
	КонецЕсли; 
	ОбластьМакета.Параметры.ПоДокументу                   = Строка_ПоДокументу;
	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = "Покупатель: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.АдресПокупателя = "Адрес: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННПокупателя = "ИНН/КПП покупателя: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь) + КПП;
		
	ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим заголовок таблицы
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(ДанныеДляПечати);
	ОбластьМакетаЗаголовокТаблицы.Параметры.Валюта = "Валюта: " + ДанныеДляПечати.Валюта;
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;
 	ВыборкаСтрокТовары.Колонки.Добавить("СуммаБезНДС");
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаСНДС");

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		Строчка.СуммаСНДС = Строчка.Сумма + ?(Строчка.СуммаВключаетНДС, 0, Строчка.СуммаНДС);

		Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию 
			И ((Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120)
		 	ИЛИ (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118)
		 	ИЛИ (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110)) Тогда
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС;
			Если НЕ Строчка.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		Иначе
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
			Если Строчка.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если Строчка.Цена = 0 Тогда
			Строчка.Цена = ?(Строчка.Количество = 0, 0, Окр(Строчка.СуммаБезНДС / Строчка.Количество, 2));
		КонецЕсли;
		
	КонецЦикла;
	    
	ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, СтранаПроисхождения, ПредставлениеСтраны, НомерГТД, ПредставлениеГТД, ЕдиницаИзмерения, Цена, СтавкаНДС", "Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС");
	
	// Выводим строки таблицы
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого");
	
	НомерСтроки = 0;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	ИтогоСуммаНДС = 0;
	ИтогоВсего    = 0;
    	
	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(Строчка);

		Если НЕ ЗначениеЗаполнено(Строчка.ТоварНаименование) Тогда
			ОбластьМакета.Параметры.ТоварНаименование = Строчка.Товар;
		КонецЕсли;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ОбластьМакета.Параметры.ТоварНаименование);
		
		Если Строка(Строчка.ПредставлениеСтраны) = "Россия" 
			ИЛИ Строка(Строчка.ПредставлениеСтраны) = "Российская Федерация"
			ИЛИ Строчка.СтранаПроисхождения = Справочники.КлассификаторСтранМира.РОССИЯ Тогда			
			ОбластьМакета.Параметры.ПредставлениеСтраны  = "--";
		КонецЕсли; 
	
		ОчищатьКоличество = Неопределено;
		ОчищатьКоличество = ?(ДанныеДляПечати.Свойство("ОчищатьКоличество", ОчищатьКоличество), ОчищатьКоличество, Истина);
		
		Если ОчищатьКоличество 
			И ТипЗнч(ОбластьМакета.Параметры.Товар) <> Тип("СправочникСсылка.ОсновныеСредства") 
			И (ОбластьМакета.Параметры.ЕдиницаИзмерения = "--" 
			ИЛИ НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения)) Тогда
			Строчка.Количество = 0;
		КонецЕсли;
		
		Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс 
			ИЛИ ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу 
			ИЛИ ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
			
			Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
				ОбластьМакета.Параметры.Стоимость  = Строчка.СуммаБезНДС;
			Иначе
				// В счетах-фактурах на аванс колонка 5 не выводится
				ОбластьМакета.Параметры.Стоимость = 0;
			КонецЕсли;
			
			ОбластьМакета.Параметры.Количество = 0;
			ОбластьМакета.Параметры.Цена       = 0;
			
		Иначе
			ОбластьМакета.Параметры.Стоимость = Строчка.СуммаБезНДС;
			ОбластьМакета.Параметры.Цена   	  = Строчка.Цена;
		КонецЕсли;	
			
		ОбластьМакета.Параметры.Всего     = Строчка.СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС = Строчка.СтавкаНДС;
		
		// Колонка "Единица измерения" быть заполнена только при заполненной колонке "Количество"
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Количество)
			И ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмерения = Неопределено;
		КонецЕсли;

		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
						
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			КонецЕсли;
			
		КонецЕсли;
		
		ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
		
		ТабДокумент.Вывести(ОбластьМакета);

		ИтогоСуммаНДС = ИтогоСуммаНДС + Строчка.СуммаНДС;
		ИтогоВсего    = ИтогоВсего    + Строчка.СуммаСНДС;
        	
	КонецЦикла;

	Если ВыборкаСтрокТовары.Количество() > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
		
	ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	ОбластьМакетаИтого.Параметры.ИтогоВсего    = ИтогоВСего;
	
	ПроставитьПрочеркиВПустыеПоля(ОбластьМакетаИтого);
	ТабДокумент.Вывести(ОбластьМакетаИтого);
    	
	ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
	                        
	Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		ОбластьМакетаПодвал.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "Свидетельство,");
	Иначе
		ОбластьМакетаПодвал.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 13;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;

	Если ТипЗнч(Ссылка.ДокументОснование) <> Тип("ДокументСсылка.ОказаниеУслуг") Тогда
		ТабДокумент.ВерхнийКолонтитул.Выводить          = Истина;
		ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
		ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
		ТабДокумент.ВерхнийКолонтитул.ТекстСлева   = ЗаголовокДляПечати;
		ТабДокумент.ВерхнийКолонтитул.ТекстСправа  = "Лист [&НомерСтраницы]";
	КонецЕсли;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаФактуры()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу
		И Дата >= '20111001' Тогда
		ТекстСообщения = "Счета-фактуры на суммовые разницы не выписываются, начиная с 01.10.2011 г.";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию
		и ДоговорКонтрагента.РасчетыВУсловныхЕдиницах 
		тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Неопределено, Организация);
	КонецЕсли;
		
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "СчетФактура" Тогда
		
		Если Дата >= '20060101000000' Тогда
			мНадписьПредоплата = "Предварительная оплата";
		Иначе
			мНадписьПредоплата = "Авансовый платеж";
		КонецЕсли;
		
		СписокОснований = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"),Истина);
		
		ОбщиеДанныеДляПечати = Неопределено;
		
		Для каждого ТекущееОснование из СписокОснований Цикл
			Если Не ЗначениеЗаполнено(ТекущееОснование) Тогда
				Продолжить;
			КонецЕсли; 
			
			ТипОснования = ТипЗнч(ТекущееОснование);
			ДанныеДляПечати = Неопределено;
			
			Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс 
				или ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу 
				Тогда
				ДанныеДляПечати    = СобратьДанныеСФнаАвансИСуммовуюРазницу(ТекущееОснование);
			ИначеЕсли ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент 
				Тогда
				ДанныеДляПечати    = СобратьДанныеСФНалоговыйАгент(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				ДанныеДляПечати    = СобратьДанныеПоОтчетКомитентуОПродажах(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				ДанныеДляПечати    = СобратьДанныеПоРеализацияТоваровУслуг(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") И ТипЗнч(ТекущееОснование.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				ДанныеДляПечати    = СобратьДанныеПоРеализацияТоваровУслуг(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") И ТипЗнч(ТекущееОснование.ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
				ДанныеДляПечати    = СобратьДанныеПоПередачеОС(ТекущееОснование.ДокументОтгрузки);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				ДанныеДляПечати    = СобратьДанныеПоВозвратТоваровПоставщику(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				ДанныеДляПечати    = СобратьДанныеПоОтчетКомиссионераОПродажах(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
				ДанныеДляПечати    = СобратьДанныеПоАкту(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаОС") Тогда
				ДанныеДляПечати    = СобратьДанныеПоПередачеОС(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаНМА") Тогда
				ДанныеДляПечати    = СобратьДанныеПоПередачеНМАОрганизаций(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеНачисленияНДС") Тогда
				ДанныеДляПечати    = СобратьДанныеПоОтражениеНачисленияНДС(ТекущееОснование);		
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
				ДанныеДляПечати    = СобратьДанныеПоРеализацияУслугПоПереработке(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда
				ДанныеДляПечати    = СобратьДанныеПоНачислениеНДСпоСМРхозспособом(ТекущееОснование);
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
				ДанныеДляПечати    = СобратьДанныеПоОказаниюУслуг(ТекущееОснование, "Контрагенты");
			КонецЕсли;
		
			Если ДанныеДляПечати = Неопределено или ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеДляПечати.ТабличнаяЧасть.ЗаполнитьЗначения(ДанныеДляПечати.СуммаВключаетНДС,"СуммаВключаетНДС");
			
			Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию
				и ДоговорКонтрагента.РасчетыВУсловныхЕдиницах 
				и Не ДанныеДляПечати.Валюта = мВалютаРегламентированногоУчета Тогда
		
				Если не УчетнаяПолитика = Неопределено И УчетнаяПолитика.ФормироватьСчетФактуруПоУЕвРублях Тогда
					ПерезаполнитьСуммыПоУЕвРублях(ДанныеДляПечати, ТекущееОснование);
					ДанныеДляПечати.Валюта = мВалютаРегламентированногоУчета;
					//ОбластьМакета.Параметры.Валюта = мВалютаРегламентированногоУчета;
				КонецЕсли;
				
			КонецЕсли;

			
			Если ОбщиеДанныеДляПечати = Неопределено Тогда
				ОбщиеДанныеДляПечати = ДанныеДляПечати;
			Иначе
				Для Каждого СтрДанных Из ДанныеДляПечати Цикл
					
					Если СтрДанных.Ключ = "ТабличнаяЧасть" Тогда
						ОбщаяТабЧасть = ОбщиеДанныеДляПечати.ТабличнаяЧасть;
						ТекущаяТабЧасть = СтрДанных.Значение;
						
						Для Каждого СтрокаТекущейТабЧасть Из ТекущаяТабЧасть Цикл
							СтрокаТабЧасти = ОбщаяТабЧасть.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТабЧасти, СтрокаТекущейТабЧасть);
						КонецЦикла;
					Иначе
						Если Не ОбщиеДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
							// Если данный параметр для печати шапки документа еще не  определен - то определяем его
							ОбщиеДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ОбщиеДанныеДляПечати = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаДатОплат = ДатаНомерДокументовОплаты.Выгрузить();
		ТаблицаДатОплат.Свернуть("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента");
		СтрокиКУдалению = Новый массив();
		Для каждого СтрокаОплат Из ТаблицаДатОплат Цикл
			Если не ЗначениеЗаполнено(СтрокаОплат.ДатаПлатежноРасчетногоДокумента) 
				и ПустаяСтрока(СтрокаОплат.НомерПлатежноРасчетногоДокумента) Тогда
				СтрокиКУдалению.Добавить(СтрокаОплат);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДатОплат.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		
        ОбщиеДанныеДляПечати.Вставить("ТаблицаДатОплат", ТаблицаДатОплат);
		
		ТабДокумент = ПечатьСчетаФактуры(ОбщиеДанныеДляПечати);
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("СчетФактура","Счет-фактура");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		Если (СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс 
			Или СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу) Тогда
			// Формирование проводки по начислению НДС с авансов и по суммовой разнице в бюджет
			
			ДвиженияПоРегиструХозрасчетный(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок);
			ДвиженияПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок);
			
		ИначеЕсли СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
			УчетНДСФормированиеДвижений.СформироватьДвиженияНалоговыйАгентПоОплате(СтруктураШапкиДокумента, ТаблицаПоАвансам, Движения);
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		
		// Формирование проводки по начислению НДС с авансов в бюджет
		ДвиженияПоРегиструХозрасчетный(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок);
		
		Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(
			СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
			Возврат;
		КонецЕсли;
		
		// Отражение начисления НДС с авансов для последующего отражения в книге продаж
		ДвиженияПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок);
		// Отражение НДС с авансов для последующего предъявления НДС к вычету при зачете аванса,
		// отражения вычета в книге покупок
		ДвиженияПоРегиструНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок); 
		
	ИначеЕсли СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		
		УчетНДСФормированиеДвижений.СформироватьДвиженияНалоговыйАгентПоОплате(СтруктураШапкиДокумента, ТаблицаПоАвансам, Движения);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по регистру НДСПродажи.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок)

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = Движения.НДСНачисленный.ВыгрузитьКолонки();

	Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		
		СтрокаДвижений.Организация = 	СтруктураШапкиДокумента.Организация;
		Если Под0 Тогда
			СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0;
		Иначе
			СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
		КонецЕсли;
		
		СтрокаДвижений.Покупатель = 	СтруктураШапкиДокумента.Контрагент;
		
		СтрокаДвижений.СчетФактура =    СтруктураШапкиДокумента.ДокументОснование;
		
		СтрокаДвижений.Событие = 		Перечисления.СобытияПоНДСПродажи.ПолученАванс;
		СтрокаДвижений.СтавкаНДС = 		СтрокаТаблицы.СтавкаНДС;
		
		СтрокаДвижений.СуммаБезНДС = 	СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
		СтрокаДвижений.НДС = 			СтрокаТаблицы.СуммаНДС;
		СтрокаДвижений.ВидНачисления = 	Перечисления.НДСВидНачисления.НДСсАвансов;
		СтрокаДвижений.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
	КонецЦикла;
	
	Движения.НДСНачисленный.мПериод =   СтруктураШапкиДокумента.Дата;
	Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений;
	Движения.НДСНачисленный.ВыполнитьПриход();
	
КонецПроцедуры // ДвиженияПоРегиструНДСПродажи()

// Формирование движений по регистру НДСсАвансов.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегиструНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок)

	ТаблицаДвижений = Движения.НДСсАвансов.ВыгрузитьКолонки();
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		
		СтрокаДвижений.Организация		  = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.ВидЦенности		  = Перечисления.ВидыЦенностей.АвансыПолученные;
		СтрокаДвижений.Покупатель		  = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижений.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		СтрокаДвижений.СчетФактура        = СтруктураШапкиДокумента.ДокументОснование;
		СтрокаДвижений.СтавкаНДС          = СтрокаТаблицы.СтавкаНДС;
		СтрокаДвижений.ВалютаАванса       = СтруктураШапкиДокумента.ВалютаДокумента;
		
		СтрокаДвижений.СуммаБезНДС		  = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
		СтрокаДвижений.НДС				  = СтрокаТаблицы.СуммаНДС;
		СтрокаДвижений.ВалютнаяСуммаСНДС  = СтрокаТаблицы.ВалютнаяСумма;
		
	КонецЦикла;
	
	Движения.НДСсАвансов.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений;
	Движения.НДСсАвансов.ВыполнитьПриход();
	
КонецПроцедуры // ДвиженияПоРегиструНДСПокупки()

// Формирование движений по регистру Хозрасчетный.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегиструХозрасчетный(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период 	= СтруктураШапкиДокумента.Дата;
		Проводка.Активность = Истина;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		
		Проводка.СчетДт                   = ПланыСчетов.Хозрасчетный.ПрочиеРасходы; //91.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ);
		Проводка.Содержание = "НДС по курсовым разницам по расчетам в у.е.";
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС; //68.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		Проводка.Сумма = СтруктураШапкиДокумента.СуммаНДС;
		
	Иначе
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
			
			Если СтрокаТаблицы.СуммаНДС = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период 	 = СтруктураШапкиДокумента.Дата;
			Проводка.Активность  = Истина;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "НДС по предоплате";
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам; //76.АВ
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные", СтруктураШапкиДокумента.ДокументОснование);
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС; //68.02
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
			Проводка.Сумма = СтрокаТаблицы.СуммаНДС;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструХозрасчетный()

// Формирование движений по регистру НДСПродажи.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок)

	ТаблицаДвижений = Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();

	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
			
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			
			СтрокаДвижений.Организация        = СтруктураШапкиДокумента.Организация;
			СтрокаДвижений.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
			СтрокаДвижений.ВидЦенности        = Перечисления.ВидыЦенностей.АвансыПолученные;
			СтрокаДвижений.Событие            = Перечисления.СобытияПоНДСПродажи.ПолученАванс;
			СтрокаДвижений.Покупатель         = СтруктураШапкиДокумента.Контрагент;
			СтрокаДвижений.СчетФактура        = СтруктураШапкиДокумента.ДокументОснование;
			СтрокаДвижений.СтавкаНДС          = СтрокаТаблицы.СтавкаНДС;
			СтрокаДвижений.ДокументОплаты     = СтруктураШапкиДокумента.ДокументОснование;
			СтрокаДвижений.ДатаОплаты         = СтруктураШапкиДокумента.ДокументОснование.Дата;
			
			СтрокаДвижений.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
			СтрокаДвижений.НДС         = СтрокаТаблицы.СуммаНДС;
			
		КонецЦикла;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу Тогда
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
			
		СтрокаДвижений.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате;
		СтрокаДвижений.Событие     = Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
		СтрокаДвижений.Покупатель  = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижений.СчетФактура = СтруктураШапкиДокумента.ДокументОснование;
		СтрокаДвижений.СтавкаНДС   = СтруктураШапкиДокумента.СтавкаНДС;
		СтрокаДвижений.ДатаОплаты  = СтруктураШапкиДокумента.ДокументОснование.Дата;
		
		СтрокаДвижений.СуммаБезНДС = СтруктураШапкиДокумента.Сумма - СтруктураШапкиДокумента.СуммаНДС;
		СтрокаДвижений.НДС         = СтруктураШапкиДокумента.СуммаНДС;
		
	КонецЕсли;

	Движения.НДСЗаписиКнигиПродаж.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвижений;
	Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение();
	
КонецПроцедуры // ДвиженияПоРегиструНДСПродажи()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,ВидСчетаФактуры");

	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс
		Или СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		
		СтруктураОбязательныхПолей.Вставить("Контрагент");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");

	ИначеЕсли СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу Тогда
		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		СтруктураОбязательныхПолей.Вставить("Сумма");
	
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "ДокументыОснования".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ ЗначениеЗаполнено(ВидСчетаФактуры) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = "ДокументыОснования";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументОснование");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	СтрокаСообщения = "";
	Для Каждого СтрокаТЧ Из ТаблицаПоДокументамОснованиям Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) 
			И Не ТипЗнч(СтрокаТЧ.ДокументОснование) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") 
			И Не (СтрокаТЧ.ДокументОснованиеПроведен = Истина) Тогда
			
			Если ПустаяСтрока(СтрокаСообщения) Тогда
			    СтрокаСообщения = "Счет-фактуру можно провести только на основании проведенного документа";
			КонецЕсли; 
			СтрокаСообщения = СтрокаСообщения + Символы.ПС+ ?(ТаблицаПоДокументамОснованиям.Количество()>1," - строка № " + СтрокаТЧ.НомерСтроки + ":"," - ")
											 + " документ «"+СтрокаТЧ.ДокументОснование+"» не проведен";
											 
		КонецЕсли;	
										 
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок)
	КонецЕсли; 

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Авансы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоАвансам(Отказ, Заголовок)

	Если ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.НаАванс 
		И ВидСчетаФактуры <> Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		Возврат;
	КонецЕсли;
	
	// Укажем, что надо проверить
	СтруктураОбязательныхПолей = Новый Структура("СтавкаНДС, Сумма");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС", УчетНДС.ПолучитьУПУпрощенныйУчетНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС", "УчетАгентскогоНДС");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидАгентскогоДоговора", "ВидАгентскогоДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "НалоговыйАгентПоОплате", "НалоговыйАгентПоОплате");
	
	Если ТипЗнч(СтруктураШапкиДокумента.ДокументОснование) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Владелец", "КонтрагентДоговора");
	КонецЕсли;
	
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения по табличной части "ДокументыОснования".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДокументОснование"      	, "ДокументОснование");
	СтруктураПолей.Вставить("ДокументОснованиеПроведен" , "ДокументОснование.Проведен");
	
	РезультатЗапросаПоДокументамОснованиям = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураПолей);
	
	ТаблицаПоДокументамОснованиям = РезультатЗапросаПоДокументамОснованиям.Выгрузить();
	
	Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс 
		Или ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("Сумма",		"Сумма");
		СтруктураПолей.Вставить("СуммаНДС",		"СуммаНДС");
		СтруктураПолей.Вставить("СтавкаНДС",	"СтавкаНДС");
		
		РезультатЗапросаПоАвансам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураПолей);
		
		ТаблицаПоАвансам = РезультатЗапросаПоАвансам.Выгрузить();
		
		ТаблицаПоАвансам.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаПоАвансам.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ТаблицаПоАвансам.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
		Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
			ТаблицаПоАвансам.Колонки.Добавить("СчетФактура");
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
			
			Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент 
				И ТаблицаПоДокументамОснованиям.Количество() <> 0 Тогда
				СтрокаТаблицы.СчетФактура = ТаблицаПоДокументамОснованиям[0].ДокументОснование;
			КонецЕсли;
		
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
			Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
				СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
			Иначе
				СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;
			КонецЕсли;
			
			Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
				СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(Неопределено, Неопределено, , Истина, ДоговорКонтрагента.ВидАгентскогоДоговора);	
			Иначе
				
				Если Под0 Тогда
					СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0;
				Иначе
					СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаПоАвансам.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
		МассивРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СуммаДокумента, ТаблицаПоАвансам.ВыгрузитьКолонку("Сумма"));
		
		Если Не МассивРаспределения = Неопределено Тогда
			Для К = 0 По ТаблицаПоАвансам.Количество() - 1 Цикл
				
				ТаблицаПоАвансам[К].ВалютнаяСумма = МассивРаспределения[К];			
												
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Функция ПроверитьВозможностьЗаписиСФ(Отказ = Ложь, УдалятьЛишниеСтроки = Ложь) Экспорт
	
	СтрокаСообщения = "";
	СтруктураОтбора = Новый Структура("ВидСчетаФактуры",ВидСчетаФактуры);
	СтруктураОтбора.Вставить("ПометкаУдаления"		, Ложь);
	Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс
		Или ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		//Для СФ на аванс возможна выписка нескольких СФ (разные договора и ставки НДС).
		СтруктураОтбора.Вставить("ДоговорКонтрагента"	, ДоговорКонтрагента);
		СтруктураОтбора.Вставить("СтавкиНДС"			, Авансы.ВыгрузитьКолонку("СтавкаНДС"));
		
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
		
		Если Не СуществующийСФ = Неопределено Тогда
			СтавкиНДС = "";
			СтрокиКУдалению = Новый Массив;
			Для Каждого СтрокаТаблицы Из СуществующийСФ.Авансы Цикл
				СтавкиНДС = СтавкиНДС + ?(СтавкиНДС = "", "", ", ") + СтрокаТаблицы.СтавкаНДС;
				Если УдалятьЛишниеСтроки Тогда
					СтрокиОтбора = Авансы.НайтиСтроки(Новый Структура("СтавкаНДС", СтрокаТаблицы.СтавкаНДС));
					Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
						СтрокиКУдалению.Добавить(СтрокаОтбора);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура " + ?(ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс, "на аванс", "налогового агента") + "
			|по договору «"+ДоговорКонтрагента+"» со ставками НДС "+СтавкиНДС+":"+Символы.ПС
			+ " - «"+ Строка(СуществующийСФ)+"»";
			
			Если УдалятьЛишниеСтроки Тогда
				СтрокиКУдалению = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СтрокиКУдалению);
				Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
					Авансы.Удалить(СтрокаКУдалению);
				КонецЦикла;
			КонецЕсли;
			
			Отказ = Не (УдалятьЛишниеСтроки И Авансы.Количество() <> 0);
		КонецЕсли;
	ИначеЕсли ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу Тогда
		//Для СФ на суммовую разницу возможна выписка нескольких СФ (разные ставки НДС).
		СтруктураОтбора.Вставить("СтавкаНДС"			, СтавкаНДС);
		
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
		
		Если не СуществующийСФ = неопределено Тогда
			СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура на суммовую разницу со ставкой НДС «"+СтавкаНДС+"»:"
			+ Символы.ПС+" - «"+ Строка(СуществующийСФ)+"»";
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Для каждого ТекущееОснование Из ДокументыОснования Цикл
			
			Попытка ВидДокумента = ТекущееОснование.ДокументОснование.Метаданные().Имя Исключение КонецПопытки;
			Если ВидДокумента = "ОказаниеУслуг"
			Тогда
				Продолжить;
			КонецЕсли;
			
			СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ТекущееОснование.ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
			
			Если не СуществующийСФ = неопределено Тогда
				Если ПустаяСтрока(СтрокаСообщения) Тогда
					СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура:";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения +Символы.ПС+" - "+?(ДокументыОснования.Количество()>1," строка № "+ТекущееОснование.НомерСтроки+": для «"+ТекущееОснование.ДокументОснование+"» зарегистрирован счет-фактура ","")+" «"+СуществующийСФ+"»";
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если не ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Запись еще одного документа ""Счет-фактура выданный"" не допускается!"
	КонецЕсли;
	
	Возврат СтрокаСообщения;

КонецФункции // ПроверитьВозможностьЗаписиСФ()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если (Основание = Неопределено) ИЛИ Не ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		Возврат;
	КонецЕсли;
	
	Дата = Основание.Дата;
	Организация = Основание.Организация;
	
	ДокументыОснования.Добавить().ДокументОснование = Основание.Ссылка;
	
	ДокументОснование = Основание.Ссылка;
	
	СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.НДСВидСчетаФактуры.НаАванс);
	СписокТиповНалоговыйАгент = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.НДСВидСчетаФактуры.НалоговыйАгент);
	
	Если ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию Тогда
		
		// Ввод счета-фактуры на реализацию, требуется проверить существование ранее введенного счета-фактуры
		СуществующийСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание, "СчетФактураВыданный");
		Если Не СуществующийСчетФактура = Неопределено Тогда
			
			Если Не СуществующийСчетФактура = Основание Тогда
				// Найден ранее введенный счет-фактура, требуется закрыть новый документ и открыть найденный
				// Если найденный счет-фактура - это сам документ-основание, то счет-фактуру также создавать не надо, открывать ничего не надо
				СуществующийСчетФактура.ПолучитьФорму(, , Строка(Основание)).Открыть();
			КонецЕсли;
			ДополнительныеСвойства.Вставить("НайденСуществующийСчетФактура", Истина);
			
		Иначе
			ОпределениеПараметровСчетаФактуры(Основание);
		КонецЕсли;
		
	ИначеЕсли СписокТиповНаАванс.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
		
		ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс;
		
		ДатаНомерДокументовОплаты.Очистить();
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
			НомерПлатежноРасчетногоДокумента = Основание.НомерВходящегоДокумента;
			ДатаПлатежноРасчетногоДокумента =  Основание.ДатаВходящегоДокумента;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
			ДатаПлатежноРасчетногоДокумента =  Основание.Дата;
		Иначе
			НомерПлатежноРасчетногоДокумента = "";
			ДатаПлатежноРасчетногоДокумента =  Неопределено;
		КонецЕсли;
		
		СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
		СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
		СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;
		
		ДокументЗаполнен = Ложь;
		ОпределениеПараметровСчетаФактурыНаАванс(ДокументЗаполнен);
		
		Если не ДокументЗаполнен Тогда
			Если Дата < '20111001' Тогда
				ТекстСообщения = "Не обнаружены данные для регистрации счета-фактуры на предварительную оплату или на суммовую разницу.";
			Иначе
				ТекстСообщения = "Не обнаружены данные для регистрации счета-фактуры на предварительную оплату.";
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		
	ИначеЕсли СписокТиповНалоговыйАгент.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
		
		ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент;
		
		ДатаНомерДокументовОплаты.Очистить();
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
			НомерПлатежноРасчетногоДокумента = Основание.НомерВходящегоДокумента;
			ДатаПлатежноРасчетногоДокумента =  Основание.ДатаВходящегоДокумента;
		Иначе
			НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
			ДатаПлатежноРасчетногоДокумента = Основание.Дата;
		КонецЕсли;
		
		СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
		СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
		СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;
		
		ДокументЗаполнен = Ложь;
		ОпределениеПараметровСчетаФактурыНалоговыйАгент(ДокументЗаполнен);
		
		Если Не ДокументЗаполнен Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не обнаружены данные для регистрации счета-фактуры налогового агента.");
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ)

	Перем СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу
		И СтруктураШапкиДокумента.Дата >= '20111001' Тогда
		ТекстСообщения = "Счета-фактуры на суммовые разницы не выписываются, начиная с 01.10.2011 г.";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам);
	
	ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПоАвансам(Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ
	   И Не СформированПриВводеНачальныхОстатковНДС Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	Префикс = ?(ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс,"А","")+Префикс;
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Или Не мОбновлятьРеквизитыПриЗаписи Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОснование) И ДокументыОснования.Найти(ДокументОснование) = Неопределено Тогда
		ДокументОснование = Неопределено;
	КонецЕсли;
	
	Если ДокументОснование = Неопределено И ДокументыОснования.Количество() > 0 Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	Если ДатаНомерДокументовОплаты.Количество() > 0 Тогда
		ДатаПлатежноРасчетногоДокумента = ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента;
		НомерПлатежноРасчетногоДокумента = ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента;
	КонецЕсли;
	
	Если Не СформированПриВводеНачальныхОстатковНДС
		И ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию Тогда
		ОпределениеПараметровСчетаФактуры(Ссылка);
	КонецЕсли;

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мНадписьПредоплата = "Предварительная оплата";
мОбновлятьРеквизитыПриЗаписи = Истина;
