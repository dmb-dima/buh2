Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПорядокСписанияПартий; // (Общ)
Перем ПартионныйУчет;
Перем мПоддержкаПБУ18;

Перем УказанаПартия;
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
Функция ПечатьВозвратаОтПокупателя()
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номер,
		|	Дата,
		|	ДоговорКонтрагента,
		|	Контрагент КАК Контрагент,
		|	Организация,
		// {ОбособленныеПодразделения
		|	ПодразделениеОрганизации,
		// }ОбособленныеПодразделения
		|	СуммаДокумента,
		|	ВалютаДокумента,
		|	УчитыватьНДС,
		|	СуммаВключаетНДС,
		|	Товары.(
		|		НомерСтроки,
		|		Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК Товар,
		|		Номенклатура.Код                КАК Код,
		|		Номенклатура.Артикул            КАК Артикул,
		|		Количество,
		|		Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|		Цена,
		|		Сумма,
		|		СуммаНДС
		|	)
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|
		|ГДЕ
		|	ВозвратТоваровОтПокупателя.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровОтПокупателя_Накладная";
		
		Макет = ПолучитьМакет("Накладная");
		
		// Выводим шапку накладной
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Возврат от покупателя");
		ТабДокумент.Вывести(ОбластьМакета);
		
		СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		
		СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
		ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
		ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
		ОбластьМакета.Параметры.Получатель = Шапка.Организация;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды = Истина;
			Колонка = "Артикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды = Истина;
			Колонка = "Код";
		Иначе
			ВыводитьКоды = Ложь;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
								Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
		
		Сумма    = 0;
		СуммаНДС = 0;
		СуммаНП  = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
		
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьДанных);
			
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьСуммы);
			Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести ИтогоНДС
		Если Шапка.УчитыватьНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			Если Товары.Итог("СуммаНДС") <> 0 Тогда
				ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС"));
				ОбластьДанных.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
			Иначе
				ОбластьСуммы.Параметры.ВсегоНДС = "-";
				ОбластьДанных.Параметры.НДС      = "Без налога (НДС)";
			КонецЕсли;
			
			ТабДокумент.Присоединить(ОбластьДанных);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
		КонецЕсли;
		
		// Вывести Сумму прописью
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + ВыборкаСтрокТовары.Количество()
		+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьВозвратаОтПокупателя()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
		
	Если ИмяМакета = "Накладная" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьВозвратаОтПокупателя();
		
	КонецЕсли;
		
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);
		
КонецПроцедуры // Печать
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Накладная","Возврат от покупателя");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполнение табличной части Товары по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт
	
	ОснованиеРеализацияТоваров = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ОснованиеОтражениеНачисленияНДС = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтражениеНачисленияНДС");
	ДокументОснованиеИмя       = ДокументОснование.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",             ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ВалютаДокумента,";
	Если ОснованиеРеализацияТоваров Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КурсВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КурсДокумента,
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КратностьВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КратностьДокумента,";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	1 КАК КратностьДокумента,
		|	1 КАК КурсДокумента,";
	КонецЕсли;
	Если ОснованиеОтражениеНачисленияНДС тогда
		Запрос.Текст = Запрос.Текст + "
		|	Истина как УчитыватьНДС,
		|	Ложь как СуммаВключаетНДС,";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	Док.Ссылка.УчитыватьНДС,
		|	Док.Ссылка.СуммаВключаетНДС,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.СтавкаНДС,
	|	Док.Цена,
	|	Док.НомерГТД,
	|	Док.СтранаПроисхождения,
	|	Док.СчетУчета,
	|	Док.СчетДоходов";
	
	Если не ОснованиеОтражениеНачисленияНДС тогда
		Запрос.Текст = Запрос.Текст + ",
		|	Док.СчетРасходов,
		|	Док.СчетУчетаНДСПоРеализации,
		|	Док.Субконто";
	КонецЕсли;
	
	ДополнительныеПоляЗапросаРегл = ",
	|	Док.ПереданныеСчетУчета";
	
	Если ОснованиеРеализацияТоваров Тогда
		
		Запрос.Текст = Запрос.Текст + ДополнительныеПоляЗапросаРегл + "
		|";
	КонецЕсли; 
	
	Если ОснованиеОтражениеНачисленияНДС Тогда
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	Документ." + ДокументОснованиеИмя + ".ТоварыИУслуги КАК Док
		|
		|ГДЕ
		|	Док.Ссылка = &ДокументОснование и (Док.Номенклатура.Услуга = Ложь)";
	
	Иначе	
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	Документ." + ДокументОснованиеИмя + ".Товары КАК Док
		|
		|ГДЕ
		|	Док.Ссылка = &ДокументОснование и (Док.Номенклатура.Услуга = Ложь)";
	
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Товары.Загрузить(РезультатЗапроса.Выгрузить());
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
		Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, 
		Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		
		СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
		Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
		УчитыватьНДС, СуммаВключаетНДС,
		УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение возвратной тары по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование) Экспорт
	
	Если ДокументОснование.Метаданные().ТабличныеЧасти.Найти("ВозвратнаяТара") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;
	Если ДокументОснованиеИмя = "РеализацияТоваровУслуг" Тогда
		ДобавкаСчетов = "
		|	Док.СчетУчета,";
	Иначе
		ДобавкаСчетов = "";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КратностьДокумента,"
	+ ДобавкаСчетов + "
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.Цена
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".ВозвратнаяТара КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();
		
		СтрокаВозвратнойТары.Номенклатура     = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество       = Выборка.Количество;
		СтрокаВозвратнойТары.Цена             = Выборка.Цена;
		
		Если ДокументОснованиеИмя = "РеализацияТоваровУслуг" Тогда
			СтрокаВозвратнойТары.СчетУчета  = Выборка.СчетУчета;
		Иначе
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаВозвратнойТары, "ВозвратнаяТара", Истина);
		КонецЕсли;
		
		// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
		Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаВозвратнойТары.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, 
		Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		
		ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОснованию()

// Заполняет счета в строке табличной части.
//
Процедура ЗаполнитьСчета(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, Заполнять, МетаданныеДокумента)
	
	Если Заполнять = Истина Тогда
		
		СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеСчетУчета", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.ПереданныеСчетУчета  = СчетаУчета.СчетПередачи;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходов", МетаданныеДокумента, ИмяТабЧасти) Тогда
			
			СтрокаТЧ.СчетДоходов  = СчетаУчета.СчетДоходов;
			СтрокаТЧ.СчетРасходов = СчетаУчета.СчетРасходов;
			
			Если СтрокаТЧ.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
				СтрокаТЧ.Субконто = Новый(СтрокаТЧ.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
				Если ТипЗнч(СтрокаТЧ.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					СтрокаТЧ.Субконто = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
			Иначе
				СтрокаТЧ.Субконто = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДСПоРеализации", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
		КонецЕсли;
		
	ИначеЕсли Заполнять = Ложь Тогда
		
		СтрокаТЧ.СчетУчета  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходов", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетДоходов  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			СтрокаТЧ.СчетРасходов = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДСПоРеализации", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчета

// Заполняет счета в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, Заполнять) Экспорт
	
	СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
	МетаданныеДока = ЭтотОбъект.Метаданные();
	
	ЗаполнитьСчета(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, Заполнять, МетаданныеДока);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

Процедура ЗаполнитьСчетаУчетаРасчетов(СчетаУчета = неопределено) Экспорт
	
    Если СчетаУчета = неопределено Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	КонецЕсли;
	СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
	СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТарыПокупателя;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧастиУслуги()

// Заполняет счета в табличной части.
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, Заполнять) Экспорт
	
	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ИмяТабЧасти, Заполнять);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

Процедура УстановитьРеквизитыУчетаНДС() Экспорт
	
	Если ПокупателемВыставляетсяСчетФактураНаВозврат И (Дата <= '20060101' Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		ПокупателемВыставляетсяСчетФактураНаВозврат = Ложь;
	КонецЕсли;
	
	Если ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
		Если Не ОтразитьВКнигеПокупок Тогда
			ОтразитьВКнигеПокупок = Истина;
		КонецЕсли;
	ИначеЕсли ПредъявленСчетФактура	Тогда
		ПредъявленСчетФактура = Ложь;
	КонецЕсли;
	
	Если ?(ПокупателемВыставляетсяСчетФактураНаВозврат, Не ПредъявленСчетФактура, Не ЗначениеЗаполнено(Сделка))  
		И НДСПредъявленКВычету Тогда
		НДСПредъявленКВычету = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ТаблицаТоваров.Колонки.Добавить("Регистратор");
		ТаблицаТоваров.Колонки.Добавить("Организация");
		ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаТоваров.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
		ТаблицаТоваров.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ТаблицаТоваров.Колонки.Добавить("НДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		ТаблицаТоваров.Колонки.Добавить("ОтражениеВУСН");
		
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.Принимаются,     "ОтражениеВУСН");
		
		ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                                 "Регистратор");
		ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,        "Организация");
		ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,              "Склад");
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("КорПодразделениеОрганизации");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.КорПодразделениеОрганизации, "КорПодразделениеОрганизации");
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)
	
	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	Возврат ТаблицаТары;
	
КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	// Сделка должна быть заполнена, если учет взаиморасчетов всегда.
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов");
	
	Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	Если ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтразитьВКнигеПокупок тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Документ не может осуществлять возврат на неавтоматизированную торговую точку!", Отказ, Заголовок);
	КонецЕсли;
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ОтразитьВКнигеПокупок 
		И Не СтруктураШапкиДокумента.ПокупателемВыставляетсяСчетФактураНаВозврат
		И Не ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) Тогда
		Сообщить("Для автоматического отражения вычета в книге покупок по счету-фактуре реализации требуется указание документа отгрузки.", СтатусСообщения.Внимание);
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		и НЕ Товары.Найти(Перечисления.СтавкиНДС.НДС0, "СтавкаНДС") = Неопределено Тогда
		// Возврат по реализации 0% можно (корректно) отразить только как сторно книги продаж,
		// при этом должен быть указан документ реализации
		Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Для отражения возврата товаров, реализованных по ставке НДС 0%, необходимо указать документ отгрузки",Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Товары";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество"); //, ДокументПартии
	СтруктураОбязательныхПолей.Вставить("СчетУчета");
	СтруктураПроверкиПоУсловию = Новый Структура();
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		СтруктураПроверкиПоУсловию.Вставить("СчетРасходов","не УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(!СчетУчета)");
		СтруктураПроверкиПоУсловию.Вставить("СчетДоходов","не УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(!СчетУчета)");
		СтруктураПроверкиПоУсловию.Вставить("СчетУчетаНДСПоРеализации","не УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(!СчетУчета)");
		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		СтруктураОбязательныхПолей.Вставить("Сумма");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		СтруктураОбязательныхПолей.Вставить("ПереданныеСчетУчета");
		
	КонецЕсли;
	
	Если не УказанаПартия И НЕ (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		
		СтруктураОбязательныхПолей.Вставить("Себестоимость");
		
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураПроверкиПоУсловию.Количество()>0 Тогда
		ПроверитьЗаполнениеТабличнойЧастиПоУсловию(ЭтотОбъект, "Товары", СтруктураПроверкиПоУсловию, Отказ, Заголовок);
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Товары"": ";

		// Проверка номера ГТД
		Если УправлениеЗапасами.НеУказанНомерГТД(СтрокаТЧ.НомерГТД, СтрокаТЧ.СтранаПроисхождения) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Номер ГТД""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, Заголовок);
		КонецЕсли;
		
		// {УчетДоходовИРасходовИП
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя 
			И НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Если НЕ СтруктураШапкиДокумента.СчетаСНоменклатурнымиГруппами.Найти(СтрокаТЧ.СчетДоходов) = Неопределено 
				И НЕ ЗначениеЗаполнено(СтрокаТЧ.Субконто) 
				Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Субконто""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		// }УчетДоходовИРасходовИП
		
	КонецЦикла;
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
//
// Параметры:
//  ДокументОбъект             - объект проводимого документа, 
//  ИмяТабличнойЧасти          - табличная часть документа,
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоУсловию(ДокументОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, 
	Отказ, Заголовок)
	
	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	ТабличнаяЧасть      = ДокументОбъект[ИмяТабличнойЧасти];
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	
	Для каждого Реквизит Из СтруктураОбязательныхПолей Цикл
		Если ПустаяСтрока(Реквизит.Значение) Тогда
			СтруктураОбязательныхПолей.Вставить(Реквизит.Ключ," Истина ")
		ИначеЕсли не Найти(Реквизит.Значение,"!")=0 тогда
			СтруктураОбязательныхПолей.Вставить(Реквизит.Ключ,СтрЗаменить(Реквизит.Значение,"!","СтрокаТаблицы."));
		КонецЕсли; 
	КонецЦикла; 
	
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			Условие = КлючЗначение.Значение;
			ПроверятьСтроку = Истина;
			Выполнить("ПроверятьСтроку = не (("+Условие+")= Ложь)");
			
			Если ПроверятьСтроку = Ложь Тогда
				Продолжить;
			КонецЕсли; 
			
			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда // 
				
				//
				ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
				
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "ВозвратнаяТара";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	
	СтруктураОбязательныхПолей.Вставить("СчетУчета");
	
	// Теперь вызовем общую процедуру проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

Функция СформироватьТаблицуПоТоварамКомитента(Номенклатура, ДокументОтгрузки, ВозвратКоличество, Отказ, Заголовок)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор",  	ДокументОтгрузки);
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(РеализованныеТоварыКомитентовОбороты.КоличествоПриход) КАК Количество,
	|	СУММА(РеализованныеТоварыКомитентовОбороты.ВыручкаПриход) КАК Выручка,
	|	СУММА(РеализованныеТоварыКомитентовОбороты.СуммаПоступленияПриход) КАК СуммаПоступления,
	|	РеализованныеТоварыКомитентовОбороты.Контрагент,
	|	РеализованныеТоварыКомитентовОбороты.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.РеализованныеТоварыКомитентов.Обороты(, , Регистратор, ) КАК РеализованныеТоварыКомитентовОбороты
	|ГДЕ
	|	РеализованныеТоварыКомитентовОбороты.Регистратор = &Регистратор
	|	И РеализованныеТоварыКомитентовОбороты.Организация = &Организация
	|	И РеализованныеТоварыКомитентовОбороты.Номенклатура = &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализованныеТоварыКомитентовОбороты.Контрагент,
	|	РеализованныеТоварыКомитентовОбороты.ДоговорКонтрагента";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СформироватьТаблицуВозвращенныхПартий()

// На основании указанного в строке документа реализации
// подбираются партии, по которым будет отражать возврат.
// Сформированная таблица партий возвращается.
//
Функция СформироватьТаблицуВозвращенныхПартий(СчетУчета, Номенклатура, ДокументОтгрузки, ВозвратКоличество, Отказ, Заголовок)
	
	ТаблицаВозвращенныхПартий = Новый ТаблицаЗначений;
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Партия", Новый ОписаниеТипов(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения.Типы()));
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Количество");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СуммаСписания", 	Новый ОписаниеТипов("Число"));
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СуммаСписанияНУ", 	Новый ОписаниеТипов("Число"));
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СуммаСписанияПР", 	Новый ОписаниеТипов("Число"));
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СуммаСписанияВР", 	Новый ОписаниеТипов("Число"));
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Комиссионный");

	
	МассивВидовСубконто = Новый Массив;
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор",  ДокументОтгрузки);
	Запрос.УстановитьПараметр("СчетКт",       СчетУчета);
	Запрос.УстановитьПараметр("КонДата",      Дата);
	Запрос.УстановитьПараметр("Товар",        Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконто", МассивВидовСубконто);
	Запрос.УстановитьПараметр("ВидУчетаНУ", Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("ВидУчетаПР", Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("ВидУчетаВР", Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("ЭтотВозврат",  Ссылка);
	
	Если УправлениеЗапасамиПартионныйУчет.НаСчетеВедетсяПартионныйУчет(СчетУчета) Тогда
		
		МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОборотыДтКт.СубконтоКт2 КАК Партия,
		|	ОборотыДтКт.СуммаОборот КАК Сумма,
		|	ОборотыДтКт.СуммаНУОборотКТ КАК СуммаНУ,
		|	ОборотыДтКт.СуммаПРОборотКТ КАК СуммаПР,
		|	ОборотыДтКт.СуммаВРОборотКТ КАК СуммаВР,
		|	ОборотыДтКт.КоличествоОборотКт КАК Количество
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, &КонДата, Регистратор, , , СчетКт = &СчетКт, &ВидыСубконто, СубконтоКт1 = &Товар) КАК ОборотыДтКт
		|
		|ГДЕ
		|	(ОборотыДтКт.Регистратор = &Регистратор И ОборотыДтКт.КоличествоОборотКт >= 0) ИЛИ
		|	(ОборотыДтКт.Регистратор Ссылка Документ.ВозвратТоваровОтПокупателя И ОборотыДтКт.Регистратор <> &ЭтотВозврат И ОборотыДтКт.КоличествоОборотКт <= 0 И ОборотыДтКт.Регистратор.Сделка = &Регистратор)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Количество УБЫВ";
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	NULL КАК Партия,
		|	ОборотыДтКт.СуммаОборот КАК Сумма,
		|	ОборотыДтКт.СуммаНУОборотКт КАК СуммаНУ,
		|	ОборотыДтКт.СуммаПРОборотКт КАК СуммаПР,
		|	ОборотыДтКт.СуммаВРОборотКт КАК СуммаВР,
		|	ОборотыДтКт.КоличествоОборотКт КАК Количество
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Регистратор, , , СчетКт = &СчетКт, &ВидыСубконто, СубконтоКт1 = &Товар) КАК ОборотыДтКт
		|ГДЕ
		|	(ОборотыДтКт.Регистратор = &Регистратор
		|				И ОборотыДтКт.КоличествоОборотКт >= 0
		|			ИЛИ (ОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя И ОборотыДтКт.Регистратор <> &ЭтотВозврат)
		|				И ОборотыДтКт.КоличествоОборотКт <= 0
		|				И ОборотыДтКт.Регистратор.Сделка = &Регистратор)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Количество УБЫВ";
		
	КонецЕсли;
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Свернуть("Партия", "Сумма, СуммаНУ, СуммаПР, СуммаВР, Количество");
	
	КоличествоНеПодобраноПартии = ВозвратКоличество;
	
	// Подберем партии, по которым отразим возврат
	Для каждого Партия Из ТаблицаДанных Цикл
		
		НоваяСтрока = ТаблицаВозвращенныхПартий.Добавить();
		НоваяСтрока.Партия = Партия.Партия;
		
		Если КоличествоНеПодобраноПартии > Партия.Количество Тогда
			
			НоваяСтрока.Количество    	= Партия.Количество;
			НоваяСтрока.СуммаСписания 	= Партия.Сумма;
			НоваяСтрока.СуммаСписанияНУ = Партия.СуммаНУ;
			НоваяСтрока.СуммаСписанияПР = Партия.СуммаПР;
			НоваяСтрока.СуммаСписанияВР = Партия.СуммаВР;
			КоличествоНеПодобраноПартии = КоличествоНеПодобраноПартии - Партия.Количество;
			
		Иначе
			
			НоваяСтрока.Количество    	= КоличествоНеПодобраноПартии;
            НоваяСтрока.СуммаСписания 	= Окр(Партия.Сумма * (КоличествоНеПодобраноПартии / Партия.Количество), 2);
			НоваяСтрока.СуммаСписанияНУ	= Окр(Партия.СуммаНУ * (КоличествоНеПодобраноПартии / Партия.Количество), 2);
			НоваяСтрока.СуммаСписанияПР = Окр(Партия.СуммаПР * (КоличествоНеПодобраноПартии / Партия.Количество), 2);
			НоваяСтрока.СуммаСписанияВР = Окр(Партия.СуммаВР * (КоличествоНеПодобраноПартии / Партия.Количество), 2);
			КоличествоНеПодобраноПартии = 0;
			
		КонецЕсли;
		
		// Если подобраны партии для всего объема товара, то выходим из цикла
		Если КоличествоНеПодобраноПартии = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если в документе указан документ реализации по которому было отгружено больше,
	// чем возвращается, то эту разницу отнесем на пустую партию.
	Если КоличествоНеПодобраноПартии > 0 Тогда
		
		СообщенияОбОшибке = "Документом " + СокрЛП(ДокументОтгрузки) + " было реализовано " + Номенклатура + " на " + КоличествоНеПодобраноПартии + " ед. меньше, чем возвращается.";
		ОбщегоНазначения.ОшибкаПриПроведении(СообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
	Комиссионный = УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СчетУчета);
	ТаблицаВозвращенныхПартий.ЗаполнитьЗначения(Комиссионный, "Комиссионный");
	
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СчетУчета");
	ТаблицаВозвращенныхПартий.ЗаполнитьЗначения(СчетУчета, "СчетУчета");
	
	Возврат ТаблицаВозвращенныхПартий;
	
КонецФункции // СформироватьТаблицуВозвращенныхПартий()

Функция СформироватьТаблицуВозвращенныхПартийБезУказанияПартии(СчетУчета, Номенклатура, ДокументПартия, ВозвратКоличество, ВозвратСумма, Отказ, Заголовок)

	ТаблицаВозвращенныхПартий = Новый ТаблицаЗначений;
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Партия", Новый ОписаниеТипов(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения.Типы()));
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Количество");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СуммаСписания", 	Новый ОписаниеТипов("Число"));
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СуммаСписанияНУ", 	Новый ОписаниеТипов("Число"));
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СуммаСписанияПР", 	Новый ОписаниеТипов("Число"));
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СуммаСписанияВР", 	Новый ОписаниеТипов("Число"));
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Комиссионный");
	
	// Добавляется единственная строка с данными партии.
	Строка = ТаблицаВозвращенныхПартий.Добавить();
	
	Строка.Партия        	= ДокументПартия;
	Строка.Количество    	= ВозвратКоличество;
	Строка.СуммаСписания 	= ВозвратСумма;
	Строка.СуммаСписанияНУ 	= ВозвратСумма;

	ТаблицаВозвращенныхПартий.ЗаполнитьЗначения(Ложь, "Комиссионный");
	
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СчетУчета");
	ТаблицаВозвращенныхПартий.ЗаполнитьЗначения(СчетУчета, "СчетУчета");
	
	Возврат ТаблицаВозвращенныхПартий;
	
КонецФункции // СформироватьТаблицуВозвращенныхПартийБезУказанияПартии()

// Формируются проводки по отражению возврата товаров
// 
Процедура ВозвратПартийТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Проводки = Движения.Хозрасчетный;
	
	ПартионныйУчет = УправлениеЗапасами.ВедетсяПартионныйУчет(ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация, "Бух"), "БУ");
	
	ДатаДока = Дата;
	СкладПроводок = СтруктураШапкиДокумента.Склад;
	
	ТаблицаПоТоварам.Колонки.Добавить("СписанныеПартии");
	
	//Установим управляемые блокировки
	Если УказанаПартия И глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		//Установим блокировку на движения регистратора
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный.НаборЗаписей");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Регистратор", СтруктураШапкиДокумента.Сделка); 
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, );
	КонецЕсли;

	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		ТаблицаВозвращенныхПартий = ?(УказанаПартия,
		                              СформироватьТаблицуВозвращенныхПартий(СтрокаТЧ.СчетУчета,
		                                                                    СтрокаТЧ.Номенклатура,
		                                                                    СтруктураШапкиДокумента.Сделка,
		                                                                    СтрокаТЧ.Количество,
		                                                                    Отказ, Заголовок),
		                              СформироватьТаблицуВозвращенныхПартийБезУказанияПартии(СтрокаТЧ.СчетУчета,
		                                                                                     СтрокаТЧ.Номенклатура,
		                                                                                     Ссылка,
		                                                                                     СтрокаТЧ.Количество,
		                                                                                     СтрокаТЧ.Себестоимость,
		                                                                                     Отказ, Заголовок));
		СтрокаТЧ.СписанныеПартии = ТаблицаВозвращенныхПартий;
		
		Если УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаТЧ.СчетУчета) Тогда
			ТаблицаПоТоварамКомитента = СформироватьТаблицуПоТоварамКомитента(СтрокаТЧ.Номенклатура, 
																			СтруктураШапкиДокумента.Сделка, 
																			СтрокаТЧ.Количество, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			
			Для каждого Партия Из ТаблицаВозвращенныхПартий Цикл
				МПЗ = БухгалтерскийУчет.ПолучитьНазваниеОбъекта(СтрокаТЧ.СчетУчета);
				Проводка = Проводки.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = "Возврат " + МПЗ + " от покупателя";
				Проводка.Сумма        = - Партия.СуммаСписания;
				
				Если НЕ УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаТЧ.СчетУчета) Тогда
					Проводка.СчетДт       = СтрокаТЧ.СчетРасходов;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.Субконто);
				ИначеЕсли ЗначениеЗаполнено(Партия.Партия) Тогда
					МетаданныеДокумента = Партия.Партия.Метаданные();
					Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) Тогда
						ДоговорСКомитентом = Партия.Партия.ДоговорКонтрагента;
						СтрокаРеализованныхТоваров = ТаблицаПоТоварамКомитента.Найти(ДоговорСКомитентом, "ДоговорКонтрагента");
						Если НЕ СтрокаРеализованныхТоваров = Неопределено Тогда
							Если СтрокаРеализованныхТоваров.Количество > 0 Тогда
								ВалютаРасчетовСКомитентом = ДоговорСКомитентом.ВалютаВзаиморасчетов;
								ВалютаВзаиморасчетовСПокупателем = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
								ДоляСуммы = ?(СтрокаТЧ.Количество = 0, 0, СтрокаТЧ.Сумма * Партия.Количество / СтрокаТЧ.Количество);
								Если ВалютаРасчетовСКомитентом = мВалютаРегламентированногоУчета Тогда
									Выручка = ДоляСуммы;
								ИначеЕсли ВалютаРасчетовСКомитентом = ВалютаВзаиморасчетовСПокупателем Тогда
									Выручка = ?(СтрокаТЧ.Количество = 0, 0, СтрокаТЧ.СуммаВал * Партия.Количество / СтрокаТЧ.Количество);
								Иначе
									ДанныеОВалютеРасчетовСКомитентом = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРасчетовСКомитентом,СтруктураШапкиДокумента.Дата);
									Выручка = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ДоляСуммы, мВалютаРегламентированногоУчета,ВалютаРасчетовСКомитентом
																	,1,ДанныеОВалютеРасчетовСКомитентом.Курс
																	,1,ДанныеОВалютеРасчетовСКомитентом.Кратность);
								КонецЕсли;
								
								Движение = Движения.РеализованныеТоварыКомитентов.ДобавитьРасход();
								Движение.Активность		 	= Истина;
								Движение.Период				= СтруктураШапкиДокумента.Дата;
								Движение.Организация 		= СтруктураШапкиДокумента.Организация;
								
								Движение.Контрагент		 	= СтрокаРеализованныхТоваров.Контрагент;
								Движение.ДоговорКонтрагента	= СтрокаРеализованныхТоваров.ДоговорКонтрагента;
								Движение.Номенклатура 		= СтрокаТЧ.Номенклатура;
								
								Коэфф = Партия.Количество / СтрокаРеализованныхТоваров.Количество;
								
								Движение.Количество 		= Коэфф * СтрокаРеализованныхТоваров.Количество;
								Движение.СуммаПоступления	= Коэфф * СтрокаРеализованныхТоваров.СуммаПоступления;
								
								Движение.Выручка 			= Выручка;
								
								СтрокаРеализованныхТоваров.Количество 		= СтрокаРеализованныхТоваров.Количество - Движение.Количество;
								СтрокаРеализованныхТоваров.СуммаПоступления	= СтрокаРеализованныхТоваров.СуммаПоступления - Движение.СуммаПоступления;
								
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Проводка.СчетКт       = СтрокаТЧ.СчетУчета;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Склады",       СкладПроводок);
				
				Если (ПартионныйУчет) ИЛИ (УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаТЧ.СчетУчета)) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Партии",       Партия.Партия);
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.КорПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);	
					
				Проводка.КоличествоКт = -Партия.Количество;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(- Партия.СуммаСписанияНУ,- Партия.СуммаСписанияНУ,- Партия.СуммаСписанияПР,- Партия.СуммаСписанияПР,- Партия.СуммаСписанияВР,- Партия.СуммаСписанияВР,Проводка, мПоддержкаПБУ18); 
				КонецЕсли;
				
			КонецЦикла; // Для каждого Партия Из ТаблицаВозвращенныхПартий Цикл
			
		КонецЕсли; // Если Не Отказ Тогда
		
	КонецЦикла; // Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
	
Конецпроцедуры

Процедура ВозвратПоДокументуУСН(РежимПроведения, СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, ТаблицаПоТоварам, Отказ, Заголовок)
	
	СторноРасходов = 0;
	КУДиР = Движения.КнигаУчетаДоходовИРасходов;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		Движения.РасходыПриУСН.Очистить();
		НаборДвиженийРасходов = Движения.РасходыПриУСН;
		ТаблицаДвиженийРасходов = НаборДвиженийРасходов.ВыгрузитьКолонки();
		
		СторноНДС = 0;
		ПризнаниеНДС = 0;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация, "Нал");
		СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоНДС",УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС);
		СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоТоварам",УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам);
		СтруктураШапкиДокумента.Вставить("ПорядокПризнанияМатериальныхРасходов",УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов);
		ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
		
		ВыделятьНДСУСНРеализация = ВыделятьНДСУСН;
		
		УчетнаяПолитикаРеализация = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Сделка.Дата, Ложь, СтруктураШапкиДокумента.Организация, "Нал");
		ВыделятьНДСУСНРеализация = (УчетнаяПолитикаРеализация.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
		
		ТоварыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
		ТоварыПоОтгрузке = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
		МатериалыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
		
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
		
		ЗапросПоПартиям = Новый Запрос();
		ЗапросПоПартиям.УстановитьПараметр("Регистратор",  СтруктураШапкиДокумента.Сделка);
		ЗапросПоПартиям.УстановитьПараметр("ЭтотВозврат",  Ссылка);
		ЗапросПоПартиям.УстановитьПараметр("КонДата",      Дата);
		ЗапросПоПартиям.УстановитьПараметр("Организация",  Организация);
		ЗапросПоПартиям.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
		
		ЗапросПоПартиям.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партии.Субконто1 КАК Номенклатура,
		|	Партии.Субконто2 КАК ДокументОприходования,
		|	СУММА(-Партии.КоличествоОборот) КАК Количество
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(, &КонДата, Регистратор, , &ВидыСубконто, Организация  = &Организация) КАК Партии
		|ГДЕ
		|	(Партии.Регистратор = &Регистратор
		|				И Партии.КоличествоОборот < 0
		|			ИЛИ (Партии.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя И Партии.Регистратор <> &ЭтотВозврат)
		|				И Партии.КоличествоОборот > 0
		|				И Партии.Регистратор.Сделка = &Регистратор)
		|
		|СГРУППИРОВАТЬ ПО
		|	Партии.Субконто1,
		|	Партии.Субконто2
		|
		|УПОРЯДОЧИТЬ ПО
		|	Количество УБЫВ";
		
		ТаблицаПартийРасход = ЗапросПоПартиям.Выполнить().Выгрузить();
		
		//Добавим в партии информацию об изменении ОтражениеВУСН
		СтруктураШапкиДокументаРеализации = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(СтруктураШапкиДокумента.Сделка.ПолучитьОбъект());
		НалоговыйУчетУСН.ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокументаРеализации, ТаблицаПартийРасход, "Реализация");
		
		//Соберем данные о списанных расходах
		НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Сделка);
		НаборЗаписей.Прочитать();
		ТаблицаРасходов = НаборЗаписей.Выгрузить();
		
		//Удалим движения прихода
		КолСтрок = ТаблицаРасходов.Количество();
		Для Н = 1 по КолСтрок Цикл
			Если ТаблицаРасходов[КолСтрок - Н].ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				ТаблицаРасходов.Удалить(ТаблицаРасходов[КолСтрок - Н]);
			КонецЕсли;
		КонецЦикла;
		
		//Формирование таблицы фильтров
		ТаблицаФильтров = Новый ТаблицаЗначений;
		ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
		ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
		ТаблицаФильтров.Колонки.Добавить("Условие");
		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "ВидРасхода";
		Фильтр.ЗначениеПоля		= Перечисления.ВидыРасходовУСН.Номенклатура;
		Фильтр.Условие			= "=";
		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СтатусыПартийУСН";
		Фильтр.ЗначениеПоля		= Перечисления.СтатусыПартийУСН.Списанные;
		Фильтр.Условие			= "=";
		
		МассивНоменклатуры = ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура");
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);
		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "ЭлементРасхода";
		Фильтр.ЗначениеПоля		= МассивНоменклатуры;
		Фильтр.Условие			= "В";
		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "Партия";
		Фильтр.ЗначениеПоля		= СтруктураШапкиДокумента.Сделка;
		Фильтр.Условие			= "=";
		
		//Из таблицы расходов выбираем соответствующие партии и элементы расходов
		ТаблицаОстатковРасходов = НалоговыйУчетУСН.ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
		
		ТаблицаПартийРасход.Индексы.Добавить("Номенклатура");
		ТаблицаРасходов.Индексы.Добавить("ЭлементРасхода,Партия");
		ТаблицаОстатковРасходов.Индексы.Добавить("ЭлементРасхода");
		
		Для Каждого Строка Из ТаблицаПоТоварам Цикл
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура",	Строка.Номенклатура);
			
			НайденныеСтроки = ТаблицаПартийРасход.НайтиСтроки(СтруктураОтбора);
			
			СтатусСписания = Перечисления.ОтражениеВУСН.ПустаяСсылка();
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтатусСписания = НайденныеСтроки[0].СтатусСписания;
			КонецЕсли;
			
			//Добавить строки поступления по партиям
			КоличествоОсталосьСписать = Строка.Количество;
			Для Каждого СтрокаПартии Из НайденныеСтроки Цикл
				Если НЕ КоличествоОсталосьСписать > 0 Тогда
					Прервать;
				КонецЕсли;
				Если НЕ СтрокаПартии.Количество > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоСписать = Мин(КоличествоОсталосьСписать, СтрокаПартии.Количество);
				КоличествоОсталосьСписать 	= КоличествоОсталосьСписать - КоличествоСписать;
				СтрокаПартии.Количество 	= СтрокаПартии.Количество - КоличествоСписать;
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ЭлементРасхода",	Строка.Номенклатура);
				
				СтруктураОтбораПоПартиям = Новый Структура;
				СтруктураОтбораПоПартиям.Вставить("ЭлементРасхода",	Строка.Номенклатура);
				СтруктураОтбораПоПартиям.Вставить("Партия",			СтрокаПартии.ДокументОприходования);
				
				НайденныеСтрокиСписано = ТаблицаРасходов.НайтиСтроки(СтруктураОтбораПоПартиям);
				НайденныеСтрокиОстаток = ТаблицаОстатковРасходов.НайтиСтроки(СтруктураОтбора);
				
				КоличествоОсталосьСписатьРасход = КоличествоСписать;
				Для Каждого СтрокаСписания Из НайденныеСтрокиСписано Цикл
					Если НЕ СтрокаСписания.Количество > 0 Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого СтрокаОстатка Из НайденныеСтрокиОстаток Цикл
						Если НЕ СтрокаСписания.Количество > 0 Тогда
							Продолжить;
						КонецЕсли;
						Если НЕ КоличествоОсталосьСписатьРасход > 0 Тогда
							Прервать;
						КонецЕсли;
						Если НЕ СтрокаОстатка.Количество > 0 Тогда
							Продолжить;
						КонецЕсли;
						
						КоличествоСписатьРасход = Мин(КоличествоОсталосьСписатьРасход, СтрокаСписания.Количество, СтрокаОстатка.Количество);
						Коэфф = ?(СтрокаОстатка.Количество = 0, 0, КоличествоСписатьРасход/СтрокаОстатка.Количество);
						//Добавить строки поступления по расходам
						НоваяСтрокаРасход = ТаблицаДвиженийРасходов.Добавить();
						НоваяСтрока = ТаблицаДвиженийРасходов.Добавить();
						
						ЗаполнитьЗначенияСвойств(НоваяСтрокаРасход, СтрокаОстатка);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка);
						
						НоваяСтрокаРасход.ВидДвижения 	= ВидДвиженияНакопления.Расход;
						НоваяСтрока.ВидДвижения 		= ВидДвиженияНакопления.Приход;
						НоваяСтрока.СтатусыПартийУСН 	= СтрокаСписания.СтатусыПартийУСН;
						НоваяСтрока.Партия 				= СтрокаСписания.Партия;
						Если (НоваяСтрока.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем) или
							(НоваяСтрока.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеРаспределено) Тогда
							НоваяСтрока.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
						Иначе
							НоваяСтрока.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
						КонецЕсли;
						//Движение расход
						НоваяСтрокаРасход.Сумма 		= Коэфф*СтрокаОстатка.Сумма;
						НоваяСтрокаРасход.НДС 			= Коэфф*СтрокаОстатка.НДС;
						НоваяСтрокаРасход.Количество 	= КоличествоСписатьРасход;
						//Движение приход
						НоваяСтрока.Сумма 		= Коэфф*СтрокаОстатка.Сумма;
						НоваяСтрока.НДС 		= Коэфф*СтрокаОстатка.НДС;
						НоваяСтрока.Количество 	= КоличествоСписатьРасход;
						
						КоличествоОсталосьСписатьРасход 	= КоличествоОсталосьСписатьРасход - КоличествоСписатьРасход;
						СтрокаСписания.Количество 	= СтрокаСписания.Количество - НоваяСтрока.Количество;
						СтрокаСписания.Сумма 		= СтрокаСписания.Сумма - НоваяСтрока.Сумма;
						СтрокаСписания.НДС 			= СтрокаСписания.НДС - НоваяСтрока.НДС;
						
						СтрокаОстатка.Количество 	= СтрокаОстатка.Количество - НоваяСтрока.Количество;
						СтрокаОстатка.Сумма 		= СтрокаОстатка.Сумма - НоваяСтрока.Сумма;
						СтрокаОстатка.НДС 			= СтрокаОстатка.НДС - НоваяСтрока.НДС;
						
						Если (СтруктураШапкиДокумента.Дата >= Дата("20060101")) И (ТоварыПоОтгрузке) И
							(НоваяСтрокаРасход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем) И 
							(НоваяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) И 
							(НЕ СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда
							
							КурсВалюты  = МодульВалютногоУчета.ПолучитьКурсВалюты(НоваяСтрока.Валюта, СтруктураШапкиДокумента.Дата);					
							
							КурсВалюты  = МодульВалютногоУчета.ПолучитьКурсВалюты(НоваяСтрока.Валюта, СтруктураШапкиДокумента.Дата);					
							СторноРасходов = СторноРасходов + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма, НоваяСтрока.Валюта, мВалютаРегламентированногоУчета,КурсВалюты.Курс, 1, КурсВалюты.Кратность, 1);
							СторноНДС	   = СторноНДС + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяСтрока.НДС, НоваяСтрока.Валюта, мВалютаРегламентированногоУчета,КурсВалюты.Курс, 1, КурсВалюты.Кратность, 1);
							
						ИначеЕсли (ВыделятьНДСУСН) И
							(НоваяСтрока.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано) И 
							(НоваяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) И 
							(СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда
							
							КурсВалюты  = МодульВалютногоУчета.ПолучитьКурсВалюты(НоваяСтрока.Валюта, СтруктураШапкиДокумента.Дата);
							ПризнаниеНДС = ПризнаниеНДС + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяСтрока.НДС, НоваяСтрока.Валюта, мВалютаРегламентированногоУчета,КурсВалюты.Курс, 1, КурсВалюты.Кратность, 1);
							
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
				
				Если КоличествоОсталосьСписатьРасход > 0 Тогда
					Для Каждого СтрокаСписания Из НайденныеСтрокиСписано Цикл
						Если НЕ СтрокаСписания.Количество > 0 Тогда
							Продолжить;
						КонецЕсли;
						КоличествоСписатьРасход = Мин(КоличествоОсталосьСписатьРасход, СтрокаСписания.Количество);
						Коэфф = ?(СтрокаСписания.Количество = 0, 0, КоличествоСписатьРасход/СтрокаСписания.Количество);
						
						//Добавить строки поступления по расходам
						НоваяСтрока = ТаблицаДвиженийРасходов.Добавить();
						Для Каждого Кол Из ТаблицаДвиженийРасходов.Колонки Цикл
							Если ПустаяСтрока(Кол.Имя) ИЛИ Кол.Имя = "QuieryId" Тогда
								Продолжить;
							КонецЕсли; 
							НоваяСтрока[Кол.Имя] = СтрокаСписания[Кол.Имя];
						КонецЦикла;
						НоваяСтрока.ВидДвижения 		= ВидДвиженияНакопления.Приход;
						
						//Определим сумму сторнируемых расходов
						ЭтоТовар = ((Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные)) ИЛИ 
						(Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Товары)));
						ЭтоМатериал = Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы);
						РасходыПоОплате = ((ТоварыПоОплате И ЭтоТовар) ИЛИ (МатериалыПоОплате И ЭтоМатериал));
						
						Если (РасходыПоОплате) И (НоваяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) Тогда
							НоваяСтрока.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
						Иначе
							НоваяСтрока.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
						КонецЕсли;
						
						//Движение приход
						НоваяСтрока.Сумма 		= Коэфф*СтрокаСписания.Сумма;
						НоваяСтрока.НДС 		= Коэфф*СтрокаСписания.НДС;
						НоваяСтрока.Количество 	= КоличествоСписатьРасход;
						
						КоличествоОсталосьСписатьРасход = КоличествоОсталосьСписатьРасход - КоличествоСписатьРасход;
						СтрокаСписания.Количество 	= СтрокаСписания.Количество - НоваяСтрока.Количество;
						СтрокаСписания.Сумма 		= СтрокаСписания.Сумма - НоваяСтрока.Сумма;
						СтрокаСписания.НДС 			= СтрокаСписания.НДС - НоваяСтрока.НДС;
						
						Если (НЕ ВыделятьНДСУСНРеализация) И (ВыделятьНДСУСН) Тогда
							НоваяСтрока.Сумма = НоваяСтрока.Сумма - НоваяСтрока.НДС;
						КонецЕсли;
						
						Если (НЕ РасходыПоОплате) И (НоваяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
							И (НЕ СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда
							
							КурсВалюты  = МодульВалютногоУчета.ПолучитьКурсВалюты(НоваяСтрока.Валюта, СтруктураШапкиДокумента.Дата);					
							СторноРасходов = СторноРасходов + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма, НоваяСтрока.Валюта, мВалютаРегламентированногоУчета,КурсВалюты.Курс, 1, КурсВалюты.Кратность, 1);
							СторноНДС	   = СторноНДС + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяСтрока.НДС, НоваяСтрока.Валюта, мВалютаРегламентированногоУчета,КурсВалюты.Курс, 1, КурсВалюты.Кратность, 1);
							
						ИначеЕсли (ВыделятьНДСУСН) И
							(НоваяСтрока.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано) И 
							(НоваяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) И 
							(СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда
							
							КурсВалюты  = МодульВалютногоУчета.ПолучитьКурсВалюты(НоваяСтрока.Валюта, СтруктураШапкиДокумента.Дата);
							ПризнаниеНДС = ПризнаниеНДС + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяСтрока.НДС, НоваяСтрока.Валюта, мВалютаРегламентированногоУчета,КурсВалюты.Курс, 1, КурсВалюты.Кратность, 1);
							
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Если КоличествоОсталосьСписать > 0 Тогда
				
				//Оприходовать по документу возврата
				
			КонецЕсли;
			
		КонецЦикла;
		
		//Недостающие поля.
		ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Дата, "Период");
		ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Ссылка, "Регистратор");
		ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Истина, "Активность");
		
		НаборДвиженийРасходов.мПериод            = Дата;
		НаборДвиженийРасходов.мТаблицаДвижений   = ТаблицаДвиженийРасходов;
		
		Если Не Отказ Тогда
			Движения.РасходыПриУСН.ВыполнитьДвижения();
			НаборДвиженийРасходов.Записать(Истина);
		КонецЕсли;
		
		//ПО РЕГИСТРУ КУДиР
		Если СторноРасходов <> 0 Тогда
			
			СтрокаКниги  = КУДиР.Добавить();
			
			СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаКниги.СтрокаДокумента = 0;
			СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
			СтрокаКниги.Содержание      = "Расходы уменьшены на стоимость товаров, возвращенных покупателем.";
			СтрокаКниги.Графа7          = - СторноРасходов;
			СтрокаКниги.НДС          	= - СторноНДС;
			СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
			
		КонецЕсли;
		
		Если ПризнаниеНДС <> 0 Тогда
			
			СтрокаКниги  = КУДиР.Добавить();
			
			СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаКниги.СтрокаДокумента = 0;
			СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
			СтрокаКниги.Содержание      = "При возврате от покупателя признаны расходы, сторнированные не основании реализации (признаны расходы на уплату НДС).";
			СтрокаКниги.Графа7          = ПризнаниеНДС;
			СтрокаКниги.НДС          	= 0;
			СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаВзаиморасчетов = УчетНДС.ПолучитьСуммуДокументаСНДС(СтруктураШапкиДокумента.Ссылка);
	
	ЗапросЕНВД = Новый Запрос();
	ЗапросЕНВД.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	ЗапросЕНВД.УстановитьПараметр("Комиссия", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	ЗапросЕНВД.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВозвратТоваровОтПокупателяТовары.Сумма) КАК Сумма,
	|	СУММА(ВозвратТоваровОтПокупателяТовары.СуммаНДС) КАК СуммаНДС,
	|	СчетаДоходовИРасходовЕНВД.Счет
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО ВозвратТоваровОтПокупателяТовары.СчетДоходов = СчетаДоходовИРасходовЕНВД.Счет
	|ГДЕ
	|	(ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка)
	|	И (НЕ ВозвратТоваровОтПокупателяТовары.СчетУчета В ИЕРАРХИИ (&Комиссия))
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаДоходовИРасходовЕНВД.Счет";
	
	ИтогиПоЕНВД = ЗапросЕНВД.Выполнить().Выгрузить();
	Если СтруктураШапкиДокумента.СуммаВключаетНДС Тогда
		СуммаЕНВД = ИтогиПоЕНВД.Итог("Сумма");			
	Иначе
		СуммаЕНВД = ИтогиПоЕНВД.Итог("Сумма") + ИтогиПоЕНВД.Итог("СуммаНДС");
	КонецЕсли;
	
	ЗапросКомиссия = Новый Запрос();
	ЗапросКомиссия.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	ЗапросКомиссия.УстановитьПараметр("Комиссия", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	ЗапросКомиссия.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВозвратТоваровОтПокупателяТовары.Сумма) КАК Сумма,
	|	СУММА(ВозвратТоваровОтПокупателяТовары.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	(ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка)
	|	И (ВозвратТоваровОтПокупателяТовары.СчетУчета В ИЕРАРХИИ (&Комиссия))
	|
	|";
	
	ИтогиПоКомиссии = ЗапросКомиссия.Выполнить().Выгрузить();
	Если СтруктураШапкиДокумента.СуммаВключаетНДС Тогда
		СуммаКомиссии = ИтогиПоКомиссии.Итог("Сумма");			
	Иначе
		СуммаКомиссии = ИтогиПоКомиссии.Итог("Сумма") + ИтогиПоКомиссии.Итог("СуммаНДС");
	КонецЕсли;
		
	СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
	
	СуммаЕНВД = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаЕНВД, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		
	СуммаКомиссии = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаКомиссии, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
	
	Для Каждого СтрокаРД Из ТаблицаВзаиморасчетов Цикл
		Если НЕ СтрокаРД.ДокументРасчетов = СтруктураШапкиДокумента.Ссылка Тогда
			СуммаЕНВД = СуммаЕНВД - Мин(СуммаЕНВД, СтрокаРД.СуммаВзаиморасчетовЕНВД);
			СуммаКомиссии = СуммаКомиссии - Мин(СуммаКомиссии, СтрокаРД.СуммаВзаиморасчетовКомитента);			
		КонецЕсли;
	КонецЦикла;
			
	Кратность = ?(КратностьВзаиморасчетов = 0, 1, КратностьВзаиморасчетов);	
	КоррЕНВД 		= Окр(СуммаЕНВД * КурсВзаиморасчетов/Кратность, 2, 1);
	КоррКомиссии 	= Окр(СуммаКомиссии * КурсВзаиморасчетов/Кратность, 2, 1);
	
	Если КоррЕНВД > 0 Тогда
		Если СторноРасходов <> 0 Тогда
			СтрокаКниги.Графа5 			= КоррЕНВД;
			СтрокаКниги.Содержание 		= СтрокаКниги.Содержание + " Задолженность по возврату товаров ЕНВД " + КоррЕНВД + " руб. определена как аванс, ранее не включенный в доходы. ";
			СтрокаКниги.ДоходЕНВД 		= - КоррЕНВД;
		Иначе
			СтрокаКниги  = КУДиР.Добавить();
			СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаКниги.СтрокаДокумента = 0;
			СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
			СтрокаКниги.Содержание      = "Задолженность по возврату товаров ЕНВД " + КоррЕНВД + " руб. определена как аванс, ранее не включенный в доходы. ";
			СтрокаКниги.Графа5 			= КоррЕНВД;
			СтрокаКниги.ДоходЕНВД 		= - КоррЕНВД;
			СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		КонецЕсли;
	КонецЕсли;
	Если КоррКомиссии > 0 Тогда
		Если СторноРасходов <> 0 Тогда
			СтрокаКниги.Графа5 			= КоррКомиссии;
			СтрокаКниги.Содержание 		= СтрокаКниги.Содержание + " Задолженность по возврату комиссионных товаров " + КоррКомиссии + " руб. определена как аванс, ранее не включенный в доходы. ";
			
		Иначе
			СтрокаКниги  = КУДиР.Добавить();
			
			СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаКниги.СтрокаДокумента = 0;
			СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
			СтрокаКниги.Содержание      = "Задолженность по возврату комиссионных товаров " + КоррКомиссии + " руб. определена как аванс, ранее не включенный в доходы. ";
			СтрокаКниги.Графа5 			= КоррКомиссии;
			СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаЗачетаАвансов, Отказ, Заголовок);
	
	Проводки    = Движения.Хозрасчетный;
	
	// Определим задолженность контрагента на момент проведения документа
	ДатаДока = Дата;
	СкладПроводок = СтруктураШапкиДокумента.Склад;
	
	// Определение оплаченность товаров
	Если ТаблицаПоТоварам.Количество() > 0 Тогда
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			// Приходование возвращенных товаров
			ВозвратПартийТоваров(СтруктураШапкиДокумента,ТаблицаПоТоварам,Отказ,Заголовок);
			
			// Отработка списания по партионному учету НДС
			ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок, Истина);
			
			СтруктураТаблицыВыручки = Новый Структура("Номенклатура, Количество, ВидЦенности, Ценность, Партия, 
				|СчетУчетаНДСПоРеализации, СчетУчета, СчетДоходов, Субконто, СтавкаНДС, Сумма, СуммаБУ, СуммаВал, НДС, НДСВал, 
				|СуммаБезНДС, СуммаБУБезНДС, СуммаБезНДСВал, Комиссионный, Комитент, ДоговорКомиссии, СчетРасчетовПоАвансамСКомитентом,
				|СчетРасчетовСКомитентом, ВалютаРасчетовСКомитентом, СуммаСписания" 
				+ ?(ОтразитьВКнигеПокупок, ", СчетФактура, СчетУчетаНДС", 
				?(СтруктураШапкиДокумента.УпрощенныйУчетНДС, ",СчетФактура", "")));
			
			//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
			ВыручкаПоТоварам = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам,СтруктураТаблицыВыручки,,Истина);
			ВыручкаПоТоварам.Очистить();
			
			СписокРаспределяемыхКолонок = Новый Структура("Количество,Сумма,СуммаБУ,СуммаВал,НДС,НДСВал,СуммаБезНДС,СуммаБУБезНДС,СуммаБезНДСВал");
			
			Для каждого СтрокаТаблицыТоваров Из ТаблицаПоТоварам Цикл 
				
				ТаблицаПартий = СтрокаТаблицыТоваров.СписанныеПартии;
				
				Для каждого Партия из ТаблицаПартий Цикл
					
					СтрокаТаблицыВыручки = ВыручкаПоТоварам.Добавить();
					
					Если Партия.Комиссионный тогда
						ПараметрыПартии = УправлениеВзаиморасчетами.ПараметрыРасчетовСКомитентом(Партия.Партия, Отказ, Заголовок);
					КонецЕсли;
					
					Для каждого Колонка из ВыручкаПоТоварам.Колонки Цикл
						
						Если СписокРаспределяемыхКолонок.Свойство(Колонка.Имя) тогда
							СтрокаТаблицыВыручки[Колонка.Имя]= Партия.Количество * 10;
							
						ИначеЕсли Не(ТаблицаПартий.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
							СтрокаТаблицыВыручки[Колонка.Имя] = Партия[Колонка.Имя];
							
						ИначеЕсли Не(ТаблицаПоТоварам.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
							СтрокаТаблицыВыручки[Колонка.Имя] = СтрокаТаблицыТоваров[Колонка.Имя];
							
						Иначе
							
							Если Партия.Комиссионный тогда
								
								Если ПараметрыПартии.Свойство(Колонка.Имя) тогда
									СтрокаТаблицыВыручки[Колонка.Имя] = ПараметрыПартии[Колонка.Имя];
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла; // Для каждого Колонка из ВыручкаПоТоварам.Колонки Цикл
					
				КонецЦикла; // Для каждого Партия из ТаблицаПартий Цикл
				
			КонецЦикла; // Для каждого СтрокаТаблицыТоваров Из ТаблицаПоТоварам Цикл 
			
			//Распределим выручку по партиям
			
			ВыручкаПоТоварам = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаПоТоварам,ВыручкаПоТоварам,СписокРаспределяемыхКолонок);
			
			//Фиксация сторно выручки и НДС (проводки)
			Выручка = ВыручкаПоТоварам.Скопировать();
			Выручка.Свернуть("СчетУчетаНДСПоРеализации, СчетДоходов, Субконто, СтавкаНДС, Комиссионный, 
				|Комитент, ДоговорКомиссии, СчетРасчетовПоАвансамСКомитентом, СчетРасчетовСКомитентом, 
				|ВалютаРасчетовСКомитентом, Номенклатура",
				"Сумма, СуммаВал, НДС, НДСВал,Количество");
			
			Для каждого СтрокаТаблицы из Выручка Цикл
				
				// Выручка
				Если СтрокаТаблицы.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Проводка = Проводки.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = - СтрокаТаблицы.Сумма;
				Проводка.Содержание   = "Возврат от покупателя";
				
				Если ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
					Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",    СтруктураШапкиДокумента.Ссылка);
				ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) Тогда
					Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",    СтруктураШапкиДокумента.Ссылка);
				Иначе
					Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",    СтруктураШапкиДокумента.Сделка);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Если Проводка.СчетДт.Валютный Тогда
					
					//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = - СтрокаТаблицы.СуммаВал;
					
				КонецЕсли;
				
				Если СтрокаТаблицы.Комиссионный = Ложь тогда
					
					Проводка.СчетКт = СтрокаТаблицы.СчетДоходов;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,           СтрокаТаблицы.Субконто);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РеализуемыеАктивы", СтрокаТаблицы.Номенклатура);
					Если Проводка.СчетКт.Количественный Тогда
						Проводка.КоличествоКт = - СтрокаТаблицы.Количество;  
					КОнецЕсли;
					
					Если Проводка.СчетКт.Валютный Тогда
						//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = - СтрокаТаблицы.СуммаВал;
					КонецЕсли;
					
				Иначе
					
					Проводка.СчетКт = СтрокаТаблицы.СчетРасчетовСКомитентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",        СтрокаТаблицы.Комитент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",           СтрокаТаблицы.ДоговорКомиссии);
					Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
					Иначе
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Сделка);
					КонецЕсли;
										
					Если Проводка.СчетКт.Валютный Тогда
						
						Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтрокаТаблицы.ВалютаРасчетовСКомитентом тогда
							
							//Если валюта расчетов с комитентом совпадает с валютой расчетов по договору, считаем что и курсы совпадают.
							Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
							Проводка.ВалютнаяСуммаКт = - СтрокаТаблицы.СуммаВал;
							
						Иначе
							
							ДанныеОВалютеРасчетовСКомитентом = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаТаблицы.ВалютаРасчетовСКомитентом,СтруктураШапкиДокумента.Дата);
							
							Проводка.ВалютаКт        = СтрокаТаблицы.ВалютаРасчетовСКомитентом;
							Проводка.ВалютнаяСуммаКт = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма
							,мВалютаРегламентированногоУчета,СтрокаТаблицы.ВалютаРасчетовСКомитентом
							,1,ДанныеОВалютеРасчетовСКомитентом.Курс
							,1,ДанныеОВалютеРасчетовСКомитентом.Кратность);
							СтрокаТаблицы.СуммаВал   = - Проводка.ВалютнаяСуммаКт;
							
						КонецЕсли;
						
					Иначе
						СтрокаТаблицы.СуммаВал =  Проводка.Сумма;
						
					КонецЕсли; // Если Проводка.СчетКт.Валютный Тогда
					
				КонецЕсли; // Если СтрокаТаблицы.Комиссионный = Ложь тогда
				
				Если ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.КорПодразделениеОрганизации);
				Иначе
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.КорПодразделениеОрганизации, СтруктураШапкиДокумента.КорПодразделениеОрганизации);
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					
					СуммаНУ = СтрокаТаблицы.Сумма;
					СуммаНУКт = ?(СтрокаТаблицы.Комиссионный, СтрокаТаблицы.Сумма, СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС);
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
						-СуммаНУ, -СуммаНУКт, Проводка.Сумма + СуммаНУ, Проводка.Сумма + СуммаНУ, , , 
						Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
					
				КонецЕсли;
				
				// НДС
				Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 и (СтрокаТаблицы.Комиссионный=Ложь) Тогда
					
					Если СтруктураШапкиДокумента.ОтразитьВКнигеПокупок Тогда
						
						Проводка = Проводки.Добавить();
						
						Проводка.Период      = ДатаДока;
						Проводка.Организация = СтруктураШапкиДокумента.Организация;
						Проводка.Сумма       = (-1) * СтрокаТаблицы.НДС;
						Проводка.Содержание   = "Возврат от покупателя";
						
						Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,           СтрокаТаблицы.Субконто);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
						
						Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", ?(СтруктураШапкиДокумента.ПокупателемВыставляетсяСчетФактураНаВозврат или Не ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка), СтруктураШапкиДокумента.Ссылка, СтруктураШапкиДокумента.Сделка));
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",  СтруктураШапкиДокумента.Контрагент, Истина);
						
						БухгалтерскийУчет.УстановитьПодразделенияПроводки(
							Проводка, СтруктураШапкиДокумента.КорПодразделениеОрганизации, СтруктураШапкиДокумента.КорПодразделениеОрганизации);
						
						Если СтруктураШапкиДокумента.УпрощенныйУчетНДС 
							И СтруктураШапкиДокумента.НДСПредъявленКВычету 
							Тогда
							// Проводки по вычету в случае упрощенного учета НДС

							Проводка = Проводки.Добавить();

							Проводка.Период      = СтруктураШапкиДокумента.Дата;

							Проводка.Организация = СтруктураШапкиДокумента.Организация;
							Проводка.Содержание   = "Возврат от покупателя";

							Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НДС; //68.02
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

							Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНДС;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"СФПолученные", ?(ПокупателемВыставляетсяСчетФактураНаВозврат Или Не ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка), 
																														СтруктураШапкиДокумента.Ссылка, 
																														СтруктураШапкиДокумента.Сделка), Истина, Заголовок);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент, Истина);

							Проводка.Сумма       = СтрокаТаблицы.НДС;
														
						КонецЕсли;
					Иначе
						Проводка = Проводки.Добавить();
						
						Проводка.Период      = ДатаДока;
						Проводка.Организация = СтруктураШапкиДокумента.Организация;
						Проводка.Сумма       = - СтрокаТаблицы.НДС;
						Проводка.Содержание   = "Возврат от покупателя";
						
						Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,           СтрокаТаблицы.Субконто);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
						
						Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет",Перечисления.ВидыПлатежейВГосБюджет.Налог);
						
						БухгалтерскийУчет.УстановитьПодразделенияПроводки(
							Проводка, СтруктураШапкиДокумента.КорПодразделениеОрганизации, СтруктураШапкиДокумента.КорПодразделениеОрганизации);	
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; // Для каждого СтрокаТаблицы из Выручка Цикл
			
			//Определение уже оплаченной части, выделение аванса.
			ТаблицыДокумента = Новый Структура("ТаблицаПоТоварам",ТаблицаПоТоварам);
			
			ОпределятьСостояниеРасчетов = (ТипЗнч(СтруктураШапкиДокумента.Сделка) <> Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
			
			ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
				СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, 
				Истина, Отказ, Заголовок, ОпределятьСостояниеРасчетов);
				
			Если ОпределятьСостояниеРасчетов Тогда
			
				Для каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
				
					//При возврате ранее оплаченного товара эта сумма выделяется как аванс (сторнируется)
					ЭтоОплаченныйВозврат = (СтрокаВзаиморасчетов.ДокументРасчетов = СтруктураШапкиДокумента.Ссылка);
					
					Если ЭтоОплаченныйВозврат Тогда
					
						Проводка = Проводки.Добавить();
						
						Проводка.Период      = ДатаДока;
						Проводка.Организация = СтруктураШапкиДокумента.Организация;
						Проводка.Содержание  = "Возврат от покупателя";
						Проводка.Сумма       = - СтрокаВзаиморасчетов.СуммаБУ;
						
						СчетАванса = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам), 
							СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам,
							СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
						
						Проводка.СчетДт      = СчетАванса;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент, Истина);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
						
						Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент, Истина);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
						Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Сделка);
						Иначе
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
						КонецЕсли;
						
						Если Проводка.СчетДт.Валютный Тогда
							Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
							Проводка.ВалютнаяСуммаДт = - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
						КонецЕсли;
						Если Проводка.СчетКт.Валютный Тогда
							Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
							Проводка.ВалютнаяСуммаКт = - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
						КонецЕсли;
						
						БухгалтерскийУчет.УстановитьПодразделенияПроводки(
							Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.КорПодразделениеОрганизации);
					КонецЕсли;
				
				КонецЦикла;
			
			КонецЕсли;
			
			// Формирование движений документа для подсистемы НДС
			ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ВыручкаПоТоварам, Отказ, Заголовок,,ТаблицаВзаиморасчетов);
			
			//Зачитываем аванс по комиссионным товарам по счету комиссии
			Выручка.Индексы.Добавить("Комиссионный");
			Выручка = Выручка.Скопировать(Новый Структура("Комиссионный", Истина));
			
			Выручка.Свернуть("Комитент,ДоговорКомиссии,ВалютаРасчетовСКомитентом,СчетРасчетовСКомитентом,СчетРасчетовПоАвансамСКомитентом","Сумма, СуммаВал");
			Если Выручка.Количество()>0 тогда
				УправлениеВзаиморасчетами.ЗачестьАвансПоРасчетамСКомитентом(ЭтотОбъект,СтруктураШапкиДокумента,Выручка,Отказ,Заголовок);
			КонецЕсли;
			
		ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			// Отработка списания по партионному учету НДС
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТоварам, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, , "Возврат товаров от комиссионера");
			ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок, Истина);
			
		КонецЕсли;
		
		// Учет товаров по номерам ГТД
		Для каждого СтрокаТаблицы из ТаблицаПоТоварам Цикл
			
			СчетУчетаТовара = ?(СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, СтрокаТаблицы.СчетУчета, СтрокаТаблицы.КорСчетСписания); 
			
			Если УправлениеЗапасами.ЭтоИмпортныйТовар(СчетУчетаТовара, СтрокаТаблицы.НомерГТД, СтрокаТаблицы.СтранаПроисхождения) Тогда
				
				Проводка = Проводки.Добавить();

				Проводка.Период = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = "Возврат " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(СтрокаТаблицы.СчетУчета) + " от покупателя";

				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ГТД;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НомераГТД", СтрокаТаблицы.НомерГТД, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтраныПроисхождения", СтрокаТаблицы.СтранаПроисхождения, Истина, Заголовок);
			
				Проводка.КоличествоДт = СтрокаТаблицы.Количество;

			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // Если ТаблицаПоТоварам.Количество() > 0 Тогда
	
	// Возврат тары.
	Если ТаблицаПоТаре.Количество() > 0 Тогда
		
		Для каждого СтрокаТЧ из ТаблицаПоТаре Цикл
			
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СтрокаТЧ.Сумма;
			Проводка.Содержание   = "Возвращена тара от покупателя";
			
			Проводка.СчетДт       = СтрокаТЧ.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТЧ.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СкладПроводок);
			Если ПартионныйУчет Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии",       СтруктураШапкиДокумента.Ссылка);
			КонецЕсли;
			Проводка.КоличествоДт = СтрокаТЧ.КоличествоДок;
			
			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.КорПодразделениеОрганизации, СтруктураШапкиДокумента.КорПодразделениеОрганизации);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаТЧ.СуммаВал;
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	// {УчетДоходовИРасходовИП
	ДвиженияПоРегистрамНУПредпринимателя(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаВзаиморасчетов, Отказ, Заголовок);
	// }УчетДоходовИРасходовИП
	
	Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		ТаблицаВзаиморасчетов = Неопределено;
	КонецЕсли;
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// {УчетДоходовИРасходовИП
Процедура ДвиженияПоРегистрамНУПредпринимателя(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаНеоплаченныхВозвратов, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя ИЛИ ТаблицаПоТоварам.Количество() = 0
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	СтруктураОтбора = Новый Структура("Номенклатура,ВидМПЗ,НоменклатурнаяГруппа,ХарактерДеятельности", Неопределено, Неопределено, Неопределено, Неопределено);
	
	Если НЕ УказанаПартия Тогда // документ отгрузки не указан в шапке документа
		
		// Если у нас остается задолженность покупателю (сформирована проводка Дт 62.02 Кт 62.01),
		// то поступает товар, за который мы должны покупателю денег. Такой возврат отражается, как обычное поступление
		
		// Если у нас нет задолженности покупателю, значит покупатель вернул товар, за который он был должен 
		// и надо искать документы отгрузки по остаткам регистра "ИП МПЗ отгруженные".
		
		Если ТаблицаНеоплаченныхВозвратов = Неопределено Тогда // весь возвращенный товар был оплачен покупателем
			ДоходыИРасходыПредпринимателя.ПоступлениеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, 1, ТаблицаПоТоварам, "СчетУчета", "Номенклатура", "Субконто",,);
			Возврат;
			
		Иначе // часть возвращенного товара еще не была оплачена покупателем
			ТаблицаВозврата = ТаблицаПоТоварам.Скопировать(, "Номенклатура, Субконто, СчетУчета, СчетДоходов, Количество, СуммаБезНДС, НДС");
			
			ТаблицаВозврата.Колонки.Субконто.Имя = "НоменклатурнаяГруппа";
			ТаблицаВозврата.Колонки.Добавить("ХарактерДеятельности");
			ТаблицаВозврата.Колонки.Добавить("ВидМПЗ");
			Для Каждого МПЗ Из ТаблицаВозврата Цикл
				МПЗ.ВидМПЗ = ДоходыИРасходыПредпринимателя.ВидМПЗПоСчетуУчета(МПЗ.СчетУчета);
				МПЗ.ХарактерДеятельности = ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, МПЗ.СчетУчета,, МПЗ.СчетДоходов, УчетнаяПолитикаНУ);
			КонецЦикла;
			
			ТаблицаВозврата.Свернуть("Номенклатура, НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ", "Количество, СуммаБезНДС, НДС");
	
			НеоплаченныеДокументыОтгрузки = ТаблицаНеоплаченныхВозвратов.ВыгрузитьКолонку("ДокументРасчетов");
			СписокТоваров = ТаблицаВозврата.ВыгрузитьКолонку("Номенклатура");
			СписокВидовМПЗ = ТаблицаВозврата.ВыгрузитьКолонку("ВидМПЗ");
			СписокНГ = ТаблицаВозврата.ВыгрузитьКолонку("НоменклатурнаяГруппа");
			СписокХД = ТаблицаВозврата.ВыгрузитьКолонку("ХарактерДеятельности");
			
			ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(НеоплаченныеДокументыОтгрузки);
			ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокТоваров);
			ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокВидовМПЗ);
			ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокНГ);
			ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокХД);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("НеоплаченныеДокументыОтгрузки", НеоплаченныеДокументыОтгрузки);
			Запрос.УстановитьПараметр("СписокТоваров", СписокТоваров);
			Запрос.УстановитьПараметр("СписокВидовМПЗ", СписокВидовМПЗ);
			Запрос.УстановитьПараметр("СписокНГ", СписокНГ);
			Запрос.УстановитьПараметр("СписокХД", СписокХД);
			Запрос.УстановитьПараметр("ГраницаОстатков", 
				Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
			Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	1 КАК ВидРегистра,
			|	Отгрузка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	Отгрузка.ХарактерДеятельности КАК ХарактерДеятельности,
			|	Отгрузка.ВидМПЗ КАК ВидМПЗ,
			|	Отгрузка.Номенклатура КАК Номенклатура,
			|	Отгрузка.ДокументОтгрузки КАК ДокументОтгрузки,
			|	Отгрузка.Партия КАК Партия,
			|	Отгрузка.ДокументОплаты КАК ДокументОплаты,
			|	СУММА(Отгрузка.КоличествоОстаток) КАК Количество,
			|	СУММА(Отгрузка.СуммаОстаток) КАК Сумма,
			|	СУММА(Отгрузка.НДСОстаток) КАК НДС,
			|	СУММА(Отгрузка.ВыручкаОстаток) КАК Выручка,
			|	СУММА(Отгрузка.НДСНачисленныйОстаток) КАК НДСНачисленный,
			|	НЕОПРЕДЕЛЕНО КАК ДокументОплатыПокупателя,
			|	СУММА(0) КАК КоличествоРасход,
			|	СУММА(0) КАК СуммаРасход,
			|	СУММА(0) КАК НДСРасход,
			|	СУММА(0) КАК ВыручкаРасход,
			|	СУММА(0) КАК НДСНачисленныйРасход,
			|	СУММА(0) КАК КоличествоОборот,
			|	СУММА(0) КАК ВыручкаОборот,
			|	СУММА(0) КАК НДСНачисленныйОборот
			|ИЗ
			|	РегистрНакопления.ИПМПЗОтгруженные.Остатки(
			|			&ГраницаОстатков,
			|			ДокументОтгрузки В (&НеоплаченныеДокументыОтгрузки)
			|				И Организация = &Организация
			|				И Номенклатура В (&СписокТоваров)
			|				И ХарактерДеятельности В (&СписокХД)
			|				И НоменклатурнаяГруппа В (&СписокНГ)
			|				И ВидМПЗ В (&СписокВидовМПЗ)) КАК Отгрузка
			|
			|СГРУППИРОВАТЬ ПО
			|	Отгрузка.ВидМПЗ,
			|	Отгрузка.Номенклатура,
			|	Отгрузка.ХарактерДеятельности,
			|	Отгрузка.ДокументОплаты,
			|	Отгрузка.ДокументОтгрузки,
			|	Отгрузка.НоменклатурнаяГруппа,
			|	Отгрузка.Партия
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номенклатура,
			|	НоменклатурнаяГруппа,
			|	ХарактерДеятельности,
			|	ВидМПЗ,
			|	Отгрузка.ДокументОтгрузки.Дата,
			|	Отгрузка.Партия.Дата,
			|	Отгрузка.ДокументОплаты.Дата";
			
		КонецЕсли;
		
	Иначе // указан документ отгрузки
		
		СтруктураОтбора.Вставить("Партия", Неопределено);
		
		СписокРаспределяемыхКолонок = Новый Структура("Количество,НДС,СуммаБезНДС","Количество","Количество","Количество");
		СписокИсключаемыхКолонок = Новый Структура;
		ТаблицаВозврата = ОбщегоНазначения.РазвернутьПоВложеннойТаблице(ТаблицаПоТоварам, "СписанныеПартии", СписокРаспределяемыхКолонок, СписокИсключаемыхКолонок);
		
		Если ТаблицаВозврата = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаВозврата.Колонки.Субконто.Имя = "НоменклатурнаяГруппа";
		ТаблицаВозврата.Колонки.Добавить("ХарактерДеятельности");
		ТаблицаВозврата.Колонки.Добавить("ВидМПЗ");
		Для Каждого МПЗ Из ТаблицаВозврата Цикл
			МПЗ.ВидМПЗ = ДоходыИРасходыПредпринимателя.ВидМПЗПоСчетуУчета(МПЗ.СчетУчета);
			МПЗ.ХарактерДеятельности = ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, МПЗ.СчетУчета,, МПЗ.СчетДоходов, УчетнаяПолитикаНУ);
		КонецЦикла;
		
		ТаблицаВозврата.Свернуть("Номенклатура, НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Партия", "Количество, СуммаБезНДС, НДС");
				
		СписокПартий = ТаблицаВозврата.ВыгрузитьКолонку("Партия");
		СписокТоваров = ТаблицаВозврата.ВыгрузитьКолонку("Номенклатура");
		СписокВидовМПЗ = ТаблицаВозврата.ВыгрузитьКолонку("ВидМПЗ");
		СписокНГ = ТаблицаВозврата.ВыгрузитьКолонку("НоменклатурнаяГруппа");
		СписокХД = ТаблицаВозврата.ВыгрузитьКолонку("ХарактерДеятельности");
		
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокПартий);
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокТоваров);
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокВидовМПЗ);
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокНГ);
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокХД);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокПартий", СписокПартий);
		Запрос.УстановитьПараметр("СписокТоваров", СписокТоваров);
		Запрос.УстановитьПараметр("СписокВидовМПЗ", СписокВидовМПЗ);
		Запрос.УстановитьПараметр("СписокНГ", СписокНГ);
		Запрос.УстановитьПараметр("СписокХД", СписокХД);
		Запрос.УстановитьПараметр("ДокументОтгрузки", СтруктураШапкиДокумента.Сделка);
		Запрос.УстановитьПараметр("ГраницаКонцаПериода", Новый Граница(СтруктураШапкиДокумента.Дата, ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("НачалоПериода", СтруктураШапкиДокумента.Сделка.Дата);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Вложенный.ВидРегистра КАК ВидРегистра,
		|	Вложенный.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	Вложенный.ХарактерДеятельности КАК ХарактерДеятельности,
		|	Вложенный.ВидМПЗ КАК ВидМПЗ,
		|	Вложенный.Номенклатура КАК Номенклатура,
		|	Вложенный.ДокументОтгрузки,
		|	Вложенный.Партия,
		|	Вложенный.ДокументОплаты,
		|	СУММА(Вложенный.Количество) КАК Количество,
		|	СУММА(Вложенный.Сумма) КАК Сумма,
		|	СУММА(Вложенный.НДС) КАК НДС,
		|	СУММА(Вложенный.КоличествоОборот) КАК КоличествоОборот,
		|	Вложенный.ДокументОплатыПокупателя,
		|	СУММА(Вложенный.Выручка) КАК Выручка,
		|	СУММА(Вложенный.НДСНачисленный) КАК НДСНачисленный,
		|	СУММА(Вложенный.ВыручкаОборот) КАК ВыручкаОборот,
		|	СУММА(Вложенный.НДСНачисленныйОборот) КАК НДСНачисленныйОборот,
		|	СУММА(Вложенный.КоличествоРасход) КАК КоличествоРасход,
		|	СУММА(Вложенный.СуммаРасход) КАК СуммаРасход,
		|	СУММА(Вложенный.НДСРасход) КАК НДСРасход,
		|	СУММА(Вложенный.ВыручкаРасход) КАК ВыручкаРасход,
		|	СУММА(Вложенный.НДСНачисленныйРасход) КАК НДСНачисленныйРасход,
		|	СУММА(Вложенный.КоличествоОплаченоПоставщикуОборот) КАК КоличествоОплаченоПоставщикуОборот,
		|	СУММА(Вложенный.СуммаОборот) КАК СуммаОборот,
		|	СУММА(Вложенный.НДСОборот) КАК НДСОборот
		|ИЗ
		|	(ВЫБРАТЬ
		|		1 КАК ВидРегистра,
		|		Отгрузка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|		Отгрузка.ХарактерДеятельности КАК ХарактерДеятельности,
		|		Отгрузка.ВидМПЗ КАК ВидМПЗ,
		|		Отгрузка.Номенклатура КАК Номенклатура,
		|		Отгрузка.ДокументОтгрузки КАК ДокументОтгрузки,
		|		Отгрузка.Партия КАК Партия,
		|		Отгрузка.ДокументОплаты КАК ДокументОплаты,
		|		Отгрузка.КоличествоПриход КАК Количество,
		|		Отгрузка.СуммаПриход КАК Сумма,
		|		Отгрузка.НДСПриход КАК НДС,
		|		0 КАК КоличествоОборот,
		|		НЕОПРЕДЕЛЕНО КАК ДокументОплатыПокупателя,
		|		Отгрузка.ВыручкаПриход КАК Выручка,
		|		Отгрузка.НДСНачисленныйПриход КАК НДСНачисленный,
		|		0 КАК ВыручкаОборот,
		|		0 КАК НДСНачисленныйОборот,
		|		Отгрузка.КоличествоРасход КАК КоличествоРасход,
		|		Отгрузка.СуммаРасход КАК СуммаРасход,
		|		Отгрузка.НДСРасход КАК НДСРасход,
		|		Отгрузка.ВыручкаРасход КАК ВыручкаРасход,
		|		Отгрузка.НДСНачисленныйРасход КАК НДСНачисленныйРасход,
		|		0 КАК КоличествоОплаченоПоставщикуОборот,
		|		0 КАК СуммаОборот,
		|		0 КАК НДСОборот
		|	ИЗ
		|		РегистрНакопления.ИПМПЗОтгруженные.Обороты(
		|				&НачалоПериода,
		|				&ГраницаКонцаПериода,
		|				,
		|				ДокументОтгрузки = &ДокументОтгрузки
		|					И Организация = &Организация
		|					И Номенклатура В (&СписокТоваров)
		|					И Партия В (&СписокПартий)
		|					И ХарактерДеятельности В (&СписокХД)
		|					И НоменклатурнаяГруппа В (&СписокНГ)
		|					И ВидМПЗ В (&СписокВидовМПЗ)) КАК Отгрузка
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		2,
		|		Доходы.НоменклатурнаяГруппа,
		|		Доходы.ХарактерДеятельности,
		|		Доходы.ВидМПЗ,
		|		Доходы.Номенклатура,
		|		Доходы.ДокументОтгрузки,
		|		Доходы.Партия,
		|		НЕОПРЕДЕЛЕНО,
		|		0,
		|		0,
		|		0,
		|		Доходы.КоличествоОборот,
		|		Доходы.ДокументОплаты,
		|		0,
		|		0,
		|		Доходы.ВыручкаОборот,
		|		Доходы.НДСНачисленныйОборот,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		Доходы.КоличествоОплаченоПоставщикуОборот,
		|		Доходы.СуммаОборот,
		|		Доходы.НДСОборот
		|	ИЗ
		|		РегистрНакопления.ИПДоходы.Обороты(
		|				&НачалоПериода,
		|				&ГраницаКонцаПериода,
		|				,
		|				ДокументОтгрузки = &ДокументОтгрузки
		|					И Организация = &Организация
		|					И Номенклатура В (&СписокТоваров)
		|					И Партия В (&СписокПартий)
		|					И ХарактерДеятельности В (&СписокХД)
		|					И НоменклатурнаяГруппа В (&СписокНГ)
		|					И ВидМПЗ В (&СписокВидовМПЗ)) КАК Доходы) КАК Вложенный
		|
		|СГРУППИРОВАТЬ ПО
		|	Вложенный.ВидРегистра,
		|	Вложенный.ВидМПЗ,
		|	Вложенный.НоменклатурнаяГруппа,
		|	Вложенный.ДокументОтгрузки,
		|	Вложенный.ХарактерДеятельности,
		|	Вложенный.ДокументОплатыПокупателя,
		|	Вложенный.Партия,
		|	Вложенный.Номенклатура,
		|	Вложенный.ДокументОплаты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидМПЗ,
		|	Номенклатура,
		|	НоменклатурнаяГруппа,
		|	ХарактерДеятельности,
		|	Вложенный.Партия.Дата,
		|	ВидРегистра,
		|	Вложенный.ДокументОтгрузки.Дата,
		|	Вложенный.ДокументОплатыПокупателя.Дата,
		|	Вложенный.ДокументОплаты.Дата";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НайтиНовуюСтроку = Ложь;
		
		Если СтруктураОтбора.Номенклатура <> Выборка.Номенклатура
			ИЛИ СтруктураОтбора.ВидМПЗ <> Выборка.ВидМПЗ
			ИЛИ СтруктураОтбора.НоменклатурнаяГруппа <> Выборка.НоменклатурнаяГруппа
			ИЛИ СтруктураОтбора.ХарактерДеятельности <> Выборка.ХарактерДеятельности Тогда
			
			НайтиНовуюСтроку = Истина;
			
		ИначеЕсли УказанаПартия И СтруктураОтбора.Партия <> Выборка.Партия Тогда
			НайтиНовуюСтроку = Истина;
		КонецЕсли;
				
		Если НайтиНовуюСтроку Тогда
			СтруктураОтбора.Номенклатура = Выборка.Номенклатура;
			СтруктураОтбора.ВидМПЗ = Выборка.ВидМПЗ;
			СтруктураОтбора.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
			СтруктураОтбора.ХарактерДеятельности = Выборка.ХарактерДеятельности;
			
			Если УказанаПартия Тогда
				СтруктураОтбора.Партия = Выборка.Партия;
			КонецЕсли;
			
			СтрокаТовара = ТаблицаВозврата.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокаТовара.Количество() = 0 Тогда
				Если УказанаПартия Тогда
					СтруктураОтбора = Новый Структура("Номенклатура,ВидМПЗ,НоменклатурнаяГруппа,ХарактерДеятельности,Партия", Неопределено, Неопределено, Неопределено, Неопределено,Неопределено);
				Иначе
					СтруктураОтбора = Новый Структура("Номенклатура,ВидМПЗ,НоменклатурнаяГруппа,ХарактерДеятельности", Неопределено, Неопределено, Неопределено, Неопределено);
				КонецЕсли;
				Продолжить;
			
			ИначеЕсли СтрокаТовара[0].Количество = 0 Тогда
				Если УказанаПартия Тогда
					СтруктураОтбора = Новый Структура("Номенклатура,ВидМПЗ,НоменклатурнаяГруппа,ХарактерДеятельности,Партия", Неопределено, Неопределено, Неопределено, Неопределено,Неопределено);
				Иначе
					СтруктураОтбора = Новый Структура("Номенклатура,ВидМПЗ,НоменклатурнаяГруппа,ХарактерДеятельности", Неопределено, Неопределено, Неопределено, Неопределено);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			КоличествоРасходВсего = 0;
			ВыручкаРасходВсего = 0;
			НДСНачисленныйРасходВсего = 0;
			
			КоличествоОплаченоПоставщикуРасходВсего = 0;
			СуммаРасходВсего = 0;
			НДСРасходВсего = 0;
		КонецЕсли;
		
		Если Выборка.ВидРегистра = 1 Тогда
			Количество = СтрокаТовара[0].Количество;
			Выручка = СтрокаТовара[0].СуммаБезНДС + СтрокаТовара[0].НДС;
			НДСНачисленный = СтрокаТовара[0].НДС;
			
			Если Количество >= Выборка.Количество Тогда
				КоличествоСписано = Выборка.Количество;
				ВыручкаСписано = Выборка.Выручка;
				НДСНачисленныйСписано = Выборка.НДСНачисленный;
				СуммаСписано = Выборка.Сумма;
				НДССписано = Выборка.НДС;
				
				Количество = Количество - КоличествоСписано;
				Выручка = Макс(Выручка - ВыручкаСписано, 0);
				НДСНачисленный = Макс(НДСНачисленный - НДСНачисленныйСписано, 0);
			
			Иначе
				КоличествоСписано     = Количество;
				ВыручкаСписано        = ?(Выборка.Количество = 0, 0, Окр(Выборка.Выручка * КоличествоСписано / Выборка.Количество, 2, 1));
				НДСНачисленныйСписано = ?(Выборка.Количество = 0, 0, Окр(Выборка.НДСНачисленный * КоличествоСписано / Выборка.Количество, 2, 1));
				СуммаСписано          = ?(Выборка.Количество = 0, 0, Окр(Выборка.Сумма * КоличествоСписано / Выборка.Количество, 2, 1));
				НДССписано            = ?(Выборка.Количество = 0, 0, Окр(Выборка.НДС * КоличествоСписано / Выборка.Количество, 2, 1));

				Количество = 0;
				Выручка = 0;
				НДСНачисленный = 0;
			КонецЕсли;
			
			СтрокаТовара[0].Количество = Количество;
			СтрокаТовара[0].СуммаБезНДС = ВыручкаСписано - НДСНачисленныйСписано;
			СтрокаТовара[0].НДС = НДСНачисленный;
			
			Движение = Движения.ИПМПЗ.ДобавитьРасход();
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.Организация = СтруктураШапкиДокумента.Организация;
			Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
			Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
			Движение.Номенклатура = Выборка.Номенклатура;
			Движение.ВидМПЗ = Выборка.ВидМПЗ;
			Движение.Партия = Выборка.Партия;
			Движение.ДокументОплаты = Выборка.ДокументОплаты;
			Движение.Сумма = - СуммаСписано;
			Движение.НДС = - НДССписано;
			Движение.Количество = - КоличествоСписано;
			
			Движение = Движения.ИПМПЗОтгруженные.ДобавитьПриход();
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.Организация = СтруктураШапкиДокумента.Организация;
			Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
			Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
			Движение.Номенклатура = Выборка.Номенклатура;
			Движение.ВидМПЗ = Выборка.ВидМПЗ;
			Движение.Партия = Выборка.Партия;
			Движение.ДокументОтгрузки = Выборка.ДокументОтгрузки;
			Движение.ДокументОплаты = Выборка.ДокументОплаты;
			Движение.Сумма = - СуммаСписано;
			Движение.НДС = - НДССписано;
			Движение.Количество = - КоличествоСписано;
			Движение.НДСНачисленный = - НДСНачисленныйСписано;
			Движение.Выручка = - ВыручкаСписано;
			
			Если Выборка.КоличествоРасход <> 0 Тогда
				Движение = Движения.ИПМПЗОтгруженные.ДобавитьРасход();
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.Организация = СтруктураШапкиДокумента.Организация;
				Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
				Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
				Движение.Номенклатура = Выборка.Номенклатура;
				Движение.ВидМПЗ = Выборка.ВидМПЗ;
				Движение.Партия = Выборка.Партия;
				Движение.ДокументОтгрузки = Выборка.ДокументОтгрузки;
				Движение.ДокументОплаты = Выборка.ДокументОплаты;
				Движение.Сумма = - Мин(СуммаСписано, Выборка.СуммаРасход);
				Движение.НДС = - Мин(НДССписано, Выборка.НДСРасход);
				Движение.Количество = - Мин(КоличествоСписано, Выборка.КоличествоРасход);
				Движение.НДСНачисленный = - Мин(НДСНачисленныйСписано, Выборка.НДСНачисленныйРасход);
				Движение.Выручка = - Мин(ВыручкаСписано, Выборка.ВыручкаРасход);
				
				КоличествоРасходВсего = КоличествоРасходВсего - Движение.Количество;
				ВыручкаРасходВсего = ВыручкаРасходВсего - Движение.Выручка;
				НДСНачисленныйРасходВсего = НДСНачисленныйРасходВсего - Движение.НДСНачисленный;
				
				Если Выборка.ДокументОплаты <> Неопределено Тогда
					КоличествоОплаченоПоставщикуРасходВсего = КоличествоОплаченоПоставщикуРасходВсего - Движение.Количество;
					СуммаРасходВсего = СуммаРасходВсего - Движение.Сумма;
					НДСРасходВсего = НДСРасходВсего - Движение.НДС;
				КонецЕсли;
			КонецЕсли;
			
		Иначе // ВидРегистра = 2
			КоличествоСписано = Выборка.КоличествоОборот;
			ВыручкаСписано = Выборка.ВыручкаОборот;
			НДСНачисленныйСписано = Выборка.НДСНачисленныйОборот;
			СуммаСписано = Выборка.СуммаОборот;
			НДССписано = Выборка.НДСОборот;
			КоличествоОплаченоСписано = Выборка.КоличествоОплаченоПоставщикуОборот;
			
			КоличествоСписано			= Мин(КоличествоРасходВсего, КоличествоСписано);
			ВыручкаСписано				= Мин(ВыручкаРасходВсего, ВыручкаСписано);
			НДСНачисленныйСписано		= Мин(НДСНачисленныйРасходВсего, НДСНачисленныйСписано);
			СуммаСписано				= Мин(СуммаРасходВсего, СуммаСписано);
			НДССписано					= Мин(НДСРасходВсего, НДССписано);
			КоличествоОплаченоСписано	= Мин(КоличествоОплаченоПоставщикуРасходВсего, КоличествоОплаченоСписано);
			
			КоличествоРасходВсего					= Макс(КоличествоРасходВсего - КоличествоСписано, 0);
			ВыручкаРасходВсего						= Макс(ВыручкаРасходВсего - ВыручкаСписано, 0);
			НДСНачисленныйРасходВсего				= Макс(НДСНачисленныйРасходВсего - НДСНачисленныйСписано, 0);
			КоличествоОплаченоПоставщикуРасходВсего	= Макс(КоличествоОплаченоПоставщикуРасходВсего - КоличествоОплаченоСписано, 0);
			СуммаРасходВсего						= Макс(СуммаРасходВсего - СуммаСписано, 0);
			НДСРасходВсего							= Макс(НДСРасходВсего - НДССписано, 0);
			
			Если (КоличествоСписано <> 0)
				ИЛИ (ВыручкаСписано <> 0)
				ИЛИ (НДСНачисленныйСписано <> 0)
				ИЛИ (СуммаСписано <> 0)
				ИЛИ (НДССписано <> 0)
				ИЛИ (КоличествоОплаченоСписано <> 0) Тогда
				
				Движение = Движения.ИПДоходы.Добавить();
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.Организация = СтруктураШапкиДокумента.Организация;
				Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
				Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
				Движение.Номенклатура = Выборка.Номенклатура;
				Движение.ВидМПЗ = Выборка.ВидМПЗ;
				Движение.Партия = Выборка.Партия;
				Движение.ДокументОтгрузки = Выборка.ДокументОтгрузки;
				Движение.ДокументОплаты = Выборка.ДокументОплатыПокупателя;
				Движение.Количество = - КоличествоСписано;
				Движение.НДСНачисленный = - НДСНачисленныйСписано;
				Движение.Выручка = - ВыручкаСписано;
				Движение.КоличествоОплаченоПоставщику = - КоличествоОплаченоСписано;
				Движение.Сумма = - СуммаСписано;
				Движение.НДС = - НДССписано;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Товары, по которым не удалось сторнировать регистры, образуют новую партию.
	Для Каждого МПЗ Из ТаблицаВозврата Цикл
		Если (МПЗ.Количество <> 0) И (МПЗ.СуммаБезНДС <> 0) Тогда
			Движение = Движения.ИПМПЗ.ДобавитьПриход();
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.Организация = СтруктураШапкиДокумента.Организация;
			Движение.НоменклатурнаяГруппа = МПЗ.НоменклатурнаяГруппа;
			Движение.ХарактерДеятельности = МПЗ.ХарактерДеятельности;
			Движение.Номенклатура = МПЗ.Номенклатура;
			Движение.ВидМПЗ = МПЗ.ВидМПЗ;
			Движение.Партия = Ссылка;
			Движение.Сумма = МПЗ.СуммаБезНДС;
			Движение.НДС = МПЗ.НДС;
			Движение.Количество = МПЗ.Количество;
		КонецЕсли;
	КонецЦикла;
	
	// В движениях регистрах ИП Доходы заполним реквизит РеквизитыДокументаОплаты
	ДоходыИРасходыПредпринимателя.ПолучениеРеквизитовДокументовОплаты(Движения.ИПДоходы, "ИПДоходы", "Партия", "ДокументОплаты", "ДокументОтгрузки",);
		
КонецПроцедуры
// }УчетДоходовИРасходовИП

// Формирование движений по регистрам налогового учета УСН(регламентированный учет).
//
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если Не (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоТоварам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			СтруктураДопПараметров = Новый Структура("ТаблицаТМЦ", ТаблицаПоТоварам);
	    	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, СтруктураДопПараметров);
		КонецЕсли;
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) Тогда
		
		ВозвратПоДокументуУСН(РежимПроведения, СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, ТаблицаПоТоварам, Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	СуммаСторно = 0;
    КУДиР = Движения.КнигаУчетаДоходовИРасходов;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		//ПО РЕГИСТРУ РАСХОДОВ УСН
		Движения.РасходыПриУСН.Очистить();
		НаборДвижений = Движения.РасходыПриУСН;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		
		НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаДвижений, 
		Перечисления.ВидыРасходовУСН.Номенклатура, Неопределено,
		Перечисления.СтатусыПартийУСН.Купленные, ,Истина, СуммаСторно);
		
		//Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.РасходыПриУСН.ВыполнитьПриход();
			НаборДвижений.Записать(Истина);
		КонецЕсли;
		
		//ПО РЕГИСТРУ КУДиР
		Если СуммаСторно <> 0 Тогда
			
			КурсВалюты  = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.Дата);
			
			СтрокаКниги  = КУДиР.Добавить();
			
			СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаКниги.СтрокаДокумента = 0;
			СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
			СтрокаКниги.Содержание      = "Расходы уменьшены на стоимость товаров, возвращенных покупателем.";
			СтрокаКниги.Графа7          = - СуммаСторно;
			СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
			
		КонецЕсли;
	КонецЕсли;
	
	СуммаВзаиморасчетов   = УчетНДС.ПолучитьСуммуДокументаСНДС(СтруктураШапкиДокумента.Ссылка);
	
	ЗапросЕНВД = Новый Запрос();
	ЗапросЕНВД.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	ЗапросЕНВД.УстановитьПараметр("Комиссия", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	ЗапросЕНВД.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВозвратТоваровОтПокупателяТовары.Сумма) КАК Сумма,
	|	СУММА(ВозвратТоваровОтПокупателяТовары.СуммаНДС) КАК СуммаНДС,
	|	СчетаДоходовИРасходовЕНВД.Счет
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО ВозвратТоваровОтПокупателяТовары.СчетДоходов = СчетаДоходовИРасходовЕНВД.Счет
	|ГДЕ
	|	(ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка)
	|	И (НЕ ВозвратТоваровОтПокупателяТовары.СчетУчета В ИЕРАРХИИ (&Комиссия))
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаДоходовИРасходовЕНВД.Счет";
	
	ИтогиПоЕНВД = ЗапросЕНВД.Выполнить().Выгрузить();
	Если СтруктураШапкиДокумента.СуммаВключаетНДС Тогда
		СуммаЕНВД = ИтогиПоЕНВД.Итог("Сумма");			
	Иначе
		СуммаЕНВД = ИтогиПоЕНВД.Итог("Сумма") + ИтогиПоЕНВД.Итог("СуммаНДС");
	КонецЕсли;
	
	ЗапросКомиссия = Новый Запрос();
	ЗапросКомиссия.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	ЗапросКомиссия.УстановитьПараметр("Комиссия", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	ЗапросКомиссия.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВозвратТоваровОтПокупателяТовары.Сумма) КАК Сумма,
	|	СУММА(ВозвратТоваровОтПокупателяТовары.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	(ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка)
	|	И (ВозвратТоваровОтПокупателяТовары.СчетУчета В ИЕРАРХИИ (&Комиссия))
	|
	|";
	
	ИтогиПоКомиссии = ЗапросКомиссия.Выполнить().Выгрузить();
	Если СтруктураШапкиДокумента.СуммаВключаетНДС Тогда
		СуммаКомиссии = ИтогиПоКомиссии.Итог("Сумма");			
	Иначе
		СуммаКомиссии = ИтогиПоКомиссии.Итог("Сумма") + ИтогиПоКомиссии.Итог("СуммаНДС");
	КонецЕсли;
	
	СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
	
	СуммаЕНВД = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаЕНВД, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		
	СуммаКомиссии = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаКомиссии, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
	
	Для Каждого СтрокаРД Из ТаблицаВзаиморасчетов Цикл
		Если НЕ СтрокаРД.ДокументРасчетов = СтруктураШапкиДокумента.Ссылка Тогда
			СуммаЕНВД = СуммаЕНВД - Мин(СуммаЕНВД, СтрокаРД.СуммаВзаиморасчетовЕНВД);
			СуммаКомиссии = СуммаКомиссии - Мин(СуммаКомиссии, СтрокаРД.СуммаВзаиморасчетовКомитента);			
		КонецЕсли;
	КонецЦикла;
			
	Кратность		= ?(КратностьВзаиморасчетов = 0, 1, КратностьВзаиморасчетов);	
	КоррЕНВД 		= Окр(СуммаЕНВД * КурсВзаиморасчетов/Кратность, 2, 1);
	КоррКомиссии 	= Окр(СуммаКомиссии * КурсВзаиморасчетов/Кратность, 2, 1);
	
	Если КоррЕНВД > 0 Тогда
		Если СуммаСторно <> 0 Тогда
			СтрокаКниги.Графа5 			= КоррЕНВД;
			СтрокаКниги.Содержание 		= СтрокаКниги.Содержание + " Задолженность по возврату товаров ЕНВД " + КоррЕНВД + " руб. определена как аванс, ранее не включенный в доходы. ";
			СтрокаКниги.ДоходЕНВД 		= - КоррЕНВД;
		Иначе
			СтрокаКниги  = КУДиР.Добавить();
			СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаКниги.СтрокаДокумента = 0;
			СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
			СтрокаКниги.Содержание      = "Задолженность по возврату товаров ЕНВД " + КоррЕНВД + " руб. определена как аванс, ранее не включенный в доходы. ";
			СтрокаКниги.Графа5 			= КоррЕНВД;
			СтрокаКниги.ДоходЕНВД 		= - КоррЕНВД;
			СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		КонецЕсли;
	КонецЕсли;
	Если КоррКомиссии > 0 Тогда
		Если СуммаСторно <> 0 Тогда
			СтрокаКниги.Графа5 			= КоррКомиссии;
			СтрокаКниги.Содержание 		= СтрокаКниги.Содержание + " Задолженность по возврату комиссионных товаров " + КоррКомиссии + " руб. определена как аванс, ранее не включенный в доходы. ";
			
		Иначе
			СтрокаКниги  = КУДиР.Добавить();
			
			СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаКниги.СтрокаДокумента = 0;
			СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
			СтрокаКниги.Содержание      = "Задолженность по возврату комиссионных товаров " + КоррКомиссии + " руб. определена как аванс, ранее не включенный в доходы. ";
			СтрокаКниги.Графа5 			= КоррКомиссии;
			СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки, Отказ, Заголовок, ОтработкаДвиженийПоПартиям = Ложь, ТаблицаАвансов = Неопределено)
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		// Это не наши ценности (были даны в переработку), следовательно НДС по ним учитывать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// Это не наши ценности (договор комиссии), следовательно НДС по ним отражать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС 
		И СтруктураШапкиДокумента.УчитыватьНДС
		И Не ОтработкаДвиженийПоПартиям 
		Тогда
		Если СтруктураШапкиДокумента.ОтразитьВКнигеПокупок Тогда
			УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСПредъявленномуПоставщиком(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
		Иначе
			УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ, Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтработкаДвиженийПоПартиям Тогда
		Если Не СтруктураШапкиДокумента.УчитыватьНДС Тогда
			Возврат;
		КонецЕсли; 
		
		Если ТаблицаВыручки.Количество() = 0 Тогда
			//Отработка по партиям НДС не требуется. 
			Возврат;
		КонецЕсли; 
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра НДСПокупки.
	
		/////////////////////////////////////////////////////////////////////////////////
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		СписокРаспределяемыхКолонок = Новый Структура("Количество,Сумма,СуммаВал,НДС,НДСВал,СуммаБезНДС,СуммаБезНДСВал","Количество","Количество","Количество","Количество","Количество","Количество","Количество");
		СписокИсключаемыхКолонок = новый Структура("СуммаСписания"+
		",ОтражениеВУСН "+
		", Регистратор, СчетДоходов,СчетУчетаНДСПоРеализации");
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СписокИсключаемыхКолонок.Вставить("Склад");
		КонецЕсли;
		
		ТаблицаТоваровПоПартиям = ОбщегоНазначения.РазвернутьПоВложеннойТаблице(ТаблицаВыручки, "СписанныеПартии",СписокРаспределяемыхКолонок, СписокИсключаемыхКолонок);
		
		//////////////////////////
		// Приведение таблицы к общему виду для стандартной работы с таблицами по партиям
		Если ТаблицаТоваровПоПартиям.Колонки.Найти("Склад") = Неопределено Тогда
			ТаблицаТоваровПоПартиям.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
			Если Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ТаблицаТоваровПоПартиям.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,"Склад");
			КонецЕсли;
		КонецЕсли; 
		Если Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			ТаблицаТоваровПоПартиям.Колонки.СчетРасходов.Имя = "КорСчетСписания";
			ТаблицаТоваровПоПартиям.Колонки.Субконто.Имя = "КорСубконтоСписания1";
		Иначе
			ТаблицаТоваровПоПартиям.ЗаполнитьЗначения(Справочники.Склады.ПустаяСсылка(), "Склад");
		КонецЕсли;
		// Приведение таблицы к общему виду для стандартной работы с таблицами по партиям
		//////////////////////////
		
		ТаблицаДвиженийПартии = Движения.НДСПоПриобретеннымЦенностям.ВыгрузитьКолонки();
		
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) 
			И Не ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") 
			Или СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Если Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ТаблицаНДСПартииСписания = УчетНДС.ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаТоваровПоПартиям, Отказ, Заголовок, , Истина);
			Иначе
				ТаблицаНДСПартииСписания = УчетНДС.ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаТоваровПоПартиям, Отказ, Заголовок);
			КонецЕсли;				
				
			Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
				//Партии не найдены или отражение в партионном учете НДС не производится.
				//Дальнейшая обработка не требуется
				Возврат;
			КонецЕсли;
			
			ВедениеСуммовогоУчетаПоСкладам = Новый Соответствие;
			
			// Полученные партии могли быть реализованы с другого склада
			Для Каждого СтрокаПартии Из ТаблицаНДСПартииСписания Цикл
				ВестиСуммовойУчетПоСкладам = ВедениеСуммовогоУчетаПоСкладам[СтрокаПартии.СчетУчета];
				Если ВестиСуммовойУчетПоСкладам = Неопределено Тогда
					ВидыСубконтоСчета    = СтрокаПартии.СчетУчета.ВидыСубконто;
					СтрокаСубконтоСклады = ВидыСубконтоСчета.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто");
					ВестиСуммовойУчетПоСкладам = СтрокаСубконтоСклады <> Неопределено И СтрокаСубконтоСклады.Суммовой;
					ВедениеСуммовогоУчетаПоСкладам.Вставить(СтрокаПартии.СчетУчета, ВестиСуммовойУчетПоСкладам);
				КонецЕсли;
					
				Если ВестиСуммовойУчетПоСкладам Тогда
					СтрокаПартии.Склад = СтруктураШапкиДокумента.Склад;
				КонецЕсли;
				
				// Делаем не приход, а сторно расхода по регистру.
				Если Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					СтрокаПартии.Стоимость  = - СтрокаПартии.Стоимость;
					СтрокаПартии.НДС  		= - СтрокаПартии.НДС;
					СтрокаПартии.Количество = - СтрокаПартии.Количество;
				КонецЕсли;
			КонецЦикла;
			
			Если не СтруктураШапкиДокумента.Свойство("ПартионныйУчет") Тогда
				СтруктураШапкиДокумента.Вставить("ПартионныйУчет",ПартионныйУчет);
			КонецЕсли; 
		
			Движения.НДСПоПриобретеннымЦенностям.мПериод          = Дата;
		
			
			/////////////////////////////////////////////////////////////////////////////////
			// Отработка сторнирования предположения ставки 0% по НДС покупки.
			// При передачи товаров комиссионеру предположение ставки 0% не должно отрабатывать, только по фактическому отражению реализации
			Если не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				УчетНДСФормированиеДвижений.ОтразитьПредположениеСтавки0(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии, Движения.Хозрасчетный,Заголовок, Движения);
			КонецЕсли;
			// Отработка сторнирования предположения ставки 0% по НДС покупки.
			/////////////////////////////////////////////////////////////////////////////////
			
			/////////////////////////////////////////////////////////////////////////////////
			// Отработка сторнирования включения/исключения НДС из стоимости.
			СторноПереквалификацииПартииПриРеализации(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, Неопределено, ТаблицаДвиженийПартии, Движения.Хозрасчетный,Заголовок);
			
			Если ТаблицаДвиженийПартии.Количество()>0 Тогда
				Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
				Движения.НДСПоПриобретеннымЦенностям.ВыполнитьПриход();
			КонецЕсли; 
			// Отработка сторнирования включения/исключения НДС из стоимости.
			/////////////////////////////////////////////////////////////////////////////////
			
			/////////////////////////////////////////////////////////////////////////////////
			// НДС по партиям - отразить сторно непосредственного списания.
			ТаблицаДвиженийПартии.Очистить();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
			Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
			Движения.НДСПоПриобретеннымЦенностям.ВыполнитьРасход();
			// НДС по партиям - отразить сторно непосредственного списания.
			/////////////////////////////////////////////////////////////////////////////////
			
			/////////////////////////////////////////////////////////////////////////////////
			// НДС по партиям - отразить приход от комиссионера.
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				Для Каждого СтрокаПартии Из ТаблицаНДСПартииСписания Цикл 
					СтрокаПартии.СчетУчета = СтрокаПартии.КорСчетСписания;
					ВестиСуммовойУчетПоСкладам = ВедениеСуммовогоУчетаПоСкладам[СтрокаПартии.СчетУчета];
					Если ВестиСуммовойУчетПоСкладам = Неопределено Тогда
						ВидыСубконтоСчета    = СтрокаПартии.СчетУчета.ВидыСубконто;
						СтрокаСубконтоСклады = ВидыСубконтоСчета.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто");
						ВестиСуммовойУчетПоСкладам = СтрокаСубконтоСклады <> Неопределено И СтрокаСубконтоСклады.Суммовой;
						ВедениеСуммовогоУчетаПоСкладам.Вставить(СтрокаПартии.СчетУчета, ВестиСуммовойУчетПоСкладам);
					КонецЕсли;
					Если ВестиСуммовойУчетПоСкладам Тогда
						СтрокаПартии.Склад = СтруктураШапкиДокумента.Склад;
					КонецЕсли;
				КонецЦикла;
				
				ТаблицаДвиженийПартии.Очистить();
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
				Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
				Движения.НДСПоПриобретеннымЦенностям.ВыполнитьПриход();
			КонецЕсли;
			// НДС по партиям - отразить приход от комиссионера.
			/////////////////////////////////////////////////////////////////////////////////
			
		Иначе
			Если ТаблицаТоваровПоПартиям.Колонки.Найти("СчетУчетаНДС") = Неопределено Тогда
			    ТаблицаТоваровПоПартиям.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
				ТаблицаТоваровПоПартиям.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ,"СчетУчетаНДС");
			КонецЕсли; 
			УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураШапкиДокумента,ТаблицаТоваровПоПартиям, ТаблицаДвиженийПартии, Отказ);
			
			
			/////////////////////////////////////////////////////////////////////////////////
			// НДС по партиям - отразить партию по возврату.
			Движения.НДСПоПриобретеннымЦенностям.мПериод = СтруктураШапкиДокумента.Дата;
			Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
			Движения.НДСПоПриобретеннымЦенностям.Выполнитьприход();
			// НДС по партиям - отразить партию по возврату.
			/////////////////////////////////////////////////////////////////////////////////
		КонецЕсли;
		
		
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		/////////////////////////////////////////////////////////////////////////////////
		
		//Все необходимые действия на данном этапе отработаны.
	Иначе
		
		Если СтруктураШапкиДокумента.УчитыватьНДС Тогда

			Если СтруктураШапкиДокумента.ОтразитьВКнигеПокупок Тогда
				СформироватьДвиженияПоРегиструНДСПредъявленный_ВозвратОтПокупателя(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
			Иначе
				Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) Тогда
					УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Сделка.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
				Иначе
					УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
				КонецЕсли;
				
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
				
				СчетОтнесенияНДС = ?(УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате,
					ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет,
					ПланыСчетов.Хозрасчетный.НДС);
					
				УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ,СчетОтнесенияНДС, , Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура вызывается из процедуры ДвиженияРегистровПодсистемыНДС.
// В тех случаях, когда при реализации производилось включение НДС в стоимость товаров (или исключение из стоимости),
// при возврате от покупателя необходимо восстановить предыдущее состояние товаров.
// Результат схемы продажа-возврат должен быть нулевым, т.е партия восстанавливается на состояние до реализации
Процедура СторноПереквалификацииПартииПриРеализации(СтруктураШапкиДокумента, ТаблицаСписания, ТаблицаДвиженийПокупки, ТаблицаДвиженийПартии, НаборДвиженийХозрасчетный,Заголовок)

	Если ТаблицаСписания.Количество() = 0 Тогда
		//Включение НДС в стоимость по данному набору не требуется
		Возврат;
	КонецЕсли;
	
	//Фильтрование по произведенным в документе переквалификациям партий.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПоПриобретеннымЦенностямОбороты.Организация,
	|	НДСПоПриобретеннымЦенностямОбороты.СчетУчета,
	|	НДСПоПриобретеннымЦенностямОбороты.Номенклатура,
	|	НДСПоПриобретеннымЦенностямОбороты.Партия,
	|	НДСПоПриобретеннымЦенностямОбороты.Склад,
	|	НДСПоПриобретеннымЦенностямОбороты.СчетФактура,
	|	НДСПоПриобретеннымЦенностямОбороты.ВидЦенности,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПоПриобретеннымЦенностямОбороты.НДСВключенВСтоимость = ИСТИНА
	|				ТОГДА НДСПоПриобретеннымЦенностямОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоВключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПоПриобретеннымЦенностямОбороты.НДСВключенВСтоимость = ЛОЖЬ
	|				ТОГДА НДСПоПриобретеннымЦенностямОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИсключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПоПриобретеннымЦенностямОбороты.НДСВключенВСтоимость = ИСТИНА
	|				ТОГДА НДСПоПриобретеннымЦенностямОбороты.Стоимость
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СтоимостьВключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПоПриобретеннымЦенностямОбороты.НДСВключенВСтоимость = ЛОЖЬ
	|				ТОГДА НДСПоПриобретеннымЦенностямОбороты.Стоимость
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СтоимостьИсключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПоПриобретеннымЦенностямОбороты.НДСВключенВСтоимость = ИСТИНА
	|				ТОГДА НДСПоПриобретеннымЦенностямОбороты.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСВключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПоПриобретеннымЦенностямОбороты.НДСВключенВСтоимость = ЛОЖЬ
	|				ТОГДА НДСПоПриобретеннымЦенностямОбороты.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСИсключен,
	|	НДСПоПриобретеннымЦенностямОбороты.СчетУчетаНДС,
	|	НДСПоПриобретеннымЦенностямОбороты.СтавкаНДС
	|ИЗ
	|	РегистрНакопления.НДСПоПриобретеннымЦенностям КАК НДСПоПриобретеннымЦенностямОбороты
	|ГДЕ
	|	НДСПоПриобретеннымЦенностямОбороты.Регистратор = &Регистратор
	|	И НДСПоПриобретеннымЦенностямОбороты.Номенклатура В(&Номенклатура)
	|	И НДСПоПриобретеннымЦенностямОбороты.ВидЦенности В(&ВидыЦенностей)
	|	И НДСПоПриобретеннымЦенностямОбороты.СчетФактура В(&СчетаФактуры)
	|	И НДСПоПриобретеннымЦенностямОбороты.ВидДвижения = &ВидДвиженияПриход
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПоПриобретеннымЦенностямОбороты.СчетУчета,
	|	НДСПоПриобретеннымЦенностямОбороты.Номенклатура,
	|	НДСПоПриобретеннымЦенностямОбороты.Склад,
	|	НДСПоПриобретеннымЦенностямОбороты.СчетФактура,
	|	НДСПоПриобретеннымЦенностямОбороты.ВидЦенности,
	|	НДСПоПриобретеннымЦенностямОбороты.Организация,
	|	НДСПоПриобретеннымЦенностямОбороты.Партия,
	|	НДСПоПриобретеннымЦенностямОбороты.СчетУчетаНДС,
	|	НДСПоПриобретеннымЦенностямОбороты.СтавкаНДС";

	Запрос.УстановитьПараметр("Регистратор",	СтруктураШапкиДокумента.Сделка);
	//Запрос.УстановитьПараметр("СчетаУчета",		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("СчетУчета")));
	Запрос.УстановитьПараметр("Номенклатура",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("Номенклатура")));
	Запрос.УстановитьПараметр("ВидыЦенностей",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("ВидЦенности")));
	Запрос.УстановитьПараметр("СчетаФактуры",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("СчетФактура")));
	Запрос.УстановитьПараметр("ВидДвиженияПриход",	ВидДвиженияНакопления.Приход);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		//Переквалификация возвращаемых партий при реализации не производилась.
		возврат;
	КонецЕсли; 
	ТаблицаПереквалификаций = Результат.Выгрузить(ОБходРезультатаЗапроса.Прямой);
	ТаблицаПереквалификаций.Индексы.Добавить("Номенклатура,ВидЦенности,СчетФактура");
	
	ТаблицаВключенияВСтоимость = ТаблицаСписания.СкопироватьКолонки();
	
	КолонкиТаблицыПереквалификации = ТаблицаПереквалификаций.Колонки;
	КолонкиТаблицыСписания = ТаблицаСписания.Колонки;
	
	Для каждого СтрокаСписания Из ТаблицаСписания Цикл
	    Отбор = Новый Структура ("Номенклатура,ВидЦенности,СчетФактура",СтрокаСписания.номенклатура,СтрокаСписания.ВидЦенности,СтрокаСписания.СчетФактура);
		НаборПереквалификацияПоКлючу = ТаблицаПереквалификаций.НайтиСтроки(Отбор);
		Если НаборПереквалификацияПоКлючу.Количество()=0 Тогда
			// Переквалификация по данному набору не производилась
			Продолжить;
		КонецЕсли; 
		
		КоличествоПоДвижению = - СтрокаСписания.Количество;
		СтоимостьПоДвижению  = - СтрокаСписания.Стоимость;
		НДСПоДвижению  = - СтрокаСписания.НДС;
		Для каждого СтрокаПереквалификации Из НаборПереквалификацияПоКлючу Цикл
			СуммаПереквалификации = 0;
			КоличествоПереквалификации = 0;
			НДСПереквалификации = 0;
			
			Если СтрокаСписания.НДСВключенВСтоимость Тогда
				//Могло производиться только включениеНДС в стоимость товаров (КоличествоВключен>0, КоличествоИсключен<0)
				//Переквалификация по стоимости
				Если СтрокаПереквалификации.СтоимостьВключен >0 и СтоимостьПоДвижению >0 Тогда
					СуммаПереквалификации = мин(СтрокаПереквалификации.СтоимостьВключен, СтоимостьПоДвижению);
					СтрокаПереквалификации.СтоимостьВключен = СтрокаПереквалификации.СтоимостьВключен - СуммаПереквалификации;
					//Стоимость по НДС не включенному в стоимость должна быть отрицательной, компенсируем. 
					СтрокаПереквалификации.СтоимостьИсключен = СтрокаПереквалификации.СтоимостьИсключен + СуммаПереквалификации;
					СтоимостьПоДвижению = СтоимостьПоДвижению - СуммаПереквалификации;
				КонецЕсли; 
				//Переквалификация по количеству
				Если СтрокаПереквалификации.КоличествоВключен >0 и КоличествоПоДвижению >0 Тогда
					КоличествоПереквалификации = мин(СтрокаПереквалификации.КоличествоВключен, КоличествоПоДвижению);
					СтрокаПереквалификации.КоличествоВключен = СтрокаПереквалификации.КоличествоВключен - КоличествоПереквалификации;
					//Количество по НДС не включенному в стоимость должно быть отрицательным, компенсируем. 
					СтрокаПереквалификации.КоличествоИсключен = СтрокаПереквалификации.КоличествоИсключен + КоличествоПереквалификации;
					КоличествоПоДвижению = КоличествоПоДвижению - КоличествоПереквалификации;
				КонецЕсли; 
				//Переквалификация по НДС
				Если СтрокаПереквалификации.НДСВключен >0 и НДСПоДвижению >0 Тогда
					НДСПереквалификации = мин(СтрокаПереквалификации.НДСВключен, НДСПоДвижению);
					СтрокаПереквалификации.НДСВключен = СтрокаПереквалификации.НДСВключен - НДСПереквалификации;
					//Количество по НДС не включенному в стоимость должно быть отрицательным, компенсируем. 
					СтрокаПереквалификации.НДСИсключен = СтрокаПереквалификации.НДСИсключен + НДСПереквалификации;
					НДСПоДвижению = НДСПоДвижению - НДСПереквалификации;
				КонецЕсли; 
			Иначе
				//Могло производиться только исключение НДС из стоимости товаров (КоличествоИсключен>0, КоличествоВключен<0)
				//Переквалификация по стоимости
				Если СтрокаПереквалификации.СтоимостьИсключен >0 и СтоимостьПоДвижению >0 Тогда
					СуммаПереквалификации = мин(СтрокаПереквалификации.СтоимостьИсключен, СтоимостьПоДвижению);
					СтрокаПереквалификации.СтоимостьИсключен = СтрокаПереквалификации.СтоимостьИсключен - СуммаПереквалификации;
					//Стоимость по НДС не включенному в стоимость должна быть отрицательной, компенсируем. 
					СтрокаПереквалификации.СтоимостьВключен = СтрокаПереквалификации.СтоимостьВключен + СуммаПереквалификации;
					СтоимостьПоДвижению = СтоимостьПоДвижению - СуммаПереквалификации;
				КонецЕсли; 
				//Переквалификация по количеству
				Если СтрокаПереквалификации.КоличествоИсключен >0 и КоличествоПоДвижению >0 Тогда
					КоличествоПереквалификации = мин(СтрокаПереквалификации.КоличествоИсключен, КоличествоПоДвижению);
					СтрокаПереквалификации.КоличествоИсключен = СтрокаПереквалификации.КоличествоИсключен - КоличествоПереквалификации;
					//Количество по НДС не включенному в стоимость должно быть отрицательным, компенсируем. 
					СтрокаПереквалификации.КоличествоВключен = СтрокаПереквалификации.КоличествоВключен + КоличествоПереквалификации;
					КоличествоПоДвижению = КоличествоПоДвижению - КоличествоПереквалификации;
				КонецЕсли; 
				//Переквалификация по НДС
				Если СтрокаПереквалификации.НДСИсключен >0 и НДСПоДвижению >0 Тогда
					НДСПереквалификации = мин(СтрокаПереквалификации.НДСИсключен, НДСПоДвижению);
					СтрокаПереквалификации.НДСИсключен = СтрокаПереквалификации.НДСИсключен - НДСПереквалификации;
					//НДС по НДС не включенному в стоимость должно быть отрицательным, компенсируем. 
					СтрокаПереквалификации.НДСВключен = СтрокаПереквалификации.НДСВключен + НДСПереквалификации;
					НДСПоДвижению = НДСПоДвижению - НДСПереквалификации;
				КонецЕсли; 
			КонецЕсли;
			
			Если (КоличествоПереквалификации = 0 и СуммаПереквалификации = 0) Тогда
				продолжить;
			КонецЕсли;
				
			//Добавляем строки в движения по таблице НДС партии (по обратной переквалификации)
		
			//Отразим включения НДС в стоимость по регистру НДС партии
			СтрокаСписанияНДСПартии	= ТаблицаДвиженийПартии.Добавить();
			СтрокаДобавленияНДСПартии= ТаблицаДвиженийПартии.Добавить();
			
			Для каждого Колонка Из ТаблицаДвиженийПартии.Колонки Цикл
				Если Колонка.Имя = "Количество" тогда
					СтрокаСписанияНДСПартии[Колонка.Имя] 	= КоличествоПереквалификации;
					СтрокаДобавленияНДСПартии[Колонка.Имя]	= -КоличествоПереквалификации;
				ИначеЕсли Колонка.Имя = "Стоимость" тогда
					СтрокаСписанияНДСПартии[Колонка.Имя] 	= СуммаПереквалификации;
					СтрокаДобавленияНДСПартии[Колонка.Имя]	= -СуммаПереквалификации;
				ИначеЕсли Колонка.Имя = "НДС" тогда
					СтрокаСписанияНДСПартии[Колонка.Имя] 	= НДСПереквалификации;
					СтрокаДобавленияНДСПартии[Колонка.Имя]	= -НДСПереквалификации;
				ИначеЕсли Колонка.Имя = "Склад" тогда
					БУ = СтрокаПереквалификации.СчетУчета.ПолучитьОбъект();
					ВестиСкладскойУчет  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
					Если ВестиСкладскойУчет Тогда
						ВестиСуммовойУчетПоСкладам = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой;
					Иначе
						ВестиСуммовойУчетПоСкладам = Ложь;
					КонецЕсли;
					Если ВестиСуммовойУчетПоСкладам Тогда
						СтрокаСписанияНДСПартии[Колонка.Имя] 	= СтруктураШапкиДокумента.Склад;
						СтрокаДобавленияНДСПартии[Колонка.Имя]	= СтруктураШапкиДокумента.Склад;
					КонецЕсли; 
				ИначеЕсли не КолонкиТаблицыПереквалификации.Найти(Колонка.Имя) = неопределено тогда
					СтрокаСписанияНДСПартии[Колонка.Имя] =   СтрокаПереквалификации[Колонка.Имя];
					СтрокаДобавленияНДСПартии[Колонка.Имя] = СтрокаПереквалификации[Колонка.Имя];
				КонецЕсли; 
			КонецЦикла;
			
			СтрокаСписанияНДСПартии.НДСВключенВСтоимость = не СтрокаСписания.НДСВключенВСтоимость;
			СтрокаДобавленияНДСПартии.НДСВключенВСтоимость = СтрокаСписания.НДСВключенВСтоимость;
			
			
			// подготовка таблицы для отражения переквалификации по другим регистрам.
			СтрокаТаблицыВключенияВстоимость = ТаблицаВключенияВСтоимость.Добавить();
			Для каждого Колонка Из ТаблицаВключенияВСтоимость.Колонки Цикл
				Если Колонка.Имя = "Количество" или Колонка.Имя = "Стоимость" или Колонка.Имя = "НДС" тогда
					СтрокаТаблицыВключенияВстоимость[Колонка.Имя] 	= СтрокаДобавленияНДСПартии[Колонка.Имя];
				ИначеЕсли не КолонкиТаблицыСписания.Найти(Колонка.Имя) = неопределено тогда
					СтрокаТаблицыВключенияВстоимость[Колонка.Имя] =   СтрокаСписания[Колонка.Имя];
				КонецЕсли;
			КонецЦикла;
			СтрокаТаблицыВключенияВстоимость.ДействияНДСПокупки_ВключитьВСтоимость = СтрокаСписания.НДСВключенВСтоимость;
			СтрокаТаблицыВключенияВстоимость.ДействияНДСПокупки_ИсключитьИзСтоимости = не СтрокаСписания.НДСВключенВСтоимость;
			
			Если КоличествоПоДвижению= 0 и СтоимостьПоДвижению = 0 Тогда
				//Обработка данной строки списания завершена
				Прервать;
			КонецЕсли; 	
		КонецЦикла; 
	КонецЦикла; 
	
	Если ТаблицаВключенияВСтоимость.Количество()>0 Тогда
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаВключенияВСтоимость, ТаблицаДвиженийПартии,Истина,НаборДвиженийХозрасчетный,Заголовок, Движения, Ложь);
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаВключенияВСтоимость, ТаблицаДвиженийПартии,Ложь,НаборДвиженийХозрасчетный,Заголовок, Движения, Ложь);
	КонецЕсли; 
		
КонецПроцедуры // СторноПереквалификацииПартииПриРеализации()

// Отражение возврата от покупателя в книге покупок (в регистре НДСПредъявленный)
// 
Процедура СформироватьДвиженияПоРегиструНДСПредъявленный_ВозвратОтПокупателя(СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, Движения, Отказ) Экспорт

	
	ТаблицаДвижений_НДСПредъявленный	= Движения.НДСПредъявленный.Выгрузить();
	ТаблицаДвижений_НДСПредъявленный.Очистить();
	
	Для Каждого СтрокаДок из ТаблицаПредъявленногоНДС Цикл
		
		СчетУчетаЦенности = СтрокаДок.СчетУчета;
		Если (ТипЗнч(СчетУчетаЦенности) = Тип("ПланСчетовСсылка.Хозрасчетный")) и СчетУчетаЦенности.Забалансовый Тогда
			// Пропускаем забалансовые поступления
			Продолжить;
		ИначеЕсли СтрокаДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС 
			и НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаДок.СчетДоходов) Тогда
			// Пропускаем возвраты по реализации ЕНВД
			Продолжить;
		КонецЕсли;

		СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();

		СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.Возврат;

		СтрокаДвижения.Поставщик   = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижения.СчетФактура = ?(ПокупателемВыставляетсяСчетФактураНаВозврат Или Не ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка), 
										СтруктураШапкиДокумента.Ссылка, 
										СтруктураШапкиДокумента.Сделка);

		СтрокаДвижения.СтавкаНДС   = СтрокаДок.СтавкаНДС;
			
		СтрокаДвижения.СчетУчетаНДС = СтруктураШапкиДокумента.СчетУчетаНДС;
		
		СтрокаДвижения.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
		СтрокаДвижения.НДС         = СтрокаДок.НДС;
		
		СтрокаДвижения.ВидДвижения  = ВидДвиженияНакопления.Приход;

		СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
		
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда

		Движения.НДСПредъявленный.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ДобавитьДвижение();
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСПредъявленный()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		УказанаПартия = (ТипЗнч(Сделка) <> Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"))
			И (ТипЗнч(Сделка) <> Тип("ДокументСсылка.ОтражениеНачисленияНДС"));
	Иначе
		УказанаПартия = Ложь;
	КонецЕсли;
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации", "СделкаВидОперации");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"  , "ВидСклада");
	
 	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка", "КурсВзаиморасчетов"     , "КурсВзаиморасчетовСделки");
 	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка", "КратностьВзаиморасчетов", "КратностьВзаиморасчетовСделки");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС, УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ХозрасчетныйВидыСубконто.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|ГДЕ
		|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
		|	И ХозрасчетныйВидыСубконто.НомерСтроки = 1";
		
		СчетаСНоменклатурнымиГруппами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		СтруктураШапкиДокумента.Вставить("СчетаСНоменклатурнымиГруппами", СчетаСНоменклатурнымиГруппами);
	КонецЕсли;
	// }УчетДоходовИРасходовИП


	КорПодразделениеОрганизации = СтруктураШапкиДокумента.ПодразделениеОрганизации;
	
	// {ОбособленныеПодразделения
	Если ЗначениеЗаполнено(Сделка) Тогда 
		МетаданныеСделки = Сделка.Метаданные();
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеСделки) Тогда
		    КорПодразделениеОрганизации = Сделка.ПодразделениеОрганизации; 
		КонецЕсли;
	КонецЕсли;
	// }ОбособленныеПодразделения 

	СтруктураШапкиДокумента.Вставить("КорПодразделениеОрганизации", КорПодразделениеОрганизации);
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"       , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("КоличествоДок"      , "Количество");
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		СтруктураПолей.Вставить("СчетУчета",        "ПереданныеСчетУчета");
		СтруктураПолей.Вставить("КорСчетСписания",  "СчетУчета");
		
	Иначе
		СтруктураПолей.Вставить("Сумма"              , "Сумма");
		СтруктураПолей.Вставить("СтавкаНДС"          , "СтавкаНДС");
		СтруктураПолей.Вставить("НДС"                , "СуммаНДС");
		СтруктураПолей.Вставить("НомерСтроки"        , "НомерСтроки");
		СтруктураПолей.Вставить("СчетУчета"  ,       "СчетУчета");
		СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации"  , "СчетУчетаНДСПоРеализации");
		СтруктураПолей.Вставить("СчетДоходов",       "СчетДоходов");
		СтруктураПолей.Вставить("Субконто" ,         "Субконто");
		СтруктураПолей.Вставить("СчетРасходов",      "СчетРасходов");
		СтруктураПолей.Вставить("ОтражениеВУСН",       "ОтражениеВУСН");
	КонецЕсли;
	
	СтруктураПолей.Вставить("НомерГТД"           , "НомерГТД");
	СтруктураПолей.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	
	Если не УказанаПартия Тогда
		СтруктураПолей.Вставить("Себестоимость", "Себестоимость");
	КонецЕсли;
	
	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	//Сформируем новую колонку "Количество"
	ТаблицаПоТоварам.Колонки.Добавить("Количество",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаПоТоварам.ЗагрузитьКолонку(ТаблицаПоТоварам.ВыгрузитьКолонку("КоличествоДок"),"Количество");
	ТаблицаПоТоварам.Колонки.Удалить(ТаблицаПоТоварам.Колонки.КоличествоДок);
	
	Если ОтразитьВКнигеПокупок Тогда
		ТаблицаПоТоварам.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаПоТоварам.Колонки.Добавить("СчетФактура");
		ТаблицаПоТоварам.ЗаполнитьЗначения(?(СтруктураШапкиДокумента.ПокупателемВыставляетсяСчетФактураНаВозврат Или Не ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка), 
									СтруктураШапкиДокумента.Ссылка, 
									СтруктураШапкиДокумента.Сделка), "СчетФактура");
		ТаблицаПоТоварам.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаНДС, "СчетУчетаНДС");
	ИначеЕсли СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		ТаблицаПоТоварам.Колонки.Добавить("СчетФактура");
		ТаблицаПоТоварам.ЗаполнитьЗначения(?(Не ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка), 
												СтруктураШапкиДокумента.Ссылка, 
												СтруктураШапкиДокумента.Сделка), "СчетФактура");
	КонецЕсли;
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Удалить ("Количество");
	СтруктураПолей.Вставить("КоличествоДок", "Количество"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	СтруктураПолей.Вставить("Номенклатура" , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Сумма"        , "Сумма");
	СтруктураПолей.Вставить("НомерСтроки"  , "НомерСтроки");
	СтруктураПолей.Вставить("СчетУчета",   "СчетУчета");
	
	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТаре   , СтруктураШапкиДокумента, Истина);
	
	Если ОтразитьВКнигеПокупок Тогда
		ТаблицаПоТоварам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.Возврат, "ВидЦенности");
	КонецЕсли;
	
КонецПроцедуры

// Процедуры и  функции, обслуживающие зачет авансов

Функция ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента)
	
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) Тогда
		СтруктураШапкиДокумента.Вставить("СпособЗачетаАвансов", Перечисления.СпособыЗачетаАвансов.ПоДокументу);
	Иначе
		СтруктураШапкиДокумента.Вставить("СпособЗачетаАвансов", Перечисления.СпособыЗачетаАвансов.НеЗачитывать);
	КонецЕсли;
	
	ТаблицаЗачетаАвансов = Новый ТаблицаЗначений;
	ТаблицаЗачетаАвансов.Колонки.Добавить("ДокументРасчетов",    Метаданные().Реквизиты.Сделка.Тип);
	ТаблицаЗачетаАвансов.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	Если СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		СтрокаЗачета = ТаблицаЗачетаАвансов.Добавить();
		СтрокаЗачета.ДокументРасчетов    = СтруктураШапкиДокумента.Сделка;
		СтрокаЗачета.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	Возврат ТаблицаЗачетаАвансов;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Склад = Основание.Склад;
		
		Сделка = Основание; 
		
		Если Основание.Проведен Тогда
			
			// Скопируем табличные части из документа основания.
			ЗаполнитьТоварыПоОснованию(Основание);
			ЗаполнитьВозвратнуюТаруПоОснованию(Основание);
			
		КонецЕсли;
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
				
		СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТарыПокупателя;
		
		ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Склад = Основание.Склад;
		
		Сделка = Основание;
		
		Если Сделка.Проведен Тогда
			
			// Заполним табличные части по заказу поставщику.
			ЗаполнитьТоварыПоОснованию(Сделка);
			
		КонецЕсли;
		
		ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
		
	КонецЕсли;
	
	Если ВозвратнаяТара.Количество() > 0 Тогда
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", Истина);
	КонецЕсли;                                                  
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	
	// В этом случае почистим в табличных частях поля НомерГТД и СтранаПроисхождения.
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование Тогда 
		
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД)Тогда
				СтрокаТаблицы.НомерГТД = Неопределено;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.СтранаПроисхождения)Тогда
				СтрокаТаблицы.СтранаПроисхождения = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование Тогда 
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");

	// Установка параметров учета НДС
	УстановитьРеквизитыУчетаНДС();
	
	Если Не ОтразитьВКнигеПокупок Или Не ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
		УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", Истина);
	Иначе
		Если Не ПредъявленСчетФактура Тогда
			УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", ПометкаУдаления);
		КонецЕсли;
	КонецЕсли;		

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре);
	
	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Зачет авансов
	ТаблицаЗачетаАвансов = ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента);
	
	//Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
		СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента,Отказ, Заголовок);
	
	// Движения по документу
	
	ПартионныйУчет = УправлениеЗапасами.ВедетсяПартионныйУчет(
		ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация, "Бух"));

	мПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(Организация, Дата);	

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаЗачетаАвансов, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураПолученный", Ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

