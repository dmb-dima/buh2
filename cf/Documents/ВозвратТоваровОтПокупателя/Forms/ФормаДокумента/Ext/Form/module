////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения

// Хранит текущую форму подбора номенклатуры
Перем мФормаПодбораНоменклатуры; 

// Хранит списки колонок, видимостью которых управляют как видимостью счетов учета
Перем мСписокКолонокСчетовУчета; 

// Хранит список видов договоров, доступных для данного документа
Перем мСписокВидовДоговоров; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ОткрыватьНастройкуДвижений;

// Хранит значение параметра учетной политики УпрощенныйУчетНДС
Перем мУпрощенныйУчетНДС;

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА УПРАВЛЕНИЯ ВИДИМОСТЬЮ, ДОСТУПНОСТЬЮ И ТОЛЬКО ПРОСМОТР


// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// В соответствии с текущими значениями реквизитов объекта и формы,
// а также переменных модуля формы для списка элементов формы, изменяющих
// видимость, устанавливается соответствующее значение видимости
//
// Возвращаемое значение: список с именами элементов формы и текущим 
// значением их видимости
Функция ПолучитьСписокУправлениеВидимостью()
	
	СписокУправлениеВидимостью = Новый СписокЗначений;

	СписокКолонокТовары = Новый СписокЗначений;
	
	ЭтоУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	ЭтоРасходыУСН = ?(ЭтоУСН, НЕ НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата), Ложь);
	ОСН_ЮрЛицо = (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо И НЕ ЭтоУСН);
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		УказанаПартия = (ТипЗнч(Сделка) <> Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"))
			И (ТипЗнч(Сделка) <> Тип("ДокументСсылка.ОтражениеНачисленияНДС"));
	Иначе
		УказанаПартия = Ложь;
	КонецЕсли;
	
	ЭтоКомиссия = (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ВидимостьСчетов = НЕ ЭтоКомиссия;
	
	СписокКолонокТовары.Добавить(НЕ УказанаПартия И НЕ ЭтоКомиссия, "Себестоимость");
	СписокКолонокТовары.Добавить(НЕ ЭтоКомиссия, "Цена");
	СписокКолонокТовары.Добавить(НЕ ЭтоКомиссия, "Сумма");
	СписокКолонокТовары.Добавить(УчитыватьНДС И (НЕ ЭтоКомиссия), "СтавкаНДС");
	СписокКолонокТовары.Добавить(УчитыватьНДС И (НЕ ЭтоКомиссия), "СуммаНДС");
	СписокКолонокТовары.Добавить(НЕ ЭтоКомиссия, "Всего");
	
	СписокКолонокТовары.Добавить(ПоказыватьВДокументахСчетаУчета, "СчетУчета");
	СписокКолонокТовары.Добавить(ПоказыватьВДокументахСчетаУчета И (НЕ ЭтоКомиссия), "Субконто");
	СписокКолонокТовары.Добавить(ПоказыватьВДокументахСчетаУчета И (НЕ ЭтоКомиссия), "СчетУчетаНДСПоРеализации");
	
	СписокКолонокТовары.Добавить(ПоказыватьВДокументахСчетаУчета И (НЕ ЭтоКомиссия), "СчетРасходов");
	
	СписокКолонокТовары.Добавить(ПоказыватьВДокументахСчетаУчета И ЭтоКомиссия, "ПереданныеСчетУчета");
	
	СписокКолонокТовары.Добавить(ПоказыватьВДокументахСчетаУчета И (НЕ ЭтоКомиссия), "СчетДоходов");

	СписокКолонокТовары.Добавить(ЭтоРасходыУСН И (НЕ УказанаПартия), "ОтражениеВУСН");
	
	СписокУправлениеВидимостью.Добавить(СписокКолонокТовары, "Товары");

	// устанавливаем видимость в зависимости от разных реквизитов
	СписокКолонокВозвТара = Новый СписокЗначений;

	СписокКолонокВозвТара.Добавить(ПоказыватьВДокументахСчетаУчета, "СчетУчета");

	СписокУправлениеВидимостью.Добавить(СписокКолонокВозвТара, "ВозвратнаяТара");

	СписокУправлениеВидимостью.Добавить(ПоказыватьВДокументахСчетаУчета, "ОсновнаяПанель.Страницы.СчетаУчета");

	ИспользоватьВозвратнуюТару = ?(ВозвратнаяТара.Количество() = 0, Константы.ИспользоватьВозвратнуюТару.Получить(), Истина);
	
	СписокУправлениеВидимостью.Добавить(ИспользоватьВозвратнуюТару, "НадписьСчетУчетаРасчетовПоТаре");
	СписокУправлениеВидимостью.Добавить(ИспользоватьВозвратнуюТару, "СчетУчетаРасчетовПоТаре");
	
	// Закладка Счет-фактура
	СписокУправлениеВидимостью.Добавить(ОтразитьВКнигеПокупок, "ОсновнаяПанель.Страницы.СчетФактура");
	СписокУправлениеВидимостью.Добавить(ПредъявленСчетФактура, "НадписьДатаВходящегоСчетаФактуры");
	СписокУправлениеВидимостью.Добавить(ПредъявленСчетФактура, "ДатаВходящегоСчетаФактуры");
	СписокУправлениеВидимостью.Добавить(ПредъявленСчетФактура, "НадписьНомерВходящегоСчетаФактуры");
	СписокУправлениеВидимостью.Добавить(ПредъявленСчетФактура, "НомерВходящегоСчетаФактуры");
	СписокУправлениеВидимостью.Добавить(мУпрощенныйУчетНДС И ОтразитьВКнигеПокупок, "НДСПредъявленКВычету");
	
	ЭлементыФормы.ПанельДанныеСчетаФактуры.ТекущаяСтраница = ?(Не ПокупателемВыставляетсяСчетФактураНаВозврат, ЭлементыФормы.ПанельДанныеСчетаФактуры.Страницы.СтраницаНадпись,
																												ЭлементыФормы.ПанельДанныеСчетаФактуры.Страницы.СтраницаДанные);
	
	Возврат СписокУправлениеВидимостью;

КонецФункции

// В соответствии с текущими значениями реквизитов объекта и формы,
// а также переменных модуля формы для колонок табличных полей формы,
// имеющих нестандартную настройку возможности пользователем изменять
// видимость, устанавливается соответствующее значение этой возможности
//
// Возвращаемое значение: список со списками с именами колонок табличных
// полей формы и текущим значением их возможности изменять видимость
Функция ПолучитьСписокДоступаКУправлениюВидимостью()
	
	СписокДоступаКУправлениюВидимостью = Новый СписокЗначений;
	
	СписокКолонокТовары = Новый СписокЗначений;
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СписокКолонокТовары.Добавить(Ложь, "Номенклатура");
	СписокКолонокТовары.Добавить(Ложь, "Количество");
	СписокКолонокТовары.Добавить(Ложь, "Сумма");
	СписокКолонокТовары.Добавить(Ложь, "СтавкаНДС");
	СписокКолонокТовары.Добавить(Ложь, "СуммаНДС");
	СписокКолонокТовары.Добавить(Ложь, "СчетУчета");
	СписокКолонокТовары.Добавить(Ложь, "СчетДоходов");
	СписокКолонокТовары.Добавить(Ложь, "Субконто");
	СписокКолонокТовары.Добавить(Ложь, "СчетУчетаНДСПоРеализации");
	СписокКолонокТовары.Добавить(Ложь, "СчетРасходов");
	СписокКолонокТовары.Добавить(Ложь, "ПереданныеСчетУчета");
	
	СписокДоступаКУправлениюВидимостью.Добавить(СписокКолонокТовары, "Товары");
	
	СписокКолонокВозвТара = Новый СписокЗначений;
	
	СписокКолонокВозвТара.Добавить(Ложь, "Номенклатура");
	СписокКолонокВозвТара.Добавить(Ложь, "Количество");
	СписокКолонокВозвТара.Добавить(Ложь, "Сумма");
	СписокКолонокВозвТара.Добавить(Ложь, "СчетУчета");
	
	СписокДоступаКУправлениюВидимостью.Добавить(СписокКолонокВозвТара, "ВозвратнаяТара");
	
	Возврат СписокДоступаКУправлениюВидимостью;
	
КонецФункции

// В соответствии с текущими значениями реквизитов объекта и формы,
// а также переменных модуля формы для списка элементов формы, изменяющих
// доступность, устанавливается соответствующее значение доступности
//
// Возвращаемое значение: список с именами элементов формы и текущим 
// значением их доступности
Функция ПолучитьСписокУправлениеДоступностью()
	
	СписокУправлениеДоступностью = Новый СписокЗначений;
	ДоступныПараметрыНДС = Дата >= '20060101' И ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	
	СписокУправлениеДоступностью.Добавить(ДоступныПараметрыНДС, "ПокупателемВыставляетсяСчетФактураНаВозврат");
	СписокУправлениеДоступностью.Добавить(ДоступныПараметрыНДС И Не ПокупателемВыставляетсяСчетФактураНаВозврат, "ОтразитьВКнигеПокупок");
	СписокУправлениеДоступностью.Добавить(ДоступныПараметрыНДС И ОтразитьВКнигеПокупок, "СчетУчетаНДС");
	СписокУправлениеДоступностью.Добавить(ДоступныПараметрыНДС 
											И ?(ПокупателемВыставляетсяСчетФактураНаВозврат, ПредъявленСчетФактура, ЗначениеЗаполнено(Сделка)), "НДСПредъявленКВычету");
	СписокУправлениеДоступностью.Добавить(ДоступныПараметрыНДС И ОтразитьВКнигеПокупок, "СчетУчетаНДС");
	
	Возврат СписокУправлениеДоступностью;
	
КонецФункции

// В соответствии с текущими значениями реквизитов объекта и формы,
// а также переменных модуля формы для списка элементов формы, изменяющих
// свойство "только просмотр", устанавливается соответствующее значение 
//
// Возвращаемое значение: список с именами элементов формы и текущим 
// значением их свойства "только просмотр"
Функция ПолучитьСписокУправлениеТолькоПросмотр()
	
	СписокУправлениеТолькоПросмотр = Новый СписокЗначений;
	
	Возврат СписокУправлениеТолькоПросмотр;
	
КонецФункции

// Централизованнно осуществляется управление доступом к элементам формы:
//  - видимостью
//  - доступностью
//  - только просмотром
//  - возможностью изменять видимость (только для колонок табличных полей)
//
Процедура УстановитьДоступ()

	// устанавливаем видимость
	СписокУправлениеВидимостью = ПолучитьСписокУправлениеВидимостью();
	
	Если СписокУправлениеВидимостью <> Неопределено Тогда
		Для каждого ЭлементУправлениеВидимостью из СписокУправлениеВидимостью Цикл
			
			ИмяЭлементаФормы = ЭлементУправлениеВидимостью.Представление;
			ВидимостьЭлементаФормы = ЭлементУправлениеВидимостью.Значение;
			
			Если ТипЗнч(ВидимостьЭлементаФормы) = Тип("Булево") Тогда
				
				ПозицияСтраниц = Найти(ИмяЭлементаФормы, ".Страницы.");
				
				Если ПозицияСтраниц > 0 Тогда
					ЭлементФормы = ЭлементыФормы[Лев(ИмяЭлементаФормы, ПозицияСтраниц -1)];
					СтраницаЭлементаФормы = ЭлементФормы.Страницы[Сред(ИмяЭлементаФормы, ПозицияСтраниц + 10)];
					Если СтраницаЭлементаФормы.Видимость <> ВидимостьЭлементаФормы Тогда
						СтраницаЭлементаФормы.Видимость = ВидимостьЭлементаФормы;
					КонецЕсли;
					
				Иначе
					ЭлементФормы = ЭлементыФормы[ИмяЭлементаФормы];
					Если ЭлементФормы.Видимость <> ВидимостьЭлементаФормы Тогда
						ЭлементФормы.Видимость = ВидимостьЭлементаФормы;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ВидимостьЭлементаФормы) = Тип("СписокЗначений") Тогда
				
				КоллекцияКолонок = ЭлементыФормы[ИмяЭлементаФормы].Колонки;
			
				Для каждого ЭлементВидимостиКолонки из ВидимостьЭлементаФормы Цикл
					КолонкаТабличногоПоля = КоллекцияКолонок[ЭлементВидимостиКолонки.Представление];
					Если КолонкаТабличногоПоля.Видимость <> ЭлементВидимостиКолонки.Значение Тогда
						КолонкаТабличногоПоля.Видимость = ЭлементВидимостиКолонки.Значение;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// устанавливаем доступность
	СписокУправлениеДоступностью = ПолучитьСписокУправлениеДоступностью();
	
	Если СписокУправлениеДоступностью <> Неопределено Тогда
		Для каждого ЭлементУправлениеДоступностью из СписокУправлениеДоступностью Цикл
			
			ИмяЭлементаФормы = ЭлементУправлениеДоступностью.Представление;
			ДоступностьЭлементаФормы = ЭлементУправлениеДоступностью.Значение;
			
			Если ТипЗнч(ДоступностьЭлементаФормы) = Тип("Булево") Тогда
				
				ПозицияСтраниц = Найти(ИмяЭлементаФормы, ".Страницы.");
				
				Если ПозицияСтраниц > 0 Тогда
					ЭлементФормы = ЭлементыФормы[Лев(ИмяЭлементаФормы, ПозицияСтраниц -1)];
					СтраницаЭлементаФормы = ЭлементФормы.Страницы[Сред(ИмяЭлементаФормы, ПозицияСтраниц + 10)];
					Если СтраницаЭлементаФормы.Доступность <> ДоступностьЭлементаФормы Тогда
						СтраницаЭлементаФормы.Доступность = ДоступностьЭлементаФормы;
					КонецЕсли;
					
				Иначе
					ЭлементФормы = ЭлементыФормы[ИмяЭлементаФормы];
					Если ЭлементФормы.Доступность <> ДоступностьЭлементаФормы Тогда
						ЭлементФормы.Доступность = ДоступностьЭлементаФормы;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ДоступностьЭлементаФормы) = Тип("СписокЗначений") Тогда
				
				КоллекцияКолонок = ЭлементыФормы[ИмяЭлементаФормы].Колонки;
			
				Для каждого ЭлементДоступностиКолонки из ДоступностьЭлементаФормы Цикл
					КолонкаТабличногоПоля = КоллекцияКолонок[ЭлементДоступностиКолонки.Представление];
					Если КолонкаТабличногоПоля.Доступность <> ЭлементДоступностиКолонки.Значение Тогда
						КолонкаТабличногоПоля.Доступность = ЭлементДоступностиКолонки.Значение;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	//устанавливаем только просмотр
	СписокУправлениеТолькоПросмотр = ПолучитьСписокУправлениеТолькоПросмотр();
	
	Если СписокУправлениеТолькоПросмотр <> Неопределено Тогда
		Для каждого ЭлементУправлениеТолькоПросмотр из СписокУправлениеТолькоПросмотр Цикл
			
			ИмяЭлементаФормы = ЭлементУправлениеТолькоПросмотр.Представление;
			ТолькоПросмотрЭлементаФормы = ЭлементУправлениеТолькоПросмотр.Значение;
			
			Если ТипЗнч(ТолькоПросмотрЭлементаФормы) = Тип("Булево") Тогда
				
				ЭлементФормы = ЭлементыФормы[ИмяЭлементаФормы];
				Если ЭлементФормы.ТолькоПросмотр <> ТолькоПросмотрЭлементаФормы Тогда
					ЭлементФормы.ТолькоПросмотр = ТолькоПросмотрЭлементаФормы;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ТолькоПросмотрЭлементаФормы) = Тип("СписокЗначений") Тогда
				
				КоллекцияКолонок = ЭлементыФормы[ИмяЭлементаФормы].Колонки;
			
				Для каждого ЭлементТолькоПросмотрКолонки из ТолькоПросмотрЭлементаФормы Цикл
					КолонкаТабличногоПоля = КоллекцияКолонок[ЭлементТолькоПросмотрКолонки.Представление];
					Если КолонкаТабличногоПоля.ТолькоПросмотр <> ЭлементТолькоПросмотрКолонки.Значение Тогда
						КолонкаТабличногоПоля.ТолькоПросмотр = ЭлементТолькоПросмотрКолонки.Значение;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	
	// устанавливаем доступ к управлению видимостью
	СписокДоступаКУправлениюВидимостью = ПолучитьСписокДоступаКУправлениюВидимостью();

	Если СписокДоступаКУправлениюВидимостью <> Неопределено Тогда
		Для каждого ЭлементДоступаКУправлениюВидимостью из СписокДоступаКУправлениюВидимостью Цикл
			
			ИмяЭлементаФормы = ЭлементДоступаКУправлениюВидимостью.Представление;
			ДоступКУправлениюВидимостьюЭлементаФормы = ЭлементДоступаКУправлениюВидимостью.Значение;
			
			Если ТипЗнч(ДоступКУправлениюВидимостьюЭлементаФормы) = Тип("СписокЗначений") Тогда
				
				КоллекцияКолонок = ЭлементыФормы[ИмяЭлементаФормы].Колонки;
			
				Для каждого ЭлементДоступаКУправлениюВидимостьюКолонки из ДоступКУправлениюВидимостьюЭлементаФормы Цикл
					КолонкаТабличногоПоля = КоллекцияКолонок[ЭлементДоступаКУправлениюВидимостьюКолонки.Представление];
					Если КолонкаТабличногоПоля.ИзменятьВидимость <> ЭлементДоступаКУправлениюВидимостьюКолонки.Значение Тогда
						КолонкаТабличногоПоля.ИзменятьВидимость = ЭлементДоступаКУправлениюВидимостьюКолонки.Значение;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт
                  
	Если ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
		ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка = Истина;
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный"),
																								ЭтотОбъект, ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка);
	Иначе
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = "не требуется";
		ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка = Ложь;
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	УстановитьДоступ();
	
	УстановитьАвтоотметку();
	
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	
    //Проверим какие же счета будем изменять
    ЗаполнятьСчетаРасчета = Ложь; //Заполнять ли счета расчетов
    ЗадаватьВопрос	   	  = Ложь; //Если заполнять то Задавать ли вопрос о его перезаполнении 
    
    Если ПоказыватьВДокументахСчетаУчета Тогда
    	СтруктураОбязательныхПолей = Новый Структура;
    	СтруктураНеОбязательныхПолей = Новый Структура;
		Если ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетовПокупателя);			
			СтруктураНеОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам", СчетаУчета.СчетАвансовПокупателя);
		КонецЕсли;
		Если ВозвратнаяТара.Количество() > 0 Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре", СчетаУчета.СчетУчетаТарыПокупателя);			
		КонецЕсли;
    	
    	БухгалтерскийУчет.ПроверитьНеобходимостьПерезаполненияСчетовУчета(ЭтотОбъект, СтруктураОбязательныхПолей,СтруктураНеОбязательныхПолей, ЗадаватьВопрос, ЗаполнятьСчетаРасчета);		
    	Если ЗадаватьВопрос Тогда			
    		Ответ = Вопрос("Установить счета учета расчетов в соответствии со значениями по умолчанию?", 
    		РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета при смене договора");			
     		Если Ответ = КодВозвратаДиалога.Нет Тогда
    			ЗаполнятьСчетаРасчета = Ложь;
    		КонецЕсли;	
    	КонецЕсли;	
    Иначе		
    	ЗаполнятьСчетаРасчета     = Истина;		
    КонецЕсли;

	Если ЗаполнятьСчетаРасчета Тогда
    	ЗаполнитьСчетаУчетаРасчетов(СчетаУчета);
    КонецЕсли;

КонецПроцедуры // ПриИзмененииДоговора()

// Считывает необходимые для копирования табличной части документа данные из другого документа.
//
// Параметры: 
//  ДокументСсылка - ссылка на документ, чью табличную часть будем копировать, 
//  ТабличнаяЧасть - табличная часть, которую заполняем.
//
// Возвращаемое значение:
//  Выборка из результата запроса.
//
Функция ПолучитьДанныеДляКопирования(ДокументСсылка, ТабличнаяЧасть)

	// Считываем нужную информацию по документу Реализации
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.Цена,
	|	Док.Ссылка.ВалютаДокумента,";

	ОснованиеРеализацияТоваров = (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));

	Если НЕ ОснованиеРеализацияТоваров Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КурсВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КурсДокумента,
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КратностьВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КратностьДокумента,";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	1 КАК КратностьДокумента,
		|	1 КАК КурсДокумента,";
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Док.Ссылка.УчитыватьНДС,
		|	Док.Ссылка.СуммаВключаетНДС,
		|	Док.СтавкаНДС,
		|	Док.НомерГТД,
		|	Док.СтранаПроисхождения";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов  КАК ВалютаВзаиморасчетов,
		|	Док.Ссылка.КурсВзаиморасчетов, 
		|	Док.Ссылка.КратностьВзаиморасчетов ";
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ."+ ДокументСсылка.Метаданные().Имя + ?(ТабличнаяЧасть = Товары,".Товары",".ВозвратнаяТара") + " КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование 
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Возврат Выборка;

КонецФункции // ПолучитьДанныеДляКопирования()

// Процедура выполняет заполнение табличной части 
// копированием из выбранного пользователем документа РеализацияТоваровУслуг.
//
// Параметры:
//  ТабличнаяЧасть   - табличная часть, которую необходимо заполнить.
//  СпособЗаполнения - строка ("Заполнить" или "Добавить"), определяет способ заполнения.
//
Процедура ЗаполнитьТабличнуюЧастьПоРеализации(ТабличнаяЧасть, СпособЗаполнения)


	// Оценочная стоимость возвратной тары учитывается в валюте взаиморасчетов по договору,
	// поэтому перед заполнением договор должен быть выбран.
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
		Возврат;
	КонецЕсли; 

	// Если заполняем, то почистим ТЧ
	Если СпособЗаполнения = "Заполнить"
	   И ТабличнаяЧасть.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
	
		// Теперь нужно выбрать документ, по которому будем заполнять
		ФормаВыбора = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора();
		ФормаВыбора.Заголовок   = "Выберите документ Реализация для заполнения возврата от покупателя";
		ФормаВыбора.РежимВыбора = Истина;

		// По умолчанию поставим отбор по договору
		ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = ДоговорКонтрагента;
		ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ФормаВыбора.Отбор.Организация.Установить(Организация);
			ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
		КонецЕсли;

		ДокументРеализации = ФормаВыбора.ОткрытьМодально();

		Если НЕ ЗначениеЗаполнено(ДокументРеализации) Тогда 
			Возврат; // ничего не выбрали.
		КонецЕсли;
		
	Иначе
		ДокументРеализации = Сделка;
	КонецЕсли;

	// Будем работать только с проведенными документами, потому что только у проведенных документов
	// проверено заполнение необходимых реквизитов.
	Если Не ДокументРеализации.Проведен Тогда

		Предупреждение("Документ " + ДокументРеализации.Метаданные().Представление() + " не проведен.
		               |Заполнение невозможно.", , Метаданные().Представление());
		Возврат;

	КонецЕсли;

	// Вызываем процедуру заполнения.
	Если СпособЗаполнения = "Заполнить" Тогда

		Если ТабличнаяЧасть = Товары Тогда

			ЗаполнитьТоварыПоОснованию(ДокументРеализации);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			ЗаполнитьВозвратнуюТаруПоОснованию(ДокументРеализации);

		КонецЕсли;
	
	Иначе // При добавлении надо сворачивать дубли строк, аналогично подбору

		Если (ТабличнаяЧасть = ВозвратнаяТара) И (ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")) Тогда
			
		Иначе
			
			ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации(ПолучитьДанныеДляКопирования(ДокументРеализации, ТабличнаяЧасть), ТабличнаяЧасть);
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоРеализации()

// Добавляет с необходимым пересчетом строки табличной части из выбранного документа Реализация
//
// Параметры: 
//  Выборка         - выборка из результата запроса по документу, из которого надо добавить строки табличной части,
//  ТабличнаяЧасть  - табличная часть, в которую надо добавить строки.
//
Процедура ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации(Выборка, ТабличнаяЧасть)

	// Обходим строки Реализации
	СтруктураОтбора = Новый Структура();
	Пока Выборка.Следующий() Цикл
	
		// Ищем текущую позицию основания в табличной части документа возврата.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество =  СтрокаТабличнойЧасти.Количество 
			                                 + Выборка.Количество;

			Если ТабличнаяЧасть = Товары Тогда

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			КонецЕсли;

		Иначе

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
			
			Если ТабличнаяЧасть = Товары Тогда

				СтрокаТабличнойЧасти.НомерГТД                   = Выборка.НомерГТД;
				СтрокаТабличнойЧасти.СтранаПроисхождения        = Выборка.СтранаПроисхождения;

				// Заполняем реквизиты табличной части.
				ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", Истина);
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

				// Пересчитаем цену в валюту документа.
				Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, 
				                  Выборка.ВалютаДокумента,    ВалютаДокумента, 
				                  Выборка.КурсДокумента,      ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				                  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                                                 Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				                                                 Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
				                                                 УчитыватьНДС, СуммаВключаетНДС,
				                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

				// Рассчитываем реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
                
			ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

				// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
				СтрокаТабличнойЧасти.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, 
				                  Выборка.ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов,
				                  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				                  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

				// По флагам налогообложения тару пересчитывать не надо,
				// Считаем, для тары флаги одинаковы (с НДС),

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

				ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", Истина);

			КонецЕсли;

		КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	КонецЦикла;

КонецПроцедуры // ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Товары
	 ИЛИ ТабличнаяЧасть = ВозвратнаяТара Тогда
		Если ЗначениеЗаполнено(ДоговорКонтрагента) И (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
			СписокЗапросов.Добавить("ОстаткиУКомиссионеров", "По остаткам номенклатуры у комиссионера");
		Иначе
			Если ЗначениеЗаполнено(ТипЦен) Тогда
				СписокЗапросов.Добавить("ЦеныНоменклатуры",         "По ценам номенклатуры");
				СписокЗапросов.Добавить("ОстаткиИЦеныНоменклатуры", "Остатки и цены номенклатуры");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбораНоменклатуры, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для
// подбора номенклатуры в табличную часть.
//
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена = Истина;

	Если ТабличнаяЧасть = Товары Тогда

		Команда         = "ПодборВТабличнуюЧастьТовары";
		Валюта          = ВалютаДокумента;
		ИмяТабличнойЧасти = "Товары";

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			Предупреждение("Не выбран договор контрагента!");
			Возврат;
		ИначеЕсли НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
			Возврат;
		КонецЕсли;

		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		Валюта            = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		ИмяТабличнойЧасти = "Тара";
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , Склад);

	Если Склад.ВидСклада <> Перечисления.ВидыСкладов.Оптовый И НЕ Склад.ТипЦенРозничнойТорговли.Пустая() Тогда
		СтруктураПараметровПодбора.Вставить("ТипЦен"           , Склад.ТипЦенРозничнойТорговли);
	Иначе
		СтруктураПараметровПодбора.Вставить("ТипЦен"           , ТипЦен);
	КонецЕсли;

	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"   , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"           , Контрагент);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);
	// {ОбособленныеПодразделения
	СтруктураПараметровПодбора.Вставить("Подразделение"      , ПодразделениеОрганизации);
    // }ОбособленныеПодразделения
	
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок",             "Подбор номенклатуры в документ " + 
	                                                             ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, мФормаПодбораНоменклатуры);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, Количество, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	
	Если ТабличнаяЧасть = ВозвратнаяТара И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.НомерГТД            = Номенклатура.НомерГТД;
			СтрокаТабличнойЧасти.СтранаПроисхождения = Номенклатура.СтранаПроисхождения;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", Истина);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти);
			
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество          = Количество;

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);
			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС,
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", Истина);

		КонецЕсли;

	КонецЕсли;

	ТабличнаяЧастьИмя = ?(ТабличнаяЧасть = Товары, "Товары", "ВозвратнаяТара");
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти);

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект); 
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, мВалютаРегламентированногоУчета); 

КонецПроцедуры // ПриИзмененииНоменклатурыТоваров()

Процедура ПредъявленСчетФактураПриИзменении(Элемент)
	
	Если ПредъявленСчетФактура Тогда
		СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный");
		Если ЗначениеЗаполнено(СчетФактура) И ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			Ответ = Вопрос("Для указания данных счета-фактуры требуется пометить на удаление подчиненный документ <" + СчетФактура + ">. Пометить документ на удаление?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
				СчетФактураОбъект.ДокументОснование = Неопределено;
				СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СчетФактураОбъект.УстановитьПометкуУдаления(Истина);
			Иначе
				ПредъявленСчетФактура = Ложь;			
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если мУпрощенныйУчетНДС Тогда
		НДСПредъявленКВычету = ПредъявленСчетФактура;
	КонецЕсли;

	ЗаполнитьТекстПроСчетФактуру();
	УстановитьДоступ();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает автоотметку незаполненного для тех колонок в табличной части 
// "Товары", обязательность заполнения которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

 	ЭлементыФормы.СчетУчетаНДС.АвтоотметкаНезаполненного = ОтразитьВКнигеПокупок;
	ЭлементыФормы.Сделка.АвтоотметкаНезаполненного = ОтразитьВКнигеПокупок И Не ПокупателемВыставляетсяСчетФактураНаВозврат;

КонецПроцедуры // УстановитьАвтоотметку()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары"));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС"));

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета) + ДокументОбъект.ВалютаДокумента
		                + " = " + ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		РаботаСДиалогами.ВыбратьВидОперации(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа",ПараметрОбъектКопирования);

		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ЗаполнитьСчетаУчетаРасчетов();
			СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		КонецЕсли;
		
		ОтразитьВКнигеПокупок = Истина;
		ПокупателемВыставляетсяСчетФактураНаВозврат = (Не ТипЗнч(Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
		УстановитьРеквизитыУчетаНДС();
		
	КонецЕсли;
	
	мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПереключитьВидимостьСчетов.Пометка = ПоказыватьВДокументахСчетаУчета;
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьДоступ();
	
	// Установить автоотметку незаполненного
	УстановитьАвтоотметку();
	
	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);
	
	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Товары",	"Товары");
	Страницы.Добавить("Тара",	"ВозвратнаяТара");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);
	
	// Определить счет-фактуру, введенный на основании этого документа, если такой 
	// счет-фактура существует.
	ЗаполнитьТекстПроСчетФактуру();
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,СкладОрдер,ПодразделениеОрганизации, Контрагент, ДоговорКонтрагента");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница,Страницы);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	ИначеЕсли ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" Тогда
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			Если Параметр.Найти(Ссылка) <> Неопределено Тогда
				ЗаполнитьТекстПроСчетФактуру();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе

	ЭлементыФормы.СуммаВзаиморасчетов.Значение = ОбщегоНазначения.ФорматСумм(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары"),  
												ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
												ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета) , КурсВзаиморасчетов,
												ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                               КурсВзаиморасчетов,
	                                                                               КратностьВзаиморасчетов,
	                                                                               мВалютаРегламентированногоУчета,
	                                                                               Истина);

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	ЗаголовокТовары = ?(ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование, "Оборудование (", "Товары (");
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = ЗаголовокТовары + ДокументОбъект.Товары.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);
	
	ЗаполнитьТекстПроСчетФактуру();
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя[Кнопка.Имя];
	КонецЕсли;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) , ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьДоступ();
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	Если ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	КонецЕсли;

	Если УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента,Контрагент,Организация,мСписокВидовДоговоров ) Тогда
		ПриИзмененииДоговора();
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм копирования
// табличной части из документа РеализацияТоваровУслуг.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоРеализации(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоРеализации(Товары, "Заполнить");
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоРеализации()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм добавления
// табличной части из документа РеализацияТоваровУслуг.
//
Процедура КоманднаяПанельТоварыДобавитьИзРеализации(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоРеализации(Товары, "Добавить");
КонецПроцедуры // КоманднаяПанельТоварыДобавитьИзРеализации()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);
	
КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// группового изменения значений реквизитов табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);
	КонецЕсли;

	УстановитьДоступ();

КонецПроцедуры // КоманднаяПанельТоварыДействиеЦеныВалюта()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм копирования
// табличной части из документа РеализацияТоваровУслуг.
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоРеализации(Кнопка)

	ЗаполнитьТабличнуюЧастьПоРеализации(ВозвратнаяТара, "Заполнить");

КонецПроцедуры // КоманднаяПанельВозвратнаяТараЗаполнитьПоРеализации()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм добавления
// табличной части из документа РеализацияТоваровУслуг.
//
Процедура КоманднаяПанельВозвратнаяТараДобавитьИзРеализации(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоРеализации(ВозвратнаяТара, "Добавить");
КонецПроцедуры // КоманднаяПанельВозвратнаяТараДобавитьИзРеализации()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()


// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Если НачалоМесяца(мТекущаяДатаДокумента) <> НачалоМесяца(Дата) Тогда
		мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
		УстановитьДоступ();
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	УстановитьДоступ();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	
	УстановитьДоступ();
	
	Если УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента,Контрагент,Организация,мСписокВидовДоговоров ) Тогда
		ПриИзмененииДоговора();
	КонецЕсли;


КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект,мСписокВидовДоговоров);

	// Могли поменять договор.
	ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
		                                        мСписокВидовДоговоров, СтандартнаяОбработка);


КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СкладОрдер
//
Процедура СкладОрдерПриИзменении(Элемент)
	
	// {ОбособленныеПодразделения
	ПодразделениеОрганизации = УправлениеПодразделениями.ПолучитьПодразделение(Организация, Склад);
	// }ОбособленныеПодразделения
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьДоступ();
	
КонецПроцедуры // СкладОрдерПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СкладОрдер
//
Процедура СкладОрдерНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладОрдерНачалоВыбора()

Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СчетУчетаРасчетовПоТареОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Сделка
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Отбор = Новый Структура();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Отбор.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Отбор.Вставить("ДокументыПоДоговоруКонтрагента", ДоговорКонтрагента);
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "");
		
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Сделка
//
Процедура СделкаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		
		УстановитьДоступ();
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Организация = Сделка.Организация;
		
		ОрганизацияПриИзменении(ЭлементыФормы.Организация);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		
		Склад = Сделка.Склад;
		
		СкладОрдерПриИзменении(ЭлементыФормы.СкладОрдер);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", Сделка.Метаданные()) И НЕ ЗначениеЗаполнено(Контрагент) Тогда
		
		Контрагент = Сделка.Контрагент;
		
		// При подстановке контрагента сделка очищается.
		// Сохраняем значение для последующей подстановки.
		ТекущееЗначение = Элемент.Значение;
		
		КонтрагентПриИзменении(Неопределено);
		
		Сделка = ТекущееЗначение;		
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", Сделка.Метаданные()) И НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		ДоговорКонтрагента = Сделка.ДоговорКонтрагента;
		
		// При подстановке договора сделка очищается.
		// Сохраняем значение для последующей подстановки.
		ТекущееЗначение = Элемент.Значение;
		
		ПриИзмененииДоговора();
		
		Сделка = ТекущееЗначение;
		
	КонецЕсли;
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") И ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
		
		ПокупателемВыставляетсяСчетФактураНаВозврат = Ложь;
				
	КонецЕсли;
	
	УстановитьДоступ();
	ЗаполнитьТекстПроСчетФактуру();
	
КонецПроцедуры // СделкаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ОтразитьВКнигеПокупок
//
Процедура ОтразитьВКнигеПокупокПриИзменении(Элемент)
	
	УстановитьДоступ();
	ЗаполнитьТекстПроСчетФактуру();
	
КонецПроцедуры

Процедура ПокупателемВыставляетсяСчетФактураНаВозвратПриИзменении(Элемент)
	
    УстановитьРеквизитыУчетаНДС();		
	УстановитьДоступ();
	ЗаполнитьТекстПроСчетФактуру();

КонецПроцедуры

Процедура ГиперссылкаСчетФактураНажатие(Элемент)
	
	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураПолученный");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего", "ЕдиницаХранения"
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
	                                        + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));

	КонецЕсли;

	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", Истина);
	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
    
	ТоварыПриАктивизацииСтроки(Элемент);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчета
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры // ТоварыСчетУчетаОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" в строке табличной части "Товары".
//
Процедура ТоварыСчетДоходовОтРеализацииПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	Счет   = СтрокаТЧ.СчетДоходов;

	Если Счет.ВидыСубконто.Количество() > 0 Тогда
		СтрокаТЧ.Субконто = Новый(Счет.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
	Иначе
		СтрокаТЧ.Субконто = Неопределено;
	КонецЕсли;

	ЭлементыФормы.Товары.Колонки.Субконто.Доступность = НЕ (НЕ ЗначениеЗаполнено(Счет) ИЛИ (Счет.ВидыСубконто.Количество() = 0));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" в строке табличной части "Товары".
//
Процедура ТоварыСчетДоходовОтРеализацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" в табличной части "Товары".
//
Процедура ТоварыПриАктивизацииСтроки(Элемент)

	Если ЭлементыФормы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Счет  = ЭлементыФормы.Товары.ТекущиеДанные.СчетДоходов;

	ЭлементыФормы.Товары.Колонки.Субконто.Доступность = НЕ (НЕ ЗначениеЗаполнено(Счет) ИЛИ (Счет.ВидыСубконто.Количество() = 0));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, "ВозвратнаяТара", Истина);
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект); 

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);
    
КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

Процедура ПриЗакрытии()
	
	УправлениеПользователями.УстановитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета", ПоказыватьВДокументахСчетаУчета);
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыПереключитьВидимостьСчетов(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	УстановитьДоступ();
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
                   

Процедура ТоварыОтражениеВУСННачалоВыбора(Элемент, СтандартнаяОбработка)
	Если Элемент.ДоступныеЗначения.Количество() = 0 Тогда
		Элемент.ДоступныеЗначения.Добавить(Перечисления.ОтражениеВУСН.Принимаются);
		Элемент.ДоступныеЗначения.Добавить(Перечисления.ОтражениеВУСН.НеПринимаются);
	КонецЕсли;
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// {ОбособленныеПодразделения
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;

КонецПроцедуры
// }ОбособленныеПодразделения

Процедура ВозвратнаяТараСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.ВозвратнаяТара.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

мСписокВидовДоговоров = Новый СписокЗначений;
мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);

Если ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование Тогда
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
КонецЕсли;



