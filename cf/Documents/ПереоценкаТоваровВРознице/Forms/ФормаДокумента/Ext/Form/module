////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мКолонкиТовары;

Перем мФормаПодбора;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

//Используется для определения необходимости открытия настроек движения после сохранения
Перем ОткрыватьНастройкуДвижений;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимость(НеСпрашивать = Истина)
	
	НТТ = (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	
	ЭлементыФормы.ДокументУстановкиЦен.Видимость 		= НЕ НТТ;
	ЭлементыФормы.НадписьДокументУстановкиЦен.Видимость = НЕ НТТ;
	
	Колонки      = ЭлементыФормы.Товары.Колонки;
		
	Если (НТТ) и (НЕ НеСпрашивать) Тогда
		Ответ = Вопрос("Свернуть табличную часть по номенклатуре?",	РежимДиалогаВопрос.ДаНет, , , "Свертка по номенклатуре");

								
		Если Ответ = КодВозвратаДиалога.Да Тогда
						
			Для Каждого Строка Из Товары Цикл
				Если Строка.СуммаПереоценки = 0 Тогда				
					Строка.СуммаПереоценки = Строка.Количество * (Строка.ЦенаВРознице - Строка.ЦенаВРозницеСтарая);
				КонецЕсли;
				Если мРазделятьПоСтавкамНДС Тогда
					Если НЕ ЗначениеЗаполнено(Строка.СтавкаНДСВРознице) Тогда
						СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, Строка.Номенклатура, Склад);
						Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
							Строка.СтавкаНДСВРознице = ?(НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетаУчета.СчетДоходов), Перечисления.СтавкиНДС.БезНДС, Строка.Номенклатура.СтавкаНДС);
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаТоваров = Товары.Выгрузить();
			ТаблицаТоваров.Свернуть("СтавкаНДСВРознице", "СуммаПереоценки");
			Товары.Очистить();
			Товары.Загрузить(ТаблицаТоваров);
			
			Колонки.Номенклатура.Видимость       = НЕ НТТ;
			Колонки.Количество.Видимость         = НЕ НТТ;
			Колонки.ЦенаВРозницеСтарая.Видимость = НЕ НТТ;
			Колонки.ЦенаВРознице.Видимость       = НЕ НТТ;
		Иначе
			Для Каждого Строка Из Товары Цикл
				Если Строка.СуммаПереоценки = 0 Тогда				
					Строка.СуммаПереоценки = Строка.Количество * (Строка.ЦенаВРознице - Строка.ЦенаВРозницеСтарая);
				КонецЕсли;
				Если мРазделятьПоСтавкамНДС Тогда
					Если НЕ ЗначениеЗаполнено(Строка.СтавкаНДСВРознице) Тогда
						СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, Строка.Номенклатура, Склад);
						Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
							Строка.СтавкаНДСВРознице = ?(НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетаУчета.СчетДоходов), Перечисления.СтавкиНДС.БезНДС, Строка.Номенклатура.СтавкаНДС);
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		Если НТТ И Товары.Количество() > 0 Тогда
			ПоказыватьНоменклатуру = ЗначениеЗаполнено(Товары[0].Номенклатура);
		ИначеЕсли НТТ Тогда
			ПоказыватьНоменклатуру = Колонки.Номенклатура.Видимость; 
		Иначе
			ПоказыватьНоменклатуру = Истина; 
		КонецЕсли;
		
		Колонки.Номенклатура.Видимость       = ПоказыватьНоменклатуру;
		Колонки.Количество.Видимость         = ПоказыватьНоменклатуру;
		Колонки.ЦенаВРозницеСтарая.Видимость = ПоказыватьНоменклатуру;
		Колонки.ЦенаВРознице.Видимость       = ПоказыватьНоменклатуру;
	
	КонецЕсли;
	Колонки.СтавкаНДСВРознице.Видимость = НТТ И мРазделятьПоСтавкамНДС;
	Колонки.СуммаПереоценки.Видимость   = НТТ;
	
	Колонки.Номенклатура.ИзменятьВидимость 		 = НТТ;
	Колонки.Количество.ИзменятьВидимость 		 = НТТ;
	Колонки.ЦенаВРозницеСтарая.ИзменятьВидимость = НТТ;
	Колонки.ЦенаВРознице.ИзменятьВидимость 		 = НТТ;
	
	Колонки.Номенклатура.АвтоОтметкаНезаполненного 		 = НЕ НТТ;
	Колонки.Количество.АвтоОтметкаНезаполненного 		 = НЕ НТТ;
	Колонки.ЦенаВРозницеСтарая.АвтоОтметкаНезаполненного = НЕ НТТ;
	Колонки.ЦенаВРознице.АвтоОтметкаНезаполненного 		 = НЕ НТТ;
	
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ДействиеПодбор.Доступность = Колонки.Номенклатура.Видимость;
	
КонецПроцедуры

// Функция определяет текущую розничную цену номенклатуры, учитываемой в продажных ценах.
//
// Возвращаемое значение:
//  Число - цена до переоценки.
//
Функция УчетнаяЦена(Номенклатура)
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат 0;
	Иначе
		
		Запрос = Новый Запрос;
		
		// Установим параметры запроса
		ПорядокСубконто = Новый Массив();
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура",    Номенклатура);
		Запрос.УстановитьПараметр("Склад",           Склад);
		Запрос.УстановитьПараметр("КонецПериода",    Дата);
		Запрос.УстановитьПараметр("Организация",     Организация);
		Запрос.УстановитьПараметр("Счет",     		 ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.СуммаОстатокДт КАК СуммаОстаток,
		|	Остатки.КоличествоОстатокДт КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет, &ПорядокСубконто, Организация = &Организация) КАК Остатки
		|
		|ГДЕ
		|	Остатки.КоличествоОстаток > 0 И
		|	Остатки.Субконто1 = &Номенклатура И
		|	Остатки.Субконто2 = &Склад
		|";
		
		Выборка        = Запрос.Выполнить().Выбрать();
		ТипЦенСклада   = Склад.ТипЦенРозничнойТорговли;
		Валюта         = мВалютаРегламентированногоУчета;
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, Дата);
		Курс           = СтруктураКурса.Курс;
		Кратность      = СтруктураКурса.Кратность;
		
		Пока Выборка.Следующий() Цикл
			ЦенаВРозницеСтарая = ?(Выборка.КоличествоОстаток = 0, 0, Окр(Выборка.СуммаОстаток / Выборка.КоличествоОстаток, 2, 1));
		КонецЦикла;
		
		Возврат ЦенаВРозницеСтарая;
		
	КонецЕсли;
КонецФункции

Процедура РассчитатьСуммуПереоценки(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.СуммаПереоценки = СтрокаТабличнойЧасти.Количество * (СтрокаТабличнойЧасти.ЦенаВРознице - СтрокаТабличнойЧасти.ЦенаВРозницеСтарая);
	
КонецПроцедуры
	
// Функция формирует список запросов для передачи в форму подбора.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора()

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ЗначениеЗаполнено(Склад) И (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
		СписокЗапросов.Добавить("ЦеныНоменклатуры", "Цены номенклатуры");
	Иначе
		СписокЗапросов.Добавить("ОстаткиИЦеныНоменклатуры", "Остатки и цены номенклатуры");
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)
	Если НЕ мФормаПодбора = Неопределено Тогда
		РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбора, Реквизит);
    КонецЕсли;
КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	ЕстьЦена  = Истина;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"           , "ПодборВТабличнуюЧастьТовары");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора", СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , Склад.ТипЦенРозничнойТорговли);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);
	СтруктураПараметровПодбора.Вставить("Контрагент"           , Неопределено);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", Неопределено);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер);

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, мФормаПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, Количество, ЕдиницаИзмерения, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены",          ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура",        Номенклатура);
	ЗначениеВыбора.Свойство("Количество",          Количество);
	ЗначениеВыбора.Свойство("Цена",                Цена);
	ЗначениеВыбора.Свойство("Серия",               Серия);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Пересчитаем цену в валюту регламентированного учета
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
	Цена           = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, мВалютаРегламентированногоУчета, СтруктураКурса.Курс, СтруктураКурса.Кратность, Дата);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура"              , Номенклатура);
	СтруктураОтбора.Вставить("ЦенаВРознице"        		 , Цена);

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
		СтрокаТабличнойЧасти.Количество                 = Количество;
		СтрокаТабличнойЧасти.ЦенаВРознице		        = Цена;
		СтрокаТабличнойЧасти.ЦенаВРозницеСтарая         = УчетнаяЦена(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;

	ТабличнаяЧастьИмя = "Товары";
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ТоварыОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Берем из самого реквизита Номенклатура
	СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, Склад.ТипЦенРозничнойТорговли, 
																		Дата, мВалютаРегламентированногоУчета, 1, 1);
	СтрокаТабличнойЧасти.ЦенаВРозницеСтарая = УчетнаяЦена(СтрокаТабличнойЧасти.Номенклатура);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если ЭтоНовый() Тогда
		ОсновнаяОрганизация = глЗначениеПеременной("ОсновнаяОрганизация");
		
		УчетнаяПолитикаНеЗадана = Ложь;
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, ОсновнаяОрганизация);
		
		Если ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
			Если мУчетнаяПолитика.Количество() > 0 Тогда
				Если НЕ мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
					Предупреждение("Переоценка товаров в рознице возможна только при
					|учете товаров по продажным ценам!");
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
    	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		УчетнаяПолитикаНеЗадана = Ложь;	
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);

		Если ЗначениеЗаполнено(Склад) 
		   И Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			Склад = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Если мУчетнаяПолитика.Количество() > 0 Тогда
				Если НЕ мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
					Организация = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	 
	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("ЦенаВРозницеСтарая");
	СтруктураКолонок.Вставить("ЦенаВРознице");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	// {ОбособленныеПодразделения
    мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	УстановитьВидимость();
		
	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = Истина;

	ЭлементыФормы.Товары.Колонки.ЦенаВРознице.ЭлементУправления.ТолькоПросмотр       = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.ЦенаВРозницеСтарая.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;

	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,ПодразделениеОрганизации,Склад,ДокументУстановкиЦен");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.Товары);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
            
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывает сервисный механизм для заполнения табличной части Товары.
//
// Параметры:
//  РежимЗаполнения - режим заполнения
//
Процедура ДействиеЗаполнитьТовары(РежимЗаполнения)

	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Предупреждение("Не выбран склад!"); 
		Возврат;
	КонецЕсли;
	
	Если Товары.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

		Товары.Очистить();
	КонецЕсли;

	ЗаполнитьТовары(РежимЗаполнения);

КонецПроцедуры // ДействиеЗаполнитьТовары()

// Процедура вызывает сервисный механизм для заполнения табличной части
// Товары по остаткам.
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткам(Кнопка)

	ДействиеЗаполнитьТовары("ЗаполнитьПоОстаткам");

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнить()

// Процедура вызывает сервисный механизм для заполнения табличной части
// Товары по измененным ценам.
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТоварыЗаполнитьПоЦенам(Кнопка)

	ДействиеЗаполнитьТовары("ЗаполнитьПоЦенам");

КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоЦенам()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	//Открывает форму движений документа для ручного редактирования
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Организация) Тогда
		УчетнаяПолитикаНеЗадана = Ложь;
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
		
		Если мУчетнаяПолитика.Количество() > 0 Тогда	
			Если НЕ мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
				Предупреждение("Переоценка товаров в рознице возможна только при
								|учете товаров по продажным ценам!");
			
				Организация = Неопределено;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.Склады.ПолучитьФормуВыбора(,Элемент,);

	// уберем из выбора неавтоматизированные торговые точки
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Значение                            = Перечисления.ВидыСкладов.Оптовый;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Использование                       = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.ВидСравнения                        = ВидСравнения.НеРавно;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСклада.Доступность = Ложь;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока                         = Склад;

	ФормаВыбора.Открыть();

КонецПроцедуры // СкладОрдерНачалоВыбора()

Процедура СкладПриИзменении(Элемент)
	
	УстановитьВидимость(Ложь);
	
КонецПроцедуры

// {ОбособленныеПодразделения
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()
// }ОбособленныеПодразделения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ОбработкаВыбора" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//Услуг в этом документе быть не должно.
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ВыбранноеЗначение.Услуга Тогда
			Предупреждение("Услуг в этом документе быть не должно."); 
			СтандартнаяОбработка = Ложь;  // Отказ от выбора.
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры // ТоварыНоменклатураОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

Процедура ТоварыЦенаВРозницеСтараяПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	РассчитатьСуммуПереоценки(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	РассчитатьСуммуПереоценки(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	РассчитатьСуммуПереоценки(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары = ЭлементыФормы.Товары.Колонки;

