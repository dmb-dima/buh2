Перем мВалютаРегламентированногоУчета Экспорт;
Перем мУчетнаяПолитикаБУ Экспорт;
Перем мУчетнаяПолитикаНУ Экспорт;
Перем мИспользоватьОборотнуюНоменклатуру Экспорт;
Перем мРазделятьПоСтавкамНДС Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПереоценкиТоваровВРознице()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Организация                  КАК Поставщик,
	|	Склад	                     КАК Получатель ,
	|	Склад.Представление          КАК ПредставлениеПолучателя,
	|	Товары.(
	|		НомерСтроки,
	|		Количество, 
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		ЦенаВРозницеСтарая,
	|		ЦенаВРознице
	|	)
	|ИЗ
	|	Документ.ПереоценкаТоваровВРознице КАК ПереоценкаТоваровВНТТ
	|
	|ГДЕ
	|	ПереоценкаТоваровВНТТ.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПереоценкаТоваровВРознице_ПереоценкаТоваровВРознице";
	Макет = ПолучитьМакет("ПереоценкаТоваровВРознице");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Переоценка товаров в рознице");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеОрганизации;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.Товар = ВыборкаСтрокТовары.Товар;
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПереоценкиТоваровВРознице()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПереоценкаТоваровВНТТ" тогда
		
		ТабДокумент = ПечатьПереоценкиТоваровВРознице();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПереоценкаТоваровВНТТ", "Переоценка товаров в рознице");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполнение табличной части по остаткам.
//
Процедура ЗаполнитьТовары(РежимЗаполнения = "ЗаполнитьПоОстаткам") Экспорт

	Запрос = Новый Запрос;

	// Установим параметры запроса
	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",           Склад);
	Запрос.УстановитьПараметр("КонецПериода",    Дата);
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("Счет",     		 ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Субконто1 КАК Номенклатура,
	|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
	|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет, &ПорядокСубконто, Организация = &Организация И Субконто2 = &Склад) КАК Остатки
	|
	|ГДЕ
	|	Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Субконто1
	|";

	Выборка        = Запрос.Выполнить().Выбрать();
	ТипЦенСклада   = Склад.ТипЦенРозничнойТорговли;
	Валюта         = мВалютаРегламентированногоУчета;
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, Дата);
	Курс           = СтруктураКурса.Курс;
	Кратность      = СтруктураКурса.Кратность;

	Пока Выборка.Следующий() Цикл

		ДобавитьСтроку     = Истина;
		Номенклатура       = Выборка.Номенклатура;
		Количество         = Выборка.КоличествоОстаток;
		ЦенаВРозницеСтарая = ?(Выборка.КоличествоОстаток = 0, 0, Окр(Выборка.СуммаОстаток / Выборка.КоличествоОстаток, 2, 1));

		Если РежимЗаполнения = "ЗаполнитьПоЦенам" Тогда
			ЦенаПоТипуЦен = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, ТипЦенСклада, Дата, Валюта, Курс, Кратность);

			Если ЦенаПоТипуЦен  > 0
			   И ЦенаПоТипуЦен <> ЦенаВРозницеСтарая 
			   И Количество > 0 Тогда
				ЦенаВРознице = ЦенаПоТипуЦен;
			Иначе
				ДобавитьСтроку = Ложь;
			КонецЕсли;
		Иначе
			ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, ТипЦенСклада, Дата, Валюта, Курс, Кратность);
		КонецЕсли;

		Если ДобавитьСтроку Тогда
			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Количество;
			СтрокаТабличнойЧасти.ЦенаВРозницеСтарая         = ЦенаВРозницеСтарая;
			СтрокаТабличнойЧасти.ЦенаВРознице               = ЦенаВРознице;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТовары()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("МинусКоличество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	
	ТаблицаТоваров.Колонки.Добавить("Склад");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("СчетУчета");
	ТаблицаТоваров.Колонки.Добавить("КорСчетСписания");
	ТаблицаТоваров.Колонки.Добавить("ПодразделениеОрганизации");
	
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,           "Склад");
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                              "Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,     "Организация");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	
	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		ТаблицаТоваров.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ, "СчетУчета");
		ТаблицаТоваров.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ,       "КорСчетСписания");
	Иначе
		ТаблицаТоваров.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ, "СчетУчета");
		ТаблицаТоваров.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ,                      "КорСчетСписания");
	КонецЕсли;
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Документ не может осуществлять переоценку на оптовом складе!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	НТТ = (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	АТТ = (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный);
	
	// Укажем, что надо проверить:
	Если НТТ Тогда
		СтруктураОбязательныхПолей = Новый Структура("СуммаПереоценки");
		Если мРазделятьПоСтавкамНДС Тогда
			СтруктураОбязательныхПолей.Вставить("СтавкаНДСВРознице");
		КонецЕсли;
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ЦенаВРозницеСтарая, ЦенаВРознице");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если Не НТТ Тогда
		// Здесь услуг быть не должно.
		УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;
    
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	НТТ = (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	АТТ = (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный);
		
	Если АТТ Тогда
		УправлениеЗапасамиПартионныйУчет.ВыполнитьПереоценку(ТаблицаПоТоварам);
		
	Иначе
		
		ДатаДока   = Дата;
		ПроводкиБУ = Движения.Хозрасчетный;
		Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			
			Если АТТ Тогда
				СчетУчета   = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
				СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				СуммаПереоценки = СтрокаТаблицы.Количество * (СтрокаТаблицы.ЦенаВРознице - СтрокаТаблицы.ЦенаВРозницеСтарая);
			Иначе
				СчетУчета   = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
				СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				СуммаПереоценки = СтрокаТаблицы.СуммаПереоценки;
			КонецЕсли;
			
			Если СуммаПереоценки <> 0 Тогда
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Переоценка товаров в рознице";
				
				Проводка.СчетДт      = СчетУчета;
				Проводка.СчетКт      = СчетНаценки;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.Склад);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
				Если (НЕ НТТ) ИЛИ (мИспользоватьОборотнуюНоменклатуру) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  СтрокаТаблицы.Номенклатура);
				КонецЕсли;
				Если НЕ НТТ Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  СтрокаТаблицы.Номенклатура);
				КонецЕсли;
				Если НТТ И мРазделятьПоСтавкамНДС Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  СтрокаТаблицы.СтавкаНДСВРознице);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  СтрокаТаблицы.СтавкаНДСВРознице);
				КонецЕсли;
				
				Проводка.Сумма       = СуммаПереоценки;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	
	УчетнаяПолитикаНеЗадана = Ложь;
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
	мРазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
    
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"          , "ВидСклада"                   ,   "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      				, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"	            , "Количество");
	СтруктураПолей.Вставить("ЦенаВРознице"		        , "ЦенаВРознице");
	СтруктураПолей.Вставить("ЦенаВРозницеСтарая"        , "ЦенаВРозницеСтарая");
	СтруктураПолей.Вставить("СтавкаНДСВРознице"         , "СтавкаНДСВРознице");
	СтруктураПолей.Вставить("СуммаПереоценки"	        , "СуммаПереоценки");
    
	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
мРазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);


