////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПоказатьЭлементыФормы()
	
	Записан = Не ЭтоНовый();
	ЭлементыФормы.НомерПачки.АвтоОтметкаНезаполненного = Записан;
	ЭлементыФормы.НомерПачки.ОтметкаНезаполненного = Записан И Не ЗначениеЗаполнено(НомерПачки);
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает видимость реквизитов документа
Процедура УстановитьВидимостьПолейЗаявления()
	ЭтоФормаАДВ3 = (ВидАДВ = Перечисления.ВидыАДВ.АДВ3);
	ЭлементыФормы.ТаблицаДанныеВСвидетельстве.Колонки.ПолВСвидетельстве.Видимость = ЭтоФормаАДВ3;
	ЭлементыФормы.ТаблицаДанныеВСвидетельстве.Колонки.ДатаРожденияВСвидетельстве.Видимость = ЭтоФормаАДВ3;
	ЭлементыФормы.ТаблицаДанныеВСвидетельстве.Колонки.МестоРожденияВСвидетельстве.Видимость = ЭтоФормаАДВ3;
	ЭлементыФормы.РаботникиОрганизации.Колонки.ОтметкаОПредставленииСведений.Видимость = ЭтоФормаАДВ3;
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		Если НЕ ЗначениеЗаполнено(ВидАДВ) тогда
			ВидАДВ = Перечисления.ВидыАДВ.АДВ2;
		КонецЕсли;	
		ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07;
	ИначеЕсли Проведен тогда
		ТолькоПросмотр = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Закрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;	
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ФизЛицо");
	СтруктураКолонок.Вставить("ДатаПодачиСведений");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	УстановитьВидимостьПолейЗаявления();

	//Настройка списка выбора колонки "ОтметкаОПредоствленииСведений"
	СписокВыбораОтметкиОПредставленииСведений = Новый СписокЗначений;
	СписокВыбораОтметкиОПредставленииСведений.Добавить("Представлялись");
	СписокВыбораОтметкиОПредставленииСведений.Добавить("Будут представлены");
	ЭлементыФормы.РаботникиОрганизации.Колонки.ОтметкаОПредставленииСведений.ЭлементУправления.СписокВыбора = СписокВыбораОтметкиОПредставленииСведений;
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,Исполнитель");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.РаботникиОрганизации);
	
	РегламентированнаяОтчетность.ПриОткрытииФормыРегламентированногоОтчетаПФР(ЭтаФорма);
	
	ПоказатьЭлементыФормы();
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	Если Проведен Тогда
	
		ТолькоПросмотр = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Закрыть.КнопкаПоУмолчанию = Истина;
	
	КонецЕсли;
	
	ПоказатьЭлементыФормы();
КонецПроцедуры

// Процедура - обработчик пришедшего оповещения
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанаКИ" И ТипЗнч(Параметр) = Тип("Структура") И (Источник = ЭтаФорма) Тогда
		
		Данные = "";
		Если Параметр.Свойство("Данные", Данные) Тогда
			
			СтрокаТЧ = Неопределено;
			ИмяАдреса = "";
			Если Данные.Свойство("СтрокаТЧ", СтрокаТЧ) и Данные.Свойство("ИмяАдреса", ИмяАдреса) Тогда
				
				Если (ТипЗнч(СтрокаТЧ) = Тип("ДокументТабличнаяЧастьСтрока.ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.РаботникиОрганизации"))
					И РаботникиОрганизации.Индекс(СтрокаТЧ) <> -1 Тогда
					
					СтруктураАдресаПФР = Новый Структура;
					СтруктураАдресаПФР.Вставить("Страна","");
					СтруктураАдресаПФР.Вставить("Индекс",СокрЛП(Данные.Поле1));
					СтруктураАдресаПФР.Вставить("Регион",СокрЛП(Данные.Поле2));
					СтруктураАдресаПФР.Вставить("Район",СокрЛП(Данные.Поле3));
					СтруктураАдресаПФР.Вставить("Город",СокрЛП(Данные.Поле4));
					СтруктураАдресаПФР.Вставить("НаселенныйПункт",СокрЛП(Данные.Поле5));
					СтруктураАдресаПФР.Вставить("Улица",СокрЛП(Данные.Поле6));
					СтруктураАдресаПФР.Вставить("Дом",СокрЛП(Данные.Поле7));
					СтруктураАдресаПФР.Вставить("Корпус",СокрЛП(Данные.Поле8));
					СтруктураАдресаПФР.Вставить("Квартира",СокрЛП(Данные.Поле9));
					
					СтрокаТЧ[ИмяАдреса] = РегламентированнаяОтчетность.СобратьАдрес(СтруктураАдресаПФР);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если КонтекстЭДО <> Неопределено Тогда
		КонтекстЭДО.ОбработкаОповещенияФормыРегламентированногоОтчетаПФР(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// формирует файл по правилам ПФР (формат 4.00)
//
Процедура ОсновныеДействияФормыФайл(Кнопка)
	ПроцедурыПерсонифицированногоУчета.ПоказатьФайлДокумента(ЭтотОбъект,"Файл-пачка форм "+ВидАДВ);
КонецПроцедуры

// Запускает тестирование файла программой проверки
//
Процедура ОсновныеДействияФормыПроверитьВCheckXML(Кнопка)
	ПроцедурыПерсонифицированногоУчета.ПроверитьФайлВCheckXML(ДокументОбъект, ЭтаФорма);
КонецПроцедуры

// Запускает тестирование файла программой проверки
//
Процедура ОсновныеДействияФормыПроверитьВCheckUFA(Кнопка)
	ПроцедурыПерсонифицированногоУчета.ПроверитьФайлВCheckUFA(ДокументОбъект, ЭтаФорма);
КонецПроцедуры

// копирует файл-пачку в указанное пользователем место
Процедура ОсновныеДействияФормыНаДискетку(Кнопка)
	
	Вопрос = "Перед формированием файла необходимо записать документ. Записать?";
	Если НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ЭтотОбъект,Вопрос) тогда
		Возврат;
	КонецЕсли;

	Если ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
		КодировкаФайла = КодировкаТекста.OEM;
	ИначеЕсли ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда
		КодировкаФайла = КодировкаТекста.ANSI;
	КонецЕсли;
    ПроцедурыПерсонифицированногоУчета.ЗаписатьФайлДокументаНаДискету(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"), ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(Ссылка, Год(Дата)), КодировкаФайла);
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура вызывается принажатии кнопки в подменю "Советы" командной панели
// формы.
//
Процедура ДействияФормыОткрытьСоветы(Кнопка)
	
	РаботаСДиалогами.ОткрытьСоветы(Кнопка);
	
КонецПроцедуры //ДействияФормыОткрытьСоветы()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельРаботникиОрганизации"

// выполняет заполнение реквизитов табличного поля "ТаблицаИзменившиесяДанные"
//
Процедура КоманднаяПанельРаботникиОрганизацииЗаполнитьЗаявления(Кнопка)
	
	ТекстВопроса = "Перед заполнением необходимо записать документ. Записать?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, ТекстВопроса) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьДанныеЗаявлений();
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, мГоловнаяОрганизация );
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	Если Год(мТекущаяДатаДокумента) <> Год(Дата) Тогда
		НомерПачки = "";
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	НомерПачки = "";
	
	РегламентированнаяОтчетность.ПриИзмененииОрганизацииВРегламентированномОтчетеПФР(ЭтаФорма);
	
КонецПроцедуры // ОрганизацияПриИзменении()

//Процедура - обработчик изменения значения реквизита "ВидАДВ"
Процедура АДВ2ПриИзменении(Элемент)
	УстановитьВидимостьПолейЗаявления();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Физлицо = ВыбранноеЗначение.ФизЛицо;
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("ФизЛицо", ФизЛицо)).Количество() = 0 Тогда
		СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
		СтрокаТабличнойЧасти.Физлицо = Физлицо;
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииОбработкаВыбора()

Процедура ТаблицаИзменившиесяДанныеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	СтруктураЗаписи = Новый Структура;
	СтруктураАдрес = РегламентированнаяОтчетность.РазложитьАдрес(ДанныеСтроки.АдресРегистрации);	
	
	СтруктураЗаписи.Вставить("Поле1", СтруктураАдрес.Индекс);
	СтруктураЗаписи.Вставить("Поле2", СтруктураАдрес.Регион);
	СтруктураЗаписи.Вставить("Поле3", СтруктураАдрес.Район);
	СтруктураЗаписи.Вставить("Поле4", СтруктураАдрес.Город);
	СтруктураЗаписи.Вставить("Поле5", СтруктураАдрес.НаселенныйПункт);
	СтруктураЗаписи.Вставить("Поле6", СтруктураАдрес.Улица);
	СтруктураЗаписи.Вставить("Поле7", СтруктураАдрес.Дом);
	СтруктураЗаписи.Вставить("Поле8", СтруктураАдрес.Корпус);
	СтруктураЗаписи.Вставить("Поле9", СтруктураАдрес.Квартира);
	СтруктураЗаписи.Вставить("Поле10", "");
	
	ОформлениеСтроки.Ячейки.АдресРегистрации.УстановитьТекст(УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(СтруктураЗаписи));
	
	СтруктураЗаписи = Новый Структура;
	СтруктураАдрес = РегламентированнаяОтчетность.РазложитьАдрес(ДанныеСтроки.АдресФактический);
	
	СтруктураЗаписи.Вставить("Поле1", СтруктураАдрес.Индекс);
	СтруктураЗаписи.Вставить("Поле2", СтруктураАдрес.Регион);
	СтруктураЗаписи.Вставить("Поле3", СтруктураАдрес.Район);
	СтруктураЗаписи.Вставить("Поле4", СтруктураАдрес.Город);
	СтруктураЗаписи.Вставить("Поле5", СтруктураАдрес.НаселенныйПункт);
	СтруктураЗаписи.Вставить("Поле6", СтруктураАдрес.Улица);
	СтруктураЗаписи.Вставить("Поле7", СтруктураАдрес.Дом);
	СтруктураЗаписи.Вставить("Поле8", СтруктураАдрес.Корпус);
	СтруктураЗаписи.Вставить("Поле9", СтруктураАдрес.Квартира);
	СтруктураЗаписи.Вставить("Поле10", "");		
	
	ОформлениеСтроки.Ячейки.АдресФактический.УстановитьТекст(УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(СтруктураЗаписи));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ РаботникиОрганизации

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина,  Дата, мГоловнаяОрганизация, 0, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура РаботникиОрганизацииФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
		
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Организация, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Элемент.Значение, Организация, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ТаблицаДанныеВСвидетельстве

// Процедура - обработчик события "НачалоВыбора" поля ввода места рождения, указанного в свидетельстве
// физического лица - вызывает соответствующую форму ввода
Процедура ТаблицаДанныеВСвидетельствеМестоРожденияВСвидетельствеНачалоВыбора(Элемент, СтандартнаяОбработка)
	ФормаВводаМестаРождения = ПолучитьОбщуюФорму("ФормаВводаМестаРождения", Элемент,	"ФормаВводаМестаРожденияВСвидетельствеПоСтроке"+ЭлементыФормы.ТаблицаДанныеВСвидетельстве.ТекущаяСтрока.НомерСтроки);
	ФормаВводаМестаРождения.МестоРожденияСтрокой	=	Элемент.Значение;
	ФормаВводаМестаРождения.ЗаголовокФормы	=	"Место рождения, указанное в свидетельстве";
	ФормаВводаМестаРождения.ОткрытьМодально();
	Элемент.Значение = ФормаВводаМестаРождения.МестоРожденияСтрокой;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ТаблицаИзменившиесяДанные

// Процедура - обработчик события "НачалоВыбора" поля ввода места рождения в ТаблицаИзменившиесяДанные 
Процедура ТаблицаИзменившиесяДанныеМестоРожденияНачалоВыбора(Элемент, СтандартнаяОбработка)
	ФормаВводаМестаРождения = ПолучитьОбщуюФорму("ФормаВводаМестаРождения", Элемент,	"ФормаВводаМестаРожденияПоСтроке"+ЭлементыФормы.ТаблицаИзменившиесяДанные.ТекущаяСтрока.НомерСтроки);
	ФормаВводаМестаРождения.МестоРожденияСтрокой	=	Элемент.Значение;
	ФормаВводаМестаРождения.ЗаголовокФормы	=	"Действительное место рождения";
	ФормаВводаМестаРождения.ОткрытьМодально();
	Элемент.Значение = ФормаВводаМестаРождения.МестоРожденияСтрокой;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода адреса регистрации 
Процедура ТаблицаИзменившиесяДанныеАдресРегистрацииНачалоВыбора(Элемент, СтандартнаяОбработка)

	УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(Элемент, ЭтаФорма, "ФормаРедактированияАдресаРегистрацииПоСтроке"+ЭлементыФормы.ТаблицаИзменившиесяДанные.ТекущаяСтрока.НомерСтроки);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода фактического адреса
Процедура ТаблицаИзменившиесяДанныеАдресФактическийНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(Элемент, ЭтаФорма, "ФормаРедактированияФактическогоАдресаПоСтроке"+ЭлементыФормы.ТаблицаИзменившиесяДанные.ТекущаяСтрока.НомерСтроки);
	
КонецПроцедуры

Процедура ТаблицаИзменившиесяДанныеГражданствоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Форма = ПолучитьОбщуюФорму("ФормаВводаГражданстваФизлица", Элемент, "ФормаВводаГражданстваФизлица"+ЭлементыФормы.ТаблицаИзменившиесяДанные.ТекущаяСтрока.НомерСтроки);
	Форма.Страна = Элемент.Значение;
	Форма.Открыть();
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ЗАЩИЩЕННОГО ДОКУМЕНТООБОРОТА С ПФР

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчетеПФР(ЭтаФорма, Кнопка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
