// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;
Перем мТекущаяОрганизацияДокумента;

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
    УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Организация.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Организация.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Предупреждение("Выбранная организация не является физическим лицом");
		Организация = мТекущаяОрганизацияДокумента;
		Возврат;
	КонецЕсли;
	
	Если НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда

		Предупреждение("Выбранная организация применяет упрощенную систему налогообложения");

		Организация = мТекущаяОрганизацияДокумента;

	Иначе
		Если Не ПустаяСтрока(Номер) Тогда
			МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		КонецЕсли;
		УстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)

	мТекущаяОрганизацияДокумента = Организация;

КонецПроцедуры

Процедура УстановитьВидимость()
	
	УчетнаяПолитикаНеЗадана = Ложь;
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	Если УчетнаяПолитикаНеЗадана Тогда
		мВестиУчетПоВидамДеятельностиПредпринимателя = Ложь;
		
		ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.ПустаяСсылка();
		ОсновнаяНоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();			
	Иначе
		мВестиУчетПоВидамДеятельностиПредпринимателя = УчетнаяПолитикаНУ.ВестиУчетПоВидамДеятельности;
		
		ОсновнойХарактерДеятельности = УчетнаяПолитикаНУ.ОсновнойХарактерДеятельности;
		ОсновнаяНоменклатурнаяГруппа = УчетнаяПолитикаНУ.ОсновнаяНоменклатурнаяГруппа;

	КонецЕсли;
	
	ЭлементыФормы.Таблица1.Колонки.ХарактерДеятельности.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	ЭлементыФормы.Таблица1.Колонки.НоменклатурнаяГруппа.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	
	ЭлементыФормы.Таблица12.Колонки.ХарактерДеятельности.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	ЭлементыФормы.Таблица12.Колонки.НоменклатурнаяГруппа.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	
	ЭлементыФормы.Таблица15.Колонки.ХарактерДеятельности.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	ЭлементыФормы.Таблица15.Колонки.НоменклатурнаяГруппа.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	
	ЭлементыФормы.Таблица2.Колонки.ХарактерДеятельности.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	ЭлементыФормы.Таблица2.Колонки.НоменклатурнаяГруппа.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	
	ЭлементыФормы.Таблица4.Колонки.ХарактерДеятельности.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	ЭлементыФормы.Таблица4.Колонки.НоменклатурнаяГруппа.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	
	ЭлементыФормы.Таблица5.Колонки.ХарактерДеятельности.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	ЭлементыФормы.Таблица5.Колонки.НоменклатурнаяГруппа.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	
	ЭлементыФормы.Таблица6.Колонки.ХарактерДеятельности.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	ЭлементыФормы.Таблица6.Колонки.НоменклатурнаяГруппа.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	
	ЭлементыФормы.Таблица63.Колонки.ХарактерДеятельности.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	ЭлементыФормы.Таблица63.Колонки.НоменклатурнаяГруппа.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	
	ЭлементыФормы.Таблица61.Колонки.ХарактерДеятельности.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	ЭлементыФормы.Таблица61.Колонки.НоменклатурнаяГруппа.Видимость = мВестиУчетПоВидамДеятельностиПредпринимателя;
	
	Если НЕ ДоходыИРасходыПредпринимателя.ПризнаватьДоходыИРасходыПоОперациямПрошлогоГода(Организация, Дата) Тогда		
		Если ЭлементыФормы.КоманднаяПанельДоходы.Кнопки.Найти("ЗаполнитьПоАвансам") = Неопределено Тогда
			Если Месяц(Дата) = 12 Тогда
				ЭлементыФормы.КоманднаяПанельДоходы.Кнопки.Добавить("РазделительЗаполнитьПоАвансам", ТипКнопкиКоманднойПанели.Разделитель);
				ЭлементыФормы.КоманднаяПанельДоходы.Кнопки.Добавить("ЗаполнитьПоАвансам", ТипКнопкиКоманднойПанели.Действие, "Заполнить по авансам",Новый Действие("ЗаполнитьПоАвансам"));				
			КонецЕсли;
		Иначе
			Если Месяц(Дата) <> 12 Тогда
				ЭлементыФормы.КоманднаяПанельДоходы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельДоходы.Кнопки.ЗаполнитьПоАвансам);
				ЭлементыФормы.КоманднаяПанельДоходы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельДоходы.Кнопки.РазделительЗаполнитьПоАвансам);			
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЭлементыФормы.КоманднаяПанельДоходы.Кнопки.Найти("ЗаполнитьПоАвансам") <> Неопределено Тогда
			ЭлементыФормы.КоманднаяПанельДоходы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельДоходы.Кнопки.ЗаполнитьПоАвансам);
			ЭлементыФормы.КоманднаяПанельДоходы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельДоходы.Кнопки.РазделительЗаполнитьПоАвансам);			
		 КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////
//Обработчики основных действий документа


Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), ,);
		Если НЕ Организация.Пустая() Тогда
			Если Организация.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо 
				ИЛИ (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
				И НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)) Тогда
				Организация = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		мТекущаяОрганизацияДокумента = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата;
	
	// Поддержка механизма автонумерации
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = Ложь;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента( , ЭтотОбъект, ЭтаФорма);
	
	УстановитьВидимость();
	
	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Раздел1",	"Таблица1");
	Страницы.Добавить("Раздел2",	"Таблица15");
	Страницы.Добавить("Раздел3",	"Таблица12");
	Страницы.Добавить("Раздел4",	"Таблица2");
	Страницы.Добавить("Раздел5",	"Таблица4");
	Страницы.Добавить("Раздел6",	"Таблица5");	
	Страницы.Добавить("Раздел7",	"Таблица6");
	Страницы.Добавить("Раздел8",	"Таблица63");
	Страницы.Добавить("Раздел9",	"Таблица61");

	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ПанельТаблиц, Страницы,);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,,ЭлементыФормы.ПанельТаблиц.ТекущаяСтраница,Страницы);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
Процедура ПриЗакрытии()
				
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента( , ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры


Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)
	
	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////
//Обработчики табличных частей документа

//Обработчики событий Таблицы раздела 1
//
Процедура ТаблицаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ТаблицаДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если Элемент.Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДокумента = Элемент.Значение.Метаданные().Имя;
	СтандартнаяОбработка = Ложь;
	
	Если ИмяДокумента = "ДокументРасчетовСКонтрагентом" Тогда
		
		СтруктураПараметров   = Новый Структура("Организация, КонецПериода, НачалоПериода, Контрагент, ДоговорКонтрагента, СчетДляОпределенияОстатков, СторонаСчета", Организация, КонецДня(Дата), '00010101',,,,);
		УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Элемент.ТипЗначения);
		
	ИначеЕсли ИмяДокумента = "Партия" Тогда
		
		ФормаВыбора = Документы.Партия.ПолучитьФорму("ФормаВыбора",Элемент);
		ФормаВыбора.Организация        = Организация;
		ФормаВыбора.КонПериода         = КонецДня(Дата);
		ФормаВыбора.мПереданИнтервал = Истина;
		ФормаВыбора.Открыть();
		
	Иначе
		
		ФормаВыбора = Документы[ИмяДокумента].ПолучитьФормуВыбора(, Элемент,);
		
		ФормаВыбора.Отбор["Организация"].Значение      = Организация;
		ФормаВыбора.Отбор["Организация"].Использование = Истина;
		
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Заполнение документа по авансам
Процедура ЗаполнитьПоАвансам(Кнопка)
	
	Если Таблица61.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Таблица61.Очистить();
		
	КонецЕсли;
	
	НаименованиеСтатьиДоходовПоАвансам = "Доходы по авансам полученным от покупателей в прошлом налоговом периоде (по умолчанию)";
	СтатьяДоходовПоАвансам = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию(НаименованиеСтатьиДоходовПоАвансам);
	Если СтатьяДоходовПоАвансам = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка() Тогда
		СтатьяДоходовПоАвансам = Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		СтатьяДоходовПоАвансам.Наименование = НаименованиеСтатьиДоходовПоАвансам;
		СтатьяДоходовПоАвансам.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
		СтатьяДоходовПоАвансам.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД;
		СтатьяДоходовПоАвансам.ПринятиеКналоговомуУчету = Истина;
		СтатьяДоходовПоАвансам.Записать();
	КонецЕсли;
	
	ЗапросПоАвансам = Новый Запрос();
	ЗапросПоАвансам.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК ДокументОплаты,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаАванса
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Счет В (&СписокСчетов), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт > 0
	|	И ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт = 0";
	
	СписокСчетов = Новый СписокЗначений();
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);
	
	ЗапросПоАвансам.УстановитьПараметр("ДатаНачала", НачалоГода(Дата));
	ЗапросПоАвансам.УстановитьПараметр("ДатаОкончания", КонецГода(Дата));
	ЗапросПоАвансам.УстановитьПараметр("Организация", Организация);
	ЗапросПоАвансам.УстановитьПараметр("СписокСчетов", СписокСчетов);	
	
	РезультатЗапроса = ЗапросПоАвансам.Выполнить().Выгрузить();
	
	Для Каждого СтрокаЗапроса ИЗ РезультатЗапроса Цикл
			СтрокаДохода = Таблица61.Добавить();
			СтрокаДохода.СтатьяДоходов = СтатьяДоходовПоАвансам;
			СтрокаДохода.Сумма = СтрокаЗапроса.СуммаАванса;
			СтрокаДохода.ХарактерДеятельности = ОсновнойХарактерДеятельности;
			СтрокаДохода.НоменклатурнаяГруппа = ОсновнаяНоменклатурнаяГруппа;
			Если ЗначениеЗаполнено(СтрокаЗапроса.ДокументОплаты) Тогда
				СтрокаДохода.РеквизитыДокументаОплаты = ДоходыИРасходыПредпринимателя.РеквизитыДокументаОплаты(СтрокаЗапроса.ДокументОплаты);		
			Иначе
				СтрокаДохода.РеквизитыДокументаОплаты = "";
			КонецЕсли;
	КонецЦикла;  	
	
КонецПроцедуры





