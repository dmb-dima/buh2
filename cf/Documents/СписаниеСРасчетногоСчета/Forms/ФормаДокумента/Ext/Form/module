////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;
//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

Перем мСчет;

Перем СтараяВалютаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мМассивПлатежныхВедомостей;

//Используется для определения необходимости открытия настроек движения после сохранения
Перем ОткрыватьНастройкуДвижений;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИНФОРМАЦИИ О ПЛАТЕЖНОМ ПОРУЧЕНИИ

Процедура ЗаполнитьТекстПлатежноеПоручение()
	
	ПлатежноеПоручение = НайтиДокументПлатежноеПоручение(Ссылка);
	ЭлементыФормы.ГиперссылкаПлатежноеПоручение.Заголовок = ПолучитьТекстПлатежноеПоручение(ПлатежноеПоручение,	ЭтотОбъект, ЭлементыФормы.ГиперссылкаПлатежноеПоручение.ГиперСсылка);
																								
КонецПроцедуры

Функция ПолучитьТекстПлатежноеПоручение(ДокументСписания, ДокументОснование = Неопределено, Гиперссылка = Истина, ДопИнформация = "")

	Если ЗначениеЗаполнено(ДокументСписания) Тогда
		Гиперссылка = Истина;
		СтрокаДокумент = ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументСписания);
		СтрокаДокумент = "Платежное поручение № "+ СтрокаДокумент +" от "+ Формат(ДокументСписания.Дата,"ДФ=dd.MM.yyyy") + " г.";
		//ИнформационнаяСтрока = СтрокаДокумент + " " + Строка(ДокументСписания.ВидОперации) + ?(ДокументСписания.Проведен, " (Проведен).", " (не проведен).");
		//ДопИнформация = Строка(ДокументСписания.ВидОперации) + ", счет расчетов: " + ?(ДокументСписания.РасшифровкаПлатежа.Количество()>0, ДокументСписания.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом, ДокументСписания.СчетУчетаРасчетовСКонтрагентом);
		Возврат СтрокаДокумент;
	Иначе
		Гиперссылка = Истина;
		Возврат "Ввести платежное поручение";
	КонецЕсли;
																								
КонецФункции

Процедура ГиперссылкаПлатежноеПоручениеНажатие(Элемент)
	
	ВвестиПлатежноеПоручение(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ВвестиПлатежноеПоручение(ДокументОбъект, ФормаДокумента)

	ДокументСписания = НайтиДокументПлатежноеПоручение(Ссылка);

	Если (ДокументОбъект.ПометкаУдаления) И Не ЗначениеЗаполнено(ДокументСписания) Тогда
		Предупреждение("Нельзя вводить оплату по документу, помеченного на удаление");
		Возврат;
	КонецЕсли;

	ОбъектДокументСписания = Неопределено;

	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если (НЕ ЗначениеЗаполнено(ДокументСписания)) Тогда
		//Вводим новый документ на основании нашего
		Если ДокументОбъект.Модифицированность() Тогда
			ДокументОбъект.Записать();
		КонецЕсли;

		ОбъектДокументСписания = Документы.ПлатежноеПоручение.ПолучитьФормуНовогоДокумента(, ФормаДокумента , Строка(ДокументОбъект));
		ОбъектДокументСписания.Заполнить(ДокументОбъект.Ссылка); 
		ОбъектДокументСписания.ДокументОснование = ДокументОбъект.Ссылка;
		ОбъектДокументСписания.Открыть();

	Иначе
		// Откроем форму для редактирования оплаты
		Если (ФормаДокумента.ВладелецФормы <> Неопределено) И Строка(ФормаДокумента.КлючУникальности) = Строка(ДокументСписания) Тогда
			ФормаДокумента.ВладелецФормы.Открыть();
		Иначе
			ДокументСписания.ПолучитьФорму(, ФормаДокумента , Строка(ДокументОбъект)).Открыть();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВвестиСчетФактуру()

Процедура ПодтвержденоВыпискойПриИзменении(Элемент)
	
	НеПодтвержденоВыпискойБанка = Не ЭлементыФормы.ПодтвержденоВыпискойБанка.Значение;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Если НЕ НеПодтвержденоВыпискойБанка Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписи = ?(Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Попытка
		ЗаписатьВФорме(РежимЗаписи);
		Если НЕ Модифицированность Тогда
			Закрыть();
		КонецЕсли;
	Исключение
		Предупреждение("Операция не выполнена!");
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасшифровкаПлатежа,ЭлементыФормы.КоманднаяПанельПлатежи);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПеречислениеЗаработнойПлаты,ЭлементыФормы.КоманднаяПанельПеречислениеЗП);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьСубконто(Постфикс = "")

	Для Ном = 1 по 3 Цикл

		Если ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом)
			И (Ном <= СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество()) Тогда
			ЭлементыФормы["НадписьСубконтоДт"+Ном+Постфикс].Заголовок = 
				Строка(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном-1].ВидСубконто);
			ЭлементыФормы["НадписьСубконтоДт"+Ном+Постфикс].Видимость = Истина;
			ЭлементыФормы["СубконтоДт"+Ном+Постфикс].Видимость        = Истина;
		Иначе
			ЭлементыФормы["НадписьСубконтоДт"+Ном+Постфикс].Видимость = Ложь;
			ЭлементыФормы["СубконтоДт"+Ном+Постфикс].Видимость        = Ложь;
		КонецЕсли;

	КонецЦикла;

	ЭлементыФормы["НадписьПодразделениеДт" + Постфикс].Видимость = СчетУчетаРасчетовСКонтрагентом.УчетПоПодразделениям;
	ЭлементыФормы["ПодразделениеДт" + Постфикс].Видимость        = СчетУчетаРасчетовСКонтрагентом.УчетПоПодразделениям;
	
КонецПроцедуры

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()

	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = Неопределено Тогда

		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж;

	КонецЕсли;

КонецПроцедуры // УстановитьФокус()

// Процедура устанавливает видимость закладок. 
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	Перем Элемент1, Граница1, Элемент2, Граница2, Элемент3, Граница3, Элемент4, Граница4;
	// Видимость реквизитов шапки
	
	ЭлементыФормы.ПодтвержденоВыпискойБанка.Значение = Не НеПодтвержденоВыпискойБанка;
	
	НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата);

	ЭлементыФормы.НадписьВалютаДокумент.Видимость = СчетБанк.Валютный;
	ЭлементыФормы.НадписьВалютаДокумент.Заголовок = Строка(ВалютаДокумента);

	// Видимость реквизитов расшифровки платежа
	
	ЭлементыФормы.ПанельПлатежи.ПолучитьПривязку(ГраницаЭлементаУправления.Низ, Элемент1, Граница1, Элемент2, Граница2);
	ЭлементыФормы.ПанельПлатежи.ПолучитьПривязку(ГраницаЭлементаУправления.Право, Элемент3, Граница3, Элемент4, Граница4);
	
	КолонкиРасшифровкиПлатежа = ЭлементыФормы.РасшифровкаПлатежа.Колонки;
	
	Если ЕстьРасчетыСКонтрагентами Тогда

		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
			
			РаботаСДиалогами.УстановитьТекущуюСтраницу("ПрочиеРасчеты", ЭлементыФормы.ПанельПлатежи);
			
			ЭлементыФормы.СтатьяДвиженияДенежныхСредствПрочиеРасчеты.Видимость = ЕстьУчетПоСтатьямДДС;
			ЭлементыФормы.НадписьСтатьяДДСПрочиеРасчеты.Видимость 	  		    = ЕстьУчетПоСтатьямДДС;
			
			ЭлементыФормы.СписокПлатежей.Доступность = Ложь;			
			
		Иначе
			
			Если СписокПлатежей Тогда
				РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
				
		//		ЭлементыФормы.ПанельПлатежи.Высота = 1000;
		//
				//ЭлементыФормы.ПанельПлатежи.ПолучитьПривязку(ГраницаЭлементаУправления.Низ, Элемент1, Граница1, Элемент2, Граница2);
				//ЭлементыФормы.ПанельПлатежи.УстановитьПривязку(ГраницаЭлементаУправления.Низ, , , ,);
				//ЭлементыФормы.ПанельПлатежи.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Элемент1, Граница1, Элемент2, Граница2);
		
				//ЭлементыФормы.РасшифровкаПлатежа.ПолучитьПривязку(ГраницаЭлементаУправления.Низ, Элемент1, Граница1, Элемент2, Граница2);
				//ЭлементыФормы.РасшифровкаПлатежа.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
				//ЭлементыФормы.РасшифровкаПлатежа.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Элемент1, Граница1, Элемент2, Граница2);
		
			Иначе
				РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
			КонецЕсли;

			ЭтоРасчетыВ_УЕ = ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) 
				И СтрокаПлатеж.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
   		
			ЭлементыФормы.НадписьКурсВзаиморасчетов.Видимость = ЭтоРасчетыВ_УЕ;
			ЭлементыФормы.КурсВзаиморасчетов.Видимость        = ЭтоРасчетыВ_УЕ;
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Видимость = ЭтоРасчетыВ_УЕ;
			ЭлементыФормы.СуммаВзаиморасчетов.Видимость        = ЭтоРасчетыВ_УЕ;
				
			ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Видимость             = ПоказыватьВДокументахСчетаУчета;
			ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентом.Видимость      = ПоказыватьВДокументахСчетаУчета;
			КолонкиРасшифровкиПлатежа.СчетУчетаРасчетовСКонтрагентом.Видимость = ПоказыватьВДокументахСчетаУчета;
			
			ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Видимость             = ПоказыватьВДокументахСчетаУчета;
			ЭлементыФормы.НадписьСчетУчетаРасчетовПоАвансам.Видимость      = ПоказыватьВДокументахСчетаУчета;
			КолонкиРасшифровкиПлатежа.СчетУчетаРасчетовПоАвансам.Видимость = ПоказыватьВДокументахСчетаУчета;
			
			ЭлементыФормы.СтатьяДвиженияДенежныхСредств.Видимость             = ЕстьУчетПоСтатьямДДС;
			ЭлементыФормы.НадписьСтатьяДДС.Видимость 	  		              = ЕстьУчетПоСтатьямДДС;
			КолонкиРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств.Видимость = ЕстьУчетПоСтатьямДДС;

			// Распределение оплаты
			
			ЭтоОплатаПоДокументу = (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
			ЭлементыФормы.Сделка.Видимость                  = ЭтоОплатаПоДокументу;
			ЭлементыФормы.НадписьСделка.Видимость           = ЭтоОплатаПоДокументу;
			КолонкиРасшифровкиПлатежа.Сделка.ТолькоПросмотр = НЕ ЭтоОплатаПоДокументу;
			
			ЭтоАванс = (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
			ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Доступность                = НЕ ЭтоАванс;
			ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентом.Доступность         = НЕ ЭтоАванс;
			КолонкиРасшифровкиПлатежа.СчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр = ЭтоАванс;
			
			ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.АвтоОтметкаНезаполненного = НЕ ЭтоАванс;
			Если ЭтоАванс Тогда
				ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.ОтметкаНезаполненного = Ложь;
			КонецЕсли;
			
			ЭлементыФормы.СписокПлатежей.Доступность = Истина;
					
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.СтатьяДвиженияДенежныхСредствПрочие.Видимость = ЕстьУчетПоСтатьямДДС;
		ЭлементыФормы.НадписьСтатьяДДСПрочие.Видимость 	  		    = ЕстьУчетПоСтатьямДДС;
	
		ЭлементыФормы.СписокПлатежей.Доступность = Ложь;
		
		УстановитьВидимостьСубконто();
				
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);

		ЭлементыФормы.СтатьяДвиженияДенежныхСредствПрочие.Видимость = ЕстьУчетПоСтатьямДДС;
		ЭлементыФормы.НадписьСтатьяДДСПрочие.Видимость 	  		    = ЕстьУчетПоСтатьямДДС;
	
		ЭлементыФормы.СписокПлатежей.Доступность = Ложь;
		
		УстановитьВидимостьСубконто();
				
	ИначеЕсли ЕстьРасчетыПоКредитам Тогда

		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПрочиеРасчеты", ЭлементыФормы.ПанельПлатежи);

		ЭлементыФормы.СтатьяДвиженияДенежныхСредствПрочиеРасчеты.Видимость = ЕстьУчетПоСтатьямДДС;
		ЭлементыФормы.НадписьСтатьяДДСПрочиеРасчеты.Видимость 	  		    = ЕстьУчетПоСтатьямДДС;
			
		ЭлементыФормы.СписокПлатежей.Доступность = Ложь;
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПереводНаДругойСчет", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.СтатьяДвиженияДенежныхСредствПеревод.Видимость = ЕстьУчетПоСтатьямДДС;
		ЭлементыФормы.НадписьСтатьяДДСПеревод.Видимость              = ЕстьУчетПоСтатьямДДС;
	
		ЭлементыФормы.СписокПлатежей.Доступность = Ложь;
				
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		
		ЭлементыФормы.ПанельПлатежи.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПеречислениеЗП", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.ПанельПлатежи.Страницы.ЗадержкаЗарплаты.Видимость = Истина;
		
		ЭлементыФормы.ПеречислениеЗаработнойПлаты.Колонки.СтатьяДвиженияДенежныхСредств.Видимость = ЕстьУчетПоСтатьямДДС;
		
		УстановитьВидимостьСубконто("ЗадержкаЗарплаты");
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПеречислениеПодотчетномуЛицу", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.СтатьяДвиженияДенежныхСредствПодотчет.Видимость = ЕстьУчетПоСтатьямДДС;
		ЭлементыФормы.НадписьСтатьяДДСПодотчет.Видимость 	  		  = ЕстьУчетПоСтатьямДДС;
	
		ЭлементыФормы.СписокПлатежей.Доступность = Ложь;
		
	КонецЕсли;
	
	ЭлементыФормы.СписокПлатежей.Видимость = (ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП);
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		И ЭлементыФормы.ПанельПлатежи.ОтображениеЗакладок <> ОтображениеЗакладок.НеИспользовать Тогда
		
		ЭлементыФормы.ПанельПлатежи.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		И ЭлементыФормы.ПанельПлатежи.ОтображениеЗакладок <> ОтображениеЗакладок.Сверху Тогда
		
		ЭлементыФормы.ПанельПлатежи.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
		
		ЭлементыФормы.ПеречислениеЗаработнойПлаты.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ПеречислениеЗаработнойПлаты.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		
	КонецЕсли;
	
	ЭлементыФормы.Контрагент.АвтоОтметкаНезаполненного = ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам;
	ЭлементыФормы.Контрагент.АвтоВыборНезаполненного   = ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам;
	Если НЕ (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
		ЭлементыФормы.Контрагент.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	ЭтоПереводНаДругойСчет = (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет);
	ЭлементыФормы.СчетКонтрагента.АвтоОтметкаНезаполненного = ЭтоПереводНаДругойСчет;
	ЭлементыФормы.СчетКонтрагента.АвтоВыборНезаполненного   = ЭтоПереводНаДругойСчет;
	Если НЕ ЭтоПереводНаДругойСчет Тогда
		ЭлементыФормы.СчетКонтрагента.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.НадписьПолучатель.Видимость = НЕ ЭтоПереводНаДругойСчет;
	ЭлементыФормы.Контрагент.Видимость        = НЕ ЭтоПереводНаДругойСчет;
	
	ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = НалоговыйУчетУСН.ВидимостьКнопкиКУДиР(ЭтотОбъект);

	ЭлементыФормы.РасшифровкаПлатежа.Ширина = ЭлементыФормы.ПанельПлатежи.Ширина;
	ЭлементыФормы.РасшифровкаПлатежа.Высота = ЭлементыФормы.ПанельПлатежи.Высота;

КонецПроцедуры // УстановитьВидимость()

Процедура ОпределитьСчетаУчетаРасчетовСКонтрагентом()

	Если НЕ (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам) Тогда

		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
			Организация, Контрагент, СтрокаПлатеж.ДоговорКонтрагента);

		ЭтоАванс = (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
		
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю тогда
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = ?(ЭтоАванс, Неопределено, СчетаУчета.СчетРасчетовПокупателя);
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансовПокупателя;
		Иначе
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = ?(ЭтоАванс, Неопределено, СчетаУчета.СчетРасчетов);
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансов;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьКурсИСуммуВзаиморасчетов()
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры // РассчитатьКурсИСуммуВзаиморасчетов()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если Контрагент.Пустая() Тогда
		Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;

	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	РассчитатьКурсИСуммуВзаиморасчетов();
	
	Если (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю) Тогда
		СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	КонецЕсли;
	
	СтрокаПлатеж.Сделка = Неопределено;

	ОпределитьСчетаУчетаРасчетовСКонтрагентом();
	
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()

	ВосстанавливатьРеквизиты = (РасшифровкаПлатежа.Количество() = 1);
	СтараяСтатьяДДС = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
	СтараяСтавкаНДС = СтрокаПлатеж.СтавкаНДС;
	СтараяСуммаНДС  = СтрокаПлатеж.СуммаНДС;
	СтарыйДоговор   = СтрокаПлатеж.ДоговорКонтрагента;
	
	РасшифровкаПлатежа.Очистить();

	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.ДоговорКонтрагента = СтарыйДоговор;
	
	СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(СтрокаПлатеж.ДоговорКонтрагента,Контрагент,Организация,СписокВидовДоговора);		

	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
	
	Если ВосстанавливатьРеквизиты Тогда
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтараяСтатьяДДС;
		СтрокаПлатеж.СтавкаНДС = СтараяСтавкаНДС;
		СтрокаПлатеж.СуммаНДС  = СтараяСуммаНДС;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииКонтрагента

Процедура ПриИзмененииВалютыДокумента()

	Если НЕ ВалютаДокумента = СтараяВалютаДокумента Тогда

		Если ЕстьРасчетыСКонтрагентами и  РасшифровкаПлатежа.Количество()>1 Тогда
			//Для пересчета суммы по таблице расшифровок
			ТекущиеПараметрыДокумента = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента,СуммаДокумента",СтараяВалютаДокумента, КурсДокумента, КратностьДокумента,СуммаДокумента);
		КонецЕсли; 
		
		РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(СтараяВалютаДокумента, КурсДокумента, КратностьДокумента, Дата, СуммаДокумента, ВалютаДокумента);
		СуммаДокументаПриИзменении();
		
		Если ЕстьРасчетыСКонтрагентами и  РасшифровкаПлатежа.Количество()>1 Тогда
			Если не СуммаДокумента = ТекущиеПараметрыДокумента.СуммаДокумента Тогда
			 	//Пересчитана сумма документа.
				//Запомним текущую строку платежа
				ТекущиеПараметрыДокумента.Вставить("ТекущаяСтрока", СтрокаПлатеж);
				
				//Необходимо пересчитать суммы в таблице расшифровок.
				Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
					СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
						ТекущиеПараметрыДокумента.ВалютаДокумента, ВалютаДокумента, 
						ТекущиеПараметрыДокумента.КурсДокумента, КурсДокумента,
						ТекущиеПараметрыДокумента.КратностьДокумента,КратностьДокумента);
					ПересчитатьСуммуНДС(СтрокаПлатеж);
					РассчитатьСуммуВзаиморасчетов();
				КонецЦикла; 
				//Вернем строку платежа в позицию до пересчета
				СтрокаПлатеж = ТекущиеПараметрыДокумента.ТекущаяСтрока;
			КонецЕсли; 
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры // ПриИзмененииВалютыДокумента()

// Процедура выполняет действия, необходимые при выборе счета организации
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаОрганизации()

	Если СчетОрганизации.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Если Организация.Пустая() Тогда
		Организация = СчетОрганизации.Владелец;
	КонецЕсли;

	Если ЕстьРасчетыСКонтрагентами и  РасшифровкаПлатежа.Количество()>1 Тогда
		//Для пересчета суммы по таблице расшифровок
		ТекущиеПараметрыДокумента = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента,СуммаДокумента",ВалютаДокумента, КурсДокумента, КратностьДокумента,СуммаДокумента);
	КонецЕсли; 
	
	РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата, СуммаДокумента, СчетОрганизации.ВалютаДенежныхСредств);
	СтараяВалютаДокумента = ВалютаДокумента;
	СуммаДокументаПриИзменении();
	
	Если ЕстьРасчетыСКонтрагентами и  РасшифровкаПлатежа.Количество()>1 Тогда
		 Если не СуммаДокумента = ТекущиеПараметрыДокумента.СуммаДокумента Тогда
		 	//Пересчитана сумма документа.
			//Запомним текущую строку платежа
			ТекущиеПараметрыДокумента.Вставить("ТекущаяСтрока", СтрокаПлатеж);
			
			//Необходимо пересчитать суммы в таблице расшифровок.
			Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
				СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
					ТекущиеПараметрыДокумента.ВалютаДокумента, ВалютаДокумента, 
					ТекущиеПараметрыДокумента.КурсДокумента, КурсДокумента,
					ТекущиеПараметрыДокумента.КратностьДокумента,КратностьДокумента);
				ПересчитатьСуммуНДС(СтрокаПлатеж);
				РассчитатьСуммуВзаиморасчетов();
			КонецЦикла; 
			//Вернем строку платежа в позицию до пересчета
			 СтрокаПлатеж = ТекущиеПараметрыДокумента.ТекущаяСтрока;
		 
		 КонецЕсли; 
	КонецЕсли; 
	

	Если НЕ СчетКонтрагента.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств Тогда
		Сообщить("Валюта счета контрагента не соответствует валюте счета организации!");
		СчетКонтрагента="";
	КонецЕсли;

	Если (СчетБанк.Валютный И СчетОрганизации.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета)
		ИЛИ (НЕ СчетБанк.Валютный И НЕ СчетОрганизации.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета) Тогда 

		СчетБанк="";

	КонецЕсли; 

	Если НЕ СчетОрганизации.Пустая() Тогда
		ТекстПлательщика = СчетОрганизации.ТекстКорреспондента;
	Иначе
		ТекстПлательщика = "";
	КонецЕсли;
	
	// {ОбособленныеПодразделения
	ПодразделениеОрганизации = СчетОрганизации.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	УстановитьПодразделениеДт();
	
	УстановитьВидимость();


КонецПроцедуры // ПриИзмененииСчетаОрганизации()

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов()

	ПроверкаКурсовВалют(СтрокаПлатеж);

	мТекущаяВалютаВзаиморасчетов     = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
									мТекущаяВалютаВзаиморасчетов,
									КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
									КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Процедура выполняет действия, необходимые при выборе счета контрагента
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаКонтрагента()

	Если СчетКонтрагента.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Если Контрагент.Пустая() Тогда
		Контрагент = СчетКонтрагента.Владелец;
		ПриИзмененииКонтрагента();
	КонецЕсли;

	Если НЕ СчетКонтрагента.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств Тогда
		
		Если ВидОперации=Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
			ТекстСообщения="Несоответствие валют выбранных счетов организации!";
		Иначе
			ТекстСообщения="Валюта счета контрагента не соответствует валюте счета организации!";
		КонецЕсли;
		
		Сообщить(ТекстСообщения);
		СчетКонтрагента = "";
		
		Возврат;
		
	КонецЕсли;

	Если НЕ СчетКонтрагента.Пустая() Тогда
		ТекстПолучателя = СчетКонтрагента.ТекстКорреспондента;
	Иначе
		ТекстПолучателя = "";
	КонецЕсли;


КонецПроцедуры // ПриИзмененииСчетаКонтрагента()

// Процедура выполняет действия, необходимые при выборе организации
//
// Параметры:
//  Нет.
//
Процедура НачальноеЗаполнениеПриВыбореОрганизации()

	Если Организация.Пустая() Тогда

		СчетОрганизации = "";

	КонецЕсли;

КонецПроцедуры // НачальноеЗаполнениеПриВыбореОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	// Заполняем значения экспортных переменных модуля объекта
	ЕстьРасчетыСКонтрагентами    = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	Если ЭтоНовый() Тогда
		
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, ПараметрОбъектКопирования);
		
		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			
			НачальноеЗаполнениеПриВыбореОрганизации();
			
			УстановитьПодразделениеДт();
			
			Если ЭлементыФормы.СчетБанк.СписокВыбора.НайтиПоЗначению(СчетБанк) = Неопределено Тогда
				СчетБанк = ЭлементыФормы.СчетБанк.СписокВыбора[0].Значение;
			КонецЕсли;
			
			Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
				СчетУчетаРасчетовСКонтрагентом = ЭлементыФормы.СчетПеревод.СписокВыбора[0].Значение;
			КонецЕсли;
			
			Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом) Тогда
					ОпределитьСчетаУчетаРасчетовСКонтрагентом();
				КонецЕсли;
				
				Если ((ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику)
					ИЛИ (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю))
					И (НЕ ЗначениеЗаполнено(СтрокаПлатеж.СпособПогашенияЗадолженности)) Тогда
					СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;

	КонецЕсли;
	
	// Заполняем значения экспортных переменных модуля объекта
	ЕстьРасчетыПоКредитам        = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	УстановитьКурсДокумента();
	
	//Проверяем источник кадровой информации
	ПроверятьСоответствиеСуммыДокументаИВедомости = Истина;
	Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() Тогда
		БУ = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		Если БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") = Неопределено Тогда
			ПроверятьСоответствиеСуммыДокументаИВедомости = Ложь;
		КонецЕсли;
	КонецЕсли;

	// Поддержка механизма автонумерации
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
          
	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели формы
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
		ВидОперации.Метаданные().ЗначенияПеречисления, Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СтараяВалютаДокумента        = ВалютаДокумента;
	
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	//Установка меню Клиент-Банк
	РаботаСДиалогами.УстановкаПодменюКлиентБанк(ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Подменю1.Кнопки.КлиентБанк, ЭтотОбъект);
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;

	// Показ расшифровки платежа списком
	СписокПлатежей = (РасшифровкаПлатежа.Количество() > 1);

	УстановитьВидимость();
	
    // Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	// Установим активный реквизит.
	УстановитьАктивныйРеквизит();

	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
	
	ПлатежноеПоручениеОснование = ДокументОснование;

	ЗаполнитьТекстПлатежноеПоручение();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	ИначеЕсли ИмяСобытия = "ОбновитьФорму" 
		И ТипЗнч(Источник) = Тип("ДокументОбъект.ПлатежноеПоручение") Тогда
		ЗаполнитьТекстПлатежноеПоручение();
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает активный реквизит
Процедура УстановитьАктивныйРеквизит()
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,СчетОрганизации,ПодразделениеОрганизации,
		|НомерВходящегоДокумента,ДатаВходящегоДокумента,Контрагент,СуммаДокумента");
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		СтруктураРеквизитов.Вставить("СчетПеревод");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		СтруктураРеквизитов.Вставить("СчетУчета");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда
		СтруктураРеквизитов.Вставить("ПодотчетноеЛицо");
	Иначе
		Если НЕ СписокПлатежей Тогда
			СтруктураРеквизитов.Вставить("ДоговорКонтрагента");
			СтруктураРеквизитов.Вставить("СпособПогашенияЗадолженности");
			СтруктураРеквизитов.Вставить("СуммаВзаиморасчетов");
			СтруктураРеквизитов.Вставить("СчетУчетаРасчетовСКонтрагентом");
			СтруктураРеквизитов.Вставить("СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
	КонецЕсли;
	Если СписокПлатежей Тогда
		РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.РасшифровкаПлатежа);
	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
			РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов, ЭлементыФормы.ПеречислениеЗаработнойПлаты);		
		Иначе
			РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов);		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ЭтоРасчетыПоЗарплате = ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
		
	Если ЭтоРасчетыПоЗарплате Тогда
		
		Если ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
			Если НЕ ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа") = СуммаДокумента Тогда
				Предупреждение("Не совпадают сумма документа и общая сумма платежа по платежным ведомостям.");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа") = СуммаДокумента Тогда
			Предупреждение("Не совпадают сумма документа и ее расшифровка.");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ И НеПодтвержденоВыпискойБанка И (РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И Проведен)) Тогда
		
		ТекстВопроса = "Проведение документа возможно только после установки флага ""Подтверждено выпиской банка"". 
			|Записать документ без проведения?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			РежимЗаписи = ?(Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоРасчетыПоЗарплате Тогда
		
		мМассивПлатежныхВедомостей = Новый Соответствие;
		Если Проведен Тогда
			Для каждого СтрокаТЧ Из Ссылка.ПеречислениеЗаработнойПлаты Цикл
				мМассивПлатежныхВедомостей.Вставить(СтрокаТЧ.Ведомость,СтрокаТЧ.Ведомость)
			КонецЦикла; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Оповестим оплачиваемые документы выплаты зарплаты
	ЭтоРасчетыПоЗарплате = ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
	Если ЭтоРасчетыПоЗарплате Тогда
		
		Если Проведен Тогда
			Для каждого СтрокаТЧ Из ПеречислениеЗаработнойПлаты Цикл
				Если мМассивПлатежныхВедомостей[СтрокаТЧ.Ведомость] <> Неопределено Тогда
					мМассивПлатежныхВедомостей.Удалить(СтрокаТЧ.Ведомость);
				КонецЕсли;
				Оповестить("ОбновитьФорму", ,СтрокаТЧ.Ведомость);
			КонецЦикла;
		КонецЕсли;
		Для каждого Значение Из мМассивПлатежныхВедомостей Цикл
			Оповестить("ОбновитьФорму", ,Значение);
		КонецЦикла;
		
	КонецЕсли;

	Оповестить("ОбновитьФорму", ВладелецФормы, ЭтотОбъект);
                 
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()

 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()


// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
       

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	//Открывает форму движений документа для ручного редактирования
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств[Кнопка.Имя];

	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	РасшифровкаПлатежа.Очистить();

	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();

	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;

	Если (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю) Тогда
		СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		СчетУчетаРасчетовСКонтрагентом = ЭлементыФормы.СчетПеревод.СписокВыбора[0].Значение;
	КонецЕсли;
			
	ОпределитьСчетаУчетаРасчетовСКонтрагентом();
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	Иначе
		ПеречислениеЗаработнойПлаты.Очистить();
	КонецЕсли;

	УстановитьФокус();

	УстановитьВидимость();

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект, Истина);

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура заполняет реквизиты документа по созданному в режиме обработки "Клиент банк" контрагенту
//
Процедура ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент)
	
	Если Контрагент.Пустая() Тогда
		
		Контрагент            			= НовыйКонтрагент;
		СчетКонтрагента					= НовыйКонтрагент.ОсновнойБанковскийСчет;
		СтрокаПлатеж.ДоговорКонтрагента = НовыйКонтрагент.ОсновнойДоговорКонтрагента;
		
		СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		
		ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, КонецДня(Дата));
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаПлатежа,
			ВалютаДокумента, ВалютаВзаиморасчетов,
			КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
			КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
		ОпределитьСчетаУчетаРасчетовСКонтрагентом();
		
		РеквизитыКонтрагента.Очистить();
		
		//Установка меню Клиент-Банк
		РаботаСДиалогами.УстановкаПодменюКлиентБанк(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1.Кнопки.КлиентБанк, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыПоКонтрагенту()

//Процедура вызывается при выборе пункта подменю "Клиент-Банк" командной панели
Процедура ОсновныеДействияФормыКнопкиКонтрагента(Кнопка)

	Если РеквизитыКонтрагента.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Обработка =Обработки.КлиентБанк.Создать();
	Обработка.Организация =Организация;
	ТипКонтрагента=Лев(РеквизитыКонтрагента[0].Реквизит,10);
	
	СтрокаИНН=РеквизитыКонтрагента.Найти(ТипКонтрагента+"ИНН","Реквизит");
	
	Если НЕ СтрокаИНН=Неопределено Тогда
		
		ИННКраткий=СтрокаИНН.Значение;
		НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
		
		Если НЕ НовыйКонтрагент.Пустая() Тогда
			
			ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент);
			ОткрытьЗначение(НовыйКонтрагент);
			
		Иначе                         
			
			Если РеквизитыКонтрагента.Количество()>0 Тогда
				                            
				ФормаКонтрагентов =Обработка.ПолучитьФорму("ФормаКонтрагентов",ЭтаФорма);
				ФормаКонтрагентов.СформироватьИЗагрузитьДеревоПоТаблицеЗначений(РеквизитыКонтрагента);
				ФормаКонтрагентов.ОткрытьМодально();
				
				//Проверяем, не был ли создан контрагент в сеансе работы с обработкой
				НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
				
				Если НЕ НовыйКонтрагент.Пустая() Тогда
					
					ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;		
	
	
	УстановитьВидимость();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьКурсДокумента();
	
	ИсходнаяСтрокаПлатеж = СтрокаПлатеж;
	
	Для каждого СтрокаРасшифровка Из РасшифровкаПлатежа Цикл
		
		СтрокаПлатеж=СтрокаРасшифровка;
		РассчитатьКурсИСуммуВзаиморасчетов();
		
	КонецЦикла;
	
	СтрокаПлатеж = ИсходнаяСтрокаПлатеж;
	
	УстановитьВидимость();

КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента()

	СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);

	ОбщегоНазначения.УстановитьЗначение(КурсДокумента,      СтруктураКурсаВалютаДокумента.Курс);
	ОбщегоНазначения.УстановитьЗначение(КратностьДокумента, СтруктураКурсаВалютаДокумента.Кратность);
	
	// Если валюта договора совпадает с валютой документа, то перезаполним курсы взаиморасчетов
	Для каждого СтрокаРасшифровкиПлатежа Из РасшифровкаПлатежа Цикл
		
		Если ВалютаДокумента = СтрокаРасшифровкиПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов
			и НЕ СтрокаРасшифровкиПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			
			СтруктураКурсаВалютаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			
			ОбщегоНазначения.УстановитьЗначение(СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов,      СтруктураКурсаВалютаВзаиморасчетов.Курс);
			ОбщегоНазначения.УстановитьЗначение(СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов, СтруктураКурсаВалютаВзаиморасчетов.Кратность);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Обработчик события "ПриИзменении" реквизита "Организация"
//
Процедура ОрганизацияПриИзменении(Элемент)

	НачальноеЗаполнениеПриВыбореОрганизации();
	
	Если УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетОрганизации, Организация, мВалютаРегламентированногоУчета, НЕ СчетБанк.Валютный) Тогда
		ПриИзмененииСчетаОрганизации();
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		СчетКонтрагента="";
	КонецЕсли;
	
	КонтрагентПриИзменении(Элемент);

	// {ОбособленныеПодразделения
	УстановитьПодразделение();
	// }ОбособленныеПодразделения
	УстановитьПодразделениеДт();

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	УстановитьВидимость();

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ПеречислениеЗаработнойПлатыВедомостьНачалоВыбора(Элемент, СтандартнаяОбработка)
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораПлатежныхВедомостейОрганизации(Элемент, СтандартнаяОбработка, Организация, Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк) 
КонецПроцедуры

// Обработчик события "ПриИзменении" реквизита "СчетКонтрагента"
//
Процедура СчетКонтрагентаПриИзменении(Элемент)

	ПриИзмененииСчетаКонтрагента();
	УстановитьФокус();

КонецПроцедуры // СчетКонтрагентаПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетОрганизации"
//
Процедура СчетОрганизацииПриИзменении(Элемент)

	ПриИзмененииСчетаОрганизации();

КонецПроцедуры // СчетОрганизацииПриИзменении()

// Обработчик события "ПриИзменении" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураДополнительныхПараметров = Неопределено;
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		СтруктураДополнительныхПараметров = Новый Структура();
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ЗначениеОтбора",     мВалютаРегламентированногоУчета);
		
		Если ВалютаДокумента = мВалютаРегламентированногоУчета или НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
			// Нам нужны договоры с валютой взаиморасчетов регл. учета.
			СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.Равно);
		Иначе
			// Нам нужны договоры с валютой взаиморасчетов, отличной от валюты регл. учета.
			СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.НеРавно);
		КонецЕсли; 
		СтруктураДополнительныхПараметров.Вставить("ВалютаВзаиморасчетов", СтруктураОтбора);
	КонецЕсли; 
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка, СтруктураДополнительныхПараметров);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Обработчик события "ПриИзменении" реквизита "СтавкаНДС"
//
Процедура СтавкаНДСПриИзменении(Элемент)

	ПересчитатьСуммуНДС(СтрокаПлатеж);

КонецПроцедуры // СтавкаНДСПриИзменении()


// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

Процедура СуммаВзаиморасчетовПриИзменении(Элемент)

	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;

КонецПроцедуры

Процедура КурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент".
//
Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();
	
	Если УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетКонтрагента, Контрагент, СчетОрганизации.ВалютаДенежныхСредств) Тогда
		ПриИзмененииСчетаКонтрагента();
	КонецЕсли;

	ПриИзмененииДоговора();
	УстановитьФокус();

КонецПроцедуры

Процедура ОбновлениеОтображения()

	// Надпись НадписьСуммаВзаиморасчетов
	Если не СтрокаПлатеж = Неопределено Тогда
		ВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
		Иначе
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
		КонецЕсли;
    КонецЕсли;
	ЭлементыФормы.НадписьИтогоСписок.Заголовок = "Итого платежей по списку: "+
									Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента);

КонецПроцедуры

Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка  = Ложь;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
		СчетДляОпределенияОстатков = РасшифровкаПлатежа[0].СчетУчетаРасчетовПоАвансам;
	Иначе
		СчетДляОпределенияОстатков = РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;

	СтруктураПараметров   = Новый Структура;
	СтруктураПараметров.Вставить("Организация",                Организация);
	СтруктураПараметров.Вставить("Контрагент",                 Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",         РасшифровкаПлатежа[0].ДоговорКонтрагента);
	СтруктураПараметров.Вставить("КонецПериода",               Дата-1);
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("СторонаСчета",               "Кт");
	СтруктураПараметров.Вставить("ЭтоНовыйДокумент",           ЭтоНовый());
	СтруктураПараметров.Вставить("РежимОтбораДокументов",      Перечисления.РежимОтбораДокументов.ПоОстаткам);
	
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(
		СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип);

КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СчетУчетаПриИзменении(Элемент)
	Перем ПодразделениеПоУмолчанию;
	
	УстановитьВидимостьСубконто();

	ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = НалоговыйУчетУСН.ВидимостьКнопкиКУДиР(ЭтотОбъект); 
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		СубконтоДт1, ЭлементыФормы.СубконтоДт1,
		СубконтоДт2, ЭлементыФормы.СубконтоДт2,
		СубконтоДт3, ЭлементыФормы.СубконтоДт3,
		ПодразделениеДт, ЭлементыФормы.ПодразделениеДт);
	
	// {ОбособленныеПодразделения
	ПодразделениеПоУмолчанию = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	РаботаСДиалогами.УстановитьПодразделениеПоСчету(
		ПодразделениеДт, СчетУчетаРасчетовСКонтрагентом, Организация, ПодразделениеПоУмолчанию);
	
	мСчет = Элемент.Значение;

КонецПроцедуры // СчетУчетаПриИзменении()

Процедура СубконтоДт1НачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = Новый Структура();
	Для н=1 По 3 Цикл
		Если ТипЗнч(ЭтотОбъект["СубконтоДт"+н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЭтотОбъект["СубконтоДт"+н]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("ЭтоНовыйДокумент",ЭтоНовый());
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении()

	Если РасшифровкаПлатежа.Количество()=1 Тогда

		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			ПересчитатьСуммуНДС(СтрокаПлатеж);
			РассчитатьСуммуВзаиморасчетов();

		КонецЕсли;

	

	КонецЕсли;

	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект, Истина);

КонецПроцедуры

// Процедура для открытия формы изменения документа-основания
//
Процедура ДействияФормыИзменитьДокументОснование(Кнопка)
	
	ФормаВыбора = ПолучитьОбщуюФорму("ФормаВыбораДокументаОснования");
	ФормаВыбора.ДокументОбъект = ЭтотОбъект;
	ФормаВыбора.ОткрытьМодально();
	ЗаполнитьТекстПлатежноеПоручение();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)

	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	// Распределение оплаты
	
	КолонкиРасшифровкиПлатежа  = ЭлементыФормы.РасшифровкаПлатежа.Колонки;
	
	ЭтоОплатаПоДокументу = (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	ЭлементыФормы.Сделка.Видимость                  = ЭтоОплатаПоДокументу;
	ЭлементыФормы.НадписьСделка.Видимость           = ЭтоОплатаПоДокументу;
	КолонкиРасшифровкиПлатежа.Сделка.ТолькоПросмотр = НЕ ЭтоОплатаПоДокументу;
	
	ПогашатьЗадолженность = (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически)
		ИЛИ (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Доступность                = ПогашатьЗадолженность;
	ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентом.Доступность         = ПогашатьЗадолженность;
	КолонкиРасшифровкиПлатежа.СчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр = НЕ ПогашатьЗадолженность;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ТекДанные = ОформлениеСтроки.ДанныеСтроки;
		Если ОформлениеСтроки.Ячейки.Сделка.Видимость Тогда
			ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного = 
				(ТекДанные.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу)
				И (НЕ ЗначениеЗаполнено(ТекДанные.Сделка));
		КонецЕсли;
		Если ОформлениеСтроки.Ячейки.СчетУчетаРасчетовСКонтрагентом.Видимость Тогда
			ОформлениеСтроки.Ячейки.СчетУчетаРасчетовСКонтрагентом.ОтметкаНезаполненного = 
				(ТекДанные.СпособПогашенияЗадолженности <> Перечисления.СпособыПогашенияЗадолженности.НеПогашать)
				И (НЕ ЗначениеЗаполнено(ТекДанные.СчетУчетаРасчетовСКонтрагентом));
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СписокВидовДоговоров = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации); 
		УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(
			Элемент.ТекущиеДанные.ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговоров);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПослеУдаления(Элемент)

	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка  = Ложь;
	
	СтрокаДанных = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
		СчетДляОпределенияОстатков = СтрокаДанных.СчетУчетаРасчетовПоАвансам;
	Иначе
		СчетДляОпределенияОстатков = СтрокаДанных.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;

	СтруктураПараметров   = Новый Структура;
	СтруктураПараметров.Вставить("Организация",                Организация);
	СтруктураПараметров.Вставить("Контрагент",                 Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",         СтрокаДанных.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("КонецПериода",               Дата-1);
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("СторонаСчета",               "Кт");
	СтруктураПараметров.Вставить("ЭтоНовыйДокумент",           ЭтоНовый());
	СтруктураПараметров.Вставить("РежимОтбораДокументов",      Перечисления.РежимОтбораДокументов.ПоОстаткам);
	
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(
		СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип);

КонецПроцедуры

Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)

	ПересчитатьСуммуНДС(СтрокаПлатеж);

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)

	Если НЕ СтрокаПлатеж.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		
		СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов;
		
	ИначеЕсли (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;

КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)

	ПересчитатьСуммуНДС(СтрокаПлатеж);

КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыПослеУдаления(Элемент)
	
	СуммаДокумента = ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа");

КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СуммаДокумента = ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа");

КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	УправлениеВзаиморасчетами.ОбработкаПодбораЗадолженностей(
		СтрокаПлатеж,РасшифровкаПлатежа,ЗначениеВыбора, СписокПлатежей, КурсДокумента, КратностьДокумента);

	Если СтрокаПлатеж.СтавкаНДС.Пустая() Тогда
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
			глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
	КонецЕсли;

	ПересчитатьСуммуНДС(СтрокаПлатеж);

	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
		Организация, Контрагент, СтрокаПлатеж.ДоговорКонтрагента);

	СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = 
		?(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом.Пустая(),СчетаУчета.СчетРасчетов,СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом);
	СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = 
		?(СтрокаПлатеж.СчетУчетаРасчетовПоАвансам.Пустая(),СчетаУчета.СчетАвансов,СтрокаПлатеж.СчетУчетаРасчетовПоАвансам);

	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");

	УстановитьФокус();

КонецПроцедуры

Процедура ДействияФормыНастройкаУСН(Кнопка)

	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	
	ФормаНастройки = ПолучитьОбщуюФорму("ФормаНастройкиПлатежаУСН");

	ФормаНастройки.Графа4       = Графа4_УСН;
	ФормаНастройки.Графа5       = Графа5_УСН;
	ФормаНастройки.Графа6       = Графа6_УСН;
	ФормаНастройки.Графа7       = Графа7_УСН;
	ФормаНастройки.НДС          = НДС_УСН;
	ФормаНастройки.ДоходЕНВД    = ДоходыЕНВД_УСН;
	ФормаНастройки.РасходЕНВД   = РасходыЕНВД_УСН;
	ФормаНастройки.Содержание   = Содержание_УСН;
	ФормаНастройки.ТолькоДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
    ФормаНастройки.АвтоРежим 	= НЕ РучнаяНастройка_УСН;
	
	СтруктураПараметров = ФормаНастройки.ОткрытьМодально();

	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Графа4_УСН      	= СтруктураПараметров.Графа4;
	Графа5_УСН      	= СтруктураПараметров.Графа5;
	Графа6_УСН      	= СтруктураПараметров.Графа6;
	Графа7_УСН      	= СтруктураПараметров.Графа7;
	НДС_УСН         	= СтруктураПараметров.НДС;
	ДоходыЕНВД_УСН  	= СтруктураПараметров.ДоходыЕНВД;
	РасходыЕНВД_УСН 	= СтруктураПараметров.РасходыЕНВД;
	Содержание_УСН  	= СтруктураПараметров.Содержание;
	РучнаяНастройка_УСН = НЕ СтруктураПараметров.АвтоРежим;

КонецПроцедуры

Процедура ЗаполнитьСчетаБанка()

	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	МассивОтбора.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	МассивОтбора.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	
	ЭлементыФормы.СчетБанк.СписокВыбора = РаботаСДиалогами.ЗаполнитьСписокВыбораСчетовДенежныхСредств(МассивОтбора);
	
КонецПроцедуры

Процедура ЗаполнитьСчетаПеревода()

	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	МассивОтбора.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	МассивОтбора.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	
	ЭлементыФормы.СчетПеревод.СписокВыбора = РаботаСДиалогами.ЗаполнитьСписокВыбораСчетовДенежныхСредств(МассивОтбора, Истина, СчетБанк);
	
КонецПроцедуры

Процедура СчетБанкПриИзменении(Элемент)

	Если ЭлементыФормы.СчетБанк.СписокВыбора.НайтиПоЗначению(СчетБанк) = Неопределено Тогда

		Сообщить("Счет "+СчетБанк+" не используется при учете безналичных денежных средств.");
		СчетБанк = "";
		Возврат;

	КонецЕсли;

	РублевыйСчет = НЕ СчетБанк.Валютный;
	ИзмениласьВалюта = НЕ ((СчетОрганизации.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета) = РублевыйСчет);
	
	Если ИзмениласьВалюта Тогда 
		
		СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
		
		УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(
			СчетОрганизации, Организация, мВалютаРегламентированногоУчета, РублевыйСчет);
		ПриИзмененииСчетаОрганизации();
		
		УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(
			СчетКонтрагента, Контрагент, СчетОрганизации.ВалютаДенежныхСредств);
		ПриИзмененииСчетаКонтрагента();
		
		Если РублевыйСчет Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		ИначеЕсли ЗначениеЗаполнено(СчетОрганизации) Тогда
			ВалютаДокумента = СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента = Неопределено;
		КонецЕсли;
		ПриИзмененииВалютыДокумента();
		
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
			Если (СчетБанк.Валютный <> СчетУчетаРасчетовСКонтрагентом.Валютный) 
				ИЛИ (НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом)) Тогда
				ЗаполнитьСчетаПеревода();
				СчетУчетаРасчетовСКонтрагентом = ЭлементыФормы.СчетПеревод.СписокВыбора[0].Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		РаботаСДиалогами.ВыбратьВидОперации(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	ЗаполнитьСчетаБанка();
	
	ЗаполнитьСчетаПеревода();
          
КонецПроцедуры

Процедура СчетОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ФормаСчета = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент);

	Если НЕ СчетБанк.Пустая() Тогда

		ФормаСчета.Отбор.ВалютаДенежныхСредств.ВидСравнения  = ?(СчетБанк.Валютный,ВидСравнения.НеРавно,ВидСравнения.Равно);
		ФормаСчета.Отбор.ВалютаДенежныхСредств.Значение      = мВалютаРегламентированногоУчета;
		ФормаСчета.Отбор.ВалютаДенежныхСредств.Использование = Истина;

	КонецЕсли;

	Если НЕ Организация.Пустая() Тогда

		ФормаСчета.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
		ФормаСчета.Отбор.Владелец.Значение      = Организация;
		ФормаСчета.Отбор.Владелец.Использование = Истина;

	КонецЕсли;
           	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ФормаСчета.ПараметрТекущаяСтрока = Элемент.Значение;
	КонецЕсли;

	ФормаСчета.РежимВыбора = Истина;
	ФормаСчета.Открыть();

КонецПроцедуры

Процедура СчетКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ФормаСчета = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент);

	Если НЕ СчетБанк.Пустая() Тогда

		ФормаСчета.Отбор.ВалютаДенежныхСредств.ВидСравнения  = ?(СчетБанк.Валютный,ВидСравнения.НеРавно,ВидСравнения.Равно);
		ФормаСчета.Отбор.ВалютаДенежныхСредств.Значение      = мВалютаРегламентированногоУчета;
		ФормаСчета.Отбор.ВалютаДенежныхСредств.Использование = Истина;

	КонецЕсли;

	Если НЕ ВидОперации=Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
	
		Если НЕ Контрагент.Пустая() Тогда
			
			ФормаСчета.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
			ФормаСчета.Отбор.Владелец.Значение      = Контрагент;
			ФормаСчета.Отбор.Владелец.Использование = Истина;
			
			Если Не СчетОрганизации.Пустая() Тогда
				
				ФормаСчета.Отбор.ВалютаДенежныхСредств.ВидСравнения  = ВидСравнения.Равно;
				ФормаСчета.Отбор.ВалютаДенежныхСредств.Значение      = СчетОрганизации.ВалютаДенежныхСредств;
				ФормаСчета.Отбор.ВалютаДенежныхСредств.Использование = Истина;
				
			КонецЕсли;
					
		КонецЕсли;
		
	Иначе
		
		Если НЕ Организация.Пустая() Тогда
			
			ФормаСчета.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
			ФормаСчета.Отбор.Владелец.Значение      = Организация;
			ФормаСчета.Отбор.Владелец.Использование = Истина;
			
			Если Не СчетОрганизации.Пустая() Тогда
				
				ФормаСчета.Отбор.ВалютаДенежныхСредств.ВидСравнения  = ВидСравнения.Равно;
				ФормаСчета.Отбор.ВалютаДенежныхСредств.Значение      = СчетОрганизации.ВалютаДенежныхСредств;
				ФормаСчета.Отбор.ВалютаДенежныхСредств.Использование = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
           	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ФормаСчета.ПараметрТекущаяСтрока = Элемент.Значение;
	КонецЕсли;

	ФормаСчета.РежимВыбора = Истина;

	ФормаСчета.Открыть();


КонецПроцедуры

Процедура СчетПереводПриИзменении(Элемент)
	
	Если ЭлементыФормы.СчетПеревод.СписокВыбора.НайтиПоЗначению(СчетУчетаРасчетовСКонтрагентом)=Неопределено Тогда

		Сообщить("Счет "+СчетУчетаРасчетовСКонтрагентом+" не используется при учете безналичных денежных средств.");

		СчетПеревод = "";

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(
		ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// {ОбособленныеПодразделения

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	УстановитьПодразделениеДт();

 	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
		И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(
			мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(
			ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()

// }ОбособленныеПодразделения

Процедура УстановитьПодразделениеДт()

	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		Тогда
		ПодразделениеДт = Неопределено;
	// {ОбособленныеПодразделения
	Иначе
		ПодразделениеДт = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	КонецЕсли;

КонецПроцедуры

// {ОбособленныеПодразделения

Процедура УстановитьПодразделение()

	ОсновноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
		глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		
	Если ОсновноеПодразделение.Владелец = Организация Тогда
		ПодразделениеОрганизации = ОсновноеПодразделение;
	Иначе
		ПодразделениеОрганизации = Неопределено;
	КонецЕсли;

КонецПроцедуры

// }ОбособленныеПодразделения

Процедура СписокПлатежейПриИзменении(Элемент)
	
	Если НЕ СписокПлатежей И РасшифровкаПлатежа.Количество() > 1 Тогда

		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ <> КодВозвратаДиалога.Да Тогда
			СписокПлатежей = Истина;
			Возврат;
		КонецЕсли;

		Пока РасшифровкаПлатежа.Количество() > 1 Цикл

			СтрокаУдаления = РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);

		КонецЦикла;

		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];

		СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;

		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов();
        
	Иначе

		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
		СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

Процедура СпособПогашенияЗадолженностиПриИзменении(Элемент)
	
	Если СтрокаПлатеж.СпособПогашенияЗадолженности <> Перечисления.СпособыПогашенияЗадолженности.ПоДокументу Тогда
		СтрокаПлатеж.Сделка = Неопределено;
	КонецЕсли;
	
	ОпределитьСчетаУчетаРасчетовСКонтрагентом();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КоманднаяПанельПеречислениеЗПЗаполнитьПоВедомости(Кнопка)
	
	Если Проведен Тогда
		Предупреждение("Заполнение возможно только для непроведенных документов.");
		Возврат;
	КонецЕсли;
	
	Если ПеречислениеЗаработнойПлаты.Количество() > 0 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа будут удалены. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ПеречислениеЗаработнойПлаты.Очистить();
		
	КонецЕсли;
	
	ФормаВыбораВедомости = Документы.ЗарплатаКВыплатеОрганизаций.ПолучитьФормуВыбора(, ЭлементыФормы.ПеречислениеЗаработнойПлаты);
	ФормаВыбораВедомости.Открыть();
	ФормаВыбораВедомости.ДокументСписок.Отбор.Организация.Установить(Организация);
	ФормаВыбораВедомости.ДокументСписок.Отбор.СпособВыплаты.Установить(Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);
	
КонецПроцедуры

Процедура КоманднаяПанельПеречислениеЗПДобавитьИзВедомости(Кнопка)
	
	Если Проведен Тогда
		Предупреждение("Заполнение возможно только для непроведенных документов.");
		Возврат;
	КонецЕсли;
	
	ФормаВыбораВедомости = Документы.ЗарплатаКВыплатеОрганизаций.ПолучитьФормуВыбора(, ЭлементыФормы.ПеречислениеЗаработнойПлаты);
	ФормаВыбораВедомости.Открыть();
	ФормаВыбораВедомости.ДокументСписок.Отбор.Организация.Установить(Организация);
	ФормаВыбораВедомости.ДокументСписок.Отбор.СпособВыплаты.Установить(Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);
	
КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ВыбранноеЗначение);
	Запрос.УстановитьПараметр("ВыплаченностьЗарплаты", Перечисления.ВыплаченностьЗарплаты.Выплачено);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма + ЗарплатаКВыплатеЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК СуммаПлатежа,
	|	ЗарплатаКВыплатеЗарплата.Физлицо,
	|	ЗарплатаКВыплатеЗарплата.Ссылка КАК Ведомость
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|ГДЕ
	|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ссылка
	|	И ЗарплатаКВыплатеЗарплата.ВыплаченностьЗарплаты <> &ВыплаченностьЗарплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеЗарплата.Физлицо,
	|	ЗарплатаКВыплатеЗарплата.Ссылка";
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Предупреждение("По выбранной ведомости нет сумм к выплате.");
		Возврат;
	КонецЕсли;
	
	МассивУдаляемыхСтрок = ПеречислениеЗаработнойПлаты.НайтиСтроки(Новый Структура("Ведомость", ВыбранноеЗначение));
	Если МассивУдаляемыхСтрок.Количество() > 0 Тогда
	
		ТекстВопроса = "Все ранее введенные строки с этой ведомостью будут удалены. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
			ПеречислениеЗаработнойПлаты.Удалить(УдаляемаяСтрока);
		КонецЦикла; 
		
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать(); 
	Пока Выборка.Следующий() Цикл
		
		СтрокаВедомость = ПеречислениеЗаработнойПлаты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВедомость, Выборка);
		
	КонецЦикла;
	
	СуммаДокумента = ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа");
	
КонецПроцедуры

Процедура КоманднаяПанельПеречислениеЗПЗаполнитьСтатьиДДС(Кнопка)
	
	ВыбраннаяСтатья = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если НЕ ВвестиЗначение(ВыбраннаяСтатья, "Выберите статью движения ден.средств") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ПеречислениеЗаработнойПлаты Цикл
		СтрокаТЧ.СтатьяДвиженияДенежныхСредств = ВыбраннаяСтатья;
	КонецЦикла;
	
КонецПроцедуры

Процедура СчетУчетаЗадержкаЗарплатыПриИзменении(Элемент)
	Перем ПодразделениеПоУмолчанию;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		СубконтоДт1, ЭлементыФормы.СубконтоДт1ЗадержкаЗарплаты,
		СубконтоДт2, ЭлементыФормы.СубконтоДт2ЗадержкаЗарплаты,
		СубконтоДт3, ЭлементыФормы.СубконтоДт3ЗадержкаЗарплаты,
		ПодразделениеДт, ЭлементыФормы.ПодразделениеДтЗадержкаЗарплаты);
		
	// {ОбособленныеПодразделения
	ПодразделениеПоУмолчанию = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	РаботаСДиалогами.УстановитьПодразделениеПоСчету(
		ПодразделениеДт, СчетУчетаРасчетовСКонтрагентом, Организация, ПодразделениеПоУмолчанию);
	
	УстановитьВидимостьСубконто("ЗадержкаЗарплаты");

КонецПроцедуры

Процедура СубконтоДт1ПриИзменении(Элемент)
	
	ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = НалоговыйУчетУСН.ВидимостьКнопкиКУДиР(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ

