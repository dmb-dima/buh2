// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

// Хранит признак ведения в конфигурации учета по статьям движения денежных средств
Перем ЕстьУчетПоСтатьямДДС Экспорт;
Перем СодержаниеПроводки;

// Сведения о необходимости проверки соответствий ведомостей на выплату зарплаты сумме документа
Перем ПроверятьСоответствиеСуммыДокументаИВедомости Экспорт;
Перем ТаблицаВзаиморасчетовСРаботникамиОрганизаций;
Перем ФормироватьДвиженияПоВзаиморасчетамСРаботникамиОрганизаций;

Перем ПлатежноеПоручениеОснование Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

	ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);

КонецПроцедуры // ПересчитатьСуммуНДС()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);

	Если Не СтрокаПлатеж = Неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);

	КонецЕсли;

КонецПроцедуры // ПроверкаКурсовВалют()

// Заполнение табличной части перечисления ЗП данными клиент-банка
//
// Параметры
//  ТаблицаПлатежей  – ТаблицаЗначений – Таблица перечислений денежных средств физлицам
//  Основание  – Документ основание
//
Процедура ЗаполнитьПеречислениеЗППоОбменуСБанком(ТаблицаПлатежей, Основание) Экспорт

	ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
	
	ДокументОснование = Основание;
	СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	
	ПеречислениеЗаработнойПлаты.Загрузить(ТаблицаПлатежей);
	
	СуммаДокумента = ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа");

	// Заполняем расшифровку платежа
	РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(СтрокаПлатеж.ДоговорКонтрагента,Контрагент,Организация,СписокВидовДоговора);		
	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
	
КонецПроцедуры // ЗаполнитьПеречислениеЗППоОбменуСБанком()

Функция ПолучитьСчетИАналитикуПеречисленияНалога(ЗначениеКБК, ЗначениеОснования, ЗначениеКПППлательщика)
	
	СтруктураРезультата = Новый Структура("СчетУчета, ВидСубконто1, Субконто1, ВидСубконто2, Субконто2, ВидСубконто3, Субконто3");
	
	// Счет учета: получаем по КБК
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Приоритет,
	|	ВидыНалогов.СчетУчета
	|ИЗ
	|	Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалогов
	|ГДЕ
	|	ВидыНалогов.КодБК = &ТочныйКодБК
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ВидыНалогов.СчетУчета
	|ИЗ
	|	Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалогов
	|ГДЕ
	|	ВидыНалогов.КодБК ПОДОБНО &ПримерныйКодБК
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет");
	Запрос.УстановитьПараметр("ТочныйКодБК",    ЗначениеКБК);
	Запрос.УстановитьПараметр("ПримерныйКодБК", Лев(ЗначениеКБК, 13) + "____" + Прав(ЗначениеКБК, 3));
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	СтруктураРезультата.Вставить("СчетУчета", Выборка.СчетУчета);
	
	Для й = 1 По СтруктураРезультата.СчетУчета.ВидыСубконто.Количество() Цикл
		
		СтрокаВидаСубконто = СтруктураРезультата.СчетУчета.ВидыСубконто[й - 1];
		
		Если СтрокаВидаСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет Тогда
			
			// Субконто ВидыПлатежейВГосБюджет: 
			// 	если разряд 14 КБК = "1":
			// 		если ПоказательОснования = "ЗД" - .НалогСам
			// 		если ПоказательОснования = "АП" - .НалогАкт
			//		иначе - .Налог
			// 	если разряд 14 КБК = "2":
			// 		если ПоказательОснования = "АП" - .ПениАкт
			//		иначе - .ПениСам
			// 	если разряд 14 КБК = "3":
			// 		.Штраф
			
			СтруктураРезультата.Вставить("ВидСубконто" + й, "ВидыПлатежейВГосБюджет");
		
			КодВидаПлатежа = Сред(ЗначениеКБК, 14, 1);
			Если КодВидаПлатежа = "1" Тогда
				Если ЗначениеОснования = "ЗД" Тогда
					СтруктураРезультата.Вставить("Субконто" + й, Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
				ИначеЕсли ЗначениеОснования = "АП" Тогда
					СтруктураРезультата.Вставить("Субконто" + й, Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
				Иначе
					СтруктураРезультата.Вставить("Субконто" + й, Перечисления.ВидыПлатежейВГосБюджет.Налог);
				КонецЕсли;
			ИначеЕсли КодВидаПлатежа = "2" Тогда
				Если ЗначениеОснования = "АП" Тогда
					СтруктураРезультата.Вставить("Субконто" + й, Перечисления.ВидыПлатежейВГосБюджет.ПениАкт);
				Иначе
					СтруктураРезультата.Вставить("Субконто" + й, Перечисления.ВидыПлатежейВГосБюджет.ПениСам);
				КонецЕсли;
			Иначе // = "3"
				СтруктураРезультата.Вставить("Субконто" + й, Перечисления.ВидыПлатежейВГосБюджет.Штраф);
			КонецЕсли;
			
		// {ОбособленныеПодразделения
		
		ИначеЕсли СтрокаВидаСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РегистрацияВИФНС Тогда
			
			// Субконто РегистрацияВИФНС:
			// 	ссылку на Регистрацию ИФНС получаем по КПП плательщика
			
			СтруктураРезультата.Вставить("ВидСубконто" + й, "РегистрацияВИФНС");
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Спр.Ссылка КАК РегистрацияВИФНС
			|ИЗ
			|	Справочник.РегистрацияВИФНС КАК Спр
			|ГДЕ
			|	Спр.Владелец = &Организация
			|		И Спр.КПП = &КПП");
			Запрос.УстановитьПараметр("Организация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			Запрос.УстановитьПараметр("КПП",         ЗначениеКПППлательщика);
			Результат = Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				СтруктураРезультата.Вставить("Субконто" + й, Выборка.РегистрацияВИФНС);
			КонецЕсли;
					
		// }ОбособленныеПодразделения 
		
		ИначеЕсли СтрокаВидаСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов Тогда
			
			// Субконто УровниБюджетов:
			// 	если разряды 12-13 КБК = "01":
			// 		.ФедеральныйБюджет
			// 	если разряды 12-13 КБК = "02":
			// 		.РегиональныйБюджет
			// 	иначе:
			// 		.МестныйБюджет
			
			СтруктураРезультата.Вставить("ВидСубконто" + й, "УровниБюджетов");
			
			КодБюджета = Сред(ЗначениеКБК, 12, 2);
			Если КодБюджета = "01" Тогда
				СтруктураРезультата.Вставить("Субконто" + й, Перечисления.УровниБюджетов.ФедеральныйБюджет);
			ИначеЕсли КодБюджета = "02" Тогда
				СтруктураРезультата.Вставить("Субконто" + й, Перечисления.УровниБюджетов.РегиональныйБюджет);
			Иначе
				СтруктураРезультата.Вставить("Субконто" + й, Перечисления.УровниБюджетов.МестныйБюджет);
			КонецЕсли;
		
		ИначеЕсли СтрокаВидаСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыРасчетовПоСредствамФСС Тогда
			
			// Субконто ВидыРасчетовПоСредствамФСС: 
			// 		.ПеречисленоСтрахователем
			
			СтруктураРезультата.Вставить("ВидСубконто" + й, "ВидыРасчетовПоСредствамФСС");
			СтруктураРезультата.Вставить("Субконто" + й,    Перечисления.ВидыРасчетовПоСредствамФСС.ПеречисленоСтрахователем);
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураРезультата;

КонецФункции // ПолучитьСчетИАналитикуПеречисленияНалога()

Функция НайтиДокументПлатежноеПоручение(ДокументСсылка) Экспорт
	
	Если ЭтоНовый() Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) И 
		ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		
		Возврат ДокументОснование;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДокПП.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ДокПП
	|ГДЕ
	|	ДокПП.ДокументОснование = &ДокументСсылка";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаИзЗапроса.Следующий() Тогда
		НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
	КонецЕсли;

	Возврат НайденныйДокумент;
																								
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ЗаполнитьПоЗарплатеКВыплатеОрганизацииРегл(Основание, Предупреждать = Истина)

	ВидОперации        = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
	Организация        = Основание.Организация;
	
	// {КОРП
	ПодразделениеОрганизации = Основание.ПодразделениеОрганизации;
    // }КОРП
	
	ВалютаДокумента    = мВалютаРегламентированногоУчета;
	КурсДокумента      = 1;
	КратностьДокумента = 1;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма + ЗарплатаКВыплатеЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК СуммаПлатежа,
	|	ЗарплатаКВыплатеЗарплата.Физлицо,
	|	ЗарплатаКВыплатеЗарплата.Ссылка КАК Ведомость
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|ГДЕ
	|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеЗарплата.Физлицо,
	|	ЗарплатаКВыплатеЗарплата.Ссылка";
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		
		Если Предупреждать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По текущей ведомости нет сумм к выплате!");
		КонецЕсли;
		
	Иначе	

		Выборка = РезультатЗапроса.Выбрать(); 
		Пока Выборка.Следующий() Цикл
			
			СтрокаВедомость = ПеречислениеЗаработнойПлаты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВедомость, Выборка);

		КонецЦикла;
		
	КонецЕсли;

	РасшифровкаПлатежа.Добавить().СуммаПлатежа = ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа");

КонецПроцедуры

Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента,Отказ, Заголовок)

	// Проверка шапки документа
	
	СтруктураПолей = Новый Структура("Организация");

	СтруктураПолей.Вставить("СчетБанк",       "Не указан счет учета денежных средств");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	СтруктураПолей.Вставить("СуммаДокумента");

	Если СчетБанк.Валютный Тогда
		СтруктураПолей.Вставить("ВалютаДокумента","Не указана валюта документа.");
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание  
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		
		СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", "Не указан счет дебета.");
		
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		СтруктураПолей.Вставить("Контрагент");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		СтруктураПолей.Вставить("СчетКонтрагента","Не указан банковский счет, на который производится перевод!");
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда
		СтруктураПолей.Вставить("ФизЛицо","Не указано подотчетное лицо!");
		СтруктураПолей.Вставить("СчетКонтрагента","Не указан банковский счет подотчетного лица!");
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);

	// Проверка табличной части РасшифровкаПлатежа
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа") = СуммаДокумента Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не совпадают сумма документа и ее расшифровка.",Отказ,Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	КолСтрок = РасшифровкаПлатежа.Количество();
	
	Для каждого Платеж из РасшифровкаПлатежа Цикл
		
		Если КолСтрок = 1 Тогда
			ТекстНомераСтроки = "";
		Иначе
			ТекстНомераСтроки = "Строка " + Платеж.НомерСтроки + " расшифровки платежа: ";
		КонецЕсли;
		
		ЕстьРасчетыСПоставщикамиПокупателями = 
			(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику)
			ИЛИ (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю);
			
		Если ЕстьРасчетыСПоставщикамиПокупателями Тогда
			
			Если НЕ ЗначениеЗаполнено(Платеж.СпособПогашенияЗадолженности) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Погашение задолженности"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			ИначеЕсли (Платеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу)
				И НЕ ЗначениеЗаполнено(Платеж.Сделка) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Документ расчетов"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
			
			Если НЕ ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Договор контрагента"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			Если (ЕстьРасчетыПоКредитам
				ИЛИ (Платеж.СпособПогашенияЗадолженности <> Перечисления.СпособыПогашенияЗадолженности.НеПогашать))
				И НЕ ЗначениеЗаполнено(Платеж.СчетУчетаРасчетовСКонтрагентом) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Счет расчетов"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			Если ЕстьРасчетыСПоставщикамиПокупателями 
				И НЕ ЗначениеЗаполнено(Платеж.СчетУчетаРасчетовПоАвансам) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Счет авансов"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) Тогда
				
				ВидДоговораКонтрагента = Платеж.ДоговорКонтрагента.ВидДоговора;
				Если (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
					
					СтрокаСообщения = ТекстНомераСтроки
						+ "Договор """ + Строка(Платеж.ДоговорКонтрагента) + """ с видом """ + Строка(ВидДоговораКонтрагента) + "
						| не может использоваться в операции """ + Строка(ВидОперации) + """.
						|Допускается использовать только договоры вида: ""C поставщиком"", ""С комиссионером"", ""С комитентом"".";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
					
				ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) Тогда
					
					СтрокаСообщения = ТекстНомераСтроки
						+ "Договор """ + Строка(Платеж.ДоговорКонтрагента) + """ с видом """ + Строка(ВидДоговораКонтрагента) + "
						| не может использоваться в операции """ + Строка(ВидОперации) + """.
						|Допускается использовать только договоры вида: ""C покупателем"", ""С комитентом"", ""С комиссионером""."; 
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);

				ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
					ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.Прочее) Тогда
					
					СтрокаСообщения = ТекстНомераСтроки
						+	"Договор """ + Строка(Платеж.ДоговорКонтрагента) + """ с видом """ + Строка(ВидДоговораКонтрагента) + "
						| не может использоваться в операции """ + Строка(ВидОперации) + """.
						|Допускается использовать только договоры вида ""Прочее"".";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);

				КонецЕсли;
				
				УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(
					Организация, Платеж.ДоговорКонтрагента, Платеж.ДоговорКонтрагента.Организация, Отказ, Заголовок);
														  
				УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
					СтруктураШапкиДокумента, Платеж.ДоговорКонтрагента, Отказ, Заголовок, ТекстНомераСтроки);
														  
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		Если ПроверятьСоответствиеСуммыДокументаИВедомости Тогда			
			
			Для Каждого Платеж из ПеречислениеЗаработнойПлаты Цикл
				
				ТекстНомераСтроки = "Строка " + Платеж.НомерСтроки + " списка платежей: ";
				
				Если НЕ ЗначениеЗаполнено(Платеж.Ведомость) Тогда
					СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Ведомость"".";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Платеж.Физлицо) Тогда
					СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Физ.лицо"".";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Платеж.СуммаПлатежа) Тогда
					СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Сумма платежа"".";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Платеж.Ведомость) 
					И ЗначениеЗаполнено(Платеж.Физлицо)Тогда
					Если Платеж.Ведомость.Зарплата.Найти(Платеж.Физлицо) = Неопределено Тогда
						СтрокаСообщения = ТекстНомераСтроки
						+ "Физ.лица """ + Платеж.Физлицо.Наименование + """ нет в ведомости """ + Платеж.Ведомость + """";
						ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
					КонецЕсли;	
				КонецЕсли;
				
			КонецЦикла
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)

    СодержаниеПроводки = НазначениеПлатежа + " по вх.д." + НомерВходящегоДокумента + " от " + Формат(ДатаВходящегоДокумента, "ДЛФ=Д");
	Проводки = Движения.Хозрасчетный;

	СчетКт         = СтруктураШапкиДокумента.СчетБанк;
	РасчетыВВалюте = СчетБанк.Валютный;

	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда

		//Дополнение структуры шапки документа (для использования глобальных процедур)
		СтруктураШапкиДокумента.Вставить("КоррСчет"			, СчетКт);
		СтруктураШапкиДокумента.Вставить("КоррПодразделение", СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
		//Вызов универсальной процедуры подготовки реестра платежей по данным документа. 		
		ТаблицаДокумента   = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		СодержаниеПроводки = СодержаниеПроводки;
		
		ОпределятьСостояниеРасчетов = ЕстьРасчетыСКонтрагентами;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
			ИЛИ ЕстьРасчетыПоКредитам
			Тогда
			ТаблицаДокумента.ЗагрузитьКолонку(ТаблицаДокумента.ВыгрузитьКолонку("СчетОплаты"),"СчетАванса");
		КонецЕсли; 
		
		ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ПогаситьЗадолженностьКонтрагентов(
			СтруктураШапкиДокумента, ТаблицаДокумента, ЭтотОбъект, 
			Отказ, Заголовок, СодержаниеПроводки, ОпределятьСостояниеРасчетов);

		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда

		Проводка = Проводки.Добавить();

		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = СодержаниеПроводки;

		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДт3);

		Проводка.СчетКт      = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);

		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеДт, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
		Если РасчетыВВалюте Тогда

			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;

			ДанныеОВалюте = МодульВалютногоУчета.ПолучитьКурсВалюты(
				мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);

			Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СуммаДокумента, 
				СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
				СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
		Иначе
				
			Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
			
		КонецЕсли;
		
		// {УчетДоходовИРасходовИП
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
			
			ТаблицаАвансов = Новый ТаблицаЗначений;
			ТаблицаАвансов.Колонки.Добавить("ДокументОплаты");
			ТаблицаАвансов.Колонки.Добавить("РеквизитыДокументаОплаты");
			ТаблицаАвансов.Колонки.Добавить("Сумма");
			
			ДокументОплаты = ТаблицаАвансов.Добавить();
			ДокументОплаты.ДокументОплаты = Ссылка;
			ДокументОплаты.РеквизитыДокументаОплаты = ДоходыИРасходыПредпринимателя.РеквизитыДокументаОплаты(СтруктураШапкиДокумента);
			ДокументОплаты.Сумма = Проводка.Сумма;
			
			Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
				мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация);
				
				ТаблицаПоУслугам = Новый ТаблицаЗначений;
				ТаблицаПоУслугам.Колонки.Добавить("Номенклатура");
				ТаблицаПоУслугам.Колонки.Добавить("Счет");
				ТаблицаПоУслугам.Колонки.Добавить("СубконтоДт1");
				ТаблицаПоУслугам.Колонки.Добавить("СубконтоДт2");
				ТаблицаПоУслугам.Колонки.Добавить("СубконтоДт3");
				ТаблицаПоУслугам.Колонки.Добавить("Количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
				ТаблицаПоУслугам.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоУслугам.Колонки.Добавить("НДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				
				Услуга = ТаблицаПоУслугам.Добавить();
				Услуга.Счет = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				Услуга.СубконтоДт1 = СтруктураШапкиДокумента.СубконтоДт1;
				Услуга.СубконтоДт2 = СтруктураШапкиДокумента.СубконтоДт2;
				Услуга.СубконтоДт3 = СтруктураШапкиДокумента.СубконтоДт3;
				Услуга.СуммаБезНДС = Проводка.Сумма;
				
				ДоходыИРасходыПредпринимателя.ПоступлениеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, мУчетнаяПолитика, 1, ТаблицаПоУслугам, "Счет", "Номенклатура", "СубконтоДт", "СубконтоДт", ТаблицаАвансов);
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
				
				ДоходыИРасходыПредпринимателя.ПеречислениеНалога(ЭтотОбъект, СтруктураШапкиДокумента, ТаблицаАвансов);
				
			КонецЕсли;
			
		КонецЕсли;
		// }УчетДоходовИРасходовИП
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда

		Проводка = Проводки.Добавить();

		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = СодержаниеПроводки;
		
		Если РасчетыВВалюте Тогда
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
		Иначе
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
		КонецЕсли;		
			
		Проводка.СубконтоДт.РаботникиОрганизаций = СтруктураШапкиДокумента.ФизЛицо;
		
		СчетКт      = СтруктураШапкиДокумента.СчетБанк;
		Проводка.СчетКт = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиДвиженияДенежныхСредств",РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,Проводка.СубконтоКт,"БанковскиеСчета",СтруктураШапкиДокумента.СчетОрганизации);

		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
		Если РасчетыВВалюте Тогда

			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;

			ДанныеОВалюте = МодульВалютногоУчета.ПолучитьКурсВалюты(
				мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);

			Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СуммаДокумента, 
				СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс,
				СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
		Иначе
				
			Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда

			Проводка = Проводки.Добавить();

			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = СодержаниеПроводки;
			
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);

			Проводка.СчетКт      = СчетКт;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеДт, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
			Если РасчетыВВалюте Тогда

				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
				КонецЕсли;

				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
				КонецЕсли;

				ДанныеОВалюте = МодульВалютногоУчета.ПолучитьКурсВалюты(
					мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);

				Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					СуммаДокумента, 
					СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
					СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс,
					СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
			Иначе
				
				Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
				
			КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
			
		Если НЕ ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
			
			ТаблицаПеречислениеЗП = ПеречислениеЗаработнойПлаты.Выгрузить(, "СтатьяДвиженияДенежныхСредств, СуммаПлатежа");
			ТаблицаПеречислениеЗП.Свернуть("СтатьяДвиженияДенежныхСредств", "СуммаПлатежа");
			
			Для каждого СтрокаПеречислениеЗП Из ТаблицаПеречислениеЗП Цикл // Проводки по каждой статье ДДС
				
				Проводка = Проводки.Добавить();
				
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = ?(ЗначениеЗаполнено(НазначениеПлатежа),НазначениеПлатежа, "Без указания ведомости"); 
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
				
				Проводка.СчетКт      = СчетКт;
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);			
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаПеречислениеЗП.СтатьяДвиженияДенежныхСредств);
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
				Если РасчетыВВалюте Тогда
					
					Если Проводка.СчетДт.Валютный Тогда
						Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
						Проводка.ВалютнаяСуммаДт = СтрокаПеречислениеЗП.СуммаПлатежа;
					КонецЕсли;
					
					Если Проводка.СчетКт.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
						Проводка.ВалютнаяСуммаКт = СтрокаПеречислениеЗП.СуммаПлатежа;
					КонецЕсли;
					
					Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						СтрокаПеречислениеЗП.СуммаПлатежа, 
						СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
						СтруктураШапкиДокумента.КурсДокумента, 1, 
						СтруктураШапкиДокумента.КратностьДокумента, 1);
				Иначе
					
					Проводка.Сумма = СтрокаПеречислениеЗП.СуммаПлатежа;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НераспределенныйОстаток = СуммаДокумента - ТаблицаПеречислениеЗП.Итог("СуммаПлатежа");
			
			Если НераспределенныйОстаток > 0 Тогда // Проводка с пустой статьей ДДС
			
				Проводка = Проводки.Добавить();
				
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = ?(ЗначениеЗаполнено(НазначениеПлатежа),НазначениеПлатежа, "Без указания ведомости"); 
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
				
				Проводка.СчетКт      = СчетКт;
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);			
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
				Если РасчетыВВалюте Тогда
					
					Если Проводка.СчетДт.Валютный Тогда
						Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
						Проводка.ВалютнаяСуммаДт = НераспределенныйОстаток;
					КонецЕсли;
					
					Если Проводка.СчетКт.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
						Проводка.ВалютнаяСуммаКт = НераспределенныйОстаток;
					КонецЕсли;
					
					Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						НераспределенныйОстаток, 
						СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
						СтруктураШапкиДокумента.КурсДокумента, 1, 
						СтруктураШапкиДокумента.КратностьДокумента, 1);
				Иначе
					
					Проводка.Сумма = НераспределенныйОстаток;
					
				КонецЕсли;
			
			КонецЕсли;
		
		Иначе
			
			РезультатЗапроса = СформироватьЗапросПоВыплатеЗП(Истина); 
			ТаблицаКомпенсации = РезультатЗапроса.Выгрузить(); 
			ТаблицаКомпенсации.Индексы.Добавить("Ведомость, Физлицо");
			
			//ТаблицаПеречислениеЗаработнойПлаты = ПеречислениеЗаработнойПлаты.Выгрузить();
			РезультатЗапроса = СформироватьЗапросПоВыплатеЗП(); 
			ТаблицаПеречислениеЗаработнойПлаты = РезультатЗапроса.Выгрузить(); 
			
			ТаблицаПеречислениеЗаработнойПлаты.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
			ТаблицаПеречислениеЗаработнойПлаты.Колонки.Добавить("СуммаКомпенсации",    ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
			ТаблицаПеречислениеЗаработнойПлаты.Колонки.Добавить("ПериодРегистрации",   ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
			
			Для каждого СтрокаСотрудника Из ТаблицаПеречислениеЗаработнойПлаты Цикл
				Отбор = Новый Структура("Ведомость, Физлицо", СтрокаСотрудника.Ведомость, СтрокаСотрудника.Физлицо);
				СтрокиКомпенсации = ТаблицаКомпенсации.НайтиСтроки(Отбор);
				Если СтрокиКомпенсации.Количество() > 0 Тогда
					СтрокаСотрудника.СуммаКомпенсации = Окр(
						СтрокиКомпенсации[0].КомпенсацияЗаЗадержкуЗарплаты * СтрокаСотрудника.СуммаПлатежа 
						/ (СтрокиКомпенсации[0].Сумма + СтрокиКомпенсации[0].КомпенсацияЗаЗадержкуЗарплаты), 2);
					СтрокаСотрудника.ПериодРегистрации = СтрокиКомпенсации[0].ПериодРегистрации;
				Иначе
					СтрокаСотрудника.СуммаКомпенсации = 0;
				КонецЕсли;
				СтрокаСотрудника.СуммаВзаиморасчетов = СтрокаСотрудника.СуммаПлатежа - СтрокаСотрудника.СуммаКомпенсации;
			КонецЦикла;
			
			Если ТаблицаПеречислениеЗаработнойПлаты.Итог("СуммаКомпенсации") > 0 И НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении("Не заполнен счет затрат на компенсацию за задержку зарплаты!",Отказ, Заголовок);
				Возврат;
			КонецЕсли;
			
			ФормироватьПроводкиСводно = (ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.ВидыСубконто.Найти(
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") = Неопределено);
			
			Если НЕ ФормироватьПроводкиСводно Тогда
				
				Для каждого СтрокаСотрудника Из ТаблицаПеречислениеЗаработнойПлаты Цикл
					
					// Проводка по зарплате
					
					Проводка = Проводки.Добавить();
					
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = СодержаниеПроводки;
					
					Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаСотрудника.Физлицо);
					
					Проводка.СчетКт      = СчетКт;
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаСотрудника.СтатьяДвиженияДенежныхСредств);
										
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
					Если РасчетыВВалюте Тогда
						
						Если Проводка.СчетДт.Валютный Тогда
							Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
							Проводка.ВалютнаяСуммаДт = СтрокаСотрудника.СуммаПлатежа;
						КонецЕсли;
						
						Если Проводка.СчетКт.Валютный Тогда
							Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
							Проводка.ВалютнаяСуммаКт = СтрокаСотрудника.СуммаПлатежа;
						КонецЕсли;
						
						ДанныеОВалюте = МодульВалютногоУчета.ПолучитьКурсВалюты(
							мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
						
						Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
							СтрокаСотрудника.СуммаВзаиморасчетов,
							СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
							СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
							СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
					Иначе
						
						Проводка.Сумма = СтрокаСотрудника.СуммаВзаиморасчетов;
						
					КонецЕсли;
					
					// Проводка по компенсации за задержку зарплаты
					
					Если СтрокаСотрудника.СуммаКомпенсации > 0 Тогда
					
						Проводка = Проводки.Добавить();
						
						Проводка.Период      = СтруктураШапкиДокумента.Дата;
						Проводка.Организация = СтруктураШапкиДокумента.Организация;
						Проводка.Содержание  = СодержаниеПроводки;
						
						Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентом;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);
				
						Проводка.СчетКт      = СчетКт;
						БухгалтерскийУчет.УстановитьСубконто(
							Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
						БухгалтерскийУчет.УстановитьСубконто(
							Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаСотрудника.СтатьяДвиженияДенежныхСредств);
							
						БухгалтерскийУчет.УстановитьПодразделенияПроводки(
							Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
						
						Если РасчетыВВалюте Тогда
							
							Если Проводка.СчетДт.Валютный Тогда
								Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
								Проводка.ВалютнаяСуммаДт = СтрокаСотрудника.СуммаПлатежа;
							КонецЕсли;
							
							Если Проводка.СчетКт.Валютный Тогда
								Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
								Проводка.ВалютнаяСуммаКт = СтрокаСотрудника.СуммаПлатежа;
							КонецЕсли;
							
							ДанныеОВалюте = МодульВалютногоУчета.ПолучитьКурсВалюты(
								мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
							
							Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
								СтрокаСотрудника.СуммаКомпенсации,
								СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
								СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
								СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
						Иначе
							
							Проводка.Сумма = СтрокаСотрудника.СуммаКомпенсации;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				тзЗарплата = ТаблицаПеречислениеЗаработнойПлаты.Скопировать();
				тзЗарплата.Свернуть("Ведомость, СтатьяДвиженияДенежныхСредств", "СуммаВзаиморасчетов,СуммаКомпенсации");
				
				Для каждого СтрокаСотрудника Из тзЗарплата Цикл
					
					Проводка = Проводки.Добавить();
					
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = НазначениеПлатежа + " по ведомости №"+СтрокаСотрудника.Ведомость.Номер
						+ " от " + СтрокаСотрудника.Ведомость.Дата;
					
					Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
					
					Проводка.СчетКт      = СчетКт;
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаСотрудника.СтатьяДвиженияДенежныхСредств);
										
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
					Если РасчетыВВалюте Тогда
						
						Если Проводка.СчетДт.Валютный Тогда
							Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
							Проводка.ВалютнаяСуммаДт = СтрокаСотрудника.СуммаПлатежа;
						КонецЕсли;
						
						Если Проводка.СчетКт.Валютный Тогда
							Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
							Проводка.ВалютнаяСуммаКт = СтрокаСотрудника.СуммаПлатежа;
						КонецЕсли;
						
						ДанныеОВалюте = МодульВалютногоУчета.ПолучитьКурсВалюты(
							мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
						
						Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
							СтрокаСотрудника.СуммаВзаиморасчетов,
							СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
							СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
							СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
					Иначе
						
						Проводка.Сумма = СтрокаСотрудника.СуммаВзаиморасчетов;
						
					КонецЕсли;
					
					// Проводка по компенсации за задержку зарплаты
					
					Если СтрокаСотрудника.СуммаКомпенсации > 0 Тогда
					
						Проводка = Проводки.Добавить();
						
						Проводка.Период      = СтруктураШапкиДокумента.Дата;
						Проводка.Организация = СтруктураШапкиДокумента.Организация;
						Проводка.Содержание  = НазначениеПлатежа + " по ведомости №"+СтрокаСотрудника.Ведомость.Номер
							+ " от " + СтрокаСотрудника.Ведомость.Дата;
						
						Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентом;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);
				
						Проводка.СчетКт      = СчетКт;
						БухгалтерскийУчет.УстановитьСубконто(
							Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
						БухгалтерскийУчет.УстановитьСубконто(
							Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаСотрудника.СтатьяДвиженияДенежныхСредств);
						
						БухгалтерскийУчет.УстановитьПодразделенияПроводки(
							Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
						
						Если РасчетыВВалюте Тогда
							
							Если Проводка.СчетДт.Валютный Тогда
								Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
								Проводка.ВалютнаяСуммаДт = СтрокаСотрудника.СуммаПлатежа;
							КонецЕсли;
							
							Если Проводка.СчетКт.Валютный Тогда
								Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
								Проводка.ВалютнаяСуммаКт = СтрокаСотрудника.СуммаПлатежа;
							КонецЕсли;
							
							ДанныеОВалюте = МодульВалютногоУчета.ПолучитьКурсВалюты(
								мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
							
							Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
								СтрокаСотрудника.СуммаКомпенсации,
								СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
								СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
								СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
						Иначе
							
							Проводка.Сумма = СтрокаСотрудника.СуммаКомпенсации;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// по регистру ВзаиморасчетыСРаботникамиОрганизаций
			
			Для каждого СтрокаСотрудника Из ТаблицаПеречислениеЗаработнойПлаты Цикл
				
				Если ФормироватьДвиженияПоВзаиморасчетамСРаботникамиОрганизаций Тогда
					СтрокаВыплаты = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
					СтрокаВыплаты.Период                = Дата;
					СтрокаВыплаты.ВидДвижения           = ВидДвиженияНакопления.Расход;
					СтрокаВыплаты.ФизЛицо               = СтрокаСотрудника.ФизЛицо;
					СтрокаВыплаты.Организация           = Организация;
					СтрокаВыплаты.ПериодВзаиморасчетов  = СтрокаСотрудника.ПериодРегистрации;
					СтрокаВыплаты.СуммаВзаиморасчетов   = СтрокаСотрудника.СуммаВзаиморасчетов;
				Иначе
					НоваяСтрока = ТаблицаВзаиморасчетовСРаботникамиОрганизаций.Добавить();
					НоваяСтрока.ФизЛицо               = СтрокаСотрудника.ФизЛицо;
					НоваяСтрока.СуммаВзаиморасчетов   = СтрокаСотрудника.СуммаВзаиморасчетов;
				КонецЕсли;
				
			КонецЦикла;
			
			/////////////////////////////////////////////////////////////////////////////////
			// По регистру расчетов с бюджетом по НДФЛ
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ПлДок.Ссылка.Дата > КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
			|			ТОГДА ПлДок.Ссылка.Дата
			|		ИНАЧЕ КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
			|	КОНЕЦ КАК ДатаНДФЛ
			|ИЗ
			|	Документ.СписаниеСРасчетногоСчета.ПеречислениеЗаработнойПлаты КАК ПлДок
			|ГДЕ
			|	ПлДок.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ПлДок.Ссылка.Дата";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ДатаНДФЛ = Выборка.ДатаНДФЛ;
			
			СтруктураДокумента = Новый Структура(
			"ДатаНДФЛ, Ссылка, Период, ОбособленноеПодразделение, Организация",
			ДатаНДФЛ, Ссылка, Дата, Организация, ГоловнаяОрганизация);
			
			ТекстТаблицыВыплаты = 
			"ВЫБРАТЬ
			|	ПеречислениеЗП.Физлицо КАК ФизЛицо,
			|	СУММА(ПеречислениеЗП.СуммаПлатежа) КАК Сумма
			|ПОМЕСТИТЬ ВТВыплатыФизлицам
			|ИЗ
			|	Документ.СписаниеСРасчетногоСчета.ПеречислениеЗаработнойПлаты КАК ПеречислениеЗП
			|ГДЕ
			|	ПеречислениеЗП.Ссылка = &ДокументСсылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ПеречислениеЗП.Физлицо
			|
			|ИМЕЮЩИЕ
			|	СУММА(ПеречислениеЗП.СуммаПлатежа) <> 0
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ФизЛицо";
			
			ПроведениеРасчетов.СформироватьРасчетыПоНДФЛПриВыплате(СтруктураДокумента, ТекстТаблицыВыплаты, Движения.НДФЛРасчетыСБюджетом, Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ);
			

			
			
			// {УчетДоходовИРасходовИП
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
				Если ФормироватьДвиженияПоВзаиморасчетамСРаботникамиОрганизаций Тогда
					ТаблицаАвансов = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Выгрузить();
				Иначе
					ТаблицаАвансов = ТаблицаВзаиморасчетовСРаботникамиОрганизаций;
				КонецЕсли;
				ТаблицаАвансов.Свернуть("Физлицо", "СуммаВзаиморасчетов");
				ТаблицаАвансов.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
				
				ТаблицаАвансов.Колонки.Добавить("ДокументОплаты");
				ТаблицаАвансов.Колонки.Добавить("РеквизитыДокументаОплаты");
				ТаблицаАвансов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "ДокументОплаты");
				ТаблицаАвансов.ЗаполнитьЗначения(
					ДоходыИРасходыПредпринимателя.РеквизитыДокументаОплаты(СтруктураШапкиДокумента), "РеквизитыДокументаОплаты");
				
				ДоходыИРасходыПредпринимателя.ВыплатаЗарплаты(ЭтотОбъект, СтруктураШапкиДокумента, ТаблицаАвансов);
			КонецЕсли;
			// }УчетДоходовИРасходовИП
			
		КонецЕсли;
	КонецЕсли;
	
	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);
	
	//Движения по подсистеме УСН
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
		Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
			НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, Новый Структура("ТаблицаРасчетов", ТаблицаВзаиморасчетов));
		Иначе
			НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗапросПоВыплатеЗП(ПоКомпенсации = Ложь)

	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Если ПоКомпенсации Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК Ведомость,
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
		|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма,
		|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК КомпенсацияЗаЗадержкуЗарплаты
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета.ПеречислениеЗаработнойПлаты КАК СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты
		|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ведомость
		|ГДЕ
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.НомерСтроки,
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ведомость,
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ведомость.Номер КАК Номер,
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ведомость.Дата КАК Дата,
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Физлицо,
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.СуммаПлатежа,
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.СтатьяДвиженияДенежныхСредств,
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ведомость.ПериодРегистрации
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета.ПеречислениеЗаработнойПлаты КАК СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты
		|ГДЕ
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.НомерСтроки,
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ведомость,
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Физлицо,
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.СуммаПлатежа,
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.СтатьяДвиженияДенежныхСредств,
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ведомость.Номер,
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ведомость.Дата,
		|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ведомость.ПериодРегистрации";
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоВыплатеЗП()

Процедура УстановитьОтметкуОбОплате(ОтменаПроведения = Ложь, СтруктураШапкиДокумента = Неопределено)
	
	Если ПлатежноеПоручениеОснование = Неопределено Тогда
		ПлатежноеПоручениеОснование = НайтиДокументПлатежноеПоручение(Ссылка);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПлатежноеПоручениеОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ПлатежноеПоручениеОбъект = ПлатежноеПоручениеОснование.ПолучитьОбъект();
	
	УстанавливатьОтметку = ПроверитьГраницуЗапретаИзмененияДанных(ПлатежноеПоручениеОбъект);
	
	Если УстанавливатьОтметку Тогда
		Если ТипЗнч(ПлатежноеПоручениеОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда		
			Если ОтменаПроведения Тогда
				ПлатежноеПоручениеОбъект.Оплачено = Ложь;
			Иначе
				ПлатежноеПоручениеОбъект.Оплачено = Истина;				
			КонецЕсли;
			
			Попытка
				ПлатежноеПоручениеОбъект.Записать();
			Исключение
				#Если Клиент Тогда
					ТекстСообщения = "Не удалось изменить отметку об оплате для документа: " + ПлатежноеПоручениеОснование + ".
					|Возможно, документ в настоящий момент редактируется.";
					Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
				#КонецЕсли
			КонецПопытки;
		КонецЕсли;
	Иначе
		#Если Клиент Тогда
			ТекстСообщения = "Не удалось изменить отметку об оплате для документа: " + ПлатежноеПоручениеОснование + ".
			|Документ находится в периоде, закрытом для редактирования.";
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьГраницуЗапретаИзмененияДанных(ДокументОбъект)
	
	СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ГраницаПоОрганизации = СоответствиеГраницЗапрета[ДокументОбъект.Организация];
	Если ГраницаПоОрганизации = Неопределено Тогда
		ГраницаПоОрганизации = СоответствиеГраницЗапрета["ОбщаяДатаЗапретаРедактирования"];    
	КонецЕсли;
	
	Если НЕ ГраницаПоОрганизации = Неопределено 
		И ДокументОбъект.Дата <= ГраницаПоОрганизации	Тогда
		
		Возврат Ложь;
	КонецЕсли;		
	
	Возврат Истина;

КонецФункции

Процедура ЗаполнитьПоДокументуОснованию(Основание, ВидДокументаОснования)
	
	Если ВидДокументаОснования = "ВозвратТоваровОтПокупателя"  Тогда
		ВидОперации  = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
	Иначе
		ВидОперации  = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
	КонецЕсли; 
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
	
	ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
	
	Если ВидДокументаОснования = "ОтчетКомиссионераОПродажах"тогда
		ТаблицаСуммОснования = Новый ТаблицаЗначений();
		ТаблицаСуммОснования.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		ТаблицаСуммОснования.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
		ТаблицаСуммОснования.Колонки.Добавить("СуммаНДС",     ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		
		СтрокаТаблицыСумм = ТаблицаСуммОснования.Добавить();
		
		СтрокаТаблицыСумм.СуммаПлатежа	= Основание.СуммаВознаграждения;
		СтрокаТаблицыСумм.СтавкаНДС	    = Основание.СтавкаНДСВознаграждения;
		СтрокаТаблицыСумм.СуммаНДС	    = Основание.Товары.Итог("СуммаНДСВознаграждения");
	Иначе
		ТаблицаСуммОснования = УчетНДС.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
		ТаблицаСуммОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		
		Если ВидДокументаОснования = "ОтчетКомитентуОПродажах" Тогда
			
			ТаблицаСуммОснования.ЗаполнитьЗначения(0, "СуммаНДС");
			Если Основание.УдержатьВознаграждение Тогда 
				СуммаКоррПлатежа = ТаблицаСуммОснования.Итог("СуммаПлатежа") - Основание.СуммаВознаграждения;
				НоваяКолонкаСумм = ОбщегоНазначения.РаспределитьПропорционально(
				СуммаКоррПлатежа, ТаблицаСуммОснования.ВыгрузитьКолонку("СуммаПлатежа"));
				Если НоваяКолонкаСумм <> Неопределено Тогда
					ТаблицаСуммОснования.ЗагрузитьКолонку(НоваяКолонкаСумм, "СуммаПлатежа");
				КонецЕсли; 
				
				Если НЕ Основание.СуммаВключаетНДС Тогда
					СуммаКоррНДС	= ТаблицаСуммОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДСВознаграждения");
					НоваяКолонкаНДС = ОбщегоНазначения.РаспределитьПропорционально(
					СуммаКоррНДС, ТаблицаСуммОснования.ВыгрузитьКолонку("СуммаПлатежа"));
					Если НоваяКолонкаНДС <> Неопределено Тогда
						ТаблицаСуммОснования.ЗагрузитьКолонку(НоваяКолонкаНДС, "СуммаПлатежа");
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
			Если ДоговорКонтрагента.УчетАгентскогоНДС Тогда
				СуммаКоррНДС	= ТаблицаСуммОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДС");
				НоваяКолонкаНДС = ОбщегоНазначения.РаспределитьПропорционально(
				СуммаКоррНДС, ТаблицаСуммОснования.ВыгрузитьКолонку("СуммаПлатежа"));
				Если НоваяКолонкаНДС <> Неопределено Тогда
					ТаблицаСуммОснования.ЗагрузитьКолонку(НоваяКолонкаНДС,"СуммаПлатежа");
				КонецЕсли; 
			КонецЕсли;
			
		ИначеЕсли ВидДокументаОснования = "ПоступлениеДопРасходов" Тогда
			
			Если (Основание.Сумма <> 0) ИЛИ (Основание.СуммаНДС <> 0) Тогда
				Если ТаблицаСуммОснования.Количество() = 0 Тогда
					СтрокаТаблицыСумм = ТаблицаСуммОснования.Добавить();
				Иначе
					СтрокаТаблицыСумм = ТаблицаСуммОснования[0];
				КонецЕсли;
				СтрокаТаблицыСумм.СуммаПлатежа	= СтрокаТаблицыСумм.СуммаПлатежа + Основание.Сумма;
				СтрокаТаблицыСумм.СуммаНДС		= СтрокаТаблицыСумм.СуммаНДС + Основание.СуммаНДС;
				Если НЕ Основание.СуммаВключаетНДС Тогда
					СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + Основание.СуммаНДС;
				КонецЕсли; 
			КонецЕсли;
			ТаблицаСуммОснования.ЗаполнитьЗначения(Основание.СтавкаНДС, "СтавкаНДС");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаСуммОснования, ТаблицаПлатежей);
	Если ТаблицаПлатежей.Количество() = 0 Тогда
		ТаблицаПлатежей.Добавить();
	КонецЕсли;
	ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,                     "ДоговорКонтрагента");
	ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,      "КурсВзаиморасчетов");
	ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность, "КратностьВзаиморасчетов");
	
	// При вводе на основании устанавливаем режим распределения оплаты "По документу",
	// кроме ввода на основании отчета комитенту - задолженность перед комитентом образуется другими документами
	Если ВидДокументаОснования = "ОтчетКомитентуОПродажах" Тогда
		ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.Автоматически, "СпособПогашенияЗадолженности");
	Иначе
		ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.ПоДокументу, "СпособПогашенияЗадолженности");
		ТаблицаПлатежей.ЗаполнитьЗначения(Основание, "Сделка");
	КонецЕсли;
	
	Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
		Если ДоговорКонтрагента.УчетАгентскогоНДС Тогда
			СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаПлатежа - СтрокаПлатеж.СуммаНДС;
			СтрокаПлатеж.СуммаНДС     = 0;
			СтрокаПлатеж.СтавкаНДС    = Перечисления.СтавкиНДС.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"), "СуммаВзаиморасчетов");
	
	Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
		ПроверкаКурсовВалют(СтрокаПлатеж);
		Если ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			Если Основание.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
				СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаПлатеж.СуммаПлатежа,
				мВалютаРегламентированногоУчета, ДоговорКонтрагента.ВалютаВзаиморасчетов,
				1, Основание.КурсВзаиморасчетов,
				1, Основание.КратностьВзаиморасчетов);
				
				СтрокаПлатеж.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаПлатеж.СуммаНДС,
				мВалютаРегламентированногоУчета, ДоговорКонтрагента.ВалютаВзаиморасчетов,
				1, Основание.КурсВзаиморасчетов,
				1, Основание.КратностьВзаиморасчетов);
			КонецЕсли;
			
			СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаВзаиморасчетов,
			ДоговорКонтрагента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
			СтрокаПлатеж.КурсВзаиморасчетов, 1,
			СтрокаПлатеж.КратностьВзаиморасчетов, 1);
			
			СтрокаПлатеж.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаНДС,
			ДоговорКонтрагента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
			СтрокаПлатеж.КурсВзаиморасчетов, 1,
			СтрокаПлатеж.КратностьВзаиморасчетов, 1);
			
		КонецЕсли;
	КонецЦикла; 
	
	Если ВидДокументаОснования = "ОтчетКомиссионераОПродажах" Тогда
		ТаблицаПлатежей.ЗаполнитьЗначения(
		Основание.СчетУчетаРасчетовЗаПосредническиеУслуги, "СчетУчетаРасчетовСКонтрагентом"); 
		ТаблицаПлатежей.ЗаполнитьЗначения(
		Основание.СчетУчетаРасчетовПоАвансамВыданным, "СчетУчетаРасчетовПоАвансам") ;
	ИначеЕсли ВидДокументаОснования = "ОтчетКомитентуОПродажах" Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
		Основание.Организация, Контрагент, ДоговорКонтрагента);
		Если Основание.УдержатьВознаграждение Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(
			Основание.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовСКонтрагентом");
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетРасчетовСКомитентом, "СчетУчетаРасчетовСКонтрагентом");
		КонецЕсли;
		ТаблицаПлатежей.ЗагрузитьКолонку(
		ТаблицаПлатежей.ВыгрузитьКолонку("СчетУчетаРасчетовСКонтрагентом"), "СчетУчетаРасчетовПоАвансам");
	Иначе
		ТаблицаПлатежей.ЗаполнитьЗначения(
		Основание.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом");
		ТаблицаПлатежей.ЗаполнитьЗначения(
		Основание.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание) 

	Если (Основание = Неопределено) ИЛИ Не ЭтотОбъект.Метаданные().Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		Возврат;
	КонецЕсли;
	
	/// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание, Ложь);

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")	Тогда
		Если Основание.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
			Сообщить("Платежная ведомость оформлена на выплату из кассы.");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОснование     = Основание;
	ВалютаДокумента       = мВалютаРегламентированногоУчета;
	ВидДокументаОснования = Основание.Метаданные().Имя;

	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
	Если ВидДокументаОснования = "ПоступлениеТоваровУслуг"
		ИЛИ ВидДокументаОснования = "ПоступлениеДопРасходов" 
		ИЛИ ВидДокументаОснования = "ПоступлениеНМА"
		ИЛИ ВидДокументаОснования = "ОтчетКомиссионераОПродажах"
		ИЛИ ВидДокументаОснования = "ОтчетКомитентуОПродажах"
		ИЛИ ВидДокументаОснования = "ВозвратТоваровОтПокупателя" Тогда

	 	ЗаполнитьПоДокументуОснованию(Основание, ВидДокументаОснования);
		
	ИначеЕсли ВидДокументаОснования = "ЗарплатаКВыплатеОрганизаций" Тогда

		ЗаполнитьПоЗарплатеКВыплатеОрганизацииРегл(Основание);
    	
	ИначеЕсли ВидДокументаОснования = "ПлатежноеПоручение" Тогда
		
		Если ЗначениеЗаполнено(Основание.ДокументОснование) Тогда
			ВидДокументаОснования2 = Основание.ДокументОснование.Метаданные().Имя;
		Иначе
			ВидДокументаОснования2 = "";
		КонецЕсли;
		
		Если ВидДокументаОснования2 = "ПоступлениеТоваровУслуг"
			ИЛИ ВидДокументаОснования2 = "ПоступлениеДопРасходов" 
			ИЛИ ВидДокументаОснования2 = "ПоступлениеНМА"
			ИЛИ ВидДокументаОснования2 = "ОтчетКомиссионераОПродажах"
			ИЛИ ВидДокументаОснования2 = "ОтчетКомитентуОПродажах"
			ИЛИ ВидДокументаОснования2 = "ВозвратТоваровОтПокупателя" Тогда
			
			ЗаполнитьПоДокументуОснованию(Основание.ДокументОснование, ВидДокументаОснования2);
			
			ВсегоСумма 	= РасшифровкаПлатежа.Итог("СуммаПлатежа");
			ВсегоНДС	= РасшифровкаПлатежа.Итог("СуммаНДС");
			Для Каждого Строка Из РасшифровкаПлатежа Цикл
				Строка.СтатьяДвиженияДенежныхСредств = Основание.СтатьяДвиженияДенежныхСредств;
				Если ВсегоСумма <> Основание.СуммаДокумента И ВсегоСумма <> 0 Тогда
					Строка.СуммаПлатежа = Строка.СуммаПлатежа * (Основание.СуммаДокумента/ВсегоСумма);
					
					ТекущаяВалютаВзаиморасчетов = ?(ЗначениеЗаполнено(Строка.ДоговорКонтрагента), Строка.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента);
					Строка.СуммаВзаиморасчетов 	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаПлатежа, ВалютаДокумента,
																ТекущаяВалютаВзаиморасчетов,
																КурсДокумента, Строка.КурсВзаиморасчетов,
																КратностьДокумента, Строка.КратностьВзаиморасчетов);

				КонецЕсли;
				Если ВсегоНДС <> Основание.СуммаНДС И ВсегоНДС <> 0 Тогда
					Строка.СуммаНДС = Строка.СуммаНДС * (Основание.СуммаНДС/ВсегоНДС);
				КонецЕсли;
			КонецЦикла;
			
			Если РасшифровкаПлатежа.Количество() > 0 Тогда
				ПоследняяСтрока = РасшифровкаПлатежа[РасшифровкаПлатежа.Количество()-1];
				Если РасшифровкаПлатежа.Итог("СуммаПлатежа") <> Основание.СуммаДокумента Тогда
					ПоследняяСтрока.СуммаПлатежа = ПоследняяСтрока.СуммаПлатежа + (Основание.СуммаДокумента - РасшифровкаПлатежа.Итог("СуммаПлатежа"));
					ТекущаяВалютаВзаиморасчетов = ?(ЗначениеЗаполнено(ПоследняяСтрока.ДоговорКонтрагента), ПоследняяСтрока.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента);
					Строка.СуммаВзаиморасчетов 	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ПоследняяСтрока.СуммаПлатежа, ВалютаДокумента,
																ТекущаяВалютаВзаиморасчетов,
																КурсДокумента, ПоследняяСтрока.КурсВзаиморасчетов,
																КратностьДокумента, ПоследняяСтрока.КратностьВзаиморасчетов);
				КонецЕсли;
				Если РасшифровкаПлатежа.Итог("СуммаНДС") <> Основание.СуммаНДС Тогда
					ПоследняяСтрока.СуммаНДС = ПоследняяСтрока.СуммаНДС + (Основание.СуммаНДС - РасшифровкаПлатежа.Итог("СуммаНДС"));
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВидДокументаОснования2 = "ЗарплатаКВыплатеОрганизаций" Тогда
			
			ЗаполнитьПоЗарплатеКВыплатеОрганизацииРегл(Основание.ДокументОснование);
			Если РасшифровкаПлатежа.Количество() > 0 Тогда
				РасшифровкаПлатежа[0].СуммаПлатежа = Основание.СуммаДокумента;
			КонецЕсли;
			
			ВсегоСумма 	= ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа");
			
			Для Каждого Строка Из ПеречислениеЗаработнойПлаты Цикл
				Строка.СтатьяДвиженияДенежныхСредств = Основание.СтатьяДвиженияДенежныхСредств;
				
				Если ВсегоСумма <> Основание.СуммаДокумента И ВсегоСумма <> 0 Тогда
					Строка.СуммаПлатежа = Строка.СуммаПлатежа * (Основание.СуммаДокумента/ВсегоСумма);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПеречислениеЗаработнойПлаты.Количество() > 0 Тогда
				ПоследняяСтрока = ПеречислениеЗаработнойПлаты[ПеречислениеЗаработнойПлаты.Количество()-1];
				Если ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа") <> Основание.СуммаДокумента Тогда
					ПоследняяСтрока.СуммаПлатежа = ПоследняяСтрока.СуммаПлатежа + (Основание.СуммаДокумента - ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа"));
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если Основание.ПеречислениеВБюджет Тогда
				Если Основание.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
					ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;			
				Иначе
					ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
				КонецЕсли;
			Иначе
				Если Основание.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
					ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
				ИначеЕсли Основание.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
					ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
				Иначе
					ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
				СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
				СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = Основание.СтатьяДвиженияДенежныхСредств;
				СтрокаПлатеж.СуммаПлатежа = Основание.СуммаДокумента;
				СтрокаПлатеж.СтавкаНДС = Основание.СтавкаНДС;
				СтрокаПлатеж.СуммаНДС = Основание.СуммаНДС;
			КонецЕсли;
			
			Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
				
				СчетИАналитикаБУ = ПолучитьСчетИАналитикуПеречисленияНалога(
				Основание.КодБК, Основание.ПоказательОснования, Основание.КПППлательщика);
				
				СчетУчетаРасчетовСКонтрагентом = СчетИАналитикаБУ.СчетУчета;
				
				Для й = 1 По 3 Цикл
					
					Если ЗначениеЗаполнено(СчетИАналитикаБУ["ВидСубконто" + й]) Тогда
						Если ЗначениеЗаполнено(СчетИАналитикаБУ["Субконто" + й]) Тогда
							ЭтотОбъект["СубконтоДт" + й] = СчетИАналитикаБУ["Субконто" + й];
						Иначе
							ТипСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[СчетИАналитикаБУ["ВидСубконто" + й]].ТипЗначения;
							ЭтотОбъект["СубконтоДт" + й] = ТипСубконто.ПривестиЗначение(ЭтотОбъект["СубконтоДт" + й]);
						КонецЕсли;
					Иначе
						ЭтотОбъект["СубконтоДт" + й] = Неопределено;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
					Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета
						И НЕ ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
						ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
					КонецЕсли;
				Иначе
					ВалютаДокумента = мВалютаРегламентированногоУчета;
				КонецЕсли;
				
				СписокВидовДоговора = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
				УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговора);
				
				СтрокаПлатеж.ДоговорКонтрагента      = ДоговорКонтрагента;
				СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
				СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(
				ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
				СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
				
				СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаПлатеж.СуммаПлатежа,
				ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов,
				КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
				КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
				
				Если НЕ (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам) Тогда
					
					СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
					Организация, Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
					
					Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю тогда
						СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетовПокупателя;
						СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансовПокупателя;
					Иначе
						СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетов;
						СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансов;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		ДатаВходящегоДокумента  = Основание.Дата;
		НомерВходящегоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
		СчетКонтрагента = Основание.СчетКонтрагента;
		
		НазначениеПлатежа = СтрЗаменить(Основание.НазначениеПлатежа, Символы.ПС, " ");
		
	КонецЕсли;
 	
	Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	Иначе
		СчетБанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;	
	КонецЕсли; 

	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	Ответственный             = глЗначениеПеременной("глТекущийПользователь");
	
	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
    
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Документ должен принадлежать хотя бы к одному виду учета  (бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверятьСоответствиеСуммыДокументаИВедомости = Истина;
	ФормироватьДвиженияПоВзаиморасчетамСРаботникамиОрганизаций = Истина;
	Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() Тогда
		ФормироватьДвиженияПоВзаиморасчетамСРаботникамиОрганизаций = Ложь;
		БУ = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		Если БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") = Неопределено Тогда
			ПроверятьСоответствиеСуммыДокументаИВедомости = Ложь;
		КонецЕсли;
	КонецЕсли;

	ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента,Отказ, Заголовок);
	
	ТаблицаВзаиморасчетовСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций.ВыгрузитьКолонки();

	// Движения по документу
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);		
	КонецЕсли;

	// Отметка об оплате
	Если НЕ Отказ Тогда
		УстановитьОтметкуОбОплате(, СтруктураШапкиДокумента);
	КонецЕсли;	

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	ДоговорКонтрагента = РасшифровкаПлатежа[0].ДоговорКонтрагента;

	Если НеПодтвержденоВыпискойБанка И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
		ТекстСообщения = "Проведение документа возможно только после установки флага ""Подтверждено выпиской банка"".
		|	Документ будет записан без проведения."; 
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок, СтатусСообщения.Информация);
		РежимЗаписи = ?(Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
	// Отметка об оплате
	Если НЕ Отказ Тогда
		УстановитьОтметкуОбОплате(Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	НомерВходящегоДокумента = "";
	ДатаВходящегоДокумента = '00010101';
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

ЕстьУчетПоСтатьямДДС = УправлениеДенежнымиСредствами.ЕстьУчетПоСтатьямДДС();

