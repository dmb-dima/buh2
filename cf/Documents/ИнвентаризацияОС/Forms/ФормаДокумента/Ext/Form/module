////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

// Хранит текущую дату документа - для проверки перехода документа в другой 
// период установки номера
Перем мТекущаяДатаДокумента; 
// Хранит соответствие объектов ОС и их инвентарных номеров из регистра 
// сведений - для ускорения вывода строк табличного поля
Перем СоответствиеОС_ИнвентарныйНомер;
// Хранит соответствие объектов ОС и их МОЛов из регистра
// сведений - для ускорения вывода строк табличного поля
Перем СоответствиеОС_МОЛ;
// Хранит индекс удаляемого элемента табличного поля - для корректной 
// обработки удаления председателя инвентаризационной комиссии
Перем мУдаляемыйЭлементИндекс;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОС,ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ИнвентаризационнаяКомиссия,ЭлементыФормы.КоманднаяПанельИнвентаризационнаяКомиссия);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры


// Функция рассчитывает восстановительную стоимость ОС по списку на дату 
// документа. Если список не задан, по всем ОС, имеющим восстановительную
// стоимость на дату документа. Используется для автозаполнения табличной части
// "ОС".
//
// Параметры:
//  СписокОС       - Массив - Список ОС, по которым рассчитывать остатки.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица со списком ОС и их восстановительной стоимостью.
//
Функция ОстаткиОС(СписокОС = Неопределено)
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ДатаОстатков",  Дата);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("СубконтоОС",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("СписокОС",      СписокОС);
	
	УсловиеОС = ?(ЗначениеЗаполнено(СписокОС), "И ОсновноеСредство В(&СписокОС)", "");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБухгалтерскийУчет.Местонахождение КАК ПодразделениеОрганизации,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ
	|	ОсновныеСредства
	|ИЗ
	|	(ВЫБРАТЬ
	|		МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство КАК ОсновноеСредство,
	|		МестонахождениеОСБухгалтерскийУчет.Местонахождение КАК Местонахождение
	|	ИЗ
	|		(ВЫБРАТЬ 
	|			МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|			МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Местонахождение
	|		ИЗ 
	|			РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков,	Организация = &Организация " + УсловиеОС + ") КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних) КАК МестонахождениеОСБухгалтерскийУчет
	|	ГДЕ МестонахождениеОСБухгалтерскийУчет.Местонахождение = &Подразделение) КАК МестонахождениеОСБухгалтерскийУчет
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ДатаОстатков, Организация = &Организация " + УсловиеОС + ") КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|	ПО МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|;
	|ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(ХозрасчетныйОстатки_ВосстановительнаяСтоимость.СуммаОстатокДт, 0) КАК ВосстановительнаяСтоимость
	|ИЗ
	|	ОсновныеСредства
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков,
	|	                                                              Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетУчета ИЗ ОсновныеСредства),
	|	                                                              ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), 
	|	                                                              Организация = &Организация
	// {ОбособленныеПодразделения
	|	                                                              И Подразделение В (ВЫБРАТЬ РАЗЛИЧНЫЕ ПодразделениеОрганизации ИЗ ОсновныеСредства)
	// }ОбособленныеПодразделения 
	|	                                                              И Субконто1 В (ВЫБРАТЬ РАЗЛИЧНЫЕ ОсновноеСредство ИЗ ОсновныеСредства)) КАК ХозрасчетныйОстатки_ВосстановительнаяСтоимость
	|	ПО ОсновныеСредства.ОсновноеСредство = ХозрасчетныйОстатки_ВосстановительнаяСтоимость.Субконто1";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ОстаткиОС()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура заполняет соответствие выбранных в форме объектов ОС 
// и их инвентарных номеров по срезу последних на дату документа из регистра 
// сведений "ПервоначальныеСведенияОСБухгалтерскийУчет"
// 
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОсновныеСредства или Массив
//
Процедура ЗаполнитьСоответствиеОС_ИнвентарныйНомер(ОсновноеСредство)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	 |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер
	 |ИЗ
	 |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СоответствиеОС_ИнвентарныйНомер.Вставить(Результат.ОсновноеСредство, Результат.ИнвентарныйНомер);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСоответствиеОС_ИнвентарныйНомер()

// Функция определяет инвентарный номер по объекту ОС
// по соответствию СоответствиеОС_ИнвентарныйНомер
// 
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОсновныеСредства
//                     
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьСоответствиеОС_ИнвентарныйНомер(ОсновноеСредство);
	
	Если СоответствиеОС_ИнвентарныйНомер[ОсновноеСредство] = Неопределено Тогда
		ЗаполнитьСоответствиеОС_ИнвентарныйНомер(ОсновноеСредство);
	КонецЕсли;
	
	Возврат СоответствиеОС_ИнвентарныйНомер[ОсновноеСредство];
	
КонецФункции // ПолучитьСоответствиеОС_ИнвентарныйНомер()

// Процедура заполняет соответствие выбранных в форме объектов ОС 
// и соответствующих им МОЛ по срезу последних на дату документа из регистра 
// сведений "МестонахождениеОСБухгалтерскийУчет"
// 
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОсновныеСредства или Массив
//
Процедура ЗаполнитьСоответствиеОС_МОЛ(ОсновноеСредство)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("Дата",             Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СоответствиеОС_МОЛ.Вставить(Результат.ОсновноеСредство, Результат.МОЛ);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСоответствиеОС_МОЛ()

// Функция определяет МОЛ по объекту ОС 
// по соответствию СоответствиеОС_ИнвентарныйНомер
// 
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОсновныеСредства
//                     
// Возвращаемое значение:
//  СправочникСсылка.ФизическиеЛица
//
Функция ПолучитьСоответствиеОС_МОЛ(ОсновноеСредство);
	
	Если СоответствиеОС_МОЛ[ОсновноеСредство] = Неопределено Тогда
		ЗаполнитьСоответствиеОС_МОЛ(ОсновноеСредство);
	КонецЕсли;
	
	Возврат СоответствиеОС_МОЛ[ОсновноеСредство];
	
КонецФункции // ПолучитьСоответствиеОС_МОЛ()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ
//

// Обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Обработчик события "ПриИзменении" поля ввода Организация.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении реквизита Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));

КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
//

// Процедура вызывается при нажатии кнопки "Подбор" командной панели табличной
// части "ОС", вызывает диалог подбора основных средств.
//
Процедура КоманднаяПанельОСПодбор(Кнопка)
	
	ФормаВыбора = Справочники.ОсновныеСредства.ПолучитьФормуВыбора(, ЭтаФорма);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();
	
КонецПроцедуры // КоманднаяПанельОСПодбор()

// Процедура вызывается при выборе пункта "По остаткам" из меню "Заполнить" 
// командной панели табличной части "ОС", производит заполнение табличной
// части основными средствами, по которым имеются остатки на дату документа.
//
Процедура КоманднаяПанельОСЗаполнитьПоОстаткам(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Заполнение возможно только при выбранной организации.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Предупреждение("Заполнение возможно только при выбранном подразделении");
		Возврат;
	КонецЕсли;
	
	Если ОС.Количество() > 0 Тогда
	
		Если Вопрос("Перед заполнением табличная часть будет очищена. Заполнить?", 
		            РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОС.Очистить();
	
	ВыборкаОС = ОстаткиОС();
	
	Для Каждого СтрокаОС Из ВыборкаОС Цикл
		
		НоваяСтрока = ОС.Добавить();
		
		НоваяСтрока.ОсновноеСредство       = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.СтоимостьПоДаннымУчета = СтрокаОС.ВосстановительнаяСтоимость;
		НоваяСтрока.НаличиеПоДаннымУчета   = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельОСЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта "Данные учета" из меню "Заполнить" 
// командной панели табличной части "ОС", производит заполнение колонок 
// табличной части с данными учета для списка основных средств, заданного
// в табличной части.
//
Процедура КоманднаяПанельОСЗаполнитьДанныеУчета(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Заполнение возможно только при выбранной организации.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Предупреждение("Заполнение возможно только при выбранном подразделении");
		Возврат;
	КонецЕсли;
	
	Если ОС.Количество() > 0 Тогда
	
		Если Вопрос("При заполнении существующие данные будут пересчитаны! Продолжить?", 
		            РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	ВыборкаОС = ОстаткиОС(СписокОС);
	ВыборкаОС.Индексы.Добавить("ОсновноеСредство");
	
	Для Каждого СтрокаОС Из ОС Цикл
		
		ОстатокОС = ВыборкаОС.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
		
		Если НЕ (ОстатокОС = Неопределено) Тогда
		
			СтрокаОС.СтоимостьПоДаннымУчета = ОстатокОС.ВосстановительнаяСтоимость;
			СтрокаОС.НаличиеПоДаннымУчета   = Истина;
			
		Иначе
			
			СтрокаОС.СтоимостьПоДаннымУчета = 0;
			СтрокаОС.НаличиеПоДаннымУчета   = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельОСЗаполнитьДанныеУчета()

// Процедура вызывается при выборе пункта "Фактические данные" из меню 
// "Заполнить"  командной панели табличной части "ОС", производит заполнение 
// колонок табличной части с данными учета для списка основных средств, 
// заданного в табличной части.
//
Процедура КоманднаяПанельОСЗаполнитьФактическиеДанные(Кнопка)
	
	Если ОС.Количество() > 0 Тогда
	
		Если Вопрос("При заполнении существующие данные будут пересчитаны! Продолжить?", 
		            РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаОС Из ОС Цикл
		
		СтрокаОС.СтоимостьФактическая = СтрокаОС.СтоимостьПоДаннымУчета;
		СтрокаОС.НаличиеФактическое   = СтрокаОС.НаличиеПоДаннымУчета;
		
	КонецЦикла;
	  
КонецПроцедуры // КоманднаяПанельОСЗаполнитьФактическиеДанные()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели табличной
// части "Инвентаризационная комиссия", вызывает диалог подбора из справочника
// "Физические лица".
//
Процедура КоманднаяПанельИнвентаризационнаяКомиссияПодбор(Кнопка)
	
	Форма = Справочники.ФизическиеЛица.ПолучитьФормуВыбора(, ЭтаФорма);
	Форма.РежимВыбора = Истина;
	Форма.ЗакрыватьПриВыборе = Ложь;
	Форма.Открыть();

КонецПроцедуры // КоманднаяПанельИнвентаризационнаяКомиссияПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	   	
КонецПроцедуры // ПередОткрытием()

// Обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		// При копировании очищаются данные учета.
		Если НЕ ПараметрОбъектКопирования = Неопределено Тогда
			
			Для Каждого ОсновноеСредство Из ОС Цикл
				
				ОсновноеСредство.СтоимостьПоДаннымУчета = 0;
				ОсновноеСредство.НаличиеПоДаннымУчета   = Ложь;
	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	// Установить список документов-основания для проведения инвентаризации
	СписокВидовДокументОснование = Новый СписокЗначений();
	СписокВидовДокументОснование.Добавить("Приказ");
	СписокВидовДокументОснование.Добавить("Постановление");
	СписокВидовДокументОснование.Добавить("Распоряжение");
	ЭлементыФормы.ДокументОснованиеВид.СписокВыбора = СписокВидовДокументОснование;

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	
	// Заполнить соответствие объектов ОС и их инвентарных номеров
	ЗаполнитьСоответствиеОС_ИнвентарныйНомер(ОС.ВыгрузитьКолонку("ОсновноеСредство"));
	
	// Заполнить соответствие объектов ОС и МОЛ
	ЗаполнитьСоответствиеОС_МОЛ(ОС.ВыгрузитьКолонку("ОсновноеСредство"));
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,Подразделение");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.ОС);
	мТекущаяДатаДокумента = Дата;
	
	// {ОбособленныеПодразделения
 	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
Процедура ПриЗакрытии()
				
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры //ПриЗакрытии

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

// Обработчки события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		
		// Заполнение табличной части ОС
		Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
					
			СтрокаТабличнойЧасти = ОС.Найти(ЗначениеВыбора, "ОсновноеСредство");
			
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				
				Предупреждение("Это основное средство уже подобрано!", 60);
				
			Иначе
				
				НоваяСтрока = ОС.Добавить();
				
				НоваяСтрока.ОсновноеСредство = ЗначениеВыбора;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// заполнение табличной части ИнвентаризационнаяКомиссия
		Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ФизическиеЛица") Тогда

			СтрокаТабличнойЧасти = ИнвентаризационнаяКомиссия.Найти(ЗначениеВыбора, "ФизЛицо");

			Если НЕ (СтрокаТабличнойЧасти = Неопределено) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Физическое лицо <" + ЗначениеВыбора + "> уже подобрано!",,, СтатусСообщения.Обычное);

			Иначе
				
				НоваяСтрока = ИнвентаризационнаяКомиссия.Добавить();
				
				НоваяСтрока.ФизЛицо = ЗначениеВыбора;
				Если ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
					НоваяСтрока.Председатель = Истина;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ "ОС"
//

// Обработчик события "ПриВыводеСтроки" табличной части "ОС".
//
Процедура ОСПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.ОС.Колонки.ИнвентарныйНомер.Видимость Тогда
		ОформлениеСтроки.Ячейки.ИнвентарныйНомер.УстановитьТекст(ПолучитьСоответствиеОС_ИнвентарныйНомер(ДанныеСтроки.ОсновноеСредство));
	КонецЕсли;
	
	Если ЭлементыФормы.ОС.Колонки.МОЛ.Видимость Тогда
		ОформлениеСтроки.Ячейки.МОЛ.УстановитьТекст(ПолучитьСоответствиеОС_МОЛ(ДанныеСтроки.ОсновноеСредство));
	КонецЕсли;
	
	РазницаПоНаличию   = Число(ДанныеСтроки.НаличиеФактическое) - Число(ДанныеСтроки.НаличиеПоДаннымУчета);
	РазницаПоСтоимости = ДанныеСтроки.СтоимостьФактическая - ДанныеСтроки.СтоимостьПоДаннымУчета;
	
	ОформлениеСтроки.Ячейки.ИзлишекКоличество.УстановитьТекст(?(РазницаПоНаличию > 0, Формат(РазницаПоНаличию, "ЧЦ=15; ЧДЦ=0"), ""));
	ОформлениеСтроки.Ячейки.НедостачаКоличество.УстановитьТекст(?(РазницаПоНаличию < 0, Формат(-РазницаПоНаличию, "ЧЦ=15; ЧДЦ=0"), ""));
	ОформлениеСтроки.Ячейки.ИзлишекСумма.УстановитьТекст(?(РазницаПоСтоимости > 0, Формат(РазницаПоСтоимости, "ЧЦ=15; ЧДЦ=2"), ""));
	ОформлениеСтроки.Ячейки.НедостачаСумма.УстановитьТекст(?(РазницаПоСтоимости < 0, Формат(-РазницаПоСтоимости, "ЧЦ=15; ЧДЦ=2"), ""));
	
	 ОформлениеСтроки.Ячейки.СтоимостьФактическая.ТолькоПросмотр = (НЕ ДанныеСтроки.СтоимостьПоДаннымУчета = 0);
	
КонецПроцедуры // ОСПриВыводеСтроки()

// Обработчик события "ПриИзмененииФлажка" табличной части "ОС".
//
Процедура ОСПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "НаличиеФактическое" Тогда
		
		Если Элемент.ТекущиеДанные.НаличиеПоДаннымУчета
		   И НЕ (Элемент.ТекущиеДанные.СтоимостьПоДаннымУчета = 0) Тогда
		   
			Если Элемент.ТекущиеДанные.НаличиеФактическое Тогда
			   
			   Элемент.ТекущиеДанные.СтоимостьФактическая = Элемент.ТекущиеДанные.СтоимостьПоДаннымУчета;
			   
			Иначе
			   
			   Элемент.ТекущиеДанные.СтоимостьФактическая = 0;
			 
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОСПриИзмененииФлажка()

// Обработчик события "ПриНачалеРедактирования" табличной части "ОС".
//
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.СтоимостьПоДаннымУчета = 0;
		Элемент.ТекущиеДанные.НаличиеПоДаннымУчета   = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ОСПриНачалеРедактирования()

// Обработчик события "ПриИзменении" поля "Основное средство"
// табличного поля "Основные средства".
//
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	ЭлементыФормы.ОС.ТекущиеДанные.СтоимостьПоДаннымУчета = 0;
	ЭлементыФормы.ОС.ТекущиеДанные.НаличиеПоДаннымУчета   = Ложь;
	
КонецПроцедуры // ОСОсновноеСредствоПриИзменении()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ "Инвентаризационная комиссия"
//

// Обработчик события "ПриИзмененииФлажка" табличной части 
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "Председатель" Тогда
		
		Если НЕ (Элемент.ТекущиеДанные[Колонка.Имя]) Тогда
			Элемент.ТекущиеДанные[Колонка.Имя] = Истина;
		КонецЕсли;
		
		Для Каждого Строка Из ИнвентаризационнаяКомиссия Цикл
			
			Если НЕ (Строка.НомерСтроки = Элемент.ТекущиеДанные.НомерСтроки) Тогда
				Строка.Председатель = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры // ИнвентаризационнаяКомиссияПриИзмененииФлажка()

// Обработчик события "ПередУдалением" табличной части
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияПередУдалением(Элемент, Отказ)
	
	мУдаляемыйЭлементИндекс = ?(Элемент.ТекущиеДанные.Председатель,
	                            ИнвентаризационнаяКомиссия.Индекс(Элемент.ТекущаяСтрока),
								Неопределено);
	
КонецПроцедуры // ИнвентаризационнаяКомиссияПередУдалением()

// Обработчик события "ПослеУдаления" табличной части
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияПослеУдаления(Элемент)
	
	КоличествоСтрок = ИнвентаризационнаяКомиссия.Количество();
	
	Если КоличествоСтрок > 0 И НЕ (мУдаляемыйЭлементИндекс = Неопределено) Тогда
		
		ИнвентаризационнаяКомиссия[?(мУдаляемыйЭлементИндекс < КоличествоСтрок - 1, 
		                             мУдаляемыйЭлементИндекс,
		                             КоличествоСтрок - 1)].Председатель = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ИнвентаризационнаяКомиссияПослеУдаления()

// Обработчик события "ПриНачалеРедактирования" табличной части
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, 
	                                                        НоваяСтрока, 
                                                            Копирование)
	
	Если Копирование Тогда
		
		Элемент.ТекущиеДанные.ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		Элемент.ТекущиеДанные.Председатель = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ИнвентаризационнаяКомиссияПриНачалеРедактирования()

// Обработчик события "ПриИзменении" колонки "ФизЛицо" табличной части
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияФизЛицоПриИзменении(Элемент)
	
	Если ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
		
		ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	
	КонецЕсли;

КонецПроцедуры // ИнвентаризационнаяКомиссияФизЛицоПриИзменении()

// Обработчик события "ОбработкаВыбора" колонки "ФизЛицо" табличной части
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияФизЛицоОбработкаВыбора(Элемент,
                                                           ВыбранноеЗначение,
                                                           СтандартнаяОбработка)
	
	Если НЕ (Элемент.Значение = ВыбранноеЗначение) Тогда // если выбрано значение, отличное от того, что было
		
		СтрокаТабличнойЧасти = ИнвентаризационнаяКомиссия.Найти(ВыбранноеЗначение, "ФизЛицо");

		Если НЕ (СтрокаТабличнойЧасти = Неопределено) Тогда
					
			Предупреждение("Физическое лицо <" + СокрЛП(ВыбранноеЗначение) + "> уже включено в состав комиссии!", 60);
			СтандартнаяОбработка = Ложь;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИнвентаризационнаяКомиссияФизЛицоОбработкаВыбора()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()
             

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// {ОбособленныеПодразделения

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()

// }ОбособленныеПодразделения 

//////////////////////////////////////////////////////////////////////////////// 
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 
//

СоответствиеОС_ИнвентарныйНомер = Новый Соответствие();
СоответствиеОС_МОЛ              = Новый Соответствие();


