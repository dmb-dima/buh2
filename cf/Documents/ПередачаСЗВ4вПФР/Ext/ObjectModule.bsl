
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ФАЙЛА ИНДИВИДУАЛЬНЫХ СВЕДЕНИЙ ПФР ФОРМАТ 7.0


#Если Клиент Тогда

//Процедура вывода файла сведений на печать
Функция ПечатьАДВ11()
	
	Отказ = Ложь;
	
	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ЭтотОбъект,ЕстьОшибки);
	Если ЕстьОшибки тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Макет = ПолучитьМакет("АДВ_11");
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВедомостьУплатыСтраховыхВзносовАДВ11_АДВ_11";
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьГод = Макет.ПолучитьОбласть("Год");
	ОбластьПустойГод = Макет.ПолучитьОбласть("ПустойГод");
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьНачисленоЗаГод = Макет.ПолучитьОбласть("НачисленоЗаГод");
	ОбластьУплачено = Макет.ПолучитьОбласть("Уплачено");
	ОбластьДолгНаКонец = Макет.ПолучитьОбласть("ДолгНаКонец");
	
	// Получим сведения об ответственных лицах
	ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, Дата, Ответственный.ФизЛицо);
	
	Если ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
	
		// формируем отчет по версии файла 04.00
		
		//Получаем форматы записей
		ДокументФорматЗаписей = ПолучитьМакет("ФорматЗаписей");
		ФорматЗаписиВУПЛ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ВУПЛ", ДокументФорматЗаписей);
		ФорматЗаписиЗНЧЛ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ЗНЧЛ", ДокументФорматЗаписей);
		ФорматЗаписиУПЛЧ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("УПЛЧ", ДокументФорматЗаписей);
		ФорматЗаписиЗКНЦ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ЗКНЦ", ДокументФорматЗаписей);
		
		//Обработка заголовка файла
		ИнформацияОПачке = Новый Структура;
		Если ПроцедурыПерсонифицированногоУчета.РазобратьЗаголовокФайла(ТекстФайла,ИнформацияОПачке)=0 тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		
		Н=5;//Номер строки записи ВУПЛ
		
		//Читаем запись ВУПЛ
		СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
		Н= Н + 1;
		ЗаписьВУПЛ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиВУПЛ);
		СтрОшибка = "";
		Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ВУПЛ", ФорматЗаписиВУПЛ, ЗаписьВУПЛ, СтрОшибка) тогда
			Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
			Возврат Неопределено;
		КонецЕсли;	
		
		// Заполнение данных шапки и подвала
		ОбластьШапка.Параметры.РегНомерПФР = ИнформацияОПачке.ИнформацияОРаботодателе.РегистрационныйНомерПФР;
		ИННОрганизации = ИнформацияОПачке.ИнформацияОРаботодателе.ИНН;
		ОбластьШапка.Параметры.ИНН = ИННОрганизации;
		КППОрганизации = ИнформацияОПачке.ИнформацияОРаботодателе.КПП;
		ОбластьШапка.Параметры.КПП = КППОрганизации;
		ОбластьШапка.Параметры.ОКПО = ПолучитьОКПООрганизацииПоИННиКПП(ИННОрганизации, КППОрганизации);
		ОбластьШапка.Параметры.НаименованиеКр1 = ИнформацияОПачке.ИнформацияОРаботодателе.Наименование;
		ОбластьШапка.Параметры.Год = ИнформацияОПачке.РасчетныйПериод;
		ОбластьШапка.Параметры.СоставленаНаДату = "Ведомость составлена по состоянию на дату:  "+ ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(ЗаписьВУПЛ.ДатаДействия);
		ОбластьШапка.Параметры.КолПачек = ЗаписьВУПЛ.КоличествоПачек;
		ОбластьШапка.Параметры.ЗастрахованныхЛиц = ЗаписьВУПЛ.ЧислоЗастрахованныхЛиц;
		ОбластьШапка.Параметры.КодОсновногоТарифа = ЗаписьВУПЛ.КодОсновногоТарифа;
		ОбластьШапка.Параметры.КодДополнительногоТарифа = ЗаписьВУПЛ.КодДополнительногоТарифа;
		
		ОбластьПодвал.Параметры.РасшифровкаПодписиГлавногоБухгалтера= ОтветственныеЛица.ГлавныйБухгалтер;
		ОбластьПодвал.Параметры.ДолжностьРуководителя		 		= ОтветственныеЛица.РуководительДолжность;
		ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя		= ОтветственныеЛица.Руководитель;
		ОбластьПодвал.Параметры.Дата				 				= ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
		
		// Вывод шапки ведомости
		ДокументРезультат.Вывести(ОбластьШапка);
		
		// Вывод задолженности на начало года
		Если ЗаписьВУПЛ.ЧислоЗаписейЗНЧЛ > 0 Тогда
			Для НомерЗаписиЗНЧЛ=1 По ЗаписьВУПЛ.ЧислоЗаписейЗНЧЛ Цикл
				//Читаем и выводим запись ЗНЧЛ
				СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
				Н= Н + 1;
				ЗаписьЗНЧЛ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиЗНЧЛ);
				СтрОшибка = "";
				Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ЗНЧЛ", ФорматЗаписиЗНЧЛ, ЗаписьЗНЧЛ, СтрОшибка) тогда
					Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
					Возврат Неопределено;
				КонецЕсли;	
				
				ОбластьГод.Параметры.Год 					= ЗаписьЗНЧЛ.Год;
				ОбластьГод.Параметры.СтраховаяЧасть 		= ЗаписьЗНЧЛ.СтраховаяЧасть;
				ОбластьГод.Параметры.НакопительнаяЧасть 	= ЗаписьЗНЧЛ.НакопительнаяЧасть;
				ОбластьГод.Параметры.ДополнительныйТариф 	= ЗаписьЗНЧЛ.ДополнительныйТариф;
				ДокументРезультат.Вывести(ОбластьГод);
			КонецЦикла; 
		Иначе
			ДокументРезультат.Вывести(ОбластьПустойГод);
		КонецЕсли; 
		ОбластьИтого.Параметры.СтраховаяЧасть 		= ЗаписьВУПЛ.ДолгНаНачалоСтраховаяЧасть;
		ОбластьИтого.Параметры.НакопительнаяЧасть 	= ЗаписьВУПЛ.ДолгНаНачалоНакопительнаяЧасть;
		ОбластьИтого.Параметры.ДополнительныйТариф 	= ЗаписьВУПЛ.ДолгНачалоДополнительныйТариф;
		ДокументРезультат.Вывести(ОбластьИтого);
		
		// Вывод начислений за год
		ОбластьНачисленоЗаГод.Параметры.ПризнакТарифа		= ЗаписьВУПЛ.ПризнакТарифа;
		ОбластьНачисленоЗаГод.Параметры.СтраховаяЧасть 		= ЗаписьВУПЛ.НачисленоСтраховаяЧасть;
		ОбластьНачисленоЗаГод.Параметры.НакопительнаяЧасть 	= ЗаписьВУПЛ.НачисленоНакопительнаяЧасть;
		ОбластьНачисленоЗаГод.Параметры.ДополнительныйТариф = ЗаписьВУПЛ.НачисленоДополнительныйТариф;
		ДокументРезультат.Вывести(ОбластьНачисленоЗаГод);
		
		// Вывод уплаченных сумм
		ДокументРезультат.Вывести(ОбластьУплачено);
		Если ЗаписьВУПЛ.ЧислоЗаписейУПЛЧ > 0 Тогда
			Для НомерЗаписиУПЛЧ=1 По ЗаписьВУПЛ.ЧислоЗаписейУПЛЧ Цикл
				//Читаем и выводим запись УПЛЧ
				СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
				Н= Н + 1;
				ЗаписьУПЛЧ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиУПЛЧ);
				СтрОшибка = "";
				Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "УПЛЧ", ФорматЗаписиУПЛЧ, ЗаписьУПЛЧ, СтрОшибка) тогда
					Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
					Возврат Неопределено;
				КонецЕсли;	
				
				ОбластьГод.Параметры.Год 			= ЗаписьУПЛЧ.Год;
				ОбластьГод.Параметры.СтраховаяЧасть 		= ЗаписьУПЛЧ.СтраховаяЧасть;
				ОбластьГод.Параметры.НакопительнаяЧасть 	= ЗаписьУПЛЧ.НакопительнаяЧасть;
				ОбластьГод.Параметры.ДополнительныйТариф 	= ЗаписьУПЛЧ.ДополнительныйТариф;
				ДокументРезультат.Вывести(ОбластьГод);
			КонецЦикла; 
		Иначе
			ДокументРезультат.Вывести(ОбластьПустойГод);
		КонецЕсли; 
		ОбластьИтого.Параметры.СтраховаяЧасть 		= ЗаписьВУПЛ.УплаченоСтраховаяЧасть;
		ОбластьИтого.Параметры.НакопительнаяЧасть 	= ЗаписьВУПЛ.УплаченоНакопительнаяЧасть;
		ОбластьИтого.Параметры.ДополнительныйТариф 	= ЗаписьВУПЛ.УплаченоДополнительныйТариф;
		ДокументРезультат.Вывести(ОбластьИтого);
		
		// Вывод задолженностей на конец года
		ДокументРезультат.Вывести(ОбластьДолгНаКонец);
		Если ЗаписьВУПЛ.ЧислоЗаписейЗКНЦ > 0 Тогда
			Для НомерЗаписиЗКНЦ=1 По ЗаписьВУПЛ.ЧислоЗаписейЗКНЦ Цикл
				//Читаем и выводим запись ЗКНЦ
				СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
				Н= Н + 1;
				ЗаписьЗКНЦ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиЗКНЦ);
				СтрОшибка = "";
				Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ЗКНЦ", ФорматЗаписиЗКНЦ, ЗаписьЗКНЦ, СтрОшибка) тогда
					Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
					Возврат Неопределено;
				КонецЕсли;	
				
				ОбластьГод.Параметры.Год 					= ЗаписьЗКНЦ.Год;
				ОбластьГод.Параметры.СтраховаяЧасть 		= ЗаписьЗКНЦ.СтраховаяЧасть;
				ОбластьГод.Параметры.НакопительнаяЧасть 	= ЗаписьЗКНЦ.НакопительнаяЧасть;
				ОбластьГод.Параметры.ДополнительныйТариф 	= ЗаписьЗКНЦ.ДополнительныйТариф;
				ДокументРезультат.Вывести(ОбластьГод);
			КонецЦикла; 
		Иначе
			ДокументРезультат.Вывести(ОбластьПустойГод);
		КонецЕсли; 
		ОбластьИтого.Параметры.СтраховаяЧасть 		= ЗаписьВУПЛ.ДолгНаКонецСтраховаяЧасть;
		ОбластьИтого.Параметры.НакопительнаяЧасть 	= ЗаписьВУПЛ.ДолгНаКонецНакопительнаяЧасть;
		ОбластьИтого.Параметры.ДополнительныйТариф 	= ЗаписьВУПЛ.ДолгНаКонецДополнительныйТариф;
		ДокументРезультат.Вывести(ОбластьИтого);
		
		// Подвал ведомости
		ДокументРезультат.Вывести(ОбластьПодвал);
		
		УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат, 1 , Ложь, "Ведомость уплаты взносов (АДВ-11); пачка №" + ИнформацияОПачке.НомерПачкиРаботодателя);
		Возврат "";
		
	ИначеЕсли ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда
		// формируем отчет по версии файла 07.00	
		
		ДеревоПФР = ПроцедурыПерсонифицированногоУчета.ПреобразоватьВДеревоXML(ТекстФайла);
		
		Если ДеревоПФР = Неопределено Тогда
			Отказ = Ложь;
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось разобрать файл с данными!",Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
			Возврат Неопределено 
		КонецЕсли;
		ДеревоПФР = ДеревоПФР.Строки.Найти("ФайлПФР","Имя");
		Если ДеревоПФР = Неопределено Тогда
			Отказ = Ложь;
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось разобрать файл с данными!",Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
			Возврат Неопределено 
		КонецЕсли;
		
		СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
		Если СтрокаДереваПачкаВходящихДокументов <> Неопределено Тогда
			СтрокаДереваВедомостьУплаты = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВЕДОМОСТЬ_УПЛАТЫ", "Имя");
			
			Если СтрокаДереваВедомостьУплаты <> Неопределено Тогда
				ОбластьШапка.Параметры.Год = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВедомостьУплаты, "РасчетныйПериод");
				ОбластьШапка.Параметры.СоставленаНаДату = "Ведомость составлена по состоянию на дату:  "+ ПроцедурыПерсонифицированногоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВедомостьУплаты, "ДатаВедомости"));
				ОбластьШапка.Параметры.ЗастрахованныхЛиц = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВедомостьУплаты, "ЧислоЗастрахованныхЛиц");
				ОбластьШапка.Параметры.КолПачек = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВедомостьУплаты, "ЧислоПачек");
				Если ОбластьШапка.Параметры.КолПачек = "" Тогда
					ОбластьШапка.Параметры.КолПачек = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВедомостьУплаты, "ЧислоПачекСДокументами");	
				КонецЕсли;
				
				
				СтрокаДереваСтрахователь = СтрокаДереваВедомостьУплаты.Строки.Найти("Страхователь", "Имя");
				
				// Заполнение данных шапки и подвала
				ОбластьШапка.Параметры.РегНомерПФР = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСтрахователь, "РегистрационныйНомер");
				ОбластьШапка.Параметры.НаименованиеКр1 = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСтрахователь, "НаименованиеКраткое");
				
				СтрокаДереваНалоговыйНомер = СтрокаДереваСтрахователь.Строки.Найти("НалоговыйНомер", "Имя");
				Если СтрокаДереваНалоговыйНомер <> Неопределено Тогда
					ИННОрганизации = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНалоговыйНомер, "ИНН");
					ОбластьШапка.Параметры.ИНН = ИННОрганизации;
					КППОрганизации = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНалоговыйНомер, "КПП");
					ОбластьШапка.Параметры.КПП = КППОрганизации;
					ОбластьШапка.Параметры.ОКПО = ПолучитьОКПООрганизацииПоИННиКПП(ИННОрганизации, КППОрганизации);
				КонецЕсли;
				
				СтрокаДереваТариф = СтрокаДереваВедомостьУплаты.Строки.Найти("Тариф", "Имя");
				Если СтрокаДереваТариф <> Неопределено Тогда
					ОбластьШапка.Параметры.КодОсновногоТарифа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваТариф, "КодКатегории");
					ОбластьШапка.Параметры.КодДополнительногоТарифа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваТариф, "КодДополнительногоТарифа");
				КонецЕсли;
				
				ОбластьПодвал.Параметры.РасшифровкаПодписиГлавногоБухгалтера= ОтветственныеЛица.ГлавныйБухгалтер;
				ОбластьПодвал.Параметры.ДолжностьРуководителя		 		= ОтветственныеЛица.РуководительДолжность;
				ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя		= ОтветственныеЛица.Руководитель;
				ОбластьПодвал.Параметры.Дата				 				= ПроцедурыПерсонифицированногоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВедомостьУплаты, "ДатаЗаполнения"));
				
				// Вывод шапки ведомости
				ДокументРезультат.Вывести(ОбластьШапка);
				
				ДолгНаНачалоСтраховаяЧасть = 0;
				ДолгНаНачалоНакопительнаяЧасть = 0;
				ДолгНаНачалоДополнительныйТариф = 0;
				// Вывод задолженности на начало года
				СтрокаДереваЗадолженностьНаНачало = СтрокаДереваВедомостьУплаты.Строки.Найти("ЗадолженностьНаНачало", "Имя");
				Если СтрокаДереваЗадолженностьНаНачало <> Неопределено Тогда
					Если СтрокаДереваЗадолженностьНаНачало.Строки.Количество() > 1 Тогда
						Для Каждого СтрокаДерева Из СтрокаДереваЗадолженностьНаНачало.Строки Цикл
							Если СтрокаДерева.Имя = "СуммаЗаПериод" Тогда
								ТипСтроки = СтрокаДерева.Строки.Найти("ТипСтроки", "Имя");
								Если ТипСтроки <> Неопределено и ТипСтроки.Значение <> "ДЕТАЛЬНАЯ" Тогда
									Продолжить;
								КонецЕсли;
								СтрокаДереваСтраховыеВзносы = СтрокаДерева.Строки.Найти("СтраховыеВзносы", "Имя");
								Если СтрокаДереваСтраховыеВзносы <> Неопределено Тогда
									ОбластьГод.Параметры.Год 					= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДерева, "РасчетныйПериод");
									СтраховаяЧасть = Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСтраховыеВзносы, "Страховые"));
									НакопительнаяЧасть = Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСтраховыеВзносы, "Накопительные"));
									ДополнительныйТариф = Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокадереваСтраховыеВзносы, "Дополнительные"));
									ОбластьГод.Параметры.СтраховаяЧасть 		= СтраховаяЧасть;
									ОбластьГод.Параметры.НакопительнаяЧасть 	= НакопительнаяЧасть;
									ОбластьГод.Параметры.ДополнительныйТариф 	= ДополнительныйТариф;
									ДокументРезультат.Вывести(ОбластьГод);
									ДолгНаНачалоСтраховаяЧасть = ДолгНаНачалоСтраховаяЧасть + СтраховаяЧасть;
									ДолгНаНачалоНакопительнаяЧасть = ДолгНаНачалоНакопительнаяЧасть + НакопительнаяЧасть;
									ДолгНаНачалоДополнительныйТариф = ДолгНаНачалоДополнительныйТариф + ДополнительныйТариф;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					Иначе
						ДокументРезультат.Вывести(ОбластьПустойГод);
					КонецЕсли;
					
				КонецЕсли;
				ОбластьИтого.Параметры.СтраховаяЧасть 		= ДолгНаНачалоСтраховаяЧасть;
				ОбластьИтого.Параметры.НакопительнаяЧасть 	= ДолгНаНачалоНакопительнаяЧасть;
				ОбластьИтого.Параметры.ДополнительныйТариф 	= ДолгНаНачалоДополнительныйТариф;
				ДокументРезультат.Вывести(ОбластьИтого);
				
				
				СтрокаДереваНачисленоЗаПериод = СтрокаДереваВедомостьУплаты.Строки.Найти("НачисленияЗаПериод", "Имя");
				Если СтрокаДереваНачисленоЗаПериод <> Неопределено Тогда
					// Вывод начислений за год
					ОбластьНачисленоЗаГод.Параметры.ПризнакТарифа		= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВедомостьУплаты, "ПризнакТарифа");
					ОбластьНачисленоЗаГод.Параметры.СтраховаяЧасть 		= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНачисленоЗаПериод, "Страховые");
					ОбластьНачисленоЗаГод.Параметры.НакопительнаяЧасть 	= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНачисленоЗаПериод, "Накопительные");
					ОбластьНачисленоЗаГод.Параметры.ДополнительныйТариф = Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНачисленоЗаПериод, "Дополнительные"));
					ДокументРезультат.Вывести(ОбластьНачисленоЗаГод);
				КонецЕсли;
				
				
				// Вывод уплаченных сумм
				
				ДокументРезультат.Вывести(ОбластьУплачено);
				УплаченоСтраховаяЧасть = 0;
				УплаченоНакопительнаяЧасть = 0;
				УплаченоДополнительныйТариф = 0;
				СтрокаДереваУплатаЗаПериод = СтрокаДереваВедомостьУплаты.Строки.Найти("УплатаЗаПериод", "Имя");
				Если СтрокаДереваУплатаЗаПериод <> Неопределено Тогда
					Если СтрокаДереваУплатаЗаПериод.Строки.Количество() > 1 Тогда
						Для Каждого СтрокаДерева Из СтрокаДереваУплатаЗаПериод.Строки Цикл
							Если СтрокаДерева.Имя = "СуммаЗаПериод" Тогда
								ТипСтроки = СтрокаДерева.Строки.Найти("ТипСтроки", "Имя");
								Если ТипСтроки <> Неопределено и ТипСтроки.Значение <> "ДЕТАЛЬНАЯ" Тогда
									Продолжить;
								КонецЕсли;
								СтрокаДереваСтраховыеВзносы = СтрокаДерева.Строки.Найти("СтраховыеВзносы", "Имя");
								Если СтрокаДереваСтраховыеВзносы <> Неопределено Тогда
									//Читаем и выводим запись УПЛЧ
									СтраховаяЧасть = Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСтраховыеВзносы, "Страховые"));
									НакопительнаяЧасть = Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСтраховыеВзносы, "Накопительные"));
									ДополнительныйТариф = Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСтраховыеВзносы, "Дополнительные"));
									ОбластьГод.Параметры.Год 					= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДерева, "РасчетныйПериод");
									ОбластьГод.Параметры.СтраховаяЧасть 		= СтраховаяЧасть;
									ОбластьГод.Параметры.НакопительнаяЧасть 	= НакопительнаяЧасть;
									ОбластьГод.Параметры.ДополнительныйТариф 	= ДополнительныйТариф;
									ДокументРезультат.Вывести(ОбластьГод);
									УплаченоСтраховаяЧасть = УплаченоСтраховаяЧасть + СтраховаяЧасть;
									УплаченоНакопительнаяЧасть = УплаченоНакопительнаяЧасть + НакопительнаяЧасть;
									УплаченоДополнительныйТариф = УплаченоДополнительныйТариф + ДополнительныйТариф;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					Иначе
						ДокументРезультат.Вывести(ОбластьПустойГод);
					КонецЕсли;
				КонецЕсли;
			
				ОбластьИтого.Параметры.СтраховаяЧасть 		= УплаченоСтраховаяЧасть;
				ОбластьИтого.Параметры.НакопительнаяЧасть 	= УплаченоНакопительнаяЧасть;
				ОбластьИтого.Параметры.ДополнительныйТариф 	= УплаченоДополнительныйТариф;
				ДокументРезультат.Вывести(ОбластьИтого);

				// Вывод задолженностей на конец года
				ДокументРезультат.Вывести(ОбластьДолгНаКонец);
				ДолгНаКонецСтраховаяЧасть = 0;
				ДолгНаКонецНакопительнаяЧасть = 0;
				ДолгНаКонецДополнительныйТариф = 0;
				СтрокаДереваЗадолженностьНаКонец = СтрокаДереваВедомостьУплаты.Строки.Найти("ЗадолженностьНаКонец");
				Если СтрокаДереваЗадолженностьНаКонец <> Неопределено Тогда
					Если СтрокаДереваЗадолженностьНаКонец.Строки.Количество() > 1 Тогда
						Для Каждого СтрокаДерева Из СтрокаДереваЗадолженностьНаКонец.Строки Цикл
							Если СтрокаДерева.Имя = "СуммаЗаПериод" Тогда
								ТипСтроки = СтрокаДерева.Строки.Найти("ТипСтроки", "Имя");
								Если ТипСтроки <> Неопределено и ТипСтроки.Значение <> "ДЕТАЛЬНАЯ" Тогда
									Продолжить;
								КонецЕсли;
								СтрокаДереваСтраховыеВзносы = СтрокаДерева.Строки.Найти("СтраховыеВзносы", "Имя");
								Если СтрокаДереваСтраховыеВзносы <> Неопределено Тогда
									//Читаем и выводим запись ЗКНЦ
									СтраховаяЧасть = Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСтраховыеВзносы, "Страховые"));
									НакопительнаяЧасть = Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСтраховыеВзносы, "Накопительные"));
									ДополнительныйТариф = Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСтраховыеВзносы, "Дополнительные"));
									ОбластьГод.Параметры.Год 					= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДерева, "РасчетныйПериод");
									ОбластьГод.Параметры.СтраховаяЧасть 		= СтраховаяЧасть;
									ОбластьГод.Параметры.НакопительнаяЧасть 	= НакопительнаяЧасть;
									ОбластьГод.Параметры.ДополнительныйТариф 	= ДополнительныйТариф;
									ДокументРезультат.Вывести(ОбластьГод);
									ДолгНаКонецСтраховаяЧасть = ДолгНаКонецСтраховаяЧасть + СтраховаяЧасть;
									ДолгНаКонецНакопительнаяЧасть = ДолгНаКонецНакопительнаяЧасть + НакопительнаяЧасть;
									ДолгНаКонецДополнительныйТариф = ДолгНаКонецДополнительныйТариф + ДополнительныйТариф;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					Иначе
						ДокументРезультат.Вывести(ОбластьПустойГод);
					КонецЕсли;
				КонецЕсли;
		
				ОбластьИтого.Параметры.СтраховаяЧасть 		= ДолгНаКонецСтраховаяЧасть;
				ОбластьИтого.Параметры.НакопительнаяЧасть 	= ДолгНаКонецНакопительнаяЧасть;
				ОбластьИтого.Параметры.ДополнительныйТариф 	= ДолгНаКонецДополнительныйТариф;
				ДокументРезультат.Вывести(ОбластьИтого);
				
				// Подвал ведомости
				ДокументРезультат.Вывести(ОбластьПодвал);
			КонецЕсли;
			
			СтрокаДереваВходящаяОпись = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВХОДЯЩАЯ_ОПИСЬ", "Имя");
			Если СтрокаДереваВходящаяОпись <> Неопределено Тогда
				СтрокаДереваНомерПачки = СтрокаДереваВходящаяОпись.Строки.Найти("НомерПачки", "Имя");
				Если СтрокаДереваНомерПачки <> Неопределено Тогда
					СтрокаДереваОсновной = СтрокаДереваНомерПачки.Строки.Найти("Основной", "Имя");
					Если СтрокаДереваОсновной <> Неопределено Тогда
						НомерПачкиРаботодателя = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "Основной");
					Иначе
						НомерПачкиРаботодателя = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "ПоПодразделению");
					КонецЕсли;
					УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат, 1 , Ложь, "Ведомость уплаты взносов (АДВ-11); пачка №" + НомерПачкиРаботодателя);
					Возврат "";
				КонецЕсли;
			КонецЕсли
		КонецЕсли;

	КонецЕсли;
	
КонецФункции


Функция ПечатьАДВ62(ВариантФормы = "", ОчищатьСообщения = Истина)
	
	Отказ = Ложь;
	
	ВыводитьДоУплачено = ВариантФормы <> "Форма2010";
	Если ВыводитьДоУплачено Тогда
		Макет = ПолучитьМакет("АДВ_6_2_проект");
	Иначе
		Макет = ПолучитьМакет("АДВ_6_2");
	КонецЕсли;
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
		
	Заголовок = "Печать документа " + СокрЛП(ЭтотОбъект);
	
	// проверим данные руководителя
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Руководитель) Тогда
		Сообщить("Не указан руководитель!");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РуководительДолжность) Тогда
		Сообщить("Не указана должность руководителя!");
	КонецЕсли;
	
	Если ЗаполненПринятымиСведениями Тогда
		
		ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ЭтотОбъект, Ложь);
		
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Опись_АДВ_6_2";
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьСередина = Макет.ПолучитьОбласть("Середина");
		ОбластьСтрокаИсходных = Макет.ПолучитьОбласть("СтрокаИсходных");
		ОбластьСтрокаКорректирующих = Макет.ПолучитьОбласть("СтрокаКорректирующих");
		ОбластьПустаяТаблицаИсходных = Макет.ПолучитьОбласть("ПустаяТаблицаИсходных");
		ОбластьПустаяТаблицаКорректирующих = Макет.ПолучитьОбласть("ПустаяТаблицаКорректирующих");
		
		ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, ВыборкаПоШапкеДокумента, "ОКПО");
		ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, ВыборкаПоШапкеДокумента);

		ДеревоПФР = ПроцедурыПерсонифицированногоУчета.ПреобразоватьВДеревоXML(ТекстФайла);
		
		Если ДеревоПФР = Неопределено Тогда
			Сообщить("Не удалось разобрать файл с данными!");
			Возврат Неопределено 
		КонецЕсли;
		ДеревоПФР = ДеревоПФР.Строки.Найти("ФайлПФР","Имя");
		Если ДеревоПФР = Неопределено Тогда
			Сообщить("Не удалось разобрать файл с данными!");
			Возврат Неопределено 
		КонецЕсли;
		
		СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
		Если СтрокаДереваПачкаВходящихДокументов = Неопределено Тогда
			Возврат Неопределено 
		КонецЕсли;
		
		СтрокаДереваВходящаяОпись = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ", "Имя");
		Если СтрокаДереваВходящаяОпись = Неопределено Тогда
			Возврат Неопределено 
		КонецЕсли;
		
		ИнформацияОПачке = ПроцедурыПерсонифицированногоУчета.ДанныеОписиАДВ_6_3(СтрокаДереваВходящаяОпись, ВыборкаПоШапкеДокумента);
		ОбластьПодвал.Параметры.Дата = ИнформацияОПачке.ДатаСоставленияОписи;
		ОбластьШапка.Параметры.ОрганизацияРегистрационныйНомерПФР = ИнформацияОПачке.РегНомерПФР;
		ОбластьШапка.Параметры.ОрганизацияНаименованиеСокращенное = ИнформацияОПачке.НаименованиеОрганизации;
		ОбластьШапка.Параметры.ОрганизацияИНН = ИнформацияОПачке.ИНН;
		ОбластьШапка.Параметры.ОрганизацияКПП = ИнформацияОПачке.КПП;
		
		СтрокаДереваАДВ = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ОПИСЬ_СВЕДЕНИЙ_ПЕРЕДАВАЕМЫХ_СТРАХОВАТЕЛЕМ", "Имя");
		Если СтрокаДереваАДВ = Неопределено Тогда
			Возврат Неопределено 
		КонецЕсли;
		
		ИнформацияОПачке = ПроцедурыПерсонифицированногоУчета.ДанныеОписиАДВ_6_3(СтрокаДереваАДВ, ВыборкаПоШапкеДокумента);
		ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры,ИнформацияОПачке);
		
		КолИсходныхПачек = Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваАДВ,"ЧислоИсходныхПачек"));
		ОбластьШапка.Параметры.КолИсходныхПачек = КолИсходныхПачек;
		КолКорректирующихПачек = Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваАДВ,"ЧислоКорректирующихПачек"));
		ОбластьШапка.Параметры.КолКорректирующихПачек = КолКорректирующихПачек;

		ДокументРезультат.Вывести(ОбластьШапка);
		
		Если КолИсходныхПачек = 0 Тогда
			ДокументРезультат.Вывести(ОбластьПустаяТаблицаИсходных);
		Иначе	
			НомерСтроки = 0;
			ОписаниеИсходныхПачек = СтрокаДереваАДВ.Строки.НайтиСтроки(Новый Структура("Имя", "СведенияОбИсходныхСведениях"));
			Для каждого СтрокаПачки Из ОписаниеИсходныхПачек Цикл
				
				ТипСтрокиОсведениях = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"ТипСтрокиОсведениях");
				
				Если ТипСтрокиОсведениях = "ПО КАТЕГОРИИ" Тогда
					Продолжить;
				ИначеЕсли ТипСтрокиОсведениях = "ПО СТРАХОВАТЕЛЮ" Тогда
					ОбластьСередина.Параметры.КолЗЛИсходных = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"КоличествоЗЛ");
					СтрокаСуммаВзносовНаСтраховую = СтрокаПачки.Строки.Найти("СуммаВзносовНаСтраховую", "Имя");
					Если СтрокаСуммаВзносовНаСтраховую = Неопределено Тогда
						ОбластьСередина.Параметры.НачисленоСтраховая = 0;
						ОбластьСередина.Параметры.УплаченоСтраховая = 0;
					Иначе
						ОбластьСередина.Параметры.НачисленоСтраховая = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаСуммаВзносовНаСтраховую,"Начислено");
						ОбластьСередина.Параметры.УплаченоСтраховая = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаСуммаВзносовНаСтраховую,"Уплачено");
					КонецЕсли;
					СтрокаСуммаВзносовНаНакопительную = СтрокаПачки.Строки.Найти("СуммаВзносовНаНакопительную", "Имя");
					Если СтрокаСуммаВзносовНаНакопительную = Неопределено Тогда
						ОбластьСередина.Параметры.НачисленоНакопительная = 0;
						ОбластьСередина.Параметры.УплаченоНакопительная = 0;
					Иначе
						ОбластьСередина.Параметры.НачисленоНакопительная = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаСуммаВзносовНаНакопительную,"Начислено");
						ОбластьСередина.Параметры.УплаченоНакопительная = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаСуммаВзносовНаНакопительную,"Уплачено");
					КонецЕсли;
				ИначеЕсли ТипСтрокиОсведениях = "ПО ПАЧКЕ" Тогда
					НомерСтроки = НомерСтроки + 1;
					ОбластьСтрокаИсходных.Параметры.НомерСтроки = НомерСтроки;
					ОбластьСтрокаИсходных.Параметры.КолЗЛ = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"КоличествоЗЛ");
					ОбластьСтрокаИсходных.Параметры.КодКатегории = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"КодКатегории");
					ОбластьСтрокаИсходных.Параметры.ИмяФайла = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"ИмяФайла");
					СтрокаСуммаВзносовНаСтраховую = СтрокаПачки.Строки.Найти("СуммаВзносовНаСтраховую", "Имя");
					Если СтрокаСуммаВзносовНаСтраховую = Неопределено Тогда
						ОбластьСтрокаИсходных.Параметры.НачисленоСтраховая = 0;
						ОбластьСтрокаИсходных.Параметры.УплаченоСтраховая = 0;
					Иначе
						ОбластьСтрокаИсходных.Параметры.НачисленоСтраховая = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаСуммаВзносовНаСтраховую,"Начислено");
						ОбластьСтрокаИсходных.Параметры.УплаченоСтраховая = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаСуммаВзносовНаСтраховую,"Уплачено");
					КонецЕсли;
					СтрокаСуммаВзносовНаНакопительную = СтрокаПачки.Строки.Найти("СуммаВзносовНаНакопительную", "Имя");
					Если СтрокаСуммаВзносовНаНакопительную = Неопределено Тогда
						ОбластьСтрокаИсходных.Параметры.НачисленоНакопительная = 0;
						ОбластьСтрокаИсходных.Параметры.УплаченоНакопительная = 0;
					Иначе
						ОбластьСтрокаИсходных.Параметры.НачисленоНакопительная = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаСуммаВзносовНаНакопительную,"Начислено");
						ОбластьСтрокаИсходных.Параметры.УплаченоНакопительная = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаСуммаВзносовНаНакопительную,"Уплачено");
					КонецЕсли;
					ДокументРезультат.Вывести(ОбластьСтрокаИсходных);
				КонецЕсли;
				
			КонецЦикла; 
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьСередина);
		
		Если КолКорректирующихПачек = 0 Тогда
			ДокументРезультат.Вывести(ОбластьПустаяТаблицаКорректирующих);
		Иначе
			НомерСтроки = 0;
			ОписаниеКорректирующихПачек = СтрокаДереваАДВ.Строки.НайтиСтроки(Новый Структура("Имя", "СведенияОкорректирующихСведениях"));
			Для каждого СтрокаПачки Из ОписаниеКорректирующихПачек Цикл
				
				ТипСтрокиОсведениях = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"ТипСтрокиОсведениях");
				
				Если ТипСтрокиОсведениях = "ПО КАТЕГОРИИ" Тогда
					Продолжить;
				ИначеЕсли ТипСтрокиОсведениях = "ПО СТРАХОВАТЕЛЮ" Тогда
					ОбластьПодвал.Параметры.КолЗЛКорректирующих = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"КоличествоЗЛ");
					ОбластьПодвал.Параметры.ДоНачисленоСтраховая = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"ДоначисленоНаСтраховую");
					ОбластьПодвал.Параметры.ДоНачисленоНакопительная = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"ДоначисленоНаНакопительную");
					Если ВыводитьДоУплачено Тогда
						ОбластьПодвал.Параметры.ДоУплаченоСтраховая = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"ДоуплаченоНаСтраховую");
						ОбластьПодвал.Параметры.ДоУплаченоНакопительная = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"ДоуплаченоНаНакопительную");
					КонецЕсли;
				ИначеЕсли ТипСтрокиОсведениях = "ПО ПАЧКЕ" Тогда
					НомерСтроки = НомерСтроки + 1;
					ОбластьСтрокаКорректирующих.Параметры.НомерСтроки = НомерСтроки;
					ОбластьСтрокаКорректирующих.Параметры.КолЗЛ = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"КоличествоЗЛ");
					ОбластьСтрокаКорректирующих.Параметры.КодКатегории = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"КодКатегории");
					ОбластьСтрокаКорректирующих.Параметры.ИмяФайла = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"ИмяФайла");
					ОбластьСтрокаКорректирующих.Параметры.ДоНачисленоСтраховая = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"ДоначисленоНаСтраховую");
					ОбластьСтрокаКорректирующих.Параметры.ДоНачисленоНакопительная = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"ДоначисленоНаНакопительную");
					Если ВыводитьДоУплачено Тогда
						ОбластьСтрокаКорректирующих.Параметры.ДоУплаченоСтраховая = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"ДоуплаченоНаСтраховую");
						ОбластьСтрокаКорректирующих.Параметры.ДоУплаченоНакопительная = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаПачки,"ДоуплаченоНаНакопительную");
					КонецЕсли;
					ДокументРезультат.Вывести(ОбластьСтрокаКорректирующих);
				КонецЕсли;
				
			КонецЦикла; 
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьПодвал);
		
	Иначе
		
		ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь, ВыборкаПоШапкеДокумента);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Опись_АДВ_6_2";
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьСередина = Макет.ПолучитьОбласть("Середина");
		ОбластьСтрокаИсходных = Макет.ПолучитьОбласть("СтрокаИсходных");
		ОбластьСтрокаКорректирующих = Макет.ПолучитьОбласть("СтрокаКорректирующих");
		ОбластьПустаяТаблицаИсходных = Макет.ПолучитьОбласть("ПустаяТаблицаИсходных");
		ОбластьПустаяТаблицаКорректирующих = Макет.ПолучитьОбласть("ПустаяТаблицаКорректирующих");
		
		Описание = ПроцедурыПерсонифицированногоУчета.ОписаниеОтчетногоПериодаДляФайла(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
		ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, ПроцедурыПерсонифицированногоУчета.ОписаниеОтчетногоПериодаДляПечати(Формат(Описание.Год,"ЧЦ=4; ЧГ=0"), Строка(Описание.Квартал)));
		ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, ВыборкаПоШапкеДокумента);
		ОбластьШапка.Параметры.ОрганизацияНаименованиеСокращенное = ВРег(ОбластьШапка.Параметры.ОрганизацияНаименованиеСокращенное);
		ЗаполнитьЗначенияСвойств(ОбластьСередина.Параметры, ВыборкаПоШапкеДокумента);
		ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, ВыборкаПоШапкеДокумента);
		
		ДокументРезультат.Вывести(ОбластьШапка);
		
		ВыборкаПоПачкам = СформироватьЗапросДляФайла().Выбрать();
		
		Если ВыборкаПоШапкеДокумента.КолИсходныхПачек = 0 Тогда
			ДокументРезультат.Вывести(ОбластьПустаяТаблицаИсходных);
		КонецЕсли;
		
		НачисленоСтраховаяСтрахователя = 0;
		НачисленоНакопительнаяСтрахователя = 0;
		ДоначисленоСтраховаяСтрахователя = 0;
		ДоначисленоНакопительнаяСтрахователя = 0;
		УплаченоСтраховаяСтрахователя = 0;
		УплаченоНакопительнаяСтрахователя = 0;
		ДоУплаченоСтраховаяСтрахователя = 0;
		ДоУплаченоНакопительнаяСтрахователя = 0;
		
		Пока ВыборкаПоПачкам.СледующийПоЗначениюПоля("Таблица") Цикл
			
			ВыводимаяОбласть = ?(ВыборкаПоПачкам.Таблица = 1, ОбластьСтрокаИсходных, ОбластьСтрокаКорректирующих);
			Если ВыборкаПоПачкам.Таблица = 2 Тогда
				ОбластьСередина.Параметры.НачисленоСтраховая = НачисленоСтраховаяСтрахователя;
				ОбластьСередина.Параметры.НачисленоНакопительная = НачисленоНакопительнаяСтрахователя;
				ОбластьСередина.Параметры.УплаченоСтраховая = УплаченоСтраховаяСтрахователя;
				ОбластьСередина.Параметры.УплаченоНакопительная = УплаченоНакопительнаяСтрахователя;
				ДокументРезультат.Вывести(ОбластьСередина);
				НачисленоСтраховаяСтрахователя = 0;
				НачисленоНакопительнаяСтрахователя = 0;
				ДоначисленоСтраховаяСтрахователя = 0;
				ДоначисленоНакопительнаяСтрахователя = 0;
				УплаченоСтраховаяСтрахователя = 0;
				УплаченоНакопительнаяСтрахователя = 0;
				ДоУплаченоСтраховаяСтрахователя = 0;
				ДоУплаченоНакопительнаяСтрахователя = 0;
			КонецЕсли;
			
			НомерСтроки = 0;
			Пока ВыборкаПоПачкам.Следующий() Цикл
				
				ЗаполнитьЗначенияСвойств(ВыводимаяОбласть.Параметры, ВыборкаПоПачкам, "КолЗЛ");
				
				НачисленоСтраховая = Окр(ВыборкаПоПачкам.НачисленоСтраховая);
				НачисленоНакопительная = Окр(ВыборкаПоПачкам.НачисленоНакопительная);
				ДоначисленоСтраховая = Окр(ВыборкаПоПачкам.ДоначисленоСтраховая);
				ДоначисленоНакопительная = Окр(ВыборкаПоПачкам.ДоначисленоНакопительная);
				УплаченоСтраховая = Окр(ВыборкаПоПачкам.УплаченоСтраховая);
				УплаченоНакопительная = Окр(ВыборкаПоПачкам.УплаченоНакопительная);
				ДоУплаченоСтраховая = Окр(ВыборкаПоПачкам.ДоУплаченоСтраховая);
				ДоУплаченоНакопительная = Окр(ВыборкаПоПачкам.ДоУплаченоНакопительная);
				
				Если ВыборкаПоПачкам.Таблица = 1 Тогда
					ВыводимаяОбласть.Параметры.НачисленоСтраховая = НачисленоСтраховая;
					ВыводимаяОбласть.Параметры.НачисленоНакопительная = НачисленоНакопительная;
					ВыводимаяОбласть.Параметры.УплаченоСтраховая = УплаченоСтраховая;
					ВыводимаяОбласть.Параметры.УплаченоНакопительная = УплаченоНакопительная;
				Иначе
					ВыводимаяОбласть.Параметры.ДоНачисленоСтраховая = ДоначисленоСтраховая;
					ВыводимаяОбласть.Параметры.ДоНачисленоНакопительная = ДоначисленоНакопительная;
					Если ВыводитьДоУплачено И Не ВыборкаПоПачкам.НеПередаватьДоуплаченныеСуммы Тогда
						ВыводимаяОбласть.Параметры.ДоУплаченоСтраховая = ДоУплаченоСтраховая;
						ВыводимаяОбласть.Параметры.ДоУплаченоНакопительная = ДоУплаченоНакопительная;
					КонецЕсли;
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				ВыводимаяОбласть.Параметры.НомерСтроки = НомерСтроки;
				ВыводимаяОбласть.Параметры.ИмяФайла = ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(ВыборкаПоПачкам.Ссылка, Год(ОтчетныйПериод), ВыборкаПоПачкам);
				ВыводимаяОбласть.Параметры.КодКатегории = ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаПоПачкам.КатегорияЗастрахованныхЛиц);
				ДокументРезультат.Вывести(ВыводимаяОбласть);
				
				НачисленоСтраховаяСтрахователя = НачисленоСтраховаяСтрахователя + НачисленоСтраховая;
				НачисленоНакопительнаяСтрахователя = НачисленоНакопительнаяСтрахователя + НачисленоНакопительная;
				УплаченоСтраховаяСтрахователя = УплаченоСтраховаяСтрахователя + УплаченоСтраховая;
				УплаченоНакопительнаяСтрахователя = УплаченоНакопительнаяСтрахователя + УплаченоНакопительная;
				ДоначисленоСтраховаяСтрахователя = ДоначисленоСтраховаяСтрахователя + ДоначисленоСтраховая;
				ДоначисленоНакопительнаяСтрахователя = ДоначисленоНакопительнаяСтрахователя + ДоначисленоНакопительная;
				ДоУплаченоСтраховаяСтрахователя = ДоУплаченоСтраховаяСтрахователя + ДоУплаченоСтраховая;
				ДоУплаченоНакопительнаяСтрахователя = ДоУплаченоНакопительнаяСтрахователя + ДоУплаченоНакопительная;
			КонецЦикла;
		КонецЦикла;
		
		Если ВыборкаПоШапкеДокумента.КолКорректирующихПачек = 0 Тогда
			ОбластьСередина.Параметры.НачисленоСтраховая = НачисленоСтраховаяСтрахователя;
			ОбластьСередина.Параметры.НачисленоНакопительная = НачисленоНакопительнаяСтрахователя;
			ОбластьСередина.Параметры.УплаченоСтраховая = УплаченоСтраховаяСтрахователя;
			ОбластьСередина.Параметры.УплаченоНакопительная = УплаченоНакопительнаяСтрахователя;
			ДокументРезультат.Вывести(ОбластьСередина);
			ДокументРезультат.Вывести(ОбластьПустаяТаблицаКорректирующих);
		Иначе
			ОбластьПодвал.Параметры.ДоНачисленоСтраховая = ДоначисленоСтраховаяСтрахователя;
			ОбластьПодвал.Параметры.ДоНачисленоНакопительная = ДоначисленоНакопительнаяСтрахователя;
			Если ВыводитьДоУплачено Тогда
				ОбластьПодвал.Параметры.ДоУплаченоСтраховая = ДоУплаченоСтраховаяСтрахователя;
				ОбластьПодвал.Параметры.ДоУплаченоНакопительная = ДоУплаченоНакопительнаяСтрахователя;
			КонецЕсли;
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьПодвал);
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат, 1 , Ложь, "Опись сведений, передаваемых страхователем в ПФР (АДВ-6-2); пачка №" + НомерПачки);
	
	Возврат Неопределено;
КонецФункции


//Функция определения численности работников
Функция ОпределениеЧисленности(ВидЧисленности)
	
	НачалоГода = Дата(Год,1,1);
	КонецГода = КонецГода(Дата(Год,1,1));
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоГода",				НачалоГода);
	Запрос.УстановитьПараметр("КонецГода",				КонецГода);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	Организация);

	Если ВидЧисленности = "Общая" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаРаботников.Физлицо КАК Физлицо
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&НачалоГода,
		|				Организация = &ГоловнаяОрганизация
		|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацийСрезПоследних
		|	ГДЕ
		|		РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&КонецГода,
		|				Организация = &ГоловнаяОрганизация
		|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|					И ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизацийСрезПоследних
		|	ГДЕ
		|		РаботникиОрганизацийСрезПоследних.Период >= &НачалоГода) КАК ТаблицаРаботников
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Физлицо)
		|ПО
		|	ОБЩИЕ";
		
	Иначе // ВидЧисленности = "Штатная"
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаРаботников.Физлицо КАК Физлицо
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&НачалоГода,
		|				Организация = &ГоловнаяОрганизация
		|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацийСрезПоследних
		|	ГДЕ
		|		РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&КонецГода,
		|				Организация = &ГоловнаяОрганизация
		|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|					И ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизацийСрезПоследних
		|	ГДЕ
		|		РаботникиОрганизацийСрезПоследних.Период >= &НачалоГода) КАК ТаблицаРаботников
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Физлицо)
		|ПО
		|	ОБЩИЕ";
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Физлицо;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//Функция собирает сведения о пачках
Функция СборСведенийОПачке(ДокументСведений)
	
	ИнформацияОПачке = Новый Структура;
	ИнформацияОПачке.Вставить("ТипБланка", "");
	ИнформацияОПачке.Вставить("ТипФормы", "");
	ИнформацияОПачке.Вставить("ВидКорректировки", "");
	ИнформацияОПачке.Вставить("ДокументовВПачке", "");
	ИнформацияОПачке.Вставить("СтрахЧастьПачки", "");
	ИнформацияОПачке.Вставить("НакопитЧастьПачки", "");
	ИнформацияОПачке.Вставить("ДопТарифЧастьПачки", "");
	ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", "");
	
	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ДокументСведений,ЕстьОшибки);
	Если ЕстьОшибки тогда
		Возврат ИнформацияОПачке;
	КонецЕсли;	
	
	// формируем отчет по версии файла 07.00	
	ДеревоПФР = ПроцедурыПерсонифицированногоУчета.ПреобразоватьВДеревоXML(ТекстФайла);
	
	Если ДеревоПФР = Неопределено Тогда
		Отказ = Ложь;
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось разобрать файл с данными!",Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ДокументСведений.Ссылка));
		Возврат ИнформацияОПачке;
	КонецЕсли;
	ДеревоПФР = ДеревоПФР.Строки.Найти("ФайлПФР","Имя");
	Если ДеревоПФР = Неопределено Тогда
		Отказ = Ложь;
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось разобрать файл с данными!",Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ДокументСведений.Ссылка));
		Возврат ИнформацияОПачке;
	КонецЕсли;
	
	//Соберем Информацию о пачке
	
	Если ДокументСведений.ТипФормДокументов = "СЗВ-4-2" Тогда
		ИнформацияОПачке.Вставить("ТипБланка", "4-2");// СЗВ-4-2
	Иначе
		ИнформацияОПачке.Вставить("ТипБланка", "4-1"); // СЗВ-4-1
	КонецЕсли;
	
	СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
	Если СтрокаДереваПачкаВходящихДокументов <> Неопределено Тогда
		
		СтрокаДереваВходящаяОпись = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВХОДЯЩАЯ_ОПИСЬ", "Имя");
		Если СтрокаДереваВходящаяОпись <> Неопределено Тогда
			
			СтрокаДереваПачкаСЗВ4 = СтрокаДереваВходящаяОпись.Строки.Найти("ПачкаСЗВ4");
			Если СтрокаДереваПачкаСЗВ4 <> Неопределено Тогда
				
				ВидКорректировкиВФайле = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "ВидКорректировки");
				Если ВидКорректировкиВФайле = "КОРРЕКТИРУЮЩАЯ" Тогда
					ВидКорректировки = "КОРР";
				ИначеЕсли ВидКорректировкиВФайле = "ОТМЕНЯЮЩАЯ" Тогда
					ВидКорректировки = "х";
				Иначе
					ВидКорректировки = "";
				КонецЕсли;
				ИнформацияОПачке.Вставить("ВидКорректировки", ВидКорректировки);
				
				ТипСведенийВФайле = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "ТипСведений");
				Если ТипСведенийВФайле = "ИСХОДНАЯ" Тогда
					ТипФормы = "ИСХД";
				Иначеесли ТипСведенийВФайле = "ПЕНСИОННАЯ" Тогда
					ТипФормы = "ПЕНС";
				Иначе
					ТипФормы = "";
				КонецЕсли;
				
				ИнформацияОПачке.Вставить("ТипФормы", ТипФормы);
				
				СтрокаДереваСоставДокументов = СтрокаДереваВходящаяОпись.Строки.Найти("СоставДокументов", "Имя");
				Если СтрокаДереваСоставДокументов <> Неопределено Тогда
					СтрокаДереваНаличиеДокументов = СтрокаДереваСоставДокументов.Строки.Найти("НаличиеДокументов", "Имя");
					Если СтрокаДереваНаличиеДокументов <> Неопределено Тогда
						ИнформацияОПачке.Вставить("ДокументовВПачке", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНаличиеДокументов, "Количество"));
					КонецЕсли;
				КонецЕсли;
				
				СтрокаДереваИтогоСуммаВзносов = СтрокаДереваПачкаСЗВ4.Строки.Найти("ИтогоСуммаВзносов", "Имя");
				Если СтрокаДереваИтогоСуммаВзносов <> Неопределено Тогда
					ИнформацияОПачке.Вставить("СтрахЧастьПачки", Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Страховые")), "ЧДЦ=2"));
					ИнформацияОПачке.Вставить("НакопитЧастьПачки", Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Накопительные")), "ЧДЦ=2"));
					ИнформацияОПачке.Вставить("ДопТарифЧастьПачки", Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Дополнительные")), "ЧДЦ=2"));
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаДереваНомерПачки = СтрокаДереваВходящаяОпись.Строки.Найти("НомерПачки", "Имя");
			Если СтрокаДереваНомерПачки <> Неопределено Тогда
				СтрокаДереваОсновной = СтрокаДереваНомерПачки.Строки.Найти("Основной", "Имя");
				Если СтрокаДереваОсновной <> Неопределено Тогда
					НомерПачкиРаботодателя = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "Основной");
				Иначе
					НомерПачкиРаботодателя = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "ПоПодразделению");
				КонецЕсли;
				ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", НомерПачкиРаботодателя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ИнформацияОПачке;
	
КонецФункции // СборСведенийОПачке

// Функция возвращает код по ОКПО организации по ИНН и КПП
//
Функция ПолучитьОКПООрганизацииПоИННиКПП(ИНН, КПП)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Организации.КодПоОКПО
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	Организации.ИНН = &ИНН
	               |	И Организации.КПП = &КПП";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КодПоОКПО;	
	КонецЕсли;	
	Возврат "";
КонецФункции // ПолучитьОКПООрганизацииПоИННиКПП()

//Функция вывода пояснительной записки на печать
Функция ПечатьПояснительнойЗаписки(КоличествоЭкземпляров = 1, НаПринтер = Ложь)
	
	ЕстьОшибки = Ложь;
	
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ЭтотОбъект,ЕстьОшибки);
	Если ЕстьОшибки тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
		Сообщить("Печать пояснительной записки по версии файла ПФР 04.00 не поддерживается.");
		Возврат Неопределено;
	КонецЕсли;
	
	// формируем отчет по версии файла 07.00	
	//	
	Если ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда
		
		Макет = ПолучитьМакет("ПояснительнаяЗаписка");
	
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПояснительнаяЗаписка";
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьОстаткаСтрокиПачки = Макет.ПолучитьОбласть("СтрокаПачки1|ОстатокСтроки");
		ОбластьСтрокиПачки = Макет.ПолучитьОбласть("Строка2");

		// Формируем шапку пояснительной записки
		
		// Получим сведения об ответственных лицах
		ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, Дата, Ответственный.ФизЛицо);
	
		ДеревоПФР = ПроцедурыПерсонифицированногоУчета.ПреобразоватьВДеревоXML(ТекстФайла);
		
		Если ДеревоПФР = Неопределено Тогда
			Отказ = Ложь;
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось разобрать файл с данными!",Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
			Возврат Неопределено 
		КонецЕсли;
		ДеревоПФР = ДеревоПФР.Строки.Найти("ФайлПФР","Имя");
		Если ДеревоПФР = Неопределено Тогда
			Отказ = Ложь;
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось разобрать файл с данными!",Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
			Возврат Неопределено 
		КонецЕсли;
		
		СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
		Если СтрокаДереваПачкаВходящихДокументов <> Неопределено Тогда
			СтрокаДереваВедомостьУплаты = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВЕДОМОСТЬ_УПЛАТЫ", "Имя");
			
			Если СтрокаДереваВедомостьУплаты <> Неопределено Тогда
				ОбластьШапка.Параметры.Год = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВедомостьУплаты, "РасчетныйПериод");
				СтрокаДереваСтрахователь = СтрокаДереваВедомостьУплаты.Строки.Найти("Страхователь", "Имя");
				
				// Заполнение данных шапки и подвала
				ОбластьШапка.Параметры.РегНомерПФР = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСтрахователь, "РегистрационныйНомер");
				ОбластьШапка.Параметры.НаименованиеКр1 = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСтрахователь, "НаименованиеКраткое");
				
				СтрокаДереваНалоговыйНомер = СтрокаДереваСтрахователь.Строки.Найти("НалоговыйНомер", "Имя");
				Если СтрокаДереваНалоговыйНомер <> Неопределено Тогда
					ОбластьШапка.Параметры.ИНН = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНалоговыйНомер, "ИНН");
					ОбластьШапка.Параметры.КПП = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНалоговыйНомер, "КПП");
				КонецЕсли;
				ОбластьПодвал.Параметры.Дата				 				= ПроцедурыПерсонифицированногоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВедомостьУплаты, "ДатаЗаполнения"));
			КонецЕсли;
		КонецЕсли;
		
		ОбластьШапка.Параметры.ШтатнаяЧисленность	 = ОпределениеЧисленности("Штатная");
		ОбластьШапка.Параметры.ОбщаяЧисленность		 = ОпределениеЧисленности("Общая");

		ДокументРезультат.Вывести(ОбластьШапка);
		
		ТаблицаОтменяющихФорм = Новый ТаблицаЗначений; 
		ТаблицаОтменяющихФорм.Колонки.Добавить("ТипБланка", Новый ОписаниеТипов("Строка"));
		ТаблицаОтменяющихФорм.Колонки.Добавить("ДокументовВПачке", Новый ОписаниеТипов("Число"));
		ТаблицаОтменяющихФорм.Колонки.Добавить("СтрахЧастьПачки", Новый ОписаниеТипов("Число"));
		ТаблицаОтменяющихФорм.Колонки.Добавить("НакопитЧастьПачки", Новый ОписаниеТипов("Число"));
		ТаблицаОтменяющихФорм.Колонки.Добавить("ДопТарифЧастьПачки", Новый ОписаниеТипов("Число"));
		ТаблицаОтменяющихФорм.Колонки.Добавить("НомерПачкиРаботодателя", Новый ОписаниеТипов("Число"));
		
		// итоги в строку 3
		ЧисленностьИтого = 0;
		СтраховыхИтого = 0;
		НакопитИтого = 0;
		ДопТарифИтого = 0;
		
		ВыведеноСтрокПачек = 0;
		Для каждого СтрокаТЧ Из ПачкиДокументов Цикл
			Если Не СтрокаТЧ.ДокументПачка.Пустая() Тогда
				ИнформацияОПачке = СборСведенийОПачке(СтрокаТЧ.ДокументПачка.ПолучитьОбъект());
				Если ИнформацияОПачке.ВидКорректировки = "х" Тогда
					// эти строки выводятся потом, запомним их в таблицу значений
					НоваяСтрокаОтменяющихФорм = ТаблицаОтменяющихФорм.Добавить();
					НоваяСтрокаОтменяющихФорм.ТипБланка = ИнформацияОПачке.ТипБланка;
					НоваяСтрокаОтменяющихФорм.ДокументовВПачке = ИнформацияОПачке.ДокументовВПачке;
					НоваяСтрокаОтменяющихФорм.СтрахЧастьПачки = ИнформацияОПачке.СтрахЧастьПачки;
					НоваяСтрокаОтменяющихФорм.НакопитЧастьПачки = ИнформацияОПачке.НакопитЧастьПачки;
					НоваяСтрокаОтменяющихФорм.ДопТарифЧастьПачки = ИнформацияОПачке.ДопТарифЧастьПачки;
					НоваяСтрокаОтменяющихФорм.НомерПачкиРаботодателя = ИнформацияОПачке.НомерПачкиРаботодателя;
				Иначе
					Если ВыведеноСтрокПачек = 0 Тогда
						ДокументРезультат.Вывести(Макет.ПолучитьОбласть("СтрокаПачки1|Графа1"));
					ИначеЕсли ВыведеноСтрокПачек = 1 Тогда
						ДокументРезультат.Вывести(Макет.ПолучитьОбласть("СтрокаПачки2|Графа1"));
					ИначеЕсли ВыведеноСтрокПачек = 2 Тогда
						ДокументРезультат.Вывести(Макет.ПолучитьОбласть("СтрокаПачки3|Графа1"));
					ИначеЕсли ВыведеноСтрокПачек = 3 Тогда
						ДокументРезультат.Вывести(Макет.ПолучитьОбласть("СтрокаПачки4|Графа1"));
					Иначе
						ДокументРезультат.Вывести(Макет.ПолучитьОбласть("Строка2|Графа1"));
					КонецЕсли;
					ОбластьОстаткаСтрокиПачки.Параметры.ТипБланка = ИнформацияОПачке.ТипБланка;
					ОбластьОстаткаСтрокиПачки.Параметры.ТипФормы = ИнформацияОПачке.ТипФормы;
					ОбластьОстаткаСтрокиПачки.Параметры.НомерПачкиРаботодателя = ИнформацияОПачке.НомерПачкиРаботодателя;
					ОбластьОстаткаСтрокиПачки.Параметры.ДокументовВПачке = ИнформацияОПачке.ДокументовВПачке;
					ОбластьОстаткаСтрокиПачки.Параметры.СтрахЧастьПачки = ИнформацияОПачке.СтрахЧастьПачки;
					ОбластьОстаткаСтрокиПачки.Параметры.НакопитЧастьПачки = ИнформацияОПачке.НакопитЧастьПачки;
					ОбластьОстаткаСтрокиПачки.Параметры.ДопТарифЧастьПачки = ИнформацияОПачке.ДопТарифЧастьПачки;
					ДокументРезультат.Присоединить(ОбластьОстаткаСтрокиПачки);

					ВыведеноСтрокПачек = ВыведеноСтрокПачек + 1;
					
					// итоги в строку 3
					ЧисленностьИтого = ЧисленностьИтого + ?(ИнформацияОПачке.ДокументовВПачке = "", 0, Число(ИнформацияОПачке.ДокументовВПачке));
					СтраховыхИтого = СтраховыхИтого + ?(ИнформацияОПачке.СтрахЧастьПачки = "", 0, Число(ИнформацияОПачке.СтрахЧастьПачки));
					НакопитИтого = НакопитИтого + ?(ИнформацияОПачке.НакопитЧастьПачки = "", 0, Число(ИнформацияОПачке.НакопитЧастьПачки));
					ДопТарифИтого = ДопТарифИтого + ?(ИнформацияОПачке.ДопТарифЧастьПачки = "", 0, Число(ИнформацияОПачке.ДопТарифЧастьПачки));
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;
		Если ВыведеноСтрокПачек = 1 Тогда
			ДокументРезультат.Вывести(Макет.ПолучитьОбласть("СтрокаПачки2"));
			ВыведеноСтрокПачек = ВыведеноСтрокПачек + 1;
		КонецЕсли;
		Если ВыведеноСтрокПачек = 2 Тогда
			ДокументРезультат.Вывести(Макет.ПолучитьОбласть("СтрокаПачки3"));
			ВыведеноСтрокПачек = ВыведеноСтрокПачек + 1;
		КонецЕсли;
		Если ВыведеноСтрокПачек = 3 Тогда
			ДокументРезультат.Вывести(Макет.ПолучитьОбласть("СтрокаПачки4"));
			ВыведеноСтрокПачек = ВыведеноСтрокПачек + 1;
		КонецЕсли;
		Пока ВыведеноСтрокПачек < 9 Цикл
			ДокументРезультат.Вывести(Макет.ПолучитьОбласть("СтрокаПачки"));
			ВыведеноСтрокПачек = ВыведеноСтрокПачек + 1;
		КонецЦикла;
		
		// вывод отменяющих форм
		ПерваяОтменяющая = Истина;
		Для Каждого СтрокаТаблицы Из ТаблицаОтменяющихФорм Цикл
			Если ПерваяОтменяющая Тогда
				ПерваяОтменяющая = Ложь;
				ДокументРезультат.Вывести(Макет.ПолучитьОбласть("СтрокаОтмен|Графа1"));
			Иначе
				ДокументРезультат.Вывести(Макет.ПолучитьОбласть("Строка2|Графа1"));
			КонецЕсли;
			ОбластьОстаткаСтрокиПачки.Параметры.ТипБланка = СтрокаТаблицы.ТипБланка;
			ОбластьОстаткаСтрокиПачки.Параметры.ТипФормы = "х";
			ОбластьОстаткаСтрокиПачки.Параметры.НомерПачкиРаботодателя = СтрокаТаблицы.НомерПачкиРаботодателя;
			ОбластьОстаткаСтрокиПачки.Параметры.ДокументовВПачке = СтрокаТаблицы.ДокументовВПачке;
			ОбластьОстаткаСтрокиПачки.Параметры.СтрахЧастьПачки = СтрокаТаблицы.СтрахЧастьПачки;
			ОбластьОстаткаСтрокиПачки.Параметры.НакопитЧастьПачки = СтрокаТаблицы.НакопитЧастьПачки;
			ОбластьОстаткаСтрокиПачки.Параметры.ДопТарифЧастьПачки = СтрокаТаблицы.ДопТарифЧастьПачки;
			ДокументРезультат.Присоединить(ОбластьОстаткаСтрокиПачки);
			// итоги в строку 3
			ЧисленностьИтого = ЧисленностьИтого - ?(СтрокаТаблицы.ДокументовВПачке = "", 0, Число(СтрокаТаблицы.ДокументовВПачке));
			СтраховыхИтого	 = СтраховыхИтого - ?(СтрокаТаблицы.СтрахЧастьПачки = "", 0, Число(СтрокаТаблицы.СтрахЧастьПачки));
			НакопитИтого	 = НакопитИтого - ?(СтрокаТаблицы.НакопитЧастьПачки = "", 0, Число(СтрокаТаблицы.НакопитЧастьПачки));
			ДопТарифИтого	 = ДопТарифИтого - ?(СтрокаТаблицы.ДопТарифЧастьПачки = "", 0, Число(СтрокаТаблицы.ДопТарифЧастьПачки));

		КонецЦикла;
		
		//вывод пустых строк, если отменяющих форм не было
		Если ПерваяОтменяющая Тогда
			ДокументРезультат.Вывести(Макет.ПолучитьОбласть("СтрокаОтмен"));
			ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ПустаяСтрокаОтмен"));
		ИначеЕсли ТаблицаОтменяющихФорм.Количество() < 2 Тогда
			ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ПустаяСтрокаОтмен"));
		КонецЕсли;
		
		// вывод всего по организации, включая этот документ (3а)

		// итоги в строку 3а
		ЧисленностьИтого3а = 0;
		СтраховыхИтого3а = 0;
		НакопитИтого3а = 0;
		ДопТарифИтого3а = 0;
		
		// сбор сумм из других проведенных уже документов передачи сведений за текущий год по этой организации
		//Запрос = Новый Запрос;
		//
		//Запрос.УстановитьПараметр("ГоловнаяОрганизация",	Организация);
		//Запрос.УстановитьПараметр("Год",					Год);
		//Запрос.УстановитьПараметр("Ссылка",					Ссылка);
		//ТекстЗапроса = 
		//"ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка.Ссылка КАК ДокументПачкаСсылка
		//|ИЗ
		//|	Документ.ПередачаСЗВ4вПФР.ПачкиДокументов КАК ПередачаСЗВ4вПФРПачкиДокументов
		//|ГДЕ
		//|	ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка.Организация = &ГоловнаяОрганизация
		//|	И ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка.Год = &Год
		//|	И ПередачаСЗВ4вПФРПачкиДокументов.Ссылка.Проведен
		//|	И ПередачаСЗВ4вПФРПачкиДокументов.Ссылка <> &Ссылка";
		//
		//Запрос.Текст = ТекстЗапроса;
		//ВыборкаДокументов = Запрос.Выполнить().Выбрать();
		//Пока ВыборкаДокументов.Следующий() Цикл

		//	ИнформацияОПачке = СборСведенийОПачке(ВыборкаДокументов.ДокументПачкаСсылка.ПолучитьОбъект());
		//	Если ИнформацияОПачке.ВидКорректировки = "х" Тогда
		//		ЧисленностьИтого3а = ЧисленностьИтого3а - ?(ИнформацияОПачке.ДокументовВПачке = "", 0, Число(ИнформацияОПачке.ДокументовВПачке));
		//		СтраховыхИтого3а = СтраховыхИтого3а - ?(ИнформацияОПачке.СтрахЧастьПачки = "", 0, Число(ИнформацияОПачке.СтрахЧастьПачки));
		//		НакопитИтого3а = НакопитИтого3а - ?(ИнформацияОПачке.НакопитЧастьПачки = "", 0, Число(ИнформацияОПачке.НакопитЧастьПачки));
		//		ДопТарифИтого3а = ДопТарифИтого3а - ?(ИнформацияОПачке.ДопТарифЧастьПачки = "", 0, Число(ИнформацияОПачке.ДопТарифЧастьПачки));
		//	Иначе
		//		ЧисленностьИтого3а = ЧисленностьИтого3а + ?(ИнформацияОПачке.ДокументовВПачке = "", 0, Число(ИнформацияОПачке.ДокументовВПачке));
		//		СтраховыхИтого3а = СтраховыхИтого3а + ?(ИнформацияОПачке.СтрахЧастьПачки = "", 0, Число(ИнформацияОПачке.СтрахЧастьПачки));
		//		НакопитИтого3а = НакопитИтого3а + ?(ИнформацияОПачке.НакопитЧастьПачки = "", 0, Число(ИнформацияОПачке.НакопитЧастьПачки));
		//		ДопТарифИтого3а = ДопТарифИтого3а + ?(ИнформацияОПачке.ДопТарифЧастьПачки = "", 0, Число(ИнформацияОПачке.ДопТарифЧастьПачки));
		//	КонецЕсли;

		//КонецЦикла;	
		//
		//// добавим суммы этого документа
		//ЧисленностьИтого3а 	= ЧисленностьИтого3а + ЧисленностьИтого;
		//СтраховыхИтого3а 	= СтраховыхИтого3а + СтраховыхИтого;
		//НакопитИтого3а 		= НакопитИтого3а + НакопитИтого;
		//ДопТарифИтого3а 	= ДопТарифИтого3а + ДопТарифИтого;
		Для Каждого СтрокаЗадолженности Из СведенияОЗадолженности Цикл
			Если СтрокаЗадолженности.Год = Год 
			И СтрокаЗадолженности.ТипСтроки = "Начислено" Тогда
				СтраховыхИтого3а = СтрокаЗадолженности.СтраховаяЧасть;
				НакопитИтого3а = СтрокаЗадолженности.НакопительнаяЧасть;
				ДопТарифИтого3а = СтрокаЗадолженности.ДополнительныйТариф;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ОбластьПодвал.Параметры.ЧисленностьИтого	 = ЧисленностьИтого;
		ОбластьПодвал.Параметры.СтраховыхИтого		 = СтраховыхИтого;
		ОбластьПодвал.Параметры.НакопитИтого		 = НакопитИтого;
		ОбластьПодвал.Параметры.ДопТарифИтого		 = ДопТарифИтого;
		ОбластьПодвал.Параметры.ЧисленностьИтого3а	 = ЧисленностьИтого;
		ОбластьПодвал.Параметры.СтраховыхИтого3а	 = СтраховыхИтого3а;
		ОбластьПодвал.Параметры.НакопитИтого3а		 = НакопитИтого3а;
		ОбластьПодвал.Параметры.ДопТарифИтого3а		 = ДопТарифИтого3а;
		ОбластьПодвал.Параметры.ДолжностьРуководителя		 	= ОтветственныеЛица.РуководительДолжность;
		ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
		
		ДокументРезультат.Вывести(ОбластьПодвал);
		
		УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат,КоличествоЭкземпляров, НаПринтер,"Пояснительная записка");
		Возврат "";
	
	КонецЕсли;
	
КонецФункции // ПечатьПояснительнойЗаписки

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	ЭтоСтарыеФормы = ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Или СпециальныйДокумент2010года;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "АДВ11" Тогда
		
		Если ЭтоСтарыеФормы Или НеСодержитСЗВ Тогда
			Возврат ПечатьАДВ11();
		Иначе	
			Возврат ПечатьАДВ62();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяМакета = "АДВ62" Тогда
		Возврат ПечатьАДВ62("Проект");
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Записка" Тогда
		
		Если ЭтоСтарыеФормы Тогда
			Возврат ПечатьПояснительнойЗаписки();
		Иначе
			Предупреждение("За отчетные периоды с 2010 года ""Пояснительная записка"" не формируется!");
			Возврат Неопределено
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяМакета = "СЗВ4" Тогда
		ПечатнаяФорма = ?(ЭтоСтарыеФормы,"ФормаСЗВ_4_2","ФормаСЗВ_6_2");
		Для каждого СтрокаТЧ Из ПачкиДокументов Цикл
			Если Не СтрокаТЧ.ДокументПачка.Пустая() Тогда
				Результат = СтрокаТЧ.ДокументПачка.ПолучитьОбъект().Печать(ПечатнаяФорма, КоличествоЭкземпляров, НаПринтер)
			КонецЕсли;
		КонецЦикла;
		Возврат Результат
	КонецЕсли;
	
	Если ИмяМакета = "ВсеДокументы" Тогда
		
		Если ЭтоСтарыеФормы Тогда
			ПечатьПояснительнойЗаписки();
		КонецЕсли;
		
		ПечатнаяФорма = ?(ЭтоСтарыеФормы,"ФормаСЗВ_4_2","ФормаСЗВ_6_2");
		Для каждого СтрокаТЧ Из ПачкиДокументов Цикл
			Если Не СтрокаТЧ.ДокументПачка.Пустая() Тогда
				СтрокаТЧ.ДокументПачка.ПолучитьОбъект().Печать(ПечатнаяФорма, КоличествоЭкземпляров, НаПринтер, Ложь)
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоСтарыеФормы Или НеСодержитСЗВ Тогда
			Возврат ПечатьАДВ11();
		Иначе	
			ПечатьАДВ62(,Ложь);
			Возврат ПечатьАДВ62("Проект",Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // Печать

#КонецЕсли

// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
Функция СформироватьВыходнойФайл(Отказ, Заголовок = "", ПроверятьДанные = Истина, ВыборкаПоШапкеДокумента = Неопределено) Экспорт
	
	Если ЗаполненПринятымиСведениями Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АрхивДанныхРегламентированнойОтчетности.Данные
		|ИЗ
		|	РегистрСведений.АрхивДанныхРегламентированнойОтчетности КАК АрхивДанныхРегламентированнойОтчетности
		|ГДЕ
		|	АрхивДанныхРегламентированнойОтчетности.Объект = &ДокументСсылка";
		
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		Если ВыборкаДанных.Следующий() тогда
			Возврат ВыборкаДанных.Данные;
		Иначе	
			Возврат "";
		КонецЕсли;	 
		
	КонецЕсли;
	
	//Проверка корректности заполнения шапки документа
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	
	//Проверка корректности заполнения документа
	Если ПроверятьДанные Тогда
		ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь, ВыборкаПоШапкеДокумента);
	КонецЕсли;
	
	Если Отказ тогда
		Возврат "";
	КонецЕсли;	 
	
	Если ВыборкаПоШапкеДокумента.ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Или НеСодержитСЗВ Тогда
		Возврат ФайлДо2010Года(Отказ, ВыборкаПоШапкеДокумента, Заголовок);
	Иначе
		Возврат ФайлС2010Года(ВыборкаПоШапкеДокумента);
	КонецЕсли;	 
	
КонецФункции 


Функция ФайлДо2010Года(Отказ, ВыборкаПоШапкеДокумента, Заголовок)

	ВыборкаПоЗадолженности = СформироватьЗапросПоЗадолженности().Выбрать();
	
	ДатаЗаполнения 			= ВыборкаПоШапкеДокумента.Дата;
	РасчетныйПериодГод      = ВыборкаПоШапкеДокумента.Год;
	
	ТекстФайла	=	"";
	НомерДокументаВПачке = 0;
	
	// Формирование файла версии 04.00
	Если ВыборкаПоШапкеДокумента.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда

		//Получаем форматы необходимых записей
		ДокументФорматЗаписей = ПолучитьМакет("ФорматЗаписей");
		ФорматЗаписиВУПЛ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ВУПЛ",ДокументФорматЗаписей);
		ФорматЗаписиЗНЧЛ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ЗНЧЛ",ДокументФорматЗаписей);// Задолженность на начало периода
		ФорматЗаписиУПЛЧ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("УПЛЧ",ДокументФорматЗаписей);// Уплачено за период
		ФорматЗаписиЗКНЦ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ЗКНЦ",ДокументФорматЗаписей);// Задолженность на конец периода
		
		//Обработаем расчеты по годам
		ВсегоДолгНаНачалоСтраховаяЧасть = 0;
		ВсегоДолгНаНачалоНакопительнаяЧасть = 0;
		ВсегоУплаченоСтраховаяЧасть = 0;
		ВсегоУплаченоНакопительнаяЧасть = 0;
		ВсегоЗадолженностьСтраховаяЧасть = 0;
		ВсегоЗадолженностьНакопительнаяЧасть = 0;
		
		СтрокиЗНЧЛ = "";// Строки задолженности на начало
		ЧислоСтрокЗНЧЛ = 0;
		СтрокиУПЛЧ = "";// Строки уплачено по годам
		ЧислоСтрокУПЛЧ = 0;
		СтрокиЗКНЦ = "";// Строки задолженность на конец
		ЧислоСтрокЗКНЦ = 0;
		
		НачисленоСтраховаяЧасть = 0;
		НачисленоНакопительнаяЧасть = 0;
		
		Пока ВыборкаПоЗадолженности.Следующий() Цикл
			
			ПроверитьСтрокуЗадолженности(ВыборкаПоЗадолженности, ВыборкаПоШапкеДокумента, Отказ, Заголовок);
			
			Если ВыборкаПоЗадолженности.ТипСтроки = "Долг на начало года" Тогда
				
				ЗаписьЗНЧЛ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиЗНЧЛ);
				ЗаписьЗНЧЛ.ТипЗаписи = "ЗНЧЛ";
				ЗаписьЗНЧЛ.Год = ВыборкаПоЗадолженности.Год;
				ЗаписьЗНЧЛ.СтраховаяЧасть = ВыборкаПоЗадолженности.СтраховаяЧасть;
				ЗаписьЗНЧЛ.НакопительнаяЧасть = ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
				//	Сохраняем запись ЗНЧЛ 
				СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьЗНЧЛ,ФорматЗаписиЗНЧЛ);
				СтрокиЗНЧЛ	=	СтрокиЗНЧЛ	+	СтрокавФайл + Символы.ПС;
				ЧислоСтрокЗНЧЛ = ЧислоСтрокЗНЧЛ + 1;
				
				//
				ВсегоДолгНаНачалоСтраховаяЧасть = ВсегоДолгНаНачалоСтраховаяЧасть + ВыборкаПоЗадолженности.СтраховаяЧасть;
				ВсегоДолгНаНачалоНакопительнаяЧасть = ВсегоДолгНаНачалоНакопительнаяЧасть + ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
			ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Уплачено" Тогда
				
				ЗаписьУПЛЧ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиУПЛЧ);
				ЗаписьУПЛЧ.ТипЗаписи = "УПЛЧ";
				ЗаписьУПЛЧ.Год = ВыборкаПоЗадолженности.Год;
				ЗаписьУПЛЧ.СтраховаяЧасть = ВыборкаПоЗадолженности.СтраховаяЧасть;
				ЗаписьУПЛЧ.НакопительнаяЧасть = ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
				//	Сохраняем запись УПЛЧ 
				СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьУПЛЧ,ФорматЗаписиУПЛЧ);
				СтрокиУПЛЧ	=	СтрокиУПЛЧ	+	СтрокавФайл + Символы.ПС;
				ЧислоСтрокУПЛЧ = ЧислоСтрокУПЛЧ + 1;
				
				//
				ВсегоУплаченоСтраховаяЧасть = ВсегоУплаченоСтраховаяЧасть + ВыборкаПоЗадолженности.СтраховаяЧасть;
				ВсегоУплаченоНакопительнаяЧасть = ВсегоУплаченоНакопительнаяЧасть + ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
			ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Начислено" Тогда
				
				НачисленоСтраховаяЧасть = ВыборкаПоЗадолженности.СтраховаяЧасть;
				НачисленоНакопительнаяЧасть = ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
			ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Долг на конец года" Тогда 
				
				ЗаписьЗКНЦ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиЗКНЦ);
				ЗаписьЗКНЦ.ТипЗаписи = "ЗКНЦ";
				ЗаписьЗКНЦ.Год = ВыборкаПоЗадолженности.Год;
				ЗаписьЗКНЦ.СтраховаяЧасть = ВыборкаПоЗадолженности.СтраховаяЧасть;
				ЗаписьЗКНЦ.НакопительнаяЧасть = ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
				//	Сохраняем запись ЗКНЦ 
				СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьЗКНЦ,ФорматЗаписиЗКНЦ);
				СтрокиЗКНЦ	=	СтрокиЗКНЦ	+	СтрокавФайл + Символы.ПС;
				ЧислоСтрокЗКНЦ = ЧислоСтрокЗКНЦ + 1;
				
				//
				ВсегоЗадолженностьСтраховаяЧасть = ВсегоЗадолженностьСтраховаяЧасть + ВыборкаПоЗадолженности.СтраховаяЧасть;
				ВсегоЗадолженностьНакопительнаяЧасть = ВсегоЗадолженностьНакопительнаяЧасть + ВыборкаПоЗадолженности.НакопительнаяЧасть;
				
			КонецЕсли; 
		КонецЦикла; 
		
		//Формируем заголовок файла 
		
		ТекстФайла	=	ТекстФайла + ПроцедурыПерсонифицированногоУчета.ПолучитьЗаписьЗаголовок();
		ТекстФайла	=	ТекстФайла + ПроцедурыПерсонифицированногоУчета.ПолучитьЗаписьОРаботодателе(ВыборкаПоШапкеДокумента.Организация, ВыборкаПоШапкеДокумента.Дата, Отказ);
		ТекстФайла	=	ТекстФайла + ПроцедурыПерсонифицированногоУчета.ПолучитьЗаписьОПачке(НомерПачки,ДатаЗаполнения,"" ,"" ,РасчетныйПериодГод, ВыборкаПоШапкеДокумента.КодОсновногоТарифа);
		ТекстФайла	=	ТекстФайла + ПроцедурыПерсонифицированногоУчета.ПолучитьЗаписьОПачке(СокрЛП(НомерПачки),ДатаЗаполнения,"" ,"" ,РасчетныйПериодГод, ВыборкаПоШапкеДокумента.КодОсновногоТарифа);
		ТекстФайла	=	ТекстФайла + ПроцедурыПерсонифицированногоУчета.ПолучитьЗаписьОТипеДокумента("ВУПЛ", 1);
		
		// Формируем запись ВУПЛ	
		ЗаписьВУПЛ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиВУПЛ);
		ЗаписьВУПЛ.ТипЗаписи = "ВУПЛ";
		ЗаписьВУПЛ.НомерДокументаВПачке = 1;
		ЗаписьВУПЛ.РасчетныйПериодГод = РасчетныйПериодГод;
		ЗаписьВУПЛ.ДатаДействия = ВыборкаПоШапкеДокумента.ДатаДействия;	
		ЗаписьВУПЛ.КоличествоПачек = ПачкиДокументов.Количество();	
		ЗаписьВУПЛ.ЧислоЗастрахованныхЛиц = ВыборкаПоШапкеДокумента.ЧислоЗастрахованныхЛиц;	
		ЗаписьВУПЛ.КодОсновногоТарифа = ВыборкаПоШапкеДокумента.КодОсновногоТарифа;	
		ЗаписьВУПЛ.ПризнакТарифа = ВыборкаПоШапкеДокумента.ПризнакТарифа;	
		
		// Суммы начислений за текущий год
		ЗаписьВУПЛ.НачисленоСтраховаяЧасть = НачисленоСтраховаяЧасть;	
		ЗаписьВУПЛ.НачисленоНакопительнаяЧасть = НачисленоНакопительнаяЧасть;	
		
		// Задолженность за прошлые годы
		ЗаписьВУПЛ.ДолгНаНачалоСтраховаяЧасть = ВсегоДолгНаНачалоСтраховаяЧасть;	
		ЗаписьВУПЛ.ДолгНаНачалоНакопительнаяЧасть = ВсегоДолгНаНачалоНакопительнаяЧасть;	
		
		// Уплачено по годам
		ЗаписьВУПЛ.УплаченоСтраховаяЧасть = ВсегоУплаченоСтраховаяЧасть;	
		ЗаписьВУПЛ.УплаченоНакопительнаяЧасть = ВсегоУплаченоНакопительнаяЧасть;	
		
		// Задолженность по всем периодам
		ЗаписьВУПЛ.ДолгНаКонецСтраховаяЧасть = ВсегоЗадолженностьСтраховаяЧасть;	
		ЗаписьВУПЛ.ДолгНаКонецНакопительнаяЧасть = ВсегоЗадолженностьНакопительнаяЧасть;	
		
		// Число записей по типам
		ЗаписьВУПЛ.ЧислоЗаписейЗНЧЛ = ЧислоСтрокЗНЧЛ;	
		ЗаписьВУПЛ.ЧислоЗаписейУПЛЧ = ЧислоСтрокУПЛЧ;	
		ЗаписьВУПЛ.ЧислоЗаписейЗКНЦ = ЧислоСтрокЗКНЦ;	
		
		ЗаписьВУПЛ.ДатаЗаполнения = ДатаЗаполнения;	
		
		//	Добавляем запись ВУПЛ в файл 
		СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьВУПЛ,ФорматЗаписиВУПЛ);
		ТекстФайла	=	ТекстФайла	+	СтрокавФайл + Символы.ПС;
		
		//	Добавляем записи ЗНЧЛ, УПЛЧ, ЗКНЦ 
		ТекстФайла	=	ТекстФайла	+	СтрокиЗНЧЛ + СтрокиУПЛЧ + СтрокиЗКНЦ;
		
	ИначеЕсли ВыборкаПоШапкеДокумента.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда 
		
		// Формирование файла версии 07.00

		// Загружаем формат файла сведений
		МакетФормата = ПолучитьОбщийМакет("ФорматПФР70");
		
		НомерДокументаВПачке = 1;
		// Создаем начальное дерево
		ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
				
		УзелПФР = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ФайлПФР", "", );
		
		ПроцедурыПерсонифицированногоУчета.ЗаполнитьИмяИЗаголовокФайла(УзелПФР, МакетФормата, ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(Ссылка, ВыборкаПоШапкеДокумента.Год, ВыборкаПоШапкеДокумента));
		
		// Добавляем реквизит ПачкаВходящихДокументов
		УзелПачкаВходящихДокументов = ПроцедурыПерсонифицированногоУчета.ЗаполнитьНаборЗаписейВходящаяОпись(УзелПФР, МакетФормата, "ВЕДОМОСТЬ_УПЛАТЫ", ВыборкаПоШапкеДокумента, 1, СокрЛП(НомерПачки), НомерДокументаВПачке);
		
		НаборЗаписейВедомостьУплаты = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ВЕДОМОСТЬ_УПЛАТЫ");		
		
		НомерДокументаВПачке = НомерДокументаВПачке + 1;
		НаборЗаписейВедомостьУплаты.НомерВПачке.Значение = НомерДокументаВПачке;
		
		// Страхователь
		НаборЗаписейСтрахователь = НаборЗаписейВедомостьУплаты.Страхователь.Значение;
		ПроцедурыПерсонифицированногоУчета.ЗаполнитьСоставительПачки(НаборЗаписейСтрахователь, ВыборкаПоШапкеДокумента);
		
		НаборЗаписейВедомостьУплаты.РасчетныйПериод.Значение = РасчетныйПериодГод;
		НаборЗаписейВедомостьУплаты.ДатаВедомости.Значение = ДатаДействия;
		
		Если ВыборкаПоШапкеДокумента.ТипСведений = "ИСХД" Тогда
			НаборЗаписейВедомостьУплаты.ТипАДВ__11.Значение = "ПОЛНАЯ"
		ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = "ПЕНС" Тогда
			НаборЗаписейВедомостьУплаты.ТипАДВ__11.Значение = "МЕЖРАСЧЕТНАЯ";
		КонецЕсли;
		
		// ЧислоПачек
		НаборЗаписейВедомостьУплаты.ЧислоПачек.Значение = ПачкиДокументов.Количество();
		
		// ЧислоЗастрахованныхЛиц
		НаборЗаписейВедомостьУплаты.ЧислоЗастрахованныхЛиц.Значение = ВыборкаПоШапкеДокумента.ЧислоЗастрахованныхЛиц;
		
		// Тариф
		НаборЗаписейТариф = НаборЗаписейВедомостьУплаты.Тариф.Значение;
		НаборЗаписейТариф.КодКатегории = ВыборкаПоШапкеДокумента.КодОсновногоТарифа;
		
		НаборЗаписейВедомостьУплаты.ПризнакТарифа.Значение = ВыборкаПоШапкеДокумента.ПризнакТарифа;
		
		// ЗадолженностьНаНачало
		ФорматЗадолженностьНаНачало = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(НаборЗаписейВедомостьУплаты.ЗадолженностьНаНачало);
		НаборЗаписейВедомостьУплаты.ЗадолженностьНаНачало.Значение.Удалить("СуммаЗаПериод");
		ФорматСуммаЗаПериод = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматЗадолженностьНаНачало.Значение.СуммаЗаПериод.Значение);
		
		// УплатаЗаПериод
		НаборЗаписейВедомостьУплаты.УплатаЗаПериод.Значение.Удалить("СуммаЗаПериод");
		
		// ЗадолженностьНаКонец
		НаборЗаписейВедомостьУплаты.ЗадолженностьНаКонец.Значение.Удалить("СуммаЗаПериод");
		
		
		НаборЗаписейВедомостьУплаты.ДатаЗаполнения.Значение = ДатаЗаполнения;
		УзелВедомостьУплаты = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, "ВЕДОМОСТЬ_УПЛАТЫ","");
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелВедомостьУплаты, НаборЗаписейВедомостьУплаты);
		
		УзелЗадолженностьНаНачало = УзелВедомостьУплаты.Строки.Найти("ЗадолженностьНаНачало");
		УзелЗадолженностьНаНачало.Строки.Очистить();
		УзелНачисленоЗаПериод = УзелВедомостьУплаты.Строки.Найти("НачисленияЗаПериод");
		УзелУплатаЗаПериод = УзелВедомостьУплаты.Строки.Найти("УплатаЗаПериод");
		УзелУплатаЗаПериод.Строки.Очистить();
		УзелЗадолженностьНаКонец = УзелВедомостьУплаты.Строки.Найти("ЗадолженностьНаКонец");
		УзелЗадолженностьНаКонец.Строки.Очистить();
		
		
		//Обработаем расчеты по годам
		ВсегоДолгНаНачалоСтраховаяЧасть = 0;
		ВсегоДолгНаНачалоНакопительнаяЧасть = 0;
		ВсегоДолгНаНачалоДополнительныйТариф = 0;
		ВсегоУплаченоСтраховаяЧасть = 0;
		ВсегоУплаченоНакопительнаяЧасть = 0;
		ВсегоУплаченоДополнительныйТариф = 0;
		ВсегоЗадолженностьСтраховаяЧасть = 0;
		ВсегоЗадолженностьНакопительнаяЧасть = 0;
		ВсегоЗадолженностьДополнительныйТариф = 0;
		
		ЧислоСтрокЗНЧЛ 		= 0;// Строки задолженности на начало
		ЧислоСтрокУПЛЧ 		= 0;// Строки уплачено по годам
		ЧислоСтрокЗКНЦ 		= 0;// Строки задолженность на конец
		ЧислоСтрокНачислено = 0;
		
		НачисленоСтраховаяЧасть = 0;
		НачисленоНакопительнаяЧасть = 0;
		НачисленоДополнительынйТариф = 0;
		
		
		Пока ВыборкаПоЗадолженности.Следующий() Цикл
			
			ПроверитьСтрокуЗадолженности(ВыборкаПоЗадолженности, ВыборкаПоШапкеДокумента, Отказ, Заголовок);
			
			Если ВыборкаПоЗадолженности.ТипСтроки = "Долг на начало года" Тогда
				ЧислоСтрокЗНЧЛ = ЧислоСтрокЗНЧЛ + 1;
				
				НаборЗаписейСуммаЗаПериод = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСуммаЗаПериод);
				
				НаборЗаписейСуммаЗаПериод.ТипСтроки.Значение = "ДЕТАЛЬНАЯ";
				НаборЗаписейСуммаЗаПериод.РасчетныйПериод.Значение = ВыборкаПоЗадолженности.Год;
				НаборЗаписейСтраховыеВзносы = НаборЗаписейСуммаЗаПериод.СтраховыеВзносы.Значение;
				НаборЗаписейСтраховыеВзносы.Страховые = ВыборкаПоЗадолженности.СтраховаяЧасть;
				НаборЗаписейСтраховыеВзносы.Накопительные = ВыборкаПоЗадолженности.НакопительнаяЧасть;
				НаборЗаписейСтраховыеВзносы.Дополнительные = ВыборкаПоЗадолженности.ДополнительныйТариф;
				
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелЗадолженностьНаНачало, "СуммаЗаПериод", ""), НаборЗаписейСуммаЗаПериод);
				
				ВсегоДолгНаНачалоСтраховаяЧасть = ВсегоДолгНаНачалоСтраховаяЧасть + ВыборкаПоЗадолженности.СтраховаяЧасть;
				ВсегоДолгНаНачалоНакопительнаяЧасть = ВсегоДолгНаНачалоНакопительнаяЧасть + ВыборкаПоЗадолженности.НакопительнаяЧасть;
				ВсегоДолгНаНачалоДополнительныйТариф = ВсегоДолгНаНачалоДополнительныйТариф + ВыборкаПоЗадолженности.ДополнительныйТариф;
				
			ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Уплачено" Тогда
				ЧислоСтрокУПЛЧ = ЧислоСтрокУПЛЧ + 1;
				
				НаборЗаписейУплатаСуммаЗаПериод = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСуммаЗаПериод);
				
				НаборЗаписейУплатаСуммаЗаПериод.ТипСтроки.Значение = "ДЕТАЛЬНАЯ";
				НаборЗаписейУплатаСуммаЗаПериод.РасчетныйПериод.Значение = ВыборкаПоЗадолженности.Год;
				НаборЗаписейУплатаСуммаЗаПериод.СтраховыеВзносы.Значение.Страховые = ВыборкаПоЗадолженности.СтраховаяЧасть;
				НаборЗаписейУплатаСуммаЗаПериод.СтраховыеВзносы.Значение.Накопительные = ВыборкаПоЗадолженности.НакопительнаяЧасть;
				НаборЗаписейУплатаСуммаЗаПериод.СтраховыеВзносы.Значение.Дополнительные = ВыборкаПоЗадолженности.ДополнительныйТариф;
				
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелУплатаЗаПериод, "СуммаЗаПериод",""), НаборЗаписейУплатаСуммаЗаПериод);
		
				ВсегоУплаченоСтраховаяЧасть = ВсегоУплаченоСтраховаяЧасть + ВыборкаПоЗадолженности.СтраховаяЧасть;
				ВсегоУплаченоНакопительнаяЧасть = ВсегоУплаченоНакопительнаяЧасть + ВыборкаПоЗадолженности.НакопительнаяЧасть;
				ВсегоУплаченоДополнительныйТариф = ВсегоУплаченоДополнительныйТариф + ВыборкаПоЗадолженности.ДополнительныйТариф;
				
			ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Начислено" Тогда
				ЧислоСтрокНачислено = ЧислоСтрокНачислено + 1;
				УзелНачисленоЗаПериод.Строки.Найти("Страховые").Значение = Формат(ВыборкаПоЗадолженности.СтраховаяЧасть, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				УзелНачисленоЗаПериод.Строки.Найти("Накопительные").Значение = Формат(ВыборкаПоЗадолженности.НакопительнаяЧасть, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				УзелНачисленоЗаПериод.Строки.Найти("Дополнительные").Значение = Формат(ВыборкаПоЗадолженности.ДополнительныйТариф, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				
				НачисленоСтраховаяЧасть = ВыборкаПоЗадолженности.СтраховаяЧасть;
				НачисленоНакопительнаяЧасть = ВыборкаПоЗадолженности.НакопительнаяЧасть;
				НачисленоДополнительныйТариф = ВыборкаПоЗадолженности.ДополнительныйТариф;
				
			ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Долг на конец года" Тогда 
				ЧислоСтрокЗКНЦ = ЧислоСтрокЗКНЦ + 1;
				
				НаборЗаписейДолгКонецСуммаЗаПериод = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСуммаЗаПериод);
				
				НаборЗаписейДолгКонецСуммаЗаПериод.ТипСтроки.Значение = "ДЕТАЛЬНАЯ";
				НаборЗаписейДолгКонецСуммаЗаПериод.РасчетныйПериод.Значение = ВыборкаПоЗадолженности.Год;
				НаборЗаписейДолгКонецСуммаЗаПериод.СтраховыеВзносы.Значение.Страховые = ВыборкаПоЗадолженности.СтраховаяЧасть;
				НаборЗаписейДолгКонецСуммаЗаПериод.СтраховыеВзносы.Значение.Накопительные = ВыборкаПоЗадолженности.НакопительнаяЧасть;
				НаборЗаписейДолгКонецСуммаЗаПериод.СтраховыеВзносы.Значение.Дополнительные = ВыборкаПоЗадолженности.ДополнительныйТариф;
				
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелЗадолженностьНаКонец, "СуммаЗаПериод", ""), НаборЗаписейДолгКонецСуммаЗаПериод);
				
				ВсегоЗадолженностьСтраховаяЧасть = ВсегоЗадолженностьСтраховаяЧасть + ВыборкаПоЗадолженности.СтраховаяЧасть;
				ВсегоЗадолженностьНакопительнаяЧасть = ВсегоЗадолженностьНакопительнаяЧасть + ВыборкаПоЗадолженности.НакопительнаяЧасть;
				ВсегоЗадолженностьДополнительныйТариф = ВсегоЗадолженностьДополнительныйТариф + ВыборкаПоЗадолженности.ДополнительныйТариф;
				
			КонецЕсли; 
		КонецЦикла; 
		
		Если ВсегоДолгНаНачалоДополнительныйТариф <> 0
		 	ИЛИ ВсегоУплаченоДополнительныйТариф <> 0
		 	ИЛИ ВсегоЗадолженностьДополнительныйТариф <> 0 Тогда
			СтрокиТариф = УзелВедомостьУплаты.Строки.Найти("Тариф");
			Если СтрокиТариф <> Неопределено Тогда
				СтрокаКодДополнительногоТарифа = СтрокиТариф.Строки.Найти("КодДополнительногоТарифа");
				Если СтрокаКодДополнительногоТарифа <> Неопределено Тогда
					СтрокаКодДополнительногоТарифа.Значение = "АВИА";
				КонецЕсли;
				СтрокаНазваниеДополнительногоТарифа = СтрокиТариф.Строки.Найти("НазваниеДополнительногоТарифа");
				Если СтрокаНазваниеДополнительногоТарифа <> Неопределено Тогда
					СтрокаНазваниеДополнительногоТарифа.Значение = "ЧЛЕН ЛЭВС";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЧислоСтрокЗНЧЛ = 0 Тогда
			УзелВедомостьУплаты.Строки.Удалить(УзелЗадолженностьНаНачало);
		Иначе
			НоваяСтрока = УзелЗадолженностьНаНачало.Строки.Вставить(0);
			НоваяСтрока.Имя = "Количество";
			НоваяСтрока.Значение = ЧислоСтрокЗНЧЛ + 1;
			// Добавление строки ИТОГО
			НаборЗаписейСуммаЗаПериод = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСуммаЗаПериод);
			НаборЗаписейСуммаЗаПериод.Удалить("РасчетныйПериод");
			НаборЗаписейСуммаЗаПериод.ТипСтроки.Значение = "ИТОГО";
			НаборЗаписейСуммаЗаПериод.СтраховыеВзносы.Значение.Страховые = ВсегоДолгНаНачалоСтраховаяЧасть;
			НаборЗаписейСуммаЗаПериод.СтраховыеВзносы.Значение.Накопительные = ВсегоДолгНаНачалоНакопительнаяЧасть;
			НаборЗаписейСуммаЗаПериод.СтраховыеВзносы.Значение.Дополнительные = ВсегоДолгНаНачалоДополнительныйТариф;
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелЗадолженностьНаНачало, "СуммаЗаПериод", ""), НаборЗаписейСуммаЗаПериод);
				
		КонецЕсли;
		
		Если ЧислоСтрокНачислено = 0 Тогда
			УзелВедомостьУплаты.Строки.Удалить(УзелНачисленоЗаПериод);
		КонецЕсли;
		
		Если ЧислоСтрокУПЛЧ = 0 Тогда
			УзелВедомостьУплаты.Строки.Удалить(УзелУплатаЗаПериод);
		Иначе
			НоваяСтрока = УзелУплатаЗаПериод.Строки.Вставить(0);
			НоваяСтрока.Имя = "Количество";
			НоваяСтрока.Значение = ЧислоСтрокУПЛЧ + 1;
			// Добавление строки ИТОГО
			НаборЗаписейУплатаСуммаЗаПериод = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСуммаЗаПериод);
			НаборЗаписейУплатаСуммаЗаПериод.Удалить("РасчетныйПериод");
			НаборЗаписейУплатаСуммаЗаПериод.ТипСтроки.Значение = "ИТОГО";
			НаборЗаписейУплатаСуммаЗаПериод.СтраховыеВзносы.Значение.Страховые = ВсегоУплаченоСтраховаяЧасть;
			НаборЗаписейУплатаСуммаЗаПериод.СтраховыеВзносы.Значение.Накопительные = ВсегоУплаченоНакопительнаяЧасть;
			НаборЗаписейУплатаСуммаЗаПериод.СтраховыеВзносы.Значение.Дополнительные = ВсегоУплаченоДополнительныйТариф;
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелУплатаЗаПериод, "СуммаЗаПериод",""), НаборЗаписейУплатаСуммаЗаПериод);
			
		КонецЕсли;
		Если ЧислоСтрокЗКНЦ = 0 Тогда
			УзелВедомостьУплаты.Строки.Удалить(УзелЗадолженностьНаКонец);
		Иначе
			НоваяСтрока = УзелЗадолженностьНаКонец.Строки.Вставить(0);
			НоваяСтрока.Имя = "Количество";
			НоваяСтрока.Значение = ЧислоСтрокЗКНЦ + 1;
			// Добавление строки ИТОГО
			НаборЗаписейДолгКонецСуммаЗаПериод = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСуммаЗаПериод);
			НаборЗаписейДолгКонецСуммаЗаПериод.Удалить("РасчетныйПериод");	
			НаборЗаписейДолгКонецСуммаЗаПериод.ТипСтроки.Значение = "ИТОГО";
			НаборЗаписейДолгКонецСуммаЗаПериод.СтраховыеВзносы.Значение.Страховые = ВсегоЗадолженностьСтраховаяЧасть;
			НаборЗаписейДолгКонецСуммаЗаПериод.СтраховыеВзносы.Значение.Накопительные = ВсегоЗадолженностьНакопительнаяЧасть;
			НаборЗаписейДолгКонецСуммаЗаПериод.СтраховыеВзносы.Значение.Дополнительные = ВсегоЗадолженностьДополнительныйТариф;
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелЗадолженностьНаКонец, "СуммаЗаПериод", ""), НаборЗаписейДолгКонецСуммаЗаПериод);
				
		КонецЕсли;
		
		// Преобразуем дерево в строковое описание XML
		ТекстФайла = ПроцедурыПерсонифицированногоУчета.ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки);
		
	КонецЕсли;
	
	Возврат ТекстФайла;

КонецФункции // ФайлДо2010Года()

Функция ФайлС2010Года(ВыборкаПоШапкеДокумента)
	
	// Загружаем формат файла сведений
	МакетФормата = ПолучитьОбщийМакет("ФорматПФР70_2010");
	ТипДокументовПачки = "ОПИСЬ_СВЕДЕНИЙ_ПЕРЕДАВАЕМЫХ_СТРАХОВАТЕЛЕМ";
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
	УзелПФР = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ФайлПФР", "", );
	ПроцедурыПерсонифицированногоУчета.ЗаполнитьИмяИЗаголовокФайла(УзелПФР, МакетФормата, ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(Ссылка, ВыборкаПоШапкеДокумента.Год, ВыборкаПоШапкеДокумента));
	// Добавляем ветки ПачкаВходящихДокументов и ВходящаяОпись
	ДанныеВходящейОписи = "";
	УзелПачкаВходящихДокументов = ПроцедурыПерсонифицированногоУчета.ЗаполнитьНаборЗаписейВходящаяОпись2010(УзелПФР, МакетФормата, ТипДокументовПачки, ВыборкаПоШапкеДокумента, 1, СокрЛП(НомерПачки), 1, "ВХОДЯЩАЯ_ОПИСЬ_ДЛЯ_ОПИСИ",ДанныеВходящейОписи);
	ФорматОписи = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ОПИСЬ_СВЕДЕНИЙ");
	
	ФорматОписи.НомерВПачке.Значение = 2;
	ФорматОписи.Страхователь.Значение = ДанныеВходящейОписи.СоставительПачки.Значение;
	ЗаполнитьЗначенияСвойств(ФорматОписи.ОтчетныйПериод.Значение,ПроцедурыПерсонифицированногоУчета.ОписаниеОтчетногоПериодаДляФайла(ВыборкаПоШапкеДокумента.ОтчетныйПериод));
	ФорматОписи.ЧислоИсходныхПачек.Значение = ВыборкаПоШапкеДокумента.КолИсходныхПачек;
	ФорматОписи.ЧислоКорректирующихПачек.Значение = ВыборкаПоШапкеДокумента.КолКорректирующихПачек;
	ФорматОписи.ДатаЗаполнения.Значение = ДанныеВходящейОписи.ДатаСоставления.Значение;
	
	ФорматСведенияОбИсходныхСведениях = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОписи.СведенияОбИсходныхСведениях.Значение);
	ФорматОписи.Удалить("СведенияОбИсходныхСведениях");
	
	ФорматСведенияОкорректирующихСведениях = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОписи.СведенияОкорректирующихСведениях.Значение);
	ФорматОписи.Удалить("СведенияОкорректирующихСведениях");
	
	УзелОписи = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,"");
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелОписи, ФорматОписи);
	
	ВыборкаПоПачкам = СформироватьЗапросДляФайла().Выбрать();
	
	Пока ВыборкаПоПачкам.СледующийПоЗначениюПоля("Таблица") Цикл
		
		ФорматБлока = ?(ВыборкаПоПачкам.Таблица = 1,ФорматСведенияОбИсходныхСведениях,ФорматСведенияОкорректирующихСведениях);
		ТегБлока = ?(ВыборкаПоПачкам.Таблица = 1,"СведенияОбИсходныхСведениях","СведенияОкорректирующихСведениях");
		
		КоличествоЗЛСтрахователя = 0;
		НачисленоСтраховаяСтрахователя = 0;
		НачисленоНакопительнаяСтрахователя = 0;
		ДоначисленоСтраховаяСтрахователя = 0;
		ДоначисленоНакопительнаяСтрахователя = 0;
		УплаченоСтраховаяСтрахователя = 0;
		УплаченоНакопительнаяСтрахователя = 0;
		ДоУплаченоСтраховаяСтрахователя = 0;
		ДоУплаченоНакопительнаяСтрахователя = 0;
		НеПередаватьДоуплаченныеСуммыПоСтрахователю = Истина;
		НомерСтроки = 0;
		
		Пока ВыборкаПоПачкам.СледующийПоЗначениюПоля("КатегорияЗастрахованныхЛиц") Цикл
			КоличествоЗЛКатегории = 0;
			НачисленоСтраховаяКатегории = 0;
			ДоначисленоСтраховаяКатегории = 0;
			НачисленоНакопительнаяКатегории = 0;
			ДоначисленоНакопительнаяКатегории = 0;
			УплаченоСтраховаяКатегории = 0;
			УплаченоНакопительнаяКатегории = 0;
			ДоУплаченоСтраховаяКатегории = 0;
			ДоУплаченоНакопительнаяКатегории = 0;
			НеПередаватьДоуплаченныеСуммыПоКатегории = Истина;
			Пока ВыборкаПоПачкам.Следующий() Цикл
				
				НаборЗаписей = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматБлока);
				НомерСтроки = НомерСтроки + 1;
				
				НаборЗаписей.ПорядковыйНомер.Значение = НомерСтроки;
				НаборЗаписей.ТипСтрокиОсведениях.Значение = "ПО ПАЧКЕ";
				НаборЗаписей.ИмяФайла.Значение = ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(ВыборкаПоПачкам.Ссылка, Год(ОтчетныйПериод), ВыборкаПоПачкам);
				НаборЗаписей.КодКатегории.Значение = ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаПоПачкам.КатегорияЗастрахованныхЛиц);
				НаборЗаписей.КоличествоЗЛ.Значение = ВыборкаПоПачкам.КолЗЛ;
				
				НачисленоСтраховая = Окр(ВыборкаПоПачкам.НачисленоСтраховая);
				НачисленоНакопительная = Окр(ВыборкаПоПачкам.НачисленоНакопительная);
				ДоначисленоСтраховая = Окр(ВыборкаПоПачкам.ДоначисленоСтраховая);
				ДоначисленоНакопительная = Окр(ВыборкаПоПачкам.ДоначисленоНакопительная);
				УплаченоСтраховая = Окр(ВыборкаПоПачкам.УплаченоСтраховая);
				УплаченоНакопительная = Окр(ВыборкаПоПачкам.УплаченоНакопительная);
				ДоУплаченоСтраховая = Окр(ВыборкаПоПачкам.ДоУплаченоСтраховая);
				ДоУплаченоНакопительная = Окр(ВыборкаПоПачкам.ДоУплаченоНакопительная);
				
				Если ВыборкаПоПачкам.Таблица = 1 Тогда
					ПроцедурыПерсонифицированногоУчета.ВписатьВзносыВНаборДанных(НаборЗаписей, НачисленоСтраховая, УплаченоСтраховая, НачисленоНакопительная, УплаченоНакопительная);
				Иначе
					НаборЗаписей.ДоначисленоНаСтраховую.Значение = ДоначисленоСтраховая;
					НаборЗаписей.ДоначисленоНаНакопительную.Значение = ДоначисленоНакопительная;
					Если ВыборкаПоПачкам.НеПередаватьДоуплаченныеСуммы Тогда
						НаборЗаписей.Удалить("ДоуплаченоНаСтраховую");
						НаборЗаписей.Удалить("ДоуплаченоНаНакопительную");
					Иначе
						НаборЗаписей.ДоуплаченоНаСтраховую.Значение = ДоУплаченоСтраховая;
						НаборЗаписей.ДоуплаченоНаНакопительную.Значение = ДоУплаченоНакопительная;
					КонецЕсли;
					НеПередаватьДоуплаченныеСуммыПоКатегории = НеПередаватьДоуплаченныеСуммыПоКатегории И ВыборкаПоПачкам.НеПередаватьДоуплаченныеСуммы;
					НеПередаватьДоуплаченныеСуммыПоСтрахователю = НеПередаватьДоуплаченныеСуммыПоСтрахователю И ВыборкаПоПачкам.НеПередаватьДоуплаченныеСуммы;
				КонецЕсли;
				
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелОписи, ТегБлока,""), НаборЗаписей);
				
				КоличествоЗЛКатегории = КоличествоЗЛКатегории + ВыборкаПоПачкам.КолЗЛ;
				КоличествоЗЛСтрахователя = КоличествоЗЛСтрахователя + ВыборкаПоПачкам.КолЗЛ;
				НачисленоСтраховаяСтрахователя = НачисленоСтраховаяСтрахователя + НачисленоСтраховая;
				НачисленоНакопительнаяСтрахователя = НачисленоНакопительнаяСтрахователя + НачисленоНакопительная;
				НачисленоСтраховаяКатегории = НачисленоСтраховаяКатегории + НачисленоСтраховая;
				НачисленоНакопительнаяКатегории = НачисленоНакопительнаяКатегории + НачисленоНакопительная;
				УплаченоСтраховаяСтрахователя = УплаченоСтраховаяСтрахователя + УплаченоСтраховая;
				УплаченоНакопительнаяСтрахователя = УплаченоНакопительнаяСтрахователя + УплаченоНакопительная;
				УплаченоСтраховаяКатегории = УплаченоСтраховаяКатегории + УплаченоСтраховая;
				УплаченоНакопительнаяКатегории = УплаченоНакопительнаяКатегории + УплаченоНакопительная;
				ДоначисленоСтраховаяСтрахователя = ДоначисленоСтраховаяСтрахователя + ДоначисленоСтраховая;
				ДоначисленоСтраховаяКатегории = ДоначисленоСтраховаяКатегории + ДоначисленоСтраховая;
				ДоначисленоНакопительнаяСтрахователя = ДоначисленоНакопительнаяСтрахователя + ДоначисленоНакопительная;
				ДоначисленоНакопительнаяКатегории = ДоначисленоНакопительнаяКатегории + ДоначисленоНакопительная;
				ДоУплаченоСтраховаяСтрахователя = ДоУплаченоСтраховаяСтрахователя + ДоУплаченоСтраховая;
				ДоУплаченоНакопительнаяСтрахователя = ДоУплаченоНакопительнаяСтрахователя + ДоУплаченоНакопительная;
				ДоУплаченоСтраховаяКатегории = ДоУплаченоСтраховаяКатегории + ДоУплаченоСтраховая;
				ДоУплаченоНакопительнаяКатегории = ДоУплаченоНакопительнаяКатегории + ДоУплаченоНакопительная;
				
			КонецЦикла;
			
			// Итоги по категории
			НаборЗаписей = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматБлока);
			НаборЗаписей.Удалить("ИмяФайла");
			
			НомерСтроки = НомерСтроки + 1;
			
			НаборЗаписей.ПорядковыйНомер.Значение = НомерСтроки;
			НаборЗаписей.ТипСтрокиОсведениях.Значение = "ПО КАТЕГОРИИ";
			НаборЗаписей.КодКатегории.Значение = ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаПоПачкам.КатегорияЗастрахованныхЛиц);
			НаборЗаписей.КоличествоЗЛ.Значение = КоличествоЗЛКатегории;
			
			Если ВыборкаПоПачкам.Таблица = 1 Тогда
				ПроцедурыПерсонифицированногоУчета.ВписатьВзносыВНаборДанных(НаборЗаписей, НачисленоСтраховаяКатегории, УплаченоСтраховаяКатегории, НачисленоНакопительнаяКатегории, УплаченоНакопительнаяКатегории);
			Иначе
				НаборЗаписей.ДоначисленоНаСтраховую.Значение = ДоначисленоСтраховаяКатегории;
				НаборЗаписей.ДоначисленоНаНакопительную.Значение = ДоначисленоНакопительнаяКатегории;
				Если НеПередаватьДоуплаченныеСуммыПоКатегории Тогда
					НаборЗаписей.Удалить("ДоуплаченоНаСтраховую");
					НаборЗаписей.Удалить("ДоуплаченоНаНакопительную");
				Иначе
					НаборЗаписей.ДоуплаченоНаСтраховую.Значение = ДоУплаченоСтраховаяКатегории;
					НаборЗаписей.ДоуплаченоНаНакопительную.Значение = ДоУплаченоНакопительнаяКатегории;
				КонецЕсли;
			КонецЕсли;
			
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелОписи, ТегБлока,""), НаборЗаписей);
			
		КонецЦикла;
		
		// Итоги по страхователю
		
		НаборЗаписей = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматБлока);
		НаборЗаписей.Удалить("ИмяФайла");
		НаборЗаписей.Удалить("КодКатегории");
		
		НомерСтроки = НомерСтроки + 1;
		
		НаборЗаписей.ПорядковыйНомер.Значение = НомерСтроки;
		НаборЗаписей.ТипСтрокиОсведениях.Значение = "ПО СТРАХОВАТЕЛЮ";
		НаборЗаписей.КоличествоЗЛ.Значение = КоличествоЗЛСтрахователя;
		
		Если ВыборкаПоПачкам.Таблица = 1 Тогда
			ПроцедурыПерсонифицированногоУчета.ВписатьВзносыВНаборДанных(НаборЗаписей, НачисленоСтраховаяСтрахователя, УплаченоСтраховаяСтрахователя, НачисленоНакопительнаяСтрахователя, УплаченоНакопительнаяСтрахователя);
		Иначе
			НаборЗаписей.ДоначисленоНаСтраховую.Значение = ДоначисленоСтраховаяСтрахователя;
			НаборЗаписей.ДоначисленоНаНакопительную.Значение = ДоначисленоНакопительнаяСтрахователя;
			Если НеПередаватьДоуплаченныеСуммыПоСтрахователю Тогда
				НаборЗаписей.Удалить("ДоуплаченоНаСтраховую");
				НаборЗаписей.Удалить("ДоуплаченоНаНакопительную");
			Иначе
				НаборЗаписей.ДоуплаченоНаСтраховую.Значение = ДоУплаченоСтраховаяСтрахователя;
				НаборЗаписей.ДоуплаченоНаНакопительную.Значение = ДоУплаченоНакопительнаяСтрахователя;
			КонецЕсли;
		КонецЕсли;
		
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелОписи, ТегБлока,""), НаборЗаписей);
		
	КонецЦикла;
	
	// Преобразуем дерево в строковое описание XML
	ТекстФайла = ПроцедурыПерсонифицированногоУчета.ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки);
	Возврат ТекстФайла
	
КонецФункции // ФайлС2010Года()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Если СпециальныйДокумент2010года Тогда
		Возврат Новый Структура("АДВ11,СЗВ4,Записка,Разделитель,ВсеДокументы","АДВ-11","СЗВ-4","Пояснительная записка",Неопределено,"Все документы");
	Иначе
		Возврат Новый Структура("АДВ11,АДВ62,СЗВ4,Записка,Разделитель,ВсеДокументы",?(НеСодержитСЗВ,"АДВ-11","АДВ-6-2 (в 2009 г. - АДВ-11)"),"АДВ-6-2 (проект 2011 г.)","СЗВ-6 (в 2009 г. - СЗВ-4)","Пояснительная записка",Неопределено,"Все документы");
	КонецЕсли;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция СформироватьЗапросДляФайла()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пачки.ДокументПачка КАК ДокументПачка
	|ПОМЕСТИТЬ ВТДокументыСЗВ
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР.ПачкиДокументов КАК Пачки
	|ГДЕ
	|	Пачки.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Таблица,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.НомерПачки КАК НомерПачки,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ФорматФайла,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Организация.РегистрационныйНомерПФР,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.НеПередаватьДоуплаченныеСуммы,
	|	СУММА(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НачисленоСтраховая) КАК НачисленоСтраховая,
	|	СУММА(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.УплаченоСтраховая) КАК УплаченоСтраховая,
	|	СУММА(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НачисленоНакопительная) КАК НачисленоНакопительная,
	|	СУММА(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.УплаченоНакопительная) КАК УплаченоНакопительная,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо) КАК КолЗЛ,
	|	СУММА(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ДоначисленоСтраховая) КАК ДоначисленоСтраховая,
	|	СУММА(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ДоначисленоНакопительная) КАК ДоначисленоНакопительная,
	|	СУММА(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ДоУплаченоНакопительная) КАК ДоУплаченоНакопительная,
	|	СУММА(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ДоУплаченоСтраховая) КАК ДоУплаченоСтраховая
	|ИЗ
	|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка В
	|			(ВЫБРАТЬ
	|				Ссылки.ДокументПачка
	|			ИЗ
	|				ВТДокументыСЗВ КАК Ссылки)
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Таблица,
	|	КатегорияЗастрахованныхЛиц,
	|	НомерПачки";
	
	Возврат Запрос.Выполнить();

КонецФункции 

// Создает сведения СЗВ-4
//
// Параметры
//  МассивФизЛиц - массив физлиц
//
Процедура АвтозаполнениеСведений() Экспорт
	
	Если ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		
		НачалоГода = Дата(Год,1,1);
		КонецГода = КонецГода(Дата(Год,1,1));
		
		// РАСЧЕТ СУММ ВЗНОСОВ И ДНЕЙ ОТСУТСТВИЯ
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Год",						Год);
		Запрос.УстановитьПараметр("НачалоГода",					НачалоГода);
		Запрос.УстановитьПараметр("КонецГода",					КонецГода);
		Запрос.УстановитьПараметр("ОбособленноеПодразделение",	Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗастрахованныеЛица.Физлицо КАК ФизЛицо,
		|	&ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	&Год КАК Год,
		|	ЕСТЬNULL(ЕСНИсчисленныйОбороты.ПФРНакопительная, 0) КАК НачисленоНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(ЕСНИсчисленныйОбороты.ПФРПоДополнительномуТарифу, 0) КАК НачисленоПоДополнительномуТарифу,
		|	ЕСТЬNULL(ЕСНИсчисленныйОбороты.ПФРСтраховая, 0) КАК НачисленоНаСтраховуюЧастьПФР,
		|	0 КАК ДнейБолезни,
		|	0 КАК ДнейОтпускаЗаСвойСчет
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК Физлицо
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&НачалоГода,
		|			Организация = &ГоловнаяОрганизация
		|				И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацииСрезПоследних
		|	ГДЕ
		|		РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение = &ОбособленноеПодразделение
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		РаботникиОрганизации.Сотрудник.Физлицо
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|	ГДЕ
		|		РаботникиОрганизации.Период МЕЖДУ &НачалоГода И &КонецГода
		|		И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|		И РаботникиОрганизации.ОбособленноеПодразделение = &ОбособленноеПодразделение
		|		И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Работники.Сотрудник.Физлицо 
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций КАК Работники
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
		|				ПО ПериодыПерекрытия.Период > Работники.Период
		|					И ПериодыПерекрытия.Сотрудник = Работники.Сотрудник
		|					И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
		|		ГДЕ
		|			Работники.Организация = &ГоловнаяОрганизация
		|			И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|		    И ПериодыПерекрытия.Период ЕСТЬ NULL) КАК ЗастрахованныеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЕСНИсчисленныйОбороты.ФизЛицо КАК ФизЛицо,
		|			СУММА(ЕСНИсчисленныйОбороты.ПФРНакопительная " + ?(Год >= 2010, "+ ЕСНИсчисленныйОбороты.ПФРНакопительнаяЕНВД", "") + ") КАК ПФРНакопительная,
		|	" + ?(Год >= 2010, "СУММА(ЕСНИсчисленныйОбороты.ПФРПоДополнительномуТарифу)", "0") + " КАК ПФРПоДополнительномуТарифу,
		|			СУММА(ЕСНИсчисленныйОбороты.ПФРСтраховая " + ?(Год >= 2010, "+ ЕСНИсчисленныйОбороты.ПФРСтраховаяЕНВД", "") + ") КАК ПФРСтраховая
		|		ИЗ
		|			РегистрНакопления." + ?(Год >= 2010, "СтраховыеВзносыИсчисленные", "ЕСНИсчисленный") + " КАК ЕСНИсчисленныйОбороты
		|		ГДЕ
		|			ЕСНИсчисленныйОбороты.Организация = &ГоловнаяОрганизация
		|			И ЕСНИсчисленныйОбороты.ОбособленноеПодразделение = &ОбособленноеПодразделение
		|			И ЕСНИсчисленныйОбороты.Период МЕЖДУ &НачалоГода И &КонецГода
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЕСНИсчисленныйОбороты.ФизЛицо) КАК ЕСНИсчисленныйОбороты
		|		ПО ЗастрахованныеЛица.Физлицо = ЕСНИсчисленныйОбороты.ФизЛицо
		|		";
		
		ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		
		// РАСЧЕТ СТАЖА
		
		ТаблицаСтажа = ПроцедурыПерсонифицированногоУчета.СЗВ4_ПолучитьДанныеДляЗаполненияСтажа(Организация, Год);
		
		/////////////////////////////////////////////////////////////////////////////////////
		// ОЧИСТКА СТАРЫХ ЗАПИСЕЙ О СТАЖЕ, ЗАПИСЕЙ О ВЗНОСАХ И ДОБАВЛЕНИЕ НОВЫХ ЗАПИСЕЙ ДОЛЖНО ПРОИСХОДИТЬ В РАМКАХ ОДНОЙ ТРАНЗАКЦИИ
		
		НачатьТранзакцию();
		
		// Загрузим полученные данные в наборы записей 
		НаборЗаписейОВзносах = РегистрыСведений.СуммыВзносовДляСЗВ4.СоздатьНаборЗаписей();
		
		НаборЗаписейОВзносах.Отбор.ОбособленноеПодразделение.Значение = Организация;
		НаборЗаписейОВзносах.Отбор.ОбособленноеПодразделение.Использование = Истина;
		НаборЗаписейОВзносах.Отбор.Год.Значение = Год;
		НаборЗаписейОВзносах.Отбор.Год.Использование = Истина;
		НаборЗаписейОВзносах.Отбор.ФизЛицо.Использование = Истина;
		
		НаборЗаписейОСтаже = РегистрыСведений.ЗаписиОСтажеДляСЗВ4.СоздатьНаборЗаписей();
		
		НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Значение = Организация;
		НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Использование = Истина;
		НаборЗаписейОСтаже.Отбор.Год.Значение = Год;
		НаборЗаписейОСтаже.Отбор.Год.Использование = Истина;
		НаборЗаписейОСтаже.Отбор.ФизЛицо.Использование = Истина;
		
		СтруктураПоиска = Новый Структура("ФизЛицо");
		Пока ТаблицаРезультатаЗапроса.Следующий() Цикл
			
			// Установим отбор записей в наборе по выбранному работнику
			НаборЗаписейОСтаже.Отбор.ФизЛицо.Значение = ТаблицаРезультатаЗапроса.ФизЛицо;
			НаборЗаписейОВзносах.Отбор.ФизЛицо.Значение = ТаблицаРезультатаЗапроса.ФизЛицо;
			СтруктураПоиска.ФизЛицо = ТаблицаРезультатаЗапроса.ФизЛицо;
			
			МассивСтрок = ТаблицаСтажа.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаТаблицы Из МассивСтрок Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписейОСтаже.Добавить(),СтрокаТаблицы)
			КонецЦикла; 
			
			// Пронумеруем основные записи о стаже
			НомерЗаписи = 0;
			Для Каждого Запись из НаборЗаписейОСтаже Цикл
				НомерЗаписи = НомерЗаписи + 1;
				Запись.НомерОсновнойЗаписи = НомерЗаписи;
			КонецЦикла; 
			
			// Запишем записи стажа в режиме добавления (при записи набора происходит проверка записей стажа)
			Попытка
				НаборЗаписейОСтаже.Записать();
				НаборЗаписейОСтаже.Очистить();
			Исключение
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;
			
			Если ТаблицаРезультатаЗапроса.НачисленоНаНакопительнуюЧастьПФР <> Null Тогда
				ЗаполнитьЗначенияСвойств(НаборЗаписейОВзносах.Добавить(),ТаблицаРезультатаЗапроса);
			КонецЕсли; 
			
			// Запишем записи стажа в режиме добавления (при записи набора происходит проверка записей стажа)
			Попытка
				НаборЗаписейОВзносах.Записать();
				НаборЗаписейОВзносах.Очистить();
			Исключение
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Иначе
		ПроцедурыПерсонифицированногоУчета.ФормированиеСведенийОСтажеC2010(ОтчетныйПериод, Организация);
	КонецЕсли;

КонецПроцедуры // АвтозаполнениеСведений()


// Формирует пачки сведений СЗВ-4
//
// Параметры
//  нет
//
Процедура АвтозаполнениеПачек(АДВ11ПерваяВКомплекте = Ложь) Экспорт

	ПачкиДокументов.Очистить();
	
	СтрокаДанныхДокумента = "Организация,Руководитель,ДолжностьРуководителя,Ответственный,ОтчетныйПериод,ФорматФайла";
	Если ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Год", Год(ОтчетныйПериод));
		Запрос.УстановитьПараметр("ДатаАктуальности", Дата);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		// адреса для информирования заполняем только в том случае, когда они изменились по сравнению с последними
		// передававшимися в ПФР
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.КодПозицииСписка,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
		|	ФизЛицаСТарифомАВИА.ЯвляетсяЛетчиком,
		|	ВЫБОР
		|		КОГДА ФизлицаДекретДети.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВОтпускеПоУходу,
		|	ЗаписиОСтаже.ФизЛицо.ПометкаУдаления
		|ПОМЕСТИТЬ ВТФизЛица
		|ИЗ
		|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВЫБОР
		|				КОГДА СУММА(СуммыВзносов.НачисленоПоДополнительномуТарифу) > 0
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ КАК ЯвляетсяЛетчиком,
		|			СуммыВзносов.ФизЛицо КАК ФизЛицо
		|		ИЗ
		|			РегистрСведений.СуммыВзносовДляСЗВ4 КАК СуммыВзносов
		|		ГДЕ
		|			СуммыВзносов.ОбособленноеПодразделение = &Организация
		|			И СуммыВзносов.Год = &Год
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СуммыВзносов.ФизЛицо) КАК ФизЛицаСТарифомАВИА
		|		ПО ЗаписиОСтаже.ФизЛицо = ФизЛицаСТарифомАВИА.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗаписиОСтаже.ФизЛицо КАК ФизЛицо
		|		ИЗ
		|			РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
		|		ГДЕ
		|			ЗаписиОСтаже.Год = &Год
		|			И ЗаписиОСтаже.ОбособленноеПодразделение = &Организация
		|			И ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (""ДЕКРЕТ"", ""ДЕТИ"")
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЗаписиОСтаже.ФизЛицо) КАК ФизлицаДекретДети
		|		ПО (ФизлицаДекретДети.ФизЛицо = ЗаписиОСтаже.ФизЛицо)
		|ГДЕ
		|	ЗаписиОСтаже.Год = &Год
		|	И ЗаписиОСтаже.ОбособленноеПодразделение = &Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ПОМЕСТИТЬ ВТФИО
		|ИЗ
		|	РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|			&ДатаАктуальности,
		|			ФизЛицо В
		|				(ВЫБРАТЬ
		|					Лица.ФизЛицо КАК ФизЛицо
		|				ИЗ
		|					ВТФизЛица КАК Лица)) КАК ФИОФизЛицСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо
		|ПОМЕСТИТЬ ВТФизЛицаСЗВ41
		|ИЗ
		|	ВТФизЛица КАК ЗаписиОСтаже
		|ГДЕ
		|	(ЗаписиОСтаже.НомерОсновнойЗаписи > 1
		|			ИЛИ ЗаписиОСтаже.НомерДополнительнойЗаписи > 0
		|			ИЛИ ЗаписиОСтаже.ОсобыеУсловияТруда <> ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка)
		|			ИЛИ ЗаписиОСтаже.ОснованиеВыслугиЛет <> ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка)
		|			ИЛИ ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа <> ЗНАЧЕНИЕ(Справочник.ОснованияИсчисляемогоТрудовогоСтажа.ПустаяСсылка)
		|			ИЛИ ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа <> """")
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка,
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Дата,
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования
		|ПОМЕСТИТЬ ВТПереданныеВПФРДокументы
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
		|ГДЕ
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования <> """"
		|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Организация = &Организация
		|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Проведен
		|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ПринятоВПФР
		|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Дата <= &ДатаАктуальности
		|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо В
		|			(ВЫБРАТЬ
		|				ФизЛица.ФизЛицо
		|			ИЗ
		|				ВТФизЛица КАК ФизЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыДокументов.ФизЛицо КАК ФизЛицо,
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования КАК АдресДляИнформирования
		|ПОМЕСТИТЬ ВТПереданныеВПФРАдреса
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Дата) КАК Дата,
		|		СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо КАК ФизЛицо
		|	ИЗ
		|		ВТПереданныеВПФРДокументы КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо) КАК ДатыДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПереданныеВПФРДокументы КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
		|		ПО ДатыДокументов.Дата = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Дата
		|			И ДатыДокументов.ФизЛицо = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛица.ФизЛицо КАК ФизЛицо,
		|	ФизЛица.ФизЛицо.Наименование КАК Наименование,
		|	ФизЛица.ЯвляетсяЛетчиком КАК ЯвляетсяЛетчиком,
		|	ФизЛица.ВОтпускеПоУходу КАК ВОтпускеПоУходу,
		|	ВЫБОР
		|		КОГДА ФизЛицаСЗВ41.ФизЛицо ЕСТЬ НЕ NULL 
		|			ТОГДА ""СЗВ-4-1""
		|		ИНАЧЕ ""СЗВ-4-2""
		|	КОНЕЦ КАК ТипФормДокументов,
		|	ВЫБОР
		|		КОГДА ФизЛицаСЗВ41.ФизЛицо ЕСТЬ НЕ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.ПустаяСсылка)
		|		ИНАЧЕ ФизЛица.ТерриториальныеУсловия
		|	КОНЕЦ КАК ТерриториальныеУсловия,
		|	ВЫБОР
		|		КОГДА ПереданныеВПФРАдреса.АдресДляИнформирования ЕСТЬ NULL 
		|			ТОГДА "","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9
		|		КОГДА "","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9 <> ПереданныеВПФРАдреса.АдресДляИнформирования
		|			ТОГДА "","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК АдресДляИнформирования,
		|	ВЫБОР
		|		КОГДА ФизЛица.ФизЛицо.СтраховойНомерПФР = """"
		|			ТОГДА ИСТИНА
		|		КОГДА ФизЛица.ФизЛицо.СтраховойНомерПФР = ""   -   -      ""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НетСтраховогоНомера,
		|	ЕСТЬNULL(ФИО.Фамилия, """") КАК Фамилия,
		|	ЕСТЬNULL(ФИО.Имя, """") КАК Имя,
		|	ЕСТЬNULL(ФИО.Отчество, """") КАК Отчество,
		|	ФизЛица.ФизЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР
		|ИЗ
		|	ВТФизЛица КАК ФизЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизЛицаСЗВ41 КАК ФизЛицаСЗВ41
		|		ПО ФизЛица.ФизЛицо = ФизЛицаСЗВ41.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаДляИнформирования
		|		ПО ФизЛица.ФизЛицо = АдресаДляИнформирования.Объект
		|			И (АдресаДляИнформирования.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ИнформАдресФизЛица))
		|			И (АдресаДляИнформирования.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПереданныеВПФРАдреса КАК ПереданныеВПФРАдреса
		|		ПО ФизЛица.ФизЛицо = ПереданныеВПФРАдреса.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИО КАК ФИО
		|		ПО ФизЛица.ФизЛицо = ФИО.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипФормДокументов,
		|	ТерриториальныеУсловия,
		|	ВОтпускеПоУходу,
		|	ЯвляетсяЛетчиком,
		|	Наименование,
		|	ФизЛицо";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтрСписокФизЛицБезСтрахНомеров = "";
		
		Сообщить("--------------------------------------------------------------------");
		Сообщить("Генерация документов-пачек СЗВ-4:");
		
		ДатаСозданияДокументов = Дата;
		
		Пока Выборка.СледующийПоЗначениюПоля("ТипФормДокументов") Цикл
			
			Пока Выборка.СледующийПоЗначениюПоля("ТерриториальныеУсловия") Цикл
				
				Пока Выборка.СледующийПоЗначениюПоля("ВОтпускеПоУходу") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("ЯвляетсяЛетчиком") Цикл
						// Создадим документ СЗВ-4
						НовыйДок = Документы.СведенияОТрудовомСтажеИЗаработкеСЗВ4.СоздатьДокумент();
						
						НовыйДок.Дата = ДатаСозданияДокументов;
						ЗаполнитьЗначенияСвойств(НовыйДок,ЭтотОбъект,СтрокаДанныхДокумента);
						НовыйДок.ТипСведенийСЗВ = ?(ТипСведений = "ИСХД",Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ,Перечисления.ТипыСведенийСЗВ.ПЕНСИОННАЯ);
						ЗаполнитьЗначенияСвойств(НовыйДок,Выборка,"ТипФормДокументов,ТерриториальныеУсловия");
						
						НовыйДок.УстановитьНовыйНомер();
						
						Пока Выборка.Следующий() Цикл
							
							// Если у физлица нет страхового номера, то в пачки его включать не будем: проверка на указание пустого или неверного страхового номера ("   -   -      ")
							Если Выборка.НетСтраховогоНомера Тогда
								СтрСписокФизЛицБезСтрахНомеров = СтрСписокФизЛицБезСтрахНомеров + Символы.ПС + Символы.Таб + Выборка.Наименование;
								Продолжить;
							КонецЕсли;	
							
							Если НовыйДок.РаботникиОрганизации.Количество() = 200  Тогда
								
								// Сохраним пачку СЗВ-4
								НовыйДок.Записать();
								Сообщить("	создан документ: " + НовыйДок);
								
								// Добавим пачку в ведомость АДВ-11
								НоваяСтрокаПачка = ПачкиДокументов.Добавить();
								НоваяСтрокаПачка.ДокументПачка = НовыйДок.Ссылка; 
								ЗаполнитьЗначенияСвойств(НоваяСтрокаПачка,НовыйДок,"ТерриториальныеУсловия,ТипФормДокументов,ВидКорректировки");
								
								// Создадим документ СЗВ-4
								НовыйДок = Документы.СведенияОТрудовомСтажеИЗаработкеСЗВ4.СоздатьДокумент();
								
								НовыйДок.Дата = ДатаСозданияДокументов;
								ЗаполнитьЗначенияСвойств(НовыйДок,ЭтотОбъект,СтрокаДанныхДокумента);
								НовыйДок.ТипСведенийСЗВ = ?(ТипСведений = "ИСХД",Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ,Перечисления.ТипыСведенийСЗВ.ПЕНСИОННАЯ);
								ЗаполнитьЗначенияСвойств(НовыйДок,Выборка,"ТипФормДокументов,ТерриториальныеУсловия");
								
								НовыйДок.УстановитьНовыйНомер();
								
							КонецЕсли; 
							
							ЗаполнитьЗначенияСвойств(НовыйДок.РаботникиОрганизации.Добавить(),Выборка,"ФизЛицо,АдресДляИнформирования,СтраховойНомерПФР,Фамилия,Имя,Отчество");
							
						КонецЦикла;
						
						Если НовыйДок.РаботникиОрганизации.Количество() <> 0 Тогда
							
							// Сохраним пачку СЗВ-4
							НовыйДок.Записать();
							Сообщить("	создан документ: " + НовыйДок);
							
							// Добавим пачку в ведомость АДВ-11
							НоваяСтрокаПачка = ПачкиДокументов.Добавить();
							НоваяСтрокаПачка.ДокументПачка = НовыйДок.Ссылка; 
							ЗаполнитьЗначенияСвойств(НоваяСтрокаПачка,НовыйДок,"ТерриториальныеУсловия,ТипФормДокументов,ВидКорректировки");
							
						КонецЕсли;
					КонецЦикла; 	
				КонецЦикла; 	
			КонецЦикла; 
		КонецЦикла; 
		
		Если СтрСписокФизЛицБезСтрахНомеров <> "" Тогда
			Сообщить("Следующие физические лица не включены в пачки документов перс.учета из-за отсутствия страховых номеров ПФР:" + СтрСписокФизЛицБезСтрахНомеров, СтатусСообщения.Внимание);
		КонецЕсли; 
		
	Иначе
		
		Запрос = Новый Запрос;
				
		Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);		
		Запрос.УстановитьПараметр("Организация", Организация);		
		
		// адреса для информирования заполняем только в том случае, когда они изменились по сравнению с последними
		// передававшимися в ПФР
		
		ТаблицаСтажа = ПроцедурыПерсонифицированногоУчета.ДанныеОСтажеИВзносах(Дата, ОтчетныйПериод, Организация); 
		
		СтрСписокФизЛицБезСтрахНомеров = "";
		
		Сообщить("--------------------------------------------------------------------");
		Сообщить("Генерация документов-пачек СЗВ-6:");
		
		ДатаСозданияДокументов = Дата;
		
		ТипФормДокументов = "";
		КатегорияЗЛ = "";
		НовыйДок = Неопределено;
		
		Для каждого СтрокаТЗ Из ТаблицаСтажа Цикл
			
			Если ТипФормДокументов <> СтрокаТЗ.ТипФормДокументов Или КатегорияЗЛ <> СтрокаТЗ.КатегорияЗастрахованныхЛиц Тогда
				
				Если НовыйДок <> Неопределено И НовыйДок.РаботникиОрганизации.Количество() <> 0 Тогда
					
					// Сохраним пачку СЗВ-4
					НовыйДок.Записать();
					Сообщить("	создан документ: " + НовыйДок);
					
					// Добавим пачку в табличную часть
					ПачкиДокументов.Добавить().ДокументПачка = НовыйДок.Ссылка;
					
				КонецЕсли;
				
				// Создадим документ СЗВ-4
				НовыйДок = Документы.СведенияОТрудовомСтажеИЗаработкеСЗВ4.СоздатьДокумент();
				
				НовыйДок.Дата = ДатаСозданияДокументов;
				ЗаполнитьЗначенияСвойств(НовыйДок,ЭтотОбъект,СтрокаДанныхДокумента);
				НовыйДок.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ;
				ЗаполнитьЗначенияСвойств(НовыйДок,СтрокаТЗ,"ТипФормДокументов, КатегорияЗастрахованныхЛиц");
				
				НовыйДок.УстановитьНовыйНомер();
				
				ТипФормДокументов = СтрокаТЗ.ТипФормДокументов;
				КатегорияЗЛ = СтрокаТЗ.КатегорияЗастрахованныхЛиц;
			КонецЕсли;
			
			// Если у физлица нет страхового номера, то в пачки его включать не будем: проверка на указание пустого или неверного страхового номера ("   -   -      ")
			Если СтрокаТЗ.НетСтраховогоНомера Тогда
				СтрСписокФизЛицБезСтрахНомеров = СтрСписокФизЛицБезСтрахНомеров + Символы.ПС + Символы.Таб + СтрокаТЗ.Наименование;
				Продолжить;
			КонецЕсли;	
			
			Если НовыйДок.РаботникиОрганизации.Количество() = 200 Тогда
				
				// Сохраним пачку СЗВ-4
				НовыйДок.Записать();
				Сообщить("	создан документ: " + НовыйДок);
				
				// Добавим пачку в табличную часть
				ПачкиДокументов.Добавить().ДокументПачка = НовыйДок.Ссылка;
				
				// Создадим документ СЗВ-4
				НовыйДок = Документы.СведенияОТрудовомСтажеИЗаработкеСЗВ4.СоздатьДокумент();
				
				НовыйДок.Дата = ДатаСозданияДокументов;
				ЗаполнитьЗначенияСвойств(НовыйДок,ЭтотОбъект,СтрокаДанныхДокумента);
				НовыйДок.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ;
				ЗаполнитьЗначенияСвойств(НовыйДок,СтрокаТЗ,"ТипФормДокументов, КатегорияЗастрахованныхЛиц");
				
				НовыйДок.УстановитьНовыйНомер();
				
			КонецЕсли; 
			
			СтрокаТабличнойЧасти = НовыйДок.РаботникиОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СтрокаТЗ);
			Фамилия = СтрокаТЗ.Фамилия;
			Имя = СтрокаТЗ.Имя;
			Отчество = СтрокаТЗ.Отчество;
			Если Не ЗначениеЗаполнено(Фамилия + Имя + Отчество) Тогда
				ОбщегоНазначения.ФамилияИнициалыФизЛица(СтрокаТЗ.Наименование,Фамилия,Имя,Отчество);
			КонецЕсли;
			СтрокаТабличнойЧасти.Фамилия = Фамилия;
			СтрокаТабличнойЧасти.Имя = Имя;
			СтрокаТабличнойЧасти.Отчество = Отчество;
		
		КонецЦикла;
		
		Если НовыйДок <> Неопределено И НовыйДок.РаботникиОрганизации.Количество() <> 0 Тогда
			
			// Сохраним пачку СЗВ-4
			НовыйДок.Записать();
			Сообщить("	создан документ: " + НовыйДок);
			
			// Добавим пачку в табличную часть
			ПачкиДокументов.Добавить().ДокументПачка = НовыйДок.Ссылка;
			
		КонецЕсли;
		
		Если СтрСписокФизЛицБезСтрахНомеров <> "" Тогда
			Сообщить("Следующие физические лица не включены в пачки документов перс.учета из-за отсутствия страховых номеров ПФР:" + СтрСписокФизЛицБезСтрахНомеров, СтатусСообщения.Внимание);
		КонецЕсли; 

		
	КонецЕсли;
	
КонецПроцедуры

// заполняет строки задолженности
//
// Параметры
//  нет
//
Процедура АвтозаполнениеСтрокЗадолженности() Экспорт
	
	
	     Если Не СпециальныйДокумент2010года И ОтчетныйПериод >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		
		СведенияОЗадолженности.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбособленноеПодразделение", Организация);
		Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ОтчетныйПериод));
		Запрос.УстановитьПараметр("КонецГода", КонецГода(ОтчетныйПериод));
		Запрос.УстановитьПараметр("ОтчетныйГод", Год(ОтчетныйПериод));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ГОД(РасчетыПоСтраховымВзносамОстатки.МесяцРасчетногоПериода), 0) КАК ГодУплаты,
		|	СУММА(ЕСТЬNULL(РасчетыПоСтраховымВзносамОстатки.ПФРСтраховаяОстаток, 0)) КАК НаСтраховуюЧастьПФР,
		|	СУММА(ЕСТЬNULL(РасчетыПоСтраховымВзносамОстатки.ПФРНакопительнаяОстаток, 0)) КАК НаНакопительнуюЧастьПФР,
		|	СУММА(ЕСТЬNULL(РасчетыПоСтраховымВзносамОстатки.ПФРПоДополнительномуТарифуОстаток, 0)) КАК ПоДополнительномуТарифу
		|ПОМЕСТИТЬ ВТОстаткиПоГодам
		|ИЗ
		|	РегистрНакопления.РасчетыПоСтраховымВзносам.Остатки(
		|			&НачалоГода,
		|			Организация = &ОбособленноеПодразделение
		|				И ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
		|				И МесяцРасчетногоПериода < ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0)) КАК РасчетыПоСтраховымВзносамОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ГОД(РасчетыПоСтраховымВзносамОстатки.МесяцРасчетногоПериода), 0)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГодУплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиСВыделеннойПереплатой.ГодУплаты КАК ГодУплаты,
		|	СУММА(ОстаткиСВыделеннойПереплатой.НаСтраховуюЧастьПФР) КАК НаСтраховуюЧастьПФР,
		|	СУММА(ОстаткиСВыделеннойПереплатой.НаНакопительнуюЧастьПФР) КАК НаНакопительнуюЧастьПФР,
		|	СУММА(ОстаткиСВыделеннойПереплатой.ПоДополнительномуТарифу) КАК ПоДополнительномуТарифу
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОстаткиПоГодам.ГодУплаты КАК ГодУплаты,
		|		ВЫБОР
		|			КОГДА ОстаткиПоГодам.НаСтраховуюЧастьПФР > 0
		|				ТОГДА ОстаткиПоГодам.НаСтраховуюЧастьПФР
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК НаСтраховуюЧастьПФР,
		|		ВЫБОР
		|			КОГДА ОстаткиПоГодам.НаНакопительнуюЧастьПФР > 0
		|				ТОГДА ОстаткиПоГодам.НаНакопительнуюЧастьПФР
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК НаНакопительнуюЧастьПФР,
		|		ВЫБОР
		|			КОГДА ОстаткиПоГодам.ПоДополнительномуТарифу > 0
		|				ТОГДА ОстаткиПоГодам.ПоДополнительномуТарифу
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ПоДополнительномуТарифу
		|	ИЗ
		|		ВТОстаткиПоГодам КАК ОстаткиПоГодам
		|	ГДЕ
		|		(ОстаткиПоГодам.НаСтраховуюЧастьПФР >= 0
		|				ИЛИ ОстаткиПоГодам.НаНакопительнуюЧастьПФР >= 0
		|				ИЛИ ОстаткиПоГодам.ПоДополнительномуТарифу >= 0)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		&ОтчетныйГод,
		|		ВЫБОР
		|			КОГДА ОстаткиПоГодам.НаСтраховуюЧастьПФР < 0
		|				ТОГДА ОстаткиПоГодам.НаСтраховуюЧастьПФР
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ОстаткиПоГодам.НаНакопительнуюЧастьПФР < 0
		|				ТОГДА ОстаткиПоГодам.НаНакопительнуюЧастьПФР
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ОстаткиПоГодам.ПоДополнительномуТарифу < 0
		|				ТОГДА ОстаткиПоГодам.ПоДополнительномуТарифу
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	ИЗ
		|		ВТОстаткиПоГодам КАК ОстаткиПоГодам
		|	ГДЕ
		|		(ОстаткиПоГодам.НаСтраховуюЧастьПФР <= 0
		|				ИЛИ ОстаткиПоГодам.НаНакопительнуюЧастьПФР <= 0
		|				ИЛИ ОстаткиПоГодам.ПоДополнительномуТарифу <= 0)) КАК ОстаткиСВыделеннойПереплатой
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиСВыделеннойПереплатой.ГодУплаты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГодУплаты";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.НаСтраховуюЧастьПФР) Или ЗначениеЗаполнено(Выборка.НаНакопительнуюЧастьПФР) Или ЗначениеЗаполнено(Выборка.ПоДополнительномуТарифу) Тогда
				СтрокаНачислено = СведенияОЗадолженности.Добавить();
				СтрокаНачислено.Год = Выборка.ГодУплаты;
				СтрокаНачислено.ТипСтроки = "Долг на начало года";
				СтрокаНачислено.НакопительнаяЧасть = Окр(Выборка.НаНакопительнуюЧастьПФР);
				СтрокаНачислено.ДополнительныйТариф = Окр(Выборка.ПоДополнительномуТарифу);
				СтрокаНачислено.СтраховаяЧасть = Окр(Выборка.НаСтраховуюЧастьПФР);
			КонецЕсли;
		КонецЦикла;  
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(РасчетыПоСтраховымВзносамОбороты.ПФРСтраховаяРасход, 0)) КАК НаСтраховуюЧастьПФР,
		|	СУММА(ЕСТЬNULL(РасчетыПоСтраховымВзносамОбороты.ПФРНакопительнаяРасход, 0)) КАК НаНакопительнуюЧастьПФР,
		|	СУММА(ЕСТЬNULL(РасчетыПоСтраховымВзносамОбороты.ПФРПоДополнительномуТарифуРасход, 0)) КАК ПоДополнительномуТарифу,
		|	ЕСТЬNULL(ГОД(РасчетыПоСтраховымВзносамОбороты.МесяцРасчетногоПериода), 0) КАК ГодУплаты
		|ПОМЕСТИТЬ ВТУплатаПоГодам
		|ИЗ
		|	РегистрНакопления.РасчетыПоСтраховымВзносам.Обороты(
		|			&НачалоГода,
		|			&КонецГода,
		|			,
		|			Организация = &ОбособленноеПодразделение
		|				И ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
		|				И МесяцРасчетногоПериода < ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0)) КАК РасчетыПоСтраховымВзносамОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ГОД(РасчетыПоСтраховымВзносамОбороты.МесяцРасчетногоПериода), 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УплатаСВыделеннымЗачетом.ГодУплаты КАК ГодУплаты,
		|	СУММА(УплатаСВыделеннымЗачетом.НаСтраховуюЧастьПФР) КАК НаСтраховуюЧастьПФР,
		|	СУММА(УплатаСВыделеннымЗачетом.НаНакопительнуюЧастьПФР) КАК НаНакопительнуюЧастьПФР,
		|	СУММА(УплатаСВыделеннымЗачетом.ПоДополнительномуТарифу) КАК ПоДополнительномуТарифу
		|ИЗ
		|	(ВЫБРАТЬ
		|		УплатаПоГодам.ГодУплаты КАК ГодУплаты,
		|		ВЫБОР
		|			КОГДА УплатаПоГодам.НаСтраховуюЧастьПФР > 0
		|				ТОГДА УплатаПоГодам.НаСтраховуюЧастьПФР
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК НаСтраховуюЧастьПФР,
		|		ВЫБОР
		|			КОГДА УплатаПоГодам.НаНакопительнуюЧастьПФР > 0
		|				ТОГДА УплатаПоГодам.НаНакопительнуюЧастьПФР
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК НаНакопительнуюЧастьПФР,
		|		ВЫБОР
		|			КОГДА УплатаПоГодам.ПоДополнительномуТарифу > 0
		|				ТОГДА УплатаПоГодам.ПоДополнительномуТарифу
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ПоДополнительномуТарифу
		|	ИЗ
		|		ВТУплатаПоГодам КАК УплатаПоГодам
		|	ГДЕ
		|		(УплатаПоГодам.НаСтраховуюЧастьПФР >= 0
		|				ИЛИ УплатаПоГодам.НаНакопительнуюЧастьПФР >= 0
		|				ИЛИ УплатаПоГодам.ПоДополнительномуТарифу >= 0)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		&ОтчетныйГод,
		|		ВЫБОР
		|			КОГДА УплатаПоГодам.НаСтраховуюЧастьПФР < 0
		|				ТОГДА УплатаПоГодам.НаСтраховуюЧастьПФР
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА УплатаПоГодам.НаНакопительнуюЧастьПФР < 0
		|				ТОГДА УплатаПоГодам.НаНакопительнуюЧастьПФР
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА УплатаПоГодам.ПоДополнительномуТарифу < 0
		|				ТОГДА УплатаПоГодам.ПоДополнительномуТарифу
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	ИЗ
		|		ВТУплатаПоГодам КАК УплатаПоГодам
		|	ГДЕ
		|		(УплатаПоГодам.НаСтраховуюЧастьПФР <= 0
		|				ИЛИ УплатаПоГодам.НаНакопительнуюЧастьПФР <= 0
		|				ИЛИ УплатаПоГодам.ПоДополнительномуТарифу <= 0)) КАК УплатаСВыделеннымЗачетом
		|
		|СГРУППИРОВАТЬ ПО
		|	УплатаСВыделеннымЗачетом.ГодУплаты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГодУплаты";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.ГодУплаты) Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.НаСтраховуюЧастьПФР) Или ЗначениеЗаполнено(Выборка.НаНакопительнуюЧастьПФР) Или ЗначениеЗаполнено(Выборка.ПоДополнительномуТарифу) Тогда
				СтрокаНачислено = СведенияОЗадолженности.Добавить();
				СтрокаНачислено.Год = Выборка.ГодУплаты;
				СтрокаНачислено.ТипСтроки = "Уплачено";
				СтрокаНачислено.НакопительнаяЧасть = Окр(Выборка.НаНакопительнуюЧастьПФР);
				СтрокаНачислено.ДополнительныйТариф = Окр(Выборка.ПоДополнительномуТарифу);
				СтрокаНачислено.СтраховаяЧасть = Окр(Выборка.НаСтраховуюЧастьПФР);
			КонецЕсли;
		КонецЦикла;  
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ГОД(РасчетыПоСтраховымВзносамОстатки.МесяцРасчетногоПериода), 0) КАК ГодУплаты,
		|	СУММА(ЕСТЬNULL(РасчетыПоСтраховымВзносамОстатки.ПФРСтраховаяОстаток, 0)) КАК НаСтраховуюЧастьПФР,
		|	СУММА(ЕСТЬNULL(РасчетыПоСтраховымВзносамОстатки.ПФРНакопительнаяОстаток, 0)) КАК НаНакопительнуюЧастьПФР,
		|	СУММА(ЕСТЬNULL(РасчетыПоСтраховымВзносамОстатки.ПФРПоДополнительномуТарифуОстаток, 0)) КАК ПоДополнительномуТарифу
		|ПОМЕСТИТЬ ВТОстаткиПоГодам
		|ИЗ
		|	РегистрНакопления.РасчетыПоСтраховымВзносам.Остатки(
		|			&КонецГода,
		|			Организация = &ОбособленноеПодразделение
		|				И ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
		|				И МесяцРасчетногоПериода < ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0)) КАК РасчетыПоСтраховымВзносамОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ГОД(РасчетыПоСтраховымВзносамОстатки.МесяцРасчетногоПериода), 0)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГодУплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиСВыделеннойПереплатой.ГодУплаты КАК ГодУплаты,
		|	СУММА(ОстаткиСВыделеннойПереплатой.НаСтраховуюЧастьПФР) КАК НаСтраховуюЧастьПФР,
		|	СУММА(ОстаткиСВыделеннойПереплатой.НаНакопительнуюЧастьПФР) КАК НаНакопительнуюЧастьПФР,
		|	СУММА(ОстаткиСВыделеннойПереплатой.ПоДополнительномуТарифу) КАК ПоДополнительномуТарифу
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОстаткиПоГодам.ГодУплаты КАК ГодУплаты,
		|		ВЫБОР
		|			КОГДА ОстаткиПоГодам.НаСтраховуюЧастьПФР > 0
		|				ТОГДА ОстаткиПоГодам.НаСтраховуюЧастьПФР
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК НаСтраховуюЧастьПФР,
		|		ВЫБОР
		|			КОГДА ОстаткиПоГодам.НаНакопительнуюЧастьПФР > 0
		|				ТОГДА ОстаткиПоГодам.НаНакопительнуюЧастьПФР
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК НаНакопительнуюЧастьПФР,
		|		ВЫБОР
		|			КОГДА ОстаткиПоГодам.ПоДополнительномуТарифу > 0
		|				ТОГДА ОстаткиПоГодам.ПоДополнительномуТарифу
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ПоДополнительномуТарифу
		|	ИЗ
		|		ВТОстаткиПоГодам КАК ОстаткиПоГодам
		|	ГДЕ
		|		(ОстаткиПоГодам.НаСтраховуюЧастьПФР >= 0
		|				ИЛИ ОстаткиПоГодам.НаНакопительнуюЧастьПФР >= 0
		|				ИЛИ ОстаткиПоГодам.ПоДополнительномуТарифу >= 0)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		&ОтчетныйГод + 1,
		|		ВЫБОР
		|			КОГДА ОстаткиПоГодам.НаСтраховуюЧастьПФР < 0
		|				ТОГДА ОстаткиПоГодам.НаСтраховуюЧастьПФР
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ОстаткиПоГодам.НаНакопительнуюЧастьПФР < 0
		|				ТОГДА ОстаткиПоГодам.НаНакопительнуюЧастьПФР
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ОстаткиПоГодам.ПоДополнительномуТарифу < 0
		|				ТОГДА ОстаткиПоГодам.ПоДополнительномуТарифу
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	ИЗ
		|		ВТОстаткиПоГодам КАК ОстаткиПоГодам
		|	ГДЕ
		|		(ОстаткиПоГодам.НаСтраховуюЧастьПФР <= 0
		|				ИЛИ ОстаткиПоГодам.НаНакопительнуюЧастьПФР <= 0
		|				ИЛИ ОстаткиПоГодам.ПоДополнительномуТарифу <= 0)) КАК ОстаткиСВыделеннойПереплатой
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиСВыделеннойПереплатой.ГодУплаты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГодУплаты";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.НаСтраховуюЧастьПФР) Или ЗначениеЗаполнено(Выборка.НаНакопительнуюЧастьПФР) Или ЗначениеЗаполнено(Выборка.ПоДополнительномуТарифу) Тогда
				СтрокаНачислено = СведенияОЗадолженности.Добавить();
				СтрокаНачислено.Год = Выборка.ГодУплаты;
				СтрокаНачислено.ТипСтроки = "Долг на конец года";
				СтрокаНачислено.НакопительнаяЧасть = Окр(Выборка.НаНакопительнуюЧастьПФР);
				СтрокаНачислено.ДополнительныйТариф = Окр(Выборка.ПоДополнительномуТарифу);
				СтрокаНачислено.СтраховаяЧасть = Окр(Выборка.НаСтраховуюЧастьПФР);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ОтчетныйПериод) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан отчетный период!",,"Расчет задолженности перед ПФР");
			Возврат
		КонецЕсли;
		
		СведенияОЗадолженности.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбособленноеПодразделение", Организация);
		Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ОтчетныйПериод));
		
		СальдоНачальноеНакопительнаяЧасть = 0;
		СальдоНачальноеДополнительныйТариф = 0;
		СальдоНачальноеСтраховаяЧасть = 0;
		СальдоТекущееНакопительнаяЧасть = 0;
		СальдоТекущееДополнительныйТариф = 0;
		СальдоТекущееСтраховаяЧасть = 0;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПередачаСЗВ4вПФР.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПередачаСЗВ4вПФР КАК ПередачаСЗВ4вПФР
		|ГДЕ
		|	ПередачаСЗВ4вПФР.Организация = &ОбособленноеПодразделение
		|	И ПередачаСЗВ4вПФР.МоментВремени < &МоментВремени
		|	И ПередачаСЗВ4вПФР.Год = &Год
		|	И ПередачаСЗВ4вПФР.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПередачаСЗВ4вПФР.МоментВремени УБЫВ";
		
		Запрос.УстановитьПараметр("МоментВремени", ?(ЭтоНовый(),Новый МоментВремени(ТекущаяДата()),МоментВремени()));
		Запрос.УстановитьПараметр("Год", Год(ОтчетныйПериод));
		
		// это предыдущий документ за текущий расчетный период
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда // посмотрим прошлогодние документы
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(СУММА(ПередачаСЗВ4вПФРСведенияОЗадолженности.СтраховаяЧасть), 0) КАК СтраховаяЧасть,
			|	ЕСТЬNULL(СУММА(ПередачаСЗВ4вПФРСведенияОЗадолженности.НакопительнаяЧасть), 0) КАК НакопительнаяЧасть,
			|	ЕСТЬNULL(СУММА(ПередачаСЗВ4вПФРСведенияОЗадолженности.ДополнительныйТариф), 0) КАК ДополнительныйТариф,
			|	ПередачаСЗВ4вПФРСведенияОЗадолженности.Год КАК Год
			|ИЗ
			|	Документ.ПередачаСЗВ4вПФР.СведенияОЗадолженности КАК ПередачаСЗВ4вПФРСведенияОЗадолженности
			|ГДЕ
			|	ПередачаСЗВ4вПФРСведенияОЗадолженности.Ссылка В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				ПередачаСЗВ4вПФР.Ссылка КАК Ссылка
			|			ИЗ
			|				Документ.ПередачаСЗВ4вПФР КАК ПередачаСЗВ4вПФР
			|			ГДЕ
			|				ПередачаСЗВ4вПФР.Организация = &ОбособленноеПодразделение
			|				И ПередачаСЗВ4вПФР.МоментВремени < &МоментВремени
			|				И ПередачаСЗВ4вПФР.Год < &Год
			|				И ПередачаСЗВ4вПФР.Проведен
			|			УПОРЯДОЧИТЬ ПО
			|				ПередачаСЗВ4вПФР.МоментВремени УБЫВ)
			|	И ПередачаСЗВ4вПФРСведенияОЗадолженности.ТипСтроки = ""Долг на конец года""
			|
			|СГРУППИРОВАТЬ ПО
			|	ПередачаСЗВ4вПФРСведенияОЗадолженности.Год
			|
			|УПОРЯДОЧИТЬ ПО
			|	Год";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Год = Год Тогда
					СальдоНачальноеНакопительнаяЧасть = Мин(Выборка.НакопительнаяЧасть,0);
					СальдоНачальноеДополнительныйТариф = Мин(Выборка.ДополнительныйТариф,0);
					СальдоНачальноеСтраховаяЧасть = Мин(Выборка.СтраховаяЧасть,0);
				Иначе
					СтрокаНачислено = СведенияОЗадолженности.Добавить();
					СтрокаНачислено.Год = Выборка.Год;
					СтрокаНачислено.ТипСтроки = "Долг на начало года";
					СтрокаНачислено.НакопительнаяЧасть = Выборка.НакопительнаяЧасть;
					СтрокаНачислено.ДополнительныйТариф = Выборка.ДополнительныйТариф;
					СтрокаНачислено.СтраховаяЧасть = Выборка.СтраховаяЧасть;
					Если Год < Год(ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами()) Тогда
						СтрокаНачислено = СведенияОЗадолженности.Добавить();
						СтрокаНачислено.Год = Выборка.Год;
						СтрокаНачислено.ТипСтроки = "Долг на конец года";
						СтрокаНачислено.НакопительнаяЧасть = Выборка.НакопительнаяЧасть;
						СтрокаНачислено.ДополнительныйТариф = Выборка.ДОполнительныйТариф;
						СтрокаНачислено.СтраховаяЧасть = Выборка.СтраховаяЧасть;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		Иначе   
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПередачаСЗВ4вПФРСведенияОЗадолженности.Год КАК Год,
			|	ПередачаСЗВ4вПФРСведенияОЗадолженности.ТипСтроки,
			|	СУММА(ПередачаСЗВ4вПФРСведенияОЗадолженности.СтраховаяЧасть) КАК СтраховаяЧасть,
			|	СУММА(ПередачаСЗВ4вПФРСведенияОЗадолженности.НакопительнаяЧасть) КАК НакопительнаяЧасть,
			|	СУММА(ПередачаСЗВ4вПФРСведенияОЗадолженности.ДополнительныйТариф) КАК ДополнительныйТариф,
			|	ВЫБОР
			|		КОГДА ПередачаСЗВ4вПФРСведенияОЗадолженности.ТипСтроки = ""Долг на начало года""
			|			ТОГДА 1
			|		КОГДА ПередачаСЗВ4вПФРСведенияОЗадолженности.ТипСтроки = ""Уплачено""
			|			ТОГДА -1
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ПолеПорядка
			|ИЗ
			|	Документ.ПередачаСЗВ4вПФР.СведенияОЗадолженности КАК ПередачаСЗВ4вПФРСведенияОЗадолженности
			|ГДЕ
			|	ПередачаСЗВ4вПФРСведенияОЗадолженности.Ссылка = &Ссылка
			|	И ПередачаСЗВ4вПФРСведенияОЗадолженности.ТипСтроки В (""Долг на начало года"", ""Начислено"", ""Уплачено"")
			|	И ПередачаСЗВ4вПФРСведенияОЗадолженности.Год <= &Год
			|
			|СГРУППИРОВАТЬ ПО
			|	ПередачаСЗВ4вПФРСведенияОЗадолженности.Год,
			|	ПередачаСЗВ4вПФРСведенияОЗадолженности.ТипСтроки
			|
			|УПОРЯДОЧИТЬ ПО
			|	Год,
			|	ПолеПорядка УБЫВ";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.СледующийПоЗначениюПоля("Год") Цикл
				Если Выборка.Год = Год Тогда
					Пока Выборка.Следующий() Цикл 
						Если Выборка.ТипСтроки = "Долг на начало года" Тогда
							Продолжить; // вычислим самостоятельно
						КонецЕсли;
						СальдоТекущееНакопительнаяЧасть = СальдоТекущееНакопительнаяЧасть + Выборка.ПолеПорядка * Выборка.НакопительнаяЧасть;
						СальдоТекущееДополнительныйТариф = СальдоТекущееДополнительныйТариф + Выборка.ПолеПорядка * Выборка.ДополнительныйТариф;
						СальдоТекущееСтраховаяЧасть = СальдоТекущееСтраховаяЧасть + Выборка.ПолеПорядка * Выборка.СтраховаяЧасть;
					КонецЦикла;
				Иначе
					
					// строки задолженности по состоянию на начало текущего года и сумм уплаченных
					СальдоНакопительнаяЧасть = 0;
					СальдоДополнительныйТариф = 0;
					СальдоСтраховаяЧасть = 0;
					ГодЗадолженности = Выборка.Год;
					
					Пока Выборка.Следующий() Цикл 
						Если Выборка.ТипСтроки = "Начислено" Тогда
							Продолжить; // недопустимое значение
						КонецЕсли;
						СтрокаНачислено = СведенияОЗадолженности.Добавить();
						СтрокаНачислено.Год = Выборка.Год;
						СтрокаНачислено.ТипСтроки = Выборка.ТипСтроки;
						СтрокаНачислено.НакопительнаяЧасть = Выборка.НакопительнаяЧасть;
						СтрокаНачислено.ДополнительныйТариф = Выборка.ДополнительныйТариф;
						СтрокаНачислено.СтраховаяЧасть = Выборка.СтраховаяЧасть;
						СальдоНакопительнаяЧасть = СальдоНакопительнаяЧасть + Выборка.ПолеПорядка * Выборка.НакопительнаяЧасть;
						СальдоДополнительныйТариф = СальдоДополнительныйТариф + Выборка.ПолеПорядка * Выборка.ДополнительныйТариф;
						СальдоСтраховаяЧасть = СальдоСтраховаяЧасть + Выборка.ПолеПорядка * Выборка.СтраховаяЧасть;
					КонецЦикла;
					
					// формирование строк с суммами задолженности по состоянию на конец текущего года
					Если СальдоНакопительнаяЧасть <> 0 Или СальдоСтраховаяЧасть <> 0 
						ИЛИ СальдоДополнительныйТариф <> 0 Тогда
						Если ГодЗадолженности = Год - 1 Тогда // предыдущий год
							// задолженность ЗА предыдущий год по состоянию НА конец текущего года
							СальдоНачальноеНакопительнаяЧасть = Мин(СальдоНакопительнаяЧасть,0);
							СальдоНачальноеДополнительныйТариф = Мин(СальдоДополнительныйТариф,0);
							СальдоНачальноеСтраховаяЧасть = Мин(СальдоСтраховаяЧасть,0);
							Если Год < Год(ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами()) Тогда
								Если СальдоНакопительнаяЧасть >= 0 Или СальдоСтраховаяЧасть >= 0 
									Или СальдоДополнительныйТариф >= 0 Тогда
									СтрокаНачислено = СведенияОЗадолженности.Добавить();
									СтрокаНачислено.Год = ГодЗадолженности;
									СтрокаНачислено.ТипСтроки = "Долг на конец года";
									СтрокаНачислено.НакопительнаяЧасть = Макс(СальдоНакопительнаяЧасть,0);
									СтрокаНачислено.ДополнительныйТариф = Макс(СальдоДополнительныйТариф, 0);
									СтрокаНачислено.СтраховаяЧасть = Макс(СальдоСтраховаяЧасть,0);
								КонецЕсли;
							КонецЕсли;
							Если СальдоНакопительнаяЧасть <= 0 Или СальдоСтраховаяЧасть <= 0 
								Или СальдоДополнительныйТариф <= 0 Тогда
								СтрокаНачислено = СведенияОЗадолженности.Добавить();
								СтрокаНачислено.Год = Год;
								СтрокаНачислено.ТипСтроки = "Долг на начало года";
								СтрокаНачислено.НакопительнаяЧасть = СальдоНачальноеНакопительнаяЧасть;
								СтрокаНачислено.ДополнительныйТариф = СальдоНачальноеДополнительныйТариф;
								СтрокаНачислено.СтраховаяЧасть = СальдоНачальноеСтраховаяЧасть;
							КонецЕсли;
						ИначеЕсли Год < Год(ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами()) Тогда  // прошлые годы
							Если СальдоНакопительнаяЧасть >= 0 Или СальдоСтраховаяЧасть >= 0 
								Или СальдоДополнительныйТариф >= 0 Тогда
								СтрокаНачислено = СведенияОЗадолженности.Добавить();
								СтрокаНачислено.Год = ГодЗадолженности;
								СтрокаНачислено.ТипСтроки = "Долг на конец года";
								СтрокаНачислено.НакопительнаяЧасть = Макс(СальдоНакопительнаяЧасть,0);
								СтрокаНачислено.ДополнительныйТариф = Макс(СальдоДополнительныйТариф, 0);
								СтрокаНачислено.СтраховаяЧасть = Макс(СальдоСтраховаяЧасть,0);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
			
		КонецЕсли;
		
		// допишем записи текущего расчетного периода
		
		Запрос.УстановитьПараметр("КонецГода", ?(ТипСведений = "ПЕНС", НачалоМесяца(ДатаДействия) - 1, КонецМесяца(ДатаДействия)));
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ЕСНИсчисленныйОбороты.ПФРНакопительная), 0) КАК НачисленоНаНакопительнуюЧастьПФР,
		|	0 КАК НачисленоПоДополнительномуТарифу,
		|	ЕСТЬNULL(СУММА(ЕСНИсчисленныйОбороты.ПФРСтраховая), 0) КАК НачисленоНаСтраховуюЧастьПФР
		|ИЗ
		|	РегистрНакопления.ЕСНИсчисленный КАК ЕСНИсчисленныйОбороты
		|ГДЕ
		|	ЕСНИсчисленныйОбороты.Период МЕЖДУ &НачалоГода И &КонецГода
		|	И ЕСНИсчисленныйОбороты.ОбособленноеПодразделение = &ОбособленноеПодразделение";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтрокаНачислено = СведенияОЗадолженности.Добавить();
			СтрокаНачислено.Год = Год;
			СтрокаНачислено.ТипСтроки = "Начислено";
			СтрокаНачислено.НакопительнаяЧасть = Окр(Выборка.НачисленоНаНакопительнуюЧастьПФР);
			СтрокаНачислено.ДополнительныйТариф = Окр(Выборка.НачисленоПоДополнительномуТарифу);
			СтрокаНачислено.СтраховаяЧасть = Окр(Выборка.НачисленоНаСтраховуюЧастьПФР);
			СтрокаНачислено = СведенияОЗадолженности.Добавить();
			СтрокаНачислено.Год = Год;
			СтрокаНачислено.ТипСтроки = "Уплачено";
			СтрокаНачислено.НакопительнаяЧасть = Окр(Выборка.НачисленоНаНакопительнуюЧастьПФР) - СальдоТекущееНакопительнаяЧасть;
			СтрокаНачислено.ДополнительныйТариф = Окр(Выборка.НачисленоПоДополнительномуТарифу) - СальдоТекущееДополнительныйТариф;
			СтрокаНачислено.СтраховаяЧасть = Окр(Выборка.НачисленоНаСтраховуюЧастьПФР) - СальдоТекущееСтраховаяЧасть;
		КонецЕсли;
		
		СальдоНакопительнаяЧасть = СальдоНачальноеНакопительнаяЧасть + СальдоТекущееНакопительнаяЧасть;
		СальдоДополнительныйТариф = СальдоНачальноеДополнительныйТариф + СальдоТекущееДополнительныйТариф;
		СальдоСтраховаяЧасть = СальдоНачальноеСтраховаяЧасть + СальдоТекущееСтраховаяЧасть;
		Если СальдоНакопительнаяЧасть <> 0 Или СальдоСтраховаяЧасть <> 0 
			ИЛИ СальдоДополнительныйТариф <> 0 Тогда
			Если СальдоНакопительнаяЧасть >= 0 Или СальдоСтраховаяЧасть >= 0 
				Или СальдоДополнительныйТариф >= 0 Тогда
				СтрокаНачислено = СведенияОЗадолженности.Добавить();
				СтрокаНачислено.Год = Год;
				СтрокаНачислено.ТипСтроки = "Долг на конец года";
				СтрокаНачислено.НакопительнаяЧасть = Макс(СальдоНакопительнаяЧасть,0);
				СтрокаНачислено.ДополнительныйТариф = Макс(СальдоДополнительныйТариф,0);
				СтрокаНачислено.СтраховаяЧасть = Макс(СальдоСтраховаяЧасть,0);
			КонецЕсли;
			Если СальдоНакопительнаяЧасть <= 0 И СальдоСтраховаяЧасть <= 0 
				И СальдоДополнительныйТариф <= 0 Тогда
				СтрокаНачислено = СведенияОЗадолженности.Добавить();
				СтрокаНачислено.Год = Год + 1;
				СтрокаНачислено.ТипСтроки = "Долг на конец года";
				СтрокаНачислено.НакопительнаяЧасть = Мин(СальдоНакопительнаяЧасть,0);
				СтрокаНачислено.ДополнительныйТариф = Мин(СальдоДополнительныйТариф,0);
				СтрокаНачислено.СтраховаяЧасть = Мин(СальдоСтраховаяЧасть,0);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры // АвтозаполнениеСтрокЗадолженности()

// Подбираем еще не отправленные, но проведенные пачки СЗВ-4
//
// Параметры
//  нет
//
Процедура АвтозаполнениеПроведеннымиПачками() Экспорт 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ТипСведений",	?(ТипСведений = "ИСХД", Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ,Перечисления.ТипыСведенийСЗВ.ПЕНСИОННАЯ));
	Запрос.УстановитьПараметр("ОтчетныйПериод",	ОтчетныйПериод);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ФорматФайла",	ФорматФайла);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка КАК ДокументПачка,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Комментарий КАК КомментарийПачки,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТерриториальныеУсловия,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипФормДокументов,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.ВидКорректировки
	|ИЗ
	|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
	|ГДЕ
	|	(НЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Ведомости.ДокументПачка
	|				ИЗ
	|					Документ.ПередачаСЗВ4вПФР.ПачкиДокументов КАК Ведомости
	|				ГДЕ
	|					Ведомости.Ссылка.Проведен
	|					И Ведомости.Ссылка <> &ДокСсылка))
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Проведен
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация = &Организация
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.ФорматФайла = &ФорматФайла
	|	И (СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведенийСЗВ = &ТипСведений
	|			ИЛИ СведенияОТрудовомСтажеИЗаработкеСЗВ4.ОтчетныйПериод >= ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0))
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.ОтчетныйПериод = &ОтчетныйПериод";
	
	ПачкиДокументов.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // АвтозаполнениеПроведеннымиПачками()

// Проверяет правильность заполнения документа
//
Процедура ПроверитьПравильностьЗаполненияДокумента(ЕстьОшибки, СообщатьОбУспехе = Истина, ВыборкаПоШапкеДокумента = Неопределено, СообщенияРазделПроверки = Неопределено) Экспорт
	
	// Заголовок для сообщений об ошибках
	Заголовок =  "Проверка документа " +  СокрЛП(ЭтотОбъект);
	
	Отказ = Ложь;
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;

	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок, СообщенияРазделПроверки);
	
	Если Не НеСодержитСЗВ Тогда
		
		// Проверим правильности указания таблицы пачек документов
		ВыборкаПоПачкам = СформироватьЗапросПоПачкам().Выбрать();
		КоличествоПачек 	= ВыборкаПоПачкам.Количество();
		Если КоличествоПачек = 0 тогда
			ОбщегоНазначения.СообщитьОбОшибке("Список пачек документов пуст!", Отказ, Заголовок);
		КонецЕсли;	 
		
		ПроверитьЗаполнениеПачек(ВыборкаПоПачкам, ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Или НеСодержитСЗВ Тогда
		ВыборкаПоЗадолженности = СформироватьЗапросПоЗадолженности().Выбрать();
		Пока ВыборкаПоЗадолженности.Следующий() Цикл
			ПроверитьСтрокуЗадолженности(ВыборкаПоЗадолженности, ВыборкаПоШапкеДокумента, Отказ, Заголовок, СообщенияРазделПроверки);
		КонецЦикла;
	КонецЕсли;	 
	
	Если Отказ тогда
		ЕстьОшибки = Истина;
	КонецЕсли;	 
	
	Если СообщатьОбУспехе И Не ЕстьОшибки Тогда
		Сообщить("Ошибок не обнаружено.");		
	КонецЕсли;

КонецПроцедуры // ПроверитьПравильностьЗаполненияДокумента()	


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ проведения документа

// Формирует запрос по пачкам документов
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	Руководитель);
	Запрос.УстановитьПараметр("ДатаФИО",		Дата);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пачки.ДокументПачка КАК ДокументПачка
	|ПОМЕСТИТЬ ВТДокументыСЗВ
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР.ПачкиДокументов КАК Пачки
	|ГДЕ
	|	Пачки.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ФормыСЗВ4.ФизЛицо) КАК КоличествоФизлиц,
	|	СУММА(ВЫБОР
	|			КОГДА ФормыСЗВ4.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИсходных,
	|	СУММА(ВЫБОР
	|			КОГДА ФормыСЗВ4.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоКорректирующих,
	|	СУММА(ВЫБОР
	|			КОГДА ФормыСЗВ4.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА ФормыСЗВ4.НачисленоСтраховая
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоСтраховаяИсходных,
	|	СУММА(ВЫБОР
	|			КОГДА ФормыСЗВ4.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ)
	|				ТОГДА ФормыСЗВ4.НачисленоСтраховая
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоСтраховаяКорректирующих,
	|	СУММА(ВЫБОР
	|			КОГДА ФормыСЗВ4.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА ФормыСЗВ4.НачисленоНакопительная
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоНакопительнаяИсходных,
	|	СУММА(ВЫБОР
	|			КОГДА ФормыСЗВ4.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ)
	|				ТОГДА ФормыСЗВ4.НачисленоНакопительная
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоНакопительнаяКорректирующих,
	|	СУММА(ВЫБОР
	|			КОГДА ФормыСЗВ4.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА ФормыСЗВ4.УплаченоСтраховая
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК УплаченоСтраховая,
	|	СУММА(ВЫБОР
	|			КОГДА ФормыСЗВ4.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА ФормыСЗВ4.УплаченоНакопительная
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК УплаченоНакопительная
	|ПОМЕСТИТЬ ВТКоличествоФизлиц
	|ИЗ
	|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК ФормыСЗВ4
	|ГДЕ
	|	ФормыСЗВ4.Ссылка В
	|			(ВЫБРАТЬ
	|				Ссылки.ДокументПачка
	|			ИЗ
	|				ВТДокументыСЗВ КАК Ссылки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ФизическиеЛица.Наименование
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
	|	КОНЕЦ КАК ФИОРуководителя
	|ПОМЕСТИТЬ ВТФИОРуководителя
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаФИО, ФизЛицо = &Руководитель) КАК ФИОФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Руководитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ДокументыСЗВ.ДокументПачка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоКорректирующих,
	|	СУММА(ВЫБОР
	|			КОГДА ДокументыСЗВ.ДокументПачка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИсходных
	|ПОМЕСТИТЬ ВТКоличествоПачек
	|ИЗ
	|	ВТДокументыСЗВ КАК ДокументыСЗВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Док.Номер,
	|	Док.Дата,
	|	Док.Организация,
	|	Док.Организация.ЮрФизЛицо,
	|	Док.Организация.ОГРН,
	|	Док.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	Док.Организация.НаименованиеСокращенное КАК ОрганизацияНаименованиеСокращенное,
	|	Док.Организация.Наименование,
	|	Док.Организация.РегистрационныйНомерПФР,
	|	Док.Организация.НаименованиеОКОПФ,
	|	Док.Организация.ИНН,
	|	Док.Организация.КПП,
	|	Док.Организация.КодПоОКПО КАК ОКПО,
	|	Док.Год,
	|	Док.ДатаДействия,
	|	Док.Ответственный,
	|	Док.ТипСведений,
	|	Док.ФорматФайла,
	|	Док.Комментарий,
	|	Док.ДолжностьРуководителя.Наименование КАК РуководительДолжность,
	|	ЕСТЬNULL(ФИОФизЛиц.ФИОРуководителя, """") КАК Руководитель,
	|	ЕСТЬNULL(ДанныеПоФизлицам.КоличествоФизлиц, 0) КАК ЧислоЗастрахованныхЛиц,
	|	ЕСТЬNULL(ДанныеПоФизлицам.КоличествоИсходных, 0) КАК КолЗЛИсходных,
	|	ЕСТЬNULL(ДанныеПоФизлицам.КоличествоКорректирующих, 0) КАК КолЗЛКорректирующих,
	|	""Р"" КАК ПризнакТарифа,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА Док.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА Док.Организация.ВидСтавокЕСНиПФР
	|				ИНАЧЕ Организации.ВидСтавокЕСНиПФР
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокЕСНиПФР.ДляСельскохозяйственныхПроизводителей)
	|			ТОГДА ""СХ""
	|		ИНАЧЕ ""НР""
	|	КОНЕЦ КАК КодОсновногоТарифа,
	|	Док.НомерПачки,
	|	Док.ОтчетныйПериод,
	|	ЕСТЬNULL(КоличествоПачек.КоличествоКорректирующих, 0) КАК КолКорректирующихПачек,
	|	ЕСТЬNULL(КоличествоПачек.КоличествоИсходных, 0) КАК КолИсходныхПачек,
	|	ДанныеПоФизлицам.НачисленоСтраховаяИсходных,
	|	ДанныеПоФизлицам.НачисленоСтраховаяКорректирующих,
	|	ДанныеПоФизлицам.НачисленоНакопительнаяИсходных,
	|	ДанныеПоФизлицам.НачисленоНакопительнаяКорректирующих,
	|	ДанныеПоФизлицам.УплаченоСтраховая,
	|	ДанныеПоФизлицам.УплаченоНакопительная
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИОРуководителя КАК ФИОФизЛиц
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоФизлиц КАК ДанныеПоФизлицам
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Док.Организация.ГоловнаяОрганизация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоПачек КАК КоличествоПачек
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции 

// Формирует запрос по задолженности
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоПачкам()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пачки.НомерСтроки КАК НомерСтроки,
	|	Пачки.ДокументПачка КАК ДокументПачка,
	|	МИНИМУМ(Пачки2.НомерСтроки) КАК НомерПовторяющийсяСтроки,
	|	Пачки.ДокументПачка.Организация КАК Организация,
	|	Пачки.ДокументПачка.ФорматФайла КАК ФорматФайла,
	|	Пачки.ДокументПачка.НомерПачки КАК НомерПачки,
	|	Пачки.ДокументПачка.ОтчетныйПериод КАК ОтчетныйПериод
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР.ПачкиДокументов КАК Пачки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаСЗВ4вПФР.ПачкиДокументов КАК Пачки2
	|		ПО (Пачки2.Ссылка = &ДокументСсылка)
	|			И Пачки.ДокументПачка = Пачки2.ДокументПачка
	|			И Пачки.НомерСтроки < Пачки2.НомерСтроки
	|ГДЕ
	|	Пачки.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Пачки.НомерСтроки,
	|	Пачки.ДокументПачка,
	|	Пачки.ДокументПачка.Организация,
	|	Пачки.ДокументПачка.ФорматФайла,
	|	Пачки.ДокументПачка.НомерПачки,
	|	Пачки.ДокументПачка.ОтчетныйПериод";
	
	Возврат Запрос.Выполнить();

КонецФункции 

// Формирует запрос по задолженности
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоЗадолженности()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сведения.Год КАК Год,
	|	Сведения.ТипСтроки,
	|	Сведения.СтраховаяЧасть,
	|	Сведения.НакопительнаяЧасть,
	|	Сведения.ДополнительныйТариф,
	|	Сведения.НомерСтроки,
	|	МИНИМУМ(Сведения2.НомерСтроки) КАК НомерПовторяющийсяСтроки
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР.СведенияОЗадолженности КАК Сведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаСЗВ4вПФР.СведенияОЗадолженности КАК Сведения2
	|		ПО Сведения.Год = Сведения2.Год
	|			И Сведения.ТипСтроки = Сведения2.ТипСтроки
	|			И Сведения.НомерСтроки < Сведения2.НомерСтроки
	|			И Сведения.Ссылка = Сведения2.Ссылка
	|ГДЕ
	|	Сведения.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Сведения.Год,
	|	Сведения.ТипСтроки,
	|	Сведения.СтраховаяЧасть,
	|	Сведения.НакопительнаяЧасть,
	|	Сведения.ДополнительныйТариф,
	|	Сведения.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Год";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок, СообщенияРазделПроверки = Неопределено)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		Сообщить("Не указана организация!");
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФорматФайла) Тогда
		Сообщить("Не указан формат файла!");
		Отказ = Истина;
		
	ИначеЕсли ВыборкаПоШапкеДокумента.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда	
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеОКОПФ) Тогда
			Сообщить("Предупреждение: Не указано наименование ОКОПФ организации");
			
		ИначеЕсли СтрДлина(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеОКОПФ) > 40 Тогда
			Сообщить("Предупреждение: Наименование ОКОПФ организации обрезано до 40 символов.");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОтчетныйПериод) Тогда
		Сообщить("Не указан отчетный период!");
		Отказ = Истина;
	ИначеЕсли ВыборкаПоШапкеДокумента.ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда	
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаДействия) Тогда
			Сообщить("Не указана дата действия!");
			Отказ = Истина;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Ответственный) Тогда
			Сообщить("Не указано ответственное лицо!");
			Отказ = Истина;
		КонецЕсли;
		
	Иначе
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Руководитель) Тогда
			Сообщить("Не указан руководитель!");
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РуководительДолжность) Тогда
			Сообщить("Не указана должность руководителя!");
			Отказ = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()


// Проверяет правильность заполнения документа
Процедура ПроверитьЗаполнениеПачек(ВыборкаПоПачкам,ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")
	
	Пока ВыборкаПоПачкам.Следующий() Цикл
	
		Если НЕ ЗначениеЗаполнено(ВыборкаПоПачкам.ДокументПачка) тогда
			Сообщить("Строка таблицы пачек № "+ ВыборкаПоПачкам.НомерСтроки + ": Не указан документ-пачка!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;	 
		
		Если ВыборкаПоПачкам.ОтчетныйПериод <> ВыборкаПоШапкеДокумента.ОтчетныйПериод тогда
			Сообщить("Строка таблицы пачек № "+ ВыборкаПоПачкам.НомерСтроки + ": Отчетный период документа-пачки отличается от указанного!");
			Отказ = Истина;
		КонецЕсли;	 
		
		Если ВыборкаПоПачкам.Организация <> ВыборкаПоШапкеДокумента.Организация тогда
			Сообщить("Строка таблицы пачек № "+ ВыборкаПоПачкам.НомерСтроки + ": Документ-пачка оформлен на другую организацию!");
			Отказ = Истина;
		КонецЕсли;	 
		
		Если ВыборкаПоШапкеДокумента.ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
			Если ВыборкаПоПачкам.ФорматФайла <> ВыборкаПоШапкеДокумента.ФорматФайла Тогда
				Сообщить("Строка таблицы пачек № "+ ВыборкаПоПачкам.НомерСтроки + ": Документ-пачка имеет формат файла " + ВыборкаПоПачкам.ФорматФайла + "!");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Проверка на уникальность номеров пачек СЗВ и АДВ
		Если ВыборкаПоПачкам.НомерПачки = ВыборкаПоШапкеДокумента.НомерПачки Тогда
			Сообщить("Строка таблицы пачек № "+ ВыборкаПоПачкам.НомерСтроки + ": Документ-пачка имеет такой же номер как и документ описи, рекомендуется изменить номер пачки в документе описи");
			Отказ = Истина;
		КонецЕсли;
		
		//Контроль дубля пачек документов
		Если ВыборкаПоПачкам.НомерПовторяющийсяСтроки <> NULL тогда
			Сообщить("Строка таблицы пачек № "+ВыборкаПоПачкам.НомерПовторяющийсяСтроки+": Документ-пачка указан дважды!");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

// Проверяет правильность заполнения реквизитов физлица 
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьСтрокуЗадолженности(ВыборкаПоЗадолженности, ВыборкаПоШапкеДокумента, Отказ, Заголовок = "", СообщенияРазделПроверки = Неопределено)

	Если ВыборкаПоЗадолженности.НомерПовторяющийсяСтроки <> NULL Тогда
		
		СтрокаНачалаСообщенияОбОшибке = "В строке №" + ВыборкаПоЗадолженности.НомерПовторяющийсяСтроки + " таблицы задолженности: ";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Повторно указан тип строки " +ВыборкаПоЗадолженности.ТипСтроки + " " + ВыборкаПоЗадолженности.Год + " год!", Отказ, Заголовок);
		
	Иначе
		
		СтрокаНачалаСообщенияОбОшибке = "В строке №" + ВыборкаПоЗадолженности.НомерСтроки + " таблицы задолженности: ";
		Если ВыборкаПоЗадолженности.Год = 0 тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не указан год образования задолженности!", Отказ, Заголовок);
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ВыборкаПоЗадолженности.ТипСтроки) И ВыборкаПоЗадолженности.ТипСтроки <> "Уплачено" И ВыборкаПоЗадолженности.СтраховаяЧасть * ВыборкаПоЗадолженности.НакопительнаяЧасть < 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Суммы страховой и накопительной части пенсии должны иметь один знак!", Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоЗадолженности.ТипСтроки)  тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не указан тип строки!", Отказ, Заголовок);
			
		ИначеЕсли (ВыборкаПоЗадолженности.ТипСтроки = "Долг на начало года" Или ВыборкаПоЗадолженности.ТипСтроки = "Долг на конец года") И (ВыборкаПоЗадолженности.СтраховаяЧасть > 0 Или ВыборкаПоЗадолженности.НакопительнаяЧасть > 0) И ВыборкаПоШапкеДокумента.ОтчетныйПериод >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() И ВыборкаПоЗадолженности.Год > 2010 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Год задолженности не должен превышать 2010-го!", Отказ, Заголовок);
			
		ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Начислено" И ВыборкаПоШапкеДокумента.ОтчетныйПериод >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- С 2010 года начисленные суммы не указываются!", Отказ, Заголовок);
			
		ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Уплачено" И ВыборкаПоШапкеДокумента.ОтчетныйПериод >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() И (ВыборкаПоЗадолженности.СтраховаяЧасть > 0 Или ВыборкаПоЗадолженности.НакопительнаяЧасть > 0) И ВыборкаПоЗадолженности.Год >= 2010 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Год, за который уплачены взносы, не должен превышать 2009-го!", Отказ, Заголовок);
			
		ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Долг на начало года" Тогда
			Если ВыборкаПоЗадолженности.СтраховаяЧасть >= 0 И ВыборкаПоЗадолженности.НакопительнаяЧасть >= 0 Тогда
				Если ВыборкаПоЗадолженности.Год >= ВыборкаПоШапкеДокумента.Год тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Год задолженности должен быть меньше расчетного периода!", Отказ, Заголовок);
				КонецЕсли;
				
			ИначеЕсли ВыборкаПоЗадолженности.СтраховаяЧасть * ВыборкаПоЗадолженности.НакопительнаяЧасть < 0 Тогда
				
			ИначеЕсли ВыборкаПоЗадолженности.СтраховаяЧасть <= 0 И ВыборкаПоЗадолженности.НакопительнаяЧасть <= 0 Тогда
				Если ВыборкаПоЗадолженности.Год > ВыборкаПоШапкеДокумента.Год тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Год переплаты не должен превышать год расчетного периода!", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Начислено" И ВыборкаПоЗадолженности.Год <> 0 И ВыборкаПоЗадолженности.Год <> ВыборкаПоШапкеДокумента.Год Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Начисленные суммы указываются только для текущего расчетного периода!", Отказ, Заголовок);
			
		ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Уплачено" И ВыборкаПоЗадолженности.Год > ВыборкаПоШапкеДокумента.Год Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Год уплаты взносов не должен превышать год расчетного периода!", Отказ, Заголовок);
			
		ИначеЕсли ВыборкаПоЗадолженности.ТипСтроки = "Долг на конец года"  Тогда 
			Если ВыборкаПоЗадолженности.СтраховаяЧасть >= 0 И ВыборкаПоЗадолженности.НакопительнаяЧасть >= 0 Тогда
				Если ВыборкаПоЗадолженности.Год > ВыборкаПоШапкеДокумента.Год тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Год задолженности не должен превышать год расчетного периода!", Отказ, Заголовок);
				КонецЕсли;
				
			ИначеЕсли ВыборкаПоЗадолженности.СтраховаяЧасть * ВыборкаПоЗадолженности.НакопительнаяЧасть < 0 Тогда
				
			ИначеЕсли ВыборкаПоЗадолженности.СтраховаяЧасть <= 0 И ВыборкаПоЗадолженности.НакопительнаяЧасть <= 0 Тогда
				Если ВыборкаПоЗадолженности.Год > ВыборкаПоШапкеДокумента.Год + 1 тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Год переплаты не должен превышать год расчетного периода более чем на 1!", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;

	
КонецПроцедуры // ПроверитьСтрокуЗадолженности()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	Если Проведен И ПринятоВПФР Тогда
		Возврат
	КонецЕсли;
	
		Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
	КонецЦикла;

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка,
	|	ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка.Представление КАК Представление
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР.ПачкиДокументов КАК ПередачаСЗВ4вПФРПачкиДокументов
	|ГДЕ
	|	(НЕ ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка.Проведен)
	|	И ПередачаСЗВ4вПФРПачкиДокументов.Ссылка = &Ссылка");
						  
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Сообщить("Обнаружены непроведенные пачки документов СЗВ-4:");
		Отказ = Истина;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщить(Символы.Таб + Выборка.Представление);
			Отказ = Истина;
		КонецЦикла;
	КонецЕсли;

	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь, ВыборкаПоШапкеДокумента);
	
	Если Отказ тогда
		
		Возврат;
	КонецЕсли;

	//При проведении файл формируем заново 
	ТекстФайла = СформироватьВыходнойФайл(Отказ, Заголовок, Ложь, ВыборкаПоШапкеДокумента);
	
	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения.АрхивДанныхРегламентированнойОтчетности.Добавить();
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Ведомость уплаты страховых взносов АДВ11";
	Запись.Данные = ТекстФайла; 

КонецПроцедуры	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаполненПринятымиСведениями Тогда
		Возврат
	КонецЕсли;

	ПроцедурыПерсонифицированногоУчета.ПроверитьВозможностьПроведения(ЭтотОбъект, Отказ, РежимЗаписи);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтчетныйПериод) Тогда
		Год = Год(ОтчетныйПериод);
	КонецЕсли;
	
	ПроцедурыПерсонифицированногоУчета.ПроставитьНомерПачки(ЭтотОбъект);
	
	Если ОтчетныйПериод >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		Если Не НеСодержитСЗВ И СведенияОЗадолженности.Количество() > 0 Тогда
			СведенияОЗадолженности.Очистить();
		КонецЕсли;
		Если НеСодержитСЗВ И ПачкиДокументов.Количество() > 0 Тогда 
			ПачкиДокументов.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	КраткийСоставДокумента = "";
	Для Каждого СтрокаТаблицы Из ПачкиДокументов Цикл
		Если ПустаяСтрока(КраткийСоставДокумента) Тогда
			КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(СтрокаТаблицы.ДокументПачка.РаботникиОрганизации,, "Физлицо");
		ИначеЕсли (СтрДлина(КраткийСоставДокумента) >= 96) Тогда
			Прервать;
		Иначе
			КраткийСоставДокумента = КраткийСоставДокумента + ", " + ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(СтрокаТаблицы.ДокументПачка.РаботникиОрганизации,, "Физлицо");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция НачисленныеУплаченныеВзносыФизлиц(Физлица, НачалоПериодаРасчета) Экспорт

	Если Физлица.Количество() = 0 Тогда
		Возврат Физлица;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФизлиц.Физлицо,
	|	ТаблицаФизлиц.ОтчетныйПериод,
	|	ТаблицаФизлиц.КатегорияЗастрахованныхЛиц
	|ПОМЕСТИТЬ ВТФизЛица
	|ИЗ
	|	&ТаблицаФизлиц КАК ТаблицаФизлиц";
	Запрос.УстановитьПараметр("ТаблицаФизлиц", Физлица);
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("ДатаЗаменыЕСН", ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
	Запрос.УстановитьПараметр("ОтчетныйПериод", НачалоПериодаРасчета);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод));
	Запрос.УстановитьПараметр("ДатаАктуальности", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим) КАК ВидТарифаСтраховыхВзносов,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР) КАК КатегорияЗастрахованныхЛиц
	|ПОМЕСТИТЬ ВТСоответствиеТарифаКатегории
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.СельХозПроизводители),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.УСЕН)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕНВД),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.УСЕН)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидТарифаСтраховыхВзносов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Обороты.ПФРСтраховаяПриход) КАК ПФРСтраховаяПриход,
	|	СУММА(Обороты.ПФРНакопительнаяПриход) КАК ПФРНакопительнаяПриход,
	|	ВЫБОР
	|		КОГДА Обороты.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА Обороты.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2010, 7, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0)
	|		КОГДА Обороты.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2011, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(2010, 7, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(Обороты.МесяцОтчетногоПериода, КВАРТАЛ)
	|	КОНЕЦ КАК ОтчетныйПериод
	|ПОМЕСТИТЬ ВТВсегоНачислено
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыПоСтраховымВзносамОбороты.ПФРСтраховаяПриход КАК ПФРСтраховаяПриход,
	|		РасчетыПоСтраховымВзносамОбороты.ПФРНакопительнаяПриход КАК ПФРНакопительнаяПриход,
	|		РасчетыПоСтраховымВзносамОбороты.МесяцРасчетногоПериода КАК МесяцОтчетногоПериода
	|	ИЗ
	|		РегистрНакопления.РасчетыПоСтраховымВзносам.Обороты(
	|				,
	|				&ДатаАктуальности,
	|				,
	|				ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|					И Организация = &Организация
	|					И (МесяцРасчетногоПериода МЕЖДУ &ОтчетныйПериод И &КонецОтчетногоПериода)) КАК РасчетыПоСтраховымВзносамОбороты) КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Обороты.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА Обороты.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2010, 7, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0)
	|		КОГДА Обороты.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2011, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(2010, 7, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(Обороты.МесяцОтчетногоПериода, КВАРТАЛ)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Обороты.ПФРСтраховаяРасход) КАК ПФРСтраховаяРасход,
	|	СУММА(Обороты.ПФРНакопительнаяРасход) КАК ПФРНакопительнаяРасход,
	|	ВЫБОР
	|		КОГДА Обороты.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА Обороты.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2010, 7, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0)
	|		КОГДА Обороты.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2011, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(2010, 7, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(Обороты.МесяцОтчетногоПериода, КВАРТАЛ)
	|	КОНЕЦ КАК ОтчетныйПериод
	|ПОМЕСТИТЬ ВТВсегоУплачено
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыПоСтраховымВзносамОбороты.ПФРСтраховаяРасход КАК ПФРСтраховаяРасход,
	|		РасчетыПоСтраховымВзносамОбороты.ПФРНакопительнаяРасход КАК ПФРНакопительнаяРасход,
	|		РасчетыПоСтраховымВзносамОбороты.Период КАК МесяцОтчетногоПериода
	|	ИЗ
	|		РегистрНакопления.РасчетыПоСтраховымВзносам.Обороты(
	|				&ОтчетныйПериод,
	|				&КонецОтчетногоПериода,
	|				Месяц,
	|				ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|					И МесяцРасчетногоПериода >= &ДатаЗаменыЕСН
	|					И Организация = &Организация) КАК РасчетыПоСтраховымВзносамОбороты) КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Обороты.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА Обороты.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2010, 7, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0)
	|		КОГДА Обороты.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2011, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(2010, 7, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(Обороты.МесяцОтчетногоПериода, КВАРТАЛ)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтраховыеВзносыИсчисленныеОбороты.ФизЛицо КАК ФизЛицо,
	|	СтраховыеВзносыИсчисленныеОбороты.Период КАК МесяцОтчетногоПериода,
	|	КОНЕЦПЕРИОДА(СтраховыеВзносыИсчисленныеОбороты.Период, МЕСЯЦ) КАК Период,
	|	СтраховыеВзносыИсчисленныеОбороты.ПФРСтраховаяОборот КАК ПФРСтраховаяОборот,
	|	СтраховыеВзносыИсчисленныеОбороты.ПФРНакопительнаяОборот КАК ПФРНакопительнаяОборот,
	|	СтраховыеВзносыИсчисленныеОбороты.ПФРСтраховаяЕНВДОборот,
	|	СтраховыеВзносыИсчисленныеОбороты.ПФРНакопительнаяЕНВДОборот
	|ПОМЕСТИТЬ ВТИсчисленоПоЗЛ
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыИсчисленные.Обороты(
	|			&ОтчетныйПериод,
	|			&КонецОтчетногоПериода,
	|			Месяц,
	|			ОбособленноеПодразделение = &Организация
	|				И ФизЛицо В
	|					(ВЫБРАТЬ
	|						ФизЛица.ФизЛицо
	|					ИЗ
	|						ВТФизЛица КАК ФизЛица)) КАК СтраховыеВзносыИсчисленныеОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СрезПоследнихДат.ПериодРегистрации КАК МесяцОтчетногоПериода,
	|	СрезПоследнихДат.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВТИнвалиды
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|		СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо,
	|		МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК Период
	|	ИЗ
	|		ВТИсчисленоПоЗЛ КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|			ПО Периоды.Период >= СведенияОбИнвалидностиФизлиц.Период
	|	ГДЕ
	|		СведенияОбИнвалидностиФизлиц.Физлицо В
	|				(ВЫБРАТЬ
	|					Физлица.ФизЛицо
	|				ИЗ
	|					ВТФизЛица КАК Физлица)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СведенияОбИнвалидностиФизлиц.Физлицо,
	|		Периоды.Период) КАК СрезПоследнихДат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|		ПО СрезПоследнихДат.Период = СведенияОбИнвалидностиФизлиц.Период
	|			И СрезПоследнихДат.Физлицо = СведенияОбИнвалидностиФизлиц.Физлицо
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.Инвалидность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	МесяцОтчетногоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК МесяцОтчетногоПериода,
	|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ВидТарифаСтраховыхВзносов, ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим)) КАК ВидТарифаСтраховыхВзносов
	|ПОМЕСТИТЬ ВТВидыТарифныхСтавокОрганизаций
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		УчетнаяПолитикаНалоговыйУчет.Организация КАК Организация,
	|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТИсчисленоПоЗЛ КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|			ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период
	|				И (УчетнаяПолитикаНалоговыйУчет.Организация = &ГоловнаяОрганизация)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период,
	|		УчетнаяПолитикаНалоговыйУчет.Организация) КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период
	|			И Периоды.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцОтчетногоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Исчислено.ФизЛицо КАК ФизЛицо,
	|	Исчислено.КатегорияЗастрахованныхЛиц,
	|	СУММА(Исчислено.ПФРНакопительнаяОборот) КАК ПФРНакопительнаяОборот,
	|	СУММА(Исчислено.ПФРСтраховаяОборот) КАК ПФРСтраховаяОборот,
	|	ВЫБОР
	|		КОГДА Исчислено.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА Исчислено.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2010, 7, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0)
	|		КОГДА Исчислено.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2011, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(2010, 7, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(Исчислено.МесяцОтчетногоПериода, КВАРТАЛ)
	|	КОНЕЦ КАК ОтчетныйПериод
	|ПОМЕСТИТЬ ВТИсчисленоПоКатегориямЗЛ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсчисленоПоЗЛ.ФизЛицо КАК ФизЛицо,
	|		ИсчисленоПоЗЛ.ПФРНакопительнаяОборот КАК ПФРНакопительнаяОборот,
	|		ИсчисленоПоЗЛ.ПФРСтраховаяОборот КАК ПФРСтраховаяОборот,
	|		СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|		ИсчисленоПоЗЛ.МесяцОтчетногоПериода КАК МесяцОтчетногоПериода
	|	ИЗ
	|		ВТИсчисленоПоЗЛ КАК ИсчисленоПоЗЛ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТИнвалиды КАК Инвалиды
	|			ПО ИсчисленоПоЗЛ.ФизЛицо = Инвалиды.Физлицо
	|				И ИсчисленоПоЗЛ.МесяцОтчетногоПериода = Инвалиды.МесяцОтчетногоПериода
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыТарифныхСтавокОрганизаций КАК ВидыТарифныхСтавокОрганизаций
	|			ПО ИсчисленоПоЗЛ.МесяцОтчетногоПериода = ВидыТарифныхСтавокОрганизаций.МесяцОтчетногоПериода
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаКатегории КАК СоответствиеТарифаКатегории
	|			ПО (ВЫБОР
	|					КОГДА Инвалиды.Физлицо ЕСТЬ НЕ NULL 
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов)
	|					ИНАЧЕ ВидыТарифныхСтавокОрганизаций.ВидТарифаСтраховыхВзносов
	|				КОНЕЦ = СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсчисленоПоЗЛ.ФизЛицо,
	|		ИсчисленоПоЗЛ.ПФРНакопительнаяЕНВДОборот,
	|		ИсчисленоПоЗЛ.ПФРСтраховаяЕНВДОборот,
	|		ВЫБОР
	|			КОГДА Инвалиды.Физлицо ЕСТЬ НЕ NULL 
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.УСЕН)
	|		КОНЕЦ,
	|		ИсчисленоПоЗЛ.МесяцОтчетногоПериода
	|	ИЗ
	|		ВТИсчисленоПоЗЛ КАК ИсчисленоПоЗЛ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТИнвалиды КАК Инвалиды
	|			ПО ИсчисленоПоЗЛ.ФизЛицо = Инвалиды.Физлицо
	|				И ИсчисленоПоЗЛ.МесяцОтчетногоПериода = Инвалиды.МесяцОтчетногоПериода) КАК Исчислено
	|
	|СГРУППИРОВАТЬ ПО
	|	Исчислено.ФизЛицо,
	|	Исчислено.КатегорияЗастрахованныхЛиц,
	|	ВЫБОР
	|		КОГДА Исчислено.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА Исчислено.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2010, 7, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0)
	|		КОГДА Исчислено.МесяцОтчетногоПериода < ДАТАВРЕМЯ(2011, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(2010, 7, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(Исчислено.МесяцОтчетногоПериода, КВАРТАЛ)
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Исчислено.ПФРНакопительнаяОборот) > 0
	|		ИЛИ СУММА(Исчислено.ПФРСтраховаяОборот) > 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизЛица.ФизЛицо КАК ФизЛицо,
	|	ФизЛица.ОтчетныйПериод КАК ОтчетныйПериод,
	|	ФизЛица.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсчисленоПоЗЛ.ПФРСтраховаяОборот, 0) > 0
	|			ТОГДА ЕСТЬNULL(ИсчисленоПоЗЛ.ПФРСтраховаяОборот, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоСтраховая,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсчисленоПоЗЛ.ПФРНакопительнаяОборот, 0) > 0
	|			ТОГДА ЕСТЬNULL(ИсчисленоПоЗЛ.ПФРНакопительнаяОборот, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоНакопительная,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсчисленоПоЗЛ.ПФРСтраховаяОборот, 0) > 0
	|			ТОГДА ЕСТЬNULL(ИсчисленоПоЗЛ.ПФРСтраховаяОборот, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ЕСТЬNULL(ВсегоНачислено.ПФРСтраховаяПриход, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ВсегоУплачено.ПФРСтраховаяРасход, 0) / ЕСТЬNULL(ВсегоНачислено.ПФРСтраховаяПриход, 0)
	|	КОНЕЦ КАК УплаченоСтраховая,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсчисленоПоЗЛ.ПФРНакопительнаяОборот, 0) > 0
	|			ТОГДА ЕСТЬNULL(ИсчисленоПоЗЛ.ПФРНакопительнаяОборот, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ЕСТЬNULL(ВсегоНачислено.ПФРНакопительнаяПриход, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ВсегоУплачено.ПФРНакопительнаяРасход, 0) / ЕСТЬNULL(ВсегоНачислено.ПФРНакопительнаяПриход, 0)
	|	КОНЕЦ КАК УплаченоНакопительная
	|ИЗ
	|	ВТФизЛица КАК ФизЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсчисленоПоКатегориямЗЛ КАК ИсчисленоПоЗЛ
	|		ПО ФизЛица.ФизЛицо = ИсчисленоПоЗЛ.ФизЛицо
	|			И ФизЛица.КатегорияЗастрахованныхЛиц = ИсчисленоПоЗЛ.КатегорияЗастрахованныхЛиц
	|			И ФизЛица.ОтчетныйПериод = ИсчисленоПоЗЛ.ОтчетныйПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсегоНачислено КАК ВсегоНачислено
	|		ПО ФизЛица.ОтчетныйПериод = ВсегоНачислено.ОтчетныйПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсегоУплачено КАК ВсегоУплачено
	|		ПО ФизЛица.ОтчетныйПериод = ВсегоУплачено.ОтчетныйПериод
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	КатегорияЗастрахованныхЛиц,
	|	ОтчетныйПериод";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрСведений.УчетнаяПолитикаНалоговыйУчет", ЗаполнениеРегламентированнойОтчетностиПереопределяемый.ИмяУчетнойПолитики());
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ЗаполненПринятымиСведениями Тогда
		Возврат
	КонецЕсли;
	
	Отказ = ПринятоВПФР;
	Если Не Отказ Тогда
		Для Каждого Набор Из Движения Цикл
			Набор.Очистить();
			Набор.Записать();
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры
