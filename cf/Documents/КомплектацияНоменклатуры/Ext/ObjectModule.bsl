Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПорядокСписанияПартий;           // (Общ)
Перем мУчетнаяПолитика Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура заполняет табличную часть Комплектующих из регистра сведений
// КомплектующиеНоменклатуры
//
Процедура ЗаполнитьКомплектующие() Экспорт

	Если Комплектующие.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		Комплектующие.Очистить();
	КонецЕсли;

	ФормаВыбора = Справочники.СпецификацииНоменклатуры.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите спецификацию для заполнения комплектации";
	ФормаВыбора.РежимВыбора = Истина;

	// По умолчанию поставим отбор по договору и виду операции
	ФормаВыбора.Отбор.Владелец.Значение = Номенклатура;
	ФормаВыбора.Отбор.Владелец.Использование = Истина;

	Спецификация = ФормаВыбора.ОткрытьМодально();
	Если НЕ ЗначениеЗаполнено(Спецификация) Тогда
		Возврат;
	КонецЕсли;
	
	КоэффициентКоличества = ?(Спецификация.Количество = 0, Количество, Количество/Спецификация.Количество);
	
	Для Каждого Строка Из Спецификация.ИсходныеКомплектующие Цикл
		НоваяСтрока 					= Комплектующие.Добавить();
		НоваяСтрока.Номенклатура        = Строка.Номенклатура;
		НоваяСтрока.Количество          = Строка.Количество * КоэффициентКоличества;
		НоваяСтрока.ДоляСтоимости       = 1;
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, Истина);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьКомплектующие()

// Функция формирует табличный документ
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьКомплектацияНоменклатуры()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	""" + ТекстКодАртикул + ":""        КАК ИмяКодАртикул,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Комплект,
	|	Номенклатура,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Количество,
	|	Ответственный,
	|	Организация
	|ИЗ
	|	Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
	|
	|ГДЕ
	|	КомплектацияНоменклатуры.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Номенклатура,
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НомерСтроки
	|
	|ИЗ
	|	Документ.КомплектацияНоменклатуры.Комплектующие КАК КомплектацияНоменклатурыКомплектующие
	|
	|ГДЕ
	|	КомплектацияНоменклатурыКомплектующие.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки ВОЗР
	|";

	ЗапросКомплектующие = Запрос.Выполнить().Выгрузить();

	Макет        = ПолучитьМакет("Комплектация");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КомплектацияНоменклатуры_Комплектация";

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, ?(ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация, "Комплектация", "Разукомплектация")+" номенклатуры");
	ТабДокумент.Вывести(ОбластьМакета);

	Если ВыводитьКоды Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("КомплектКод");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Комплект");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Комплект           = СокрЛП(Шапка.Комплект);
	ОбластьМакета.Параметры.КоличествоНаПечать = "" + Шапка.Количество + " ("+Шапка.ЕдиницаИзмерения+")";
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	Для каждого ВыборкаСтрокКомплектующие Из ЗапросКомплектующие Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокКомплектующие.Номенклатура) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В одной из строк не заполнено значение комплектующей - строка при печати пропущена.");
			Продолжить;
		КонецЕсли;

		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокКомплектующие);
		ОбластьМакета.Параметры.НомерСтроки = ЗапросКомплектующие.Индекс(ВыборкаСтрокКомплектующие) + 1;
		ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокКомплектующие.Номенклатура);
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ОтветственныйПредставление = "/"+ Шапка.Ответственный + "/";
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
    	
	Если ИмяМакета = "Комплектация" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьКомплектацияНоменклатуры();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;


	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), НепосредственнаяПечать);

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Комплектация","Комплектация номенклатуры");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет табличную часть при оперативном проведении
//
// Параметры:
//  Отказ - отказ от дальнейшего проведения.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведением(Отказ) Экспорт
    	
КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведением()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

Процедура ЗаполнитьСчетаРегл(СтрокаТЧ, СчетаУчета, Заполнять)

	Если Заполнять = Истина Тогда
		СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;

	ИначеЕсли Заполнять = Ложь Тогда
		СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, Заполнять) Экспорт

	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);

	ЗаполнитьСчетаРегл(СтрокаТЧ, СчетаУчета, Заполнять);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Записать суммы документа в соответствующие реквизиты шапки для показа в журналах
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура РасчетСуммДокумента()

	СуммаДокумента = Комплектующие.Итог("Сумма");

КонецПроцедуры // РасчетСуммДокумента

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - текст для дополнительной информации об ошибки проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, Склад, ВидОперации, Номенклатура, Количество");
		
	СтруктураОбязательныхПолей.Вставить("НДСвСтоимостиТоваров");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Комплектуемая номенклатура не может быть услугой или набором
	Если (НЕ Отказ) И СтруктураШапкиДокумента.Услуга Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Комплектуемая номенклатура не может быть услугой!", Отказ, Заголовок);
	КонецЕсли;

	// Вид склада
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Комплектация номенклатуры не может проводится на НТТ!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоКомплектующим - результат запроса по табличной части "Комплектующие",
//  СтруктураШапкиДокумента         - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуКомплектующих(РезультатЗапросаПоКомплектующим, СтруктураШапкиДокумента)

	ТаблицаКомплектующих = РезультатЗапросаПоКомплектующим.Выгрузить();
	
	ТаблицаКомплектующих.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаКомплектующих.Колонки.Добавить("Регистратор");
	ТаблицаКомплектующих.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаКомплектующих.Колонки.Добавить("Организация");
	//ТаблицаКомплектующих.Колонки.Добавить("ДокументОприходования");
	
	ТаблицаКомплектующих.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаКомплектующих.Колонки.Добавить("КорПодразделениеОрганизации");
    ТаблицаКомплектующих.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	ТаблицаКомплектующих.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорПодразделениеОрганизации");
	
	ТаблицаКомплектующих.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
	ТаблицаКомплектующих.ЗаполнитьЗначения(ЭтотОбъект,   "Регистратор");
	ТаблицаКомплектующих.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад, "Склад");
	ТаблицаКомплектующих.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,   "Организация");
	
	Если СтруктураШапкиДокумента.НДСвСтоимостиТоваров = перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость Тогда
		ОписаниеТипов_ВидыСубконтоХозрасчетные =  Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
		
		ТаблицаКомплектующих.Колонки.Добавить("СчетСписанияНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаКомплектующих.Колонки.Добавить("СубконтоСписанияНДС1", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаКомплектующих.Колонки.Добавить("СубконтоСписанияНДС2", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаКомплектующих.Колонки.Добавить("СубконтоСписанияНДС3", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаКомплектующих.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетСписанияНДС,"СчетСписанияНДС");
		ТаблицаКомплектующих.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоСписанияНДС1,"СубконтоСписанияНДС1");
		ТаблицаКомплектующих.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоСписанияНДС2,"СубконтоСписанияНДС2");
		ТаблицаКомплектующих.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоСписанияНДС3,"СубконтоСписанияНДС3");
		
	КонецЕсли; 

	
	Возврат ТаблицаКомплектующих;

КонецФункции // ПодготовитьТаблицуКомплектующих()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоКомплектующим - результат запроса по табличной части "Комплектующие",
//  СтруктураШапкиДокумента         - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений по комплектам.
//
Функция ПодготовитьТаблицуКомплектов(РезультатЗапросаПоКомплектующим, СтруктураШапкиДокумента)

	// подготовим структуру таблицы
	ТаблицаКомплектов = РезультатЗапросаПоКомплектующим.Выгрузить();
	ТаблицаКомплектов.Очистить();

	НоваяСтрока = ТаблицаКомплектов.Добавить();
	НоваяСтрока.Номенклатура                 = СтруктураШапкиДокумента.Номенклатура;
	НоваяСтрока.Услуга                       = СтруктураШапкиДокумента.Услуга;
	НоваяСтрока.Количество                   = СтруктураШапкиДокумента.Количество;
	НоваяСтрока.СчетУчета                    = СтруктураШапкиДокумента.СчетУчета;
	НоваяСтрока.НомерСтроки                  = 0;
	
	Возврат ТаблицаКомплектов;

КонецФункции // ПодготовитьТаблицуКомплектов()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоКомплектующим  - таблица значений, содержащая данные для проведения и проверки ТЧ Комплектующие
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиКомплектующих(ТаблицаПоКомплектующим, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Комплектующие";

	Если Комплектующие.Количество() = 0 Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не заполнена табличная часть ""Комплектующие"".", Отказ, Заголовок);
	КонецЕсли;

	// Укажем, что надо проверить:
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ДоляСтоимости");
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиКомплектующиеРегл(ТаблицаПоКомплектующим, СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Комплектующие",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Комплектующие", ТаблицаПоКомплектующим, Отказ, Заголовок);
	
	//Проверить построчно
	Для Каждого СтрокаТЧ Из ТаблицаПоКомплектующим Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ : ";
		Если УправлениеЗапасами.НеУказанНомерГТД(СтрокаТЧ.НомерГТД, СтрокаТЧ.СтранаПроисхождения) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Номер ГТД""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, Заголовок);
		КонецЕсли;
		Если СтрокаТЧ.СчетУчета.Забалансовый Тогда
			СтрокаСообщения = "Использование комплектующих, учитываемых на забалансовых счетах, не допускается!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиКомплектующих()

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиКомплектующиеРегл(ТаблицаПоКомплектующим, СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей)

	СтруктураОбязательныхПолей.Вставить("СчетУчета");
	
КонецПроцедуры

Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураШапкиДокумента)

	СтруктураПолей.Вставить("СчетУчета"               , "СчетУчета");
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоКомплектующим    - таблица значений, содержащая данные для проведения и проверки ТЧ ТаблицаПоКомплектующим
//  ТаблицаПоКомплектам       - таблица значений, содержащая данные для проведения и проверки по комплектам,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);

	// Движения по документу

	// Проведение по партиям остановим в том случае, если не хватит хоть одного комплектующего.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоКомплектующим, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, , "Комплектация");
		
		// {УчетДоходовИРасходовИП
		//Списание по партиям в налоговом учете предпринимателя
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
			
			ТаблицаПоКомплектующим.Колонки.Добавить("Продукция");
			ТаблицаПоКомплектующим.Колонки.Добавить("НоменклатурнаяГруппаПродукции");
			
			ВидМПЗ = ДоходыИРасходыПредпринимателя.ВидМПЗПоСчетуУчета(ТаблицаПоКомплектующим[0].КорСчетСписания);
			НоменклатурнаяГруппаПродукции = ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации(Истина, СтруктураШапкиДокумента.Номенклатура,СтруктураШапкиДокумента.Номенклатура.НоменклатурнаяГруппа, ВидМПЗ, мУчетнаяПолитика);
			
			ТаблицаПоКомплектующим.ЗаполнитьЗначения(СтруктураШапкиДокумента.Номенклатура, "Продукция");
			ТаблицаПоКомплектующим.ЗаполнитьЗначения(НоменклатурнаяГруппаПродукции, "НоменклатурнаяГруппаПродукции");
			
			СтоимостьПродукции = ДоходыИРасходыПредпринимателя.СписаниеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, мУчетнаяПолитика, 2, ТаблицаПоКомплектующим, "НоменклатурнаяГруппаПродукции", "СчетУчета", "КорСчетСписания",,, Отказ);
			
			ПолученоПродукции = ТаблицаПоКомплектующим.Скопировать(, "НоменклатурнаяГруппаПродукции,Продукция,КорСчетСписания,КоличествоДт");
			ПолученоПродукции.Колонки.КорСчетСписания.Имя = "Счет";
			ПолученоПродукции.Колонки.КоличествоДт.Имя = "Количество";
			ПолученоПродукции.Свернуть("Продукция,НоменклатурнаяГруппаПродукции,Счет", "Количество");
			
			ДоходыИРасходыПредпринимателя.ПоступлениеПродукции(ЭтотОбъект, СтруктураШапкиДокумента, мУчетнаяПолитика, ПолученоПродукции, "Счет",, "НоменклатурнаяГруппаПродукции", "Продукция", СтоимостьПродукции);
		КонецЕсли;
		// }УчетДоходовИРасходовИП
		
		// Учет товаров по номерам ГТД
		УправлениеЗапасами.ПроведениеДокументаСписанияПоСчетуГТД(ЭтотОбъект, ТаблицаПоКомплектующим);
		
	Иначе
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоКомплектующим, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, , "Комплектация");
		
		// {УчетДоходовИРасходовИП
		//Списание по партиям в налоговом учете предпринимателя
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
			
			ТаблицаПоКомплектующим.Колонки.Добавить("Продукция");
			ТаблицаПоКомплектующим.Колонки.Добавить("НоменклатурнаяГруппаПродукции");
			
			Для каждого Продукция Из ТаблицаПоКомплектующим Цикл
				ВидМПЗ = ДоходыИРасходыПредпринимателя.ВидМПЗПоСчетуУчета(Продукция.КорСчетСписания);
				НоменклатурнаяГруппаПродукции = ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации(Истина, Продукция.КорСубконтоСписания1,Продукция.НоменклатурнаяГруппа, ВидМПЗ, мУчетнаяПолитика);
				Продукция.Продукция = Продукция.КорСубконтоСписания1;
				Продукция.НоменклатурнаяГруппаПродукции = НоменклатурнаяГруппаПродукции;
			КонецЦикла;
			
			СтоимостьПродукции = ДоходыИРасходыПредпринимателя.СписаниеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, мУчетнаяПолитика, 2, ТаблицаПоКомплектующим, "НоменклатурнаяГруппаПродукции", "СчетУчета", "КорСчетСписания",,, Отказ);

			ПолученоПродукции = ТаблицаПоКомплектующим.Скопировать(, "НоменклатурнаяГруппаПродукции,Продукция,КорСчетСписания,КоличествоДт");
			ПолученоПродукции.Колонки.КорСчетСписания.Имя = "Счет";
			ПолученоПродукции.Колонки.КоличествоДт.Имя = "Количество";
			ПолученоПродукции.Свернуть("Продукция,НоменклатурнаяГруппаПродукции,Счет", "Количество");
			
			ДоходыИРасходыПредпринимателя.ПоступлениеПродукции(ЭтотОбъект, СтруктураШапкиДокумента, мУчетнаяПолитика, ПолученоПродукции, "Счет",, "НоменклатурнаяГруппаПродукции", "Продукция", СтоимостьПродукции);
		КонецЕсли;
		// }УчетДоходовИРасходовИП
		
		// Учет товаров по номерам ГТД
		Для Каждого СтрокаТаблицы Из ТаблицаПоКомплектующим Цикл
			Если УправлениеЗапасами.ЭтоИмпортныйТовар(СтрокаТаблицы.КорСчетСписания, СтрокаТаблицы.НомерГТД, СтрокаТаблицы.СтранаПроисхождения) Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "При разукомплектации оприходован " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(СтрокаТаблицы.КорСчетСписания);

				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ГТД;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.НоменклатураНовая, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НомераГТД", СтрокаТаблицы.НомерГТД, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтраныПроисхождения", СтрокаТаблицы.СтранаПроисхождения, Истина, Заголовок);
			
				Проводка.КоличествоДт = СтрокаТаблицы.КоличествоПоступление;

			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета УСН
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДопПараметров = Новый Структура("ТаблицаТМЦ", ТаблицаПоТоварам);
	
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, СтруктураДопПараметров);
		
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоКомплектам, Отказ, Заголовок)

	Если мУчетнаяПолитика.УпрощенныйУчетНДС Тогда
		Возврат;
	ИначеЕсли Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если (СтруктураШапкиДокумента.Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка)
		И (мУчетнаяПолитика.Количество() > 0 
			и (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)) 
		Тогда
		//Учет в продажных ценах не отражается в НДС;
		Возврат;
	КонецЕсли;
	
	//Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация тогда
	//ТаблицаПоТоварам = ТаблицаПоКомплектующим;
	//Иначе
	//	ТаблицаПоТоварам = ТаблицаПоКомплектам;
	//КонецЕсли;
	
	Если ТаблицаПоТоварам.Количество() = 0 Тогда
		//Отработка по партиям НДС не требуется. 
		Возврат;
	КонецЕсли; 
	
	/////////////////////////////////////////////////////////////////////////////////
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	ТаблицаНДСПартииСписания = УчетНДС.ПодготовитьТаблицуСписанияПартийДляНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	/////////////////////////////////////////////////////////////////////////////////
		
	Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		//Партии не найдены или отражение в партионном учете НДС не производится.
		//Дальнейшая обработка не требуется
		Возврат;
	КонецЕсли; 
	
	ТаблицаДвиженийПартии = Движения.НДСПоПриобретеннымЦенностям.ВыгрузитьКолонки();
	Движения.НДСПоПриобретеннымЦенностям.мПериод          = СтруктураШапкиДокумента.Дата;
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
	УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии,Истина,Движения.Хозрасчетный,Заголовок, Движения);
	УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии,Ложь,Движения.Хозрасчетный,Заголовок, Движения);
	
	Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
		Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
		Движения.НДСПоПриобретеннымЦенностям.ВыполнитьПриход();
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по партиям - отразить непосредственное списание.
	ТаблицаДвиженийПартии.Очистить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
	Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
	Движения.НДСПоПриобретеннымЦенностям.ВыполнитьРасход();
	// НДС по партиям - отразить непосредственное списание.
	/////////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////////////////////
	// НДС по партиям - отразить поступление
	КолСтрокНДС = ТаблицаНДСПартииСписания.Количество();
	
	СтрокаПоступленияКомплектации = Неопределено;
	
	Для ИндексТекСтроки = 0 по КолСтрокНДС-1 цикл
		
		СтрокаТаблицыНДСПартииСписания = ТаблицаНДСПартииСписания[ИндексТекСтроки];
		
		Если ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.НоменклатураНовая) тогда
			СтрокаТаблицыНДСПартииСписания.Номенклатура = СтрокаТаблицыНДСПартииСписания.НоменклатураНовая;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.КорСчетСписания) тогда
			СтрокаТаблицыНДСПартииСписания.СчетУчета = СтрокаТаблицыНДСПартииСписания.КорСчетСписания;
		КонецЕсли;
	
		//СтрокаТаблицыНДСПартииСписания.Партия = СтрокаТаблицыНДСПартииСписания.ДокументОприходованияНовый;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация
			и СтрокаТаблицыНДСПартииСписания.Количество <>0
			Тогда
			//Строка поступления для каждой комплектующей своя
			СтрокаПоступленияКомплектации = Неопределено;
		КонецЕсли; 
		
		Если СтрокаПоступленияКомплектации = Неопределено Тогда
			СтрокаПоступленияКомплектации = ТаблицаНДСПартииСписания.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоступленияКомплектации,СтрокаТаблицыНДСПартииСписания);
			СтрокаПоступленияКомплектации.НДС = 0;
			СтрокаПоступленияКомплектации.Стоимость = 0;
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
				СтрокаПоступленияКомплектации.Количество = СтруктураШапкиДокумента.Количество;
			ИначеЕсли СтрокаТаблицыНДСПартииСписания.Количество <>0 тогда
				СтрокаПоступленияКомплектации.Количество = СтрокаТаблицыНДСПартииСписания.КоличествоПриход;
			КонецЕсли;
			
			СтрокаПоступленияКомплектации.СчетФактура = Неопределено;
			СтрокаПоступленияКомплектации.ВидЦенности = Перечисления.ВидыЦенностей.Товары;
			СтрокаПоступленияКомплектации.СтавкаНДС   = Перечисления.СтавкиНДС.БезНДС;
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
			//Строка с полным количеством поступления уже создана. Дополнение количества не требуется 
		Иначе
			Если СтрокаТаблицыНДСПартииСписания.Количество <>0 тогда
				СтрокаПоступленияКомплектации.Количество = СтрокаПоступленияКомплектации.Количество + 
														   СтрокаТаблицыНДСПартииСписания.КоличествоПриход;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицыНДСПартииСписания.Количество = 0;
		
		//Если СтрокаТаблицыНДСПартииСписания.НДС = 0 и СтрокаТаблицыНДСПартииСписания.Стоимость = 0 тогда
		//	ТаблицаНДСПартииСписания.Удалить(СтрокаТаблицыНДСПартииСписания);
		//КонецЕсли;
		
	КонецЦикла; 

	ТаблицаНДСПартииСписания.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,"Склад");
	
	ТаблицаДвиженийПартии.Очистить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
	ТаблицаДвиженийПартии.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,"Склад");
	ТаблицаДвиженийПартии.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"Партия");
	ТаблицаДвиженийПартии.Колонки.СчетУчета.Имя = "СчетУчетаЦенности";
	
	УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураШапкиДокумента,ТаблицаДвиженийПартии, Движения.НДСПоПриобретеннымЦенностям, Отказ);
	// НДС по партиям - отразить поступление на склад-получатель
	///////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по ОС - при перемещении ТМЦ они могут перестать принадлежать к будущим ОС,
	// в этом случае необходимо снять блокировку с вычета.
	// Если в результате перемещения ТМЦ будет отнесено на счет учета ОС, необходимо включить блокировку.
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, Движения.НДСПоПриобретеннымЦенностям.Выгрузить(), Движения, Отказ);
	// НДС по ОС
	/////////////////////////////////////////////////////////////////////////////////
		
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок)
	
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"          , "ВидСклада"                       , "ВидСклада");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Номенклатура"   , "Услуга"                          , "Услуга");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	Если ТипЗнч(мУчетнаяПолитика) = Тип("Структура") и мУчетнаяПолитика.Количество()>0 тогда
		СтруктураШапкиДокумента.Вставить("СложныйУчетНДС", мУчетнаяПолитика.СложныйУчетНДС);
	Иначе
		СтруктураШапкиДокумента.Вставить("СложныйУчетНДС", Ложь);
	КонецЕсли;
	
	//Если сложный учет НДС не ведется - затрем параметры сложного учета ндс
	Если (СтруктураШапкиДокумента.ОрганизацияПрименяетУСН ИЛИ Не СтруктураШапкиДокумента.СложныйУчетНДС)
		и не СтруктураШапкиДокумента.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять Тогда
		СтруктураШапкиДокумента.Вставить("НДСвСтоимостиТоваров",Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять);
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                 , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"         , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"                   , "Количество");
	СтруктураПолей.Вставить("НомерСтроки"                  , "НомерСтроки");
	СтруктураПолей.Вставить("ДоляСтоимости"                , "ДоляСтоимости");
	СтруктураПолей.Вставить("НомерГТД"           		   , "НомерГТД");
	СтруктураПолей.Вставить("СтранаПроисхождения"		   , "СтранаПроисхождения");
	СтруктураПолей.Вставить("ДокументОприходования"		   , "ДокументОприходования");
	СтруктураПолей.Вставить("Себестоимость"		 		   , "Себестоимость");

	
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураШапкиДокумента);

	РезультатЗапросаПоКомплектующим = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Комплектующие", СтруктураПолей);

	// Подготовим таблицы для проведения.
	ТаблицаПоКомплектующим = ПодготовитьТаблицуКомплектующих(РезультатЗапросаПоКомплектующим, СтруктураШапкиДокумента);
	ТаблицаПоКомплектам    = ПодготовитьТаблицуКомплектов(РезультатЗапросаПоКомплектующим, СтруктураШапкиДокумента);;
	
	ПроверитьЗаполнениеТабличнойЧастиКомплектующих(ТаблицаПоКомплектующим, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Движения по документу
	ПартионныйУчет = УправлениеЗапасами.ВедетсяПартионныйУчет(мУчетнаяПолитика, "БУ");
	
	ТаблицаПоКомплектующим.Колонки.Добавить("НоменклатураНовая");
	ТаблицаПоКомплектующим.Колонки.Добавить("КоличествоПоступление", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	// Проведение по партиям остановим в том случае, если не хватит хоть одного комплектующего.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
		
		ТаблицаПоКомплектующим.Колонки.Добавить("КорСчетСписания");
		ТаблицаПоКомплектующим.Колонки.Добавить("КорСубконтоСписания1");
		ТаблицаПоКомплектующим.Колонки.Добавить("КорСубконтоСписания2");
		ТаблицаПоКомплектующим.Колонки.Добавить("КорСубконтоСписания3");
		
		ТаблицаПоКомплектующим.Колонки.Добавить("КоличествоДт");
		ТаблицаПоКомплектующим.ЗаполнитьЗначения(?(ТаблицаПоКомплектующим.Количество() = 0, 0, Окр(ТаблицаПоКомплектам[0].Количество/ТаблицаПоКомплектующим.Количество(),3, 1)), "КоличествоДт");
		Если ТаблицаПоКомплектам[0].Количество <> ТаблицаПоКомплектующим.Итог("КоличествоДт") Тогда
			ТаблицаПоКомплектующим[0].КоличествоДт = ТаблицаПоКомплектующим[0].КоличествоДт + (ТаблицаПоКомплектам[0].Количество - ТаблицаПоКомплектующим.Итог("КоличествоДт"));
		КонецЕсли;
		
		ТаблицаПоКомплектующим.ЗаполнитьЗначения(ТаблицаПоКомплектам[0].СчетУчета, 	"КорСчетСписания");
		ТаблицаПоКомплектующим.ЗаполнитьЗначения(ТаблицаПоКомплектам[0].Номенклатура, 	"КорСубконтоСписания1");
		
		ТаблицаПоКомплектующим.ЗаполнитьЗначения(ТаблицаПоКомплектам[0].Номенклатура, 	"НоменклатураНовая");

		ТаблицаПоКомплектующим.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад, 		"КорСубконтоСписания2");
		Если ПартионныйУчет Тогда
			ТаблицаПоКомплектующим.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, 	"КорСубконтоСписания3");
		КонецЕсли;
		
	Иначе
		
		ТаблицаПоКомплектующим.ЗагрузитьКолонку(ТаблицаПоКомплектующим.ВыгрузитьКолонку("Номенклатура"),"НоменклатураНовая");
		
		ТаблицаПоКомплектующим.Колонки.СчетУчета.Имя = 	"КорСчетСписания";
		ТаблицаПоКомплектующим.Колонки.Номенклатура.Имя = 	"КорСубконтоСписания1";
		ТаблицаПоКомплектующим.Колонки.Количество.Имя = 	"КоличествоДт";
		
		
		ТаблицаПоКомплектующим.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаПоКомплектующим.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		
		ТаблицаПоКомплектующим.Колонки.Добавить("КорСубконтоСписания2");
		ТаблицаПоКомплектующим.Колонки.Добавить("КорСубконтоСписания3");
		
		
		ТаблицаПоКомплектующим.Колонки.Добавить("Количество");
		ТаблицаПоКомплектующим.ЗаполнитьЗначения(0, "Количество");
		
		Если ТаблицаПоКомплектующим.Итог("ДоляСтоимости") = 0 Тогда
			ТаблицаПоКомплектующим.ЗаполнитьЗначения(1, "ДоляСтоимости");
		КонецЕсли;
		
		КоэффДоли = ?(ТаблицаПоКомплектующим.Итог("ДоляСтоимости") = 0, 0, ТаблицаПоКомплектам[0].Количество / (ТаблицаПоКомплектующим.Итог("ДоляСтоимости")));
		
		Для Каждого Строка Из ТаблицаПоКомплектующим Цикл
			Строка.Количество = Окр(КоэффДоли * Строка.ДоляСтоимости, 3, 1);
		КонецЦикла;
		
		Если ТаблицаПоКомплектам[0].Количество <> ТаблицаПоКомплектующим.Итог("Количество") Тогда
			ТаблицаПоКомплектующим[0].Количество = ТаблицаПоКомплектующим[0].Количество + (ТаблицаПоКомплектам[0].Количество - ТаблицаПоКомплектующим.Итог("Количество"));
		КонецЕсли;
				
		ТаблицаПоКомплектующим.ЗаполнитьЗначения(ТаблицаПоКомплектам[0].СчетУчета, 	"СчетУчета");
		ТаблицаПоКомплектующим.ЗаполнитьЗначения(ТаблицаПоКомплектам[0].Номенклатура, 	"Номенклатура");
		ТаблицаПоКомплектующим.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад, 		"КорСубконтоСписания2");
		
		//В случае разукомплектации очистим документ оприходования и себестоимость
		ТаблицаПоКомплектующим.ЗаполнитьЗначения(Неопределено, 	"ДокументОприходования");
		ТаблицаПоКомплектующим.ЗаполнитьЗначения(0, 			"Себестоимость");
		
		Если ПартионныйУчет Тогда
			ТаблицаПоКомплектующим.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, 	"КорСубконтоСписания3");
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаПоКомплектующим.ЗагрузитьКолонку(ТаблицаПоКомплектующим.ВыгрузитьКолонку("КоличествоДт"),"КоличествоПоступление");
	
	
КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоКомплектующим, ТаблицаПоКомплектам;
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры	// ОбработкаПроведения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// Посчитать суммы документа 
	РасчетСуммДокумента();

	 
	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		// Заполнение шапки
		Комментарий    = Основание.Комментарий;
		СуммаДокумента = Основание.СуммаДокумента;

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
