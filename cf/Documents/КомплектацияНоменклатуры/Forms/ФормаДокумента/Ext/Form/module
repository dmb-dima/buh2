////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

Перем мКолонкиКомплектующие;

// Хранит текущую форму подбора номенклатуры
Перем мФормаПодбораНоменклатуры;

// Используется для определения необходимости отображения действий над НДС в документе.
Перем мСложныйУчетНДС;

// Используется для определения необходимости изменения параметра включения НДС в стоимость
Перем мЕстьЕНВД;

// Используется для определения необходимости указания счета списания НДС на расходы.
Перем мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;

Перем мОтражатьВРегламентированномУчете;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;

Перем ОткрыватьНастройкуДвижений;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Комплектующие,ЭлементыФормы.КоманднаяПанельКомплектующие.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора()

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбораНоменклатуры, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  Нет
//
Процедура ДействиеПодбор()

	Перем Команда;

	ЕстьЦена  = Ложь;
	ЕстьСерия = Истина;

	Команда = "ПодборВТабличнуюЧастьТовары";
	ИмяТабличнойЧасти = "Комплектующие";

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов" , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"       , Склад);
	СтруктураПараметровПодбора.Вставить("Организация" , Организация);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер);

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, мФормаПодбораНоменклатуры);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)Экспорт

	Перем Номенклатура, ЕдиницаИзмерения, Количество, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	
	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура                = Номенклатура;
		СтрокаТабличнойЧасти.Количество                  = Количество;
		
		ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);
	КонецЕсли;

	ЭлементыФормы.Комплектующие.ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы.Комплектующие.ТекущаяКолонка = ЭлементыФормы.Комплектующие.Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, Истина);
	ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти, Ложь, Организация, Дата);
	
КонецПроцедуры

// Процедура заполняет счета в шапке.
//
Процедура ЗаполнитьСчетаУчетаВШапке(Номенклатура, Заполнять)

	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад);

	Если Заполнять = Истина Тогда
		СчетУчета = СчетаУчета.СчетУчета;
	ИначеЕсли Заполнять = Ложь Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВШапке

// Определяет параметры учетной политики (сложный учет НДС по организации).
//
Процедура ОпределитьСложныйУчетНДС()
	
	Если мУчетнаяПолитика.Количество() = 0 Тогда
		мСложныйУчетНДС = Ложь;
		мЕстьЕНВД = Ложь;
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
	Иначе
		мСложныйУчетНДС = мУчетнаяПолитика.СложныйУчетНДС И Не мУчетнаяПолитика.УСН И Не мУчетнаяПолитика.УпрощенныйУчетНДС;
		мЕстьЕНВД = мУчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД и мУчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД;
		
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = мУчетнаяПолитика.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;
		Если НЕ ЗначениеЗаполнено(мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость) Тогда
			мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ОпределитьСложныйУчетНДС()

// Процедура для заполнения счетов списания НДС значениями по умолчанию
//
// Параметры
//  ВыводитьВопрос  – <Булево> – задавать вопрос перед заполнением счетов
//
Процедура ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию(ВыводитьВопрос = Ложь)
	Если ВыводитьВопрос Тогда
		Ответ = Вопрос("Установить счета и аналитику для списания НДС
					|в соответствии со значениями по умолчанию?", 
					РежимДиалогаВопрос.ДаНет, , , "Изменения счетов списания НДС");
	Иначе
		Ответ = КодВозвратаДиалога.Да;
	КонецЕсли;
				
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЕстьСкладЕНВД = (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка 
					ИЛИ Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный) И мЕстьЕНВД;
					
		СчетСписанияНДС = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
		
		Если ЕстьСкладЕНВД Тогда
			СубконтоСписанияНДС1 = Справочники.СтатьиЗатрат.СписаниеНДСНаРасходыЕНВД;
		Иначе
			СубконтоСписанияНДС1 = Справочники.СтатьиЗатрат.СписаниеНДСНаРасходы;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если его дата совпадает с текущей и вид операции документа = Комплектация.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает видимость для тех колонок, видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	КолонкиКомплектующие              = ЭлементыФормы.Комплектующие.Колонки;
	ВидОперацииРазукомплектация       = (ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация);
	ВидОперацииКомплектация           = (ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация);

	УСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	
	КолонкиКомплектующие.СчетУчета.Видимость = ПоказыватьВДокументахСчетаУчета;

	КолонкиКомплектующие.ДоляСтоимости.Видимость =  ВидОперацииРазукомплектация;
	
	ЭлементыФормы.СчетУчета                .Видимость = ПоказыватьВДокументахСчетаУчета;
	ЭлементыФормы.НадписьСчетУчетаКомплекта.Видимость = ПоказыватьВДокументахСчетаУчета;
	
	Если мСложныйУчетНДС И Не УСН Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.НДС.Видимость = Истина;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.НДС.Видимость = Ложь;
	КонецЕсли;
	
	ВидимостьСчетИАналитикаСписанияНДС = НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
	
	ВидимостьСчетовСписания = (НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость
			И ?(мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ, Дата >= '20060101', мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.СписыватьНаРасходы));
			
	ЭлементыФормы.РамкаГруппыСчетСписанияНДС.Видимость 	= ВидимостьСчетИАналитикаСписанияНДС;		
	ЭлементыФормы.ПанельСчетСписания.Видимость 		= ВидимостьСчетИАналитикаСписанияНДС;
	
	Если ВидимостьСчетовСписания Тогда
		ЭлементыФормы.ПанельСчетСписания.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписания.Страницы.Счет;
	Иначе
		ЭлементыФормы.ПанельСчетСписания.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписания.Страницы.Надпись;
	КонецЕсли;
	
	РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДС, ЭлементыФормы.СубконтоСписанияНДС1, ЭлементыФормы.НадписьСубконтоСписанияНДС1,
							   			ЭлементыФормы.СубконтоСписанияНДС2, ЭлементыФормы.НадписьСубконтоСписанияНДС2,
						       			ЭлементыФормы.СубконтоСписанияНДС3, ЭлементыФормы.НадписьСубконтоСписанияНДС3);
										
										
	Если ВидОперацииКомплектация Тогда
		Если мУчетнаяПолитика.Количество() > 0 Тогда	
			Если мУчетнаяПолитика.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
				ЭлементыФормы.Комплектующие.Колонки.ДокументОприходования.Видимость = Ложь;
				ЭлементыФормы.Комплектующие.Колонки.ДокументОприходования.ИзменятьВидимость = Ложь;
			Иначе
				Если ЭлементыФормы.Комплектующие.Колонки.Себестоимость.Видимость Тогда
					ЭлементыФормы.Комплектующие.Колонки.ДокументОприходования.Видимость = Истина;
				КонецЕсли;
				ЭлементыФормы.Комплектующие.Колонки.ДокументОприходования.ИзменятьВидимость = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЭлементыФормы.Комплектующие.Колонки.ДокументОприходования.Видимость 		= Ложь;
		ЭлементыФормы.Комплектующие.Колонки.ДокументОприходования.ИзменятьВидимость = Ложь;
		ЭлементыФормы.Комплектующие.Колонки.Себестоимость.Видимость 				= Ложь;
		ЭлементыФормы.Комплектующие.Колонки.Себестоимость.ИзменятьВидимость 		= Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность для тех элементов формы, доступность которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьДоступность()

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

КонецПроцедуры // УстановитьДоступность()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		РаботаСДиалогами.ВыбратьВидОперации(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
    	  	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,,ПараметрОбъектКопирования);

		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НДСвСтоимостиТоваров) Тогда
			НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
		КонецЕсли;

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

    СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("ДоляСтоимости");

	// Установить ограничение - изменять видимость колонок для табличной части
	// "Комплектующие".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Комплектующие.Колонки, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Ложь, Организация);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента             = Дата;
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	// Определим параметры сложного учета НДС.
	ОпределитьСложныйУчетНДС();

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Установить видимость/доступность реквизитов и заголовков колонок.
	УстановитьВидимость();
	УстановитьДоступность();

	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,СкладКомпании,Номенклатура,Количество");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.Комплектующие);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Комплектующие" Тогда
			СтраницаПанели.Заголовок = "Комплектующие (" + ДокументОбъект.Комплектующие.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ОбработкаПодбора(Комплектующие, ЗначениеВыбора);
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
// Обработчик уставливается динамически методом "Действие"
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры[Кнопка.Имя];
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость/доступность реквизитов по виду операции.
	УстановитьВидимость();
	УстановитьДоступность();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Комплектующие", вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельКомплектующиеЗаполнить(Кнопка)

	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Предупреждение("Не указана номенклатура комплекта! Заполнение невозможно.");
		Возврат;
	ИначеЕсли Количество = 0 Тогда
		Предупреждение("Количество "+СокрЛП(Номенклатура)+" равно нулю! Заполнение невозможно.");
		Возврат;
	КонецЕсли;

	ЗаполнитьКомплектующие();

КонецПроцедуры // КоманднаяПанельТоварыЗаполнить()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Комплектующие", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Комплектующие".
//
Процедура КоманднаяПанельКомплектующиеДействиеПодбор(Кнопка)

	ДействиеПодбор();

КонецПроцедуры // КоманднаяПанельКомплектующиеДействиеПодбор()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
    мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Ложь, Организация);
	
	Если НачалоМесяца(мТекущаяДатаДокумента) <> НачалоМесяца(Дата) Тогда
		ОпределитьСложныйУчетНДС();
		УстановитьВидимость();
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Ложь, Организация);
	ОпределитьСложныйУчетНДС();
	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры.
//
Процедура НоменклатураПриИзменении(Элемент)

	ЗаполнитьСчетаУчетаВШапке(Номенклатура, Истина);

КонецПроцедуры // НоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количество комплектов.
//
Процедура КоличествоПриИзменении(Элемент)

	Если Количество <> 0 Тогда
		//ТекстВопроса = "Заполнить табличную часть комплектующих?";
		//Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		//Если Ответ = КодВозвратаДиалога.Да Тогда
		//	ЗаполнитьКомплектующие();
		//КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // КоличествоПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля СкладКомпании.
//
Процедура СкладКомпанииНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладКомпанииНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода НДСвСтоимостиТоваров.
//
Процедура НДСвСтоимостиТоваровПриИзменении(Элемент)
	
	Если НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость Тогда
		ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию(Истина);
	КонецЕслИ;
	
	УстановитьВидимость();
	
КонецПроцедуры // НДСвСтоимостиТоваровПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетСписанияНДС
//
Процедура СчетСписанияНДСПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СчетСписанияНДСПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетСписанияНДС
//
Процедура СчетСписанияНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СчетСписанияНДСОбработкаВыбора()

// {ОбособленныеПодразделения

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()

// }ОбособленныеПодразделения

Процедура СкладКомпанииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// {ОбособленныеПодразделения
	ПодразделениеОрганизации = УправлениеПодразделениями.ПолучитьПодразделение(Организация, Склад);
	// }ОбособленныеПодразделения
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ КОМПЛЕКТУЮЩИЕ

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Комплектующие".
//
Процедура КомплектующиеНоменклатураПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Комплектующие.ТекущиеДанные;

	ПриИзмененииНоменклатурыТоваров(СтрокаТЧ);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, Истина);

КонецПроцедуры // КомплектующиеНоменклатураПриИзменении()

Процедура ТоварыДокументОприходованияНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	Строка = ЭлементыФормы.Комплектующие.ТекущиеДанные;
	
	СтандартнаяОбработка    = Ложь;
	ФормаВыбора             = Документы.Партия.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.Организация = Организация;
	
	ФормаВыбора.Счет         = Строка.СчетУчета;
	ФормаВыбора.Номенклатура = Строка.Номенклатура;
	ФормаВыбора.Склад        = Склад;
	ФормаВыбора.ВидСубконто  = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	Если ЭтоНовый() Тогда
		ФормаВыбора.КонПериода         = КонецДня(РабочаяДата);
	Иначе
		ФормаВыбора.КонПериода         = Дата;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ТоварыДокументОприходованияПриИзменении(Элемент)
	Строка = ЭлементыФормы.Комплектующие.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(Строка.ДокументОприходования) Тогда
		Строка.Себестоимость = 0;
	КонецЕсли;
КонецПроцедуры

Процедура КомплектующиеСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

Процедура КомплектующиеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	// Если заполнен документ партии, то себестоимость будет браться из него.
	// Поэтому если колонка видна, будем выводить в нее текст.
	Если ЭлементыФормы.Комплектующие.Колонки.ДокументОприходования.Видимость
	   И НЕ ЗначениеЗаполнено(ДанныеСтроки.ДокументОприходования) Тогда

		ОформлениеСтроки.Ячейки.ДокументОприходования.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ДокументОприходования.Текст           = "<Авто>";
		ОформлениеСтроки.Ячейки.Себестоимость.ТолькоПросмотр  = Истина;

	КонецЕсли;
	
	Если ЭлементыФормы.Комплектующие.Колонки.Себестоимость.Видимость
	   И НЕ ЗначениеЗаполнено(ДанныеСтроки.Себестоимость) Тогда

		ОформлениеСтроки.Ячейки.Себестоимость.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Себестоимость.Текст           = "<Авто>";

	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Комплектующие.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиКомплектующие = ЭлементыФормы.Комплектующие.Колонки;
