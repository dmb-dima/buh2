////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

Перем мОрганизацияЭтоЮрЛицо;
Перем мСписокВыбораОКАТОиКПП;

Перем мСписокАвторскихВознаграждений; // Хранит авторские вознаграждения
Перем мСоответствиеДоходовИВычетов; // Хранит для кода дохода соответствующие ему коды вычетов
Перем мСписокВыбораСтандартныхВычетов;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ВидимостьПолейСправки()
	
	ЭлементыФормы.ДолжностьПодписавшегоЛица.ТолькоПросмотр = Не мОрганизацияЭтоЮрЛицо;
	
	СправкиПоНДФЛ.НастроитьПолеВводаОКАТО(ЭлементыФормы.КодПоОКАТО, Организация, мСписокВыбораОКАТОиКПП);
	
КонецПроцедуры

Процедура ОписатьДоходыОрганизации()
	
	СтавкаУчета = Неопределено;
	Если Ставка = Перечисления.НДФЛСтавки.Ставка13 Или Ставка = Перечисления.НДФЛСтавки.Ставка30 Тогда
		СтавкаУчета = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка09 Или Ставка = Перечисления.НДФЛСтавки.Ставка15 Тогда
		СтавкаУчета = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка35 Тогда
		СтавкаУчета = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35
	КонецЕсли;
	
	ЭлементыФормы.ИнфоНадпись.Заголовок = СправкиПоНДФЛ.ОписаниеДоходовПоКодам(Организация, мГоловнаяОрганизация, мОрганизацияЭтоЮрЛицо, НалоговыйПериод, КонецДня(Дата) + 1, Сотрудник, СтавкаУчета)

КонецПроцедуры

Процедура ПерезаполнитьСправку(Режим = "Все")

	Если Режим = "Все" Или Режим = "ДанныеСотрудника" Тогда
		СправкиПоНДФЛ.ПрочитатьДанныеСотрудника(ЭтотОбъект, Дата, НалоговыйПериод);
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			АдресРФВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресРФ);
			АдресЗарубежомВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресЗарубежом);
		Иначе 	
			АдресРФВФорме = "";
			АдресЗарубежомВФорме = "";
		КонецЕсли;
	КонецЕсли;	

	Если Режим = "Все" Или Режим = "ДанныеОДоходах" Тогда
		СведенияОДоходах.Очистить();
		СведенияОВычетах.Очистить();
		СправкиПоНДФЛ.ПрочитатьДанныеСправки(ЭтотОбъект, СведенияОДоходах, СведенияОВычетах, НалоговыйПериод, Организация, мГоловнаяОрганизация, ?(СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизлица.ФизлицуВРазрезеКодовОКАТО, ОКАТО_КПП, Неопределено), КонецДня(Дата) + 1)
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.СведенияОДоходах,ЭлементыФормы.ДействияФормы);
	СоответствиеТЧ.Вставить(ЭлементыФормы.СведенияОВычетах,ЭлементыФормы.ДействияФормы);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует структуру параметров для ввода по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//	Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровПодбораПоСтроке(ИмяЭУ)

	Если ИмяЭУ = "КодДохода" Тогда
		СтруктураПараметров = Новый Структура("НеОтражаетсяВОтчетности2010", Ложь);
	КонецЕсли;

	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьРеквизитыЗначениямиПоУмолчанию();
	Иначе
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	Если мОрганизацияЭтоЮрЛицо = Неопределено Тогда
		мОрганизацияЭтоЮрЛицо = ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(Организация);
	КонецЕсли;
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	ВидимостьПолейСправки();
	ОписатьДоходыОрганизации();
	Если Не ЗначениеЗаполнено(ОКАТО_КПП) И ЭтоНовый() И мСписокВыбораОКАТОиКПП.Количество() > 0 Тогда
		ОКАТО_КПП = мСписокВыбораОКАТОиКПП[0].Значение
	КонецЕсли;
	
	АдресРФВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресРФ);
	АдресЗарубежомВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресЗарубежом);
	ЭлементыФормы.АдресЗарубежомВФорме.ТолькоПросмотр = ТолькоПросмотр Или СтатусНалогоплательщика <> Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент;
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.СведенияОДоходах;
	КонецЕсли;

	мСписокВыбораСтандартныхВычетов = СправкиПоНДФЛ.СписокСтандартныхВычетов();
	мСоответствиеДоходовИВычетов = СправкиПоНДФЛ.СоответствиеДоходовИВычетов(НалоговыйПериод);
		
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ И КНОПОК

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры


Процедура КнопкаОбновитьДанныеОДоходахНажатие(Элемент)
	ПерезаполнитьСправку("ДанныеОДоходах")	
КонецПроцедуры

Процедура КнопкаОбновитьДанныеСотрудникаНажатие(Элемент)
	ПерезаполнитьСправку("ДанныеСотрудника")	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ВВОДА И ПЕРЕКЛЮЧАТЕЛЕЙ

Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;
	ОписатьДоходыОрганизации();
	Если ЗначениеЗаполнено(Сотрудник) И ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(НалоговыйПериод) И ЗначениеЗаполнено(Ставка) Тогда
		ПерезаполнитьСправку()
	КонецЕсли;

КонецПроцедуры // ДатаПриИзменении

Процедура ОрганизацияПриИзменении(Элемент)

	мОрганизацияЭтоЮрЛицо = ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(Организация);
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	ВидимостьПолейСправки();
	Если ЭлементыФормы.ДолжностьПодписавшегоЛица.ТолькоПросмотр Тогда
		ДолжностьПодписавшегоЛица = ""
	КонецЕсли;
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
    Если ЗначениеЗаполнено(Организация) Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СправкиПоНДФЛ.ДанныеПодписывающихЛиц(Организация, Дата));
		Если мСписокВыбораОКАТОиКПП.Количество() > 0 Тогда
			ОКАТО_КПП = мСписокВыбораОКАТОиКПП[0].Значение
		Иначе
			ОКАТО_КПП = СправкиПоНДФЛ.СуммаОКАТОиКПП("","")
		КонецЕсли;
		ОписатьДоходыОрганизации();	
		Если ЗначениеЗаполнено(Сотрудник) И ЗначениеЗаполнено(НалоговыйПериод) И ЗначениеЗаполнено(Ставка) Тогда
			ПерезаполнитьСправку("ДанныеОДоходах")
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

Процедура НалоговыйПериодПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Сотрудник) И ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Ставка) Тогда
		ПерезаполнитьСправку("ДанныеОДоходах")
	КонецЕсли;
	ОписатьДоходыОрганизации()
КонецПроцедуры

Процедура СотрудникПриИзменении(Элемент)
	ПерезаполнитьСправку();
	ОписатьДоходыОрганизации();
	АдресРФВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресРФ);
	АдресЗарубежомВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресЗарубежом);
КонецПроцедуры

Процедура ПереключательФизлицуСводноПриИзменении(Элемент)
	ПерезаполнитьСправку("ДанныеОДоходах")	
КонецПроцедуры

Процедура СтавкаПриИзменении(Элемент)
	Если СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизлица.ФизлицуВРазрезеКодовОКАТО И ЗначениеЗаполнено(Сотрудник) И ЗначениеЗаполнено(НалоговыйПериод) И ЗначениеЗаполнено(Организация) Тогда
		ПерезаполнитьСправку("ДанныеОДоходах")
	КонецЕсли;
КонецПроцедуры

Процедура КодПоОКАТОНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлементСписка = ВыбратьИзСписка(мСписокВыбораОКАТОиКПП,Элемент,мСписокВыбораОКАТОиКПП.НайтиПоЗначению(ОКАТО_КПП));
	Если ЭлементСписка <> Неопределено Тогда
		ОКАТО_КПП = ЭлементСписка.Значение;
		Если СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизлица.ФизлицуВРазрезеКодовОКАТО И ЗначениеЗаполнено(Сотрудник) И ЗначениеЗаполнено(НалоговыйПериод) И ЗначениеЗаполнено(Организация) Тогда
			ПерезаполнитьСправку("ДанныеОДоходах")	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СтатусНалогоплательщикаПриИзменении(Элемент)
	ЭлементыФормы.АдресЗарубежомВФорме.ТолькоПросмотр = ТолькоПросмотр Или Элемент.Значение <> Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент
КонецПроцедуры

Процедура АдресРФВФормеНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтруктураАдреса = Новый Структура("Значение", АдресРФ);
	УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(СтруктураАдреса, ЭтаФорма, "ФормаРедактированияАдреса");
	АдресРФ = СтруктураАдреса.Значение;
	АдресРФВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтруктураАдреса.Значение);
КонецПроцедуры

Процедура АдресЗарубежомВФормеНачалоВыбора(Элемент, СтандартнаяОбработка)
	ОбработкаРедактированияАдреса = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактированияАдреса.мВозвратСтруктуры = Истина;	
	ОбработкаРедактированияАдреса.Вид = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица;
	
	СтрАдрес = АдресЗарубежом;
	СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(СтрАдрес);
	УправлениеКонтактнойИнформацией.ЗаполнитьОбъектРедактированияАдресаПоСтруктуре(ОбработкаРедактированияАдреса, СтруктураАдреса);
	
	ФормаРедактированияАдреса = ОбработкаРедактированияАдреса.ПолучитьФорму("ФормаЗаписиАдреса", ЭтаФорма, "ФормаРедактированияИноАдреса");
	// установим размеры формы для редактирования
	ФормаРедактированияАдреса.ЭлементыФормы.ПанельРеглОтчетности.Свертка = РежимСверткиЭлементаУправления.Верх;
	ФормаРедактированияАдреса.ЭлементыФормы.ПанельОбъектаИВида.Свертка = РежимСверткиЭлементаУправления.Верх;
	ФормаРедактированияАдреса.ЭлементыФормы.ПанельВыбораТипаАдреса.Свертка = РежимСверткиЭлементаУправления.Верх;
	ФормаРедактированияАдреса.ЭлементыФормы.ПанельКомментарий.Свертка = РежимСверткиЭлементаУправления.Низ;
	ФормаРедактированияАдреса.Высота = 410;

	
	РезультатРедактирования = ФормаРедактированияАдреса.ОткрытьМодально();
	
	Если РезультатРедактирования = Истина Тогда
		СтрАдрес = УправлениеКонтактнойИнформацией.ПолучитьПолныйАдрес(ОбработкаРедактированияАдреса);
		АдресЗарубежом = СтрАдрес;
		АдресЗарубежомВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтрАдрес);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ
 
Процедура СведенияОДоходахПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	Если НоваяСтрока И Не Копирование Тогда
        ТекущаяСтрока.Месяц = 1;
	КонецЕсли;
КонецПроцедуры

Процедура СведенияОДоходахПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ПересчитатьОбщиеСуммы();
	КонецЕсли;
КонецПроцедуры

Процедура СведенияОДоходахКодДоходаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.СведенияОДоходах.ТекущиеДанные;

	// для кода по умолчанию вычет проставлять не будем
	Если Элемент.Значение = Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию и НЕ ЗначениеЗаполнено(ТекущиеДанные.КодВычета) Тогда
		Возврат
	КонецЕсли;
	
	// Контролируем допустимость кода вычета
	СписокКодовВычетов = СправкиПоНДФЛ.СписокВычетовДляДохода(Элемент.Значение, мСоответствиеДоходовИВычетов, мСписокАвторскихВознаграждений, СтатусНалогоплательщика);

	Если СписокКодовВычетов.Количество() = 1 Тогда
		// Если доступен только один код вычета, то возьмём его
		ТекущиеДанные.КодВычета = СписокКодовВычетов[0].Значение;	
	Иначе
		Если СписокКодовВычетов.НайтиПоЗначению(ТекущиеДанные.КодВычета) = Неопределено Тогда
			// Если ранее установленный код вычета не доступен, то очистим его
			ТекущиеДанные.КодВычета = Неопределено;
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

Процедура СведенияОДоходахКодДоходаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.ДоходыНДФЛ.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.Отбор.НеОтражаетсяВОтчетности2010.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбора.Отбор.НеОтражаетсяВОтчетности2010.Значение		= Ложь;
	ФормаВыбора.Отбор.НеОтражаетсяВОтчетности2010.Использование	= Истина;
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
КонецПроцедуры

Процедура СведенияОДоходахКодДоходаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("КодДохода"), Тип("СправочникСсылка.ДоходыНДФЛ"));
КонецПроцедуры

Процедура СведенияОДоходахКодДоходаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("КодДохода"), ЭтаФорма, Тип("СправочникСсылка.ДоходыНДФЛ"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

Процедура СведенияОДоходахКодВычетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокОтбора = СправкиПоНДФЛ.СписокВычетовДляДохода(ЭлементыФормы.СведенияОДоходах.ТекущаяСтрока.КодДохода, мСоответствиеДоходовИВычетов, мСписокАвторскихВознаграждений, СтатусНалогоплательщика);
	Если СписокОтбора.Количество() > 0 Тогда
		ФормаВыбора = Справочники.ВычетыНДФЛ.ПолучитьФормуВыбора(, Элемент);
		ФормаВыбора.Отбор.Ссылка.ВидСравнения	= ВидСравнения.ВСписке;
		ФормаВыбора.Отбор.Ссылка.Значение		= СписокОтбора;
		ФормаВыбора.Отбор.Ссылка.Использование	= Истина;
		ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
		ФормаВыбора.Открыть();
	Иначе	
		ЭлементСписка = ВыбратьИзСписка(СписокОтбора,Элемент,СписокОтбора.НайтиПоЗначению(Элемент.Значение));
		Если ЭлементСписка <> Неопределено Тогда
			Элемент.Значение = ЭлементСписка.Значение
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СведенияОДоходахКодВычетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Ссылка", СправкиПоНДФЛ.СписокВычетовДляДохода(ЭлементыФормы.СведенияОДоходах.ТекущаяСтрока.КодДохода, мСоответствиеДоходовИВычетов, мСписокАвторскихВознаграждений, СтатусНалогоплательщика)), Тип("СправочникСсылка.ВычетыНДФЛ"));
КонецПроцедуры

Процедура СведенияОДоходахКодВычетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Ссылка",СправкиПоНДФЛ.СписокВычетовДляДохода(ЭлементыФормы.СведенияОДоходах.ТекущаяСтрока.КодДохода, мСоответствиеДоходовИВычетов, мСписокАвторскихВознаграждений, СтатусНалогоплательщика)), ЭтаФорма, Тип("СправочникСсылка.ВычетыНДФЛ"), Ложь, Ложь, Неопределено, Ложь);
КонецПроцедуры

Процедура СведенияОВычетахКодВычетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.ВычетыНДФЛ.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.Отбор.Ссылка.ВидСравнения	= ВидСравнения.ВСписке;
	ФормаВыбора.Отбор.Ссылка.Значение		= мСписокВыбораСтандартныхВычетов;
	ФормаВыбора.Отбор.Ссылка.Использование	= Истина;
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
КонецПроцедуры

Процедура СведенияОВычетахКодВычетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Ссылка",мСписокВыбораСтандартныхВычетов), Тип("СправочникСсылка.ВычетыНДФЛ"));
КонецПроцедуры

Процедура СведенияОВычетахКодВычетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Ссылка",мСписокВыбораСтандартныхВычетов), ЭтаФорма, Тип("СправочникСсылка.ВычетыНДФЛ"), Ложь, Ложь, Неопределено, Ложь);
КонецПроцедуры

Процедура СведенияОВычетахСуммаВычетаПриИзменении(Элемент)
	ПересчитатьОбщиеСуммы()
КонецПроцедуры

Процедура СведенияОДоходахПослеУдаления(Элемент)
	ПересчитатьОбщиеСуммы()
КонецПроцедуры

Процедура СведенияОВычетахПослеУдаления(Элемент)
	ПересчитатьОбщиеСуммы()
КонецПроцедуры


Процедура ПересчитатьОбщиеСуммы()
	
	ОбщаяСуммаДохода = СведенияОДоходах.Итог("СуммаДохода");
	ОблагаемаяСуммаДохода = СведенияОДоходах.Итог("СуммаДохода") - СведенияОДоходах.Итог("СуммаВычета") - СведенияОВычетах.Итог("СуммаВычета");	
КонецПроцедуры

Процедура СведенияОВычетахПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ПересчитатьОбщиеСуммы();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ФОРМЫ

// Все виды авторских 2201-2209
мСписокАвторскихВознаграждений = Новый Массив;
мСписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2201);
мСписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2202);
мСписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2203);
мСписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2204);
мСписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2205);
мСписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2206);
мСписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2207);
мСписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2208);
мСписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2209);

