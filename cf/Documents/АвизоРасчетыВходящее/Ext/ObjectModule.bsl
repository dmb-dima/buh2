Перем мВалютаРегламентированногоУчета Экспорт;

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	ТабДокумент = Новый ТабличныйДокумент;
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ЗаполнитьПоОснованию(Основание) Экспорт

		// Шапка
		
		Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
		
		ДокументОснование = Основание;
		
		ДатаВходящегоДокумента  = Основание.Дата;
		НомерВходящегоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
		
		Организация = Основание.ОрганизацияПолучатель;
		ОрганизацияОтправитель = Основание.Организация;
		АвизоПоРасчетамВВалюте = Основание.АвизоПоРасчетамВВалюте;
		ВалютаДокумента = Основание.ВалютаДокумента;
		СчетРасчетов = Основание.СчетРасчетов;
		
		ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
		ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделениеОрганизации");
		Ответственный            = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
		
		// Табличная часть
		Для каждого СтрокаОснования Из Основание.СуммыДолга Цикл
		
			НоваяСтрока = СуммыДолга.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОснования, 
				"ВидЗадолженности, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетУчетаРасчетовСКонтрагентом, "
				+ "СуммаВзаиморасчетов, Сумма, СуммаНУ, СуммаПР");
		
		КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента)

	ТаблицаРасчетов = РезультатЗапросаПоСуммамДолга.Выгрузить();
	
	Возврат ТаблицаРасчетов;

КонецФункции // ПодготовитьТаблицуСуммДолга()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)

	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, ОрганизацияОтправитель, СчетРасчетов");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "СуммыДолга".
//
// Параметры:
// Параметры: 
//  ТаблицаПоСуммамДолга    - таблица значений, содержащая данные для проведения и проверки ТЧ СуммыДолга
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "СуммыДолга";

	СтруктураОбязательныхПолей = Новый Структура("Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетУчетаРасчетовСКонтрагентом, СуммаВзаиморасчетов");

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна соответствовать организации, указанной в договорах взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
	// Договор должен соответствовать контрагенту
	Для каждого СтрокаДолга Из СуммыДолга Цикл
	
		Если ЗначениеЗаполнено(СтрокаДолга.ДоговорКонтрагента) 
			И СтрокаДолга.ДоговорКонтрагента.Владелец  <> СтрокаДолга.Контрагент Тогда
			
			СтрокаНачалаСообщенияОбОшибке = "Строка номер " + СокрЛП(СтрокаДолга.НомерСтроки) + " табличной части ""Суммы долга"": ";
			СтрокаСообщения = "выбран договор другого контрагента.";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСуммыДолга()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоСуммамДолга          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)

	Если ТаблицаПоСуммамДолга.Количество() = 0 Тогда
		 Возврат;
	КонецЕсли;  
	
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)
	
	СодержаниеПроводки = "Прием задолженности по авизо";
	
	Для каждого СтрокаДолга Из ТаблицаПоСуммамДолга Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Организация = Организация;
		Проводка.Период = Дата;
		Проводка.Содержание = СодержаниеПроводки;
		
		Проводка.Сумма = СтрокаДолга.Сумма;
		
		Если СтрокаДолга.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
		
			Проводка.СчетДт = СчетРасчетов;
			Проводка.СубконтоДт.ОбособленныеПодразделения = ОрганизацияОтправитель;
			
			Проводка.СчетКт = СтрокаДолга.СчетУчетаРасчетовСКонтрагентом;
			Проводка.СубконтоКт.Контрагенты = СтрокаДолга.Контрагент;
			Проводка.СубконтоКт.Договоры    = СтрокаДолга.ДоговорКонтрагента;
			Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = Ссылка;
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, ПодразделениеОрганизации, "Кт");
			
			Если СтрокаДолга.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаКт = ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаДолга.СуммаВзаиморасчетов;
			КонецЕсли;
		
		Иначе
		
			Проводка.СчетДт = СтрокаДолга.СчетУчетаРасчетовСКонтрагентом;
			Проводка.СубконтоДт.Контрагенты = СтрокаДолга.Контрагент;
			Проводка.СубконтоДт.Договоры    = СтрокаДолга.ДоговорКонтрагента;
			Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Ссылка;
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, ПодразделениеОрганизации, "Дт");
			
			Если СтрокаДолга.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаДт = ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтрокаДолга.СуммаВзаиморасчетов;
			КонецЕсли;
		
			Проводка.СчетКт = СчетРасчетов;
			Проводка.СубконтоКт.ОбособленныеПодразделения = ОрганизацияОтправитель;
			
		КонецЕсли;
		
		Если СтрокаДолга.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда 
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаДолга.СуммаНУ,СтрокаДолга.СуммаНУ,СтрокаДолга.СуммаПР,СтрокаДолга.СуммаПР,,,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
		Иначе
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаДолга.Сумма,СтрокаДолга.Сумма,,,,,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
		КонецЕсли;
	
	КонецЦикла;
		
	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)   
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СуммыДолга.ВидЗадолженности,
	|	СуммыДолга.СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&СуммыДолга КАК СуммыДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаДокумента.СуммаВзаиморасчетов) КАК СуммаДокументаДт,
	|	СУММА(0) КАК СуммаДокументаКт
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Дебиторская)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(0),
	|	СУММА(ТаблицаДокумента.СуммаВзаиморасчетов)
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Кредиторская)");
	
	Запрос.УстановитьПараметр("СуммыДолга", СуммыДолга);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	СуммаДокументаДт = ТаблицаРезультата.Итог("СуммаДокументаДт");
	СуммаДокументаКт = ТаблицаРезультата.Итог("СуммаДокументаКт");

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	//Занесем в структуру шапки дополнительный параметр для проведения 
	СтруктураШапкиДокумента.Вставить("ЭтоВозврат",Ложь);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(Ложь, Отказ, Заголовок, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ВидЗадолженности"                        , "ВидЗадолженности");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                      , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("Контрагент"                              , "Контрагент");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"                    , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("РасчетыВУсловныхЕдиницах"                , "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах");
	СтруктураПолей.Вставить("ДоговорОрганизация"                      , "ДоговорКонтрагента.Организация");
	
	СтруктураПолей.Вставить("ДокументРасчетов"                		  , "ДокументРасчетов");
	СтруктураПолей.Вставить("ВидДоговора"                             , "ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("Сумма"              					  , "Сумма");
	СтруктураПолей.Вставить("СуммаНУ"              					  , "СуммаНУ");
	СтруктураПолей.Вставить("СуммаПР"              					  , "СуммаПР");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"              		  , "СуммаВзаиморасчетов");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"                      , "КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов"                 , "КратностьВзаиморасчетов");
 	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом"          , "СчетУчетаРасчетовСКонтрагентом");
 	СтруктураПолей.Вставить("СчетУчетаРасчетовПоАвансам"              , "СчетУчетаРасчетовПоАвансам");
	
	РезультатЗапросаПоСуммамДолга = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СуммыДолга", СтруктураПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоСуммамДолга = ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);

	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, ложь, ложь);

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АвизоРасчетыИсходящее") Тогда
		
		ЗаполнитьПоОснованию(Основание);
		
	КонецЕсли;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

