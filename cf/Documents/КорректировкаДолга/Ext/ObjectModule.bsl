Перем мВалютаРегламентированногоУчета Экспорт;

Перем НомераСубконтоРДпоСчету;

Перем РасчетыВВалюте2008;
Перем СчетаРасчетовСПоставщиками;
Перем СчетаРасчетовСПокупателями;				

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАктаВзаимозачета()

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	КорректировкаДолга.Номер,
	|	КорректировкаДолга.Дата,
	|	КорректировкаДолга.КонтрагентДебитор КАК Дебитор,
	|	КорректировкаДолга.КонтрагентКредитор КАК Кредитор,
	|	КорректировкаДолга.Организация,
	|	КорректировкаДолга.ВалютаДокумента
	|ИЗ
	|	Документ.КорректировкаДолга КАК КорректировкаДолга
	|ГДЕ
	|	КорректировкаДолга.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();
	

	ЗапросДолги = Новый Запрос;
	ЗапросДолги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросДолги.УстановитьПараметр("ВидЗадолженностиДебиторка", Перечисления.ВидыЗадолженности.Дебиторская);
	ЗапросДолги.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаДолга.ДоговорКонтрагента,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА КорректировкаДолга.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДебиторки,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА КорректировкаДолга.СуммаВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВалютнаяСуммаДебиторки,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА 0
	|			ИНАЧЕ КорректировкаДолга.Сумма
	|		КОНЕЦ) КАК СуммаКредиторки,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА 0
	|			ИНАЧЕ КорректировкаДолга.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК ВалютнаяСуммаКредиторки
	|ИЗ
	|	Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолга
	|ГДЕ
	|	КорректировкаДолга.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаДолга.ДоговорКонтрагента";
						
	ТаблицаЗадолженностей = ЗапросДолги.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	Макет       = ПолучитьМакет("Взаимозачет");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Кредитор, Шапка.Дата);
	ПредставлениеКредитора   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
	
	СтрокаКредиторки = "1. Задолженность "+ПредставлениеОрганизации + " перед " + ПредставлениеКредитора + " составляет ";
	Если Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета или НЕ ЗначениеЗаполнено(Шапка.ВалютаДокумента) Тогда
		КолонкаСуммы        = "Сумма";
		ПредставлениеВалюты = строка(мВалютарегламентированногоУчета);
	Иначе	
		КолонкаСуммы        = "ВалютнаяСумма";
		ПредставлениеВалюты = строка(Шапка.ВалютаДокумента);
	КонецЕсли; 
	
	СтрокаШапки       = "Акт взаимозачета № " + ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка) + Символы.ПС+" от " + Формат(Шапка.Дата, "ДЛФ=DD"); 
	СтрокаКредиторки  = СтрокаКредиторки + Формат(ТаблицаЗадолженностей.Итог(КолонкаСуммы + "Кредиторки"), "ЧЦ=15; ЧДЦ=2; ЧН=Ноль") + " " + ПредставлениеВалюты + " по следующим договорам:";
	
	ОбластьМакета.Параметры.СтрокаШапки      = СтрокаШапки;
	ОбластьМакета.Параметры.СтрокаКредиторки = СтрокаКредиторки;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаКредиторки");
	Для каждого СтрокаЗадолженности Из ТаблицаЗадолженностей Цикл
		Если СтрокаЗадолженности[КолонкаСуммы + "Кредиторки"]=0 Тогда
			Продолжить;
		КонецЕсли; 
		ОбластьМакета.Параметры.СтрокаДокументовКред = сокрЛП(СтрокаЗадолженности.ДоговорКонтрагента) + " :"+ символы.Таб + Формат(СтрокаЗадолженности[КолонкаСуммы + "Кредиторки"], "ЧЦ=15; ЧДЦ=2; ЧН=Ноль") + " " + ПредставлениеВалюты;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	ОбластьМакета         = Макет.ПолучитьОбласть("ЗаголовокДебиторки");
	
	СведенияОКонтрагенте  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Дебитор, Шапка.Дата);
	ПредставлениеДебитора = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
	
	СтрокаДебиторки       = "2. Задолженность " + ПредставлениеДебитора + " перед " + ПредставлениеОрганизации + " составляет "
	                      + Формат(ТаблицаЗадолженностей.Итог(КолонкаСуммы + "Дебиторки"), "ЧЦ=15; ЧДЦ=2; ЧН=Ноль") + " " + ПредставлениеВалюты + " по следующим договорам:";
	
	ОбластьМакета.Параметры.СтрокаДебиторки = СтрокаДебиторки;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаДебиторки");
	Для каждого СтрокаЗадолженности Из ТаблицаЗадолженностей Цикл
		Если СтрокаЗадолженности[КолонкаСуммы + "Дебиторки"] = 0 Тогда
			Продолжить;
		КонецЕсли; 
		ОбластьМакета.Параметры.СтрокаДокументовДеб = сокрЛП(СтрокаЗадолженности.ДоговорКонтрагента) + " :" + символы.Таб + Формат(СтрокаЗадолженности[КолонкаСуммы + "Дебиторки"], "ЧЦ=15; ЧДЦ=2; ЧН=Ноль") + " " + ПредставлениеВалюты;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	ОбластьПодвала     = Макет.ПолучитьОбласть("Подвал");
	СтрокаВзаимозачета = "3. Взаимозачет производится на сумму "
	                   + Формат(ТаблицаЗадолженностей.Итог(КолонкаСуммы+"Дебиторки"), "ЧЦ=15; ЧДЦ=2; ЧН=Ноль") + " " + ПредставлениеВалюты;
	ОбластьПодвала.Параметры.СтрокаВзаимозачета       = СтрокаВзаимозачета;
	ОбластьПодвала.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
	ОбластьПодвала.Параметры.ПредставлениеКредитора   = ПредставлениеКредитора;
	ТабДокумент.Вывести(ОбластьПодвала);
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаДолга_Акт";
	
	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "КорректировкаДолга" Тогда		
		
		ТабДокумент = ПечатьАктаВзаимозачета();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КорректировкаДолга","Корректировка долга");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет документ остатками взаиморасчетов по контрагенту
//
Процедура ЗаполнитьОстаткамиВзаиморасчетов(ПоКонтрагенту, ВидЗадолженности) Экспорт

	СчетаРасчетов = Новый Массив();
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам);
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам);
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
	
	СчетаИсключаемые = Новый Массив();
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.ВекселяВыданные);
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.ВекселяПолученные);
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуЛичномуИДобровольномуСтрахованию);
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НаличиеНужныхСубконто.ЕстьДокументыРасчетов = 1
		|			ТОГДА Хозрасчетный.Ссылка
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СчетаПоДокументам,
		|	ВЫБОР
		|		КОГДА НаличиеНужныхСубконто.ЕстьДокументыРасчетов = 0
		|			ТОГДА Хозрасчетный.Ссылка
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СчетаБезДокументов,
		|	НаличиеНужныхСубконто.ЕстьДокументыРасчетов
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА ХозрасчетныйВидыСубконто.ВидСубконто = &ВидСубконтоКонтрагенты
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК ЕстьКонтрагенты,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА ХозрасчетныйВидыСубконто.ВидСубконто = &ВидСубконтоДоговоры
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК ЕстьДоговоры,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА ХозрасчетныйВидыСубконто.ВидСубконто = &ВидСубконтоДокументыРасчетов
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК ЕстьДокументыРасчетов
		|		ИЗ
		|			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ХозрасчетныйВидыСубконто.Ссылка) КАК НаличиеНужныхСубконто
		|		ПО Хозрасчетный.Ссылка = НаличиеНужныхСубконто.Ссылка
		|ГДЕ
		|	НаличиеНужныхСубконто.ЕстьКонтрагенты = 1
		|	И НаличиеНужныхСубконто.ЕстьДоговоры = 1
		|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
		|	И Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасчетов)
		|	И (НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаИсключаемые))";
	
	Запрос.УстановитьПараметр("СчетаРасчетов", СчетаРасчетов);
	Запрос.УстановитьПараметр("СчетаИсключаемые", СчетаИсключаемые);
	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("ВидСубконтоДоговоры", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидСубконтоДокументыРасчетов", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	СчетаУчетаРасчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	СчетаРасчетовБезАналитикиПоДокументам = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СчетаУчетаРасчетов.ВыгрузитьКолонку("СчетаБезДокументов"),Истина);
	СчетаРасчетовСАналитикойПоДокументам = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СчетаУчетаРасчетов.ВыгрузитьКолонку("СчетаПоДокументам"),Истина);

	Запрос = Новый Запрос;
	
	Запрос.Текст = "";
	
	Если не СчетаРасчетовБезАналитикиПоДокументам.Количество() = 0 Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
		|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетов,
		|	ХозрасчетныйОстатки.СуммаОстаток,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток,
		|	ХозрасчетныйОстатки.Субконто2.ВидДоговора КАК ВидДоговора,
		|	ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ХозрасчетныйОстатки.Субконто2.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&Период,
		|		Счет В (&СчетаРасчетовБезАналитикиПоДокументам),
		|		&ВидыСубконтоБезДокументов,
		|		Организация = &Организация
		|		    И Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВалютаДокумента В (&ВалютаРегУчета)
		|				ТОГДА ХозрасчетныйОстатки.Субконто2.РасчетыВУсловныхЕдиницах = ИСТИНА
		|						ИЛИ ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета)
		|			ИНАЧЕ (НЕ ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета))
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ХозрасчетныйОстатки.Субконто2.РасчетыВУсловныхЕдиницах = ИСТИНА
		|					ИЛИ ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета)
		|				ТОГДА ВЫБОР
		|						КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|							ТОГДА ХозрасчетныйОстатки.СуммаОстаток > 0
		|						ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток < 0
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|						ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток > 0
		|					ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстаток < 0
		|				КОНЕЦ
		|		КОНЕЦ"
	КонецЕсли;
	
	Если не СчетаРасчетовСАналитикойПоДокументам.Количество() = 0 Тогда
	
		Запрос.Текст = ?(ПустаяСтрока(Запрос.Текст),"",Запрос.Текст + Символы.ПС + "Объединить Все" +Символы.ПС)+
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
		|	ХозрасчетныйОстатки.Субконто3 КАК ДокументРасчетов,
		|	ХозрасчетныйОстатки.СуммаОстаток,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток,
		|	ХозрасчетныйОстатки.Субконто2.ВидДоговора КАК ВидДоговора,
		|	ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ХозрасчетныйОстатки.Субконто2.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&Период,
		|		Счет В (&СчетаРасчетовСАналитикойПоДокументам),
		|		&ВидыСубконтоСДокументами,
		|		Организация = &Организация
		|		    И Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВалютаДокумента В (&ВалютаРегУчета)
		|				ТОГДА ХозрасчетныйОстатки.Субконто2.РасчетыВУсловныхЕдиницах = ИСТИНА
		|						ИЛИ ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета)
		|			ИНАЧЕ (НЕ ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета))
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ХозрасчетныйОстатки.Субконто2.РасчетыВУсловныхЕдиницах = ИСТИНА
		|					ИЛИ ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета)
		|				ТОГДА ВЫБОР
		|						КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|							ТОГДА ХозрасчетныйОстатки.СуммаОстаток > 0
		|						ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток < 0
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|						ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток > 0
		|					ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстаток < 0
		|				КОНЕЦ
		|		КОНЕЦ";
	
	КонецЕсли;
	Если ЭтоНовый() Тогда
		Запрос.УстановитьПараметр("Период",НОвый МоментВремени(КонецДня(Дата), Ссылка));
	Иначе
		Запрос.УстановитьПараметр("Период",НОвый МоментВремени(Дата, Ссылка));		
	КонецЕсли;	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Контрагент", ПоКонтрагенту);
	Запрос.УстановитьПараметр("ВидЗадолженности",ВидЗадолженности);
	Запрос.УстановитьПараметр("ВидЗадолженностиДебиторская",Перечисления.ВидыЗадолженности.Дебиторская);
	Запрос.УстановитьПараметр("ВидЗадолженностиКредиторская",Перечисления.ВидыЗадолженности.Кредиторская);
	
	ВалютыРеглУчета = Новый СписокЗначений;
	ВалютыРеглУчета.Добавить(Константы.ВалютаРегламентированногоУчета.Получить());
	ВалютыРеглУчета.Добавить(Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВалютаРегУчета",ВалютыРеглУчета);
	Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
	
	Если ВалютыРеглУчета.НайтиПоЗначению(ВалютаДокумента) = неопределено Тогда
		//Документ в иностранной валюте. Установим отбор только по договорам в нужной валюте
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация","Организация = &Организация и Валюта = &ВалютаДокумента");
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("СчетаРасчетовБезАналитикиПоДокументам",СчетаРасчетовБезАналитикиПоДокументам);
	Запрос.УстановитьПараметр("СчетаРасчетовСАналитикойПоДокументам", СчетаРасчетовСАналитикойПоДокументам);
	
	ВидыСубконтоБезДокументов = Новый Массив();
	ВидыСубконтоБезДокументов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоБезДокументов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос.УстановитьПараметр("ВидыСубконтоБезДокументов",ВидыСубконтоБезДокументов);
	
	ВидыСубконтоСДокументами = Новый Массив();
	ВидыСубконтоСДокументами.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоСДокументами.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконтоСДокументами.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("ВидыСубконтоСДокументами", ВидыСубконтоСДокументами);
	
	ТекущийРезультат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Множитель = ?(ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,1,-1);
	Для каждого СтрокаОстатков Из ТекущийРезультат Цикл
	    НоваяСтрока = СуммыДолга.Добавить();
		НоваяСтрока.ВидЗадолженности = ВидЗадолженности;
		НоваяСтрока.ДоговорКонтрагента = СтрокаОстатков.Договор;
		НоваяСтрока.Сделка = СтрокаОстатков.ДокументРасчетов;
		НоваяСтрока.СчетУчетаРасчетов = СтрокаОстатков.Счет;
		Если ВалютыРеглУчета.НайтиПоЗначению(ВалютаДокумента) = неопределено Тогда
			НоваяСтрока.СуммаВзаиморасчетов = Множитель*СтрокаОстатков.ВалютнаяСуммаОстаток;
			
			НоваяСтрока.КурсВзаиморасчетов = КурсДокумента;
			НоваяСтрока.КратностьВзаиморасчетов = КратностьДокумента;
			
			Если СтрокаОстатков.РасчетыВУсловныхЕдиницах Тогда
			    НоваяСтрока.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяСтрока.СуммаВзаиморасчетов,
					ВалютаДокумента,мВалютаРегламентированногоУчета,
					НоваяСтрока.КурсВзаиморасчетов, 1, 
					НоваяСтрока.КратностьВзаиморасчетов, 1)
			Иначе
				НоваяСтрока.Сумма = Множитель*СтрокаОстатков.ВалютнаяСуммаОстаток;
			КонецЕсли; 
			
		Иначе	
			Если ВалютыРеглУчета.НайтиПоЗначению(СтрокаОстатков.ВалютаВзаиморасчетов) = Неопределено Тогда
				// Это расчеты в у.е.
				НоваяСтрока.СуммаВзаиморасчетов = Множитель*СтрокаОстатков.ВалютнаяСуммаОстаток;
				КурсИКратностьРасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаОстатков.ВалютаВзаиморасчетов, Дата);
				
				НоваяСтрока.КратностьВзаиморасчетов = КурсИКратностьРасчетов.Кратность;
				НоваяСтрока.КурсВзаиморасчетов = ?(Множитель*СтрокаОстатков.ВалютнаяСуммаОстаток=0,0,СтрокаОстатков.СуммаОстаток/СтрокаОстатков.ВалютнаяСуммаОстаток)/?(КурсИКратностьРасчетов.Кратность = 0,1,КурсИКратностьРасчетов.Кратность);
				
			Иначе
				НоваяСтрока.СуммаВзаиморасчетов = Множитель*СтрокаОстатков.СуммаОстаток;	
				НоваяСтрока.КурсВзаиморасчетов = 1;
				НоваяСтрока.КратностьВзаиморасчетов = 1;
			КонецЕсли; 
			НоваяСтрока.Сумма = Множитель*СтрокаОстатков.СуммаОстаток;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПолучитьСчетаРасчетовСПоставщикамиИПокупателями()

	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ 
	|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал))";
	
	СчетаРасчетовСПоставщиками = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ 
	|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал))";
	
	СчетаРасчетовСПокупателями = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецПроцедуры //СформироватьСчетаРасчетовСПоставщикамиИПокупателями()

Функция ОпределитьВозвратАванса(ВидДоговора, ВидЗадолженности, СчетУчета)

	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		ЭтоВозвратАванса = (ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская);
		
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		
		ЭтоВозвратАванса = (ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская);
		
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		Если ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			ЭтоСчетРасчетовСПоставщиком = СчетаРасчетовСПоставщиками.Найти(СчетУчета) <> Неопределено;
			ЭтоВозвратАванса = ЭтоСчетРасчетовСПоставщиком;
		Иначе
			ЭтоСчетРасчетовСПокупателем = СчетаРасчетовСПокупателями.Найти(СчетУчета) <> Неопределено;
			ЭтоВозвратАванса = ЭтоСчетРасчетовСПокупателем;
		КонецЕсли;
		
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		
		Если ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			ЭтоСчетРасчетовСПоставщиком = СчетаРасчетовСПоставщиками.Найти(СчетУчета) <> Неопределено;
			ЭтоВозвратАванса = ЭтоСчетРасчетовСПоставщиком;
		Иначе
			ЭтоСчетРасчетовСПокупателем = СчетаРасчетовСПокупателями.Найти(СчетУчета) <> Неопределено;
			ЭтоВозвратАванса = ЭтоСчетРасчетовСПокупателем;
		КонецЕсли;
		
	Иначе
		
		ЭтоВозвратАванса = Ложь;
		
	КонецЕсли;
	
	Возврат ЭтоВозвратАванса;

КонецФункции //ОпределитьВозвратАванса()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента)

	ТаблицаРасчетов = РезультатЗапросаПоСуммамДолга.Выгрузить();
	
	// Дополнение таблицы расчетов необходимыми полями
	
	ТаблицаРасчетов.Колонки.Вставить(1,"Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаРасчетов.Колонки.Добавить("ЭтоВозврат", Новый ОписаниеТипов("Булево"));
	// Заполняем контрагента по значению поля КонтрагентДебитор
	ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентДебитор,"Контрагент");
	ТаблицаРасчетов.Индексы.Добавить("ВидЗадолженности");
	СтрокиКредиторки = ТаблицаРасчетов.найтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		// Контрагент для кредиторской задолженности устанавливается из другого поля
		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
			СтрокаКредиторки.Контрагент = СтруктураШапкиДокумента.КонтрагентКредитор;
		КонецЦикла; 
		
		// Если не используется вспомогательный счет, в качестве субсчета устанавливаем счет 000 для последующей корректировки (объединения)
		// движений по кредиторской и дебиторской задолженностям.
		
		Если не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			ТаблицаРасчетов.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.Вспомогательный,"КоррСчет");
			ТаблицаРасчетов.ЗаполнитьЗначения(Неопределено, "КоррСубконто1, КоррСубконто2, КоррСубконто3");
		КонецЕсли; 
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		
		// Очистим корр. счет и аналитику (далее заполняться счет и аналитика будут отдельным алгоритмом)
		ТаблицаРасчетов.ЗаполнитьЗначения(Неопределено,"КоррСчет,КоррСубконто1, КоррСубконто2, КоррСубконто3");
		
	ИначеЕсли  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		// Счет и аналитику списания для кредиторской задолженности устанавливается из другого поля
		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
			СтрокаКредиторки.КоррСчет = СтруктураШапкиДокумента.СчетКт;
			СтрокаКредиторки.КоррСубконто1 = СтруктураШапкиДокумента.СубконтоКт1;
			СтрокаКредиторки.КоррСубконто2 = СтруктураШапкиДокумента.СубконтоКт2;
			СтрокаКредиторки.КоррСубконто3 = СтруктураШапкиДокумента.СубконтоКт3;
		КонецЦикла; 
	КонецЕсли;
	
	// Определим вид погашения задолженности - возврат предоплаты или погашение долга
	
	Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
		
		СтрокаРасчетов.ЭтоВозврат = ОпределитьВозвратАванса(СтрокаРасчетов.ВидДоговора, СтрокаРасчетов.ВидЗадолженности, СтрокаРасчетов.СчетАванса);
		
	КонецЦикла;
	
	ТаблицаРасчетов.Колонки.Добавить("СуммаБУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
		ТаблицаРасчетов.ЗагрузитьКолонку(ТаблицаРасчетов.ВыгрузитьКолонку("Сумма"), "СуммаБУ");
	Иначе
		Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
			Если СтрокаРасчетов.РасчетыВУсловныхЕдиницах Тогда
				СтрокаРасчетов.СуммаБУ = СтрокаРасчетов.Сумма;
			Иначе
				СтрокаРасчетов.СуммаБУ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.СуммаВзаиморасчетов,
					СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
					СтрокаРасчетов.КурсВзаиморасчетов, 1, 
					СтрокаРасчетов.КратностьВзаиморасчетов, 1);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	ТаблицаРасчетов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	// Распределение оплаты
	
	ТаблицаРасчетов.Колонки.Добавить("РаспределятьОплату", Новый ОписаниеТипов("Булево"));
	ТаблицаРасчетов.ЗаполнитьЗначения(Истина, "РаспределятьОплату");
	
	ТаблицаРасчетов.Колонки.Добавить("СпособПогашенияЗадолженности", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПогашенияЗадолженности"));
	Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
		Если ЗначениеЗаполнено(СтрокаРасчетов.ДокументРасчетов) Тогда
			СтрокаРасчетов.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу;
		Иначе
			СтрокаРасчетов.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаРасчетов;

КонецФункции // ПодготовитьТаблицуСуммДолга()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,ВалютаДокумента");
	
	Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор");
		СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор");
		Если СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			СтруктураОбязательныхПолей.Вставить("СчетДт", "Не указано значение вспомогательного счета для проведения взаимозачета");
		КонецЕсли; 
	Иначе
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор","Не заполнено значение контрагента для списания задолженности");
		ТаблицаПоСуммамДолга.Индексы.Добавить("ВидЗадолженности");
		Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			
			СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор","Не заполнено значение получателя для переноса задолженности");
			СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента","Не заполнено значение договора получателя для переноса задолженности");
			
			Если не ТаблицаПоСуммамДолга.Найти(Перечисления.ВидыЗадолженности.Дебиторская,"ВидЗадолженности") = Неопределено Тогда
				СтруктураОбязательныхПолей.Вставить("СчетДт","Не заполнено значение счета переноса дебиторской задолженности");
			КонецЕсли; 
			Если не ТаблицаПоСуммамДолга.Найти(Перечисления.ВидыЗадолженности.Кредиторская,"ВидЗадолженности") = Неопределено Тогда
				СтруктураОбязательныхПолей.Вставить("СчетКт","Не заполнено значение счета переноса кредиторской задолженности");
			КонецЕсли;
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
			Если не ТаблицаПоСуммамДолга.Найти(Перечисления.ВидыЗадолженности.Дебиторская,"ВидЗадолженности") = Неопределено Тогда
				СтруктураОбязательныхПолей.Вставить("СчетДт","Не заполнено значение счета списания дебиторской задолженности");
			КонецЕсли;
			
			Если не ТаблицаПоСуммамДолга.Найти(Перечисления.ВидыЗадолженности.Кредиторская,"ВидЗадолженности") = Неопределено Тогда
				СтруктураОбязательныхПолей.Вставить("СчетКт","Не заполнено значение счета списания кредиторской задолженности");
			КонецЕсли;
			
		КонецЕсли; 
	КонецЕсли; 
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "СуммыДолга".
//
// Параметры:
// Параметры: 
//  ТаблицаПоСуммамДолга    - таблица значений, содержащая данные для проведения и проверки ТЧ СуммыДолга
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "СуммыДолга";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетУчетаРасчетов");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоСуммамДолга, Отказ, Заголовок);

	
	// Если проведение взаимозачета - проверим на совпадение суммы дебиторской и кредиторской задолженности. 
	// Взаимозачет проводится только при полном совпадении сумм
	Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		ТабСумм         = ТаблицаПоСуммамДолга.Скопировать();
		
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета или СтруктураШапкиДокумента.ВалютаДокумента = Справочники.Валюты.ПустаяСсылка() Тогда
			ТабСумм.Свернуть("ВидЗадолженности","Сумма");
		Иначе
			ТабСумм.Свернуть("ВидЗадолженности","СуммаВзаиморасчетов");
			ТабСумм.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
		КонецЕсли; 
		
		СуммаДеб  = 0;
		СуммаКред = 0;
		
		Для каждого СтрокаСумм Из ТабСумм Цикл
			Если  СтрокаСумм.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
				СуммаДеб  = СтрокаСумм.Сумма;
			ИначеЕсли  СтрокаСумм.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
				СуммаКред = СтрокаСумм.Сумма;
			КонецЕсли; 
		КонецЦикла; 
		
		Разница = СуммаДеб - СуммаКред;
		
		Если не Разница =0  Тогда
			ТекстСообщения = "Не совпадают суммы дебиторской и кредиторской задолженности при проведении взаимозачета. Взаимозачет не может быть проведен.";
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Дебиторская задолженность: " + Формат(СуммаДеб, "ЧЦ=15; ЧДЦ=2; ЧН=0,00")+" " +Строка(СтруктураШапкиДокумента.ВалютаДокумента);
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Кредиторская задолженность: " + Формат(СуммаКред, "ЧЦ=15; ЧДЦ=2; ЧН=-")+" "+Строка(СтруктураШапкиДокумента.ВалютаДокумента);
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Разница: " + Формат(Разница, "ЧЦ=15;ЧДЦ=2")+Строка(СтруктураШапкиДокумента.ВалютаДокумента);
			
			ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСуммыДолга()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоСуммамДолга          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);

	Если ТаблицаПоСуммамДолга.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	 
	ТаблицыРаспределенияРасчетов = Новый Структура();
	
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, ТаблицыРаспределенияРасчетов, Отказ, Заголовок);
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицыРаспределенияРасчетов, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

//Функция для получения номера субконто "Расчетные документы" по счету учета
//
// Параметры
//  Счет         - счет по которому определяетс номер субконто "Документы расчетов с контрагентами"
// Возвращаемое значение:
//   Число   – номер субконто "Документы расчетов с контрагентами" на счете. Если субконто нет - возвращается 0.
//
Функция ПолучитьНомерСубконтоРД(Счет)
    Если НомераСубконтоРДпоСчету = Неопределено Тогда
	    НомераСубконтоРДпоСчету = Новый Соответствие();
	КонецЕсли; 
	
	НомерСубконтоРД = НомераСубконтоРДпоСчету[Счет];
	
	Если  НомерСубконтоРД = Неопределено Тогда
		НомерСубконтоРД = 0;
		
		// Определим начичие субконто "Документы расчетов с контрагентами" по счету учета.
		ВидыСубконто = Счет.ВидыСубконто;
		СтрокаСубконтоРД = ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто");
		Если не СтрокаСубконтоРД = Неопределено Тогда
			НомераСубконтоРДпоСчету.Вставить(Счет, СтрокаСубконтоРД.НомерСтроки);
			НомерСубконтоРД = СтрокаСубконтоРД.НомерСтроки;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат НомерСубконтоРД;

КонецФункции // ПолучитьНомерСубконтоРД()

Процедура ДвиженияПоРегистрамРегл( СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, ТаблицыРаспределенияРасчетов, Отказ, Заголовок)
	
	СодержаниеПроводки = "";
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		СодержаниеПроводки = "Взаимозачет";
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		СодержаниеПроводки = "Переуступка долга";
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		СодержаниеПроводки = "Списание задолженности";
	КонецЕсли; 
	
	ТаблицаПоСуммамДолга.Индексы.Добавить("ВидЗадолженности");
	
	ТаблицаДебиторскойЗадолженности = ТаблицаПоСуммамДолга.Скопировать(
		Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская));
	
	КоличествоПроводокПоДебиторке = 0;
	
	Если ТаблицаДебиторскойЗадолженности.Количество() > 0 Тогда
		
		// {УчетДоходовИРасходовИП
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
			ОплаченныеПартии = ТаблицаДебиторскойЗадолженности.Скопировать(, "ДокументРасчетов, СуммаБУ");
			ОплаченныеПартии.Свернуть("ДокументРасчетов", "СуммаБУ");
			СписаниеЗадолженностиПредпринимателю(СтруктураШапкиДокумента, ОплаченныеПартии);
		КонецЕсли;
		// }УчетДоходовИРасходовИП
		
		СтруктураШапкиДокумента.Вставить("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская);
		ТаблицаДебиторскойЗадолженности.Индексы.Добавить("ЭтоВозврат");
		
		СтруктураШапкиДокумента.Вставить("ЭтоВозврат", Истина);
		ТаблицаДебиторыВозврат = ТаблицаДебиторскойЗадолженности.Скопировать(Новый Структура("ЭтоВозврат", Истина));
		ТаблицаРаспределенияДебиторыВозврат = УправлениеВзаиморасчетами.ПогаситьЗадолженностьКонтрагентов(
			СтруктураШапкиДокумента, 
			ТаблицаДебиторыВозврат, 
			ЭтотОбъект, 
			Отказ, 
			Заголовок, 
			СодержаниеПроводки, 
			Истина);
	
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураШапкиДокумента.Вставить("ЭтоВозврат", Ложь);
		ТаблицаДебиторы = ТаблицаДебиторскойЗадолженности.Скопировать(Новый Структура("ЭтоВозврат", Ложь));
		ТаблицаРаспределенияДебиторы = УправлениеВзаиморасчетами.ПогаситьЗадолженностьКонтрагентов(
			СтруктураШапкиДокумента, 
			ТаблицаДебиторы, 
			ЭтотОбъект, 
			Отказ, 
			Заголовок, 
			СодержаниеПроводки, 
			Истина);
	
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 
			И НЕ СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			// Выгружаем набор движений для последующей корректировки
			НаборДвиженийДебиторка = Движения.Хозрасчетный.Выгрузить();
			КоличествоПроводокПоДебиторке = Движения.Хозрасчетный.Количество();
			Движения.Хозрасчетный.Очистить();
		КонецЕсли;
		
		ТаблицыРаспределенияРасчетов.Вставить("АвансПоставщику", ТаблицаРаспределенияДебиторыВозврат);
		ТаблицыРаспределенияРасчетов.Вставить("ДолгПокупателя", ТаблицаРаспределенияДебиторы);
	Иначе
		ТаблицыРаспределенияРасчетов.Вставить("АвансПоставщику", Новый ТаблицаЗначений());
		ТаблицыРаспределенияРасчетов.Вставить("ДолгПокупателя", Новый ТаблицаЗначений());
	КонецЕсли; 
	
	ТаблицаКредиторскойЗадолженности = ТаблицаПоСуммамДолга.Скопировать(
		Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));
	
	Если ТаблицаКредиторскойЗадолженности.Количество() > 0 Тогда
		
		СтруктураШапкиДокумента.Вставить("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская);
		ТаблицаКредиторскойЗадолженности.Индексы.Добавить("ЭтоВозврат");
		
		СтруктураШапкиДокумента.Вставить("ЭтоВозврат", Истина);
		ТаблицаКредиторыВозврат = ТаблицаКредиторскойЗадолженности.Скопировать(Новый Структура("ЭтоВозврат", Истина));
		ТаблицаРаспределенияКредиторыВозврат = УправлениеВзаиморасчетами.ПогаситьЗадолженностьКонтрагентов(
			СтруктураШапкиДокумента, 
			ТаблицаКредиторыВозврат, 
			ЭтотОбъект, 
			Отказ, 
			Заголовок, 
			СодержаниеПроводки, 
			Истина);
	
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураШапкиДокумента.Вставить("ЭтоВозврат", Ложь);
		ТаблицаКредиторы = ТаблицаКредиторскойЗадолженности.Скопировать(Новый Структура("ЭтоВозврат", Ложь));
		ТаблицаРаспределенияКредиторы = УправлениеВзаиморасчетами.ПогаситьЗадолженностьКонтрагентов(
			СтруктураШапкиДокумента, 
			ТаблицаКредиторы, 
			ЭтотОбъект, 
			Отказ, 
			Заголовок, 
			СодержаниеПроводки, 
			Истина);
	
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета
			И НЕ СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			// Выгружаем набор движении для последующей корректировки
			НаборДвиженийКредиторка = Движения.Хозрасчетный.Выгрузить();
			Движения.Хозрасчетный.Очистить();
		КонецЕсли;
		
		ТаблицыРаспределенияРасчетов.Вставить("АвансПокупателя", ТаблицаРаспределенияКредиторыВозврат);
		ТаблицыРаспределенияРасчетов.Вставить("ДолгПоставщику", ТаблицаРаспределенияКредиторы);
	Иначе
		ТаблицыРаспределенияРасчетов.Вставить("АвансПокупателя", Новый ТаблицаЗначений());
		ТаблицыРаспределенияРасчетов.Вставить("ДолгПоставщику", Новый ТаблицаЗначений());
	КонецЕсли; 
	
	// Перенос задолженности - заполняем в проводках счет и аналитику переноса долга
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		
		КонтрагентыСовпадают = (СтруктураШапкиДокумента.КонтрагентКредитор = СтруктураШапкиДокумента.КонтрагентДебитор);
		
		СчетДтВалютный = СтруктураШапкиДокумента.СчетДт.Валютный;
		СчетКтВалютный = СтруктураШапкиДокумента.СчетКт.Валютный;
		
		ЕстьДокРасчетовНаНовомСчетеДт = НЕ ПолучитьНомерСубконтоРД(СтруктураШапкиДокумента.СчетДт) = 0;
		ЕстьДокРасчетовНаНовомСчетеКт = НЕ ПолучитьНомерСубконтоРД(СтруктураШапкиДокумента.СчетКт) = 0;
		
		Для каждого Проводка Из Движения.Хозрасчетный Цикл
			
			Если НЕ ЗначениеЗаполнено(Проводка.СчетДт) 
				И НЕ Проводка.СчетКт.Забалансовый
				Тогда
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт, 
					Проводка.СубконтоДт, 
					"Контрагенты", 
					СтруктураШапкиДокумента.КонтрагентКредитор);
					
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт, 
					Проводка.СубконтоДт, 
					"Договоры",
					СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Если ЕстьДокРасчетовНаНовомСчетеДт Тогда
					
					Если КонтрагентыСовпадают Тогда
						ЕстьДокРасчетовНаСтаромСчете = НЕ ПолучитьНомерСубконтоРД(Проводка.СчетКт) = 0;
						Если ЕстьДокРасчетовНаСтаромСчете Тогда
							ДокРасчетов = Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами;
						Иначе
							ДокРасчетов = СтруктураШапкиДокумента.Ссылка;
						КонецЕсли; 
					Иначе
						ДокРасчетов = СтруктураШапкиДокумента.Ссылка;
					КонецЕсли;
					
					// {УчетДоходовИРасходовИП
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
						
						ЕстьДокРасчетовНаСтаромСчете = НЕ ПолучитьНомерСубконтоРД(Проводка.СчетКт) = 0;
						Если ЕстьДокРасчетовНаСтаромСчете Тогда
							ДокРасчетов = Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами;						
						КонецЕсли;
						
					КонецЕсли;
					// }УчетДоходовИРасходовИП
					
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетДт, 
						Проводка.СубконтоДт, 
						"ДокументыРасчетовСКонтрагентами", 
						ДокРасчетов);
					
				КонецЕсли;
				
				Если СчетДтВалютный Тогда
					
					Если Проводка.ВалютаКт = СтруктураШапкиДокумента.ВалютаНовогоДоговора Тогда
						
						Проводка.ВалютаДт        = Проводка.ВалютаКт;
						Проводка.ВалютнаяСуммаДт = Проводка.ВалютнаяСуммаКт;
						
					Иначе
						
						Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаНовогоДоговора;
						Проводка.ВалютнаяСуммаДт = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
							Проводка.Сумма,
							мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.ВалютаНовогоДоговора,
							1, СтруктураШапкиДокумента.КурсНовогоДоговора,
							1, СтруктураШапкиДокумента.КратностьНовогоДоговора);
						
					КонецЕсли;
					
				КонецЕсли;

				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");
				
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Проводка.СуммаНУКт, Проводка.СуммаНУКт, 0, 0, 0, 0, Проводка);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(Проводка.СчетКт) 
				И НЕ Проводка.СчетДт.Забалансовый
				Тогда
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетКт;
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, 
					Проводка.СубконтоКт, 
					"Контрагенты", 
					СтруктураШапкиДокумента.КонтрагентКредитор);
					
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, 
					Проводка.СубконтоКт, 
					"Договоры",
					СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Если ЕстьДокРасчетовНаНовомСчетеКт Тогда
					
					Если КонтрагентыСовпадают Тогда
						ЕстьДокРасчетовНаСтаромСчете = НЕ ПолучитьНомерСубконтоРД(Проводка.СчетДт) = 0;
						Если ЕстьДокРасчетовНаСтаромСчете Тогда
							ДокРасчетов = Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами;
						Иначе
							ДокРасчетов = СтруктураШапкиДокумента.Ссылка;
						КонецЕсли; 
					Иначе
						ДокРасчетов = СтруктураШапкиДокумента.Ссылка;
					КонецЕсли;
					
					// {УчетДоходовИРасходовИП
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
						
						ЕстьДокРасчетовНаСтаромСчете = НЕ ПолучитьНомерСубконтоРД(Проводка.СчетДт) = 0;
						Если ЕстьДокРасчетовНаСтаромСчете Тогда
							ДокРасчетов = Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами;						
						КонецЕсли;
						
					КонецЕсли;
					// }УчетДоходовИРасходовИП
					
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетКт, 
						Проводка.СубконтоКт, 
						"ДокументыРасчетовСКонтрагентами", 
						ДокРасчетов);
					
				КонецЕсли; 
				
				Если СчетКтВалютный Тогда
					
					Если Проводка.ВалютаДт = СтруктураШапкиДокумента.ВалютаНовогоДоговора Тогда
						
						Проводка.ВалютаКт        = Проводка.ВалютаДт;
						Проводка.ВалютнаяСуммаКт = Проводка.ВалютнаяСуммаДт;
						
					Иначе
						
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаНовогоДоговора;
						Проводка.ВалютнаяСуммаКт = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
							Проводка.Сумма,
							мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.ВалютаНовогоДоговора,
							1, СтруктураШапкиДокумента.КурсНовогоДоговора,
							1, СтруктураШапкиДокумента.КратностьНовогоДоговора);
						
					КонецЕсли;
					
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Кт");
				
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Проводка.СуммаНУДт, Проводка.СуммаНУДт, 0, 0, 0, 0, Проводка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Сопоставление дебета и кредита проводок при взаимозачете без вспомогательного счета.
	// Сопоставление производится по сумме регламентированного учета - балансовый реквизит проводки

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 
		И НЕ СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет 
		И КоличествоПроводокПоДебиторке > 0 Тогда
		
		ВспомогательныйСчет = ПланыСчетов.Хозрасчетный.Вспомогательный;
		
		Если РасчетыВВалюте2008 Тогда
		
			ВидыДоговоров = Новый Соответствие;
			
			ТаблицаКурсовыхРазниц = Новый ТаблицаЗначений;
			ТаблицаКурсовыхРазниц.Колонки.Добавить("Счет");
			ТаблицаКурсовыхРазниц.Колонки.Добавить("Подразделение");
			ТаблицаКурсовыхРазниц.Колонки.Добавить("Валюта");
			ТаблицаКурсовыхРазниц.Колонки.Добавить("ВидСубконто1");
			ТаблицаКурсовыхРазниц.Колонки.Добавить("ВидСубконто2");
			ТаблицаКурсовыхРазниц.Колонки.Добавить("ВидСубконто3");
			ТаблицаКурсовыхРазниц.Колонки.Добавить("Субконто1");
			ТаблицаКурсовыхРазниц.Колонки.Добавить("Субконто2");
			ТаблицаКурсовыхРазниц.Колонки.Добавить("Субконто3");
			ТаблицаКурсовыхРазниц.Колонки.Добавить("Сумма");
		
		КонецЕсли;
		
		Для каждого СтрокаДебиторки Из НаборДвиженийДебиторка Цикл
			
			Если НЕ СтрокаДебиторки.СчетДт = ВспомогательныйСчет Тогда
				
				// Суммовые разницы или что-то подобное (проводка не самого взаимозачета)
				Проводка  = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период			= СтрокаДебиторки.Период;
				Проводка.Организация	= СтрокаДебиторки.Организация;
				Проводка.Содержание		= СтрокаДебиторки.Содержание;
				Проводка.Сумма			= СтрокаДебиторки.Сумма;
				
				Проводка.СчетДт			= СтрокаДебиторки.СчетДт;
				Для НомерСубконто = 1  По 3 Цикл
					Если Не СтрокаДебиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда
						БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(
							Проводка.СчетДт, 
							Проводка.СубконтоДт, 
							СтрокаДебиторки["ВидСубконтоДт"+НомерСубконто], 
							СтрокаДебиторки["СубконтоДт"+НомерСубконто]);
					КонецЕсли; 
				КонецЦикла; 
				
				Проводка.ВалютаДт		= СтрокаДебиторки.ВалютаДт;
				Проводка.ВалютнаяСуммаДт= СтрокаДебиторки.ВалютнаяСуммаДт;
				
				Проводка.СчетКт			= СтрокаДебиторки.СчетКт;
				Для НомерСубконто = 1  По 3 Цикл
					Если Не СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
						БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(
							Проводка.СчетКт, 
							Проводка.СубконтоКт, 
							СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто], 
							СтрокаДебиторки["СубконтоКт"+НомерСубконто]);
					КонецЕсли; 
				КонецЦикла; 
				
				Проводка.ВалютаКт		= СтрокаДебиторки.ВалютаКт;
				Проводка.ВалютнаяСуммаКт= СтрокаДебиторки.ВалютнаяСуммаКт;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтрокаДебиторки.ПодразделениеДт, СтрокаДебиторки.ПодразделениеКт);
					
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
					СтрокаДебиторки.СуммаНУДт, СтрокаДебиторки.СуммаНУКт,
					СтрокаДебиторки.СуммаПРДт, СтрокаДебиторки.СуммаПРКт,
					СтрокаДебиторки.СуммаВРДт, СтрокаДебиторки.СуммаВРКт,
					Проводка);
					
				Продолжить;
				
			КонецЕсли;
			
			Для каждого СтрокаКредиторки Из НаборДвиженийКредиторка Цикл
				
				Если СтрокаДебиторки.Сумма = 0 Тогда
				    Прервать;
				КонецЕсли;
				Если СтрокаКредиторки.Сумма = 0 Тогда
				    Продолжить;
				КонецЕсли;
				
				Если НЕ СтрокаКредиторки.СчетКт = ВспомогательныйСчет Тогда
					// Суммовые разницы или что-то подобное (проводка не самого взаимозачета)
					Проводка  = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период			= СтрокаКредиторки.Период;
					Проводка.Организация	= СтрокаКредиторки.Организация;
					Проводка.Содержание		= СтрокаКредиторки.Содержание;
					Проводка.Сумма			= СтрокаКредиторки.Сумма;
					
					Проводка.СчетДт			= СтрокаКредиторки.СчетДт;
					Для НомерСубконто = 1  По 3 Цикл
						Если Не СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда
							БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(
								Проводка.СчетДт, 
								Проводка.СубконтоДт, 
								СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто], 
								СтрокаКредиторки["СубконтоДт"+НомерСубконто]);
						КонецЕсли; 
					КонецЦикла; 
					
					Проводка.ВалютаДт		= СтрокаКредиторки.ВалютаДт;
					Проводка.ВалютнаяСуммаДт= СтрокаКредиторки.ВалютнаяСуммаДт;
					
					Проводка.СчетКт			= СтрокаКредиторки.СчетКт;
					Для НомерСубконто = 1  По 3 Цикл
						Если Не СтрокаКредиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
							БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(
								Проводка.СчетКт, 
								Проводка.СубконтоКт, 
								СтрокаКредиторки["ВидСубконтоКт"+НомерСубконто], 
								СтрокаКредиторки["СубконтоКт"+НомерСубконто]);
						КонецЕсли; 
					КонецЦикла; 
					
					Проводка.ВалютаКт		= СтрокаКредиторки.ВалютаКт;
					Проводка.ВалютнаяСуммаКт= СтрокаКредиторки.ВалютнаяСуммаКт;
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтрокаКредиторки.ПодразделениеДт, СтрокаКредиторки.ПодразделениеКт);
				
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
						СтрокаКредиторки.СуммаНУДт, СтрокаКредиторки.СуммаНУКт,
						СтрокаКредиторки.СуммаПРДт, СтрокаКредиторки.СуммаПРКт,
						СтрокаКредиторки.СуммаВРДт, СтрокаКредиторки.СуммаВРКт,
						Проводка);
					
					СтрокаКредиторки.Сумма = 0;
					СтрокаКредиторки.ВалютнаяСуммаДт = 0;
					СтрокаКредиторки.ВалютнаяСуммаКт = 0;
					СтрокаКредиторки.СуммаНУДт		 = 0;
					СтрокаКредиторки.СуммаПРДт		 = 0;
					СтрокаКредиторки.СуммаВРДт		 = 0;
					СтрокаКредиторки.СуммаНУКт		 = 0;
					СтрокаКредиторки.СуммаПРКт		 = 0;
					СтрокаКредиторки.СуммаВРКт		 = 0;
					
					Продолжить;
					
				КонецЕсли; 
				
				Если РасчетыВВалюте2008 Тогда
				
					ВидДоговораДебиторки = ВидыДоговоров[СтрокаДебиторки.СубконтоКт2];
					Если ВидДоговораДебиторки = Неопределено Тогда
						ВидДоговораДебиторки = СтрокаДебиторки.СубконтоКт2.ВидДоговора;
						ВидыДоговоров.Вставить(СтрокаДебиторки.СубконтоКт2, ВидДоговораДебиторки);
					КонецЕсли;
					
					ВидДоговораКредиторки = ВидыДоговоров[СтрокаКредиторки.СубконтоДт2];
					Если ВидДоговораКредиторки = Неопределено Тогда
						ВидДоговораКредиторки = СтрокаКредиторки.СубконтоДт2.ВидДоговора;
						ВидыДоговоров.Вставить(СтрокаКредиторки.СубконтоДт2, ВидДоговораКредиторки);
					КонецЕсли;
					
					СуммаСоответствияВал = Мин(СтрокаДебиторки.ВалютнаяСуммаКт, СтрокаКредиторки.ВалютнаяСуммаДт);
					
					Если СуммаСоответствияВал = 0 Тогда
						Продолжить;
					КонецЕсли; 
					
					// Проводка взаимозачета
					Проводка  = Движения.Хозрасчетный.Добавить();
					Проводка.Период			= СтрокаДебиторки.Период;
					Проводка.Организация	= СтрокаДебиторки.Организация;
					Проводка.Содержание		= СтрокаДебиторки.Содержание;
					
					Проводка.СчетДт			= СтрокаКредиторки.СчетДт;
					Для НомерСубконто = 1  По 3 Цикл
						Если Не СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда
							БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(
								Проводка.СчетДт, 
								Проводка.СубконтоДт, 
								СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто], 
								СтрокаКредиторки["СубконтоДт"+НомерСубконто]);
						КонецЕсли; 
					КонецЦикла; 
					
					Проводка.ВалютаДт		= СтрокаКредиторки.ВалютаДт;
					Проводка.ВалютнаяСуммаДт= СуммаСоответствияВал;
					
					Проводка.СчетКт			= СтрокаДебиторки.СчетКт;
					Для НомерСубконто = 1  По 3 Цикл
						Если Не СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
							БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(
								Проводка.СчетКт, 
								Проводка.СубконтоКт, 
								СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто], 
								СтрокаДебиторки["СубконтоКт"+НомерСубконто]);
						КонецЕсли; 
					КонецЦикла; 
					
					Проводка.ВалютаКт		 = СтрокаДебиторки.ВалютаКт;
					Проводка.ВалютнаяСуммаКт = СуммаСоответствияВал;
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтрокаКредиторки.ПодразделениеДт, СтрокаДебиторки.ПодразделениеКт);
						
					ВозвратАвансаДебиторка  = ОпределитьВозвратАванса(
						ВидДоговораДебиторки, 
						Перечисления.ВидыЗадолженности.Дебиторская, 
						СтрокаДебиторки.СчетКт);
					ВозвратАвансаКредиторка = ОпределитьВозвратАванса(
						ВидДоговораКредиторки, 
						Перечисления.ВидыЗадолженности.Кредиторская, 
						СтрокаКредиторки.СчетДт);
					
					КоэффициентДт = ?(СтрокаКредиторки.ВалютнаяСуммаДт = 0, 0, СуммаСоответствияВал / СтрокаКредиторки.ВалютнаяСуммаДт);
					КоэффициентКт = ?(СтрокаДебиторки.ВалютнаяСуммаКт = 0, 0, СуммаСоответствияВал / СтрокаДебиторки.ВалютнаяСуммаКт);
					
					СуммаДебиторка  = Окр(СтрокаДебиторки.Сумма * КоэффициентКт, 2);
					СуммаКредиторка = Окр(СтрокаКредиторки.Сумма * КоэффициентДт, 2);
					
					Если ВозвратАвансаДебиторка И ВозвратАвансаКредиторка И СуммаДебиторка <> СуммаКредиторка Тогда
						ТекстОшибки = "Взаимозачет двух авансов, поступивших по разным курсам, не обслуживается.";
						ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
						Возврат;
					КонецЕсли;
					
					Если ВозвратАвансаДебиторка Тогда
						
						СуммаСоответствия     = СуммаДебиторка;
						КурсоваяРазница       = СуммаКредиторка - СуммаСоответствия;
						СтрокаКурсовойРазницы = ТаблицаКурсовыхРазниц.Добавить();
						
						СтрокаКурсовойРазницы.Счет          = СтрокаКредиторки.СчетДт;
						СтрокаКурсовойРазницы.Подразделение = СтрокаКредиторки.ПодразделениеДт;
						СтрокаКурсовойРазницы.Валюта        = СтрокаКредиторки.ВалютаДт;
						СтрокаКурсовойРазницы.ВидСубконто1  = СтрокаКредиторки.ВидСубконтоДт1;
						СтрокаКурсовойРазницы.ВидСубконто2  = СтрокаКредиторки.ВидСубконтоДт2;
						СтрокаКурсовойРазницы.ВидСубконто3  = СтрокаКредиторки.ВидСубконтоДт3;
						СтрокаКурсовойРазницы.Субконто1     = СтрокаКредиторки.СубконтоДт1;
						СтрокаКурсовойРазницы.Субконто2     = СтрокаКредиторки.СубконтоДт2;
						СтрокаКурсовойРазницы.Субконто3     = СтрокаКредиторки.СубконтоДт3;
						СтрокаКурсовойРазницы.Сумма         = КурсоваяРазница;
						
					Иначе
						
						СуммаСоответствия     = СуммаКредиторка;
						КурсоваяРазница       = СуммаСоответствия - СуммаДебиторка;
						СтрокаКурсовойРазницы = ТаблицаКурсовыхРазниц.Добавить();
						
						СтрокаКурсовойРазницы.Счет          = СтрокаДебиторки.СчетКт;
						СтрокаКурсовойРазницы.Подразделение = СтрокаКредиторки.ПодразделениеКт;
						СтрокаКурсовойРазницы.Валюта        = СтрокаДебиторки.ВалютаКт;
						СтрокаКурсовойРазницы.ВидСубконто1  = СтрокаДебиторки.ВидСубконтоКт1;
						СтрокаКурсовойРазницы.ВидСубконто2  = СтрокаДебиторки.ВидСубконтоКт2;
						СтрокаКурсовойРазницы.ВидСубконто3  = СтрокаДебиторки.ВидСубконтоКт3;
						СтрокаКурсовойРазницы.Субконто1     = СтрокаДебиторки.СубконтоКт1;
						СтрокаКурсовойРазницы.Субконто2     = СтрокаДебиторки.СубконтоКт2;
						СтрокаКурсовойРазницы.Субконто3     = СтрокаДебиторки.СубконтоКт3;
						СтрокаКурсовойРазницы.Сумма         = КурсоваяРазница;
						
					КонецЕсли;
					
					Проводка.Сумма			= СуммаСоответствия;
					
					СуммаНУДт =	Окр(СтрокаКредиторки.СуммаНУДт * КоэффициентДт, 2);
					СуммаНУКт =	Окр(СтрокаДебиторки.СуммаНУКт * КоэффициентКт, 2);
					СуммаПРДт =	Окр(СтрокаКредиторки.СуммаПРДт * КоэффициентДт, 2);
					СуммаПРКт =	Окр(СтрокаДебиторки.СуммаПРКт * КоэффициентКт, 2);
					СуммаВРДт =	Окр(СтрокаКредиторки.СуммаВРДт * КоэффициентДт, 2);
					СуммаВРКт =	Окр(СтрокаДебиторки.СуммаВРКт * КоэффициентКт, 2);
						
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
						СуммаНУДт, СуммаНУКт, СуммаПРДт, СуммаПРКт, СуммаВРДт, СуммаВРКт, Проводка);
				
					СтрокаДебиторки.Сумма			= СтрокаДебиторки.Сумма - СуммаДебиторка;
					СтрокаДебиторки.ВалютнаяСуммаКт = СтрокаДебиторки.ВалютнаяСуммаКт - СуммаСоответствияВал;
					СтрокаДебиторки.СуммаНУКт		= СтрокаДебиторки.СуммаНУКт - СуммаНУКт;
					СтрокаДебиторки.СуммаПРКт		= СтрокаДебиторки.СуммаПРКт - СуммаПРКт;
					СтрокаДебиторки.СуммаВРКт		= СтрокаДебиторки.СуммаВРКт - СуммаВРКт;
				
					СтрокаКредиторки.Сумма			 = СтрокаКредиторки.Сумма - СуммаКредиторка;
					СтрокаКредиторки.ВалютнаяСуммаДт = СтрокаКредиторки.ВалютнаяСуммаДт - СуммаСоответствияВал;
					СтрокаКредиторки.СуммаНУДт		 = СтрокаКредиторки.СуммаНУДт - СуммаНУДт;
					СтрокаКредиторки.СуммаПРДт		 = СтрокаКредиторки.СуммаПРДт - СуммаПРДт;
					СтрокаКредиторки.СуммаВРДт		 = СтрокаКредиторки.СуммаВРДт - СуммаВРДт;
				
				Иначе
					
					СуммаСоответствия = Мин(СтрокаДебиторки.Сумма, СтрокаКредиторки.Сумма);
					
					Если СуммаСоответствия = 0 Тогда
						Продолжить;
					КонецЕсли; 
					
					// Проводка взаимозачета
					Проводка  = Движения.Хозрасчетный.Добавить();
					Проводка.Период			= СтрокаДебиторки.Период;
					Проводка.Организация	= СтрокаДебиторки.Организация;
					Проводка.Содержание		= СтрокаДебиторки.Содержание;
					Проводка.Сумма			= СуммаСоответствия;
					
					Проводка.СчетДт	= СтрокаКредиторки.СчетДт;
					Для НомерСубконто = 1 По 3 Цикл
						Если Не СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда
							БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(
								Проводка.СчетДт, 
								Проводка.СубконтоДт, 
								СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто], 
								СтрокаКредиторки["СубконтоДт"+НомерСубконто]);
						КонецЕсли; 
					КонецЦикла; 
					
					КоэффициентДт = ?(СтрокаКредиторки.Сумма = 0, 0, СуммаСоответствия / СтрокаКредиторки.Сумма);
					КоэффициентКт = ?(СтрокаДебиторки.Сумма = 0, 0, СуммаСоответствия / СтрокаДебиторки.Сумма);
					
					Проводка.ВалютаДт		 = СтрокаКредиторки.ВалютаДт;
					Проводка.ВалютнаяСуммаДт = Окр(СтрокаКредиторки.ВалютнаяСуммаДт * КоэффициентДт, 2);
					
					Проводка.СчетКт	= СтрокаДебиторки.СчетКт;
					Для НомерСубконто = 1 По 3 Цикл
						Если Не СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
							БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(
								Проводка.СчетКт, 
								Проводка.СубконтоКт, 
								СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто], 
								СтрокаДебиторки["СубконтоКт"+НомерСубконто]);
						КонецЕсли; 
					КонецЦикла; 
					
					Проводка.ВалютаКт		 = СтрокаДебиторки.ВалютаКт;
					Проводка.ВалютнаяСуммаКт = Окр(СтрокаДебиторки.ВалютнаяСуммаКт * КоэффициентКт, 2);
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтрокаКредиторки.ПодразделениеДт, СтрокаДебиторки.ПодразделениеКт);
						
					СуммаНУДт =	Окр(СтрокаКредиторки.СуммаНУДт * КоэффициентДт, 2);
					СуммаНУКт =	Окр(СтрокаДебиторки.СуммаНУКт * КоэффициентКт, 2);
					СуммаПРДт =	Окр(СтрокаКредиторки.СуммаПРДт * КоэффициентДт, 2);
					СуммаПРКт =	Окр(СтрокаДебиторки.СуммаПРКт * КоэффициентКт, 2);
					СуммаВРДт =	Окр(СтрокаКредиторки.СуммаВРДт * КоэффициентДт, 2);
					СуммаВРКт =	Окр(СтрокаДебиторки.СуммаВРКт * КоэффициентКт, 2);
						
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
						СуммаНУДт, СуммаНУКт, СуммаПРДт, СуммаПРКт, СуммаВРДт, СуммаВРКт, Проводка);
				
					СтрокаДебиторки.Сумма			= СтрокаДебиторки.Сумма - СуммаСоответствия;
					СтрокаДебиторки.ВалютнаяСуммаКт = СтрокаДебиторки.ВалютнаяСуммаКт - Проводка.ВалютнаяСуммаКт;
					СтрокаДебиторки.СуммаНУКт		= СтрокаДебиторки.СуммаНУКт - СуммаНУКт;
					СтрокаДебиторки.СуммаПРКт		= СтрокаДебиторки.СуммаПРКт - СуммаПРКт;
					СтрокаДебиторки.СуммаВРКт		= СтрокаДебиторки.СуммаВРКт - СуммаВРКт;
				
					СтрокаКредиторки.Сумма			= СтрокаКредиторки.Сумма - СуммаСоответствия;
					СтрокаКредиторки.ВалютнаяСуммаДт = СтрокаКредиторки.ВалютнаяСуммаДт - Проводка.ВалютнаяСуммаДт;
					СтрокаКредиторки.СуммаНУДт		 = СтрокаКредиторки.СуммаНУДт - СуммаНУДт;
					СтрокаКредиторки.СуммаПРДт		 = СтрокаКредиторки.СуммаПРДт - СуммаПРДт;
					СтрокаКредиторки.СуммаВРДт		 = СтрокаКредиторки.СуммаВРДт - СуммаВРДт;
				
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЦикла; 
	
		Для каждого СтрокаКредиторки Из НаборДвиженийКредиторка Цикл
			
			Если СтрокаКредиторки.Сумма = 0 
				И СтрокаКредиторки.ВалютнаяСуммаДт = 0 
				И СтрокаКредиторки.ВалютнаяСуммаКт = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			// Суммовые разницы или что-то подобное (проводка не самого взаимозачета)
			Проводка  = Движения.Хозрасчетный.Добавить();
			Проводка.Период			= СтрокаКредиторки.Период;
			Проводка.Организация	= СтрокаКредиторки.Организация;
			Проводка.Содержание		= СтрокаКредиторки.Содержание;
			Проводка.Сумма			= СтрокаКредиторки.Сумма;
			
			Проводка.СчетДт			= СтрокаКредиторки.СчетДт;
			Для НомерСубконто = 1  По 3 Цикл
				Если Не СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда
					БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(
						Проводка.СчетДт, 
						Проводка.СубконтоДт, 
						СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто], 
						СтрокаКредиторки["СубконтоДт"+НомерСубконто]);
				КонецЕсли; 
			КонецЦикла; 
			
			Проводка.ВалютаДт		= СтрокаКредиторки.ВалютаДт;
			Проводка.ВалютнаяСуммаДт= СтрокаКредиторки.ВалютнаяСуммаДт;
			
			Проводка.СчетКт			= СтрокаКредиторки.СчетКт;
			Для НомерСубконто = 1  По 3 Цикл
				Если Не СтрокаКредиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
					БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(
						Проводка.СчетКт, 
						Проводка.СубконтоКт, 
						СтрокаКредиторки["ВидСубконтоКт"+НомерСубконто], 
						СтрокаКредиторки["СубконтоКт"+НомерСубконто]);
				КонецЕсли; 
			КонецЦикла; 
			
			Проводка.ВалютаКт		= СтрокаКредиторки.ВалютаКт;
			Проводка.ВалютнаяСуммаКт= СтрокаКредиторки.ВалютнаяСуммаКт;
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтрокаКредиторки.ПодразделениеДт, СтрокаКредиторки.ПодразделениеКт);
				
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
				СтрокаКредиторки.СуммаНУДт, СтрокаКредиторки.СуммаНУКт,
				СтрокаКредиторки.СуммаПРДт, СтрокаКредиторки.СуммаПРКт,
				СтрокаКредиторки.СуммаВРДт, СтрокаКредиторки.СуммаВРКт,
				Проводка);
					
			СтрокаКредиторки.Сумма = 0;
			СтрокаКредиторки.ВалютнаяСуммаДт = 0;
			СтрокаКредиторки.ВалютнаяСуммаКт = 0;
			СтрокаКредиторки.СуммаНУДт		 = 0;
			СтрокаКредиторки.СуммаПРДт		 = 0;
			СтрокаКредиторки.СуммаВРДт		 = 0;
			СтрокаКредиторки.СуммаНУКт		 = 0;
			СтрокаКредиторки.СуммаПРКт		 = 0;
			СтрокаКредиторки.СуммаВРКт		 = 0;
			
			Продолжить;
			
		КонецЦикла; 
		
		Если РасчетыВВалюте2008 Тогда
		
			ТаблицаКурсовыхРазниц.Свернуть("Счет, Валюта, ВидСубконто1, ВидСубконто2, ВидСубконто3, Субконто1, Субконто2, Субконто3, Подразделение", "Сумма");
			СтатьяКурсовыхРазниц = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницы;
			
			Для каждого СтрокаРазницы Из ТаблицаКурсовыхРазниц Цикл
			
				Если СтрокаРазницы.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Проводка  = Движения.Хозрасчетный.Добавить();
				Проводка.Период	     = Дата;
				Проводка.Организация = Организация;
				Проводка.Содержание	 = "Курсовая разница при взаимозачете";
				
				Если СтрокаРазницы.Сумма > 0 Тогда
				
					Проводка.Сумма		 = СтрокаРазницы.Сумма;
					
					Проводка.СчетДт   = СтрокаРазницы.Счет;
					Проводка.ВалютаДт = СтрокаРазницы.Валюта;
					Для Ном = 1 По 3 Цикл
						Если Не СтрокаРазницы["ВидСубконто"+Ном] = Неопределено Тогда
							БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(
								Проводка.СчетДт, 
								Проводка.СубконтоДт, 
								СтрокаРазницы["ВидСубконто"+Ном], 
								СтрокаРазницы["Субконто"+Ном]);
						КонецЕсли; 
					КонецЦикла; 
				
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
					Проводка.СубконтоКт.ПрочиеДоходыИРасходы = СтатьяКурсовыхРазниц;
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтрокаРазницы.Подразделение, СтрокаРазницы.Подразделение);
					
				Иначе
				
					Проводка.Сумма		 = -СтрокаРазницы.Сумма;
					
					Проводка.СчетКт   = СтрокаРазницы.Счет;
					Проводка.ВалютаКт = СтрокаРазницы.Валюта;
					Для Ном = 1 По 3 Цикл
						Если Не СтрокаРазницы["ВидСубконто"+Ном] = Неопределено Тогда
							БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(
								Проводка.СчетКт, 
								Проводка.СубконтоКт, 
								СтрокаРазницы["ВидСубконто"+Ном], 
								СтрокаРазницы["Субконто"+Ном]);
						КонецЕсли; 
					КонецЦикла; 
				
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
					Проводка.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяКурсовыхРазниц;
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтрокаРазницы.Подразделение, СтрокаРазницы.Подразделение);
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);

КонецПроцедуры

// {УчетДоходовИРасходовИП
Процедура СписаниеЗадолженностиПредпринимателю(СтруктураШапкиДокумента, ОплаченныеПартии)
	
	ОтборПартий = Новый Структура("ДокументРасчетов");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокДокументовРасчетов", ОплаченныеПартии.ВыгрузитьКолонку("ДокументРасчетов"));
	Запрос.УстановитьПараметр("ДатаРегистратора", МоментВремени());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПМПЗОтгруженныеОстатки.НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОстатки.ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОстатки.Номенклатура,
	|	ИПМПЗОтгруженныеОстатки.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ИПМПЗОтгруженныеОстатки.Партия КАК Партия,
	|	ИПМПЗОтгруженныеОстатки.ДокументОплаты КАК ДокументОплаты,
	|	СУММА(ИПМПЗОтгруженныеОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ИПМПЗОтгруженныеОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(ИПМПЗОтгруженныеОстатки.НДСОстаток) КАК НДСОстаток,
	|	СУММА(ИПМПЗОтгруженныеОстатки.ВыручкаОстаток) КАК ВыручкаОстаток,
	|	СУММА(ИПМПЗОтгруженныеОстатки.НДСНачисленныйОстаток) КАК НДСНачисленныйОстаток,
	|	ИПМПЗОтгруженныеОстатки.ВидМПЗ
	|ИЗ
	|	РегистрНакопления.ИПМПЗОтгруженные.Остатки(
	|			&ДатаРегистратора,
	|			Организация = &Организация
	|				И ДокументОтгрузки В (&СписокДокументовРасчетов)) КАК ИПМПЗОтгруженныеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПМПЗОтгруженныеОстатки.ДокументОтгрузки,
	|	ИПМПЗОтгруженныеОстатки.ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОстатки.НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОстатки.Партия,
	|	ИПМПЗОтгруженныеОстатки.ДокументОплаты,
	|	ИПМПЗОтгруженныеОстатки.Номенклатура,
	|	ИПМПЗОтгруженныеОстатки.ВидМПЗ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОтгрузки,
	|	Партия,
	|	ДокументОплаты
	|ИТОГИ ПО
	|	ДокументОтгрузки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтборПартий = Новый Структура("ДокументРасчетов");
	
	Партия = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДокументОтгрузки");
	Пока Партия.Следующий() Цикл
		
		ОтборПартий.ДокументРасчетов = Партия.ДокументОтгрузки;
		Оплата = ОплаченныеПартии.НайтиСтроки(ОтборПартий)[0];
			
		Если Оплата.СуммаБУ = 0 Тогда
			Продолжить;
		КонецЕсли;
			
		Товар = Партия.Выбрать();
		Пока Товар.Следующий() Цикл
			
			Если Товар.ВыручкаОстаток = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаОплаты = Мин(Товар.ВыручкаОстаток, Оплата.СуммаБУ);
			Оплата.СуммаБУ = Оплата.СуммаБУ - СуммаОплаты;
			
			Если СуммаОплаты = Товар.ВыручкаОстаток Тогда
				Количество = Товар.КоличествоОстаток;
				НДСНачисленный = Товар.НДСНачисленныйОстаток;
				Сумма = Товар.СуммаОстаток;
				НДС = Товар.НДСОстаток;
			
			Иначе
				Количество = Товар.КоличествоОстаток * СуммаОплаты / Товар.ВыручкаОстаток;
				НДСНачисленный = Товар.НДСНачисленныйОстаток * СуммаОплаты / Товар.ВыручкаОстаток;
				Сумма = Товар.СуммаОстаток * СуммаОплаты / Товар.ВыручкаОстаток;
				НДС = Товар.НДСОстаток * СуммаОплаты / Товар.ВыручкаОстаток;
			КонецЕсли;
			
			Оплачено = Движения.ИПМПЗОтгруженные.ДобавитьПриход();
						
			Оплачено.Период = СтруктураШапкиДокумента.Дата;
			Оплачено.Организация = СтруктураШапкиДокумента.Организация;
			Оплачено.ХарактерДеятельности = Товар.ХарактерДеятельности;
			Оплачено.НоменклатурнаяГруппа = Товар.НоменклатурнаяГруппа;
			Оплачено.ВидМПЗ = Товар.ВидМПЗ;
			Оплачено.Номенклатура = Товар.Номенклатура;
			Оплачено.Партия = Товар.Партия;
			Оплачено.ДокументОтгрузки = Товар.ДокументОтгрузки;
			Оплачено.ДокументОплаты = Товар.ДокументОплаты;
			
			Оплачено.Выручка = - СуммаОплаты;
			Оплачено.НДСНачисленный = - НДСНачисленный;
			Оплачено.Сумма = - Сумма;
			Оплачено.НДС = - НДС;
			Оплачено.Количество = - Количество;
			
		КонецЦикла;	
	КонецЦикла;
		
КонецПроцедуры
// }УчетДоходовИРасходовИП

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета УСН
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицыРаспределенияРасчетов, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, ТаблицыРаспределенияРасчетов);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)   
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ТабСумм         = ЭтотОбъект.СуммыДолга.Выгрузить();
	
	Если ВалютаДокумента = мВалютаРегламентированногоУчета или ВалютаДокумента = Справочники.Валюты.ПустаяСсылка() Тогда
		ТабСумм.Свернуть("ВидЗадолженности","Сумма");
	Иначе
		ТабСумм.Свернуть("ВидЗадолженности","СуммаВзаиморасчетов");
		ТабСумм.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
	КонецЕсли; 
	
	СуммаДтЗадолженности = 0;
	СуммаКтЗадолженности = 0;
	
	Для каждого СтрокаТаблицы Из ТабСумм Цикл
		Если  СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			СуммаДтЗадолженности  = СуммаДтЗадолженности+СтрокаТаблицы.Сумма;
		ИначеЕсли  СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
			СуммаКтЗадолженности = СуммаКтЗадолженности+СтрокаТаблицы.Сумма;
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	//Занесем в структуру шапки дополнительный параметр для проведения 
	СтруктураШапкиДокумента.Вставить("ЭтоВозврат",Ложь);
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		
		ВалютаНовогоДоговора = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		СтруктураШапкиДокумента.Вставить("ВалютаНовогоДоговора", ВалютаНовогоДоговора);
		
		РасчетыВУсловныхЕдиницахПоНовомуДоговору = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
		СтруктураШапкиДокумента.Вставить("РасчетыВУсловныхЕдиницахПоНовомуДоговору", РасчетыВУсловныхЕдиницахПоНовомуДоговору);
		
		ВидНовогоДоговора = ДоговорКонтрагента.ВидДоговора;
		СтруктураШапкиДокумента.Вставить("ВидНовогоДоговора", ВидНовогоДоговора);
		
		Если ВалютаНовогоДоговора <> СтруктураШапкиДокумента.ВалютаДокумента Тогда
			СтруктураКурсаНовогоДоговора = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаНовогоДоговора, СтруктураШапкиДокумента.Дата);
			СтруктураШапкиДокумента.Вставить("КурсНовогоДоговора", СтруктураКурсаНовогоДоговора.Курс);
			СтруктураШапкиДокумента.Вставить("КратностьНовогоДоговора", СтруктураКурсаНовогоДоговора.Кратность);
		Иначе
			СтруктураШапкиДокумента.Вставить("КурсНовогоДоговора", СтруктураШапкиДокумента.КурсДокумента);
			СтруктураШапкиДокумента.Вставить("КратностьНовогоДоговора", СтруктураШапкиДокумента.КратностьДокумента);
		КонецЕсли;
		
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ВидЗадолженности"          , "ВидЗадолженности");
	СтруктураПолей.Вставить("ДоговорКонтрагента"        , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("КонтрагентДоговора"        , "ДоговорКонтрагента.Владелец");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"      , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("РасчетыВУсловныхЕдиницах"  , "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах");
	СтруктураПолей.Вставить("ДоговорОрганизация"        , "ДоговорКонтрагента.Организация");
	
	СтруктураПолей.Вставить("ДокументРасчетов"          , "Сделка");
	СтруктураПолей.Вставить("ВидДоговора"               , "ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("Сумма"              		, "Сумма");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"       , "СуммаВзаиморасчетов");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"        , "КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов"   , "КратностьВзаиморасчетов");
 	СтруктураПолей.Вставить("СчетОплаты"          		, "СчетУчетаРасчетов");
 	СтруктураПолей.Вставить("СчетАванса"          		, "СчетУчетаРасчетов");
	
	СтруктураПолей.Вставить("КоррСчет"             		, "Ссылка.СчетДт");
	СтруктураПолей.Вставить("КоррСубконто1"            	, "Ссылка.СубконтоДт1");
	СтруктураПолей.Вставить("КоррСубконто2"            	, "Ссылка.СубконтоДт2");
	СтруктураПолей.Вставить("КоррСубконто3"            	, "Ссылка.СубконтоДт3");
	// {ОбособленныеПодразделения
	СтруктураПолей.Вставить("КоррПодразделение"        	, "Ссылка.ПодразделениеОрганизации");
	// }ОбособленныеПодразделения
	
	РезультатЗапросаПоСуммамДолга = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СуммыДолга", СтруктураПолей);

	// Подготовим таблицы товаров для проведения.
	ПолучитьСчетаРасчетовСПоставщикамиИПокупателями();
	ТаблицаПоСуммамДолга = ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		
		РасчетыВВалюте2008 = (Дата >= '20080101') И ВалютаДокумента <> мВалютаРегламентированногоУчета;
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);

	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

