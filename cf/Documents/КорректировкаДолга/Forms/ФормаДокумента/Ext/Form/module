////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ОткрыватьНастройкуДвижений;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.СуммыДолга,ЭлементыФормы.КоманднаяПанельВзаиморасчеты.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.СуммыДолгаУменьшение,ЭлементыФормы.КоманднаяПанельТовары1.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает подменю "Перейти" 
//
Процедура УстановитьПодменюПерейти()
	
	// Устанавливаем подменю перейти
	//мСоответствиеДействийПодменюПерейти = Новый Соответствие;
	//УниверсальныеМеханизмы.СформироватьПодменю(УниверсальныеМеханизмы.ПолучитьДеревоПодменюПерейти("Документы", Метаданные().Имя, Новый Действие("ПриНажатииНаКнопкуВПодменюПерейти"), мСоответствиеДействийПодменюПерейти), ЭлементыФормы.ДействияФормы.Кнопки.ПодменюПерейти);
	
КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ) Экспорт

	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, КонтрагентДебитор, СтрокаТЧ.ДоговорКонтрагента);

	Если СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
	ИначеЕсли СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

//Очищает табличную часть документа при смене контрагента, организации
Процедура ОчиститьСтрокиТабЧасти(ТекстВопроса, СтандартнаяОбработка, ВидЗадолженности = Неопределено,
				ПровестиСравнение = Ложь, ВыбранноеЗначение = Неопределено, ОбъектСравнения = Неопределено)
	
	Если ВидЗадолженности = Неопределено Тогда
		ТаблицаДолгов = СуммыДолга;
	Иначе
		ТаблицаДолгов = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", ВидЗадолженности));
	КонецЕсли; 
		
	Если ТаблицаДолгов.Количество() > 0
	   И ?(ПровестиСравнение, ТаблицаДолгов[0].ДоговорКонтрагента[ОбъектСравнения] <> ВыбранноеЗначение,Истина) Тогда

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Если ВидЗадолженности = Неопределено Тогда
				СуммыДолга.Очистить();
			Иначе
				Для каждого СтрокаКУдалению Из ТаблицаДолгов Цикл
					СуммыДолга.Удалить(СтрокаКУдалению);
				КонецЦикла; 
			КонецЕсли;
		Иначе  
			//Отказ от выбора
			СтандартнаяОбработка = Ложь;
		КонецЕсли; 		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает видимость реквизитов субконто и подписей к ним.
//
Процедура УстановитьВидимость()

	Колонки                = ЭлементыФормы.СуммыДолга.Колонки;
	КолонкиУменьшениеДолга = ЭлементыФормы.СуммыДолгаУменьшение.Колонки;
	УСН =  НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	ОСН_ФизЛицо = ОбщегоНазначения.Предприниматель(Организация, Дата);
	
	//Управление доступностью курсом и кратностью расчетов
	КурсВалютыВШапке =  не (ВалютаДокумента = мВалютаРегламентированногоУчета или НЕ ЗначениеЗаполнено(ВалютаДокумента));
	
	ЭлементыФормы.НадписьКурсДокумента.Видимость = КурсВалютыВШапке;
	ЭлементыФормы.КурсДокумента.Видимость = КурсВалютыВШапке;
	
	Колонки.КурсВзаиморасчетов.Доступность = не КурсВалютыВШапке;
	Колонки.КратностьВзаиморасчетов.Доступность = не КурсВалютыВШапке;
	
	КолонкиУменьшениеДолга.КурсВзаиморасчетов.Доступность = не КурсВалютыВШапке;
	КолонкиУменьшениеДолга.КратностьВзаиморасчетов.Доступность = не КурсВалютыВШапке;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда

		ЭлементыФормы.КонтрагентКредитор.Видимость                         = Истина;
		ЭлементыФормы.НадписьКонтрагент.Заголовок                          = "Дебитор";
		ЭлементыФормы.НадписьКонтрагентКредитор.Видимость                  = Истина;
		ЭлементыФормы.НадписьКонтрагентКредитор.Заголовок                  = "Кредитор";
		ЭлементыФормы.ОсновнаяПанель.Страницы.УменьшениеДолга.Видимость    = Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Взаиморасчеты.Заголовок      = "Взаиморасчеты";
		ЭлементыФормы.ДоговорКонтрагента.Видимость                         = Ложь;
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость                  = Ложь;
		ЭлементыФормы.СуммыДолга.ОтборСтрок.ВидЗадолженности.Использование = Ложь;
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.ВспомогательныйСчет.Видимость = Истина;
		
		ЭлементыФормы.ВспомогательныйСчет.Видимость = ИспользоватьВспомогательныйСчет;
		Для Ном = 1 по 3 Цикл
			Если ИспользоватьВспомогательныйСчет И (Ном <= СчетДт.ВидыСубконто.Количество()) И (ЗначениеЗаполнено(СчетДт)) Тогда
				ЭлементыФормы["НадписьСубконто"+Ном].Заголовок = СчетДт.ВидыСубконто[Ном-1].ВидСубконто.Наименование;
				ЭлементыФормы["НадписьСубконто"+Ном].Видимость = Истина;
				ЭлементыФормы["Субконто"+Ном].Видимость        = Истина;
			Иначе
				ЭлементыФормы["НадписьСубконто"+Ном].Видимость = Ложь;
				ЭлементыФормы["Субконто"+Ном].Видимость        = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость = Ложь;
		
		Колонки.ВидЗадолженности.Видимость = Истина;
		
	Иначе

		ЭлементыФормы.ОсновнаяПанель.Страницы.ВспомогательныйСчет.Видимость = Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость          = Истина;
		
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			ЭлементыФормы.КонтрагентКредитор.Видимость                     = Истина;
			ЭлементыФормы.ДоговорКонтрагента.Видимость                     = Истина;
			ЭлементыФормы.НадписьДоговорКонтрагента.Видимость              = Истина;
			ЭлементыФормы.НадписьКонтрагентКредитор.Видимость              = Истина;
			ЭлементыФормы.НадписьКонтрагентКредитор.Заголовок              = "Получатель";
			ЭлементыФормы.РамкаГруппыДт.Заголовок = "Счет переноса дебиторской задолженности";
			ЭлементыФормы.РамкаГруппыКт.Заголовок = "Счет переноса кредиторской задолженности";
		Иначе
			ЭлементыФормы.КонтрагентКредитор.Видимость                     = Ложь;
			ЭлементыФормы.ДоговорКонтрагента.Видимость                     = Ложь;
			ЭлементыФормы.НадписьДоговорКонтрагента.Видимость              = Ложь;
			ЭлементыФормы.НадписьКонтрагентКредитор.Видимость              = Ложь;
			ЭлементыФормы.РамкаГруппыДт.Заголовок = "Счет списания дебиторской задолженности";
			ЭлементыФормы.РамкаГруппыКт.Заголовок = "Счет списания кредиторской задолженности";
		КонецЕсли;

		ЭлементыФормы.НадписьКонтрагент.Заголовок                          = "Контрагент";
		ЭлементыФормы.ОсновнаяПанель.Страницы.УменьшениеДолга.Видимость    = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Взаиморасчеты.Заголовок      = "Дебиторская задолженность";
		ЭлементыФормы.СуммыДолга.ОтборСтрок.ВидЗадолженности.Использование = Истина;
		ЭлементыФормы.СуммыДолга.ОтборСтрок.ВидЗадолженности.Значение      = Перечисления.ВидыЗадолженности.Дебиторская;
		ЭлементыФормы.СуммыДолгаУменьшение.ОтборСтрок.ВидЗадолженности.Использование = Истина;
		ЭлементыФормы.СуммыДолгаУменьшение.ОтборСтрок.ВидЗадолженности.Значение      = Перечисления.ВидыЗадолженности.Кредиторская;
		
		Колонки.ВидЗадолженности.Видимость = Ложь;

		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			Для Ном = 1 по 3 Цикл
				ЭлементыФормы["НадписьСубконтоДт"+Ном].Видимость = Ложь;
				ЭлементыФормы["СубконтоДт"+Ном].Видимость        = Ложь;
				
				ЭлементыФормы["НадписьСубконтоКт"+Ном].Видимость = Ложь;
				ЭлементыФормы["СубконтоКт"+Ном].Видимость        = Ложь;
			КонецЦикла;
			
		Иначе	
			Суффиксы = Новый Структура("Дт,Кт",Истина,Истина);
			
			Для каждого СуффиксСчета Из Суффиксы Цикл
				ТекущийСчет = ЭтотОбъект["Счет"+СуффиксСчета.Ключ];
				ВидыСубконтоСчета = ТекущийСчет.ВидыСубконто;
				
				Для Ном = 1 по 3 Цикл
					Если (Ном <= ВидыСубконтоСчета.Количество()) и (ЗначениеЗаполнено(ТекущийСчет)) Тогда
						ЭлементыФормы["НадписьСубконто"+СуффиксСчета.Ключ+Ном].Заголовок = ВидыСубконтоСчета[Ном-1].ВидСубконто.Наименование;
						ЭлементыФормы["НадписьСубконто"+СуффиксСчета.Ключ+Ном].Видимость = СуффиксСчета.Значение;
						ЭлементыФормы["Субконто"+СуффиксСчета.Ключ+Ном].Видимость        = СуффиксСчета.Значение;
					Иначе
						ЭлементыФормы["НадписьСубконто"+СуффиксСчета.Ключ+Ном].Видимость = Ложь;
						ЭлементыФормы["Субконто"+СуффиксСчета.Ключ+Ном].Видимость        = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли; 
		
	КонецЕсли;
	
	ВидимостьКолонокСписания = (ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности); 
	ЭлементыФормы.СуммыДолга.Колонки.СуммаНУ.Видимость           = ВидимостьКолонокСписания;
	ЭлементыФормы.СуммыДолгаУменьшение.Колонки.СуммаНУ.Видимость = ВидимостьКолонокСписания;
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		РаботаСДиалогами.ВыбратьВидОперации(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	// Установка кнопок подменю перейти
	УстановитьПодменюПерейти();

КонецПроцедуры // ПередОткрытием()

Процедура ИзменениеТекущейСтраницы()
	
	Если (Не ЭтотОбъект.ЭтоНовый()) и (ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета) Тогда
		СтраницыСТабЧастями = Новый СписокЗначений; // значение - имя страницы, представление - имя табличного поля
		СтраницыСТабЧастями.Добавить("Взаиморасчеты",	"СуммыДолга");
		СтраницыСТабЧастями.Добавить("УменьшениеДолга",	"СуммыДолгаУменьшение");
			
		Для каждого ЭлементСписка из СтраницыСТабЧастями Цикл
			ИмяСтраницы = ЭлементСписка.Значение;
			ИмяТаблЧасти = ЭлементСписка.Представление;
			Страница = ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницы];
				
			Если Страница.Видимость Тогда
					
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				               |	КорректировкаДолгаСуммыДолга.НомерСтроки
				               |ИЗ
				               |	Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолгаСуммыДолга
				               |ГДЕ
				               |	КорректировкаДолгаСуммыДолга.ВидЗадолженности = &ВидЗадолженности
				               |	И КорректировкаДолгаСуммыДолга.Ссылка = &ЭтотОбъект";
				Запрос.УстановитьПараметр("ВидЗадолженности", ЭлементыФормы[ИмяТаблЧасти].ОтборСтрок.ВидЗадолженности.Значение);
				Запрос.УстановитьПараметр("ЭтотОбъект", ЭтотОбъект.Ссылка);
				Результат = Запрос.Выполнить();
					
				Если Не Результат.Пустой() Тогда 
					ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = Страница;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ИзменениеТекущейСтраницы()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(
			ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, , ПараметрОбъектКопирования);

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("ДоговорКонтрагента");
	СтруктураКолонок.Вставить("Сделка");
	СтруктураКолонок.Вставить("КурсВзаиморасчетов");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.СуммыДолга.Колонки, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	// Установить видимость элементов
	УстановитьВидимость();
	ИзменениеТекущейСтраницы();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить активный реквизит.
	Если ВидОперации=Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		СтруктураРеквизитов = Новый Структура("Дата,Организация,ПодразделениеОрганизации,Контрагент,КонтрагентКредитор,ВалютаДокумента,ДоговорКонтрагента");
	Иначе
		СтруктураРеквизитов = Новый Структура("Дата,Организация,ПодразделениеОрганизации,Контрагент,ВалютаДокумента");		
	КонецЕсли;
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма, СтруктураРеквизитов, ЭлементыФормы.СуммыДолга);
	
	ВывестиНадписи();
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельСуммыДолгаДействиеЗаполнитьОстаткамиПоВзаиморасчетам(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе" , 60,);
		Возврат;
	КонецЕсли;

	СтрокаСообщения = "";
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		Если НЕ ЗначениеЗаполнено(КонтрагентДебитор) и НЕ ЗначениеЗаполнено(КонтрагентКредитор) тогда
			СтрокаСообщения = "Не выбраны контрагенты (дебитор и кредитор)! Заполнение невозможно!";
		ИначеЕсли НЕ ЗначениеЗаполнено(КонтрагентДебитор) Тогда
			СтрокаСообщения = "Не выбран контрагент (дебитор)! Заполнение невозможно!";
		ИначеЕсли НЕ ЗначениеЗаполнено(КонтрагентКредитор) Тогда
			СтрокаСообщения = "Не выбран контрагент (кредитор)! Заполнение невозможно!";
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(КонтрагентДебитор) Тогда
			СтрокаСообщения = "Не выбран контрагент! Заполнение невозможно!";
	КонецЕсли;
	
	Если не ПустаяСтрока(СтрокаСообщения) Тогда
		Предупреждение(СтрокаСообщения);
		Возврат;
	КонецЕсли;
    
	ПродолжитьОбработку = Истина;
	
	ОчиститьСтрокиТабЧасти("Перед заполнением табличная часть будет очищена. Заполнить?", ПродолжитьОбработку,
	?(ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета,Неопределено, ?(Кнопка.Имя = "ЗаполнитьОстаткамиПоВзаиморасчетамДебитор", Перечисления.ВидыЗадолженности.Дебиторская,Перечисления.ВидыЗадолженности.Кредиторская)));
	
	Если не ПродолжитьОбработку Тогда
	    Возврат;
	КонецЕсли; 
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		ЗаполнитьОстаткамиВзаиморасчетов(КонтрагентДебитор, Перечисления.ВидыЗадолженности.Дебиторская);
		ЗаполнитьОстаткамиВзаиморасчетов(КонтрагентКредитор, Перечисления.ВидыЗадолженности.Кредиторская);
	ИначеЕсли Кнопка.Имя = "ЗаполнитьОстаткамиПоВзаиморасчетамДебитор" тогда
		ЗаполнитьОстаткамиВзаиморасчетов(КонтрагентДебитор, Перечисления.ВидыЗадолженности.Дебиторская);
	Иначе
		ЗаполнитьОстаткамиВзаиморасчетов(КонтрагентДебитор, Перечисления.ВидыЗадолженности.Кредиторская);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельВзаиморасчетыДействиеЗаполнить()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	СтарыйВидОперации = ВидОперации;
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга[Кнопка.Имя];
	КонецЕсли;
	
	ПродолжитьОбработку = Истина;
	Если НЕ ЗначениеЗаполнено(СтарыйВидОперации) тогда
		// Вид операции ранее установлен не был. Специфические действия не требуются.
		
	ИначеЕсли СтарыйВидОперации = ВидОперации Тогда
		// Изменения не требуются
	ИначеЕсли СтарыйВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета тогда
		// Табличная часть заполнена по двум видам задолженности, но по (возможно) разным контрагентам.
		// Если контрагенты различаются, необходимо зачистить табличную часть по кредиторской задолженности
		
		Если не КонтрагентДебитор = КонтрагентКредитор Тогда
			ОчиститьСтрокиТабЧасти("Строки документа, относящиеся к кредиторской задолженности будут удалены. Продолжить?",ПродолжитьОбработку,Перечисления.ВидыЗадолженности.Кредиторская); 
		КонецЕсли; 
	ИначеЕсли (СтарыйВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности или СтарыйВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности) тогда
		Если  (ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности или ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности) тогда
			// По данным видам операции отборы по табличным частям совпадают. Дополнительная обработка не требуется.
		Иначе
			// Необходимо установить контрагента кредитора равного дебитору,
			// тогда заполненные уже табличные части будут содержать корректную информацию.
			КонтрагентКредитор = КонтрагентДебитор;
		КонецЕсли;
	
	КонецЕсли; 

	Если не ПродолжитьОбработку Тогда
		// Отменяем изменение вида операции
		ВидОперации = СтарыйВидОперации;
	КонецЕсли; 
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Проверка необходимости пересчета
	ФлагПересчета = Ложь;

	Для каждого СтрокаТаблицы Из СуммыДолга Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			ВалютаДоговора  = СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДоговора, мТекущаяДатаДокумента);
			СтарыйКурс      = СтруктураВалюты.Курс;
			СтараяКратность = СтруктураВалюты.Кратность;
			СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДоговора, Дата);
			НовыйКурс       = СтруктураВалюты.Курс;
			НоваяКратность  = СтруктураВалюты.Кратность;

			Если НЕ (НовыйКурс = СтарыйКурс И НоваяКратность = СтараяКратность) Тогда
				ФлагПересчета = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Если изменился курс пересчитаем взаиморасчеты
	Если ФлагПересчета Тогда
		ТекстВопроса = "На дату документа у валюты взаиморасчетов был задан другой курс.
		               |Установить курс взаиморасчетов в соответствии с курсом валюты?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого СтрокаТаблицы Из СуммыДолга Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
					ВалютаДоговора                        = СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов;
					СтруктураВалюты                       = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДоговора, Дата);
					СтрокаТаблицы.КурсВзаиморасчетов      = СтруктураВалюты.Курс;
					СтрокаТаблицы.КратностьВзаиморасчетов = СтруктураВалюты.Кратность;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении реквизита Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	КонтрагентКредиторПриИзменении(Элемент);

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьСтрокиТабЧасти("При смене организации табличная часть будет очищена. Продолжить?",СтандартнаяОбработка,Неопределено, 
				Истина, ВыбранноеЗначение, "Организация"); 
КонецПроцедуры // ОрганизацияОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода контрагента.
//
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Если заполнена табличная часть, то ее надо очищать при несовпадении владельца с выбранным значением.
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		ОчиститьСтрокиТабЧасти("При смене контрагента информация о дебиторской задолженности в табличной части. Продолжить?",СтандартнаяОбработка,Перечисления.ВидыЗадолженности.Дебиторская, 
					Истина, ВыбранноеЗначение, "Владелец"); 
	Иначе
	
		ОчиститьСтрокиТабЧасти("При смене контрагента табличные части будут очищены. Продолжить?",СтандартнаяОбработка, Неопределено, 
					Истина, ВыбранноеЗначение, "Владелец"); 
	КонецЕсли; 
	
КонецПроцедуры // КонтрагентОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода контрагента-кредитора.
//
Процедура КонтрагентКредиторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		// Если заполнена табличная часть, то ее надо очищать при несовпадении владельца с выбранным значением.
		ОчиститьСтрокиТабЧасти("При смене контрагента информация о кредиторской задолженности в табличной части будет очищена. Продолжить?", СтандартнаяОбработка,Перечисления.ВидыЗадолженности.Кредиторская, 
					Истина, ВыбранноеЗначение, "Владелец"); 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода корр счета.
//
Процедура КоррСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ СУММЫДОЛГА

// Процедура - обработчик события "ПриИзменении" поля ввода договора.
//
Процедура СуммыДолгаДоговорКонтрагентаПриИзменении(Элемент)

	ТД = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	
	ТД.Сделка = Неопределено;

	Если ЗначениеЗаполнено(ТД.ДоговорКонтрагента) Тогда
		
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(ТД.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		ТД.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		ТД.КратностьВзаиморасчетов = СтруктураКурса.Кратность;

		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ТД);

	КонецЕсли;
	
	Если ТД.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
		Если НЕ ЗначениеЗаполнено(КонтрагентДебитор) Тогда
			КонтрагентДебитор = ТД.ДоговорКонтрагента.Владелец;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(КонтрагентКредитор) Тогда
			КонтрагентКредитор = ТД.ДоговорКонтрагента.Владелец;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ТД.ДоговорКонтрагента.Организация;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода сделки.
//
Процедура СуммыДолгаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	НачалоВыбораДокументаРасчетов(Элемент, ЭлементыФормы.СуммыДолга.ТекущиеДанные);
	
Конецпроцедуры

процедура НачалоВыбораДокументаРасчетов(Элемент, ТекущаяСтрока)	
	СтандартнаяОбработка = Ложь;

	ДоговорКонтрагентаДляПодбора  = ТекущаяСтрока.ДоговорКонтрагента;
	// Без договора сделку выбирать не будем.
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагентаДляПодбора) Тогда
		Предупреждение("Не выбран договор контрагента!");
		ЭлементыФормы.СуммыДолга.ТекущаяКолонка = ЭлементыФормы.СуммыДолга.Колонки.Найти("ДоговорКонтрагента");
		Возврат;
	КонецЕсли;
	
	// Заполним возможный список типов документов, которые могут быть расчетными.
	ОграничениеТипов = Новый Массив;
	//Список документов зависит от вида договора.
	Если ДоговорКонтрагентаДляПодбора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда

		ОграничениеТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ОказаниеУслуг"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.РеализацияОтгруженныхТоваров"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.РеализацияУслугПоПереработке"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ПередачаОС"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ПередачаНМА"));
		
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
		
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
		
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ОтражениеНачисленияНДС"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));

		// {ОбособленныеПодразделения
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.АвизоРасчетыВходящее"));
		// }ОбособленныеПодразделения 
	
	ИначеЕсли ДоговорКонтрагентаДляПодбора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда

		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНМА"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ПоступлениеИзПереработки"));
		
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
		
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
		
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ОтражениеНДСКВычету"));
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		
		// {ОбособленныеПодразделения
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.АвизоРасчетыВходящее"));
		// }ОбособленныеПодразделения 
	
	Иначе // Прочее
		ОграничениеТипов = Элемент.ТипЗначения.Типы();
	КонецЕсли;
	
	СписокОграниченийТипов = Новый СписокЗначений();
	СписокОграниченийТипов.ЗагрузитьЗначения(ОграничениеТипов);
	СписокОграниченийТипов.СортироватьПоЗначению();
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Организация",Организация);
	СтруктураОтбора.Вставить("Контрагент", ?(ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 
		И ТекущаяСтрока.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 
		КонтрагентКредитор, 
		КонтрагентДебитор));
	СтруктураОтбора.Вставить("ДоговорКонтрагента",ДоговорКонтрагентаДляПодбора);
	
	НачалоВыбораЗначенияСделки(Элемент, СтандартнаяОбработка, СтруктураОтбора, СписокОграниченийТипов, ТекущаяСтрока);
	
КонецПроцедуры // СуммыДолгаСделкаНачалоВыбора()

// Процедура выполняет стандартные действия при начале выбора документа составного типа в формах документов.
//
// Параметры:
//  ДокументОбъект       - объект редактируемого документа;
//  ФормаДокумента       - форма редактируемого документа;
//  ЭлементФормы         - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события 
//                         начала выбора для данного элемента формы документа.
//  СтруктураОтбора      - структура, содержащая имена и значения отборов в форме выбора.
//  ИмяТабличнойЧасти    - имя табличной части
//
Процедура НачалоВыбораЗначенияСделки(ЭлементФормы, СтандартнаяОбработка, СтруктураОтбора, СписокОграниченияТипов,ТекущаяСтрока)

	СтандартнаяОбработка = Ложь;

	// Заполним возможный список типов документов, которые могут быть в этом реквизите.
	СписокТипов = Новый СписокЗначений;

	МассивТипов = ЭлементФормы.ТипЗначения.Типы();

	Для каждого ЭлементМассива Из МассивТипов Цикл
		Если не СписокОграниченияТипов = Неопределено Тогда
			Если СписокОграниченияТипов.НайтиПоЗначению(ЭлементМассива) = Неопределено Тогда
				 // Тип не вписывается в полученные ограничения
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		ПустоеЗначение = Новый(ЭлементМассива);
		ОбъектОписанияМетаданных = ПустоеЗначение.Метаданные();
		СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());

	КонецЦикла; 

	СписокТипов.СортироватьПоПредставлению();
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, ЭлементФормы);

	Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
		Возврат;
	КонецЕсли;
	
	ВыбранныйТип = ВыбранныйЭлемент.Значение;

	//Если ТипЗнч(ЭлементФормы.Значение) <> Тип("ДокументСсылка." + ВыбранныйТип) Тогда
	//	//ЭлементФормы.Значение = Документы[ВыбранныйТип].ПустаяСсылка();
	//КонецЕсли;

	Если ВыбранныйТип = "ДокументРасчетовСКонтрагентом" Тогда

		МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		СтруктураОтбора.Вставить("КонецПериода",               Дата-1);
		СтруктураОтбора.Вставить("СчетДляОпределенияОстатков",ТекущаяСтрока.СчетУчетаРасчетов);
		СтруктураОтбора.Вставить("СторонаСчета",?(ТекущаяСтрока.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская,1,0));
		СтруктураОтбора.Вставить("ЭтоНовыйДокумент",ЭтоНовый());
		
		УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураОтбора, ЭлементФормы, ?(не СписокОграниченияТипов = Неопределено,Новый ОписаниеТипов(СписокОграниченияТипов.ВыгрузитьЗначения()),ЭлементФормы.ТипЗначения));
		Возврат;

	КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ВыбранныйТип].ПолучитьФормуВыбора(,ЭлементФормы,);

	// Отфильтруем список документов.
	Для каждого ЭлементСтруктуры Из СтруктураОтбора Цикл

		Попытка
			Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
				ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.ВСписке;
			КонецЕсли;

			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;

		Исключение
			// нет таких отборов как заявлено в структуре.
		КонецПопытки;
	КонецЦикла;

	Если ЗначениеЗаполнено(ЭлементФормы.Значение) и ТипЗнч(ЭлементФормы.Значение) = Тип("ДокументСсылка." + ВыбранныйТип)Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = ЭлементФормы.Значение;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "СуммыДолга". Формирует данные в колонке "Валюта" и устанавливает, при необходимости
// автоотметку незаполенного для поля "Сделка
//
Процедура СуммыДолгаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.СуммыДолга.Колонки.Валюта.Видимость	Тогда
		ОформлениеСтроки.Ячейки.Валюта.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Валюта.Текст = ДанныеСтроки.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	ВывестиНадписи();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаРасчетов.
//
Процедура СуммыДолгаСчетУчетаРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода договора.
Процедура СуммыДолгаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.СуммыДолга.ТекущиеДанные;

	Если СтрокаТабличнойЧасти.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
		Контрагент = КонтрагентКредитор
	Иначе
		Контрагент = КонтрагентДебитор
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента,
	   	                                    Неопределено, СтандартнаяОбработка);
КонецПроцедуры

Процедура ВывестиНадписи() 
	
	ТабСумм         = СуммыДолга.Выгрузить();
	
	Если ВалютаДокумента = мВалютаРегламентированногоУчета или ВалютаДокумента = Справочники.Валюты.ПустаяСсылка() Тогда
		ТабСумм.Свернуть("ВидЗадолженности","Сумма");
	Иначе
		ТабСумм.Свернуть("ВидЗадолженности","СуммаВзаиморасчетов");
		ТабСумм.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
	КонецЕсли; 
	
	СуммаДтЗадолж  = 0;
	СуммаКтЗадолж = 0;
	
	Для каждого СтрокаТаблицы Из ТабСумм Цикл
		Если  СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			СуммаДтЗадолж  = СтрокаТаблицы.Сумма;
		ИначеЕсли  СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
			СуммаКтЗадолж = СтрокаТаблицы.Сумма;
		КонецЕсли; 
	КонецЦикла; 

	Разница = СуммаДтЗадолж - СуммаКтЗадолж;
	
	ЭлементыФормы.НадписьДебиторскаяЗадолженность.Заголовок
							= "Дебиторская задолженность: " + Формат(СуммаДтЗадолж, "ЧЦ=15; ЧДЦ=2; ЧН=-")+" " +Строка(ВалютаДокумента);
	ЭлементыФормы.НадписьКредиторскаяЗадолженность.Заголовок
							= "Кредиторская задолженность: " + Формат(СуммаКтЗадолж, "ЧЦ=15; ЧДЦ=2; ЧН=-")+" "+Строка(ВалютаДокумента);
							
	Если Разница = 0 И ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		ЭлементыФормы.НадписьВзаимозачет.Заголовок = "ВЗАИМОЗАЧЕТ";
	Иначе
		ЭлементыФормы.НадписьВзаимозачет.Заголовок
							= "Разница: " + Формат(Разница, "ЧЦ=15;ЧДЦ=2") + " " + Строка(ВалютаДокумента);
	КонецЕсли;

КонецПроцедуры

Процедура ИспользоватьВспомогательныйСчетПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

/// Процедура - обработчик события "ПриИзменении" поля ввода корр счета.
//
Процедура СчетДтПриИзменении(Элемент)
	
	ПриИзмененииСчета(СчетДт,"Дт");

	УстановитьВидимость();
	
	мСчет = Элемент.Значение;
	
КонецПроцедуры

/// Процедура - обработчик события "ПриИзменении" поля ввода корр счета.
//
Процедура СчетКтПриИзменении(Элемент)
	
	ПриИзмененииСчета(СчетКт,"Кт");

	УстановитьВидимость();
	
	мСчет = Элемент.Значение;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода корр счета.
//
Процедура ВспомогательныйСчетПриИзменении(Элемент)
	
	ПриИзмененииСчета(СчетДт,"Дт");

	УстановитьВидимость();
	
КонецПроцедуры

// Устанавливает типы субконто при изменении счета
//
// Параметры
//  Счет  – <ПланыСчетов. .Ссылка> – Счет изменившийся
//  Суффикс- <Строка> – Суффикс реквизитов
//
Процедура ПриИзмененииСчета(Счет, Суффикс)

	ВидыСубконтоСчета = Счет.ВидыСубконто;

	Для Ном = 1 по 3 Цикл
		Если (Ном <= ВидыСубконтоСчета.Количество()) и (ЗначениеЗаполнено(Счет)) и
			ВидыСубконтоСчета[Ном-1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЭтотОбъект["Субконто"+Суффикс+Ном]))  Тогда
			// Без изменений
		ИначеЕсли Ном <= ВидыСубконтоСчета.Количество() тогда
			ЭтотОбъект["Субконто"+Суффикс+Ном] = Новый(ВидыСубконтоСчета[Ном-1].ВидСубконто.ТипЗначения.Типы()[0]);
		Иначе
			ЭтотОбъект["Субконто"+Суффикс+Ном] = Неопределено;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПриИзмененииСчета()


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура СуммыДолгаУменьшениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская;
		// Задолженность кредиторская, но закладка видна при тех видах операций, когда контрагент один - КонтрагентДебитор
		УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(Элемент.ТекущиеДанные.ДоговорКонтрагента,КонтрагентДебитор,Организация);
		СуммыДолгаУменьшениеДоговорКонтрагентаПриИзменении("");
	КонецЕсли; 
	
КонецПроцедуры

Процедура СуммыДолгаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И (ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета) Тогда
		Элемент.ТекущиеДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская;
		УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(Элемент.ТекущиеДанные.ДоговорКонтрагента,КонтрагентДебитор,Организация);
		СуммыДолгаДоговорКонтрагентаПриИзменении("");
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	ВывестиНадписи();
КонецПроцедуры

Процедура ВалютаДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если не ВалютаДокумента = ВыбранноеЗначение Тогда
		ОчиститьСтрокиТабЧасти("При смене валюты табличная часть будет очищена. Продолжить?",СтандартнаяОбработка,Неопределено); 
	КонецЕсли; 
КонецПроцедуры

Процедура ВалютаДокументаОчистка(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ОчиститьСтрокиТабЧасти("При смене валюты табличная часть будет очищена. Продолжить?",СтандартнаяОбработка,Неопределено); 
	КонецЕсли; 
КонецПроцедуры

Процедура КонтрагентКредиторПриИзменении(Элемент)
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, , , , "КонтрагентКредитор");
	Иначе
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	ДоговорКонтрагентаПриИзменении(Элемент);
	
	ПродолжитьОбработку = Истина;
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		// Если заполнена табличная часть, то ее надо очищать при несовпадении владельца с выбранным значением.
		ОчиститьСтрокиТабЧасти("При смене контрагента информация о кредиторской задолженности в табличной части будет очищена. Продолжить?", ПродолжитьОбработку,Перечисления.ВидыЗадолженности.Кредиторская, 
					Истина, КонтрагентКредитор, "Владелец"); 
					
		Если не ПродолжитьОбработку Тогда
			// Заполнена информация по кредиторской задолженности, отменили смену контрагента.
			// Старого контрагента можно получить из строк ТЧ по кредиторской задолженности.
			СтрокаДолга = СуммыДолга.Найти(Перечисления.ВидыЗадолженности.Кредиторская,"ВидЗадолженности");
			Если Не СтрокаДолга = Неопределено Тогда
				КонтрагентКредитор = СтрокаДолга.ДоговорКонтрагента.Владелец;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура СуммыДолгаУменьшениеДоговорКонтрагентаПриИзменении(Элемент)
	
	ТД = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
	
	ТД.Сделка = Неопределено;

	Если ЗначениеЗаполнено(ТД.ДоговорКонтрагента) Тогда
		
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(ТД.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		ТД.КурсВзаиморасчетов = СтруктураКурса.Курс;
		ТД.КратностьВзаиморасчетов = СтруктураКурса.Кратность;

		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ТД);

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(КонтрагентДебитор) Тогда
		КонтрагентДебитор = ТД.ДоговорКонтрагента.Владелец;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ТД.ДоговорКонтрагента.Организация;
	КонецЕсли;

КонецПроцедуры

Процедура СуммыДолгаУменьшениеДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;

	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		Контрагент = КонтрагентКредитор
	Иначе
		Контрагент = КонтрагентДебитор
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента,
	   	                                    Неопределено, СтандартнаяОбработка);
КонецПроцедуры

Процедура СуммыДолгаУменьшениеСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоВыбораДокументаРасчетов(Элемент, ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные);

КонецПроцедуры

Процедура ВалютаДокументаПриИзменении(Элемент)
	
	КурсИКратность = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата); 
	КурсДокумента = КурсИКратность.Курс;
	КратностьДокумента = КурсИКратность.Кратность;
	
	Если Не ВалютаДокумента = мВалютаРегламентированногоУчета и ЗначениеЗаполнено(ВалютаДокумента) Тогда
		// Установить курс в табличной части, пересчитать рублевый эквивалент для договоров в условных единицах
		Для каждого Строка из СуммыДолга Цикл
			Строка.КурсВзаиморасчетов		= КурсДокумента;
			Строка.КратностьВзаиморасчетов	= КратностьДокумента;
			
			ПересчитатьСуммуПоСтроке(Строка,Ложь);
		КонецЦикла; 
	КонецЕсли; 
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СуммыДолгаСуммаПриИзменении(Элемент)
	
	ТД = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД);
	
КонецПроцедуры

Процедура ПересчитатьСуммуПоСтроке(СтрокаДанных,ПересчетВалютнойСуммы = Истина)

	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДоговора = СтрокаДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	РасчетыВУЕ = СтрокаДанных.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	Если РасчетыВУЕ Тогда
		Если ПересчетВалютнойСуммы Тогда
			СтрокаДанных.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДанных.Сумма,
					мВалютаРегламентированногоУчета, ВалютаДоговора,
					1, СтрокаДанных.КурсВзаиморасчетов,
					1,СтрокаДанных.КратностьВзаиморасчетов);
		Иначе
			СтрокаДанных.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДанных.СуммаВзаиморасчетов,
					ВалютаДоговора,мВалютаРегламентированногоУчета,
					СтрокаДанных.КурсВзаиморасчетов, 1, 
					СтрокаДанных.КратностьВзаиморасчетов, 1);
		КонецЕсли;  
	Иначе
		Если ПересчетВалютнойСуммы Тогда
			СтрокаДанных.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДанных.Сумма,
					ВалютаДокумента, ВалютаДоговора,
					КурсДокумента, СтрокаДанных.КурсВзаиморасчетов,
					КратностьДокумента,СтрокаДанных.КратностьВзаиморасчетов);
		Иначе
			СтрокаДанных.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДанных.СуммаВзаиморасчетов,
					ВалютаДоговора,ВалютаДокумента,
					СтрокаДанных.КурсВзаиморасчетов, КурсДокумента, 
					СтрокаДанных.КратностьВзаиморасчетов, КратностьДокумента);
		КонецЕсли;  
	КонецЕсли; 

КонецПроцедуры

Процедура СуммыДолгаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТД = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД, Ложь);

КонецПроцедуры

Процедура КурсДокументаПриИзменении(Элемент)
	Если Не ВалютаДокумента = мВалютаРегламентированногоУчета и ЗначениеЗаполнено(ВалютаДокумента) Тогда
		// Установить курс в табличной части, пересчитать рублевый эквивалент для договоров в условных единицах
		Для каждого Строка из СуммыДолга Цикл
			Строка.КурсВзаиморасчетов		= КурсДокумента;
			Строка.КратностьВзаиморасчетов	= КратностьДокумента;
			
			ПересчитатьСуммуПоСтроке(Строка,Ложь);
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

Процедура КурсДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаДокумента;
	ФормаВводаКурсаИКратности.КратностьВалюты = КратностьДокумента;
	ФормаВводаКурсаИКратности.КурсВалюты      = КурсДокумента;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;
	
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	
	Если СтруктураКурсаИКратности <> неопределено Тогда
		
		КурсДокумента = СтруктураКурсаИКратности.КурсВалюты;
		КратностьДокумента = СтруктураКурсаИКратности.КратностьВалюты;
		
		КурсДокументаПриИзменении(Элементыформы.КурсДокумента);
	КонецЕсли;

КонецПроцедуры

Процедура СуммыДолгаУменьшениеСуммаПриИзменении(Элемент)
	
	ТД = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД);
КонецПроцедуры

Процедура СуммыДолгаУменьшениеСуммаВзаиморасчетовПриИзменении(Элемент)
	ТД = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД, Ложь);
КонецПроцедуры

Процедура СуммыДолгаУменьшениеКурсВзаиморасчетовПриИзменении(Элемент)
	ТД = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД);
КонецПроцедуры

Процедура СуммыДолгаКурсВзаиморасчетовПриИзменении(Элемент)
	ТД = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД);

КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, КонтрагентКредитор, ДоговорКонтрагента,
	   	                                    Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(КонтрагентКредитор) Тогда
		
		КонтрагентКредитор = ДоговорКонтрагента.Владелец;
		
	КонецЕсли;
	
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, КонтрагентКредитор, ДоговорКонтрагента);
	
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		СчетДт = СчетаУчета.СчетРасчетов;
		СчетКт = СчетаУчета.СчетАвансов;
	ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
		Тогда
		СчетДт = СчетаУчета.СчетАвансовПокупателя;
		СчетКт = СчетаУчета.СчетРасчетовПокупателя;
	ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		СчетДт = СчетаУчета.СчетРасчетовСКомитентом;
		СчетКт = СчетаУчета.СчетРасчетовСКомитентом;
	КонецЕсли;
	
КонецПроцедуры

 Процедура СуммыДолгаВидЗадолженностиПриИзменении(Элемент)
	 
	ТД = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	Если ТД.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
  		УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ТД.ДоговорКонтрагента,КонтрагентДебитор,Организация);
	ИначеЕсли  ТД.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
  		УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ТД.ДоговорКонтрагента,КонтрагентКредитор,Организация);		
	КонецЕсли;
	СуммыДолгаДоговорКонтрагентаПриИзменении("");

 КонецПроцедуры

 // Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета Тогда
		
		ЕстьСтрокиДебиторки = СуммыДолга.Найти(Перечисления.ВидыЗадолженности.Дебиторская, "ВидЗадолженности") <> Неопределено;
		ЭлементыФормы.СчетДт.АвтоОтметкаНезаполненного = ЕстьСтрокиДебиторки;
		Если НЕ ЭлементыФормы.СчетДт.АвтоОтметкаНезаполненного Тогда
			ЭлементыФормы.СчетДт.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	
		ЕстьСтрокиКредиторки = СуммыДолга.Найти(Перечисления.ВидыЗадолженности.Кредиторская, "ВидЗадолженности") <> Неопределено;
		ЭлементыФормы.СчетКт.АвтоОтметкаНезаполненного = ЕстьСтрокиКредиторки;
		Если НЕ ЭлементыФормы.СчетКт.АвтоОтметкаНезаполненного Тогда
			ЭлементыФормы.СчетКт.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

