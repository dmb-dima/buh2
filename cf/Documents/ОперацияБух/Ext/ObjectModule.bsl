////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой бухгалтерской справки.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма бухгалтерской справки.
//
Функция ПечатьБухгалтерскойСправки()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацияБух.Организация,
	|	ОперацияБух.Номер,
	|	ОперацияБух.Дата,
	|	ОперацияБух.Содержание
	|ИЗ
	|	Документ.ОперацияБух КАК ОперацияБух
	|ГДЕ
	|	ОперацияБух.Ссылка = &Ссылка";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.СчетДт,
	|	ХозрасчетныйДвиженияССубконто.ПодразделениеДт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	ХозрасчетныйДвиженияССубконто.ПодразделениеКт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ХозрасчетныйДвиженияССубконто.ВалютаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютаКт,
	|	ХозрасчетныйДвиженияССубконто.Сумма,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоДт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт,
	|	ХозрасчетныйДвиженияССубконто.Содержание
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Регистратор) КАК ХозрасчетныйДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаДвижений = Запрос.Выполнить().Выбрать();
	
	Макет = ПолучитьМакет("БухгалтерскаяСправка");
	
	// Получаем области макета для вывода в табличный документ.
	ШапкаДокумента   = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ПодвалТаблицы    = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ПодвалДокумента  = Макет.ПолучитьОбласть("Подвал");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию.
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя.
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОперацияБух_БухгалтерскаяСправка";

	// Выведем шапку документа.
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
	
	ШапкаДокумента.Параметры.Организация    = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	ШапкаДокумента.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Док);
	ШапкаДокумента.Параметры.ДатаДокумента  = Формат(Док.Дата, "ДЛФ=D");
	ШапкаДокумента.Параметры.Содержание     = Док.Содержание;
	
	ТабДокумент.Вывести(ШапкаДокумента);
	
	// Выведем заголовок таблицы.
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	// Выведем строки документа.
	Пока ВыборкаДвижений.Следующий() Цикл
		
		СтрокаТаблицы.Параметры.Заполнить(ВыборкаДвижений);
		
		АналитикаДт = Строка(ВыборкаДвижений.СубконтоДт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоДт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоДт3);
					
		АналитикаКт = Строка(ВыборкаДвижений.СубконтоКт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоКт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоКт3);
					
		СтрокаТаблицы.Параметры.АналитикаДт = АналитикаДт;
		СтрокаТаблицы.Параметры.АналитикаКт = АналитикаКт;
									 
		// Проверим, помещается ли строка с подвалом.
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(СтрокаТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалДокумента);
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			// Выведем подвал таблицы.
			ТабДокумент.Вывести(ПодвалТаблицы);
				
			// Выведем разрыв страницы.
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

			// Выведем заголовок таблицы.
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;
		
		ТабДокумент.Вывести(СтрокаТаблицы);
		
	КонецЦикла;
	
	// Выведем подвал таблицы.
	ТабДокумент.Вывести(ПодвалТаблицы);
	
	// Выведем подвал документа.
	ПодвалДокумента.Параметры.РасшифровкаПодписиИсполнителя = ?(НЕ ЗначениеЗаполнено(Ответственный), "", ОбщегоНазначения.ФамилияИнициалыФизЛица(Ответственный.ФизЛицо));
	ТабДокумент.Вывести(ПодвалДокумента);
	
	Возврат ТабДокумент;
		
КонецФункции // ПечатьБухгалтерскойСправки()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт

	// Получить экземпляр документа на печать
	Если ИмяМакета = "БухгалтерскаяСправка" Тогда

		ТабДокумент = ПечатьБухгалтерскойСправки();
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("БухгалтерскаяСправка", "Бухгалтерская справка");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Производит замену предопределенных конструкций в формульном выражении
// К формульным конструкциям относятся выражения типа:  Проводка1.СубконтоДт1
//
// Параметры:
//  Формула  - Строка формулы
//  Проводки - ссылка на текущий набор записей регистра бухгалтерии
//
// Возвращаемое значение:
//  Строка - преобразованное формульное выражение
//
Функция ЗаменитьПараметры(Формула, Проводки)

	Для каждого Пров Из Проводки Цикл

		Ном = 1 + Проводки.Индекс(Пров);

		// Субконто Дт
		Если Не Пров.СчетДт.Пустая() Тогда

			ВидыСубконто =Пров.СчетДт.ВидыСубконто;
			Для Каждого Стр Из ВидыСубконто Цикл

				ИндСубк = ВидыСубконто.Индекс(Стр);
				Что     = "Проводка" + Ном + ".СубконтоДт" + (ИндСубк+1);
				НаЧто   = "Проводки[" + (Ном-1) + "].СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоКоду(""" + Стр.ВидСубконто.Код + """)]";
				Формула = СтрЗаменить(Формула, Что, НаЧто);

			КонецЦикла;

		КонецЕсли;

		// Субконто Кт
		Если Не Пров.СчетКт.Пустая() Тогда

			ВидыСубконто =Пров.СчетКт.ВидыСубконто;

			Для Каждого Стр Из ВидыСубконто Цикл

				ИндСубк = ВидыСубконто.Индекс(Стр);
				Что     = "Проводка" + Ном + ".СубконтоКт" + (ИндСубк+1);
				НаЧто   = "Проводки[" + (Ном-1) + "].СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоКоду(""" + Стр.ВидСубконто.Код + """)]";
				Формула = СтрЗаменить(Формула, Что, НаЧто);

			КонецЦикла;

		КонецЕсли;

		// остальные поля
		Что     = "Проводка" + Ном;
		НаЧто   = "Проводки[" + (Ном-1) + "]";
		Формула = СтрЗаменить(Формула, Что, НаЧто);

	КонецЦикла;

	Возврат(Формула);

КонецФункции // ЗаменитьПараметры()

// Разбирает строку на две части: до подстроки разделителя и после
//
// Параметры:
//  Стр            - разбираемая строка
//  Разделитель    - подстрока-разделитель
//  Режим          - 0 - разделитель в возвращаемые подстроки не включается
//                   1 - разделитель включается в левую подстроку
//                   2 - разделитель включается в правую подстроку
//
// Возвращаемое значение:
//  Правая часть строки - до символа-разделителя
// 
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0)

	ПраваяЧасть      = "";
	ПозРазделителя   = Найти(Стр, Разделитель);
	ДлинаРазделителя = СтрДлина(Разделитель);

	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть = Сред(Стр, ПозРазделителя + ?(Режим = 2, 0, ДлинаРазделителя));
		Стр         = СокрЛП(Лев(Стр, ПозРазделителя - ?(Режим = 1, -ДлинаРазделителя + 1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);

КонецФункции // ОтделитьРазделителем()

// Вычисляет значение поля (реквизита) проводки в соответствии с настройкой
// шаблона проводки в типовой операции
//
// Параметры:
//  ИмяПоля      - Строка - имя поля. Например: Сумма
//  Проводки	 - ссылка на текущий набор записей регистра бухгалтерии
//  Проводка     - ссылка на текущую запись в наборе регистра бухгалтерии
//  ШаблонЗаписи - ссылка на строку табличной части "Хозрасчетный" типовой операции
//  Формулы      - Структура, содержащая формулы полей
//  Параметры	 - Структура, содержащая значения параметров типовой операции
//
// Возвращаемое значение:
//  Значение типа соответствующего типу поля (реквизита) проводки
//
Функция ЗначениеПоля(ИмяПоля, Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры)

	Значение       = Неопределено;
	ПрограммныйКод = "";

	Если Формулы <> Неопределено Тогда

		Формула = СокрЛП(Формулы[СокрЛП(ИмяПоля)]);

		Если Формула <> "" Тогда

			Значение = "";
			Стр      = "";

			Для каждого Пар Из Параметры Цикл
				Стр = Стр + Пар.Ключ + " = Параметры." + Пар.Ключ + ";" + Символы.ПС;
			КонецЦикла;

			Стр = Стр + "Значение = " + ЗаменитьПараметры(Формула, Проводки) + ";";

			Попытка
				Выполнить(Стр);
			Исключение

				СтрокаМодуля    = ОтделитьРазделителем(ОписаниеОшибки(), "{");
				ОписаниеОшибки  = ОтделитьРазделителем(СтрокаМодуля, "}: ");
				Сообщить("Ошибка при вычислении значения поля по формуле: " + ИмяПоля + " - " + ОписаниеОшибки);

			КонецПопытки; 

			Возврат Значение;

		КонецЕсли;

	КонецЕсли;

	Значение = ШаблонЗаписи[ИмяПоля];

	Возврат Значение;

КонецФункции // ЗначениеПоля()

// Процедура устанавливает/снимает признак активности движений документа
//
Процедура УстановитьАктивностьДвижений(ФлагАктивности)
	
	Для Каждого Движение Из Движения Цикл   
		Движение.Прочитать();
		Для Каждого Строка Из Движение Цикл
			Строка.Активность = ФлагАктивности;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // УстановитьАктивностьДвижений()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет документ на основании типовой операции
//
// Параметры:
//  ТО       - ссылка на элемент справочника Типовые операции. Типовая операция,
//             на основании которой заполняется документ
//  Очистить - Булево - если Истина, то перед заполнением удаляются
//             существующие проводки
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаОснованииТиповойОперации(ТО, Очистить = Истина) Экспорт

	Проводки    = Движения.Хозрасчетный;

	Если Очистить = Истина Тогда
		Проводки.Очистить();
	КонецЕсли;

	// Инициализация параметров

	Параметры = Новый Структура();

	// Не запрашиваемые параметры
	Для каждого Параметр Из ТО.Параметры Цикл

		Если Не Параметр.НеЗапрашивать Тогда
			Продолжить;
		КонецЕсли;

		Параметры.Вставить(Параметр.Имя, Параметр.Значение);

	КонецЦикла;

	// Запрашиваемые параметры
	Для каждого Параметр Из ЗапрашиваемыеПараметры Цикл
		Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;

	// НачалоАлгоритма
	НачалоАлгоритма = "";
	Для каждого Параметр Из Параметры Цикл
		НачалоАлгоритма = НачалоАлгоритма + Параметр.Ключ + " = Параметры." + Параметр.Ключ + ";" + Символы.ПС;
	КонецЦикла;

	// КонецАлгоритма
	КонецАлгоритма = Символы.ПС;
	Для каждого Параметр Из Параметры Цикл
		КонецАлгоритма = КонецАлгоритма + "Параметры." + Параметр.Ключ + " = " + Параметр.Ключ + ";" + Символы.ПС;
	КонецЦикла;

	// АлгоритмПриВводе
	АлгоритмПриВводе = ТО.АлгоритмПриВводе;
	Если Не ПустаяСтрока(АлгоритмПриВводе) Тогда

		Попытка
			Выполнить(НачалоАлгоритма + АлгоритмПриВводе + КонецАлгоритма);
		Исключение

			СтрокаМодуля   = ОтделитьРазделителем(ОписаниеОшибки(), "{");
			ОписаниеОшибки = ОтделитьРазделителем(СтрокаМодуля, "}: ");
			Сообщить("Алгоритм типовой операции (перед формированием проводок):  " + ОписаниеОшибки);

		КонецПопытки;

	КонецЕсли;

	// Неудовлетворяющие условиям проводки будем добавлять в массив
	МассивУдаляемыхПроводок    = Новый Массив;

	// Заполняем проводки по шаблонам БУ
	Для каждого ШаблонЗаписи Из ТО.Хозрасчетный Цикл

		Проводка   = Проводки.Добавить();

		Формулы    = Неопределено;
		СтрФормулы = СокрЛП(ШаблонЗаписи.Формулы);

		Если СтрФормулы <> "" Тогда
			Формулы = ЗначениеИзСтрокиВнутр(СтрФормулы);
		КонецЕсли;

		СубконтоДт1     = "";
		СубконтоДт2     = "";
		СубконтоДт3     = "";

		КоличествоДт    = 0;
		ВалютаДт        = "";
		ВалютнаяСуммаДт = 0;

		СубконтоКт1     = "";
		СубконтоКт2     = "";
		СубконтоКт3     = "";

		КоличествоКт    = 0;
		ВалютаКт        = "";
		ВалютнаяСуммаКт = 0;

		Проводка.СчетДт = ЗначениеПоля("СчетДт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
		СчетДт          = Проводка.СчетДт;
		Проводка.ПодразделениеДт = ЗначениеПоля("ПодразделениеДт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
		ПодразделениеДт          = Проводка.ПодразделениеДт;

		Если Не Проводка.СчетДт.Пустая() Тогда

			ВидыСубконто = Проводка.СчетДт.ВидыСубконто;

			Для Каждого Стр Из ВидыСубконто Цикл

				ИмяПеременной = "СубконтоДт" + Строка(1+ВидыСубконто.Индекс(Стр));
				Зн            = ЗначениеПоля(ИмяПеременной, Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
				Проводка.СубконтоДт[Стр.ВидСубконто] = Зн;

				Выполнить(ИмяПеременной + " = Зн;");

			КонецЦикла;

			Если Проводка.СчетДт.Количественный Тогда
				Проводка.КоличествоДт = ЗначениеПоля("КоличествоДт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
				КоличествоДт          = Проводка.КоличествоДт;
			КонецЕсли;

			Если Проводка.СчетДт.Валютный Тогда

				Проводка.ВалютаДт        = ЗначениеПоля("ВалютаДт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
				ВалютаДт                 = Проводка.ВалютаДт;
				Проводка.ВалютнаяСуммаДт = ЗначениеПоля("ВалютнаяСуммаДт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
				ВалютнаяСуммаДт          = Проводка.ВалютнаяСуммаДт;

			КонецЕсли;

		КонецЕсли;

		Проводка.СчетКт = ЗначениеПоля("СчетКт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
		СчетКт          = Проводка.СчетКт;
		Проводка.ПодразделениеКт = ЗначениеПоля("ПодразделениеКт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
		ПодразделениеКт          = Проводка.ПодразделениеКт;

		Если Не Проводка.СчетКт.Пустая() Тогда

			ВидыСубконто = Проводка.СчетКт.ВидыСубконто;

			Для Каждого Стр Из ВидыСубконто Цикл

				ИмяПеременной = "СубконтоКт" + Строка(1+ВидыСубконто.Индекс(Стр));
				Зн            = ЗначениеПоля(ИмяПеременной, Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
				Проводка.СубконтоКт[Стр.ВидСубконто] = Зн;

				Выполнить(ИмяПеременной + " = Зн;");

			КонецЦикла;

			Если Проводка.СчетКт.Количественный Тогда
				Проводка.КоличествоКт = ЗначениеПоля("КоличествоКт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
				КоличествоКт          = Проводка.КоличествоКт;
			КонецЕсли;

			Если Проводка.СчетКт.Валютный Тогда

				Проводка.ВалютаКт        = ЗначениеПоля("ВалютаКт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
				ВалютаКт                 = Проводка.ВалютаКт;
				Проводка.ВалютнаяСуммаКт = ЗначениеПоля("ВалютнаяСуммаКт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
				ВалютнаяСуммаКт          = Проводка.ВалютнаяСуммаКт;

			КонецЕсли;

		КонецЕсли;

		Проводка.Сумма        = ЗначениеПоля("Сумма", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
		Сумма                 = Проводка.Сумма;
		Проводка.СуммаНуДт        = ЗначениеПоля("СуммаНуДт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
		СуммаНуДт                 = Проводка.СуммаНуДт;
		Проводка.СуммаПрДт        = ЗначениеПоля("СуммаПрДт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
		СуммаПрДт                 = Проводка.СуммаПрДт;
		Проводка.СуммаВрДт        = ЗначениеПоля("СуммаВрДт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
		СуммаВрДт                 = Проводка.СуммаВрДт;
		Проводка.СуммаНуКт        = ЗначениеПоля("СуммаНуКт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
		СуммаНуКт                 = Проводка.СуммаНуКт;
		Проводка.СуммаПрКт        = ЗначениеПоля("СуммаПрКт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
		СуммаПрКт                 = Проводка.СуммаПрКт;
		Проводка.СуммаВрКт        = ЗначениеПоля("СуммаВрКт", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);
		СуммаВрКт                 = Проводка.СуммаВрКт;

		Проводка.Содержание   = ЗначениеПоля("Содержание", Проводки, Проводка, ШаблонЗаписи, Формулы, Параметры);

		// Условие формирования проводки
		СтрокаУсловия = ШаблонЗаписи.Условие;

		Если Не ПустаяСтрока(СтрокаУсловия) Тогда

			УсловиеВыполняется = Ложь;
			АлгоритмУсловия    = НачалоАлгоритма + "УсловиеВыполняется = " + ЗаменитьПараметры(СтрокаУсловия, Проводки) + ";";

			Попытка

				Выполнить(АлгоритмУсловия);

				Если Не УсловиеВыполняется Тогда
					МассивУдаляемыхПроводок.Добавить(Проводка);
				КонецЕсли;

			Исключение

				СтрокаМодуля    = ОтделитьРазделителем(ОписаниеОшибки(), "{");
				ОписаниеОшибки  = ОтделитьРазделителем(СтрокаМодуля, "}: ");
				Сообщить("Условие формирования проводки №" + (1 + ТО.Хозрасчетный.Индекс(ШаблонЗаписи))  + " " + ОписаниеОшибки);

			КонецПопытки;

		КонецЕсли;

	КонецЦикла; // по шаблонам проводок

	// Выполним алгоритм после формирования проводок
	АлгоритмОперации = СокрЛП(ТО.АлгоритмПослеВвода);
	Если Не ПустаяСтрока(АлгоритмОперации) Тогда

		Попытка
			Выполнить(НачалоАлгоритма + ЗаменитьПараметры(АлгоритмОперации, Проводки));
		Исключение
			СтрокаМодуля    = ОтделитьРазделителем(ОписаниеОшибки(), "{");
			ОписаниеОшибки  = ОтделитьРазделителем(СтрокаМодуля, "}: ");
			Сообщить("Алгоритм типовой операции (после формирования проводок):  " + ОписаниеОшибки);
		КонецПопытки; 

	КонецЕсли;

	// Вычислим содержание операции по формуле
	ФормулаСодержания = СокрЛП(ТО.ФормулаСодержания);
	Если ФормулаСодержания <> "" Тогда

		АлгоритмСодержания = НачалоАлгоритма + "Содержание = " + ЗаменитьПараметры(ФормулаСодержания, Проводки) + ";";

		Попытка
			Выполнить(АлгоритмСодержания);
		Исключение
			СтрокаМодуля    = ОтделитьРазделителем(ОписаниеОшибки(), "{");
			ОписаниеОшибки  = ОтделитьРазделителем(СтрокаМодуля, "}: ");
			Сообщить("Формула содержания операции:  " + ОписаниеОшибки);
		КонецПопытки;

	КонецЕсли;

	// Вычислим сумму операции по формуле
	ФормулаСуммыОперации = СокрЛП(ТО.ФормулаСуммыОперации);
	Если ФормулаСуммыОперации <> "" Тогда

		АлгоритмСуммыОперации = НачалоАлгоритма + "СуммаОперации = " + ЗаменитьПараметры(ФормулаСуммыОперации, Проводки) + ";";

		Попытка
			Выполнить(АлгоритмСуммыОперации);
		Исключение
			СтрокаМодуля    = ОтделитьРазделителем(ОписаниеОшибки(), "{");
			ОписаниеОшибки  = ОтделитьРазделителем(СтрокаМодуля, "}: ");
			Сообщить("Формула суммы операции:  " + ОписаниеОшибки);
		КонецПопытки;

	КонецЕсли;

	// Удалим неудовлетворяющие условиям проводки
	Для каждого Проводка Из МассивУдаляемыхПроводок Цикл
		Проводки.Удалить(Проводка);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьНаОснованииТиповойОперации()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)

	Если ТипЗнч(ОбъектКопирования) <> Тип("ДокументОбъект.ОперацияБух") Тогда
		Возврат;
	КонецЕсли;

	Организация   = ОбъектКопирования.Организация;
	Комментарий   = ОбъектКопирования.Комментарий;
	Содержание    = ОбъектКопирования.Содержание;
	Ответственный = ОбъектКопирования.Ответственный;

	Для каждого Набор Из ОбъектКопирования.Движения Цикл
		
		Набор.Прочитать();
		Если Набор.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НаборТекущегоОбъекта = Движения[Набор.Метаданные().Имя];
		Если Лев(ТипЗНЧ(НаборТекущегоОбъекта),19) = "Регистр бухгалтерии" Тогда
			Для каждого ЗаписьНабора Из Набор Цикл
				
				НоваяЗапись = НаборТекущегоОбъекта.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора,,"Период,Регистратор,СубконтоДт,СубконтоКт");
				
				Для каждого Субконто Из ЗаписьНабора.СубконтоДт Цикл
					НоваяЗапись.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
				КонецЦикла;

				Для каждого Субконто Из ЗаписьНабора.СубконтоКт Цикл
					НоваяЗапись.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
				КонецЦикла;
				
			КонецЦикла;
		Иначе
			Для каждого ЗаписьНабора Из Набор Цикл
			
				НоваяЗапись = НаборТекущегоОбъекта.Добавить();
				Если Лев(ТипЗНЧ(НаборТекущегоОбъекта),18) = "Регистр накопления" Тогда
					Если НаборТекущегоОбъекта.Метаданные().ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
						НоваяЗапись.ВидДвижения = ЗаписьНабора.ВидДвижения;
					КонецЕсли;
				КонецЕсли;
				НоваяЗапись.Период      = ТекущаяДата();
				
				Если Лев(ТипЗНЧ(НаборТекущегоОбъекта),18) = "Регистр накопления" Тогда
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора,,"Период,Регистратор,ВидДвижения")
				Иначе
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора,,"Период,Регистратор")
				КонецЕсли;
			
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры // ПриКопировании()

Процедура ОбработкаЗаполнения(Основание)

	Если НЕ (ТипЗнч(Основание) = Тип("СправочникСсылка.ТиповыеОперации")) Тогда
		Возврат;
	КонецЕсли;

	#Если Клиент Тогда

		СписокТиповыхОпераций = ВосстановитьЗначение("СписокТиповыхОпераций");

		Если СписокТиповыхОпераций = Неопределено Тогда
			СписокТиповыхОпераций = Новый СписокЗначений; 
		Иначе

			Элемент = СписокТиповыхОпераций.НайтиПоЗначению(Основание);
			Если Элемент <> Неопределено Тогда
				СписокТиповыхОпераций.Удалить(Элемент);
			КонецЕсли;

		КонецЕсли;

		СписокТиповыхОпераций.Вставить(0, Основание, Строка(Основание));
		СохранитьЗначение("СписокТиповыхОпераций", СписокТиповыхОпераций);

	#КонецЕсли

	// Инициализация параметров
	Параметры = Новый Структура();
	Для каждого Пар Из Основание.Параметры Цикл
		Параметры.Вставить(Пар.Имя, Пар.Значение);
	КонецЦикла;

	// АлгоритмПередВводом
	АлгоритмПередВводом = Основание.АлгоритмПередВводом;
	Если Не ПустаяСтрока(АлгоритмПередВводом) Тогда

		// НачалоАлгоритма
		НачалоАлгоритма = "";
		Для каждого Пар Из Параметры Цикл
			НачалоАлгоритма = НачалоАлгоритма + Пар.Ключ + " = Параметры." + Пар.Ключ + ";" + Символы.ПС;
		КонецЦикла;

		// КонецАлгоритма
		КонецАлгоритма = Символы.ПС;
		Для каждого Пар Из Параметры Цикл
			КонецАлгоритма = КонецАлгоритма + "Параметры." + Пар.Ключ + " = " + Пар.Ключ + ";" + Символы.ПС;
		КонецЦикла;

		Попытка

			Выполнить(НачалоАлгоритма + АлгоритмПередВводом + КонецАлгоритма);

		Исключение

			СтрокаМодуля    = ОтделитьРазделителем(ОписаниеОшибки(), "{");
			ОписаниеОшибки  = ОтделитьРазделителем(СтрокаМодуля, "}: ");
			Сообщить("Алгоритм типовой операции (перед заполнением параметров):  " + ОписаниеОшибки);

		КонецПопытки;

	КонецЕсли;

	ЗапрашиваемыеПараметры.Очистить();
	ТиповаяОперация = Основание.Ссылка;
	СпособЗаполнения = "Типовые операции";
	
	Для каждого Пар Из Основание.Параметры Цикл

		Если Пар.НеЗапрашивать Тогда
			Продолжить
		КонецЕсли;

		ОписаниеТиповПараметра = Пар.Тип.Получить();

		СтрокаТЧ               = ЗапрашиваемыеПараметры.Добавить();

		СтрокаТЧ.Имя           = Пар.Имя;
		СтрокаТЧ.Представление = Пар.Представление;
		СтрокаТЧ.Значение      = ?(ТипЗнч(ОписаниеТиповПараметра) = Тип("ОписаниеТипов"), ОписаниеТиповПараметра.ПривестиЗначение(Параметры[Пар.Имя]), Параметры[Пар.Имя]);

	КонецЦикла;

	Если ЗапрашиваемыеПараметры.Количество() = 0 Тогда

		ЗаполнитьНаОснованииТиповойОперации(Основание);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Ссылка <> Неопределено И Ссылка.ПометкаУдаления <> ПометкаУдаления Тогда
		УстановитьАктивностьДвижений(НЕ ПометкаУдаления);
	ИначеЕсли ПометкаУдаления Тогда
		//запись помеченного на удаление документа с активными записями
		УстановитьАктивностьДвижений(Ложь);
	КонецЕсли;

КонецПроцедуры // ПередЗаписью()

