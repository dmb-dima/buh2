////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ЭлементЭталон;
Перем НадписьЭталон;

Перем ТиповаяОперация;

Функция тоОстатокНаСчете(Организация, Подразделение = неопределено, СчетУчета, Субконто1, Субконто2, Субконто3, Дата, Валюта)

	КолСубконто = СчетУчета.ВидыСубконто.Количество();
	Субконто = Новый Массив(3);

	Для Индекс = 0 по (КолСубконто - 1) Цикл

		ТипСубконто = СчетУчета.ВидыСубконто[Индекс].ВидСубконто.ТипЗначения;

		Если ТипСубконто.СодержитТип(ТипЗнч(Субконто1)) Тогда
			Субконто[Индекс] = Субконто1;

		ИначеЕсли ТипСубконто.СодержитТип(ТипЗнч(Субконто2)) Тогда
			Субконто[Индекс] = Субконто2;

		ИначеЕсли ТипСубконто.СодержитТип(ТипЗнч(Субконто3)) Тогда
			Субконто[Индекс] = Субконто3;

		КонецЕсли;

	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Субконто1",   Субконто[0]);
	Запрос.УстановитьПараметр("Субконто2",   Субконто[1]);
	Запрос.УстановитьПараметр("Субконто3",   Субконто[2]);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("СчетУчета",   СчетУчета);
	Запрос.УстановитьПараметр("Валюта",      Валюта);
	Запрос.УстановитьПараметр("Дата",        Дата);
	
	Запрос.Текст = "
	|ВЫБРАТЬ";
	
	ДобавитьЗапятую = Ложь;
	Для каждого Ресурс из Метаданные.РегистрыБухгалтерии.Хозрасчетный.Ресурсы Цикл
		ИмяРесурса = Ресурс.Имя;
		Если ДобавитьЗапятую Тогда
			Запрос.Текст = Запрос.Текст + ",";
			
		Иначе
			ДобавитьЗапятую = Истина;
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	ТаблицаОстатков." + ИмяРесурса + "ОстатокДт КАК " + ИмяРесурса + "ОстатокДт,
		|	ТаблицаОстатков." + ИмяРесурса + "ОстатокКт КАК " + ИмяРесурса + "ОстатокКт";
	КонецЦикла;
	
	Условие = "";
	Для Индекс = 1 по КолСубконто Цикл
		Если ЗначениеЗаполнено(Субконто[Индекс-1]) Тогда
			Условие = Условие + " И Субконто"+Индекс+" = &Субконто"+Индекс;
		КонецЕсли;
	КонецЦикла;

	Если Подразделение<>неопределено Тогда
		Условие = Условие + " И Подразделение = &Подразделение";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Условие = Условие + " И Валюта = &Валюта";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет = &СчетУчета, ,Организация = &Организация"+Условие+") КАК ТаблицаОстатков";

	Отчет = Запрос.Выполнить().Выгрузить();

	Результат = Новый Структура;

	Для каждого Колонка из Отчет.Колонки Цикл

		Если Отчет.Количество() > 0 Тогда
			Результат.Вставить(Колонка.Имя, Отчет.Итог(Колонка.Имя));

		Иначе
			Результат.Вставить(Колонка.Имя, 0);

		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Возвращает значение запрашиваемого параметра по имени
//
// Параметры:
//  Имя - Строка - имя параметра
//  Пар - в данную переменную помещается ссылка на строку ТP Параметры
//
// Возвращаемое значение:
//  Значение параметра
// 
Функция ПолучитьЗначениеПараметра(Имя)

	Возврат ЭлементыФормы[Имя].Значение;

КонецФункции

// Возвращает ОписаниеТипов запрашиваемого параметра
//
// Параметры:
//  Имя - Строка - имя параметра
//  Пар - в данную переменную помещается ссылка на строку ТЧ ЗапрашиваемыеПараметры
//
// Возвращаемое значение:
//  ОписаниеТипов запрашиваемого параметра
// 
Функция ОписаниеТиповПараметра(Имя, Пар=Неопределено) 

	Для каждого Пар Из ТиповаяОперация.Параметры Цикл

		Если Пар.Имя = Имя Тогда

			Если Пар.СвязьПоТипу = "" Тогда
				Возврат Пар.Тип.Получить();
			Иначе

				ЗначениеПараметраУстанавливающегоТип = ПолучитьЗначениеПараметра(Пар.СвязьПоТипу);
				Если ЗначениеПараметраУстанавливающегоТип = Неопределено Тогда
					Возврат Неопределено
				КонецЕсли;

				Попытка

					Если Пар.НомерСубконто > 0 Тогда
						Возврат ЗначениеПараметраУстанавливающегоТип.ВидыСубконто[Пар.НомерСубконто-1].ВидСубконто.ТипЗначения;
					Иначе
						Возврат ЗначениеПараметраУстанавливающегоТип.ТипЗначения;
					КонецЕсли;

				Исключение
					Возврат Неопределено;
				КонецПопытки;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Сообщить("В настройке типовой операции не найден параметр:  " + Имя);

	Возврат Неопределено;

КонецФункции

// Устанавливает координаты и привязки элемента управления типа ПолеВВода

// Параметры:
//  Эл - элемент управления
//  Сч - порядковый номер элемента управления
//
Процедура РасположитьЭлемент(Эл, Сч)

	Эл.Верх   = Число(ЭлементЭталон.Верх) + (ЭлементЭталон.Высота + 8) * (Сч-1);
	Эл.Лево   = ЭлементЭталон.Лево;
	Эл.Высота = ЭлементЭталон.Высота;
	Эл.Ширина = ЭлементЭталон.Ширина;

	Эл.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементЭталон,ГраницаЭлементаУправления.Право);

КонецПроцедуры // РасположитьЭлемент() 

// Устанавливает координаты и привязки элемента управления типа Надпись

// Параметры:
//  Эл - элемент управления
//  Сч - порядковый номер элемента управления
//
Процедура РасположитьНадпись(Эл, Сч)

	Эл.Верх   = НадписьЭталон.Верх + (НадписьЭталон.Высота + 0) * (Сч-1);
	Эл.Лево   = НадписьЭталон.Лево;
	Эл.Высота = НадписьЭталон.Высота;
	Эл.Ширина = НадписьЭталон.Ширина;

	Эл.УстановитьПривязку(ГраницаЭлементаУправления.Право, НадписьЭталон,ГраницаЭлементаУправления.Право);

КонецПроцедуры // РасположитьНадпись() 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ КОМАНДНОЙ ПАНЕЛИ

Процедура ПриИзмененииПараметра(Элемент)

	ДействиеПриИзмененииПараметра = Новый Действие("ПриИзмененииПараметра");
	ДействиеОчисткаПараметра      = Новый Действие("ОчисткаПараметра");

	ПередАлгоритмом = "";
	ПослеАлгоритма  = "";

	Для каждого Стр Из Параметры Цикл

		ПередАлгоритмом = ПередАлгоритмом + Стр.Имя + " = ЭлементыФормы." + Стр.Имя + ".Значение;" + Символы.ПС;
		ПослеАлгоритма  = ПослеАлгоритма  + "ЭлементыФормы." + Стр.Имя + ".Значение = " + Стр.Имя + ";" + Символы.ПС;

		Если Не ПустаяСтрока(Элемент) Тогда
			Если Элемент.Имя = Стр.Имя Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;

		Сч = 1 + Параметры.Индекс(Стр);

		ОписаниеПараметра      = "";
		ОписаниеТиповПараметра = ОписаниеТиповПараметра(Стр.Имя, ОписаниеПараметра);

		ПолеВвода = ЭлементыФормы[Стр.Имя];

		Если ОписаниеТиповПараметра <> Неопределено Тогда

			Типы = ОписаниеТиповПараметра.Типы();

			ПолеВвода.АвтоВыборНезаполненного = Истина;
			ПолеВвода.ТолькоПросмотр          = Ложь;
			ПолеВвода.ПропускатьПриВводе      = Ложь;

			Если ПолеВвода.ТипЗначения <> ОписаниеТиповПараметра Тогда
				ПолеВвода.ТипЗначения  = ОписаниеТиповПараметра;
			КонецЕсли;

			ПолеВвода.Значение     = ОписаниеТиповПараметра.ПривестиЗначение(ПолеВвода.Значение);
			ПолеВвода.ВыбиратьТип  = Типы.Количество() > 1;
			ПолеВвода.КнопкаВыбора = Истина;

			Если Типы.Количество() = 1 Тогда

				Если Типы[0] = Тип("Строка") Тогда
					ПолеВвода.КнопкаВыбора            = Ложь;
					ПолеВвода.АвтоВыборНезаполненного = Ложь;
					ПолеВвода.ВыборНезаполненного     = Ложь;
				КонецЕсли;

			Иначе
				ПолеВвода.ОграничениеТипа = ОписаниеТиповПараметра;
			КонецЕсли;

		Иначе

			ПолеВвода.ТолькоПросмотр     = Истина;
			ПолеВвода.ПропускатьПриВводе = Истина;
			ПолеВвода.Значение      = Неопределено;
			ПолеВвода.КнопкаВыбора  = Ложь;
			ПолеВвода.КнопкаОчистки = Ложь;

		КонецЕсли;

		СвязьПоВладельцу = ОписаниеПараметра.СвязьПоВладельцу;

		Если Не ПустаяСтрока(СвязьПоВладельцу) Тогда
			ПолеВвода.ВыборПоВладельцу = ЭлементыФормы[СвязьПоВладельцу].Значение;
		КонецЕсли;

	КонецЦикла;

	ОписаниеПараметра      = "";
	ОписаниеТиповПараметра = ОписаниеТиповПараметра(Элемент.Имя, ОписаниеПараметра);

	Если Не ПустаяСтрока(ОписаниеПараметра.АлгоритмПриИзменении) Тогда

		Попытка
			Выполнить(ПередАлгоритмом + ОписаниеПараметра.АлгоритмПриИзменении + ПослеАлгоритма);
		Исключение
			Сообщить("Алгоритм при изменении параметра (" + Элемент.Имя + "):  " + ОписаниеОшибки());
		КонецПопытки;

	КонецЕсли;

КонецПроцедуры // ПриИзмененииПараметра() 

Процедура ОчисткаПараметра(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка   = Ложь;
	ОписаниеТиповПараметра = ОписаниеТиповПараметра(Элемент.Имя);

	Если ОписаниеТиповПараметра = Неопределено Тогда

		Элемент.Значение       = Неопределено;
		Элемент.ТолькоПросмотр = Истина;
		Элемент.КнопкаВыбора   = Ложь;
		Элемент.КнопкаОчистки  = Ложь;

		Возврат;

	КонецЕсли;

	Элемент.ТолькоПросмотр = Ложь;
	Элемент.Значение       = ОписаниеТиповПараметра.ПривестиЗначение(Неопределено);

	ПриИзмененииПараметра(Элемент);

КонецПроцедуры // ОчисткаПараметра() 

Процедура ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("СтрокаТаблицыЗначений") Тогда

		СтандартнаяОбработка = Ложь;
		Элемент.Значение     = ВыбранноеЗначение.Партия;

	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

	КонецЕсли;

КонецПроцедуры

Процедура НачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         РабочаяДата);
	СписокПараметров.Вставить("СчетУчета",    Неопределено);
	СписокПараметров.Вставить("Номенклатура", Неопределено);
	СписокПараметров.Вставить("Склад",        Неопределено);
	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		СписокПараметров.Вставить("Контрагент", Элемент.ВыборПоВладельцу);
	КонецЕсли;

	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, ВладелецФормы.Организация, СписокПараметров);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ КОМАНДНОЙ ПАНЕЛИ

Процедура КнопкаОКНажатие(Элемент)

	Для каждого Пар Из Параметры Цикл

		Пар.Значение           = ЭлементыФормы[Пар.Имя].Значение;
		ОписаниеПараметра      = Неопределено;
		ОписаниеТиповПараметра = ОписаниеТиповПараметра(Пар.Имя, ОписаниеПараметра);

		Если ОписаниеПараметра.Обязательный И (Пар.Значение = ОписаниеТиповПараметра.ПривестиЗначение(Неопределено)) Тогда

			Сообщить("Не заполнен обязательный параметр:  " + ОписаниеПараметра.Представление);
			ТекущийЭлемент = ЭлементыФормы[Пар.Имя];

			Возврат;

		КонецЕсли;

	КонецЦикла;

	Закрыть(Параметры);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
 
Процедура ПриОткрытии()

	ТиповаяОперация    = ВладелецФормы.ТиповаяОперация;
	ЭтаФорма.Заголовок = "Параметры типовой операции:  " + ТиповаяОперация;

	НачальнаяВысотаФормы = 72;
	ВсегоЭлементов     = Параметры.Количество();

	ЭлементЭталон      = ЭлементыФормы["ПолеВВода1"];
	НадписьЭталон      = ЭлементыФормы["Надпись1"];

	// Подгоним размеры формы
	Высота = НачальнаяВысотаФормы + (НадписьЭталон.Высота + 0) * (ВсегоЭлементов-1);

	Для каждого Стр Из Параметры Цикл

		Сч          = 1 + Параметры.Индекс(Стр);
		ИмяНадписи  = "Надпись" + Сч;
		ИмяЭлемента = "ПолеВвода" + Сч;

		Если Сч = 1 Тогда
			ЭлементыФормы[ИмяНадписи].Заголовок = СокрЛП(Стр.Представление) + ":";
			Продолжить;
		КонецЕсли;

		// НоваяНадпись
		ЭлементыФормы.Добавить(Тип("Надпись"), ИмяНадписи);
		НоваяНадпись = ЭлементыФормы[ИмяНадписи];
		РасположитьНадпись(НоваяНадпись, Сч);
		НоваяНадпись.Заголовок = СокрЛП(Стр.Представление) + ":";

		// НовыйЭлемент
		ЭлементыФормы.Добавить(Тип("ПолеВвода"), ИмяЭлемента);
		НовыйЭлемент = ЭлементыФормы[ИмяЭлемента];
		РасположитьЭлемент(НовыйЭлемент, Сч);

	КонецЦикла;

	ДействиеПриИзмененииПараметра = Новый Действие("ПриИзмененииПараметра");
	ДействиеОчисткаПараметра      = Новый Действие("ОчисткаПараметра");
	ДействиеОбработкаВыбора       = Новый Действие("ОбработкаВыбора");
	ДействиеНачалоВыбора          = Новый Действие("НачалоВыбора");

	Для каждого Стр Из Параметры Цикл

		Сч = 1 + Параметры.Индекс(Стр);

		ОписаниеПараметра      = "";
		ОписаниеТиповПараметра = ОписаниеТиповПараметра(Стр.Имя, ОписаниеПараметра);

		ПолеВвода     = ЭлементыФормы["ПолеВвода" + Сч];
		ПолеВвода.Имя = Стр.Имя;

		Если ОписаниеТиповПараметра <> Неопределено Тогда

			ПолеВвода.АвтоВыборНезаполненного = Истина;
			Типы = ОписаниеТиповПараметра.Типы();

			ПолеВвода.ТолькоПросмотр     = Ложь;
			ПолеВвода.ПропускатьПриВводе = Ложь;
			ПолеВвода.ТипЗначения  = ОписаниеТиповПараметра;
			ПолеВвода.Значение     = ОписаниеТиповПараметра.ПривестиЗначение(Стр.Значение);
			ПолеВвода.ВыбиратьТип  = Типы.Количество() > 1;
			ПолеВвода.КнопкаВыбора = Истина;

			ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;

			Если Типы.Количество() = 1 Тогда

				Если Типы[0] = Тип("Строка") Тогда
					ПолеВвода.КнопкаВыбора = Ложь;
					ПолеВвода.АвтоВыборНезаполненного = Ложь;
					ПолеВвода.ВыборНезаполненного     = Ложь;
				КонецЕсли;

			Иначе
				ПолеВвода.ОграничениеТипа = ОписаниеТиповПараметра;
			КонецЕсли;

			//Если ЗначениеЗаполнено(ОписаниеПараметра.СвязьПоТипу) Тогда
			//	ПолеВвода.СвязьПоТипу
			//КонецЕсли;

		Иначе
			ПолеВвода.ТолькоПросмотр     = Истина;
			ПолеВвода.ПропускатьПриВводе = Истина;
			ПолеВвода.КнопкаВыбора       = Ложь;
			ПолеВвода.КнопкаОчистки      = Ложь;
		КонецЕсли;

		ПолеВвода.Подсказка                 = ОписаниеПараметра.Подсказка;
		ПолеВвода.АвтоОтметкаНезаполненного = ОписаниеПараметра.Обязательный;

		ПолеВвода.УстановитьДействие("ПриИзменении",    ДействиеПриИзмененииПараметра);
		ПолеВвода.УстановитьДействие("Очистка",         ДействиеОчисткаПараметра);
		ПолеВвода.УстановитьДействие("ОбработкаВыбора", ДействиеОбработкаВыбора);
		ПолеВвода.УстановитьДействие("НачалоВыбора",    ДействиеНачалоВыбора);

		ПолеВвода.ПорядокОбхода = Сч;

	КонецЦикла;

КонецПроцедуры

