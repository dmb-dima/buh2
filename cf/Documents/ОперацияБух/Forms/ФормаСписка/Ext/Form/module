////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
		
	ТабличноеПолеДвижения.Отбор.Регистратор.Установить(Документы.ОперацияБух.ПустаяСсылка());
	
КонецПроцедуры // ПередОткрытием()

// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	// Проверка однофирменности
	РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма,, глЗначениеПеременной("ОсновнаяОрганизация"), "ДокументСписок");

	// Управление видимостью данных НУ
	ПоказыватьДанныеНУ = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВПроводкахДанныеНУ");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьДанныеНУ.Пометка = ПоказыватьДанныеНУ;

	УстановитьВидимость();

КонецПроцедуры // ПриОткрытии()

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеТекущейОрганизации" Тогда
		РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма,, глЗначениеПеременной("ОсновнаяОрганизация"), "ДокументСписок", Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	Если ЭтаФорма.ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено тогда
		Возврат
	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭтаФорма.ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено тогда
		Возврат
	КонецЕсли;

	РаботаСДиалогами.НапечататьДвиженияДокумента(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура печатает выбранный документ.
//
//  Печатается форма, выбранная для печати по умолчанию.
//
Процедура ДействияФормыДействиеПечать(Кнопка)

	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокументИзФормыСписка(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);

КонецПроцедуры // ДействияФормыДействиеПечать()
                    
// Обработчик нажатия на кнопку "Переключить активность проводок" командной
// панели формы.
//
Процедура ДействияФормыПереключитьАктивность(Кнопка)

	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документ = ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка;

	БухгалтерскийУчет.ПереключитьАктивностьПроводокБУ(Документ);

КонецПроцедуры // ДействияФормыПереключитьАктивность()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Обработчик события "ПриИзменении" поля ввода "Организация".
//
Процедура ПолеВводаОрганизацияПриИзменении(Элемент)

	Отбор.Организация.Использование = ЗначениеЗаполнено(Элемент.Значение);

КонецПроцедуры

// Обработчик события "ПриАктивизацииСтроки" табличного поля "ДокументСписок".
//
Процедура ДокументСписокПриАктивизацииСтроки(Элемент)

	Если Элемент.ТекущиеДанные = Неопределено Тогда

		
		ТабличноеПолеДвижения.Отбор.Регистратор.Установить(Документы.ОперацияБух.ПустаяСсылка());

	Иначе

		ТабличноеПолеДвижения.Отбор.Регистратор.Установить(Элемент.ТекущаяСтрока);

	КонецЕсли;

КонецПроцедуры // ДокументСписокПриАктивизацииСтроки()

// Обработчик события "Действие" кнопки "ПоказатьСкрытьДанныеНУ" 
// командной панели формы. Устанавливает видимость колонки с сумма НУ, ПР и ВР.
//
Процедура ДействияФормыПоказатьСкрытьДанныеНУ(Кнопка)
	
	ПоказыватьДанныеНУ = НЕ ПоказыватьДанныеНУ;
	
	Кнопка.Пометка = ПоказыватьДанныеНУ;
	
	УстановитьВидимость();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЭлементыФормы.ТабличноеПолеДвижения.Колонки.СуммаВРДт.Видимость = ПоказыватьДанныеНУ;
	ЭлементыФормы.ТабличноеПолеДвижения.Колонки.СуммаВРКт.Видимость = ПоказыватьДанныеНУ;
	ЭлементыФормы.ТабличноеПолеДвижения.Колонки.СуммаНУДт.Видимость = ПоказыватьДанныеНУ;
	ЭлементыФормы.ТабличноеПолеДвижения.Колонки.СуммаНУКт.Видимость = ПоказыватьДанныеНУ;
	ЭлементыФормы.ТабличноеПолеДвижения.Колонки.СуммаПРДт.Видимость = ПоказыватьДанныеНУ;
	ЭлементыФормы.ТабличноеПолеДвижения.Колонки.СуммаПРКт.Видимость = ПоказыватьДанныеНУ;
	
КонецПроцедуры // УстановитьВидимость()

