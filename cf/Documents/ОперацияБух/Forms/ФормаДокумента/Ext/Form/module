// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит текущую организацию документа
Перем мОрганизация;

// Хранит текущее значение флага "ПрименениеУСН"
Перем мПрименениеУСН;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мСписокДействий;
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ОписаниеТипов запрашиваемого параметра
//
// Параметры:
//  Имя - Строка - имя параметра
//  Пар - в данную переменную помещается ссылка на строку ТЧ ЗапрашиваемыеПараметры
//
// Возвращаемое значение:
//  ОписаниеТипов запрашиваемого параметра
// 
Функция ОписаниеТиповПараметра(Имя, Пар=Неопределено) Экспорт

	Для каждого Параметр Из ТиповаяОперация.Параметры Цикл

		Если Параметр.Имя = Имя Тогда

			Если Параметр.СвязьПоТипу = "" Тогда
				Возврат Параметр.Тип.Получить();
			Иначе

				ЗначениеПараметраУстанавливающегоТип = ПолучитьЗначениеПараметра(Параметр.СвязьПоТипу);

				Если ЗначениеПараметраУстанавливающегоТип = Неопределено Тогда
					Возврат Неопределено
				КонецЕсли;

				Попытка

					Если Параметр.НомерСубконто > 0 Тогда
						Возврат ЗначениеПараметраУстанавливающегоТип.ВидыСубконто[Параметр.НомерСубконто-1].ВидСубконто.ТипЗначения;

					Иначе
						Возврат ЗначениеПараметраУстанавливающегоТип.ТипЗначения;

					КонецЕсли;

				Исключение
					Возврат Неопределено;

				КонецПопытки;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Сообщить("В настройке типовой операции не найден параметр:  " + Имя);

	Возврат Неопределено;

КонецФункции

// Возвращает значение запрашиваемого параметра по имени
//
// Параметры:
//  Имя - Строка - имя параметра
//  Пар - в данную переменную помещается ссылка на строку ТЧ ЗапрашиваемыеПараметры
//
// Возвращаемое значение:
//  Значение параметра
// 
Функция ПолучитьЗначениеПараметра(Имя, Пар = Неопределено)

	Если СокрЛП(Имя) = "" Тогда
		Возврат Неопределено
	КонецЕсли;

	Для каждого Параметр Из ЗапрашиваемыеПараметры Цикл

		Если Параметр.Имя = Имя Тогда
			Возврат Параметр.Значение
		КонецЕсли;

	КонецЦикла;

	Возврат Неопределено;

КонецФункции

// Формирует проводки на основании типовой операции, после заполнения
// пользователем значений параметров
//
// Параметры:
//  ТаблицаПараметров - ТаблицаЗначений с колонками соответствующими реквизитам
//						ТЧ ЗапрашиваемыеПараметры
//
Процедура ЗаполнитьПоТО(ТаблицаПараметров)

	Если ТаблицаПараметров = Неопределено Тогда
		Возврат
	КонецЕсли;

	ЗапрашиваемыеПараметры.Загрузить(ТаблицаПараметров);
	ЗаполнитьНаОснованииТиповойОперации(ТиповаяОперация,  Истина);

КонецПроцедуры

// Перезаполняет ТЧ ЗапрашиваемыеПараметры на основании типовой операции.
// Введенные пользователем значения параметров при этом сохраняются
//
Процедура ОбновитьПараметры()

	ТаблицаЗначений = ЗапрашиваемыеПараметры.Выгрузить();
	ТаблицаЗначений.Индексы.Добавить("Имя");

	ЗапрашиваемыеПараметры.Очистить();

	Если Не ТиповаяОперация.Пустая() Тогда
		Заполнить(ТиповаяОперация);
	КонецЕсли;

	Для каждого Параметр Из ЗапрашиваемыеПараметры Цикл

		Стр = ТаблицаЗначений.Найти(Параметр.Имя, "Имя");

		Если Стр = Неопределено Тогда
			Продолжить
		КонецЕсли;

		Параметр.Значение = Стр.Значение;

	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Пересчитывает сумму операции при изменении сумм в проводках.
//
Процедура ПересчитатьСуммуОперации()

	СуммаОперации = 0;

	Для каждого Проводка Из ЭлементыФормы.ТабличноеПолеДвиженияБУ.Значение Цикл
		СуммаОперации = СуммаОперации + Проводка.Сумма;
	КонецЦикла;

КонецПроцедуры // ПересчитатьСуммуОперации()

Процедура РасчетСуммыНУ()
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеИП  = (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	
	Если мПрименениеУСН Тогда
		Возврат;
	КонецЕсли;
	
	Если мПрименениеИП Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущаяСтрока;
	НепринимаемыеДоходыИРасходы(ТекущаяСтрока);
	
	Если  ТекущаяСтрока.СчетДт.НалоговыйУчет Тогда
		ТекущаяСтрока.СуммаНУДт = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаПРДт - ТекущаяСтрока.СуммаВРДт;
	КонецЕсли;
	Если  ТекущаяСтрока.СчетКт.НалоговыйУчет Тогда
		ТекущаяСтрока.СуммаНУКт = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаПРКт - ТекущаяСтрока.СуммаВРКт;
	КонецЕсли;
	
КонецПроцедуры

Процедура НепринимаемыеДоходыИРасходы(Проводка)
	ОтразитьНеПринимаемыеДоходы = ОпределитьНеПринимаемыеДоходы(Проводка);
	Если ОтразитьНеПринимаемыеДоходы Тогда 
		Проводка.СуммаПРКт = Проводка.Сумма;
	КонецЕсли;
	
	ОтразитьНеПринимаемыеРасходы = ОпределитьНеПринимаемыеРасходы(Проводка);
	Если ОтразитьНеПринимаемыеРасходы Тогда 
		Проводка.СуммаПРДт = Проводка.Сумма;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьНеПринимаемыеДоходы(Проводка) Экспорт
	
	Если Не Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПустаяСсылка() И (Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы Или Проводка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходы)) Тогда
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			Если ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не Субконто.Значение.ЭтоГруппа Тогда
				
				Если НЕ Субконто.Значение = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка() И НЕ Субконто.Значение.ПринятиеКналоговомуУчету Тогда
					Возврат  Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ОпределитьНеПринимаемыеРасходы(Проводка) Экспорт
	
	Для Каждого Субконто Из Проводка.СубконтоДт Цикл
		
		Если ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.СтатьиЗатрат") И Не Субконто.Значение.ЭтоГруппа Тогда
			
			
			Если Субконто.Значение.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
				
				// Расходы на строительство объектов основных средств, не относятся к расходам по производству и реализации
				Если Проводка.СчетДт = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств Или Проводка.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств) Тогда
					Возврат Ложь;
				КонецЕсли;
				
				ОтнесениеКЕНВД = Субконто.Значение.ВидДеятельностиДляНалоговогоУчетаЗатрат;
				
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД Тогда
					ОбщегоНазначения.СообщитьОбОшибке("" + Субконто.Значение + " - неправильно указана: для непринимаемых расходов (" + ОтнесениеКЕНВД + ").
					                 |Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым
									 |- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам Тогда
					ОбщегоНазначения.СообщитьОбОшибке("" + Субконто.Значение + " - неправильно указана: для непринимаемых расходов (" + ОтнесениеКЕНВД + ").
					                 |Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым
									 |- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				Возврат Истина;
				Прервать;
			КонецЕсли; 
			
		ИначеЕсли ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не Субконто.Значение.ЭтоГруппа Тогда
			
			Если НЕ Субконто.Значение = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка() И НЕ Субконто.Значение.ПринятиеКналоговомуУчету Тогда
								
				ОтнесениеКЕНВД = Субконто.Значение.ВидДеятельностиДляНалоговогоУчетаЗатрат;
				
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Проводка " + Проводка.Содержание + ": неправильно указана статья затрат для непринимаемых расходов (" + ОтнесениеКЕНВД + ").
					                 |Расходы, не учитываемые для целей налогообложения, не следует относить к деятельности, облагаемой ЕНВД,
									 |- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Проводка " + Проводка.Содержание + ": неправильно указана статья затрат для непринимаемых расходов (" + ОтнесениеКЕНВД + ").
					                 |Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым
									 |- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				Возврат Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции



// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
     
Процедура ОбновитьСписокДействий()
	
	мСписокДействий = Новый СписокЗначений;
	мСписокДействий.Добавить("Вручную","Вручную");
	мСписокДействий.Добавить("Типовые операции","Типовые операции");
	мСписокДействий.Добавить("Сторно движений документа","Сторно движений документа");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка,
	|	ВнешниеОбработкиПринадлежность.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей);
	Запрос.УстановитьПараметр("Ссылка", Документы.ОперацияБух.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		мСписокДействий.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	ЭлементыФормы.Способ.СписокВыбора = мСписокДействий;
	ЭлементыФормы.Способ.Данные = "";
	ЭлементыФормы.Способ.Значение = СпособЗаполнения;
	ЭлементыФормы.Способ.Данные = "СпособЗаполнения";

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	 	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	ОбновитьСписокДействий();
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , "Продажа");
		Если ЭлементыФормы.Способ.Значение<>"Типовые операции" Тогда
			ТиповаяОперация= Справочники.ТиповыеОперации.ПустаяСсылка();
			ЭлементыФормы.Способ.Значение = "Вручную";
		КонецЕсли;
		ФлажокСписок		  = Ложь;
	Иначе
		
		Если ЗаполнениеДвижений.Количество() > 1 Тогда
			ФлажокСписок		  = Истина;		
		КонецЕсли;
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	НастроитьЗакладкиПанелейРегистров();
	ОбновлениеОтображенияСпискаРегистров();
	ОбновлениеОтображения();

	// Управление видимостью данных НУ
	ПоказыватьДанныеНУ = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВПроводкахДанныеНУ");
	ЭлементыФормы.КоманднаяПанельБУ.Кнопки.ПоказатьСкрытьДанныеНУ.Пометка = ПоказыватьДанныеНУ;

	//При открытии из журнала проводок активизируем выбранную строку
	Если (ЗначениеЗаполнено(ПараметрТекущаяСтрока)) И (ЗначениеЗаполнено(ПараметрРегистр)) Тогда

		ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущаяСтрока  = Движения[ПараметрРегистр][ПараметрТекущаяСтрока - 1];
		ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущаяКолонка = ЭлементыФормы.ТабличноеПолеДвиженияБУ.Колонки.Картинка;
		
	КонецЕсли;
	
	// Инициализация реквизита формы "ПрименениеУСН".
	ПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мОрганизация          = Организация;
	мПрименениеУСН        = ПрименениеУСН;	
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	// Установим активный реквизит.
	УстановитьАктивныйРеквизит();
	
	УстановитьВидимость();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если СпособЗаполнения = "Вручную" Тогда
		ТиповаяОперация = неопределено;
		ЗаполнениеДвижений.Очистить();
	Иначе
		Если ТипЗнч(СпособЗаполнения) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			ТиповаяОперация = Способ;
		ИначеЕсли СпособЗаполнения = "Типовые операции" Тогда
			ЗаполнениеДвижений.Очистить();
		Иначе
			//Если ЗаполнениеДвижений.Количество()=1 и Не ЗначениеЗаполнено(ЗаполнениеДвижений[0].Документ) Тогда
			//	ЗаполнениеДвижений.Очистить();
			//КонецЕсли;
			ТиповаяОперация = неопределено;
		КонецЕсли;
	КонецЕсли;

	//Автозаполнение реквизитов Период и Организация
	Для Каждого Проводка Из Движения.Хозрасчетный Цикл

		Проводка.Период      = Дата;
		Проводка.Организация = Организация;

	КонецЦикла;
	
	Если ЭтотОбъект.ПометкаУдаления Тогда
		Движения.Хозрасчетный.Записать();
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаРегистровНакопления Цикл
		КолонкаСОрганизациейНайдена = ЭлементыФормы["РН_"+СтрокаТаблицы.Имя].Колонки.Найти("Организация")<>Неопределено;
		Для каждого Запись Из Движения[СтрокаТаблицы.Имя] Цикл
			Запись.Период = Дата;
			Если КолонкаСОрганизациейНайдена Тогда
				Запись.Организация = Организация;
			КонецЕсли;
		КонецЦикла; 
		Если ЭтотОбъект.ПометкаУдаления Тогда
			Движения[СтрокаТаблицы.Имя].Записать();
		КонецЕсли;
	КонецЦикла; 

	Для каждого СтрокаТаблицы Из ТаблицаРегистровСведений Цикл
		МетРегСведений = Метаданные.РегистрыСведений[СтрокаТаблицы.Имя];
		Периодический = МетРегСведений.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		КолонкаСОрганизациейНайдена = ЭлементыФормы["РС_"+СтрокаТаблицы.Имя].Колонки.Найти("Организация")<>Неопределено;
		Для каждого Запись Из Движения[СтрокаТаблицы.Имя] Цикл
			Запись.Период = Дата;
			Если КолонкаСОрганизациейНайдена Тогда
				Запись.Организация = Организация;
			КонецЕсли;
		КонецЦикла; 
		Если ЭтотОбъект.ПометкаУдаления Тогда
			Движения[СтрокаТаблицы.Имя].Записать();
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)

	Если НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КонтрольКорреспонденцииСчетов") Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустаяСсылка",         ПланыСчетов.Хозрасчетный.ПустаяСсылка()); 
	Запрос.УстановитьПараметр("СсылкаНаЭтотДокумент", Ссылка); 
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт,
	|	Хозрасчетный.СчетДт.Код КАК КодДт,
	|	Хозрасчетный.СчетКт.Код КАК КодКт,
	|	Хозрасчетный.Содержание КАК Комментарий,
	|	СУММА(1) КАК ВесПроводки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Хозрасчетный.СчетДт КАК СчетДт,
	|			Хозрасчетный.СчетКт КАК СчетКт
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КорректныеКорреспонденцииСчетов КАК КорректныеКорреспонденцииСчетов
	|				ПО Хозрасчетный.СчетДт = КорректныеКорреспонденцииСчетов.СчетДт И Хозрасчетный.СчетКт = КорректныеКорреспонденцииСчетов.СчетКт
	|		ГДЕ
	|			Хозрасчетный.Регистратор = &СсылкаНаЭтотДокумент
	|
	|		ОБЪЕДИНИТЬ
	|
	|		ВЫБРАТЬ
	|			Хозрасчетный.СчетДт,
	|			Хозрасчетный.СчетКт
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КорректныеКорреспонденцииСчетов КАК КорректныеКорреспонденцииСчетов
	|				ПО Хозрасчетный.СчетДт = КорректныеКорреспонденцииСчетов.СчетДт И (КорректныеКорреспонденцииСчетов.СчетКт = &ПустаяСсылка)
	|		ГДЕ
	|			Хозрасчетный.Регистратор = &СсылкаНаЭтотДокумент
	|
	|		ОБЪЕДИНИТЬ
	|
	|		ВЫБРАТЬ
	|			Хозрасчетный.СчетДт,
	|			Хозрасчетный.СчетКт
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КорректныеКорреспонденцииСчетов КАК КорректныеКорреспонденцииСчетов
	|				ПО (КорректныеКорреспонденцииСчетов.СчетДт = &ПустаяСсылка) И Хозрасчетный.СчетКт = КорректныеКорреспонденцииСчетов.СчетКт
	|		ГДЕ 
	|			Хозрасчетный.Регистратор = &СсылкаНаЭтотДокумент) КАК Проверенные
	|		ПО Проверенные.СчетКт = Хозрасчетный.СчетКт И Проверенные.СчетДт = Хозрасчетный.СчетДт
	|ГДЕ
	|	((Проверенные.СчетКт) ЕСТЬ NULL ) И
	|	Хозрасчетный.Регистратор = &СсылкаНаЭтотДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт,
	|	Хозрасчетный.Содержание
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодДт,
	|	КодКт";
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Отказ = Истина;
		Сообщить("Обнаружены некорректные корреспонденции.");

		ФормаСпискаКорреспонденций = РегистрыСведений.КорректныеКорреспонденцииСчетов.ПолучитьФорму("ФормаСпискаКорреспонденций");
		ФормаСпискаКорреспонденций.ТаблицаКорреспонденций = Результат.Выгрузить();
		ФормаСпискаКорреспонденций.Открыть();

	КонецЕсли;

КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЭлементыФормы.ТабличноеПолеДвиженияБУ.Колонки.СуммаВРДт.Видимость = ПоказыватьДанныеНУ;
	ЭлементыФормы.ТабличноеПолеДвиженияБУ.Колонки.СуммаВРКт.Видимость = ПоказыватьДанныеНУ;
	ЭлементыФормы.ТабличноеПолеДвиженияБУ.Колонки.СуммаНУДт.Видимость = ПоказыватьДанныеНУ;
	ЭлементыФормы.ТабличноеПолеДвиженияБУ.Колонки.СуммаНУКт.Видимость = ПоказыватьДанныеНУ;
	ЭлементыФормы.ТабличноеПолеДвиженияБУ.Колонки.СуммаПРДт.Видимость = ПоказыватьДанныеНУ;
	ЭлементыФормы.ТабличноеПолеДвиженияБУ.Колонки.СуммаПРКт.Видимость = ПоказыватьДанныеНУ;
	
	Если Не (РольДоступна("ПравоГлавногоБухгалтера") ИЛИ РольДоступна("ПолныеПрава")) Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Настройка.Доступность = Ложь;
	КонецЕсли;		

КонецПроцедуры // УстановитьВидимость()

// Устанавливает активный реквизит.
Процедура УстановитьАктивныйРеквизит()
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата");
	ЭлементыФормы.ПанельРегистров.ТекущаяСтраница=ЭлементыФормы.ПанельРегистров.Страницы.ПроводкиБУ;
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.ТабличноеПолеДвиженияБУ);
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ЭлементыФормы.Панель1.ТекущаяСтраница = ?(ФлажокСписок,ЭлементыФормы.Панель1.Страницы.Страница2,ЭлементыФормы.Панель1.Страницы.Страница1);
	
	Если СпособЗаполнения = "Вручную" Тогда
		ЭлементыФормы.Разделитель1.Верх = 150;
		ЭлементыФормы.Разделитель1.Видимость = Ложь;
		ЭлементыФормы.ФлажокСписок.Видимость = ложь;
		ЭлементыФормы.ФлажокСписок.Значение = ложь;
		ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница3;
		Возврат;
	КонецЕсли;

	Если СпособЗаполнения = "Типовые операции" Тогда
		ЭлементыФормы.ТиповаяОперация.Данные = "ТиповаяОперация";
	    ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ТиповыеОперации");
		Если ТипЗнч(ТиповаяОперация) <> Тип("СправочникСсылка.ТиповыеОперации") Тогда
    		ТиповаяОперация = Справочники.ТиповыеОперации.ПустаяСсылка();	
		КонецЕсли;
		ЭлементыФормы.ТиповаяОперация.ВыбиратьТип = Ложь;

		ЭлементыФормы.ФлажокСписок.Видимость = ложь;
		ЭлементыФормы.ФлажокСписок.Значение = ложь;
		ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница1;
		ЭлементыФормы.Надпись01.Значение  = "Типовая операция:";
	Иначе
		ЭлементыФормы.ТиповаяОперация.Данные = "ЭлементыФормы.ТабличноеПолеСписокДокументов.ТекущиеДанные.Документ";
		ЭлементыФормы.ТиповаяОперация.ВыбиратьТип = Истина;
		
		Если ЗаполнениеДвижений.Количество() = 0 Тогда
			ЗаполнениеДвижений.Добавить();
		КонецЕсли;
		ЭлементыФормы.ТабличноеПолеСписокДокументов.ТекущаяСтрока = ЗаполнениеДвижений[0];
		ЭлементыФормы.ФлажокСписок.Видимость = истина;
		ЭлементыФормы.Надпись01.Значение  = "Документ:";
	КонецЕсли;	
	
	Если ФлажокСписок Тогда
		ЭлементыФормы.Разделитель1.Верх = 255;
		ЭлементыФормы.Разделитель1.Видимость = Истина;
	Иначе
		ЭлементыФормы.Разделитель1.Верх = 150;
		ЭлементыФормы.КнопкаЗаполнить.Верх = 3;
		ЭлементыФормы.Разделитель1.Видимость = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ТиповаяОперация.КнопкаОткрытия = Истина;
		
КонецПроцедуры

Процедура ОбновлениеОтображенияСпискаРегистров()
	
	Если ЭлементыФормы.ПанельРегистров.Страницы.Количество()>1 И ЭлементыФормы.ПанельРегистров.Страницы.Количество()<5 Тогда
		ЭлементыФормы.ПанельРегистров.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
		ПолеРегистра = ЭлементыФормы.ТабличноеПолеДвиженияБУ;
		ПолеРегистра.Высота = ЭлементыФормы.ПанельРегистров.Высота - 48-6;
		ПолеРегистра.Ширина = ЭлементыФормы.ПанельРегистров.Ширина- 12;
		ПолеРегистра.Лево = 6;
		ЭлементыФормы.КоманднаяПанельБУ.Ширина = ЭлементыФормы.ПанельРегистров.Ширина - 12;
		ЭлементыФормы.КоманднаяПанельБУ.Лево = 6;
	ИначеЕсли ЭлементыФормы.ПанельРегистров.Страницы.Количество()>=5 Тогда
		ЭлементыФормы.ПанельРегистров.ОтображениеЗакладок = ОтображениеЗакладок.СверхуМногострочный;
	Иначе
		ЭлементыФормы.ПанельРегистров.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
		ПолеРегистра = ЭлементыФормы.ТабличноеПолеДвиженияБУ;
		ПолеРегистра.Лево = 0;
		ПолеРегистра.Ширина = ЭлементыФормы.ПанельРегистров.Ширина;
		ПолеРегистра.Высота = ЭлементыФормы.ПанельРегистров.Высота - 26;
		ЭлементыФормы.КоманднаяПанельБУ.Лево = 0;
		ЭлементыФормы.КоманднаяПанельБУ.Ширина = ЭлементыФормы.ПанельРегистров.Ширина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает и настраивает табличные поля на страницах панели ПанельРегистровНакопления
//
Процедура НастроитьЗакладкиПанелиРегистровНакопления()

	ПорядковыйНомерРегистра = 0;
	Если ТаблицаРегистровНакопления.Количество() > 0 Тогда
		
		// Добавим новые страницы
		Для каждого СтрокаТаблицыРегистров Из ТаблицаРегистровНакопления Цикл
			Найдена = Ложь;
			ПорядковыйНомерРегистра = ПорядковыйНомерРегистра+1;
			ИмяРегистра = ("РН_"+СтрокаТаблицыРегистров.Имя);
			Для каждого СтраницаПанели Из ЭлементыФормы.ПанельРегистров.Страницы Цикл
				Если СтраницаПанели.Имя =  ИмяРегистра Тогда
					Найдена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			Если Найдена Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ЭлементыФормы.ПанельРегистров.Страницы.Количество()<=ПорядковыйНомерРегистра Тогда
				СтраницаПанели = ЭлементыФормы.ПанельРегистров.Страницы.Добавить(ИмяРегистра, СтрокаТаблицыРегистров.Представление);
			Иначе
				СтраницаПанели = ЭлементыФормы.ПанельРегистров.Страницы.Вставить(ПорядковыйНомерРегистра, ИмяРегистра, СтрокаТаблицыРегистров.Представление);
			КонецЕсли;
			СтраницаПанели.КартинкаЗаголовка = БиблиотекаКартинок.РегистрНакопления;
			
			ЭлементыФормы.ПанельРегистров.ТекущаяСтраница = СтраницаПанели;
			
			// Расположим на странице командную панель
			КоманднаяПанельРегистра = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), ("КоманднаяПанель" + ИмяРегистра), Истина, ЭлементыФормы.ПанельРегистров);
			КоманднаяПанельРегистра.Верх = 1;
			КоманднаяПанельРегистра.Лево = 6;
			КоманднаяПанельРегистра.Ширина = ЭлементыФормы.ПанельРегистров.Ширина - 12 - 0;
			КоманднаяПанельРегистра.Высота = 24;
			
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ПанельРегистров,ГраницаЭлементаУправления.Верх);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Низ,КоманднаяПанельРегистра,ГраницаЭлементаУправления.Верх);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ПанельРегистров,ГраницаЭлементаУправления.Право);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ПанельРегистров,ГраницаЭлементаУправления.Лево);
			
			// Расположим на странице табличное поле
			ПолеРегистра = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), ИмяРегистра, Истина, ЭлементыФормы.ПанельРегистров);
			ПолеРегистра.Данные = "ДокументОбъект.Движения." + СтрокаТаблицыРегистров.Имя;
			
			Если НЕ ЭтоНовый() и НЕ Модифицированность() Тогда
				ПолеРегистра.Значение.Прочитать();
			КонецЕсли; 
			
			ПолеРегистра.Верх = 25;
			ПолеРегистра.Лево = 6;
			ПолеРегистра.Ширина = ЭлементыФормы.ПанельРегистров.Ширина - 12 - 0;
			ПолеРегистра.Высота = ЭлементыФормы.ПанельРегистров.Высота - 24 - 6;
			ПолеРегистра.ТолькоПросмотр = Ложь;
			ПолеРегистра.ИзменятьПорядокСтрок = Истина;
			ПолеРегистра.ИзменятьСоставСтрок = Истина;
			ПолеРегистра.ИзменяетДанные = Истина;
			
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ПанельРегистров,ГраницаЭлементаУправления.Верх);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ЭлементыФормы.ПанельРегистров,ГраницаЭлементаУправления.Низ);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ПанельРегистров,ГраницаЭлементаУправления.Право);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ПанельРегистров,ГраницаЭлементаУправления.Лево);
			
			ПолеРегистра.СоздатьКолонки();
			
			ПолеРегистра.Колонки.Активность.Видимость = ложь;
			ПолеРегистра.Колонки.Период.Видимость = ложь;
			ПолеРегистра.Колонки.Организация.Видимость = ложь;
			
			Если Метаданные.РегистрыНакопления[СтрокаТаблицыРегистров.Имя].ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				КолонкаВидДвижения = ПолеРегистра.Колонки.Вставить(1, "Вид движения");
				КолонкаВидДвижения.Имя = "ВидДвиженияРегистраНакопления";
				КолонкаВидДвижения.УстановитьЭлементУправления(Тип("ПолеВвода"));
				КолонкаВидДвижения.Данные = "ВидДвижения";
				КолонкаВидДвижения.ЭлементУправления.КнопкаВыбора = Истина;
				КолонкаВидДвижения.ЭлементУправления.ВыбиратьТип = Ложь;
			КонецЕсли; 
			
			ПолеРегистра.Колонки.Регистратор.Видимость = Ложь;
			ПолеРегистра.Колонки.Период.Видимость      = Ложь;
			ПолеРегистра.Колонки.НомерСтроки.Видимость = Ложь;
			КоманднаяПанельРегистра.ИсточникДействий = ПолеРегистра;
			КоманднаяПанельРегистра.АвтоЗаполнение = Истина;
			КоманднаяПанельРегистра.Кнопки.Добавить("Разделитель" + ИмяРегистра);
			Кнопка = КоманднаяПанельРегистра.Кнопки.Добавить(ИмяРегистра, ТипКнопкиКоманднойПанели.Действие, , Новый Действие("ПереключитьАктивность"));
			Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
			Кнопка.Картинка    = БиблиотекаКартинок.ПереключитьАктивность;
			Кнопка.Подсказка   = "Переключить активность";
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	// Удалим лишние страницы
	Индекс = 0;
	Пока 1 = 1 Цикл
		
		Если Индекс > ЭлементыФормы.ПанельРегистров.Страницы.Количество() - 1 Тогда
			Прервать;
		КонецЕсли; 
		
		СтраницаПанели = ЭлементыФормы.ПанельРегистров.Страницы[Индекс];
		
		Если Лев(СтраницаПанели.Имя,3)<>"РН_" Тогда
			Индекс = Индекс + 1;
			Продолжить;
		ИначеЕсли ТаблицаРегистровНакопления.Найти(Прав(СтраницаПанели.Имя,СтрДлина(СтраницаПанели.Имя)-3), "Имя") = Неопределено Тогда
			ЭлементыФормы.ПанельРегистров.Страницы.Удалить(Индекс);
			Продолжить;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла; 
		
КонецПроцедуры

// Процедура создает и настраивает табличные поля на страницах панели ПанельРегистровСведений
//
Процедура НастроитьЗакладкиПанелиРегистровСведений()
	
	ПорядковыйНомерРегистра = 0;
	Если ТаблицаРегистровСведений.Количество() > 0 Тогда
		Для каждого СтрокаТаблицыРегистров Из ТаблицаРегистровСведений Цикл
			ПорядковыйНомерРегистра = ПорядковыйНомерРегистра+1;
			ИмяРегистра = ("РС_"+СтрокаТаблицыРегистров.Имя);
			Найдена = Ложь;
			Для каждого СтраницаПанели Из ЭлементыФормы.ПанельРегистров.Страницы Цикл
				Если СтраницаПанели.Имя = ИмяРегистра Тогда
					Найдена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			Если Найдена Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ЭлементыФормы.ПанельРегистров.Страницы.Количество()<=ТаблицаРегистровНакопления.Количество()+ПорядковыйНомерРегистра Тогда
				СтраницаПанели = ЭлементыФормы.ПанельРегистров.Страницы.Добавить(ИмяРегистра, СтрокаТаблицыРегистров.Представление);
			Иначе
				СтраницаПанели = ЭлементыФормы.ПанельРегистров.Страницы.Вставить(ТаблицаРегистровНакопления.Количество()+ПорядковыйНомерРегистра, ИмяРегистра, СтрокаТаблицыРегистров.Представление);
			КонецЕсли;
			СтраницаПанели.КартинкаЗаголовка = БиблиотекаКартинок.РегистрСведений;
			ЭлементыФормы.ПанельРегистров.ТекущаяСтраница = СтраницаПанели;
			
			// Расположим на странице командную панель
			КоманднаяПанельРегистра = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), ("КоманднаяПанель" + ИмяРегистра), Истина, ЭлементыФормы.ПанельРегистров);
			КоманднаяПанельРегистра.Верх = 1;
			КоманднаяПанельРегистра.Лево = 6;
			КоманднаяПанельРегистра.Ширина = ЭлементыФормы.ПанельРегистров.Ширина - 12 - 0;
			КоманднаяПанельРегистра.Высота = 24;
			
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ПанельРегистров,ГраницаЭлементаУправления.Верх);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Низ,КоманднаяПанельРегистра,ГраницаЭлементаУправления.Верх);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ПанельРегистров,ГраницаЭлементаУправления.Право);
			КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ПанельРегистров,ГраницаЭлементаУправления.Лево);
			
			// Расположим на странице табличное поле
			ПолеРегистра = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), ИмяРегистра, Истина, ЭлементыФормы.ПанельРегистров);
			ПолеРегистра.Данные = "ДокументОбъект.Движения." + СтрокаТаблицыРегистров.Имя;
			
			Если НЕ ЭтоНовый() и НЕ Модифицированность() Тогда
				ПолеРегистра.Значение.Прочитать();
			КонецЕсли; 
			
			ПолеРегистра.Верх = 25;
			ПолеРегистра.Лево = 6;
			ПолеРегистра.Ширина = ЭлементыФормы.ПанельРегистров.Ширина - 12 - 0;
			ПолеРегистра.Высота = ЭлементыФормы.ПанельРегистров.Высота - 24 - 6;
			ПолеРегистра.ТолькоПросмотр = Ложь;
			ПолеРегистра.ИзменятьПорядокСтрок = Истина;
			ПолеРегистра.ИзменятьСоставСтрок = Истина;
			
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ПанельРегистров,ГраницаЭлементаУправления.Верх);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ЭлементыФормы.ПанельРегистров,ГраницаЭлементаУправления.Низ);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ПанельРегистров,ГраницаЭлементаУправления.Право);
			ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ПанельРегистров,ГраницаЭлементаУправления.Лево);
			
			ПолеРегистра.СоздатьКолонки();
			
			ПолеРегистра.Колонки.Активность.Видимость = ложь;
			Если ПолеРегистра.Колонки.Найти("Период")<>неопределено Тогда
				ПолеРегистра.Колонки.Период.Видимость = ложь;
			КонецЕсли;
			Если ПолеРегистра.Колонки.Найти("Регистратор")<>неопределено Тогда
				ПолеРегистра.Колонки.Регистратор.Видимость = ложь;
			КонецЕсли;
			Если ПолеРегистра.Колонки.Найти("Организация")<>неопределено Тогда
				ПолеРегистра.Колонки.Организация.Видимость = ложь;
			КонецЕсли;
			ПолеРегистра.Колонки.НомерСтроки.Видимость = Ложь;
			
			КоманднаяПанельРегистра.ИсточникДействий = ПолеРегистра;
			КоманднаяПанельРегистра.АвтоЗаполнение = Истина;
			КоманднаяПанельРегистра.Кнопки.Добавить("Разделитель" + ИмяРегистра);
			Кнопка = КоманднаяПанельРегистра.Кнопки.Добавить(ИмяРегистра, ТипКнопкиКоманднойПанели.Действие, , Новый Действие("ПереключитьАктивность"));
			Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
			Кнопка.Картинка    = БиблиотекаКартинок.ПереключитьАктивность;
			Кнопка.Подсказка   = "Переключить активность";
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	// Удалим лишние страницы
	Индекс = 0;
	Пока 1 = 1 Цикл
		
		Если Индекс > ЭлементыФормы.ПанельРегистров.Страницы.Количество() - 1 Тогда
			Прервать;
		КонецЕсли; 
		
		СтраницаПанели = ЭлементыФормы.ПанельРегистров.Страницы[Индекс];
		
		Если Лев(СтраницаПанели.Имя,3)<>"РС_" Тогда
			Индекс = Индекс + 1;
			Продолжить;
		ИначеЕсли ТаблицаРегистровСведений.Найти(Прав(СтраницаПанели.Имя,СтрДлина(СтраницаПанели.Имя)-3), "Имя") = Неопределено Тогда
			ЭлементыФормы.ПанельРегистров.Страницы.Удалить(Индекс);
			Продолжить;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура НастроитьЗакладкиПанелейРегистров()
	
	НастроитьЗакладкиПанелиРегистровНакопления();
	НастроитьЗакладкиПанелиРегистровСведений();
	
КонецПроцедуры  

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
//

// Процедура обработчик события "Нажатие" элемента управления "КнопкаЗаполнить"
//
Процедура КнопкаЗаполнитьНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ТиповаяОперация.Значение) Тогда
		
		Если СпособЗаполнения = "Сторно движений документа" и НЕ ЗначениеЗаполнено(ЭлементыФормы.ТиповаяОперация.Значение) Тогда
			Предупреждение("Не указан документ!", , "Ошибка");
		ИначеЕсли СпособЗаполнения = "Типовые операции"  и НЕ ЗначениеЗаполнено(ТиповаяОперация) Тогда
			Предупреждение("Не указана типовая операция!", , "Ошибка");
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	// очистка существующих движений
	ОчищатьДвижения = Ложь;
	Для каждого Набор Из Движения Цикл
		
		Если Набор.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		#Если Клиент Тогда		
			
		Если НЕ ОчищатьДвижения Тогда
			
			Ответ = Вопрос("Существующие проводки и движения регистров будут очищены. 
							|Продолжить?",РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
			
			ОчищатьДвижения = Истина;
		КонецЕсли;
		
		#КонецЕсли
		
		Набор.Очистить();
		
	КонецЦикла;
	Если ТаблицаРегистровНакопления.Количество() > 0 Тогда
		ТаблицаРегистровНакопления.Очистить();
	КонецЕсли;
	Если ТаблицаРегистровСведений.Количество() > 0 Тогда
		ТаблицаРегистровСведений.Очистить();
	КонецЕсли;
	
	//Формирование движений
	Если СпособЗаполнения = "Сторно движений документа" Тогда
		ВыполнитьСторнированиеДокументов(ЗаполнениеДвижений);
	ИначеЕсли	СпособЗаполнения = "Типовые операции" Тогда
		ЗаполнитьПоТиповойОперации();
	Иначе
		ВыполнитьДействие();
	КонецЕсли;
	
	//обновить настройки
	Для каждого Набор Из Движения Цикл
		Если Набор.Количество() > 0 Тогда
			МетаданныеРегистр = Набор.Метаданные();
			
			Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистр) Тогда
				НоваяСтрока = ТаблицаРегистровНакопления.Добавить();
				НоваяСтрока.Имя = МетаданныеРегистр.Имя;
				НоваяСтрока.Представление = МетаданныеРегистр.Синоним;
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеРегистр) Тогда
				НоваяСтрока = ТаблицаРегистровСведений.Добавить();
				НоваяСтрока.Имя = МетаданныеРегистр.Имя;
				НоваяСтрока.Представление = МетаданныеРегистр.Синоним;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НастроитьЗакладкиПанелейРегистров();
	ОбновлениеОтображенияСпискаРегистров();
	ПересчитатьСуммуОперации();
	
КонецПроцедуры //КнопкаЗаполнитьНажатие

Процедура ЗаполнитьПоТиповойОперации()
	
	ОбновитьПараметры();

	Если ЗапрашиваемыеПараметры.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	ФормаПараметров           = ПолучитьФорму("Параметры", ЭтаФорма);
	ФормаПараметров.Параметры = ЗапрашиваемыеПараметры.Выгрузить();
	ТаблицаПараметров         = ФормаПараметров.ОткрытьМодально();

	ЗаполнитьПоТО(ТаблицаПараметров);
	
КонецПроцедуры 

Процедура ВыполнитьДействие(ДействиеНеВыполнено = ложь)
	
#Если Клиент Тогда
	
	ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
	ОбъектВнешнейФормы = СпособЗаполнения.ПолучитьОбъект();
	
	Если ОбъектВнешнейФормы = Неопределено Тогда
		Сообщить("Ошибка получения внешней обработки действия. Возможно обработка была удалена", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	Попытка
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
	Исключение
		Сообщить("Ошибка исполнения внешней обработки действия."+Символы.ПС+ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	Попытка
		Обработка.Инициализировать("СтрокаТЧ.Документ", ЭтотОбъект,ДействиеНеВыполнено);
		Если ДействиеНеВыполнено Тогда
			Сообщить("Действие не выполнено!",СтатусСообщения.Важное);
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Действие не выполнено!");
	КонецПопытки;

#КонецЕсли

КонецПроцедуры 

Процедура ВыполнитьСторнированиеДокументов(СторнируемыеДокументы, СторнироватьРегистры = истина, СторнироватьПроводки = истина)
	
	Для каждого СтрокаТЧ из СторнируемыеДокументы Цикл
		
		СторнируемыйДокумент = СтрокаТЧ.Документ;
		Если НЕ ЗначениеЗаполнено(СторнируемыйДокумент) Тогда
			Сообщить("В строке "+СтрокаТЧ.НомерСтроки+" не выбран сторнируемый документ.",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		МетаданныеДокумент	= СторнируемыйДокумент.Метаданные();
		МетаданныеДвиженияКорректировкаЗаписейРегистров = ЭтотОбъект.Метаданные().Движения;

		Для Каждого МетаданныеРегистр Из МетаданныеДокумент.Движения Цикл

			// если документ "Ручная операция" не может иметь таких движений,
			// то это не сторнируемый регистр
			Если НЕ МетаданныеДвиженияКорректировкаЗаписейРегистров.Содержит(МетаданныеРегистр) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборДвижений = Движения[МетаданныеРегистр.Имя];
			
			ЭтоРегистрБухгалтерии = Ложь;
			Если СторнироватьПроводки И Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеРегистр) Тогда
				
				СторнируемыйНаборЗаписей = РегистрыБухгалтерии[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
				ЭтоРегистрБухгалтерии = Истина;
				
			ИначеЕсли СторнироватьРегистры И Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистр) Тогда
			   
				СторнируемыйНаборЗаписей = РегистрыНакопления[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
				
			Иначе
				Продолжить;
			КонецЕсли;
			
			СторнируемыйНаборЗаписей.Отбор.Регистратор.Значение = СторнируемыйДокумент;
			СторнируемыйНаборЗаписей.Прочитать();
			
			Для Каждого ДвижениеСторнируемое Из СторнируемыйНаборЗаписей Цикл

				ДвижениеСторно = НаборДвижений.Добавить();
				
				// реквизиты
				Если ЭтоРегистрБухгалтерии Тогда
					ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
				Иначе
					ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
				КонецЕсли;

				ДвижениеСторно.Период = Дата;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры 

// Копирует значения движения в строку сторно нового движения
// для измерений и реквизитов. Ресурсы инвертируются
//
Процедура ЗаполнитьДвижениеСторно(Движение, Строка, МетаданныеОбъект)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор,ВидДвижения");
	
	// вид движения
	Если МетаданныеОбъект.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
		Движение.ВидДвижения = Строка.ВидДвижения;
	КонецЕсли;
	
	// ресурсы
	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл
		Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвижениеСторно

// Копирует значения движения по регистру бухгалтерии в строку сторно я
// нового движения для измерений и реквизитов. Ресурсы инвертируются
//
Процедура ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(Движение, Строка, МетаданныеОбъект)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор");
	
	// субконто
	Если МетаданныеОбъект.Корреспонденция Тогда

		Для каждого Субконто Из Строка.СубконтоДт Цикл
			Движение.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Для каждого Субконто Из Строка.СубконтоКт Цикл
			Движение.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

	Иначе

		Для каждого Субконто Из Строка.Субконто Цикл
			Движение.Субконто[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

	КонецЕсли;
	
	// ресурсы
	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл

		Если МДОбъект.ПризнакУчета = Неопределено Тогда
			Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
		Иначе

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Дт"]) Тогда
				Движение[МДОбъект.Имя + "Дт"] = - Строка[МДОбъект.Имя + "Дт"];
			КонецЕсли;

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Кт"]) Тогда
				Движение[МДОбъект.Имя + "Кт"] = - Строка[МДОбъект.Имя + "Кт"];
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвиженияСторноПоРегиструБухгалтерии()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ НА ЗАКЛАДКЕ БУ
//

// Процедура - обработчик события "ПриИзменении" поля Организация
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если мОрганизация = Организация Тогда
		Возврат;
	КонецЕсли;

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
		
	ЕстьДвижения = НЕ (Движения.Хозрасчетный.Количество() + Движения.КнигаУчетаДоходовИРасходов.Количество() = 0);
		
	ТекстВопроса = "";
		
	Если ЕстьДвижения Тогда
			
		ТекстВопроса = ТекстВопроса 
		             + "При смене организации значения расчетных счетов и подразделений в проводках будут очищены.";
				
	КонецЕсли;

	// Инициализация реквизита формы "ПрименениеУСН".
	ПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);			
			
	Если (мПрименениеУСН <> ПрименениеУСН) И (НЕ мПрименениеУСН) Тогда

		ТекстВопроса = ТекстВопроса
		             + ?(НЕ ЗначениеЗаполнено(ТекстВопроса), "", Символы.ПС)
		             + "Для выбранной организации установлен другой режим налогообложения.
		               |Суммы налогового учета будут очищены.";

	КонецЕсли;

	ТекстВопроса = ТекстВопроса
	             + ?(НЕ ЗначениеЗаполнено(ТекстВопроса), "", "
	                                                        |Продолжить?");

	Ответ = Неопределено;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
						   
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
	КонецЕсли;

	Если Ответ = КодВозвратаДиалога.Таймаут
	 ИЛИ Ответ = КодВозвратаДиалога.Нет Тогда

		Организация   = мОрганизация;
		ПрименениеУСН = мПрименениеУСН;
				
		Возврат;

	КонецЕсли;

	Если ЕстьДвижения И Ответ = КодВозвратаДиалога.Да Тогда			
		
		ТипБС = Тип("СправочникСсылка.БанковскиеСчета");
		ТипПО = Тип("СправочникСсылка.ПодразделенияОрганизаций");
		
		Для каждого Проводка Из ЭлементыФормы.ТабличноеПолеДвиженияБУ.Значение Цикл
			
			Если ЗначениеЗаполнено(Проводка.СубконтоДт.БанковскиеСчета) Тогда
				Если НЕ (Проводка.СубконтоДт.БанковскиеСчета = Организация) Тогда
					Проводка.СубконтоДт.БанковскиеСчета = Новый(ТипБС);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Проводка.СубконтоКт.БанковскиеСчета) Тогда
				Если НЕ (Проводка.СубконтоДт.БанковскиеСчета = Организация) Тогда
					Проводка.СубконтоКт.БанковскиеСчета = Новый(ТипБС);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Проводка.ПодразделениеДт) Тогда
				Если НЕ (Проводка.ПодразделениеДт = Организация) Тогда
					Проводка.ПодразделениеДт = Новый(ТипПО);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Проводка.ПодразделениеКт) Тогда
				Если НЕ (Проводка.ПодразделениеДт = Организация) Тогда
					Проводка.ПодразделениеДт = Новый(ТипПО);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПрименениеУСН И Ответ = КодВозвратаДиалога.Да Тогда
		
		
	КонецЕсли;
	
	мОрганизация   = Организация;
	мПрименениеУСН = ПрименениеУСН;


КонецПроцедуры // ОрганизацияПриИзменении()

// Пересчет валютной суммы в основную по курсу на указанную дату
//
Функция ПересчетСуммыПоКурсу(ВалютнаяСумма, Валюта, Дата) Экспорт

	Запись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Валюта));
	Сумма  = ВалютнаяСумма * Запись.Курс;

	Если Запись.Кратность <> 0 Тогда
		Сумма = Сумма / Запись.Кратность;
	КонецЕсли;

	Возврат Сумма;

КонецФункции // ПересчетСуммыПоКурсу()

// Процедура - обработчик события "ПриНачалеРедактирования" элемента ТабличноеПолеДвиженияБУ 
//
Процедура ТабличноеПолеДвиженияБУПриНачалеРедактирования(Элемент, НоваяСтрока)

	Строка = Элемент.ТекущиеДанные;

	Строка.Период      = Дата;
	Строка.Организация = Организация;

КонецПроцедуры

// Процедура - обработчик события "ПередОкончаниемРедактирования" элемента ТабличноеПолеДвиженияБУ
//
Процедура ТабличноеПолеДвиженияБУПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ПересчитатьСуммуОперации();

КонецПроцедуры // ТабличноеПолеДвиженияБУПередОкончаниемРедактирования()

// Процедура - обработчик события "ПослеУдаления" элемента ТабличноеПолеДвиженияБУ
//
Процедура ТабличноеПолеДвиженияБУПослеУдаления(Элемент)
	
	ПересчитатьСуммуОперации();
	
КонецПроцедуры // ТабличноеПолеДвиженияБУПослеУдаления()

// Процедура - обработчик события "ОбработкаВыбора" поля СчетДт
//
Процедура ТабличноеПолеДвиженияБУСчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля СчетКт
//
Процедура ТабличноеПолеДвиженияБУСчетКтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ВалютаДт
//
Процедура ТабличноеПолеДвиженияБУВалютаДтПриИзменении(Элемент)

	ТД       = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные;
	ТД.Сумма = ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаДт, ТД.ВалютаДт, Дата);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ВалютаКт
//
Процедура ТабличноеПолеДвиженияБУВалютаКтПриИзменении(Элемент)

	ТД = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные;

	Если НЕ ТД.СчетДт.Валютный Тогда
		ТД.Сумма = ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаКт, ТД.ВалютаКт, Дата);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Сумма
//
Процедура ТабличноеПолеДвиженияБУСуммаПриИзменении(Элемент)

	ПересчитатьСуммуОперации();
	
	РасчетСуммыНУ()

КонецПроцедуры // ТабличноеПолеДвиженияБУСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" полей СубконтоДт
//
Процедура ТабличноеПолеДвиженияБУСубконтоДтНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекущаяСтрока = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные;

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         Дата);
	СписокПараметров.Вставить("СчетУчета",    ТекущаяСтрока.СчетДт);
	СписокПараметров.Вставить("Номенклатура", ТекущаяСтрока.СубконтоДт.Номенклатура);
	СписокПараметров.Вставить("Склад",        ТекущаяСтрока.СубконтоДт.Склады);
	СписокПараметров.Вставить("Организация",  ТекущаяСтрока.Организация);
	СписокПараметров.Вставить("Контрагент",   ТекущаяСтрока.СубконтоДт.Контрагенты);
	СписокПараметров.Вставить("ДоговорКонтрагента", ТекущаяСтрока.СубконтоДт.Договоры);
	СписокПараметров.Вставить("СторонаПроводки", "Дт");
    СписокПараметров.Вставить("ЭтоНовыйДокумент",ЭтоНовый());

	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля СубконтоКт1
//
Процедура ТабличноеПолеДвиженияБУСубконтоКтНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекущаяСтрока = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные;

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         Дата);
	СписокПараметров.Вставить("СчетУчета",    ТекущаяСтрока.СчетКт);
	СписокПараметров.Вставить("Номенклатура", ТекущаяСтрока.СубконтоКт.Номенклатура);
	СписокПараметров.Вставить("Склад",        ТекущаяСтрока.СубконтоКт.Склады);
	СписокПараметров.Вставить("Организация",  ТекущаяСтрока.Организация);
	СписокПараметров.Вставить("Контрагент",   ТекущаяСтрока.СубконтоКт.Контрагенты);
	СписокПараметров.Вставить("ДоговорКонтрагента", ТекущаяСтрока.СубконтоКт.Договоры);
	СписокПараметров.Вставить("СторонаПроводки", "Кт");
    СписокПараметров.Вставить("ЭтоНовыйДокумент",ЭтоНовый());
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ 

Процедура ТабличноеПолеДвиженияБУСубконтоДтПриИзменении(Элемент)

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда

		ТекущаяСтрока = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные;
		Договор       = ТекущаяСтрока.СубконтоДт.Договоры;

		Если ЗначениеЗаполнено(Договор) Тогда
			Если НЕ (Договор.Владелец = Элемент.Значение) Тогда
				ТекущаяСтрока.СубконтоДт.Договоры = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ТабличноеПолеДвиженияБУСубконтоКтПриИзменении(Элемент)

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда

		ТекущаяСтрока = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные;
		Договор       = ТекущаяСтрока.СубконтоКт.Договоры;

		Если ЗначениеЗаполнено(Договор) Тогда
			Если НЕ (Договор.Владелец = Элемент.Значение) Тогда
				ТекущаяСтрока.СубконтоКт.Договоры = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ТабличноеПолеДвиженияБУСчетДтНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФорму("ФормаВыбора");

	ФормаВыбора.ПараметрСчет            = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные.СчетКт;
	ФормаВыбора.ВладелецФормы           = Элемент;
	ФормаВыбора.ЗакрыватьПриВыборе      = Истина;
	ФормаВыбора.РежимВыбора             = Истина;
	ФормаВыбора.ПараметрКорреспонденция       = ВидДвиженияБухгалтерии.Кредит;
	ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаВыбора.НачальноеЗначениеВыбора       = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные.СчетДт;

	ФормаВыбора.Открыть();

КонецПроцедуры

Процедура ТабличноеПолеДвиженияБУСчетКтНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФорму("ФормаВыбора");

	ФормаВыбора.ПараметрСчет       = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные.СчетДт;
	ФормаВыбора.ВладелецФормы      = Элемент;
	ФормаВыбора.ЗакрыватьПриВыборе = Истина;
	ФормаВыбора.РежимВыбора        = Истина;
	ФормаВыбора.ПараметрКорреспонденция       = ВидДвиженияБухгалтерии.Дебет;
	ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаВыбора.НачальноеЗначениеВыбора       = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные.СчетКт;

	ФормаВыбора.Открыть();

КонецПроцедуры

// Обработчик события "ПриИзменении" поля ввода "Дата".
// Проверяет корректность номера документа.
// Обновляет значение реквизита формы "ПрименениеУСН".
//
Процедура ДатаПриИзменении(Элемент)
	
	// Инициализация реквизита формы "ПрименениеУСН".
	ПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);			
	
	Если (мПрименениеУСН <> ПрименениеУСН) И (НЕ мПрименениеУСН) Тогда
		
		ТекстВопроса = "На заданную дату в организации установлен другой режим налогообложения.
		               |Проводки налогового учета будут очищены.
		               |Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Таймаут 
		 ИЛИ Ответ = КодВозвратаДиалога.Нет Тогда
			
			Дата          = мТекущаяДатаДокумента;
			ПрименениеУСН = мПрименениеУСН;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
    мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	мПрименениеУСН        = ПрименениеУСН; // запомним текущее значение реквизита "ПрименениеУСН"
	
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ДействияФормыПоказатьСкрытьДанныеНУ(Кнопка)
	
	ПоказыватьДанныеНУ = НЕ ПоказыватьДанныеНУ;
	Кнопка.Пометка = ПоказыватьДанныеНУ;
	УстановитьВидимость();

КонецПроцедуры
 
Процедура ДействияФормыНастройка(Кнопка)
	
	ФормаНастройки = ЭтотОбъект.ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	ТекущаяСтраница = ЭлементыФормы.ПанельРегистров.ТекущаяСтраница;
	
	ИнициализацияФормыНастройки(ФормаНастройки);
	
	Если Не ФормаНастройки.ОткрытьМодально() = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработкаНастройки(ФормаНастройки);
	
	ОбновлениеОтображенияСпискаРегистров();
	Если ЭлементыФормы.ПанельРегистров.Страницы.Найти(ТекущаяСтраница.Имя)<>Неопределено Тогда
		ЭлементыФормы.ПанельРегистров.ТекущаяСтраница = ТекущаяСтраница;
	Иначе
		ЭлементыФормы.ПанельРегистров.ТекущаяСтраница = ЭлементыФормы.ПанельРегистров.Страницы.ПроводкиБУ;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение параметров формы настройки списка регистров перед открытием
//
Процедура ИнициализацияФормыНастройки(ФормаНастройки,ИмяТекущейСтраницы = "")
	
	ФормаНастройки.СписокРегистровНакопления.Очистить();
	ФормаНастройки.СписокРегистровСведений.Очистить();
	
	Для каждого Набор Из Движения Цикл
		
		МетаданныеНабора = Набор.Метаданные();
		Если Метаданные.РегистрыНакопления.Содержит(МетаданныеНабора) Тогда
			НовыйЭлементСписка = ФормаНастройки.СписокРегистровНакопления.Добавить(МетаданныеНабора.Имя, МетаданныеНабора.Синоним);
			Если МетаданныеНабора.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				НовыйЭлементСписка.Картинка = БиблиотекаКартинок.РегистрНакопления_Остатки;
			Иначе
				НовыйЭлементСписка.Картинка = БиблиотекаКартинок.РегистрНакопления_Обороты;
			КонецЕсли;
			Если ТаблицаРегистровНакопления.Найти(МетаданныеНабора.Имя, "Имя") <> Неопределено Тогда
				НовыйЭлементСписка.Пометка = Истина;
			КонецЕсли; 
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеНабора) Тогда
			НовыйЭлементСписка = ФормаНастройки.СписокРегистровСведений  .Добавить(МетаданныеНабора.Имя, МетаданныеНабора.Синоним);
			НовыйЭлементСписка.Картинка = БиблиотекаКартинок.РегистрСведений;
			Если ТаблицаРегистровСведений.Найти(МетаданныеНабора.Имя, "Имя") <> Неопределено Тогда
				НовыйЭлементСписка.Пометка = Истина;
			КонецЕсли; 
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	ФормаНастройки.СписокРегистровНакопления.СортироватьПоПредставлению();
	ФормаНастройки.СписокРегистровСведений.СортироватьПоПредставлению();
	ФормаНастройки.ТЗРегистровНакопления  = ТаблицаРегистровНакопления.Выгрузить();
	ФормаНастройки.ТЗРегистровСведений    = ТаблицаРегистровСведений.Выгрузить();
	
	ФормаНастройки.ИмяТекущейСтраницы = ИмяТекущейСтраницы;
	
КонецПроцедуры

// Обработка результатов возвращаемых формой настройки списка регистров
//
Процедура ОбработкаНастройки(ФормаНастройки)
	
	//////////////////////
	// Регистры накопления
	//////////////////////
	
	// Сначала удалим те, у которых сняли флажки
	Индекс = 0;
	Пока 1 = 1 Цикл
		
		Если Индекс > ТаблицаРегистровНакопления.Количество() - 1 Тогда
			Прервать;
		КонецЕсли; 
			
		СтрокаТаблицы = ТаблицаРегистровНакопления[Индекс];
			
		ЭлементСписка = ФормаНастройки.СписокРегистровНакопления.НайтиПоЗначению(СтрокаТаблицы.Имя);
		Если ЭлементСписка = Неопределено Тогда
			Движения[СтрокаТаблицы.Имя].Очистить();
			ТаблицаРегистровНакопления.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли; 
		Если НЕ ЭлементСписка.Пометка Тогда
			Движения[СтрокаТаблицы.Имя].Очистить();
			ТаблицаРегистровНакопления.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
			
		Индекс = Индекс + 1;
		
	КонецЦикла;
		
	// Теперь добавим новые
	Для каждого ЭлементСписка Из ФормаНастройки.СписокРегистровНакопления Цикл
		
		Если НЕ ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
			
		Если ТаблицаРегистровНакопления.Найти(ЭлементСписка.Значение, "Имя") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		НоваяСтрока = ТаблицаРегистровНакопления.Добавить();
		НоваяСтрока.Имя = ЭлементСписка.Значение;
		НоваяСтрока.Представление = ЭлементСписка.Представление;
		
	КонецЦикла; 
		
	ТаблицаРегистровНакопления.Сортировать("Имя ВОЗР");
	
	//////////////////////
	// Регистры сведений
	//////////////////////
	
	// Сначала удалим те, у которых сняли флажки
	Индекс = 0;
	Пока 1 = 1 Цикл
		
		Если Индекс > ТаблицаРегистровСведений.Количество() - 1 Тогда
			Прервать;
		КонецЕсли; 
			
		СтрокаТаблицы = ТаблицаРегистровСведений[Индекс];
			
		ЭлементСписка = ФормаНастройки.СписокРегистровСведений.НайтиПоЗначению(СтрокаТаблицы.Имя);
		Если ЭлементСписка = Неопределено Тогда
			Движения[СтрокаТаблицы.Имя].Очистить();
			ТаблицаРегистровСведений.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли; 
		Если НЕ ЭлементСписка.Пометка Тогда
			Движения[СтрокаТаблицы.Имя].Очистить();
			ТаблицаРегистровСведений.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
			
		Индекс = Индекс + 1;
		
	КонецЦикла;
		
	// Теперь добавим новые
	Для каждого ЭлементСписка Из ФормаНастройки.СписокРегистровСведений Цикл
		
		Если НЕ ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
			
		Если ТаблицаРегистровСведений.Найти(ЭлементСписка.Значение, "Имя") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		НоваяСтрока = ТаблицаРегистровСведений.Добавить();
		НоваяСтрока.Имя = ЭлементСписка.Значение;
		НоваяСтрока.Представление = ЭлементСписка.Представление;
		
	КонецЦикла; 
		
	ТаблицаРегистровСведений.Сортировать("Имя ВОЗР");
	
	НастроитьЗакладкиПанелейРегистров();
	
КонецПроцедуры

Процедура ПереключитьАктивность(Кнопка)

	ТекущаяАктивность = Ложь;
	Если ЭлементыФормы[Кнопка.Имя].Значение.Количество() > 0 Тогда
		ТекущаяАктивность = ЭлементыФормы[Кнопка.Имя].Значение[0].Активность;
	КонецЕсли;
	ЭлементыФормы[Кнопка.Имя].Значение.УстановитьАктивность(НЕ ТекущаяАктивность);

КонецПроцедуры

Процедура ТиповаяОперацияОткрытие(Элемент, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
		СтандартнаяОбработка = ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФлажокСписокПриИзменении(Элемент)
	
	ЭлементыФормы.Панель1.ТекущаяСтраница = ?(Элемент.Значение,ЭлементыФормы.Панель1.Страницы.Страница2,ЭлементыФормы.Панель1.Страницы.Страница1);
	ЭлементыФормы.Разделитель1.Видимость = Элемент.Значение;
	ОбновлениеОтображения();

КонецПроцедуры

Процедура СпособПриИзменении(Элемент)
	
	ОбновлениеОтображения();
	
КонецПроцедуры

