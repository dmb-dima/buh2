// Список значений обособленный подразделений организации, чтобы делать фильтр
Перем мОбособ;

Перем мЕстьОбособленныеПодразделения;
Перем мРежимРаботы Экспорт;
Перем мНазвФормыФильтра;
Перем мСохранитьЗначения;

Перем НП; // Настройка периода

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет список выбора вида регламентированной отчетности,
// по которому устанавливается отбор в списке документов.
//
// Список заполняется видами сохраненных в информационной базе отчетов.
// Список обновляется динамически при начале выбора значения из списка.
//
Процедура ЗаполнитьСписокВидовОтчетов()

	// Заполняем список видов регламентированной отчетности по обнаруженным
	// в информационной базе сохраненным документам РегламентированныйОтчет.

	// Используем механизм запросов.
	Запрос = Новый Запрос();

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентированныйОтчет.ИсточникОтчета КАК ИсточникВДокументе
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсточникВДокументе";

	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗапроса   = РезультатЗапроса.Выгрузить();
	ТаблицаЗапроса.Свернуть("ИсточникВДокументе");
	МассивЗначений   = ТаблицаЗапроса.ВыгрузитьКолонку("ИсточникВДокументе");

	// заполняем список выбора
	ЭлементыФормы.СписокВидовОтчета.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	
	Для Каждого Эл Из ЭлементыФормы.СписокВидовОтчета.СписокВыбора Цикл
		
		НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", Эл.Значение);
		Если НайденныйЭлемент = Неопределено ИЛИ ПустаяСтрока(НайденныйЭлемент.Наименование) Тогда
			Эл.Представление = Эл.Значение;
		Иначе
			Эл.Представление = НайденныйЭлемент.Наименование;
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементыФормы.СписокВидовОтчета.СписокВыбора.СортироватьПоПредставлению();

КонецПроцедуры // ЗаполнитьСписокВидовОтчетов()

// Процедура заполняет список выбора вида регламентированной отчетности,
// по которому устанавливается отбор в списке документов.
//
// Список заполняется видами сохраненных в информационной базе отчетов.
// Список обновляется динамически при начале выбора значения из списка.
//
Процедура ЗаполнитьСписокВидовНО()

	// Заполняем список видов регламентированной отчетности по обнаруженным
	// в информационной базе сохраненным документам РегламентированныйОтчет.

	// Используем механизм запросов.
	Запрос = Новый Запрос();

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентированныйОтчет.КодИМНС КАК КодИМНС
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодИМНС";

	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗапроса   = РезультатЗапроса.Выгрузить();
	ТаблицаЗапроса.Свернуть("КодИМНС");
	МассивЗначений   = ТаблицаЗапроса.ВыгрузитьКолонку("КодИМНС");

	// заполняем список выбора
	ЭлементыФормы.СписокВидовНО.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	
	//Для Каждого Эл Из ЭлементыФормы.СписокВидовОтчета.СписокВыбора Цикл
	//	
	//	НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", Эл.Значение);
	//	Если НайденныйЭлемент = Неопределено ИЛИ ПустаяСтрока(НайденныйЭлемент.Наименование) Тогда
	//		Эл.Представление = Эл.Значение;
	//	Иначе
	//		Эл.Представление = НайденныйЭлемент.Наименование;
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	//ЭлементыФормы.СписокВидовОтчета.СписокВыбора.СортироватьПоПредставлению();

КонецПроцедуры // ЗаполнитьСписокВидовОтчетов()

// Устанавливает отбор списка отчетов по заданному виду.
//
// Параметры
//  ВидОтчета  – строка – вид регламентированного отчета.
//
Процедура УстановитьОтборПоВидуОтчета(ВидОтчета)

	Если ПустаяСтрока(ВидОтчета) Тогда
		Отбор.ИсточникОтчета.Использование = Ложь;
	Иначе
		Отбор.ИсточникОтчета.Установить(ВидОтчета);
	КонецЕсли;

КонецПроцедуры // УстановитьОтборПоВидуОтчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	НастройкиФильтров = ВосстановитьЗначение("НастройкиОтборовФормыСпискаДокументаРегламентированнаяОтчетность");
	мСохранитьЗначения = Истина;
	мНазвФормыФильтра = "";

	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	ОсновнаяОрганизация = РегламентированнаяОтчетность.ПолучитьОрганизациюПоУмолчанию();
	
	Если НЕ УчетПоВсемОрганизациям Тогда

		// Если ((НастройкиФильтров = Неопределено) Или (НастройкиФильтров.ОтборПоОрг)) И (ОсновнаяОрганизация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда

		РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма, УчетПоВсемОрганизациям, ОсновнаяОрганизация, "ДокументСписок");

		// КонецЕсли;

		Организация = ОсновнаяОрганизация;
		ЭлементыФормы.Организация.Доступность = Ложь;
		ЭлементыФормы.ОтборПоОрг.Значение = Истина;

		// Дизейблим флажок
		ЭлементыФормы.ОтборПоОрг.Доступность = Ложь;

	Иначе

		// Если включен учет по всем организациям
		Организация = ?(НастройкиФильтров = Неопределено, ОсновнаяОрганизация, НастройкиФильтров.Организация);
		//ЭлементыФормы.Организация.Доступность = Ложь;

		// ЭлементыФормы.ОтборПоОрг.Доступность = Истина;

		Если ((НастройкиФильтров = Неопределено) Или (НастройкиФильтров.ОтборПоОрг)) И (Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда

			// Отбор.Организация.Установить(Организация);
			СоставФильтраОбособленныеПодразделения();
			ЭлементыФормы.ОтборПоОрг.Значение = Истина;

		КонецЕсли;

		Если НастройкиФильтров <> Неопределено И НЕ НастройкиФильтров.ОтборПоОрг Тогда

			ЭлементыФормы.Организация.Доступность = Ложь;

		КонецЕсли;

	КонецЕсли;

	ЭлементыФормы.ДокументСписок.НастройкаПорядка.Дата.Доступность = Истина;

	Если НастройкиФильтров = Неопределено Тогда

		ЭлементыФормы.ДокументСписок.Колонки.КодИМНС.ИзменениеРазмера =  ИзменениеРазмераКолонки.Изменять;
		ЭлементыФормы.ДокументСписок.Колонки.КодИМНС.Ширина = 2;

		// в случае первого раза, устанавиливаем фильтр по датам
		ДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(КонецКвартала(РабочаяДата), -1));
		ДатаНачалаПериодаОтчета = НачалоМесяца(ДатаКонцаПериодаОтчета);
		ЭлементыФормы.Период.Значение = Истина;

		ПоказатьПериод();
		ПолеВыбораПериодичность = Перечисления.Периодичность.Месяц;
		УстановитьОтборПоПериоду();

		ЭлементыФормы.ПанельПериод.Страницы.СтандартныйПериод.Видимость = Истина;
		ЭлементыФормы.ПанельПериод.Страницы.ПроизвольныйПериод.Видимость = Ложь;


	ИначеЕсли НастройкиФильтров <> Неопределено Тогда

		//ЭлементыФормы.СписокВидовОтчета.Доступность = Ложь;
		//ЭлементыФормы.СписокВидовНО.Доступность = Ложь;

		// *** восстанавливаем ****************
		мНазвФормыФильтра = "";

		ДатаНачалаПериодаОтчета = НастройкиФильтров.ДатаНач;
		ДатаКонцаПериодаОтчета = НастройкиФильтров.ДатаКон;

		ПолеВыбораПериодичность = НастройкиФильтров.Периодичность;

		Если (ПолеВыбораПериодичность = Перечисления.Периодичность.Месяц)
		Или (ПолеВыбораПериодичность = Перечисления.Периодичность.Квартал) Тогда  // ежеквартально

			ЭлементыФормы.ПанельПериод.Страницы.СтандартныйПериод.Видимость = Истина;
			ЭлементыФормы.ПанельПериод.Страницы.ПроизвольныйПериод.Видимость = Ложь;
			ПоказатьПериод();

		Иначе

			ЭлементыФормы.ПанельПериод.Страницы.ПроизвольныйПериод.Видимость = Истина;
			ЭлементыФормы.ПанельПериод.Страницы.СтандартныйПериод.Видимость = Ложь;

		КонецЕсли;

		Если НастройкиФильтров.Период Тогда

			ДейстияПриУстановленномФЛПериод();

			ЭлементыФормы.Период.Значение = Истина;

		Иначе

			ДейстияПриСнятомФЛПериод();
			ЭлементыФормы.Период.Значение = Ложь;

		КонецЕсли;

		Если УчетПоВсемОрганизациям Тогда

			Если НастройкиФильтров.ОтборПоОрг Тогда

				ЭлементыФормы.ОтборПоОрг.Значение = Истина;

			Иначе

				ЭлементыФормы.ОтборПоОрг.Значение = Ложь;

			КонецЕсли;

		КонецЕсли;

		
		// Если вызвано из справочника, то фильтр установи та форма которая вызвала
		// в этом случае не восстанавливаем свой фильтр
		// Восстановим его только когда форма списка документов будет открыта напрямую

		Если мРежимРаботы <> "ВызваноИзСправочника" Тогда

			ИсточникОтчетаДляОтбора = НастройкиФильтров.ОтчетнаяФормаЗначение;
			НаименованиеОтчетаДляОтбора = НастройкиФильтров.ОтчетнаяФормаПредставление;
			ДанныеОтчета = Новый СписокЗначений;
			ДанныеОтчета.Добавить(ИсточникОтчетаДляОтбора, НаименованиеОтчетаДляОтбора);
			
			//ЭлементыФормы.СписокВидовОтчета.СписокВыбора.Добавить(ИсточникОтчетаДляОтбора, НаименованиеОтчетаДляОтбора);
			ЭлементыФормы.СписокВидовОтчета.СписокВыбора = ДанныеОтчета;
			ЭлементыФормы.СписокВидовОтчета.ВыделенныйТекст = НаименованиеОтчетаДляОтбора;
			

			Если НастройкиФильтров.ОтборПоФорме Тогда

				ЭлементыФормы.СписокВидовОтчета.Доступность = Истина;
				Отбор.ИсточникОтчета.Установить(ИсточникОтчетаДляОтбора);
				ЭлементыФормы.ОтборПоФорме.Значение = Истина;

			Иначе

				Отбор.ИсточникОтчета.Использование = Ложь;
				ЭлементыФормы.СписокВидовОтчета.Доступность = Ложь;
				ЭлементыФормы.ОтборПоФорме.Значение = Ложь;

			КонецЕсли;

		Иначе

			мНазвФормыФильтра = Элементыформы.СписокВидовОтчета.СписокВыбора[0].Представление;

		КонецЕсли;


		СписокИФНС = Новый СписокЗначений;
		СписокИФНС.Добавить(НастройкиФильтров.НалоговыйОрганЗначение, НастройкиФильтров.НалоговыйОрганЗначение);
		
		//ЭлементыФормы.СписокВидовОтчета.СписокВыбора.Добавить(ИсточникОтчетаДляОтбора, НаименованиеОтчетаДляОтбора);
		ЭлементыФормы.СписокВидовНО.СписокВыбора = СписокИФНС;
		ЭлементыФормы.СписокВидовНО.Значение = НастройкиФильтров.НалоговыйОрганЗначение;

		Если НастройкиФильтров.ПоКодуИФНС Тогда

			ЭлементыФормы.ПоКодуИФНС.Значение = Истина;
			ЭлементыФормы.СписокВидовНО.Доступность = Истина;
			Отбор.КодИМНС.Установить(НастройкиФильтров.НалоговыйОрганЗначение);

		Иначе

			ЭлементыФормы.ПоКодуИФНС.Значение = Ложь;
			Отбор.КодИМНС.Использование = Ложь;
			ЭлементыФормы.СписокВидовНО.Доступность = Ложь;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// УстановитьОтборПоПериоду
//
Процедура УстановитьОтборПоПериоду()

	Если ПолеВыбораПериодичность = Перечисления.Периодичность.Месяц Тогда
	// При такой установке отбора в журнал попадают отчеты, у которых периодичность – ежемесячно,
	// а дата конца периода составления отчета совпадает с датой конца указанного периода отбора.
		Отбор.Периодичность.Установить(Перечисления.Периодичность.Месяц);
		Отбор.ДатаОкончания.Установить(ДатаКонцаПериодаОтчета);
	ИначеЕсли ПолеВыбораПериодичность = Перечисления.Периодичность.Квартал Тогда
		Отбор.Периодичность.Использование = Ложь;
		Отбор.ДатаОкончания.Установить(ДатаКонцаПериодаОтчета);
	Иначе
		Отбор.Периодичность.Использование = Ложь;
		Отбор.ДатаОкончания.ЗначениеС = ДатаНачалаПериодаОтчета;
		Отбор.ДатаОкончания.ЗначениеПо = ДатаКонцаПериодаОтчета;
		Отбор.ДатаОкончания.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
		Отбор.ДатаОкончания.Использование = Истина;
	КонецЕсли;

КонецПроцедуры // УстановитьОтборПоПериоду

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события "ПриИзменении" поля выбора
// вида отчета, по которому устанавливается отбор.
//
// Управляет отбором документов по виду отчетности.
//
Процедура СписокВидовОтчетаПриИзменении(Элемент)

	мНазвФормыФильтра = ЭлементыФормы.СписокВидовОтчета.ВыделенныйТекст;
	ЭлементыФормы.ОтборПоФорме.Значение = Истина;
	УстановитьОтборПоВидуОтчета(Элемент.Значение);

КонецПроцедуры // СписокВидовОтчетаПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля выбора
// вида отчета, по которому устанавливается отбор.
//
// Вызывает заполнение списка выбора поля выбора вида регламентированной
// отчетности.
//
Процедура СписокВидовОтчетаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ЗаполнитьСписокВидовОтчетов();

КонецПроцедуры // СписокВидовОтчетаНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля.
Процедура ДокументСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.Период.УстановитьТекст(ПредставлениеПериода(НачалоДня(ДанныеСтроки.ДатаНачала), КонецДня(ДанныеСтроки.ДатаОкончания), "ФП = Истина" ));
	ОформлениеСтроки.Ячейки.Период.ОтображатьТекст = Истина;

КонецПроцедуры

// Процедура  - обработчик события "ПередЗакрытием" формы.
// Процедура осуществит запись настроек
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если мСохранитьЗначения Тогда

		НастройкиФильтров = Новый Структура;

		НастройкиФильтров.Вставить("Период", ЭлементыФормы.Период.Значение);

		НастройкиФильтров.Вставить("ДатаНач", ДатаНачалаПериодаОтчета);
		НастройкиФильтров.Вставить("ДатаКон", ДатаКонцаПериодаОтчета);

		НастройкиФильтров.Вставить("Организация", Организация);
		НастройкиФильтров.Вставить("ОтборПоОрг", ЭлементыФормы.ОтборПоОрг.Значение);

		Если (мНазвФормыФильтра = Неопределено) Или РегламентированнаяОтчетность.ПустоеЗначение(мНазвФормыФильтра)
		 И (Элементыформы.СписокВидовОтчета.СписокВыбора.Количество() > 0) Тогда
		 	мНазвФормыФильтра = Элементыформы.СписокВидовОтчета.СписокВыбора[0].Представление;

		КонецЕсли;

		НастройкиФильтров.Вставить("ОтчетнаяФормаПредставление", мНазвФормыФильтра);

		НастройкиФильтров.Вставить("ОтчетнаяФормаЗначение", Элементыформы.СписокВидовОтчета.Значение);

		НастройкиФильтров.Вставить("ОтборПоФорме", ЭлементыФормы.ОтборПоФорме.Значение);

		НастройкиФильтров.Вставить("НалоговыйОрганЗначение", ?(ЭлементыФормы.СписокВидовНО.Значение = Неопределено, "    ", ЭлементыФормы.СписокВидовНО.Значение));

		НастройкиФильтров.Вставить("ПоКодуИФНС", ЭлементыФормы.ПоКодуИФНС.Значение);

		НастройкиФильтров.Вставить("Периодичность", ПолеВыбораПериодичность);

		СохранитьЗначение("НастройкиОтборовФормыСпискаДокументаРегламентированнаяОтчетность", НастройкиФильтров);

	КонецЕсли;

КонецПроцедуры

// Процедура СоставФильтраОбособленныеПодразделения()
// Процедура устанавливает отбор (фильтр) по организации
//
Процедура СоставФильтраОбособленныеПодразделения()

	Если Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации") Тогда

		// Скроем колонку, т.к. организация определена
		ЭлементыФормы.ДокументСписок.Колонки.Организация.Видимость         = Ложь;
		ЭлементыФормы.ДокументСписок.Колонки.Организация.ИзменятьВидимость = Ложь;

		мОбособ.Очистить();
		мОбособ = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);

		// На будущее в мОбособ хранится списокзначений обособленных подразделений
		Если мОбособ.Количество() = 0 Тогда

			// Сделаем отбор по текущей организации
			Отбор.Организация.Установить(Организация);

			мЕстьОбособленныеПодразделения = Ложь;

		Иначе

			//Отбор.Организация.Использование = Ложь;
			мЕстьОбособленныеПодразделения = Истина;

			Отбор.Организация.Установить(Организация);
			ЭлементыФормы.ДокументСписок.Колонки.Организация.Видимость         = Ложь;
			ЭлементыФормы.ДокументСписок.Колонки.Организация.ИзменятьВидимость = Ложь;

		КонецЕсли;

	Иначе

		Отбор.Организация.Установить(Организация);

	КонецЕсли;

КонецПроцедуры

// Процедура ОтборПоОрг
// Процедура устанавливает отбор, с возведением флажка.
//
Процедура ОтборПоОрг()

	СоставФильтраОбособленныеПодразделения();
	ЭлементыФормы.ОтборПоОрг.Значение = Истина;

КонецПроцедуры // ОтборПоОрг

// Процедура - обработчик "ПриИзменении".
//
Процедура ОрганизацияПриИзменении(Элемент)

	ОтборПоОрг();

КонецПроцедуры // ОрганизацияПриИзменении

// Процедура ДейстияПриСнятомФЛПериод.
// Процедура устанавливает "окружение" для режима без периода
//
Процедура ДейстияПриСнятомФЛПериод()

	// При снятом флажке фильтра нет и дизейблим элементы

	ЭлементыФормы.ПолеВыбораПериодичность.Доступность = Ложь;
	ЭлементыФормы.ПанельПериод.Доступность = Ложь;
	ЭлементыФормы.ПолеВыбораПериодичность.Доступность = Ложь;

	Отбор.ДатаНачала.Использование = Ложь;
	Отбор.ДатаОкончания.Использование = Ложь;
	Отбор.Периодичность.Использование = Ложь;

КонецПроцедуры // ДейстияПриСнятомФЛПериод

// Процедура ДейстияПриУстановленномФЛПериод
// Устанавливает режим, при установленном флажке Период
//
Процедура ДейстияПриУстановленномФЛПериод()

	ЭлементыФормы.ПолеВыбораПериодичность.Доступность = Истина;
	ЭлементыФормы.ПанельПериод.Доступность = Истина;

	УстановитьОтборПоПериоду();

КонецПроцедуры // ДейстияПриУстановленномФЛПериод

// Процедура - обработчик события "ПриИзменении"
//
Процедура ПериодПриИзменении(Элемент)

	Если НЕ Элемент.Значение Тогда

		ДейстияПриСнятомФЛПериод();

		//Отбор.ДатаОкончания.Использование = Ложь;

	Иначе

		ДейстияПриУстановленномФЛПериод();

	КонецЕсли;

КонецПроцедуры // ПериодПриИзменении

// Процедура - обработчик события "Нажатие" кнопки "Настройка" верхней командной панели.
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	НП.ВариантНастройки = ВариантНастройкиПериода.Период;
	НП.РедактироватьКакПериод = Истина;
	НП.РедактироватьКакИнтервал = Ложь;

	Если НП.Редактировать() Тогда

		ДатаНачалаПериодаОтчета = НП.ПолучитьДатуНачала();
		ДатаКонцаПериодаОтчета = НП.ПолучитьДатуОкончания();
		УстановитьОтборПоПериоду();

	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

// Процедура - обработчик "ПередОткрытием"
// Обрабатывает переменную мРежимРаботы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если мРежимРаботы = Неопределено Тогда
		мРежимРаботы = "";
	КонецЕсли;

	Для Каждого НастройкаОтбора Из ЭлементыФормы.ДокументСписок.НастройкаОтбора Цикл
		НастройкаОтбора.Доступность = Ложь;
	КонецЦикла;

	ЭлементыФормы.ДокументСписок.РазрешитьНастройкуПериода = Ложь;

КонецПроцедуры // ПередОткрытием

// Процедура ДействияФормыДействиеНовый.
// По кнопке осуществляется переход в справочник регл. отчетов
//
Процедура ДействияФормыДействиеНовый(Кнопка)

	ФормаВыбораОтчета= РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ФормаВыбораВидаОтчета", ЭтаФорма);
	ФормаВыбораОтчета.РежимВыбора = Истина;
	ФормаВыбораОтчета.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбораОтчета.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Истина;
	ВыбранныйВидОтчета = ФормаВыбораОтчета.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВыбранныйВидОтчета) Тогда
		ОткрытьФормуОтчета(ВыбранныйВидОтчета);
	КонецЕсли;

//	РегОтчеты = Справочники.РегламентированныеОтчеты.ПолучитьФорму("ФормаСписка");
//	РегОтчеты.РежимВыбора = Ложь;
//	РегОтчеты.Открыть();

КонецПроцедуры // ДействияФормыДействиеНовый

// Открывает форму внутреннего или внешнего отчета, табличный или текстовый документ 
// по указанному в реквизите ИсточникОтчета элемента справочника имени внутреннего или 
// файла внешнего отчета, текстового или табличного документа.
//
// Параметры:
//  ИсточникОтчета - строка - имя файла, указанное в реквизите элемента.
//
Процедура ОткрытьФормуОтчета(Отчет)

	ИсточникОтчета = Отчет.ИсточникОтчета;

	ПравоДоступаКОтчету = РегламентированнаяОтчетность.ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
	Если ПравоДоступаКОтчету = Ложь Тогда
		Предупреждение("Недостаточно прав!");
		Возврат;
	ИначеЕсли ПравоДоступаКОтчету = Неопределено Тогда
		Предупреждение("Отчет не найден!");
		Возврат;
	КонецЕсли;

	Если НЕ РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ИсточникОтчета) И Метаданные.Документы.Найти(ИсточникОтчета) <> Неопределено Тогда // это внутренний отчет-документ
			
		ВнутреннийОтчет = Документы[ИсточникОтчета];
		ВыбФормаОтчета  = ВнутреннийОтчет.ПолучитьФорму(Метаданные.Документы[ИсточникОтчета].ОсновнаяФормаОбъекта.Имя);
		ВыбФормаОтчета.РежимВыбора = Ложь;
		ВыбФормаОтчета.Открыть();
		Возврат;

	КонецЕсли;

	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	Если ТекОтчет = Неопределено Тогда
		Сообщить("Не удалось открыть отчет!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

	ТекФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИсточникОтчета);
	Если ТекФорма = Неопределено Тогда
		Сообщить("Не удалось открыть отчет!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Организация) Тогда
		Попытка
			ТекФорма.Организация = Организация;
		Исключение
		КонецПопытки;
	КонецЕсли;

	ТекФорма.РежимВыбора = Ложь;
	ТекФорма.Открыть();
	
КонецПроцедуры // ОткрытьФормуОтчета()

// Процедура - обработчик события "ДействияФормы"
// 
Процедура ДействияФормыДействиеЖурналВыгрузки(Кнопка)

	ВыбФормаСписка  = Документы.ВыгрузкаРегламентированныхОтчетов.ПолучитьФорму("ФормаСписка");
	ВыбФормаСписка.РежимВыбора = Ложь;
	ВыбФормаСписка.Открыть();

КонецПроцедуры // ДействияФормыДействиеЖурналВыгрузки

// Процедура вызывается по нажатию кнопки "<" формы.
//   Инициализирует изменение периода построения отчета.
//
Процедура КнопкаПредыдущийПериодНажатие(Элемент)

	ИзменитьПериод(-1);

КонецПроцедуры // КнопкаПредыдущийПериодНажатие()

// Процедура вызывается по нажатию кнопки ">" формы.
//   Инициализирует изменение периода построения отчета.
//
Процедура КнопкаСледующийПериодНажатие(Элемент)

	ИзменитьПериод(1);

КонецПроцедуры // КнопкаСледующийПериодНажатие()

// Процедура устанавливает границы периода построения отчета.
//
// Параметры:
//  Шаг          - число, количество стандартных периодов, на которое необходимо
//                 сдвигать период построения отчета.
//
Процедура ИзменитьПериод(Шаг)

	Если ПолеВыбораПериодичность = Перечисления.Периодичность.Квартал Тогда  // ежеквартально

//		ДатаКонцаПериодаОтчета  = КонецКвартала(ДобавитьМесяц(ДатаКонцаПериодаОтчета, Шаг*3));
//		ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);

		ДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(ДатаКонцаПериодаОтчета, 3*Шаг)); 
		ДатаНачалаПериодаОтчета = НачалоКвартала(ДатаКонцаПериодаОтчета);

	Иначе
		ДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(ДатаКонцаПериодаОтчета, Шаг)); 
		ДатаНачалаПериодаОтчета = НачалоМесяца(ДатаКонцаПериодаОтчета);
	КонецЕсли;

	ПоказатьПериод();

	УстановитьОтборПоПериоду();

КонецПроцедуры // ИзменитьПериод()

// ОперацииПриСменеПериодичности
//
Процедура ОперацииПриСменеПериодичности()

	Если ПолеВыбораПериодичность = Перечисления.Периодичность.Квартал Тогда  // ежеквартально
		// ДатаКонцаПериодаОтчета  = КонецКвартала(ДатаКонцаПериодаОтчета);
		// ДатаНачалаПериодаОтчета = НачалоКвартала(ДатаКонцаПериодаОтчета);
		ДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(КонецКвартала(РабочаяДата), -3));
		ДатаНачалаПериодаОтчета = НачалоКвартала(ДатаКонцаПериодаОтчета);

		ЭлементыФормы.ПанельПериод.Страницы.СтандартныйПериод.Видимость = Истина;
		ЭлементыФормы.ПанельПериод.Страницы.ПроизвольныйПериод.Видимость = Ложь;

	ИначеЕсли ПолеВыбораПериодичность = Перечисления.Периодичность.Месяц Тогда  // ежеквартально

		ДатаКонцаПериодаОтчета  = КонецМесяца(ДатаКонцаПериодаОтчета);
		ДатаНачалаПериодаОтчета = НачалоМесяца(ДатаКонцаПериодаОтчета);

		ЭлементыФормы.ПанельПериод.Страницы.СтандартныйПериод.Видимость = Истина;
		ЭлементыФормы.ПанельПериод.Страницы.ПроизвольныйПериод.Видимость = Ложь;


	Иначе

		ЭлементыФормы.ПанельПериод.Страницы.ПроизвольныйПериод.Видимость = Истина;
		ЭлементыФормы.ПанельПериод.Страницы.СтандартныйПериод.Видимость = Ложь;

	КонецЕсли;

	ИзменитьПериод(0);
	ПоказатьПериод();

КонецПроцедуры // ОперацииПриСменеПериодичности

// Процедура вызывается при изменении периодичности проедставления декларации.
//
Процедура ПолеВыбораПериодичностьПриИзменении(Элемент)

	ОперацииПриСменеПериодичности();

КонецПроцедуры

// Процедура управляет показом в форме периода построения отчета.
//
Процедура ПоказатьПериод()

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(ДатаНачалаПериодаОтчета), КонецДня(ДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Покажем период в диалоге
	ЭлементыФормы.НадписьПериодСоставленияОтчета.Заголовок = СтрПериодОтчета;

КонецПроцедуры // ПоказатьПериод()

// Процедура - обработчик "ПриИзменении"
// Осуществляется отбор по форе отчетности
//
Процедура ОтборПоФормеПриИзменении(Элемент)

	Если НЕ Элемент.Значение Тогда
		Отбор.ИсточникОтчета.Использование = Ложь;
		ЭлементыФормы.СписокВидовОтчета.Доступность = Ложь;
	Иначе
		ЭлементыФормы.СписокВидовОтчета.Доступность = Истина;
		Отбор.ИсточникОтчета.Использование = Истина;
	КонецЕсли;

КонецПроцедуры // ОтборПоФормеПриИзменении

// Процедура - обработчик "ПриИзменении"
//
Процедура ДатаНачПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	УстановитьОтборПоПериоду();
КонецПроцедуры // ДатаНачПриИзменении

// Процедура - обработчик "ПриИзменении"
// При изменении даты
//
Процедура ПолеВвода2ПриИзменении(Элемент)

	УстановитьОтборПоПериоду();

КонецПроцедуры

// Процедура - обработчик "НачалоВыбора"
//
Процедура СписокВидовНОНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ЗаполнитьСписокВидовНО();

КонецПроцедуры // СписокВидовНОНачалоВыбораИзСписка

// Процедура - обработчик "ПриИзменении"
// Устанавливает отбор по коду ИФНС
//
Процедура СписокВидовНОПриИзменении(Элемент)

	Отбор.КодИМНС.Установить(Элемент.Значение);
	ЭлементыФормы.ПоКодуИФНС.Значение = Истина;

КонецПроцедуры // СписокВидовНОПриИзменении

// Процедура - обработчик "ПриИзменении"
// Прикреплена к флажку отбора по ФНС
//
Процедура ПоКодуИФНСПриИзменении(Элемент)

	Если НЕ Элемент.Значение Тогда

		Отбор.КодИМНС.Использование = Ложь;
		ЭлементыФормы.СписокВидовНО.Доступность = Ложь;

	Иначе

		ЭлементыФормы.СписокВидовНО.Доступность = Истина;
		Отбор.КодИМНС.Использование = Истина;

	КонецЕсли;

КонецПроцедуры // ПоКодуИФНСПриИзменении

// ДействияПриВыклФлОрг
//
Процедура ДействияПриВыклФлОрг()

	Отбор.Организация.Использование = Ложь;
	ЭлементыФормы.Организация.Доступность = Ложь;
	// покажем колонку орг
	ЭлементыФормы.ДокументСписок.Колонки.Организация.Видимость         = Истина;
	ЭлементыФормы.ДокументСписок.Колонки.Организация.ИзменятьВидимость = Истина;

КонецПроцедуры // ДействияПриВыклФлОрг

// ДействияПриВклФлОрг
//
Процедура ДействияПриВклФлОрг()

	ЭлементыФормы.Организация.Доступность = Истина;
	СоставФильтраОбособленныеПодразделения();

КонецПроцедуры // ДействияПриВклФлОрг

// Процедура ОтборПоОргПриИзменении.
// Осуществляет отбор по организации.
//
Процедура ОтборПоОргПриИзменении(Элемент)

	Если НЕ Элемент.Значение Тогда

		ДействияПриВыклФлОрг();

	Иначе

		ДействияПриВклФлОрг();

	КонецЕсли;

КонецПроцедуры // ОтборПоОргПриИзменении

ДокументСписок.Колонки.Добавить("ДатаНачала");
ДокументСписок.Колонки.Добавить("ДатаОкончания");
ДокументСписок.Колонки.Добавить("ИсточникОтчета");

мОбособ = Новый СписокЗначений;

НП = Новый НастройкаПериода;

ЭлементыФормы.ПолеВыбораПериодичность.СписокВыбора.Добавить(Перечисления.Периодичность.Месяц,   "Ежемесячно");
ЭлементыФормы.ПолеВыбораПериодичность.СписокВыбора.Добавить(Перечисления.Периодичность.Квартал, "Ежеквартально");
ЭлементыФормы.ПолеВыбораПериодичность.СписокВыбора.Добавить("Произвольный", "Произвольный");

