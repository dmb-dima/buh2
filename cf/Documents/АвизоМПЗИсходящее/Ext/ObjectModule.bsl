Перем мВалютаРегламентированногоУчета Экспорт;
Перем мУчетнаяПолитика Экспорт;

///////////////////////////////////////////////////////
//ЗАПОЛНЕНИЕ
///////////////////////////////////////////////////////

Процедура ЗаполнитьДанныеПоПартиям(Перезаполнить = Истина) Экспорт
	
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоПартиям, ТаблицаПоСФ;
	Отказ = Ложь;
	Заголовок = "";
	
	Если Товары.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена таблица товаров.");
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоПартиям.Количество() > 0 Тогда
		Если НЕ Перезаполнить Тогда
			Возврат;
		Иначе
			ДанныеПоПартиям.Очистить();
			ДанныеПоСФ.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

    ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПартиям, ТаблицаПоСФ);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
    УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТоварам, Истина, Ложь, Отказ, ,"Передача товаров", Ложь);
	
	Для Каждого СтрокаТоваров Из ТаблицаПоТоварам Цикл
		Для Каждого СтрокаПартии Из СтрокаТоваров.СписанныеПартии Цикл
			СтрокаТЧ = ДанныеПоПартиям.Добавить();
			СтрокаТЧ.Номенклатура 			= СтрокаТоваров.Номенклатура;
			СтрокаТЧ.СчетУчета 				= СтрокаТоваров.СчетУчета;
			СтрокаТЧ.СтранаПроисхождения 	= СтрокаТоваров.СтранаПроисхождения;
			СтрокаТЧ.НомерГТД 				= СтрокаТоваров.НомерГТД;
			
			СтрокаТЧ.Количество 			= СтрокаПартии.Количество;
			СтрокаТЧ.Сумма 					= СтрокаПартии.СуммаСписания;
			СтрокаТЧ.СуммаНУ 				= СтрокаПартии.СуммаСписанияНУ;
			СтрокаТЧ.СуммаПР 				= СтрокаПартии.СуммаСписанияПР;
			СтрокаТЧ.СуммаВР 				= СтрокаПартии.СуммаСписанияВР;
			СтрокаТЧ.ДокументПартии 		= СтрокаПартии.Партия;
			СтрокаТЧ.Ключ					= СтрокаТЧ.НомерСтроки;
			СтрокаТоваров.НомерСтрокиПартии	= СтрокаТЧ.НомерСтроки;
		КонецЦикла;
	КонецЦикла;

	СписокИсключаемыхКолонок = Новый Структура();
	ТаблицаНДСПартииСписания = УчетНДС.ПодготовитьТаблицуСписанияПартийДляНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок, , СписокИсключаемыхКолонок);
	
	НомерСтрокиПартии 	= 1;
	НомерСтрокиТЧ 		= 0;
	Для Каждого СтрокаПартии Из ТаблицаНДСПартииСписания Цикл
		Если СтрокаПартии.НомерСтрокиПартии <> НомерСтрокиПартии Тогда
			НомерСтрокиПартии = СтрокаПартии.НомерСтрокиПартии;
			НомерСтрокиТЧ = 1;
		Иначе
			НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		КонецЕсли;
		СтрокаТЧ = ДанныеПоСФ.Добавить();
		СтрокаТЧ.ВидЦенности 			= СтрокаПартии.ВидЦенности;
		СтрокаТЧ.СчетФактура 			= СтрокаПартии.СчетФактура;
		СтрокаТЧ.Количество				= СтрокаПартии.Количество;
		СтрокаТЧ.Стоимость 				= СтрокаПартии.Стоимость;
		СтрокаТЧ.СчетУчетаНДС 			= СтрокаПартии.СчетУчетаНДС;
		СтрокаТЧ.СтавкаНДС 				= СтрокаПартии.СтавкаНДС;
		СтрокаТЧ.НДС 					= СтрокаПартии.НДС;
		СтрокаТЧ.НДСВключенВСтоимость	= СтрокаПартии.НДСВключенВСтоимость;
		СтрокаТЧ.Ключ					= СтрокаПартии.НомерСтрокиПартии;
		СтрокаТЧ.НомерСтрокиТЧ			= НомерСтрокиТЧ;
	КонецЦикла;
		
КонецПроцедуры

// Процедура заполняет счета в табличной части.
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, Заполнять) Экспорт

	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, Заполнять);
		
	КонецЦикла;

КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧасти()

// Процедура заполняет счета в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, Заполнять) Экспорт

	СчетаУчета          = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	ЗаполнитьСчета(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, Заполнять, МетаданныеДокумента);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета в строке табличной части.
//
Процедура ЗаполнитьСчета(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, Заполнять, МетаданныеДокумента)

	Если Заполнять = Истина Тогда

		СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;

	ИначеЕсли Заполнять = Ложь Тогда

		СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчета()

////////////////////////////////////////////////////////////
// ПЕЧАТЬ
////////////////////////////////////////////////////////////

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Авизо","Авизо");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАвизо()
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ЗаголовокТаблицыМПЗСКодом";
		ОбластьСтроки = "СтрокаТаблицыМПЗСКодом";
	Иначе
		ОбластьШапки  = "ЗаголовокТаблицыМПЗ";
		ОбластьСтроки = "СтрокаТаблицыМПЗ";
	Конецесли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Авизо.Номер,
	|	Авизо.Дата,
	|	Авизо.Склад,
	|	Авизо.СчетРасчетов,
	|	Авизо.Организация КАК ОрганизацияОтправитель,
	|	ВЫБОР
	|		КОГДА Авизо.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Авизо.Организация
	|		ИНАЧЕ Авизо.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	Авизо.ОрганизацияПолучатель КАК ОрганизацияПолучатель
	|ИЗ
	|	Документ.АвизоМПЗИсходящее КАК Авизо
	|ГДЕ
	|	Авизо.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ
	|	Авизо.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(Авизо.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК МПЗ,
	|	Авизо.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаХранения,
	|	Авизо.СчетУчета КАК СчетУчета,
	|	Авизо.ДокументПартии КАК ДокументПартии,
	|	СУММА(Авизо.Количество) КАК Количество,
	|	СУММА(Авизо.Сумма) КАК Сумма,
	|	СУММА(Авизо.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Авизо.СуммаПР) КАК СуммаПР,
	|	СУММА(Авизо.СуммаВР) КАК СуммаВР,
	|	МИНИМУМ(Авизо.НомерСтроки) КАК НомерСтроки,
	|	Авизо.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул	
	|ИЗ
	|	Документ.АвизоМПЗИсходящее.ДанныеПоПартиям КАК Авизо
	|ГДЕ
	|	Авизо.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Авизо.Номенклатура,
	|	Авизо.СчетУчета,
	|	Авизо.ДокументПартии,
	|	Авизо.Номенклатура.БазоваяЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(Авизо.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Номенклатура";
	
	РезультатЗапроса = ЗапросПоТоварам.Выполнить();
	ВыборкаСтрокТовары = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвизоМПЗИсходящее_Авизо";
	Макет       = ПолучитьМакет("Авизо");

	// Выводим основную шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Извещение (авизо) на передачу МПЗ");
	
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.Организация = ПредставлениеОрганизации;
	
	СведенияОбОтправителе    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ОрганизацияОтправитель, Шапка.Дата);
	ПредставлениеОтправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОтправителе, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.Отправитель = ПредставлениеОтправителя;
	
	СведенияОПолучателе     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ОрганизацияПолучатель, Шапка.Дата);
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПолучателе, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.Получатель = ПредставлениеПолучателя;
	
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим шапку таблицы МПЗ
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = Колонка;
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим строки таблицы МПЗ
	НС = 1;
	ИтогоКоличество = 0;
	ИтогоСумма = 0;
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		ОбластьМакета.Параметры.НомерСтроки = НС;
		ОбластьМакета.Параметры.МПЗ = СокрЛП(ВыборкаСтрокТовары.МПЗ);
		ОбластьМакета.Параметры.Количество = ВыборкаСтрокТовары.Количество;
		ОбластьМакета.Параметры.ЕдиницаХранения = ВыборкаСтрокТовары.ЕдиницаХранения;
		ОбластьМакета.Параметры.Сумма = ВыборкаСтрокТовары.Сумма;
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

		НС = НС + 1;
		
		ИтогоКоличество = ИтогоКоличество + ВыборкаСтрокТовары.Количество;
		ИтогоСумма = ИтогоСумма + ВыборкаСтрокТовары.Сумма;
	КонецЦикла;

	// Выводим подвал таблицы МПЗ
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыМПЗ");
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоСумма = ИтогоСумма;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим шапку таблицы БУ
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицыБУ");
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим строки таблицы БУ
	ВыборкаПроводок = РезультатЗапроса.Выбрать();
	Пока ВыборкаПроводок.Следующий() Цикл
		Если ВыборкаПроводок.ТипЗаписи() <> ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			Продолжить;
		Конецесли;
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыБУ");
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаПроводок);
		
		АналитикаДт = СокрЛП(Шапка.ОрганизацияПолучатель);
					
		АналитикаКт = Строка(ВыборкаПроводок.Номенклатура) + Символы.ПС
		            + Строка(Шапка.Склад) + Символы.ПС
                    + Строка(ВыборкаПроводок.ДокументПартии);
					
		ОбластьМакета.Параметры.АналитикаДт = АналитикаДт;
		ОбластьМакета.Параметры.АналитикаКт = АналитикаКт;
		
		ОбластьМакета.Параметры.СчетДт = Шапка.СчетРасчетов;
		ОбластьМакета.Параметры.СчетКт = ВыборкаПроводок.СчетУчета;
		ТабДокумент.Вывести(ОбластьМакета);
        		
	КонецЦикла;

	// Выводим подвал таблицы БУ
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыБУ");
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим общий подвал
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.РасшифровкаПодписиИсполнителя = ?(НЕ ЗначениеЗаполнено(Ответственный), "", ОбщегоНазначения.ФамилияИнициалыФизЛица(Ответственный.ФизЛицо));
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Авизо" Тогда
		
		ТабДокумент = ПечатьАвизо();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать
	
#КонецЕсли

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("КорСчетСписания");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписания1");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаТоваров.Колонки.Добавить("КорПодразделениеОрганизации");
	ТаблицаТоваров.Колонки.Добавить("НомерСтрокиПартии");

	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетРасчетов, "КорСчетСписания");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОрганизацияПолучатель, "КорСубконтоСписания1");
	
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,        					"Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,       	"Склад");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, 	"Организация");
	ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,      					"ДоговорКонтрагента");

	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорПодразделениеОрганизации");
		
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСФ(ТаблицаПоПартиям, РезультатЗапросаПоСФ, СтруктураШапкиДокумента)
	
	ТаблицаПоСФ = РезультатЗапросаПоСФ.Выгрузить();
	
	ТаблицаПоСФ.Колонки.Добавить("Номенклатура");
	ТаблицаПоСФ.Колонки.Добавить("СчетУчета");
	ТаблицаПоСФ.Колонки.Добавить("Партия");
	ТаблицаПоСФ.Колонки.Добавить("Склад");               
	ТаблицаПоСФ.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад, "Склад");

	Для Каждого Партия Из ТаблицаПоПартиям Цикл
		СФПоПартии = ТаблицаПоСФ.НайтиСтроки(Новый Структура("Ключ", Партия.Ключ));
		Для Каждого СтрокаСФ ИЗ СФПоПартии Цикл
			СтрокаСФ.Номенклатура 	= Партия.Номенклатура; 
			СтрокаСФ.СчетУчета 		= Партия.СчетУчета;
			СтрокаСФ.Партия 		= Партия.ДокументПартии;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПоСФ;
	
КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ОрганизацияПолучатель, СчетРасчетов, Склад");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, СчетУчета");
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПартии(ТаблицаПоПартиям, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ДанныеПоПартиям";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, СчетУчета");
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСФ(ТаблицаПоСФ, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ДанныеПоСФ";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("СчетФактура, СтавкаНДС");
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ = Ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВалютаДокумента"		,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("КурсДокумента"		,1);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента"	,1);
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПартиям, ТаблицаПоСФ) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"       , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"         , "Количество");
	СтруктураПолей.Вставить("НомерСтроки"        , "НомерСтроки");
	СтруктураПолей.Вставить("НомерГТД"           , "НомерГТД");
	СтруктураПолей.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	СтруктураПолей.Вставить("СчетУчета"        	 , "СчетУчета");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Партии".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"       , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"         , "Количество"); 
	СтруктураПолей.Вставить("СчетУчета"        	 , "СчетУчета");
	СтруктураПолей.Вставить("НомерГТД"           , "НомерГТД");
	СтруктураПолей.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	СтруктураПолей.Вставить("Сумма"              , "Сумма");
	СтруктураПолей.Вставить("СуммаНУ"            , "СуммаНУ");
	СтруктураПолей.Вставить("СуммаПР"            , "СуммаПР");
	СтруктураПолей.Вставить("СуммаВР"            , "СуммаВР");
	СтруктураПолей.Вставить("ДокументПартии"     , "ДокументПартии");
	СтруктураПолей.Вставить("Ключ"     			 , "Ключ");
	
	// Подготовим таблицу по партиям.
	ТаблицаПоПартиям = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДанныеПоПартиям", СтруктураПолей).Выгрузить();

		// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "СФ".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("СчетФактура"       	, "СчетФактура");
	СтруктураПолей.Вставить("ВидЦенности"       	, "ВидЦенности");
	СтруктураПолей.Вставить("Количество"        	, "Количество"); 
	СтруктураПолей.Вставить("Стоимость"        		, "Стоимость");
	СтруктураПолей.Вставить("СчетУчетаНДС"      	, "СчетУчетаНДС");
	СтруктураПолей.Вставить("СтавкаНДС"         	, "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"               	, "НДС");
	СтруктураПолей.Вставить("НДСВключенВСтоимость"	, "НДСВключенВСтоимость");
	СтруктураПолей.Вставить("Ключ"     			 	, "Ключ");
	
	// Подготовим таблицу по партиям.
	РезультатЗапросаПоСФ = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДанныеПоСФ", СтруктураПолей);
	ТаблицаПоСФ = ПодготовитьТаблицуСФ(ТаблицаПоПартиям, РезультатЗапросаПоСФ, СтруктураШапкиДокумента);
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ДвиженияПоРегистрамНДС(СтруктураШапкиДокумента, ТаблицаПоСФ, Отказ)

	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоСФ.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений = ЭтотОбъект.Движения.НДСПоПриобретеннымЦенностям.Выгрузить();
	ТаблицаДвижений.Очистить();
	ТаблицаПоСФ.Колонки.Добавить("Организация");
	ТаблицаПоСФ.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСФ,ТаблицаДвижений);
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
		
		ЭтотОбъект.Движения.НДСПоПриобретеннымЦенностям.мПериод          = СтруктураШапкиДокумента.Дата;
		ЭтотОбъект.Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвижений;
		ЭтотОбъект.Движения.НДСПоПриобретеннымЦенностям.ВыполнитьРасход();
		
	КонецЕсли;
	
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, ТаблицаДвижений, ЭтотОбъект.Движения, Отказ)
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПартиям, ТаблицаПоСФ, Отказ, Заголовок)
	
	Для Каждого СтрокаПартии Из ТаблицаПоПартиям Цикл
		Проводка 					= Движения.Хозрасчетный.Добавить();
		Проводка.Период      		= СтруктураШапкиДокумента.Дата;
		Проводка.Организация 		= СтруктураШапкиДокумента.Организация;
		Проводка.Содержание 		= "Передача МПЗ по авизо";
		Проводка.СчетКт 			= СтрокаПартии.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  СтрокаПартии.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  СтрокаПартии.ДокументПартии);
		
		
		// Балансовый счет учета не может корреспондировать с забалансовым
		Если СтруктураШапкиДокумента.СчетРасчетов.Забалансовый = СтрокаПартии.СчетУчета.Забалансовый Тогда
			Проводка.СчетДт 			= СтруктураШапкиДокумента.СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбособленныеПодразделения",  ОрганизацияПолучатель);			
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Кт");
			
		Проводка.Сумма 		= СтрокаПартии.Сумма;
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаПартии.СуммаНУ,СтрокаПартии.СуммаНУ,СтрокаПартии.СуммаПР,СтрокаПартии.СуммаПР,СтрокаПартии.СуммаВР,СтрокаПартии.СуммаВР,Проводка);
		
		Если Проводка.СчетДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаПартии.Количество;
		КонецЕсли;
		
		Если Проводка.СчетКт.Количественный Тогда
			Проводка.КоличествоКт = СтрокаПартии.Количество;
		КонецЕсли;
		
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт 			= Константы.ВалютаРегламентированногоУчета.Получить();
			Проводка.ВалютнаяСуммаДт 	= СтрокаПартии.Сумма;			
		КонецЕсли;
		
		Проводка.НеКорректироватьСтоимостьАвтоматически = Истина;
	КонецЦикла;
	
	// Учет товаров по номерам ГТД
	УправлениеЗапасами.ПроведениеДокументаСписанияПоСчетуГТД(ЭтотОбъект, ТаблицаПоПартиям, "Передача МПЗ по авизо");
	
	ДвиженияПоРегистрамНДС(СтруктураШапкиДокумента, ТаблицаПоСФ, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоПартиям, ТаблицаПоСФ;
	
	Если (Товары.Количество() > 0) И (ДанныеПоПартиям.Количество() = 0) Тогда
		ЗаполнитьДанныеПоПартиям(Ложь);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(Ложь, Отказ, Заголовок, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

    ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПартиям, ТаблицаПоСФ);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПартии(ТаблицаПоПартиям, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиСФ(ТаблицаПоСФ, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПартиям, ТаблицаПоСФ, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
