////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит значения флажков начисления амортизации (БУ и НУ)
Перем мНачислятьАмортизациюБУ;
Перем мНачислятьАмортизациюНУ;

// Хранит признак наличия процента амортизационной премии
// на момент открытия документа
Перем мУказанПроцентАмортизационнойПремии;

Перем ОткрыватьНастройкуДвижений;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеСредства,ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Оплата,ЭлементыФормы.КоманднаяПанель1);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет счета учета оборудования из регистра сведений
// "Счета учета номенклатуры".
//
Процедура ЗаполнитьСчетаУчетаОборудования()
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		СчетУчетаВнеоборотногоАктива = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Иначе
		СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад);
		СчетУчетаВнеоборотногоАктива = СчетаУчета.СчетУчета;
	КонецЕсли;
			
КонецПроцедуры // ЗаполнитьСчетаУчетаОборудования()

// Функция возвращает список значений доступных способов амортизации для бух. учета
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокСпособовАмортизацииБУ() Экспорт

	СписокПеречисления = Новый СписокЗначений;

	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.Линейный);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега);

	Возврат СписокПеречисления;

КонецФункции // ПолучитьСписокСпособовАмортизацииБУ()

// Функция проверяет, является ли счет забалансовым, и выдает соответствующее
// предупреждение. Используется для контроля за выбираемыми пользователем 
// счетами.
//
// Параметры:
//  Счет         - ПланыСчетов, Строка - счет (или код счета), который 
//                 необходимо проверить на забалансовость
//
// Возвращаемое значение:
//  Булево.      
//  
Функция ПроверитьЗабалансовыйСчет(Счет)
	
	ВозвращаемоеЗначение = Истина;
	
	СчетНаПроверку = Счет;
	
	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		
		СчетНаПроверку = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Счет);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетНаПроверку) Тогда
		
		Если НЕ СчетНаПроверку.Забалансовый Тогда
			
			ВозвращаемоеЗначение = Ложь;
		
			Предупреждение("Счет " + СокрЛП(СчетНаПроверку)+" """ + СчетНаПроверку.Наименование + """ не является забалансовым.
			               |В этом поле можно указать только забалансовый счет.");
						   
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции // ПроверитьЗабалансовыйСчет()

// Функция проверяет, является ли счет балансовым, и выдает соответствующее
// предупреждение. Используется для контроля за выбираемыми пользователем 
// счетами.
//
// Параметры:
//  Счет         - ПланыСчетов, Строка - счет (или код счета), который 
//                 необходимо проверить на балансовость
//
// Возвращаемое значение:
//  Булево.      
//  
Функция ПроверитьБалансовыйСчет(Счет)
	
	ВозвращаемоеЗначение = Истина;
	
	СчетНаПроверку = Счет;
	
	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		
		СчетНаПроверку = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Счет);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетНаПроверку) Тогда
		
		Если СчетНаПроверку.Забалансовый Тогда
			
			ВозвращаемоеЗначение = Ложь;
		
			Предупреждение("Счет " + СокрЛП(СчетНаПроверку)+" """ + СчетНаПроверку.Наименование + """ является забалансовым.
			               |В этом поле можно указать только балансовый счет.");
						   
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции // ПроверитьБалансовыйСчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает видимость элементов формы в зависимости от выбранного способа начисления амортизации
// в бухгалтерском учете
//
Процедура УстановитьВидимостьПараметровАмортизацииБУ()
	
	Если НЕ ЗначениеЗаполнено(СпособНачисленияАмортизацииБУ) Тогда
		ЭлементыФормы.ПанельПараметрыАмортизации.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ПанельПараметрыАмортизации.Видимость = Истина;
		ЭлементыФормы.ПанельПараметрыАмортизации.ТекущаяСтраница = ЭлементыФормы.ПанельПараметрыАмортизации.Страницы[СпособНачисленияАмортизацииБУ.Метаданные().ЗначенияПеречисления[Перечисления.СпособыНачисленияАмортизацииОС.Индекс(СпособНачисленияАмортизацииБУ)].Имя];
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость элементов формы в зависимости от вида операции и 
// взведенных флагов
//
Процедура УстановитьВидимость()

	// Установка видимости панелей формы в зависимости от вида операции
	ЭлементыФормы.ПанельВнеоборотныеАктивы.Страницы.ОССоСклада.Видимость           = (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование);
	ЭлементыФормы.ПанельВнеоборотныеАктивы.Страницы.ОбъектыСтроительства.Видимость = (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства);

	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		ЭлементыФормы.ПанельВнеоборотныеАктивы.ТекущаяСтраница = ЭлементыФормы.ПанельВнеоборотныеАктивы.Страницы.ОССоСклада;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		ЭлементыФормы.ПанельВнеоборотныеАктивы.ТекущаяСтраница = ЭлементыФормы.ПанельВнеоборотныеАктивы.Страницы.ОбъектыСтроительства;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации Тогда
		ЭлементыФормы.ПанельВнеоборотныеАктивы.ТекущаяСтраница = ЭлементыФормы.ПанельВнеоборотныеАктивы.Страницы.ПоРезультатамИнвентаризации;
	КонецЕсли;

	ЭтоУСН         = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	ПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(Организация, Дата);

	Если ЭтоУСН Тогда
		ЭтоРасходыУСН = НЕ НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	Иначе
		ЭтоРасходыУСН = Ложь;
	КонецЕсли;
	
	ОСН_ФизЛицо		= ОбщегоНазначения.Предприниматель(Организация, Дата);
	ОСН_ЮрЛицо		= НЕ ЭтоУСН И НЕ ОСН_ФизЛицо;

	// Установка видимости страниц панелей в зависимости от вида учета
	ЭлементыФормы.ОсновнаяПанель.Страницы.НалУчет.Видимость = ОСН_ЮрЛицо И НЕ ЭтоРасходыУСН;
	ЭлементыФормы.ОсновнаяПанель.Страницы.УСНУчет.Видимость = ЭтоРасходыУСН;
	// {УчетДоходовИРасходовИП
	ЭлементыФормы.ОсновнаяПанель.Страницы.Предприниматель.Видимость = ОСН_ФизЛицо;
	// }УчетДоходовИРасходовИП

	Если ЭтоРасходыУСН Тогда
		ЭлементыФормы.НадписьПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость 	= НЕ (Дата < Дата("20060101"));
		ЭлементыФормы.ПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость 		= НЕ (Дата < Дата("20060101"));
	КонецЕсли;
	
	//**************
	// Установка видимости элементов формы в зависимости от вида учета

	ЭлементыФормы.НадписьСтоимостьНУ.Видимость                     = НЕ ЭтоРасходыУСН И ОСН_ЮрЛицо;
	ЭлементыФормы.СтоимостьНУ.Видимость                            = НЕ ЭтоРасходыУСН И ОСН_ЮрЛицо;
	ЭлементыФормы.НадписьСтоимостьНУ1.Видимость                    = НЕ ЭтоРасходыУСН И ОСН_ЮрЛицо;
	ЭлементыФормы.СтоимостьНУ1.Видимость                           = НЕ ЭтоРасходыУСН И ОСН_ЮрЛицо;
	
	ЭлементыФормы.РеглВалюта1.Видимость                            = НЕ ЭтоРасходыУСН И ОСН_ЮрЛицо;
	ЭлементыФормы.РеглВалюта2.Видимость                            = НЕ ЭтоРасходыУСН И ОСН_ЮрЛицо И ПоддержкаПБУ18;
	ЭлементыФормы.РеглВалюта3.Видимость                            = НЕ ЭтоРасходыУСН И ОСН_ЮрЛицо И ПоддержкаПБУ18;
	ЭлементыФормы.РеглВалюта5.Видимость                            = НЕ ЭтоРасходыУСН И ОСН_ЮрЛицо;
	
	ЭлементыФормы.НадписьСтоимостьПР.Видимость                     = НЕ ЭтоРасходыУСН И ОСН_ЮрЛицо И ПоддержкаПБУ18;
	ЭлементыФормы.СтоимостьПР.Видимость                            = НЕ ЭтоРасходыУСН И ОСН_ЮрЛицо И ПоддержкаПБУ18;
	ЭлементыФормы.НадписьСтоимостьВР.Видимость                     = НЕ ЭтоРасходыУСН И ОСН_ЮрЛицо И ПоддержкаПБУ18;
	ЭлементыФормы.СтоимостьВР.Видимость                            = НЕ ЭтоРасходыУСН И ОСН_ЮрЛицо И ПоддержкаПБУ18;
	
	// Установка обязательности заполнения способов отражения расходов по амортизации
	// в зависимости от варианта погашения стоимости ОС и включения ОС в состав амортизируемого имущества.
	// Если в БУ и НУ стоимость не погашается, заполнение этого реквизита не обязательно.
	Если НЕ ЭтоРасходыУСН И ОСН_ЮрЛицо Тогда // если документ отражается в налоговом учета
	
		Если (ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается)
		   И (ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы 
		      ИЛИ НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)) Тогда
			ОтметкаНезаполненного = Ложь;
		Иначе
			ОтметкаНезаполненного = Истина;	
		КонецЕсли;
		
	Иначе // если документ не отражается в налоговом учете
		
		Если ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается Тогда
			ОтметкаНезаполненного = Ложь;
		Иначе
			ОтметкаНезаполненного = Истина;	
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормы.СпособыОтраженияРасходовПоАмортизации.АвтоОтметкаНезаполненного = ОтметкаНезаполненного;
	ЭлементыФормы.СпособыОтраженияРасходовПоАмортизации.АвтоВыборНезаполненного   = ОтметкаНезаполненного;
	ЭлементыФормы.СпособыОтраженияРасходовПоАмортизации.ОтметкаНезаполненного =
		?(ОтметкаНезаполненного, ?(НЕ ЗначениеЗаполнено(СпособыОтраженияРасходовПоАмортизации), Истина, Ложь), Ложь);
		
	// Установка видимости страниц панели ПанельПогашенияСтоимости 
	// в зависимости от выбранного варианта погашения стоимости
	Если НЕ ЗначениеЗаполнено(ПорядокПогашенияСтоимостиБУ) Тогда
		ЭлементыФормы.ПанельПогашениеСтоимости.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ПанельПогашениеСтоимости.Видимость = Истина;
		ЭлементыФормы.ПанельПогашениеСтоимости.ТекущаяСтраница = ЭлементыФормы.ПанельПогашениеСтоимости.Страницы[ПорядокПогашенияСтоимостиБУ.Метаданные().ЗначенияПеречисления[Перечисления.ПорядокПогашенияСтоимостиОС.Индекс(ПорядокПогашенияСтоимостиБУ)].Имя];
	КонецЕсли;
	
	Если ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.ПустаяСсылка() Тогда
		ЭлементыФормы.ПанельСведенияОСБУ.Свертка = РежимСверткиЭлементаУправления.Верх;
	Иначе
		ЭлементыФормы.ПанельСведенияОСБУ.Свертка = РежимСверткиЭлементаУправления.Нет;
	КонецЕсли;
	
	// {УчетДоходовИРасходовИП
	//Для предпринимателя если счет не 08.04, то первоначальная стоимость указывается вручную
	Если ОСН_ФизЛицо Тогда
		Если СчетУчетаВнеоборотногоАктива <> ПланыСЧетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств Тогда
			Если НЕ УказатьПервоначальнуюСтоимость Тогда
				УказатьПервоначальнуюСтоимость = Истина;
			КонецЕсли;
			ЭлементыФормы.УказатьПервоначальнуюСтоимость.Доступность = Ложь;
		Иначе
			ЭлементыФормы.УказатьПервоначальнуюСтоимость.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	// Установка видимости страниц панели ПанельВключениеСтоимостиВСоставРасходов
	// в зависимости от выбранного варианта включения стоимости в состав расходов
	Если НЕ ЗначениеЗаполнено(ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
		ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходов.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходов.Видимость = Истина;
		ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходов.ТекущаяСтраница = ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходов.Страницы[ПорядокВключенияСтоимостиВСоставРасходовНУ.Метаданные().ЗначенияПеречисления[Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.Индекс(ПорядокВключенияСтоимостиВСоставРасходовНУ)].Имя];
	КонецЕсли;
	
	// Установка видимости надписи с расшифровкой срока полезного использования
	РасшифровкаСрокаПолезногоИспользованияБУ  = УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияБУ);
	РасшифровкаСрокаПолезногоИспользованияНУ  = УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияНУ);
	РасшифровкаСрокаПолезногоИспользованияУСН = УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияУСН);
	
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ.Заголовок  = РасшифровкаСрокаПолезногоИспользованияБУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ1.Заголовок = РасшифровкаСрокаПолезногоИспользованияБУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ2.Заголовок = РасшифровкаСрокаПолезногоИспользованияБУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ3.Заголовок = РасшифровкаСрокаПолезногоИспользованияБУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ4.Заголовок = РасшифровкаСрокаПолезногоИспользованияБУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ5.Заголовок = РасшифровкаСрокаПолезногоИспользованияБУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияБУ6.Заголовок = РасшифровкаСрокаПолезногоИспользованияБУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияНУ.Заголовок  = РасшифровкаСрокаПолезногоИспользованияНУ;
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияУСН.Заголовок = РасшифровкаСрокаПолезногоИспользованияУСН;
	
	// Установка видимости поля "Способы отражения расходов по амортизации" на закладке "Налоговый учет".
	ЭлементыФормы.ПанельСпособОтраженияРасходовПоАмортизации.Свертка = ?(ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации,
	                                                                     РежимСверткиЭлементаУправления.Верх,
	                                                                     РежимСверткиЭлементаУправления.Нет);
	
	// Установка доступности поля "Порядок включения стоимости в состав расходов" на закладке "Налоговый учет".
	ЭлементыФормы.ПорядокВключенияСтоимостиВСоставРасходовНУ.ТолькоПросмотр = (ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается);
																		 
	КолонкиТЧ = ЭлементыФормы.ОсновныеСредства.Колонки;

	ПоРезультатамИнвентаризации = (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации);
	// Установка видимости реквизитов амортизационной премии
	ЭлементыФормы.ВключитьКапитальныеВложенияВРасходыНУ.Видимость         = НЕ (ПоРезультатамИнвентаризации И НЕ мУказанПроцентАмортизационнойПремии);
	ЭлементыФормы.РамкаГруппыАмортизационнаяПремия.Видимость              = НЕ (ПоРезультатамИнвентаризации И НЕ мУказанПроцентАмортизационнойПремии);
	ЭлементыФормы.ПанельАмортизационнаяПремия.Видимость                   = НЕ (ПоРезультатамИнвентаризации И НЕ мУказанПроцентАмортизационнойПремии) И ВключитьКапитальныеВложенияВРасходыНУ;
	
	УстановитьВидимостьСубконто(СчетУчетаЗатратПоАмортизационнойПремии, "ПоАмортизационнойПремии", НЕ ЭтоРасходыУСН И ОСН_ЮрЛицо И (ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации) И ВключитьКапитальныеВложенияВРасходыНУ);
	
	// {УчетДоходовИРасходовИП
	Если ОСН_ФизЛицо Тогда
		УстановитьВидимостьПараметровНачисленияАмортизацииИП();
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
Конецпроцедуры // УстановитьВидимость()

// {УчетДоходовИРасходовИП
//Устанавливает видимость параметров начисления амортизации НУ для ИП
//
Процедура УстановитьВидимостьПараметровНачисленияАмортизацииИП()
	
	Если ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		
		ЭлементыФормы.ПанельРасходовИП.ТекущаяСтраница = ЭлементыФормы.ПанельРасходовИП.Страницы.Страница1;
		
		ЭлементыФормы.СрокПолезногоИспользованияНУ1.Видимость 				= НачислятьАмортизациюНУ;
		ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияНУ1.Видимость 	= НачислятьАмортизациюНУ;
		ЭлементыФормы.НадписьСрокПолезногоИспользованияНУ1.Видимость 	= НачислятьАмортизациюНУ;
		ЭлементыФормы.НадписьСпособНачисленияАмортизацииНУ1.Видимость	= НачислятьАмортизациюНУ;
		ЭлементыФормы.СпособНачисленияАмортизацииНУ1.Видимость			= НачислятьАмортизациюНУ;
		
		МетодНачисленияЛинейный		= Перечисления.МетодыНачисленияАмортизации.Линейный;
		МетодНачисленияПоЕНАОФ		= Перечисления.МетодыНачисленияАмортизации.ПоЕНАОФ;
		
		Если НачислятьАмортизациюНУ И (СпособНачисленияАмортизацииНУ <> МетодНачисленияЛинейный И СпособНачисленияАмортизацииНУ <> МетодНачисленияПоЕНАОФ) Тогда
			СпособНачисленияАмортизацииНУ = МетодНачисленияЛинейный;
		КонецЕсли;
		
		РасшифровкаСрокаПолезногоИспользованияНУ  = УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияНУ);
		ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияНУ1.Заголовок  = РасшифровкаСрокаПолезногоИспользованияНУ;
		
		ЭлементыФормы.НадписьКоэффициентАмортизацииНУ.Видимость		= (СпособНачисленияАмортизацииНУ = МетодНачисленияПоЕНАОФ) И НачислятьАмортизациюНУ;
		ЭлементыФормы.КоэффициентАмортизацииНУ.Видимость			= (СпособНачисленияАмортизацииНУ = МетодНачисленияПоЕНАОФ) И НачислятьАмортизациюНУ;
		ЭлементыФормы.НадписьСпециальныйКоэффициентНУ1.Видимость	= (СпособНачисленияАмортизацииНУ = МетодНачисленияПоЕНАОФ) И НачислятьАмортизациюНУ;
		ЭлементыФормы.СпециальныйКоэффициентНУ1.Видимость			= (СпособНачисленияАмортизацииНУ = МетодНачисленияПоЕНАОФ) И НачислятьАмортизациюНУ;
		ЭлементыФормы.Надпись5.Видимость							= (СпособНачисленияАмортизацииНУ = МетодНачисленияПоЕНАОФ) И НачислятьАмортизациюНУ;
		
	ИначеЕсли ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
		
		ЭлементыФормы.ПанельРасходовИП.ТекущаяСтраница = ЭлементыФормы.ПанельРасходовИП.Страницы.Страница2;
	Иначе
		ЭлементыФормы.ПанельРасходовИП.ТекущаяСтраница = ЭлементыФормы.ПанельРасходовИП.Страницы.Страница3;
		
	КонецЕсли;
	
КонецПроцедуры
// }УчетДоходовИРасходовИП

// Устанавливает отображение единицы измерения выработки в зависимости от выбранного параметра выработки 
//
Процедура УстановитьЕдиницуИзмеренияВыработки()

	Если НЕ ЗначениеЗаполнено(ПараметрВыработкиБУ) ТОгда
		ЭлементыФормы.ЕдиницаНормыБУ.Заголовок = "";
		ЭлементыФормы.ЕдиницаНормыБУ1.Заголовок = "";
	Иначе
		ЭлементыФормы.ЕдиницаНормыБУ.Заголовок = Строка(ПараметрВыработкиБУ.ЕдиницаИзмерения);
		ЭлементыФормы.ЕдиницаНормыБУ1.Заголовок = Строка(ПараметрВыработкиБУ.ЕдиницаИзмерения);
	КонецЕсли;

КонецПроцедуры	

// Заполнение реквизитов шапки документа значениями по умолчанию
//
Процедура ЗаполнитьДаннымиПоУмолчанию(ДокументОбъект)

	Если ВидОперации.Пустая() Тогда
		
		ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование;
		
	КонецЕсли;

	Если СчетУчетаВнеоборотногоАктива.Пустая() Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда

			СчетУчетаВнеоборотногоАктива = ?(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств.ЗапретитьИспользоватьВПроводках,
											 ПланыСчетов.Хозрасчетный.ПустаяСсылка(),
											 ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);

		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда

			СчетУчетаВнеоборотногоАктива = ?(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств.ЗапретитьИспользоватьВПроводках,
				                             ПланыСчетов.Хозрасчетный.ПустаяСсылка(),
				                             ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);

		КонецЕсли;

	КонецЕсли;

	НачислятьАмортизациюБУ = Истина;
	НачислятьАмортизациюНУ = Истина;

	Если ОперацияСОбъектамиОС.Пустая() Тогда

		ОперацияСОбъектамиОС = УправлениеВнеоборотнымиАктивами.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию);

	КонецЕсли;
	
// {ОбособленныеПодразделения
	КоррПодразделениеОрганизации = ПодразделениеОрганизации;
// }ОбособленныеПодразделения 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		РаботаСДиалогами.ВыбратьВидОперации(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		Если ПараметрОбъектКопирования = Неопределено Тогда // если объект создан не копированием
			
			// Заполнить реквизиты значениями по умолчанию.
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,,ПараметрОбъектКопирования);
			ЗаполнитьДаннымиПоУмолчанию(ЭтотОбъект);
			
			ПорядокВключенияСтоимостиВСоставРасходовУСН = Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставАмортизируемогоИмущества;
			
			// Установим счета учета по умолчанию.
			СчетУчета = ПланыСчетов.Хозрасчетный.ОСвОрганизации;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
										ВидОперации.Метаданные().ЗначенияПеречисления,
										Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();

	ЭлементыФормы.РеглВалюта.Заголовок  = ВалютаРегл;
	ЭлементыФормы.РеглВалюта1.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта2.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта3.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта4.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта5.Заголовок = ВалютаРегл;
	
	ВключитьКапитальныеВложенияВРасходыНУ = ПараметрыАмортизационнойПремииЗаполнены();
	мУказанПроцентАмортизационнойПремии   = НЕ (ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0);
	
	// {УчетДоходовИРасходовИП
	СписокДоступныхМетодовАмортизации1 = Новый СписокЗначений();
	СписокДоступныхМетодовАмортизации1.Добавить(Перечисления.МетодыНачисленияАмортизации.Линейный);
	СписокДоступныхМетодовАмортизации1.Добавить(Перечисления.МетодыНачисленияАмортизации.ПоЕНАОФ);
	ЭлементыФормы.СпособНачисленияАмортизацииНУ1.ДоступныеЗначения = СписокДоступныхМетодовАмортизации1;
	// }УчетДоходовИРасходовИП
	
	СписокДоступныхВариантовПогашенияСтоимостиБУ = Новый СписокЗначений;
	СписокДоступныхВариантовПогашенияСтоимостиБУ.Добавить(Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации);
	СписокДоступныхВариантовПогашенияСтоимостиБУ.Добавить(Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается);
	ЭлементыФормы.ПорядокПогашенияСтоимостиБУ.ДоступныеЗначения = СписокДоступныхВариантовПогашенияСтоимостиБУ;
	
	УстановитьВидимость();
	УстановитьВидимостьПараметровАмортизацииБУ();
	УстановитьЕдиницуИзмеренияВыработки();
	
	мТекущаяДатаДокумента = Дата;
	
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	// Установим активный реквизит.
	УстановитьАктивныйРеквизит();
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает активный реквизит.
Процедура УстановитьАктивныйРеквизит()
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата, Организация, МестонахождениеОС");
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование тогда
		СтруктураРеквизитов.Вставить("Номенклатура");
		СтруктураРеквизитов.Вставить("Склад");
		СтруктураРеквизитов.Вставить("СчетУчетаВнеоборотногоАктива");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства тогда
		СтруктураРеквизитов.Вставить("ОбъектСтроительства");
		СтруктураРеквизитов.Вставить("СчетУчетаВнеоборотногоАктива1");
		СтруктураРеквизитов.Вставить("СтоимостьБУ");
	Иначе
		СтруктураРеквизитов.Вставить("СтатьяДоходов");
		СтруктураРеквизитов.Вставить("СтоимостьБУ1");
		СтруктураРеквизитов.Вставить("СтоимостьНУ1");
	КонецЕсли;      
		РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма, СтруктураРеквизитов, ЭлементыФормы.ОсновныеСредства);
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда

		Если ЗначениеЗаполнено(ОбъектСтроительства) Тогда
			ОбъектСтроительства = Неопределено;
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда

		Если ЗначениеЗаполнено(Номенклатура) Тогда
			Номенклатура = Неопределено;
		КонецЕсли;

	КонецЕсли;

	// Если порядок погашения стоимости (БУ) отличается от амортизации, параметры амортизации (БУ) очищаются
	Если НЕ (ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации) Тогда
		
		ПредполагаемыйОбъемПродукцииБУ = 0;
		ПараметрВыработкиБУ            = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
		КоэффициентУскоренияБУ         = 0;
		ГрафикАмортизацииПоГодуБУ      = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
		СпособНачисленияАмортизацииБУ  = Перечисления.СпособыНачисленияАмортизацииОС.ПустаяСсылка();
		
	КонецЕсли;
	
	// Если порядок погашения стоимости (БУ) к тому же и не износ, очищаются оставшиеся параметры амортизации
	Если ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету
	 ИЛИ ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается Тогда
		
		СрокПолезногоИспользованияБУ = 0;
		ГодоваяНормаАмортизацииБУ    = 0;
		НачислятьАмортизациюБУ       = 0;
		СчетНачисленияАмортизации    = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	КонецЕсли;
	
	// В зависимости от выбранного способа амортизации (БУ) нужно очистить неиспользуемые параметры амортизации (БУ)
	Если ЗначениеЗаполнено(СпособНачисленияАмортизацииБУ) Тогда
	
		// зависимость объема работ от способа амортизации
		Если НЕ (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
			 И НЕ (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции) Тогда
			 
			ПредполагаемыйОбъемПродукцииБУ = 0;
			ПараметрВыработкиБУ = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
			
		КонецЕсли;

		// зависимость коэффициента ускорения от способа амортизации
		Если НЕ (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
			
			КоэффициентУскоренияБУ = 0;
			
		КонецЕсли;

		// зависимость годовой нормы амортизации от способа амортизации
		Если НЕ (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
			 И НЕ (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ) Тогда
			 
			ГодоваяНормаАмортизацииБУ = 0;
			
		КонецЕсли;

		// зависимость годового графика амортизации от способа амортизации
		Если НЕ (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный)
			 И НЕ (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ)
			 И НЕ (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования)
			 И НЕ (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
			 
			ГрафикАмортизацииПоГодуБУ = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Если вариант включения в состав расходов (НУ) отличается от амортизации, параметры амортизации (НУ) очищаются
	Если НЕ (ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации) Тогда
		СчетНачисленияАмортизацииНУ   = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		НачислятьАмортизациюНУ        = Ложь;
		СпособНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.ПустаяСсылка();
		СрокПолезногоИспользованияНУ  = 0;
		СпециальныйКоэффициентНУ      = 0;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	// Если открыли данную форму из формы документа, то там надо поменять текст
	Если НЕ ВладелецФормы = Неопределено Тогда

		// Надо поменять текст про документ в форме-владельце
		Если ТипЗнч(ВладелецФормы) = Тип("Форма")
		И ВладелецФормы.Заголовок = "ОсновныеСредства" Тогда
			ВладелецФормы.ЗаполнитьТекстПроДокументы();
		КонецЕсли;

	КонецЕсли;
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда

		Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ОсновныеСредства") Тогда

			СтрокаТабличнойЧасти = ОсновныеСредства.Найти(ЗначениеВыбора,"ОсновноеСредство");
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				Предупреждение("Это основное средство уже подобрано!", 60);
			Иначе
				НоваяСтрока = ОсновныеСредства.Добавить();
				НоваяСтрока.ОсновноеСредство = ЗначениеВыбора;
				НоваяСтрока.ИнвентарныйНомер = СокрЛП(ЗначениеВыбора.Код);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	ТекущийВидОперации = ВидОперации;
	
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств[Кнопка.Имя];
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		
		Если НЕ (ТекущийВидОперации = ВидОперации) Тогда
			
			ЗаполнитьСчетаУчетаОборудования();
			
		КонецЕсли;
										   
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда

		Если НЕ (ТекущийВидОперации = ВидОперации) Тогда
			
			СчетУчетаВнеоборотногоАктива = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			
		КонецЕсли;

	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации Тогда
		
		ВключитьКапитальныеВложенияВРасходыНУ          = Ложь;
		ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0;
		СчетУчетаЗатратПоАмортизационнойПремии         = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СубконтоПоАмортизационнойПремии1               = Неопределено;
		СубконтоПоАмортизационнойПремии2               = Неопределено;
		СубконтоПоАмортизационнойПремии3               = Неопределено;
		
	КонецЕсли;
	
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "По наименованию" из меню "Заполнить"
// командной панели формы. Процедура добавляет в табличную часть основные средства,
// наименование которых совпадает с наименованием текущего выбранного в табличной части ОС
//
Процедура КоманднаяПанельОСЗаполнитьПоНаименованию(Кнопка)
	
	Если ЭлементыФормы.ОсновныеСредства.ТекущаяСтрока = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредство = ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.ОсновноеСредство;
	
	Если ОсновноеСредство = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредствоНаименование = Строка(ОсновноеСредство);
	
	СписокОС = ОсновныеСредства.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("СписокОС",     СписокОС);
	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.Код КАК ОсновноеСредствоКод
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И ОсновныеСредства.Ссылка НЕ В (&СписокОС)
	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ";
	
	ВыборкаОсновныеСредства = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОсновныеСредства.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Другие элементы справочника с наименованием <" + ОсновноеСредствоНаименование + "> в справочнике ""Основные средства"" отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаОсновныеСредства.Следующий() Цикл
		НоваяСтрока = ОсновныеСредства.Добавить();
		НоваяСтрока.ОсновноеСредство = ВыборкаОсновныеСредства.ОсновноеСредство;
		НоваяСтрока.ИнвентарныйНомер = ВыборкаОсновныеСредства.ОсновноеСредствоКод;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура вызывается при нажании кнопки Подбор командной панели "КоманднаяПанельОС"
//
Процедура КоманднаяПанельОСПодбор(Кнопка)

	ФормаВыбора = Справочники.ОсновныеСредства.ПолучитьФормуВыбора(, ЭтаФорма);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
    УстановитьВидимость();
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Организация 
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении реквизита Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));

	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СпособыОтраженияРасходовПоАмортизации
//
Процедура СпособыОтраженияРасходовПоАмортизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеВнеоборотнымиАктивами.НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации(Элемент, Организация, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ПорядокПогашенияСтоимостиБУ
//
Процедура ПорядокПогашенияСтоимостиБУПриИзменении(Элемент)
	
	Если ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		
		СчетУчета                 = ПланыСчетов.Хозрасчетный.ОСвОрганизации;
		СчетНачисленияАмортизации = ПланыСчетов.Хозрасчетный.АмортизацияОС_01;
		
	ИначеЕсли ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда
	
		СчетУчета                 = ПланыСчетов.Хозрасчетный.ОСвОрганизации;
		СчетНачисленияАмортизации = ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств;
		
	Иначе
		
		СчетУчета                 = ПланыСчетов.Хозрасчетный.ОСвОрганизации;
		СчетНачисленияАмортизации = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	КонецЕсли;
	
	Если ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается Тогда
		ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы;
		Сообщить("В поле ""Порядок включения стоимости в состав расходов:"" на закладке ""Налоговый учет"" установлено значение """ + Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы + """");
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ПорядокПогашенияСтоимостиБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля СпособНачисленияАмортизацииБУ
//
Процедура СпособНачисленияАмортизацииБУПриИзменении(Элемент)
	
	УстановитьВидимостьПараметровАмортизацииБУ();
	УстановитьЕдиницуИзмеренияВыработки();

КонецПроцедуры // СпособНачисленияАмортизацииБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ОбъектСтроительства
//
Процедура ОбъектСтроительстваПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры // ОбъектСтроительстваПриИзменении()
 
// Процедура - обработчик события "НачалоВыбора" поля ввода "Счет учета (БУ)".
//
Процедура СчетУчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь);
	
КонецПроцедуры // СчетУчетаНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода 
// "Счет учета (БУ)".
//
Процедура СчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение) И ПроверитьБалансовыйСчет(ВыбранноеЗначение);
	
КонецПроцедуры // СчетУчетаОбработкаВыбора()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода 
// "СчетУчета"
//
Процедура СчетУчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ПроверитьБалансовыйСчет(Текст);
	
КонецПроцедуры // СчетУчетаОкончаниеВводаТекста()

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "Счет начисления амортизации (БУ)".
//
Процедура СчетНачисленияАмортизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь);
	
КонецПроцедуры // СчетНачисленияАмортизацииНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетНачисленияАмортизации
//
Процедура СчетНачисленияАмортизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение) И ПроверитьБалансовыйСчет(ВыбранноеЗначение);
	
КонецПроцедуры // СчетНачисленияАмортизацииОбработкаВыбора()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода 
// "СчетНачисленияАмортизации"
//
Процедура СчетНачисленияАмортизацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ПроверитьБалансовыйСчет(Текст);
		
КонецПроцедуры // СчетНачисленияАмортизацииОкончаниеВводаТекста()

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "Счет начисления износа".
//
Процедура СчетНачисленияИзносаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Истина);
	
КонецПроцедуры // СчетНачисленияИзносаНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода 
// СчетНачисленияИзноса. Проверяет, можно ли использовать
// выбранный счет в проводках и является ли он забалансовым.
//
Процедура СчетНачисленияИзносаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение) И ПроверитьЗабалансовыйСчет(ВыбранноеЗначение);
	
КонецПроцедуры // СчетНачисленияИзносаОбработкаВыбора()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода 
// "СчетНачисленияИзноса"
//
Процедура СчетНачисленияИзносаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ПроверитьЗабалансовыйСчет(Текст);
	
КонецПроцедуры // СчетНачисленияИзносаОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода Номенклатура
//
Процедура НоменклатураПриИзменении(Элемент)

	ЗаполнитьСчетаУчетаОборудования();

КонецПроцедуры // НоменклатураПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчета
//
Процедура СчетУчетаВнеоборотногоАктиваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// {УчетДоходовИРасходовИП
Процедура СчетУчетаВнеоборотногоАктива1ПриИзменении(Элемент)
	
	Если ОбщегоНазначения.Предприниматель(Организация, Дата) Тогда
		Если СчетУчетаВнеоборотногоАктива <> ПланыСЧетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств Тогда
			Если НЕ УказатьПервоначальнуюСтоимость Тогда
				УказатьПервоначальнуюСтоимость = Истина;
			КонецЕсли;
			ЭлементыФормы.УказатьПервоначальнуюСтоимость.Доступность = Ложь;
		Иначе
			ЭлементыФормы.УказатьПервоначальнуюСтоимость.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
// }УчетДоходовИРасходовИП

// Процедура - обработчик события "Нажатие" кнопки РассчитатьСтоимость
//
Процедура РассчитатьСтоимостьНажатие(Элемент)

	Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе", 60);
		Возврат;
	КонецЕсли;

	Если ОбъектСтроительства.Пустая() Тогда
		Предупреждение("Не выбран объект строительства", 60);
		Возврат;
	КонецЕсли;

	Если Организация.Пустая() Тогда
		Предупреждение("Не выбрана организация", 60);
		Возврат;
	КонецЕсли;

	Если СчетУчетаВнеоборотногоАктива.Пустая() Тогда
		Предупреждение("Не выбран счет бухгалтерского учета объекта строительства", 60);
		Возврат;
	КонецЕсли;
	
	// {ОбособленныеПодразделения
	Подразделение = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 

	СтруктураСтоимости = УправлениеВнеоборотнымиАктивами.РассчитатьСтоимостьОбъектаСтроительства(Организация, 
	                                                                                             Подразделение,
	                                                                                             Новый Граница(КонецМесяца(Дата)), 
	                                                                                             СчетУчетаВнеоборотногоАктива,
	                                                                                             ОбъектСтроительства);

	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураСтоимости);

КонецПроцедуры // РассчитатьСтоимостьНажатие()

// Процедура - обработчик события "НачалоВыбора" поля ввода СпособНачисленияАмортизации
//
Процедура СпособНачисленияАмортизацииБУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.УстановитьСписокПоляВыбора(ЭлементыФормы.СпособНачисленияАмортизацииБУ, ПолучитьСписокСпособовАмортизацииБУ());

КонецПроцедуры // СпособНачисленияАмортизацииБУНачалоВыбораИзСписка()

// Процедура - обработчик события "НачалоВыбора" поля ввода СостояниеПринятиеКУчету
//
Процедура ОперацияСОбъектамиОСНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВидыСобытий = Новый СписокЗначений;
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию);
	
	УправлениеВнеоборотнымиАктивами.НачалоВыбораЗначенияСобытийОС(Элемент, ВидыСобытий, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события "НачалоВыбораИзСписка" поля ввода "Годовая норма
// амортизационных отчислений".
//
Процедура ГодоваяНормаАмортизацииБУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СписокВыбора = Новый СписокЗначений;
	НормаПоЕНАОФ = 0;

	Для Каждого СтрокаСпискаОсновныхСредств Из ОсновныеСредства Цикл
		
		ШифрПоЕНАОФ = СтрокаСпискаОсновныхСредств.ОсновноеСредство.ШифрПоЕНАОФ;
		
		Если ШифрПоЕНАОФ.Пустая() Тогда
			Продолжить;
		КонецЕсли;
			
		Если СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
			
			НормаПоЕНАОФ = ШифрПоЕНАОФ.НормаАмортизационныхОтчислений;

		ИначеЕсли СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
			
			НормаПоЕНАОФ = ШифрПоЕНАОФ.ПроцентОтСтоимостиМашины;

		КонецЕсли;
		
		Если СписокВыбора.НайтиПоЗначению(НормаПоЕНАОФ) = Неопределено Тогда
		
			СписокВыбора.Добавить(НормаПоЕНАОФ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокВыбора.СортироватьПоЗначению();

	Элемент.СписокВыбора = СписокВыбора;

КонецПроцедуры // ГодоваяНормаАмортизацииБУНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода ПараметрВыработкиБУ
//
Процедура ПараметрВыработкиБУПриИзменении(Элемент)

	УстановитьЕдиницуИзмеренияВыработки();
	
КонецПроцедуры

Процедура ОсновныеСредстваОсновноеСредствоПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.ОсновныеСредства.ТекущиеДанные;
	СтрокаТЧ.ИнвентарныйНомер = СокрЛП(СтрокаТЧ.ОсновноеСредство.Код);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ОсновныеСредства". Формирует данные в колонке "Инв. №".
//
Процедура ОСПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ОсновныеСредства.Колонки.ИнвНомер.Видимость Тогда

		ОформлениеСтроки.Ячейки.ИнвНомер.УстановитьТекст(ДанныеСтроки.ОсновноеСредство.Код);

	КонецЕсли;

КонецПроцедуры // ОСПриВыводеСтроки()

// Процедура вызывается по кнопке при изменении активной строки в таблице основных 
// средств, а также при переходе на закладку "Налоговый учет (УСН)".
//
Процедура ОтобразитьОплаты()

	ТекСтрока = ЭлементыФормы.ОсновныеСредстваДляУСН.ТекущаяСтрока;
	// Включаем отбор тех оплат, которые относятся к текущему основному средству, выбранному
	// в табличной части "ОсновныеСредстваДляУСН"

	Если ТекСтрока <> Неопределено Тогда
		// Включаем отбор ключу из текущей строки табличной части "СоставКосвенныхРасходов"
		ЭлементыФормы.Оплата.ТолькоПросмотр = Ложь;
		ЭлементыФормы.Оплата.ОтборСтрок.ОсновноеСредство.Значение = ТекСтрока.ОсновноеСредство;

	Иначе
		// Текущая строка в таблице косвенных расходов не установлена
		ЭлементыФормы.Оплата.ТолькоПросмотр = Истина;
		Если ОсновныеСредства.Количество() = 0 Тогда
			Оплата.Очистить();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОтобразитьНаправленияСписания()

Процедура ОсновныеСредстваДляУСНПриАктивизацииСтроки(Элемент)
	ОтобразитьОплаты();
КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элемент.ТекущаяСтраница.Имя = "УСНУчет" Тогда
		ЭлементыФормы.Оплата.ОтборСтрок.ОсновноеСредство.Использование = Истина;
		ЭлементыФормы.Оплата.ОтборСтрок.ОсновноеСредство.Значение = Справочники.ОсновныеСредства.ПустаяСсылка();
		ОтобразитьОплаты();
	КонецЕсли;
КонецПроцедуры

Процедура ОплатаПриНачалеРедактирования(Элемент, НоваяСтрока)
	Если НоваяСтрока Тогда
		ЭлементыФормы.Оплата.ТекущиеДанные.ОсновноеСредство = ЭлементыФормы.Оплата.ОтборСтрок.ОсновноеСредство.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура ОсновныеСредстваПередУдалением(Элемент, Отказ)
	Если ЗначениеЗаполнено(Оплата.Найти(Элемент.ТекущиеДанные.ОсновноеСредство)) Тогда
		Ответ = Вопрос("При удалении основного средства, на закладке ""Налоговый учет УСН"" будет очищена информация о его оплатах."+
		"Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			КолвоЭлементовКоллекции = Оплата.Количество(); 
			Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
				ЭлементКоллекции = Оплата[КолвоЭлементовКоллекции - ОбратныйИндекс];
				Если ЭлементКоллекции.ОсновноеСредство = Элемент.ТекущиеДанные.ОсновноеСредство Тогда
					Оплата.Удалить(ЭлементКоллекции);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Отказ = Истина;
		КонецЕслИ;
	КонецЕсли;
КонецПроцедуры

Процедура ПорядокВключенияСтоимостиВСоставРасходовНУПриИзменении(Элемент)
	
	СчетНачисленияАмортизацииНУ = ПланыСчетов.Хозрасчетный.АмортизацияОС_01;
	СпециальныйКоэффициентНУ    = 1;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля ввода "Срок полезного использования (БУ)".
// 
Процедура СрокПолезногоИспользованияБУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СрокПолезногоИспользованияБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Срок полезного использования (БУ)".
// 
Процедура СрокПолезногоИспользованияБУ1ПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СрокПолезногоИспользованияБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Срок полезного использования (БУ)".
// 
Процедура СрокПолезногоИспользованияБУ2ПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СрокПолезногоИспользованияБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Срок полезного использования (БУ)".
// 
Процедура СрокПолезногоИспользованияБУ3ПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СрокПолезногоИспользованияБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Срок полезного использования (БУ)".
// 
Процедура СрокПолезногоИспользованияБУ4ПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СрокПолезногоИспользованияБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Срок полезного использования (БУ)".
// 
Процедура СрокПолезногоИспользованияБУ5ПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СрокПолезногоИспользованияБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Срок полезного использования (БУ)".
// 
Процедура СрокПолезногоИспользованияБУ6ПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СрокПолезногоИспользованияБУПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "Срок полезного использования (НУ)".
// 
Процедура СрокПолезногоИспользованияНУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СрокПолезногоИспользованияНУПриИзменении()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Обработчик события "ПриИзменении" флажка "Включить амортизационную премию
// в состав расходов по п. 1.1 ст. 259 НК РФ".
//
// Очищает значение процента капитальных вложений и вызывает процедуру
// установки видимости.
// 
Процедура ВключитьКапитальныеВложенияВРасходыНУПриИзменении(Элемент)
	
	Если НЕ ВключитьКапитальныеВложенияВРасходыНУ Тогда
	
		Если ПараметрыАмортизационнойПремииЗаполнены() Тогда
			
			ТекстВопроса =
			"Установленные параметры амортизационной премии будут очищены.
			|Продолжить?";
			
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
				
				ПроцентКапитальныхВложенийВключаемыхВРасходыНУ  = 0;
				СчетУчетаЗатратПоАмортизационнойПремии          = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				ПодразделениеОрганизацииПоАмортизационнойПремии = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				СубконтоПоАмортизационнойПремии1                = Неопределено;
				СубконтоПоАмортизационнойПремии2                = Неопределено;
				СубконтоПоАмортизационнойПремии3                = Неопределено;
				
			Иначе
				
				ВключитьКапитальныеВложенияВРасходыНУ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
			Если НЕ (СпособыОтраженияРасходовПоАмортизации = Справочники.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка()) Тогда
					
				Запрос = Новый Запрос();
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СтатьиЗатрат.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
				|ГДЕ
				|	СтатьиЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.АмортизационнаяПремия)
				|УПОРЯДОЧИТЬ ПО
				|	СтатьиЗатрат.Код
				|";
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ (РезультатЗапроса.Пустой()) Тогда
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					СтатьяЗатратАмортизационнаяПремия = Выборка.Ссылка;
				Иначе
					СтатьяЗатратАмортизационнаяПремия = Неопределено;
				КонецЕсли;
					
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Ссылка",                            СпособыОтраженияРасходовПоАмортизации);
				Запрос.УстановитьПараметр("СтатьяЗатратАмортизационнаяПремия", СтатьяЗатратАмортизационнаяПремия);
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатрат КАК СчетЗатрат,
				|	СпособыОтраженияРасходовПоАмортизацииСпособы.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
				|	ВЫБОР
				|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
				|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
				|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1
				|	КОНЕЦ КАК Субконто1,
				|	ВЫБОР
				|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
				|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
				|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2
				|	КОНЕЦ КАК Субконто2,
				|	ВЫБОР
				|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
				|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
				|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3
				|	КОНЕЦ КАК Субконто3
				|ИЗ
				|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
				|ГДЕ
				|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка = &Ссылка
				|
				|УПОРЯДОЧИТЬ ПО
				|	СпособыОтраженияРасходовПоАмортизацииСпособы.НомерСтроки";
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ (РезультатЗапроса.Пустой()) Тогда
						
					СпособОтраженияРаcходов = РезультатЗапроса.Выгрузить()[0];
						
					СчетУчетаЗатратПоАмортизационнойПремии = СпособОтраженияРаcходов.СчетЗатрат;
						
					СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(ЭлементыФормы.СчетУчетаЗатратПоАмортизационнойПремии);
					
					ПодразделениеОрганизацииПоАмортизационнойПремии = СпособОтраженияРаcходов.ПодразделениеОрганизации;
					
					Если ЗначениеЗаполнено(СпособОтраженияРаcходов.Субконто1) Тогда
						СубконтоПоАмортизационнойПремии1 = СпособОтраженияРаcходов.Субконто1;
					КонецЕсли;
						
					Если ЗначениеЗаполнено(СпособОтраженияРаcходов.Субконто2) Тогда
						СубконтоПоАмортизационнойПремии2 = СпособОтраженияРаcходов.Субконто2;
					КонецЕсли;
						
					Если ЗначениеЗаполнено(СпособОтраженияРаcходов.Субконто3) Тогда
						СубконтоПоАмортизационнойПремии3 = СпособОтраженияРаcходов.Субконто3;
					КонецЕсли;
						
				КонецЕсли;
					
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ВключитьКапитальныеВложенияВРасходыНУПриИзменении()

Функция ПараметрыАмортизационнойПремииЗаполнены()

	Если (ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0)
	   И (СчетУчетаЗатратПоАмортизационнойПремии = ПланыСчетов.Хозрасчетный.ПустаяСсылка())
	   И (НЕ ЗначениеЗаполнено(СубконтоПоАмортизационнойПремии1))
	   И (НЕ ЗначениеЗаполнено(СубконтоПоАмортизационнойПремии2))
	   И (НЕ ЗначениеЗаполнено(СубконтоПоАмортизационнойПремии3)) Тогда
	   
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;

КонецФункции // ПроверитьЗаполненностьПараметровАмортизационнойПремии()

Процедура СрокПолезногоИспользованияУСНПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СчетУчетаЗатратПоАмортизационнойПремииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СчетУчетаЗатратПоАмортизационнойПремииОбработкаВыбора()

Процедура СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		СубконтоПоАмортизационнойПремии1, ЭлементыФормы.СубконтоПоАмортизационнойПремии1,
		СубконтоПоАмортизационнойПремии2, ЭлементыФормы.СубконтоПоАмортизационнойПремии2,
		СубконтоПоАмортизационнойПремии3, ЭлементыФормы.СубконтоПоАмортизационнойПремии3);
								 
	УстановитьВидимость();														
															
КонецПроцедуры // СчетУчетаЗатратПоАмортизационнойПремииПриИзменении()

Процедура УстановитьВидимостьСубконто(Счет, Суффикс, ВидимостьСчета)
	
	ВидыСубконтоСчета = Счет.ВидыСубконто;
	КоличествоСубконто = ВидыСубконтоСчета.Количество();
	
	Для НомерСубконто = 1 по 3 Цикл
		
		Если ВидимостьСчета И (НомерСубконто <= КоличествоСубконто) И (ЗначениеЗаполнено(Счет)) Тогда
			
			ЭлементыФормы["НадписьСубконто" + Суффикс + НомерСубконто].Заголовок = Строка(ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто) + ":";
			ЭлементыФормы["НадписьСубконто" + Суффикс + НомерСубконто].Видимость = Истина;
			ЭлементыФормы["Субконто" + Суффикс + НомерСубконто].Видимость        = Истина;
			
		Иначе
			
			ЭлементыФормы["НадписьСубконто" + Суффикс + НомерСубконто].Видимость = Ложь;
			ЭлементыФормы["Субконто" + Суффикс + НомерСубконто].Видимость        = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьСубконто()


// Обработчик события "НачалоВыбора" поля ввода Субконто.
//
Процедура СубконтоНачалоВыбора(Элемент, СтандартнаяОбработка)

	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация);

КонецПроцедуры // СубконтоНачалоВыбора()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// {УчетДоходовИРасходовИП
Процедура НачислятьАмортизациюНУ1ПриИзменении(Элемент)
	
	УстановитьВидимостьПараметровНачисленияАмортизацииИП();
	
КонецПроцедуры

Процедура СпособНачисленияАмортизацииНУ1ПриИзменении(Элемент)
	
	УстановитьВидимостьПараметровНачисленияАмортизацииИП();
	
КонецПроцедуры
// }УчетДоходовИРасходовИП

// {ОбособленныеПодразделения

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	КоррПодразделениеОрганизации = ПодразделениеОрганизации;
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()

// }ОбособленныеПодразделения 

