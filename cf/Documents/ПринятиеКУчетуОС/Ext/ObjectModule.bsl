// Строки, хранят реквизиты имеющие смысл только для бух. учета и нал. соответственно
// в случае если документ НЕ отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУСНУчета Экспорт; // (Регл)

Перем ПартионныйУчетБУ, ПартионныйУчетНУ;

//////////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета(СтруктураШапкиДокумента) Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл(СтруктураШапкиДокумента);

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл(СтруктураШапкиДокумента)

	мСтрокаРеквизитыБухУчета =  "СтоимостьБУ,
								|СтоимостьБУХоз,
								|СчетУчетаВнеоборотногоАктива,
								|ОС.ИнвентарныйНомер,
								|МОЛБУ,
								// {ОбособленныеПодразделения
								|ПодразделениеОрганизации,
								// }ОбособленныеПодразделения 
								|СпособПоступления,
								|ПорядокПогашенияСтоимостиБУ,
								|СпособНачисленияАмортизацииБУ,
								|ПараметрВыработкиБУ,
								|ПредполагаемыйОбъемПродукцииБУ,
								|СрокПолезногоИспользованияБУ,
								|ГодоваяНормаАмортизацииБУ,
								|ГрафикАмортизацииПоГодуБУ,
								|СчетУчета,
								|СчетНачисленияАмортизации,
								|КоэффициентУскоренияБУ,
								|НачислятьАмортизациюБУ
								|";

								
	мСтрокаРеквизитыНалУчета =  "СтоимостьНУ,
								|СтоимостьНУХоз,
								|ПорядокВключенияСтоимостиВСоставРасходовНУ,
								|СрокПолезногоИспользованияНУ,
								|СпециальныйКоэффициентНУ,
								|НачислятьАмортизациюНУ
								|";
								
	мСтрокаРеквизитыУСНУчета =  "СтоимостьУСН,
								|ДатаПриобретения,
								|СрокПолезногоИспользованияУСН
								|";
		
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

Процедура ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента)
	
	СтруктураШапкиДокумента.Вставить("МестонахождениеОС", МестонахождениеОС);
	
КонецПроцедуры

#Если Клиент Тогда
	
//Процедура заполняет параметры организации-получателя формы ОС1 
Процедура ЗаполнитьДанныеОрганизацииПолучателя(ПараметрыДокумента, ОбластьМакета)
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ПараметрыДокумента.Организация, ПараметрыДокумента.ДатаДок);
	ОтветственныеЛицаОрганизации = ОбщегоНазначения.ОтветственныеЛица(ПараметрыДокумента.Организация, ПараметрыДокумента.ДатаДок, ПараметрыДокумента.ПодразделениеОрганизации);
	
	ПараметрыОрганизации = Новый структура("ОрганизацияПолучатель,АдресПолучателя,РеквПолучателя,ДолжРукПолуч,РукПолучателя,КодПоОКПОПолучателя,ГлавБухПолучателя");	
	
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ПараметрыОрганизации.ОрганизацияПолучатель = ПредставлениеОрганизации;
	ПараметрыОрганизации.АдресПолучателя       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,Телефоны,");
	ПараметрыОрганизации.РеквПолучателя        = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета,Банк,БИК,КоррСчет,");
	ПараметрыОрганизации.КодПоОКПОПолучателя   = СведенияОбОрганизации.КодПоОКПО;
	
	ПараметрыОрганизации.РукПолучателя     = ОтветственныеЛицаОрганизации.РуководительПредставление;
	ПараметрыОрганизации.ДолжРукПолуч      = ОтветственныеЛицаОрганизации.РуководительДолжность;
	ПараметрыОрганизации.ГлавБухПолучателя = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерПредставление;
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыОрганизации);
	
КонецПроцедуры
 	
// Функция формирует табличный документ с печатной формой ОС-15,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОС1()

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПринятиеКУчетуОС.Номер КАК НомерАкта,
	|	ПринятиеКУчетуОС.Дата КАК ДатаДок,
	|	ПринятиеКУчетуОС.Дата КАК ДатаВвода,
	|	ПринятиеКУчетуОС.КоэффициентУскоренияБУ,
	|	ПринятиеКУчетуОС.МОЛБУ,
	|	ПринятиеКУчетуОС.ГодоваяНормаАмортизацииБУ КАК НормаАморт,
	|	ПринятиеКУчетуОС.Ответственный,
	|	ПринятиеКУчетуОС.МестонахождениеОС КАК ПодразделениеОрганизации,
	// {ОбособленныеПодразделения
	|	ВЫБОР
	|		КОГДА ПринятиеКУчетуОС.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ПринятиеКУчетуОС.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ПринятиеКУчетуОС.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ КАК ПодрПолучателя,
	// }ОбособленныеПодразделения 
	|	ПринятиеКУчетуОС.Склад,
	|	ПринятиеКУчетуОС.СпособПоступления,
	|	ПринятиеКУчетуОС.СрокПолезногоИспользованияБУ КАК СрокПолезнИспПриПост,
	|	ПринятиеКУчетуОС.СтоимостьБУ,
	|	ПринятиеКУчетуОС.СпособНачисленияАмортизацииБУ КАК СпособАмортизации,
	|	ПринятиеКУчетуОС.Организация КАК Организация
	|ИЗ
	|	Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|
	|ГДЕ
	|	ПринятиеКУчетуОС.Ссылка = &Ссылка";
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	ВыборкаОС.Следующий();
	
	//Заполнение реквизитов организации получателя

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сведения.ИнвентарныйНомер КАК ИнвНомер,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.АмортизационнаяГруппа.Порядок + 1 КАК НомерГруппы,
	|	ЕСТЬNULL(Сведения.ПервоначальнаяСтоимость, 0) КАК НачСтоимость,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.Изготовитель КАК Изготовитель,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
	|	ПринятиеКУчетуОСОсновныеСредства.НомерСтроки КАК НомерСтроки,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.ГруппаОС КАК ГруппаОС,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство.КодПоОКОФ.Код КАК КодОКОФ
	|ИЗ
	|	Документ.ПринятиеКУчетуОС.ОсновныеСредства КАК ПринятиеКУчетуОСОсновныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК Сведения
	|		ПО ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство = Сведения.ОсновноеСредство
	|			И ПринятиеКУчетуОСОсновныеСредства.Ссылка = Сведения.Регистратор
	|ГДЕ
	|	ПринятиеКУчетуОСОсновныеСредства.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ПринятиеКУчетуОСОсновныеСредства.НомерСтроки";
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаПоОС.Количество() <= 1 Тогда

		ВыборкаПоОС.Следующий();

		Если НЕ(ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Здания ИЛИ
				ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Сооружения) Тогда

			ТабДокумент   = Новый ТабличныйДокумент();
			ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуОС_ОС1";

			Макет         = ПолучитьОбщийМакет("ОС1");
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.Заполнить(ВыборкаОС);
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
			Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
				ОбластьМакета.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
			КонецЕсли; 
			
			ОбластьМакета.Параметры.ПодрПолучателя = Строка(ВыборкаОС.ПодразделениеОрганизации);
			ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, ОбластьМакета);
			
			ТабДокумент.Вывести(ОбластьМакета);

		Иначе 

			ТабДокумент    = Новый ТабличныйДокумент();
			МакетОС1а      = ПолучитьОбщийМакет("ОС1а");
			ОбластьМакета  = МакетОС1а.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.Заполнить(ВыборкаОС);
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
			Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
				ОбластьМакета.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
			КонецЕсли; 
			
			ОбластьМакета.Параметры.ПодрПолучателя = Строка(ВыборкаОС.ПодразделениеОрганизации);
			ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, ОбластьМакета);
			ТабДокумент.Вывести(ОбластьМакета);

		КонецЕсли;

		Возврат ТабДокумент;

	Иначе // Объектов много - групповая печать.

		ОС1б_Страница1 = Новый ТабличныйДокумент();
		ОС1б_Страница2 = Новый ТабличныйДокумент();
		ОС1б_Страница3 = Новый ТабличныйДокумент();
		ОС1б_Страница4 = Новый ТабличныйДокумент();

		МакетОС1б      = ПолучитьОбщийМакет("ОС1б");
		
		Шапка1ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка1");
		Шапка2ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка2");
		Строка2ОС1б    = МакетОС1б.ПолучитьОбласть("Строка2");
		Строка2ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка2П");
		Подвал2        = МакетОС1б.ПолучитьОбласть("Подвал2");
		Шапка3ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка3");
		Строка3ОС1б    = МакетОС1б.ПолучитьОбласть("Строка3");
		Строка3ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка3П");
		Подвал3        = МакетОС1б.ПолучитьОбласть("Подвал3");
		Шапка4ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка4");

		Шапка1ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка1ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, Шапка1ОС1б);
		ОС1б_Страница1.Вывести(Шапка1ОС1б);

		Шапка2ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Шапка2ОС1б);

		Шапка3ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница3.Вывести(Шапка3ОС1б);

		Шапка4ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка4ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница4.Вывести(Шапка4ОС1б);

		НомПП            = 0;
		ИтогНачСтоимость = 0;
		
		Пока ВыборкаПоОС.Следующий() Цикл

			ИтогНачСтоимость = ИтогНачСтоимость + ВыборкаПоОС.НачСтоимость;
			
			НомПП = НомПП + 1;
			Строка2ОС1б.Параметры.Нс = НомПП;
			
			Строка2ОС1б.Параметры.Заполнить(ВыборкаОС);
			Строка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
				Строка2ОС1б.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
			КонецЕсли; 
			ОС1б_Страница2.Вывести(Строка2ОС1б);

			Строка3ОС1б.Параметры.Заполнить(ВыборкаОС);
			Строка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			ОС1б_Страница3.Вывести(Строка3ОС1б);

		КонецЦикла;

		Строка2ПОС1б.Параметры.Заполнить(ВыборкаОС);
		Строка2ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Строка2ПОС1б);

		Подвал2.Параметры.Заполнить(ВыборкаОС);
		Подвал2.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Подвал2);

		Строка3ПОС1б.Параметры.Заполнить(ВыборкаОС);
		Строка3ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница3.Вывести(Строка3ПОС1б);

		Подвал3.Параметры.Заполнить(ВыборкаОС);
		Подвал3.Параметры.Заполнить(ВыборкаПоОС);
		Подвал3.Параметры.ИтогНачСтоимость = ИтогНачСтоимость;
		ОС1б_Страница3.Вывести(Подвал3);

		УниверсальныеМеханизмы.НапечататьДокумент(ОС1б_Страница4, , , "Форма ОС-1б. Страница 4");
		УниверсальныеМеханизмы.НапечататьДокумент(ОС1б_Страница3, , , "Форма ОС-1б. Страница 3");
		УниверсальныеМеханизмы.НапечататьДокумент(ОС1б_Страница2, , , "Форма ОС-1б. Страница 2");
		УниверсальныеМеханизмы.НапечататьДокумент(ОС1б_Страница1, , , "Форма ОС-1б. Страница 1");

		Возврат Неопределено;

	КонецЕсли;

КонецФункции // ПечатьОС15()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если ИмяМакета = "ОС1" Тогда
		
		ТабДокумент = ПечатьОС1();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Принятие к учету основных средств"), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОС1","Форма ОС-1");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение НЕ заполнен или
// заполнен НЕ корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация"; // , ОперацияСОбъектамиОС - НЕ обязательна к заполнению

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "ОбъектСтроительства, СчетУчетаВнеоборотногоАктива, СтоимостьБУ";

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
				Если (СтруктураШапкиДокумента.СтоимостьНУ + СтруктураШапкиДокумента.СтоимостьПР + СтруктураШапкиДокумента.СтоимостьВР) = 0 Тогда
					ОбщегоНазначения.ОшибкаПриПроведении("Не заполнены значения реквизитов ""Стоимость (НУ)"", ""Стоимость (ПР)"", ""Стоимость (ВР)""!", Отказ, Заголовок);
				Конецесли;
			Иначе
				ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СтоимостьНУ";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		
		Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
			ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СпособНачисленияАмортизацииНУ";
		ИначеЕсли СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
			ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СтатьяПрочихРасходов";
		КонецЕсли;
		
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "Номенклатура, Склад, СчетУчетаВнеоборотногоАктива";
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СтатьяДоходов, СтоимостьБУ";
	КонецЕсли;
	
	ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СчетУчета, ПорядокПогашенияСтоимостиБУ";
	
	Если СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СчетНачисленияАмортизации";
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда

		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СпособНачисленияАмортизацииБУ";
		
		Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
			ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СрокПолезногоИспользованияБУ";
		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
			ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "ГодоваяНормаАмортизацииБУ";
		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
			ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "ГодоваяНормаАмортизацииБУ, ПредполагаемыйОбъемПродукцииБУ, ПараметрВыработкиБУ";
		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
			ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СрокПолезногоИспользованияБУ";
		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "ПредполагаемыйОбъемПродукцииБУ, ПараметрВыработкиБУ";
		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СрокПолезногоИспользованияБУ, КоэффициентУскоренияБУ";
		КонецЕсли;

	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "ГодоваяНормаАмортизацииБУ";
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "ПорядокВключенияСтоимостиВСоставРасходовНУ";
		
		Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
			ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СрокПолезногоИспользованияНУ";
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Если НЕ ((СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается)
		         И (СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы)) Тогда
			ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СпособыОтраженияРасходовПоАмортизации";
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.Свойство("ВариантУчетаРасходовПоАмортизационнойПремии") Тогда
		
	  		Если СтруктураШапкиДокумента.ВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии Тогда
				Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			      И НЕ (СтруктураШапкиДокумента.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0) Тогда
					ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СчетУчетаЗатратПоАмортизационнойПремии";		
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если НЕ (СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается) Тогда
			ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СпособыОтраженияРасходовПоАмортизации";
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СтоимостьУСН";
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "ДатаПриобретения";
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СрокПолезногоИспользованияУСН";
		Если НЕ (СтруктураШапкиДокумента.Дата < Дата("20060101")) Тогда
			ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "ПорядокВключенияСтоимостиВСоставРасходовУСН";
		КонецЕсли;
	КонецЕсли;
	
	// Проверим, не превышает ли допустимую величину процент амортизационной премии, включаемой в состав расходов.
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
	   И СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
	   И НЕ (СтруктураШапкиДокумента.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0) Тогда
		
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СчетУчетаЗатратПоАмортизационнойПремии";		
		
	КонецЕсли;
	
	// Проверка заполнения поля "Способ отражения расходов" при включении стоимости ОС в расходы при принятии к учету.
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
		И СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
		
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СпособОтраженияРасходовПриВключенииВСтоимость";		
		
	КонецЕсли;
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство, ИнвентарныйНомер"; //через запятую

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОсновныеСредства", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

КонецПроцедуры // ПроверкаРеквизитов()

// Проверяет факт принятия к учету основного средства в других организациях.
//
Процедура ПроверитьПринятиеКУчетуВДругихОрганизациях(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	ВыборкаОС = ПолныеПрава.ПроверитьПринятиеКУчетуВДругихОрганизациях(СтруктураШапкиДокумента, ТаблицаПоОС).Выбрать();
	
	Пока ВыборкаОС.Следующий() Цикл
		
		ТекстСообщенияОбОшибке =
		"Основное средство " + ВыборкаОС.ОсновноеСредство + " (" + СокрЛП(ВыборкаОС.КодОсновногоСредства) + ") " + Формат(ВыборкаОС.ДатаСостояния, "ДФ=dd.MM.yyyy") + " принято к учету в организации " + ВыборкаОС.Организация;
		
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьПринятиеКУчетуВДругихОрганизациях()

Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаПоСтрокам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, ДатаОплаты, СуммаОплаты");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура формирования движений регистров
//
Процедура ФормированиеДвижений(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплат, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		ФормированиеДвиженийПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоОС,Отказ, Заголовок);
	КонецЕсли;

	ФормированиеДвиженийРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплат, Отказ, Заголовок);
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
КонецПроцедуры // ФормированиеДвижений()

Процедура ФормированиеДвиженийПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	НомСтр   = 0;
	ДатаДока = Дата;

    Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПринятиеКУчетуОСОсновныеСредства.НомерСтроки                         КАК НомерСтроки,
	|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.Организация                  КАК Организация,
	|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.Номенклатура                 КАК Номенклатура,
	|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.Склад                        КАК Склад,
	|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.СчетУчетаВнеоборотногоАктива КАК СчетУчета,
	// {ОбособленныеПодразделения
	|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.ПодразделениеОрганизации     КАК ПодразделениеОрганизации,
	// }ОбособленныеПодразделения 
	|	&ПустойДоговор                                                       КАК ДоговорКонтрагента,
	|	1                                                                    КАК Количество,
	|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.СчетУчета                    КАК КорСчетСписания,
	// {ОбособленныеПодразделения
	|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.МестонахождениеОС            КАК КорПодразделениеОрганизации,
	// }ОбособленныеПодразделения
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство                    КАК КорСубконтоСписания1,
	|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство                    КАК ОсновноеСредство,
	|	ПринятиеКУчетуОСОсновныеСредства.ИнвентарныйНомер                    КАК ИнвентарныйНомер,
	|	0                                                                    КАК КоэффОплаты,
	|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.Номенклатура.Услуга          КАК Услуга,
	|	НЕОПРЕДЕЛЕНО                                                         КАК ДокументОприходования
	|ИЗ
	|	Документ.ПринятиеКУчетуОС.ОсновныеСредства КАК ПринятиеКУчетуОСОсновныеСредства
	|
	|ГДЕ
	|	ПринятиеКУчетуОСОсновныеСредства.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка",        СтруктураШапкиДокумента.Ссылка );
	Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	ТаблицаПоОС = Результат.Выгрузить();
	ТаблицаПоОС.Колонки.Добавить("Регистратор");
	ТаблицаПоОС.ЗаполнитьЗначения(ЭтотОбъект, "Регистратор");
	ТаблицаПоОС.Колонки.Добавить("СчетДоходов");
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоОС, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, , "Принят к учету объект ОС");

КонецПроцедуры

// Процедура формирования движений регл. регистров
//
Процедура ФормированиеДвиженийРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплат, Отказ, Заголовок)

	ТЗДанныеОС = Новый ТаблицаЗначений;
	ТЗДанныеОС.Колонки.Добавить("ОсновноеСредство");
	ТЗДанныеОС.Колонки.Добавить("Сумма",                    ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТЗДанныеОС.Колонки.Добавить("СуммаНУ",                  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТЗДанныеОС.Колонки.Добавить("СуммаПР",                  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТЗДанныеОС.Колонки.Добавить("СуммаВР",                  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТЗДанныеОС.Колонки.Добавить("СуммаКапитальныхВложений", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоОС Цикл
			
			НоваяСтрока = ТЗДанныеОС.Добавить();
			
			НоваяСтрока.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
			НоваяСтрока.Сумма            = СтрокаТаблицы.СписанныеПартии.Итог("СуммаСписания");
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
				НоваяСтрока.СуммаНУ                  = СтрокаТаблицы.СписанныеПартии.Итог("СуммаСписанияНУ");
				НоваяСтрока.СуммаПР                  = СтрокаТаблицы.СписанныеПартии.Итог("СуммаСписанияПР");
				НоваяСтрока.СуммаВР                  = СтрокаТаблицы.СписанныеПартии.Итог("СуммаСписанияВР");
				НоваяСтрока.СуммаКапитальныхВложений = Окр(НоваяСтрока.СуммаНУ * (СтруктураШапкиДокумента.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ / 100), 2);
				
			КонецЕсли;
			
		КонецЦикла;

	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда

		Для Каждого СтрокаТаблицы Из ТаблицаПоОС Цикл
			
			НоваяСтрока = ТЗДанныеОС.Добавить();
			
			НоваяСтрока.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
			НоваяСтрока.Сумма            = СтруктураШапкиДокумента.СтоимостьБУ;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
				НоваяСтрока.СуммаНУ                  = СтруктураШапкиДокумента.СтоимостьНУ;
				НоваяСтрока.СуммаПР                  = СтруктураШапкиДокумента.СтоимостьПР;
				НоваяСтрока.СуммаВР                  = СтруктураШапкиДокумента.СтоимостьВР;
				НоваяСтрока.СуммаКапитальныхВложений = Окр(НоваяСтрока.СуммаНУ * (СтруктураШапкиДокумента.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ / 100), 2);
				
			КонецЕсли;
			
		КонецЦикла;

	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации Тогда

		Для Каждого СтрокаТаблицы Из ТаблицаПоОС Цикл
			
			НоваяСтрока = ТЗДанныеОС.Добавить();
			
			НоваяСтрока.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
			НоваяСтрока.Сумма            = СтруктураШапкиДокумента.СтоимостьБУ;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
				НоваяСтрока.СуммаНУ                  = СтруктураШапкиДокумента.СтоимостьНУ;
				НоваяСтрока.СуммаКапитальныхВложений = Окр(НоваяСтрока.СуммаНУ * (СтруктураШапкиДокумента.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ / 100), 2);
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

	Проводки = Движения.Хозрасчетный;
	
	АмортизируетсяПоГрафику                      = ЗначениеЗаполнено(СтруктураШапкиДокумента.ГрафикАмортизацииПоГодуБУ);
	УказаныСпособыОтраженияРасходовПоАмортизации = ЗначениеЗаполнено(СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации);
	
	Для Каждого Строка Из ТЗДанныеОС Цикл

		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
			
			Если Строка.Сумма > 0 
			 ИЛИ Строка.СуммаНУ > 0 
			 ИЛИ Строка.СуммаПР <> 0 
			 ИЛИ Строка.СуммаВР <> 0 Тогда

				Проводка = Проводки.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = "Принят к учету объект ОС";
				Проводка.Сумма        = Строка.Сумма;
				
				Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчета;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", Строка.ОсновноеСредство);

				Проводка.СчетКт          = СтруктураШапкиДокумента.СчетУчетаВнеоборотногоАктива;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);

				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.МестонахождениеОС, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Строка.СуммаНУ,Строка.СуммаНУ,Строка.СуммаПР,Строка.СуммаПР,Строка.СуммаВР,Строка.СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
				КонецЕсли;

			КонецЕсли;
				
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
			
			// Проводка сформирована движениями по партиям.
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации Тогда

			Если Строка.Сумма > 0 Тогда

				Проводка = Проводки.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = "Принят к учету объект ОС";
				Проводка.Сумма        = Строка.Сумма;
				
				Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчета;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", Строка.ОсновноеСредство);

				Проводка.СчетКт          = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СтатьяДоходов);
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.МестонахождениеОС, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Строка.СуммаНУ,Строка.СуммаНУ,,,Строка.СуммаВР,Строка.СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
		// Движения по регистру СостоянияОСОрганизаций
		Движение = Движения.СостоянияОСОрганизаций.Добавить();
		Движение.Период               = СтруктураШапкиДокумента.Дата;
		Движение.ДатаСостояния        = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство     = Строка.ОсновноеСредство;
		Движение.Организация          = СтруктураШапкиДокумента.Организация;
		Движение.Состояние            = Перечисления.СостоянияОС.ПринятоКУчету;

		// Движения по регистру СобытияОСОрганизаций
		Движение = Движения.СобытияОСОрганизаций.Добавить();
		Движение.Период            = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство  = Строка.ОсновноеСредство;
		Движение.Организация       = СтруктураШапкиДокумента.Организация;
		Движение.Событие           = СтруктураШапкиДокумента.ОперацияСОбъектамиОС;
		Движение.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента    = СтруктураШапкиДокумента.Номер;
		
		// Движения по регистру ПервоначальныеСведенияОСБухгалтерскийУчет
		Движение = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Добавить();
		Движение.Период                      = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство            = Строка.ОсновноеСредство;
		Движение.Организация                 = СтруктураШапкиДокумента.Организация;
		Движение.ПервоначальнаяСтоимость     = Строка.Сумма;
		Движение.ПорядокПогашенияСтоимости   = СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ;
		Движение.СпособНачисленияАмортизации = СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ;
		Движение.СпособПоступления           = СтруктураШапкиДокумента.СпособПоступления;
		ТекСтрокаОС = ТаблицаПоОС.Найти(Строка.ОсновноеСредство, "ОсновноеСредство");
		Движение.ИнвентарныйНомер            = ?(ТекСтрокаОС = Неопределено, "", ТекСтрокаОС.ИнвентарныйНомер);
		Движение.ПараметрВыработки           = СтруктураШапкиДокумента.ПараметрВыработкиБУ;
		
		// Движения по регистру МестонахождениеОСБухгалтерскийУчет
		Движение = Движения.МестонахождениеОСБухгалтерскийУчет.Добавить();
		Движение.Период               = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство     = Строка.ОсновноеСредство;
		Движение.Организация          = СтруктураШапкиДокумента.Организация;
		Движение.Местонахождение      = СтруктураШапкиДокумента.МестонахождениеОС;
		Движение.МОЛ                  = СтруктураШапкиДокумента.МОЛБУ;

		// Движения по регистру НачислениеАмортизацииОСБухгалтерскийУчет
		Движение = Движения.НачислениеАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период               = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство     = Строка.ОсновноеСредство;
		Движение.Организация          = СтруктураШапкиДокумента.Организация;
		Движение.НачислятьАмортизацию = СтруктураШапкиДокумента.НачислятьАмортизациюБУ;
		
		// Движения по регистру СчетаБухгалтерскогоУчетаОС
		Движение = Движения.СчетаБухгалтерскогоУчетаОС.Добавить();
		Движение.Период                    = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство          = Строка.ОсновноеСредство;
		Движение.Организация               = СтруктураШапкиДокумента.Организация;
		Движение.СчетУчета                 = СтруктураШапкиДокумента.СчетУчета;
		Движение.СчетНачисленияАмортизации = СтруктураШапкиДокумента.СчетНачисленияАмортизации;


		// Движения по регистру ГрафикиАмортизацииОСБухгалтерскийУчет
		Если АмортизируетсяПоГрафику Тогда

			Движение = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет.Добавить();
			Движение.Период            = СтруктураШапкиДокумента.Дата;
			Движение.ОсновноеСредство  = Строка.ОсновноеСредство;
			Движение.Организация       = СтруктураШапкиДокумента.Организация;
			Движение.ГрафикАмортизации = СтруктураШапкиДокумента.ГрафикАмортизацииПоГодуБУ;
			
		КонецЕсли;

		// Движения по регистру УказаныСпособыОтраженияРасходовПоАмортизации
		Если УказаныСпособыОтраженияРасходовПоАмортизации Тогда
			
			Движение = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.Добавить();
			Движение.Период                                = СтруктураШапкиДокумента.Дата;
			Движение.ОсновноеСредство                      = Строка.ОсновноеСредство;
			Движение.Организация                           = СтруктураШапкиДокумента.Организация;
			Движение.СпособыОтраженияРасходовПоАмортизации = СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации;
			
		КонецЕсли;

		// Движения по регистру ПараметрыАмортизацииОСБухгалтерскийУчет
		Движение = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период                                      = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство                            = Строка.ОсновноеСредство;
		Движение.Организация                                 = СтруктураШапкиДокумента.Организация;
		Движение.КоэффициентАмортизации                      = СтруктураШапкиДокумента.ГодоваяНормаАмортизацииБУ;
		Движение.КоэффициентУскорения                        = СтруктураШапкиДокумента.КоэффициентУскоренияБУ;
		Движение.ОбъемПродукцииРабот                         = СтруктураШапкиДокумента.ПредполагаемыйОбъемПродукцииБУ;
		Движение.СрокПолезногоИспользования                  = СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ;
		Движение.СрокИспользованияДляВычисленияАмортизации   = СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ;
		Движение.СтоимостьДляВычисленияАмортизации           = Строка.Сумма;
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтруктураШапкиДокумента.ПредполагаемыйОбъемПродукцииБУ;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			// Включение стоимости ОС в состав материальных расходов при принятии к учету 
			Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда		
				
				ТаблицаДляСписания = ТЗДанныеОС.Скопировать();
				
				ТаблицаДляСписания.Колонки.ОсновноеСредство.Имя = "ОбъектУчета";
				ТаблицаДляСписания.Колонки.Добавить("НаправлениеАмортизации");
				ТаблицаДляСписания.ЗаполнитьЗначения(СтруктураШапкиДокумента.СпособОтраженияРасходовПриВключенииВСтоимость, "НаправлениеАмортизации");
				ТаблицаДляСписания.Колонки.Добавить("СчетНачисленияАмортизации");
				ТаблицаДляСписания.ЗаполнитьЗначения(СчетУчета, "СчетНачисленияАмортизации");
				ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизации", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииПР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииВР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаДляСписания.Колонки.СуммаНУ.Имя = "СуммаАмортизацииНУ";
				ТаблицаДляСписания.Колонки.Добавить("ИмяСубконто", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(16));
				ТаблицаДляСписания.ЗаполнитьЗначения("ОсновныеСредства", "ИмяСубконто");
				ТаблицаДЛяСписания.Колонки.Добавить("ПодразделениеОрганизации");
				ТаблицаДляСписания.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
				
				// Определение ПР и ВР.
				Для каждого СтрокаОС Из ТаблицаДляСписания Цикл
					
					Если СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
						СтрокаОС.СуммаАмортизацииВР = СтрокаОС.СуммаАмортизацииВР - СтрокаОС.СуммаАмортизацииНУ;
					Иначе
						СтрокаОС.СуммаАмортизацииПР = СтрокаОС.СуммаАмортизацииПР - СтрокаОС.СуммаАмортизацииНУ;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе // объект включается в состав амортизируемого имущества.
				
				// Движение по регистру ПервоначальныеСведенияОСНалоговыйУчет учет
				Движение = Движения.ПервоначальныеСведенияОСНалоговыйУчет.Добавить();
				Движение.Период                                   = СтруктураШапкиДокумента.Дата;
				Движение.ОсновноеСредство                         = Строка.ОсновноеСредство;
				Движение.Организация                              = СтруктураШапкиДокумента.Организация;
				Движение.ПорядокВключенияСтоимостиВСоставРасходов = СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ;
				Движение.ПервоначальнаяСтоимостьНУ                = Строка.Сумма;
				
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
			
				// Проводка по счету КВ "Амортизационная премия (п. 1.1 ст. 259 НК РФ)"
				Если ЗначениеЗаполнено(Строка.СуммаКапитальныхВложений) Тогда
				
					Проводка = Проводки.Добавить();

					Проводка.Период       = СтруктураШапкиДокумента.Дата;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание   = "Амортизационная премия";
					Проводка.СуммаНУДт = Строка.СуммаКапитальныхВложений;

					Проводка.СчетДт          = ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства",               Строка.ОсновноеСредство);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыАмортизационнойПремии", Ссылка);
					
					БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");
					
				КонецЕсли;
				
				// Движения по регистру НачислениеАмортизацииОСНалоговыйУчет
				Движение = Движения.НачислениеАмортизацииОСНалоговыйУчет.Добавить();
				Движение.Период               = СтруктураШапкиДокумента.Дата;
				Движение.ОсновноеСредство     = Строка.ОсновноеСредство;
				Движение.Организация          = СтруктураШапкиДокумента.Организация;
				Движение.НачислятьАмортизацию = СтруктураШапкиДокумента.НачислятьАмортизациюНУ;
				
				// Движения по регистру НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет
				Движение = Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.Добавить();
				Движение.Период                 = СтруктураШапкиДокумента.Дата;
				Движение.ОсновноеСредство       = Строка.ОсновноеСредство;
				Движение.Организация            = СтруктураШапкиДокумента.Организация;
				Движение.СпециальныйКоэффициент = СтруктураШапкиДокумента.СпециальныйКоэффициентНУ;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТаблицаДляСписания, СтруктураШапкиДокумента,, "Включение стоимости в состав расходов (НУ)");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда 
			
			ТабЗатратПР = ТабЗатрат.Скопировать(, "ОбъектУчета, Субконто1, Субконто2, Субконто3, СуммаНУ, СуммаПР, СуммаВР");

			Если СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
			
				Для каждого Строка Из ТабЗатратПР Цикл
					Если (ТипЗнч(Строка.Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") 
						И НЕ Строка.Субконто1.ЭтоГруппа
						И Строка.Субконто1.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.Амортизация)
						ИЛИ (ТипЗнч(Строка.Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") 
						И НЕ Строка.Субконто2.ЭтоГруппа
						И Строка.Субконто2.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.Амортизация)
						ИЛИ (ТипЗнч(Строка.Субконто3) = Тип("СправочникСсылка.СтатьиЗатрат") 
						И НЕ Строка.Субконто3.ЭтоГруппа
						И Строка.Субконто3.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.Амортизация) Тогда
						Продолжить;
					Иначе
						Строка.СуммаПР = Строка.СуммаПР - Строка.СуммаНУ;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			ТабЗатратПР.Свернуть("ОбъектУчета", "СуммаПР");
			
		КонецЕсли;
		
		Для каждого Строка Из ТЗДанныеОС Цикл
			
			// Движения по регистру ПараметрыАмортизацииОСНалоговыйУчет
			// Делаются всегда - для фиксации ПР для вычисления амортизации.
			Движение = Движения.ПараметрыАмортизацииОСНалоговыйУчет.Добавить();
			Движение.Период                     = СтруктураШапкиДокумента.Дата;
			Движение.ОсновноеСредство           = Строка.ОсновноеСредство;
			Движение.Организация                = СтруктураШапкиДокумента.Организация;
			Движение.СрокПолезногоИспользования = СтруктураШапкиДокумента.СрокПолезногоИспользованияНУ;
			Движение.ПРДляВычисленияАмортизации = Строка.СуммаПР;
			
			Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
				
				СтрокаТабЗатратПР = ТабЗатратПР.Найти(Движение.ОсновноеСредство, "ОбъектУчета");
				Если СтрокаТабЗатратПР <> Неопределено Тогда
					Движение.ПРДляВычисленияАмортизации = Движение.ПРДляВычисленияАмортизации - СтрокаТабЗатратПР.СуммаПР;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийОС(Ссылка, СтруктураШапкиДокумента.Организация, Движения.СостоянияОСОрганизаций, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда 

		ОтражатьВРегистрахУСН  = Истина;
		ПервоначальныеСведения = Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН;
		Для Каждого Строка Из ТаблицаПоОС Цикл

			Если ОтражатьВРегистрахУСН Тогда

				// Движения по регистру ПервоначальныеСведенияОСНалоговыйУчетУСН
				Движение = ПервоначальныеСведения.Добавить();

				Движение.Период                     = СтруктураШапкиДокумента.Дата;
				Движение.ОсновноеСредство           = Строка.ОсновноеСредство;
				Движение.Организация                = СтруктураШапкиДокумента.Организация;
				Движение.ПервоначальнаяСтоимостьУСН = СтруктураШапкиДокумента.СтоимостьУСН;
				Движение.СрокПолезногоИспользования = СтруктураШапкиДокумента.СрокПолезногоИспользованияУСН;
				Движение.ДатаПриобретения           = СтруктураШапкиДокумента.ДатаПриобретения;
				Движение.ПорядокВключенияСтоимостиВСоставРасходовУСН = СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовУСН;

			КонецЕсли;
			
		КонецЦикла;
		
		РегОплаты = Движения.ОплатыОСДляУСН;

		Для Каждого Запись Из ТаблицаОплат Цикл

			СтрокаОплаты  = РегОплаты.Добавить();

			СтрокаОплаты.Период           = Запись.ДатаОплаты;
			СтрокаОплаты.Организация      = СтруктураШапкиДокумента.Организация;
			СтрокаОплаты.ОсновноеСредство = Запись.ОсновноеСредство;
			СтрокаОплаты.ДатаОплаты       = Запись.ДатаОплаты;
			СтрокаОплаты.СуммаОплаты      = Запись.СуммаОплаты;

		КонецЦикла;

	КонецЕсли;
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация);
		
		НачислениеАмортизации  = Движения.НачислениеАмортизацииОСНалоговыйУчет;
		ПараметрыАмортизации   = Движения.ПараметрыАмортизацииОСНалоговыйУчет;
		СпецКоэффициент        = Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет;
		ПервоначальныеСведения = Движения.ПервоначальныеСведенияОСНалоговыйУчет;
		
		Если ТаблицаПоОС.Колонки.Найти("СчетУчета") = Неопределено Тогда
			ТаблицаПоОС.Колонки.Добавить("СчетУчета");
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаПоОС Цикл

			// Движение по регистру ПервоначальныеСведенияОСНалоговый учет
			Движение = ПервоначальныеСведения.Добавить();
			Движение.Период                                   = СтруктураШапкиДокумента.Дата;
			Движение.ОсновноеСредство                         = Строка.ОсновноеСредство;
			Движение.Организация                              = СтруктураШапкиДокумента.Организация;
			Движение.ПорядокВключенияСтоимостиВСоставРасходов = СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ;
			
			Если УказатьПервоначальнуюСтоимость Тогда
				Движение.ПервоначальнаяСтоимостьНУ             = СтруктураШапкиДокумента.ПервоначальнаяСтоимостьНУ;
			Иначе
				
				мПервоначальнаяСтоимостьНУ = 0;
				
				Если Строка.СписанныеПартии <> Неопределено Тогда
					Для Каждого Партия Из Строка.СписанныеПартии Цикл
						мПервоначальнаяСтоимостьНУ = мПервоначальнаяСтоимостьНУ + Партия.СуммаСписания;
					КонецЦикла;
				КонецЕсли;
				
				Движение.ПервоначальнаяСтоимостьНУ             = мПервоначальнаяСтоимостьНУ;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
				Движение.МетодНачисленияАмортизации           = СтруктураШапкиДокумента.СпособНачисленияАмортизацииНУ;
			Иначе
				Движение.МетодНачисленияАмортизации           = Справочники.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка();
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
			
				// Движения по регистру НачислениеАмортизацииОСНалоговыйУчет
				Движение = НачислениеАмортизации.Добавить();
				Движение.Период               = СтруктураШапкиДокумента.Дата;
				Движение.ОсновноеСредство     = Строка.ОсновноеСредство;
				Движение.Организация          = СтруктураШапкиДокумента.Организация;
				Движение.НачислятьАмортизацию = СтруктураШапкиДокумента.НачислятьАмортизациюНУ;
				
				// Движения по регистру ПараметрыАмортизацииОСНалоговыйУчет
				Движение = ПараметрыАмортизации.Добавить();
				Движение.Период                     = СтруктураШапкиДокумента.Дата;
				Движение.ОсновноеСредство           = Строка.ОсновноеСредство;
				Движение.Организация                = СтруктураШапкиДокумента.Организация;
				Движение.СрокПолезногоИспользования = СтруктураШапкиДокумента.СрокПолезногоИспользованияНУ;
				Движение.КоэффициентАмортизации 	= СтруктураШапкиДокумента.КоэффициентАмортизацииНУ;
				
			КонецЕсли;

			Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ <> Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
				// Движения по регистру НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет
				Движение = СпецКоэффициент.Добавить();
				Движение.Период                 = СтруктураШапкиДокумента.Дата;
				Движение.ОсновноеСредство       = Строка.ОсновноеСредство;
				Движение.Организация            = СтруктураШапкиДокумента.Организация;
				Движение.СпециальныйКоэффициент = СтруктураШапкиДокумента.СпециальныйКоэффициентНУ;
			КонецЕсли;
			
			Если УказатьПервоначальнуюСтоимость Тогда
				Движение = Движения.ИПМПЗ.ДобавитьПриход();
				Движение.Активность                	= Истина;
				Движение.Период						= СтруктураШапкиДокумента.Дата;
				Движение.Регистратор				= Ссылка;
				Движение.ХарактерДеятельности		= ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(,,,, УчетнаяПолитика);
				Движение.НоменклатурнаяГруппа		= ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации(,,, Перечисления.ВидыМПЗ.ОС, УчетнаяПолитика);
				Движение.Номенклатура				= Строка.ОсновноеСредство;
				Движение.Организация				= СтруктураШапкиДокумента.Организация;
				Движение.ВидМПЗ						= Перечисления.ВидыМПЗ.ОС;
				Движение.Партия						= Ссылка;
				Движение.ДокументОплаты				= Ссылка;
				Движение.РеквизитыДокументаОплаты	= СтруктураШапкиДокумента.РеквизитыДокументаОплаты;
				Движение.Сумма						= СтруктураШапкиДокумента.ПервоначальнаяСтоимостьНУ;
			КонецЕсли;			
		КонецЦикла;
		
		ТаблицаПоОСИП = ТаблицаПоОС.Скопировать();
		
		Если УказатьПервоначальнуюСтоимость Тогда
			
			Если ТаблицаПоОСИП.Колонки.Найти("СписанныеПартии") <> Неопределено Тогда
				ТаблицаПоОСИП.Колонки.Удалить("СписанныеПартии");
			КонецЕсли;
			
			СтоимостьПродукции = ДоходыИРасходыПредпринимателя.СписаниеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитика, 3, ТаблицаПоОСИП,, "СчетУчета",,,, Отказ);
			
		Иначе
			ТаблицаПоОСИП.Колонки.ОсновноеСредство.Имя = "Продукция";
			
			СтоимостьПродукции = ДоходыИРасходыПредпринимателя.СписаниеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитика, 2, ТаблицаПоОСИП,, "СчетУчета", "КорСчетСписания",,, Отказ);
			
			ПолученоПродукции = ТаблицаПоОСИП.Скопировать(,"Продукция,КорСчетСписания,Количество");
			ПолученоПродукции.Свернуть("Продукция,КорСчетСписания", "Количество");
			ПолученоПродукции.ЗаполнитьЗначения(0, "Количество");
			ДоходыИРасходыПредпринимателя.ПоступлениеПродукции(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитика, ПолученоПродукции, "КорСчетСписания",,, "Продукция", СтоимостьПродукции);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
			
			Если СтруктураШапкиДокумента.СтатьяПрочихРасходов.ПринятиеКналоговомуУчету Тогда
				
				ТабОС = ЭтотОбъект.Движения.ИПМПЗ.Выгрузить();
				СчетЗатрат = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
				
				Для Каждого СтрокаОС Из ТабОС Цикл
					Если СтрокаОС.ВидМПЗ = Перечисления.ВидыМПЗ.ОС
						И СтрокаОС.ВидДвижения = ВидДвиженияНакопления.Приход
						И СтрокаОС.Количество = 0 Тогда
						
						СтатьяЗатрат = СтруктураШапкиДокумента.СтатьяПрочихРасходов;
						ХарактерДеятельности = ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, СчетЗатрат, СтатьяЗатрат,, УчетнаяПолитика);
						
						ВидМПЗ = ДоходыИРасходыПредпринимателя.ВидМПЗПоСчетуУчета(СчетЗатрат, СтатьяЗатрат);
						НГ = СтруктураШапкиДокумента.СтатьяПрочихРасходов;
						НоменклатурнаяГруппа = ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации(,,НГ, ВидМПЗ, УчетнаяПолитика);
						
						НоваяСтрока = ЭтотОбъект.Движения.ИППрочиеРасходы.Добавить();
						НоваяСтрока.Активность                	= Истина;
						НоваяСтрока.Период						= СтруктураШапкиДокумента.Дата;
						НоваяСтрока.НоменклатурнаяГруппа		= НоменклатурнаяГруппа;
						НоваяСтрока.ХарактерДеятельности		= ХарактерДеятельности;
						НоваяСтрока.Регистратор					= ЭтотОбъект.Ссылка;
						НоваяСтрока.СтатьяЗатрат				= СтруктураШапкиДокумента.СтатьяПрочихРасходов;
						НоваяСтрока.Организация					= СтруктураШапкиДокумента.Организация;
						НоваяСтрока.РасчетныйДокумент			= СтрокаОС.Партия;
						НоваяСтрока.ДокументОплаты				= СтрокаОС.ДокументОплаты;
						НоваяСтрока.Сумма						= СтрокаОС.Сумма;
						Если УказатьПервоначальнуюСтоимость Тогда
							НоваяСтрока.РеквизитыДокументаОплаты = СтруктураШапкиДокумента.РеквизитыДокументаОплаты;
						Иначе
							НоваяСтрока.РеквизитыДокументаОплаты = СтрокаОС.РеквизитыДокументаОплаты;
						КонецЕсли;
						
					КонецЕсли;				
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
КонецПроцедуры // ФормированиеДвиженийРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" 
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоОС.Количество()=0  Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли; 
	
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		
		/////////////////////////////////////////////////////////////////////////////////
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		ТаблицаНДСПартииСписания = УчетНДС.ПодготовитьТаблицуСписанияПартийДляНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		/////////////////////////////////////////////////////////////////////////////////
  		
		Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
			//Партии не найдены или отражение в партионном учете НДС не производится.
			//Дальнейшая обработка не требуется
		    Возврат;
		КонецЕсли; 
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС по партиям - отразить непосредственное списание.
		//ТаблицаДвиженийПартии.Очистить();
		ТаблицаДвиженийПартии = Движения.НДСПоПриобретеннымЦенностям.ВыгрузитьКолонки();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
		
		Движения.НДСПоПриобретеннымЦенностям.мПериод          = Дата;
		Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
		Движения.НДСПоПриобретеннымЦенностям.ВыполнитьРасход();
		// НДС по партиям - отразить непосредственное списание.
		/////////////////////////////////////////////////////////////////////////////////

		/////////////////////////////////////////////////////////////////////////////////
		// НДС по ОС - при перемещении ТМЦ они могут перестать принадлежать к будущим ОС,
		// в этом случае необходимо снять блокировку с вычета.
		// Если в результате перемещения ТМЦ будет отнесено на счет учета ОС, необходимо включить блокировку.
		ТаблицаДвиженийПартии.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, ТаблицаДвиженийПартии, Движения, Отказ);
		// НДС по ОС
		/////////////////////////////////////////////////////////////////////////////////
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства 
		Тогда

		//Отражения ввода в эксплуатацию объекта строительства
			
		//Вычислим коэффициент распределения
		Запрос = Новый Запрос;
			
		Запрос.УстановитьПараметр("КонецПериода", Новый Граница(Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("Счет"       	, СтруктураШапкиДокумента.СчетУчетаВнеоборотногоАктива);
		Запрос.УстановитьПараметр("Организация"	, СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Объект"		, СтруктураШапкиДокумента.ОбъектСтроительства);
			
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
		
		ЕстьСубконто_СпособыСтроительства = Не (СтруктураШапкиДокумента.СчетУчетаВнеоборотногоАктива.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства,"ВидСубконто") = Неопределено);
		
		Если ЕстьСубконто_СпособыСтроительства Тогда
			ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства);
			Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
			Запрос.УстановитьПараметр("ХозСпособСтроительства",  Перечисления.СпособыСтроительства.Хозспособ);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР
			|			КОГДА Остатки.Субконто2 = &ХозСпособСтроительства
			|				ТОГДА 0
			|			ИНАЧЕ Остатки.СуммаОстаток
			|		КОНЕЦ) КАК СуммаОстаток,
			|	СУММА(ВЫБОР
			|			КОГДА Остатки.Субконто2 = &ХозСпособСтроительства
			|				ТОГДА Остатки.СуммаОстаток
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Хозспособ_Остаток
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|		&КонецПериода,
			|		Счет = &Счет,
			|		&ВидыСубконто,
			|		Организация = &Организация
			|		    И Субконто1 = &Объект) КАК Остатки";
		Иначе
			Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);	
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Остатки.СуммаОстаток КАК СуммаОстаток,
			|	0 КАК Хозспособ_Остаток
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|		&КонецПериода,
			|		Счет = &Счет,
			|		&ВидыСубконто,
			|		Организация = &Организация
			|		    И Субконто1 = &Объект) КАК Остатки";
				
		КонецЕсли; 
			
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			СуммаОстатка = 0;
			СуммаОстатка_Хозспособ = 0;
		иначе
			Результат = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
			СуммаОстатка  = Результат.Итог("СуммаОстаток");
			СуммаОстатка_Хозспособ = Результат.Итог("Хозспособ_Остаток");
		КонецЕсли; 

		Если (СтруктураШапкиДокумента.СтоимостьБУ) > 0 Тогда
			
			Если (СуммаОстатка = 0) тогда
				ОбщегоНазначения.СообщитьОбОшибке("Отсутствует остаток по счету """ + СтруктураШапкиДокумента.СчетУчетаВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Подрядный""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
				КоэффициентРаспределения = 1;
			ИначеЕсли (СуммаОстатка < 0) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Определен отрицательный остаток ("+Формат(СуммаОстатка, "ЧЦ=15; ЧДЦ=2")+") по счету """ + СтруктураШапкиДокумента.СчетУчетаВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Подрядный""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
				КоэффициентРаспределения = 1;
			Иначе
				КоэффициентРаспределения = (СтруктураШапкиДокумента.СтоимостьБУ)*ТаблицаПоОС.Количество()/СуммаОстатка;
			КонецЕсли;
			
			//Разблокируем полностью или частично вычет
			// отразим погашение события ОжидаетсяПринятиеКУчетуОбъектаСтроительства
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС(СтруктураШапкиДокумента,
											СтруктураШапкиДокумента.ОбъектСтроительства,
											Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства,
											Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,СтруктураШапкиДокумента.Дата,
											КоэффициентРаспределения, Движения, Отказ);
		КонецЕсли;
		
		//Добавим необходимые события в рег. НДСпоОСиНМА по каждому ОС в табличной части		
		ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.Выгрузить();
		
		ОсобыеУсловияБлокировкиВычета2006 = (СтруктураШапкиДокумента.Дата >= '20060101');

		ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию,"Состояние");
		Если ОсобыеУсловияБлокировкиВычета2006 тогда
			 ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Истина, "НеВлияетНаВычет");
		КонецЕсли;
		 
		// По объектам строительства НДС можно принять к вычету только на следующий месяц после ввода в эксплуатацию
		// (в момент, когда можно начислять амортизацию по объекту). Необходимо заблокировать вычет до этого момента.
		// Дальше объект строительства фигурировать не будет, 
		// необходимо распределить НДС по конкретным ОС для дальнейшей обработки .
		ТаблицаДвижений_НДСпоОСиНМА_Базовая = ТаблицаДвижений_НДСпоОСиНМА.Скопировать();
		ТаблицаДвижений_НДСпоОСиНМА.Очистить();
		Для каждого СтрокаОС Из ТаблицаПоОС Цикл
			ТаблицаДвижений_НДСпоОСиНМА_Базовая.ЗаполнитьЗначения(СтрокаОС.ОсновноеСредство,"Объект");
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений_НДСпоОСиНМА_Базовая, ТаблицаДвижений_НДСпоОСиНМА);
		КонецЦикла; 
			
		Распределение = Новый Структура("СуммаБезНДС,НДС");
		Отбор         = Новый Структура("СчетФактура,ВидЦенности,СтавкаНДС,СчетУчетаНДС,НДСВключенВСтоимость");
			
		ТаблицаДвижений_НДСпоОСиНМА = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаДвижений_НДСпоОСиНМА_Базовая, ТаблицаДвижений_НДСпоОСиНМА,Распределение,Отбор); 
			
		// Заблокируем вычет в текущем месяце
		Движения.НДСпоОСиНМА.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
		Движения.НДСпоОСиНМА.ВыполнитьПриход();
		
		//на след. месяц разблокируем вычет по ОС введенн. в экспл.
		ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(НачалоМесяца(ДобавитьМесяц((СтруктураШапкиДокумента.Дата),1)),"Период");
		Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
		Движения.НДСпоОСиНМА.ВыполнитьРасход();
	
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		Если Основание.ЭтоГруппа Тогда
			Сообщить("Нельзя принять к учету группу основных средств", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли; 

		СтрокаТабличнойЧасти = ОсновныеСредства.Добавить();

		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;
		СтрокаТабличнойЧасти.ИнвентарныйНомер = Основание.Код;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияОС") Тогда
		
		Организация = Основание.Организация;
		ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации;
		СтоимостьБУ = 0;
		
		Для Каждого ТекСтрокаОС Из Основание.ОС Цикл
			
			Если НЕ ТекСтрокаОС.НаличиеПоДаннымУчета И ТекСтрокаОС.НаличиеФактическое Тогда
				
				НоваяСтрока = ОсновныеСредства.Добавить();
				НоваяСтрока.ОсновноеСредство = ТекСтрокаОС.ОсновноеСредство;
				НоваяСтрока.ИнвентарныйНомер = ТекСтрокаОС.ОсновноеСредство.Код;
				
				СтоимостьБУ = СтоимостьБУ + ТекСтрокаОС.СтоимостьФактическая;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ)

 	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС, ВариантУчетаРасходовПоАмортизационнойПремии, УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета(СтруктураШапкиДокумента);
	
	ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки",      "НомерСтроки");
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	СтруктураПолей.Вставить("ИнвентарныйНомер", "ИнвентарныйНомер");

	РезультатЗапросаПоОС = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОсновныеСредства", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	ПроверкаРеквизитовТЧ(ТаблицаПоОС, СтруктураШапкиДокумента,Отказ, Заголовок);
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);

	// Проверим, нет ли одинаковых инвентарных номеров основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиИнвентарныхНомеровОС(ТаблицаПоОС, Отказ, Заголовок);
	
	// Проверим, нет числятся ли перечисленные в таблице по ОС объекты в других организациях.
	ПроверитьПринятиеКУчетуВДругихОрганизациях(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Строки".
		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("ОсновноеСредство" ,"ОсновноеСредство");
		СтруктураПолей.Вставить("ДатаОплаты"	   ,"ДатаОплаты");
		СтруктураПолей.Вставить("СуммаОплаты"  	   ,"СуммаОплаты");
		
		РезультатЗапросаПоСтрокам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураПолей);
		ТаблицаОплат = РезультатЗапросаПоСтрокам.Выгрузить();
		
		ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаОплат, СтруктураШапкиДокумента, Отказ, Заголовок);
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда

		// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ФормированиеДвижений(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплат, Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры


// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Оплата.Количество() > 0 Тогда
		КоличествоСтрок = Оплата.Количество();
		Для Счетчик = 1 По (КоличествоСтрок) Цикл
			Строка = Оплата[КоличествоСтрок - Счетчик];
			Если ОсновныеСредства.Найти(Строка.ОсновноеСредство, "ОсновноеСредство") = Неопределено Тогда
				Оплата.Удалить(КоличествоСтрок - Счетчик);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураВыданный", Ложь);

КонецПроцедуры

