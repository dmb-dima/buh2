
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

//Процедура вывода сведений на печать
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, ОчищатьСообщения = Истина) Экспорт
	
	Если ИмяМакета = "ФормаСЗВ_4_1" Или ИмяМакета = "ФормаСЗВ_4_2" Тогда
		
		ЕстьОшибки = Ложь;
		ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ЭтотОбъект,ЕстьОшибки);
		Если ЕстьОшибки тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ4_ФорматЗаписей";
		ДокументФорматЗаписей = ПолучитьМакет("ФорматЗаписей");
		
		ДокументСписокЗастрахованныхЛиц = Новый ТабличныйДокумент;
		ДокументСписокЗастрахованныхЛиц.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ4_Список";
		
		Макет = ПолучитьМакет("СписокЗастрахованныхЛиц");
		ОбластьШапкаСписка = Макет.ПолучитьОбласть("Шапка");
		ОбластьСтрокаСписка = Макет.ПолучитьОбласть("СтрокаРаботника");
		ОбластьПодвалСписка = Макет.ПолучитьОбласть("Подвал");
		ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
		// массив с двумя строками - для разбиения на страницы
	    ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьСтрокаСписка);
		
		// Получим сведения об ответственных лицах
		ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, Дата, Ответственный.ФизЛицо);
		
		// Список застрахованных лиц
		ЗаполнитьЗначенияСвойств(ОбластьПодвалСписка.Параметры,ОтветственныеЛица,"РуководительДолжность,Руководитель");
		
		Если ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
			
			// формируем отчет по версии файла 04.00
			
			//Обработка заголовка файла
			ИнформацияОПачке = Новый Структура;
			Если ПроцедурыПерсонифицированногоУчета.РазобратьЗаголовокФайла(ТекстФайла,ИнформацияОПачке)=0 тогда
				Возврат Неопределено;
			КонецЕсли;	
			ИнформацияОПачке.Вставить("ИнформацияОРаботодателе", Организация);
			
			// Список застрахованных лиц
			ЗаполнитьЗначенияСвойств(ОбластьШапкаСписка.Параметры,ИнформацияОПачке,"РасчетныйПериод,НомерПачкиРаботодателя");
			ЗаполнитьЗначенияСвойств(ОбластьШапкаСписка.Параметры,ИнформацияОПачке.ИнформацияОРаботодателе,"РегистрационныйНомерПФР,НаименованиеСокращенное");
			ОбластьПодвалСписка.Параметры.ДатаСоставленияОписи = ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
			ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьШапкаСписка);
		
			Если ТипФормДокументов = "СЗВ-4-1" Тогда
				
				// ПЕЧАТЬ ПАЧКИ ДОКУМЕНТОВ СЗВ-4-1
				
				Макет = ПолучитьМакет("ФормаСЗВ_4_1");
				ФорматЗаписиИН41 = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ИН41", ДокументФорматЗаписей);
				ФорматЗаписиСТАЖ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("СТАЖ", ДокументФорматЗаписей);
				ФорматЗаписиЛГОТ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ЛГОТ", ДокументФорматЗаписей);
				
				// Рабочие области макета
				ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
				ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
				ОбластьСтаж 	= Макет.ПолучитьОбласть("Стаж");
				ОбластьСтраховыеПоВсемПодразделениям  = Макет.ПолучитьОбласть("СтраховыеПоВсемПодразделениям");
				
				// Заполнение данных шапки и подвала
				ОбластьШапка.Параметры.РегНомерПФР = ИнформацияОПачке.ИнформацияОРаботодателе.РегистрационныйНомерПФР;
				ОбластьШапка.Параметры.НаименованиеОрганизации = ИнформацияОПачке.ИнформацияОРаботодателе.Наименование;
				ОбластьШапка.Параметры.Год = ИнформацияОПачке.РасчетныйПериод;
				
				ОбластьПодвал.Параметры.ДолжностьРуководителя		 	= ОтветственныеЛица.РуководительДолжность;
				ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
				ОбластьПодвал.Параметры.Дата				 			= ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
				
				
				Н=5;//Номер строки первой записи ИН41
				
				//Цикл по документам файла
				Для НомерДокумента = 1 по ИнформацияОПачке.ДокументовВПачке цикл
					
					//Читаем запись ИН41
					СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
					Н= Н + 1;
					ЗаписьИН41 = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиИН41);
					СтрОшибка = "";
					Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ИН41", ФорматЗаписиИН41, ЗаписьИН41, СтрОшибка) тогда
						Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
						Возврат Неопределено;
					КонецЕсли;	
					
					//Каждый новый работник с новой страницы (отдельная форма СЗВ-4-1)
					Если НомерДокумента<>1 тогда
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					// Данные по физлицу
					ОбластьШапка.Параметры.СтраховойНомерПФР 			= ЗаписьИН41.СтраховойНомер;
					ОбластьШапка.Параметры.ФИО			 				= ЗаписьИН41.Фамилия + " " + ЗаписьИН41.Имя + " " + ЗаписьИН41.Отчество;
					ОбластьШапка.Параметры.Адрес			 			= ВРег(РегламентированнаяОтчетность.ПредставлениеАдреса(НРег(ЗаписьИН41.АдресДляИнформирования), 0, ""));
					ОбластьШапка.Параметры.НачисленоСтраховаяЧасть 		= ЗаписьИН41.НачисленоСтраховаяЧасть;
					ОбластьШапка.Параметры.НачисленоНакопительнаяЧасть 	= ЗаписьИН41.НачисленоНакопительнаяЧасть;
					ОбластьШапка.Параметры.НачисленоДополнительныйТариф = ЗаписьИН41.НачисленоДополнительныйТариф;
					ОбластьШапка.Параметры.ДнейБолел 					= ПроцедурыПерсонифицированногоУчета.ПредставлениеПериодаБолезниОтпуска(ЗаписьИН41.ВременнаяНетрудоспособностьМесяцев,ЗаписьИН41.ВременнаяНетрудоспособностьДней);
					ОбластьШапка.Параметры.ДнейГулял 					= ПроцедурыПерсонифицированногоУчета.ПредставлениеПериодаБолезниОтпуска(ЗаписьИН41.ОтпускМесяцев, ЗаписьИН41.ОтпускДней);
					ДокументРезультат.Вывести(ОбластьШапка);
					
					//Цикл по основным записям о стаже
					Для НомерОснованойЗаписи = 1 по  ЗаписьИН41.ЧислоОсновныхЗаписейОСтаже цикл
						
						//Читаем запись СТАЖ
						СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
						Н= Н + 1;
						ЗаписьСТАЖ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиСТАЖ);
						СтрОшибка = "";
						Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "СТАЖ", ФорматЗаписиСТАЖ, ЗаписьСТАЖ, СтрОшибка) тогда
							Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
							Возврат Неопределено;
						КонецЕсли;	
						
						ОбластьСтаж.Параметры.НомерПериода				= НомерОснованойЗаписи;
						ОбластьСтаж.Параметры.ДатаНачалаПериода 		= ЗаписьСТАЖ.ДатаНачалаПериода;
						ОбластьСтаж.Параметры.ДатаОкончанияПериода 		= ЗаписьСТАЖ.ДатаОкончанияПериода;
						ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ЗаписьСТАЖ.ТерриториальныеУсловияКод;
						ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод 	= ЗаписьСТАЖ.ОсобыеУсловияТрудаКод;
						ОбластьСтаж.Параметры.КодПозицииСписка 			= ЗаписьСТАЖ.КодПозицииСписка;
						
						// Представление параметров ИТС
						ОбластьСтаж.Параметры.ОснованиеИТС				= ЗаписьСТАЖ.ОснованиеИсчисляемогоСтажаКод;
						ОбластьСтаж.Параметры.ДопИТС 					= ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьСТАЖ);
						
						// Представление параметров выслуги лет
						ОбластьСтаж.Параметры.ОснованиеВыслуги			= ЗаписьСТАЖ.ОснованиеВыслугиЛетКод;
						ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьСТАЖ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
						
						ДокументРезультат.Вывести(ОбластьСтаж);
						
						//Цикл по дополнительным записям о стаже
						Для НомерДополнительнойЗаписи = 1 по  ЗаписьСТАЖ.ЧислоДополнительныхЗаписей цикл
							
							//Читаем запись ЛГОТ
							СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
							Н= Н + 1;
							ЗаписьЛГОТ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиЛГОТ);
							СтрОшибка = "";
							Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ЛГОТ", ФорматЗаписиЛГОТ, ЗаписьЛГОТ, СтрОшибка) тогда
								Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
								Возврат Неопределено;
							КонецЕсли;	
							
							// Выводим запись ЛГОТ
							ОбластьСтаж.Параметры.НомерПериода 				= "";
							ОбластьСтаж.Параметры.ДатаНачалаПериода 		= "";
							ОбластьСтаж.Параметры.ДатаОкончанияПериода 		= "";
							ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ЗаписьЛГОТ.ТерриториальныеУсловияКод;
							ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод 	= ЗаписьЛГОТ.ОсобыеУсловияТрудаКод;
							ОбластьСтаж.Параметры.КодПозицииСписка 			= ЗаписьЛГОТ.КодПозицииСписка;
							
							// Представление параметров ИТС
							ОбластьСтаж.Параметры.ОснованиеИТС				= ЗаписьЛГОТ.ОснованиеИсчисляемогоСтажаКод;
							ОбластьСтаж.Параметры.ДопИТС 					= ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьЛГОТ);
							
							// Представление параметров выслуги лет
							ОбластьСтаж.Параметры.ОснованиеВыслуги			= ЗаписьЛГОТ.ОснованиеВыслугиЛетКод;
							ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьЛГОТ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
							
							ДокументРезультат.Вывести(ОбластьСтаж);
							
						КонецЦикла;//Цикл по дополнительным записям о стаже	
						
					КонецЦикла;// По основным записям о стаже	
					
					Если ФорматФайла=Перечисления.ФорматФайлаПФР.Версия07 Тогда
						// Страховые взносы включая обособленные подразделения
						
						ДокументРезультат.Вывести(ОбластьСтраховыеПоВсемПодразделениям);
					КонецЕсли;
					// Подвал формы
					ДокументРезультат.Вывести(ОбластьПодвал);
					
					// Список застрахованных лиц
				    ЗаполнитьЗначенияСвойств(ОбластьСтрокаСписка.Параметры,ОбластьШапка.Параметры,"СтраховойНомерПФР,ФИО");
					ОбластьСтрокаСписка.Параметры.НомерСтроки = НомерДокумента;
					
					// Проверим, уместится ли строка на странице или надо открывать новую страницу
					ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументСписокЗастрахованныхЛиц, ВыводимыеОбласти);
					Если Не ВывестиПодвалЛиста и НомерДокумента = ИнформацияОПачке.ДокументовВПачке Тогда
						ВыводимыеОбласти.Добавить(ОбластьПодвалСписка);
						ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументСписокЗастрахованныхЛиц, ВыводимыеОбласти);
					КонецЕсли;
					Если ВывестиПодвалЛиста Тогда
						ДокументСписокЗастрахованныхЛиц.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументСписокЗастрахованныхЛиц.Вывести(ПовторятьПриПечатиСтроки);
					КонецЕсли;
						
					ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьСтрокаСписка);
				
				КонецЦикла;// По документам	
				
				УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат, КоличествоЭкземпляров, НаПринтер, "Индивидуальные сведения (СЗВ-4-1); пачка №" + ИнформацияОПачке.НомерПачкиРаботодателя);
				
			Иначе	
				
				Вывести42как41 = ИмяМакета = "ФормаСЗВ_4_1";
				
				// ПЕЧАТЬ ПАЧКИ ДОКУМЕНТОВ СЗВ-4-2
				Если Вывести42как41 тогда
					Макет = ПолучитьМакет("ФормаСЗВ_4_1");
					ФорматЗаписиИН41 = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ИН42", ДокументФорматЗаписей);
					//ФорматЗаписиСТАЖ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("СТАЖ", ДокументФорматЗаписей);
					//ФорматЗаписиЛГОТ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ЛГОТ", ДокументФорматЗаписей);
					
					// Рабочие области макета
					ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
					ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
					ОбластьСтаж 	= Макет.ПолучитьОбласть("Стаж");
					
					// Заполнение данных шапки и подвала
					ОбластьШапка.Параметры.РегНомерПФР = ИнформацияОПачке.ИнформацияОРаботодателе.РегистрационныйНомерПФР;
					ОбластьШапка.Параметры.НаименованиеОрганизации = ИнформацияОПачке.ИнформацияОРаботодателе.Наименование;
					ОбластьШапка.Параметры.Год = ИнформацияОПачке.РасчетныйПериод;
					
					ОбластьПодвал.Параметры.ДолжностьРуководителя		 	= ОтветственныеЛица.РуководительДолжность;
					ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
					ОбластьПодвал.Параметры.Дата				 			= ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
				
					НомерДокумента = 0;
				Иначе	
					ДокументовСЗВ4_2вПачке = 1;
					Макет = ПолучитьМакет("ФормаСЗВ_4_2");
					ФорматЗаписиИН42 = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ИН42", ДокументФорматЗаписей);
					
					// Рабочие области макета
					ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
					ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
					ОбластьДокумент = Макет.ПолучитьОбласть("Документ");
					ОбластьПустойДокумент = Макет.ПолучитьОбласть("ПустойДокумент");
					
					// Заполнение данных шапки и подвала форм
					ОбластьШапка.Параметры.РегНомерПФР = ИнформацияОПачке.ИнформацияОРаботодателе.РегистрационныйНомерПФР;
					ОбластьШапка.Параметры.НаименованиеОрганизации = ИнформацияОПачке.ИнформацияОРаботодателе.Наименование;
					ОбластьШапка.Параметры.Год = ИнформацияОПачке.РасчетныйПериод;
					
					ОбластьПодвал.Параметры.ДолжностьРуководителя		 	= ОтветственныеЛица.РуководительДолжность;
					ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
					ОбластьПодвал.Параметры.Дата				 			= ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
					
					// Вывод данных
					ДокументРезультат.Вывести(ОбластьШапка);
				КонецЕсли;
				
				ВсегоСтрокДокумента = СтрЧислоСтрок(ТекстФайла);
				Для Н=5 по ВсегоСтрокДокумента Цикл
					Если Вывести42как41 тогда
						
						//Читаем запись ИН41
						СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
						ЗаписьИН41 = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиИН41);
						СтрОшибка = "";
						Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ИН42", ФорматЗаписиИН41, ЗаписьИН41, СтрОшибка) тогда
							Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
							Возврат Неопределено;
						КонецЕсли;	
						
						//Каждый новый работник с новой страницы (отдельная форма СЗВ-4-1)
						Если НомерДокумента<>1 тогда
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
						
						// Данные по физлицу
						ОбластьШапка.Параметры.СтраховойНомерПФР 			= ЗаписьИН41.СтраховойНомер;
						ОбластьШапка.Параметры.ФИО			 				= ЗаписьИН41.Фамилия + " " + ЗаписьИН41.Имя + " " + ЗаписьИН41.Отчество;
						ОбластьШапка.Параметры.Адрес			 			= ВРег(РегламентированнаяОтчетность.ПредставлениеАдреса(НРег(ЗаписьИН41.АдресДляИнформирования), 0, ""));
						ОбластьШапка.Параметры.НачисленоСтраховаяЧасть 		= ЗаписьИН41.НачисленоСтраховаяЧасть;
						ОбластьШапка.Параметры.НачисленоНакопительнаяЧасть 	= ЗаписьИН41.НачисленоНакопительнаяЧасть;
						ОбластьШапка.Параметры.НачисленоДополнительныйТариф = ЗаписьИН41.НачисленоДополнительныйТариф;
						ОбластьШапка.Параметры.ДнейБолел 					= ПроцедурыПерсонифицированногоУчета.ПредставлениеПериодаБолезниОтпуска(ЗаписьИН41.ВременнаяНетрудоспособностьМесяцев,ЗаписьИН41.ВременнаяНетрудоспособностьДней);
						ОбластьШапка.Параметры.ДнейГулял 					= ПроцедурыПерсонифицированногоУчета.ПредставлениеПериодаБолезниОтпуска(ЗаписьИН41.ОтпускМесяцев, ЗаписьИН41.ОтпускДней);
						ДокументРезультат.Вывести(ОбластьШапка);
						
						//Н= Н + 1;
						ОбластьСтаж.Параметры.НомерПериода				= 1;
						ОбластьСтаж.Параметры.ДатаНачалаПериода 		= ЗаписьИН41.ПериодРаботыДатаС;
						ОбластьСтаж.Параметры.ДатаОкончанияПериода 		= ЗаписьИН41.ПериодРаботыДатаПо;
						ОбластьСтаж.Параметры.ТерриториальныеУсловияКод	= ИнформацияОПачке.ТерриториальныеУсловия;
						ДокументРезультат.Вывести(ОбластьСтаж);
						
					    ЗаполнитьЗначенияСвойств(ОбластьСтрокаСписка.Параметры,ОбластьШапка.Параметры,"СтраховойНомерПФР,ФИО");
						НомерДокумента = НомерДокумента + 1; 
					
					Иначе
						
						//Прочитаем запись из файла
						СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
						ЗаписьИН42 = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиИН42);
						СтрОшибка = "";
						Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла,"ИН42",ФорматЗаписиИН42, ЗаписьИН42, СтрОшибка) тогда
							Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
							Возврат Неопределено;
						КонецЕсли;	
						
						ОбластьДокумент.Параметры.НомерДокументаВПачке 			= ЗаписьИН42.НомерДокументаВПачке;
						НомерДокумента = ЗаписьИН42.НомерДокументаВПачке;
						ОбластьДокумент.Параметры.СтраховойНомерПФР 			= ЗаписьИН42.СтраховойНомер;
						ОбластьДокумент.Параметры.ФИО			 				= ЗаписьИН42.Фамилия + " " + ЗаписьИН42.Имя + " " + ЗаписьИН42.Отчество;
						ОбластьДокумент.Параметры.Адрес			 				= ВРег(РегламентированнаяОтчетность.ПредставлениеАдреса(НРег(ЗаписьИН42.АдресДляИнформирования), 0, ""));
						ОбластьДокумент.Параметры.НачисленоСтраховаяЧасть 		= ЗаписьИН42.НачисленоСтраховаяЧасть;
						ОбластьДокумент.Параметры.НачисленоНакопительнаяЧасть 	= ЗаписьИН42.НачисленоНакопительнаяЧасть;
						ОбластьДокумент.Параметры.НачисленоДополнительныйТариф 	= ЗаписьИН42.НачисленоДополнительныйТариф;
						ОбластьДокумент.Параметры.ПериодРаботыДатаС 			= ЗаписьИН42.ПериодРаботыДатаС;
						ОбластьДокумент.Параметры.ПериодРаботыДатаПо 			= ЗаписьИН42.ПериодРаботыДатаПо;
						ОбластьДокумент.Параметры.ДнейБолел 					= ПроцедурыПерсонифицированногоУчета.ПредставлениеПериодаБолезниОтпуска(ЗаписьИН42.ВременнаяНетрудоспособностьМесяцев, ЗаписьИН42.ВременнаяНетрудоспособностьДней);
						ОбластьДокумент.Параметры.ДнейГулял 					= ПроцедурыПерсонифицированногоУчета.ПредставлениеПериодаБолезниОтпуска(ЗаписьИН42.ОтпускМесяцев, ЗаписьИН42.ОтпускДней);
						
						ДокументРезультат.Вывести(ОбластьДокумент);
					    ЗаполнитьЗначенияСвойств(ОбластьСтрокаСписка.Параметры,ОбластьДокумент.Параметры,"СтраховойНомерПФР,ФИО");
						
						//На лист выводим 10 документов
						Если (ЗаписьИН42.НомерДокументаВПачке%10 = 0) и (ЗаписьИН42.НомерДокументаВПачке <> ИнформацияОПачке.ДокументовВПачке) Тогда
							ДокументРезультат.Вывести(ОбластьПодвал);
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументРезультат.Вывести(ОбластьШапка);
							ДокументовСЗВ4_2вПачке = ДокументовСЗВ4_2вПачке + 1;
						КонецЕсли; 
					КонецЕсли;
				
					// Список застрахованных лиц
					ОбластьСтрокаСписка.Параметры.НомерСтроки = НомерДокумента;
					
					// Проверим, уместится ли строка на странице или надо открывать новую страницу
					ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументСписокЗастрахованныхЛиц, ВыводимыеОбласти);
					Если Не ВывестиПодвалЛиста и Н = ВсегоСтрокДокумента Тогда
						ВыводимыеОбласти.Добавить(ОбластьПодвалСписка);
						ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументСписокЗастрахованныхЛиц, ВыводимыеОбласти);
					КонецЕсли;
					Если ВывестиПодвалЛиста Тогда
						ДокументСписокЗастрахованныхЛиц.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументСписокЗастрахованныхЛиц.Вывести(ПовторятьПриПечатиСтроки);
					КонецЕсли;
						
					ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьСтрокаСписка);
					
				КонецЦикла;	
				
				Если НЕ Вывести42как41 тогда
					//Выведем пустые записи до 10 документов
					Если ЗаписьИН42.НомерДокументаВПачке%10 <> 0 тогда
						Для Н = ЗаписьИН42.НомерДокументаВПачке%10 по 9 цикл
							ДокументРезультат.Вывести(ОбластьПустойДокумент);
						КонецЦикла;	
					КонецЕсли;
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОбластьПодвал);
				
				УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат, КоличествоЭкземпляров, НаПринтер, "Индивидуальные сведения (СЗВ-4-2); пачка №" + ИнформацияОПачке.НомерПачкиРаботодателя);
			КонецЕсли;	 
			
			//Печать описи документов
			ИнформацияОПачке.Вставить("ДокументовСЗВ4_2вПачке", ДокументовСЗВ4_2вПачке);
			ДокументОписи = Новый ТабличныйДокумент;
			ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ4_АДВ_6_1";
			ПроцедурыПерсонифицированногоУчета.ВывестиОписьАДВ6(ДокументОписи, ИнформацияОПачке, ОтветственныеЛица);
			УниверсальныеМеханизмы.НапечататьДокумент(ДокументОписи,КоличествоЭкземпляров, НаПринтер,"Опись документов (АДВ-6-1); пачка №" + ИнформацияОПачке.НомерПачкиРаботодателя);
			
			// Список застрахованных лиц
			ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьПодвалСписка);
			УниверсальныеМеханизмы.НапечататьДокумент(ДокументСписокЗастрахованныхЛиц,КоличествоЭкземпляров, НаПринтер,"Список застрахованных лиц; пачка №" + ИнформацияОПачке.НомерПачкиРаботодателя);
			Возврат "";
		
		ИначеЕсли ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда
			
			// формируем отчет по версии файла 07.00	
			ДеревоПФР = ПроцедурыПерсонифицированногоУчета.ПреобразоватьВДеревоXML(ТекстФайла);
			
			Если ДеревоПФР = Неопределено Тогда
				Отказ = Ложь;
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось разобрать файл с данными!",Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
				Возврат Неопределено 
			КонецЕсли;
			ДеревоПФР = ДеревоПФР.Строки.Найти("ФайлПФР","Имя");
			Если ДеревоПФР = Неопределено Тогда
				Отказ = Ложь;
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось разобрать файл с данными!",Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
				Возврат Неопределено 
			КонецЕсли;
			
			Если ТипФормДокументов = "СЗВ-4-1" Тогда
				
				// ПЕЧАТЬ ПАЧКИ ДОКУМЕНТОВ СЗВ-4-1
				
				Макет = ПолучитьМакет("ФормаСЗВ_4_1");
				
				// Рабочие области макета
				ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
				ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
				ОбластьСтаж 	= Макет.ПолучитьОбласть("Стаж");
				ОбластьСтраховыеПоВсемПодразделениям  = Макет.ПолучитьОбласть("СтраховыеПоВсемПодразделениям");
				
				НомерПачкиРаботодателя = "";
				
				//Печать описи документов
				ИнформацияОПачке = Новый Структура;
				ИнформацияОПачке.Вставить("ИнформацияОРаботодателе", Организация);
				ИнформацияОПачке.Вставить("ТипДокумента", "ИН41");
				ИнформацияОПачке.Вставить("ТерриториальныеУсловия", "");
				
				ОбластьПодвал.Параметры.ДолжностьРуководителя		 	= ОтветственныеЛица.РуководительДолжность;
				ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
				
				СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
				Если СтрокаДереваПачкаВходящихДокументов <> Неопределено Тогда
					
					СтрокаДереваВходящаяОпись = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВХОДЯЩАЯ_ОПИСЬ", "Имя");
					Если СтрокаДереваВходящаяОпись <> Неопределено Тогда
						
						СтрокаДереваСоставительПачки = СтрокаДереваВходящаяОпись.Строки.Найти("СоставительПачки", "Имя");
						Если СтрокаДереваСоставительПачки <> Неопределено Тогда
							// Заполнение данных шапки и подвала
							ОбластьШапка.Параметры.РегНомерПФР = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСоставительПачки, "РегистрационныйНомер");
							ОбластьШапка.Параметры.НаименованиеОрганизации = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСоставительПачки, "НаименованиеКраткое");
						КонецЕсли;
						
						СтрокаДереваПачкаСЗВ4 = СтрокаДереваВходящаяОпись.Строки.Найти("ПачкаСЗВ4");
						Если СтрокаДереваПачкаСЗВ4 <> Неопределено Тогда
							
							ОбластьШапка.Параметры.Год = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "РасчетныйПериод");
							
							СтрокаДереваСоставДокументов = СтрокаДереваВходящаяОпись.Строки.Найти("СоставДокументов", "Имя");
							Если СтрокаДереваСоставДокументов <> Неопределено Тогда
								СтрокаДереваНаличиеДокументов = СтрокаДереваСоставДокументов.Строки.Найти("НаличиеДокументов", "Имя");
								Если СтрокаДереваНаличиеДокументов <> Неопределено Тогда
									ИнформацияОПачке.Вставить("ДокументовВПачке", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНаличиеДокументов, "Количество"));
								КонецЕсли;
							КонецЕсли;
							
							СтрокаДереваТарифСтраховыхВзносов = СтрокаДереваПачкаСЗВ4.Строки.Найти("ТарифСтраховыхВзносов", "Имя");
							Если СтрокаДереваТарифСтраховыхВзносов <> Неопределено Тогда
								ИнформацияОПачке.Вставить("КодКатегорииЗастрахованногоЛица", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваТарифСтраховыхВзносов, "КодКатегории"));
								ИнформацияОПачке.Вставить("КодДополнительногоТарифа", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваТарифСтраховыхВзносов, "КодДополнительногоТарифа"));
							КонецЕсли;
							
							СтрокаДереваИтогоСуммаВзносов = СтрокаДереваПачкаСЗВ4.Строки.Найти("ИтогоСуммаВзносов", "Имя");
							Если СтрокаДереваИтогоСуммаВзносов <> Неопределено Тогда
								ИнформацияОПачке.Вставить("ИтогоВзносыСтраховаяЧасть", Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Страховые")), "ЧДЦ=2"));
								ИнформацияОПачке.Вставить("ИтогоВзносыНакопительнаяЧасть", Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Накопительные")), "ЧДЦ=2"));
								ИнформацияОПачке.Вставить("ИтогоВзносыПоДопТарифу", Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Дополнительные")), "ЧДЦ=2"));
							КонецЕсли;
							
							ВидКорректировкиВФайле = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "ВидКорректировки");
							Если ВидКорректировкиВФайле = "КОРРЕКТИРУЮЩАЯ" Тогда
								ИнформацияОПачке.Вставить("ВидКорректировки", "КОРР");
							ИначеЕсли ВидКорректировкиВФайле = "ОТМЕНЯЮЩАЯ" Тогда
								ИнформацияОПачке.Вставить("ВидКорректировки", "ОТМН");
							Иначе
								ИнформацияОПачке.Вставить("ВидКорректировки", "");
							КонецЕсли;
							
							ТипСведенийВФайле = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "ТипСведений");
							Если ТипСведенийВФайле = "ИСХОДНАЯ" Тогда
								ИнформацияОПачке.Вставить("ТипСведений", "ИСХД");
							Иначеесли ТипСведенийВФайле = "ПЕНСИОННАЯ" Тогда
								ИнформацияОПачке.Вставить("ТипСведений", "ПЕНС");
							Иначе
								ИнформацияОПачке.Вставить("ТипСведений", "");
							КонецЕсли;
							
						КонецЕсли;
						
						СтрокаДереваНомерПачки = СтрокаДереваВходящаяОпись.Строки.Найти("НомерПачки", "Имя");
						Если СтрокаДереваНомерПачки <> Неопределено Тогда
							СтрокаДереваОсновной = СтрокаДереваНомерПачки.Строки.Найти("Основной", "Имя");
							Если СтрокаДереваОсновной <> Неопределено Тогда
								НомерПачкиРаботодателя = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "Основной");
							Иначе
								НомерПачкиРаботодателя = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "ПоПодразделению");
							КонецЕсли;
						КонецЕсли;
						
						ДатаСоставления = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ДатаСоставления");
						ОбластьПодвал.Параметры.Дата = ПроцедурыПерсонифицированногоУчета.ДатаXMLВОтчет(ДатаСоставления);
						ИнформацияОПачке.Вставить("ДатаСоставленияОписи", ПроцедурыПерсонифицированногоУчета.ДатаXMLВОтчет(ДатаСоставления, Ложь));
						
					КонецЕсли;
					
					ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", НомерПачкиРаботодателя);
					ИнформацияОПачке.Вставить("РасчетныйПериод", ОбластьШапка.Параметры.Год);
							
					// Список застрахованных лиц
					ЗаполнитьЗначенияСвойств(ОбластьШапкаСписка.Параметры,ИнформацияОПачке,"РасчетныйПериод,НомерПачкиРаботодателя");
					ЗаполнитьЗначенияСвойств(ОбластьШапкаСписка.Параметры,ИнформацияОПачке.ИнформацияОРаботодателе,"РегистрационныйНомерПФР,НаименованиеСокращенное");
					ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьШапкаСписка);
					
					НомерДокумента = 0;
					
					//Цикл по документам файла
					Для Каждого СтрокаДереваИССЗВ41 Из СтрокаДереваПачкаВходящихДокументов.Строки Цикл
						
						//Читаем запись ИН41
						Если СтрокаДереваИССЗВ41.Имя = "ИС_СЗВ-4-1" Тогда
							//Каждый новый работник с новой страницы (отдельная форма СЗВ-4-1)
							
							НомерДокумента = НомерДокумента + 1;
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							
							// Данные по физлицу
							ОбластьШапка.Параметры.СтраховойНомерПФР = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИССЗВ41, "СтраховойНомер");
							СтрокаДереваФИО = СтрокаДереваИССЗВ41.Строки.Найти("ФИО");
							Если СтрокаДереваФИО <> Неопределено Тогда
								ОбластьШапка.Параметры.ФИО = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Фамилия") + " " + ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Имя") + " " + ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Отчество");
							Иначе
								ОбластьШапка.Параметры.ФИО = "";
							КонецЕсли;
							
							СтрокаДереваАдресЗЛ = СтрокаДереваИССЗВ41.Строки.Найти("АдресЗЛ");
							Если СтрокаДереваАдресЗЛ <> Неопределено Тогда
								ОбластьШапка.Параметры.Адрес = ВРег(ПроцедурыПерсонифицированногоУчета.ПредставлениеАдресадляПФР(СтрокаДереваАдресЗЛ));
							Иначе
								ОбластьШапка.Параметры.Адрес = "";
							КонецЕсли;
							
							СтрокаДереваНачисленоВзносовОсновных = СтрокаДереваИССЗВ41.Строки.Найти("НачисленоВзносовОсновных");
							Если СтрокаДереваНачисленоВзносовОсновных <> Неопределено Тогда
								ОбластьШапка.Параметры.НачисленоСтраховаяЧасть 		= Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Страховые")), "ЧДЦ=2");
								ОбластьШапка.Параметры.НачисленоНакопительнаяЧасть 	= Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Накопительные")), "ЧДЦ=2");
								ОбластьШапка.Параметры.НачисленоДополнительныйТариф = Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Дополнительные")), "ЧДЦ=2");
							Иначе
								ОбластьШапка.Параметры.НачисленоСтраховаяЧасть 		= "";
								ОбластьШапка.Параметры.НачисленоНакопительнаяЧасть 	= "";
								ОбластьШапка.Параметры.НачисленоДополнительныйТариф = "";
							КонецЕсли;
							
							СтрокаДереваБольничныеЛисты = СтрокаДереваИССЗВ41.Строки.Найти("БольничныеЛисты");
							Если СтрокаДереваБольничныеЛисты <> Неопределено Тогда
								ОбластьШапка.Параметры.ДнейБолел = ПроцедурыПерсонифицированногоУчета.ПредставлениеПериодаБолезниОтпуска(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваБольничныеЛисты, "ВсеМесяцы")),Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваБольничныеЛисты, "ВсеДни")));
							Иначе
								ОбластьШапка.Параметры.ДнейБолел = "";
							КонецЕсли;
							
							СтрокаДереваАдминистративныйОтпуск = СтрокаДереваИССЗВ41.Строки.Найти("АдминистративныйОтпуск");
							Если СтрокаДереваАдминистративныйОтпуск <> Неопределено Тогда
								ОбластьШапка.Параметры.ДнейГулял = ПроцедурыПерсонифицированногоУчета.ПредставлениеПериодаБолезниОтпуска(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваАдминистративныйОтпуск, "ВсеМесяцы")), Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваАдминистративныйОтпуск, "ВсеДни")));
							Иначе
								ОбластьШапка.Параметры.ДнейГулял = "";
							КонецЕсли;
							
							ДокументРезультат.Вывести(ОбластьШапка);
							
							
							//Цикл по основным записям о стаже
							СтрокаДереваВсеПериодыРаботы = СтрокаДереваИССЗВ41.Строки.Найти("ВсеПериодыРаботы");
							Если СтрокаДереваВсеПериодыРаботы <> Неопределено Тогда
								//Читаем запись СТАЖ
								
								Для Каждого СтрокаДереваПериодРаботы Из СтрокаДереваВсеПериодыРаботы.Строки Цикл
									СтрокаДереваОсновнаяСтрока = СтрокаДереваПериодРаботы.Строки.Найти("ОсновнаяСтрока");
									Если СтрокаДереваОсновнаяСтрока <> Неопределено Тогда
										ОбластьСтаж.Параметры.НомерПериода 				= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "НомерСтроки");
										ОбластьСтаж.Параметры.ДатаНачалаПериода 		= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "ДатаНачалаПериода");
										ОбластьСтаж.Параметры.ДатаОкончанияПериода 		= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "ДатаКонцаПериода");
										
										СтрокаДереваОсобенностиУчета = СтрокаДереваОсновнаяСтрока.Строки.Найти("ОсобенностиУчета");
										Если СтрокаДереваОсобенностиУчета <> Неопределено Тогда
											
											СтрокаДереваТерриториальныеУсловия = СтрокаДереваОсобенностиУчета.Строки.Найти("ТерриториальныеУсловия");
											Если СтрокаДереваТерриториальныеУсловия <> Неопределено Тогда
												ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсобенностиУчета, "ОснованиеТУ");
											Иначе
												ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = "";
											КонецЕсли;
											
											СтрокаДереваОсобыеУсловияТруда = СтрокаДереваОсобенностиУчета.Строки.Найти("ОсобыеУсловияТруда");
											Если СтрокаДереваОсобыеУсловияТруда <> Неопределено Тогда
												ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод 	= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ОснованиеОУТ");
												ОбластьСтаж.Параметры.КодПозицииСписка = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ПозицияСписка");
											Иначе
												ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = "";
												ОбластьСтаж.Параметры.КодПозицииСписка = "";
											КонецЕсли;
											
																						
											СтрокаДереваИсчисляемыйСтаж = СтрокаДереваОсобенностиУчета.Строки.Найти("ИсчисляемыйСтаж");
											Если СтрокаДереваИсчисляемыйСтаж <> Неопределено Тогда
												// Представление параметров ИТС
												ОбластьСтаж.Параметры.ОснованиеИТС = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИсчисляемыйСтаж, "ОснованиеИС");
												
												
												ЗаписьЛгот = Новый Структура;
												СтрокаДереваВыработкаВЧасах = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаВчасах");
												СтрокаДереваВыработкаКалендарная = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаКалендарная");
												ПервыйПараметрИсчисляемогоСтажа = 0;
												ВторойПараметрИсчисляемогоСтажа = 0;
												ТретийПараметрИсчисляемогоСтажа = 0;
												Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
													ПервыйПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Часы");
													ВторойПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Минуты");
													//ТретийПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "
												ИначеЕсли СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
													ПервыйПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы");
													ВторойПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни");
													ТретийПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеГоды");
												КонецЕсли;
												
												СтрокаДереваДекретДети = СтрокаДереваОсобенностиУчета.Строки.Найти("ДекретДети");
												Если СтрокаДереваДекретДети <> Неопределено Тогда
													ТретийПараметрИсчисляемогоСтажа = СтрокаДереваДекретДети.Значение;
												КонецЕсли;

												ЗаписьЛгот.Вставить("ОснованиеИсчисляемогоСтажаКод", ОбластьСтаж.Параметры.ОснованиеИТС);
												ЗаписьЛгот.Вставить("ПервыйПараметрИсчисляемогоСтажа", Число(ПервыйПараметрИсчисляемогоСтажа));
												ЗаписьЛгот.Вставить("ВторойПараметрИсчисляемогоСтажа", Число(ВторойПараметрИсчисляемогоСтажа));
												ЗаписьЛгот.Вставить("ТретийПараметрИсчисляемогоСтажа", ТретийПараметрИсчисляемогоСтажа);
												
												ОбластьСтаж.Параметры.ДопИТС= ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьЛГОТ);
												
												
												
											КонецЕсли;
											
											СтрокаДереваВыслугаЛет = СтрокаДереваОсобенностиУчета.Строки.Найти("ВыслугаЛет");
											Если СтрокаДереваВыслугаЛет <> Неопределено Тогда
												
												// Представление параметров выслуги лет
												ОбластьСтаж.Параметры.ОснованиеВыслуги = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ОснованиеВЛ");
												
												
												СтрокаДереваВыработкаВЧасах = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаВчасах");
												СтрокаДереваВыработкаКалендарная = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаКалендарная");
												
												Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
													ПервыйПараметрВыслугиЛет = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Часы");
													ВторойПараметрВыслугиЛет = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Минуты");
												ИначеЕсли СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
													ПервыйПараметрВыслугиЛет = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы");
													ВторойПараметрВыслугиЛет = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни");
												Иначе
													ПервыйПараметрВыслугиЛет = "";
													ВторойПараметрВыслугиЛет = "";
												КонецЕсли;
												ТретийПараметрВыслугиЛет = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ДоляСтавки");
												ЗаписьЛгот = Новый Структура;
												ЗаписьЛгот.Вставить("ОснованиеВыслугиЛетКод",ОбластьСтаж.Параметры.ОснованиеВыслуги);
												ЗаписьЛгот.Вставить("ПервыйПараметрВыслугиЛет",Число(ПервыйПараметрВыслугиЛет));
												ЗаписьЛгот.Вставить("ВторойПараметрВыслугиЛет",Число(ВторойПараметрВыслугиЛет));
												ЗаписьЛгот.Вставить("ТретийПараметрВыслугиЛет",Число(ТретийПараметрВыслугиЛет));
												
												
												ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьЛГОТ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
												
											КонецЕсли;
										КонецЕсли;
										ДокументРезультат.Вывести(ОбластьСтаж);
									КонецЕсли;
									СтрокаДереваДополнительныеСтроки = СтрокаДереваПериодРаботы.Строки.Найти("ДополнительныеСтроки");
									Если СтрокаДереваДополнительныеСтроки <> Неопределено Тогда
										Для Каждого СтрокаДереваОсобенностиУчета Из СтрокаДереваДополнительныеСтроки.Строки Цикл
											Если СтрокаДереваОсобенностиУчета.Имя = "ОсобенностиУчета" Тогда
												// Выводим запись ЛГОТ
												ОбластьСтаж.Параметры.НомерПериода 				= "";
												ОбластьСтаж.Параметры.ДатаНачалаПериода 		= "";
												ОбластьСтаж.Параметры.ДатаОкончанияПериода 		= "";
												
												СтрокаДереваТерриториальныеУсловия = СтрокаДереваОсобенностиУчета.Строки.Найти("ТерриториальныеУсловия");
												Если СтрокаДереваТерриториальныеУсловия <> Неопределено Тогда
													ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "ОснованиеТУ");
												Иначе
													ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = "";
												КонецЕсли;
												
												СтрокаДереваОсобыеУсловияТруда = СтрокаДереваОсобенностиУчета.Строки.Найти("ОсобыеУсловияТруда");
												Если СтрокаДереваОсобыеУсловияТруда <> Неопределено Тогда
													ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ОснованиеОУТ");
													ОбластьСтаж.Параметры.КодПозицииСписка = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ПозицияСписка");
												Иначе
													ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = "";
													ОбластьСтаж.Параметры.КодПозицииСписка = "";
												КонецЕсли;
												
																								
												// Представление параметров ИТС
												СтрокаДереваИсчисляемыйСтаж = СтрокаДереваОсобенностиУчета.Строки.Найти("ИсчисляемыйСтаж");
												Если СтрокаДереваИсчисляемыйСтаж <> Неопределено Тогда
													ОбластьСтаж.Параметры.ОснованиеИТС = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИсчисляемыйСтаж, "ОснованиеИС");
													ЗаписьЛгот = Новый Структура;
													СтрокаДереваВыработкаВЧасах = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаВчасах");
													СтрокаДереваВыработкаКалендарная = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаКалендарная");
													ПервыйПараметрИсчисляемогоСтажа = 0;
													ВторойПараметрИсчисляемогоСтажа = 0;
													ТретийПараметрИсчисляемогоСтажа = 0;
													Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
														ПервыйПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Часы");
														ВторойПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Минуты");
														//ТретийПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "
													ИначеЕсли СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
														ПервыйПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы");
														ВторойПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни");
														ТретийПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеГоды");
													КонецЕсли;
													
													ЗаписьЛгот.Вставить("ОснованиеИсчисляемогоСтажаКод", ОбластьСтаж.Параметры.ОснованиеИТС);
													ЗаписьЛгот.Вставить("ПервыйПараметрИсчисляемогоСтажа", Число(ПервыйПараметрИсчисляемогоСтажа));
													ЗаписьЛгот.Вставить("ВторойПараметрИсчисляемогоСтажа", Число(ВторойПараметрИсчисляемогоСтажа));
													ЗаписьЛгот.Вставить("ТретийПараметрИсчисляемогоСтажа", Число(ТретийПараметрИсчисляемогоСтажа));
													
													ОбластьСтаж.Параметры.ДопИТС= ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьЛГОТ);
												КонецЕсли;
												
												// Представление параметров выслуги лет
												СтрокаДереваВыслугаЛет = СтрокаДереваОсобенностиУчета.Строки.Найти("ВыслугаЛет");
												Если СтрокаДереваВыслугаЛет <> Неопределено Тогда
													ОбластьСтаж.Параметры.ОснованиеВыслуги = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ОснованиеВЛ");
													СтрокаДереваВыработкаВЧасах = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаВчасах");
													СтрокаДереваВыработкаКалендарная = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаКалендарная");
													
													Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
														ПервыйПараметрВыслугиЛет = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Часы");
														ВторойПараметрВыслугиЛет = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Минуты");
													ИначеЕсли СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
														ПервыйПараметрВыслугиЛет = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы");
														ВторойПараметрВыслугиЛет = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни");
													Иначе
														ПервыйПараметрВыслугиЛет = "";
														ВторойПараметрВыслугиЛет = "";
													КонецЕсли;
													ТретийПараметрВыслугиЛет = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ДоляСтавки");
													ЗаписьЛгот = Новый Структура;
													ЗаписьЛгот.Вставить("ОснованиеВыслугиЛетКод",ОбластьСтаж.Параметры.ОснованиеВыслуги);
													ЗаписьЛгот.Вставить("ПервыйПараметрВыслугиЛет",Число(ПервыйПараметрВыслугиЛет));
													ЗаписьЛгот.Вставить("ВторойПараметрВыслугиЛет",Число(ВторойПараметрВыслугиЛет));
													ЗаписьЛгот.Вставить("ТретийПараметрВыслугиЛет",Число(ТретийПараметрВыслугиЛет));
													
													ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьЛГОТ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
												КонецЕсли;
												
												ДокументРезультат.Вывести(ОбластьСтаж);
											КонецЕсли;
										КонецЦикла;
									КонецЕсли; // Дополнительные записи о стаже
								КонецЦикла;
							КонецЕсли; // Основные записи о стаже
							
							// Страховые взносы включая обособленные подразделения
							СтрокаДереваНачисленоВзносовРанее = СтрокаДереваИССЗВ41.Строки.Найти("НачисленоВзносовРанее");
							Если СтрокаДереваНачисленоВзносовОсновных <> Неопределено Тогда
								ОбластьСтраховыеПоВсемПодразделениям.Параметры.НачисленоСтраховаяЧасть 		= Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовРанее, "Страховые")), "ЧДЦ=2");
								ОбластьСтраховыеПоВсемПодразделениям.Параметры.НачисленоНакопительнаяЧасть 	= Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовРанее, "Накопительные")), "ЧДЦ=2");
							Иначе
								ОбластьСтраховыеПоВсемПодразделениям.Параметры.НачисленоСтраховаяЧасть 		= "";
								ОбластьСтраховыеПоВсемПодразделениям.Параметры.НачисленоНакопительнаяЧасть 	= "";
							КонецЕсли;
							ДокументРезультат.Вывести(ОбластьСтраховыеПоВсемПодразделениям);

							// Подвал формы
							ДокументРезультат.Вывести(ОбластьПодвал);
							
							// Список застрахованных лиц
						    ЗаполнитьЗначенияСвойств(ОбластьСтрокаСписка.Параметры,ОбластьШапка.Параметры,"СтраховойНомерПФР,ФИО");
							ОбластьСтрокаСписка.Параметры.НомерСтроки = НомерДокумента;
							
							// Проверим, уместится ли строка на странице или надо открывать новую страницу
							ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументСписокЗастрахованныхЛиц, ВыводимыеОбласти);
							Если Не ВывестиПодвалЛиста и НомерДокумента = ИнформацияОПачке.ДокументовВПачке Тогда
								ВыводимыеОбласти.Добавить(ОбластьПодвалСписка);
								ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументСписокЗастрахованныхЛиц, ВыводимыеОбласти);
							КонецЕсли;
							Если ВывестиПодвалЛиста Тогда
								ДокументСписокЗастрахованныхЛиц.ВывестиГоризонтальныйРазделительСтраниц();
								ДокументСписокЗастрахованныхЛиц.Вывести(ПовторятьПриПечатиСтроки);
							КонецЕсли;
								
							ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьСтрокаСписка);
				
						КонецЕсли;
					КонецЦикла; // по документам
					
					Если СтрокаДереваВходящаяОпись <> Неопределено Тогда
						
						УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат, КоличествоЭкземпляров, НаПринтер, "Индивидуальные сведения (СЗВ-4-1); пачка №" + НомерПачкиРаботодателя);
						
						ДокументОписи = Новый ТабличныйДокумент;
						ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ4_АДВ_6_1";
						ПроцедурыПерсонифицированногоУчета.ВывестиОписьАДВ6(ДокументОписи, ИнформацияОПачке, ОтветственныеЛица);
						УниверсальныеМеханизмы.НапечататьДокумент(ДокументОписи,КоличествоЭкземпляров, НаПринтер,"Опись документов (АДВ-6-1); пачка №" + НомерПачкиРаботодателя);
						
						// Список застрахованных лиц
						ОбластьПодвалСписка.Параметры.ДатаСоставленияОписи = ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
						ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьПодвалСписка);
						УниверсальныеМеханизмы.НапечататьДокумент(ДокументСписокЗастрахованныхЛиц,КоличествоЭкземпляров, НаПринтер,"Список застрахованных лиц; пачка №" + НомерПачкиРаботодателя);
						Возврат "";
		
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе	
				
				Вывести42как41 = ИмяМакета = "ФормаСЗВ_4_1";
				
				ТерриториальныеУсловияОтчета = "";
				НомерПачкиРаботодателя = "";
				
				//Печать описи документов
				ИнформацияОПачке = Новый Структура;
				ИнформацияОПачке.Вставить("ТерриториальныеУсловия", "");
				ИнформацияОПачке.Вставить("ИнформацияОРаботодателе", Организация);
				
				Макет = ПолучитьМакет(?(Вывести42как41,"ФормаСЗВ_4_1","ФормаСЗВ_4_2"));
				
				// Рабочие области макета
				ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
				ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
				
				ОбластьПодвал.Параметры.ДолжностьРуководителя		 	= ОтветственныеЛица.РуководительДолжность;
				ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
				
				// ПЕЧАТЬ ПАЧКИ ДОКУМЕНТОВ СЗВ-4-2
				ДокументовСЗВ4_2вПачке = 1;
				Если Вывести42как41 тогда
					
					// Рабочие области макета
					ОбластьСтаж 	= Макет.ПолучитьОбласть("Стаж");
				
					СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
					Если СтрокаДереваПачкаВходящихДокументов <> Неопределено Тогда
						
						СтрокаДереваВходящаяОпись = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВХОДЯЩАЯ_ОПИСЬ", "Имя");
						Если СтрокаДереваВходящаяОпись <> Неопределено Тогда
							
							СтрокаДереваСоставительПачки = СтрокаДереваВходящаяОпись.Строки.Найти("СоставительПачки", "Имя");
							Если СтрокаДереваСоставительПачки <> Неопределено Тогда
								// Заполнение данных шапки и подвала
								ОбластьШапка.Параметры.РегНомерПФР = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСоставительПачки, "РегистрационныйНомер");
								ОбластьШапка.Параметры.НаименованиеОрганизации = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСоставительПачки, "НаименованиеКраткое");
							КонецЕсли;
							
							СтрокаДереваПачкаСЗВ4 = СтрокаДереваВходящаяОпись.Строки.Найти("ПачкаСЗВ4");
							Если СтрокаДереваПачкаСЗВ4 <> Неопределено Тогда
								ОбластьШапка.Параметры.Год = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "РасчетныйПериод");
								СтрокаДереваТерриториальныеУсловия = СтрокаДереваПачкаСЗВ4.Строки.Найти("ТерриториальныеУсловия");
								Если СтрокаДереваТерриториальныеУсловия <> Неопределено Тогда
									ТерриториальныеУсловияОтчета = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "ОснованиеТУ");
								КонецЕсли;
								
							КонецЕсли;
							ОбластьПодвал.Параметры.Дата = ПроцедурыПерсонифицированногоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ДатаСоставления"));

							СтрокаДереваНомерПачки = СтрокаДереваВходящаяОпись.Строки.Найти("НомерПачки", "Имя");
							Если СтрокаДереваНомерПачки <> Неопределено Тогда
								СтрокаДереваОсновной = СтрокаДереваНомерПачки.Строки.Найти("Основной", "Имя");
								Если СтрокаДереваОсновной <> Неопределено Тогда
									НомерПачкиРаботодателя = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "Основной");
								Иначе
									НомерПачкиРаботодателя = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "ПоПодразделению");
								КонецЕсли;
								
								СтрокаДереваПачкаСЗВ4 = СтрокаДереваВходящаяОпись.Строки.Найти("ПачкаСЗВ4", "Имя");
								Если СтрокаДереваПачкаСЗВ4 <> Неопределено Тогда
									//Печать описи документов
									ИнформацияОПачке.Вставить("ДокументовСЗВ4_2вПачке", ДокументовСЗВ4_2вПачке);
									
									СтрокаДереваСоставДокументов = СтрокаДереваВходящаяОпись.Строки.Найти("СоставДокументов", "Имя");
									Если СтрокаДереваСоставДокументов <> Неопределено Тогда
										СтрокаДереваНаличиеДокументов = СтрокаДереваСоставДокументов.Строки.Найти("НаличиеДокументов", "Имя");
										Если СтрокаДереваНаличиеДокументов <> Неопределено Тогда
											ИнформацияОПачке.Вставить("ДокументовВПачке", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНаличиеДокументов, "Количество"));
										КонецЕсли;
									КонецЕсли;
									
									ИнформацияОПачке.Вставить("ТипДокумента", "ИН42");
									ИнформацияОПачке.Вставить("РасчетныйПериод", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "РасчетныйПериод"));
									
									СтрокаДереваТарифСтраховыхВзносов = СтрокаДереваПачкаСЗВ4.Строки.Найти("ТарифСтраховыхВзносов", "Имя");
									Если СтрокаДереваТарифСтраховыхВзносов <> Неопределено Тогда
										ИнформацияОПачке.Вставить("КодКатегорииЗастрахованногоЛица", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваТарифСтраховыхВзносов, "КодКатегории"));
										ИнформацияОПачке.Вставить("КодДополнительногоТарифа", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваТарифСтраховыхВзносов, "КодДополнительногоТарифа"));
									КонецЕсли;
									
									СтрокаДереваТерриториальныеУсловия = СтрокаДереваПачкаСЗВ4.Строки.Найти("ТерриториальныеУсловия", "Имя");
									Если СтрокаДереваТерриториальныеУсловия <> Неопределено Тогда
										ИнформацияОПачке.Вставить("ТерриториальныеУсловия", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "ОснованиеТУ"));
									КонецЕсли;
									
									СтрокаДереваИтогоСуммаВзносов = СтрокаДереваПачкаСЗВ4.Строки.Найти("ИтогоСуммаВзносов", "Имя");
									Если СтрокаДереваИтогоСуммаВзносов <> Неопределено Тогда
										ИнформацияОПачке.Вставить("ИтогоВзносыСтраховаяЧасть", Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Страховые")),"ЧДЦ=2"));
										ИнформацияОПачке.Вставить("ИтогоВзносыНакопительнаяЧасть", Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Накопительные")),"ЧДЦ=2"));
										ИнформацияОПачке.Вставить("ИтогоВзносыПоДопТарифу", Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Дополнительные")),"ЧДЦ=2"));
									КонецЕсли;
									
									ВидКорректировкиВФайле = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "ВидКорректировки");
									Если ВидКорректировкиВФайле = "КОРРЕКТИРУЮЩАЯ" Тогда
										ИнформацияОПачке.Вставить("ВидКорректировки", "КОРР");
									ИначеЕсли ВидКорректировкиВФайле = "ОТМЕНЯЮЩАЯ" Тогда
										ИнформацияОПачке.Вставить("ВидКорректировки", "ОТМН");
									Иначе
										ИнформацияОПачке.Вставить("ВидКорректировки", "");
									КонецЕсли;
									
									ТипСведенийВФайле = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "ТипСведений");
									Если ТипСведенийВФайле = "ИСХОДНАЯ" Тогда
										ИнформацияОПачке.Вставить("ТипСведений", "ИСХД");
									Иначеесли ТипСведенийВФайле = "ПЕНСИОННАЯ" Тогда
										ИнформацияОПачке.Вставить("ТипСведений", "ПЕНС");
									Иначе
										ИнформацияОПачке.Вставить("ТипСведений", "");
									КонецЕсли;
									
									ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", НомерПачкиРаботодателя);
									ИнформацияОПачке.Вставить("ДатаСоставленияОписи", ПроцедурыПерсонифицированногоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ДатаСоставления"), Ложь));
									
								КонецЕсли;
								
							КонецЕсли;
						КонецЕсли
						
					КонецЕсли;
					
				Иначе
					
					
					// Рабочие области макета
					ОбластьПустойДокумент = Макет.ПолучитьОбласть("ПустойДокумент");
					ОбластьДокумент = Макет.ПолучитьОбласть("Документ");
					
					СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
					Если СтрокаДереваПачкаВходящихДокументов <> Неопределено Тогда
						
						СтрокаДереваВходящаяОпись = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВХОДЯЩАЯ_ОПИСЬ", "Имя");
						Если СтрокаДереваВходящаяОпись <> Неопределено Тогда
							
							СтрокаДереваСоставительПачки = СтрокаДереваВходящаяОпись.Строки.Найти("СоставительПачки", "Имя");
							Если СтрокаДереваСоставительПачки <> Неопределено Тогда
								// Заполнение данных шапки и подвала
								ОбластьШапка.Параметры.РегНомерПФР = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСоставительПачки, "РегистрационныйНомер");
								ОбластьШапка.Параметры.НаименованиеОрганизации = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСоставительПачки, "НаименованиеКраткое");
							КонецЕсли;
							
							СтрокаДереваСоставДокументов = СтрокаДереваВходящаяОпись.Строки.Найти("СоставДокументов");
							Если СтрокаДереваСоставДокументов <> Неопределено Тогда
								СтрокаДереваНаличиеДокументов = СтрокаДереваСоставДокументов.Строки.Найти("НаличиеДокументов");
								Если СтрокаДереваНаличиеДокументов <> Неопределено Тогда
									КоличествоДокументовВПачке = Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНаличиеДокументов, "Количество"));
								КонецЕсли;
							КонецЕсли;
							
							СтрокаДереваПачкаСЗВ4 = СтрокаДереваВходящаяОпись.Строки.Найти("ПачкаСЗВ4");
							Если СтрокаДереваПачкаСЗВ4 <> Неопределено Тогда
								ОбластьШапка.Параметры.Год = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "РасчетныйПериод");
							КонецЕсли;
							ОбластьПодвал.Параметры.Дата = ПроцедурыПерсонифицированногоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ДатаСоставления"));

							СтрокаДереваНомерПачки = СтрокаДереваВходящаяОпись.Строки.Найти("НомерПачки", "Имя");
							Если СтрокаДереваНомерПачки <> Неопределено Тогда
								СтрокаДереваОсновной = СтрокаДереваНомерПачки.Строки.Найти("Основной", "Имя");
								Если СтрокаДереваОсновной <> Неопределено Тогда
									НомерПачкиРаботодателя = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "Основной");
								Иначе
									НомерПачкиРаботодателя = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "ПоПодразделению");
								КонецЕсли;
								
								СтрокаДереваПачкаСЗВ4 = СтрокаДереваВходящаяОпись.Строки.Найти("ПачкаСЗВ4", "Имя");
								Если СтрокаДереваПачкаСЗВ4 <> Неопределено Тогда
									//Печать описи документов
									ИнформацияОПачке.Вставить("ДокументовСЗВ4_2вПачке", ДокументовСЗВ4_2вПачке);
									
									СтрокаДереваСоставДокументов = СтрокаДереваВходящаяОпись.Строки.Найти("СоставДокументов", "Имя");
									Если СтрокаДереваСоставДокументов <> Неопределено Тогда
										СтрокаДереваНаличиеДокументов = СтрокаДереваСоставДокументов.Строки.Найти("НаличиеДокументов", "Имя");
										Если СтрокаДереваНаличиеДокументов <> Неопределено Тогда
											ИнформацияОПачке.Вставить("ДокументовВПачке", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНаличиеДокументов, "Количество"));
										КонецЕсли;
									КонецЕсли;
									
									ИнформацияОПачке.Вставить("ТипДокумента", "ИН42");
									ИнформацияОПачке.Вставить("РасчетныйПериод", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "РасчетныйПериод"));
									
									СтрокаДереваТарифСтраховыхВзносов = СтрокаДереваПачкаСЗВ4.Строки.Найти("ТарифСтраховыхВзносов", "Имя");
									Если СтрокаДереваТарифСтраховыхВзносов <> Неопределено Тогда
										ИнформацияОПачке.Вставить("КодКатегорииЗастрахованногоЛица", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваТарифСтраховыхВзносов, "КодКатегории"));
										ИнформацияОПачке.Вставить("КодДополнительногоТарифа", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваТарифСтраховыхВзносов, "КодДополнительногоТарифа"));
									КонецЕсли;
									
									СтрокаДереваТерриториальныеУсловия = СтрокаДереваПачкаСЗВ4.Строки.Найти("ТерриториальныеУсловия", "Имя");
									Если СтрокаДереваТерриториальныеУсловия <> Неопределено Тогда
										ИнформацияОПачке.Вставить("ТерриториальныеУсловия", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "ОснованиеТУ"));
									КонецЕсли;
									
									СтрокаДереваИтогоСуммаВзносов = СтрокаДереваПачкаСЗВ4.Строки.Найти("ИтогоСуммаВзносов", "Имя");
									Если СтрокаДереваИтогоСуммаВзносов <> Неопределено Тогда
										ИнформацияОПачке.Вставить("ИтогоВзносыСтраховаяЧасть", Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Страховые")),"ЧДЦ=2"));
										ИнформацияОПачке.Вставить("ИтогоВзносыНакопительнаяЧасть", Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Накопительные")),"ЧДЦ=2"));
										ИнформацияОПачке.Вставить("ИтогоВзносыПоДопТарифу", Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИтогоСуммаВзносов, "Дополнительные")),"ЧДЦ=2"));
									КонецЕсли;
									
									ВидКорректировкиВФайле = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "ВидКорректировки");
									Если ВидКорректировкиВФайле = "КОРРЕКТИРУЮЩАЯ" Тогда
										ИнформацияОПачке.Вставить("ВидКорректировки", "КОРР");
									ИначеЕсли ВидКорректировкиВФайле = "ОТМЕНЯЮЩАЯ" Тогда
										ИнформацияОПачке.Вставить("ВидКорректировки", "ОТМН");
									Иначе
										ИнформацияОПачке.Вставить("ВидКорректировки", "");
									КонецЕсли;
									
									ТипСведенийВФайле = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПачкаСЗВ4, "ТипСведений");
									Если ТипСведенийВФайле = "ИСХОДНАЯ" Тогда
										ИнформацияОПачке.Вставить("ТипСведений", "ИСХД");
									Иначеесли ТипСведенийВФайле = "ПЕНСИОННАЯ" Тогда
										ИнформацияОПачке.Вставить("ТипСведений", "ПЕНС");
									Иначе
										ИнформацияОПачке.Вставить("ТипСведений", "");
									КонецЕсли;
									
									ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", НомерПачкиРаботодателя);
									ИнформацияОПачке.Вставить("ДатаСоставленияОписи", ПроцедурыПерсонифицированногоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ДатаСоставления"), Ложь));
									
								КонецЕсли;
								
							КонецЕсли;
						КонецЕсли
						
					КонецЕсли;
					
					// Вывод данных
					ДокументРезультат.Вывести(ОбластьШапка);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ОбластьШапкаСписка.Параметры,ИнформацияОПачке,"РасчетныйПериод,НомерПачкиРаботодателя");
				ЗаполнитьЗначенияСвойств(ОбластьШапкаСписка.Параметры,ИнформацияОПачке.ИнформацияОРаботодателе,"РегистрационныйНомерПФР,НаименованиеСокращенное");
				ОбластьПодвалСписка.Параметры.ДатаСоставленияОписи = ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
				ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьШапкаСписка);
		
				НомерДокумента = 0;
					
				Для Каждого СтрокаДереваИССЗВ42 Из СтрокаДереваПачкаВходящихДокументов.Строки Цикл
					
					Если СтрокаДереваИССЗВ42.Имя = "ИС_СЗВ-4-2" Тогда
						НомерДокумента = НомерДокумента + 1;	
						Если Вывести42как41 тогда
							
							//Каждый новый работник с новой страницы (отдельная форма СЗВ-4-1)
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							
							// Данные по физлицу
							ОбластьШапка.Параметры.СтраховойНомерПФР 			= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИССЗВ42, "СтраховойНомер");
							
							СтрокаДереваФИО = СтрокаДереваИССЗВ42.Строки.Найти("ФИО");
							Если СтрокаДереваФИО <> Неопределено Тогда
								ОбластьШапка.Параметры.ФИО = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Фамилия") + " " + ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Имя") + " " + ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Отчество");
							КонецЕсли;
							
							ЗаполнитьЗначенияСвойств(ОбластьСтрокаСписка.Параметры,ОбластьШапка.Параметры,"СтраховойНомерПФР,ФИО");
							
							СтрокаДереваАдресЗЛ = СтрокаДереваИССЗВ42.Строки.Найти("АдресЗЛ");
							Если СтрокаДереваАдресЗЛ <> Неопределено Тогда
								ОбластьШапка.Параметры.Адрес= ВРег(ПроцедурыПерсонифицированногоУчета.ПредставлениеАдресадляПФР(СтрокаДереваАдресЗЛ));
							КонецЕсли;
							СтрокаДереваНачисленоВзносовОсновных = СтрокаДереваИССЗВ42.Строки.Найти("НачисленоВзносовОсновных");
							Если СтрокаДереваНачисленоВзносовОсновных <> Неопределено Тогда
								ОбластьШапка.Параметры.НачисленоСтраховаяЧасть 		= Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Страховые")), "ЧДЦ=2");
								ОбластьШапка.Параметры.НачисленоНакопительнаяЧасть 	= Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Накопительные")), "ЧДЦ=2");
								ОбластьШапка.Параметры.НачисленоДополнительныйТариф = Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Дополнительные")), "ЧДЦ=2");
							КонецЕсли;
							
							СтрокаДереваБольничныеЛисты = СтрокаДереваИССЗВ42.Строки.Найти("БольничныеЛисты");
							Если СтрокаДереваБольничныеЛисты <> Неопределено Тогда
								ОбластьШапка.Параметры.ДнейБолел = ПроцедурыПерсонифицированногоУчета.ПредставлениеПериодаБолезниОтпуска(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваБольничныеЛисты, "ВсеМесяцы")),Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваБольничныеЛисты, "ВсеДни")));
							КонецЕсли;
							
							СтрокаДереваАдминистративныйОтпуск = СтрокаДереваИССЗВ42.Строки.Найти("АдминистративныйОтпуск");
							Если СтрокаДереваАдминистративныйОтпуск <> Неопределено Тогда
								ОбластьШапка.Параметры.ДнейГулял = ПроцедурыПерсонифицированногоУчета.ПредставлениеПериодаБолезниОтпуска(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваАдминистративныйОтпуск, "ВсеМесяцы")), Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваАдминистративныйОтпуск, "ВсеДни")));
							КонецЕсли;
							ДокументРезультат.Вывести(ОбластьШапка);
							
							СтрокаДереваВсеПериодыРаботы = СтрокаДереваИССЗВ42.Строки.Найти("ВсеПериодыРаботы");
							Если СтрокаДереваВсеПериодыРаботы <> Неопределено Тогда
								//Читаем запись СТАЖ
								
								СтрокаДереваПериодРаботы = СтрокаДереваВсеПериодыРаботы.Строки.Найти("ПериодРаботы");
								Если СтрокаДереваПериодРаботы <> Неопределено Тогда
									СтрокаДереваОсновнаяСтрока = СтрокаДереваПериодРаботы.Строки.Найти("ОсновнаяСтрока");
									Если СтрокаДереваОсновнаяСтрока <> Неопределено Тогда
										ОбластьСтаж.Параметры.НомерПериода 				= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "НомерСтроки");
										ОбластьСтаж.Параметры.ДатаНачалаПериода 		= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "ДатаНачалаПериода");
										ОбластьСтаж.Параметры.ДатаОкончанияПериода 		= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "ДатаКонцаПериода");
										ОбластьСтаж.Параметры.ТерриториальныеУсловияКод	= ТерриториальныеУсловияОтчета;
										ДокументРезультат.Вывести(ОбластьСтаж);
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
						Иначе
							
							//Прочитаем запись из файла
							
							ОбластьДокумент.Параметры.НомерДокументаВПачке 			= Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИССЗВ42, "НомерВпачке"))-1;
							ОбластьДокумент.Параметры.СтраховойНомерПФР 			= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИССЗВ42, "СтраховойНомер");
							СтрокаДереваФИО = СтрокаДереваИССЗВ42.Строки.Найти("ФИО");
							Если СтрокаДереваФИО <> Неопределено Тогда
								ОбластьДокумент.Параметры.ФИО = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Фамилия") + " " + ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Имя") + " " + ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Отчество");
							Иначе
								ОбластьДокумент.Параметры.ФИО = "";
							КонецЕсли;
							ЗаполнитьЗначенияСвойств(ОбластьСтрокаСписка.Параметры,ОбластьДокумент.Параметры,"СтраховойНомерПФР,ФИО");
							
							СтрокаДереваАдресЗЛ = СтрокаДереваИССЗВ42.Строки.Найти("АдресЗЛ");
							Если СтрокаДереваАдресЗЛ <> Неопределено Тогда
								ОбластьДокумент.Параметры.Адрес = ВРег(ПроцедурыПерсонифицированногоУчета.ПредставлениеАдресадляПФР(СтрокаДереваАдресЗЛ));
							Иначе
								ОбластьДокумент.Параметры.Адрес = "";
							КонецЕсли;
							
							СтрокаДереваНачисленоВзносовОсновных = СтрокаДереваИССЗВ42.Строки.Найти("НачисленоВзносовОсновных");
							Если СтрокаДереваНачисленоВзносовОсновных <> Неопределено Тогда
								ОбластьДокумент.Параметры.НачисленоСтраховаяЧасть 		= Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Страховые")), "ЧДЦ=2");
								ОбластьДокумент.Параметры.НачисленоНакопительнаяЧасть 	= Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Накопительные")), "ЧДЦ=2");
								ОбластьДокумент.Параметры.НачисленоДополнительныйТариф = Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНачисленоВзносовОсновных, "Дополнительные")), "ЧДЦ=2");
							Иначе
								ОбластьДокумент.Параметры.НачисленоСтраховаяЧасть 		= "";
								ОбластьДокумент.Параметры.НачисленоНакопительнаяЧасть 	= "";
								ОбластьДокумент.Параметры.НачисленоДополнительныйТариф  = "";
							КонецЕсли;
							
							СтрокаДереваВсеПериодыРаботы = СтрокаДереваИССЗВ42.Строки.Найти("ВсеПериодыРаботы");
							Если СтрокаДереваВсеПериодыРаботы <> Неопределено Тогда
								//Читаем запись СТАЖ
								
								СтрокаДереваПериодРаботы = СтрокаДереваВсеПериодыРаботы.Строки.Найти("ПериодРаботы");
								Если СтрокаДереваПериодРаботы <> Неопределено Тогда
									СтрокаДереваОсновнаяСтрока = СтрокаДереваПериодРаботы.Строки.Найти("ОсновнаяСтрока");
									Если СтрокаДереваОсновнаяСтрока <> Неопределено Тогда
										ОбластьДокумент.Параметры.ПериодРаботыДатаС = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "ДатаНачалаПериода");
										ОбластьДокумент.Параметры.ПериодРаботыДатаПо 		= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "ДатаКонцаПериода");
									Иначе 
										ОбластьДокумент.Параметры.ПериодРаботыДатаС = "";
										ОбластьДокумент.Параметры.ПериодРаботыДатаПо = "";
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
							СтрокаДереваБольничныеЛисты = СтрокаДереваИССЗВ42.Строки.Найти("БольничныеЛисты");
							Если СтрокаДереваБольничныеЛисты <> Неопределено Тогда
								ОбластьДокумент.Параметры.ДнейБолел = ПроцедурыПерсонифицированногоУчета.ПредставлениеПериодаБолезниОтпуска(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваБольничныеЛисты, "ВсеМесяцы")),Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваБольничныеЛисты, "ВсеДни")));
							Иначе
								ОбластьДокумент.Параметры.ДнейБолел = "";
							КонецЕсли;
							
							СтрокаДереваАдминистративныйОтпуск = СтрокаДереваИССЗВ42.Строки.Найти("АдминистративныйОтпуск");
							Если СтрокаДереваАдминистративныйОтпуск <> Неопределено Тогда
								ОбластьДокумент.Параметры.ДнейГулял = ПроцедурыПерсонифицированногоУчета.ПредставлениеПериодаБолезниОтпуска(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваАдминистративныйОтпуск, "ВсеМесяцы")), Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваАдминистративныйОтпуск, "ВсеДни")));
							Иначе
								ОбластьДокумент.Параметры.ДнейГулял = "";
							КонецЕсли;
							ДокументРезультат.Вывести(ОбластьДокумент);
							
							НомерВПачке = Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИССЗВ42,"НомерВпачке"))-1;
							//На лист выводим 10 документов
							Если (НомерВПачке%10 = 0) и (НомерВПачке <> КоличествоДокументовВПачке) Тогда
								ДокументРезультат.Вывести(ОбластьПодвал);
								ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
								ДокументРезультат.Вывести(ОбластьШапка);
								ДокументовСЗВ4_2вПачке = ДокументовСЗВ4_2вПачке + 1;
							КонецЕсли; 
							
						КонецЕсли;
						
						// Список застрахованных лиц
						ОбластьСтрокаСписка.Параметры.НомерСтроки = НомерДокумента;
						
						// Проверим, уместится ли строка на странице или надо открывать новую страницу
						ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументСписокЗастрахованныхЛиц, ВыводимыеОбласти);
						Если Не ВывестиПодвалЛиста и НомерДокумента = ИнформацияОПачке.ДокументовВПачке Тогда
							ВыводимыеОбласти.Добавить(ОбластьПодвалСписка);
							ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументСписокЗастрахованныхЛиц, ВыводимыеОбласти);
						КонецЕсли;
						Если ВывестиПодвалЛиста Тогда
							ДокументСписокЗастрахованныхЛиц.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументСписокЗастрахованныхЛиц.Вывести(ПовторятьПриПечатиСтроки);
						КонецЕсли;
						
						ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьСтрокаСписка);
				
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ Вывести42как41 тогда
					//Выведем пустые записи до 10 документов
					НомерДокументаВПачке = Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИССЗВ42, "НомерВпачке"))-1;
					Если НомерДокументаВПачке%10 <> 0 тогда
						Для Н = НомерДокументаВПачке%10 по 9 цикл
							ДокументРезультат.Вывести(ОбластьПустойДокумент);
						КонецЦикла;	
					КонецЕсли;
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОбластьПодвал);
				
				Если СтрокаДереваВходящаяОпись <> Неопределено Тогда
					
					УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат, КоличествоЭкземпляров, НаПринтер, "Индивидуальные сведения (СЗВ-4-" + ?(Вывести42как41,"1","2") + "); пачка №" + НомерПачкиРаботодателя);
					
					ДокументОписи = Новый ТабличныйДокумент;
					ИнформацияОПачке.Вставить("ДокументовСЗВ4_2вПачке", ДокументовСЗВ4_2вПачке);
					ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ4_АДВ_6_1";
					ПроцедурыПерсонифицированногоУчета.ВывестиОписьАДВ6(ДокументОписи, ИнформацияОПачке, ОтветственныеЛица);
					УниверсальныеМеханизмы.НапечататьДокумент(ДокументОписи,КоличествоЭкземпляров, НаПринтер,"Опись документов (АДВ-6-1); пачка №" + НомерПачкиРаботодателя);
					
					ОбластьПодвалСписка.Параметры.ДатаСоставленияОписи = ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
					ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьПодвалСписка);
					УниверсальныеМеханизмы.НапечататьДокумент(ДокументСписокЗастрахованныхЛиц,КоличествоЭкземпляров, НаПринтер,"Список застрахованных лиц; пачка №" + НомерПачкиРаботодателя);
					Возврат "";
				КонецЕсли
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "ФормаСЗВ_6_1" Или ИмяМакета = "ФормаСЗВ_6_2" Тогда
		
		Возврат ПроцедурыПерсонифицированногоУчета.ПечатнаяФормаСЗВ_6(ЭтотОбъект, ТипФормДокументов, ИмяМакета, КоличествоЭкземпляров, НаПринтер, Истина, ОчищатьСообщения)
		
	КонецЕсли;
	
КонецФункции // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтарыеФормы = ЭтоНовый() И Год(ТекущаяДата()) < 2010;	
	
	Если Не ЗначениеЗаполнено(ТипФормДокументов) Тогда
		СтруктураМакетов.Вставить("ФормаСЗВ_6_2", "СЗВ-6-2");
		СтруктураМакетов.Вставить("ФормаСЗВ_6_1", "СЗВ-6-1");
	ИначеЕсли ТипФормДокументов = "СЗВ-6-1" Тогда
		СтруктураМакетов.Вставить("ФормаСЗВ_6_1", "СЗВ-6-1");
	ИначеЕсли ТипФормДокументов = "СЗВ-6-2" Тогда
		СтруктураМакетов.Вставить("ФормаСЗВ_6_2", "СЗВ-6-2");
		СтруктураМакетов.Вставить("ФормаСЗВ_6_1", "СЗВ-6-1");
	ИначеЕсли ТипФормДокументов = "СЗВ-4-1" Тогда
		СтруктураМакетов.Вставить("ФормаСЗВ_4_1", "СЗВ-4-1");
	ИначеЕсли ТипФормДокументов = "СЗВ-4-2" Тогда
		СтруктураМакетов.Вставить("ФормаСЗВ_4_2", "СЗВ-4-2");
		СтруктураМакетов.Вставить("ФормаСЗВ_4_1", "СЗВ-4-1");
	КонецЕсли;
	
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция ФайлДо2010Года(ВыборкаПоШапкеДокумента, КоличествоДокументов, Заголовок, Отказ)
	
	//Выполним проверку записей стажа и получим результат запроса к самим записям
	РезультатЗапросаПоЗаписямСтажа = "";
	Если НЕ ПроцедурыПерсонифицированногоУчета.СЗВ4_ПроверитьНаборЗаписейОСтаже(Ссылка,Новый Структура("ДатаАктуальности,Организация, ГоловнаяОрганизация" , ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод), Организация, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) , РезультатЗапросаПоЗаписямСтажа) тогда
		Отказ = Истина;
		
		Возврат "";
	КонецЕсли;	
	
	Если ТипФормДокументов = "СЗВ-4-1" Тогда
		ТипЗаписиИН = "ИН41";
		ТУвПачке = "";// Территориальные условия указываются в записях о стаже
	Иначе	
		ТипЗаписиИН = "ИН42";
		ТУвПачке = СокрЛП(ВыборкаПоШапкеДокумента.ТерриториальныеУсловияКод);// Территориальные условия едины для всей пачки
	КонецЕсли; 
	
	ДатаЗаполнения 			= ВыборкаПоШапкеДокумента.Дата;
	РасчетныйПериодГод      = ВыборкаПоШапкеДокумента.Год;
	
	////////////////////////////////////////////////////////////////////////////////////////////
	//ФОРМИРУЕМ ФАЙЛ СВЕДЕНИЙ
	
	ТекстФайла	=	"";
	НомерДокументаВПачке = 0;
	
	// Формирование файла версии 04.00
	Если ВыборкаПоШапкеДокумента.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
		
		//Получаем форматы необходимых записей
		ДокументФорматЗаписей = ПолучитьМакет("ФорматЗаписей");
		ФорматЗаписиИН = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи(ТипЗаписиИН,ДокументФорматЗаписей);
		Если ТипЗаписиИН = "ИН41" Тогда
			ФорматЗаписиСТАЖ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("СТАЖ",ДокументФорматЗаписей);
			ФорматЗаписиЛГОТ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ЛГОТ",ДокументФорматЗаписей);
		КонецЕсли;
		
		
		ВыборкаПоРаботникиОрганизации	= РезультатЗапросаПоЗаписямСтажа.Выбрать();
		
		ВсегоНачисленоНаСтраховуюЧастьПФР = 0;
		ВсегоНачисленоНаНакопительнуюЧастьПФР = 0;
		
		Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерСтроки")	Цикл
			
			НомерДокументаВПачке = НомерДокументаВПачке + 1;
			
			// ПРОВЕРКА ДАННЫХ ФИЗЛИЦА
			
			СтрокаНачалаСообщенияОбОшибке = "В строке № """+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) + """: " + "По сотруднику "+ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование + " ";
			
			//Инициалы должны быть указаны
			Фамилия = ВыборкаПоРаботникиОрганизации.Фамилия;
			Имя = ВыборкаПоРаботникиОрганизации.Имя;
			Отчество = ВыборкаПоРаботникиОрганизации.Отчество;
			Если "" + Фамилия + Имя + Отчество = ""  тогда
				ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование,Фамилия,Имя,Отчество);
			КонецЕсли;	
			
			Если СокрЛП(СтрЗаменить(ВыборкаПоРаботникиОрганизации.АдресДляИнформирования, ",","")) <> "" Тогда
				АдресДляИнформирования = ВыборкаПоРаботникиОрганизации.АдресДляИнформирования;
			Иначе	
				АдресДляИнформирования = "";	
			КонецЕсли; 
			
			Если ВидКорректировки <> "ОТМН"  Тогда
				Если ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода = NULL И ВыборкаПоРаботникиОрганизации.НачисленоНаСтраховуюЧастьПФР = 0 И ВыборкаПоРаботникиОрганизации.НачисленоНаНакопительнуюЧастьПФР = 0 Тогда
					Сообщить(СтрокаНачалаСообщенияОбОшибке + "- Данных о стаже и взносах не обнаружено!");
					Отказ = Истина;
				КонецЕсли; 
			КонецЕсли; 
			
			// ФОРМИРОВАНИЕ ЗАПИСЕЙ ИН41 и ИН42
			
			// Общие данные записей ИН41 и ИН42
			ЗаписьИН = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиИН);
			ЗаписьИН.ТипЗаписи = ТипЗаписиИН;
			ЗаписьИН.НомерДокументаВПачке = НомерДокументаВПачке;
			ЗаписьИН.СтраховойНомер = ВыборкаПоРаботникиОрганизации.СтраховойНомерПФР;
			ЗаписьИН.Фамилия = ВРЕГ(Фамилия);
			ЗаписьИН.Имя = ВРЕГ(Имя);
			ЗаписьИН.Отчество = ВРЕГ(Отчество);
			ЗаписьИН.РасчетныйПериодГод = РасчетныйПериодГод;
			
			ЗаписьИН.ДатаЗаполнения = ДатаЗаполнения;
			
			Если ВидКорректировки = "ОТМН" Тогда// Для отменяюмей корректировки больше ничего не надо
				//	Добавим в файл запись ИН
				СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьИН,ФорматЗаписиИН);
				ТекстФайла	=	ТекстФайла	+	СтрокавФайл + Символы.ПС;
				
				ЗаписьИН.Удалить("АдресДляИнформирования");
				Продолжить;
			КонецЕсли; 
			ЗаписьИН.АдресДляИнформирования = ВРЕГ(АдресДляИнформирования);
			
			ЗаписьИН.НачисленоСтраховаяЧасть = ВыборкаПоРаботникиОрганизации.НачисленоНаСтраховуюЧастьПФР;
			ЗаписьИН.НачисленоНакопительнаяЧасть = ВыборкаПоРаботникиОрганизации.НачисленоНаНакопительнуюЧастьПФР;
			ЗаписьИН.ВременнаяНетрудоспособностьМесяцев = Цел(ВыборкаПоРаботникиОрганизации.ДнейБолезни/30);
			ЗаписьИН.ВременнаяНетрудоспособностьДней = ВыборкаПоРаботникиОрганизации.ДнейБолезни%30;
			ЗаписьИН.ОтпускМесяцев = Цел(ВыборкаПоРаботникиОрганизации.ДнейОтпускаЗаСвойСчет/30);
			ЗаписьИН.ОтпускДней = ВыборкаПоРаботникиОрганизации.ДнейОтпускаЗаСвойСчет%30;
			
			
			// Итоги по пачке
			ВсегоНачисленоНаСтраховуюЧастьПФР = ВсегоНачисленоНаСтраховуюЧастьПФР + ВыборкаПоРаботникиОрганизации.НачисленоНаСтраховуюЧастьПФР;
			ВсегоНачисленоНаНакопительнуюЧастьПФР = ВсегоНачисленоНаНакопительнуюЧастьПФР + ВыборкаПоРаботникиОрганизации.НачисленоНаНакопительнуюЧастьПФР;
			
			
			// СБОР ДАННЫХ О СТАЖЕ
			
			//Переменный для хранения строк о стаже работника (для формы СЗВ-4-1)
			ЧислоОсновныхЗаписейОСтаже = 0;
			СтрокиСтажРаботникаОрганизации = "";
			// Признак наличия у работника основания для льготного стажа
			РаботникОрганизацииИмеетЛьготныйСтаж = ЛОЖЬ;
			// Признак соответствия территориальных условий стажа работника и пачки (для формы СЗВ-4-2)
			ТУРаботникаНеСоответствуютПачке = ЛОЖЬ;
			
			Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл
				
				ЧислоОсновныхЗаписейОСтаже = ЧислоОсновныхЗаписейОСтаже + 1; 
				
				Если ТипФормДокументов = "СЗВ-4-2" Тогда
					// Заполнение периода работы  для записи ИН42
					
					Если ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи = 1 Тогда
						
						ЗаписьИН.ПериодРаботыДатаС = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
						ЗаписьИН.ПериодРаботыДатаПо = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
						
						// Признак наличия у работника основания для льготного стажа
						Если НЕ ПустаяСтрока(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод) ИЛИ НЕ ПустаяСтрока(ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод) ИЛИ НЕ ПустаяСтрока(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод) Тогда
							
							РаботникОрганизацииИмеетЛьготныйСтаж = Истина;
							
						Иначе
							// Проверяем сооответствие территориальных условий пачке
							Если Строка(ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод) <> ТУвПачке Тогда
								ТУРаботникаНеСоответствуютПачке = Истина;
							КонецЕсли; 
							
						КонецЕсли; 
						
					КонецЕсли; 
					
				Иначе	// ТипФормДокументов = "СЗВ-4-1"
					
					//Берем пустую запись "Основная запись о стаже"
					ЗаписьСТАЖ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиСТАЖ);
					ЗаписьСТАЖ.ТипЗаписи = "СТАЖ";
					ЗаписьСТАЖ.НомерПериода = ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи;
					ЗаписьСТАЖ.ДатаНачалаПериода = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
					ЗаписьСТАЖ.ДатаОкончанияПериода = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
					ЗаписьСТАЖ.ОсобыеУсловияТрудаКод = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
					ЗаписьСТАЖ.КодПозицииСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
					ЗаписьСТАЖ.ОснованиеИсчисляемогоСтажаКод = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
					ЗаписьСТАЖ.ПервыйПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
					ЗаписьСТАЖ.ВторойПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
					ЗаписьСТАЖ.ТретийПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
					ЗаписьСТАЖ.ОснованиеВыслугиЛетКод = ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод;
					ЗаписьСТАЖ.ПервыйПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
					ЗаписьСТАЖ.ВторойПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
					ЗаписьСТАЖ.ТретийПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
					ЗаписьСТАЖ.ТерриториальныеУсловияКод = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
					//ЗаписьЛГОТ.РайонныйКоэффициент = ВыборкаПоРаботникиОрганизации.РайонныйКоэффициент;
					
				КонецЕсли; 
				
				//Переменный для хранения дополнительных записей о стаже
				ЧислоДополнительныхЗаписейОСтаже = 0;
				СтрокиДополнительныеЗаписи = "";
				
				Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
					
					//В дополнительной записи с номером 0 находится информация об основной записи
					Если ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи = 0 тогда
						Продолжить;
					КонецЕсли;	
					
					РаботникОрганизацииИмеетЛьготныйСтаж = Истина;
					
					Если ТипФормДокументов = "СЗВ-4-1" Тогда
						
						ЧислоДополнительныхЗаписейОСтаже = ЧислоДополнительныхЗаписейОСтаже + 1;
						
						//Берем пустую запись "Запись о льготном стаже"
						ЗаписьЛГОТ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиЛГОТ);
						ЗаписьЛГОТ.ТипЗаписи = "ЛГОТ";
						ЗаписьЛГОТ.НомерЗаписи = ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи;
						ЗаписьЛГОТ.ОсобыеУсловияТрудаКод = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
						ЗаписьЛГОТ.КодПозицииСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
						ЗаписьЛГОТ.ОснованиеИсчисляемогоСтажаКод = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
						ЗаписьЛГОТ.ПервыйПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
						ЗаписьЛГОТ.ВторойПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
						ЗаписьЛГОТ.ТретийПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
						ЗаписьЛГОТ.ОснованиеВыслугиЛетКод = ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод;
						ЗаписьЛГОТ.ПервыйПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
						ЗаписьЛГОТ.ВторойПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
						ЗаписьЛГОТ.ТретийПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
						ЗаписьЛГОТ.ТерриториальныеУсловияКод = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
						//ЗаписьЛГОТ.РайонныйКоэффициент = ВыборкаПоРаботникиОрганизации.РайонныйКоэффициент;
						
						//Сохраним запись ЛГОТ
						СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьЛГОТ, ФорматЗаписиЛГОТ);
						СтрокиДополнительныеЗаписи = СтрокиДополнительныеЗаписи + СтрокавФайл + Символы.ПС;
					КонецЕсли; 
					
				КонецЦикла;// Выборка по дополнительным записям о стаже
				
				Если ТипФормДокументов = "СЗВ-4-1" Тогда
					
					ЗаписьСТАЖ.ЧислоДополнительныхЗаписей = ЧислоДополнительныхЗаписейОСтаже;
					
					//Сохраним запись СТАЖ
					СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьСТАЖ,ФорматЗаписиСТАЖ);
					СтрокиСтажРаботникаОрганизации  = СтрокиСтажРаботникаОрганизации + СтрокавФайл + Символы.ПС;
					
					//Добавим записи ЛГОТ
					СтрокиСтажРаботникаОрганизации  = СтрокиСтажРаботникаОрганизации + ВРЕГ(СтрокиДополнительныеЗаписи);
					
				КонецЕсли;	
				
			КонецЦикла;// Выборка по основным записям о стаже
			
			
			// ДОБАВЛЯЕМ ЗАПИСЬ ИН В ФАЙЛ
			
			Если ТипФормДокументов = "СЗВ-4-1" Тогда
				
				ЗаписьИН.ЧислоОсновныхЗаписейОСтаже = ЧислоОсновныхЗаписейОСтаже;
				
				//	Добавляем в файл записи ИН41, СТАЖ И ЛГОТ
				СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьИН,ФорматЗаписиИН);
				ТекстФайла	=	ТекстФайла	+	СтрокавФайл + Символы.ПС + ВРег(СтрокиСтажРаботникаОрганизации);
				
			Иначе// Проверки для формы СЗВ-4-2
				Если Не Отказ Тогда
					Если (ЧислоОсновныхЗаписейОСтаже > 1) ИЛИ (СтрЧислоСтрок(СтрокиСтажРаботникаОрганизации) > 1) Тогда
						Сообщить(СтрокаНачалаСообщенияОбОшибке + "- Сотрудник имеет более одной записи о стаже.
						|				Данные необходимо подавать по форме СЗВ-4-1!");
						Отказ = Истина;
						
					ИначеЕсли РаботникОрганизацииИмеетЛьготныйСтаж тогда	
						Сообщить(СтрокаНачалаСообщенияОбОшибке + "- В записях о стаже имеется льготный стаж. 
						|				Данные необходимо подавать по форме СЗВ-4-1!");
						Отказ = Истина;
						
					ИначеЕсли ТУРаботникаНеСоответствуютПачке тогда	
						Сообщить(СтрокаНачалаСообщенияОбОшибке + "- Территориальные условия не соответствуют пачке!");
						Отказ = Истина;
						
					КонецЕсли;
				КонецЕсли;
				
				//	Добавляем в файл записи ИН42
				СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьИН,ФорматЗаписиИН);
				ТекстФайла	=	ТекстФайла	+	СтрокавФайл + Символы.ПС;
				
			КонецЕсли; 
			
		КонецЦикла;// Выборка работников  
		
		// Если указан вид корректировки, то ИСХД в файл выводить не надо
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ и ВыборкаПоШапкеДокумента.ВидКорректировки <>"" Тогда
			ТипСведенийДляЗаписиПачки = "";
		Иначе	
			ТипСведенийДляЗаписиПачки = ?(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ,"ИСХД","ПЕНС");
		КонецЕсли; 
		
		ЗаголовокФайла	=	ПроцедурыПерсонифицированногоУчета.ПолучитьЗаписьЗаголовок();
		ЗаголовокФайла	=	ЗаголовокФайла + ПроцедурыПерсонифицированногоУчета.ПолучитьЗаписьОРаботодателе(ВыборкаПоШапкеДокумента.Организация, ВыборкаПоШапкеДокумента.Дата, Отказ);
		ЗаголовокФайла	=	ЗаголовокФайла + ПроцедурыПерсонифицированногоУчета.ПолучитьЗаписьОПачке(СокрЛП(НомерПачки), ДатаЗаполнения, ТипСведенийДляЗаписиПачки,ВыборкаПоШапкеДокумента.ВидКорректировки, РасчетныйПериодГод, ВыборкаПоШапкеДокумента.КодОсновногоТарифа, ТУвПачке, ВсегоНачисленоНаСтраховуюЧастьПФР, ВсегоНачисленоНаНакопительнуюЧастьПФР);
		ЗаголовокФайла	=	ЗаголовокФайла + ПроцедурыПерсонифицированногоУчета.ПолучитьЗаписьОТипеДокумента(ТипЗаписиИН, КоличествоДокументов);
		
		ТекстФайла = ЗаголовокФайла + ТекстФайла;
		
	ИначеЕсли ВыборкаПоШапкеДокумента.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда 
		
		// Формат файла 07.00
		
		// Список стран
		СписокСтран = Новый Соответствие;
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КлассификаторСтранМира.Наименование,
		|	КлассификаторСтранМира.Код
		|ИЗ
		|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокСтран.Вставить(СокрЛП(Выборка.Наименование), Строка(Выборка.Код));
		КонецЦикла;
		
		// Загружаем формат файла сведений
		МакетФормата = ПолучитьОбщийМакет("ФорматПФР70");
		
		НомерДокументаВПачке = 1;
		// Создаем начальное дерево
		ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
		
		УзелПФР = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ФайлПФР", "", );
		
		ПроцедурыПерсонифицированногоУчета.ЗаполнитьИмяИЗаголовокФайла(УзелПФР, МакетФормата, ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(Ссылка, ВыборкаПоШапкеДокумента.Год, ВыборкаПоШапкеДокумента));
		
		ТипДокументовПачки = "ИС_"+ТипФормДокументов;
		УзелПачкаСЗВ4 = "";
		НаборЗаписейИтогоСуммаВзносов = "";
		// Добавляем реквизит ПачкаВходящихДокументов
		УзелПачкаВходящихДокументов = ПроцедурыПерсонифицированногоУчета.ЗаполнитьНаборЗаписейВходящаяОпись(УзелПФР, МакетФормата, ТипДокументовПачки, ВыборкаПоШапкеДокумента, КоличествоДокументов, СокрЛП(НомерПачки), НомерДокументаВПачке, УзелПачкаСЗВ4, НаборЗаписейИтогоСуммаВзносов);
		
		Сокращение = "";
		ФорматИССЗВ4 = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, СтрЗаменить(ТипДокументовПачки, "-", "_"));
		Если ТипДокументовПачки = "ИС_СЗВ-4-2" Тогда
			ФорматИССЗВ4.ВсеПериодыРаботы.Значение.ПериодРаботы.Значение.Удалить("ДополнительныеСтроки");
			ФорматИССЗВ4.ВсеПериодыРаботы.Значение.ПериодРаботы.Значение.ОсновнаяСтрока.Значение.Удалить("ОсобенностиУчета");
		КонецЕсли;
		
		ФорматИностранныйАдрес = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "АдресОбщий", 3);
		ФорматНеструктурированныйАдрес = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "АдресОбщий", 2);
		
		ВыборкаПоРаботникиОрганизации	= РезультатЗапросаПоЗаписямСтажа.Выбрать();
		
		ВсегоНачисленоНаСтраховуюЧастьПФР = 0;
		ВсегоНачисленоНаНакопительнуюЧастьПФР = 0;
		ВсегоНачисленоПоДополнительномуТарифу = 0;
		
		Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерСтроки")	Цикл
			
			НомерДокументаВПачке = НомерДокументаВПачке + 1;
			
			НаборЗаписейСЗВ4 = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматИССЗВ4);
			// ПРОВЕРКА ДАННЫХ ФИЗЛИЦА
			
			СтрокаНачалаСообщенияОбОшибке = "В строке № """+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) + """: " + "По сотруднику "+ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование + " ";
			
			//Инициалы должны быть указаны
			Фамилия = СокрЛП(ВыборкаПоРаботникиОрганизации.Фамилия);
			Имя = СокрЛП(ВыборкаПоРаботникиОрганизации.Имя);
			Отчество = СокрЛП(ВыборкаПоРаботникиОрганизации.Отчество);
			Если "" + Фамилия + Имя + Отчество = ""  тогда
				ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование,Фамилия,Имя,Отчество);
			КонецЕсли;	
			
			Если СокрЛП(СтрЗаменить(ВыборкаПоРаботникиОрганизации.АдресДляИнформирования, ",","")) <> "" Тогда
				АдресДляИнформирования = ВыборкаПоРаботникиОрганизации.АдресДляИнформирования;
			Иначе	
				АдресДляИнформирования = "";	
			КонецЕсли; 
			
			Если ВидКорректировки <> "ОТМН"  Тогда
				Если ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода = NULL И ВыборкаПоРаботникиОрганизации.НачисленоНаСтраховуюЧастьПФР = 0 И ВыборкаПоРаботникиОрганизации.НачисленоНаНакопительнуюЧастьПФР = 0 Тогда
					Сообщить(СтрокаНачалаСообщенияОбОшибке + "- Данных о стаже и взносах не обнаружено!");
					Отказ = Истина;
				КонецЕсли; 
			КонецЕсли; 
			
			НаборЗаписейСЗВ4.НомерВПачке.Значение = НомерДокументаВПачке;
			НаборЗаписейСЗВ4.ВидФормы.Значение = ВыборкаПоШапкеДокумента.ТипФормДокументов;
			НаборЗаписейСЗВ4.ТипСведений.Значение = Строка(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ);
			
			Если ВыборкаПоШапкеДокумента.ВидКорректировки = "КОРР" Тогда
				НаборЗаписейСЗВ4.ВидКорректировки.Значение = "КОРРЕКТИРУЮЩАЯ";
			ИначеЕсли ВыборкаПоШапкеДокумента.ВидКорректировки = "ОТМН" Тогда
				НаборЗаписейСЗВ4.ВидКорректировки.Значение = "ОТМЕНЯЮЩАЯ";
			Иначе
				НаборЗаписейСЗВ4.Удалить("ВидКорректировки");
			КонецЕсли;
			
			НаборЗаписейСЗВ4.СтраховойНомер.Значение = ВыборкаПоРаботникиОрганизации.СтраховойНомерПФР;
			НаборЗаписейФИО = НаборЗаписейСЗВ4.ФИО.Значение;
			НаборЗаписейФИО.Фамилия = ВРег(Фамилия);
			НаборЗаписейФИО.Имя = ВРег(Имя);
			НаборЗаписейФИО.Отчество = ВРег(Отчество);
			
			НаборЗаписейСЗВ4.РасчетныйПериод.Значение = РасчетныйПериодГод;
			НаборЗаписейСЗВ4.ДатаЗаполнения.Значение = ВыборкаПоШапкеДокумента.Дата;
			
			// Заполняем адрес застрахованного лица, если он есть.
			Если ВыборкаПоШапкеДокумента.ВидКорректировки = "ОТМН" Тогда
				НаборЗаписейСЗВ4.Удалить("АдресЗЛ");
			ИначеЕсли ПустаяСтрока(ВыборкаПоРаботникиОрганизации.АдресДляИнформирования) Тогда
				НаборЗаписейСЗВ4.Удалить("АдресЗЛ");
			Иначе
				ТекстОшибки  ="";
				НаборЗаписейАдресЗЛ = НаборЗаписейСЗВ4.АдресЗЛ.Значение;
				ПроцедурыПерсонифицированногоУчета.ЗаполнитьАдрес(НаборЗаписейАдресЗЛ, ВыборкаПоРаботникиОрганизации.АдресДляИнформирования, 
				СписокСтран, ФорматНеструктурированныйАдрес, ФорматИностранныйАдрес, ТекстОшибки);
				НаборЗаписейСЗВ4.АдресЗЛ.Значение = НаборЗаписейАдресЗЛ;
				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
					Сообщить("Предупреждение: Строка №"+ВыборкаПоРаботникиОрганизации.НомерСтроки+": Сотрудник "+ВыборкаПоРаботникиОрганизации.ФизЛицо+ " Адрес" + ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			// Страхователь
			НаборЗаписейСтрахователь = НаборЗаписейСЗВ4.Страхователь.Значение;
			ПроцедурыПерсонифицированногоУчета.ЗаполнитьСоставительПачки(НаборЗаписейСтрахователь, ВыборкаПоШапкеДокумента);
			
			// Тариф страховых взносов
			НаборЗаписейТарифСтраховыхВзносов = НаборЗаписейСЗВ4.ТарифСтраховыхВзносов.Значение;
			НаборЗаписейТарифСтраховыхВзносов.КодКатегории = ВыборкаПоШапкеДокумента.КодОсновногоТарифа;
			Если ВыборкаПоШапкеДокумента.КодОсновногоТарифа = "НР" Тогда
				НаборЗаписейТарифСтраховыхВзносов.НазваниеКатегории = "НАЕМ/РАБОТНИК";
			ИначеЕсли ВыборкаПоШапкеДокумента.КодОсновногоТарифа = "СХ" Тогда
				НаборЗаписейТарифСтраховыхВзносов.НазваниеКатегории = "С/Х ОРГАНИЗАЦИЯ";
			КонецЕсли;
			
			// Код дополнительного тарифа
			Если ВыборкаПоРаботникиОрганизации.НачисленоПоДополнительномуТарифу <> 0 Тогда
				НаборЗаписейТарифСтраховыхВзносов.КодДополнительногоТарифа = "АВИА";
				НаборЗаписейТарифСтраховыхВзносов.НазваниеДополнительногоТарифа = "ЧЛЕН ЛЭВС";
			КонецЕсли;
			
			Если ВидКорректировки <> "ОТМН" Тогда
				// Начислено взносов основных
				НаборЗаписейНачисленоВзносовОсновных = НаборЗаписейСЗВ4.НачисленоВзносовОсновных.Значение;
				НаборЗаписейНачисленоВзносовОсновных.Страховые = ВыборкаПоРаботникиОрганизации.НачисленоНаСтраховуюЧастьПФР;
				НаборЗаписейНачисленоВзносовОсновных.Накопительные = ВыборкаПоРаботникиОрганизации.НачисленоНаНакопительнуюЧастьПФР;
				НаборЗаписейНачисленоВзносовОсновных.Дополнительные = ВыборкаПоРаботникиОрганизации.НачисленоПоДополнительномуТарифу;
				
				// Начислено взносов ранее
				НаборЗаписейНачисленоВзносовРанее = НаборЗаписейСЗВ4.НачисленоВзносовРанее.Значение;
				НаборЗаписейНачисленоВзносовРанее.Страховые = ВыборкаПоРаботникиОрганизации.НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР;
				НаборЗаписейНачисленоВзносовРанее.Накопительные = ВыборкаПоРаботникиОрганизации.НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР;
				
				// Итоги по пачке
				ВсегоНачисленоНаСтраховуюЧастьПФР = ВсегоНачисленоНаСтраховуюЧастьПФР + ВыборкаПоРаботникиОрганизации.НачисленоНаСтраховуюЧастьПФР;
				ВсегоНачисленоНаНакопительнуюЧастьПФР = ВсегоНачисленоНаНакопительнуюЧастьПФР + ВыборкаПоРаботникиОрганизации.НачисленоНаНакопительнуюЧастьПФР;
				ВсегоНачисленоПоДополнительномуТарифу = ВсегоНачисленоПоДополнительномуТарифу + ВыборкаПоРаботникиОрганизации.НачисленоПоДополнительномуТарифу;
				
				
				// Больничные листы
				НаборЗаписейБольничныеЛисты = НаборЗаписейСЗВ4.БольничныеЛисты.Значение;
				НаборЗаписейБольничныеЛисты.ВсеГоды = 0;
				НаборЗаписейБольничныеЛисты.ВсеМесяцы = Цел(ВыборкаПоРаботникиОрганизации.ДнейБолезни/30);
				НаборЗаписейБольничныеЛисты.ВсеДни = ВыборкаПоРаботникиОрганизации.ДнейБолезни%30;
				
				// Административный отпуск
				НаборЗаписейАдминистративныйОтпуск = НаборЗаписейСЗВ4.АдминистративныйОтпуск.Значение;
				НаборЗаписейАдминистративныйОтпуск.ВсеГоды = 0;
				НаборЗаписейАдминистративныйОтпуск.ВсеМесяцы = Цел(ВыборкаПоРаботникиОрганизации.ДнейОтпускаЗаСвойСчет/30);
				НаборЗаписейАдминистративныйОтпуск.ВсеДни = ВыборкаПоРаботникиОрганизации.ДнейОтпускаЗаСвойСчет%30;
			КонецЕсли;
			
			//Переменный для хранения строк о стаже работника (для формы СЗВ-4-1)
			ЧислоОсновныхЗаписейОСтаже = 0;
			СтрокиСтажРаботникаОрганизации = "";
			// Признак наличия у работника основания для льготного стажа
			РаботникОрганизацииИмеетЛьготныйСтаж = ЛОЖЬ;
			// Признак соответствия территориальных условий стажа работника и пачки (для формы СЗВ-4-2)
			ТУРаботникаНеСоответствуютПачке = ЛОЖЬ;
			
			Если ТипФормДокументов = "СЗВ-4-2" Тогда
				
				Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл
					Если ВидКорректировки <> "ОТМН" 
						И ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи = 1 Тогда
						
						ЧислоОсновныхЗаписейОСтаже = ЧислоОсновныхЗаписейОСтаже + 1; 
						
						НаборЗаписейСЗВ4.ВсеПериодыРаботы.Значение.Количество.Значение = 1;
						НаборЗаписейОсновнаяСтрока = НаборЗаписейСЗВ4.ВсеПериодыРаботы.Значение.ПериодРаботы.Значение.ОсновнаяСтрока.Значение;
						НаборЗаписейОсновнаяСтрока.НомерСтроки.Значение = 1;
						НаборЗаписейОсновнаяСтрока.ДатаНачалаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
						НаборЗаписейОсновнаяСтрока.ДатаКонцаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
						
						// Признак наличия у работника основания для льготного стажа
						Если НЕ ПустаяСтрока(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод) ИЛИ НЕ ПустаяСтрока(ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод) ИЛИ НЕ ПустаяСтрока(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод) Тогда
							
							РаботникОрганизацииИмеетЛьготныйСтаж = Истина;
							
						Иначе
							// Проверяем сооответствие территориальных условий пачке
							Если Строка(ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод) <> ТУвПачке Тогда
								ТУРаботникаНеСоответствуютПачке = Истина;
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						НаборЗаписейСЗВ4.Удалить("ВсеПериодыРаботы");
					КонецЕсли;
					ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,""), НаборЗаписейСЗВ4);
				КонецЦикла;
				
				Если Не Отказ Тогда
					Если (ЧислоОсновныхЗаписейОСтаже > 1) ИЛИ (СтрЧислоСтрок(СтрокиСтажРаботникаОрганизации) > 1) Тогда
						Сообщить(СтрокаНачалаСообщенияОбОшибке + "- Сотрудник имеет более одной записи о стаже.
						|				Данные необходимо подавать по форме СЗВ-4-1!");
						Отказ = Истина;
						
					ИначеЕсли РаботникОрганизацииИмеетЛьготныйСтаж Тогда
						Сообщить(СтрокаНачалаСообщенияОбОшибке + "- В записях о стаже имеется льготный стаж. 
						|				Данные необходимо подавать по форме СЗВ-4-1!");
						Отказ = Истина;
						
					ИначеЕсли ТУРаботникаНеСоответствуютПачке Тогда
						Сообщить(СтрокаНачалаСообщенияОбОшибке + "- Территориальные условия не соответствуют пачке!");
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипФормДокументов = "СЗВ-4-1" Тогда
				
				ФорматПериодРаботы = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(НаборЗаписейСЗВ4.ВсеПериодыРаботы.Значение);
				ФорматПериодРаботы.Удалить("Количество");
				ФорматКоличествоПериодовРаботы = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(НаборЗаписейСЗВ4.ВсеПериодыРаботы.Значение);
				ФорматКоличествоПериодовРаботы.Удалить("ПериодРаботы");
				НаборЗаписейСЗВ4.Удалить("ВсеПериодыРаботы");
				ФорматОсобенностиУчета = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматПериодРаботы);
				ФорматОсобенностиУчета.ПериодРаботы.Значение.Удалить("ОсновнаяСтрока");
				ФорматПериодРаботы.ПериодРаботы.Значение.Удалить("ДополнительныеСтроки");
				ФорматДопОсобенностиУчета = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОсобенностиУчета.ПериодРаботы.Значение.ДополнительныеСтроки.Значение.ОсобенностиУчета.Значение);
				УзелСЗВ41 = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,"");
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелСЗВ41, НаборЗаписейСЗВ4);
				
				Если ВидКорректировки <> "ОТМН" И ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи <> NULL Тогда
					
					УзелВсеПериодыРаботы = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСЗВ41, "ВсеПериодыРаботы","");
					ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелВсеПериодыРаботы, ФорматКоличествоПериодовРаботы);
					КоличествоПериодов = 0;
					
					Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл	
						
						УзелПериодРаботы = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелВсеПериодыРаботы, "ПериодРаботы", "");
						
						НаборЗаписейПериодРаботы = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматПериодРаботы);
						НаборЗаписейОсновнаяСтрока = НаборЗаписейПериодРаботы.ПериодРаботы.Значение.ОсновнаяСтрока.Значение;
						НаборЗаписейОсновнаяСтрока.НомерСтроки.Значение = ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи;
						НаборЗаписейОсновнаяСтрока.ДатаНачалаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
						НаборЗаписейОсновнаяСтрока.ДатаКонцаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
						НаборЗаписейОсобенностиУчета = НаборЗаписейОсновнаяСтрока.ОсобенностиУчета.Значение;
						
						// Территориальные условия
						НаборЗаписейТерриториальныеУсловия = НаборЗаписейОсобенностиУчета.ТерриториальныеУсловия.Значение;
						Если ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ" Тогда
							НаборЗаписейТерриториальныеУсловия.ОснованиеТУ = "";
						Иначе
							НаборЗаписейТерриториальныеУсловия.ОснованиеТУ = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
						КонецЕсли;
						
						
						// Особые условия труда
						НаборЗаписейОсобыеУсловияТруда = НаборЗаписейОсобенностиУчета.ОсобыеУсловияТруда.Значение;
						НаборЗаписейОсобыеУсловияТруда.ОснованиеОУТ = СокрЛП(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод);
						НаборЗаписейОсобыеУсловияТруда.ПозицияСписка = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод));
						
						// Исчисляемый стаж
						НаборЗаписейИсчисляемыйСтаж = НаборЗаписейОсобенностиУчета.ИсчисляемыйСтаж.Значение;
						НаборЗаписейИсчисляемыйСтаж.ОснованиеИС.Значение = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
						Если ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа > 0
							ИЛИ ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
							НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВыработкаКалендарная.Значение;
							НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
							НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
						КонецЕсли;
						
						
						// Выслуга лет
						НаборЗаписейВыслугаЛет = НаборЗаписейОсобенностиУчета.ВыслугаЛет.Значение;
						НаборЗаписейВыслугаЛет.Удалить("КодИсчисления");
						НаборЗаписейВыслугаЛет.ОснованиеВЛ.Значение = СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод);
						НаборЗаписейВыслугаЛет.ДоляСтавки.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
						НаборЗаписейВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВыработкаВЧасах.Значение;
						НаборЗаписейВыработкаВЧасах.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаВЧасах.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
						
						//ДекретДети
						Если ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа = "ДЕКРЕТ"
							ИЛИ ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ" Тогда
							НаборЗаписейОсобенностиУчета.ДекретДети.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
						КонецЕсли;
						
						КоличествоПериодов = КоличествоПериодов + 1;
						
						ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелПериодРаботы, НаборЗаписейПериодРаботы.ПериодРаботы.Значение);
						
						//Переменный для хранения дополнительных записей о стаже
						ЧислоДополнительныхЗаписейОСтаже = 0;
						
						Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
							
							//В дополнительной записи с номером 0 находится информация об основной записи
							Если ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи = 0 тогда
								Продолжить;
							КонецЕсли;	
							Если ЧислоДополнительныхЗаписейОСтаже = 0 Тогда
								УзелДополнительныеСтроки = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПериодРаботы, "ДополнительныеСтроки", "");
								ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелДополнительныеСтроки, ФорматКоличествоПериодовРаботы);
							КонецЕсли;
							
							ЧислоДополнительныхЗаписейОСтаже = ЧислоДополнительныхЗаписейОСтаже + 1;
							
							НаборЗаписейДопОсобенностиУчета = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматДопОсобенностиУчета);
							
							// Территориальные условия
							НаборЗаписейДопТерриториальныеУсловия = НаборЗаписейДопОсобенностиУчета.ТерриториальныеУсловия.Значение;
							НаборЗаписейДопТерриториальныеУсловия.ОснованиеТУ = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;							
							
							// Особые условия труда
							НаборЗаписейДопОсобыеУсловияТруда = НаборЗаписейДопОсобенностиУчета.ОсобыеУсловияТруда.Значение;
							НаборЗаписейДопОсобыеУсловияТруда.ОснованиеОУТ = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
							НаборЗаписейДопОсобыеУсловияТруда.ПозицияСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
							
							// Исчисляемый стаж
							НаборЗаписейДопИсчисляемыйСтаж = НаборЗаписейДопОсобенностиУчета.ИсчисляемыйСтаж.Значение;
							НаборЗаписейДопИсчисляемыйСтаж.ОснованиеИС.Значение = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
							Если ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа > 0
								ИЛИ ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
								НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВыработкаКалендарная.Значение;
								НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
								НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
							КонецЕсли;
							
							
							// Выслуга лет
							НаборЗаписейДопВыслугаЛет = НаборЗаписейДопОсобенностиУчета.ВыслугаЛет.Значение;
							НаборЗаписейДопВыслугаЛет.Удалить("КодИсчисления");
							НаборЗаписейДопВыслугаЛет.ОснованиеВЛ.Значение = СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод);
							НаборЗаписейДопВыслугаЛет.ДоляСтавки.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
							НаборЗаписейДопВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВыработкаВЧасах.Значение;
							НаборЗаписейДопВыработкаВЧасах.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
							НаборЗаписейДопВыработкаВЧасах.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
							
							//ДекретДети
							Если ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа = "ДЕКРЕТ"
								ИЛИ ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ" Тогда
								НаборЗаписейДопОсобенностиУчета.ДекретДети.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
							КонецЕсли;
							
							// Профессия должность
							//НаборЗаписейДопОсобенностиУчета.ПрофессияДолжность.Значение = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.КодПозицииСписка.Наименование));
							
							// Добавляем строку в структуру
							ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелДополнительныеСтроки, "ОсобенностиУчета", ""), НаборЗаписейДопОсобенностиУчета);
							
						КонецЦикла;// Выборка по дополнительным записям о стаже
						Если ЧислоДополнительныхЗаписейОСтаже > 0 Тогда
							УзелДополнительныеСтроки.Строки[0].Значение = ЧислоДополнительныхЗаписейОСтаже;
						КонецЕсли;
						
					КонецЦикла;	
					УзелВсеПериодыРаботы.Строки[0].Значение = КоличествоПериодов;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// ИтогоСтраховыеВзносы
		НаборЗаписейИтогоСуммаВзносов.Страховые.Значение = ВсегоНачисленоНаСтраховуюЧастьПФР;
		НаборЗаписейИтогоСуммаВзносов.Накопительные.Значение = ВсегоНачисленоНаНакопительнуюЧастьПФР;
		НаборЗаписейИтогоСуммаВзносов.Дополнительные.Значение = ВсегоНачисленоПоДополнительномуТарифу;
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПачкаСЗВ4, "ИтогоСуммаВзносов",""), НаборЗаписейИтогоСуммаВзносов);
		
		// Устанавливаем Код дополнительного тарифа (АВИА)
		Если ВсегоНачисленоПоДополнительномуТарифу <> 0 Тогда
			СтрокиТарифСтраховыхВзносов = УзелПачкаСЗВ4.Строки.Найти("ТарифСтраховыхВзносов");
			Если СтрокиТарифСтраховыхВзносов <> Неопределено Тогда
				СтрокиКодДополнительногоТарифа = СтрокиТарифСтраховыхВзносов.Строки.Найти("КодДополнительногоТарифа");
				Если СтрокиКодДополнительногоТарифа <> Неопределено Тогда
					СтрокиКодДополнительногоТарифа.Значение = "АВИА";
				КонецЕсли;
				СтрокиНазваниеДополнительногоТарифа = СтрокиТарифСтраховыхВзносов.Строки.Найти("НазваниеДополнительногоТарифа");
				Если СтрокиНазваниеДополнительногоТарифа <> Неопределено Тогда
					СтрокиНазваниеДополнительногоТарифа.Значение = "ЧЛЕН ЛЭВС";
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Преобразуем дерево в строковое описание XML
		ТекстФайла = ПроцедурыПерсонифицированногоУчета.ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки);
		
	КонецЕсли;
	
	Если Отказ тогда
		
		Возврат "";
	КонецЕсли;	 
	
	Возврат ТекстФайла
	
КонецФункции // ФайлДо2010Года()

// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
Функция СформироватьВыходнойФайл(Отказ, ПроверятьДанные = Истина, ВыборкаПоШапкеДокумента = Неопределено, РезультатЗапросаПоЗаписямСтажа = Неопределено) Экспорт
	
	Если ЗаполненПринятымиСведениями Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АрхивДанныхРегламентированнойОтчетности.Данные
		|ИЗ
		|	РегистрСведений.АрхивДанныхРегламентированнойОтчетности КАК АрхивДанныхРегламентированнойОтчетности
		|ГДЕ
		|	АрхивДанныхРегламентированнойОтчетности.Объект = &ДокументСсылка";
		
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		Если ВыборкаДанных.Следующий() тогда
			Возврат ВыборкаДанных.Данные;
		Иначе	
			Возврат "";
		КонецЕсли;	 
		
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	
	//Проверка корректности заполнения документа
	Если ПроверятьДанные Тогда
		ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь, ВыборкаПоШапкеДокумента, РезультатЗапросаПоЗаписямСтажа);
	КонецЕсли;
	
	Если Отказ тогда
		
		Возврат "";
	КонецЕсли;	 
	
	Если ВыборкаПоШапкеДокумента.ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		Возврат ФайлДо2010Года(ВыборкаПоШапкеДокумента, ВыборкаПоШапкеДокумента.Количество, Заголовок, Отказ);
	Иначе
		Возврат ПроцедурыПерсонифицированногоУчета.ФайлСведенийОВзносахИСтаже(ВыборкаПоШапкеДокумента, РезультатЗапросаПоЗаписямСтажа, ВыборкаПоШапкеДокумента.Количество, Заголовок, Отказ)
	КонецЕсли;
	
КонецФункции 

// Заполняет колонку адресов для информирования
Процедура Автозаполнение(Режим = "") Экспорт 
	
	НовыеАдреса = ПроцедурыПерсонифицированногоУчета.АдресаДляИнформирования(РаботникиОрганизации, Организация, Дата, Режим);
	Если НовыеАдреса <> Неопределено Тогда
		РаботникиОрганизации.ЗагрузитьКолонку(НовыеАдреса.ВыгрузитьКолонку("АдресДляИнформирования"),"АдресДляИнформирования");
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения документа
//
Процедура ПроверитьПравильностьЗаполненияДокумента(ЕстьОшибки, СообщатьОбУспехе = Истина, ВыборкаПоШапкеДокумента = Неопределено, РезультатЗапросаПоЗаписямСтажа = Неопределено) Экспорт
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок =  "Проверка документа " +  СокрЛП(Ссылка);

	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	
	Отказ = Ложь;

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		Сообщить("Не указана организация!");
		Отказ = Истина;
	ИначеЕсли СтрДлина(СокрЛП(ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР)) <> 14 Тогда
		Сообщить("Предупреждение: Регистрационный номер организации в ПФР скорее всего неправильный");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОтчетныйПериод) Тогда
		Сообщить("Не указан отчетный период!");
		Отказ = Истина;
	ИначеЕсли ВыборкаПоШапкеДокумента.ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Ответственный) Тогда
			Сообщить("Не указано ответственное лицо!");
			Отказ = Истина;
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.ВидКорректировки = "" И Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ) Тогда
			Сообщить("Тип сведений и вид корректировки не могут быть одновременно пустыми!");
			Отказ = Истина;
		КонецЕсли; 
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ) Тогда
			Сообщить("Не указан тип сведений!");
			Отказ = Истина;
		ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КорректируемыйПериод) Тогда
				Сообщить("Не указан корректируемый отчетный период!");
				Отказ = Истина;
			ИначеЕсли ВыборкаПоШапкеДокумента.ОтчетныйПериод < ВыборкаПоШапкеДокумента.КорректируемыйПериод Тогда
				Сообщить("Корректируемый период превышает отчетный!");
				Отказ = Истина;
			ИначеЕсли ВыборкаПоШапкеДокумента.КорректируемыйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
				Сообщить("Корректируемый период не может быть ранее 1 полугодия 2010 года! Для корректировки сведений за 2009 год укажите этот год в поле отчетный период и проставьте вид корректировки.");
				Отказ = Истина;
			КонецЕсли; 
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КатегорияЗастрахованныхЛиц) Тогда
			Сообщить("Не указана категория застрахованных лиц!");
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Руководитель) Тогда
			Сообщить("Не указан руководитель!");
			Отказ = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РуководительДолжность) Тогда
			Сообщить("Не указана должность руководителя!");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФорматФайла) Тогда
		Сообщить("Не указан формат файла!");
		Отказ = Истина;
	ИначеЕсли ВыборкаПоШапкеДокумента.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда	
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеОКОПФ) Тогда
			Сообщить("Предупреждение: Не указано наименование ОКОПФ организации");
		ИначеЕсли СтрДлина(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеОКОПФ) > 40 Тогда
			Сообщить("Предупреждение: Наименование ОКОПФ организации обрезано до 40 символов.");
		КонецЕсли;
	КонецЕсли;
	
	КоличествоДокументов = ВыборкаПоШапкеДокумента.Количество;
	Если КоличествоДокументов = 0 тогда
		Сообщить("Список сотрудников пуст!");
		Отказ = Истина;
	КонецЕсли;
	
	Если ТипФормДокументов <> "СЗВ-6-2" И КоличествоДокументов > 200 тогда
		Сообщить("В документе должно быть не более 200 форм " + ТипФормДокументов +" (сотрудников)!");
		Отказ = Истина;
	ИначеЕсли ТипФормДокументов = "СЗВ-6-2" И КоличествоДокументов > 200 тогда	
		Сообщить("В форме СЗВ-6-2 должно быть не более 200 сотрудников!");
		Отказ = Истина;
	КонецЕсли;
	
	РезультатЗапросаПоТЧ = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента);
	ВыборкаПоСтрокамДокумента = РезультатЗапросаПоТЧ.Выбрать();
	Пока ВыборкаПоСтрокамДокумента.Следующий() цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке № """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) + """: ";
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
			Сообщить(СтрокаНачалаСообщенияОбОшибке + "- Не выбран сотрудник!");
			Отказ = Истина;
			
		Иначе
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + "По сотруднику " + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " ";
			
			Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НомерПовторяющейсяСтроки) тогда //Контроль дубля строк
				Сообщить("Строка №" + ВыборкаПоСтрокамДокумента.НомерПовторяющейсяСтроки + ": Сотрудник "+ВыборкаПоСтрокамДокумента.ФИО + " указан в документе дважды!");
				Отказ = Истина;
			КонецЕсли;
			
			Если НЕ ВыборкаПоСтрокамДокумента.ФизЛицоРаботаетВОрганизации тогда
				Сообщить(СтрокаНачалаСообщенияОбОшибке + "- не зарегистрирован(а) как сотрудник организации " + ВыборкаПоШапкеДокумента.ОрганизацияНаименование);
				Отказ = Истина;
			КонецЕсли;
			
			Если ВыборкаПоШапкеДокумента.ОтчетныйПериод >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
				СтраховойНомерПФР = ВыборкаПоСтрокамДокумента.СтраховойНомерПФР;
				Если НЕ ЗначениеЗаполнено(СтраховойНомерПФР) Тогда
					Сообщить(СтрокаНачалаСообщенияОбОшибке + "- Не задан страховой номер!");
					
					Отказ = Истина;
				Иначе
					Если НЕ РегламентированнаяОтчетность.СтраховойНомерПФРСоответствуетТребованиям(ВыборкаПоСтрокамДокумента.СтраховойНомерПФР) тогда
						Сообщить(СтрокаНачалаСообщенияОбОшибке + "- Задан неверный страховой номер!");
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Фамилия) Тогда
					Сообщить(СтрокаНачалаСообщенияОбОшибке + "- Не задана фамилия!");
					Отказ = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Имя) Тогда
					Сообщить(СтрокаНачалаСообщенияОбОшибке + "- Не задано имя!");
					Отказ = Истина;
				КонецЕсли;
				Если ВыборкаПоШапкеДокумента.ОтчетныйПериод >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() 
					И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.УплаченоНакопительная) 
					И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НачисленоНакопительная) 
					И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.УплаченоСтраховая) 
					И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НачисленоСтраховая) 
					И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КоличествоЗаписейОСтаже) 
					И НЕ ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ 
					И НЕ ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ Тогда
					Сообщить(СтрокаНачалаСообщенияОбОшибке + "- У сотрудника отсутствуют данные о стаже и суммы взносов!");
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
			// Проверка адреса для информирования
			Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.АдресДляИнформирования) Тогда
				АдресДляИнформированияСписком = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(ВыборкаПоСтрокамДокумента.АдресДляИнформирования);
				ЗаПределамиРФ = Ложь;
				АдресДляИнформированияСписком.Свойство("ЗаПределамиРФ", ЗаПределамиРФ);
				// значение переменной ЗаПределамиРФ может быть Неопределено
				Если ЗаПределамиРФ <> Истина Тогда
					Если  РегламентированнаяОтчетность.АдресСоответствуетТребованиям(АдресДляИнформированияСписком) Тогда
						ТекстОшибки = ПроцедурыПерсонифицированногоУчета.ПроверитьАдресПоКЛАДР(АдресДляИнформированияСписком);

						Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
							Сообщить(СтрокаНачалаСообщенияОбОшибке + "- Адрес для информирования не соответствует адресному классификатору: в классификаторе не найден" + ТекстОшибки + "!");
						КонецЕсли;
					Иначе
						Сообщить(СтрокаНачалаСообщенияОбОшибке + "- Адрес для информирования заполнен не полностью или неверно или присутствуют латинские или недопустимые символы!");
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
 	
	//Выполним проверку записей стажа 
	
	Если ВыборкаПоШапкеДокумента.ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		Отказ = Отказ Или Не ПроцедурыПерсонифицированногоУчета.СЗВ4_ПроверитьНаборЗаписейОСтаже(Ссылка,Новый Структура("ДатаАктуальности,Организация, ГоловнаяОрганизация" , ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод), Организация, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) , РезультатЗапросаПоЗаписямСтажа );
	Иначе
		ТаблицаФизлиц = РезультатЗапросаПоТЧ.Выгрузить();
		Отказ = Отказ Или Не ПроцедурыПерсонифицированногоУчета.СЗВ6_ПроверитьНаборЗаписейОСтаже(Ссылка, ТаблицаФизлиц, РезультатЗапросаПоЗаписямСтажа, Истина);
	КонецЕсли;
	
	Если Отказ тогда
		ЕстьОшибки = Истина;
	КонецЕсли;	 
	
	Если СообщатьОбУспехе И Не ЕстьОшибки Тогда
		Сообщить("Ошибок не обнаружено.");		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПравильностьЗаполненияДокумента()

Процедура РассчитатьВзносы(КомментироватьРасчет = Ложь, Физлицо = Неопределено, ИзменятьДанные = Истина) Экспорт

	Если Физлицо = Неопределено Тогда
		МассивФизлиц = РаботникиОрганизации.ВыгрузитьКолонку("Физлицо");
	Иначе
		МассивФизлиц = Новый Массив;
		МассивФизлиц.Добавить(Физлицо);
	КонецЕсли;
	
	ПериодРасчетаВзносов = ?(ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ, ОтчетныйПериод, КорректируемыйПериод);
	
	ДанныеКомментирования = Неопределено;
	ВзносыФизлиц = ПроцедурыПерсонифицированногоУчета.ДанныеОВзносахПоКатегориям(Дата, ПериодРасчетаВзносов, ПериодРасчетаВзносов, Организация, МассивФизлиц, КомментироватьРасчет, ДанныеКомментирования);
	ВзносыФизлиц.Индексы.Добавить("Физлицо,КатегорияЗастрахованныхЛиц");
	
	Если КомментироватьРасчет Тогда
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		
		РазделДокумента = ОбработкаКомментариев.ДобавитьСообщение("Расчет взносов по пачке форм " + ТипФормДокументов + " № " + НомерПачки, Перечисления.ВидыСообщений.Информация);
		
		Если ДанныеКомментирования.РаспределениеСУчетомПринятыхПФРДанных Тогда
			
			ОбработкаКомментариев.ДобавитьСообщение("Распределение уплаченных взносов проведено с учетом переданных ранее в ПФР сведений", Перечисления.ВидыСообщений.Информация, , РазделДокумента, Ложь);
			
			Переплаты = ДанныеКомментирования.Переплаты;
			Если Переплаты.Количество() > 0 Тогда
				РазделТаблицы = ОбработкаКомментариев.ДобавитьСообщение("В переданных в ПФР сведениях выявлены превышения сумм уплаченных взносов над начисленными! Данные по таким сотрудникам исключены из расчета уплаченных сумм за прошлые периоды.", Перечисления.ВидыСообщений.Ошибка, , РазделДокумента, Ложь);
				ОбработкаКомментариев.ДобавитьСообщение(Переплаты, Перечисления.ВидыСообщений.Таблица, , РазделТаблицы, Ложь);
			КонецЕсли;
			
			Итоги = ДанныеКомментирования.Итоги[0];
			Если Итоги.Страховая > 0 Или Итоги.Накопительная > 0 Тогда
				РазделТаблицы = ОбработкаКомментариев.ДобавитьСообщение("В переданных в ПФР сведениях задолженность по прошлым периодам составила: по страховой части " + Формат(Итоги.Страховая,"ЧЦ=14; ЧДЦ=2; ЧН=-") + ", по накопительной части " + Формат(Итоги.Накопительная,"ЧЦ=14; ЧДЦ=2; ЧН=-"), Перечисления.ВидыСообщений.Информация, , РазделДокумента, Ложь);
				ОбработкаКомментариев.ДобавитьСообщение(ДанныеКомментирования.ПрошлыеПериоды, Перечисления.ВидыСообщений.Таблица, , РазделТаблицы, Ложь);
			Иначе	
				ОбработкаКомментариев.ДобавитьСообщение("В переданных в ПФР сведениях суммы уплаченных взносов совпадают с начисленными суммами взносов", Перечисления.ВидыСообщений.Информация, , РазделДокумента, Ложь);
			КонецЕсли;
			
			ОбработкаКомментариев.ДобавитьСообщение("Учтено уплаты: по страховой части " + Формат(Итоги.ВсегоУплаченоСтраховая,"ЧЦ=14; ЧДЦ=2; ЧН=-") + ?(ЗначениеЗаполнено(Итоги.ЗачтенаПереплатаСтраховая)," (в т.ч. переплаты по итогам прошлых периодов " + Формат(Итоги.ЗачтенаПереплатаСтраховая,"ЧЦ=14; ЧДЦ=2; ЧН=-") + ")","") + ", по накопительной части " + Формат(Итоги.ВсегоУплаченоНакопительная,"ЧЦ=14; ЧДЦ=2; ЧН=-") + ?(ЗначениеЗаполнено(Итоги.ЗачтенаПереплатаНакопительная)," (в т.ч. переплаты по итогам прошлых периодов " + Формат(Итоги.ЗачтенаПереплатаНакопительная,"ЧЦ=14; ЧДЦ=2; ЧН=-") + ")",""), Перечисления.ВидыСообщений.Информация, , РазделДокумента, Ложь);
			
			Если Итоги.ВсегоУплаченоСтраховая > 0 Тогда
				РазделКоэффициентовУплаты = ОбработкаКомментариев.ДобавитьСообщение("Расчет коэффициентов уплаты по страховой части", Перечисления.ВидыСообщений.Информация, , РазделДокумента, Ложь);
				Если Итоги.Страховая > 0 Тогда
					ОбработкаКомментариев.ДобавитьСообщение("Коэффициент уплаты по прошлым периодам составил: " + Формат(Итоги.КоэффициентПрошлыхПериодовСтраховая / 100000,"ЧДЦ=10; ЧН=-"), Перечисления.ВидыСообщений.Информация, , РазделКоэффициентовУплаты, Ложь);
				КонецЕсли;
				ОбработкаКомментариев.ДобавитьСообщение("Начислено за текущий период: " + Формат(Итоги.ПФРСтраховаяПриход,"ЧЦ=14; ЧДЦ=2; ЧН=-"), Перечисления.ВидыСообщений.Информация, , РазделКоэффициентовУплаты, Ложь);
				ОбработкаКомментариев.ДобавитьСообщение("Учтено уплаты по текущему периоду: " + Формат(Итоги.ВсегоУплаченоСтраховая - Итоги.Страховая,"ЧЦ=14; ЧДЦ=2; ЧН=-"), Перечисления.ВидыСообщений.Информация, , РазделКоэффициентовУплаты, Ложь);
				ОбработкаКомментариев.ДобавитьСообщение("Коэффициент уплаты по текущему периоду составил: " + Формат(Итоги.КоэффициентТекущегоПериодаСтраховая / 100000,"ЧДЦ=10; ЧН=-"), Перечисления.ВидыСообщений.Информация, , РазделКоэффициентовУплаты, Ложь);
			КонецЕсли;
			
			Если Итоги.ВсегоУплаченоНакопительная > 0 Тогда
				РазделКоэффициентовУплаты = ОбработкаКомментариев.ДобавитьСообщение("Расчет коэффициентов уплаты по накопительной части", Перечисления.ВидыСообщений.Информация, , РазделДокумента, Ложь);
				Если Итоги.Накопительная > 0 Тогда
					ОбработкаКомментариев.ДобавитьСообщение("Коэффициент уплаты по прошлым периодам составил: " + Формат(Итоги.КоэффициентПрошлыхПериодовНакопительная / 100000,"ЧДЦ=10; ЧН=-"), Перечисления.ВидыСообщений.Информация, , РазделКоэффициентовУплаты, Ложь);
				КонецЕсли;
				ОбработкаКомментариев.ДобавитьСообщение("Начислено за текущий период: " + Формат(Итоги.ПФРНакопительнаяПриход,"ЧЦ=14; ЧДЦ=2; ЧН=-"), Перечисления.ВидыСообщений.Информация, , РазделКоэффициентовУплаты, Ложь);
				ОбработкаКомментариев.ДобавитьСообщение("Учтено уплаты по текущему периоду: " + Формат(Итоги.ВсегоУплаченоНакопительная - Итоги.Накопительная,"ЧЦ=14; ЧДЦ=2; ЧН=-"), Перечисления.ВидыСообщений.Информация, , РазделКоэффициентовУплаты, Ложь);
				ОбработкаКомментариев.ДобавитьСообщение("Коэффициент уплаты по текущему периоду составил: " + Формат(Итоги.КоэффициентТекущегоПериодаНакопительная / 100000,"ЧДЦ=10; ЧН=-"), Перечисления.ВидыСообщений.Информация, , РазделКоэффициентовУплаты, Ложь);
			КонецЕсли;
			
		Иначе
			
			ОбработкаКомментариев.ДобавитьСообщение("Распределение уплаченных взносов проведено по текущим данным без учета переданных ранее в ПФР сведений", Перечисления.ВидыСообщений.Информация, , РазделДокумента, Ложь);
			
			ТЗРасчетКоэффициентов = ДанныеКомментирования.РасчетКоэффициентовСтраховая;
			Если ТЗРасчетКоэффициентов.Количество() = 0 Тогда
				ОбработкаКомментариев.ДобавитьСообщение("В отчетном периоде " + ПредставлениеПериода(ПериодРасчетаВзносов, ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ПериодРасчетаВзносов), "ФП = Истина" ) + " уплата на страховую часть пенсии не производилась", Перечисления.ВидыСообщений.Информация, , РазделДокумента, Ложь);
			Иначе
				РазделКоэффициентовУплаты = ОбработкаКомментариев.ДобавитьСообщение("Расчет коэффициентов уплаты: страховая часть ", Перечисления.ВидыСообщений.Информация, , РазделДокумента, Ложь);
				ОбработкаКомментариев.ДобавитьСообщение(ТЗРасчетКоэффициентов, Перечисления.ВидыСообщений.Таблица, , РазделКоэффициентовУплаты);
			КонецЕсли;
			
			ТЗРасчетКоэффициентов = ДанныеКомментирования.РасчетКоэффициентовНакопительная;
			Если ТЗРасчетКоэффициентов.Количество() = 0 Тогда
				ОбработкаКомментариев.ДобавитьСообщение("В отчетном периоде " + ПредставлениеПериода(ПериодРасчетаВзносов, ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ПериодРасчетаВзносов), "ФП = Истина" ) + " уплата на накопительную часть пенсии не производилась", Перечисления.ВидыСообщений.Информация, , РазделДокумента, Ложь);
			Иначе
				РазделКоэффициентовУплаты = ОбработкаКомментариев.ДобавитьСообщение("Расчет коэффициентов уплаты: накопительная часть ", Перечисления.ВидыСообщений.Информация, , РазделДокумента, Ложь);
				ОбработкаКомментариев.ДобавитьСообщение(ТЗРасчетКоэффициентов, Перечисления.ВидыСообщений.Таблица, , РазделКоэффициентовУплаты);
			КонецЕсли;
			
			
		КонецЕсли;
		
		СтруктураПоискаКомментария = Новый Структура("Физлицо");
		ТЗРасчетСотрудников = ДанныеКомментирования.РасчетСотрудников.Скопировать(Новый Структура("КатегорияЗастрахованныхЛиц",КатегорияЗастрахованныхЛиц),"Период, ФизЛицо, НачисленоСтраховая, КоэффициентУплатыСтраховая, УплаченоСтраховая, НачисленоНакопительная, КоэффициентУплатыНакопительная, УплаченоНакопительная");
		
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Физлицо,КатегорияЗастрахованныхЛиц",, КатегорияЗастрахованныхЛиц);
	Если Физлицо = Неопределено Тогда
		СтрокиКОбработке = РаботникиОрганизации
	Иначе
		СтрокиКОбработке = РаботникиОрганизации.НайтиСтроки(Новый Структура("Физлицо",Физлицо));
	КонецЕсли;
	Для каждого СтрокаДокумента Из СтрокиКОбработке Цикл
		СтруктураПоиска.Физлицо = СтрокаДокумента.Физлицо;
		СтрокиФизлица = ВзносыФизлиц.НайтиСтроки(СтруктураПоиска);
		Если ИзменятьДанные Тогда
			Если СтрокиФизлица.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокиФизлица[0], , "Физлицо");
			Иначе
				СтрокаДокумента.НачисленоСтраховая = 0;
				СтрокаДокумента.УплаченоСтраховая = 0;
				СтрокаДокумента.НачисленоНакопительная = 0;
				СтрокаДокумента.УплаченоНакопительная = 0;
			КонецЕсли;
		КонецЕсли;
		Если КомментироватьРасчет Тогда
			СтруктураПоискаКомментария.Физлицо = СтрокаДокумента.Физлицо;
			
			ТЗСотрудника = ТЗРасчетСотрудников.Скопировать(СтруктураПоискаКомментария,"Период, НачисленоСтраховая, КоэффициентУплатыСтраховая, УплаченоСтраховая, НачисленоНакопительная, КоэффициентУплатыНакопительная, УплаченоНакопительная");
			Если ТЗСотрудника.Количество() > 0 Тогда
				РазделСотрудника = ОбработкаКомментариев.ДобавитьСообщение(СтрокаДокумента.Фамилия + " " + СтрокаДокумента.Имя + " " + СтрокаДокумента.Отчество, Перечисления.ВидыСообщений.Информация, , РазделДокумента, Ложь);
				РазделРасчета = ОбработкаКомментариев.ДобавитьСообщение("Расчет уплаты по страховой части пенсии: ", Перечисления.ВидыСообщений.Информация, , РазделСотрудника, Ложь);
				ОбработкаКомментариев.ДобавитьСообщение(ТЗСотрудника.Скопировать(,"Период, НачисленоСтраховая, КоэффициентУплатыСтраховая, УплаченоСтраховая"), Перечисления.ВидыСообщений.Таблица, , РазделРасчета, Ложь);
				РазделРасчета = ОбработкаКомментариев.ДобавитьСообщение("Расчет уплаты по накопительной части пенсии: ", Перечисления.ВидыСообщений.Информация, , РазделСотрудника, Ложь);
				ОбработкаКомментариев.ДобавитьСообщение(ТЗСотрудника.Скопировать(,"Период, НачисленоНакопительная, КоэффициентУплатыНакопительная, УплаченоНакопительная"), Перечисления.ВидыСообщений.Таблица, , РазделРасчета, Ложь);
			Иначе
				РазделСотрудника = ОбработкаКомментариев.ДобавитьСообщение("По сотруднику " + СтрокаДокумента.Фамилия + " " + СтрокаДокумента.Имя + " " + СтрокаДокумента.Отчество + " данных по уплаченным взносам не обнаружено!", Перечисления.ВидыСообщений.Информация, , РазделДокумента, Ложь);
			КонецЕсли;
			
			Если СтрокиФизлица.Количество() > 0 Тогда
				ОбработкаКомментариев.ДобавитьСообщение("Страховая часть. Начислено: " + Формат(СтрокиФизлица[0].НачисленоСтраховая,"ЧЦ=14; ЧДЦ=2; ЧН=-"), Перечисления.ВидыСообщений.Информация, , РазделСотрудника, Ложь);
				ОбработкаКомментариев.ДобавитьСообщение("Страховая часть. Уплачено:  " + Формат(СтрокиФизлица[0].УплаченоСтраховая,"ЧЦ=14; ЧДЦ=2; ЧН=-"), Перечисления.ВидыСообщений.Информация, , РазделСотрудника, Ложь);
				ОбработкаКомментариев.ДобавитьСообщение("Накопительная часть. Начислено: " + Формат(СтрокиФизлица[0].НачисленоНакопительная,"ЧЦ=14; ЧДЦ=2; ЧН=-"), Перечисления.ВидыСообщений.Информация, , РазделСотрудника, Ложь);
				ОбработкаКомментариев.ДобавитьСообщение("Накопительная часть. Уплачено:  " + Формат(СтрокиФизлица[0].УплаченоНакопительная,"ЧЦ=14; ЧДЦ=2; ЧН=-"), Перечисления.ВидыСообщений.Информация, , РазделСотрудника, Ложь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ Тогда
		ДоначисленныеВзносы = ПроцедурыПерсонифицированногоУчета.ДоначисленныеВзносыДляКорректирующегоДокумента(Организация, Дата, КорректируемыйПериод, КатегорияЗастрахованныхЛиц, РаботникиОрганизации.Выгрузить(,"НомерСтроки,ФизЛицо,НачисленоНакопительная,НачисленоСтраховая,УплаченоНакопительная,УплаченоСтраховая"));
		Выборка = ДоначисленныеВзносы.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТЧ = РаботникиОрганизации.Найти(Выборка.НомерСтроки,"НомерСтроки");
			Если СтрокаТЧ <> Неопределено Тогда
				Если ИзменятьДанные Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка, "ДоначисленоСтраховая, ДоначисленоНакопительная, ДоУплаченоСтраховая, ДоУплаченоНакопительная");
				КонецЕсли;
				Если КомментироватьРасчет Тогда
					ОбработкаКомментариев.ДобавитьСообщение("Страховая часть. Доначислено: " + Формат(Выборка.ДоначисленоСтраховая,"ЧЦ=14; ЧДЦ=2; ЧН=-"), Перечисления.ВидыСообщений.Информация, , РазделСотрудника, Ложь);
					ОбработкаКомментариев.ДобавитьСообщение("Страховая часть. Доуплачено:  " + Формат(Выборка.ДоУплаченоСтраховая,"ЧЦ=14; ЧДЦ=2; ЧН=-"), Перечисления.ВидыСообщений.Информация, , РазделСотрудника, Ложь);
					ОбработкаКомментариев.ДобавитьСообщение("Накопительная часть. Доначислено: " + Формат(Выборка.ДоначисленоНакопительная,"ЧЦ=14; ЧДЦ=2; ЧН=-"), Перечисления.ВидыСообщений.Информация, , РазделСотрудника, Ложь);
					ОбработкаКомментариев.ДобавитьСообщение("Накопительная часть. Доуплачено:  " + Формат(Выборка.ДоУплаченоНакопительная,"ЧЦ=14; ЧДЦ=2; ЧН=-"), Перечисления.ВидыСообщений.Информация, , РазделСотрудника, Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке() Экспорт 

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	Руководитель);
	Запрос.УстановитьПараметр("ДатаФИО",		Дата);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(Застрахованные.НачисленоСтраховая) КАК НачисленоСтраховая,
	|	СУММА(Застрахованные.УплаченоСтраховая) КАК УплаченоСтраховая,
	|	СУММА(Застрахованные.НачисленоНакопительная) КАК НачисленоНакопительная,
	|	СУММА(Застрахованные.УплаченоНакопительная) КАК УплаченоНакопительная,
	|	КОЛИЧЕСТВО(Застрахованные.НомерСтроки) КАК Количество
	|ПОМЕСТИТЬ ВТИтоги
	|ИЗ
	|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК Застрахованные
	|ГДЕ
	|	Застрахованные.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ФизическиеЛица.Наименование
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
	|	КОНЕЦ КАК ФИОРуководителя
	|ПОМЕСТИТЬ ВТФИОРуководителя
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаФИО, ФизЛицо = &Руководитель) КАК ФИОФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Руководитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Номер,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Проведен,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипФормДокументов,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.КатегорияЗастрахованныхЛиц,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.ОтчетныйПериод,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведенийСЗВ,
	|	ВЫБОР
	|		КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4.КорректируемыйПериод
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.НомерПачки,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.ПринятоВПФР,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ответственный,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.ДолжностьРуководителя.Наименование КАК РуководительДолжность,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.ФорматФайла,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТерриториальныеУсловия.Код,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.ВидКорректировки,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация.ВидСтавокЕСНиПФР
	|				ИНАЧЕ Организации.ВидСтавокЕСНиПФР
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокЕСНиПФР.ДляСельскохозяйственныхПроизводителей)
	|			ТОГДА ""СХ""
	|		ИНАЧЕ ""НР""
	|	КОНЕЦ КАК КодОсновногоТарифа,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация.Наименование,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация.ЮрФизЛицо,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация.ОГРН,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация.НаименованиеОКОПФ,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация.НаименованиеПолное,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация.НаименованиеСокращенное,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация.РегистрационныйНомерПФР,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация.РайонныйКоэффициентРФ,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация.ИНН,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация.КПП,
	|	ВЫБОР
	|		КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация
	|		ИНАЧЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ЕСТЬNULL(ФИОФизЛиц.ФИОРуководителя, """") КАК Руководитель,
	|	ГОД(СведенияОТрудовомСтажеИЗаработкеСЗВ4.ОтчетныйПериод) КАК Год,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация.КодПоОКПО КАК ОКПО,
	|	ЕСТЬNULL(ИтогиПоВзносам.НачисленоСтраховая, 0) КАК НачисленоСтраховая,
	|	ЕСТЬNULL(ИтогиПоВзносам.УплаченоСтраховая, 0) КАК УплаченоСтраховая,
	|	ЕСТЬNULL(ИтогиПоВзносам.НачисленоНакопительная, 0) КАК НачисленоНакопительная,
	|	ЕСТЬNULL(ИтогиПоВзносам.УплаченоНакопительная, 0) КАК УплаченоНакопительная,
	|	ЕСТЬNULL(ИтогиПоВзносам.Количество, 0) КАК Количество
	|ИЗ
	|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИОРуководителя КАК ФИОФизЛиц
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация.ГоловнаяОрганизация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоги КАК ИтогиПоВзносам
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			ВыборкаПоШапкеДокумента.Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НомерСтроки,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.СтраховойНомерПФР,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Фамилия,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Имя,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Отчество,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НачисленоСтраховая,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.УплаченоСтраховая,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НачисленоНакопительная,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.УплаченоНакопительная,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Организация,
	|	ВЫБОР
	|		КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ТипСведенийСЗВ В (ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ), ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ))
	|			ТОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.КорректируемыйПериод
	|		ИНАЧЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ОтчетныйПериод
	|	КОНЕЦ КАК ОтчетныйПериод,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.КатегорияЗастрахованныхЛиц
	|ПОМЕСТИТЬ ВТЗастрахованныеЛица
	|ИЗ
	|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТЗарегистрированныеСотрудниками
	|ИЗ
	|	ВТЗастрахованныеЛица КАК ТЧРаботникиОрг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО ТЧРаботникиОрг.ФизЛицо = СотрудникиОрганизаций.Физлицо
	|			И (СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация)
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗастрахованныеЛица.ФизЛицо КАК ФизЛицо,
	|	КОЛИЧЕСТВО(ЗаписиОСтажеДляСЗВ4.НомерОсновнойЗаписи) КАК КоличествоЗаписей
	|ПОМЕСТИТЬ ВТДанныеОСтаже
	|ИЗ
	|	ВТЗастрахованныеЛица КАК ЗастрахованныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтажеДляСЗВ4
	|		ПО ЗастрахованныеЛица.ФизЛицо = ЗаписиОСтажеДляСЗВ4.ФизЛицо
	|			И ЗастрахованныеЛица.Ссылка.ОтчетныйПериод = ЗаписиОСтажеДляСЗВ4.ОтчетныйПериод
	|			И ЗастрахованныеЛица.Ссылка.Организация = ЗаписиОСтажеДляСЗВ4.ОбособленноеПодразделение
	|			И ЗастрахованныеЛица.Ссылка.КатегорияЗастрахованныхЛиц = ЗаписиОСтажеДляСЗВ4.КатегорияЗастрахованныхЛиц
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗастрахованныеЛица.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПерваяТаблица.ФизЛицо КАК ФизЛицо,
	|	ПерваяТаблица.НомерСтроки КАК НомерСтроки,
	|	МИНИМУМ(ВтораяТаблица.НомерСтроки) КАК НомерПовторяющейсяСтроки,
	|	ПерваяТаблица.АдресДляИнформирования,
	|	ПерваяТаблица.СтраховойНомерПФР,
	|	ПерваяТаблица.Фамилия,
	|	ПерваяТаблица.Имя,
	|	ПерваяТаблица.Отчество,
	|	ВЫБОР
	|		КОГДА ЗарегистрированныеСотрудниками.НомерСтроки ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации,
	|	ПерваяТаблица.Фамилия + "" "" + ПерваяТаблица.Имя + "" "" + ПерваяТаблица.Отчество КАК ФИО,
	|	ПерваяТаблица.НачисленоСтраховая,
	|	ПерваяТаблица.УплаченоСтраховая,
	|	ПерваяТаблица.НачисленоНакопительная,
	|	ПерваяТаблица.УплаченоНакопительная,
	|	ПерваяТаблица.ФизЛицо.Наименование,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаСоставления,
	|	ПерваяТаблица.Организация,
	|	ПерваяТаблица.ОтчетныйПериод,
	|	ПерваяТаблица.КатегорияЗастрахованныхЛиц,
	|	ЕСТЬNULL(ДанныеОСтаже.КоличествоЗаписей, 0) КАК КоличествоЗаписейОСтаже
	|ИЗ
	|	ВТЗастрахованныеЛица КАК ПерваяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарегистрированныеСотрудниками КАК ЗарегистрированныеСотрудниками
	|		ПО ПерваяТаблица.НомерСтроки = ЗарегистрированныеСотрудниками.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗастрахованныеЛица КАК ВтораяТаблица
	|		ПО ПерваяТаблица.ФизЛицо = ВтораяТаблица.ФизЛицо
	|			И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОСтаже КАК ДанныеОСтаже
	|		ПО ПерваяТаблица.ФизЛицо = ДанныеОСтаже.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ПерваяТаблица.ФизЛицо,
	|	ПерваяТаблица.НомерСтроки,
	|	ПерваяТаблица.АдресДляИнформирования,
	|	ПерваяТаблица.СтраховойНомерПФР,
	|	ПерваяТаблица.Фамилия,
	|	ПерваяТаблица.Имя,
	|	ПерваяТаблица.Отчество,
	|	ПерваяТаблица.НачисленоСтраховая,
	|	ПерваяТаблица.УплаченоСтраховая,
	|	ПерваяТаблица.НачисленоНакопительная,
	|	ПерваяТаблица.УплаченоНакопительная,
	|	ВЫБОР
	|		КОГДА ЗарегистрированныеСотрудниками.НомерСтроки ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ПерваяТаблица.ФизЛицо.Наименование,
	|	ПерваяТаблица.Организация,
	|	ПерваяТаблица.ОтчетныйПериод,
	|	ПерваяТаблица.КатегорияЗастрахованныхЛиц,
	|	ДанныеОСтаже.КоличествоЗаписей
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если Проведен И ПринятоВПФР Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
	КонецЦикла;
	
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	РезультатЗапросаПоЗаписямСтажа = Неопределено;
	ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь, ВыборкаПоШапкеДокумента, РезультатЗапросаПоЗаписямСтажа);
	
	Если Отказ тогда
		
		Возврат;
	КонецЕсли;
	
	//При проведении файл формируем заново 
	ТекстФайла = СформироватьВыходнойФайл(Отказ, Ложь, ВыборкаПоШапкеДокумента, РезультатЗапросаПоЗаписямСтажа);

	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения.АрхивДанныхРегламентированнойОтчетности.Добавить();
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл-пачка форм " + ТипФормДокументов;
	Запись.Данные = ТекстФайла;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаполненПринятымиСведениями Тогда
		Возврат
	КонецЕсли;
	
	ПроцедурыПерсонифицированногоУчета.ПроверитьВозможностьПроведения(ЭтотОбъект, Отказ, РежимЗаписи);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Год = Год(ОтчетныйПериод);
	
	ПроцедурыПерсонифицированногоУчета.ПроставитьНомерПачки(ЭтотОбъект);
		
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации, , "ФизЛицо");
	
	Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
		Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
			СтрокаТЧ.НачисленоНакопительная = 0;
			СтрокаТЧ.НачисленоСтраховая = 0;
			СтрокаТЧ.УплаченоНакопительная = 0;
			СтрокаТЧ.УплаченоСтраховая = 0;
			СтрокаТЧ.ДоначисленоНакопительная = 0;
			СтрокаТЧ.ДоначисленоСтраховая = 0;
			СтрокаТЧ.ДоУплаченоНакопительная = 0;
			СтрокаТЧ.ДоУплаченоСтраховая = 0;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ЗаполненПринятымиСведениями Тогда
		Возврат
	КонецЕсли;
	
	Отказ = ПринятоВПФР;
	Если Не Отказ Тогда
		Для Каждого Набор Из Движения Цикл
			Набор.Очистить();
			Набор.Записать();
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры
