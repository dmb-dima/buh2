// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

// Хранит признак ведения в конфигурации учета по статьям движения денежных средств
Перем ЕстьУчетПоСтатьямДДС Экспорт;

Перем СодержаниеПроводки;

// Сведения о необходимости проверки соответствий ведомостей на выплату зарплаты сумме документа
Перем ПроверятьСоответствиеСуммыДокументаИВедомости Экспорт;
Перем ТаблицаВзаиморасчетовСРаботникамиОрганизаций;
Перем ФормироватьДвиженияПоВзаиморасчетамСРаботникамиОрганизаций;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Определяет коды счетов дебета и кредита для вывода в печатную форму.
//
Функция ОпределитьКодыСчетСубсчет() 

	КодыСчетов = Новый Структура("Дебет,Кредит");

	// Определяем код счета кредита
	КассаВВалюте = (ВалютаДокумента <> мВалютаРегламентированногоУчета);

	СчетКт = СчетКасса.Код;

	КодыСчетов.Кредит = СчетКт;

	//Определяем коды счетов кредита. Если указаны и счет расчетов с контрагентом, и счет расчетов по авансам - выводим оба.
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		ФормироватьПроводкиСводно = (ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.ВидыСубконто.Найти(
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") = Неопределено);
		
		Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() И ФормироватьПроводкиСводно И ВыплатаЗаработнойПлаты.Количество() = 0 Тогда
			СтрокаДебет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.Код;
		Иначе
			
			СтрокаДебет="";
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма,
			|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК КомпенсацияЗаЗадержкуЗарплаты
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
			|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
			|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
			|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
			|			И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
			|ГДЕ
			|	ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &Выплачено
			|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
			|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			Запрос.УстановитьПараметр("Выплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);
			
			ВыборкаСумм = Запрос.Выполнить().Выбрать();
			Если ВыборкаСумм.Следующий() Тогда
				Если ЗначениеЗаполнено(ВыборкаСумм.Сумма) Тогда
					СтрокаДебет=СтрокаДебет + ", " + ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.Код;
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаСумм.КомпенсацияЗаЗадержкуЗарплаты) Тогда
					СтрокаДебет=СтрокаДебет + ", " + СчетУчетаРасчетовСКонтрагентом.Код;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДебет = Сред(СтрокаДебет,2);
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		СтрокаДебет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.Код;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		
		СтрокаДебет = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам.Код;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда

		Если КассаВВалюте Тогда
			СтрокаДебет = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал.Код;
		Иначе
			СтрокаДебет = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами.Код;
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда

		СтрокаДебет = СчетУчетаРасчетовСКонтрагентом.Код;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда

		СтрокаДебет = СчетУчетаРасчетовСКонтрагентом.Код;

	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		ТабСчет = РасшифровкаПлатежа.Выгрузить();

		ТабСчет.Свернуть("СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам","СуммаПлатежа");

		СтрокаДебет = "";

		Для Каждого Строка Из ТабСчет Цикл

			Если НЕ Строка.СчетУчетаРасчетовСКонтрагентом.Пустая() И Найти(СтрокаДебет,Строка.СчетУчетаРасчетовСКонтрагентом.Код)=0 Тогда
				СтрокаДебет = СтрокаДебет+", "+Строка.СчетУчетаРасчетовСКонтрагентом.Код;
			КонецЕсли;

			Если НЕ Строка.СчетУчетаРасчетовПоАвансам.Пустая() И Найти(СтрокаДебет,Строка.СчетУчетаРасчетовПоАвансам.Код)=0 Тогда
				СтрокаДебет = СтрокаДебет+", "+Строка.СчетУчетаРасчетовПоАвансам.Код;
			КонецЕсли;

		КонецЦикла;

		СтрокаДебет = Сред(СтрокаДебет,2);

	КонецЕсли;

	КодыСчетов.Дебет = СтрокаДебет;

	Возврат КодыСчетов;

КонецФункции // ОпределитьКодыСчетСубсчет()

// Функция формирует табличный документ с печатной формой РКО
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьРКО()
	Перем ПодразделениеОтветственныхЛиц;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.Дата КАК ДатаДокумента,
	|	РасходныйКассовыйОрдер.Организация,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
	|	РасходныйКассовыйОрдер.Контрагент,
	|	РасходныйКассовыйОрдер.Контрагент.Представление КАК ФИОПолучателя,
	|	РасходныйКассовыйОрдер.ВалютаДокумента КАК Валюта,
	|	РасходныйКассовыйОрдер.ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	РасходныйКассовыйОрдер.Выдать,
	|	РасходныйКассовыйОрдер.Приложение,
	|	РасходныйКассовыйОрдер.ПоДокументу,
	// {ОбособленныеПодразделения
	|	РасходныйКассовыйОрдер.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РасходныйКассовыйОрдер.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА РасходныйКассовыйОрдер.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(РасходныйКассовыйОрдер.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	// }ОбособленныеПодразделения
	|	РасходныйКассовыйОрдер.Основание
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент   = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_КО2";
	Макет         = ПолучитьОбщийМакет("КО2");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	СведенияОбОрганизации     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	Валютный                  = (НЕ Шапка.Валюта = мВалютаРегламентированногоУчета);

	// Выводим шапку
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.Сумма				= Формат(Шапка.Сумма,"ЧЦ=15; ЧДЦ=2")+?(Валютный," "+СокрЛП(Шапка.Валюта),"");
	
	СуммаПрописью     = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.Валюта);
	СуммаПрописьюПродолжение = "";
	Если СтрДлина(СуммаПрописью) > 92 Тогда
		н=92;
		Пока н > 0
			И Сред(СуммаПрописью,н,1) <> " " Цикл
			
			н = н-1;
		КонецЦикла;
		СуммаПрописьюПродолжение = Сред(СуммаПрописью, н+1);
		СуммаПрописью = Лев(СуммаПрописью, н);
	КонецЕсли;
	ОбластьМакета.Параметры.СуммаПрописью		= СуммаПрописью;
	ОбластьМакета.Параметры.СуммаПрописьюПродолжение = СуммаПрописьюПродолжение;
	
	ОбластьМакета.Параметры.ОрганизацияПоОКПО	= СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.ДатаДокумента		= Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.НомерДокумента		= ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);

	ОбластьМакета.Параметры.ДатаДокументаПрописью = Формат(Шапка.ДатаДокумента, "ДФ='dd MMMM yyyy ""г.""'");

	КодыСчетСубсчет = ОпределитьКодыСчетСубсчет();

	ОбластьМакета.Параметры.ДебетСубСчет		= КодыСчетСубсчет.Дебет;
	ОбластьМакета.Параметры.КредитСубСчет		= КодыСчетСубсчет.Кредит;

	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	ОтветственныеЛица = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);

	ОбластьМакета.Параметры.ФИОРуководителя       = ОтветственныеЛица.РуководительПредставление;
	ОбластьМакета.Параметры.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжность;

	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
	ОбластьМакета.Параметры.ФИОКассира            = ОтветственныеЛица.КассирПредставление;
	
	ОбластьМакета.Параметры.Основание             = Шапка.Основание;
	ОбластьМакета.Параметры.Приложение            = Шапка.Приложение;

	ОбластьМакета.Параметры.ФИОПолучателя = Шапка.Выдать;
	ОбластьМакета.Параметры.РеквизитыДокументаУдостоверяющегоЛичность = Шапка.ПоДокументу;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьРКО()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "РКО" Тогда
		
		ТабДокумент = ПечатьРКО();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("РКО","Расходный кассовый ордер");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Выполняет автоматическое заполнение документа 
// 
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  нет
//
Процедура АвтозаполнениеДепонентов(ОтборПоРаботникам = Неопределено) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Физлица",			ОтборПоРаботникам);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Дата",				?(ЭтоНовый(),КонецДня(Дата),Дата));
	
	ОтборПоРаботникамТекст = ?(ОтборПоРаботникам = Неопределено,"","И Физлицо В (&Физлица)");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВзаиморасчетыСДепонентамиОрганизацийОстатки.Физлицо КАК Физлицо,
	|	ВзаиморасчетыСДепонентамиОрганизацийОстатки.Ведомость КАК Ведомость,
	|	ВзаиморасчетыСДепонентамиОрганизацийОстатки.Организация КАК Организация,
	|	ВзаиморасчетыСДепонентамиОрганизацийОстатки.СуммаОстаток КАК СуммаКВыплате
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(&Дата, Организация = &Организация
	|			    " + ОтборПоРаботникамТекст + ") КАК ВзаиморасчетыСДепонентамиОрганизацийОстатки
	|ГДЕ
	|	ВзаиморасчетыСДепонентамиОрганизацийОстатки.СуммаОстаток > 0";
	
	ВыплатаДепонентов.Загрузить(Запрос.Выполнить().Выгрузить());
	СуммаДокумента = ВыплатаДепонентов.Итог("СуммаКВыплате");
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	РасшифровкаПлатежа[0].СуммаПлатежа = СуммаДокумента;
	
КонецПроцедуры //  Автозаполнение

// Заполняет по данным переданного физлица поля Выдать и По документу
//
// Параметры
//   СсылкаРаботник - СправочникСсылка.ФизическиеЛица, работник которому выдают з/пл
//                 или кассир-раздатчик
//
Процедура ЗаполнитьПоляВыдатьПоДокументу(СсылкаРаботник) Экспорт
	
	ДанныеФизЛица = ОбщегоНазначения.ДанныеФизЛица(Организация, СсылкаРаботник, Дата, Ложь);
	
	Выдать = ДанныеФизЛица.Представление;
	ПоДокументу = ДанныеФизЛица.ПредставлениеДокумента;

КонецПроцедуры // ЗаполнитьПоляВыдатьПоДокументу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);

	СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

	ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);

	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);

КонецПроцедуры // ПересчитатьСуммуНДС()

Процедура ЗаполнитьПоЗарплатеКВыплатеОрганизацииРегл(Основание)

	ВидОперации        = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
	Организация        = Основание.Организация;
	
	// {КОРП
	ПодразделениеОрганизации = Основание.ПодразделениеОрганизации;
    // }КОРП

	ВалютаДокумента    = мВалютаРегламентированногоУчета;
	КурсДокумента      = 1;
	КратностьДокумента = 1;

	// Определим сумму выплаченной заработной платы
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.УстановитьПараметр("ВыплаченностьЗарплаты", Перечисления.ВыплаченностьЗарплаты.Выплачено);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма + ЗарплатаКВыплатеЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК СуммаКВыплате,
	|	ЗарплатаКВыплатеЗарплата.Ссылка
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И ЗарплатаКВыплатеЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|			И (РанееВыплаченныеСуммы.Регистратор <> &Регистратор)
	|ГДЕ
	|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ссылка
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|	И ЗарплатаКВыплатеЗарплата.ВыплаченностьЗарплаты = &ВыплаченностьЗарплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеЗарплата.Ссылка";
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("По текущей ведомости нет сумм к выплате!")
	Иначе	

		Выборка = РезультатЗапроса.Выбрать(); 
		Выборка.Следующий();
		
		СтрокаВедомость = ВыплатаЗаработнойПлаты.Добавить();
		СтрокаВедомость.Ведомость = Основание;
		ЗаполнитьЗначенияСвойств(СтрокаВедомость,Выборка);

		СуммаДокумента = Выборка.СуммаКВыплате;

	КонецЕсли;

	РасшифровкаПлатежа.Добавить().СуммаПлатежа = СуммаДокумента;

КонецПроцедуры

// Заполняет документ на основании приходного кассового ордера\
//
Процедура ЗаполнитьПоПКО()

	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда

		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		КурсОснования      = СтруктураКурсаОснования.Курс;
		КратностьОснования = СтруктураКурсаОснования.Кратность;

		ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю;
		Контрагент  = ДокументОснование.Контрагент;

		Для Каждого СтрокаОснование ИЗ ДокументОснование.РасшифровкаПлатежа Цикл

			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();

			СтрокаПлатеж.ДоговорКонтрагента      = СтрокаОснование.ДоговорКонтрагента;
			СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

			СтрокаПлатеж.СуммаПлатежа = СтрокаОснование.СуммаПлатежа;
			
			// При вводе на основании устанавливаем режим распределения оплаты "По документу"
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу;
			СтрокаПлатеж.Сделка = ДокументОснование;

			СтрокаПлатеж.СтавкаНДС = СтрокаОснование.СтавкаНДС;

			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СтрокаОснование.СчетУчетаРасчетовПоАвансам;
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СтрокаОснование.СчетУчетаРасчетовСКонтрагентом;
			
		КонецЦикла;

		Для Индекс = 0 По ДокументОснование.РасшифровкаПлатежа.Количество()-1 Цикл

			СтрокаПлатеж    = РасшифровкаПлатежа[Индекс];
			СтрокаОснование = ДокументОснование.РасшифровкаПлатежа[Индекс];

			Если (ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента))
			   И СтрокаПлатеж.ДоговорКонтрагента=СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания

				СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа, 
					ДокументОснование.ВалютаДокумента, СтрокаОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					КурсОснования, СтрокаОснование.КурсВзаиморасчетов, 
					КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);

				СтрокаПлатеж.СуммаПлатежа     = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
					СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента,
					СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента, 
					СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);

			Иначе

				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда

					СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов=1;
					СтрокаПлатеж.КратностьВзаиморасчетов=1;

				Иначе

					СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
						ВалютаДокумента, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
						КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов, 
						КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);

				КонецЕсли;

			КонецЕсли;

			ПересчитатьСуммуНДС(СтрокаПлатеж);

		КонецЦикла;

		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");

	Иначе

		ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход;
		// Документ не вводится на основании ПКО с другими видами операций
		Возврат;

	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоПКОУпр()

////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ДвиженияПоЗарплатеРегл(Отказ, Заголовок, СтруктураШапкиДокумента)

	// Бухгалтерские проводки документа
	Проводки = Движения.Хозрасчетный;
	
	СчетКт = СчетКасса;
	
	Если НЕ ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
		Проводка = Проводки.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Активность  = Истина;
		Проводка.Организация = Организация;
		Проводка.Содержание  = ?(ЗначениеЗаполнено(Основание),Основание, "Без указания ведомости");

		Проводка.Сумма       = СуммаДокумента;
		
		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		
		Проводка.СчетКт      = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"СтатьиДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
		Возврат;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;

	// По регистрам ВзаиморасчетыСРаботникамиОрганизаций и Хозрасчетный
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК Ведомость,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация КАК Организация,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК ФизЛицо,
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК СуммаВзаиморасчетов,
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК КомпенсацияЗаЗадержкуЗарплаты,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Номер,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|			И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
	|ГДЕ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &Выплачено
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Номер,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) <> 0";

	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Выплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);

	ФормироватьПроводкиСводно = (ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.ВидыСубконто.Найти(
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") = Неопределено);

	Результат = Запрос.Выполнить();
	
	Если Не ФормироватьПроводкиСводно  Тогда
		ТаблицаФизическихЛиц = Результат.Выгрузить();
		ТаблицаФизическихЛиц.Свернуть("Физлицо,Ведомость",);
		Для Каждого СтрокаТаблицыФизическихЛиц ИЗ ТаблицаФизическихЛиц Цикл
			ЗаполнитьЗначенияСвойств(Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Добавить(),СтрокаТаблицыФизическихЛиц);
		КонецЦикла;		
	КонецЕсли;
		
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СуммаВзаиморасчетов <> 0 Тогда
		
			Если ФормироватьДвиженияПоВзаиморасчетамСРаботникамиОрганизаций Тогда
				СтрокаДвижения = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения,Выборка);
				СтрокаДвижения.Период      			= Дата;
				СтрокаДвижения.ВидДвижения 			= ВидДвиженияНакопления.Расход;
			Иначе
				НоваяСтрока = ТаблицаВзаиморасчетовСРаботникамиОрганизаций.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
			КонецЕсли;
		
			Если Не ФормироватьПроводкиСводно  Тогда
				Проводка = Проводки.Добавить();
				
				Проводка.Период      = Дата;
				Проводка.Активность  = Истина;
				Проводка.Организация = Организация;
				Проводка.Содержание  = Основание + " по ведомости №" + Выборка.Номер + " от " + Выборка.Дата;
				Проводка.Сумма       = Выборка.СуммаВзаиморасчетов;
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
				Проводка.СубконтоДт.РаботникиОрганизаций = Выборка.ФизЛицо;
				
				Проводка.СчетКт      = СчетКт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"СтатьиДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
								
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
			КонецЕсли;
		КонецЕсли;
		Если Выборка.КомпенсацияЗаЗадержкуЗарплаты <> 0 Тогда
			Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении("Не заполнен счет учета для компенсации за задержку зарплаты!",Отказ, Заголовок);
				Прервать;
			КонецЕсли;
			Если Не ФормироватьПроводкиСводно  Тогда
				Проводка = Проводки.Добавить();
				
				Проводка.Период      = Дата;
				Проводка.Активность  = Истина;
				Проводка.Организация = Организация;
				Проводка.Сумма       = Выборка.КомпенсацияЗаЗадержкуЗарплаты;
				
				Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);
				
				Проводка.Содержание  = Основание + " по ведомости №" + Выборка.Номер + " от " + Выборка.Дата;
				Проводка.СчетКт      = СчетКт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"СтатьиДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
								
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ФормироватьПроводкиСводно Тогда
		ТаблицаРезультата = Результат.Выгрузить();
		ТаблицаРезультата.Свернуть("Номер,Дата","СуммаВзаиморасчетов,КомпенсацияЗаЗадержкуЗарплаты");
		Для каждого СтрокаТЗ Из ТаблицаРезультата Цикл
			Если СтрокаТЗ.СуммаВзаиморасчетов <> 0 Тогда
				Проводка = Проводки.Добавить();
				
				Проводка.Период      = Дата;
				Проводка.Активность  = Истина;
				Проводка.Организация = Организация;
				Проводка.Содержание  = Основание + " по ведомости №" + СтрокаТЗ.Номер + " от " + СтрокаТЗ.Дата;
				Проводка.Сумма       = СтрокаТЗ.СуммаВзаиморасчетов;
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
				
				Проводка.СчетКт      = СчетКт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"СтатьиДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
								
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
			КонецЕсли;
			Если СтрокаТЗ.КомпенсацияЗаЗадержкуЗарплаты <> 0 Тогда
				Проводка = Проводки.Добавить();
				
				Проводка.Период      = Дата;
				Проводка.Активность  = Истина;
				Проводка.Организация = Организация;
				Проводка.Сумма       = СтрокаТЗ.КомпенсацияЗаЗадержкуЗарплаты;
				
				Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);
				
				Проводка.Содержание  = Основание + " по ведомости №" + СтрокаТЗ.Номер + " от " + СтрокаТЗ.Дата;
				Проводка.СчетКт      = СчетКт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", 
					РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
								
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	// По регистру расчетов с бюджетом по НДФЛ
	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПлДок.Ссылка.Дата > КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
	|			ТОГДА ПлДок.Ссылка.Дата
	|		ИНАЧЕ КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
	|	КОНЕЦ КАК ДатаНДФЛ
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК ПлДок
	|ГДЕ
	|	ПлДок.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлДок.Ссылка.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДатаНДФЛ = Выборка.ДатаНДФЛ;
	
	СтруктураДокумента = Новый Структура("ДатаНДФЛ,Ссылка,Период,ОбособленноеПодразделение,Организация",ДатаНДФЛ,Ссылка,Дата,Организация,ГоловнаяОрганизация);
	
	ТекстТаблицыВыплаты = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.Физлицо КАК ФизЛицо,
	|	СУММА(ЗарплатаКВыплате.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТВыплатыФизлицам
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК ПлДок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|			ПО ЗарплатаКВыплате.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|				И ЗарплатаКВыплате.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|				И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
	|		ПО ПлДок.Ведомость = ЗарплатаКВыплате.Ссылка
	|ГДЕ
	|	ПлДок.Ссылка = &ДокументСсылка
	|	И ЗарплатаКВыплате.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.Физлицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗарплатаКВыплате.Сумма) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	ПроведениеРасчетов.СформироватьРасчетыПоНДФЛПриВыплате(СтруктураДокумента, ТекстТаблицыВыплаты, Движения.НДФЛРасчетыСБюджетом, Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ);
		
КонецПроцедуры // ДвиженияПоЗарплатеРегл()

Процедура ДвиженияПоЗарплатеРеглПоРаботнику(СтруктураШапкиДокумента)

	// Бухгалтерские проводки документа
	Проводки = Движения.Хозрасчетный;
	
	СчетКт = СчетКасса;
	
	Если НЕ ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
		Проводка = Проводки.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Активность  = Истина;
		Проводка.Организация = Организация;
		Проводка.Сумма       = СуммаДокумента;
		
		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		
		Проводка.Содержание  = ?(ЗначениеЗаполнено(Основание),Основание, "Без указания ведомости");
		Проводка.СчетКт      = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"СтатьиДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
		Возврат;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;

	// По регистрам ВзаиморасчетыСРаботникамиОрганизаций и Хозрасчетный
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма,
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК КомпенсацияЗаЗадержкуЗарплаты,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Номер,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &парамПлатВедомость
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = &парамКонтрагент
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &парамВыплаченностьЗарплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка";

	Запрос.УстановитьПараметр("парамПлатВедомость",					ПлатежнаяВедомость);
	Запрос.УстановитьПараметр("парамКонтрагент",					Контрагент);
	Запрос.УстановитьПараметр("парамВыплаченностьЗарплаты",			Перечисления.ВыплаченностьЗарплаты.Выплачено);

	Результат = Запрос.Выполнить().Выбрать();
	
	ФормироватьПроводкиСводно = (ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.ВидыСубконто.Найти(
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") = Неопределено);

	СтрокаДвижения = Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Добавить();
	СтрокаДвижения.Физлицо   = Контрагент;
	СтрокаДвижения.Ведомость = ПлатежнаяВедомость;
	
	Пока Результат.Следующий() Цикл

		Если Результат.Сумма <> 0 Тогда
			
			Если ФормироватьДвиженияПоВзаиморасчетамСРаботникамиОрганизаций Тогда
				Строка = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
				Строка.Период      			= Дата;
				Строка.ВидДвижения 			= ВидДвиженияНакопления.Расход;
				Строка.ФизЛицо 				= Контрагент;
				Строка.Организация 			= Организация;
				Строка.ПериодВзаиморасчетов = Результат.ПериодРегистрации;
				Строка.СуммаВзаиморасчетов 	= Результат.Сумма;
			Иначе
				НоваяСтрока = ТаблицаВзаиморасчетовСРаботникамиОрганизаций.Добавить();
				НоваяСтрока.ФизЛицо 				= Контрагент;
				НоваяСтрока.СуммаВзаиморасчетов 	= Результат.Сумма;
			КонецЕсли;
			
			Проводка = Проводки.Добавить();
			
			Проводка.Период      = Дата;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;
			Проводка.Сумма       = Результат.Сумма;
			
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
			Если Не ФормироватьПроводкиСводно Тогда
				Проводка.СубконтоДт.РаботникиОрганизаций = Контрагент;
			КонецЕсли;
			
			Проводка.Содержание  = Основание + " по ведомости №" + Результат.Номер + " от " + Результат.Дата;
			Проводка.СчетКт      = СчетКт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"СтатьиДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
						
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
		КонецЕсли;
		
		Если Результат.КомпенсацияЗаЗадержкуЗарплаты <> 0 Тогда
			
			Проводка = Проводки.Добавить();
			
			Проводка.Период      = Дата;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;
			Проводка.Сумма       = Результат.КомпенсацияЗаЗадержкуЗарплаты;
			
			Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);
			
			Проводка.Содержание  = Основание + " по ведомости №" + Результат.Номер + " от " + Результат.Дата;
			Проводка.СчетКт      = СчетКт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"СтатьиДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// По регистру расчетов с бюджетом по НДФЛ
	
	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ПлатежнаяВедомость",	ПлатежнаяВедомость);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПлДок.Дата > КОНЕЦПЕРИОДА(ПлДок.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА ПлДок.Дата
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ПлДок.ПериодРегистрации, МЕСЯЦ)
	|	КОНЕЦ КАК ДатаНДФЛ
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций КАК ПлДок
	|ГДЕ
	|	ПлДок.Ссылка = &ПлатежнаяВедомость";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДатаНДФЛ = Выборка.ДатаНДФЛ;
	
	СтруктураДокумента = Новый Структура("ДатаНДФЛ,Ссылка,Период,ОбособленноеПодразделение,Организация",ДатаНДФЛ,Ссылка,Дата,Организация,ГоловнаяОрганизация);
	
	ТекстТаблицыВыплаты = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.Физлицо КАК ФизЛицо,
	|	СУММА(ЗарплатаКВыплате.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТВыплатыФизлицам
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|			ПО ЗарплатаКВыплате.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|				И ЗарплатаКВыплате.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|				И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
	|		ПО РасходныйКассовыйОрдер.ПлатежнаяВедомость = ЗарплатаКВыплате.Ссылка
	|			И РасходныйКассовыйОрдер.Контрагент = ЗарплатаКВыплате.Физлицо
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &ДокументСсылка
	|	И ЗарплатаКВыплате.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.Физлицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗарплатаКВыплате.Сумма) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	ПроведениеРасчетов.СформироватьРасчетыПоНДФЛПриВыплате(СтруктураДокумента, ТекстТаблицыВыплаты, Движения.НДФЛРасчетыСБюджетом, Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ);
	
КонецПроцедуры // ДвиженияПоЗарплатеРеглПоРаботнику()

Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента)
	
	СодержаниеПроводки = Основание + ?(ЗначениеЗаполнено(Приложение), ", " + Приложение, "");
	
	Проводки = Движения.Хозрасчетный;

	КассаВВалюте = (ВалютаДокумента <> мВалютаРегламентированногоУчета);

	СчетКт = СтруктураШапкиДокумента.СчетКасса;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк 
		Тогда
		СтруктураШапкиДокумента.Вставить("КоррПодразделение", СтруктураШапкиДокумента.ПодразделениеОрганизации);
	Иначе
		СтруктураШапкиДокумента.Вставить("КоррПодразделение", СтруктураШапкиДокумента.ПодразделениеДт);
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда

		СтруктураШапкиДокумента.Вставить("КоррСчет", СчетКт);
		
		ТаблицаДокумента = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		
		Если ЕстьРасчетыПоКредитам Тогда
			ТаблицаДокумента.ЗагрузитьКолонку(ТаблицаДокумента.ВыгрузитьКолонку("СчетОплаты"),"СчетАванса");
		КонецЕсли; 

		ОпределятьСостояниеРасчетов = ЕстьРасчетыСКонтрагентами;
		
		ТаблицаРаспределенияОплат = УправлениеВзаиморасчетами.ПогаситьЗадолженностьКонтрагентов(
			СтруктураШапкиДокумента, ТаблицаДокумента, ЭтотОбъект, 
			Отказ, Заголовок, СодержаниеПроводки, ОпределятьСостояниеРасчетов);

		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		
		Если НЕ ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = Дата;
			Проводка.Организация = Организация;
			Проводка.Сумма       = СуммаДокумента;
			
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
			
			Проводка.Содержание  = СодержаниеПроводки;
			Проводка.СчетКт      = СчетКт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
		Иначе
			
			ФормироватьПроводкиСводно = (ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам.ВидыСубконто.Найти(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") = Неопределено);
			
			Для Каждого СтрокаТЧ Из ВыплатаДепонентов Цикл
				
				Если СтрокаТЧ.СуммаКВыплате = 0 Тогда
					Возврат
				КонецЕсли;
				
				Если Не СтрокаТЧ.ФизЛицо.Пустая() Тогда
					
					Движение = Движения.ВзаиморасчетыСДепонентамиОрганизаций.Добавить();
					
					// Свойства
					Движение.Период      = Дата;
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					// Измерения
					Движение.Организация = Организация;
					Движение.ФизЛицо     = СтрокаТЧ.ФизЛицо;
					Движение.Ведомость   = СтрокаТЧ.Ведомость;
					
					// Ресурсы
					Движение.Сумма		 = СтрокаТЧ.СуммаКВыплате;
					
				КонецЕсли;
				Если Не ФормироватьПроводкиСводно Тогда
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период      = Дата;
					Проводка.Организация = Организация;
					Проводка.Сумма       = СтрокаТЧ.СуммаКВыплате;
					
					Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
					Проводка.СубконтоДт.РаботникиОрганизаций = СтрокаТЧ.ФизЛицо;
					
					Проводка.Содержание  = СодержаниеПроводки;
					Проводка.СчетКт      = СчетКт;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
				КонецЕсли;
				
			КонецЦикла; 
			
			Если ФормироватьПроводкиСводно Тогда
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Дата;
				Проводка.Организация = Организация;
				Проводка.Сумма       = ВыплатаДепонентов.Итог("СуммаКВыплате");
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
				
				Проводка.Содержание  = СодержаниеПроводки;
				Проводка.СчетКт      = СчетКт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
			КонецЕсли;

			// {УчетДоходовИРасходовИП
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
				ТаблицаАвансов = Движения.ВзаиморасчетыСДепонентамиОрганизаций.Выгрузить();
				ТаблицаАвансов.Свернуть("Физлицо", "Сумма");
				
				ТаблицаАвансов.Колонки.Добавить("ДокументОплаты");
				ТаблицаАвансов.Колонки.Добавить("РеквизитыДокументаОплаты");
				ТаблицаАвансов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "ДокументОплаты");
				ТаблицаАвансов.ЗаполнитьЗначения(ДоходыИРасходыПредпринимателя.РеквизитыДокументаОплаты(СтруктураШапкиДокумента), "РеквизитыДокументаОплаты");
				
				ДоходыИРасходыПредпринимателя.ВыплатаЗарплаты(ЭтотОбъект, СтруктураШапкиДокумента, ТаблицаАвансов);
			КонецЕсли;
			// }УчетДоходовИРасходовИП
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		ДвиженияПоЗарплатеРегл(Отказ, Заголовок, СтруктураШапкиДокумента);
		
		// {УчетДоходовИРасходовИП
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетепредпринимателя Тогда
			Если ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
				Если ФормироватьДвиженияПоВзаиморасчетамСРаботникамиОрганизаций Тогда
					ТаблицаАвансов = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Выгрузить();
				Иначе
					ТаблицаАвансов = ТаблицаВзаиморасчетовСРаботникамиОрганизаций;
				КонецЕсли;
				ТаблицаАвансов.Свернуть("Физлицо", "СуммаВзаиморасчетов");
				ТаблицаАвансов.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
				
				ТаблицаАвансов.Колонки.Добавить("ДокументОплаты");
				ТаблицаАвансов.Колонки.Добавить("РеквизитыДокументаОплаты");
				ТаблицаАвансов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "ДокументОплаты");
				ТаблицаАвансов.ЗаполнитьЗначения(ДоходыИРасходыПредпринимателя.РеквизитыДокументаОплаты(СтруктураШапкиДокумента), "РеквизитыДокументаОплаты");
				
				ДоходыИРасходыПредпринимателя.ВыплатаЗарплаты(ЭтотОбъект, СтруктураШапкиДокумента, ТаблицаАвансов);
			КонецЕсли;
		КонецЕсли;
		// }УчетДоходовИРасходовИП
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		ДвиженияПоЗарплатеРеглПоРаботнику(СтруктураШапкиДокумента);
		
		// {УчетДоходовИРасходовИП
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетепредпринимателя Тогда
			Если ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
				Если ФормироватьДвиженияПоВзаиморасчетамСРаботникамиОрганизаций Тогда
					ТаблицаАвансов = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Выгрузить();
				Иначе
					ТаблицаАвансов = ТаблицаВзаиморасчетовСРаботникамиОрганизаций;
				КонецЕсли;
				ТаблицаАвансов.Свернуть("Физлицо", "СуммаВзаиморасчетов");
				ТаблицаАвансов.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
				
				ТаблицаАвансов.Колонки.Добавить("ДокументОплаты");
				ТаблицаАвансов.Колонки.Добавить("РеквизитыДокументаОплаты");
				ТаблицаАвансов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "ДокументОплаты");
				ТаблицаАвансов.ЗаполнитьЗначения(ДоходыИРасходыПредпринимателя.РеквизитыДокументаОплаты(СтруктураШапкиДокумента), "РеквизитыДокументаОплаты");
				
				ДоходыИРасходыПредпринимателя.ВыплатаЗарплаты(ЭтотОбъект, СтруктураШапкиДокумента, ТаблицаАвансов);
			КонецЕсли;
		КонецЕсли;
		// }УчетДоходовИРасходовИП
		
	Иначе
		
		Проводка = Проводки.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		
		Проводка.Содержание = СодержаниеПроводки;
			
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда
			
			Если КассаВВалюте Тогда
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
			КонецЕсли;
			
			Проводка.СубконтоДт.РаботникиОрганизаций = СтруктураШапкиДокумента.Контрагент;
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход
			ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
			
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДт3);
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
			
			Проводка.СчетДт = СчетУчетаРасчетовСКонтрагентом;
			Проводка.СубконтоДт.БанковскиеСчета               = СтруктураШапкиДокумента.СчетОрганизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
			
		КонецЕсли;
		
		Проводка.СчетКт = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиДвиженияДенежныхСредств",РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.КоррПодразделение, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
		Если КассаВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			
			ВалютаРег       = мВалютаРегламентированногоУчета;
			ДанныеОВалюте   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
			
			Проводка.Сумма  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			КурсДокумента, ДанныеОВалюте.Курс, 
			КратностьДокумента, ДанныеОВалюте.Кратность);
			
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			
		Иначе
			Проводка.Сумма  = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
		// {УчетДоходовИРасходовИП
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетепредпринимателя Тогда
			
			мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация);
			
			ТаблицаАвансов = Новый ТаблицаЗначений;
			ТаблицаАвансов.Колонки.Добавить("ДокументОплаты");
			ТаблицаАвансов.Колонки.Добавить("РеквизитыДокументаОплаты");
			ТаблицаАвансов.Колонки.Добавить("Сумма");
			
			ДокументОплаты = ТаблицаАвансов.Добавить();
			ДокументОплаты.ДокументОплаты = Ссылка;
			ДокументОплаты.РеквизитыДокументаОплаты = ДоходыИРасходыПредпринимателя.РеквизитыДокументаОплаты(СтруктураШапкиДокумента);
			ДокументОплаты.Сумма = Проводка.Сумма;
			
			ТаблицаПоУслугам = Новый ТаблицаЗначений;
			ТаблицаПоУслугам.Колонки.Добавить("Номенклатура");
			ТаблицаПоУслугам.Колонки.Добавить("Счет");
			ТаблицаПоУслугам.Колонки.Добавить("СубконтоДт1");
			ТаблицаПоУслугам.Колонки.Добавить("СубконтоДт2");
			ТаблицаПоУслугам.Колонки.Добавить("СубконтоДт3");
			ТаблицаПоУслугам.Колонки.Добавить("Количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
			ТаблицаПоУслугам.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			ТаблицаПоУслугам.Колонки.Добавить("НДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			
			Услуга = ТаблицаПоУслугам.Добавить();
			Услуга.Счет = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			Услуга.СубконтоДт1 = СтруктураШапкиДокумента.СубконтоДт1;
			Услуга.СубконтоДт2 = СтруктураШапкиДокумента.СубконтоДт2;
			Услуга.СубконтоДт3 = СтруктураШапкиДокумента.СубконтоДт3;
			Услуга.СуммаБезНДС = Проводка.Сумма;
			
			ДоходыИРасходыПредпринимателя.ПоступлениеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, мУчетнаяПолитика, 1, ТаблицаПоУслугам, "Счет", "Номенклатура", "СубконтоДт", "СубконтоДт", ТаблицаАвансов);
			
		КонецЕсли;
		// }УчетДоходовИРасходовИП
	КонецЕсли;

	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);

	//Учет по УСН
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН  ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
		Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
        	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, Новый Структура("ТаблицаРасчетов", ТаблицаРаспределенияОплат));
		Иначе
			НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеДокумента(Отказ, Заголовок,СтруктураШапкиДокумента)

	// Проверка шапки документа
	
	СтруктураПолей = Новый Структура("Организация");

	СтруктураПолей.Вставить("СчетКасса",       "Не указан счет учета денежных средств.");
	СтруктураПолей.Вставить("СуммаДокумента");

	Если СчетКасса.Валютный Тогда
		СтруктураПолей.Вставить("ВалютаДокумента","Не указана валюта документа.");
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
		
		СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", "Не указан счет дебета.");
		
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		СтруктураПолей.Вставить("Контрагент", "Не заполнено значение реквизита ""Контрагент"".");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда
		СтруктураПолей.Вставить("Контрагент", "Не указано подотчетное лицо.");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		СтруктураПолей.Вставить("СчетОрганизации", "Не указан банковский счет организации.");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		СтруктураПолей.Вставить("Контрагент", "Не указан работник.");
		СтруктураПолей.Вставить("ПлатежнаяВедомость", "Не указана платежная ведомость.");
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);

	// Проверка табличной части РасшифровкаПлатежа
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа") = СуммаДокумента Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не совпадают сумма документа и ее расшифровка.",Отказ,Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	КолСтрок = РасшифровкаПлатежа.Количество();
	
	Для каждого Платеж из РасшифровкаПлатежа Цикл
		
		Если КолСтрок = 1 Тогда
			ТекстНомераСтроки = "";
		Иначе
			ТекстНомераСтроки = "Строка " + Платеж.НомерСтроки + " расшифровки платежа: ";
		КонецЕсли;
		
		ЕстьРасчетыСПоставщикамиПокупателями = 
			(ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику)
			ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю);
		
		Если ЕстьРасчетыСПоставщикамиПокупателями Тогда
			
			Если НЕ ЗначениеЗаполнено(Платеж.СпособПогашенияЗадолженности) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Погашение задолженности"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			ИначеЕсли (Платеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу)
				И НЕ ЗначениеЗаполнено(Платеж.Сделка) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Документ расчетов"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
			
			Если НЕ ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Договор контрагента"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			Если (ЕстьРасчетыПоКредитам
				ИЛИ (Платеж.СпособПогашенияЗадолженности <> Перечисления.СпособыПогашенияЗадолженности.НеПогашать))
				И НЕ ЗначениеЗаполнено(Платеж.СчетУчетаРасчетовСКонтрагентом) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Счет расчетов"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			Если ЕстьРасчетыСПоставщикамиПокупателями 
				И НЕ ЗначениеЗаполнено(Платеж.СчетУчетаРасчетовПоАвансам) Тогда
				СтрокаСообщения = ТекстНомераСтроки
					+ "Не заполнено значение реквизита ""Счет авансов"".";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) Тогда
				
				ВидДоговораКонтрагента = Платеж.ДоговорКонтрагента.ВидДоговора;
				Если (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
					
					СтрокаСообщения = ТекстНомераСтроки
						+ "Договор """ + Строка(Платеж.ДоговорКонтрагента) + """ с видом """ + Строка(ВидДоговораКонтрагента) + "
						| не может использоваться в операции """ + Строка(ВидОперации) + """.
						|Допускается использовать только договоры вида: ""C поставщиком"", ""С комиссионером"", ""С комитентом"".";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
					
				ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) Тогда
					
					СтрокаСообщения = ТекстНомераСтроки
						+ "Договор """ + Строка(Платеж.ДоговорКонтрагента) + """ с видом """ + Строка(ВидДоговораКонтрагента) + "
						| не может использоваться в операции """ + Строка(ВидОперации) + """.
						|Допускается использовать только договоры вида: ""C покупателем"", ""С комитентом"", ""С комиссионером""."; 
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);

				ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам)
					И (ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.Прочее) Тогда
					
					СтрокаСообщения = ТекстНомераСтроки
						+	"Договор """ + Строка(Платеж.ДоговорКонтрагента) + """ с видом """ + Строка(ВидДоговораКонтрагента) + "
						| не может использоваться в операции """ + Строка(ВидОперации) + """.
						|Допускается использовать только договоры вида ""Прочее"".";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);

				КонецЕсли;
				
				УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(
					Организация, Платеж.ДоговорКонтрагента, Платеж.ДоговорКонтрагента.Организация, Отказ, Заголовок);
														  
				УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
					СтруктураШапкиДокумента, Платеж.ДоговорКонтрагента, Отказ, Заголовок, ТекстНомераСтроки);
														  
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	

	Если ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
			
			Запрос = Новый Запрос;
			
			// Установим параметры запроса
			Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
			Запрос.УстановитьПараметр("Дата",				Дата);
			Запрос.УстановитьПараметр("Организация",		Организация);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасходныйКассовыйОрдерВыплатаДепонентов.НомерСтроки,
			|	РасходныйКассовыйОрдерВыплатаДепонентов.Ведомость,
			|	РасходныйКассовыйОрдерВыплатаДепонентов.Ведомость.Номер КАК Номер,
			|	РасходныйКассовыйОрдерВыплатаДепонентов.Ведомость.Дата КАК Дата,
			|	РасходныйКассовыйОрдерВыплатаДепонентов.ФизЛицо,
			|	ЕСТЬNULL(ВзаиморасчетыСДепонентамиОрганизацийОстатки.СуммаОстаток, 0) КАК ОстатокДепонента,
			|	РасходныйКассовыйОрдерВыплатаДепонентов.СуммаКВыплате,
			|	РасходныйКассовыйОрдерВыплатаДепонентов.Ведомость.ПериодРегистрации
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер.ВыплатаДепонентов КАК РасходныйКассовыйОрдерВыплатаДепонентов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(
			|				&Дата,
			|				Организация = &Организация
			|					И Физлицо В
			|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|							РасходныйКассовыйОрдерВыплатаДепонентов.ФизЛицо
			|						ИЗ
			|							Документ.РасходныйКассовыйОрдер.ВыплатаДепонентов КАК РасходныйКассовыйОрдерВыплатаДепонентов
			|						ГДЕ
			|							РасходныйКассовыйОрдерВыплатаДепонентов.Ссылка = &ДокументСсылка)) КАК ВзаиморасчетыСДепонентамиОрганизацийОстатки
			|		ПО РасходныйКассовыйОрдерВыплатаДепонентов.ФизЛицо = ВзаиморасчетыСДепонентамиОрганизацийОстатки.Физлицо
			|			И РасходныйКассовыйОрдерВыплатаДепонентов.Ведомость = ВзаиморасчетыСДепонентамиОрганизацийОстатки.Ведомость
			|ГДЕ
			|	РасходныйКассовыйОрдерВыплатаДепонентов.Ссылка = &ДокументСсылка";
			
			ФормироватьПроводкиСводно = (ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам.ВидыСубконто.Найти(
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") = Неопределено);
			ВыборкаПоВыплатаДепонентов = Запрос.Выполнить().Выбрать();
			Пока ВыборкаПоВыплатаДепонентов.Следующий() Цикл
				НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоВыплатаДепонентов.НомерСтроки) +
				""" табл. части: ";
				
				ЕстьФизЛицо = ЗначениеЗаполнено(ВыборкаПоВыплатаДепонентов.ФизЛицо);
				ЕстьВедомость = ЗначениеЗаполнено(ВыборкаПоВыплатаДепонентов.Ведомость);
				
				Если Не ЕстьФизЛицо и Не ФормироватьПроводкиСводно Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "не указан работник!", Отказ, Заголовок);
				КонецЕсли;
				
				Если Не ЕстьВедомость Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "не указана платежная ведомость!", Отказ, Заголовок);
				КонецЕсли;
				
				Если ЕстьВедомость И ЕстьФизЛицо 
					И ВыборкаПоВыплатаДепонентов.ОстатокДепонента < ВыборкаПоВыплатаДепонентов.СуммаКВыплате Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(
						НачалоСообщения + "невыданный остаток депонента (" + Формат(ВыборкаПоВыплатаДепонентов.ОстатокДепонента,"ЧДЦ=2")
						+ ") меньше суммы, указанной в документе!", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ВыплатаДепонентов.Итог("СуммаКВыплате") <> СуммаДокумента Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Сумма документа не совпадает с итогом по депонентам!",Отказ,Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
			
			// Проверка на то, чтобы в закрываемых ведомостях не было невыплаченных значений.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("НеВыплачено",	Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
			Запрос.УстановитьПараметр("Ссылка",			Ссылка);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Представление КАК Ведомость
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
			|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
			|ГДЕ
			|	ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &НеВыплачено
			|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			
			Пока РезультатЗапроса.Следующий() Цикл
				ОбщегоНазначения.СообщитьОбОшибке(РезультатЗапроса.Ведомость + ": есть строки с невыплаченной зарплатой!", Отказ, Заголовок);
			КонецЦикла;
			
			// Проверка на то, чтобы ведомости были раньше РКО.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата",	КонецДня(Дата));
			Запрос.УстановитьПараметр("Ссылка",	Ссылка);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Представление КАК Ведомость
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
			|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
			|ГДЕ
			|	(ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата > &Дата
			|			ИЛИ ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации > &Дата)
			|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			
			Пока РезультатЗапроса.Следующий() Цикл
				ОбщегоНазначения.СообщитьОбОшибке(РезультатЗапроса.Ведомость + ": оформлена позже, чем этот РКО или месяц начисления платежной ведомости больше даты этого РКО.", Отказ, Заголовок);
			КонецЦикла;
			
			//Проверка на то, что каждая ведомость указана только один раз
			Запрос=Новый Запрос;
			Запрос.Текст=
			"ВЫБРАТЬ
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость КАК Ведомость,
			|	СУММА(1) КАК Количество
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
			|ГДЕ
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
			|
			|ИМЕЮЩИЕ
			|	СУММА(1) > 1";
			
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Пока РезультатЗапроса.Следующий() Цикл
				ОбщегоНазначения.СообщитьОбОшибке("Ведомость: " + РезультатЗапроса.Ведомость + " указана более одного раза.",Отказ,Заголовок);
			КонецЦикла;
			
			//Проверка на соответствие суммы по ведомостям сумме документа
			Запрос=Новый Запрос;
			Запрос.Текст=
			"ВЫБРАТЬ
			|	СУММА(ЗарплатаКВыплате.Сумма + ЗарплатаКВыплате.КомпенсацияЗаЗадержкуЗарплаты) КАК СуммаВыплачено
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
			|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплате.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
			|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
			|			И ЗарплатаКВыплате.Физлицо = РанееВыплаченныеСуммы.Физлицо
			|			И РанееВыплаченныеСуммы.Регистратор <> &Ссылка
			|ГДЕ
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка
			|	И ЗарплатаКВыплате.ВыплаченностьЗарплаты = &Выплачено
			|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL";
			
			Запрос.УстановитьПараметр("Выплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Если НЕ (Результат.Следующий() И Результат.СуммаВыплачено=СуммаДокумента) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы.",Отказ,Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			
			// Проверка на то, чтобы сведения в РКО соответствовали сведениям в указанной ПлатежнойВедомости.
			ТекстЗапрос = 	
			"ВЫБРАТЬ
			|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.СпособВыплаты,
			|	РанееВыплаченныеСуммы.Регистратор,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата КАК ДатаВедомости,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации КАК ПериодРегистрацииВедомости
			|ИЗ
			|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
			|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
			|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
			|			И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
			|ГДЕ
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &парамПлатВедомость
			|	И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = &парамФизлицо
			|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &парамВыплачено
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
			|	РанееВыплаченныеСуммы.Регистратор,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.СпособВыплаты,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации";
			Запрос = Новый Запрос(ТекстЗапрос);
			Запрос.УстановитьПараметр("парамФизлицо",Контрагент); 
			Запрос.УстановитьПараметр("парамПлатВедомость", ПлатежнаяВедомость);	
			Запрос.УстановитьПараметр("парамПустойРКО", Документы.РасходныйКассовыйОрдер.ПустаяСсылка());	
			Запрос.УстановитьПараметр("парамВыплачено", Перечисления.ВыплаченностьЗарплаты.Выплачено);	
			Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Если ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(ПлатежнаяВедомость) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В указанной платежной ведомости нет указанного работника.",Отказ,Заголовок);
				КонецЕсли;
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				Если Выборка.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Указанная платежная ведомость оформлена на ""Перечисление в банк"".",Отказ,Заголовок);
				КонецЕсли;
				Если Выборка.Организация <> Организация Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Указанная платежная ведомость по указанному работнику оформлена на другую организацию.",Отказ,Заголовок);
				КонецЕсли;
				Если Выборка.Регистратор <> Null Тогда
					ОбщегоНазначения.СообщитьОбОшибке("По этому работнику указанной платежной ведомости уже есть расходный кассовый ордер или сумма задепонирована.",Отказ,Заголовок);
				КонецЕсли;
				Если Выборка.Организация <> Организация Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Указанная платежная ведомость по указанному работнику оформлена на другую организацию.",Отказ,Заголовок);
				КонецЕсли;
				Если Выборка.Сумма <> СуммаДокумента Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Указанная платежная ведомость по указанному работнику содержит другой размер выплаты.",Отказ,Заголовок);
				КонецЕсли;
				Если КонецДня(Дата) < Выборка.ДатаВедомости Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Указанная платежная ведомость оформлена позже, чем этот РКО!",Отказ,Заголовок);
				КонецЕсли;
				Если Дата < Выборка.ПериодРегистрацииВедомости Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Месяц начисления платежной ведомости больше даты этого РКО!",Отказ,Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если (Основание = Неопределено) ИЛИ Не ЭтотОбъект.Метаданные().Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		Возврат;
	КонецЕсли;
	
	/// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание, Ложь);
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")	Тогда
		Если Основание.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
			Сообщить("Платежная ведомость оформлена на перечисление в банк.");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВалютаДокумента             = мВалютаРегламентированногоУчета;
	ПараметрыДокументаОснования = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Основание);
	ВидДокументаОснования       = Основание.Метаданные().Имя;
	
	КурсДокумента      = 1;
	КратностьДокумента = 1;

	ДокументОснование = ПараметрыДокументаОснования.Ссылка;

	Если НЕ ЗначениеЗаполнено(СчетКасса) Тогда
		СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	КонецЕсли;

	Если ВидДокументаОснования = "ПоступлениеТоваровУслуг"
	 или ВидДокументаОснования = "ПоступлениеДопРасходов" 
	 или ВидДокументаОснования = "ПоступлениеНМА"
	 или ВидДокументаОснования = "ОтчетКомиссионераОПродажах"
	 или ВидДокументаОснования = "ОтчетКомитентуОПродажах"
	 или ВидДокументаОснования = "ВозвратТоваровОтПокупателя" Тогда
	 
	 	Если ВидДокументаОснования = "ВозвратТоваровОтПокупателя"  Тогда
			 ВидОперации  = Перечисления.ВидыОперацийРКО.ВозвратПокупателю;
		Иначе
			 ВидОперации  = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		КонецЕсли; 

		Контрагент   = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору           = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
		Если ВидРасчетовПоДоговору=Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте тогда
			ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		
		Если ВидДокументаОснования = "ОтчетКомиссионераОПродажах"тогда
			СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
			
			СтрокаТаблицыСумм.СуммаПлатежа	= ПараметрыДокументаОснования.СуммаВознаграждения;
			СтрокаТаблицыСумм.СтавкаНДС	= ПараметрыДокументаОснования.СтавкаНДСВознаграждения;
			СтрокаТаблицыСумм.СуммаНДС	= Основание.Товары.Итог("СуммаНДСВознаграждения");
			Если не ПараметрыДокументаОснования.СуммаВключаетНДС Тогда
				СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа+СтрокаТаблицыСумм.СуммаНДС;
			КонецЕсли; 
			
		Иначе
			СуммаДокументаОснования = УчетНДС.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			Если ВидДокументаОснования = "ОтчетКомитентуОПродажах" Тогда
				СуммаДокументаОснования.ЗаполнитьЗначения(0, "СуммаНДС");
				Если ПараметрыДокументаОснования.УдержатьВознаграждение Тогда 
					СуммаКоррПлатежа= СуммаДокументаОснования.Итог("СуммаПлатежа") - ПараметрыДокументаОснования.СуммаВознаграждения;
					НоваяКолонкаСумм = ОбщегоНазначения.РаспределитьПропорционально(СуммаКоррПлатежа,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
					Если не НоваяКолонкаСумм = Неопределено Тогда
						СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаСумм,"СуммаПлатежа");
					КонецЕсли; 
					
					Если Не ПараметрыДокументаОснования.СуммаВключаетНДС Тогда
						СуммаКоррНДС	= СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДСВознаграждения");
						НоваяКолонкаНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаКоррНДС,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
						Если не НоваяКолонкаНДС = Неопределено Тогда
							СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС,"СуммаПлатежа");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ПараметрыДокументаОснования.ДоговорКонтрагента.УчетАгентскогоНДС И Основание.Дата >= '20060101000000' Тогда
					СуммаКоррНДС	= СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДС");
					НоваяКолонкаНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаКоррНДС,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
					Если не НоваяКолонкаНДС = Неопределено Тогда
						СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС,"СуммаПлатежа");
					КонецЕсли; 
				КонецЕсли;
			ИначеЕсли ВидДокументаОснования = "ПоступлениеДопРасходов" тогда
				Если Не(ПараметрыДокументаОснования.Сумма=0 и ПараметрыДокументаОснования.СуммаНДС=0)  тогда
					Если СуммаДокументаОснования.Количество()=0 тогда
						СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
					Иначе
						СтрокаТаблицыСумм = СуммаДокументаОснования[0];
					КонецЕсли;
					СтрокаТаблицыСумм.СуммаПлатежа	= СтрокаТаблицыСумм.СуммаПлатежа + ПараметрыДокументаОснования.Сумма;
					СтрокаТаблицыСумм.СуммаНДС		= СтрокаТаблицыСумм.СуммаНДС + ПараметрыДокументаОснования.СуммаНДС;
					Если не ПараметрыДокументаОснования.СуммаВключаетНДС Тогда
						СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа+ПараметрыДокументаОснования.СуммаНДС;
					КонецЕсли; 
				КонецЕсли;
				СуммаДокументаОснования.ЗаполнитьЗначения(ПараметрыДокументаОснования.СтавкаНДС,"СтавкаНДС");
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,"КратностьВзаиморасчетов");
		
		// При вводе на основании устанавливаем режим распределения оплаты "По документу",
		// кроме ввода на основании отчета комитенту - задолженность перед комитентом образуется другими документами
		Если ВидДокументаОснования = "ОтчетКомитентуОПродажах" Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.Автоматически, "СпособПогашенияЗадолженности");
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.ПоДокументу, "СпособПогашенияЗадолженности");
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание, "Сделка");
		КонецЕсли;

		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			Если ДоговорКонтрагента.УчетАгентскогоНДС Тогда
				СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаПлатежа - СтрокаПлатеж.СуммаНДС;
				СтрокаПлатеж.СуммаНДС = 0;
				СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");

		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
			Если ПараметрыДокументаОснования.РасчетыВУсловныхЕдиницах тогда
				Если ПараметрыДокументаОснования.ВалютаДокумента = мВалютаРегламентированногоУчета тогда
					СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
																				мВалютаРегламентированногоУчета,ПараметрыДокументаОснования.ВалютаВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КурсВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КратностьВзаиморасчетов);
					СтрокаПлатеж.СуммаНДС 			 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаНДС,
																				мВалютаРегламентированногоУчета,ПараметрыДокументаОснования.ВалютаВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КурсВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КратностьВзаиморасчетов);
				КонецЕсли;

				СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
																		ПараметрыДокументаОснования.ВалютаВзаиморасчетов,мВалютаРегламентированногоУчета,
																		СтрокаПлатеж.КурсВзаиморасчетов,1,
																		СтрокаПлатеж.КратностьВзаиморасчетов,1);
				СтрокаПлатеж.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту	  (СтрокаПлатеж.СуммаНДС,
																		ПараметрыДокументаОснования.ВалютаВзаиморасчетов,мВалютаРегламентированногоУчета,
																		СтрокаПлатеж.КурсВзаиморасчетов,1,
																		СтрокаПлатеж.КратностьВзаиморасчетов,1);
			КонецЕсли;
		КонецЦикла; 

		Если ВидДокументаОснования = "ОтчетКомиссионераОПродажах" тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовЗаПосредническиеУслуги, "СчетУчетаРасчетовСКонтрагентом"); 
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансамВыданным, "СчетУчетаРасчетовПоАвансам") ;
			
		ИначеЕсли ВидДокументаОснования = "ОтчетКомитентуОПродажах" тогда
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ПараметрыДокументаОснования.Организация, Контрагент, ДоговорКонтрагента);
			Если ПараметрыДокументаОснования.УдержатьВознаграждение тогда
				ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовСКонтрагентом") ;
				
			Иначе
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетРасчетовСКомитентом, "СчетУчетаРасчетовСКонтрагентом") ;
				
			КонецЕсли;
			ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СчетУчетаРасчетовСКонтрагентом"),"СчетУчетаРасчетовПоАвансам");
							
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом") ;
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам") ;
			
		КонецЕсли;
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж = РасшифровкаПлатежа[0];
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда

		ЗаполнитьПоЗарплатеКВыплатеОрганизацииРегл(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда

		ЗаполнитьПоПКО();

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) или ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		СчетКасса= ПланыСчетов.Хозрасчетный.КассаОрганизации;
	Иначе
		СчетКасса= ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
	КонецЕсли; 

	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	Ответственный             = глЗначениеПеременной("глТекущийПользователь");

	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		Если ПустаяСтрока(Выдать) И ЗначениеЗаполнено(Контрагент) Тогда
			Выдать = ?(ПустаяСтрока(Контрагент.НаименованиеПолное), Контрагент.Наименование, Контрагент.НаименованиеПолное);
		КонецЕсли;
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда

		Если (ПустаяСтрока(Выдать) ИЛИ ПустаяСтрока(ПоДокументу)) И ЗначениеЗаполнено(Контрагент) Тогда
			ДанныеФизЛица = ОбщегоНазначения.ДанныеФизЛица(Организация, Контрагент, Дата);
			
			Если ПустаяСтрока(Выдать) Тогда
				Выдать = ДанныеФизЛица.Представление;
			КонецЕсли;
			
			Если ПустаяСтрока(ПоДокументу) Тогда
				ПоДокументу = ДанныеФизЛица.ПредставлениеДокумента;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;

	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	КурсДокумента        = СтруктураШапкиДокумента.КурсДокумента;
	КратностьДокумента   = СтруктураШапкиДокумента.КратностьДокумента;

	// Документ должен принадлежать хотя бы к одному виду учета (бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверятьСоответствиеСуммыДокументаИВедомости = Истина;
	ФормироватьДвиженияПоВзаиморасчетамСРаботникамиОрганизаций = Истина;
	Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() Тогда
		ФормироватьДвиженияПоВзаиморасчетамСРаботникамиОрганизаций = Ложь;
		БУ = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		Если БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") = Неопределено Тогда
			ПроверятьСоответствиеСуммыДокументаИВедомости = Ложь;
		КонецЕсли;
	КонецЕсли;

	ПроверитьЗаполнениеДокумента(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	ТаблицаВзаиморасчетовСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций.ВыгрузитьКолонки();

	//Проверим на возможность проведения в БУ и НУ
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам тогда

		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтрокаОплаты.ДоговорКонтрагента,
			Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;

	КонецЕсли;

	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	ДоговорКонтрагента = РасшифровкаПлатежа[0].ДоговорКонтрагента;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

ЕстьУчетПоСтатьямДДС 	  = УправлениеДенежнымиСредствами.ЕстьУчетПоСтатьямДДС();

