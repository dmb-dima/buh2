////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущее состояние применения УСН - для проверки перехода документа из одного налогового режима в другой
Перем мУСН;

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения

Перем СтараяВалютаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мМассивПлатежныхВедомостей;

Перем ОткрыватьНастройкуДвижений;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

// Есть ли учет по работникам на бух.счетах
Перем ЕстьУчетПоРаботникам;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВыплатаЗаработнойПлаты,ЭлементыФормы.КоманднаяПанель1);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасшифровкаПлатежа,ЭлементыФормы.КоманднаяПанельПлатежи);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВыплатаДепонентов,ЭлементыФормы.КоманднаяПанельВыплатаДепонентов.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПодразделениеДт()

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		Тогда
		ПодразделениеДт = Неопределено;
	// {ОбособленныеПодразделения	
	Иначе
		ПодразделениеДт = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения	
	КонецЕсли;

КонецПроцедуры

// {ОбособленныеПодразделения
Процедура УстановитьПодразделение()

	ОсновноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
	Если ОсновноеПодразделение.Владелец = Организация Тогда
		ПодразделениеОрганизации = ОсновноеПодразделение;
	Иначе
		ПодразделениеОрганизации = Неопределено;
	КонецЕсли;

КонецПроцедуры
// }ОбособленныеПодразделения

Процедура ОпределитьСчетаУчетаРасчетовСКонтрагентом()

	Если НЕ (ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам)Тогда

		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
			Организация, Контрагент, СтрокаПлатеж.ДоговорКонтрагента);

		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда

			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансовПокупателя;

		Иначе

			Если СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать Тогда
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = Неопределено;
			Иначе
				Если СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
					СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
				Иначе
					СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
				КонецЕсли;
			КонецЕсли;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьКурсИСуммуВзаиморасчетов()
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры // РассчитатьКурсИСуммуВзаиморасчетов()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	РассчитатьКурсИСуммуВзаиморасчетов();

	Если НЕ ЗначениеЗаполнено(Контрагент) И (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
		Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;

	// Распределение оплаты
	Если (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю) Тогда
		СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	КонецЕсли;
	
	СтрокаПлатеж.Сделка = Неопределено;
	
	ОпределитьСчетаУчетаРасчетовСКонтрагентом();
	
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()

	ВосстанавливатьРеквизиты = (РасшифровкаПлатежа.Количество() = 1);
	СтараяСтатьяДДС = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
	СтараяСтавкаНДС = СтрокаПлатеж.СтавкаНДС;
	СтараяСуммаНДС  = СтрокаПлатеж.СуммаНДС;
	СтарыйДоговор   = СтрокаПлатеж.ДоговорКонтрагента;
	Если ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам Тогда
		СчетРасчетов = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;
	
	Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ПоДокументу = Контрагент.ДокументУдостоверяющийЛичность;
	КонецЕсли;
	
	РасшифровкаПлатежа.Очистить();
	
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.ДоговорКонтрагента = СтарыйДоговор;
	
	СписокВидовДоговоров =	УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации); 
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(СтрокаПлатеж.ДоговорКонтрагента,Контрагент,Организация,СписокВидовДоговоров);				
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда 
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
	Иначе		
		Выдать =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);		
	КонецЕсли;

	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	Если ВосстанавливатьРеквизиты Тогда
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтараяСтатьяДДС;
		СтрокаПлатеж.СтавкаНДС = СтараяСтавкаНДС;
		СтрокаПлатеж.СуммаНДС  = СтараяСуммаНДС;
		Если ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам Тогда
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетРасчетов;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииКонтрагента

// Процедура выполняет заполнение реквизита Контрагент значением по умолчанию.
//
Процедура ЗаполнитьКонтрагента()

	//ВремКонтрагент = Неопределено;
	//Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
	//	ВремКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойПоставщик");

	//ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда
	//	ВремКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойПокупатель");

	//КонецЕсли;

	//Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
	//	Контрагент = ВремКонтрагент;
	//	ПриИзмененииКонтрагента();
	//	ПриИзмененииДоговора();
	//	УстановитьФокус();
	//КонецЕсли;
		
КонецПроцедуры // ЗаполнитьПолучателя()

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()
	
	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=Неопределено Тогда
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=СтрокаПлатеж;
	КонецЕсли;
	
КонецПроцедуры // УстановитьФокус()

// Процедура рассчитывает сумму взаиморасчетов подотчетного лица.
//
Процедура РассчитатьСуммуВзаиморасчетов()

	ПроверкаКурсовВалют(СтрокаПлатеж);

	ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	Если (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
			                                                  ВалютаВзаиморасчетов,
			                                                  КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
															  КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);	
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = 0;
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуВзаиморасчетов

Процедура ПриИзмененииВалютыДокумента()
	
	Если НЕ ВалютаДокумента=СтараяВалютаДокумента Тогда
			
		Если ЕстьРасчетыСКонтрагентами и  РасшифровкаПлатежа.Количество()>1 Тогда
			//Для пересчета суммы по таблице расшифровок
			ТекущиеПараметрыДокумента = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента,СуммаДокумента",СтараяВалютаДокумента, КурсДокумента, КратностьДокумента,СуммаДокумента);
		КонецЕсли; 
		
		РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(СтараяВалютаДокумента, КурсДокумента, КратностьДокумента, Дата, СуммаДокумента, ВалютаДокумента);
		СуммаДокументаПриИзменении();
		
		Если ЕстьРасчетыСКонтрагентами и  РасшифровкаПлатежа.Количество()>1 Тогда
			Если не СуммаДокумента = ТекущиеПараметрыДокумента.СуммаДокумента Тогда
			 	//Пересчитана сумма документа.
				//Запомним текущую строку платежа
				ТекущиеПараметрыДокумента.Вставить("ТекущаяСтрока", СтрокаПлатеж);
				
				//Необходимо пересчитать суммы в таблице расшифровок.
				Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
					СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
						ТекущиеПараметрыДокумента.ВалютаДокумента, ВалютаДокумента, 
						ТекущиеПараметрыДокумента.КурсДокумента, КурсДокумента,
						ТекущиеПараметрыДокумента.КратностьДокумента,КратностьДокумента);
					ПересчитатьСуммуНДС(СтрокаПлатеж);
					РассчитатьСуммуВзаиморасчетов();
				КонецЦикла; 
				//Вернем строку платежа в позицию до пересчета
				СтрокаПлатеж = ТекущиеПараметрыДокумента.ТекущаяСтрока;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииВалютыДокумента()

Процедура ЗаполнитьСчетаБанка()

	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	МассивОтбора.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	
	ЭлементыФормы.СчетБанк.СписокВыбора = РаботаСДиалогами.ЗаполнитьСписокВыбораСчетовДенежныхСредств(
		МассивОтбора, Истина, СчетКасса);
	
КонецПроцедуры

Процедура ЗаполнитьСчетаИнкассации()
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути_);
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты);
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты);
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам);
	
	ЭлементыФормы.СчетИнкассация.СписокВыбора = РаботаСДиалогами.ЗаполнитьСписокВыбораСчетовДенежныхСредств(
		МассивОтбора, Истина, СчетКасса, МассивИсключений);
	
КонецПроцедуры

// Процедура обновляет сумму по документу при изменении Контрагента или ПлатежнаяВедомость
//	когда ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
//
Процедура ОбновитьСуммуВыплаченнойЗарплаты()
	
	ТекстЗапрос = 	
	"ВЫБРАТЬ
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|			И (РанееВыплаченныеСуммы.Регистратор <> &Регистратор)
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &парамПлатВедомость
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = &парамФизлицо
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &парамВыплачено
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапрос);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("парамФизлицо",Контрагент); 
	Запрос.УстановитьПараметр("парамПлатВедомость", ПлатежнаяВедомость);
	Запрос.УстановитьПараметр("парамВыплачено", Перечисления.ВыплаченностьЗарплаты.Выплачено);	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СуммаДокумента = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СуммаДокумента = Выборка.Сумма;
	КонецЕсли;
	
	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
	
КонецПроцедуры // ОбновитьСумму()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	// Видимость реквизитов шапки
	
	НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата);
	ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	
	КассаВВалюте = СчетКасса.Валютный;
	ЭлементыФормы.ВалютаДокумента.Видимость = КассаВВалюте;
	ЭлементыФормы.НадписьВалюта.Видимость   = КассаВВалюте;
	
	ЭтоОплатаПоставщику = (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
	
	// Видимость реквизитов расшифровки платежа
	
	Если ЭлементыФормы.ОсновнаяПанель.ОтображениеЗакладок <> ОтображениеЗакладок.НеИспользовать
		И ВидОперации <> Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям 
		И ВидОперации <> Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
		
	КонецЕсли;
	
	КолонкиРасшифровкиПлатежа = ЭлементыФормы.РасшифровкаПлатежа.Колонки;
	
	ЭтоРасчетыВ_УЕ = ЕстьРасчетыСКонтрагентами 
		И ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) 
		И СтрокаПлатеж.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	   
	ЭлементыФормы.НадписьКурсВзаиморасчетов.Видимость = ЭтоРасчетыВ_УЕ И НЕ СписокПлатежей;
	ЭлементыФормы.КурсВзаиморасчетов.Видимость        = ЭтоРасчетыВ_УЕ И НЕ СписокПлатежей;
	ЭлементыФормы.НадписьСуммаВзаиморасчетов.Видимость = ЭтоРасчетыВ_УЕ И НЕ СписокПлатежей;
	ЭлементыФормы.СуммаВзаиморасчетов.Видимость        = ЭтоРасчетыВ_УЕ И НЕ СписокПлатежей;
			
	Если ЕстьРасчетыСКонтрагентами Тогда

		// Оплата поставщику или возврат от покупателя
			
		РаботаСДиалогами.УстановитьТекущуюСтраницу("РКО",ЭлементыФормы.ОсновнаяПанель);
		
		Если СписокПлатежей Тогда
			РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
		Иначе
			РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		КонецЕсли;
		
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Видимость             = ПоказыватьВДокументахСчетаУчета;
		ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентом.Видимость      = ПоказыватьВДокументахСчетаУчета;
		КолонкиРасшифровкиПлатежа.СчетУчетаРасчетовСКонтрагентом.Видимость = ПоказыватьВДокументахСчетаУчета;
		
		ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Видимость             = ПоказыватьВДокументахСчетаУчета;
		ЭлементыФормы.НадписьСчетУчетаРасчетовПоАвансам.Видимость      = ПоказыватьВДокументахСчетаУчета;
		КолонкиРасшифровкиПлатежа.СчетУчетаРасчетовПоАвансам.Видимость = ПоказыватьВДокументахСчетаУчета;
		
		ЭлементыФормы.СтатьяДвиженияДенежныхСредств.Видимость             = ЕстьУчетПоСтатьямДДС;
		ЭлементыФормы.НадписьСтатьяДДС.Видимость 	  		              = ЕстьУчетПоСтатьямДДС;
		КолонкиРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств.Видимость = ЕстьУчетПоСтатьямДДС;

		// Распределение оплаты
		
		ЭтоОплатаПоДокументу = (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
		ЭлементыФормы.Сделка.Видимость                  = ЭтоОплатаПоДокументу;
		ЭлементыФормы.НадписьСделка.Видимость           = ЭтоОплатаПоДокументу;
		КолонкиРасшифровкиПлатежа.Сделка.ТолькоПросмотр = НЕ ЭтоОплатаПоДокументу;
		
		ЭтоАванс = (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Доступность                = НЕ ЭтоАванс;
		ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентом.Доступность         = НЕ ЭтоАванс;
		КолонкиРасшифровкиПлатежа.СчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр = ЭтоАванс;
		
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.АвтоОтметкаНезаполненного = НЕ ЭтоАванс;
		Если ЭтоАванс Тогда
			ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = Ложь;
		
		ЭлементыФормы.СписокПлатежей.Доступность = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ВзносНаличнымиВБанк", ЭлементыФормы.ОсновнаяПанель);
		
		ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = Ложь;
		
		ЭлементыФормы.СтатьяДвиженияДенежныхСредствБанк.Видимость = ЕстьУчетПоСтатьямДДС;
		ЭлементыФормы.НадписьСтатьяДДСБанк.Видимость              = ЕстьУчетПоСтатьямДДС;
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ВыплатаЗП", ЭлементыФормы.ОсновнаяПанель);
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.ЗадержкаЗарплаты.Видимость = Истина;
		
		ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = Ложь;
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			
            ЭлементыФормы.ПанельВыплатыЗарплаты.ТекущаяСтраница = ЭлементыФормы.ПанельВыплатыЗарплаты.Страницы.ПоОдномуРаботнику;
			ЭлементыФормы.ФизЛицо1.АвтоОтметкаНезаполненного    = ПроверятьСоответствиеСуммыДокументаИВедомости;
			ЭлементыФормы.Ведомость1.АвтоОтметкаНезаполненного  = ПроверятьСоответствиеСуммыДокументаИВедомости;			
			
			ЭлементыФормы.СтатьяДвиженияДенежныхСредствЗарплатаРаботнику.Видимость = ЕстьУчетПоСтатьямДДС;
			ЭлементыФормы.НадписьСтатьяДДСЗарплатаРаботнику.Видимость              = ЕстьУчетПоСтатьямДДС;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
			
            ЭлементыФормы.ПанельВыплатыЗарплаты.ТекущаяСтраница = ЭлементыФормы.ПанельВыплатыЗарплаты.Страницы.ПоВедомостям;
			
			ЭлементыФормы.СтатьяДвиженияДенежныхСредствЗарплатаПоВедомостям.Видимость = ЕстьУчетПоСтатьямДДС;
			ЭлементыФормы.НадписьСтатьяДДСЗарплатаПоВедомостям.Видимость              = ЕстьУчетПоСтатьямДДС;
			
		КонецЕсли;
		
		УстановитьВидимостьСубконто("ЗадержкаЗарплаты");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ВыплатаДепонентов", ЭлементыФормы.ОсновнаяПанель);

		ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = Ложь;
		
		ЭлементыФормы.СтатьяДвиженияДенежныхСредствДепонент.Видимость = ЕстьУчетПоСтатьямДДС;
		ЭлементыФормы.НадписьСтатьяДДСДепонент.Видимость              = ЕстьУчетПоСтатьямДДС;
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("Инкассация", ЭлементыФормы.ОсновнаяПанель);
		
		ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = Ложь;
		
		ЭлементыФормы.СтатьяДвиженияДенежныхСредствИнкассация.Видимость = ЕстьУчетПоСтатьямДДС;
		ЭлементыФормы.НадписьСтатьяДДСИнкассация.Видимость              = ЕстьУчетПоСтатьямДДС;
	
		УстановитьВидимостьСубконто("Инкассация");

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ВыдачаПодотчетномуЛицу", ЭлементыФормы.ОсновнаяПанель);

		ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = Ложь;
		
		ЭлементыФормы.СтатьяДвиженияДенежныхСредствПодотчет.Видимость = ЕстьУчетПоСтатьямДДС;
		ЭлементыФормы.НадписьСтатьяДДСПодотчет.Видимость 	  		  = ЕстьУчетПоСтатьямДДС;
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("Прочее", ЭлементыФормы.ОсновнаяПанель);
		
		ЭлементыФормы.СтатьяДвиженияДенежныхСредствПрочие.Видимость = ЕстьУчетПоСтатьямДДС;
		ЭлементыФормы.НадписьСтатьяДДСПрочие.Видимость 	  		    = ЕстьУчетПоСтатьямДДС;
		
		УстановитьВидимостьСубконто();

		ЭлементыФормы.СписокПлатежей.Доступность = Ложь;
		
	ИначеЕсли ЕстьРасчетыПоКредитам Тогда

		РаботаСДиалогами.УстановитьТекущуюСтраницу("РКО",ЭлементыФормы.ОсновнаяПанель);
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПрочиеРасчеты", ЭлементыФормы.ПанельПлатежи);

		ЭлементыФормы.СтатьяДвиженияДенежныхСредствПрочиеРасчеты.Видимость = ЕстьУчетПоСтатьямДДС;
		ЭлементыФормы.НадписьСтатьяДДСПрочиеРасчеты.Видимость 	  		   = ЕстьУчетПоСтатьямДДС;
	
		ЭлементыФормы.СписокПлатежей.Доступность = Ложь;
		
	КонецЕсли;
	
	Если НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата) Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимость()

// Устанавливает тип поля "Контрагент" в зависимости от вида операции.
//
// Параметры:
//  Нет.
//
Процедура УстановитьТипКонтрагент()

	ИмяСправочника         = "Контрагенты";
	ИмяРасчетногоДокумента = "АвансовыйОтчет";

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу ИЛИ
		ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		ИмяСправочника = "ФизическиеЛица";

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		// Прочее оприходование денежных средств пока не реализовано.

	КонецЕсли;

	Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка." + ИмяСправочника) Тогда
		Контрагент = Справочники[ИмяСправочника].ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // УстановитьТипКонтрагент()

// Устанавливает видимость реквизитов субконто и подписей к ним.
//
Процедура УстановитьВидимостьСубконто(Постфикс = "")

	Для Ном = 1 по 3 Цикл

		Если ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом)
			И (Ном <= СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество()) Тогда
			ЭлементыФормы["НадписьСубконтоДт"+Ном+Постфикс].Заголовок = 
				Строка(СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном-1].ВидСубконто);
			ЭлементыФормы["НадписьСубконтоДт"+Ном+Постфикс].Видимость = Истина;
			ЭлементыФормы["СубконтоДт"+Ном+Постфикс].Видимость        = Истина;
		Иначе
			ЭлементыФормы["НадписьСубконтоДт"+Ном+Постфикс].Видимость = Ложь;
			ЭлементыФормы["СубконтоДт"+Ном+Постфикс].Видимость        = Ложь;
		КонецЕсли;

	КонецЦикла;

	ЭлементыФормы["НадписьПодразделениеДт" + Постфикс].Видимость = СчетУчетаРасчетовСКонтрагентом.УчетПоПодразделениям;
	ЭлементыФормы["ПодразделениеДт" + Постфикс].Видимость        = СчетУчетаРасчетовСКонтрагентом.УчетПоПодразделениям;
	
КонецПроцедуры // УстановитьВидимостьСубконто()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	Если ЭтоНовый() Тогда 

		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(
			ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, ПараметрОбъектКопирования);
		
		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			
			ЗаполнитьКонтрагента();
			
			Если НЕ ЗначениеЗаполнено(СчетКасса) Тогда
				СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
			КонецЕсли;
			
			Если ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
				СчетУчетаРасчетовСКонтрагентом = ЭлементыФормы.СчетИнкассация.СписокВыбора[0].Значение;
				ПриИзмененииСчетаИнкассации();
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
				СчетУчетаРасчетовСКонтрагентом = ЭлементыФормы.СчетБанк.СписокВыбора[0].Значение;
			КонецЕсли;
			
			Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом) тогда
					ОпределитьСчетаУчетаРасчетовСКонтрагентом();
				КонецЕсли;
				
				Если ((ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику)
					ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю))
					И (НЕ ЗначениеЗаполнено(СтрокаПлатеж.СпособПогашенияЗадолженности)) Тогда
					СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;

        НомерЧекаККМ = 0;
		
	КонецЕсли;
	
	// Заполняем значения экспортных переменных модуля объекта
	ЕстьРасчетыСКонтрагентами    = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам        = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	УстановитьКурсДокумента();
	
	ЕстьУчетПоРаботникам = (ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.ВидыСубконто.Найти(
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") <> Неопределено);
		
	ЭлементыФормы.ВыплатаДепонентов.Колонки.ФизЛицо.АвтоОтметкаНезаполненного = ЕстьУчетПоРаботникам;
	ЭлементыФормы.ВыплатаДепонентов.Колонки.ФизЛицо.ЭлементУправления.АвтоОтметкаНезаполненного = ЕстьУчетПоРаботникам;
	ЭлементыФормы.ВыплатаДепонентов.Колонки.ФизЛицо.ЭлементУправления.АвтоВыборНезаполненного   = ЕстьУчетПоРаботникам;
	
	//Проверяем источник кадровой информации
	ПроверятьСоответствиеСуммыДокументаИВедомости = Истина;
	Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() И (НЕ ЕстьУчетПоРаботникам) Тогда
		ПроверятьСоответствиеСуммыДокументаИВедомости = Ложь;
	КонецЕсли;

	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Поддержка механизма автонумерации
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели формы
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
		ВидОперации.Метаданные().ЗначенияПеречисления, Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	СтараяВалютаДокумента = ВалютаДокумента;
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Установить тип поля Контрагент.
	УстановитьТипКонтрагент();

	// Подключение фискального регистратора
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);
	
	// Показ расшифровки платежа списком
	СписокПлатежей = (РасшифровкаПлатежа.Количество() > 1);
	
	УстановитьВидимость();
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);	
	
	// Установим активный реквизит.
	УстановитьАктивныйРеквизит();
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает активный реквизит.
Процедура УстановитьАктивныйРеквизит()
	
	СтруктураРеквизитов = Новый Структура("Дата,Организация,ПодразделениеОрганизации,СуммаДокумента,ВалютаДокумента,СуммаВзаиморасчетов");
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		СтруктураРеквизитов.Вставить("ФизЛицо1");
		СтруктураРеквизитов.Вставить("Ведомость1");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда
		СтруктураРеквизитов.Вставить("ФизЛицо");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		СтруктураРеквизитов.Вставить("СчетОрганизации");
		СтруктураРеквизитов.Вставить("СчетБанк");                                         
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
		СтруктураРеквизитов.Вставить("СчетИнкассация");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		СтруктураРеквизитов.Вставить("СчетУчета");
	Иначе
		СтруктураРеквизитов.Вставить("Контрагент");
		Если Не СписокПлатежей Тогда
			СтруктураРеквизитов.Вставить("ДоговорКонтрагента");
			СтруктураРеквизитов.Вставить("СчетУчетаРасчетовСКонтрагентом");
			СтруктураРеквизитов.Вставить("СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
	КонецЕсли;
	Если СписокПлатежей Тогда
		РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.РасшифровкаПлатежа);
	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
			РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.ВыплатаЗаработнойПлаты);		
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
			РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов, ЭлементыФормы.ВыплатаДепонентов);
		Иначе
			РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Установим заголовки по значению поля "Контрагент" 
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда

		// Надпись НадписьСуммаВзаиморасчетов
		Если не СтрокаПлатеж = Неопределено Тогда
			ВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
				ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
			Иначе
				ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
			КонецЕсли;
        КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "+
									Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента);

КонецПроцедуры // ОбновлениеОтображения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ЭтоРасчетыПоЗарплате = ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику;
		
	
	Если ЭтоРасчетыПоЗарплате Тогда
		
		Если ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
			Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
				И НЕ ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате") = СуммаДокумента Тогда
				Предупреждение("Не совпадают сумма документа и общая сумма к выплате по платежным ведомостям.");
				Отказ = Истина;
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов
				И НЕ ВыплатаДепонентов.Итог("СуммаКВыплате") = СуммаДокумента Тогда
				Предупреждение("Не совпадают сумма документа и общая сумма к выплате по платежным ведомостям.");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа") = СуммаДокумента Тогда
			Предупреждение("Не совпадают сумма документа и ее расшифровка.");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоРасчетыПоЗарплате Тогда
		
		мМассивПлатежныхВедомостей = Новый Соответствие;
		Если Проведен Тогда
			ТаблицаДвижений = Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Выгрузить();
			ТаблицаДвижений.Свернуть("Ведомость");
			Для каждого СтрокаТЧ Из ТаблицаДвижений Цикл
				мМассивПлатежныхВедомостей.Вставить(СтрокаТЧ.Ведомость,СтрокаТЧ.Ведомость)
			КонецЦикла; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Оповестим оплачиваемые документы выплаты зарплаты
	ЭтоРасчетыПоЗарплате = ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику;
	
	Если ЭтоРасчетыПоЗарплате Тогда

		Если Проведен Тогда
			Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
				Для каждого СтрокаТЧ Из ВыплатаЗаработнойПлаты Цикл
					Если мМассивПлатежныхВедомостей[СтрокаТЧ.Ведомость] <> Неопределено Тогда
						мМассивПлатежныхВедомостей.Удалить(СтрокаТЧ.Ведомость);
					КонецЕсли;
					Оповестить("ОбновитьФорму", ,СтрокаТЧ.Ведомость);
				КонецЦикла;
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
				Если мМассивПлатежныхВедомостей[ПлатежнаяВедомость] <> Неопределено Тогда
					мМассивПлатежныхВедомостей.Удалить(ПлатежнаяВедомость);
				КонецЕсли;
				Оповестить("ОбновитьФорму", ,ПлатежнаяВедомость);
			КонецЕсли;
		КонецЕсли;
		Для каждого Значение Из мМассивПлатежныхВедомостей Цикл
			Оповестить("ОбновитьФорму", ,Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Оповестить("ОбновитьФорму", ВладелецФормы, ЭтотОбъект);
	    	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Перечисления.ВидыОперацийРКО[Кнопка.Имя];
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	РасшифровкаПлатежа.Очистить();

	СтрокаПлатеж              = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
	
	Если (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю) Тогда
		СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	КонецЕсли;
	
	УстановитьТипКонтрагент(); //Надо определить тип поля "Контрагент"
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		Контрагент = Неопределено;
	КонецЕсли;
	
	ОпределитьСчетаУчетаРасчетовСКонтрагентом();

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям 
		И ВыплатаЗаработнойПлаты.Количество() > 0 Тогда

		ВыплатаЗаработнойПлаты.Очистить();

	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов
		И ВыплатаДепонентов.Количество() > 0 Тогда

		ВыплатаДепонентов.Очистить();

	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		И (НЕ ПлатежнаяВедомость.Пустая()) Тогда

		ПлатежнаяВедомость = "";

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику И ЗначениеЗаполнено(Основание) Тогда
		Основание = "";
	КонецЕсли;
	
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям 
		Или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику 
		Или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда

		ВалютаДокумента	= мВалютаРегламентированногоУчета;
		СтавкаНДС		= "";

	КонецЕсли;

	Если ВидОперации <> Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		СчетОрганизации = Неопределено;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
		ЗаполнитьСчетаИнкассации();
		СчетУчетаРасчетовСКонтрагентом = ЭлементыФормы.СчетИнкассация.СписокВыбора[0].Значение;
		ПриИзмененииСчетаИнкассации();
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ЗаполнитьСчетаБанка();
		СчетУчетаРасчетовСКонтрагентом = ЭлементыФормы.СчетБанк.СписокВыбора[0].Значение;
	КонецЕсли;

	УстановитьФокус();

	УстановитьВидимость();

	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект, Истина);

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьКурсДокумента();
	
	ИсходнаяСтрокаПлатеж = СтрокаПлатеж;
	
	Для каждого СтрокаРасшифровка Из РасшифровкаПлатежа Цикл
		
		СтрокаПлатеж=СтрокаРасшифровка;
		РассчитатьКурсИСуммуВзаиморасчетов();
		
	КонецЦикла;
	
	СтрокаПлатеж = ИсходнаяСтрокаПлатеж;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента()

	СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);

	ОбщегоНазначения.УстановитьЗначение(КурсДокумента,      СтруктураКурсаВалютаДокумента.Курс);
	ОбщегоНазначения.УстановитьЗначение(КратностьДокумента, СтруктураКурсаВалютаДокумента.Кратность);
	
	// Если валюта договора совпадает с валютой документа, то перезаполним курсы взаиморасчетов
	Для каждого СтрокаРасшифровкиПлатежа Из РасшифровкаПлатежа Цикл
		
		Если ВалютаДокумента = СтрокаРасшифровкиПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов
			и НЕ СтрокаРасшифровкиПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			
			СтруктураКурсаВалютаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			
			ОбщегоНазначения.УстановитьЗначение(СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов,      СтруктураКурсаВалютаВзаиморасчетов.Курс);
			ОбщегоНазначения.УстановитьЗначение(СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов, СтруктураКурсаВалютаВзаиморасчетов.Кратность);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // УстановитьКурсДокумента()

Процедура ПриИзмененииСчетаОрганизации()

	Если СчетОрганизации.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Если (СчетОрганизации.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета И СчетКасса.Валютный)
		ИЛИ (НЕ СчетОрганизации.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета И НЕ СчетКасса.Валютный) Тогда

		СчетОрганизации="";

		Возврат;

	КонецЕсли;

	Если Организация.Пустая() Тогда
		Организация=СчетОрганизации.Владелец;
	КонецЕсли;

	РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата, СуммаДокумента, СчетОрганизации.ВалютаДенежныхСредств);
	СуммаДокументаПриИзменении();

КонецПроцедуры // ПриИзмененииСчетаОрганизации()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		ВыплатаЗаработнойПлаты.Очистить();
	КонецЕсли;
	
	// {ОбособленныеПодразделения
	УстановитьПодразделение();
	// }ОбособленныеПодразделения
	УстановитьПодразделениеДт();

	Если (ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк) Тогда
		Если УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетОрганизации, Организация, ВалютаДокумента) Тогда
			ПриИзмененииСчетаОрганизации();
		КонецЕсли;
	КонецЕсли;

	Если (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику)
		ИЛИ(ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю)
		ИЛИ(ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам)Тогда
		КонтрагентПриИзменении(Элемент);
	КонецЕсли;

	УстановитьВидимость();

	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();
	ПриИзмененииДоговора();

	УстановитьФокус();
	УстановитьВидимость();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаДокумента".
//
Процедура СуммаДокументаПриИзменении()

	Если РасшифровкаПлатежа.Количество()=1 Тогда

		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда 

			ПересчитатьСуммуНДС(СтрокаПлатеж);

		КонецЕсли;

		РассчитатьСуммуВзаиморасчетов();

	КонецЕсли;

	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект, Истина);

КонецПроцедуры // СуммаДокументаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

Процедура СчетУчетаПриИзменении(Элемент)
	Перем ПодразделениеПоУмолчанию;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		СубконтоДт1, ЭлементыФормы.СубконтоДт1,
		СубконтоДт2, ЭлементыФормы.СубконтоДт2,
		СубконтоДт3, ЭлементыФормы.СубконтоДт3,
		ПодразделениеДт, ЭлементыФормы.ПодразделениеДт);
		
	// {ОбособленныеПодразделения
	ПодразделениеПоУмолчанию = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	РаботаСДиалогами.УстановитьПодразделениеПоСчету(
		ПодразделениеДт, СчетУчетаРасчетовСКонтрагентом, Организация, ПодразделениеПоУмолчанию);
	
	УстановитьВидимостьСубконто();

КонецПроцедуры // СчетУчетаПриИзменении()

Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры // СчетУчетаРасчетовСКонтрагентомОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "ФизЛицо".
//
Процедура ФизЛицоПриИзменении(Элемент)

	ЗаполнитьПоляВыдатьПоДокументу(Элемент.Значение);
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		ОбновитьСуммуВыплаченнойЗарплаты();
	КонецЕсли;
	
КонецПроцедуры

Процедура Ведомость1НачалоВыбора(Элемент, СтандартнаяОбработка)
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораПлатежныхВедомостейОрганизации(Элемент, СтандартнаяОбработка, Организация, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу) 
КонецПроцедуры

Процедура Ведомость1ПриИзменении(Элемент)
	ОбновитьСуммуВыплаченнойЗарплаты();
КонецПроцедуры

Процедура СуммаВзаиморасчетовПриИзменении(Элемент)

	ПроверкаКурсовВалют(СтрокаПлатеж);

	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;

КонецПроцедуры

Процедура ВыдатьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ВыдатьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ЗаполнитьПоляВыдатьПоДокументу(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Элемент)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Элемент.Значение);
	Запрос.УстановитьПараметр("ВыплаченностьЗарплаты", Перечисления.ВыплаченностьЗарплаты.Выплачено);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма + ЗарплатаКВыплатеЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма,
	|	ЗарплатаКВыплатеЗарплата.Ссылка
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И ЗарплатаКВыплатеЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|			И (РанееВыплаченныеСуммы.Регистратор <> &Регистратор)
	|ГДЕ
	|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ссылка
	|	И ЗарплатаКВыплатеЗарплата.ВыплаченностьЗарплаты = &ВыплаченностьЗарплаты
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеЗарплата.Ссылка";
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("По текущей ведомости нет сумм к выплате!");
		ЭлементыФормы.ВыплатаЗаработнойПлаты.ТекущиеДанные.СуммаКВыплате = 0;
	Иначе	
		Выборка = РезультатЗапроса.Выбрать(); 
		Выборка.Следующий();
		
		ЭлементыФормы.ВыплатаЗаработнойПлаты.ТекущиеДанные.СуммаКВыплате = Выборка.Сумма;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыВедомостьНачалоВыбора(Элемент, СтандартнаяОбработка)

	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораПлатежныхВедомостейОрганизации(Элемент, СтандартнаяОбработка, Организация, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу) 

КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");

	Если НЕ ЗначениеЗаполнено(Организация) И НЕ (Элемент.ТекущиеДанные=Неопределено ИЛИ Элемент.ТекущиеДанные.Ведомость=Неопределено) Тогда
		Организация = Элемент.ТекущиеДанные.Ведомость.Организация;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

Процедура СчетОрганизацииПриИзменении(Элемент)

	ПриИзмененииСчетаОрганизации();

КонецПроцедуры

Процедура СчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Элемент)

	ПересчитатьСуммуНДС(СтрокаПлатеж);

КонецПроцедуры

// Процедура для открытия формы изменения документа-основания
//
Процедура ДействияФормыИзменитьДокументОснование(Кнопка)
	
	ФормаВыбора = ПолучитьОбщуюФорму("ФормаВыбораДокументаОснования");
	ФормаВыбора.ДокументОбъект = ЭтотОбъект;
	ФормаВыбора.ОткрытьМодально();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)

	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
	// Распределение оплаты
	
	КолонкиРасшифровкиПлатежа  = ЭлементыФормы.РасшифровкаПлатежа.Колонки;
	
	ЭтоОплатаПоДокументу = (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	ЭлементыФормы.Сделка.Видимость                  = ЭтоОплатаПоДокументу;
	ЭлементыФормы.НадписьСделка.Видимость           = ЭтоОплатаПоДокументу;
	КолонкиРасшифровкиПлатежа.Сделка.ТолькоПросмотр = НЕ ЭтоОплатаПоДокументу;
	
	ПогашатьЗадолженность = (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически)
		ИЛИ (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Доступность                = ПогашатьЗадолженность;
	ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентом.Доступность         = ПогашатьЗадолженность;
	КолонкиРасшифровкиПлатежа.СчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр = НЕ ПогашатьЗадолженность;
	
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ТекДанные = ОформлениеСтроки.ДанныеСтроки;
		Если ОформлениеСтроки.Ячейки.Сделка.Видимость Тогда
			ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного = 
				(ТекДанные.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу)
				И (НЕ ЗначениеЗаполнено(ТекДанные.Сделка));
		КонецЕсли;
		Если ОформлениеСтроки.Ячейки.СчетУчетаРасчетовСКонтрагентом.Видимость Тогда
			ОформлениеСтроки.Ячейки.СчетУчетаРасчетовСКонтрагентом.ОтметкаНезаполненного = 
				(ТекДанные.СпособПогашенияЗадолженности <> Перечисления.СпособыПогашенияЗадолженности.НеПогашать)
				И (НЕ ЗначениеЗаполнено(ТекДанные.СчетУчетаРасчетовСКонтрагентом));
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)

	Если РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура РасшифровкаПлатежаПослеУдаления(Элемент)

	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка  = Ложь;
	
	СтрокаДанных = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда
		СчетДляОпределенияОстатков = СтрокаДанных.СчетУчетаРасчетовПоАвансам;
	Иначе
		СчетДляОпределенияОстатков = СтрокаДанных.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;

	СтруктураПараметров   = Новый Структура;
	СтруктураПараметров.Вставить("Организация",                Организация);
	СтруктураПараметров.Вставить("Контрагент",                 Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",         СтрокаДанных.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("КонецПериода",               Дата-1);
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("СторонаСчета",               "Кт");
	СтруктураПараметров.Вставить("ЭтоНовыйДокумент",           ЭтоНовый());
	СтруктураПараметров.Вставить("РежимОтбораДокументов",      Перечисления.РежимОтбораДокументов.ПоОстаткам);
	
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(
		СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип);

КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)

	ПересчитатьСуммуНДС(СтрокаПлатеж);
	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");

	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> Неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)

	ПересчитатьСуммуНДС(СтрокаПлатеж);

КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)

	ПроверкаКурсовВалют(СтрокаПлатеж);

	Если НЕ СтрокаПлатеж.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		
		СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов;
		
	ИначеЕсли (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
		                                 / СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;

КонецПроцедуры

Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	УправлениеВзаиморасчетами.ОбработкаПодбораЗадолженностей(
		СтрокаПлатеж,РасшифровкаПлатежа,ЗначениеВыбора,	СписокПлатежей, КурсДокумента, КратностьДокумента);

	Если СтрокаПлатеж.СтавкаНДС.Пустая() Тогда
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
			глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
	КонецЕсли;

	ПересчитатьСуммуНДС(СтрокаПлатеж);

	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
		Организация, Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
	СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = 
		?(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом.Пустая(),СчетаУчета.СчетРасчетов,СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом);
	СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = 
		?(СтрокаПлатеж.СчетУчетаРасчетовПоАвансам.Пустая(),СчетаУчета.СчетАвансов,СтрокаПлатеж.СчетУчетаРасчетовПоАвансам);

	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");

	УстановитьФокус();

КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если (Элемент.ТекущиеДанные.Ведомость = Неопределено ИЛИ Элемент.ТекущиеДанные.Ведомость.Пустая())
	   И НЕ ОтменаРедактирования Тогда

		Сообщить("Не указана платежная ведомость.");
		Отказ = Истина;

	КонецЕсли;

КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыПослеУдаления(Элемент)
	
	СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
	
КонецПроцедуры

Процедура СчетОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если НЕ ВалютаДокумента.Пустая() Тогда

		СтандартнаяОбработка = Ложь;

		ФормаВыбораСчета = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент,);

		ФормаВыбораСчета.Отбор.ВалютаДенежныхСредств.Значение      = ВалютаДокумента;
		ФормаВыбораСчета.Отбор.ВалютаДенежныхСредств.Использование = Истина;
		ФормаВыбораСчета.Отбор.Владелец.Значение                   = Организация;
		ФормаВыбораСчета.Отбор.Владелец.Использование              = Истина;

		ФормаВыбораСчета.РежимВыбора = Истина;
 	
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			ФормаВыбораСчета.ПараметрТекущаяСтрока = Элемент.Значение;
		КонецЕсли;
		
		ФормаВыбораСчета.Открыть();

	КонецЕсли;

КонецПроцедуры

Процедура ДействияФормыНастройкаУСН(Кнопка)

	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	
	ФормаНастройки = ПолучитьОбщуюФорму("ФормаНастройкиПлатежаУСН");

	ФормаНастройки.Графа4       = Графа4_УСН;
	ФормаНастройки.Графа5       = Графа5_УСН;
	ФормаНастройки.Графа6       = Графа6_УСН;
	ФормаНастройки.Графа7       = Графа7_УСН;
	ФормаНастройки.НДС          = НДС_УСН;
	ФормаНастройки.ДоходЕНВД    = ДоходыЕНВД_УСН;
	ФормаНастройки.РасходЕНВД   = РасходыЕНВД_УСН;
	ФормаНастройки.Содержание   = Содержание_УСН;
	ФормаНастройки.ТолькоДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	ФормаНастройки.АвтоРежим 	= НЕ РучнаяНастройка_УСН;

	СтруктураПараметров = ФормаНастройки.ОткрытьМодально();

	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Графа4_УСН      = СтруктураПараметров.Графа4;
	Графа5_УСН      = СтруктураПараметров.Графа5;
	Графа6_УСН      = СтруктураПараметров.Графа6;
	Графа7_УСН      = СтруктураПараметров.Графа7;
	НДС_УСН         = СтруктураПараметров.НДС;
	ДоходыЕНВД_УСН  = СтруктураПараметров.ДоходыЕНВД;
	РасходыЕНВД_УСН = СтруктураПараметров.РасходыЕНВД;
	Содержание_УСН  = СтруктураПараметров.Содержание;
	РучнаяНастройка_УСН = НЕ СтруктураПараметров.АвтоРежим;

КонецПроцедуры

Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка  = Ложь;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда
		СчетДляОпределенияОстатков = РасшифровкаПлатежа[0].СчетУчетаРасчетовПоАвансам;
	Иначе
		СчетДляОпределенияОстатков = РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;

	СтруктураПараметров   = Новый Структура;
	СтруктураПараметров.Вставить("Организация",                Организация);
	СтруктураПараметров.Вставить("Контрагент",                 Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",         РасшифровкаПлатежа[0].ДоговорКонтрагента);
	СтруктураПараметров.Вставить("КонецПериода",               Дата-1);
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("СторонаСчета",               "Кт");
	СтруктураПараметров.Вставить("ЭтоНовыйДокумент",           ЭтоНовый());
	СтруктураПараметров.Вставить("РежимОтбораДокументов",      Перечисления.РежимОтбораДокументов.ПоОстаткам);
	
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(
		СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип);

КонецПроцедуры

Процедура ЗаполнитьСчетаКассы()

	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументы);
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал);
	
	ЭлементыФормы.СчетКасса.СписокВыбора = РаботаСДиалогами.ЗаполнитьСписокВыбораСчетовДенежныхСредств(МассивОтбора,,,МассивИсключений);
	
КонецПроцедуры

Процедура СчетКассаПриИзменении(Элемент)

	Если ЭлементыФормы.СчетКасса.СписокВыбора.НайтиПоЗначению(СчетКасса)=Неопределено Тогда
		Сообщить("Счет "+СчетКасса+" не используется при учете наличных денежных средств.");
		СчетКасса = "";
		Возврат;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		Если (СчетКасса.Валютный <> СчетУчетаРасчетовСКонтрагентом.Валютный)
			ИЛИ (НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом)) Тогда
			ЗаполнитьСчетаБанка();
			СчетУчетаРасчетовСКонтрагентом = ЭлементыФормы.СчетБанк.СписокВыбора[0].Значение;
		КонецЕсли;
		
		Если ((СчетОрганизации.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета И СчетКасса.Валютный)
			ИЛИ (НЕ СчетОрганизации.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета И НЕ СчетКасса.Валютный)) Тогда
			СчетОрганизации = "";
		Иначе
			Если УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетОрганизации, Организация, ВалютаДокумента) Тогда
				ПриИзмененииСчетаОрганизации();
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
		
		Если (СчетКасса.Валютный <> СчетУчетаРасчетовСКонтрагентом.Валютный) 
			ИЛИ (НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом)) Тогда
			ЗаполнитьСчетаИнкассации();
			СчетУчетаРасчетовСКонтрагентом = ЭлементыФормы.СчетИнкассация.СписокВыбора[0].Значение;
			ПриИзмененииСчетаИнкассации();
		КонецЕсли;
		
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		РаботаСДиалогами.ВыбратьВидОперации(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	ЗаполнитьСчетаКассы();
	
	ЗаполнитьСчетаБанка();
	
	ЗаполнитьСчетаИнкассации();
	
КонецПроцедуры

Процедура СубконтоДт1НачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = Новый Структура();
	Для н=1 По 3 Цикл
		Если ТипЗнч(ЭтотОбъект["СубконтоДт"+н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЭтотОбъект["СубконтоДт"+н]);
		ИначеЕсли ТипЗнч(ЭтотОбъект["СубконтоДт"+н]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ЭтотОбъект["СубконтоДт"+н]);
		КонецЕсли;
	КонецЦикла;
    СписокПараметров.Вставить("ЭтоНовыйДокумент",ЭтоНовый());

	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

Процедура СубконтоДт1ПриИзменении(Элемент)
	
	Если ТипЗнч(СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") Тогда
	
		Выдать = ?(ПустаяСтрока(СубконтоДт1.НаименованиеПолное), СубконтоДт1.Наименование, СубконтоДт1.НаименованиеПолное);
		Если СубконтоДт1.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			ПоДокументу = СубконтоДт1.ДокументУдостоверяющийЛичность;
		Иначе
			ПоДокументу = "";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СубконтоДт1) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		ЗаполнитьПоляВыдатьПоДокументу(СубконтоДт1);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетБанкПриИзменении(Элемент)
	
	Если ЭлементыФормы.СчетБанк.СписокВыбора.НайтиПоЗначению(СчетУчетаРасчетовСКонтрагентом)=Неопределено Тогда

		Сообщить("Счет "+СчетУчетаРасчетовСКонтрагентом+" не используется при учете безналичных денежных средств.");
		СчетБанк = "";
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриИзмененииСчетаИнкассации()
	Перем ПодразделениеПоУмолчанию;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(
		СчетУчетаРасчетовСКонтрагентом,
		СубконтоДт1, ЭлементыФормы.СубконтоДт1Инкассация,
		СубконтоДт2, ЭлементыФормы.СубконтоДт2Инкассация,
		СубконтоДт3, ЭлементыФормы.СубконтоДт3Инкассация,
		ПодразделениеДт, ЭлементыФормы.ПодразделениеДтИнкассация);
		
	// {ОбособленныеПодразделения
	ПодразделениеПоУмолчанию = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	РаботаСДиалогами.УстановитьПодразделениеПоСчету(
		ПодразделениеДт, СчетУчетаРасчетовСКонтрагентом, Организация, ПодразделениеПоУмолчанию);
	
КонецПроцедуры

Процедура СчетИнкассацияПриИзменении(Элемент)
	
	Если ЭлементыФормы.СчетИнкассация.СписокВыбора.НайтиПоЗначению(СчетУчетаРасчетовСКонтрагентом)=Неопределено Тогда

		Сообщить("Счет "+СчетУчетаРасчетовСКонтрагентом+" не используется при учете переводов в пути.");
		СчетИнкассация = "";
		
	КонецЕсли;
	
	ПриИзмененииСчетаИнкассации();
		
	УстановитьВидимостьСубконто("Инкассация");

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ВыплатаДепонентов и ее РЕКВИЗИТОВ 

Процедура КоманднаяПанельВыплатаДепонентовПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ВыплатаДепонентов, Ссылка, Ложь, Дата, мГоловнаяОрганизация);
	
КонецПроцедуры

Процедура КоманднаяПанельВыплатаДепонентовСписокРаботников(Кнопка)
	
	Если ВыплатаДепонентов.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		ВыплатаДепонентов.Очистить();
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭлементыФормы.ВыплатаДепонентов, Дата, , Организация,,, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельВыплатаДепонентовЗаполнить(Кнопка)
	
	Если ВыплатаДепонентов.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		ВыплатаДепонентов.Очистить();
	КонецЕсли;
	
	АвтозаполнениеДепонентов();
	
КонецПроцедуры


Процедура ВыплатаДепонентовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Команда = "";
		Если ВыбранноеЗначение.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			АвтозаполнениеДепонентов(ВыбранноеЗначение.Данные.Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		ВыплатаДепонентов.Добавить().Физлицо = ВыбранноеЗначение.Физлицо;
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ВыплатаДепонентовПослеУдаления(Элемент)
	
	СуммаДокумента  = ВыплатаДепонентов.Итог("СуммаКВыплате");
	
КонецПроцедуры

Процедура ВыплатаДепонентовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СуммаДокумента  = ВыплатаДепонентов.Итог("СуммаКВыплате");
	
КонецПроцедуры

Процедура ВыплатаДепонентовФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 0, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ВыплатаДепонентовФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;				
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыплатаДепонентовФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Организация);
	
КонецПроцедуры

Процедура ВыплатаДепонентовФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Элемент.Значение, Организация, Истина);
КонецПроцедуры

Процедура ВыплатаДепонентовВедомостьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораПлатежныхВедомостейОрганизации(Элемент, СтандартнаяОбработка, Организация, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу) 

КонецПроцедуры

Процедура ВыплатаДепонентовСуммаКВыплатеПриИзменении(Элемент)
	СуммаДокумента = ВыплатаДепонентов.Итог("СуммаКВыплате");
КонецПроцедуры

Процедура ОсновныеДействияФормыЧек(Кнопка)
	
	Если НомерЧекаККМ <> 0 Тогда
		Предупреждение("Чек уже пробит на фискальном регистраторе!", 60);
		Возврат;
	КонецЕсли;

	Если Не ЭтотОбъект.Проведен Тогда
		Предупреждение("Перед пробитием чека на фискальном регистраторе документ необходимо провести!");
		Возврат;
	КонецЕсли;

	ПарольКассира = ПолучитьСерверТО().ПолучитьПарольКассираККМ();
	МассивФР      = ПолучитьСерверТО().ПолучитьСписокУстройств(
	                    Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор,
	                    Неопределено);

	ФР            = Неопределено;
	СписокФР      = Новый СписокЗначений();
	Вид           = Неопределено;
	Представление = Неопределено;

	Для каждого ФР Из МассивФР Цикл
		ПолучитьСерверТО().ПолучитьПредставлениеУстройства(ФР, Вид, Представление);
		СписокФР.Добавить(ФР, Представление);
	КонецЦикла;

	КоличествоФР = СписокФР.Количество();
	Если      КоличествоФР = 0 Тогда
		Предупреждение("Фискальный регистратор не подключен!");
		ФР = Неопределено;
	ИначеЕсли КоличествоФР = 1 Тогда
		ФР = СписокФР[0].Значение;
	Иначе
		ФР = СписокФР.ВыбратьЭлемент("Необходимо выбрать фискальный регистратор");
		Если ФР = Неопределено Тогда
			Предупреждение("Операция отменена пользователем");
		Иначе
			ФР = ФР.Значение;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ФР) Тогда
		Возврат;
	КонецЕсли;

	Позиция         = Неопределено;
	НомерСмены      = Неопределено;
	ТаблицаПлатежей = Новый ТаблицаЗначений();
	ТаблицаПлатежей.Колонки.Добавить("Заголовок");
	ТаблицаПлатежей.Колонки.Добавить("Сумма");
	ТаблицаПлатежей.Колонки.Добавить("НДС");

	Для Каждого Позиция Из РасшифровкаПлатежа Цикл
		СтрокаТаблицы           = ТаблицаПлатежей.Добавить();
		СтрокаТаблицы.Заголовок = "Выдать: " + Выдать
		                          + "
		                            |Основание: " + Основание;
		СтрокаТаблицы.Сумма     = Позиция.СуммаПлатежа;
		СтрокаТаблицы.НДС       = УчетНДС.ПолучитьСтавкуНДС(Позиция.СтавкаНДС);
	КонецЦикла;

	Результат = ПолучитьСерверТО().ПечатьЧекаРКО(ФР,
	                                    ПолучитьСерверТО().ПолучитьПарольКассираККМ(),
	                                    НомерЧекаККМ,
	                                    НомерСмены,
	                                    ТаблицаПлатежей,
	                                    СуммаДокумента,
	                                    0);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Оплачено = Истина;
	Иначе
		ТекстОшибки = ПолучитьСерверТО().ПолучитьТекстОшибкиФРТО(Результат);
		Предупреждение(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока и Не Копирование Тогда
		СписокВидовДоговоров =	УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации); 
		УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(Элемент.ТекущиеДанные.ДоговорКонтрагента,Контрагент,Организация,СписокВидовДоговоров);				
	КонецЕсли;
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура КурсВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж.КурсВзаиморасчетов = Элемент.Значение;

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры

Процедура ПолеВводаКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуВыбора(, Элемент);
		
	Иначе
		
		ФормаВыбора = Справочники.Контрагенты.ПолучитьФормуВыбора(, Элемент);
		
	КонецЕсли;
	
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// {ОбособленныеПодразделения
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
	УстановитьПодразделениеДт();

КонецПроцедуры
// }ОбособленныеПодразделения

Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если (ВалютаДокумента <> СтараяВалютаДокумента) 
		И (ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк) 
		Тогда
		УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетОрганизации, Организация, ВалютаДокумента);
		ПриИзмененииСчетаОрганизации();
	КонецЕсли;
	
	ПриИзмененииВалютыДокумента();
	
КонецПроцедуры

Процедура СписокПлатежейПриИзменении(Элемент)
	
	Если НЕ СписокПлатежей И РасшифровкаПлатежа.Количество() > 1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			СписокПлатежей = Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество() > 1 Цикл
			СтрокаУдаления = РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
		СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов();
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
		СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;		
		
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СпособПогашенияЗадолженностиПриИзменении(Элемент)
	
	Если СтрокаПлатеж.СпособПогашенияЗадолженности <> Перечисления.СпособыПогашенияЗадолженности.ПоДокументу Тогда
		СтрокаПлатеж.Сделка = Неопределено;
	КонецЕсли;
	
	ОпределитьСчетаУчетаРасчетовСКонтрагентом();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СчетУчетаЗадержкаЗарплатыПриИзменении(Элемент)
	Перем ПодразделениеПоУмолчанию;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		СубконтоДт1, ЭлементыФормы.СубконтоДт1ЗадержкаЗарплаты,
		СубконтоДт2, ЭлементыФормы.СубконтоДт2ЗадержкаЗарплаты,
		СубконтоДт3, ЭлементыФормы.СубконтоДт3ЗадержкаЗарплаты,
		ПодразделениеДт, ЭлементыФормы.ПодразделениеДтЗадержкаЗарплаты);
		
	// {ОбособленныеПодразделения
	ПодразделениеПоУмолчанию = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	РаботаСДиалогами.УстановитьПодразделениеПоСчету(
		ПодразделениеДт, СчетУчетаРасчетовСКонтрагентом, Организация, ПодразделениеПоУмолчанию);
	
	УстановитьВидимостьСубконто("ЗадержкаЗарплаты");

КонецПроцедуры

