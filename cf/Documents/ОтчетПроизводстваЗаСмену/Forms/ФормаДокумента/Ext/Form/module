////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мСписокСчетов;

// Текущие форму подбора
Перем мФормаПодбораНоменклатуры; 
Перем ЭтоУСН;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

//Используется для определения необходимости отображения действий над НДС в документе
Перем мСложныйУчетНДС;

// Используется для определения необходимости указания счета списания НДС на расходы
Перем мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;

//Используется для определения необходимости открытия настроек движения после сохранения
Перем ОткрыватьНастройкуДвижений;

// Хранит значение параметра учетной политики УпрощенныйУчетНДС
Перем мУпрощенныйУчетНДС;

Перем мСчет;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Продукция,ЭлементыФормы.КоманднаяПанельПродукция);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Услуги,ЭлементыФормы.КоманднаяПанельУслуги);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратныеОтходы,ЭлементыФормы.КоманднаяПанельОтходы);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСписокСчетовЗатрат()

	СписокСчетов  = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	
	Возврат СписокСчетов;

КонецФункции // СформироватьСписокСчетовЗатрат()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбораНоменклатуры, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Производит открывает форму подбора данных в табличные части документа
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Ложь;

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,                                "По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры",           "Остатки номенклатуры");
	СписокЗапросов.Добавить("ОстаткиИПлановаяСебестоимость", "Остатки и плановая себестоимость");

	Если  ТабличнаяЧасть = Материалы Тогда
		Команда           = "ПодборВТабличнуюЧастьМатериалы";
		ИмяТабличнойЧасти = "Материалы";
		
	Иначе
		Команда           = "ПодборВТабличнуюЧастьПродукция";
		ИмяТабличнойЧасти = "Продукция";
	КонецЕсли;

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокЗапросов);
	СтруктураПараметровПодбора.Вставить("Организация"        , Организация);
	СтруктураПараметровПодбора.Вставить("Склад"              , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"             , Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());	
		
	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);

	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, мФормаПодбораНоменклатуры);

КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Спецификация;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура",     Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество",       Количество);
	ЗначениеВыбора.Свойство("КоличествоМест",   КоличествоМест);
	ЗначениеВыбора.Свойство("Цена",             Цена);
	ЗначениеВыбора.Свойство("Спецификация",     Спецификация);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура",     Номенклатура);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Рассчитать реквизиты табличной части.
		// Нашли, увеличиваем количество в первой найденной строке.
		Если КоличествоМест = Неопределено Тогда
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		Иначе
			СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.КоличествоМест + КоличествоМест;
		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
		Если КоличествоМест = Неопределено Тогда
			СтрокаТабличнойЧасти.Количество     = Количество;
		Иначе
			СтрокаТабличнойЧасти.КоличествоМест = КоличествоМест;
		КонецЕсли;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения  = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент       = 1;
		
		Если ТабличнаяЧасть = Продукция Тогда
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Продукция", Истина);
			Ценообразование.ЗаполнитьПлановуюСебестоимость(СтрокаТабличнойЧасти, Дата);
		    ЗаполнитьНоменклатурнуюГруппу(СтрокаТабличнойЧасти);
			
		Иначе
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Материалы", Истина);
			СтрокаТабличнойЧасти.СтатьяЗатрат = Номенклатура.СтатьяЗатрат;
			СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	Если ТабличнаяЧасть = Продукция Тогда
		ОбработкаТабличныхЧастей.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
		СтрокаТабличнойЧасти.Спецификация = Спецификация;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении номенклатуры в табличной части.
//
Процедура ПриИзмененииПродукции(СтрокаТабличнойЧасти, ИмяТабличнойЧасти = "")

	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент      = 1;
	СтрокаТабличнойЧасти.Спецификация     = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, Дата);
   
КонецПроцедуры // ПриИзмененииПродукции()

Процедура ЗаполнитьНоменклатурнуюГруппу(СтрокаТЧ);

	СтрокаТЧ.НоменклатурнаяГруппа = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабличнойЧастиПоТоварам()

Процедура ЗаполнитьСтатьюЗатрат(СтрокаТЧ);

	СтрокаТЧ.СтатьяЗатрат   = СтрокаТЧ.Номенклатура.СтатьяЗатрат;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабличнойЧастиПоТоварам()

//Определяет параметры учетной политики (сложный учет НДС по организации)
Процедура ОпределитьСложныйУчетНДС()
	
	ПараметрыНеПолучены = Ложь;
	ПараметрыНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ПараметрыНеПолучены, Организация);
	Если ПараметрыНеПолучены Тогда
		мСложныйУчетНДС = Ложь;    
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
	Иначе
		мСложныйУчетНДС = ПараметрыНУ.СложныйУчетНДС И Не ПараметрыНУ.УСН И Не ПараметрыНУ.УпрощенныйУчетНДС;
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = ПараметрыНУ.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;
		Если НЕ ЗначениеЗаполнено(мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость) Тогда
			мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении номенклатуры в табличной части.
//
Процедура ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.Коэффициент      = 1;
    СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.ОтражениеВУСН 	  = Перечисления.ОтражениеВУСН.Принимаются;
	СтрокаТабличнойЧасти.СтатьяЗатрат     = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
	
КонецПроцедуры // ПриИзмененииНоменклатуры()

// Процедура для заполнения счетов списания НДС значениями по умолчанию
//
// Параметры
//  ВыводитьВопрос  – <Булево> – задавать вопрос перед заполнением счетов
//
Процедура ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию(ВыводитьВопрос = Ложь)
	
	Если ВыводитьВопрос Тогда
		Ответ = Вопрос("Установить счета и аналитику для списания НДС
					|в соответствие со значениями счета учета затрат?", 
					РежимДиалогаВопрос.ДаНет, , , "Изменения счетов списания НДС");
	Иначе
		Ответ = КодВозвратаДиалога.Да;
	КонецЕсли;
				
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СчетСписанияНДС = СчетЗатрат;
		СубконтоСписанияНДС1 = ПодразделениеЗатрат;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость элементов формы.
//
Процедура УстановитьВидимость()
	
	УСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	УСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	
	ОСН_Юр = (НЕ ОбщегоНазначения.Предприниматель(Организация, Дата) И НЕ УСН);
	
	КолонкиПродукция = ЭлементыФормы.Продукция.Колонки;
	КолонкиУслуги    = ЭлементыФормы.Услуги.Колонки;
	КолонкиОтходы    = ЭлементыФормы.ВозвратныеОтходы.Колонки;
	КолонкиМатериалы    = ЭлементыФормы.Материалы.Колонки;
	
	КолонкиПродукция.Счет.Видимость   = ПоказыватьВДокументахСчетаУчета;
	
	КолонкиОтходы.Счет.Видимость           = ПоказыватьВДокументахСчетаУчета; 
	КолонкиОтходы.СтатьяЗатрат.Видимость   = ПоказыватьВДокументахСчетаУчета;
	КолонкиОтходы.ОтражениеВУСН.Видимость  = УСН И НЕ УСНДоходы;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.Материалы.Видимость = ИспользоватьМатериалы;
	
	Если ИспользоватьМатериалы Тогда
		
		КолонкиМатериалы.Счет.Видимость			= ПоказыватьВДокументахСчетаУчета;
		КолонкиМатериалы.ОтражениеВУСН.Видимость= УСН И НЕ УСНДоходы;
		
		УчетнаяПолитикаНеЗадана = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
		Если УчетнаяПолитика.Количество() > 0 Тогда	
			Если УчетнаяПолитика.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
				ЭлементыФормы.Материалы.Колонки.ДокументОприходования.Видимость = Ложь;
				ЭлементыФормы.Материалы.Колонки.ДокументОприходования.ИзменятьВидимость = Ложь;
			Иначе
				Если ЭлементыФормы.Материалы.Колонки.Себестоимость.Видимость Тогда
					ЭлементыФормы.Материалы.Колонки.ДокументОприходования.Видимость = Истина;
				КонецЕсли;
				ЭлементыФормы.Материалы.Колонки.ДокументОприходования.ИзменятьВидимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаСписанияНДС.Видимость = мСложныйУчетНДС И ИспользоватьМатериалы;
	ЭлементыФормы.НадписьНДСвСтоимостиТоваров.Видимость = мСложныйУчетНДС И ИспользоватьМатериалы;
	ЭлементыФормы.НДСвСтоимостиТоваров.Видимость        = мСложныйУчетНДС И ИспользоватьМатериалы;
	ПоказатьВариантыСписанияНДС = (мСложныйУчетНДС и НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость И ИспользоватьМатериалы И НЕ УСН);
	ЭлементыФормы.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат.Видимость  = ПоказатьВариантыСписанияНДС;
	ЭлементыФормы.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат2.Видимость = ПоказатьВариантыСписанияНДС;
	ПоказатьСписаниеНДС = (ПоказатьВариантыСписанияНДС И НЕ ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат);
	ЭлементыФормы.СчетСписанияНДС.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.НадписьСчетСписанияНДС.Видимость	= ПоказатьСписаниеНДС;
	ЭлементыФормы.СубконтоСписанияНДС1.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.СубконтоСписанияНДС2.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.СубконтоСписанияНДС3.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.НадписьСубконтоСписанияНДС1.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.НадписьСубконтоСписанияНДС2.Видимость = ПоказатьСписаниеНДС;
	ЭлементыФормы.НадписьСубконтоСписанияНДС3.Видимость = ПоказатьСписаниеНДС;
	УстановитьВидимостьСубконто(СчетСписанияНДС, "СписанияНДС", ПоказатьСписаниеНДС);

	
	УстановитьВидимостьВариантаВыраженияУслуг();
	
КонецПроцедуры // УстановитьВидимость()

Процедура УстановитьВариантВыраженияУслуг()
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация);
	Если Не УчетнаяПолитика.Количество() = 0 Тогда
		
		ПорядокРаспределения = УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг;
		
		Если ПорядокРаспределения = Перечисления.ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг.ПоПлановымЦенам Тогда
			ВариантВыраженияВнутреннихУслуг = Перечисления.ВариантВыраженияВнутреннихУслуг.ВПлановыхЦенах;
		ИначеЕсли ПорядокРаспределения = Перечисления.ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг.ПоОбъемуВыпуска Тогда
			ВариантВыраженияВнутреннихУслуг = Перечисления.ВариантВыраженияВнутреннихУслуг.ВКоличественныхПоказателях;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьВидимостьВариантаВыраженияУслуг()
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация);
	Если Не УчетнаяПолитика.Количество() = 0 Тогда
		ПорядокРаспределения = УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг;
		ПоказыватьВариантВыражения = (ПорядокРаспределения = Перечисления.ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг.ПоПлановымЦенамИОбъемуВыпуска);
		
		ЭлементыФормы.ВариантОтраженияВнутреннихУслуг.Видимость        = ПоказыватьВариантВыражения;
		ЭлементыФормы.ВариантОтраженияВнутреннихУслуг.Доступность      =  ПоказыватьВариантВыражения;
		ЭлементыФормы.НадписьВариантВыраженияВнутреннихУслуг.Видимость = ПоказыватьВариантВыражения;
		
		УстановитьВидимостьКолонокУслуг();
	КонецЕсли;
КонецПроцедуры

Процедура  УстановитьВидимостьКолонокУслуг()

		ПоказыватьКоличество = Не (ВариантВыраженияВнутреннихУслуг = Перечисления.ВариантВыраженияВнутреннихУслуг.ВПлановыхЦенах);

		ЭлементыФормы.Услуги.Колонки.Количество.Видимость   = ПоказыватьКоличество;
		ЭлементыФормы.Услуги.Колонки.Количество.Доступность = ПоказыватьКоличество;
		ЭлементыФормы.Услуги.Колонки.СуммаПлановая.Видимость     = Не ПоказыватьКоличество;
		ЭлементыФормы.Услуги.Колонки.СуммаПлановая.Доступность   = Не ПоказыватьКоличество;
		
КонецПроцедуры 

Процедура УстановитьВидимостьСубконто(Счет, Суффикс, ВидимостьСчета)
	
	ВидыСубконтоСчета = Счет.ВидыСубконто;
	КоличествоСубконто = ВидыСубконтоСчета.Количество();
	Для Ном = 1 по 3 Цикл
		
		Если ВидимостьСчета и (Ном <= КоличествоСубконто) и  (ЗначениеЗаполнено(Счет)) Тогда
			ЭлементыФормы["НадписьСубконто"+Суффикс+Ном].Заголовок = Строка(ВидыСубконтоСчета[Ном-1].ВидСубконто);
			ЭлементыФормы["НадписьСубконто"+Суффикс+Ном].Видимость = Истина;
			ЭлементыФормы["Субконто"+Суффикс+Ном].Видимость        = Истина;
		Иначе
			ЭлементыФормы["НадписьСубконто"+Суффикс+Ном].Видимость = Ложь;
			ЭлементыФормы["Субконто"+Суффикс+Ном].Видимость        = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция	СформироватьТаблицуКолонокТабЧастиУслуги()
	
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить(?(ВариантВыраженияВнутреннихУслуг = Перечисления.ВариантВыраженияВнутреннихУслуг.ВКоличественныхПоказателях, "Количество","Сумма"));
	СтруктураКолонок.Вставить("СчетЗатрат");
	СтруктураКолонок.Вставить("Субконто1");
	СтруктураКолонок.Вставить("Субконто2");
	СтруктураКолонок.Вставить("Субконто3");
	СтруктураКолонок.Вставить("СчетУчетаНДС");
	СтруктураКолонок.Вставить("ОтражениеВУСН");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Услуги.Колонки, СтруктураКолонок);
	
КонецФункции

Процедура УстановитьДоступностьСубконто(СтрокаТЧ)

	Если НЕ ЗначениеЗаполнено(СтрокаТЧ) Тогда
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	Колонки              = ЭлементыФормы.Услуги.Колонки;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.Счет,
		СтрокаТабличнойЧасти.Субконто1, Колонки.Субконто1,
		СтрокаТабличнойЧасти.Субконто2, Колонки.Субконто2,
		СтрокаТабличнойЧасти.Субконто3, Колонки.Субконто3,
		СтрокаТабличнойЧасти.ПодразделениеЗатрат, Колонки.Подразделение);

КонецПроцедуры // УстановитьДоступностьСубконто()

Функция ПараметрыНеобходимыеДляВыбораСубконто(Элемент, Учет = "Бух")

	// Если тип выбираемого субконто - Партия, то создадим 
	// структуру дополнительных параметров.
	Если Элемент.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения  Тогда

		ДанныеТекущейСтроки = ЭлементыФормы.Услуги.ТекущиеДанные;

		СписокПараметров = Новый Структура;
		СписокПараметров.Вставить("Дата", Дата);
        СписокПараметров.Вставить("ЭтоНовыйДокумент",ЭтоНовый());

		Если Учет = "Бух" Тогда
			СписокПараметров.Вставить("СчетУчета",    ДанныеТекущейСтроки.Счет);
			СписокПараметров.Вставить("Номенклатура", УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Номенклатура", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3));
			СписокПараметров.Вставить("Склад",        УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Склады", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3));
		КонецЕсли;
		
	ИначеЕсли Элемент.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения  Тогда
		
		ДанныеТекущейСтроки = ЭлементыФормы.Услуги.ТекущиеДанные;
		
		СписокПараметров = Новый Структура;
		СписокПараметров.Вставить("Дата", Дата);
		СписокПараметров.Вставить("СторонаПроводки", 1);
	    Если Учет = "Бух" Тогда
			СписокПараметров.Вставить("СчетУчета",    ДанныеТекущейСтроки.Счет);
			СписокПараметров.Вставить("Контрагент",   УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Контрагенты", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3));
			СписокПараметров.Вставить("ДоговорКонтрагента", УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.ДоговорыКонтрагентов", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3));
		КонецЕсли; 
		
	Иначе // Тип выбираемого субконто - не Партия.
		СписокПараметров = Неопределено;
	КонецЕсли;

	Возврат СписокПараметров;

КонецФункции // ПараметрыНеобходимыеДляВыбораСубконто()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	   	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,,ПараметрОбъектКопирования);

		Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
			СчетЗатрат   = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
		КонецЕсли;
		
		Если ПараметрОбъектКопирования = Неопределено Тогда
			НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = Истина;
			ИспользоватьМатериалы = Истина;
			
			УстановитьВариантВыраженияУслуг();
		КонецЕсли;
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Счет");
	СтруктураКолонок.Вставить("СчетЗатрат");

	// Установить ограничение - изменять видимость колонок для ТЧ продукция
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Продукция.Колонки, СтруктураКолонок);
	
	// ТЧ услуги
	
	СформироватьТаблицуКолонокТабЧастиУслуги();

	СтруктураКолонок = Новый Структура();

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента( , ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	// {ОбособленныеПодразделения
 	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
    // }ОбособленныеПодразделения
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Определим параметры сложного учета НДС
	ОпределитьСложныйУчетНДС();
	
	УстановитьВидимость();
	
	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Продукция",	"Продукция");
	Страницы.Добавить("Услуги",	"Услуги");
	Страницы.Добавить("ВозвратныеОтходы",	"ВозвратныеОтходы");
	Страницы.Добавить("Материалы",	"Материалы");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);

	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,Склад,ПодразделениеОрганизации,ПодразделениеЗатрат,СчетЗатрат");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница,Страницы);
	
	мСписокСчетов = СформироватьСписокСчетовЗатрат();
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели  = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Продукция.Заголовок = "Продукция ("   + ДокументОбъект.Продукция.Количество() + " поз.)";
	СтраницаПанели.Услуги.Заголовок = "Услуги ("   + ДокументОбъект.Услуги.Количество() + " поз.)";
	СтраницаПанели.ВозвратныеОтходы.Заголовок = "Возвратные отходы (" + ДокументОбъект.ВозвратныеОтходы.Количество() + " поз.)";
	СтраницаПанели.Материалы.Заголовок = "Материалы ("   + ДокументОбъект.Материалы.Количество() + " поз.)";

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//Если сложный учет НДС не ведется - затрем параметры сложного учета ндс
	Если не мСложныйУчетНДС и не НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять Тогда
		НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента( , ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьПродукция" Тогда
			ОбработкаПодбора(Продукция, ЗначениеВыбора);
			
		Иначе
			ОбработкаПодбора(Материалы, ЗначениеВыбора);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
           
// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	//Открывает форму движений документа для ручного редактирования
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Продукция"
//
Процедура КоманднаяПанельПродукцияПодбор(Кнопка)

	ДействиеПодбор(Продукция);

КонецПроцедуры

Процедура КоманднаяПанельМатериалыПодбор(Кнопка)
	
	ДействиеПодбор(Материалы);
	
КонецПроцедуры

Процедура ЗаполнитьЗакладкуМатериалы(Кнопка)
	
	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект, "Для заполнения") Тогда
		Возврат;
	КонецЕсли;
	
	Если Материалы.Количество() > 0 Тогда
		
		ОтветНаВопрос = Вопрос("Табличное поле ""Материалы"" будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Материалы.Очистить();
		
	КонецЕсли;
	
	Результат       = УправлениеПроизводством.РассчитатьРасходСырьяПоСпецификации(Ссылка, "Продукция");
	РезультатУслуги = УправлениеПроизводством.РассчитатьРасходСырьяПоСпецификации(Ссылка, "Услуги");
	
	ТаблицаМатериалов = Результат.Выгрузить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатУслуги.Выгрузить(), ТаблицаМатериалов);
	ТаблицаМатериалов.Свернуть("Номенклатура,ЕдиницаИзмерения,НоменклатурнаяГруппа", "Количество");
	
	Материалы.Загрузить(ТаблицаМатериалов);
	
	Для Каждого Стр Из Материалы Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Стр, "Материалы", Истина);
		Стр.Коэффициент          = 1;
		Стр.ЕдиницаИзмерения	 = Стр.Номенклатура.БазоваяЕдиницаИзмерения;
		Стр.ОтражениеВУСН        = Перечисления.ОтражениеВУСН.Принимаются;
		Стр.СтатьяЗатрат         = Стр.Номенклатура.СтатьяЗатрат;
		Стр.НоменклатурнаяГруппа = Стр.НоменклатурнаяГруппа;
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	Если НачалоМесяца(мТекущаяДатаДокумента) <> НачалоМесяца(Дата) Тогда
		ОпределитьСложныйУчетНДС();
		УстановитьВидимость();
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
    НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата);
	
	УстановитьВариантВыраженияУслуг();
	СформироватьТаблицуКолонокТабЧастиУслуги();
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении реквизита Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	УстановитьВариантВыраженияУслуг();
    СформироватьТаблицуКолонокТабЧастиУслуги();
	
	Для Каждого СтрокаУслуги Из Услуги Цикл
		
		РаботаСДиалогами.УстановитьПодразделениеПоСчету(
			СтрокаУслуги.ПодразделениеЗатрат, СтрокаУслуги.Счет, Организация, ПодразделениеЗатрат);
		
	КонецЦикла;
	
	ОпределитьСложныйУчетНДС();
	ЭтоУСН  = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	УстановитьВидимость();

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладНачалоВыбора()

Процедура ИспользоватьМатериалыПриИзменении(Элемент)
	
		УстановитьВидимость();

КонецПроцедуры

Процедура СчетСписанияНДСПриИзменении(Элемент)

	УстановитьВидимость();//СубконтоНДС();

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		СубконтоСписанияНДС1, ЭлементыФормы.СубконтоСписанияНДС1,
		СубконтоСписанияНДС2, ЭлементыФормы.СубконтоСписанияНДС2,
		СубконтоСписанияНДС3, ЭлементыФормы.СубконтоСписанияНДС3);

	мСчетБУ = Элемент.Значение;

КонецПроцедуры

Процедура СчетСписанияНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
		
КонецПроцедуры

Процедура СубконтоСписанияНДС1НачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = Новый Структура();
	Для н=1 По 3 Цикл
		Если ТипЗнч(ЭтотОбъект["СубконтоСписанияНДС"+н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЭтотОбъект["СубконтоСписанияНДС"+н]);
		ИначеЕсли ТипЗнч(ЭтотОбъект["СубконтоСписанияНДС"+н]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ЭтотОбъект["СубконтоДт"+н]);
		КонецЕсли;
	КонецЦикла;
    СписокПараметров.Вставить("ЭтоНовыйДокумент",ЭтоНовый());

	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

// {ОбособленныеПодразделения

Процедура СкладПриИзменении(Элемент)
	
	ПодразделениеОрганизации = УправлениеПодразделениями.ПолучитьПодразделение(Организация, Склад);
	
КонецПроцедуры

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()

// }ОбособленныеПодразделения

Процедура СчетЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора("ФормаВыбора", Элемент, );

	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Значение      = мСписокСчетов;

	ФормаВыбора.ЭлементыФормы.Список.НастройкаОтбора.Ссылка.Доступность = Ложь;

	ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;

	ФормаВыбора.Открыть();

КонецПроцедуры

Процедура НДСвСтоимостиТоваровПриИзменении(Элемент)

	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатратПриИзменении(Элемент)
	Если не ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат Тогда
		ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию(Истина);
	КонецЕсли; 
	
	УстановитьВидимость();
КонецПроцедуры

Процедура ВариантВыраженияВнутреннихУслугПриИзменении(Элемент)
	
	УстановитьВидимостьКолонокУслуг()
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПРОДУКЦИЯ

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры табличной части Продукция
//
Процедура ПродукцияПродукцияПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииПродукции(СтрокаТабличнойЧасти, "Продукция");
	
	Ценообразование.ЗаполнитьПлановуюСебестоимость(СтрокаТабличнойЧасти, Дата);
	ОбработкаТабличныхЧастей.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);

	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Продукция", Истина);
	ЗаполнитьНоменклатурнуюГруппу(СтрокаТабличнойЧасти);

КонецПроцедуры // ПродукцияПродукцияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ЕдиницаИзмерения табличной части Продукция
//
Процедура ПродукцияЕдиницаИзмеренияПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ПродукцияЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Продукция".
//
Процедура ПродукцияКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
//
Процедура ПродукцияСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ПродукцияСчетОбработкаВыбора()

Процедура ПродукцияПлановаяСтоимостьПриИзменении(Элемент)

	ОбработкаТабличныхЧастей.ПересчитатьПлановуюСумму(ЭлементыФормы.Продукция.ТекущиеДанные);

КонецПроцедуры

Процедура ПродукцияСуммаПлановаяПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Продукция.ТекущиеДанные;

	Если СтрокаТЧ.Количество = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаТЧ.ПлановаяСтоимость = СтрокаТЧ.СуммаПлановая / СтрокаТЧ.Количество;

КонецПроцедуры

Процедура ПродукцияСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ПродукцияСчетЗатратОбработкаВыбора()

Процедура ПродукцияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Продукция.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры табличной части Услуги
//
Процедура УслугиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.СуммаПлановая = 0 Тогда
		Ценообразование.ЗаполнитьПлановуюСебестоимость(СтрокаТабличнойЧасти, Дата);
		СтрокаТабличнойЧасти.Количество = ?(СтрокаТабличнойЧасти.Количество, 0, 1);
		ОбработкаТабличныхЧастей.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Счет) Тогда
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Услуги", Истина);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатурнаяГруппа) Тогда
		ЗаполнитьНоменклатурнуюГруппу(СтрокаТабличнойЧасти);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
		СтрокаТабличнойЧасти.Спецификация     = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, Дата);
	КонецЕсли;
КонецПроцедуры // ПродукцияПродукцияПриИзменении()

Процедура УслугиСчетПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	Колонки              = ЭлементыФормы.Услуги.Колонки;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		СтрокаТабличнойЧасти.Субконто1, Колонки.Субконто1,
		СтрокаТабличнойЧасти.Субконто2, Колонки.Субконто2,
		СтрокаТабличнойЧасти.Субконто3, Колонки.Субконто3,
		СтрокаТабличнойЧасти.ПодразделениеЗатрат, Колонки.Подразделение);
		
	РаботаСДиалогами.УстановитьПодразделениеПоСчету(
		СтрокаТабличнойЧасти.ПодразделениеЗатрат, СтрокаТабличнойЧасти.Счет, Организация, ПодразделениеЗатрат);
	
КонецПроцедуры

Процедура УслугиСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура УслугиПриАктивизацииСтроки(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	Если Не СтрокаТабличнойЧасти = Неопределено Тогда
		УстановитьДоступностьСубконто (СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	РаботаСДиалогами.УстановитьДоступностьЯчеекПоСчету(Элемент.ТекущиеДанные.Счет, Элемент.Колонки.Субконто1, Элемент.Колонки.Субконто2, Элемент.Колонки.Субконто3);

КонецПроцедуры

Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УправлениеПроизводством.НастроитьВидимостьЯчеекАналитикиЗатрат(ДанныеСтроки.Счет, неопределено, ОформлениеСтроки, Истина, Истина);
	ОформлениеСтроки.Ячейки.Подразделение.ОтметкаНезаполненного = (Не ЗначениеЗаполнено(ДанныеСтроки.ПодразделениеЗатрат) И Лев(ДанныеСтроки.Счет.Код,1) = "2");
	
	
КонецПроцедуры

Процедура УслугиСубконтоНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = ПараметрыНеобходимыеДляВыбораСубконто(Элемент, "Бух");
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНЫЕ ОТХОДЫ

// В строке табличной части заполняется плановая стоимость отходов.
//
// Параметры: 
//  СтрокаТЧ - строка табличной части, в которой надо заполнить плановую себестоимость;
//  Дата     - дата, на которую надо получить плановую себестоимость.
//
Процедура ЗаполнитьПлановуюСтоимостьОтходов(СтрокаТЧ, Дата) 

	ТипЦенПлановойСебестоимости   = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Если ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) Тогда

		СтрокаТЧ.Цена =
			Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТЧ.Номенклатура,
									 ТипЦенПлановойСебестоимости, Дата,
									 ВалютаРегламентированногоУчета, 1);
	КонецЕсли; 

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры табличной части ВозвратныеОтходы
//
Процедура ОтходыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;

	ЗаполнитьПлановуюСтоимостьОтходов(СтрокаТабличнойЧасти, Дата);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "ВозвратныеОтходы", Истина);
	ЗаполнитьНоменклатурнуюГруппу(СтрокаТабличнойЧасти);
	ЗаполнитьСтатьюЗатрат(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ПродукцияПродукцияПриИзменении()

Процедура ОтходыПриИзмененииЦены(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

Процедура ОтходыПриИзмененииСуммы(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;

	Если СтрокаТЧ.Количество = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаТЧ.Цена = СтрокаТЧ.Сумма / СтрокаТЧ.Количество;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Продукция".
//
Процедура ОтходыКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

Процедура ВозвратныеОтходыОтражениеВУСННачалоВыбора(Элемент, СтандартнаяОбработка)
	Если Элемент.ДоступныеЗначения.Количество() = 0 Тогда
		Элемент.ДоступныеЗначения.Добавить(Перечисления.ОтражениеВУСН.Принимаются);
		Элемент.ДоступныеЗначения.Добавить(Перечисления.ОтражениеВУСН.НеПринимаются);
	КонецЕсли;
КонецПроцедуры

Процедура ВозвратныеОтходыСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
КонецПроцедуры

Процедура ВозвратныеОтходыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.ВозвратныеОтходы.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ МАТЕРИАЛЫ

Процедура МатериалыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	// Если заполнен документ партии, то себестоимость будет браться из него.
	// Поэтому если колонка видна, будем выводить в нее текст.
	Если ЭлементыФормы.Материалы.Колонки.ДокументОприходования.Видимость
	   И НЕ ЗначениеЗаполнено(ДанныеСтроки.ДокументОприходования) Тогда

		ОформлениеСтроки.Ячейки.ДокументОприходования.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ДокументОприходования.Текст           = "<Авто>";
		ОформлениеСтроки.Ячейки.Себестоимость.ТолькоПросмотр  = Истина;

	КонецЕсли;
	
	Если ЭлементыФормы.Материалы.Колонки.Себестоимость.Видимость
	   И НЕ ЗначениеЗаполнено(ДанныеСтроки.Себестоимость) Тогда

		ОформлениеСтроки.Ячейки.Себестоимость.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Себестоимость.Текст           = "<Авто>";

	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Материалы.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

Процедура МатериалыДокументОприходованияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Строка = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	СтандартнаяОбработка    = Ложь;
	ФормаВыбора             = Документы.Партия.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.Организация = Организация;
	
	ФормаВыбора.Счет         = Строка.Счет;
	ФормаВыбора.Номенклатура = Строка.Номенклатура;
	ФормаВыбора.Склад        = Склад;
	ФормаВыбора.ВидСубконто  = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	Если ЭтоНовый() Тогда
		ФормаВыбора.КонПериода         = КонецДня(РабочаяДата);
	Иначе
		ФормаВыбора.КонПериода         = Дата;
	КонецЕсли;

	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура МатериалыДокументОприходованияПриИзменении(Элемент)
	
	Строка = ЭлементыФормы.Материалы.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(Строка.ДокументОприходования) Тогда
		Строка.Себестоимость = 0;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Материалы", Истина);
	ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);
	
КонецПроцедуры // МатериалыНоменклатураПриИзменении()

Процедура МатериалыСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // МатериалыСчетОбработкаВыбора()




