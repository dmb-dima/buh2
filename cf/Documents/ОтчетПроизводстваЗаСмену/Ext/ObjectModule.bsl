//// Строки, хранят реквизиты имеющие смысл только для бухгалтерского
// и налогового учетов, соответственно в случае если документ не
// отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизиты Экспорт;

// Переменные в которые помещаются параметры учетной политики
Перем мУчетнаяПолитика;

Перем ДвиженияВыпускПродукцииУслуг;
Перем ТаблицаДвиженийВыпуск;

Перем Операция;

Перем УслугиВСуммовомВыражении;

//////////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой накладной на передачу
// готовой продукции в места хранения (ф. МХ-18).
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной.
//
Функция ПечатьМХ18()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата КАК ДатаДокумента,
	|	Организация,
	|	СчетЗатрат,
	|	ПодразделениеЗатрат,
	// {ОбособленныеПодразделения
	|	ПодразделениеОрганизации,
	// }ОбособленныеПодразделения
	|	Склад
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену КАК ОтчетПроизводстваЗаСмену
	|
	|ГДЕ
	|	ОтчетПроизводстваЗаСмену.Ссылка = &ТекущийДокумент";
	ШапкаДокумента = Запрос.Выполнить().Выбрать();
	ШапкаДокумента.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетПроизводстваЗаСмену.Номенклатура,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.Код КАК КодНоменклатуры,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ОтчетПроизводстваЗаСмену.ЕдиницаИзмерения.Наименование КАК ВидУпаковки,
	|	ЕСТЬNULL(ОтчетПроизводстваЗаСмену.Коэффициент, 0) КАК КоличествоВОдномМесте,
	|	СУММА(ЕСТЬNULL(ОтчетПроизводстваЗаСмену.Количество, 0)) КАК Количество,
	|	СУММА(ЕСТЬNULL(ОтчетПроизводстваЗаСмену.СуммаПлановая, 0)) КАК СуммаПлановая,
	|	СУММА(ЕСТЬNULL(ОтчетПроизводстваЗаСмену.КоличествоМест, 0)) КАК КоличествоМест,
	|	МИНИМУМ(ОтчетПроизводстваЗаСмену.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСмену
	|ГДЕ
	|	ОтчетПроизводстваЗаСмену.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетПроизводстваЗаСмену.Номенклатура,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.Код,
	|	ОтчетПроизводстваЗаСмену.ЕдиницаИзмерения,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ОтчетПроизводстваЗаСмену.ЕдиницаИзмерения.Наименование,
	|	ОтчетПроизводстваЗаСмену.Коэффициент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Код", "Номенклатура.Артикул");
	КонецЕсли;
	
	ВыборкаСтрок = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент  = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетПроизводстваЗаСмену_МХ18";

	Макет = ПолучитьОбщийМакет("МХ18");

	Шапка                        = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы             = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	Строка                       = Макет.ПолучитьОбласть("Строка");
	Итого                        = Макет.ПолучитьОбласть("Итого");
	ИтогоПоНакладнойОднаСтраница = Макет.ПолучитьОбласть("ИтогоПоНакладнойОднаСтраница");
	ИтогоПоНакладнойМногоСтраниц = Макет.ПолучитьОбласть("ИтогоПоНакладнойМногоСтраниц");
	ПодвалТаблицы                = Макет.ПолучитьОбласть("ПодвалТаблицы");
	Подвал                       = Макет.ПолучитьОбласть("Подвал");
	
	Если  Не Продукция.Количество() = 0 Или (Продукция.Количество() = 0 И ВозвратныеОтходы.Количество()= 0) Тогда
	
	// Выводим шапку
	Шапка.Параметры.Заполнить(ШапкаДокумента);
	Шапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ШапкаДокумента);
	Шапка.Параметры.ДатаДокумента  = ШапкаДокумента.ДатаДокумента;
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ШапкаДокумента.Организация, ШапкаДокумента.ДатаДокумента);

	Шапка.Параметры.ПредставлениеОрганизации   = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОбОрганизации,"НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны");
	Шапка.Параметры.ПредставлениеПолучателя    = ШапкаДокумента.Склад;
	Шапка.Параметры.ПредставлениеПодразделения = ШапкаДокумента.ПодразделениеЗатрат;
	// {ОбособленныеПодразделения
	Шапка.Параметры.ПредставлениеПодразделения = ШапкаДокумента.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	Шапка.Параметры.ОрганизацияПоОКПО          = СведенияОбОрганизации.КодПоОКПО;
	Шапка.Параметры.Корсчет          		   = ШапкаДокумента.СчетЗатрат;
	Шапка.Параметры.КодАналитики       		   = "";

	ТабДокумент.Вывести(Шапка);

	// Выводим заголовок таблицы
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	// Вычисляем количество строк в таблице
	КоличествоСтрок = ВыборкаСтрок.Количество();
	
	// Инициализация счетчика страниц
	НомерСтраницы = 1;

	// Инициализация итогов по странице
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоМестНаСтранице        = 0;
	ИтогоКоличествоНаСтранице  = 0;
	ИтогоСуммаНаСтранице       = 0;

	// Инициализация итогов по документу
	ИтогоМассаБрутто = 0;
	ИтогоМест        = 0;
	ИтогоКоличество  = 0;
    ИтогСумма        = 0;
	
	// Выводим многострочную часть документа
	Для Каждого СтрокаДокумента Из ВыборкаСтрок Цикл

		// Проверим, помещается ли строка с итогами на страницу, если нет, будем
		// выводить итоги по странице, а строку перенесем на следующую страницу
		СтрокаСИтогами = Новый Массив;
		СтрокаСИтогами.Добавить(Строка);
		
		// Если строка - последняя в таблице, проверим, поместятся ли
		// итоги по накладной и подвал.
		Если (ВыборкаСтрок.Индекс(СтрокаДокумента) + 1) = КоличествоСтрок Тогда
			
			Если НомерСтраницы > 1 Тогда
				СтрокаСИтогами.Добавить(Итого);
				СтрокаСИтогами.Добавить(ИтогоПоНакладнойМногоСтраниц);
				СтрокаСИтогами.Добавить(Подвал);
			Иначе
				СтрокаСИтогами.Добавить(ИтогоПоНакладнойОднаСтраница);
				СтрокаСИтогами.Добавить(Подвал);
			КонецЕсли;
				
		Иначе // не последняя строка, достаточно проверить, поместятся ли итоги по странице
			
			СтрокаСИтогами.Добавить(Итого);
			
		КонецЕсли;
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСИтогами) Тогда

			// Выводим итоги по странице
			Итого.Параметры.ИтогМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице;
			Итого.Параметры.ИтогМестНаСтранице        = ИтогоМестНаСтранице;
			Итого.Параметры.ИтогКоличествоНаСтранице  = ИтогоКоличествоНаСтранице;
			Итого.Параметры.ИтогСуммаНаСтранице       = ИтогоСуммаНаСтранице;
			
			ТабДокумент.Вывести(Итого);

			// Выводим подвал таблицы
			ТабДокумент.Вывести(ПодвалТаблицы);
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Очистим итоги по странице
			ИтогоМассаБруттоНаСтранице = 0;
			ИтогоМестНаСтранице        = 0;
			ИтогоКоличествоНаСтранице  = 0;
			ИтогоСуммаНаСтранице       = 0;
			
			// Установим новый номер
			НомерСтраницы = НомерСтраницы + 1;
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;

		// Выводим строку
		Строка.Параметры.Заполнить(СтрокаДокумента);
		Строка.Параметры.ТоварНаименование = СокрЛП(СтрокаДокумента.Номенклатура.НаименованиеПолное);
		Строка.Параметры.ТоварКод             = СтрокаДокумента.КодНоменклатуры;
        Строка.Параметры.Цена              = ?(СтрокаДокумента.Количество = 0, 0, СтрокаДокумента.СуммаПлановая / СтрокаДокумента.Количество);
		Строка.Параметры.Сумма             = СтрокаДокумента.СуммаПлановая;

		Мест        = СтрокаДокумента.КоличествоМест;
		Мест        = ?(Мест <> Неопределено, Мест, 0);
		Количество  = СтрокаДокумента.Количество;

		ТабДокумент.Вывести(Строка);

		// Увеличим итоги по странице
		ИтогоМассаБруттоНаСтранице = 0;
		ИтогоМестНаСтранице        = ИтогоМестНаСтранице       + Мест;
		ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице + Количество;
        ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице      + СтрокаДокумента.СуммаПлановая;
		
		// Увеличим итоги по документу
		ИтогоМассаБрутто = 0;
		ИтогоМест        = ИтогоМест       + Мест;
		ИтогоКоличество  = ИтогоКоличество + Количество;
        ИтогСумма        = ИтогСумма       + СтрокаДокумента.СуммаПлановая;

	КонецЦикла;
	                                            
	// Если страниц много, выводим промежуточные итоги по последней странице
	// перед итогами по накладной
	Если НомерСтраницы > 1 Тогда
		
		// Выводим итоги по странице
		Итого.Параметры.ИтогМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице;
		Итого.Параметры.ИтогМестНаСтранице        = ИтогоМестНаСтранице;
		Итого.Параметры.ИтогКоличествоНаСтранице  = ИтогоКоличествоНаСтранице;
		Итого.Параметры.ИтогСуммаНаСтранице       = ИтогоСуммаНаСтранице;
		
		ТабДокумент.Вывести(Итого);
		
		// Выводим итоги по накладной
		ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
		ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогМест        = ИтогоМест;
		ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогКоличество  = ИтогоКоличество;
	    ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогСумма       = ИтогСумма;

		ТабДокумент.Вывести(ИтогоПоНакладнойМногоСтраниц);
		
	Иначе // только итоги по накладной
		
		ИтогоПоНакладнойОднаСтраница.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
		ИтогоПоНакладнойОднаСтраница.Параметры.ИтогМест        = ИтогоМест;
		ИтогоПоНакладнойОднаСтраница.Параметры.ИтогКоличество  = ИтогоКоличество;
	    ИтогоПоНакладнойОднаСтраница.Параметры.ИтогСумма       = ИтогСумма;

		ТабДокумент.Вывести(ИтогоПоНакладнойОднаСтраница);
		
	КонецЕсли;
	
	// Выводим подвал таблицы
	ТабДокумент.Вывести(ПодвалТаблицы);
	
	// Выводим подвал документа
	Подвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, , ",,,,,,,,0");
	Подвал.Параметры.ИтогСуммаПрописью                          = ЧислоПрописью(Цел(ИтогСумма), , ",,,,,,,,0");
	Подвал.Параметры.Копейки                          			= Формат((ИтогСумма-Цел(ИтогСумма))*100, "ЧЦ=2; ЧН=; ЧВН=");
	
	ТабДокумент.Вывести(Подвал);
	КонецЕсли;
	Если  ВозвратныеОтходы.Количество()= 0 Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетПроизводстваЗаСмену.Номенклатура,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.Код КАК КодНоменклатуры,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ВидУпаковки,
	|	1 КАК КоличествоВОдномМесте,
	|	СУММА(ЕСТЬNULL(ОтчетПроизводстваЗаСмену.Количество, 0)) КАК Количество,
	|	СУММА(ЕСТЬNULL(ОтчетПроизводстваЗаСмену.Сумма, 0)) КАК СуммаПлановая,
	|	СУММА(ЕСТЬNULL(ОтчетПроизводстваЗаСмену.Количество, 0)) КАК КоличествоМест,
	|	МИНИМУМ(ОтчетПроизводстваЗаСмену.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.ВозвратныеОтходы КАК ОтчетПроизводстваЗаСмену
	|ГДЕ
	|	ОтчетПроизводстваЗаСмену.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетПроизводстваЗаСмену.Номенклатура,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.Код,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.БазоваяЕдиницаИзмерения.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Код", "Номенклатура.Артикул");
	КонецЕсли;
	
	ВыборкаСтрок = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Выводим шапку
	Шапка.Параметры.Заполнить(ШапкаДокумента);
	Шапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ШапкаДокумента);
	Шапка.Параметры.ДатаДокумента  = ШапкаДокумента.ДатаДокумента;
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ШапкаДокумента.Организация, ШапкаДокумента.ДатаДокумента);

	Шапка.Параметры.ПредставлениеОрганизации   = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОбОрганизации,"НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны");
	Шапка.Параметры.ПредставлениеПолучателя    = ШапкаДокумента.Склад;
	Шапка.Параметры.ПредставлениеПодразделения = ШапкаДокумента.ПодразделениеЗатрат;
	// {ОбособленныеПодразделения
	Шапка.Параметры.ПредставлениеПодразделения = ШапкаДокумента.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	Шапка.Параметры.ОрганизацияПоОКПО          = СведенияОбОрганизации.КодПоОКПО;
	Шапка.Параметры.Корсчет          		   = ШапкаДокумента.СчетЗатрат;
	Шапка.Параметры.КодАналитики       		   = "Возвратные отходы";

	ТабДокумент.Вывести(Шапка);

	// Выводим заголовок таблицы
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	// Вычисляем количество строк в таблице
	КоличествоСтрок = ВыборкаСтрок.Количество();
	
	// Инициализация счетчика страниц
	НомерСтраницы = 1;

	// Инициализация итогов по странице
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоМестНаСтранице        = 0;
	ИтогоКоличествоНаСтранице  = 0;
	ИтогоСуммаНаСтранице       = 0;

	// Инициализация итогов по документу
	ИтогоМассаБрутто = 0;
	ИтогоМест        = 0;
	ИтогоКоличество  = 0;
    ИтогСумма        = 0;
	
	// Выводим многострочную часть документа
	Для Каждого СтрокаДокумента Из ВыборкаСтрок Цикл

		// Проверим, помещается ли строка с итогами на страницу, если нет, будем
		// выводить итоги по странице, а строку перенесем на следующую страницу
		СтрокаСИтогами = Новый Массив;
		СтрокаСИтогами.Добавить(Строка);
		
		// Если строка - последняя в таблице, проверим, поместятся ли
		// итоги по накладной и подвал.
		Если (ВыборкаСтрок.Индекс(СтрокаДокумента) + 1) = КоличествоСтрок Тогда
			
			Если НомерСтраницы > 1 Тогда
				СтрокаСИтогами.Добавить(Итого);
				СтрокаСИтогами.Добавить(ИтогоПоНакладнойМногоСтраниц);
				СтрокаСИтогами.Добавить(Подвал);
			Иначе
				СтрокаСИтогами.Добавить(ИтогоПоНакладнойОднаСтраница);
				СтрокаСИтогами.Добавить(Подвал);
			КонецЕсли;
				
		Иначе // не последняя строка, достаточно проверить, поместятся ли итоги по странице
			
			СтрокаСИтогами.Добавить(Итого);
			
		КонецЕсли;
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСИтогами) Тогда

			// Выводим итоги по странице
			Итого.Параметры.ИтогМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице;
			Итого.Параметры.ИтогМестНаСтранице        = ИтогоМестНаСтранице;
			Итого.Параметры.ИтогКоличествоНаСтранице  = ИтогоКоличествоНаСтранице;
			Итого.Параметры.ИтогСуммаНаСтранице       = ИтогоСуммаНаСтранице;
			
			ТабДокумент.Вывести(Итого);

			// Выводим подвал таблицы
			ТабДокумент.Вывести(ПодвалТаблицы);
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Очистим итоги по странице
			ИтогоМассаБруттоНаСтранице = 0;
			ИтогоМестНаСтранице        = 0;
			ИтогоКоличествоНаСтранице  = 0;
			ИтогоСуммаНаСтранице       = 0;
			
			// Установим новый номер
			НомерСтраницы = НомерСтраницы + 1;
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;

		// Выводим строку
		Строка.Параметры.Заполнить(СтрокаДокумента);
		Строка.Параметры.ТоварНаименование = СокрЛП(СтрокаДокумента.Номенклатура.НаименованиеПолное);
		Строка.Параметры.ТоварКод             = СтрокаДокумента.КодНоменклатуры;
        Строка.Параметры.Цена              = ?(СтрокаДокумента.Количество = 0, 0, СтрокаДокумента.СуммаПлановая / СтрокаДокумента.Количество);
		Строка.Параметры.Сумма             = СтрокаДокумента.СуммаПлановая;

		Мест        = СтрокаДокумента.КоличествоМест;
		Мест        = ?(Мест <> Неопределено, Мест, 0);
		Количество  = СтрокаДокумента.Количество;

		ТабДокумент.Вывести(Строка);

		// Увеличим итоги по странице
		ИтогоМассаБруттоНаСтранице = 0;
		ИтогоМестНаСтранице        = ИтогоМестНаСтранице       + Мест;
		ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице + Количество;
        ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице      + СтрокаДокумента.СуммаПлановая;
		
		// Увеличим итоги по документу
		ИтогоМассаБрутто = 0;
		ИтогоМест        = ИтогоМест       + Мест;
		ИтогоКоличество  = ИтогоКоличество + Количество;
        ИтогСумма        = ИтогСумма       + СтрокаДокумента.СуммаПлановая;

	КонецЦикла;
	                                            
	// Если страниц много, выводим промежуточные итоги по последней странице
	// перед итогами по накладной
	Если НомерСтраницы > 1 Тогда
		
		// Выводим итоги по странице
		Итого.Параметры.ИтогМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице;
		Итого.Параметры.ИтогМестНаСтранице        = ИтогоМестНаСтранице;
		Итого.Параметры.ИтогКоличествоНаСтранице  = ИтогоКоличествоНаСтранице;
		Итого.Параметры.ИтогСуммаНаСтранице       = ИтогоСуммаНаСтранице;
		
		ТабДокумент.Вывести(Итого);
		
		// Выводим итоги по накладной
		ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
		ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогМест        = ИтогоМест;
		ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогКоличество  = ИтогоКоличество;
	    ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогСумма       = ИтогСумма;

		ТабДокумент.Вывести(ИтогоПоНакладнойМногоСтраниц);
		
	Иначе // только итоги по накладной
		
		ИтогоПоНакладнойОднаСтраница.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
		ИтогоПоНакладнойОднаСтраница.Параметры.ИтогМест        = ИтогоМест;
		ИтогоПоНакладнойОднаСтраница.Параметры.ИтогКоличество  = ИтогоКоличество;
	    ИтогоПоНакладнойОднаСтраница.Параметры.ИтогСумма       = ИтогСумма;

		ТабДокумент.Вывести(ИтогоПоНакладнойОднаСтраница);
		
	КонецЕсли;
	
	// Выводим подвал таблицы
	ТабДокумент.Вывести(ПодвалТаблицы);
	
	// Выводим подвал документа
	Подвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, , ",,,,,,,,0");
	Подвал.Параметры.ИтогСуммаПрописью                          = ЧислоПрописью(Цел(ИтогСумма), , ",,,,,,,,0");
	Подвал.Параметры.Копейки                          			= Формат((ИтогСумма-Цел(ИтогСумма))*100, "ЧЦ=2; ЧН=; ЧВН=");
	
	ТабДокумент.Вывести(Подвал);

	Возврат ТабДокумент;
	
КонецФункции // ПечатьМХ18()

Функция ПечатьМ11()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТребованиеНакладная_М11";

	Макет = ПолучитьОбщийМакет("М11");

	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заголовок                = "ТРЕБОВАНИЕ-НАКЛАДНАЯ № " + Строка(Номер);
	Область.Параметры.КодОКПО                  = Организация.КодПоОКПО;
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	Область.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
	Область.Параметры.ДатаСоставления          = Формат( Дата, "ДФ=dd.MM.yy");
	Область.Параметры.Склад                    = Склад;
	Область.Параметры.КоррСчет                 = СчетЗатрат.Код;
	Область.Параметры.ПредставлениеПодразделения = ПодразделениеЗатрат.Наименование;
	// {ОбособленныеПодразделения
	Если ЗначениеЗаполнено(ПодразделениеЗатрат.НаименованиеПолное) Тогда
		Область.Параметры.ПредставлениеПодразделения = ПодразделениеЗатрат.НаименованиеПолное;
	КонецЕсли;
	// }ОбособленныеПодразделения
	ТабДокумент.Вывести(Область);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Счет",                         "Счет");
	СтруктураПолей.Вставить("Материал",                     "Номенклатура");
	СтруктураПолей.Вставить("МатериалНаименование",         "Номенклатура.НаименованиеПолное");
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		СтруктураПолей.Вставить("НоменклатурныйНомер",          "Номенклатура.Артикул");	
	Иначе
		СтруктураПолей.Вставить("НоменклатурныйНомер",          "Номенклатура.Код");	
	КонецЕсли;
	
	СтруктураПолей.Вставить("ЕдиницаИзмеренияНаименование", "Номенклатура.БазоваяЕдиницаИзмерения");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияКод",          "Номенклатура.БазоваяЕдиницаИзмерения.Код");
	СтруктураПолей.Вставить("Количество",                   "Количество");
                                           
	Область = Макет.ПолучитьОбласть("Строка");
	
	ТаблицаМатериалов = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей).Выгрузить();
	ТаблицаМатериалов.Свернуть("Материал, МатериалНаименование, Счет, НоменклатурныйНомер,ЕдиницаИзмеренияКод,ЕдиницаИзмеренияНаименование", "Количество");

	// Поиск сумм списания активов для заполнения Цены и Суммы
	ТаблицаСуммСписания = БухгалтерскийУчет.ПолучитьСуммуСписанияАктивов(ЭтотОБъект);
	
	Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл

		Область.Параметры.Заполнить(СтрокаТЧ);
		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(СтрокаТЧ.Материал, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			 Область.Параметры.Цена = 0;
			 Область.Параметры.Сумма = 0;
		 Иначе
			 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			 Область.Параметры.Цена  = Цена;
			 Область.Параметры.Сумма = Цена * СтрокаТЧ.Количество;
		 КонецЕсли;
		ТабДокумент.Вывести(Область);

	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Подвал");

	ТабДокумент.Вывести(Область);

	Возврат ТабДокумент;

КонецФункции // ПечатьМ11()

Функция ПечатьАктаОбОказанииУслуг()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктОбОказанииПроизводственныхУслуг_Акт";
	Макет       = ПолучитьМакет("Акт");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "Акт оказания услуг";
	ОбластьМакета.Параметры.ПредставлениеОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата).ПолноеНаименование;
	ОбластьМакета.Параметры.ПредставлениеИсполнителя = ?(ЗначениеЗаполнено(ПодразделениеЗатрат),ПодразделениеЗатрат.ПолноеНаименование(),"");
	ТабДокумент.Вывести(ОбластьМакета);

	ПоКоличеству = (ВариантВыраженияВнутреннихУслуг = Перечисления.ВариантВыраженияВнутреннихУслуг.ВКоличественныхПоказателях);
	
	// Вывести табличную часть	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
 
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	
	ОбластьДанных.Параметры.Параметр = ?(ПоКоличеству, "Количество", "Плановая стоимость");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьКолонкаТовар = Макет.Область("Товар");
		
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("ПрочиеСведения").ШиринаКолонки;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

	НомерСтроки = 0;

	Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл	

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
		ТабДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = СтрокаТабличнойЧасти.Номенклатура.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = СтрокаТабличнойЧасти.Номенклатура.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ОбластьДанных.Параметры.Заказчик = СтрокаТабличнойЧасти.ПодразделениеЗатрат;
		ОбластьДанных.Параметры.Товар	 = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;
		ОбластьДанных.Параметры.СубСчет  = СтрокаТабличнойЧасти.Счет;
		ОбластьДанных.Параметры.СуммаПараметра = ?(ПоКоличеству,Формат(СтрокаТабличнойЧасти.Количество, "ЧЦ=15; ЧДЦ=3; ЧН=-"),Формат(СтрокаТабличнойЧасти.СуммаПлановая, "ЧЦ=15; ЧДЦ=2; ЧН=-"));
		ОбластьДанных.Параметры.АналитическийУчет = "" + СокрЛП(СтрокаТабличнойЧасти.Субконто1) 
		              + ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Субконто2), ", " + СокрЛП(СтрокаТабличнойЧасти.Субконто2),"")
					  + ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Субконто3), ", " + СокрЛП(СтрокаТабличнойЧасти.Субконто3),"");
				
		ТабДокумент.Присоединить(ОбластьДанных);

	КонецЦикла;
	
	// Вывести подвал
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	
	Сумма    = ?(ПоКоличеству,Услуги.Итог("Количество"),Услуги.Итог("СуммаПлановая"));

	ОбластьДанных.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьДанных);
    мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СуммаКПрописи = Сумма;
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + ?(ПоКоличеству,"" + СуммаКПрописи + " шт."," на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, мВалютаРегламентированногоУчета));
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если      ИмяМакета = "МХ18" Тогда
		
		// накладная на передачу готовой продукции на склад
		ТабДокумент = ПечатьМХ18();
	ИначеЕсли      ИмяМакета = "М11" Тогда
		
		// требование накладная для материалов
		ТабДокумент = ПечатьМ11();
		
	ИначеЕсли      ИмяМакета = "Услуги" Тогда
		
		// отчет об услугах, оказанных подразделениями друг другу
		ТабДокумент = ПечатьАктаОбОказанииУслуг();	
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);
	
КонецПроцедуры // Печать


#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("МХ18,М11,Услуги","МХ-18 (Накладная на передачу готовой продукции)","M-11 (Требование-накладная)","Акт оказания услуг");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизиты = "Продукция.Счет, СчетЗатрат, Материалы.Счет";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет счета учета.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, Заполнять) Экспорт

	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
	
	Если Заполнять Тогда
		СтрокаТЧ.Счет = СчетаУчета.СчетУчета;
		Если ИмяТабЧасти = "Услуги" Тогда
			СтрокаТЧ.Субконто1	 = СчетаУчета.Субконто1;
			СтрокаТЧ.Субконто2   = СчетаУчета.Субконто2;
			СтрокаТЧ.Субконто3   = СчетаУчета.Субконто3;
		КонецЕсли;
		
	Иначе
		СтрокаТЧ.Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация," + ?(Лев(СчетЗатрат.Код,1) = "2","ПодразделениеЗатрат,","") + ?(Продукция.Количество() = 0 И ВозвратныеОтходы.Количество() = 0, "", "Склад, ") + "СчетЗатрат");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт

	РеквизитыТабПродукция = "Номенклатура,Количество,Счет, СуммаПлановая, НоменклатурнаяГруппа";
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабПродукция, "", мСтрокаРеквизиты, "", "Продукция");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Продукция", Новый Структура(РеквизитыТабПродукция), Отказ, Заголовок);
	
	РеквизитыТабУслуги = "Номенклатура," + ?(ВариантВыраженияВнутреннихУслуг = Перечисления.ВариантВыраженияВнутреннихУслуг.ВПлановыхЦенах, "СуммаПлановая", "Количество") + ",Счет, НоменклатурнаяГруппа";
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", Новый Структура(РеквизитыТабУслуги), Отказ, Заголовок);
	
	РеквизитыТабОтходы = "Номенклатура, Количество,Сумма,Счет,СтатьяЗатрат, НоменклатурнаяГруппа";
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратныеОтходы", Новый Структура(РеквизитыТабОтходы), Отказ, Заголовок);
	
	РеквизитыТабМатериалы = "Номенклатура,Количество,Счет, НоменклатурнаяГруппа";
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабМатериалы, "", мСтрокаРеквизиты, "", "Материалы");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура(РеквизитыТабМатериалы), Отказ, Заголовок);
	
	
КонецПроцедуры // ПроверкаРеквизитов()

// Проверяет, что в табличной части нет счетов учета МПЗ.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетСчета43(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) 

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
                                               
		Если ЗначениеЗаполнено(СтрокаТаблицы.Счет)
		   И  СтрокаТаблицы.Счет.Количественный Тогда

				ОбщегоНазначения.ОшибкаПриПроведении("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
				                    """ табличной части """ + ПредставлениеТабличнойЧасти + """: "
				                    + "содержится счет" + СтрокаТаблицы.Счет+ ". Укажите счет затрат!", Отказ, Заголовок);

								КонецЕсли;
								
	КонецЦикла;

КонецПроцедуры // УправлениеЗапасами.ПроверитьЧтоНетУслуг()

   
   // Проверяет, что в табличной части нет счетов учета МПЗ.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеПодразделений(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) 

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
                                               
		Если ЗначениеЗаполнено(СтрокаТаблицы.Счет)
		   И  Лев(СтрокаТаблицы.Счет.Код,1) = "2" 
		   И Не ЗначениеЗаполнено(СтрокаТаблицы.ПодразделениеЗатрат) Тогда

				ОбщегоНазначения.ОшибкаПриПроведении("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
				                    """ табличной части """ + ПредставлениеТабличнойЧасти + """: "
				                    + "содержится счет учета производственных расходов " + СтрокаТаблицы.Счет+ ". Укажите подразделение затрат!", Отказ, Заголовок);

								КонецЕсли;
								
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеПодразделений()


// Процедура формирует движения регистров по табличной части Продукция
////
Процедура ДвиженияПоТабличнойЧастиПродукция(ТаблицаПоПродукции, СтруктураШапкиДокумента, Счет40)

	Если Продукция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаПоПродукции Цикл

		ДвиженияПоВыпускуПродукцииОтходов(СтруктураШапкиДокумента, Строка, Операция, ТаблицаДвиженийВыпуск, Истина, Счет40);
		
	КонецЦикла;
		

	ДвиженияВыпускПродукцииУслуг.мПериод = Дата;
	ДвиженияВыпускПродукцииУслуг.мТаблицаДвижений = ТаблицаДвиженийВыпуск;

КонецПроцедуры // ДвиженияПоТабличнойЧастиПродукция()

// Процедура формирует движения регистров по табличной части Услуги
////
Процедура ДвиженияПоТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Счет40)

	Если Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаПоУслугам Цикл

		 ДвиженияПоВыпускуВнутрУслуг(Строка, Операция, ТаблицаДвиженийВыпуск, Истина, Счет40);

	КонецЦикла;
		

	ДвиженияВыпускПродукцииУслуг.мПериод = Дата;
	ДвиженияВыпускПродукцииУслуг.мТаблицаДвижений = ТаблицаДвиженийВыпуск;

КонецПроцедуры // ДвиженияПоТабличнойЧастиУслуги()

// Процедура формирует движения регистров по табличной части ВозвратныеОтходы
////
Процедура ДвиженияПоТабличнойЧастиОтходы(ТаблицаПоОтходам, СтруктураШапкиДокумента)

	Если ВозвратныеОтходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;


	Для Каждого Строка Из ТаблицаПоОтходам Цикл

		ДвиженияПоВыпускуОтходов(Строка, Операция, ТаблицаДвиженийВыпуск, Истина);
		
	КонецЦикла;
		
	ДвиженияВыпускПродукцииУслуг.мПериод = Дата;
	ДвиженияВыпускПродукцииУслуг.мТаблицаДвижений = ТаблицаДвиженийВыпуск;

КонецПроцедуры // ДвиженияПоТабличнойЧастиПродукция()

// Процедура формирует движения по выпуску продукции.
//
Процедура ДвиженияПоВыпускуПродукцииОтходов(СтруктураШапкиДокумента, Строка, Операция, ТаблицаДвиженийВыпуск, ВБухгалтерскомУчете, Счет40)

	Если ВБухгалтерскомУчете Тогда
		Счет                = Строка.Счет;
		СчетЗатратТекущий   = ?(Счет40, ПланыСчетов.Хозрасчетный.ВыпускПродукции, СчетЗатрат);
		СчетЗатратТекущийРегистра = СчетЗатрат;
		УчетнаяПолитика     = мУчетнаяПолитика;
	КонецЕсли;

	// Сформируем проводку.
	Если НЕ ЗначениеЗаполнено(Счет)
	 ИЛИ НЕ ЗначениеЗаполнено(СчетЗатратТекущий) Тогда
		Возврат;
	КонецЕсли;

	НоваяПроводка = Операция.Добавить();
	НоваяПроводка.Организация = Организация;
	НоваяПроводка.Период      = Дата;
	НоваяПроводка.СчетДт = Счет;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", Строка.Номенклатура);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады",       Склад);
	
	// Если способ оценки ФИФО или ЛИФО и на счете ведется партионный учет,
	// то в проводке указываем в качестве партии текущий документ.
	Если УправлениеЗапасами.ВедетсяПартионныйУчет(УчетнаяПолитика) Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Партии",       Ссылка);
	КонецЕсли; 

	НоваяПроводка.Содержание = "Выпуск " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(Счет);

	НоваяПроводка.СчетКт = СчетЗатратТекущий;
	Если Счет40 Тогда
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "ВидыСтоимости",        Перечисления.ВидыСтоимости.Плановая);
		Иначе
	КонецЕсли;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);

	НоваяПроводка.КоличествоДт = ?(НоваяПроводка.СчетДТ.Количественный, Строка.Количество, 0);
	НоваяПроводка.Сумма        = Строка.СуммаПлановая;
	
	// {ОбособленныеПодразделения
	БухгалтерскийУчет.УстановитьПодразделениеПроводки(НоваяПроводка, ПодразделениеОрганизации, "Дт");
	// }ОбособленныеПодразделения 
	
	БухгалтерскийУчет.УстановитьПодразделениеПроводки(НоваяПроводка, ПодразделениеЗатрат, "Кт");
	
	// Отражения выпуска в регистре накопления ВыпускПродукцииУслуг
	СтрокаДвижения = ТаблицаДвиженийВыпуск.Добавить();
	СтрокаДвижения.Организация           = Организация;
	СтрокаДвижения.Продукция             = Строка.Номенклатура;
	СтрокаДвижения.СчетЗатрат            = СчетЗатратТекущийРегистра;
	СтрокаДвижения.Подразделение         = ПодразделениеЗатрат;
	// {ОбособленныеПодразделения
	СтрокаДвижения.ПодразделениеСписания = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 
	СтрокаДвижения.НоменклатурнаяГруппа  = Строка.НоменклатурнаяГруппа;
	СтрокаДвижения.СчетСписания          = Счет;
	
	Если Счет.ВидыСубконто.Количество() > 0 Тогда
		СтрокаДвижения.СубконтоСписания1 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[0].ВидСубконто];
	КонецЕсли; 
	
	Если Счет.ВидыСубконто.Количество() > 1 Тогда
		СтрокаДвижения.СубконтоСписания2 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[1].ВидСубконто];
	КонецЕсли;
	
	Если Счет.ВидыСубконто.Количество() > 2 Тогда
		СтрокаДвижения.СубконтоСписания3 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[2].ВидСубконто];
	КонецЕсли;
	
	СтрокаДвижения.Количество = Строка.Количество;
	СтрокаДвижения.ПлановаяСтоимость = Строка.СуммаПлановая;
	
КонецПроцедуры // ДвиженияПоВыпускуПродукцииОтходов()

// Процедура формирует движения по выпуску отходов.
//
Процедура ДвиженияПоВыпускуОтходов(Строка, Операция, ТаблицаДвиженийВыпуск, ВБухгалтерскомУчете)

	Если ВБухгалтерскомУчете Тогда
		Счет                = Строка.Счет;
		СчетЗатратТекущий   = СчетЗатрат;
		СтатьяЗатрат        = Строка.СтатьяЗатрат;
		УчетнаяПолитика     = мУчетнаяПолитика;
	КонецЕсли;

	// Сформируем проводку.
	Если НЕ ЗначениеЗаполнено(Счет)
	 ИЛИ НЕ ЗначениеЗаполнено(СчетЗатратТекущий) Тогда
		Возврат;
	КонецЕсли;

	НоваяПроводка = Операция.Добавить();

	НоваяПроводка.Организация = Организация;
	НоваяПроводка.Период      = Дата;

	НоваяПроводка.СчетКт = Счет;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Номенклатура", Строка.Номенклатура);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Склады",       Склад);
	
	// Если способ оценки ФИФО или ЛИФО и на счете ведется партионный учет,
	// то в проводке указываем в качестве партии текущий документ.
	Если УправлениеЗапасами.ВедетсяПартионныйУчет(УчетнаяПолитика) Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Партии",       Ссылка);
	КонецЕсли; 

	НоваяПроводка.Содержание = "Оприходование возвратных отходов";

	НоваяПроводка.СчетДт = СчетЗатратТекущий;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         СтатьяЗатрат);
	
	НоваяПроводка.КоличествоКт = ?(НоваяПроводка.СчетКТ.Количественный, - Строка.Количество, 0);
	НоваяПроводка.Сумма        = - Строка.Сумма;
	
	БухгалтерскийУчет.УстановитьПодразделениеПроводки(НоваяПроводка, ПодразделениеЗатрат, "Дт");
	
	// {ОбособленныеПодразделения
	БухгалтерскийУчет.УстановитьПодразделениеПроводки(НоваяПроводка, ПодразделениеОрганизации, "Кт");
	// }ОбособленныеПодразделения 
	
КонецПроцедуры // ДвиженияПоВыпускуОтходов()

// Процедура формирует движения по выпуску внутренних услуг производственных подразделений.
//
Процедура ДвиженияПоВыпускуВнутрУслуг(Строка, Операция, ТаблицаДвиженийВыпуск, ВБухгалтерскомУчете, Счет40)

	Если ВБухгалтерскомУчете Тогда
		Счет                      = Строка.Счет;
		СчетЗатратТекущий         = ?(Счет40, ПланыСчетов.Хозрасчетный.ВыпускПродукции, СчетЗатрат);
		СчетЗатратТекущийРегистра = СчетЗатрат;
		УчетнаяПолитика           = мУчетнаяПолитика;
	КонецЕсли;

	// Сформируем проводку.
	Если НЕ ЗначениеЗаполнено(Счет)
	 ИЛИ НЕ ЗначениеЗаполнено(СчетЗатратТекущий) Тогда
		Возврат;
	КонецЕсли;
	
	Если УслугиВСуммовомВыражении Тогда
		
		НоваяПроводка = Операция.Добавить();
		
		НоваяПроводка.Организация = Организация;
		НоваяПроводка.Период      = Дата;
		НоваяПроводка.СчетДт = Счет;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, Строка.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, Строка.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, Строка.Субконто3);
		
		НоваяПроводка.Содержание = Строка.Номенклатура.НаименованиеПолное;
		
		НоваяПроводка.СчетКт = СчетЗатратТекущий;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
		Если Счет40 Тогда 
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "ВидыСтоимости",   Перечисления.ВидыСтоимости.Плановая);
		КонецЕсли;
		
		НоваяПроводка.КоличествоДт = ?(НоваяПроводка.СчетДТ.Количественный, Строка.Количество, 0);
		НоваяПроводка.Сумма        = Строка.СуммаПлановая;
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(НоваяПроводка, Строка.ПодразделениеЗатрат, "Дт");
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(НоваяПроводка, ПодразделениеЗатрат, "Кт");
		
	КонецЕсли;
	// Отражения выпуска в регистре накопления ВыпускПродукцииУслуг
	СтрокаДвижения = ТаблицаДвиженийВыпуск.Добавить();
	СтрокаДвижения.Организация           = Организация;
	СтрокаДвижения.Продукция             = Строка.Номенклатура;
	СтрокаДвижения.СчетЗатрат            = СчетЗатратТекущийРегистра;
	СтрокаДвижения.Подразделение         = ПодразделениеЗатрат;
	СтрокаДвижения.ПодразделениеСписания = Строка.ПодразделениеЗатрат;
	СтрокаДвижения.НоменклатурнаяГруппа  = Строка.НоменклатурнаяГруппа;
	СтрокаДвижения.СчетСписания          = Счет;
	
 
	Если Счет.ВидыСубконто.Количество() > 0 Тогда
		СтрокаДвижения.СубконтоСписания1 = Строка.Субконто1;
	КонецЕсли; 
	
	Если Счет.ВидыСубконто.Количество() > 1 Тогда
		СтрокаДвижения.СубконтоСписания2 = Строка.Субконто2;
	КонецЕсли;
	
	Если Счет.ВидыСубконто.Количество() > 2 Тогда
		СтрокаДвижения.СубконтоСписания3 = Строка.Субконто3;
	КонецЕсли;
	
	СтрокаДвижения.ПрямыеРасходыРаспределятьПоКоличеству = Не УслугиВСуммовомВыражении;
	СтрокаДвижения.Количество = ?(УслугиВСуммовомВыражении, 1, Строка.Количество);
	СтрокаДвижения.ПлановаяСтоимость = ?(УслугиВСуммовомВыражении, Строка.СуммаПлановая, 0);
	
КонецПроцедуры // ДвиженияПоВыпускуВнутрУслуг()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоОтходам, ТаблицаМатериалов, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	Если ВозвратныеОтходы.Количество() + ТаблицаПоПродукции.Количество() + ?(ИспользоватьМатериалы, ТаблицаМатериалов.Количество(), 0) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВозвратныеОтходы.Количество() > 0 Тогда
		//ПО РЕГИСТРУ РАСХОДОВ УСН
		Движения.РасходыПриУСН.Очистить();
		НаборДвижений = Движения.РасходыПриУСН;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		СуммаСторно = 0;
		
		НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоОтходам, ТаблицаДвижений, 
		Перечисления.ВидыРасходовУСН.Номенклатура, Неопределено,
		Перечисления.СтатусыПартийУСН.Купленные, ,Истина, СуммаСторно);
		
		//Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.РасходыПриУСН.ВыполнитьПриход();
			НаборДвижений.Записать(Истина);
		КонецЕсли;
		
		//ПО РЕГИСТРУ КУДиР
		Если СуммаСторно <> 0 Тогда
			КУДиР = Движения.КнигаУчетаДоходовИРасходов;
			
			СтрокаКниги  = КУДиР.Добавить();
			
			СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаКниги.СтрокаДокумента = 0;
			СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
			СтрокаКниги.ТабличнаяЧасть  = "Возвратные отходы";
			СтрокаКниги.Содержание      = "Материальные расходы уменьшены на сумму возвратных отходов";
			СтрокаКниги.Графа7          = - СуммаСторно;
			СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьМатериалы И (ТаблицаМатериалов.Количество() > 0) Тогда
		СтруктураДопПараметров = Новый Структура("ТаблицаТМЦ", ТаблицаМатериалов);
		НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, СтруктураДопПараметров);
	КонецЕсли;
		
КонецПроцедуры

Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоУслугам, ТаблицаПоОтходам, ТаблицаНГ, Отказ = Ложь)

	// {УчетДоходовИРасходовИП
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
	// }УчетДоходовИРасходовИП
		
		ТаблицаМатериалов = РезультатЗапросаПоТоварам.Выгрузить();
		
	// {УчетДоходовИРасходовИП
	Иначе
	
		ТипыПродукции = Новый Массив;
		ТипыПродукции.Добавить(Тип("СправочникСсылка.Номенклатура"));
		ТипыПродукции.Добавить(Тип("СправочникСсылка.СтатьиЗатрат"));
		ТипыПродукции.Добавить(Тип("СправочникСсылка.ПрочиеДоходыИРасходы"));
		ТипыПродукции.Добавить(Тип("СправочникСсылка.РасходыБудущихПериодов"));
		ОписаниеТиповПродукции = Новый ОписаниеТипов(ТипыПродукции);
		
		ТаблицаНГ = ТаблицаПоПродукции.Скопировать(, "НоменклатурнаяГруппа,Номенклатура,СуммаПлановая,Счет,Количество");
		ТаблицаНГ.Колонки.Добавить("Продукция", ОписаниеТиповПродукции);
		ТаблицаНГ.Колонки.Добавить("НоменклатурнаяГруппаПродукции", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
		
		Для Каждого СтрокаТЧ Из ТаблицаНГ Цикл
			СтрокаТЧ.Продукция = СтрокаТЧ.Номенклатура;
			СтрокаТЧ.НоменклатурнаяГруппаПродукции = СтрокаТЧ.НоменклатурнаяГруппа;
		КонецЦикла;
		
		ТаблицаНГУслуг = ТаблицаПоУслугам.Скопировать(, "НоменклатурнаяГруппа,Счет,Субконто1,Субконто2,Субконто3,СуммаПлановая");
		ТаблицаНГУслуг.Колонки.Добавить("Продукция", ОписаниеТиповПродукции);
		ТаблицаНГУслуг.Колонки.Добавить("НоменклатурнаяГруппаПродукции", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
		ТаблицаНГУслуг.Колонки.Добавить("Количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
		
		Для Каждого Услуга Из ТаблицаНГУслуг Цикл
			Если ТипЗнч(Услуга.Субконто1) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				Услуга.НоменклатурнаяГруппаПродукции = Услуга.Субконто1;
				
			ИначеЕсли ТипЗнч(Услуга.Субконто2) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				Услуга.НоменклатурнаяГруппаПродукции = Услуга.Субконто2;
				
			ИначеЕсли ТипЗнч(Услуга.Субконто3) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				Услуга.НоменклатурнаяГруппаПродукции = Услуга.Субконто3;
			КонецЕсли;
			
			ТипСубконто1 = ТипЗнч(Услуга.Субконто1);
			ТипСубконто2 = ТипЗнч(Услуга.Субконто2);
			ТипСубконто3 = ТипЗнч(Услуга.Субконто3);
			
			Если ТипСубконто1 = Тип("СправочникСсылка.СтатьиЗатрат") ИЛИ ТипСубконто1 = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") ИЛИ ТипСубконто1 = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
				Услуга.Продукция = Услуга.Субконто1;
				
			ИначеЕсли ТипСубконто2 = Тип("СправочникСсылка.СтатьиЗатрат") ИЛИ ТипСубконто2 = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") ИЛИ ТипСубконто2 = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
				Услуга.Продукция = Услуга.Субконто2;
				
			ИначеЕсли ТипСубконто3 = Тип("СправочникСсылка.СтатьиЗатрат") ИЛИ ТипСубконто3 = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") ИЛИ ТипСубконто3 = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
				Услуга.Продукция = Услуга.Субконто3;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Услуга Из ТаблицаНГУслуг Цикл
			СтрокаНГ = ТаблицаНГ.Добавить();
			СтрокаНГ.Счет = Услуга.Счет;
			СтрокаНГ.НоменклатурнаяГруппаПродукции = Услуга.НоменклатурнаяГруппаПродукции;
			СтрокаНГ.НоменклатурнаяГруппа = Услуга.НоменклатурнаяГруппа;
			СтрокаНГ.Продукция = Услуга.Продукция;
			СтрокаНГ.СуммаПлановая = Услуга.СуммаПлановая;
			СтрокаНГ.Количество = Услуга.Количество;
		КонецЦикла;
		
		Для Каждого Отход Из ТаблицаПоОтходам Цикл
			СтрокаНГ = ТаблицаНГ.Добавить();
			СтрокаНГ.Счет = Отход.Счет;
			СтрокаНГ.НоменклатурнаяГруппаПродукции = Отход.НоменклатурнаяГруппа;
			СтрокаНГ.НоменклатурнаяГруппа = Отход.НоменклатурнаяГруппа;
			СтрокаНГ.Продукция = Отход.Номенклатура;
			СтрокаНГ.СуммаПлановая = Отход.Сумма;
			СтрокаНГ.Количество = Отход.Количество;
		КонецЦикла;
		
		ТаблицаНГ.Свернуть("НоменклатурнаяГруппа,Продукция,НоменклатурнаяГруппаПродукции,Счет", "СуммаПлановая,Количество");
		
		ТаблицаМатериалов = Новый ТаблицаЗначений;
		Для Каждого КолонкаТЧ Из РезультатЗапросаПоТоварам.Колонки Цикл
			ТаблицаМатериалов.Колонки.Добавить(КолонкаТЧ.Имя, КолонкаТЧ.ТипЗначения);
		КонецЦикла;
		
		ТаблицаМатериалов.Колонки.Добавить("СчетЗатратИП", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаМатериалов.Колонки.Добавить("Продукция",  Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаМатериалов.Колонки.Добавить("НоменклатурнаяГруппаПродукции", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
		
		СтруктураПоиска = Новый Структура("НоменклатурнаяГруппа");
		МассивКоэф = Новый Массив;
		
		Выборка = РезультатЗапросаПоТоварам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.НоменклатурнаяГруппа) Тогда
				СтруктураПоиска.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
				ПродукцияПоНГ = ТаблицаНГ.НайтиСтроки(СтруктураПоиска);
			КонецЕсли;
			
			Индекс = 0;
			МассивКоэф.Очистить();
			Если Не ПродукцияПоНГ = Неопределено Тогда
				Пока Индекс < ПродукцияПоНГ.Количество() Цикл
					МассивКоэф.Добавить(ПродукцияПоНГ[Индекс].СуммаПлановая);
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
			МассивМеста = ОбщегоНазначения.РаспределитьПропорционально(Выборка.КоличествоМест, МассивКоэф, 3);
			МассивКоличество = ОбщегоНазначения.РаспределитьПропорционально(Выборка.Количество, МассивКоэф, 3);
			МассивСебестоимость = ОбщегоНазначения.РаспределитьПропорционально(Выборка.Себестоимость, МассивКоэф, 2);
			
			Если МассивКоэф.Количество() > 0 Тогда
				Индекс = 0;
				Пока Индекс < МассивКоэф.Количество() Цикл
					Материал = ТаблицаМатериалов.Добавить();
					ЗаполнитьЗначенияСвойств(Материал, Выборка);
					
					Материал.КоличествоМест = ?(МассивМеста <> Неопределено, МассивМеста[Индекс], 0);
					Материал.Количество = ?(МассивКоличество <> Неопределено, МассивКоличество[Индекс], 0);
					Материал.Себестоимость = ?(МассивСебестоимость <> Неопределено, МассивСебестоимость[Индекс], 0);
					
					Материал.Продукция = ПродукцияПоНГ[Индекс].Продукция;
					Материал.НоменклатурнаяГруппаПродукции = ПродукцияПоНГ[Индекс].НоменклатурнаяГруппаПродукции;
					Материал.СчетЗатратИП = ПродукцияПоНГ[Индекс].Счет;
					
					Индекс = Индекс + 1;
				КонецЦикла;
				
			Иначе
				Материал = ТаблицаМатериалов.Добавить();
				ЗаполнитьЗначенияСвойств(Материал, Выборка);
				Материал.Продукция = Материал.СтатьяЗатрат;
				Материал.НоменклатурнаяГруппаПродукции = Материал.НоменклатурнаяГруппа;
				Материал.СчетЗатратИП = СтруктураШапкиДокумента.СчетЗатрат;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	    	
	ТаблицаМатериалов.Колонки.Добавить("Регистратор");
	ТаблицаМатериалов.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаМатериалов.Колонки.Добавить("КорПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаМатериалов.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаМатериалов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаМатериалов.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаМатериалов.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаМатериалов.Колонки.Добавить("ВходящийНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	ТаблицаМатериалов.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
    ТаблицаМатериалов.Колонки.Добавить("СчетЗатрат", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
    ТаблицаМатериалов.Колонки.Добавить("КорСчетСписания", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания2");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания3");
			
	ТаблицаМатериалов.ЗаполнитьЗначения(ЭтотОбъект,    						 "Регистратор");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,       "Склад");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетЗатрат,    		 "КорСчетСписания");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетЗатрат,    		 "СчетЗатрат");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеЗатрат, "КорПодразделениеОрганизации");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	
	Для каждого СтрокаМатериалов Из ТаблицаМатериалов Цикл
		СтрокаМатериалов.СчетУчета = СтрокаМатериалов.Счет;
		СтрокаСубконто = СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Если НЕ СтрокаСубконто = Неопределено Тогда
			СтрокаМатериалов["КорСубконтоСписания" + (СчетЗатрат.ВидыСубконто.Индекс(СтрокаСубконто)+1)] = СтрокаМатериалов.НоменклатурнаяГруппа;
		КонецЕсли;
		СтрокаСубконто = СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Если НЕ СтрокаСубконто = Неопределено Тогда
			СтрокаМатериалов["КорСубконтоСписания" + (СчетЗатрат.ВидыСубконто.Индекс(СтрокаСубконто)+1)] = СтрокаМатериалов.СтатьяЗатрат;
		КонецЕсли;
	КонецЦикла;
    				
	Если СтруктураШапкиДокумента.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость Тогда
		ТаблицаМатериалов.Колонки.Добавить("СчетСписанияНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаМатериалов.Колонки.Добавить("СубконтоСписанияНДС1");
		ТаблицаМатериалов.Колонки.Добавить("СубконтоСписанияНДС2");
		ТаблицаМатериалов.Колонки.Добавить("СубконтоСписанияНДС3");
		Если СтруктураШапкиДокумента.ДляСписанияНДСИспользоватьСчетИАналитикуУчетаЗатрат Тогда
			ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетЗатрат, "СчетСписанияНДС");
			Для каждого СтрокаМатериалов Из ТаблицаМатериалов Цикл
				СтрокаМатериалов.СубконтоСписанияНДС1 = СтрокаМатериалов.КорСубконтоСписания1;
				СтрокаМатериалов.СубконтоСписанияНДС2 = СтрокаМатериалов.КорСубконтоСписания2;
				СтрокаМатериалов.СубконтоСписанияНДС3 = СтрокаМатериалов.КорСубконтоСписания3;
			КонецЦикла;
		Иначе
			ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетСписанияНДС, 	  "СчетСписанияНДС");
			ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоСписанияНДС1, "СубконтоСписанияНДС1");
			ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоСписанияНДС2, "СубконтоСписанияНДС2");
			ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоСписанияНДС3, "СубконтоСписанияНДС3");
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ТаблицаМатериалов;
	
КонецФункции

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоОтходам, ТаблицаПоМатериалам, Отказ, Заголовок)

	Если мУчетнаяПолитика.УпрощенныйУчетНДС Тогда
		Возврат;
	ИначеЕсли Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	// Оприходование продукции и возвратных отходов для НДС
	Если ТаблицаПоПродукции.Количество() <> 0 Или ТаблицаПоОтходам.Количество() <> 0 Тогда
	
		//////////////////////////////////////////////////////////////////////
		// При необходимости, отражаем в регистре партионного учета для НДС
	    ТаблицаДвиженийНДСПартии = Движения.НДСПоПриобретеннымЦенностям;
		
		ТаблицаДляНДСПартии = ТаблицаПоПродукции.Скопировать();
		ТаблицаДляНДСПартии.Колонки.Добавить("СчетФактура");// Значение не заполняется, только количественный учет
		ТаблицаДляНДСПартии.Колонки.Добавить("ВидЦенности");
		ТаблицаДляНДСПартии.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.Товары,"ВидЦенности");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОтходам, ТаблицаДляНДСПартии);
		Для Каждого СтрокаТаблицыПартий ИЗ ТаблицаДляНДСПартии Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицыПартий.ВидЦенности) Тогда
				СтрокаТаблицыПартий.ВидЦенности = Перечисления.ВидыЦенностей.Материалы;
			КонецЕсли;
		КонецЦикла;
		ТаблицаДляНДСПартии.Колонки.Счет.Имя = "СчетУчетаЦенности";
		
		//СчетФактура, ВидЦенности, СчетУчетаЦенности, СчетУчетаНДС, СтавкаНДС
		УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураШапкиДокумента,ТаблицаДляНДСПартии, ТаблицаДвиженийНДСПартии, Отказ);
		// При необходимости, отражаем в регистре партионного учета для НДС
		//////////////////////////////////////////////////////////////////////
	
	КонецЕсли;
	
	Если Не ИспользоватьМатериалы Тогда
		Возврат;
	ИначеЕсли ТаблицаПоМатериалам.Количество() = 0 Тогда
		//Отработка по партиям НДС не требуется. 
		Возврат;
	КонецЕсли; 
	
	/////////////////////////////////////////////////////////////////////////////////
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	ТаблицаНДСПартииСписания = УчетНДС.ПодготовитьТаблицуСписанияПартийДляНДС(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	/////////////////////////////////////////////////////////////////////////////////
	
	Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		//Партии не найдены или отражение в партионном учете НДС не производится.
		//Дальнейшая обработка не требуется
		Возврат;
	КонецЕсли; 
	
	ТаблицаДвиженийПартии = Движения.НДСПоПриобретеннымЦенностям.Выгрузить();
	Движения.НДСПоПриобретеннымЦенностям.мПериод          = СтруктураШапкиДокумента.Дата;
	
	ТаблицаДвиженийПартии.Очистить();
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
	УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии, Истина, Движения.Хозрасчетный, Заголовок, Движения);
	УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии, Ложь, Движения.Хозрасчетный, Заголовок, Движения);
	
	Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
		Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
		Движения.НДСПоПриобретеннымЦенностям.ВыполнитьПриход();
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по партиям - отразить непосредственное списание.
	ТаблицаДвиженийПартии.Очистить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
	Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
	Движения.НДСПоПриобретеннымЦенностям.ВыполнитьРасход();
	// НДС по партиям - отразить непосредственное списание.
	/////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по косвенным расходам - движения по регистру НДСКосвенныеРасходы для
	// статей с распределением расходов или с расходами не относящимися к ЕНВД
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, Движения, Отказ);	
	// НДС по косвенным расходам 
	/////////////////////////////////////////////////////////////////////////////////
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения"
////
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	// Проверка заполнены ли все необходимые реквизиты шапки.
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверка заполнены ли все необходимые реквизиты табличной части.
	ПроверкаРеквизитовТЧ(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация);

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура",        "Номенклатура");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа","НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Услуга"      ,        "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"  ,        "Количество");
	СтруктураПолей.Вставить("СуммаПлановая",       "СуммаПлановая");
	СтруктураПолей.Вставить("Счет" ,               "Счет");
		
	РезультатЗапросаПоТаблицеПродукция = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей);
	ТаблицаПоПродукции = РезультатЗапросаПоТаблицеПродукция.Выгрузить();
	
	СтруктураПолейУслуг = Новый Структура();
	СтруктураПолейУслуг.Вставить("Номенклатура",        "Номенклатура");
	СтруктураПолейУслуг.Вставить("НоменклатурнаяГруппа","НоменклатурнаяГруппа");
	СтруктураПолейУслуг.Вставить("Количество",          "Количество");
	СтруктураПолейУслуг.Вставить("СуммаПлановая",       "СуммаПлановая");
	СтруктураПолейУслуг.Вставить("Услуга",              "Номенклатура.Услуга");
	СтруктураПолейУслуг.Вставить("ПодразделениеЗатрат"  , "ПодразделениеЗатрат");
	СтруктураПолейУслуг.Вставить("Счет"                 , "Счет");
	СтруктураПолейУслуг.Вставить("Субконто1"            , "Субконто1");
	СтруктураПолейУслуг.Вставить("Субконто2"            , "Субконто2");
	СтруктураПолейУслуг.Вставить("Субконто3"            , "Субконто3");
	
	РезультатЗапросаПоТаблицеУслуги = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолейУслуг);
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоТаблицеУслуги, СтруктураШапкиДокумента);
	
	СтруктураПолейОтходов = Новый Структура();
	СтруктураПолейОтходов.Вставить("Номенклатура",        "Номенклатура");
	СтруктураПолейОтходов.Вставить("НоменклатурнаяГруппа","НоменклатурнаяГруппа");
	СтруктураПолейОтходов.Вставить("Услуга"      ,        "Номенклатура.Услуга");
	СтруктураПолейОтходов.Вставить("Сумма",               "Сумма");
	СтруктураПолейОтходов.Вставить("Количество"  ,        "Количество");
	СтруктураПолейОтходов.Вставить("Счет"                 , "Счет");
	СтруктураПолейОтходов.Вставить("СтатьяЗатрат"         , "СтатьяЗатрат");
	СтруктураПолейОтходов.Вставить("ОтражениеВУСН"        , "ОтражениеВУСН");
	
	РезультатЗапросаПоТаблицеОтходам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратныеОтходы", СтруктураПолейОтходов);
	ТаблицаПоОтходам = РезультатЗапросаПоТаблицеОтходам.Выгрузить();
	
	Если ИспользоватьМатериалы Тогда
			
		СтруктураПолейМатериалы = Новый Структура();
		
		СтруктураПолейМатериалы.Вставить("Номенклатура", 		  "Номенклатура");
		СтруктураПолейМатериалы.Вставить("Счет", 			      "Счет");
		СтруктураПолейМатериалы.Вставить("КоличествоМест",		  "КоличествоМест");
		СтруктураПолейМатериалы.Вставить("ЕдиницаИзмерения",		"ЕдиницаИзмерения");
		СтруктураПолейМатериалы.Вставить("Коэффициент",			  "Коэффициент");
		СтруктураПолейМатериалы.Вставить("Количество", 			  "Количество");
		СтруктураПолейМатериалы.Вставить("ОтражениеВУСН", 		  "ОтражениеВУСН");
		СтруктураПолейМатериалы.Вставить("СтатьяЗатрат", 		  "СтатьяЗатрат");
		СтруктураПолейМатериалы.Вставить("ДокументОприходования", "ДокументОприходования");
		СтруктураПолейМатериалы.Вставить("Себестоимость", 		  "Себестоимость");
		СтруктураПолейМатериалы.Вставить("НоменклатурнаяГруппа",  "НоменклатурнаяГруппа");
		СтруктураПолейМатериалы.Вставить("Услуга",                "Номенклатура.Услуга");
		СтруктураПолейМатериалы.Вставить("НомерСтроки", 		  "НомерСтроки");
		
		// Выгрузка табличной части "Материалы" в таблицу значений. В ПолученоПродукции получим общую плановую стоимость по номенклатурным группам
		ПолученоПродукции = Неопределено;
		РезультатЗапросаПоТаблицеМатериалы = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолейМатериалы);
		ТаблицаМатериалов = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТаблицеМатериалы, СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоУслугам, ТаблицаПоОтходам, ПолученоПродукции, Отказ);
		
		// Проверим, что в табличной части материалов не указаны услуги.
		УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Материалы", ТаблицаМатериалов, Отказ, Заголовок);
		
	КонецЕсли;
	
	// Проверим, что в табличной части продукция не указаны услуги.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Продукция", ТаблицаПоПродукции, Отказ, Заголовок);
	
	// Проверим, что в табличной части Услуги не указаны счета учета МПЗ
	ПроверитьЧтоНетСчета43(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Проверим, что в табличной части услуги не указаны товары.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Проверим, что в табличной части Услуги не указаны счета учета МПЗ
	ПроверитьЗаполнениеПодразделений(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Проверим, что в табличной части отходы не указаны услуги.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратныеОтходы", ТаблицаПоОтходам, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда // Формирование движений регистров
				
		Счет40 = ?(ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация, "Бух").СпособУчетаВыпускаГотовойПродукции = Перечисления.СпособыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40, Истина, Ложь);
		
		Операция = Движения["Хозрасчетный"];
		ДвиженияВыпускПродукцииУслуг = Движения["ВыпускПродукцииУслуг"];
		ТаблицаДвиженийВыпуск        = ДвиженияВыпускПродукцииУслуг.Выгрузить();

		ДвиженияПоТабличнойЧастиПродукция(ТаблицаПоПродукции, СтруктураШапкиДокумента, Счет40);
		ДвиженияПоТабличнойЧастиУслуги(   ТаблицаПоУслугам, СтруктураШапкиДокумента, Счет40);
		
		Если Продукция.Количество() <> 0 Или Услуги.Количество() <> 0 Тогда
			
			ДвиженияВыпускПродукцииУслуг.ДобавитьДвижение();
			
		КонецЕсли;
		
		ДвиженияПоТабличнойЧастиОтходы(ТаблицаПоОтходам, СтруктураШапкиДокумента);
		
		Если ИспользоватьМатериалы Тогда
			
			// Списание регистров налогового партионного учета
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаМатериалов, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, , "Списание материалов в производство");
			
			// {УчетДоходовИРасходовИП
			//Списание по партиям в налоговом учете предпринимателя
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
				СтоимостьПродукции = ДоходыИРасходыПредпринимателя.СписаниеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, мУчетнаяПолитика, 2, ТаблицаМатериалов, "НоменклатурнаяГруппаПродукции", "Счет", "СчетЗатратИП", "СтатьяЗатрат",, Отказ);
				
				ПолученоПродукции.Свернуть("Продукция,НоменклатурнаяГруппаПродукции,Счет", "Количество");
				ДоходыИРасходыПредпринимателя.ПоступлениеПродукции(ЭтотОбъект, СтруктураШапкиДокумента, мУчетнаяПолитика, ПолученоПродукции, "Счет",, "НоменклатурнаяГруппаПродукции", "Продукция", СтоимостьПродукции);
			КонецЕсли;
			// }УчетДоходовИРасходовИП
			
		КонецЕсли;
		
		ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоОтходам, ТаблицаМатериалов, Отказ, Заголовок);

		// Отражение в партионном учете НДС
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоОтходам, ТаблицаМатериалов, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТаблицеУслуги, СтруктураШапкиДокумента)
	
	ТаблицаУслуг = РезультатЗапросаПоТаблицеУслуги.Выгрузить();
	
	УслугиВСуммовомВыражении = (ВариантВыраженияВнутреннихУслуг = Перечисления.ВариантВыраженияВнутреннихУслуг.ВПлановыхЦенах);
	
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		
		Если УслугиВСуммовомВыражении Тогда
			СтрокаТаблицы.Количество = 0;
		Иначе
			СтрокаТаблицы.СуммаПлановая = 0;
		КонецЕсли;
		
		
	КонецЦикла;
	
	Возврат ТаблицаУслуг;
	
КонецФункции

Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		// Заполнение шапки
		Комментарий = Основание.Комментарий;
		Организация = Основание.Организация;
		Ответственный = Основание.Ответственный;
		
		Для Каждого ТекСтрокаУслуги Из Основание.Услуги Цикл
			НоваяСтрока = Продукция.Добавить();
			НоваяСтрока.Количество = ТекСтрокаУслуги.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаУслуги.Номенклатура;
			НоваяСтрока.ПлановаяСтоимость = ТекСтрокаУслуги.ПлановаяСтоимость;
			НоваяСтрока.Спецификация = ТекСтрокаУслуги.Спецификация;
			НоваяСтрока.СуммаПлановая = ТекСтрокаУслуги.СуммаПлановая;
			НоваяСтрока.Счет = ТекСтрокаУслуги.СчетУчета;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, ложь);

КонецПроцедуры


