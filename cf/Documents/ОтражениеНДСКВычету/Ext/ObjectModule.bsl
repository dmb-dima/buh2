Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента)

	Если ЗаполнятьБУ Тогда

		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокаТЧ.СчетЗатрат  = СчетаУчета.СчетУчетаДоп;
		Иначе
			СтрокаТЧ.СчетЗатрат   = СчетаУчета.СчетУчета;
			СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			СтрокаТЧ.Субконто1	 = СчетаУчета.Субконто1;
			СтрокаТЧ.Субконто2   = СчетаУчета.Субконто2;
			СтрокаТЧ.Субконто3   = СчетаУчета.Субконто3;
		КонецЕсли;

	Иначе

		СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;

	КонецЕсли; // Если ЗаполнятьБУ = Истина Тогда

КонецПроцедуры // ЗаполнитьСчетаБУ()

// Заполняет счета БУ и НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в строке табличной части Объекты строительства
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиОбъектовСтроительства(СтрокаТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОбъектовСтроительства(Организация, СтрокаТабЧасти.Номенклатура);

	Если ЗаполнятьБУ Тогда
		СтрокаТабЧасти.СчетЗатрат = СчетаУчета.СчетУчета;
		СтрокаТабЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;

	Иначе
		СтрокаТабЧасти.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТабЧасти.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиОбъектовСтроительства()

// Заполняет ТЧ Товары и Услуги по расчетному документу
//
Процедура ЗаполнитьПоРасчетномуДокументу(РежимДобавления) Экспорт

	Перем ВидыЦенностейПоСчетамУчета;
	
	Если НЕ ЗначениеЗаполнено(РасчетныйДокумент) тогда
		Возврат;
	КонецЕсли;

	Если ТоварыИУслуги.Количество() > 0 И Не РежимДобавления Тогда

		#Если Клиент Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 
		#КонецЕсли

		ТоварыИУслуги.Очистить();

	КонецЕсли;
	
	ТаблицаДокумента = УчетНДС.ПолучитьТаблицуДокументаНДС(РасчетныйДокумент, , Ложь);
	Если ТаблицаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДокумента.Колонки.Найти("СуммаБезНДСВал") <> Неопределено Тогда
		Если ТаблицаДокумента.Колонки.Найти("Сумма") <> Неопределено Тогда
			ТаблицаДокумента.Колонки.Удалить("Сумма");
		КонецЕсли;
		ТаблицаДокумента.Колонки.СуммаБезНДСВал.Имя = "Сумма";
		Если ТаблицаДокумента.Колонки.Найти("НДСВал") <> Неопределено Тогда
			ТаблицаДокумента.Колонки.НДСВал.Имя = "СуммаНДС";
		Иначе
			ТаблицаДокумента.Колонки.НДС.Имя = "СуммаНДС";
		КонецЕсли;
	ИначеЕсли ТаблицаДокумента.Колонки.Найти("СуммаБезНДС") <> Неопределено Тогда
		Если ТаблицаДокумента.Колонки.Найти("Сумма") <> Неопределено Тогда
			ТаблицаДокумента.Колонки.Удалить("Сумма");
		КонецЕсли;
		ТаблицаДокумента.Колонки.СуммаБезНДС.Имя = "Сумма";
		Если ТаблицаДокумента.Колонки.Найти("НДС") <> Неопределено Тогда
			ТаблицаДокумента.Колонки.НДС.Имя = "СуммаНДС";
		КонецЕсли;
	ИначеЕсли ТаблицаДокумента.Колонки.Найти("СуммаНДС") = Неопределено Тогда
		ТаблицаДокумента.Колонки.НДС.Имя = "СуммаНДС";
	КонецЕсли;	
	
	Если ТаблицаДокумента.Колонки.Найти("СчетЗатрат") = Неопределено И ТаблицаДокумента.Колонки.Найти("СчетУчета") <> Неопределено Тогда
		ТаблицаДокумента.Колонки.СчетУчета.Имя = "СчетЗатрат";		
	КонецЕсли;
	
	ТоварыИУслуги.Загрузить(ТаблицаДокумента);
	ТоварыИУслуги.Свернуть("ВидЦенности, Номенклатура, СчетЗатрат, Субконто1, Субконто2, Субконто3, СчетУчетаНДС, СтавкаНДС, 
							|НомерГТД, СтранаПроисхождения, Событие", "Количество, Цена, Сумма, СуммаНДС");
							
	ПересчитыватьЗаполненнуюЦену = не (ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", РасчетныйДокумент.Метаданные())
			И РасчетныйДокумент.СуммаВключаетНДС = СуммаВключаетНДС);
	Для Каждого СтрокаДокумента Из ТоварыИУслуги Цикл
		
		Если СуммаВключаетНДС Тогда
			СтрокаДокумента.Сумма = СтрокаДокумента.Сумма + СтрокаДокумента.СуммаНДС;
		КонецЕсли;
		Если (СтрокаДокумента.Цена = 0 или ПересчитыватьЗаполненнуюЦену) 
			И СтрокаДокумента.Сумма <> 0 
			Тогда
			Если СтрокаДокумента.Количество = 0 Тогда
				СтрокаДокумента.Количество = 1;
			КонецЕсли;
			СтрокаДокумента.Цена = СтрокаДокумента.Сумма / СтрокаДокумента.Количество;
		КонецЕсли;
		
		СтрокаДокумента.Событие = ?(ИспользоватьДокументРасчетовКакСчетФактуру, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком);
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ВидЦенности) Тогда
			СтрокаДокумента.ВидЦенности = УчетНДС.ОпределитьВидЦенности(СтрокаДокумента.Номенклатура, СтрокаДокумента.СчетЗатрат, 
																		ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.ПоступлениеДопРасходов"), ДоговорКонтрагента.УчетАгентскогоНДС, ДоговорКонтрагента.ВидАгентскогоДоговора, ВидыЦенностейПоСчетамУчета);
		КонецЕсли;
																	
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСуммуДокументаСНДС() Экспорт
	
	Возврат ТоварыИУслуги.Итог("Сумма") + ?(Не СуммаВключаетНДС, ТоварыИУслуги.Итог("СуммаНДС"), 0);
	
КонецФункции

Функция ПолучитьНДСДокумента() Экспорт
	
	Возврат ТоварыИУслуги.Итог("СуммаНДС");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураОбязательныхПолей = Новый Структура("Организация");
	Если Не (СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру И УчетНДС.ДляСчетаФактурыНеТребуетсяКонтрагент(СтруктураШапкиДокумента.РасчетныйДокумент)) Тогда 
		СтруктураОбязательныхПолей.Вставить("Контрагент");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру Тогда 
		СтруктураОбязательныхПолей.Вставить("РасчетныйДокумент");
	КонецЕсли;
	Если СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста Тогда
		СтруктураОбязательныхПолей.Вставить("КорректируемыйПериод");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Дополняет структуру шапки документа значениями, требуемыми для проведения
//
Процедура ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента, Отказ)
	
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Ложь);
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
	СтруктураШапкиДокумента.Вставить("НалоговыйАгентПоОплате", СтруктураШапкиДокумента.ДоговорКонтрагента.НалоговыйАгентПоОплате);
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС, УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	Если СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру И ЗначениеЗаполнено(СтруктураШапкиДокумента.РасчетныйДокумент) Тогда
		СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(СтруктураШапкиДокумента.РасчетныйДокумент, "СчетФактураПолученный", Новый Структура("Проведен", Истина));
		Если Не ЗначениеЗаполнено(СчетФактура) Тогда
			СтруктураШапкиДокумента.ПредъявленСчетФактура = Ложь;
			СтруктураШапкиДокумента.НДСПредъявленКВычету = Ложь;
		Иначе
			СтруктураШапкиДокумента.ПредъявленСчетФактура = Истина;
			СтруктураШапкиДокумента.НДСПредъявленКВычету = Не СчетФактура.НДСПредъявленКВычету;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("Период");
	ТаблицаТоваров.Колонки.Добавить("Активность");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("Поставщик");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("СчетФактура");
	ТаблицаТоваров.Колонки.Добавить("ДатаОплаты",  ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаТоваров.Колонки.Добавить("ДокументОплаты");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("ЗаписьДополнительногоЛиста", Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("КорректируемыйПериод",  ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаТаблицы.Поставщик = СтруктураШапкиДокумента.Контрагент;
		СтрокаТаблицы.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		Если СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
			Если ТипЗнч(СтруктураШапкиДокумента.РасчетныйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") 
				И СтруктураШапкиДокумента.РасчетныйДокумент.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс 
				И СтруктураШапкиДокумента.РасчетныйДокумент.ДокументыОснования.Количество() <> 0 Тогда
				СтрокаТаблицы.СчетФактура = СтруктураШапкиДокумента.РасчетныйДокумент.ДокументыОснования[0].ДокументОснование;
			ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.РасчетныйДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") 
				И СтруктураШапкиДокумента.РасчетныйДокумент.НаАванс 
				И СтруктураШапкиДокумента.РасчетныйДокумент.ДокументыОснования.Количество() <> 0 Тогда
				СтрокаТаблицы.СчетФактура = СтруктураШапкиДокумента.РасчетныйДокумент.ДокументыОснования[0].ДокументОснование;
			ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.РасчетныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
				И Не СтруктураШапкиДокумента.РасчетныйДокумент.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
				СтрокаТаблицы.СчетФактура = СтруктураШапкиДокумента.РасчетныйДокумент.Сделка;
			Иначе
				СтрокаТаблицы.СчетФактура = СтруктураШапкиДокумента.РасчетныйДокумент
			КонецЕсли;
		Иначе
			СтрокаТаблицы.СчетФактура = СтруктураШапкиДокумента.Ссылка;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу 
			И (СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			Или СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0) Тогда
			СтрокаТаблицы.ДатаОплаты = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
		СтрокаТаблицы.ЗаписьДополнительногоЛиста = СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста;
		Если СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = СтруктураШапкиДокумента.КорректируемыйПериод;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
			Если СтруктураШапкиДокумента.ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				СтрокаТаблицы.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
																					СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																					СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
																					СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
				СтрокаТаблицы.НДС = Окр(УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма, Истина, СтруктураШапкиДокумента.СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС)), 2);
			КонецЕсли;
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(СтруктураШапкиДокумента.СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Событие) Тогда
			СтрокаТаблицы.Событие = ?(СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету,
										Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком);
		КонецЕсли;
		
		//Если есть вычеты по объектам строительства, то в этих строках сохраняем значение номенклатуры для проводки
		Если СтрокаТаблицы.СчетУчетаНДС.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства) = Неопределено Тогда
			СтрокаТаблицы.Номенклатура = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		ТаблицаТоваров.Свернуть("Период, Активность, Организация, ВидЦенности, Поставщик, ДоговорКонтрагента, Событие, СчетФактура, СтавкаНДС, СчетУчетаНДС, ДатаОплаты, ДокументОплаты, ЗаписьДополнительногоЛиста, КорректируемыйПериод, Номенклатура", "СуммаБезНДС, НДС");
	КонецЕсли;
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Функция ПодготовитьТаблицуДокументовОплаты(РезультатЗапросаПоДокументамОплаты, СтруктураШапкиДокумента)

	ТаблицаДокументовОплаты = РезультатЗапросаПоДокументамОплаты.Выгрузить();
	ТаблицаДокументовОплаты.Колонки.Добавить("Период");
	ТаблицаДокументовОплаты.Колонки.Добавить("Активность");
	ТаблицаДокументовОплаты.Колонки.Добавить("Организация");
	ТаблицаДокументовОплаты.Колонки.Добавить("Поставщик");
	ТаблицаДокументовОплаты.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаДокументовОплаты.Колонки.Добавить("Событие");
	ТаблицаДокументовОплаты.Колонки.Добавить("СчетФактура");
	ТаблицаДокументовОплаты.Колонки.Добавить("ДокументРасчетов");
	ТаблицаДокументовОплаты.Колонки.Добавить("ДатаДокументаРасчетов");
	ТаблицаДокументовОплаты.Колонки.Добавить("ЗаписьДополнительногоЛиста");
	ТаблицаДокументовОплаты.Колонки.Добавить("КорректируемыйПериод");
	ТаблицаДокументовОплаты.Колонки.Добавить("СуммаБУ");
	
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,       "Организация");
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент,        "Поставщик");
	Если СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		Если ТипЗнч(СтруктураШапкиДокумента.РасчетныйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") 
			И СтруктураШапкиДокумента.РасчетныйДокумент.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс 
			И СтруктураШапкиДокумента.РасчетныйДокумент.ДокументыОснования.Количество() <> 0 Тогда
			ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.РасчетныйДокумент.ДокументыОснования[0].ДокументОснование, "СчетФактура");
		ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.РасчетныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
			И Не СтруктураШапкиДокумента.РасчетныйДокумент.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
			ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.РасчетныйДокумент.Сделка, "СчетФактура");
		Иначе
			ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.РасчетныйДокумент, "СчетФактура");
		КонецЕсли;
	Иначе
		ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "СчетФактура");
	КонецЕсли;
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста, "ЗаписьДополнительногоЛиста");
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.КорректируемыйПериод, "КорректируемыйПериод");
	
	Если СтруктураШапкиДокумента.ДоговорКонтрагента.УчетАгентскогоНДС
		И СтруктураШапкиДокумента.ДоговорКонтрагента.НалоговыйАгентПоОплате Тогда
		ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");			
	КонецЕсли;
	
	ТаблицаДокументовОплаты.ЗагрузитьКолонку(ТаблицаДокументовОплаты.ВыгрузитьКолонку("ДокументОплаты"), "ДокументРасчетов");
	ТаблицаДокументовОплаты.ЗагрузитьКолонку(ТаблицаДокументовОплаты.ВыгрузитьКолонку("ДатаОплаты"), "ДатаДокументаРасчетов");
	ТаблицаДокументовОплаты.ЗагрузитьКолонку(ТаблицаДокументовОплаты.ВыгрузитьКолонку("СуммаОплаты"), "СуммаБУ");
	
	ТаблицаДокументовОплаты.Свернуть("Период, Активность, Организация, Поставщик, ДоговорКонтрагента, Событие, СчетФактура, ДокументРасчетов, ДатаОплаты, ДатаДокументаРасчетов, ДокументОплаты, ЗаписьДополнительногоЛиста, КорректируемыйПериод", "СуммаОплаты, СуммаБУ");
	
	Возврат ТаблицаДокументовОплаты;

КонецФункции  //ПодготовитьТаблицуДокументовОплаты()

Процедура РаспределитьОплатыПоТаблицеТоваров(ТаблицаПоТоварам, ТаблицаПоДокументамОплаты)
	
	СтрокиКУдалению = Новый Массив;
	ТаблицаПоТоварам.Колонки.Добавить("СуммаОплаты", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Для Каждого СтрокаДокументОплаты Из ТаблицаПоДокументамОплаты Цикл
		
		Если СтрокаДокументОплаты.СуммаОплаты = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаТовар Из ТаблицаПоТоварам Цикл
			
			Если УчетНДС.ВидыЦенностиНалоговыйАгентПоступление().Найти(СтрокаТовар.ВидЦенности) <> Неопределено Тогда
				СуммаПоСтроке = СтрокаТовар.СуммаБезНДС;
			Иначе
				СуммаПоСтроке = СтрокаТовар.СуммаБезНДС + СтрокаТовар.НДС;
			КонецЕсли;
			
			Если СуммаПоСтроке = СтрокаТовар.СуммаОплаты Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаОплаты = Мин(СтрокаДокументОплаты.СуммаОплаты, СуммаПоСтроке - СтрокаТовар.СуммаОплаты);
			СтрокаТовар.СуммаОплаты = СтрокаТовар.СуммаОплаты + СуммаОплаты;
			СтрокаДокументОплаты.СуммаОплаты = СтрокаДокументОплаты.СуммаОплаты - СуммаОплаты;
			СтрокаТовар.ДатаОплаты = СтрокаДокументОплаты.ДатаОплаты;
			СтрокаТовар.ДокументОплаты = СтрокаДокументОплаты.ДокументОплаты;
			
		КонецЦикла;
		
		Если СтрокаДокументОплаты.СуммаОплаты = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаДокументОплаты);
		КонецЕсли;			
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаПоДокументамОплаты.Удалить(СтрокаКУдалению);
	КонецЦикла;		
	
	ТаблицаПоТоварам.Колонки.Удалить("СуммаОплаты");
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ТоварыИУслуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("СтавкаНДС"+?(СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу,"",", Номенклатура, СчетЗатрат"));
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["ТоварыИУслуги"].Представление();
	
	Для Каждого СтрокаТЧ Из ТоварыИУслуги Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """ + СокрЛП(СтрокаТЧ.НомерСтроки) +
		""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
			
		Если ФормироватьПроводки И Не СтруктураШапкиДокумента.НДСВключенВСтоимость 
			И Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДС) 
			И СтрокаТЧ.СуммаНДС <> 0 
			Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			
		КонецЕсли;
			
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "ДокументыОплаты".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыОплаты(ТаблицаПоДокументамОплаты, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		// Укажем, что надо проверить:
		СтруктураОбязательныхПолей = Новый Структура("ДатаОплаты");
		
		// Теперь вызовем общую процедуру проверки.
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОплаты", СтруктураОбязательныхПолей, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты, Отказ, Заголовок)

	Если (Не СтруктураШапкиДокумента.УпрощенныйУчетНДС Или 
			(СтруктураШапкиДокумента.НДСПредъявленКВычету 
			Или СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру))
		И СтруктураШапкиДокумента.ФормироватьПроводки Тогда
		ПроводкиБУ = Движения.Хозрасчетный; 
		Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			// Проводки по вычету в случае упрощенного учета НДС
			
			Если СтрокаТаблицы.НДС <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период      = СтруктураШапкиДокумента.Дата;

				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Вычет НДС" + ?(ПредъявленСчетФактура, " по сч.ф." + НомерВходящегоСчетаФактуры + " от " + Формат(ДатаВходящегоСчетаФактуры, "ДЛФ=Д"), "");

				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НДС; //68.02
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				
				Проводка.СчетКт      = СтрокаТаблицы.СчетУчетаНДС;
				
				Если Проводка.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные) <> Неопределено Тогда 
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"СФПолученные", СтрокаТаблицы.СчетФактура, Истина, Заголовок);
				КонецЕсли;	
				
				Если Проводка.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные) <> Неопределено Тогда 
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"СФВыданные", СтрокаТаблицы.СчетФактура, Истина, Заголовок);
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент, Истина);
				
				Если ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.ОбъектыСтроительства") 
					И Проводка.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства) <> Неопределено Тогда 
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтрокаТаблицы.Номенклатура, Истина, Заголовок);
				КонецЕсли;
				
				Проводка.Сумма       = СтрокаТаблицы.НДС;
				
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные 
				Или СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0 Тогда
				СтрокаТаблицы.СчетУчетаНДС = Неопределено;
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументамОплаты, ТаблицаПоТоварам);
		УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСПредъявленномуПоставщиком(СтруктураШапкиДокумента, ТаблицаПоТоварам, Движения, Отказ);

		Возврат;
		
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		
		// Прямая запись в книгу покупок
		ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.Выгрузить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений_НДСЗаписиКнигиПокупок);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументамОплаты, ТаблицаДвижений_НДСЗаписиКнигиПокупок);
		Для Каждого СтрокаДвижения Из ТаблицаДвижений_НДСЗаписиКнигиПокупок Цикл
			Если Не (СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
					Или СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
					Или СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент
					Или (УчетНДС.ВидыЦенностиНалоговыйАгентПоступление().Найти(СтрокаДвижения.ВидЦенности) <> Неопределено 
						И СтруктураШапкиДокумента.НалоговыйАгентПоОплате)) Тогда
				СтрокаДвижения.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.Дата;
		Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
		Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение();
	    Возврат;
		
	КонецЕсли; 
	
	ТаблицаПредъявленногоНДС = ТаблицаПоТоварам.Скопировать();
		
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, "ТаблицаПредъявленногоНДС", ТаблицаПоДокументамОплаты, Движения, Отказ);
			
КонецПроцедуры // ДвиженияПоРегистрам()	

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента, Отказ);
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты) Экспорт
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("НомерСтроки",  "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("ВидЦенности", 	"ВидЦенности");
	СтруктураПолей.Вставить("Сумма", 		"Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДС");
	СтруктураПолей.Вставить("СчетЗатрат"  , "СчетЗатрат");
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
	СтруктураПолей.Вставить("Субконто1"   , "Субконто1");
	СтруктураПолей.Вставить("Субконто2"   , "Субконто2");
	СтруктураПолей.Вставить("Субконто3"   , "Субконто3");
	СтруктураПолей.Вставить("Событие"   , 	"Событие");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ТоварыИУслуги", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	Если Не СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Ложь, мВалютаРегламентированногоУчета);
	КонецЕсли;
	
	СтруктураПолей.Очистить();
	СтруктураПолей.Вставить("ДокументОплаты", 	"ДокументОплаты");
	СтруктураПолей.Вставить("ДатаОплаты", 		"ДатаОплаты");
	СтруктураПолей.Вставить("СуммаОплаты", 		"СуммаОплаты");
	РезультатЗапросаПоДокументамОплаты = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыОплаты", СтруктураПолей);
	ТаблицаПоДокументамОплаты = ПодготовитьТаблицуДокументовОплаты(РезультатЗапросаПоДокументамОплаты, СтруктураШапкиДокумента);
		
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		
		РаспределитьОплатыПоТаблицеТоваров(ТаблицаПоТоварам, ТаблицаПоДокументамОплаты);
		
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание)

	Если (Основание = Неопределено) ИЛИ Не ЭтотОбъект.Метаданные().Реквизиты.РасчетныйДокумент.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") 
		И Основание.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		ВалютаДокумента = мВалютаРегламентированногоУчета;
		КурсВзаиморасчетов = 1;
		КратностьВзаиморасчетов = 1;
	КонецЕсли;
	
	УпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	Если УпрощенныйУчетНДС И Не ПрямаяЗаписьВКнигу Тогда
		ПрямаяЗаписьВКнигу = Истина;
		Если Не ФормироватьПроводки Тогда
			ФормироватьПроводки = Истина;
		КонецЕсли;			
	КонецЕсли;
	
	РасчетныйДокумент = Основание;

	ИспользоватьДокументРасчетовКакСчетФактуру = Истина;
	
	ЗаполнитьПоРасчетномуДокументу(Ложь);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты; 
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;


	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты);
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		ПроверитьЗаполнениеТабличнойЧастиДокументыОплаты(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
		
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты, Отказ, Заголовок);
		//УчетНДС.СинхронизацияПроведенияУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", СтруктураШапкиДокумента.УпрощенныйУчетНДС, Отказ)
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураПолученный", Ложь);

КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ТоварыИУслуги.Итог("Сумма") + ?(Не СуммаВключаетНДС, ТоварыИУслуги.Итог("СуммаНДС"), 0);
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = мВалютаРегламентированногоУчета;
	КонецЕсли; 
	
	Если Не ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		
		УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
		
		УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
		
	КонецЕсли;
		
	Если Не ПрямаяЗаписьВКнигу И ФормироватьПроводки Тогда
		ФормироватьПроводки = Ложь;
	КонецЕсли;

	Если (НДСВключенВСтоимость Или Не (ПредъявленСчетФактура Или ИспользоватьДокументРасчетовКакСчетФактуру)) И НДСПредъявленКВычету Тогда
		НДСПредъявленКВычету = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

