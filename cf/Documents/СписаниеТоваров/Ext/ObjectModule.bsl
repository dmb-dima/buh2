Перем мВалютаРегламентированногоУчета Экспорт;
Перем мУчетнаяПолитика Экспорт;
Перем мИспользоватьОборотнуюНоменклатуру Экспорт;
Перем мРазделятьПоСтавкамНДС Экспорт;
Перем мУчетВПродажныхЦенах Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьСписаниеТоваров()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад,
	|	Склад.Представление                                   КАК ПредставлениеСклада,
	// {ОбособленныеПодразделения
	|	ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	// }ОбособленныеПодразделения
	|	СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета ВалютаДокумента,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное                   КАК Товар,
	|		Номенклатура.Код                                  КАК Код,
	|		Номенклатура.Артикул                              КАК Артикул,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмерения.Представление                    КАК ЕдиницаИзмерения,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаХранения,
	|		Цена,
	|		Сумма
	|	),
	|ВозвратнаяТара.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное                   КАК Товар,
	|		Номенклатура.Код                                  КАК Код,
	|		Номенклатура.Артикул                              КАК Артикул,
	|		1,
	|		Количество,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаХранения,
	|		0,
	|		0
	|	)
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров,
	|	Константы
	|
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеТоваров_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Списание товаров");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыОрганизации");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
	ТабДокумент.Вывести(ОбластьМакета);

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;

	ТабДокумент.Присоединить(ОбластьДанных);

	ОбластьКолонкаТовар = Макет.Область("Товар");

	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ТаблицаСуммСписания = БухгалтерскийУчет.ПолучитьСуммуСписанияАктивов(ЭтотОБъект);
	ТаблицаСуммСписания.Индексы.Добавить("Номенклатура");
	
	Ном        = 0;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Ном = Ном + 1;
		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьНомера.Параметры.НомерСтроки = Ном;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Товар;
		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(ВыборкаСтрокТовары.Номенклатура, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			 ОбластьДанных.Параметры.Цена = 0;
			 ОбластьДанных.Параметры.Сумма = 0; 
		 Иначе
			 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			 ОбластьДанных.Параметры.Цена = Цена;
			 ОбластьДанных.Параметры.Сумма = Цена * ВыборкаСтрокТовары.Количество;
		 КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
	КонецЦикла;
	
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Ном = Ном + 1;
		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьНомера.Параметры.НомерСтроки = Ном;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьДанных.Параметры.Товар = ВыборкаСтрокТара.Товар + " (возвратная тара)";
		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(ВыборкаСтрокТара.Номенклатура, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			 ОбластьДанных.Параметры.Цена = 0;
			 ОбластьДанных.Параметры.Сумма = 0; 
		 Иначе
			 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			 ОбластьДанных.Параметры.Цена = Цена;
			 ОбластьДанных.Параметры.Сумма = Цена * ВыборкаСтрокТара.Количество;
		 КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ОбластьДанных.Параметры.Всего = ОбщегоНазначения.ФорматСумм(ТаблицаСуммСписания.Итог("Сумма"));
	ТабДокумент.Присоединить(ОбластьДанных);

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	                                         + ", на сумму " + ОбщегоНазначения.ФорматСумм(ТаблицаСуммСписания.Итог("Сумма"), Шапка.ВалютаДокумента);

	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(ТаблицаСуммСписания.Итог("Сумма"), Шапка.ВалютаДокумента);

	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСписаниеТоваров()

// Формирует унифицированную форму ТОРГ-16
//
// Возвращаемое значение:
//  Табличный документ - унифицированная форма ТОРГ-16
//
Функция ПечатьТОРГ16()
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер               КАК НомерДокумента,
	|	Дата                КАК ДатаДокумента,
	|	Организация,
	|	Организация         КАК Руководители,
	|	Склад,
	|	Склад.Представление КАК ПредставлениеСклада,
	// {ОбособленныеПодразделения
	|	ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	// }ОбособленныеПодразделения
	|	Основание           КАК Основание,
	|	СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное                   КАК ТоварНаименование,
	|		Номенклатура.Код                                  КАК ТоварКод,
	|		Количество,
	|		КоличествоМест,
	|		ЕдиницаИзмерения.Наименование                     КАК ЕдиницаИзмеренияМестНаименование,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Код          КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|		Цена                                              КАК Цена,
	|		Сумма                                             КАК Стоимость
	|	),
	|	ВозвратнаяТара.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное                   КАК ТоварНаименование,
	|		Номенклатура.Код                                  КАК ТоварКод,
	|		Количество,
	|		1,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаХранения,
	|		0,
	|		0
	|	)
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров, Константы
	|
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ТекущийДокумент";
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Код","Номенклатура.Артикул");
	КонецЕсли;
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Макет       = ПолучитьОбщийМакет("ТОРГ16");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеТоваров_ТОРГ16";

	// Выводим общие реквизиты шапки
	ОписаниеОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ОбластьМакета       = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДатаДокумента            = Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(ОписаниеОрганизации);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = ОписаниеОрганизации.КодПоОКПО;
	
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	
	Руководитель = Руководители.РуководительПредставление;
	Бухгалтер    = Руководители.ГлавныйБухгалтерПредставление;
	ОбластьМакета.Параметры.ФИОРуководителя = Руководитель;

	
	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 11;
	СтрокПодвала    = 0;
	НомерСтраницы   = 1;
	Ном             = 0;

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	КоличествоСтрок  = ВыборкаСтрокТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыПервогоЛиста");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПервогоЛиста");
	// Поиск сумм списания активов для заполнения Цены и Суммы
	ТаблицаСуммСписания = БухгалтерскийУчет.ПолучитьСуммуСписанияАктивов(ЭтотОБъект);
	ТаблицаСуммСписания.Индексы.Добавить("Номенклатура");

	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Ном = Ном + 1;

		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ИтогоСтоимостьПоСтранице = 0;
			НомерСтраницы            = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.ДатаСписанияТовара = Шапка.ДатаДокумента;
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;
	ВыборкаСтрокТара = Шапка.ВозвратнаяТара.Выбрать();
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Ном = Ном + 1;

		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ИтогоСтоимостьПоСтранице = 0;
			НомерСтраницы            = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьМакета.Параметры.ДатаСписанияТовара = Шапка.ДатаДокумента;
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	СтрокНаСтранице = 27;
	СтрокШапки      = 5;
	СтрокПодвала    = 11;
	НомерСтраницы   = 1;
	Ном             = 0;

	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	НомерСтраницы    = НомерСтраницы + 1;
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыВторогоЛиста");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	ИтогоСтоимость = 0;

	// Выводим многострочную часть документа
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаВторогоЛиста");
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Ном = Ном + 1;

		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ИтогоСтоимостьПоСтранице = 0;
			НомерСтраницы            = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		
		КоличествоМест = ?(ВыборкаСтрокТовары.КоличествоМест = 0, ВыборкаСтрокТовары.Количество, ВыборкаСтрокТовары.КоличествоМест);
		ОбластьМакета.Параметры.КоличествоМест = КоличествоМест;
		
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование;
		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(ВыборкаСтрокТовары.Номенклатура, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			 ОбластьМакета.Параметры.Цена = 0;
			 ОбластьМакета.Параметры.Стоимость = 0;
		 Иначе
			 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			 ОбластьМакета.Параметры.Цена = Цена;
			 ОбластьМакета.Параметры.Стоимость = Цена * ВыборкаСтрокТовары.Количество;
		 КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по документу
		ИтогоСтоимость = ИтогоСтоимость + ОбластьМакета.Параметры.Стоимость;

	КонецЦикла;
	ВыборкаСтрокТара = Шапка.ВозвратнаяТара.Выбрать();
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Ном = Ном + 1;
		
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ИтогоСтоимостьПоСтранице = 0;
			НомерСтраницы            = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТара.ТоварНаименование + " (возвратная тара)";
		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(ВыборкаСтрокТара.Номенклатура, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			 ОбластьМакета.Параметры.Цена = 0;
			 ОбластьМакета.Параметры.Стоимость = 0; 
		 Иначе
			 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			 ОбластьМакета.Параметры.Цена = Цена;
			 ОбластьМакета.Параметры.Стоимость = Цена * ВыборкаСтрокТара.Количество;
		 КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по документу
		ИтогоСтоимость = ИтогоСтоимость + ОбластьМакета.Параметры.Стоимость;
	КонецЦикла;

	// Выводим итоги по документу в общем
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Итого = ИтогоСтоимость;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.СуммаСписанияПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСтоимость, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ16()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Ведомость" Тогда
		
		ТабДокумент = ПечатьСписаниеТоваров();
		
	ИначеЕсли ИмяМакета = "ТОРГ16" тогда
		
		ТабДокумент = ПечатьТОРГ16();
		
	КонецЕсли; 
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Ведомость,ТОРГ16","Акт списания товаров","ТОРГ-16 (Акт о списании товаров)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Процедура выполняет заполнение табличной части по инвентаризации товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.СчетУчета,
	|	Док.Ссылка.Склад             КАК Склад,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			СУММА(ВложенныйЗапрос.Количество)
	|	КОНЕЦ КАК КоличествоСписанное,
	|	Док.ЦенаВРознице КАК Цена
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ 
	|		ДокСписание.Номенклатура,
	|		ДокСписание.СчетУчета,
	|		ДокСписание.Ссылка.Склад КАК Склад,
	|		ДокСписание.Количество   КАК Количество, 
	|		ДокСписание.Цена
	|	ИЗ
	|		Документ.СписаниеТоваров.Товары КАК ДокСписание
	|	ГДЕ
	|		ДокСписание.Ссылка <> &ДокументСсылка
	|		И ДокСписание.Ссылка.Проведен
	|		И ДокСписание.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ 
	|		ДокОтчетККМ.Номенклатура,
	|		ДокОтчетККМ.СчетУчета,
	|		ДокОтчетККМ.Ссылка.Склад        КАК Склад,
	|		ДокОтчетККМ.Количество   КАК Количество, 
	|		ДокОтчетККМ.Цена
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Товары КАК ДокОтчетККМ
	|	ГДЕ
	|		ДокОтчетККМ.Ссылка.Проведен
	|		И ДокОтчетККМ.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка) КАК ВложенныйЗапрос
	|ПО
	|	Док.Номенклатура = ВложенныйЗапрос.Номенклатура
	|	И Док.СчетУчета = ВложенныйЗапрос.СчетУчета
	|	И Док.Ссылка.Склад = ВложенныйЗапрос.Склад " +
	?(Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка, " 
	|	И Док.Цена = ВложенныйЗапрос.Цена", "") + "
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка 
	|	И Док.КоличествоУчет - Док.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка.Склад,
	|	Док.Номенклатура,
	|	Док.СчетУчета,
	|	Док.ЦенаВРознице";

	РезультатЗапроса = Запрос.Выполнить();

	Склад = ДокументОснование.Склад;

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		КоличествоСписать = Выборка.КоличествоОтклонение - Выборка.КоличествоСписанное;

		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
		СтрокаТабличнойЧасти.СчетУчета        = Выборка.СчетУчета;
		СтрокаТабличнойЧасти.Коэффициент      = 1;
		СтрокаТабличнойЧасти.Количество       = КоличествоСписать;
		
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда

			СтрокаТабличнойЧасти.Цена = Выборка.Цена;
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Товары", ИСТИНА);
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти, Ложь, Организация, Дата);
		
	КонецЦикла;

	#Если Клиент Тогда

	Если Товары.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары учетное количество которых превышает фактическое.");
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

// Заполняет счета в строке табличной части.
//
Процедура ЗаполнитьСчета(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, Заполнять, МетаданныеДокумента)

	Если Заполнять = Истина Тогда

		СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;

	ИначеЕсли Заполнять = Ложь Тогда

		СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчета()

// Процедура заполняет счета в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, Заполнять) Экспорт

	СчетаУчета          = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	ЗаполнитьСчета(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, Заполнять, МетаданныеДокумента);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Процедура заполняет счета в табличной части.
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, Заполнять) Экспорт

	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, Заполнять);
		
	КонецЦикла;

КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧасти()

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	//Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
	//	ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	//КонецЕсли;

	Если (мУчетВПродажныхЦенах) И (СтруктураШапкиДокумента.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный) Тогда
		
		ТаблицаТоваров.Колонки.Добавить("РозничнаяЦена");
		ТаблицаТоваров.Колонки.Добавить("УчетнаяЦена");
		
		// Установим параметры запроса
		ПорядокСубконто = Новый Массив();
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		
		МассивНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Склад",           СтруктураШапкиДокумента.Склад);
		Запрос.УстановитьПараметр("КонецПериода",    СтруктураШапкиДокумента.Ссылка.МоментВремени());
		Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Подразделение",   СтруктураШапкиДокумента.ПодразделениеОрганизации);
		Запрос.УстановитьПараметр("Счет",     		 ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
		Запрос.УстановитьПараметр("Номенклатура", 	 МассивНоменклатуры);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
		|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет, &ПорядокСубконто, Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL) И Субконто1 В (&Номенклатура) И Субконто2 = &Склад) КАК Остатки
		|
		|ГДЕ
		|	Остатки.КоличествоОстатокДт > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Субконто1
		|";
		
		ТаблицаУчетныхЦен = Запрос.Выполнить().Выгрузить();
		ТаблицаУчетныхЦен.Индексы.Добавить("Номенклатура");

		Для Каждого Строка из ТаблицаТоваров Цикл
			СтрокаТаблицыЦен = ТаблицаУчетныхЦен.Найти(Строка.Номенклатура, "Номенклатура");
			Если НЕ СтрокаТаблицыЦен = Неопределено Тогда
				Строка.УчетнаяЦена = Окр(?(СтрокаТаблицыЦен.КоличествоОстаток = 0, 0, СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток),2,1);
			Иначе
				Строка.УчетнаяЦена = 0;
			КонецЕсли;
			Строка.РозничнаяЦена = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, СтруктураШапкиДокумента.Склад.ТипЦенРозничнойТорговли, 
															СтруктураШапкиДокумента.Дата, мВалютаРегламентированногоУчета, 1, 1);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("КорСчетСписания");
		
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписания1");
	//ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");

	ТаблицаТоваров.Колонки.Добавить("ОтражениеВУСН");
	
	ТаблицаТоваров.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаТоваров.Колонки.Добавить("КорПодразделениеОрганизации");

	Если (мУчетВПродажныхЦенах) И (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный) Тогда
		ТаблицаТоваров.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ, "СчетУчета");
	ИначеЕсли (мУчетВПродажныхЦенах) И (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
		ТаблицаТоваров.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ, "СчетУчета");
	КонецЕсли;

	ТаблицаТоваров.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей, "КорСчетСписания");
	
	ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.НеПринимаются, 	"ОтражениеВУСН");
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                          		"Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,       		"Склад");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, 		"Организация");
	ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,                        		"ДоговорКонтрагента");

	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорПодразделениеОрганизации");

	ОписаниеТипов_ВидыСубконтоХозрасчетные =  Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
		
	ТаблицаТоваров.Колонки.Добавить("СчетСписанияНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаТоваров.Колонки.Добавить("СубконтоСписанияНДС1", ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаТоваров.Колонки.Добавить("СубконтоСписанияНДС2", ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаТоваров.Колонки.Добавить("СубконтоСписанияНДС3", ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаТоваров.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей,"СчетСписанияНДС");
		
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре    - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	ТаблицаТары.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("ДокументОприходования");
	ТаблицаТары.Колонки.Добавить("Регистратор");
	ТаблицаТары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТары.Колонки.Добавить("Организация");
	ТаблицаТары.Колонки.Добавить("Субконто");
	ТаблицаТары.Колонки.Добавить("КорСчетСписания");
	ТаблицаТары.Колонки.Добавить("КорСубконтоСписания1");
	ТаблицаТары.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТары.Колонки.Добавить("СчетДоходов");

	ТаблицаТары.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаТары.Колонки.Добавить("КорПодразделениеОрганизации");

	ТаблицаТары.ЗаполнитьЗначения(ЭтотОбъект,                                                "Регистратор");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,                             "Склад");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,                       "Организация");
	ТаблицаТары.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей, "КорСчетСписания");

	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорПодразделениеОрганизации");

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	Если (НЕ мУчетВПродажныхЦенах) Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчета");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей)

	СчетСравненияДавСырье = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;

	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Товары"": ";

		Если УправлениеЗапасами.НеУказанНомерГТД(СтрокаТЧ.НомерГТД, СтрокаТЧ.СтранаПроисхождения) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Номер ГТД""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, Заголовок);
		КонецЕсли;
		
		Если (мУчетВПродажныхЦенах) И (СтруктураШапкиДокумента.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный) Тогда
			
			//Допустимое отклонение цены составляет цену минимальной единицы количества (0.001)
			ДопустимоеОтклонение = СтрокаТЧ.УчетнаяЦена * 0.001;
			
			Если СтрокаТЧ.РозничнаяЦена = 0 Тогда
				СтрокаСообщения = "Для товара """ + СтрокаТЧ.Номенклатура + """ не установлена розничная цена.";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			ИначеЕсли СтрокаТЧ.УчетнаяЦена = 0 Тогда
				// Учетная цена неизвестна.
			ИначеЕсли СтрокаТЧ.РозничнаяЦена - СтрокаТЧ.УчетнаяЦена > ДопустимоеОтклонение
				ИЛИ СтрокаТЧ.РозничнаяЦена - СтрокаТЧ.УчетнаяЦена < - ДопустимоеОтклонение Тогда
				СтрокаСообщения = "Для товара """ + СтрокаТЧ.Номенклатура + """ розничная цена (" + 
				СтрокаТЧ.РозничнаяЦена + ") не равна учетной цене(" + СтрокаТЧ.УчетнаяЦена + ").
				|измените розничную цену или проведите переоценку.";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	СтруктураОбязательныхПолей.Вставить("СчетУчета");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);

	Проводки = Движения.Хозрасчетный;
	
	НТТ = Ложь;
	
	Если мУчетВПродажныхЦенах И (НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) Тогда
		
		НТТ = (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
		АТТ = (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный);
		
		Если АТТ Тогда
			
			//Спишем торговую наценку
			ТаблицаНаценок = УправлениеЗапасамиПартионныйУчет.ТорговаяНаценкаАТТ(Ссылка, Склад, ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"), СтруктураШапкиДокумента.ПодразделениеОрганизации);
			ТаблицаНаценок.Индексы.Добавить("Номенклатура, Партия");
			СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
			
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТоварам, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, ,"Списание товаров " + Основание);
			
			ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
						
			Для Каждого Строка Из ТаблицаПоТоварам Цикл
				
				ПолучательСчетНаценки = Строка.КорСчетСписания;
			
				Для Каждого Партия Из Строка.СписанныеПартии Цикл
					
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура",Строка.Номенклатура);
					СтруктураОтбора.Вставить("Партия",		Партия.Партия);
					
					СтрокаТаблицыНаценок = ТаблицаНаценок.НайтиСтроки(СтруктураОтбора);
					
					Сумма = Строка.РозничнаяЦена * Партия.Количество;
					
					Если СтрокаТаблицыНаценок.Количество() = 0 Тогда
						СуммаНаценки 	= 0;
						СуммаНаценкиНУ 	= 0;
						СуммаНаценкиПР 	= 0;
						СуммаНаценкиВР 	= 0;
					ИначеЕсли НЕ (СтрокаТаблицыНаценок[0].ПС + СтрокаТаблицыНаценок[0].ОБ) = 0 Тогда
						СуммаНаценки = СтрокаТаблицыНаценок[0].ТН * Сумма / (СтрокаТаблицыНаценок[0].ПС + СтрокаТаблицыНаценок[0].ОБ);
						СуммаНаценкиНУ = СтрокаТаблицыНаценок[0].ТН_НУ * Сумма / (СтрокаТаблицыНаценок[0].ПС + СтрокаТаблицыНаценок[0].ОБ);
						СуммаНаценкиПР = СтрокаТаблицыНаценок[0].ТН_ПР * Сумма / (СтрокаТаблицыНаценок[0].ПС + СтрокаТаблицыНаценок[0].ОБ);
						СуммаНаценкиВР = СтрокаТаблицыНаценок[0].ТН_ВР * Сумма / (СтрокаТаблицыНаценок[0].ПС + СтрокаТаблицыНаценок[0].ОБ);
					Иначе
						СуммаНаценки 	= Сумма;
						СуммаНаценкиНУ 	= Сумма;
						СуммаНаценкиПР 	= 0;
						СуммаНаценкиВР 	= 0;
					КонецЕсли;
										
					Если СуммаНаценки <> 0 ИЛИ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И 
						(СуммаНаценкиНУ <> 0 ИЛИ СуммаНаценкиПР <> 0 ИЛИ СуммаНаценкиВР <> 0))Тогда
						
						Проводка = Проводки.Добавить();
						Проводка.Период      = Дата;
						Проводка.Организация = Организация;
						Проводка.Содержание  = "Списание " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(СчетНаценки) + ": " + Основание;
						
						Проводка.СчетДт      = ПолучательСчетНаценки;
						Проводка.СчетКт      = СчетНаценки;
						
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
						Проводка.Сумма = - СуммаНаценки;
						
						БухгалтерскийУчет.УстановитьПодразделенияПроводки(
							Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
						
						Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
							НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-СуммаНаценкиНУ,-СуммаНаценкиНУ,-СуммаНаценкиПР,-СуммаНаценкиПР,-СуммаНаценкиВР,-СуммаНаценкиВР,Проводка);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		Иначе //НТТ
			
			ТаблицаНаценок = УправлениеЗапасамиПартионныйУчет.ТорговаяНаценкаНТТ(Ссылка, Склад, СтруктураШапкиДокумента.ПодразделениеОрганизации, мРазделятьПоСтавкамНДС);
			Если мРазделятьПоСтавкамНДС Тогда
				ТаблицаНаценок.Индексы.Добавить("СтавкиНДС");
			КонецЕсли;
			СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
			
			Для Каждого Строка Из ТаблицаПоТоварам Цикл
								
				ПолучательСчетНаценки = Строка.КорСчетСписания;
				
				Если мРазделятьПоСтавкамНДС Тогда
					СтрокаТаблицыНаценок = ТаблицаНаценок.Найти(Строка.СтавкаНДСВРознице, "СтавкиНДС");
				Иначе
					СтрокаТаблицыНаценок = ?(ТаблицаНаценок.Количество() > 0, ТаблицаНаценок[0], Неопределено);
				КонецЕсли;
				
				Сумма = Строка.Сумма;
				
				Если СтрокаТаблицыНаценок = Неопределено Тогда
					СуммаНаценки 	= 0;
					СуммаНаценкиНУ 	= 0;
					СуммаНаценкиПР 	= 0;
					СуммаНаценкиВР 	= 0;
				ИначеЕсли НЕ (СтрокаТаблицыНаценок.ПС + СтрокаТаблицыНаценок.ОБ) = 0 Тогда
					СуммаНаценки = СтрокаТаблицыНаценок.ТН * Сумма / (СтрокаТаблицыНаценок.ПС + СтрокаТаблицыНаценок.ОБ);
					СуммаНаценкиНУ = СтрокаТаблицыНаценок.ТН_НУ * Сумма / (СтрокаТаблицыНаценок.ПС + СтрокаТаблицыНаценок.ОБ);
					СуммаНаценкиПР = СтрокаТаблицыНаценок.ТН_ПР * Сумма / (СтрокаТаблицыНаценок.ПС + СтрокаТаблицыНаценок.ОБ);
					СуммаНаценкиВР = СтрокаТаблицыНаценок.ТН_ВР * Сумма / (СтрокаТаблицыНаценок.ПС + СтрокаТаблицыНаценок.ОБ);
				Иначе
					СуммаНаценки 	= Сумма;
					СуммаНаценкиНУ 	= Сумма;
					СуммаНаценкиПР 	= 0;
					СуммаНаценкиВР 	= 0;
				КонецЕсли;
				
				//Спишем товар из розницы
				Проводка = Проводки.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Списание " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(Строка.СчетУчета) + ": " + Основание;
				
				Проводка.СчетДт      = Строка.КорСчетСписания;
				Проводка.СчетКт      = Строка.СчетУчета;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
				
				Если мРазделятьПоСтавкамНДС Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
				Сумма = Строка.Сумма;
				Проводка.Сумма         = Сумма;
				
				//Спишем торговую наценку
				Если СуммаНаценки <> 0 ИЛИ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И 
					(СуммаНаценкиНУ <> 0 ИЛИ СуммаНаценкиПР <> 0 ИЛИ СуммаНаценкиВР <> 0))Тогда
					
					Проводка = Проводки.Добавить();
					Проводка.Период      = Дата;
					Проводка.Организация = Организация;
					Проводка.Содержание  = "Списание " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(СчетНаценки) + ": " + Основание;
					
					Проводка.СчетДт      = Строка.КорСчетСписания;
					Проводка.СчетКт      = СчетНаценки;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
					Если мРазделятьПоСтавкамНДС Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
					КонецЕсли;
					
					Проводка.Сумма = - СуммаНаценки;
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
						
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-СуммаНаценкиНУ,-СуммаНаценкиНУ,-СуммаНаценкиПР,-СуммаНаценкиПР,-СуммаНаценкиВР,-СуммаНаценкиВР,Проводка);
					КонецЕсли;

				КонецЕсли;
				
				//Проведение по налоговому учету
				//...
				//НТТ в продажных ценах по налоговому учету не проводится.
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТоварам, ИСТИНА, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, , "Списание товаров " + Основание);

	КонецЕсли;
		
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТаре,    ИСТИНА,, Отказ, , "Списание тары");
	
	Если НТТ Тогда
		Возврат;
	КонецЕсли;

	Если (НЕ мУчетВПродажныхЦенах) ИЛИ (Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) Тогда
		// Списание по регистру партионного учета НДС, включение НДС в стоимость ТМЦ
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;
	
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	// {УчетДоходовИРасходовИП
	//Списание по партиям в налоговом учете предпринимателя
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	ТаблицаПоТоварам.Колонки.Добавить("Продукция");
	ТаблицаПоТоварам.Колонки.Добавить("СчетЗатрат");
	ТаблицаПоТоварам.ЗагрузитьКолонку(ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"), "Продукция");
	ТаблицаПоТоварам.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей, "СчетЗатрат");
	СтоимостьПродукции = ДоходыИРасходыПредпринимателя.СписаниеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, 2, ТаблицаПоТоварам,, "СчетУчета", "СчетЗатрат",,, Отказ);
	
	ПолученоПродукции = ТаблицаПоТоварам.Скопировать(,"Продукция,СчетЗатрат,Количество");
	ПолученоПродукции.Свернуть("Продукция,СчетЗатрат", "Количество");
	ДоходыИРасходыПредпринимателя.ПоступлениеПродукции(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, ПолученоПродукции, "СчетЗатрат",,, "Продукция", СтоимостьПродукции);
	// }УчетДоходовИРасходовИП
		
	ДатаДока = СтруктураШапкиДокумента.Дата;

	//Распределение выручки по товарам по партиям
	СтруктураТаблицыВыручки = Новый Структура("Номенклатура, Партия,СчетУчета, 
											  |СуммаВал,Комиссионный,Комитент,ДоговорКомиссии,СчетРасчетовПоАвансамСКомитентом,СчетРасчетовСКомитентом,ВалютаРасчетовСКомитентом, СуммаСписания");
											  
	//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
	ВыручкаПоТоварам = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам,СтруктураТаблицыВыручки,,Истина);
	ВыручкаПоТоварам.Очистить();

	Для каждого СтрокаТаблицыТоваров Из ТаблицаПоТоварам Цикл 

		Если мУчетВПродажныхЦенах И НТТ Тогда
			Прервать;
		КонецЕсли;
	
		ТаблицаПартий = СтрокаТаблицыТоваров.СписанныеПартии;

		Для каждого Партия из ТаблицаПартий Цикл

			СтрокаТаблицыВыручки = ВыручкаПоТоварам.Добавить();

			Если Партия.Комиссионный тогда
				ПараметрыПартии = УправлениеВзаиморасчетами.ПараметрыРасчетовСКомитентом(Партия.Партия, Отказ, Заголовок);
			КонецЕсли;

			Для каждого Колонка из ВыручкаПоТоварам.Колонки Цикл

				Если Не(ТаблицаПартий.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
					СтрокаТаблицыВыручки[Колонка.Имя] = Партия[Колонка.Имя];
				
				ИначеЕсли Не(ТаблицаПоТоварам.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
					СтрокаТаблицыВыручки[Колонка.Имя] = СтрокаТаблицыТоваров[Колонка.Имя];

				Иначе

					Если Партия.Комиссионный тогда

						Если ПараметрыПартии.Свойство(Колонка.Имя) тогда
							СтрокаТаблицыВыручки[Колонка.Имя] = ПараметрыПартии[Колонка.Имя];
						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

	//Определение параметров учетной политики по отражению НДС с продажи
    УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация).МоментОпределенияНалоговойБазыНДС;
	//Фиксация выручки и НДС (проводки)
	Выручка = ВыручкаПоТоварам.Скопировать();
	Выручка.Свернуть("Комиссионный,Комитент,ДоговорКомиссии,СчетРасчетовПоАвансамСКомитентом,СчетРасчетовСКомитентом,ВалютаРасчетовСКомитентом","СуммаСписания,СуммаВал");
	Выручка.ЗагрузитьКолонку(Выручка.ВыгрузитьКолонку("СуммаСписания"),"СуммаВал");
	Выручка.Колонки.СуммаСписания.Имя ="Сумма"; 
	
    СтрокиКУдалению = новый Массив;
	Для каждого СтрокаТаблицы из Выручка Цикл

		// Выручка
		Если СтрокаТаблицы.Сумма = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;

		Если Не СтрокаТаблицы.Комиссионный = Истина тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		Иначе

			Проводка = Проводки.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = СтрокаТаблицы.Сумма;

			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей;

			Проводка.СчетКт      = СтрокаТаблицы.СчетРасчетовСКомитентом;

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",        СтрокаТаблицы.Комитент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",           СтрокаТаблицы.ДоговорКомиссии);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
			Проводка.Содержание  = "Списание: " + Основание;

			Если Проводка.СчетКт.Валютный Тогда

				Проводка.ВалютаКт        = СтрокаТаблицы.ВалютаРасчетовСКомитентом;
				Если СтруктураШапкиДокумента.ВалютаРегламентированногоУчета = СтрокаТаблицы.ВалютаРасчетовСКомитентом тогда

					//Если валюта расчетов с комитентом совпадает с валютой расчетов по договору, считаем что и курсы совпадают.
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;

				Иначе

					ДанныеОВалютеРасчетовСКомитентом = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаТаблицы.ВалютаРасчетовСКомитентом,СтруктураШапкиДокумента.Дата);
					Проводка.ВалютнаяСуммаКт = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма
												,мВалютаРегламентированногоУчета,СтрокаТаблицы.ВалютаРасчетовСКомитентом
												,1,ДанныеОВалютеРасчетовСКомитентом.Курс
												,1,ДанныеОВалютеРасчетовСКомитентом.Кратность);
					СтрокаТаблицы.СуммаВал =  Проводка.ВалютнаяСуммаКт;

				КонецЕсли;

			Иначе

				СтрокаТаблицы.СуммаВал =  Проводка.Сумма;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	Если СтрокиКУдалению.Количество()>0 тогда
		Для каждого Строка_НеКомиссия из СтрокиКУдалению Цикл
			Выручка.Удалить(Строка_НеКомиссия);
		КонецЦикла;
	КонецЕсли;
	
	Если Выручка.Количество()>0 тогда
		УправлениеВзаиморасчетами.ЗачестьАвансПоРасчетамСКомитентом(ЭтотОбъект,СтруктураШапкиДокумента,Выручка,Отказ,Заголовок);
	КонецЕсли;
	
	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);
	
	// Учет товаров по номерам ГТД
	УправлениеЗапасами.ПроведениеДокументаСписанияПоСчетуГТД(ЭтотОбъект, ТаблицаПоТоварам);

КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоТоварам.Количество() = 0 Тогда
		//Отработка по партиям НДС не требуется. 
		Возврат;
	КонецЕсли; 
	
	//при списании на счет 94, ТМЦ не могут использоваться в деятельности, облагаемой НДС, НДС по партиям подлежит включению в стоимость
	СтруктураШапкиДокумента.Вставить("НДСвСтоимостиТоваров", Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость);
	
	/////////////////////////////////////////////////////////////////////////////////
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	ТаблицаНДСПартииСписания = УчетНДС.ПодготовитьТаблицуСписанияПартийДляНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	/////////////////////////////////////////////////////////////////////////////////
	
	Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		//Партии не найдены или отражение в партионном учете НДС не производится.
		//Дальнейшая обработка не требуется
		Возврат;
	КонецЕсли; 
	
	ТаблицаДвиженийПартии = Движения.НДСПоПриобретеннымЦенностям.ВыгрузитьКолонки();
	Движения.НДСПоПриобретеннымЦенностям.мПериод          = СтруктураШапкиДокумента.Дата;
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС в стоимости товаров - отработка включения НДС в стоимость.
	УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии,Истина,Движения.Хозрасчетный, Заголовок, Движения);
	
	Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
		Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
		Движения.НДСПоПриобретеннымЦенностям.ВыполнитьПриход();
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по партиям - отразить непосредственное списание.
	ТаблицаДвиженийПартии.Очистить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
	Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
	Движения.НДСПоПриобретеннымЦенностям.ВыполнитьРасход();
	// НДС по партиям - отразить непосредственное списание.
	/////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по ОС - при списании ТМЦ они могут перестать принадлежать к будущим ОС,
	// в этом случае необходимо убрать блокировку вычета из регистра ОС и НМА.
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, Движения.НДСПоПриобретеннымЦенностям.Выгрузить(), Движения, Отказ);
	// НДС по ОС
	/////////////////////////////////////////////////////////////////////////////////
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы УСН
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДопПараметров = Новый Структура("ТаблицаТМЦ", ТаблицаПоТоварам);
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, СтруктураДопПараметров);
		
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ИнвентаризацияТоваровНаСкладе = Основание;

		ЗаполнитьТоварыПоИнвентаризацииТоваров(Основание);
        		
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", Истина);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
	мРазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитика.Количество() > 0 Тогда	
		Если (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Товары.Итог("Сумма");

	// Почистим неиспользуемые реквизиты.
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.Оборудование Тогда 

		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл

			Если ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД) Тогда
				СтрокаТаблицы.НомерГТД = Неопределено;
			КонецЕсли;

			Если ЗначениеЗаполнено(СтрокаТаблицы.СтранаПроисхождения) Тогда
				СтрокаТаблицы.СтранаПроисхождения = Неопределено;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ПередЗаписью

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ = Ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВалютаДокумента"		,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("КурсДокумента"		,1);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента"	,1);
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"       , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"         , "Количество");
	СтруктураПолей.Вставить("Цена"               , "Цена");
	СтруктураПолей.Вставить("Сумма"              , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДСВРознице"  , "СтавкаНДСВРознице");
	СтруктураПолей.Вставить("НомерСтроки"        , "НомерСтроки");
	СтруктураПолей.Вставить("НомерГТД"           , "НомерГТД");
	СтруктураПолей.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	СтруктураПолей.Вставить("СчетУчета"        , "СчетУчета");
	СтруктураПолей.Вставить("ДокументОприходования", "ДокументОприходования");
	СтруктураПолей.Вставить("Себестоимость"		   , "Себестоимость");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ВозвратнаяТара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("НомерСтроки" , "НомерСтроки");
	СтруктураПолей.Вставить("СчетУчета" , "СчетУчета");

	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоТаре    = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоТаре;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

    ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре);
	
	// Проверить заполнение ТЧ "Товары" и "ВозвратнаяТара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
