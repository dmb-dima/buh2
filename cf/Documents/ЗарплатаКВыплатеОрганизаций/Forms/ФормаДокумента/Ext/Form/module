
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мПредыдущееЗначениеДнейНеВыплаты;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения 

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Зарплата,ЭлементыФормы.КоманднаяПанельЗарплата);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет видимостью элементов формы диалога.
//
Процедура УправлениеДоступностьюЭлементовФормы()
	
	ДоступностьКассовыхФорм = СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
	
	ЭлементыФормы.КоманднаяПанельЗарплата.Кнопки.ПодменюЗамены.Кнопки.Выплачено.Доступность 	 = ДоступностьКассовыхФорм;
	ЭлементыФормы.КоманднаяПанельЗарплата.Кнопки.ПодменюЗамены.Кнопки.Задепонировано.Доступность = ДоступностьКассовыхФорм;
	ЭлементыФормы.КоманднаяПанельЗарплата.Кнопки.ПодменюЗамены.Кнопки.НЕВыплачено.Доступность = ДоступностьКассовыхФорм;
	
	ЭлементыФормы.Зарплата.Колонки.ВыплаченностьЗарплаты.Видимость = ДоступностьКассовыхФорм;
	ЭлементыФормы.Зарплата.Колонки.ВыплатаЗарегистрированаДокументом.Видимость = ДоступностьКассовыхФорм;
	ЭлементыФормы.Зарплата.Колонки.ВыплаченностьЗарплаты.ИзменятьВидимость = ДоступностьКассовыхФорм;
	ЭлементыФормы.Зарплата.Колонки.ВыплатаЗарегистрированаДокументом.ИзменятьВидимость = ДоступностьКассовыхФорм;
		
КонецПроцедуры // УправлениеДоступностьюЭлементовФормы()

// Производит замену значений "не выплачено" в колонке "Выплаченность" на 
// 	значение "выплачено" или "задепонировано" в зависимости от нажатой кнопки.
//
Процедура ЗаменаЗначенийВТабличнойЧасти(ВыбраннаяКнопка)
	
	Если ВыбраннаяКнопка.Имя = "Выплачено" Тогда
	    ЗначениеНаЗамену = Перечисления.ВыплаченностьЗарплаты.Выплачено
	Иначе
	    ЗначениеНаЗамену = Перечисления.ВыплаченностьЗарплаты.Задепонировано
	КонецЕсли; 

	Для каждого СтрокаТЧ Из Зарплата Цикл
		
		Если СтрокаТЧ.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.НеВыплачено Тогда
		    СтрокаТЧ.ВыплаченностьЗарплаты = ЗначениеНаЗамену
		КонецЕсли;  
	    
	КонецЦикла; 

КонецПроцедуры // ЗаменаЗначенийВТабличнойЧасти()

Процедура ПроверитьДокументыВведенныеНаОсновании()
	
	ЗапросПоПлатежнымДокументам = Новый Запрос;
	ЗапросПоПлатежнымДокументам.УстановитьПараметр("Ведомость", Ссылка);
	
	Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ссылка.Представление КАК Представление
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета.ПеречислениеЗаработнойПлаты КАК СписаниеДенежныхСредствПеречислениеЗаработнойПлаты
		|ГДЕ
		|	СписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ведомость = &Ведомость
		|	И СписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ссылка.Проведен";
		
		ЗапросПоПлатежнымДокументам.Текст = ТекстЗапроса;
		РезультатЗапроса = ЗапросПоПлатежнымДокументам.Выполнить();
		ТолькоПросмотр = Не РезультатЗапроса.Пустой();
		ТекстОплаты = "";
		Если ТолькоПросмотр Тогда
			ВыборкаДокументов = РезультатЗапроса.Выбрать();
			Количество = 0;
			Пока ВыборкаДокументов.СледующийПоЗначениюПоля("Представление") Цикл
				ТекстОплаты = ТекстОплаты + ?(ТекстОплаты = "","",", ") + ВыборкаДокументов.Представление;
				Количество = Количество + 1;
				Если Количество = 3 Тогда
				ТекстОплаты = ТекстОплаты + "...";
				Прервать;
			КонецЕсли;
			КонецЦикла;
			ЭлементыФормы.СтатусДокумента.Заголовок = ?(Количество = 1,"Ведомость оплачена документом ", "Ведомость оплачена документами:") + ТекстОплаты;
		Иначе
			ЭлементыФормы.СтатусДокумента.Заголовок = "Ведомость не оплачена";
		КонецЕсли;

	Иначе
		
		ФормироватьПроводкиСводно = (ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.ВидыСубконто.Найти(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") = Неопределено);

		ТекстОплаты = "";
		Количество  = 0;
		РедактированиеОтметкиРазрешено = Ложь;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор.Представление КАК Представление,
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
		|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо
		|			И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ведомость";
		
		ЗапросПоПлатежнымДокументам.Текст = ТекстЗапроса;
		РезультатЗапроса = ЗапросПоПлатежнымДокументам.Выполнить();
		
		ВыборкаДокументов = РезультатЗапроса.Выбрать();
		Пока ВыборкаДокументов.СледующийПоЗначениюПоля("Представление") Цикл
			Если ВыборкаДокументов.Представление = Null Тогда
				РедактированиеОтметкиРазрешено = Истина
			Иначе
				ТекстОплаты = ТекстОплаты + ?(ТекстОплаты = "","",", ") + ВыборкаДокументов.Представление;
				Количество = Количество + 1;
				Если Количество = 3 Тогда
					ТекстОплаты = ТекстОплаты + "...";
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
			
		Если ФормироватьПроводкиСводно И РедактированиеОтметкиРазрешено = Истина Тогда
			
			РедактированиеОтметкиРазрешено = Ложь;
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Представление
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
			|ГДЕ
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = &Ведомость
			|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Проведен";
			
			ЗапросПоПлатежнымДокументам.Текст = ТекстЗапроса;
			РезультатЗапроса = ЗапросПоПлатежнымДокументам.Выполнить();
			ТолькоПросмотр = Не РезультатЗапроса.Пустой();
			Если ТолькоПросмотр Тогда
				ЭлементыФормы.Зарплата.Колонки.ВыплатаЗарегистрированаДокументом.Видимость = Ложь;
				ВыборкаДокументов = РезультатЗапроса.Выбрать();
				Количество = 0;
				Пока ВыборкаДокументов.СледующийПоЗначениюПоля("Представление") Цикл
					ТекстОплаты = ТекстОплаты + ?(ТекстОплаты = "","",", ") + ВыборкаДокументов.Представление;
					Количество = Количество + 1;
					Если Количество = 3 Тогда
						ТекстОплаты = ТекстОплаты + "...";
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				РедактированиеОтметкиРазрешено = Истина
			КонецЕсли;
			
		КонецЕсли;
		
		РедактированиеРазрешено = Количество = 0;
		ЭлементыФормы.СтатусДокумента.Заголовок = ?(Количество = 0,"Ведомость не оплачена",?(Количество = 1,"Ведомость оплачена документом ", "Ведомость оплачена документами:")) + ТекстОплаты;
			
		ПолеВвода = Тип("ПолеВвода");
		Кнопка = Тип("Кнопка");
		ТабличноеПоле = Тип("ТабличноеПоле");
		КоманднаяПанель = Тип("КоманднаяПанель");
		Для каждого ЭУ Из ЭлементыФормы Цикл
			ТипЭУ = Тип(ЭУ);
			Если ТипЭУ = ПолеВвода Тогда
				ЭУ.ТолькоПросмотр = Не РедактированиеРазрешено
			ИначеЕсли ТипЭУ = Кнопка Тогда
				ЭУ.Доступность = РедактированиеРазрешено
			ИначеЕсли ТипЭУ = ТабличноеПоле Тогда
				Если ЭУ.Имя = "Зарплата" Тогда
					ЭУ.ИзменятьСоставСтрок = РедактированиеРазрешено;
					Для каждого Колонка Из ЭУ.Колонки Цикл
						Если Колонка.Имя = "НомерСтроки" Тогда
							Продолжить;	
						ИначеЕсли Колонка.Имя = "Физлицо" Тогда
							Колонка.ЭлементУправления.ТолькоПросмотр = Не РедактированиеРазрешено
						ИначеЕсли Колонка.Имя = "ВыплаченностьЗарплаты" Тогда	
							Колонка.ТолькоПросмотр = Не РедактированиеОтметкиРазрешено
						Иначе
							Колонка.ТолькоПросмотр = Не РедактированиеРазрешено
						КонецЕсли;
					КонецЦикла;
				Иначе
					ЭУ.ТолькоПросмотр = Не РедактированиеРазрешено
				КонецЕсли;
			ИначеЕсли ТипЭУ = КоманднаяПанель Тогда
				Для каждого КнопкаКП Из ЭУ.Кнопки Цикл
					Если КнопкаКП.ТипКнопки = ТипКнопкиКоманднойПанели.Действие И КнопкаКП.ИзменяетДанные Тогда
						КнопкаКП.Доступность = РедактированиеРазрешено;
					ИначеЕсли КнопкаКП.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
						Для каждого КнопкаКП Из КнопкаКП.Кнопки Цикл
							Если КнопкаКП.ТипКнопки = ТипКнопкиКоманднойПанели.Действие И КнопкаКП.ИзменяетДанные Тогда
								КнопкаКП.Доступность = РедактированиеРазрешено;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			Иначе
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	 	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		Если НЕ ЗначениеЗаполнено(СпособВыплаты) Тогда
        	СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
		КонецЕсли;
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ФизЛицо");
	СтруктураКолонок.Вставить("Сумма");

	// Установить ограничение - изменять видимость колонок для табличной части Зарплата
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Зарплата.Колонки, СтруктураКолонок);
	ЭлементыФормы.Зарплата.Колонки.КомпенсацияЗаЗадержкуЗарплаты.Видимость = ДнейНеВыплаты > 0; 

	// Активизируем табличную часть
	ТекущийЭлемент = ЭлементыФормы.Зарплата;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	УправлениеДоступностьюЭлементовФормы();
	Если Не ЭтоНовый() Тогда
		ПроверитьДокументыВведенныеНаОсновании();
	КонецЕсли;
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мПредыдущееЗначениеДнейНеВыплаты = ДнейНеВыплаты;
	
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,,ЭлементыФормы.Зарплата);

	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
				
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры //ПриЗакрытии

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			Зарплата.Загрузить(ЗначениеВыбора.Данные.Выгрузить())
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" и Источник = Ссылка Тогда 
		ПроверитьДокументыВведенныеНаОсновании();
	ИначеЕсли ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;

КонецПроцедуры

Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызова формы "ВыплатаЗарплатыРасходнымиОрдерами"
//
Процедура ДействияФормыВыплатаЗарплатыРасходнымиОрдерами(Кнопка)
	
	Если Модифицированность() Тогда
		ТекстВопроса = "Действие может быть выполнено только после записи документа. Записать?";
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Или Не ЗаписатьВФорме() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;		

	ФормированиеРКО = Обработки.ВыплатаЗарплатыРасходнымиОрдерами.Создать();
	ФормированиеРКО.Организация = Организация;
	ФормированиеРКО.ПлатежнаяВедомость = Ссылка;
	ФормированиеРКО.Автозаполнение();
	ФормированиеРКО.ПолучитьФорму().Открыть();		
	
КонецПроцедуры

Процедура ДействияФормыОчистить(Кнопка)
	
	ТекстВопроса = "Табличная часть будет очищена. Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли; 
	
	Зарплата.Очистить();
		
КонецПроцедуры

Процедура ДействияФормыЗаполнитьОстаткиНаКонецМесяца(Кнопка)
	
	Если Зарплата.Количество() > 0 Тогда
	
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	Автозаполнение("ОстаткиНаКонецМесяца");

	Если Зарплата.Количество() = 0 Тогда
		
		Сообщить("Не обнаружены данные для записи в табличную часть документа!", СтатусСообщения.Важное )
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыЗаполнитьСписокРаботников(Кнопка)
	
	Если Зарплата.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		Зарплата.Очистить();
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, "РаботникиОрганизаций", Организация, ПодразделениеОрганизации, Истина, Ложь);
	
	Если Зарплата.Количество() = 0 Тогда
		
		Сообщить("Не обнаружены данные для записи в табличную часть документа!", СтатусСообщения.Важное )
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Рассчитать"
//
Процедура ДействияФормыРассчитать(Кнопка)
	
	Если Зарплата.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Если Модифицированность() Тогда
		ТекстВопроса = "Для выполнения расчета необходимо записать документ. Продолжить?";
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Или Не ЗаписатьВФорме() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 	

	РассчитатьСуммыКВыплатеПоСписку();

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ТАБЛИЧНОЙ ЧАСТИ

Процедура КоманднаяПанельЗарплатаПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.Зарплата, Ссылка, Ложь, Дата, мГоловнаяОрганизация);
	
КонецПроцедуры


Процедура КоманднаяПанельЗарплатаВыплачено(Кнопка)
	
	ЗаменаЗначенийВТабличнойЧасти(Кнопка)
	
КонецПроцедуры

Процедура КоманднаяПанельЗарплатаЗадепонировано(Кнопка)
	
	ЗаменаЗначенийВТабличнойЧасти(Кнопка)
	
КонецПроцедуры

Процедура КоманднаяПанельЗарплатаНеВыплачено(Кнопка)
	
	ВременнаяТаблица = Зарплата.Выгрузить();
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.ВыплаченностьЗарплаты.НеВыплачено,"ВыплаченностьЗарплаты");
	Зарплата.Загрузить(ВременнаяТаблица);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если Направление = 1 Тогда // увеличиваем значение
		ПериодРегистрации = КонецМесяца(ПериодРегистрации) + 1
	Иначе // = -1 - уменьшаем значение
		ПериодРегистрации = НачалоМесяца(ПериодРегистрации - 1)
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
    ПериодРегистрации = НачалоМесяца(ПериодРегистрации)
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении реквизита Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));

	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода способа выплаты.
//
Процедура СпособВыплатыПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры
	
// Процедура - обработчик события "ПриИзменении" поля ввода дней не выплаты.
//
Процедура ДнейНеВыплатыПриИзменении(Элемент)
	
	Если Элемент.Значение = 0 и Зарплата.Итог("КомпенсацияЗаЗадержкуЗарплаты") > 0 Тогда
		ТекстВопроса = "Колонка компенсации за невыплату зарплаты будет очищена. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			ДнейНеВыплаты = мПредыдущееЗначениеДнейНеВыплаты;
			Возврат;
		КонецЕсли;
		Таблица = Зарплата.Выгрузить();
		Таблица.ЗаполнитьЗначения(0,"КомпенсацияЗаЗадержкуЗарплаты");
		Зарплата.Загрузить(Таблица);
	КонецЕсли;
	
	ЭлементыФормы.Зарплата.Колонки.КомпенсацияЗаЗадержкуЗарплаты.Видимость = Элемент.Значение > 0; 
	мПредыдущееЗначениеДнейНеВыплаты = ДнейНеВыплаты;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки КнопкаРассчитать.
//
Процедура КнопкаРассчитатьНажатие(Элемент)

	ПроцентКомпенсации = РассчитатьПроцентКомпенсации();
	
	Если ДнейНеВыплаты > 0 и ПроцентКомпенсации = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана ставка рефинансирования ЦБ!")
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Зарплата Цикл
		СтрокаТЧ.КомпенсацияЗаЗадержкуЗарплаты = СтрокаТЧ.Сумма * ПроцентКомпенсации
	КонецЦикла; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ и ее РЕКВИЗИТОВ 

// Процедура - обработчик события "Обработка выбора" табличного поля.
//
Процедура ЗарплатаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Зарплата.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение.ФизЛицо)).Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Зарплата.Добавить();
		СтрокаТабличнойЧасти.Физлицо = ВыбранноеЗначение.Физлицо;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарплатаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Если ЭлементыФормы.Зарплата.Колонки.ВыплатаЗарегистрированаДокументом.Видимость Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор.Представление КАК Представление,
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор
		|ИЗ
		|	РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
		|ГДЕ
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость = &Ведомость
		|	И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо = &Физлицо";
		Запрос.УстановитьПараметр("Ведомость",Ссылка);
		
	    // получим данные для отрисовки в ячейках
	    Для Каждого СтрокаОформления Из ОформленияСтрок Цикл
	        ДанныеСтроки = СтрокаОформления.ДанныеСтроки;
			Запрос.УстановитьПараметр("Физлицо",ДанныеСтроки.Физлицо);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтрокаОформления.Ячейки.ВыплаченностьЗарплаты.ТолькоПросмотр = Истина;
				СтрокаОформления.Ячейки.ВыплатаЗарегистрированаДокументом.УстановитьТекст(Выборка.Представление);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Начало выбора" поля ввода физического лица.
//
Процедура ЗарплатаФизлицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, НачалоДня(КонецМесяца(ПериодРегистрации)), мГоловнаяОрганизация, 0,СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ЗарплатаФизлицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		СтрокаТЧ = Зарплата.Найти(ВыбранноеЗначение.Физлицо, "ФизЛицо");
		Если СтрокаТЧ = Неопределено тогда
			Элемент.Значение = ВыбранноеЗначение.Физлицо;
		Иначе
			Предупреждение("В данном документе по одному работнику можно вводить только одну строку!");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура ЗарплатаФизлицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Организация);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура ЗарплатаФизлицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Элемент.Значение, Организация, Истина);
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура обработки события при начала редактирования
// Подставляет значение выплачености "Не выплачено" при добавлении новой строки
Процедура ЗарплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.НеВыплачено;
		Если Копирование Тогда
			Элемент.ТекущиеДанные.Физлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарплатаФизлицоПриИзменении(Элемент)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ФизЛицо", Элемент.Значение);
	НайденныеСтроки = Зарплата.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 1 Тогда
		Предупреждение("В данном документе по одному работнику можно вводить только одну строку!");
		Элемент.Значение = "";
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
		СтрокаТЧ = Зарплата.Найти(Справочники.ФизическиеЛица.ПустаяСсылка(), "ФизЛицо");
		Если СтрокаТЧ <> Неопределено тогда
			
			Предупреждение("В строке №" + СтрокаТЧ.НомерСтроки + " табличной части не заполнен работник!");
			Отказ = Истина;
		КонецЕсли;
КонецПроцедуры

// {ОбособленныеПодразделения
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
		
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
		
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()

// }ОбособленныеПодразделения 