////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечатиРКО()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерСтроки КАК НомерСтроки,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты КАК Сумма,
	|	ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.Фамилия ЕСТЬ NULL 
	|			ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо.Наименование
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ФИОПолучателя,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|			ТОГДА "" сумма задепонирована""
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты <> ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|			ТОГДА "" сумма не помечена к выплате""
	|		КОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
	|			ТОГДА "" сумма выплачена документом ""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СостояниеСтроки,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|				И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
	|			ТОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор.Представление
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеДокумента,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|				И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВыводитьРКО,
	// {ОбособленныеПодразделения
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	// }ОбособленныеПодразделения 
	|	ВЫБОР
	|		КОГДА ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НетДанныхДокумента,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Наименование,"""") КАК ДокументВидНаименование,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|		&ДатаДокумента,
	|		Физлицо В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо
	|			ИЗ
	|				Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|			ГДЕ
	|				ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(
	|		&ДатаДокумента,
	|		Физлицо В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо
	|			ИЗ
	|				Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|			ГДЕ
	|				ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ДокументСсылка)) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо
	|			И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечатиРКО()

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);
	Запрос.УстановитьПараметр("Задепонировано",	Перечисления.ВыплаченностьЗарплаты.Задепонировано);
	Запрос.УстановитьПараметр("Выплачено",		Перечисления.ВыплаченностьЗарплаты.Выплачено);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.УстановитьПараметр("Руководитель",		Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		Запрос.УстановитьПараметр("ГлавныйБухгалтер",	Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
		Запрос.УстановитьПараметр("НомерДок",			ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка));
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&НомерДок КАК НомерДок,
		|	ЗарплатаКВыплатеОрганизаций.Дата КАК ДатаДок,
		|	ЗарплатаКВыплатеОрганизаций.Организация КАК Организация,
		|	ЗарплатаКВыплатеОрганизаций.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ЗарплатаКВыплатеОрганизаций.Организация.КодПоОКПО КАК КодПоОКПО,
		// {ОбособленныеПодразделения
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизаций.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
		|			ТОГДА ЗарплатаКВыплатеОрганизаций.ПодразделениеОрганизации.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ЗарплатаКВыплатеОрганизаций.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200))
		|	КОНЕЦ КАК Подразделение,
		// }ОбособленныеПодразделения 
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследнихРуководитель.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо.Наименование) КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.Должность.Наименование КАК ДолжностьРуководителя,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследнихГлБух.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.ФизическоеЛицо.Наименование) КАК ФИОГлБуха,
		|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма, 0) КАК Сумма,
		|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.ВсегоВыплачено, 0) КАК ВсегоВыплачено,
		|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.ВсегоДепонировано, 0) КАК ВсегоДепонировано,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма, 0) = ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.ОплаченныеСуммы, 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОплаченоПолностью,
		|	ЗарплатаКВыплатеОрганизацийЗарплата.КоличествоРКО
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследнихРуководитель
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо = ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо
		|		ПО ЗарплатаКВыплатеОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &ГлавныйБухгалтер) КАК ОтветственныеЛицаОрганизацийСрезПоследнихГлБух
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследнихГлБух
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.ФизическоеЛицо = ФИОФизЛицСрезПоследнихГлБух.ФизЛицо
		|		ПО ЗарплатаКВыплатеОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК Ссылка,
		|			СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма,
		|			СУММА(ВЫБОР
		|					КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
		|						ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК ВсегоДепонировано,
		|			СУММА(ВЫБОР
		|					КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|						ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК ВсегоВыплачено,
		|			СУММА(ВЫБОР
		|					КОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
		|						ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК ОплаченныеСуммы,
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫРАЗИТЬ(СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор КАК Документ.РасходныйКассовыйОрдер)) КАК КоличествоРКО
		|		ИЗ
		|			Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
		|				ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо
		|					И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость
		|		ГДЕ
		|			ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ДокументСсылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка) КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|		ПО ЗарплатаКВыплатеОрганизаций.Ссылка = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизаций.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда
		
		Запрос.УстановитьПараметр("Организация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо.Наименование) КАК ФизЛицо,
		|	РаботникиОрганизаций.Сотрудник.Код КАК ТабельныйНомер,
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|				И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
		|			ТОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор.Представление
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ПредставлениеДокумента,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|				И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
		|			ТОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор.Номер
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК НомерРКО,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|				И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
		|			ТОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор.Дата
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ДатаРКО,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
		|			ТОГДА ""Задепонировано""
		|		КОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
		|			ТОГДА ""Выплачено""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ЗаписьОДепонировании
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|		&ДатаДокумента,
		|		Физлицо В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо
		|			ИЗ
		|				Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|			ГДЕ
		|				ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
		|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|		&ДатаДокумента,
		|		ЕСТЬNULL(Сотрудник.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|			И Организация = &Организация
		|			И Сотрудник.Физлицо В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо
		|				ИЗ
		|					Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|				ГДЕ
		|					ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ДокументСсылка)) КАК РаботникиОрганизаций
		|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо
		|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
		|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо
		|			И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечатиРеестраДепонентов()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);
	
	Запрос.УстановитьПараметр("Организация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
	|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
	|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
	|			ИНАЧЕ """"
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
	|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	|			ИНАЧЕ """"
	|		КОНЕЦ, ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо.Наименование) КАК ФизЛицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты КАК Сумма,
	|	РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	// {ОбособленныеПодразделения
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА РаботникиОрганизаций.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(РаботникиОрганизаций.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ КАК Подразделение,
	// }ОбособленныеПодразделения 
	|	РаботникиОрганизаций.Сотрудник.Код КАК ТабельныйНомер
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|		&ДатаДокумента,
	|		Физлицо В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо
	|			ИЗ
	|				Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|			ГДЕ
	|				ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		&ДатаДокумента,
	|		ЕСТЬNULL(Сотрудник.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|			И Организация = &Организация
	|			И Сотрудник.Физлицо В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо
	|				ИЗ
	|					Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|				ГДЕ
	|					ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ДокументСсылка)) КАК РаботникиОрганизаций
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ДокументСсылка
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросДляПечатиРеестраДепонентов()

// Функция формирует основной запрос по сбору данных для расчетной ведомости.
//
// Параметры
//
// Возвращаемое значение:
//   РезультатЗапроса   – результат запроса.
//
Функция СформироватьЗапросТ49()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",				НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецМесяцаПериода",	КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Ссылка",				Ссылка);
	Запрос.УстановитьПараметр("ВидСтроки",			Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление);
	Запрос.УстановитьПараметр("Приход",				ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Расход",				ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("Выплачено",			Перечисления.ВыплаченностьЗарплаты.Выплачено);

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&Организация КАК Организация,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерСтроки КАК НомерСтроки,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма КАК КВыплате,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК ФизЛицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо.Наименование КАК ФизЛицоНаименование,
	|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.Имя = """"
	|			ТОГДА """"
	|		ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.Отчество = """"
	|			ТОГДА """"
	|		ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	|	КОНЕЦ КАК ФИО,
	|	Данные.Группа,
	|	Данные.ПриоритетГруппы КАК ПриоритетГруппы,
	|	СУММА(Данные.Результат) КАК Результат,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &Выплачено
	|				И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
	|			ТОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор.Представление
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеДокумента,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|			ТОГДА ""Задепонировано""
	|		КОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
	|			ТОГДА ""Выплачено""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЗаписьОДепонировании,
	|	ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Размер КАК ТарифнаяСтавка,
	|	РаботникиОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
	|	РаботникиОрганизацииСрезПоследних.ТабельныйНомер
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость
	|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			АктуальныеПриказы.Физлицо КАК Физлицо,
	|			АктуальныеПриказы.Организация КАК Организация,
	|			АктуальныеПриказы.Сотрудник.Код КАК ТабельныйНомер,
	|			РаботникиОрганизацийСрезПоследних.Должность КАК Должность
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПоследниеДаты.Физлицо КАК Физлицо,
	|				ПоследниеДаты.Организация КАК Организация,
	|				РаботникиОрганизаций.Сотрудник КАК Сотрудник
	|			ИЗ
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
	|					РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
	|					РаботникиОрганизаций.Организация КАК Организация
	|				ИЗ
	|					РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|				ГДЕ
	|					РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|					И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
	|					И РаботникиОрганизаций.Период <= &КонецМесяцаПериода
	|					И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|					И РаботникиОрганизаций.Сотрудник.Физлицо В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо
	|							ИЗ
	|								Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|							ГДЕ
	|								ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					РаботникиОрганизаций.Сотрудник.Физлицо,
	|					РаботникиОрганизаций.Организация) КАК ПоследниеДаты
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|					ПО ПоследниеДаты.Период = РаботникиОрганизаций.Период
	|						И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
	|						И (РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|						И ПоследниеДаты.Организация = РаботникиОрганизаций.Организация
	|						И ПоследниеДаты.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо) КАК АктуальныеПриказы
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						&КонецМесяцаПериода,
	|						Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|							И Организация = &ГоловнаяОрганизация
	|							И Сотрудник.Физлицо В
	|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|									ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо
	|								ИЗ
	|									Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|								ГДЕ
	|									ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка)) КАК РаботникиОрганизацийСрезПоследних
	|				ПО АктуальныеПриказы.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РаботникиОрганизацииСрезПоследних.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|				&КонецМесяцаПериода,
	|				Организация = &ГоловнаяОрганизация
	|					И ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО
	|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|					И Сотрудник.Физлицо В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо
	|						ИЗ
	|							Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|						ГДЕ
	|							ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = &Ссылка)) КАК ПлановыеНачисленияРаботниковОрганизацииСрезПоследних
	|		ПО 	(ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Размер <> 0)
	|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Сотрудник.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&КонецМесяцаПериода,
	|				Физлицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо
	|					ИЗ
	|						Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|					ГДЕ
	|						ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = &Ссылка)) КАК ФИОФизЛицСрезПоследних
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОсновныеНачисленияРаботниковОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
	|			""Повременно"" КАК Группа,
	|			1 КАК ПриоритетГруппы,
	|			ОсновныеНачисленияРаботниковОрганизации.Результат КАК Результат
	|		ИЗ
	|			Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК ОсновныеНачисленияРаботниковОрганизации
	|		ГДЕ
	|			ОсновныеНачисленияРаботниковОрганизации.Ссылка.ПериодРегистрации = &Период
	|			И ОсновныеНачисленияРаботниковОрганизации.Ссылка.Проведен = ИСТИНА
	|			И ОсновныеНачисленияРаботниковОрганизации.Результат <> 0
	|			И ОсновныеНачисленияРаботниковОрганизации.Ссылка.Организация = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			НДФЛРасчетыСБюджетом.ФизЛицо,
	|			""НДФЛ"",
	|			3,
	|			НДФЛРасчетыСБюджетом.Налог
	|		ИЗ
	|			РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|		ГДЕ
	|			НДФЛРасчетыСБюджетом.Период МЕЖДУ &Период И &КонецМесяцаПериода
	|			И НДФЛРасчетыСБюджетом.ВидДвижения = &Приход
	|			И НДФЛРасчетыСБюджетом.ВидСтроки = &ВидСтроки
	|			И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &Организация
	|			И НДФЛРасчетыСБюджетом.ИсчисленоИзЗарплаты
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			Взаиморасчеты.Физлицо,
	|			""Другие выплаты"",
	|			3,
	|			Взаиморасчеты.СуммаВзаиморасчетов
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Взаиморасчеты
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
	|				ПО Взаиморасчеты.Физлицо = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо
	|					И Взаиморасчеты.Регистратор = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор
	|					И (&Ссылка = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость)
	|		ГДЕ
	|			Взаиморасчеты.ВидДвижения = &Расход
	|			И Взаиморасчеты.Организация = &Организация
	|			И Взаиморасчеты.СуммаВзаиморасчетов <> 0
	|			И Взаиморасчеты.Период МЕЖДУ &Период И &КонецМесяцаПериода
	|			И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо ЕСТЬ NULL 
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			РегистрНДФЛКЗачету.ФизЛицо,
	|			""Я"",
	|			5,
	|			РегистрНДФЛКЗачету.СуммаНДФЛКЗачетуОстаток
	|		ИЗ
	|			РегистрНакопления.НДФЛКЗачету.Остатки(
	|					&Период,
	|					Организация = &Организация
	|						И Физлицо В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо
	|							ИЗ
	|								Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|							ГДЕ
	|								ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = &Ссылка)) КАК РегистрНДФЛКЗачету
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СальдоНачальное.Физлицо,
	|			""Я"",
	|			5,
	|			СальдоНачальное.СуммаВзаиморасчетовОстаток
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
	|					&Период,
	|					Организация = &Организация
	|						И Физлицо В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо
	|							ИЗ
	|								Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|							ГДЕ
	|								ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = &Ссылка)) КАК СальдоНачальное) КАК Данные
	|		ПО Данные.ФизЛицо = ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерСтроки,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты,
	|	Данные.Группа,
	|	Данные.ПриоритетГруппы,
	|	РаботникиОрганизацииСрезПоследних.Должность.Наименование,
	|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.Имя = """"
	|			ТОГДА """"
	|		ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.Отчество = """"
	|			ТОГДА """"
	|		ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &Выплачено
	|				И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
	|			ТОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор.Представление
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|			ТОГДА ""Задепонировано""
	|		КОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
	|			ТОГДА ""Выплачено""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Размер,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо.Наименование,
	|	РаботникиОрганизацииСрезПоследних.ТабельныйНомер
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ПриоритетГруппы";
	
	
	
	
	
	
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	&Организация КАК Организация,
	//|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерСтроки КАК НомерСтроки,
	//|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма КАК КВыплате,
	//|	ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты,
	//|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК ФизЛицо,
	//|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо.Наименование КАК ФизЛицоНаименование,
	//|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
	//|		КОГДА ФИОФизЛицСрезПоследних.Имя = """"
	//|			ТОГДА """"
	//|		ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
	//|	КОНЕЦ + ВЫБОР
	//|		КОГДА ФИОФизЛицСрезПоследних.Отчество = """"
	//|			ТОГДА """"
	//|		ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	//|	КОНЕЦ КАК ФИО,
	//|	Данные.Группа,
	//|	Данные.ПриоритетГруппы КАК ПриоритетГруппы,
	//|	СУММА(Данные.Результат) КАК Результат,
	//|	ВЫБОР
	//|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	//|				И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
	//|			ТОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор.Представление
	//|		ИНАЧЕ """"
	//|	КОНЕЦ КАК ПредставлениеДокумента,
	//|	ВЫБОР
	//|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	//|			ТОГДА ""Задепонировано""
	//|		КОГДА СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор ЕСТЬ НЕ NULL 
	//|			ТОГДА ""Выплачено""
	//|		ИНАЧЕ """"
	//|	КОНЕЦ КАК ЗаписьОДепонировании,
	//|	ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Размер КАК ТарифнаяСтавка,
	//|	РаботникиОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
	//|	РаботникиОрганизацииСрезПоследних.Сотрудник.Код КАК ТабельныйНомер
	//|ИЗ
	//|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
	//|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо
	//|			И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			ОсновныеНачисленияРаботниковОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
	//|			""Всего начислено"" КАК Группа,
	//|			2 КАК ПриоритетГруппы,
	//|			СУММА(ОсновныеНачисленияРаботниковОрганизации.Результат) КАК Результат
	//|		ИЗ
	//|			Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК ОсновныеНачисленияРаботниковОрганизации
	//|		ГДЕ
	//|			ОсновныеНачисленияРаботниковОрганизации.Ссылка.ПериодРегистрации = &Период
	//|			И ОсновныеНачисленияРаботниковОрганизации.Ссылка.Проведен = ИСТИНА
	//|			И ОсновныеНачисленияРаботниковОрганизации.Результат <> 0
	//|			И ОсновныеНачисленияРаботниковОрганизации.Ссылка.Организация = &Организация
	//|		
	//|		СГРУППИРОВАТЬ ПО
	//|			ОсновныеНачисленияРаботниковОрганизации.Сотрудник.Физлицо,
	//|			ОсновныеНачисленияРаботниковОрганизации.ВидРасчета,
	//|			ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование
	//|		
	//|		ОБЪЕДИНИТЬ ВСЕ
	//|		
	//|		ВЫБРАТЬ
	//|			НДФЛРасчетыСБюджетом.ФизЛицо,
	////|			""НДФЛ"",
	////|			""НДФЛ"",
	////|			""НДФЛ"",
	//|			""НДФЛ"",
	//|			3,
	//|			СУММА(НДФЛРасчетыСБюджетом.Налог)
	//|		ИЗ
	//|			РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	//|		ГДЕ
	//|			НДФЛРасчетыСБюджетом.Период МЕЖДУ &Период И &КонецМесяцаПериода
	//|			И НДФЛРасчетыСБюджетом.ВидДвижения = &Приход
	//|			И НДФЛРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Начисление)
	//|			И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &Организация
	//|			И НДФЛРасчетыСБюджетом.ИсчисленоИзЗарплаты
	//|		
	//|		СГРУППИРОВАТЬ ПО
	//|			НДФЛРасчетыСБюджетом.Организация,
	//|			НДФЛРасчетыСБюджетом.ФизЛицо
	//|		
	//|		ОБЪЕДИНИТЬ ВСЕ
	//|		
	//|		ВЫБРАТЬ
	//|			Взаиморасчеты.Физлицо,
	////|			""Другие выплаты"",
	//|			""Другие выплаты"",
	////- это было(5)
	//|			3,
	////(6)
	//|			Взаиморасчеты.СуммаВзаиморасчетов
	////(7)
	//|		ИЗ
	//|			РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Взаиморасчеты
	//|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
	//|				ПО Взаиморасчеты.Физлицо = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо
	//|					И Взаиморасчеты.Регистратор = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор
	//|					И (&Ссылка = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость)
	//|		ГДЕ
	//|			Взаиморасчеты.ВидДвижения = &Расход
	//|			И Взаиморасчеты.Организация = &Организация
	//|			И Взаиморасчеты.СуммаВзаиморасчетов <> 0
	//|			И Взаиморасчеты.Период МЕЖДУ &Период И &КонецМесяцаПериода
	//|			И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо ЕСТЬ NULL 
	//|		
	//|		ОБЪЕДИНИТЬ ВСЕ
	//|		
	//|		ВЫБРАТЬ
	//|			РегистрНДФЛКЗачету.ФизЛицо,
	////|			""Начальное сальдо"",
	////|			""Начальное сальдо"",
	////|			NULL,
	//|			""Я"",
	//|			5,
	//|			РегистрНДФЛКЗачету.СуммаНДФЛКЗачетуОстаток
	//|		ИЗ
	//|			РегистрНакопления.НДФЛКЗачету.Остатки(
	//|					&Период,
	//|					Организация = &Организация
	//|						И Физлицо В
	//|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|								ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо
	//|							ИЗ
	//|								Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	//|							ГДЕ
	//|								ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = &Ссылка)) КАК РегистрНДФЛКЗачету
	//|		
	//|		ОБЪЕДИНИТЬ ВСЕ
	//|		
	//|		ВЫБРАТЬ
	//|			СальдоНачальное.Физлицо,
	////|			""Начальное сальдо"",
	////|			""Начальное сальдо"",
	////|			NULL,
	//|			""Я"",
	//|			5,
	//|			СальдоНачальное.СуммаВзаиморасчетовОстаток
	//|		ИЗ
	//|			РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
	//|					&Период,
	//|					Организация = &Организация
	//|						И Физлицо В
	//|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|								ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо
	//|							ИЗ
	//|								Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	//|							ГДЕ
	//|								ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = &Ссылка)) КАК СальдоНачальное) КАК Данные
	//|		ПО Данные.ФизЛицо = ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	//|				&КонецМесяцаПериода,
	//|				Организация = &ГоловнаяОрганизация
	//|					И ЕСТЬNULL(Сотрудник.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	//|					И Сотрудник.Физлицо В
	//|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|							ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
	//|						ИЗ
	//|							Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	//|						ГДЕ
	//|							ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка)) КАК РаботникиОрганизацииСрезПоследних
	//|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо
	//|			И (РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	//|			И (РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение = &Организация)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	//|				&КонецМесяцаПериода,
	//|				Организация = &ГоловнаяОрганизация
	//|					И ВидРасчетаИзмерение = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПОДням)
	//|					И ЕСТЬNULL(Сотрудник.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	//|					И Сотрудник.Физлицо В
	//|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|							ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
	//|						ИЗ
	//|							Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	//|						ГДЕ
	//|							ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка)) КАК ПлановыеНачисленияРаботниковОрганизацииСрезПоследних
	//|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Сотрудник.Физлицо
	//|			И (ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Размер <> 0)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	//|				&КонецМесяцаПериода,
	//|				Физлицо В
	//|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|						ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
	//|					ИЗ
	//|						Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	//|					ГДЕ
	//|						ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка)) КАК ФИОФизЛицСрезПоследних
	//|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	//|ГДЕ
	//|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой "Т-53".
//
// Возвращаемое значение:
//   Табличный документ - печатная форма
//
Функция ПечатьТ53()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗарплатаКВыплатеОрганизаций_Т53";
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	
	Макет 		= ПолучитьМакет("Т53");
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	
	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	ОбластьМакетаШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
	ОбластьМакетаШапка			= Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогПоСтранице = Макет.ПолучитьОбласть("ИтогПоЛисту");
	ОбластьМакетаПодвал 		= Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаПодвал.Параметры.РКО = "Расходный кассовый ордер № _______ от  ""___"" ___________ 20 ___ г.";
	
	// массив с двумя строками - для разбиения на страницы
    ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
	ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
	
	ВывестиДанныеРКО = Ложь;
	
	// выводим данные о руководителях организации
	Пока ВыборкаДляШапки.Следующий() Цикл
		
		ОбластьМакетаШапкаДокумента.Параметры.Подразделение = Строка(ПодразделениеОрганизации);
		ОбластьМакетаШапкаДокумента.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
 		ОбластьМакетаШапкаДокумента.Параметры.ОтчетныйПериодС  = ПериодРегистрации;
 		ОбластьМакетаШапкаДокумента.Параметры.ОтчетныйПериодПо = ?(НЕ ЗначениеЗаполнено(ПериодРегистрации),ПериодРегистрации,КонецМесяца(ПериодРегистрации));
		
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		Если ВыборкаДляШапки.Сумма <> 0 Тогда
			ОбластьМакетаШапкаДокумента.Параметры.СуммаДок = ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаДляШапки.Сумма, Валюта);
			ОбластьМакетаШапкаДокумента.Параметры.СуммаДокРублей = Цел(ВыборкаДляШапки.Сумма);
			ОбластьМакетаШапкаДокумента.Параметры.СуммаДокКопеек = (ВыборкаДляШапки.Сумма - Цел(ВыборкаДляШапки.Сумма)) * 100
		КонецЕсли;
		Если ВыборкаДляШапки.ОплаченоПолностью Тогда
			Если ВыборкаДляШапки.ВсегоДепонировано > 0 Тогда
				ОбластьМакетаПодвал.Параметры.ВсегоДепонировано = ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаДляШапки.ВсегоДепонировано, Валюта);
			Иначе 
				ОбластьМакетаПодвал.Параметры.ВсегоДепонировано = "---";
			КонецЕсли;
			Если ВыборкаДляШапки.ВсегоВыплачено > 0 Тогда
				ОбластьМакетаПодвал.Параметры.ВсегоВыплачено = ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаДляШапки.ВсегоВыплачено, Валюта);
			Иначе 
				ОбластьМакетаПодвал.Параметры.ВсегоВыплачено = "---";
			КонецЕсли;
			ВывестиДанныеРКО = ВыборкаДляШапки.КоличествоРКО = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьМакетаШапкаДокумента);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	ВыведеноСтраниц = 1; ВыведеноСтрок = 0; ИтогоНаСтранице = 0;
    // выводим данные по строкам документа.
	Пока ВыборкаРаботники.Следующий() Цикл
	
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаРаботники);
		СокращенноеПредставлениеДокумента = "";
		Если ЗначениеЗаполнено(ВыборкаРаботники.НомерРКО) Тогда
			СокращенноеПредставлениеДокумента = "№" + ВыборкаРаботники.НомерРКО + " от " + Формат(ВыборкаРаботники.ДатаРКО, "ДЛФ=Д");
		КонецЕсли;
		ОбластьМакетаСтрока.Параметры.СокращенноеПредставлениеДокумента = СокращенноеПредставлениеДокумента;
		Если ВывестиДанныеРКО И Не ПустаяСтрока(ВыборкаРаботники.ПредставлениеДокумента) Тогда
			ОбластьМакетаПодвал.Параметры.РКО = ВыборкаРаботники.ПредставлениеДокумента;
			ВывестиДанныеРКО = Ложь;
		КонецЕсли;
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			
			ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
			ТабДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			ВыведеноСтраниц = ВыведеноСтраниц + 1;
			ИтогоНаСтранице = 0;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		ИтогоНаСтранице = ИтогоНаСтранице + ВыборкаРаботники.Сумма;

	КонецЦикла;

 	ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
	ОбластьМакетаПодвал.Параметры.КоличествоЛистов = ?(ВыведеноСтрок = 0,"",ВыведеноСтраниц + 1);
	
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
	ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакетаСтрока.Параметры.Количество() Цикл
		ОбластьМакетаСтрока.Параметры.Установить(Сч - 1,""); 
	КонецЦикла;
	ОбластьМакетаСтрока.Параметры.Физлицо = " " + Символы.ПС + " ";
	Пока ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, Ложь) Цикл
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
	КонецЦикла;
	ТабДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	Возврат ТабДокумент;

	
КонецФункции // ПечатьТ53()

// Функция формирует табличный документ с печатной формой "Т-49".
//
// Возвращаемое значение:
//   Табличный документ - печатная форма
//
Функция ПечатьТ49()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб         = Истина;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗарплатаКВыплатеОрганизации_Т49";
	ТабДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	Макет = ПолучитьМакет("Т49");

	// Сумма по документу.
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	// получаем данные по работникам для печати
	ВыборкаПоФЛ = СформироватьЗапросТ49().Выбрать();

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ИтоговаяКомпенсация = Зарплата.Итог("КомпенсацияЗаЗадержкуЗарплаты");
	ВыводитьКомпенсацию = ИтоговаяКомпенсация > 0; 
	
	ВыводитьКомпенсацию = Зарплата.Итог("КомпенсацияЗаЗадержкуЗарплаты") > 0; 
	ОбластьМакетаШапка			= Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаШапкаТаблицы	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакетаПодвал			= Макет.ПолучитьОбласть("Подвал");
	ОбластьСтрока				= Макет.ПолучитьОбласть("Строка");
	ОбластьПодвалСтр			= Макет.ПолучитьОбласть("ИтогоПоСтранице");
	
	Если НЕ ВыводитьКомпенсацию Тогда
		//удаляем колонку компенсации
		ОбластьМакетаШапка.УдалитьОбласть(ОбластьМакетаШапка.Область(1,23,ОбластьМакетаШапка.ВысотаТаблицы,23),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		ОбластьМакетаШапкаТаблицы.УдалитьОбласть(ОбластьМакетаШапкаТаблицы.Область(1,23,ОбластьМакетаШапкаТаблицы.ВысотаТаблицы,23),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		ОбластьМакетаПодвал.УдалитьОбласть(ОбластьМакетаПодвал.Область(1,23,ОбластьМакетаПодвал.ВысотаТаблицы,23),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		ОбластьСтрока.УдалитьОбласть(ОбластьСтрока.Область(1,23,ОбластьСтрока.ВысотаТаблицы,23),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		ОбластьПодвалСтр.УдалитьОбласть(ОбластьПодвалСтр.Область(1,23,ОбластьПодвалСтр.ВысотаТаблицы,23),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьСтрока);
	ВыводимыеОбласти.Добавить(ОбластьПодвалСтр);
	
	ОбластьМакетаПодвал.Параметры.РКО = "Расходный кассовый ордер № _______ от  ""___"" ___________ 20 ___ г.";
	ОбластьМакетаПодвал.Параметры.ИтогоПовременно		= 0;
	ОбластьМакетаПодвал.Параметры.ИтогоСдельно			= 0;
	ОбластьМакетаПодвал.Параметры.ИтогоДругое			= 0;
	ОбластьМакетаПодвал.Параметры.ИтогоВсегоНачислено	= 0;
	ОбластьМакетаПодвал.Параметры.ИтогоНДФЛ				= 0;
	ОбластьМакетаПодвал.Параметры.ДругоеУдержано		= 0;
	ОбластьМакетаПодвал.Параметры.ДолгЗаОрганизацией	= 0;
	ОбластьМакетаПодвал.Параметры.ДолгЗаРаботником		= 0;
	ОбластьМакетаПодвал.Параметры.ИтогоКВыплате			= 0;
	// Начинаем новый отсчет итогов по странице
	ОбластьПодвалСтр.Параметры.Повременно			= 0;
	ОбластьПодвалСтр.Параметры.Сдельно				= 0;
	ОбластьПодвалСтр.Параметры.Другое				= 0;
	ОбластьПодвалСтр.Параметры.ВсегоНачислено		= 0;
	ОбластьПодвалСтр.Параметры.Аванс				= 0;
	ОбластьПодвалСтр.Параметры.НДФЛ					= 0;
	ОбластьПодвалСтр.Параметры.ИЛ					= 0;
	ОбластьПодвалСтр.Параметры.ДругоеУдержано		= 0;
	ОбластьПодвалСтр.Параметры.ДолгЗаОрганизацией	= 0;
	ОбластьПодвалСтр.Параметры.ДолгЗаРаботником		= 0;
	ОбластьПодвалСтр.Параметры.КВыплате				= 0;
		
	Если ВыводитьКомпенсацию Тогда
		ОбластьМакетаПодвал.Параметры.ИтогоКомпенсацияЗаЗадержкуЗарплаты = 0;
		ОбластьПодвалСтр.Параметры.КомпенсацияЗаЗадержкуЗарплаты			= 0;
	КонецЕсли;
	// заполнение и вывод шапки отчета
	ОбластьМакетаШапка.Параметры.ОтчетныйПериодС  = ПериодРегистрации;
	ОбластьМакетаШапка.Параметры.ОтчетныйПериодПо = ?(НЕ ЗначениеЗаполнено(ПериодРегистрации),ПериодРегистрации,КонецМесяца(ПериодРегистрации));
	ОбластьМакетаШапка.Параметры.НомерДок		  = Номер;
	ОбластьМакетаШапка.Параметры.ДатаДок		  = Дата;
	
	ВывестиДанныеРКО = Ложь;
	Если ВыборкаДляШапки.Следующий() Тогда
		
		ОбластьМакетаШапка.Параметры.Подразделение = Строка(ПодразделениеОрганизации);
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки);
	
		Если ВыборкаДляШапки.Сумма <> 0 Тогда
			ОбластьМакетаШапка.Параметры.СуммаВсегоПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаДляШапки.Сумма, ВалютаРегламентированногоУчета);
			ОбластьМакетаШапка.Параметры.СуммаДокРублей		= Цел(ВыборкаДляШапки.Сумма);
			ОбластьМакетаШапка.Параметры.СуммаДокКопеек		= (ВыборкаДляШапки.Сумма - Цел(ВыборкаДляШапки.Сумма)) * 100;
			ОбластьМакетаПодвал.Параметры.ИтогоКВыплате		= Зарплата.Итог("Сумма");
			Если ВыводитьКомпенсацию Тогда
				ОбластьМакетаПодвал.Параметры.ИтогоКомпенсацияЗаЗадержкуЗарплаты = ИтоговаяКомпенсация;
			КонецЕсли;
		КонецЕсли; 
		
		Если ВыборкаДляШапки.ОплаченоПолностью Тогда
			Если ВыборкаДляШапки.ВсегоДепонировано > 0 Тогда
				ОбластьМакетаПодвал.Параметры.ВсегоДепонировано = ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаДляШапки.ВсегоДепонировано, ВалютаРегламентированногоУчета);
			Иначе 
				ОбластьМакетаПодвал.Параметры.ВсегоДепонировано = "---";
			КонецЕсли;
			Если ВыборкаДляШапки.ВсегоВыплачено > 0 Тогда
				ОбластьМакетаПодвал.Параметры.ВсегоВыплачено = ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаДляШапки.ВсегоВыплачено, ВалютаРегламентированногоУчета);
			Иначе 
				ОбластьМакетаПодвал.Параметры.ВсегоВыплачено = "---";
			КонецЕсли;
			ВывестиДанныеРКО = ВыборкаДляШапки.КоличествоРКО = 1;
		КонецЕсли;
		
	КонецЕсли; 
	
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	НомерПП = 1;
	ВсегоСтрокДокумента = Зарплата.Количество();
		
	Пока ВыборкаПоФЛ.СледующийПоЗначениюПоля("ФизЛицо") Цикл
		
		ОбластьСтрока.Параметры.Заполнить(ВыборкаПоФЛ);
		Если ВывестиДанныеРКО И Не ПустаяСтрока(ВыборкаПоФЛ.ПредставлениеДокумента) Тогда
			ОбластьМакетаПодвал.Параметры.РКО = ВыборкаПоФЛ.ПредставлениеДокумента;
			ВывестиДанныеРКО = Ложь;
		КонецЕсли;
		
		// поправим ФИО
		Если ВыборкаПоФЛ.ФИО = Null Тогда
			ОбластьСтрока.Параметры.ФИО	= ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыборкаПоФЛ.ФизЛицоНаименование);
		КонецЕсли;
		ОбластьСтрока.Параметры.Повременно			= 0;
		ОбластьСтрока.Параметры.Сдельно				= 0;
		ОбластьСтрока.Параметры.Другое				= 0;
		ОбластьСтрока.Параметры.НДФЛ				= 0;
		ОбластьСтрока.Параметры.ВсегоНачислено		= 0;
		ОбластьСтрока.Параметры.ДругоеУдержано		= 0;
		ОбластьСтрока.Параметры.ДолгЗаОрганизацией	= 0;
		ОбластьСтрока.Параметры.ДолгЗаРаботником	= 0;
		ВсегоУдержано								= 0;
		НачальноеСальдо								= 0;
		КонечноеСальдо								= 0;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и НомерПП = ВсегоСтрокДокумента Тогда
			//все строки отчета перебрали, они все еще умещаются на странице
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.Вывести(ОбластьПодвалСтр);
			
			// обнулим итоги по странице
			ОбластьПодвалСтр.Параметры.Повременно			= 0;
			ОбластьПодвалСтр.Параметры.Другое				= 0;
			ОбластьПодвалСтр.Параметры.ВсегоНачислено		= 0;
			ОбластьПодвалСтр.Параметры.НДФЛ					= 0;
			ОбластьПодвалСтр.Параметры.ИЛ					= 0;
			ОбластьПодвалСтр.Параметры.ДругоеУдержано		= 0;
			ОбластьПодвалСтр.Параметры.ДолгЗаОрганизацией	= 0;
			ОбластьПодвалСтр.Параметры.ДолгЗаРаботником		= 0;
			ОбластьПодвалСтр.Параметры.КВыплате				= 0;
			Если ВыводитьКомпенсацию Тогда
				ОбластьПодвалСтр.Параметры.КомпенсацияЗаЗадержкуЗарплаты = 0;
			КонецЕсли;
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
		КонецЕсли;
		
		Пока ВыборкаПоФЛ.Следующий() Цикл
			
			// обработка расчетов
			Если ВыборкаПоФЛ.Группа = "Повременно" Тогда
				
				ОбластьСтрока.Параметры.Повременно				= ВыборкаПоФЛ.Результат;
				// подсчет итогов по странице и ведомости
				ОбластьМакетаПодвал.Параметры.ИтогоПовременно	= ОбластьМакетаПодвал.Параметры.ИтогоПовременно	+ ВыборкаПоФЛ.Результат;
				ОбластьПодвалСтр.Параметры.Повременно			= ОбластьПодвалСтр.Параметры.Повременно			+ ВыборкаПоФЛ.Результат;
				
				ОбластьСтрока.Параметры.ВсегоНачислено			  = ОбластьСтрока.Параметры.ВсегоНачислено		+ ВыборкаПоФЛ.Результат;
				ОбластьМакетаПодвал.Параметры.ИтогоВсегоНачислено = ОбластьМакетаПодвал.Параметры.ИтогоВсегоНачислено + ВыборкаПоФЛ.Результат;
				ОбластьПодвалСтр.Параметры.ВсегоНачислено		  = ОбластьПодвалСтр.Параметры.ВсегоНачислено		+ ВыборкаПоФЛ.Результат;
				
			ИначеЕсли ВыборкаПоФЛ.Группа = "Другие выплаты" Тогда
				
				ОбластьСтрока.Параметры.ДругоеУдержано			= ОбластьСтрока.Параметры.ДругоеУдержано		+ ВыборкаПоФЛ.Результат;
				ОбластьМакетаПодвал.Параметры.ДругоеУдержано	= ОбластьМакетаПодвал.Параметры.ДругоеУдержано	+ ВыборкаПоФЛ.Результат;
				ОбластьПодвалСтр.Параметры.ДругоеУдержано		= ОбластьПодвалСтр.Параметры.ДругоеУдержано		+ ВыборкаПоФЛ.Результат;
				ВсегоУдержано = ВсегоУдержано + ВыборкаПоФЛ.Результат;
				
			ИначеЕсли ВыборкаПоФЛ.Группа = "НДФЛ" Тогда
				
				ОбластьСтрока.Параметры.НДФЛ					= ВыборкаПоФЛ.Результат;
				ОбластьМакетаПодвал.Параметры.ИтогоНДФЛ			= ОбластьМакетаПодвал.Параметры.ИтогоНДФЛ		+ ВыборкаПоФЛ.Результат;
				ОбластьПодвалСтр.Параметры.НДФЛ					= ОбластьПодвалСтр.Параметры.НДФЛ				+ ВыборкаПоФЛ.Результат;
				
				ВсегоУдержано = ВсегоУдержано + ВыборкаПоФЛ.Результат;
				
			ИначеЕсли ВыборкаПоФЛ.Группа = "Другие удержания" Тогда
				
				ОбластьСтрока.Параметры.ДругоеУдержано			= ОбластьСтрока.Параметры.ДругоеУдержано		+ ВыборкаПоФЛ.Результат;
				ОбластьМакетаПодвал.Параметры.ДругоеУдержано	= ОбластьМакетаПодвал.Параметры.ДругоеУдержано	+ ВыборкаПоФЛ.Результат;
				ОбластьПодвалСтр.Параметры.ДругоеУдержано		= ОбластьПодвалСтр.Параметры.ДругоеУдержано		+ ВыборкаПоФЛ.Результат;
				
				ВсегоУдержано = ВсегоУдержано + ВыборкаПоФЛ.Результат;
				
			ИначеЕсли ВыборкаПоФЛ.Группа = "Я" Тогда // Конечное сальдо
				НачальноеСальдо = НачальноеСальдо + ВыборкаПоФЛ.Результат;
			КонецЕсли;
			
		КонецЦикла;
		
		// итого к выплате по странице
		ОбластьПодвалСтр.Параметры.КВыплате						= ОбластьПодвалСтр.Параметры.КВыплате				+ ОбластьСтрока.Параметры.КВыплате;

		КонечноеСальдо = НачальноеСальдо + ОбластьСтрока.Параметры.ВсегоНачислено - ВсегоУдержано - ОбластьСтрока.Параметры.КВыплате;
		Если КонечноеСальдо > 0 Тогда
			
			ОбластьСтрока.Параметры.ДолгЗаОрганизацией			= КонечноеСальдо;
			ОбластьМакетаПодвал.Параметры.ДолгЗаОрганизацией	= ОбластьМакетаПодвал.Параметры.ДолгЗаОрганизацией	+ КонечноеСальдо;
			ОбластьПодвалСтр.Параметры.ДолгЗаОрганизацией		= ОбластьПодвалСтр.Параметры.ДолгЗаОрганизацией		+ КонечноеСальдо;
			
		Иначе
			
			ОбластьСтрока.Параметры.ДолгЗаРаботником			= 0 - КонечноеСальдо;
			ОбластьМакетаПодвал.Параметры.ДолгЗаРаботником		= ОбластьМакетаПодвал.Параметры.ДолгЗаРаботником	- КонечноеСальдо;
			ОбластьПодвалСтр.Параметры.ДолгЗаРаботником			= ОбластьПодвалСтр.Параметры.ДолгЗаРаботником		- КонечноеСальдо;
			
		КонецЕсли; 
		
		ОбластьСтрока.Параметры.НомерПП  = НомерПП;
		
		ТабДокумент.Вывести(ОбластьСтрока);
		НомерПП = НомерПП + 1;
		
	КонецЦикла;
		
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьСтрока);
	ВыводимыеОбласти.Добавить(ОбластьПодвалСтр);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьСтрока.Параметры.Количество() Цикл
		ОбластьСтрока.Параметры.Установить(Сч - 1,"");
	КонецЦикла;
	ОбластьСтрока.Параметры.Физлицо = " " + Символы.ПС + " ";
	Пока ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, Ложь) Цикл
		ТабДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьПодвалСтр);
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТ49()

// Функция формирует табличный документ с печатной формой "РКО".
//
// Возвращаемое значение:
//   Табличный документ - печатная форма
//
Функция ПечатьРКО()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗарплатаКВыплатеОрганизаций_РКО";
	
	Макет         = ПолучитьОбщийМакет("КО2");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	// счета учета
	ОбластьМакета.Параметры.ДебетСубСчет  = "70";
	ОбластьМакета.Параметры.КредитСубСчет = "50.01";
	
	// данные об организации
	СведенияОбОрганизации     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,ЮридическийАдрес,Телефоны,");
	ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	
	// выводим подписи ответственных лиц
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, Дата);

	ОбластьМакета.Параметры.ФИОРуководителя       = Руководители.Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;

	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Руководители.ГлавныйБухгалтер;
	ОбластьМакета.Параметры.ФИОКассира            = Руководители.Кассир;
	
	// прочие поля
	ПредставлениеДокумента = "Платежная ведомость № " + Номер + " от " + Формат(Дата,"ДЛФ=DD");
	ОбластьМакета.Параметры.Основание             = ПредставлениеДокумента;
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// получаем данные для печати
	ВыборкаРаботники = СформироватьЗапросДляПечатиРКО().Выбрать();
	
	Пока ВыборкаРаботники.Следующий() Цикл

		Если ВыборкаРаботники.ВыводитьРКО Тогда
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
			ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаРаботники.Сумма, Валюта);
			ОбластьМакета.Параметры.РеквизитыДокументаУдостоверяющегоЛичность = ?(ВыборкаРаботники.НетДанныхДокумента,"",
						ВыборкаРаботники.ДокументВидНаименование + " серия " +
						ВыборкаРаботники.ДокументСерия       + ", номер " +
						ВыборкаРаботники.ДокументНомер       + ", выдан " +
						Формат(ВыборкаРаботники.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
						ВыборкаРаботники.ДокументКемВыдан);

			ТабДокумент.Вывести(ОбластьМакета);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		Иначе
			
			Если Не ПустаяСтрока(ПредставлениеДокумента) Тогда
				Сообщить("Печать документа " + ПредставлениеДокумента + ":");
				ПредставлениеДокумента = "";
			КонецЕсли;
			
			Сообщить(Символы.Таб + "по строке № " + ВыборкаРаботники.НомерСтроки +  
									ВыборкаРаботники.СостояниеСтроки + ВыборкаРаботники.ПредставлениеДокумента);
		КонецЕсли;
	
	КонецЦикла;

	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		Если Не ПустаяСтрока(ПредставлениеДокумента) Тогда
			Сообщить("Печать документа " + ПредставлениеДокумента + ":");
		КонецЕсли;
		Сообщить(Символы.Таб + "не обнаружено невыданных сумм, помеченных к выплате!");
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьРКО()

// Функция формирует табличный документ с печатной формой Реестр депонированных сумм.
//
// Возвращаемое значение:
//   Табличный документ - печатная форма
//
Функция ПечатьРеестр()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗарплатаКВыплатеОрганизаций_Реестр";
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	
	Макет 		= ПолучитьМакет("Реестр");
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечатиРеестраДепонентов().Выбрать();
	
	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	ОбластьМакетаШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
	ОбластьМакетаШапка			= Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогПоСтранице = Макет.ПолучитьОбласть("ИтогПоЛисту");
	ОбластьМакетаПодвал 		= Макет.ПолучитьОбласть("Подвал");
	
	// массив с двумя строками - для разбиения на страницы
    ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
	ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
	
	// выводим данные о руководителях организации
	Пока ВыборкаДляШапки.Следующий() Цикл
		ОбластьМакетаШапкаДокумента.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаДляШапки.Организация, ВыборкаДляШапки.ДатаДок);
		ОбластьМакетаШапкаДокумента.Параметры.НазваниеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаДляШапки);
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьМакетаШапкаДокумента);
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	ВыведеноСтраниц = 1; ВыведеноСтрок = 0; ИтогоНаСтранице = 0; Итого = 0;
    // выводим данные по строкам документа.
	Пока ВыборкаРаботники.Следующий() Цикл
	
		ОбластьМакетаСтрока.Параметры.Подразделение = Строка(ВыборкаРаботники.ПодразделениеОрганизации);
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаРаботники);
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			
			ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
			ТабДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			ВыведеноСтраниц = ВыведеноСтраниц + 1;
			ИтогоНаСтранице = 0;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		ИтогоНаСтранице = ИтогоНаСтранице + ВыборкаРаботники.Сумма;
		Итого = Итого + ВыборкаРаботники.Сумма;

	КонецЦикла;

 	Если Зарплата.Количество() = 0 Тогда
 		ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
 		ОбластьМакетаСтрока.Параметры.Физлицо = " " + Символы.ПС + " ";
 		Пока ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, Ложь) Цикл
 			ТабДокумент.Вывести(ОбластьМакетаСтрока);
 		КонецЦикла;
	ИначеЕсли ВыведеноСтрок = 0 Тогда 
		ТабДокумент.Очистить();
	КонецЕсли;

	Если ТабДокумент.ВысотаТаблицы > 0 Тогда
		ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
		ТабДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
		ОбластьМакетаПодвал.Параметры.Итого = Итого;
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	Иначе	
		Сообщить("Печать документа Платежная ведомость № " + Номер + " от " + Формат(Дата,"ДЛФ=DD") + ":");
		Сообщить(Символы.Таб + "не обнаружено задепонированных сумм!");
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьРеестр()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Т53" тогда
		
		ТабДокумент = ПечатьТ53();
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Платежная ведомость Т-53 "), НепосредственнаяПечать);
		
	ИначеЕсли ИмяМакета = "Т49" тогда
		
		ТабДокумент = ПечатьТ49();
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Расчетно-платежная ведомость Т-49 "), НепосредственнаяПечать);
		
	ИначеЕсли ИмяМакета = "РКО" тогда
		
		ТабДокумент = ПечатьРКО();
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Расходные кассовые ордера "), НепосредственнаяПечать);
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "Реестр" тогда
		
		ТабДокумент = ПечатьРеестр();
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Реестр депонированных сумм "), НепосредственнаяПечать);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // Печать

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	Если Не СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
		СтруктураПечатныхФорм.Вставить("Т53","Форма Т-53");
		СтруктураПечатныхФорм.Вставить("Т49","Форма Т-49");
		СтруктураПечатныхФорм.Вставить("РКО","РКО");
		СтруктураПечатныхФорм.Вставить("Реестр","Реестр депонированных сумм");
	КонецЕсли; 
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Рассчитывает "усредненную" 1/300 часть ставки рефинансирования ЦБ
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   число - коэффициент, на который следует умножать сумму выплаты
//
Функция РассчитатьПроцентКомпенсации() Экспорт

	Если ДнейНеВыплаты = 0 Тогда
	    Возврат 0
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РАЗНОСТЬДАТ(ПериодыИзмененияСтавки.ДатаC, ПериодыИзмененияСтавки.ДатаПо, ДЕНЬ) * ПериодыИзмененияСтавки.Размер / 300 / 100), 0) КАК ПроцентКомпенсации
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА СтавкаРефинансированияЦБ.Период > &ДатаВыплаты
	|				ТОГДА СтавкаРефинансированияЦБ.Период
	|			ИНАЧЕ &ДатаВыплаты
	|		КОНЕЦ КАК ДатаC,
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА МИНИМУМ(СледующаяДата.Период) >= &ДатаДокумента
	|					ТОГДА &ДатаДокумента
	|				ИНАЧЕ МИНИМУМ(СледующаяДата.Период)
	|			КОНЕЦ, &ДатаДокумента) КАК ДатаПо,
	|		СтавкаРефинансированияЦБ.Размер КАК Размер
	|	ИЗ
	|		РегистрСведений.СтавкаРефинансированияЦБ КАК СтавкаРефинансированияЦБ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкаРефинансированияЦБ КАК СледующаяДата
	|			ПО СтавкаРефинансированияЦБ.Период < СледующаяДата.Период
	|	ГДЕ
	|		СтавкаРефинансированияЦБ.Период <= &ДатаДокумента
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтавкаРефинансированияЦБ.Размер,
	|		СтавкаРефинансированияЦБ.Период
	|	
	|	ИМЕЮЩИЕ
	|		ЕСТЬNULL(МИНИМУМ(СледующаяДата.Период), &ДатаДокумента) >= &ДатаВыплаты) КАК ПериодыИзмененияСтавки";
	
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ДатаВыплаты", Дата - 86400 * ДнейНеВыплаты);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить()[0].ПроцентКомпенсации

КонецФункции // РассчитатьПроцентКомпенсации()

Процедура Автозаполнение(ВариантЗаполнения) Экспорт

	Если Организация.Пустая() Тогда 
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!");
		Возврат;
	КонецЕсли;
	
	Зарплата.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("парамОрганизация",			Организация);
	Запрос.УстановитьПараметр("парамДата",					Макс(Дата,КонецМесяца(ПериодРегистрации) + 1));
	Запрос.УстановитьПараметр("парамНеВыплачено",			Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
	Запрос.УстановитьПараметр("парамМесяц",					ПериодРегистрации);
	
	Если Не ПодразделениеОрганизации.Пустая() Тогда
		Запрос.УстановитьПараметр("ВнутреннееСовместительство",	Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		Запрос.УстановитьПараметр("Прием",						Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
		Запрос.УстановитьПараметр("парамПодразделениеОрганизации",ПодразделениеОрганизации);
		Запрос.УстановитьПараметр("парамГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСРаботникамиОрганизацииОстатки.Физлицо,
	|	0 КАК Сумма,
	|	0 КАК КомпенсацияЗаЗадержкуЗарплаты,
	|	&парамНеВыплачено КАК ВыплаченностьЗарплаты,
	|	Истина КАК Авторасчет
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
	|		&парамДата,
	|		Организация = &парамОрганизация
	|		    И ПериодВзаиморасчетов = &парамМесяц";
	Если Не ПодразделениеОрганизации.Пустая() Тогда
		Запрос.Текст = Запрос.Текст + "
		|		    И Физлицо В
		|		        (ВЫБРАТЬ
		|		            РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо
		|		        ИЗ
		|		            (ВЫБРАТЬ
		|		                РаботникиОрганизаций.Сотрудник КАК Сотрудник
		|		            ИЗ
		|		                (ВЫБРАТЬ
		|		                    МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
		|		                    РаботникиОрганизаций.Сотрудник КАК Сотрудник
		|		                ИЗ
		|		                    РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		                ГДЕ
		|		                    РаботникиОрганизаций.Организация = &парамГоловнаяОрганизация
		|		                    И РаботникиОрганизаций.ПричинаИзмененияСостояния = &Прием
		|		                    И РаботникиОрганизаций.Период <= &парамДата
		|		                    И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|		                СГРУППИРОВАТЬ ПО
		|		                    РаботникиОрганизаций.Сотрудник) КАК ПоследниеДаты 
		|		                ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		                    ПО  ПоследниеДаты.Период = РаботникиОрганизаций.Период
		|	                            И РаботникиОрганизаций.ПричинаИзмененияСостояния = &Прием
		|	                            И (РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|	                                )
		|	                            И ПоследниеДаты.Сотрудник = РаботникиОрганизаций.Сотрудник) КАК АктуальныеПриказы 
		|	            	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|					&парамДата, 
		|					Организация = &парамГоловнаяОрганизация
		|		            	И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|		                     ) КАК РаботникиОрганизацийСрезПоследних
		|		                ПО АктуальныеПриказы.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
		|		        ГДЕ
		|		            РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделениеОрганизации)
		|		)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|) КАК ВзаиморасчетыСРаботникамиОрганизацииОстатки
	|ГДЕ
	|	ВзаиморасчетыСРаботникамиОрганизацииОстатки.СуммаВзаиморасчетовОстаток > 0
	
	|УПОРЯДОЧИТЬ ПО
	|	ВзаиморасчетыСРаботникамиОрганизацииОстатки.Физлицо.Наименование";
	

		
	Если ВариантЗаполнения = "ОстаткиНаКонецМесяца" Тогда // пока другого варианта автозаполнения в этой процедуре нет
		
		Зарплата.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры // Автозаполнение

Процедура РассчитатьСуммыКВыплатеПоСписку() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамОрганизация",	Организация);
	Запрос.УстановитьПараметр("парамМесяц",			ПериодРегистрации);
	Запрос.УстановитьПараметр("парамПроцент",		РассчитатьПроцентКомпенсации());
	Запрос.УстановитьПараметр("парамНеВыплачено",	Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
	Запрос.УстановитьПараметр("парамСсылка",		Ссылка);
	Запрос.УстановитьПараметр("парамДата",			Макс(Дата,КонецМесяца(ПериодРегистрации) + 1));
	
	ДанныеРеглУчетаТекст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
	|	ВзаиморасчетыСРаботникамиОрганизацииОстатки.СуммаВзаиморасчетовОстаток КАК Сумма,
	|	ВзаиморасчетыСРаботникамиОрганизацииОстатки.СуммаВзаиморасчетовОстаток * &парамПроцент КАК КомпенсацияЗаЗадержкуЗарплаты,
	|	&парамНеВыплачено КАК ВыплаченностьЗарплаты
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
	|		&парамДата,
	|		Организация = &парамОрганизация
	|		    И ПериодВзаиморасчетов = &парамМесяц
	|		    И Физлицо В
	|		        (ВЫБРАТЬ
	|		            ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
	|		        ИЗ
	|		            Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		        ГДЕ
	|		            ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &парамСсылка)) КАК ВзаиморасчетыСРаботникамиОрганизацииОстатки
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ВзаиморасчетыСРаботникамиОрганизацииОстатки.Физлицо
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &парамСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерСтроки";
	Запрос.Текст = ДанныеРеглУчетаТекст;
		
	Зарплата.Загрузить(Запрос.Выполнить().Выгрузить());
	

КонецПроцедуры //  РассчитатьСуммыКВыплатеПоСписку

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Зарплата,, "Физлицо");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

