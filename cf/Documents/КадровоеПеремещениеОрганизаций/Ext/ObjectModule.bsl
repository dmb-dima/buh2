Перем мДлинаСуток;
Перем ВведенКопированием Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("РеглВалюта",		Константы.ВалютаРегламентированногоУчета.Получить());

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	КадровоеПеремещениеОрганизаций.Номер КАК НомерДок,
		|	КадровоеПеремещениеОрганизаций.Дата КАК ДатаДок,
		|	КадровоеПеремещениеОрганизаций.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	КадровоеПеремещениеОрганизаций.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ВЫБОР
		|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование
		|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ
		|	КОНЕЦ КАК ФИОРуководителя
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = &Руководитель)
		|			И КадровоеПеремещениеОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	КадровоеПеремещениеОрганизаций.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ФИОФизЛицСрезПоследних.Фамилия ЕСТЬ NULL 
		|			ТОГДА Док.Сотрудник.Наименование
		|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
		|	КОНЕЦ КАК Работник,
		|	Работники.Сотрудник.Код КАК ТабельныйНомер,
		|	Док.НомерСтроки КАК НомерСтроки,
		|	Док.ПодразделениеОрганизации,
		|	Работники.ПодразделениеОрганизации КАК ПрежнееПодразделениеОрганизации,
		// {ОбособленныеПодразделения
		|	ВЫБОР
		|		КОГДА Док.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
		|			ТОГДА Док.ПодразделениеОрганизации.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(Док.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200))
		|	КОНЕЦ КАК НовоеПодразделение,
		|	Работники.ПодразделениеОрганизацииНаименование КАК ПрежнееПодразделение,
		// }ОбособленныеПодразделения 
		|	Док.Должность.Наименование КАК НоваяДолжность,
		|	Работники.ДолжностьНаименование КАК ПрежняяДолжность,
		|	ЕСТЬNULL(КадровоеПеремещениеОрганизацийОсновныеНачисления.Размер, 0) КАК ОкладТарифнаяСтавка
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|		&ДатаДокумента,
		|		ФизЛицо В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				КадровыеПеремещенияОрганизацийРаботники.Сотрудник.Физлицо
		|			ИЗ
		|				Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровыеПеремещенияОрганизацийРаботники
		|			ГДЕ
		|				КадровыеПеремещенияОрганизацийРаботники.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
		|		ПО Док.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуОрганизацииРаботники
		|		ПО Док.Сотрудник = ПриемНаРаботуОрганизацииРаботники.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокДат.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизации.ПодразделениеОрганизации,
		// {ОбособленныеПодразделения
		|			ВЫБОР
		|				КОГДА РаботникиОрганизации.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
		|					ТОГДА РаботникиОрганизации.ПодразделениеОрганизации.Наименование
		|				ИНАЧЕ ВЫРАЗИТЬ(РаботникиОрганизации.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200))
		|			КОНЕЦ КАК ПодразделениеОрганизацииНаименование,
		// }ОбособленныеПодразделения 
		|			РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование
		|		ИЗ
		|			(ВЫБРАТЬ
		|				РаботникиВнутри.Сотрудник КАК Сотрудник,
		|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК Док
		|					ПО РаботникиВнутри.Сотрудник = Док.Сотрудник
		|						И РаботникиВнутри.Период < Док.ДатаНачала
		|			ГДЕ
		|				Док.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиВнутри.Сотрудник) КАК СписокДат
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|				ПО СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
		|					И СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период) КАК Работники
		|		ПО Док.Сотрудник = Работники.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК КадровоеПеремещениеОрганизацийОсновныеНачисления
		|		ПО Док.Ссылка = КадровоеПеремещениеОрганизацийОсновныеНачисления.Ссылка
		|			И Док.Сотрудник = КадровоеПеремещениеОрганизацийОсновныеНачисления.Сотрудник
		|ГДЕ
		|	Док.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

# Если Клиент Тогда

// Функция формирует табличный документ с печатной формой "Т-5а",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ5а()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КадровыеПеремещенияОрганизаций_Т5а";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
    ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;

	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет("Т5а_от_5_1_2004");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботник"); // строка работника

	// массив с двумя строками - для разбиения на страницы
    ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
    // выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки);// Для подвала.
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.

	ВыведеноСтрок = 0;
	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл

		// Данные по работнику.
		ОбластьМакета.Параметры.ПрежнееПодразделение = Строка(ВыборкаРаботники.ПрежнееПодразделениеОрганизации);
		ОбластьМакета.Параметры.НовоеПодразделение   = Строка(ВыборкаРаботники.ПодразделениеОрганизации);
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.ОкладТарифнаяСтавка = "" + Формат(ВыборкаРаботники.ОкладТарифнаяСтавка,"ЧЦ=15; ЧДЦ=2") + Символы.ПС;

		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// если не было ни одного сотрудника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = ОбластьМакетаШапка.ВысотаТаблицы Тогда
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТ5а()	

// Функция формирует табличный документ с печатной формой "Т-5",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ5()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КадровыеПеремещенияОрганизаций_Т5";
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет("Т5_от_5_1_2004");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника

	// выводим данные о руководителях организации
    Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
	КонецЕсли;
	
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВыборкаРаботники.НомерСтроки
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Данные по работнику.
		ОбластьМакета.Параметры.ПрежнееПодразделение = Строка(ВыборкаРаботники.ПрежнееПодразделениеОрганизации);
		ОбластьМакета.Параметры.НовоеПодразделение   = Строка(ВыборкаРаботники.ПодразделениеОрганизации);
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		
		ОбластьМакета.Параметры.ВидПеревода = "постоянно";
		
		ОбластьМакета.Параметры.ОкладЦелаяЧасть = "" + Цел(ВыборкаРаботники.ОкладТарифнаяСтавка);
		
		ДробнаяЧасть = ВыборкаРаботники.ОкладТарифнаяСтавка - Цел(ВыборкаРаботники.ОкладТарифнаяСтавка);
		ОбластьМакета.Параметры.ОкладДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100); 
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
	КонецЦикла;
	
	// если не было ни одного сотра - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
        ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТ5()	

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт


	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Т5_от_5_1_2004" Тогда
		
		ТабДокумент = ПечатьТ5();
		
	ИначеЕсли ИмяМакета = "Т5а_от_5_1_2004" тогда
		
		ТабДокумент = ПечатьТ5а();
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Кадровое перемещение "), НепосредственнаяПечать);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Т5_от_5_1_2004,Т5а_от_5_1_2004","Форма Т-5","Форма Т-5а");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадровоеПеремещениеОрганизаций.Дата,
	|	КадровоеПеремещениеОрганизаций.Организация,
	|	ВЫБОР
	|		КОГДА КадровоеПеремещениеОрганизаций.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА КадровоеПеремещениеОрганизаций.Организация
	|		ИНАЧЕ КадровоеПеремещениеОрганизаций.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	КадровоеПеремещениеОрганизаций.Ссылка
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
	|ГДЕ
	|	КадровоеПеремещениеОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизаций(Режим)

	Запрос = Новый Запрос;

	СписокСтруктурныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	СписокСтруктурныхПодразделений.Добавить(Организация);
	
	ПоказыватьПодразделения = ЗначениеЗаполнено(Организация);

	Если ПоказыватьПодразделения Тогда
		// Получим список обособленных подразделений организации
		ПоказыватьПодразделения = ЗначениеЗаполнено(Организация.ГоловнаяОрганизация) или ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация).Количество() > 0
	КонецЕсли;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",					Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",			Организация);
	Запрос.УстановитьПараметр("ОбособленноеПодразделениеКуда",	ОбособленноеПодразделениеКуда);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);
	Запрос.УстановитьПараметр("ПоказыватьПодразделения",		ПоказыватьПодразделения);
	
	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвиженийКадров": 
	// 1. Выборка "ТЧРаботникиОрганизации": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПриказыОПриеме"
	//		Присоединяем данные о приказах-приемах на работу с целью проверки соответствия выбранных приказов физлицам и организации.
	// 3. Выборка "ДанныеПоРаботникиДоНазначения": 
	//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по регистру РаботникиОрганизаций на дату ДатаНачала
	//		для выполнения движений и проверки "Работает ли работник на дату перемещения"
	//		(Использует данные выборки "ДатыПоследнихДвиженийРаботников")
	// 4. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки, имеющие пересекающийся период действия
	//
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "РаботникиОрганизации":
	//		Для каждой строки ТЧРаботникиОрганизации ищем движения по регистру РаботникиОрганизации за период > ДатаНачала
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТЧРаботникиОрганизации.Должность КАК Должность,
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец КАК ОрганизацияПодразделения,
	|	ВЫБОР
	|		КОГДА (НЕ ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ВЫБОР
	|		КОГДА (НЕ ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец = &ОбособленноеПодразделениеКуда)
	|				И &ПоказыватьПодразделения = ИСТИНА
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОбособленномуПодразделению,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПрежнееПодразделение,
	|	ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение КАК ПрежняяОрганизация,
	|	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
	|	ДанныеПоРаботникуДоНазначения.Сотрудник КАК ПрежнийСотрудник,
	|	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	NULL КАК КонфликтныйДокумент,
	|	ВЫБОР
	|		КОГДА ПриказыОПриеме.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВПриказеОПриемеНетСотрудника,
	|	ВЫБОР
	|		КОГДА (НЕ ПриказыОПриеме.Ссылка.Организация В (&СписокСтруктурныхПодразделений))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаНеСоответствиеОрганизацииПриказаОПриеме
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриказыОПриеме
	|		ПО ПриказыОПриеме.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
	|			И (ПриказыОПриеме.Ссылка.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(Работники.Период) КАК Период
	|		ИЗ
	|			Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|				ПО ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
	|					И Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО ДанныеПоРаботникуДоНазначения.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
	|			И ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
	|				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
	|					И ТЧРаботникиОрганизации.НомерСтроки <> ТЧРаботникиОрганизации2.НомерСтроки
	|					И ТЧРаботникиОрганизации.ДатаНачала <= ТЧРаботникиОрганизации2.ДатаНачала
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""КонфликтныйДокумент"",
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Работники.Регистратор,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ПО Работники.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
	|			И Работники.Период = ТЧРаботникиОрганизации.ДатаНачала
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизаций()

// Формирует запрос по таблице "ОсновныеНачисления" документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачисления()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущиеИПрежниеНачисления.НомерСтроки,
	|	ТекущиеИПрежниеНачисления.Сотрудник,
	|	ТекущиеИПрежниеНачисления.ВидРасчета,
	|	ТекущиеИПрежниеНачисления.Действие,
	|	ТекущиеИПрежниеНачисления.Размер,
	|	ТекущиеИПрежниеНачисления.ДатаНачала,
	|	ТекущиеИПрежниеНачисления.ОрганизацияПодразделения,
	|	ТекущиеИПрежниеНачисления.ДатаДвижения,
	|	ТекущиеИПрежниеНачисления.Регистратор.Представление КАК КонфликтныйДокумент,
	|	МИНИМУМ(ДвойныеСтроки.НомерСтроки) КАК ДвойнаяСтрока,
	|	ТекущиеИПрежниеНачисления.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыНачислений.НомерСтроки КАК НомерСтроки,
	|		ДатыНачислений.Сотрудник КАК Сотрудник,
	|		ДатыНачислений.ВидРасчета КАК ВидРасчета,
	|		ДатыНачислений.Действие КАК Действие,
	|		ДатыНачислений.Размер КАК Размер,
	|		ДатыНачислений.ДатаНачала КАК ДатаНачала,
	|		ДатыНачислений.ОрганизацияПодразделения КАК ОрганизацияПодразделения,
	|		ДатыНачислений.Период КАК ДатаДвижения,
	|		ПлановыеНачисленияРаботниковОрганизаций.Регистратор КАК Регистратор,
	|		ДатыНачислений.Ссылка КАК Ссылка
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|			ТЧОсновныеНачисления.Ссылка КАК Ссылка,
	|			ТЧОсновныеНачисления.Сотрудник КАК Сотрудник,
	|			ТЧОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|			ТЧОсновныеНачисления.Действие КАК Действие,
	|			ТЧОсновныеНачисления.Размер КАК Размер,
	|			ТЧОсновныеНачисления.ДатаНачала КАК ДатаНачала,
	|			ТЧОсновныеНачисления.ОрганизацияПодразделения КАК ОрганизацияПодразделения,
	|			МАКСИМУМ(ПлановыеНачисленияРаботниковОрганизаций.Период) КАК Период
	|		ИЗ
	|			(ВЫБРАТЬ
	|				КадровоеПеремещениеОрганизацииОсновныеНачисления.Ссылка КАК Ссылка,
	|				КадровоеПеремещениеОрганизацииОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|				КадровоеПеремещениеОрганизацииОсновныеНачисления.Сотрудник КАК Сотрудник,
	|				КадровоеПеремещениеОрганизацииОсновныеНачисления.Действие КАК Действие,
	|				КадровоеПеремещениеОрганизацииОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|				КадровоеПеремещениеОрганизацииОсновныеНачисления.Размер КАК Размер,
	|				КадровоеПеремещениеОрганизацииРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
	|				КадровоеПеремещениеОрганизацииРаботникиОрганизации.ПодразделениеОрганизации.Владелец КАК ОрганизацияПодразделения
	|			ИЗ
	|				Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК КадровоеПеремещениеОрганизацииОсновныеНачисления
	|					ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацииРаботникиОрганизации
	|					ПО КадровоеПеремещениеОрганизацииОсновныеНачисления.Сотрудник = КадровоеПеремещениеОрганизацииРаботникиОрганизации.Сотрудник
	|						И КадровоеПеремещениеОрганизацииОсновныеНачисления.Ссылка = КадровоеПеремещениеОрганизацииРаботникиОрганизации.Ссылка
	|			ГДЕ
	|				КадровоеПеремещениеОрганизацииОсновныеНачисления.Ссылка = &ДокументСсылка) КАК ТЧОсновныеНачисления
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|				ПО ТЧОсновныеНачисления.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
	|					И ТЧОсновныеНачисления.ДатаНачала >= ПлановыеНачисленияРаботниковОрганизаций.Период
	|					И ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение = ТЧОсновныеНачисления.ВидРасчета
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧОсновныеНачисления.Сотрудник,
	|			ТЧОсновныеНачисления.ДатаНачала,
	|			ТЧОсновныеНачисления.Ссылка,
	|			ТЧОсновныеНачисления.НомерСтроки,
	|			ТЧОсновныеНачисления.ОрганизацияПодразделения,
	|			ТЧОсновныеНачисления.ВидРасчета,
	|			ТЧОсновныеНачисления.Размер,
	|			ТЧОсновныеНачисления.Действие) КАК ДатыНачислений
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|			ПО ДатыНачислений.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
	|				И ДатыНачислений.Период = ПлановыеНачисленияРаботниковОрганизаций.Период
	|				И ДатыНачислений.ВидРасчета = ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение) КАК ТекущиеИПрежниеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК ДвойныеСтроки
	|		ПО ТекущиеИПрежниеНачисления.Ссылка = ДвойныеСтроки.Ссылка
	|			И ТекущиеИПрежниеНачисления.Сотрудник = ДвойныеСтроки.Сотрудник
	|			И ТекущиеИПрежниеНачисления.ВидРасчета = ДвойныеСтроки.ВидРасчета
	|			И ТекущиеИПрежниеНачисления.НомерСтроки < ДвойныеСтроки.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТекущиеИПрежниеНачисления.ДатаДвижения,
	|	ТекущиеИПрежниеНачисления.Регистратор,
	|	ТекущиеИПрежниеНачисления.ОрганизацияПодразделения,
	|	ТекущиеИПрежниеНачисления.ДатаНачала,
	|	ТекущиеИПрежниеНачисления.НомерСтроки,
	|	ТекущиеИПрежниеНачисления.Сотрудник,
	|	ТекущиеИПрежниеНачисления.ВидРасчета,
	|	ТекущиеИПрежниеНачисления.Действие,
	|	ТекущиеИПрежниеНачисления.Размер,
	|	ТекущиеИПрежниеНачисления.Ссылка,
	|	ТекущиеИПрежниеНачисления.Регистратор.Представление";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация!", Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоСтрокамДокумента, Отказ, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники"": ";
	
	Если НЕ ПриказНаГруппуСотрудников Тогда
		СтрокаНачалаСообщенияОбОшибке = "";
	КонецЕсли;

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

		// Сотрудник
		НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НетСотрудника Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не выбран сотрудник!", Отказ);
		КонецЕсли;

		// ДатаНачала
		НетДатыНачала = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
		Если НетДатыНачала Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не указана дата перемещения!", Отказ);
		КонецЕсли;

		// Организация сотрудника должна совпадать с организацией в документе
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Указанный сотрудник оформлен на другую организацию!", Отказ);
		КонецЕсли;

		// Подразделение
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не указано подразделение, куда переводится сотрудник!", Отказ);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Указано подразделение, принадлежащее другой организации!", Отказ);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОбособленномуПодразделению Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Указано подразделение, принадлежащее другому обособленному подразделению!", Отказ);
		КонецЕсли;

		// Должность
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Должность) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не указана должность, на которую переводится сотрудник!", Отказ);
		КонецЕсли;

		Если НетСотрудника ИЛИ НетДатыНачала Тогда
			Возврат; // Дальше не проверяем
		КонецЕсли;
		
		// Проверка: ранее работник должен быть принят на работу
		Если ВыборкаПоСтрокамДокумента.ПрежнийСотрудник = NULL Тогда
			СтрокаПродолжениеСообщенияОбОшибке = "На " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		ИначеЕсли ПустаяСтрока(ВыборкаПоСтрокамДокумента.ПрежнийСотрудник) Тогда
			СтрокаПродолжениеСообщенияОбОшибке = "На " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		КонецЕсли; 

		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "Период действия назначения пересекается с периодом действия строки " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ);
		КонецЕсли;

	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	

		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "Период действия приказа противоречит кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ);
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОсновныеНачисления" документа.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, УчетнаяПолитикаПоПерсоналуОрганизации)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";
	
	Если НЕ ПриказНаГруппуСотрудников Тогда
		СтрокаНачалаСообщенияОбОшибке = "";
	КонецЕсли;

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не выбран сотрудник!", Отказ);
	КонецЕсли;
	
	// Вид расчета
	НетВР = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета);
	Если НетВР Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не указано начисление!", Отказ);
	КонецЕсли;
	
	// Действие
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Действие) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не указано действие!", Отказ);
	КонецЕсли;
	
	// Размер оплаты
 	Если (ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Начать или ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Изменить) И ВыборкаПоСтрокамДокумента.Размер = 0 Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не указан размер начисления!", Отказ);
	КонецЕсли;
	
	// проверка на существование работника в табличной части "РаботникиОрганизации"
	Если ВыборкаПоСтрокамДокумента.ДатаНачала = NULL Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Данный сотрудник не введен в приказ - по нему не могут быть введены начисления!", Отказ);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ДатаНачала = ВыборкаПоСтрокамДокумента.ДатаДвижения Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "На дату "+ ВыборкаПоСтрокамДокумента.ДатаНачала + " изменение начисления уже зарегистрировано документом " + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!", Отказ);
	КонецЕсли;
	
	// Проверка: противоречие другой строке документа
	Если Не НетВР и Не НетСотрудника и ВыборкаПоСтрокамДокумента.ДвойнаяСтрока <> NULL Тогда
		СтрокаСообщениеОбОшибке = "По сотрудник не может быть изменено одно и тоже начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ);
	КонецЕсли;
		
КонецПроцедуры

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, УчетнаяПолитикаПоПерсоналуОрганизации)

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		// отразим новое место работы
		Движение = Движения.РаботникиОрганизаций.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаНачала;
		
		// Измерения
		Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
		
		// Ресурсы
		Движение.ЗанимаемыхСтавок			= 1;
		Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		Движение.Должность					= ВыборкаПоСтрокамДокумента.Должность;
		
		// Реквизиты
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.Перемещение;
		Движение.ОбособленноеПодразделение	= ВыборкаПоСтрокамДокумента.ОрганизацияПодразделения;
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

Процедура ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Если ВыборкаСтрокЗапроса.Действие = Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
		Возврат;
	КонецЕсли;
	
	Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период						= ВыборкаСтрокЗапроса.ДатаНачала;
	
	// Измерения
	Движение.Сотрудник					= ВыборкаСтрокЗапроса.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	Движение.ВидРасчетаИзмерение		= ВыборкаСтрокЗапроса.ВидРасчета;
	
	// Ресурсы
	Если ВыборкаСтрокЗапроса.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		Движение.Размер					= ВыборкаСтрокЗапроса.Размер;
	КонецЕсли;
	
	// Реквизиты

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			РезультатЗапросаПоРаботники	= 	СформироватьЗапросПоРаботникиОрганизаций(Режим);
			ВыборкаПоСтрокамДокумента 	= 	РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");

			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоСтрокамДокумента, Отказ, УчетнаяПолитикаПоПерсоналуОрганизации);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, УчетнаяПолитикаПоПерсоналуОрганизации);

				КонецЕсли;

			КонецЦикла;

			// выполним выборку по табличной части основных начислений
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоНачисления().Выбрать();

			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, УчетнаяПолитикаПоПерсоналуОрганизации);
				Если не Отказ Тогда
					ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, УчетнаяПолитикаПоПерсоналуОрганизации);
				КонецЕсли;
				
			КонецЦикла;
			
	
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ПринадлежностьПоследовательностям.КадровыеПриказыОрганизаций.Очистить();
		Для Каждого СтрокаРаботникиОрганизации Из РаботникиОрганизации Цикл
			ЗаписьРегистрации = ПринадлежностьПоследовательностям.КадровыеПриказыОрганизаций.Добавить();
			ЗаписьРегистрации.Период		= Дата;
			ЗаписьРегистрации.Регистратор	= Ссылка;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);

	Если ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		Организация = Основание.Организация;

		НоваяСтрока = РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник = Основание;
		НоваяСтрока.Физлицо = Основание.ФизЛицо;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ВведенКопированием = Истина;
	
КонецПроцедуры



мДлинаСуток = 86400;


