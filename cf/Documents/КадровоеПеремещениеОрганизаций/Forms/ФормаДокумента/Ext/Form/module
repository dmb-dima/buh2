////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущийСотрудник;
Перем мТекущийПриказ;

Перем мСинхронизируемыеТабличныеЧасти;

Перем мСтруктураНачислений; // потребуется при смене работника или формы оплаты работника

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит номер текущей строки для заполнения ТЧ по кнопке "Заполнить"
Перем мНомерСтрокиТЧРаботникиОрганизации; 
 
// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеНачисления,ЭлементыФормы.КоманднаяПанельОсновныеНачисления);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьПанели(ИзменятьДанные = Ложь)

	ПоказыватьПодразделения = ЗначениеЗаполнено(Организация);

	Если ПоказыватьПодразделения Тогда
		// Получим список обособленных подразделений организации
		ПоказыватьПодразделения = ЗначениеЗаполнено(Организация.ГоловнаяОрганизация) или ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация).Количество() > 0
	КонецЕсли;

	Если (ЭлементыФормы.ПанельОбособленныхПодразделений.Свертка = РежимСверткиЭлементаУправления.Нет) <> ПоказыватьПодразделения Тогда
		ЭлементыФормы.ПанельОбособленныхПодразделений.Высота = 0;
		ЭлементыФормы.ПанельОбособленныхПодразделений.Свертка = ?(ПоказыватьПодразделения, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	КонецЕсли;
	
	Если (ЭлементыФормы.ПанельОбособленныхПодразделений.Свертка = РежимСверткиЭлементаУправления.Нет) И (ЭлементыФормы.ПанельОбособленныхПодразделений.Высота <> 45) Тогда
		ЭлементыФормы.ПанельОбособленныхПодразделений.Высота = 45;
	КонецЕсли;
	
	Если ИзменятьДанные Тогда
		Если ПоказыватьПодразделения Тогда
			ОбособленноеПодразделениеКуда = Организация;
			ОбособленноеПодразделениеОткуда = Организация;
		Иначе
			ОбособленноеПодразделениеКуда = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации");
			ОбособленноеПодразделениеОткуда = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации");
		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы.РаботникиОрганизации.Колонки.ПодразделениеОрганизации.ЭлементУправления.ВыборПоВладельцу = ?(ПоказыватьПодразделения,ОбособленноеПодразделениеКуда,Организация);

КонецПроцедуры

// Добавляет строку с начислением работника.
Процедура ДобавитьНачисленияПоСтроке(РаботникСтрока)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчетаИзмерение,
	|	ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Размер
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|			&ДатаНачала,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник) КАК ПлановыеНачисленияРаботниковОрганизацийСрезПоследних
	|ГДЕ
	|	ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Размер <> 0";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если РаботникСтрока = Неопределено Тогда
		// если по кнопке "Заполнить"
		СтрокаТабличнойЧасти = ЭлементыФормы.РаботникиОрганизации.Значение[мНомерСтрокиТЧРаботникиОрганизации];
	Иначе
		СтрокаТабличнойЧасти = РаботникСтрока
	КонецЕсли;
	Запрос.УстановитьПараметр("Сотрудник", СтрокаТабличнойЧасти.Сотрудник);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала",?(РегламентированнаяОтчетность.ПустоеЗначение(СтрокаТабличнойЧасти.ДатаНачала),Дата,СтрокаТабличнойЧасти.ДатаНачала) );
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		// основное начисление
		СтрокаТЧ = ОсновныеНачисления.Добавить();
		СтрокаТЧ.Сотрудник		= СтрокаТабличнойЧасти.Сотрудник;
		СтрокаТЧ.Физлицо	= СтрокаТабличнойЧасти.Физлицо;
		СтрокаТЧ.Действие		= Перечисления.ВидыДействияСНачислением.НеИзменять;
		СтрокаТЧ.ВидРасчета		= Выборка.ВидРасчетаИзмерение;
		СтрокаТЧ.Размер			= Выборка.Размер;	
	КонецЦикла;
	
КонецПроцедуры

// удаляет начисления по работнику, все или автоматически заполняемые
// Параметры:
//   Сотрудник - СправочникСсылка.СотрудникиОрганизаций
//   УдалятьВсе - булево, если Истина - удаляются все начисления по Сотруднику,
//				например, при его удалении из списка.
//				Если Ложь - удалаются только те, которые вводятся "автоматически",
//				например, при редактировании данных по строке табличной части 
//				со списком работников
Процедура УдалитьНачисленияПоРаботнику(Сотрудник)
	
	СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
	
	// удалять начисления будем в том случае, когда в т.ч. Работники эта строка с сотрудником - последняя
	Если РаботникиОрганизации.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Строки = ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТабличнойЧасти из Строки Цикл
		ОсновныеНачисления.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
		
КонецПроцедуры // УдалитьНачисленияПоРаботнику()

// Добавляет или переопределяет строку в табличной части "Начисления" при изменении сотрудника 
// или формы оплаты труда у сотрудника.
//
Процедура ПереформироватьНачисленияПоРаботнику(ТекущаяСтрока)

	УдалитьНачисленияПоРаботнику(мТекущийСотрудник);
	ДобавитьНачисленияПоСтроке(ТекущаяСтрока);
	
КонецПроцедуры // ПереформироватьНачисленияПоРаботнику()

// Возвращает структуру с данными по выбранному работнику 
// Параметры:
//  Физлицо - ссылка на справочник физлиц
//	ВыбираемыеДанные - строка, признак того, что нужно выбирать данные из регистров Работники и/или УчетЗаработкаРаботников
//
// Возвращаемое значение:
//  Структура с элементами
//		всегда присутствует 
//			Физлицо
//		если ВыбираемыеДанные содержит строку "Работники"
//			Подразделение
//			Должность
//			ГрафикРаботы
//			ТабельныйНомер
//			ЗанимаемыхСтавок
//		если ВыбираемыеДанные содержит строку "УчетЗаработкаРаботников"
//          СпособОтраженияВУпрУчете
//          УчетНачисленийПоОрганизации
//
Функция СведенияПоВыбранномуРаботникуОрганизации(ЭлементФормы, Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник",		Сотрудник);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.Сотрудник.Наименование,
	|	РаботникиОрганизации.ПодразделениеОрганизации,
	|	РаботникиОрганизации.ПодразделениеОрганизации.Наименование,
	|	РаботникиОрганизации.Должность,
	|	РаботникиОрганизации.Должность.Наименование
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента, Сотрудник = &Сотрудник) КАК РаботникиОрганизации";

	НаборыДанных = Запрос.Выполнить().Выгрузить();
	
	// Если не нашли данных - ничего не делаем
	Если НаборыДанных.Количество() = 0 Тогда
		Возврат Неопределено;
		
	// Если нашли один набор данных то используем его
	ИначеЕсли НаборыДанных.Количество() = 1 Тогда
		Возврат НаборыДанных[0];
		
	// Если наборов данных несколько - предложим выбрать из списка.
	Иначе
		СписокНаборовДанных = Новый СписокЗначений;
		Для Каждого СтрокаТабличнойЧасти Из НаборыДанных Цикл
			СписокНаборовДанных.Добавить(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.СотрудникНаименование + " (" + СтрокаТабличнойЧасти.ПодразделениеОрганизацииНаименование + ", " + СтрокаТабличнойЧасти.ДолжностьНаименование + ")");
		КонецЦикла;
		ВыбранныйНаборДанных = ВыбратьИзСписка(СписокНаборовДанных, ЭлементФормы);
		Если ВыбранныйНаборДанных = НеОпределено Тогда
			Возврат Неопределено;
		Иначе
			Возврат ВыбранныйНаборДанных.Значение;
		КонецЕсли;
			
	КонецЕсли;
	
КонецФункции

// проставляет в строку табличной части полученные данные по Сотруднику
Процедура ПроставитьДанныеПриИзмененииСотрудника(ТекущаяСтрока, ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СтрокаТаблицыЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыбранноеЗначение);
	
	Если мТекущийСотрудник <> ВыбранноеЗначение.Сотрудник Тогда
		мТекущийСотрудник = ВыбранноеЗначение.Сотрудник;
		ПереформироватьНачисленияПоРаботнику(ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры // ПроставитьДанныеПриИзмененииСотрудника()
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	//Проверка источника кадровой информации
	ПроцедурыУправленияПерсоналом.УчетЗарплатыИКадровВоВнешнейПрограмме(Отказ, Ссылка, ЭтаФорма, ЭтоНовый());

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		Если ЗначениеЗаполнено(Организация.ГоловнаяОрганизация) Тогда
			ОбособленноеПодразделениеОткуда = Организация;
			ОбособленноеПодразделениеКуда = Организация;
			Организация = Организация.ГоловнаяОрганизация;
		КонецЕсли;
		
		Если ВведенКопированием <> Истина Тогда
			РаботникиОрганизации.Добавить();
		КонецЕсли;
		
	КонецЕсли;	
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ФизЛицо");
	СтруктураКолонок.Вставить("ПодразделениеОрганизации");
	СтруктураКолонок.Вставить("Должность");
	СтруктураКолонок.Вставить("Размер");
	СтруктураКолонок.Вставить("ДатаНачала");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мТекущийСотрудник		= ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.СотрудникиОрганизаций");
 	мТекущийПриказ		  = ОбщегоНазначения.ПустоеЗначениеТипа("ДокументСсылка.ПриемНаРаботуВОрганизацию");

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Страница1",	"РаботникиОрганизации");
	Страницы.Добавить("Страница2",	"ОсновныеНачисления");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.Панель1, Страницы,);

	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,ОбособленноеПодразделениеОткуда,ОбособленноеПодразделениеКуда");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.Панель1.ТекущаяСтраница,Страницы);

	УстановитьВидимостьПанели();
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
	
	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			
			РаботникиОрганизации.Загрузить(ЗначениеВыбора.Данные.Выгрузить());
			Для Каждого СтрокаТабличнойЧасти Из РаботникиОрганизации Цикл
				ПроставитьДанныеПриИзмененииСотрудника(СтрокаТабличнойЧасти, СведенияПоВыбранномуРаботникуОрганизации(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.Сотрудник));
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
  

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыЗаполнитьСписокРаботников(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		РаботникиОрганизации.Очистить();
		ОсновныеНачисления.Очистить();
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, , ?(ОбособленноеПодразделениеОткуда.Ссылка = Справочники.Организации.ПустаяСсылка(), Организация, ОбособленноеПодразделениеОткуда));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ "Работники"

Процедура КоманднаяПанельРаботникиПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 1);
	
КонецПроцедуры // КоманднаяПанельРаботникиПодбор()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	УстановитьВидимостьПанели(Истина);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	Если НЕ ПодразделениеОрганизации.Владелец = ДокументОбъект.Организация Тогда
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();		
	КонецЕсли;	
	Для Каждого СтрокаРаботникиОрганизации Из РаботникиОрганизации Цикл
		Если НЕ СтрокаРаботникиОрганизации.ПодразделениеОрганизации.Владелец = Организация Тогда
			СтрокаРаботникиОрганизации.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();		
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода организации.
//
Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода организации.
//
Процедура ОрганизацияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Организации.Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.ГоловнаяОрганизация = &ПустаяОрганизация");
	
	Запрос.УстановитьПараметр("ПустаяОрганизация",ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации"));					  
	Выборка = Запрос.Выполнить().Выбрать();
	Список = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
	     Список.Добавить(Выборка.Ссылка);
	КонецЦикла;
    Элемент.СписокВыбора = Список
КонецПроцедуры

Процедура ОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)

	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	               |	Организации.Наименование
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |
	               |ГДЕ
	               |	Организации.ГоловнаяОрганизация = &ПустаяОрганизация И
	               |	(Организации.Наименование ПОДОБНО &парамТекст СПЕЦСИМВОЛ ""~"")";
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст+"%";
	
	Запрос.УстановитьПараметр("парамТекст", Текст);
	Запрос.УстановитьПараметр("ПустаяОрганизация", ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ТекстАвтоПодбора = Выборка.Наименование;
	КонецЕсли;

КонецПроцедуры

Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		Значение = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации");
	Иначе
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
						|	Организации.Наименование,
						|	Организации.Ссылка
						|ИЗ
						|	Справочник.Организации КАК Организации
						|
						|ГДЕ
						|	Организации.ГоловнаяОрганизация = &ПустаяОрганизация И
						|	Организации.Наименование ПОДОБНО &парамТекст";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		ТекстВПоле = Текст;
		
		// заменим спецсимволы
		ТекстВПоле = СтрЗаменить(ТекстВПоле, "~", "~~");
		ТекстВПоле = СтрЗаменить(ТекстВПоле, "%", "~%");
		ТекстВПоле = СтрЗаменить(ТекстВПоле, "_", "~_");
		ТекстВПоле = СтрЗаменить(ТекстВПоле, "[", "~[");
		ТекстВПоле = СтрЗаменить(ТекстВПоле, "-", "~-");
		ТекстВПоле = ТекстВПоле+"%";
		
		Запрос.УстановитьПараметр("парамТекст", ТекстВПоле);
		Запрос.УстановитьПараметр("ПустаяОрганизация", ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации"));
		Выборка = Запрос.Выполнить().Выбрать();
		
		Количество = Выборка.Количество();
		
		Если Количество = 0 Тогда
			Предупреждение("В поле ввода неверно задано наименование организации!");
			Значение = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации");
		ИначеЕсли Количество < 51 Тогда
			Значение = Новый СписокЗначений;
			Пока Выборка.Следующий() Цикл
				Значение.Добавить(Выборка.Ссылка, Выборка.Наименование);
			КонецЦикла;
		Иначе
			Значение = Неопределено;
		КонецЕсли;
		
	КонецЕсли;

	СтандартнаяОбработка = (Значение = Неопределено);
	
КонецПроцедуры

Процедура ОбособленноеПодразделениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	               |	Организации.Наименование
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |
	               |ГДЕ
	               |	(Организации.ГоловнаяОрганизация = &Организация ИЛИ Организации.Ссылка = &Организация) И
	               |	Организации.Наименование ПОДОБНО &парамТекст";
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст+"%";
	
	Запрос.УстановитьПараметр("парамТекст", Текст);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ТекстАвтоПодбора = Выборка.Наименование;
	КонецЕсли;

КонецПроцедуры

Процедура ОбособленноеПодразделениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
	               |	Организации.Наименование,
	               |	Организации.Ссылка
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |
	               |ГДЕ
	               |	(Организации.ГоловнаяОрганизация = &Организация ИЛИ Организации.Ссылка = &Организация) И
	               |	Организации.Наименование ПОДОБНО &парамТекст";
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ТекстВПоле = Текст;
	
	// заменим спецсимволы
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "~", "~~");
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "%", "~%");
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "_", "~_");
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "[", "~[");
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "-", "~-");
	ТекстВПоле = ТекстВПоле+"%";
	
	Запрос.УстановитьПараметр("парамТекст", ТекстВПоле);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Количество = Выборка.Количество();
	
	Если Количество = 0 Тогда
		Предупреждение("В поле ввода неверно задано наименование обособленного подразделения!");
		Значение = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации");
	ИначеЕсли Количество < 51 Тогда
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Значение.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЦикла;
	Иначе
		Значение = Неопределено;
	КонецЕсли;
	
	СтандартнаяОбработка = (Значение = Неопределено);
	
КонецПроцедуры

Процедура ОбособленноеПодразделениеОткудаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь
КонецПроцедуры

Процедура ОбособленноеПодразделениеОткудаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Список = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	Список.Вставить(0,Организация);
	Элемент.СписокВыбора = Список;
КонецПроцедуры

Процедура ОбособленноеПодразделениеКудаПриИзменении(Элемент)
	ЭлементыФормы.РаботникиОрганизации.Колонки.ПодразделениеОрганизации.ЭлементУправления.ВыборПоВладельцу = ОбособленноеПодразделениеКуда;
КонецПроцедуры

Процедура ОбособленноеПодразделениеКудаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь
КонецПроцедуры

Процедура ОбособленноеПодразделениеКудаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Список = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	Список.Вставить(0,Организация);
	Элемент.СписокВыбора = Список;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "РаботникиОрганизации"
 
// Процедура - обработчик события "ПередНачаломДобавления" строки ТЧ
Процедура РаботникиОрганизацииПередНачаломДобавления(Элемент, Отказ, Копирование)
		
	//Если Копирование Тогда		
	//	
	//	// чтоб исключить возможность ввода одного и того же работника несколько раз
	//	НоваяСтрока								= РаботникиОрганизации.Добавить();
	//	НоваяСтрока.ФизЛицо						= Справочники.ФизическиеЛица.ПустаяСсылка();
	//	НоваяСтрока.Приказ						= Документы.ПриемНаРаботуВОрганизацию.ПустаяСсылка();
	//	НоваяСтрока.ДатаНачала					= Элемент.ТекущиеДанные.ДатаНачала;
	//	НоваяСтрока.ПодразделениеОрганизации	= Элемент.ТекущиеДанные.ПодразделениеОрганизации;
	//	НоваяСтрока.Должность					= Элемент.ТекущиеДанные.Должность;
	//	НоваяСтрока.ТабельныйНомер				= Элемент.ТекущиеДанные.ТабельныйНомер;
	//	
	//	Элемент.ТекущаяСтрока = НоваяСтрока;
	//	Отказ = Истина;
	//	
	//КонецЕсли;
	Если Копирование Тогда
		
		ДанныеСтроки = Элемент.ТекущиеДанные;

		НоваяСтрока = РаботникиОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки,, "Сотрудник");
		
		Элемент.ТекущаяСтрока = НоваяСтрока;
		Отказ = Истина;
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" строки ТЧ
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикОжиданияРаботникиОрганизацииПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры // РаботникиОрганизацииПриАктивизацииСтроки

// Процедура выполняет синхронизацию строк табличных частей документа
// при активизации строки табличного поля "РаботникиОрганизаций".
//
Процедура ОбработчикОжиданияРаботникиОрганизацииПриАктивизацииСтроки()
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.РаботникиОрганизации, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
КонецПроцедуры // ОбработчикОжиданияРаботникиОрганизацииПриАктивизацииСтроки
	
// Процедура удаляет строку с работником из табличной части "ОсновныеНачисления" и "ДополнительныеНачисления".
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	УдалитьНачисленияПоРаботнику(Элемент.ТекущиеДанные.Сотрудник);
	
КонецПроцедуры // РаботникиОрганизацииПередУдалением()

// Процедура обеспечивает начальное значение реквизита "ЗанимаемыхСтавок" и 
//  "ГрафикРаботы".
//
// Параметры:
//  Элемент      - табличное поле, которое отображает т.ч.
//  НоваяСтрока  - булево, признак редактирования новой строки
//  
Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	мТекущийСотрудник = ДанныеСтроки.Сотрудник;
	
КонецПроцедуры // РаботникиОрганизацииПриНачалеРедактирования()

// Процедура обеспечивает заполнение колонок с данными работника на дату перемещения
//
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  
Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
  //  Запрос = Новый Запрос;
  //  
  //  Запрос.УстановитьПараметр("Ссылка",	Ссылка);
  //  
  //  Запрос.Текст =
  //  "ВЫБРАТЬ РАЗЛИЧНЫЕ
  //  |	РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
  //  |	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
  //  |	РаботникиОрганизацииСрезПоследних.Должность КАК Должность
  //  |ИЗ
  //  |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Период, Сотрудник = &Сотрудник И Регистратор <> &Ссылка) КАК РаботникиОрганизацииСрезПоследних";

////	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
  //  	
  //  	ДанныеСтроки = СтрокаТабличнойЧасти.ДанныеСтроки;
  //  	
  //  	Если Не ДанныеСтроки.Сотрудник.Пустая() Тогда
  //  		
  //  		Запрос.УстановитьПараметр("Период",		ДанныеСтроки.ДатаНачала);
  //  		Запрос.УстановитьПараметр("Сотрудник",	ДанныеСтроки.Сотрудник);
  //  		
  //  		Выборка = Запрос.Выполнить().Выбрать();
  //  		Если Выборка.Следующий() Тогда
  //  			
  //  			СтрокаТабличнойЧасти.Ячейки.СтароеПодразделение.УстановитьТекст(Выборка.ПодразделениеОрганизации);
  //  			СтрокаТабличнойЧасти.Ячейки.СтараяДолжность.УстановитьТекст(Выборка.Должность);
  //  			СтрокаТабличнойЧасти.Ячейки.СтараяСтавка.УстановитьТекст(Формат(Выборка.ЗанимаемыхСтавок,"ЧЦ=4;ЧДЦ=2"));
  //  			
  //  		КонецЕсли;
  //  		
  //  	КонецЕсли;
  //  	
  //  КонецЦикла;
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
КонецПроцедуры // РаботникиОрганизацииПриПолученииДанных()

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение.ЭтоГруппа Тогда
		Возврат
	КонецЕсли;
	
	// Если выбор произошел в форме подбора и этого сотрудника в документе пока нет, 
	// добавим новую строку в таблицу 
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		
		СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
		СтрокаТабличнойЧасти.Сотрудник		= ВыбранноеЗначение;
		СтрокаТабличнойЧасти.Физлицо	= ВыбранноеЗначение.ФизЛицо;
		
		мТекущийСотрудник = ВыбранноеЗначение;
		
		ПроставитьДанныеПриИзмененииСотрудника(СтрокаТабличнойЧасти, СведенияПоВыбранномуРаботникуОрганизации(Элемент, ВыбранноеЗначение));
		
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Сотрудник
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)

	ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Физлицо = Элемент.Значение.ФизЛицо;
	ПроставитьДанныеПриИзмененииСотрудника(ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные, СведенияПоВыбранномуРаботникуОрганизации(Элемент, Элемент.Значение));
	
КонецПроцедуры // РаботникиОрганизацииСотрудникПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Сотрудник
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 1,СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода Сотрудник
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокиРаботников = РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
	Если СтрокиРаботников.Количество() > 0 и Элемент.Значение <> ВыбранноеЗначение Тогда
		Предупреждение("В данном документе по одному работнику можно вводить только одну строку!");
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = ВыбранноеЗначение;
	ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Физлицо = ВыбранноеЗначение.ФизЛицо;
	ПроставитьДанныеПриИзмененииСотрудника(ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные, СведенияПоВыбранномуРаботникуОрганизации(Элемент, ВыбранноеЗначение));
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода Сотрудник
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода Сотрудник
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникОкончаниеВводаТекста()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ОсновныеНачисления"

// Процедура - обработчик события "ПриАктивизацииСтроки" строки ТЧ
Процедура ОсновныеНачисленияПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

// Процедура выполняет синхронизацию строк табличных частей документа
// при активизации строки табличного поля "ОсновныеНачисления".
//
Процедура ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки()
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.ОсновныеНачисления, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
КонецПроцедуры // ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
Процедура ОсновныеНачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Действие = Перечисления.ВидыДействияСНачислением.Начать ИЛИ
		ДанныеСтроки.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
	
		ОформлениеСтроки.Ячейки.Размер.ТолькоПросмотр = Ложь
	Иначе
		ОформлениеСтроки.Ячейки.Размер.ТолькоПросмотр = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" ТЧ
Процедура ОсновныеНачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		Элемент.ТекущиеДанные.Размер = 0
	КонецЕсли;
		
КонецПроцедуры

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура ОсновныеНачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	Элемент.ТекущиеДанные.Физлицо 				   = ВыбранноеЗначение.Физлицо;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ОсновныеНачисления

// Процедура - обработчик события "ПриИзменении" поля ввода физлица
Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Физлицо = Элемент.Значение.ФизЛицо;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникОкончаниеВводаТекста()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ПриказНаГруппуСотрудниковПриИзменении(Элемент)
	
	Если НЕ ПереключитьПредставление() Тогда
		ПриказНаГруппуСотрудников = НЕ ПриказНаГруппуСотрудников;
		Возврат;
	КонецЕсли;
	
	УстановитьВидимость();		
	
КонецПроцедуры

Функция ПереключитьПредставление()
	
	//проверка возможности переключения с группового ввода на ввод по одному
	Если НЕ ПриказНаГруппуСотрудников Тогда
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""Работники"" введено более одного сотрудника.");
			Возврат Ложь;
		ИначеЕсли РаботникиОрганизации.Количество() = 0 Тогда
			ОсновныеНачисления.Очистить();
			ОсновныеНачисления.Добавить();
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РаботникиОрганизации[0].Сотрудник) Тогда
			ОсновныеНачисления.Очистить();
			ОсновныеНачисления.Добавить();
		Иначе
			Для Каждого СтрокаНачислений ИЗ ОсновныеНачисления Цикл
				Если СтрокаНачислений.Сотрудник <> РаботникиОрганизации[0].Сотрудник Тогда
					ОсновныеНачисления.Удалить(ОсновныеНачисления.Индекс(СтрокаНачислений));
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
	Иначе
		ЗаполнитьПервуюСтроку();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьВидимость()
	
	Если ПриказНаГруппуСотрудников Тогда
		ЭлементыФормы.Панель1.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
		ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница1;
		ЭлементыФормы.Панель1.Страницы.Страница3.Видимость = Ложь;
	Иначе
		ЭлементыФормы.Панель1.Страницы.Страница3.Видимость = Истина;		
		ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница3;
		ЭлементыФормы.Панель1.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;		
		ПоказатьСведенияСотрудника();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьСведенияСотрудника()
	
	Если РаботникиОрганизации.Количество() = 0 Тогда
		РаботникиОрганизации.Добавить();
	КонецЕсли;
	
	Если РаботникиОрганизации.Количество() <> 0 Тогда
		ТекущийСотрудник = РаботникиОрганизации.Получить(0);		
		Сотрудник = ТекущийСотрудник.Сотрудник;
		ТабельныйНомер = ТекущийСотрудник.Сотрудник.Код;
		ДатаНачала = ТекущийСотрудник.ДатаНачала;
		ПодразделениеОрганизации = ТекущийСотрудник.ПодразделениеОрганизации;
		Должность = ТекущийСотрудник.Должность;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ПриказНаГруппуСотрудников Тогда
		ЗаполнитьПервуюСтроку();		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПервуюСтроку()
	
	Если РаботникиОрганизации.Количество() > 1 Тогда
		РаботникиОрганизации.Очистить();
		РаботникиОрганизации.Добавить();
	КонецЕсли;
	
	РаботникиОрганизации[0].Сотрудник = Сотрудник;
	РаботникиОрганизации[0].ДатаНачала = ДатаНачала;
	РаботникиОрганизации[0].Должность = Должность;
	РаботникиОрганизации[0].ПодразделениеОрганизации = ПодразделениеОрганизации;
	РаботникиОрганизации[0].Физлицо = Сотрудник.Физлицо;
	
КонецПроцедуры

Процедура СотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры

Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры

Процедура СотрудникПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = Дата;
	КонецЕсли;
	ОсновныеНачисления.Очистить();
	
	ЗаполнитьПервуюСтроку();
	ПроставитьДанныеПриИзмененииСотрудника(РаботникиОрганизации[0], СведенияПоВыбранномуРаботникуОрганизации(Элемент, Элемент.Значение));
	ПоказатьСведенияСотрудника();
	
КонецПроцедуры


Процедура ОсновныеНачисленияСотрудникаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущаяСтрока.Сотрудник = Сотрудник;
		Элемент.ТекущаяСтрока.Физлицо = Сотрудник.Физлицо;
	КонецЕсли;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

мСинхронизируемыеТабличныеЧасти = Новый Соответствие;

мСинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]		= Ложь;
мСинхронизируемыеТабличныеЧасти["ОсновныеНачисления"]		= Ложь;

мСтруктураНачислений = Новый Структура("ВидРасчета");
мСтруктураНачислений.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();

// Установка списка выбора головных организаций
ЭлементыФормы.Организация.СписокВыбора = ПроцедурыУправленияПерсоналом.ПолучитьСписокГоловныхОрганизаций();

