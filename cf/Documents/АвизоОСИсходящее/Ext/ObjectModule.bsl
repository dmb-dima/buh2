////////////////////////////////////////////////////////////
// ПЕЧАТЬ
////////////////////////////////////////////////////////////

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Авизо","Авизо");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАвизо()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Авизо.Номер,
	|	Авизо.Дата,
	|	Авизо.СчетРасчетов,
	|	Авизо.Организация КАК ОрганизацияОтправитель,
	|	ВЫБОР
	|		КОГДА Авизо.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Авизо.Организация
	|		ИНАЧЕ Авизо.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	Авизо.ОрганизацияПолучатель КАК ОрганизацияПолучатель
	|ИЗ
	|	Документ.АвизоОСИсходящее КАК Авизо
	|ГДЕ
	|	Авизо.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ЗапросПоОС = Новый Запрос;
	ЗапросПоОС.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоОС.Текст =
	"ВЫБРАТЬ
	|	Авизо.ОсновноеСредство КАК ОсновноеСредствоСсылка,
	|	ВЫРАЗИТЬ(Авизо.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК ОсновноеСредство,
	|	Авизо.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	СУММА(Авизо.Стоимость) КАК Стоимость,
	|	СУММА(Авизо.Амортизация) КАК Амортизация,
	|	МИНИМУМ(Авизо.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.АвизоОСИсходящее.ОС КАК Авизо
	|ГДЕ
	|	Авизо.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Авизо.ОсновноеСредство,
	|	Авизо.ИнвентарныйНомер,
	|	ВЫРАЗИТЬ(Авизо.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = ЗапросПоОС.Выполнить();
	ВыборкаСтрокОС = РезультатЗапроса.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвизоОСИсходящее_Авизо";
	Макет       = ПолучитьМакет("Авизо");

	// Выводим основную шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Извещение (авизо) на передачу ОС");
	
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.Организация = ПредставлениеОрганизации;
	
	СведенияОбОтправителе    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ОрганизацияОтправитель, Шапка.Дата);
	ПредставлениеОтправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОтправителе, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.Отправитель = ПредставлениеОтправителя;
	
	СведенияОПолучателе     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ОрганизацияПолучатель, Шапка.Дата);
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПолучателе, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.Получатель = ПредставлениеПолучателя;
	
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим шапку таблицы МПЗ
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицыОС");
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим строки таблицы МПЗ
	ИтогоАмортизация = 0;
	ИтогоСтоимость = 0;
	Пока ВыборкаСтрокОС.Следующий() Цикл

		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыОС");
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокОС);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ИтогоСтоимость = ИтогоСтоимость + ВыборкаСтрокОС.Стоимость;
		ИтогоАмортизация = ИтогоАмортизация + ВыборкаСтрокОС.Амортизация;
	КонецЦикла;

	// Выводим подвал таблицы МПЗ
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыОС");
	ОбластьМакета.Параметры.ИтогоСтоимость = ИтогоСтоимость;
	ОбластьМакета.Параметры.ИтогоАмортизация = ИтогоАмортизация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим шапку таблицы БУ
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицыБУ");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Счет", Шапка.СчетРасчетов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ХозрасчетныйДвиженияССубконто.ВалютаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютаКт,
	|	ХозрасчетныйДвиженияССубконто.Сумма,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоДт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт,
	|	ХозрасчетныйДвиженияССубконто.Содержание,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СуммаНУДт ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СуммаНУКт
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.СуммаНУДт
	|	КОНЕЦ КАК СуммаНУ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СуммаПРДт ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СуммаПРКт
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.СуммаПРДт
	|	КОНЕЦ КАК СуммаПР,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СуммаВРДт ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СуммаВРКт
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.СуммаВРДт
	|	КОНЕЦ КАК СуммаВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор = &Регистратор
	|				И (СчетДт = &Счет
	|					ИЛИ СчетКт = &Счет)) КАК ХозрасчетныйДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаДвижений = Запрос.Выполнить().Выбрать();

	НС = 1;
	// Выводим строки таблицы БУ
	Пока ВыборкаДвижений.Следующий() Цикл
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыБУ");
		ОбластьМакета.Параметры.Заполнить(ВыборкаДвижений);
		ОбластьМакета.Параметры.НомерСтроки = НС;
		
		АналитикаДт = Строка(ВыборкаДвижений.СубконтоДт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоДт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоДт3);
					
		АналитикаКт = Строка(ВыборкаДвижений.СубконтоКт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоКт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоКт3);
					
		ОбластьМакета.Параметры.АналитикаДт = АналитикаДт;
		ОбластьМакета.Параметры.АналитикаКт = АналитикаКт;
		
		ТабДокумент.Вывести(ОбластьМакета);
        НС = НС +1;		
	КонецЦикла;

	// Выводим подвал таблицы БУ
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыБУ");
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим общий подвал
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.РасшифровкаПодписиИсполнителя = ?(НЕ ЗначениеЗаполнено(Ответственный), "", ОбщегоНазначения.ФамилияИнициалыФизЛица(Ответственный.ФизЛицо));
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Авизо" Тогда
		
		ТабДокумент = ПечатьАвизо();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать
	
#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация, ОрганизацияПолучатель, СчетРасчетов";

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверим на виды операций, которые не будут полностью отработаны в данном документе
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету 
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию 
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание Тогда

		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не будут полноценно отражены данным документом (учетное состояние ОС не изменится)!",,Заголовок);

	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТаблицаОС, СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство, ИнвентарныйНомер, СчетУчета, ДатаПринятияКУчету, ПорядокПогашенияСтоимости";
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

	Для Каждого СтрокаТЧ Из ЭтотОбъект.ОС Цикл
		ПроверкаПоСтроке(СтруктураШапкиДокумента, СтрокаТЧ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",      Ссылка);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Период"     , СтруктураШапкиДокумента.Дата);
	
	// Проверка, что на момент составления авизо ОС приняты к учету в указанной организации.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвизоОСИсходящееОС.ОсновноеСредство
	|ПОМЕСТИТЬ
	|	СписокОС
	|ИЗ
	|	Документ.АвизоОСИсходящее.ОС КАК АвизоОСИсходящееОС
	|ГДЕ
	|	АвизоОСИсходящееОС.Ссылка = &Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(АвизоОСИсходящееОС.ОсновноеСредство) КАК ОсновноеСредствоПредставление,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер
	|ИЗ
	|	Документ.АвизоОСИсходящее.ОС КАК АвизоОСИсходящееОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(&Период, Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК СостоянияОСОрганизацийСрезПоследних
	|		ПО АвизоОСИсходящееОС.ОсновноеСредство = СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО АвизоОСИсходящееОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|ГДЕ
	|	СостоянияОСОрганизацийСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)";
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		ОбщегоНазначения.ОшибкаПриПроведении(("Основное средство <" + СокрЛП(Выборка.ОсновноеСредствоПредставление) + "> инв.№ " + СокрЛП(Выборка.Инвентарныйномер) + " не принято к учету в организации <" + СтруктураШапкиДокумента.Организация + ">."), Отказ, Заголовок);
	КонецЦикла;

КонецПроцедуры // ПроверкаРеквизитовТЧ()

//Проверка заполнения реквизитов каждого ОС.
//
Функция ПроверкаПоСтроке(СтруктураШапкиДокумента, СтрокаОС)
	
	РеквизитыДляПроверки = Новый Структура();
	
	НалУчет    = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
	НалУчетУСН = СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН;

	//Проверка реквизитов общей группы
	Если СтрокаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
	
		//По видам учета
		РеквизитыДляПроверки.Вставить("СчетНачисленияАмортизации"  ,СтатусСообщения.Важное);
		РеквизитыДляПроверки.Вставить("Стоимость" ,СтатусСообщения.Важное);
		Если СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный 
		 ИЛИ СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования 
		 ИЛИ СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			РеквизитыДляПроверки.Вставить("СрокПолезногоИспользования" ,СтатусСообщения.Важное);
		КонецЕсли;
		
		Если НалУчетУСН тогда
			РеквизитыДляПроверки.Вставить("ДатаПриобретенияУСН"							,СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("СрокПолезногоИспользованияУСН"				,СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("ПорядокВключенияСтоимостиВСоставРасходовУСН"	,СтатусСообщения.Важное);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		РеквизитыДляПроверки.Вставить("ПервоначальнаяСтоимостьНУ"					,СтатусСообщения.Важное);
		РеквизитыДляПроверки.Вставить("СрокПолезногоИспользованияНУ"				,СтатусСообщения.Важное);
	КонецЕсли;

	// Проверка реквизитов групп амортизации.
	Если СтрокаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
	   
		РеквизитыДляПроверки.Вставить("СпособНачисленияАмортизации", СтатусСообщения.Важное);
		
		Если СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ тогда
			РеквизитыДляПроверки.Вставить("КоэффициентАмортизации", СтатусСообщения.Важное);
		ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега тогда
			РеквизитыДляПроверки.Вставить("ПараметрВыработки", СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("КоэффициентАмортизации", СтатусСообщения.Важное);
		ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			РеквизитыДляПроверки.Вставить("ПараметрВыработки", СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("ОбъемПродукцииРабот", СтатусСообщения.Важное);
		ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка тогда
			РеквизитыДляПроверки.Вставить("КоэффициентУскорения", СтатусСообщения.Важное);
		Конецесли;

		Если СтрокаОС.НачислятьАмортизацию Тогда
			РеквизитыДляПроверки.Вставить("СпособыОтраженияРасходовПоАмортизации", СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НалУчет
	   И СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
	   
	   РеквизитыДляПроверки.Вставить("СпециальныйКоэффициентНУ" ,СтатусСообщения.Внимание);
		
	КонецЕслИ;
	
КонецФункции // ПроверкаПоСтроке()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	// Движения по регистрам сведений.
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл

		// Движения по регистру СобытияОСОрганизаций
		Движение = Движения.СобытияОСОрганизаций.Добавить();
		Движение.Период				= СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство	= СтрокаОС.ОсновноеСредство;
		Движение.Организация		= СтруктураШапкиДокумента.Организация;
		Движение.Событие 			= СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента	= Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента		= СтруктураШапкиДокумента.Номер;
		
		// Движения по регистру НачислениеАмортизацииОСБухгалтерскийУчет
		Движение = Движения.НачислениеАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период               = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		Движение.Организация          = СтруктураШапкиДокумента.Организация;
		Движение.НачислятьАмортизацию = Ложь;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
			// Движения по регистру НачислениеАмортизацииОСНалоговыйУчет
			Движение = Движения.НачислениеАмортизацииОСНалоговыйУчет.Добавить();
			Движение.Период               = СтруктураШапкиДокумента.Дата;
			Движение.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
			Движение.Организация          = СтруктураШапкиДокумента.Организация;
			Движение.НачислятьАмортизацию = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Проводки = Движения.Хозрасчетный;
	
	ОсновныеСредства = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	// Начисление амортизации за текущий период.
	УправлениеВнеоборотнымиАктивами.НачислениеАмортизации(ЭтотОбъект, 
									СтруктураШапкиДокумента, 
									ОсновныеСредства,
									,
									,
									,
									СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
									Отказ, 
									Заголовок);
									
	// Начисление износа за текущий период.
	ТабИзноса  = УправлениеВнеоборотнымиАктивами.РасчетИзносаБухРегл(Дата, СтруктураШапкиДокумента.Организация, ОсновныеСредства);
	
	Проводки = Движения.Хозрасчетный;
	
	Для Каждого СтрокаИзноса Из ТабИзноса Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаИзноса.Износ) тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Проводки.Добавить();
		
		Проводка.Период       = Дата;
		Проводка.Содержание   = "Износ основных средств";
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма        = СтрокаИзноса.Износ;
		
		Проводка.СчетДт = СтрокаИзноса.СчетНачисленияИзноса;
		БухгалтерскийУчет.УстановитьСубконто(СтрокаИзноса.СчетНачисленияИзноса, Проводка.СубконтоДт, 1, СтрокаИзноса.ОсновноеСредство);
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	КонецЦикла;
									
	// Движения по регистрам бухгалтерии.
	Для Каждого СтрокаОС Из ОС Цикл
		
		// Перемещение дебетовых остатков 
		Если ЗначениеЗаполнено(СтрокаОС.СчетУчета)
		   И (СтрокаОС.Стоимость > 0
		      ИЛИ СтрокаОС.СтоимостьНУ > 0 
		      ИЛИ СтрокаОС.СтоимостьПР <> 0 
		      ИЛИ СтрокаОС.СтоимостьВР <> 0) Тогда
		
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Передача ОС по авизо";
			Проводка.Сумма        = СтрокаОС.Стоимость;
			
			Проводка.СчетДт          = СтруктураШапкиДокумента.СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбособленныеПодразделения", СтруктураШапкиДокумента.ОрганизацияПолучатель);

			Проводка.СчетКт          = СтрокаОС.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.ПодразделениеОрганизации, "Кт");
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаОС.СтоимостьНУ,СтрокаОС.СтоимостьНУ,СтрокаОС.СтоимостьПР,СтрокаОС.СтоимостьПР,СтрокаОС.СтоимостьВР,СтрокаОС.СтоимостьВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
				
			КонецЕсли;

		КонецЕсли;
		
		// Перемещение кредитовых остатков 
		Если СтрокаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		
			Если ЗначениеЗаполнено(СтрокаОС.СчетНачисленияАмортизации)
			   И (СтрокаОС.Амортизация > 0
			      ИЛИ СтрокаОС.АмортизацияНУ > 0 
			      ИЛИ СтрокаОС.АмортизацияПР <> 0 
			      ИЛИ СтрокаОС.АмортизацияВР <> 0) Тогда
			   
				Проводка = Проводки.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = "Передача ОС по авизо";
				Проводка.Сумма        = СтрокаОС.Амортизация;
				
				Проводка.СчетДт          = СтрокаОС.СчетНачисленияАмортизации;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);

				Проводка.СчетКт          = СтруктураШапкиДокумента.СчетРасчетов;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбособленныеПодразделения", СтруктураШапкиДокумента.ОрганизацияПолучатель);
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.ПодразделениеОрганизации, "Дт");
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаОС.АмортизацияНУ,СтрокаОС.АмортизацияНУ,СтрокаОС.АмортизацияПР,СтрокаОС.АмортизацияПР,СтрокаОС.АмортизацияВР,СтрокаОС.АмортизацияВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
					
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
		// Накопленный износ
		Если СтрокаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса
		 ИЛИ СтрокаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда
			
			Если ЗначениеЗаполнено(СтрокаОС.СчетНачисленияАмортизации) И (СтрокаОС.Амортизация <> 0) Тогда
			
				Проводка = Проводки.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = "Передача ОС по авизо";
				Проводка.Сумма        = СтрокаОС.Амортизация;

				Проводка.СчетКт          = СтрокаОС.СчетНачисленияАмортизации;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.ПодразделениеОрганизации, "Кт");
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик события "ОбработкаПроведения" документа.
//
Процедура ОбработкаПроведения(Отказ)
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура("ОсновноеСредство", "ОсновноеСредство");
	
	ТаблицаПоОС = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей).Выгрузить();
	
	ПроверкаРеквизитовТЧ(ТаблицаПоОС, СтруктураШапкиДокумента,Отказ, Заголовок);
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);

	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()
