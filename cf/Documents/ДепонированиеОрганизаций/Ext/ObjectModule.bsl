
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Определяет сумму неполученной заработной платы по платежной ведомости
//
// Параметры
//  Ведомость - ДокументСсылка.ЗарплатаКВыплатеОрганизации - обрабатываемая платежная ведомость
//
// Возвращаемое значение:
//   число - сумма к депонированию
//
Функция ПолучитьДанныеПлатежнойВедомостиДляДепонирования(Ведомости) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ВыплаченностьЗарплаты", Перечисления.ВыплаченностьЗарплаты.Задепонировано);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеЗарплата.Ссылка,
	|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма + ЗарплатаКВыплатеЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И ЗарплатаКВыплатеЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|			И (РанееВыплаченныеСуммы.Регистратор <> &Регистратор)
	|ГДЕ
	|	ЗарплатаКВыплатеЗарплата.Ссылка В(&Ведомости)
	|	И ЗарплатаКВыплатеЗарплата.ВыплаченностьЗарплаты = &ВыплаченностьЗарплаты
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеЗарплата.Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеПлатежнойВедомостиДляДепонирования()

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",   Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	  Дата);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.УстановитьПараметр("Кассир", Перечисления.ОтветственныеЛицаОрганизаций.Кассир);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДепонированиеОрганизаций.Дата КАК ДатаДок,
		|	ДепонированиеОрганизаций.Организация
		|ИЗ
		|	Документ.ДепонированиеОрганизаций КАК ДепонированиеОрганизаций
		|ГДЕ
		|	ДепонированиеОрганизаций.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда
		
		Запрос.УстановитьПараметр("Задепонировано",				Перечисления.ВыплаченностьЗарплаты.Задепонировано);
		Запрос.УстановитьПараметр("ВнутреннееСовместительство",	Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		Запрос.УстановитьПараметр("ЗанятостьНеУказана",			Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка());
		Запрос.УстановитьПараметр("Организация",				ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Запрос.УстановитьПараметр("Уволен",						Перечисления.ПричиныИзмененияСостояния.Увольнение);
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки КАК НомерСтроки,
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Дата КАК ДатаВедомости,
		//|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Номер КАК НомерВедомости,
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Номер КАК Номер,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо.Наименование) КАК ФИОРаботника,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты КАК Сумма,
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Организация КАК Организация
		|ИЗ
		|	Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ДепонированиеОрганизацийДепонированиеЗаработнойПлаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|					&ДатаДокумента,
		|					Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство
		|						И Организация = &Организация) КАК РаботникиОрганизаций
		|			ПО (РаботникиОрганизаций.ПричинаИзмененияСостояния <> &Уволен)
		|				И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо
		|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
		|			И (ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо)
		|			И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
		|ГДЕ
		|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка = &ДокументСсылка
		|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Задепонировано
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL ";
		
	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()
 
#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой "Т-53".
//
// Возвращаемое значение:
//   Табличный документ - печатная форма
//
Функция ПечатьКарточкиДепонента()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДепонированиеОрганизаций_КарточкиДепонента";
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	
	Макет 		= ПолучитьМакет("КарточкаДепонента");
	
	// получаем данные для печати
	ВыборкаДляШапки  = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	
	ОбластьМакета = Макет.ПолучитьОбласть("Карточка");
	
	// выводим общие данные
	Если ВыборкаДляШапки.Следующий() Тогда 
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаДляШапки.Организация, ВыборкаДляШапки.ДатаДок);
		ОбластьМакета.Параметры.НазваниеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
	КонецЕсли;
	
	ВыведеноСтрок = 0;
	ВалютаРасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	// выводим данные по строкам документа.
	Пока ВыборкаРаботники.Следующий() Цикл
	
		ВыведеноСтрок = ВыведеноСтрок + 1;
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.НомерКарточки =		"" + ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка) + "/" + ВыведеноСтрок;
		ОбластьМакета.Параметры.НомерВедомости =	ОбщегоНазначения.ПолучитьНомерНаПечать(ВыборкаРаботники);
		ОбластьМакета.Параметры.СуммаПрописью =		ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаРаботники.Сумма, ВалютаРасчетов);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// разбиение на страницы
		Если ВыведеноСтрок % 2 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьКарточкиДепонента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "КарточкаДепонента" тогда
		
		ТабДокумент = ПечатьКарточкиДепонента();
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Платежная ведомость Т-53 "), НепосредственнаяПечать);
		
	КонецЕсли;

КонецПроцедуры // Печать

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КарточкаДепонента","Карточка депонента");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Выполняет автоматическое заполнение документа 
// 
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  нет
//
Процедура Автозаполнение() Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|			И РанееВыплаченныеСуммы.Регистратор <> &Регистратор
	|ГДЕ
	|	(НЕ ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|				ИЗ
	|					Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|				ГДЕ
	|					ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособВыплаты = &ЧерезКассу
	|					И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &НеВыплачено
	|					И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация = &Организация))
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация = &Организация
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособВыплаты = &ЧерезКассу
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Задепонировано
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата <= &Дата
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка";
	
	Запрос.УстановитьПараметр("ЧерезКассу",Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);
	Запрос.УстановитьПараметр("НеВыплачено",Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
	Запрос.УстановитьПараметр("Задепонировано",Перечисления.ВыплаченностьЗарплаты.Задепонировано);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Дата",?(ЭтоНовый(),КонецДня(Дата),Дата));
	ДепонированиеЗаработнойПлаты.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры //  Автозаполнение

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Задепонировано", Перечисления.ВыплаченностьЗарплаты.Задепонировано);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДепонированиеОрганизаций.Дата,
	|	ДепонированиеОрганизаций.Ссылка,
	|	ДепонированиеОрганизаций.Организация,
	|	ВЫБОР
	|		КОГДА ДепонированиеОрганизаций.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|			ТОГДА ДепонированиеОрганизаций.Организация
	|		ИНАЧЕ ДепонированиеОрганизаций.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ДепонированиеОрганизаций.СчетУчетаРасходов,
	|	ЕСТЬNULL(ОбщиеСуммыПоВедомости.КомпенсацияЗаЗадержкуЗарплаты, 0) КАК КомпенсацияЗаЗадержкуЗарплаты
	|ИЗ
	|	Документ.ДепонированиеОрганизаций КАК ДепонированиеОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК КомпенсацияЗаЗадержкуЗарплаты
	|		ИЗ
	|			Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ДепонированиеОрганизацийДепонированиеЗаработнойПлаты
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|				ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|				ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
	|					И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо 
	|					И РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка
	|		ГДЕ
	|			ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка = &ДокументСсылка
	|			И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|			И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Задепонировано) КАК ОбщиеСуммыПоВедомости
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДепонированиеОрганизаций.Ссылка = &ДокументСсылка";

	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части документам
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоДепонированиеЗаработнойПлаты()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("Дата" , Дата);
	Запрос.УстановитьПараметр("Задепонировано", Перечисления.ВыплаченностьЗарплаты.Задепонировано);
	Запрос.УстановитьПараметр("НеВыплачено", Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
	Запрос.УстановитьПараметр("Выплачено", Перечисления.ВыплаченностьЗарплаты.Выплачено);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки КАК НомерСтроки,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость КАК Ведомость,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Номер КАК Номер,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Дата КАК Дата,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.ПериодРегистрации КАК ПериодРегистрацииВедомости,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.СпособВыплаты КАК СпособВыплатыВедомости,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.Представление КАК ПредставлениеВедомости,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.НомерСтроки КАК НомерСтрокиВедомости,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
	|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты, 0) КАК СуммаКДепонированию,
	|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты, 0) КАК КомпенсацияЗаЗадержкуЗарплаты,
	|	ОбщиеСуммыПоВедомости.НеПомеченнаяСумма,
	|	ВЫБОР
	|		КОГДА ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Сумма <> ЕСТЬNULL(ОбщиеСуммыПоВедомости.Задепонировано, 0)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СуммыСоответствуютВедомостям
	|ИЗ
	|	Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ДепонированиеОрганизацийДепонированиеЗаработнойПлаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
	|			И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|			И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки КАК НомерСтроки,
	|			СУММА(ВЫБОР
	|					КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &НеВыплачено
	|						ТОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК НеПомеченнаяСумма,
	|			СУММА(ВЫБОР
	|					КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Задепонировано
	|						ТОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Задепонировано
	|		ИЗ
	|			Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ДепонированиеОрганизацийДепонированиеЗаработнойПлаты
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|				ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|				ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
	|					И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|					И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
	|		ГДЕ
	|			ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка = &ДокументСсылка
	|			И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки) КАК ОбщиеСуммыПоВедомости
	|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.НомерСтроки = ОбщиеСуммыПоВедомости.НомерСтроки
	|ГДЕ
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка = &ДокументСсылка
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Задепонировано
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ведомость,
	|	НомерСтрокиВедомости";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоДепонированиеЗаработнойПлаты()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении,
//	Заголовок	 - Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ЕстьДниНевыплаты() Тогда
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СчетУчетаРасходов) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не указан счет учета компенсации за задержку зарплаты!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Функция ЕстьДниНевыплаты() 
	
	ЕстьДниНевыплаты = Ложь;
	Для Каждого ВедомостьНаВыплату ИЗ ДепонированиеЗаработнойПлаты Цикл
		Если ВедомостьНаВыплату.Ведомость.ДнейНеВыплаты <> 0 Тогда
			ЕстьДниНевыплаты = Истина;
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ЕстьДниНевыплаты;
КонецФункции

// Проверяет правильность заполнения строки документа.
Процедура ПроверитьЗаполнениеСтрокиДепонированиеЗаработнойПлаты(ВыборкаПоДепонированиеЗаработнойПлаты, Отказ, Заголовок)

	НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоДепонированиеЗаработнойПлаты.НомерСтроки) +
					  """ табл. части: ";
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоДепонированиеЗаработнойПлаты.Ведомость) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "не указана платежная ведомость!", Отказ, Заголовок);
	Иначе
		Если ВыборкаПоДепонированиеЗаработнойПлаты.СпособВыплатыВедомости <> Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "указан документ, не предназначенный для оплаты через кассу!", Отказ, Заголовок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаПоДепонированиеЗаработнойПлаты.ПериодРегистрацииВедомости) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "указана платежная ведомость (" + ВыборкаПоДепонированиеЗаработнойПлаты.ПредставлениеВедомости + "), в которой не указан месяц начисления выплачиваемой зарплаты!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоДепонированиеЗаработнойПлаты.НеПомеченнаяСумма) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "указана платежная ведомость (" + ВыборкаПоДепонированиеЗаработнойПлаты.ПредставлениеВедомости + "), в которой есть строки с невыплаченной зарплатой!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ВыборкаПоДепонированиеЗаработнойПлаты.СуммыСоответствуютВедомостям Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "сумма по строке документа не совпадает с суммой к депонированию по платежной ведомость!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиДепонированиеЗаработнойПлаты()

// Проверяет правильность заполнения строки Платежной ведомости.
Процедура ПроверитьЗаполнениеСтрокиПлатежнойВедомости(ВыборкаПоДепонированиеЗаработнойПлаты, Отказ, Заголовок)

	НачалоСообщения = "В документе " + СокрЛП(ВыборкаПоДепонированиеЗаработнойПлаты.ПредставлениеВедомости) +": ";
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоДепонированиеЗаработнойПлаты.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "в строке № """ + ВыборкаПоДепонированиеЗаработнойПлаты.НомерСтрокиВедомости + " не указано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиПлатежнойВедомости()

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи.
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                 накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ВзаиморасчетыСРаботникамиОрганизаций");
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ВзаиморасчетыСДепонентамиОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, 
	СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "")
	
	ИмяРегистра = "ВзаиморасчетыСРаботникамиОрганизаций";
	Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда
		
		Если ВыборкаПоТЧ.СуммаКДепонированию <> 0 Тогда
			Движение = Движения[ИмяРегистра].Добавить();
			// Свойства
			Движение.Период           				= ВыборкаПоШапкеДокумента.Дата;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			// Измерения
			Движение.Организация					= ВыборкаПоШапкеДокумента.Организация;
			Движение.ФизЛицо                		= ВыборкаПоТЧ.ФизЛицо;
			Движение.ПериодВзаиморасчетов           = ВыборкаПоТЧ.ПериодРегистрацииВедомости;
			
			// Ресурсы
			Движение.СуммаВзаиморасчетов = ВыборкаПоТЧ.Сумма;
		КонецЕсли;
		
	КонецЕсли; 
	
	ИмяРегистра = "ВзаиморасчетыСДепонентамиОрганизаций";
	Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда
		
		Если ВыборкаПоТЧ.СуммаКДепонированию <> 0 Тогда
			Движение = Движения[ИмяРегистра].Добавить();
			// Свойства
			Движение.Период      = ВыборкаПоШапкеДокумента.Дата;
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			// Измерения
			Движение.Организация = ВыборкаПоШапкеДокумента.Организация;
			Движение.ФизЛицо     = ВыборкаПоТЧ.ФизЛицо;
			Движение.Ведомость   = ВыборкаПоТЧ.Ведомость;
			
			// Ресурсы
			Движение.Сумма		 = ВыборкаПоТЧ.СуммаКДепонированию; 
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоТЧ)
	
	Движение = Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Добавить();
	
	// Измерения
	Движение.ФизЛицо   = ВыборкаПоТЧ.ФизЛицо;
	Движение.Ведомость = ВыборкаПоТЧ.Ведомость;
	
	// Ресурсы
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

Процедура СформироватьРасчетыПоНДФЛ(ВыборкаПоШапкеДокумента)
	
	СтруктураДокумента = Новый Структура("Ссылка,Период,ОбособленноеПодразделение,Организация",ВыборкаПоШапкеДокумента.Ссылка,ВыборкаПоШапкеДокумента.Дата,ВыборкаПоШапкеДокумента.Организация,ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	ТекстТаблицыВыплаты = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК Физлицо,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТВыплатыФизлицам
	|ИЗ
	|	Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ДепонированиеОрганизацийДепонированиеЗаработнойПлаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
	|			И (ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо)
	|			И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
	|ГДЕ
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка = &ДокументСсылка
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо";
	
	Запрос = Новый Запрос;
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , ВыборкаПоШапкеДокумента.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПлДок.Ссылка.Дата > КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
	|			ТОГДА ПлДок.Ссылка.Дата
	|		ИНАЧЕ КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
	|	КОНЕЦ КАК ДатаНДФЛ
	|ИЗ
	|	Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ПлДок
	|ГДЕ
	|	ПлДок.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлДок.Ссылка.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	СтруктураДокумента.Вставить("ДатаНДФЛ",Выборка.ДатаНДФЛ);
	
	ПроведениеРасчетов.СформироватьРасчетыПоНДФЛПриВыплате(СтруктураДокумента, ТекстТаблицыВыплаты, Движения.НДФЛРасчетыСБюджетом, Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ);
	

КонецПроцедуры

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуПроводки(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, РазвернутымиПроводками = Истина) 
	
	Проводки = Движения.Хозрасчетный;
	
	Если ВыборкаПоТЧ.Сумма <> 0 Тогда
		Проводка = Проводки.Добавить();
		
		Проводка.Период      = ВыборкаПоШапкеДокумента.Дата;
		Проводка.Активность  = Истина;
		Проводка.Организация = ВыборкаПоШапкеДокумента.Организация;
		Проводка.Сумма       = ВыборкаПоТЧ.Сумма;
		
		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		Если РазвернутымиПроводками Тогда
			Проводка.СубконтоДт.РаботникиОрганизаций = ВыборкаПоТЧ.ФизЛицо;
		КонецЕсли;
		
		Проводка.Содержание  = "Депонирование зарплаты по ведомости №" + ВыборкаПоТЧ.Номер + " от " + ВыборкаПоТЧ.Дата;
		Проводка.СчетКт		= ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
		Если РазвернутымиПроводками Тогда
			Проводка.СубконтоКт.РаботникиОрганизаций = ВыборкаПоТЧ.ФизЛицо;
		КонецЕсли;

	КонецЕсли;
	
	Если ВыборкаПоТЧ.КомпенсацияЗаЗадержкуЗарплаты <> 0 Тогда
		Проводка = Проводки.Добавить();
		
		Проводка.Период      = ВыборкаПоШапкеДокумента.Дата;
		Проводка.Активность  = Истина;
		Проводка.Организация = ВыборкаПоШапкеДокумента.Организация;
		Проводка.Сумма       = ВыборкаПоТЧ.КомпенсацияЗаЗадержкуЗарплаты;
		
		Проводка.СчетДт      = СчетУчетаРасходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Субконто3);
		
		Проводка.Содержание  = "Депонирование компенсации за задержку зарплаты по ведомости №" + ВыборкаПоТЧ.Номер + " от " + ВыборкаПоТЧ.Дата;
		Проводка.СчетКт		= ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
		Если РазвернутымиПроводками Тогда
			Проводка.СубконтоКт.РаботникиОрганизаций = ВыборкаПоТЧ.ФизЛицо;
		КонецЕсли;
		
		// {ОбособленныеПодразделения
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, ПодразделениеОрганизации, ПодразделениеОрганизации);		
		// }ОбособленныеПодразделения 
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуПроводки

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		// Определим сумму неполученной заработной платы
		РезультатЗапроса = ПолучитьДанныеПлатежнойВедомостиДляДепонирования(Основание);

		Если РезультатЗапроса.Количество() = 1 Тогда

			СтрокаВедомость = ДепонированиеЗаработнойПлаты.Добавить();
			СтрокаВедомость.Ведомость = Основание;

			СтрокаВедомость.Сумма = РезультатЗапроса[0].Сумма;

			СуммаДокумента = РезультатЗапроса[0].Сумма;
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("По текущей ведомости нет сумм к депонированию!")
		КонецЕсли;

		
		ЗапросДляЗаполнения	=	Новый	Запрос;
		ЗапросДляЗаполнения.УстановитьПараметр("ДокументСсылка",		Основание);
		ЗапросДляЗаполнения.УстановитьПараметр("Задепонировано",		Перечисления.ВыплаченностьЗарплаты.Задепонировано);
		
		ЗапросДляЗаполнения.Текст =
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо,
		|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &Задепонировано
		|	И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ДокументСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо.Наименование";
		
		Работники.Загрузить(ЗапросДляЗаполнения.Выполнить().Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Запрос = Новый Запрос;

		// Установим параметры запроса
		Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
		Запрос.УстановитьПараметр("Задепонировано", Перечисления.ВыплаченностьЗарплаты.Задепонировано);
		Запрос.УстановитьПараметр("Ведомости", ДепонированиеЗаработнойПлаты.ВыгрузитьКолонку("Ведомость"));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо.Наименование КАК ФизлицоНаименование,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|			И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
		|			И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка В(&Ведомости)
		|	И ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты <> 0
		|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Задепонировано
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизлицоНаименование";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Отказ = Истина;
			Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
			ОбщегоНазначения.СообщитьОбОшибке("По указанным в графе ""Ведомость"" документам нет работников с задепонированными суммами выплаты, на которые еще не оформлен документ ""Депонирование""!", Отказ, Заголовок);
		Иначе
			Отказ = Ложь;
			Работники.Загрузить(РезультатЗапроса.Выгрузить());
		КонецЕсли;
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Работники.Очистить();
		
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ДепонированиеЗаработнойПлаты.Итог("Сумма");

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Работники,, "Физлицо");

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ФормироватьПроводкиСводно = (ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам.ВидыСубконто.Найти(
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") = Неопределено);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда
			
			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления);
			
			// получим реквизиты табличной части
			РезультатЗапроса = СформироватьЗапросПоДепонированиеЗаработнойПлаты();
			
			ВыборкаПоДепонированиеЗаработнойПлаты = РезультатЗапроса.Выбрать();
			Пока ВыборкаПоДепонированиеЗаработнойПлаты.СледующийПоЗначениюПоля("Ведомость") Цикл 
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиДепонированиеЗаработнойПлаты(ВыборкаПоДепонированиеЗаработнойПлаты, Отказ, Заголовок);
				
				Пока ВыборкаПоДепонированиеЗаработнойПлаты.СледующийПоЗначениюПоля("Физлицо") Цикл 
					
					Если ФормироватьПроводкиСводно И НЕ ЗначениеЗаполнено(ВыборкаПоДепонированиеЗаработнойПлаты.Физлицо) Тогда
						Продолжить;
					КонецЕсли;
					
					ПроверитьЗаполнениеСтрокиПлатежнойВедомости(ВыборкаПоДепонированиеЗаработнойПлаты, Отказ, Заголовок);
					
					Если Не Отказ Тогда
						
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоДепонированиеЗаработнойПлаты);
						Если ВыборкаПоДепонированиеЗаработнойПлаты.СуммаКДепонированию > 0 Тогда
							ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоДепонированиеЗаработнойПлаты, СтруктураПроведенияПоРегистрамНакопления);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если Не Отказ Тогда
				
				ТаблицаРезультата = РезультатЗапроса.Выгрузить();
				Если ФормироватьПроводкиСводно Тогда
					ТаблицаРезультата.Свернуть("Номер,Дата","Сумма,КомпенсацияЗаЗадержкуЗарплаты");
				КонецЕсли;
				Для каждого СтрокаТЗ Из ТаблицаРезультата Цикл
					ДобавитьСтрокуПроводки(ВыборкаПоШапкеДокумента, СтрокаТЗ, Не ФормироватьПроводкиСводно);
				КонецЦикла;
				
				СформироватьРасчетыПоНДФЛ(ВыборкаПоШапкеДокумента)
				
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры


