Перем мДатаПерехода Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  Таблица			        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаПоСтрокам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, ДатаОплаты, СуммаОплаты");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  Таблица			        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаНМА(ТаблицаПоСтрокамНМА, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (СтруктураШапкиДокумента.Дата < мДатаПерехода) Тогда
		ТаблицаПоСтрокамНМА.Очистить();
		Возврат;
	КонецЕсли;
		
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	ДатаПереходаНаУСН = УчетнаяПолитикаНУ["ДатаПереходаНаУСН"];
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("НематериальныйАктив, ДатаОплаты, СуммаОплаты");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОплатаНМА", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Для Каждого СтрокаНМА Из ТаблицаПоСтрокамНМА Цикл
		ДокРегистратор   = Неопределено;
		ДатаВвода		 = Неопределено;
		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияНМА(СтрокаНМА.НематериальныйАктив, СтруктураШапкиДокумента.Организация, 
										Перечисления.ВидыСостоянийНМА.ПринятКУчету, ДокРегистратор, ДатаВвода);
		Если НЕ ЗначениеЗаполнено(ДатаВвода) Тогда
			ТекстСообщения = Строка(СтрокаНМА.НематериальныйАктив) + " не принято к учету! Оплаты регистрируются только по принятым к учету объектам НМА.";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
			Продолжить;
		КонецЕсли;
		
		ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияНМАНалоговыйУчетУСН.ПолучитьПоследнее(СтруктураШапкиДокумента.Дата, Новый Структура("НематериальныйАктив", СтрокаНМА.НематериальныйАктив));
		ДатаПриобретения = ?(ВыборкаЗаписей.Количество() > 0, ВыборкаЗаписей.ДатаПриобретения, 0);
		
		Если (ДатаПриобретения < мДатаПерехода) И 
			(ДатаПереходаНаУСН < ДатаПриобретения) И 
			(СтрокаНМА.ДатаОплаты < мДатаПерехода) Тогда
			
			ТекстСообщения = "По "+ Строка(СтрокаНМА.НематериальныйАктив) + " оплата от "+СтрокаНМА.ДатаОплаты+" не зарегистрирована. Расходы по данной оплате принимаются в порядке, действовавшем до 01.01.2006 г.";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
			СтрокаНМА.СуммаОплаты = 0;
		КонецЕсли;
				
	КонецЦикла;	
		
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  Таблица			        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаМодернизации(ТаблицаПоСтрокамМодернизации, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (СтруктураШапкиДокумента.Дата < Дата("20080101")) Тогда
		ТаблицаПоСтрокамМодернизации.Очистить();
		Возврат;
	КонецЕсли;
		
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	ДатаПереходаНаУСН = УчетнаяПолитикаНУ["ДатаПереходаНаУСН"];
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументМодернизации, ДатаОплаты, СуммаОплаты");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОплатаМодернизацииОС", СтруктураОбязательныхПолей, Отказ, Заголовок);
	ТаблицаПоСтрокамМодернизации.Свернуть("ДокументМодернизации, ДатаОплаты", "СуммаОплаты");
    		
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаОС, ТаблицаНМА, ТаблицаПоСтрокамМодернизации, Отказ)

	УСН = НалоговыйУчетУСН.ПрименениеУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);

	Если УСН Тогда
		РегОплаты = Движения.ОплатыОСДляУСН;
		
		Для Каждого Запись Из ТаблицаОС Цикл

			СтрокаОплаты  = РегОплаты.Добавить();

			СтрокаОплаты.Период           = Запись.ДатаОплаты;
			СтрокаОплаты.Организация      = СтруктураШапкиДокумента.Организация;
			СтрокаОплаты.ОсновноеСредство = Запись.ОсновноеСредство;
			СтрокаОплаты.ДатаОплаты       = Запись.ДатаОплаты;
			СтрокаОплаты.СуммаОплаты      = Запись.СуммаОплаты;

		КонецЦикла;
		
		РегОплатыНМА = Движения.ОплатыНМАДляУСН;

		Для Каждого Запись Из ТаблицаНМА Цикл
			Если Запись.СуммаОплаты <> 0 Тогда
				
				СтрокаОплаты  = РегОплатыНМА.Добавить();
				
				СтрокаОплаты.Период           		= Запись.ДатаОплаты;
				СтрокаОплаты.Организация      		= СтруктураШапкиДокумента.Организация;
				СтрокаОплаты.НематериальныйАктив 	= Запись.НематериальныйАктив;
				СтрокаОплаты.ДатаОплаты       		= Запись.ДатаОплаты;
				СтрокаОплаты.СуммаОплаты      		= Запись.СуммаОплаты;
				
	        КонецЕсли;
		КонецЦикла;
		
		//Распределим модернизации по ОС
		ТаблицаОплатПоОС = Новый ТаблицаЗначений();
		ТаблицаОплатПоОС.Колонки.Добавить("ОсновноеСредство");
		ТаблицаОплатПоОС.Колонки.Добавить("ДокументМодернизации");
		ТаблицаОплатПоОС.Колонки.Добавить("ДатаОплаты");
		ТаблицаОплатПоОС.Колонки.Добавить("СуммаОплаты");
		
		МассивМодернизаций = ТаблицаПоСтрокамМодернизации.ВыгрузитьКолонку("ДокументМодернизации");
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивМодернизаций);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", 		МассивМодернизаций);
		Запрос.УстановитьПараметр("ДатаКон", 		СтруктураШапкиДокумента.Дата);
		Запрос.УстановитьПараметр("Организация", 	СтруктураШапкиДокумента.Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СобытияОСОрганизаций.ОсновноеСредство,
		|	СобытияОСОрганизаций.Регистратор КАК ДокументМодернизации,
		|	СУММА(СобытияОСОрганизаций.СуммаЗатратБУ) КАК СуммаЗатратБУ,
		|	СУММА(СобытияОСОрганизаций.СуммаЗатратНУ) КАК СуммаЗатратНУ,
		|	СУММА(СобытияОСОрганизаций.СуммаЗатратУСН - ВЫБОР КОГДА ОплатыОСДляУСНОбороты.СуммаОплатыОборот ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОплатыОСДляУСНОбороты.СуммаОплатыОборот КОНЕЦ) КАК СуммаМодернизацииУСН
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатыОСДляУСН.Обороты(, &ДатаКон, , ) КАК ОплатыОСДляУСНОбороты
		|		ПО СобытияОСОрганизаций.Регистратор = ОплатыОСДляУСНОбороты.ДокументМодернизации
		|			И СобытияОСОрганизаций.ОсновноеСредство = ОплатыОСДляУСНОбороты.ОсновноеСредство
		|ГДЕ
		|	СобытияОСОрганизаций.Регистратор В(&Ссылка)
		|	И СобытияОСОрганизаций.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	СобытияОСОрганизаций.ОсновноеСредство,
		|	СобытияОСОрганизаций.Регистратор
		|ИТОГИ ПО
		|	ДокументМодернизации";
		
		ДеревоМодернизаций = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
				
		Для Каждого СтрокаОплата Из ТаблицаПоСтрокамМодернизации Цикл
			ОстаткиМодернизации = ДеревоМодернизаций.Строки.Найти(СтрокаОплата.ДокументМодернизации, "ДокументМодернизации");
			Если ОстаткиМодернизации = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТаблицаБазыРаспределения = ОстаткиМодернизации.Строки;
			Если ТаблицаБазыРаспределения.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаОплата.ДатаОплаты < Дата("20070101") Тогда
				//Такие оплаты не учитываются
				Продолжить;
			КонецЕсли;
			Если Окр(ТаблицаБазыРаспределения.Итог("СуммаМодернизацииУСН"),2,1) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаОплатыКРаспределению = Мин(СтрокаОплата.СуммаОплаты, ТаблицаБазыРаспределения.Итог("СуммаМодернизацииУСН"));
			КоэффОплаты = СуммаОплатыКРаспределению / ТаблицаБазыРаспределения.Итог("СуммаМодернизацииУСН");
			
			Для Каждого СтрокаОС Из ТаблицаБазыРаспределения Цикл
				СуммаОплатыОС = Мин(Окр(КоэффОплаты*СтрокаОС.СуммаМодернизацииУСН,2,1), СтрокаОС.СуммаМодернизацииУСН);
				Если СуммаОплатыОС = 0 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТаблицыОплатПоОС = ТаблицаОплатПоОС.Добавить();
				СтрокаТаблицыОплатПоОС.ДокументМодернизации = СтрокаОС.ДокументМодернизации;
				СтрокаТаблицыОплатПоОС.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
				СтрокаТаблицыОплатПоОС.ДатаОплаты 		= СтрокаОплата.ДатаОплаты;
				СтрокаТаблицыОплатПоОС.СуммаОплаты 		= СуммаОплатыОС;
				
				СуммаОплатыКРаспределению = СуммаОплатыКРаспределению - СуммаОплатыОС;
				СтрокаОС.СуммаМодернизацииУСН = СтрокаОС.СуммаМодернизацииУСН - СуммаОплатыОС;
				
			КонецЦикла;
			
			//Распределим погрешность округления, списывая ее пропорционатьно убыванию остатков расходов
			ТаблицаБазыРаспределения.Сортировать("СуммаМодернизацииУСН Убыв");
			Если СуммаОплатыКРаспределению > 0 Тогда
				Для Каждого СтрокаОС Из ТаблицаБазыРаспределения Цикл
					Если СуммаОплатыКРаспределению = 0 Тогда
						Прервать;
					КонецЕсли;
					СуммаОплатыОС = Мин(СуммаОплатыКРаспределению, СтрокаОС.СуммаМодернизацииУСН);
					Если СуммаОплатыОС = 0 Тогда
						Продолжить;
					КонецЕсли;
					СтрокаТаблицыОплатПоОС = ТаблицаОплатПоОС.Добавить();
					СтрокаТаблицыОплатПоОС.ДокументМодернизации = СтрокаОС.ДокументМодернизации;
					СтрокаТаблицыОплатПоОС.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
					СтрокаТаблицыОплатПоОС.ДатаОплаты 		= СтрокаОплата.ДатаОплаты;
					СтрокаТаблицыОплатПоОС.СуммаОплаты 		= СуммаОплатыОС;
					
					СуммаОплатыКРаспределению = СуммаОплатыКРаспределению - СуммаОплатыОС;
					СтрокаОС.СуммаМодернизацииУСН = СтрокаОС.СуммаМодернизацииУСН - СуммаОплатыОС;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		ТаблицаОплатПоОС.Свернуть("ОсновноеСредство, ДокументМодернизации, ДатаОплаты", "СуммаОплаты");
		
		Для Каждого Запись Из ТаблицаОплатПоОС Цикл
			
			СтрокаОплаты  = РегОплаты.Добавить();
			
			СтрокаОплаты.Период           = Запись.ДатаОплаты;
			СтрокаОплаты.Организация      = СтруктураШапкиДокумента.Организация;
			СтрокаОплаты.ОсновноеСредство = Запись.ОсновноеСредство;
			СтрокаОплаты.ДокументМодернизации = Запись.ДокументМодернизации;
			СтрокаОплаты.ДатаОплаты       = Запись.ДатаОплаты;
			СтрокаОплаты.СуммаОплаты      = Запись.СуммаОплаты;
			
		КонецЦикла; 
	// {УчетДоходовИРасходовИП
	Иначе
		
		ДокументыОплаты = Новый ТаблицаЗначений;
		ДокументыОплаты.Колонки.Добавить("Номенклатура");
		ДокументыОплаты.Колонки.Добавить("ВидМПЗ");
		ДокументыОплаты.Колонки.Добавить("ДокументОплаты");
		ДокументыОплаты.Колонки.Добавить("РеквизитыДокументаОплаты");
		ДокументыОплаты.Колонки.Добавить("Сумма");
		
		Для Каждого Запись Из ТаблицаОС Цикл
			Если Запись.СуммаОплаты <> 0 Тогда
				Док = ДокументыОплаты.Добавить();
				Док.Номенклатура = Запись.ОсновноеСредство;
				Док.ВидМПЗ = Перечисления.ВидыМПЗ.ОС;
				Док.РеквизитыДокументаОплаты = ДоходыИРасходыПредпринимателя.РеквизитыДокументаОплатыСтр(Запись.НомерДокументаОплаты, Запись.ДатаОплаты);
				Док.ДокументОплаты = Ссылка;
				Док.Сумма = Запись.СуммаОплаты;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Запись Из ТаблицаНМА Цикл
			Если Запись.СуммаОплаты <> 0 Тогда
				Док = ДокументыОплаты.Добавить();
				Док.Номенклатура = Запись.НематериальныйАктив;
				Док.ВидМПЗ = Перечисления.ВидыМПЗ.НМА;
				Док.РеквизитыДокументаОплаты = ДоходыИРасходыПредпринимателя.РеквизитыДокументаОплатыСтр(Запись.НомерДокументаОплаты, Запись.ДатаОплаты);
				Док.ДокументОплаты = Ссылка;
				Док.Сумма = Запись.СуммаОплаты;
	        КонецЕсли;
		КонецЦикла;
		
		ДокументыОплаты.Свернуть("Номенклатура,ВидМПЗ,ДокументОплаты,РеквизитыДокументаОплаты", "Сумма");
		
		СписокМПЗ = ДокументыОплаты.ВыгрузитьКолонку("Номенклатура");
		СтруктураОтбора = Новый Структура("Номенклатура,ВидМПЗ");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КонПериода", МоментВремени());
		Запрос.УстановитьПараметр("СписокМПЗ", СписокМПЗ);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ Партия,Номенклатура,ВидМПЗ,НоменклатурнаяГруппа,ХарактерДеятельности
		|ИЗ РегистрНакопления.ИПМПЗ.Остатки(&КонПериода, Организация = &Организация И Номенклатура В (&СписокМПЗ))
		|СГРУППИРОВАТЬ ПО Партия,ВидМПЗ,Номенклатура,НоменклатурнаяГруппа,ХарактерДеятельности";
		
		ДокументыПринятияКУчету = Запрос.Выполнить().Выгрузить();
		
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		
		Для Каждого Док Из ДокументыОплаты Цикл
			СтруктураОтбора.Номенклатура = Док.Номенклатура;
			СтруктураОтбора.ВидМПЗ = Док.ВидМПЗ;
			
			ПринятиеКУчету = ДокументыПринятияКУчету.НайтиСтроки(СтруктураОтбора);
			
			Движение = Движения.ИПМПЗ.ДобавитьПриход();
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.Организация = СтруктураШапкиДокумента.Организация;
			Движение.Номенклатура = Док.Номенклатура;
			Движение.ВидМПЗ = Док.ВидМПЗ;
			Движение.ДокументОплаты = Док.ДокументОплаты;
			Движение.РеквизитыДокументаОплаты = Док.РеквизитыДокументаОплаты;
			Движение.Сумма = Док.Сумма;
			
			Если ПринятиеКУчету.Количество() > 0 Тогда
				Движение.Партия = ПринятиеКУчету[0].Партия;
				Движение.НоменклатурнаяГруппа = ПринятиеКУчету[0].НоменклатурнаяГруппа;
				Движение.ХарактерДеятельности = ПринятиеКУчету[0].ХарактерДеятельности;
				
			Иначе
				Движение.Партия = Ссылка;
				Движение.ХарактерДеятельности = ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(,,,, УчетнаяПолитикаНУ);
				Движение.НоменклатурнаяГруппа = ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации(,,,Док.ВидМПЗ, УчетнаяПолитикаНУ);
			КонецЕсли;
		КонецЦикла;
	// }УчетДоходовИРасходовИП
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	Заголовок = "";
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Строки".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("ОсновноеСредство"			, "ОсновноеСредство");
	СтруктураПолей.Вставить("ДатаОплаты"      			, "ДатаОплаты");
	СтруктураПолей.Вставить("НомерДокументаОплаты"      , "НомерДокументаОплаты");
	СтруктураПолей.Вставить("СуммаОплаты"     			, "СуммаОплаты");

	РезультатЗапросаПоСтрокам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураПолей);
	ТаблицаПоСтрокам = РезультатЗапросаПоСтрокам.Выгрузить();
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Оплата НМА".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("НематериальныйАктив"		, "НематериальныйАктив");
	СтруктураПолей.Вставить("ДатаОплаты"      			, "ДатаОплаты");
	СтруктураПолей.Вставить("НомерДокументаОплаты"      , "НомерДокументаОплаты");
	СтруктураПолей.Вставить("СуммаОплаты"     			, "СуммаОплаты");

	РезультатЗапросаПоСтрокам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаНМА", СтруктураПолей);
	ТаблицаПоСтрокамНМА = РезультатЗапросаПоСтрокам.Выгрузить();
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Оплата модернизаций".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("ДокументМодернизации"		, "ДокументМодернизации");
	СтруктураПолей.Вставить("ДатаОплаты"      			, "ДатаОплаты");
	СтруктураПолей.Вставить("СуммаОплаты"     			, "СуммаОплаты");

	РезультатЗапросаПоСтрокам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаМодернизацииОС", СтруктураПолей);
	ТаблицаПоСтрокамМодернизации = РезультатЗапросаПоСтрокам.Выгрузить();

    ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаПоСтрокам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОплатаНМА(ТаблицаПоСтрокамНМА, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОплатаМодернизации(ТаблицаПоСтрокамМодернизации, СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоСтрокам, ТаблицаПоСтрокамНМА, ТаблицаПоСтрокамМодернизации, Отказ);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

мДатаПерехода = Дата("20060101");
