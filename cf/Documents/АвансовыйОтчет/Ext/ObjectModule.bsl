Перем мВалютаРегламентированногоУчета Экспорт;
Перем ПартионныйУчетБУ, ПартионныйУчетНУ;
Перем мПоддержкаПБУ18;
Перем СчетРасчетовСПодотчетнымЛицом;
Перем ТаблицаВзаиморасчетов;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАвансовогоОтчета()
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата    КАК ДатаДокумента,
	|	ФизЛицо КАК ПодотчетноеЛицо,
	|	ФизЛицо.Представление КАК ПредставлениеПодотчетногоЛица,
	|	Организация           КАК Руководители,
	// {ОбособленныеПодразделения
	|	ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	|	ПодразделениеОрганизации.Код КАК КодПодразделения,
	// }ОбособленныеПодразделения
	|	Организация.Ссылка    КАК Организация,
	|	НазначениеАванса      КАК НазначениеАванса,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ВалютаДокумента.Представление КАК ПредставлениеВалюты,
	|	СуммаДокумента,
	|	КоличествоДокументов,
	|	КоличествоЛистов,
	|	ВыданныеАвансы.(
	|		Сумма)
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Авансы = Шапка.ВыданныеАвансы.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_АвансовыйОтчет";

	Макет       = ПолучитьМакет("АвансовыйОтчет");

	// ТИТУЛЬНЫЙ ЛИСТ
	Запрос = Новый Запрос();
	Если НЕ (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		Запрос.УстановитьПараметр("Счет71", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал);
	Иначе
		Запрос.УстановитьПараметр("Счет71", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);
	КонецЕсли;
	Запрос.УстановитьПараметр("Сотрудник",  Шапка.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Организация",Шапка.Организация);
	Запрос.УстановитьПараметр("ДатаИтогов", Ссылка.МоментВремени());
	
	// {ОбособленныеПодразделения
	Запрос.УстановитьПараметр("Подразделение", Шапка.ПодразделениеОрганизации);
	// }ОбособленныеПодразделения
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаИтогов,
	|			Счет В ИЕРАРХИИ (&Счет71),
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &Сотрудник
	// {ОбособленныеПодразделения
	|				И Подразделение = &Подразделение
	// }ОбособленныеПодразделения
	|) КАК ХозрасчетныйОстатки";
	
	ПредыдущийАванс = Запрос.Выполнить().Выбрать();
	ПредыдущийАванс.Следующий();
	
	Перерасход = ?(ПредыдущийАванс.СуммаОстатокДт = Null, 0, ПредыдущийАванс.СуммаОстатокКт);
	Остаток    = ?(ПредыдущийАванс.СуммаОстатокКт = Null, 0, ПредыдущийАванс.СуммаОстатокДт);
	ДанныеВал  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);

	СуммаДоДокумента = 0;

	Если НЕ ЗначениеЗаполнено(Перерасход) Тогда
		Перерасход = 0;
	Иначе
		СуммаДоДокумента = - Число(Перерасход);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Остаток) Тогда
		Остаток = 0;
	Иначе
		СуммаДоДокумента = Число(Остаток);
	КонецЕсли;
	
	МассивАвансовыхДокументов = ВыданныеАвансы.ВыгрузитьКолонку("ДокументАванса");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивАвансовыхДокументов", МассивАвансовыхДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(РасходныйКассовыйОрдер.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка В(&МассивАвансовыхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдер.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ВыдачаДенежныхДокументов.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.ВыдачаДенежныхДокументов КАК ВыдачаДенежныхДокументов
	|ГДЕ
	|	ВыдачаДенежныхДокументов.Ссылка В(&МассивАвансовыхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыдачаДенежныхДокументов.Ссылка
	|";
	Таб = Запрос.Выполнить().Выгрузить();
	ПолученоИзКассы = Число(Таб.Итог("СуммаДокумента"));
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивАвансовыхДокументов", МассивАвансовыхДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(СписаниеСРасчетногоСчета.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Ссылка В(&МассивАвансовыхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеСРасчетногоСчета.Ссылка
	|";
	
	Таб = Запрос.Выполнить().Выгрузить();
	ПолученоИзКассыПоКартам = Число(Таб.Итог("СуммаДокумента"));

	ОбластьМакета = Макет.ПолучитьОбласть("Титул");

	КурсДока = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КратДока = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
    КурсоваяРазница = 0;
	Если НЕ (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		ОбластьМакета.Параметры.ПредставлениеВалютыДокумента   = Шапка.ПредставлениеВалюты;
		ОбластьМакета.Параметры.ПолученоИзКассыВВалюте         = ПолученоИзКассы;
		ОбластьМакета.Параметры.ПолученоИзКассыВВалютеПоКартам = ПолученоИзКассыПоКартам;
		ПолученоИзКассы         = ?(КратДока <> 0, Окр(ПолученоИзКассы * КурсДока / КратДока, 2), 0);
		ПолученоИзКассыПоКартам = ?(КратДока <> 0, Окр(ПолученоИзКассыПоКартам * КурсДока / КратДока, 2), 0);
		
		ЗапросПоПроводкам = Новый Запрос();
		ЗапросПоПроводкам.УстановитьПараметр("Ссылка", Ссылка);
		ЗапросПоПроводкам.УстановитьПараметр("КурсоваяРазница", Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницы);
		ЗапросПоПроводкам.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 = &КурсоваяРазница
		|				ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаДт,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 = &КурсоваяРазница
		|				ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Ссылка) КАК ХозрасчетныйДвиженияССубконто
		|";
		
		ВыборкаКР = ЗапросПоПроводкам.Выполнить().Выгрузить();
		КурсоваяРазница = ВыборкаКР.Итог("СуммаДт") - ВыборкаКР.Итог("СуммаКт");
		// курсовую разницу не разделяем по видам полученных средств
		Если ПолученоИзКассы > 0 Тогда
			ПолученоИзКассы = ПолученоИзКассы + КурсоваяРазница;
		Иначе
			ПолученоИзКассыПоКартам = ПолученоИзКассыПоКартам + КурсоваяРазница;
		КонецЕсли;
	КонецЕсли;
	
	ИтогоПолучено = ПолученоИзКассы + ПолученоИзКассыПоКартам;

	СуммаДоДокумента = СуммаДоДокумента - ИтогоПолучено;

	ДанныеПодотчетногоЛица = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация, Шапка.ПодотчетноеЛицо, Шапка.ДатаДокумента);
		
	ПодотчетноеЛицо   = ДанныеПодотчетногоЛица.Представление;
	ПодотчетноеЛицоОт = ПодотчетноеЛицо;
	ТабельныйНомер    = ДанныеПодотчетногоЛица.ТабельныйНомер;
	Подразделение     = ДанныеПодотчетногоЛица.ПодразделениеОрганизации;
	Должность         = ДанныеПодотчетногоЛица.Должность;

	// Выводим титульный лист авансового отчета
	ОбластьМакета.Параметры.Заполнить(Шапка);
	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		// {ОбособленныеПодразделения
		Если ЗначениеЗаполнено(Подразделение.НаименованиеПолное) Тогда
			ПредставлениеПодразделения = Подразделение.НаименованиеПолное;
		Иначе
		// }ОбособленныеПодразделения		
			ПредставлениеПодразделения = Подразделение.Наименование;
		// {ОбособленныеПодразделения
		КонецЕсли;		
		// }ОбособленныеПодразделения		
		
		ОбластьМакета.Параметры.ПредставлениеПодразделения         = ПредставлениеПодразделения;
	КонецЕсли;
	ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица          = ПодотчетноеЛицо;
	ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛицаОт        = ПодотчетноеЛицоОт;
	ОбластьМакета.Параметры.ТабельныйНомер                         = ТабельныйНомер;
	ОбластьМакета.Параметры.ДолжностьПодотчетногоЛицаПредставление = Должность;
	ОбластьМакета.Параметры.НомерДокумента                         = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	ОбластьМакета.Параметры.ПолученоИзКассы                        = ПолученоИзКассы;
	ОбластьМакета.Параметры.ПолученоИзКассыПоКартам                = ПолученоИзКассыПоКартам;

	Если СуммаДоДокумента >= 0 тогда
		ОбластьМакета.Параметры.НачальныйОстаток    =   СуммаДоДокумента;
	Иначе
		ОбластьМакета.Параметры.НачальныйПерерасход = - СуммаДоДокумента;
	КонецЕсли;

	ОбластьМакета.Параметры.ИтогоПолучено = ИтогоПолучено;
	Если НЕ (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		Израсходовано = Окр(Шапка.СуммаДокумента * КурсДока / КратДока, 2) + КурсоваяРазница;
	Иначе
		Израсходовано = Шапка.СуммаДокумента;
	КонецЕсли;
	ОбластьМакета.Параметры.Израсходовано = Израсходовано;

	ОстатокНаКонец = СуммаДоДокумента + ИтогоПолучено - Израсходовано;
	Если ОстатокНаКонец >= 0  Тогда
		ОбластьМакета.Параметры.КонечныйОстаток    = ОстатокНаКонец;
	Иначе
		ОбластьМакета.Параметры.КонечныйПерерасход = - ОстатокНаКонец;
	КонецЕсли;

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");

	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	Руководитель = Руководители.РуководительПредставление;
	Бухгалтер    = Руководители.ГлавныйБухгалтерПредставление;
	Кассир       = Руководители.КассирПредставление;

	ДляРасчета   = Шапка.СуммаДокумента * ДанныеВал.Курс / ДанныеВал.Кратность;

	ИспСумма     = Окр(ДляРасчета, 2, 1);
	ЦелСумма     = Цел(ИспСумма);
	КопСумма     = Формат((ИспСумма - ЦелСумма) * 100, "ЧЦ=2; ЧН=00; ЧВН=");

	ОбластьМакета.Параметры.ИзрасходованоРуб    = ЦелСумма;
	ОбластьМакета.Параметры.ИзрасходованоКоп    = КопСумма;

	ОбластьМакета.Параметры.ДатаДокумента       = Шапка.ДатаДокумента;
	
	ОбластьМакета.Параметры.Руководитель        = Руководитель;
	ОбластьМакета.Параметры.ГлавныйБухгалтер    = Бухгалтер;
	ОбластьМакета.Параметры.ОрганизацияПоОКПО   = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.СуммаОтчетаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИспСумма, мВалютаРегламентированногоУчета) + " (" + ЦелСумма + " руб. " + КопСумма + " коп.)";
	ОбластьМакета.Параметры.КоличествоДокументов= КоличествоДокументов;
	ОбластьМакета.Параметры.КоличествоЛистов    = КоличествоЛистов;
	
	ОбластьМакета.Параметры.ПредставлениеОрганизации           = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.ПредставлениеГлавногоБухгалтера    = Бухгалтер;
	ОбластьМакета.Параметры.Кассир                             = Кассир;
	ОбластьМакета.Параметры.РуководительПредставление          = Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителяПредставление = Руководители.РуководительДолжность;
	
	
	ЗапросПоПроводкам = Новый Запрос();
	ЗапросПоПроводкам.УстановитьПараметр("Ссылка", Ссылка);
	ЗапросПоПроводкам.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 8
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт,
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма,
	|	МИНИМУМ(Хозрасчетный.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Ссылка
	|	И (НЕ(Хозрасчетный.СчетДт.Забалансовый
	|				ИЛИ Хозрасчетный.СчетКт.Забалансовый))
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ВыборкаПроводок = ЗапросПоПроводкам.Выполнить().Выбрать();

	Счетчик = 0;
	Пока ВыборкаПроводок.Следующий() Цикл

		ОбластьМакета.Параметры["СубСчетДебет"  + (Счетчик + 1)] = ВыборкаПроводок.СчетДт;
		ОбластьМакета.Параметры["СуммаДебет"    + (Счетчик + 1)] = ВыборкаПроводок.Сумма;
		ОбластьМакета.Параметры["СубСчетКредит" + (Счетчик + 1)] = ВыборкаПроводок.СчетКт;
		ОбластьМакета.Параметры["СуммаКредит"   + (Счетчик + 1)] = ВыборкаПроводок.Сумма;

		Счетчик = Счетчик + 1;

	КонецЦикла;

	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	// ОБОРОТНАЯ СТОРОНА
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросТовары = Новый Запрос();
	ЗапросТовары.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросТовары.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросТовары.УстановитьПараметр("ВалютаРеглУчета", мВалютаРегламентированногоУчета);
	ЗапросТовары.УстановитьПараметр("ПустойСчет",      ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	// Выборка данных из табличных частей документа.
	
	ЗапросТовары.Текст =
	
	"ВЫБРАТЬ
	|	АвансовыйОтчет.Поставщик КАК Поставщик,
	|	АвансовыйОтчет.НомерВходящегоДокумента КАК ДокументНомер,
	|	АвансовыйОтчет.ДатаВходящегоДокумента КАК ДокументДата,
	|	АвансовыйОтчет.ВидДокВходящий КАК НаименованиеРасхода,
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА АвансовыйОтчет.Сумма
	|			ИНАЧЕ ВЫБОР
	|					КОГДА АвансовыйОтчет.Ссылка.СуммаВключаетНДС = ИСТИНА
	|						ТОГДА АвансовыйОтчет.Сумма
	|					ИНАЧЕ АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС
	|				КОНЕЦ * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|		КОНЕЦ) КАК ПоОтчету,
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА АвансовыйОтчет.Ссылка.СуммаВключаетНДС = ИСТИНА
	|						ТОГДА АвансовыйОтчет.Сумма
	|					ИНАЧЕ АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ) КАК ПоОтчетуВВалюте,
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА АвансовыйОтчет.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДС,
	|	АвансовыйОтчет.СчетУчета.Код КАК СчетЗатрат,
	|	АвансовыйОтчет.СчетУчетаНДС КАК СчетНДС
	|ПОМЕСТИТЬ ДанныеАвансовогоОтчета
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	АвансовыйОтчет.СчетУчета.Код,
	|	АвансовыйОтчет.СчетУчетаНДС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	СУММА(АвансовыйОтчет.Сумма),
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА 0
	|			ИНАЧЕ АвансовыйОтчет.СуммаВзаиморасчетов
	|		КОНЕЦ),
	|	СУММА(0),
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код = АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|			ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|			КОНЕЦ + ВЫБОР
	|				КОГДА (НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет)
	|						И (НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет)
	|					ТОГДА "", ""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|			КОНЕЦ
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код = АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|			ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|			КОНЕЦ + ВЫБОР
	|				КОГДА (НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет)
	|						И (НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет)
	|					ТОГДА "", ""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|			КОНЕЦ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА АвансовыйОтчет.Сумма
	|			ИНАЧЕ ВЫБОР
	|					КОГДА АвансовыйОтчет.Ссылка.СуммаВключаетНДС = ИСТИНА
	|						ТОГДА АвансовыйОтчет.Сумма
	|					ИНАЧЕ АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС
	|				КОНЕЦ * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА АвансовыйОтчет.Ссылка.СуммаВключаетНДС = ИСТИНА
	|						ТОГДА АвансовыйОтчет.Сумма
	|					ИНАЧЕ АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА АвансовыйОтчет.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	АвансовыйОтчет.СчетЗатрат.Код,
	|	АвансовыйОтчет.СчетУчетаНДС
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	АвансовыйОтчет.СчетЗатрат.Код,
	|	АвансовыйОтчет.СчетУчетаНДС";
	ЗапросТовары.Выполнить();
	
    // Выборка уникальных счетов учета по документам, подтверждающим расходы.
	ТекстЗапроса =
	"ВЫБРАТЬ 
	|	Поставщик КАК Поставщик,
	|	ДокументНомер КАК ДокументНомер,
	|	ДокументДата КАК ДокументДата,
	|	НаименованиеРасхода КАК НаименованиеРасхода,
	|	СчетЗатрат КАК Счет
	|ПОМЕСТИТЬ
	|	СписокСчетов
	|ИЗ 
	|	ДанныеАвансовогоОтчета
	|";
	Если УчитыватьНДС Тогда
	
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ 
		|	Поставщик,
		|	ДокументНомер,
		|	ДокументДата,
		|	НаименованиеРасхода,
		|	СчетНДС
		|ИЗ 
		|	ДанныеАвансовогоОтчета
		|";
	
	КонецЕсли;
	
	ЗапросТовары.Текст = ТекстЗапроса;
	ЗапросТовары.Выполнить();
	
	// Свертка сумм по документам, подтверждающим расходы.
	ЗапросТовары.Текст =
	"ВЫБРАТЬ
	|	Поставщик КАК Поставщик,
	|	ДокументНомер КАК ДокументНомер,
	|	ДокументДата КАК ДокументДата,
	|	НаименованиеРасхода КАК НаименованиеРасхода,
	|	СУММА(ПоОтчету) КАК ПоОтчету,
	|	СУММА(ПоОтчетуВВалюте) КАК ПоОтчетуВВалюте,
	|	СУММА(СуммаНДС) КАК СуммаНДС
	|ИЗ 
	|	ДанныеАвансовогоОтчета
	|
	|СГРУППИРОВАТЬ ПО
	|	Поставщик,
	|	ДокументНомер,
	|	ДокументДата,
	|	НаименованиеРасхода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата,
	|	ДокументНомер
	|";
	Товар = ЗапросТовары.Выполнить().Выбрать();
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим табличные части
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	НомерСтроки   = 0;

	ИтогоПоОтчету        = 0;
	ИтогоПоОтчетуВВалюте = 0;

	Пока Товар.Следующий() Цикл

		ОбластьМакета.Параметры.Заполнить(Товар);
		НомерСтроки = НомерСтроки + 1;
		ОбластьМакета.Параметры.НомерСтроки         = НомерСтроки;
		ОбластьМакета.Параметры.ДокументДата        = Товар.ДокументДата;
		ОбластьМакета.Параметры.НаименованиеРасхода = СокрЛП(Товар.НаименованиеРасхода);
		ОбластьМакета.Параметры.ДебетСубСчета 		= "";
		
		// Выборка счетов, соответствующих документу расхода.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Поставщик", Товар.Поставщик);
		Запрос.УстановитьПараметр("ДокументНомер", Товар.ДокументНомер);
		Запрос.УстановитьПараметр("ДокументДата", Товар.ДокументДата);
		Запрос.УстановитьПараметр("НаименованиеРасхода", Товар.НаименованиеРасхода);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Счет
		|ИЗ
		|	СписокСчетов
		|ГДЕ
		|	Поставщик = &Поставщик 
		|	И ДокументНомер = &ДокументНомер
		|	И ДокументДата = &ДокументДата
		|	И НаименованиеРасхода = &НаименованиеРасхода
		|УПОРЯДОЧИТЬ ПО
		|	Счет
		|";
			
		ВыборкаСчетов = Запрос.Выполнить().Выбрать();
		Пока ВыборкаСчетов.Следующий() Цикл
			ОбластьМакета.Параметры.ДебетСубСчета = ОбластьМакета.Параметры.ДебетСубСчета
			                                      + ?(ПустаяСтрока(ОбластьМакета.Параметры.ДебетСубСчета), "", ", ")
			                                      + ВыборкаСчетов.Счет;
		КонецЦикла;
		
		Сумма = Товар.ПоОтчету 
		      + ?(Шапка.СуммаВключаетНДС, 0, Товар.СуммаНДС);

		ОбластьМакета.Параметры.ПоОтчету = Сумма;
		ОбластьМакета.Параметры.ПоУчету  = Сумма;
		
		ИтогоПоОтчету = ИтогоПоОтчету + Сумма;
		
		Если НЕ (Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		
			СуммаВВалюте = Товар.ПоОтчетуВВалюте
			             + ?(Шапка.СуммаВключаетНДС, 0, Товар.СуммаНДС);
				  
			ОбластьМакета.Параметры.ПоУчетуВВалюте  = СуммаВВалюте;
			ОбластьМакета.Параметры.ПоОтчетуВВалюте = СуммаВВалюте;
			
			ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте + СуммаВВалюте;
			
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Выводим подвал авансового отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = ПодотчетноеЛицо;
	ОбластьМакета.Параметры.ИтогоПоОтчету        = ИтогоПоОтчету;
	ОбластьМакета.Параметры.ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте;
	ОбластьМакета.Параметры.ИтогоПоУчету         = ИтогоПоОтчету;
	ОбластьМакета.Параметры.ИтогоПоУчетувВалюте  = ИтогоПоОтчетуВВалюте;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАвансовогоОтчета()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт

	Если ИмяМакета = "Аванс_Отчет" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьАвансовогоОтчета();
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Авансовый отчет"), НепосредственнаяПечать);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Аванс_Отчет","Авансовый отчет");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента)

	Если ЗаполнятьБУ = Истина Тогда

		Если ИмяТабЧасти = "Прочее" Тогда
			СтрокаТЧ.СчетЗатрат = СчетаУчета.СчетУчета;
			
			СтрокаТЧ.Субконто1	 = СчетаУчета.Субконто1;
			СтрокаТЧ.Субконто2   = СчетаУчета.Субконто2;
			СтрокаТЧ.Субконто3   = СчетаУчета.Субконто3;
		Иначе
			СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
		КонецЕсли;

	ИначеЕсли ЗаполнятьБУ = Ложь Тогда

		Если ИмяТабЧасти = "Прочее" Тогда
			СтрокаТЧ.СчетЗатрат   = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Иначе
			СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаБУРегл()

// Заполняет счета НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента)

	Если ЗаполнятьНУ  = Истина Тогда

		Если ИмяТабЧасти = "Прочее" Тогда
			СтрокаТЧ.СчетЗатратНУ = СчетаУчета.СчетУчета;
			
			СтрокаТЧ.СубконтоНУ1 	= СчетаУчета.Субконто1;
			СтрокаТЧ.СубконтоНУ2   	= СчетаУчета.Субконто2;
			СтрокаТЧ.СубконтоНУ3   	= СчетаУчета.Субконто3;
		КонецЕсли;

	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		Если ИмяТабЧасти = "Прочее" Тогда
			СтрокаТЧ.СчетЗатратНУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаНУРегл()

// Заполняет счета БУ и НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
	
	МетаданныеДокумента = ЭтотОбъект.Метаданные();
	
	ЗаполнитьСчетаБУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента);
	
	Если НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОтражениеВУСН", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
	Иначе
		ЗаполнитьСчетаНУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
////
//// Параметры: 
////  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
////  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
////
//// Возвращаемое значение:
////  Сформированная таблица значений.
////
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Вид ценностей объекта учета для данной строки
	ТаблицаТоваров.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаТоваров.Колонки.Добавить("Ценность");

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
////
//// Параметры: 
////  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
////  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
////
//// Возвращаемое значение:
////  Сформированная таблица значений.
////
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	ТаблицаТары.Колонки.Добавить("ПроводкаСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	ВалютаРег      = мВалютаРегламентированногоУчета;
	Данные         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
	ДанныеДоговора = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаДокумента, Дата);

	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = СтрокаТаблицы.Сумма;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
											 СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
											 ДанныеДоговора.Курс,      Данные.Курс,
											 ДанныеДоговора.Кратность, Данные.Кратность);
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуПоОплате(РезультатЗапросаПоОплате, СтруктураШапкиДокумента)

	ТаблицаПоОплате = РезультатЗапросаПоОплате.Выгрузить();

	ТаблицаПоОплате.Колонки.Добавить("ПроводкаСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	ВалютаРег      = мВалютаРегламентированногоУчета;
	Данные         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаПоОплате Цикл

		Если СтрокаТаблицы.ВалютаДоговора = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма = СтрокаТаблицы.СуммаВзаиморасчетов;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
											 СтруктураШапкиДокумента.ВалютаДокумента,    ВалютаРег,
											 СтруктураШапкиДокумента.КурсДокумента,      Данные.Курс,
											 СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаПоОплате;

КонецФункции // ПодготовитьТаблицуПоОплате()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоПрочие  - результат запроса по табличной части "Прочие",
//  СтруктураШапкиДокумента  - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуПрочие(РезультатЗапросаПоПрочее, СтруктураШапкиДокумента)

	ТаблицаПрочие = РезультатЗапросаПоПрочее.Выгрузить();

	// Вид ценностей объекта учета для данной строки
	ТаблицаПрочие.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаПрочие.Колонки.Добавить("Ценность");

	ВалютаБух     = мВалютаРегламентированногоУчета;

	КурсВалютыБух = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаБух, Дата);
	КурсБух       = КурсВалютыБух.Курс;
	КратБух       = КурсВалютыБух.Кратность;

	КолонкаСумма = ТаблицаПрочие.Колонки["Сумма"];
	ТаблицаПрочие.Колонки.Добавить("СуммаБух", Новый ОписаниеТипов(КолонкаСумма.ТипЗначения));

	Для Каждого СтрокаТаб Из ТаблицаПрочие Цикл

		НДС         = СтрокаТаб.НДС;
		СуммаБезНДС = ?(СуммаВключаетНДС, СтрокаТаб.Сумма - НДС, СтрокаТаб.Сумма);

		// Пересчитаем сумму по курсу
		СтрокаТаб.СуммаБух = СуммаБезНДС * ((СтруктураШапкиДокумента.КурсДокумента * КратБух)
		                     / (КурсБух * СтруктураШапкиДокумента.КратностьДокумента));

	КонецЦикла;

	Возврат ТаблицаПрочие;

КонецФункции // ПодготовитьТаблицуПрочие()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ФизЛицо, ВалютаДокумента");

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если Товары.Количество() > 0 
	 ИЛИ ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Выданные авансы".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументАванса, Сумма");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы",СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	СтруктураОбязательныхПолей.Вставить("СчетУчета");

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		СтруктураОбязательныхПолей.Вставить("ОтражениеВУСН");
	КонецЕсли;
	
	// Для учета в подсистеме НДС
	//СтруктураОбязательныхПолей.Вставить("Поставщик");
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
		
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Товары"": ";
		СтрокаСообщения = " указан забалансовый счет. Прием на комиссию документом не поддерживается!";
        	
		Если СтрокаТЧ.СчетУчета.Забалансовый Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;

		Если СтруктураШапкиДокумента.УчитыватьНДС
			И НЕ (СтруктураШапкиДокумента.НДСВключенВСтоимость)
			И СтрокаТЧ.НДС <> 0 Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДС) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверка номера ГТД
		Если УправлениеЗапасами.НеУказанНомерГТД(СтрокаТЧ.НомерГТД, СтрокаТЧ.СтранаПроисхождения) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Номер ГТД""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ОплатаПоставщикам";
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура(
		"Контрагент, ДоговорКонтрагента, СпособПогашенияЗадолженности, Сумма, СчетУчетаРасчетовПоАвансам");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(
		ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	Для каждого Платеж Из ОплатаПоставщикам Цикл
	
		ТекстНомераСтроки = "Строка номер " + Платеж.НомерСтроки + " табличной части ""Оплата поставщикам"": ";
		
		Если (Платеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу)
			И (НЕ ЗначениеЗаполнено(Платеж.Сделка)) Тогда
			
			СтрокаСообщения = ТекстНомераСтроки
				+ "Не заполнено значение реквизита ""Документ расчетов"".";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			
		КонецЕсли;
			
		Если (Платеж.СпособПогашенияЗадолженности <> Перечисления.СпособыПогашенияЗадолженности.НеПогашать)
			И (НЕ ЗначениеЗаполнено(Платеж.СчетУчетаРасчетовСКонтрагентом)) Тогда
			
			СтрокаСообщения = ТекстНомераСтроки
				+ "Не заполнено значение реквизита ""Счет расчетов"".";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЦикла;

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(
		ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоОплате, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоПрочее         - таблица значений, содержащая результат запроса с данными для проведения и проверки ТЧ Прочее
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПрочее(ТаблицаПоПрочее, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	РеквизитыСтр = "Содержание, Сумма";
	РеквизитыСтр = РеквизитыСтр + ", СчетЗатрат";
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		РеквизитыСтр = РеквизитыСтр + ", СтавкаНДС";
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		РеквизитыСтр = РеквизитыСтр + ", СчетЗатратНУ";
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		РеквизитыСтр = РеквизитыСтр + ", ОтражениеВУСН";
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Прочее", Новый Структура(РеквизитыСтр), Отказ, Заголовок);

	// Проверка заполнения счета учета НДС
	Для каждого СтрокаТЧ Из ТаблицаПоПрочее Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Прочее"": ";
		Если УчитыватьНДС
			И НЕ (НДСВключенВСтоимость)
			И СтрокаТЧ.НДС <> 0 Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДС) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПрочее()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, Контрагент, ДоговорКонтрагента");

	СтруктураОбязательныхПолей.Вставить("СчетУчета");
	СтруктураОбязательныхПолей.Вставить("СчетУчетаТары");

	Для каждого СтрокаТЧ Из ТаблицаПоТаре Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Товары"": ";
		СтрокаСообщения = " указан забалансовый счет. Прием на комиссию документом не поддерживается!";

		Если СтрокаТЧ.СчетУчетаБУЗаб Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;

	КонецЦикла;

	// Теперь вызовем общую процедуру проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()


// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                          Отказ, Заголовок);

	ДвиженияПоРегистрамБухгалтерии(РежимПроведения, СтруктураШапкиДокумента, 
	                        ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                        Отказ, Заголовок);

	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоПрочее,
	                          Отказ, Заголовок);
							
	ТаблицыДляПроведенияПоНДС = Новый Структура();
	ТаблицыДляПроведенияПоНДС.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	ТаблицыДляПроведенияПоНДС.Вставить("ТаблицаПоПрочее",  ТаблицаПоПрочее);

	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДляПроведенияПоНДС, Отказ, Заголовок);
	
	// {УчетДоходовИРасходовИП
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	
	СписокПлатежей = ТаблицаПоТоварам.Скопировать(,"НомерСтроки,Сумма,СуммаБезНДС,НДС");
	СписокПлатежей.Колонки.Добавить("РеквизитыДокументаОплаты");
	СписокПлатежей.Колонки.Добавить("ДокументОплаты");
	Для Каждого ДокументОплаты Из СписокПлатежей Цикл
		ДокументОплаты.ДокументОплаты = ЭтотОбъект.Ссылка;
		ДокументОплаты.Сумма = ДокументОплаты.СуммаБезНДС + ДокументОплаты.НДС;
		ДокументОплаты.РеквизитыДокументаОплаты = 
			ДоходыИРасходыПредпринимателя.РеквизитыДокументаОплатыСтр(
				Товары[ДокументОплаты.НомерСтроки-1].НомерВходящегоДокумента,
				Товары[ДокументОплаты.НомерСтроки-1].ДатаВходящегоДокумента);
	КонецЦикла;
	
	ДоходыИРасходыПредпринимателя.ПоступлениеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, 1, ТаблицаПоТоварам, "СчетУчета", "Номенклатура","НоменклатурнаяГруппа",, СписокПлатежей);
	
	СписокПлатежей = ТаблицаПоПрочее.Скопировать(,"НомерСтроки,Сумма,СуммаБезНДС,НДС");
	СписокПлатежей.Колонки.Добавить("РеквизитыДокументаОплаты");
	СписокПлатежей.Колонки.Добавить("ДокументОплаты");
	Для Каждого ДокументОплаты Из СписокПлатежей Цикл
		ДокументОплаты.ДокументОплаты = ЭтотОбъект.Ссылка;
		ДокументОплаты.Сумма = ДокументОплаты.СуммаБезНДС + ДокументОплаты.НДС;
		ДокументОплаты.РеквизитыДокументаОплаты = 
			ДоходыИРасходыПредпринимателя.РеквизитыДокументаОплатыСтр(
				Прочее[ДокументОплаты.НомерСтроки-1].НомерВходящегоДокумента,
				Прочее[ДокументОплаты.НомерСтроки-1].ДатаВходящегоДокумента);
	КонецЦикла;
			
	ТаблицаПоПрочее.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаПоПрочее.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ДоходыИРасходыПредпринимателя.ПоступлениеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, 1, ТаблицаПоПрочее, "СчетЗатрат", "Номенклатура", "Субконто", "Субконто", СписокПлатежей);
	// }УчетДоходовИРасходовИП

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамБухгалтерии(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	Отказ, Заголовок);

	ВалютаРег = мВалютаРегламентированногоУчета;
	
	// Формирование проводок.
	Проводки = Движения.Хозрасчетный;

	Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
		СчетРасчетовСПодотчетнымЛицом = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
	Иначе
		СчетРасчетовСПодотчетнымЛицом = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
	КонецЕсли;

	ДатаДок      = Дата;
	СкладПроводок = СтруктураШапкиДокумента.Склад;

	// Проводки по товарам
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		
		МПЗ = БухгалтерскийУчет.ПолучитьНазваниеОбъекта(СтрокаТаблицы.СчетУчета);
		Проводка = Проводки.Добавить();

		Проводка.Период      = ДатаДок;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		
		 
		СодержаниеПроводки  = "Поступление " + МПЗ + " по " + СтрокаТаблицы.ВидДокВходящий + " " 
			+ СтрокаТаблицы.НомерВходящегоДокумента + " от " + Формат(СтрокаТаблицы.ДатаВходящегоДокумента, "ДЛФ=Д");
		Проводка.Содержание = СодержаниеПроводки;

		Проводка.СчетДт      = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура,Истина, Заголовок);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СкладПроводок);
		
		// Для товаров, принятых на комиссию партия прописывается всегда 
		Если (ПартионныйУчетБУ) ИЛИ (УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаТаблицы.СчетУчета)) Тогда 
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", Ссылка, Истина, Заголовок);
		КонецЕсли;
		
		Проводка.КоличествоДт= СтрокаТаблицы.Количество;

		Если СтруктураШапкиДокумента.НДСВключенВСтоимость ИЛИ СтрокаТаблицы.СчетУчета.Забалансовый Тогда
			Проводка.Сумма = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		Иначе
			Проводка.Сумма = СтрокаТаблицы.СуммаБезНДС;
		КонецЕсли;

		Проводка.СчетКт             = СчетРасчетовСПодотчетнымЛицом;
		Проводка.СубконтоКт.РаботникиОрганизаций = СтруктураШапкиДокумента.ФизЛицо;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
		Если СчетРасчетовСПодотчетнымЛицом.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			
			Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал;
			Иначе
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаБезНДСВал;
			КонецЕсли;
		КонецЕсли;
		
		// Налоговый учет
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если СтруктураШапкиДокумента.НДСВключенВСтоимость ИЛИ СтрокаТаблицы.СчетУчета.Забалансовый Тогда
				СуммаНУ = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
			Иначе
				СуммаНУ = СтрокаТаблицы.СуммаБезНДС;
			КонецЕсли;
			
		КонецЕсли;
		
		// Проводки по НДС
		Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС 
			И СтрокаТаблицы.НДС <> 0 И НЕ СтрокаТаблицы.СчетУчета.Забалансовый Тогда

			Проводка = Проводки.Добавить();

			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;

			Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтрокаТаблицы.Поставщик  , Истина, Заголовок);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СФПолученные",    СтрокаТаблицы.СчетФактура, Истина, Заголовок);

			Проводка.СчетКт      = СчетРасчетовСПодотчетнымЛицом;
			Проводка.СубконтоКт.РаботникиОрганизаций  = СтруктураШапкиДокумента.ФизЛицо;
			Если СчетРасчетовСПодотчетнымЛицом.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.НДСВал;
			КонецЕсли;

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
			Проводка.Сумма       = СтрокаТаблицы.НДС;
	    	Проводка.Содержание  = СодержаниеПроводки;

		КонецЕсли;
		
		// Учет товаров по номерам ГТД
		Если УправлениеЗапасами.ЭтоИмпортныйТовар(СтрокаТаблицы.СчетУчета, СтрокаТаблицы.НомерГТД, СтрокаТаблицы.СтранаПроисхождения) Тогда
			
			Проводка = Проводки.Добавить();

			Проводка.Период = ДатаДок;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
	    	Проводка.Содержание  = СодержаниеПроводки;

			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ГТД;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура, Истина, Заголовок);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НомераГТД", СтрокаТаблицы.НомерГТД, Истина, Заголовок);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтраныПроисхождения", СтрокаТаблицы.СтранаПроисхождения, Истина, Заголовок);
		
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;

		КонецЕсли;

	КонецЦикла; // Проводки по товарам

	// Проводки по таре
	Для каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл

		// Бухгалтерский учет
		Проводка = Проводки.Добавить();

		Проводка.Период      = ДатаДок;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
	    Проводка.Содержание  = "Поступление возвратной тары";
		Проводка.Сумма       = СтрокаТаблицы.ПроводкаСумма;

		Проводка.СчетДт      = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура,Истина , Заголовок);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады"      , СкладПроводок);

		Если ПартионныйУчетБУ Тогда 
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии",Ссылка,Истина, Заголовок);
		КонецЕсли;

		Проводка.КоличествоДт = СтрокаТаблицы.Количество;

		Проводка.СчетКт       = СтрокаТаблицы.СчетРасчетовЗаТару;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты"       , СтрокаТаблицы.Контрагент,Истина , Заголовок);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры"          , СтрокаТаблицы.ДоговорКонтрагента);
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
		Если СчетРасчетовСПодотчетнымЛицом.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкаСумма / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента;
		КонецЕсли;
		
	КонецЦикла; // Проводки по таре

	// Проводки по расчетам с поставщиками
	Если ТаблицаПоОплатамПоставщикам.Количество() > 0 Тогда

		СтруктураШапкиДокумента.Вставить("КоррСчет", СчетРасчетовСПодотчетнымЛицом);
		// {ОбособленныеПодразделения
		СтруктураШапкиДокумента.Вставить("КоррПодразделение", ПодразделениеОрганизации);
        // }ОбособленныеПодразделения
		ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ПогаситьЗадолженностьКонтрагентов(
			СтруктураШапкиДокумента, Неопределено, ЭтотОбъект, 
			Отказ, Заголовок, , Истина);
			
		Если Отказ Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	// Проводки по таблице "Прочее"
	Для каждого СтрокаТаблицы Из ТаблицаПоПрочее Цикл
		
		СодержаниеПроводки = СтрокаТаблицы.Содержание + " по " + СтрокаТаблицы.ВидДокВходящий + " " 
			+ СтрокаТаблицы.НомерВходящегоДокумента + " от " + Формат(СтрокаТаблицы.ДатаВходящегоДокумента, "ДЛФ=Д");
			
		Проводка = Проводки.Добавить();
		
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = СодержаниеПроводки;
		Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
		
		Проводка.СчетДт          = СтрокаТаблицы.СчетЗатрат;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
		
		Проводка.СчетКт          = СчетРасчетовСПодотчетнымЛицом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаТаблицы.ПодразделениеЗатрат, "Дт");
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Кт");
		
		Если СчетРасчетовСПодотчетнымЛицом.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			СуммаНУ = ?(СтруктураШапкиДокумента.НДСВключенВСтоимость, СтрокаТаблицы.Сумма, СтрокаТаблицы.СуммаБезНДС);
			
			НалоговыйУчет.СоздатьПроводкиПоРазнымСчетамБУиНУ(
				СтруктураШапкиДокумента, Проводки, Проводка, Заголовок, СуммаНУ,
				СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы.СубконтоНУ1, СтрокаТаблицы.СубконтоНУ2, СтрокаТаблицы.СубконтоНУ3);
				
		КонецЕсли;
			
		// Проводка по НДС
		Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость 
			И СтруктураШапкиДокумента.УчитыватьНДС 
			И СтрокаТаблицы.НДС > 0 Тогда
			
			Проводка = Проводки.Добавить();
			
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = СтрокаТаблицы.НДС;
    	    Проводка.Содержание  = СодержаниеПроводки;

			Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "СФПолученные", СтрокаТаблицы.СчетФактура, Истина, Заголовок);

			Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные тогда

				СубконтоОбСтр = СтрокаТаблицы.СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства,"ВидСубконто");

				Если СубконтоОбСтр = Неопределено тогда
					ОбщегоНазначения.СообщитьОбОшибке("На счете затрат отсутствует вид субконто <" + Строка(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства) + ">. Субконто для счета учета НДС не может быть заполнено.",, Заголовок);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТаблицы["Субконто"+СубконтоОбСтр.НомерСтроки],Истина, Заголовок);
				КонецЕсли;

				//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,     "ВидыЦенностей",        СтрокаТаблицы.ВидЦенности,Истина, Заголовок);
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,     "Контрагенты",             СтрокаТаблицы.Поставщик,?(СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные,Ложь,Истина), Заголовок);

			Проводка.СчетКт       = СчетРасчетовСПодотчетнымЛицом;
			Проводка.СубконтоКт.РаботникиОрганизаций = СтруктураШапкиДокумента.ФизЛицо;

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);	
				
			Если СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета 
			   И СчетРасчетовСПодотчетнымЛицом.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.НДСВал;
			КонецЕсли;

		КонецЕсли; // Проводка по НДС

	КонецЦикла;

	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрамБухгалтерии()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, 
		                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоПрочее,
		                          Отказ, Заголовок);

	
	Если (Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН) Тогда
		Возврат;
	КонецЕсли;
	
	//ПО РЕГИСТРУ РАСХОДОВ УСН
	Движения.РасходыПриУСН.Очистить();
	НаборДвижений = Движения.РасходыПриУСН;
	
	// Получим таблицу значений, совпадающую со структрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаДвижений, 
							Перечисления.ВидыРасходовУСН.Номенклатура, СтруктураШапкиДокумента.ФизЛицо,
							Перечисления.СтатусыПартийУСН.Купленные, СтруктураШапкиДокумента.СуммаВключаетНДС);
	
	НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоПрочее, ТаблицаДвижений, 
							Перечисления.ВидыРасходовУСН.Услуги, СтруктураШапкиДокумента.ФизЛицо,
							Перечисления.СтатусыПартийУСН.Купленные, СтруктураШапкиДокумента.СуммаВключаетНДС);
	
	СуммаВзаиморасчетов   = СуммаДокумента;
	
	//Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.РасходыПриУСН.ВыполнитьПриход();
		НаборДвижений.Записать(Истина);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТаблицаВзаиморасчетов) Тогда
		ТаблицаВзаиморасчетов = Новый ТаблицаЗначений;
	КонецЕсли;
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, Новый Структура("ТаблицаРасчетов", ТаблицаВзаиморасчетов));
		
КонецПроцедуры

Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ, Заголовок);
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл

		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;
		
		ТаблицаОплаты = ТабЧасть.Скопировать(, "СуммаБезНДС, НДС");
		ТаблицаОплаты.Колонки.Добавить("ДокументРасчетов", Новый ОписаниеТипов("ДокументСсылка.АвансовыйОтчет"));
		ТаблицаОплаты.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаОплаты.Колонки.Добавить("СуммаБУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10,2));
		Для Каждого СтрокаТЧ Из ТаблицаОплаты Цикл
			СтрокаТЧ.ДокументРасчетов = СтруктураШапкиДокумента.Ссылка;
			СтрокаТЧ.ДатаДокументаРасчетов = СтруктураШапкиДокумента.Дата;
			СтрокаТЧ.СуммаБУ = СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС;
		КонецЦикла;

		Если ТабЧасть.Количество()> 0 и СтруктураШапкиДокумента.УчитыватьНДС Тогда 
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаОплаты, Движения, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////
	// При необходимости, отражаем в регистре партионного учета для НДС
    ТаблицаДвиженийНДСПартии = Движения.НДСПоПриобретеннымЦенностям;
	
	Если ТаблицыДокумента.Свойство("ТаблицаПоТоварам") и ТаблицыДокумента.ТаблицаПоТоварам.Количество()>0 
		Тогда
		ТаблицаДляНДСПартии = ТаблицыДокумента.ТаблицаПоТоварам.скопировать();
		УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураШапкиДокумента,ТаблицаДляНДСПартии, ТаблицаДвиженийНДСПартии, Отказ);
	КонецЕсли; 
	// При необходимости, отражаем в регистре партионного учета для НДС
	//////////////////////////////////////////////////////////////////////
	
	
КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()	

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоАвансам, ТаблицаПоОплате, ТаблицаПоПрочее) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", 		"Номенклатура");
	СтруктураПолей.Вставить("Количество"  , 		"Количество");
	СтруктураПолей.Вставить("Сумма"       , 		"Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   , 		"СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         , 		"СуммаНДС");
	СтруктураПолей.Вставить("Услуга"      , 		"Номенклатура.Услуга");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа",	"Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Поставщик"   , 		"Поставщик"); 
	СтруктураПолей.Вставить("СчетФактура" , 		"СчетФактура"); 
	СтруктураПолей.Вставить("НомерГТД"    , 		"НомерГТД");
	СтруктураПолей.Вставить("СчетУчета" , 			"СчетУчета");
	СтруктураПолей.Вставить("СчетУчетаБУЗаб", 		"СчетУчета.Забалансовый");
	СтруктураПолей.Вставить("СчетУчетаНДС", 		"СчетУчетаНДС");
	СтруктураПолей.Вставить("ОтражениеВУСН"  , 		"ОтражениеВУСН");
	СтруктураПолей.Вставить("СтранаПроисхождения", 	"СтранаПроисхождения");
	СтруктураПолей.Вставить("Цена"		  ,			"Цена");
	СтруктураПолей.Вставить("ВидДокВходящий"  , "ВидДокВходящий");
	СтруктураПолей.Вставить("НомерВходящегоДокумента"  , "НомерВходящегоДокумента");
	СтруктураПолей.Вставить("ДатаВходящегоДокумента"  , "ДатаВходящегоДокумента");
	
	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура" , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"   , "Количество");
	СтруктураПолей.Вставить("Сумма"        , "Сумма");
	СтруктураПолей.Вставить("Контрагент"   , "Контрагент");
	СтруктураПолей.Вставить("СчетУчета"   , "СчетУчета");
	СтруктураПолей.Вставить("СчетУчетаБУЗаб", "СчетУчета.Забалансовый");
	СтруктураПолей.Вставить("СчетРасчетовЗаТару", "СчетУчетаТары");
	СтруктураПолей.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДоговорОрганизация", "ДоговорКонтрагента.Организация");

	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения 
	// по табличной части "Авансы".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДокументАванса", "ДокументАванса");
	СтруктураПолей.Вставить("Сумма", "Сумма");

	РезультатЗапросаПоВыданнымАвансам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения 
	// по табличной части "Оплата поставщикам".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Контрагент"           , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВалютаДоговора"       , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"   , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("Сделка"               , "Сделка");
	СтруктураПолей.Вставить("Сумма"                , "Сумма");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"  , "СуммаВзаиморасчетов");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"   , "КурсВзаиморасчетов");
	СтруктураПолей.Вставить("СпособПогашенияЗадолженности",      "СпособПогашенияЗадолженности");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов",        "КратностьВзаиморасчетов");
	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", "СчетУчетаРасчетовСКонтрагентом");
	СтруктураПолей.Вставить("СчетУчетаРасчетовПоАвансам",     "СчетУчетаРасчетовПоАвансам");
	
	РезультатЗапросаПоОплатеПоставщикам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаПоставщикам", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения
	// по табличной части "Прочее".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДС");
	СтруктураПолей.Вставить("Содержание"  , "Содержание");
	СтруктураПолей.Вставить("ВидДокВходящий"  , "ВидДокВходящий");
	СтруктураПолей.Вставить("НомерВходящегоДокумента"  , "НомерВходящегоДокумента");
	СтруктураПолей.Вставить("ДатаВходящегоДокумента"  , "ДатаВходящегоДокумента");
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("ПодразделениеЗатрат","ПодразделениеЗатрат");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Поставщик"   , "Поставщик");
	СтруктураПолей.Вставить("СчетФактура" , "СчетФактура");
	СтруктураПолей.Вставить("СчетЗатрат"  , "СчетЗатрат");
	СтруктураПолей.Вставить("СчетЗатратНУ", "СчетЗатратНУ");
	СтруктураПолей.Вставить("Субконто1",    "Субконто1");
	СтруктураПолей.Вставить("Субконто2",    "Субконто2");
	СтруктураПолей.Вставить("Субконто3",    "Субконто3");
	СтруктураПолей.Вставить("СубконтоНУ1",  "СубконтоНУ1");
	СтруктураПолей.Вставить("СубконтоНУ2",  "СубконтоНУ2");
	СтруктураПолей.Вставить("СубконтоНУ3",  "СубконтоНУ3");
	СтруктураПолей.Вставить("ОтражениеВУСН",   "ОтражениеВУСН");
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");

	РезультатЗапросаПоПрочее = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Прочее", СтруктураПолей);

	// Подготовим таблицы для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоТаре    = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	ТаблицаПоАвансам = РезультатЗапросаПоВыданнымАвансам.Выгрузить();
	ТаблицаПоОплате  = ПодготовитьТаблицуПоОплате(РезультатЗапросаПоОплатеПоставщикам, СтруктураШапкиДокумента);
	ТаблицаПоПрочее  = ПодготовитьТаблицуПрочие(РезультатЗапросаПоПрочее, СтруктураШапкиДокумента);

	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоПрочее,  СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);

КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ПОДЧИНЕННЫМИ ДОКУМЕНТАМИ


//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + ОплатаПоставщикам.Итог("Сумма") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Прочее");

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

 	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоАвансам, ТаблицаПоОплате, ТаблицаПоПрочее;

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);	
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоАвансам, ТаблицаПоОплате, ТаблицаПоПрочее);
	
	//Проверим на возможность проведения в БУ и НУ
	Для каждого СтрокаОплаты из ОплатаПоставщикам Цикл
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,СтрокаОплаты.ДоговорКонтрагента,
		Отказ, Заголовок,"Оплата поставщикам, строка "+СтрокаОплаты.НомерСтроки+" - ");
	КонецЦикла;
	
	// Проверить заполнение ТЧ
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПрочее(ТаблицаПоПрочее, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПартионныйУчетБУ = УправлениеЗапасами.ВедетсяПартионныйУчет(ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация));
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ПартионныйУчетНУ = УправлениеЗапасами.ВедетсяПартионныйУчет(ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация), "НУ");
	Иначе
		ПартионныйУчетНУ = Ложь;
	КонецЕсли;
	
	мПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(Организация, Дата);
	
	// Движения по документу
	Если Не Отказ Тогда
		ОбработкаПодчиненныхДокументовСчетФактура();
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоАвансам, ТаблицаПоОплате, ТаблицаПоПрочее,
							Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбработкаПодчиненныхДокументовСчетФактура(Ложь);
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
КонецПроцедуры

// Процедура проведения подчиненных документов счет-фактура.
// Выбирает все счета-фактуры в которых в качестве документа
// основания указан текущий документ и перепроводит их.
//
Процедура ОбработкаПодчиненныхДокументовСчетФактура(Провести = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакПроведения", Не Провести);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СчетФактураПолученный.Ссылка
	               |ИЗ
	               |	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	               |ГДЕ
	               |	СчетФактураПолученный.Ссылка.Проведен = &ПризнакПроведения
	               |	И (НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления)
	               |	И СчетФактураПолученный.Ссылка.ДокументОснование = &ДокументОснование";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		ТекущийДокумент = СтрокаРезультата.Ссылка.ПолучитьОбъект();
		ТекущийДокумент.Проведен = Провести;
		ТекущийДокумент.Записать();
	КонецЦикла;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

