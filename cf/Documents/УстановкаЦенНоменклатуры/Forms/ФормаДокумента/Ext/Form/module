////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

Перем мФормаПодбора;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Производит перезаполнение и установку необходимых полей в строке табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, которую необходимо перезаполнить.
//
Процедура ПерезаполнитьСтроку(СтрокаТабличнойЧасти)

	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда

		// Ничего делать не надо
		Возврат;

	КонецЕсли;

	// Заполним все требуемые реквизиты
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЦен", Дата);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры.Цена КАК Цена,
	|	ЦеныНоменклатуры.Валюта КАК Валюта
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, ТипЦен = &ТипЦен И Номенклатура = &Номенклатура) КАК ЦеныНоменклатуры
	|";

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СтрокаТабличнойЧасти.Цена = 0;
		СтрокаТабличнойЧасти.Валюта = ТипЦен.ВалютаЦены;
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТабличнойЧасти.Цена = Выборка.Цена;
			СтрокаТабличнойЧасти.Валюта = Выборка.Валюта;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПерезаполнитьСтроку()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, которую необходимо заполнить.
//
Процедура ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти) Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	КонецЕсли;
	ПерезаполнитьСтроку(СтрокаТабличнойЧасти);

КонецПроцедуры // ПриИзмененииНоменклатуры()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	Если НЕ мФормаПодбора = Неопределено Тогда
		РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбора, Реквизит);
	КонецЕсли;

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	ЕстьКоличество = Ложь;
	ЕстьЦена       = Истина;

	Команда = "ПодборВТабличнуюЧасть";

	СписокВидовПодбора = Новый СписокЗначений();
	СписокВидовПодбора.Добавить(,                      "По справочнику");
	СписокВидовПодбора.Добавить("ОстаткиНоменклатуры", "Остатки номенклатуры");
	СписокВидовПодбора.Добавить("ЦеныНоменклатуры",    "Цены номенклатуры");

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	СтруктураПараметровПодбора.Вставить("Контрагент"           , Неопределено);
	СтруктураПараметровПодбора.Вставить("ДоговорВзаиморасчетов", Неопределено);
	СтруктураПараметровПодбора.Вставить("Склад"                , Неопределено);
	СтруктураПараметровПодбора.Вставить("Организация"          , Неопределено);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьКоличество"       , ЕстьКоличество);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);

	СтруктураПараметровПодбора.Вставить("Заголовок"          , "Подбор номенклатуры в документ " + 
	                                                           ПредставлениеДок + " № " + Номер );

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, мФормаПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)Экспорт

	Перем Номенклатура, Характеристика, ЕдиницаИзмерения, Цена, ВалютаЦены, ЗапрашиватьЦену;

	Модифицированность = Истина;
	Если ЗначениеВыбора.Команда = "ЗаполнениеТабличнойЧасти" Тогда

		Выборка = ЗначениеВыбора.Результат.Выбрать();

		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЦен <> Null
			   И Выборка.Номенклатура <> Null
			   И Не Выборка.ЭтоГруппа Тогда

				ТипЦен = Выборка.ТипЦен;

				Номенклатура               = Выборка.Номенклатура;

				СтруктураОтбора = Новый Структура();
				СтруктураОтбора.Вставить("Номенклатура",               Номенклатура);

				СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураОтбора);
				Если СтрокаТабличнойЧасти = Неопределено Тогда
					СтрокаТабличнойЧасти = Товары.Добавить();
					СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
				КОнецЕсли;

				СтрокаТабличнойЧасти.Цена = Выборка.Цена;
				СтрокаТабличнойЧасти.Валюта = ТипЦен.ВалютаЦены;

			КонецЕсли;
		КонецЦикла;

	ИначеЕсли ЗначениеВыбора.Команда = "ПодборВТабличнуюЧасть" Тогда

		ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
		ЗначениеВыбора.Свойство("ЗапрашиватьЦену" , ЗапрашиватьЦену);

		Если ЗапрашиватьЦену = Неопределено Тогда
			ЗапрашиватьЦену = Ложь
		КонецЕсли;
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура",               Номенклатура);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураОтбора);
		Если СтрокаТабличнойЧасти = Неопределено Тогда

			// Надо добавить
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = Номенклатура;
			Если ЗапрашиватьЦену Тогда

				ЗначениеВыбора.Свойство("Цена" ,             Цена);
				ЗначениеВыбора.Свойство("ВалютаЦены" ,       ВалютаЦены);

				НоваяСтрока.Цена = Цена;
				НоваяСтрока.Валюта = ВалютаЦены;

			Иначе
				ПриИзмененииНоменклатуры(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;

	КонецЕслИ;

КонецПроцедуры // ОбработкаПодбора()

// Осуществляет вызов формы заполнения табличной части документа
//
// Параметры:
//  Очистить            - Истина - заполнить с предварительной очисткой, Ложь - добавить
//  Обновить            - Истина - обновить строки, Ложь - добавить строки
//  ПоЦенамКонтрагентов - Истина - заполнять по ценам контрагентов, Ложь - заполнять по ценам номенклатуры
//
Процедура ЗаполнитьТовары(Очистить, Обновить, ПоНоменклатуре = Ложь, Группа = Неопределено)

	Если Товары.Количество() > 0 И Очистить Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		Товары.Очистить();

	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда

		ОбщегоНазначения.СообщитьОбОшибке("Не выбран тип цен номенклатуры");
		// Ничего делать не надо
		Возврат;

	КонецЕсли;

	// Заполним все требуемые реквизиты
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЦен", Дата);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("Ложь", Ложь);
	Запрос.УстановитьПараметр("Группа", Группа);
	Текст = 
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ЦеныНоменклатуры.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.Валюта ЕСТЬ NULL 
	|			ТОГДА ТипыЦенСправочник.ВалютаЦены
	|		ИНАЧЕ ЦеныНоменклатуры.Валюта
	|	КОНЕЦ КАК Валюта
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, ТипЦен = &ТипЦен) КАК ЦеныНоменклатуры
	|		ПО СправочникНоменклатура.Ссылка = ЦеныНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыЦенНоменклатуры КАК ТипыЦенСправочник
	|		ПО ЦеныНоменклатуры.ТипЦен = ТипыЦенСправочник.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ЭтоГруппа = &Ложь";
	Если Не ПоНоменклатуре Тогда
		Текст = Текст + 
		" И
		|	ТипыЦенСправочник.Ссылка = &ТипЦен	
		|";
	КонецЕсли;
	Если ЗначениеЗаполнено(Группа) Тогда
		Текст = Текст + 
		" И
		|	СправочникНоменклатура.Ссылка В ИЕРАРХИИ (&Группа)
		|";
	КонецЕсли;
    Запрос.Текст = Текст;
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураОтбора);
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Если Обновить Тогда
				Продолжить;
			Иначе
				СтрокаТабличнойЧасти = Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
			КонецЕсли;
		КонецЕсли;
		СтрокаТабличнойЧасти.Цена = Выборка.Цена;
		СтрокаТабличнойЧасти.Валюта = Выборка.Валюта;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) Тогда
			СтрокаТабличнойЧасти.Валюта = ТипЦен.ВалютаЦены;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТовары()

// Процедура выполняет заполнение табличной части 
// копированием из выбранного пользователем документа Поступления.
//
// Параметры:
//  ДокументПоступление - Документ поступления, данными которого надо заполнить табличную часть.
//  ЧиститьТипыЦен      - Признак необходимости очистки типов цен перед заполнением.
//
Процедура ЗаполнитьТабличнуюЧастьПоПоступлению(ДокументПоступление, ЧиститьТипыЦен = Истина) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументПоступление.ТипЦен) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе "+СокрЛП(ДокументПоступление)+" не установлен тип цен! Заполнение невозможно.");
		Возврат;
	КонецЕсли;

	ТипЦен = ДокументПоступление.ТипЦен;

	Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступление);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.СуммаВключаетНДС,
	|	Док.ВалютаДокумента,
	|	Док.Контрагент,
	|	Док.ТипЦен     КАК ТипЦен,
	|	Док.Товары.(
	|		Номенклатура,
	|		Цена,
	|		СтавкаНДС,
	|		СУММА(НомерСтроки) // для того, чтобы работала группировка
	|	)
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Товары.(Номенклатура,
	|	Цена,
	|	СтавкаНДС)";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Выборка = Шапка.Товары.Выбрать();

	Пока Выборка.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура",               Выборка.Номенклатура);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураОтбора);

		Если СтрокаТабличнойЧасти = Неопределено Тогда

			СтрокаТабличнойЧасти = Товары.Добавить();
			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;

		КонецЕсли;
		СтрокаТабличнойЧасти.Цена  = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		                                        Выборка.Цена,
		                                        Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
		                                        Шапка.СуммаВключаетНДС,
		                                        Шапка.ТипЦен.ЦенаВключаетНДС,
		                                        Шапка.ТипЦен.ЦенаВключаетНДС,
		                                        УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС));

		СтрокаТабличнойЧасти.Валюта =  Шапка.ВалютаДокумента;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоПоступлению()

// Заполняет список пунктов подменю "Изменить".
// Всем кнопкам назначается одно переданное действие.
//
// Параметры:
//  ЭлементМеню            - кнопка командной панели формы соответственного подменю,
//  ОбъектОбработкиВыбора  - действие, которое надо выполнить при выборе любого пункта подменю.
//
Процедура УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементМеню, ОбъектОбработкиВыбора) Экспорт

КонецПроцедуры // УстановитьПодменюВыбораИзмененияПоТипуЦен()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	   	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// быть может, это ввод на основании
		Если НЕ ЗначениеЗаполнено(ПараметрОснование) Тогда
			// Заполнить реквизиты значениями по умолчанию.
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		КонецЕсли;

		НеПроводитьНулевыеЗначения = Истина;
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	// Проверим корректность записанного документа, если он некорректен, исправим его
	Если НЕ ЗначениеЗаполнено(ТипЦен) И Товары.Количество() > 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ " + СокрЛП(Ссылка) + " был записан некорректно! Информация о ценах очищена.");
		Товары.Очистить();
	КонецЕсли;

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,СписокТиповЦен");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.Товары);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	СписокДобавленныхТиповЦен = Новый СписокЗначений;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Если ЗначениеВыбора.Команда = "ИзменениеТиповЦенСкидок" Тогда

		ИначеЕсли ЗначениеВыбора.Команда = "НастройкаПараметров" Тогда

			ДеревоКолонок = ЗначениеВыбора.ДеревоКолонок;
			Для Каждого СтрокаДерева Из ДеревоКолонок.Строки Цикл
				ЭтаФорма[СтрокаДерева.КолонкаИмя] = СтрокаДерева.Пометка;
			КонецЦикла;

		ИначеЕсли ЗначениеВыбора.Команда = "ЗаполнениеТабличнойЧасти"
		      ИЛИ ЗначениеВыбора.Команда = "ПодборВТабличнуюЧасть" Тогда

			ОбработкаПодбора("Товары",ЗначениеВыбора);

		КонецЕсли;
	КонецЕсли;
    	
КонецПроцедуры // ОбработкаВыбора()


// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Так как изменение таблицы цен не влечет с собой изменение объекта,
	// то при изменении формы надо установить и признак модифицированности объекта
	Если Модифицированность и Не Модифицированность() Тогда

		// Установим признак модифицированности объекта
		Комментарий = Комментарий;

	КонецЕсли;

КонецПроцедуры // ОбновлениеОтображения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывает сервисный механизм для заполнения табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенДействиеЗаполнитьПоЦенамНоменклатуры(Кнопка)

	ЗаполнитьТовары(Истина, Ложь);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДействиеЗаполнитьПоЦенамНоменклатуры()

// Процедура вызывает сервисный механизм для заполнения табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенДействиеДобавитьПоЦенамНоменклатуры(Кнопка)

	ЗаполнитьТовары(Ложь, Ложь);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДействиеДобавитьПоЦенамНоменклатуры()

// Процедура вызывает сервисный механизм для обновления табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенОбновитьПоЦенамНоменклатуры(Кнопка)

	ЗаполнитьТовары(Ложь, Истина);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенОбновитьПоЦенамНоменклатуры()

// Процедура вызывает сервисный механизм для обновления табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенЗаполнитьПоНоменклатуре(Кнопка)
	
	ЗаполнитьТовары(Истина, Ложь, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицыТиповЦенЗаполнитьПоГруппеНоменклатуры(Кнопка)
	
	ФормаНоменклатуры = Справочники.Номенклатура.ПолучитьФормуВыбораГруппы();
	ФормаНоменклатуры.Заголовок = "Выберите группу номенклатуры";
	ФормаНоменклатуры.РежимВыбора = Истина;
	Группа = ФормаНоменклатуры.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(Группа) Тогда
		ЗаполнитьТовары(Истина, Ложь, Истина, Группа);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывает сервисный механизм для заполнения табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенЗаполнитьПоПоступлению(Кнопка)
	
	// Если заполняем, то почистим ТЧ
	Если Товары.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		Товары.Очистить();
	КонецЕсли;
	
	// Теперь нужно выбрать документ, по которому будем заполнять
	ФормаВыбора = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите документ ""Поступление товаров и услуг"" для заполнения документа установки цен";
	ФормаВыбора.РежимВыбора = Истина;

	ДокументПоступление = ФормаВыбора.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(ДокументПоступление) Тогда 
		Возврат; // ничего не выбрали.
	КонецЕсли;

	ЗаполнитьТабличнуюЧастьПоПоступлению(ДокументПоступление);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенЗаполнитьПоПоступлению()

// Процедура вызывает сервисный механизм для заполнения табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенДобавитьПоПоступлению(Кнопка)

	// Теперь нужно выбрать документ, по которому будем заполнять
	ФормаВыбора = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите документ ""Поступление товаров и услуг"" для заполнения документа установки цен";
	ФормаВыбора.РежимВыбора = Истина;

	ДокументПоступление = ФормаВыбора.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(ДокументПоступление) Тогда 
		Возврат; // ничего не выбрали.
	КонецЕсли;

	ЗаполнитьТабличнуюЧастьПоПоступлению(ДокументПоступление, Ложь);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДобавитьПоПоступлению()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывает сервисный механизм изменения цен для заполнения табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект       = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента      = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС             = Ложь; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице    = Ложь;
	//ФормаИзменениеТабличнойЧастиТовары.мЕстьСумма    		= Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	
	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДействиеИзменить()

// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенПодбор()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ЦЕН


// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

