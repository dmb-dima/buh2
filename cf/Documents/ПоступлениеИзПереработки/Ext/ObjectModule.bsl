//// Строки, хранят реквизиты имеющие смысл только для бухгалтерского
// и налогового учетов, соответственно в случае если документ не
// отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизиты Экспорт;

// Переменные в которые помещаются параметры учетной политики
Перем мУчетнаяПолитика;

Перем ДвиженияВыпускПродукцииУслуг;
Перем ТаблицаДвиженийВыпуск;

Перем Заголовок;
Перем мВалютаРегламентированногоУчета;
Перем мПоддержкаПБУ18;             

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьМХ18()
	
	ТоварКод = "Код";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеИзПереработки.Номер,
	|	ПоступлениеИзПереработки.Дата КАК ДатаДокумента,
	|	ПоступлениеИзПереработки.Организация,
	// {ОбособленныеПодразделения
	|	ПоступлениеИзПереработки.ПодразделениеОрганизации КАК Подразделение,
	|	ВЫРАЗИТЬ(ПоступлениеИзПереработки.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200)) КАК ПредставлениеПодразделения,
	// }ОбособленныеПодразделения 
	|	ПоступлениеИзПереработки.Склад
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК ПоступлениеИзПереработки
	|ГДЕ
	|	ПоступлениеИзПереработки.Ссылка = &ТекущийДокумент";
	ШапкаДокумента = Запрос.Выполнить().Выбрать();
	ШапкаДокумента.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеИзПереработки.Номенклатура,
	|	1 КАК Коэффициент,
	|	ПоступлениеИзПереработки.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ЕСТЬNULL(ПоступлениеИзПереработки.Количество, 0)) КАК Количество,
	|	СУММА(ЕСТЬNULL(ПоступлениеИзПереработки.СуммаПлановая, 0)) КАК СуммаПлановая,
	|	СУММА(ЕСТЬNULL(ПоступлениеИзПереработки.Количество, 0)) КАК КоличествоМест,
	|	МИНИМУМ(ПоступлениеИзПереработки.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеИзПереработки.Продукция КАК ПоступлениеИзПереработки
	|ГДЕ
	|	ПоступлениеИзПереработки.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеИзПереработки.Номенклатура,
	|	ПоступлениеИзПереработки.Номенклатура.БазоваяЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	ВыборкаСтрок = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент  = Новый ТабличныйДокумент;

	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеИзПереработки_МХ18";
	
	Макет = ПолучитьОбщийМакет("МХ18");

	Шапка                        = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы             = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	Строка                       = Макет.ПолучитьОбласть("Строка");
	Итого                        = Макет.ПолучитьОбласть("Итого");
	ИтогоПоНакладнойОднаСтраница = Макет.ПолучитьОбласть("ИтогоПоНакладнойОднаСтраница");
	ИтогоПоНакладнойМногоСтраниц = Макет.ПолучитьОбласть("ИтогоПоНакладнойМногоСтраниц");
	ПодвалТаблицы                = Макет.ПолучитьОбласть("ПодвалТаблицы");
	Подвал                       = Макет.ПолучитьОбласть("Подвал");
	
	// Выводим шапку
	Шапка.Параметры.Заполнить(ШапкаДокумента);
	Шапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ШапкаДокумента);
	Шапка.Параметры.ДатаДокумента  = ШапкаДокумента.ДатаДокумента;
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ШапкаДокумента.Организация, ШапкаДокумента.ДатаДокумента);

	Шапка.Параметры.ПредставлениеОрганизации   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	Шапка.Параметры.ПредставлениеПолучателя    = ШапкаДокумента.Склад;
	Шапка.Параметры.ОрганизацияПоОКПО          = СведенияОбОрганизации.КодПоОКПО;

	ТабДокумент.Вывести(Шапка);

	// Выводим заголовок таблицы
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	// Вычисляем количество строк в таблице
	КоличествоСтрок = ВыборкаСтрок.Количество();
	
	// Инициализация счетчика страниц
	НомерСтраницы = 1;

	// Инициализация итогов по странице
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоМестНаСтранице        = 0;
	ИтогоКоличествоНаСтранице  = 0;
	ИтогоСуммаНаСтранице       = 0;

	// Инициализация итогов по документу
	ИтогоМассаБрутто = 0;
	ИтогоМест        = 0;
	ИтогоКоличество  = 0;
    ИтогСумма        = 0;
	
	// Выводим многострочную часть документа
	Для Каждого СтрокаДокумента Из ВыборкаСтрок Цикл

		// Проверим, помещается ли строка с итогами на страницу, если нет, будем
		// выводить итоги по странице, а строку перенесем на следующую страницу
		СтрокаСИтогами = Новый Массив;
		СтрокаСИтогами.Добавить(Строка);
		
		// Если строка - последняя в таблице, проверим, поместятся ли
		// итоги по накладной и подвал.
		Если (ВыборкаСтрок.Индекс(СтрокаДокумента) + 1) = КоличествоСтрок Тогда
			
			Если НомерСтраницы > 1 Тогда
				СтрокаСИтогами.Добавить(Итого);
				СтрокаСИтогами.Добавить(ИтогоПоНакладнойМногоСтраниц);
				СтрокаСИтогами.Добавить(Подвал);
			Иначе
				СтрокаСИтогами.Добавить(ИтогоПоНакладнойОднаСтраница);
				СтрокаСИтогами.Добавить(Подвал);
			КонецЕсли;
				
		Иначе // не последняя строка, достаточно проверить, поместятся ли итоги по странице
			
			СтрокаСИтогами.Добавить(Итого);
			
		КонецЕсли;
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСИтогами) Тогда

			// Выводим итоги по странице
			Итого.Параметры.ИтогМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице;
			Итого.Параметры.ИтогМестНаСтранице        = ИтогоМестНаСтранице;
			Итого.Параметры.ИтогКоличествоНаСтранице  = ИтогоКоличествоНаСтранице;
			Итого.Параметры.ИтогСуммаНаСтранице       = ИтогоСуммаНаСтранице;
			
			ТабДокумент.Вывести(Итого);

			// Выводим подвал таблицы
			ТабДокумент.Вывести(ПодвалТаблицы);
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Очистим итоги по странице
			ИтогоМассаБруттоНаСтранице = 0;
			ИтогоМестНаСтранице        = 0;
			ИтогоКоличествоНаСтранице  = 0;
			ИтогоСуммаНаСтранице       = 0;
			
			// Установим новый номер
			НомерСтраницы = НомерСтраницы + 1;
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;

		// Выводим строку
		Строка.Параметры.Заполнить(СтрокаДокумента);
		Строка.Параметры.ТоварНаименование = СокрЛП(СтрокаДокумента.Номенклатура.НаименованиеПолное);
		Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			Строка.Параметры.ТоварКод          = СокрЛП(СтрокаДокумента.Номенклатура.Артикул);
		Иначе
			Строка.Параметры.ТоварКод          = СокрЛП(СтрокаДокумента.Номенклатура.Код);
		КонецЕсли;

		
        Строка.Параметры.Цена              = ?(СтрокаДокумента.Количество = 0, 0, СтрокаДокумента.СуммаПлановая / СтрокаДокумента.Количество);
		Строка.Параметры.Сумма             = СтрокаДокумента.СуммаПлановая;

		Мест        = СтрокаДокумента.КоличествоМест;
		Мест        = ?(Мест <> Неопределено, Мест, 0);
		Количество  = СтрокаДокумента.Количество;

		ТабДокумент.Вывести(Строка);

		// Увеличим итоги по странице
		ИтогоМассаБруттоНаСтранице = 0;
		ИтогоМестНаСтранице        = ИтогоМестНаСтранице       + Мест;
		ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице + Количество;
        ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице      + СтрокаДокумента.СуммаПлановая;
		
		// Увеличим итоги по документу
		ИтогоМассаБрутто = 0;
		ИтогоМест        = ИтогоМест       + Мест;
		ИтогоКоличество  = ИтогоКоличество + Количество;
        ИтогСумма        = ИтогСумма       + СтрокаДокумента.СуммаПлановая;

	КонецЦикла;

	// Если страниц много, выводим промежуточные итоги по последней странице
	// перед итогами по накладной
	Если НомерСтраницы > 1 Тогда
		
		// Выводим итоги по странице
		Итого.Параметры.ИтогМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице;
		Итого.Параметры.ИтогМестНаСтранице        = ИтогоМестНаСтранице;
		Итого.Параметры.ИтогКоличествоНаСтранице  = ИтогоКоличествоНаСтранице;
		Итого.Параметры.ИтогСуммаНаСтранице       = ИтогоСуммаНаСтранице;
		
		ТабДокумент.Вывести(Итого);
		
		// Выводим итоги по накладной
		ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
		ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогМест        = ИтогоМест;
		ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогКоличество  = ИтогоКоличество;
	    ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогСумма       = ИтогСумма;

		ТабДокумент.Вывести(ИтогоПоНакладнойМногоСтраниц);
		
	Иначе // только итоги по накладной
		
		ИтогоПоНакладнойОднаСтраница.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
		ИтогоПоНакладнойОднаСтраница.Параметры.ИтогМест        = ИтогоМест;
		ИтогоПоНакладнойОднаСтраница.Параметры.ИтогКоличество  = ИтогоКоличество;
	    ИтогоПоНакладнойОднаСтраница.Параметры.ИтогСумма       = ИтогСумма;

		ТабДокумент.Вывести(ИтогоПоНакладнойОднаСтраница);
		
	КонецЕсли;
	
	// Выводим подвал таблицы
	ТабДокумент.Вывести(ПодвалТаблицы);
	
	// Выводим подвал документа
	Подвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, , ",,,,,,,,0");
	Подвал.Параметры.ИтогСуммаПрописью                          = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогСумма, Константы.ВалютаРегламентированногоУчета.Получить());
	
	ТабДокумент.Вывести(Подвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьМХ18()

Функция ПечатьМ4()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеИзПереработки.Номер КАК Номер,
	|	ПоступлениеИзПереработки.Дата КАК ДатаСоставления,
	|	ПоступлениеИзПереработки.НомерВходящегоСчетаФактуры КАК НомерСопроводительногоДокумента,
	|	ПоступлениеИзПереработки.Организация,
	|	ПоступлениеИзПереработки.Организация КАК ЮрФизЛицо,
	|	ПоступлениеИзПереработки.Склад КАК МестоПриемки,
	|	ПоступлениеИзПереработки.Склад.Представление КАК СкладНаименование,
	|	ПоступлениеИзПереработки.Контрагент.Код КАК ПоставщикКод,
	|	ПоступлениеИзПереработки.Контрагент КАК Поставщик,
	|	ПоступлениеИзПереработки.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ПоступлениеИзПереработки.ВалютаДокумента,
	|	ПоступлениеИзПереработки.КурсВзаиморасчетов КАК Курс,
	|	ПоступлениеИзПереработки.КратностьВзаиморасчетов КАК Кратность,
	|	ПоступлениеИзПереработки.УчитыватьНДС,
	|	ПоступлениеИзПереработки.СуммаВключаетНДС,
	|	ПоступлениеИзПереработки.СчетУчетаРасчетовСКонтрагентом КАК СубСчет
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК ПоступлениеИзПереработки
	|ГДЕ
	|	ПоступлениеИзПереработки.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("Курс",            ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
	ЗапросПоТоварам.УстановитьПараметр("Кратность",       ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	                        |	ПоступлениеИзПереработки.Номенклатура КАК Номенклатура,
	                        |	ВЫРАЗИТЬ(ПоступлениеИзПереработки.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	                        |	ПоступлениеИзПереработки.Номенклатура.Код КАК ТоварКод,
	                        |	ПоступлениеИзПереработки.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	                        |	ПоступлениеИзПереработки.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	                        |	СУММА(ПоступлениеИзПереработки.Количество) КАК КоличествоПринято,
	                        |	СУММА(ПоступлениеИзПереработки.СуммаПлановая) КАК Стоимость,
	                        |	МИНИМУМ(ПоступлениеИзПереработки.НомерСтроки) КАК НомерСтроки
	                        |ИЗ
	                        |	Документ.ПоступлениеИзПереработки.Продукция КАК ПоступлениеИзПереработки
	                        |ГДЕ
	                        |	ПоступлениеИзПереработки.Ссылка = &ТекущийДокумент
	                        |
	                        |СГРУППИРОВАТЬ ПО
	                        |	ПоступлениеИзПереработки.Номенклатура,
	                        |	ПоступлениеИзПереработки.ПлановаяСтоимость,
	                        |	ПоступлениеИзПереработки.Номенклатура.Код,
	                        |	ПоступлениеИзПереработки.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	                        |	ПоступлениеИзПереработки.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	                        |	ВЫРАЗИТЬ(ПоступлениеИзПереработки.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	НомерСтроки";
							
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ЗапросПоТоварам.Текст = СтрЗаменить(ЗапросПоТоварам.Текст, "Номенклатура.Код","Номенклатура.Артикул");
	КонецЕсли;
	ЗапросТовары = ЗапросПоТоварам.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_М4";

	Макет = ПолучитьОбщийМакет("М4");
	
	ОбластьМакетаШапка              = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокДокумента = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьМакетаЗаголовокТаблицы   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаСтрока             = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвалСтрок        = Макет.ПолучитьОбласть("ПодвалСтрок");
	ОбластьМакетаИтого              = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодвал             = Макет.ПолучитьОбласть("Подвал");
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);

	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	 ОбластьМакетаШапка.Параметры.ПредставлениеПодразделения = ПодразделениеЗатрат.Наименование;
								
	ТабДокумент.Вывести(ОбластьМакетаШапка);

	// Выводим заголовок докмента
	ОбластьМакетаЗаголовокДокумента.Параметры.Заполнить(Шапка);
	ОбластьМакетаЗаголовокДокумента.Параметры.ДатаСоставления = Шапка.ДатаСоставления;
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.ДатаСоставления), "НаименованиеДляПечатныхФорм,");
	ОбластьМакетаЗаголовокДокумента.Параметры.ПоставщикНаименование = ПредставлениеКонтрагента;
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокДокумента);
	
	// Выводим заголовок таблицы
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

	// Инициализация итогов в документе
	ИтогоКоличествоПринято = 0;
	ИтогоСуммаБезНДС       = 0;
	ИтогоСуммаНДС          = 0;
	ИтогоВсегоСНДС         = 0;
	Ном                    = 0;

	// Инициализация счетчиков страниц и строк
	НомерСтраницы   = 1;
	НомерСтроки     = 0;
	КоличествоСтрок = ЗапросТовары.Количество();
	
	// Выводим многострочную часть докмента
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		НомерСтроки = НомерСтроки + 1;

		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);

		Кратность = ?(Шапка.Кратность = 0, 1, Шапка.Кратность);
		ВсегоСНДС = ВыборкаСтрок.Стоимость;

		КоличествоПринято = ВыборкаСтрок.КоличествоПринято;
		СуммаНДС          = ВыборкаСтрок.Стоимость;
		Цена              = (ВсегоСНДС - СуммаНДС) / ?(КоличествоПринято = 0, 1, КоличествоПринято);

		ОбластьМакетаСтрока.Параметры.КоличествоПринято = КоличествоПринято;
		ОбластьМакетаСтрока.Параметры.ВсегоСНДС         = ВсегоСНДС;
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС       = ВсегоСНДС - СуммаНДС;
		ОбластьМакетаСтрока.Параметры.СуммаНДС          = СуммаНДС;
		ОбластьМакетаСтрока.Параметры.Цена              = Цена;
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);

		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);  // помещаться и подвал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		Иначе                                              // иначе - только подвал строк
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвалСтрок);
		КонецЕсли;

		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда

			ТабДокумент.Вывести(ОбластьМакетаПодвалСтрок);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			
			НомерСтраницы = НомерСтраницы + 1;
			ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			
			ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакетаСтрока);

		ИтогоКоличествоПринято = ИтогоКоличествоПринято + КоличествоПринято;
		ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + ВсегоСНДС - СуммаНДС;
		ИтогоСуммаНДС          = ИтогоСуммаНДС          + СуммаНДС;
		ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + ВсегоСНДС;

	КонецЦикла;

	// Выводим итоги по документу
	ОбластьМакетаИтого.Параметры.ИтогоКоличествоПринято = ИтогоКоличествоПринято;
	ОбластьМакетаИтого.Параметры.ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС;
	ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС          = ИтогоСуммаНДС;
	ОбластьМакетаИтого.Параметры.ИтогоВсегоСНДС         = ИтогоВсегоСНДС;
	ТабДокумент.Вывести(ОбластьМакетаИтого);

	// Выводим итоги по документу
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьМ4()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "МХ18" Тогда
		ТабДокумент = ПечатьМХ18();
		
	ИначеЕсли ИмяМакета = "М4" Тогда
		ТабДокумент = ПечатьМ4();
		
	ИначеЕсли ИмяМакета = "СправкаРасчетВал" Тогда
		
		// Справка-расчет формирования рублевой суммы документа в валюте
		БухгалтерскийУчетРасчетовСКонтрагентами.НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(Ссылка);
		Возврат;
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);
	
КонецПроцедуры // Печать
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("МХ18", "Накладная МХ-18");
	СтруктураПечатныхФорм.Вставить("М4","М-4 (Приходный ордер)");
	СтруктураПечатныхФорм.Вставить("СправкаРасчетВал", "Справка-расчет ""Рублевая сумма документа в валюте""");
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//////////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизиты = "Продукция.Счет, СчетЗатрат";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет счета учета.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, Заполнять) Экспорт

	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
	
	Если Заполнять = Истина Тогда
		СтрокаТЧ.Счет = СчетаУчета.СчетУчета;
	ИначеЕсли Заполнять = Ложь Тогда
		СтрокаТЧ.Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад, СчетЗатрат, ПодразделениеЗатрат, НоменклатурнаяГруппа,
		|Контрагент, ДоговорКонтрагента, СчетУчетаРасчетовСКонтрагентом");

	// Зачет авансов
	СтруктураОбязательныхПолей.Вставить("СпособЗачетаАвансов");
	Если (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически)
		ИЛИ (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу) Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента, Отказ, Заголовок);


КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт

	РеквизитыТабПродукция = "Номенклатура,Количество,Счет, СуммаПлановая";
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабПродукция, "", мСтрокаРеквизиты, "", "Продукция");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Продукция", Новый Структура(РеквизитыТабПродукция), Отказ, Заголовок);
	
	РеквизитыТабУслуги = "Номенклатура,Количество,СтатьяЗатрат";
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		РеквизитыТабУслуги = РеквизитыТабУслуги + ",СтавкаНДС";
	КонецЕсли;

	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабУслуги, "", мСтрокаРеквизиты, "", "Услуги");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", Новый Структура(РеквизитыТабУслуги), Отказ, Заголовок);
	
	Для Каждого СтрокаТЧ Из Услуги Цикл 
		
		Если СтруктураШапкиДокумента.УчитыватьНДС 
			И Не СтруктураШапкиДокумента.НДСВключенВСтоимость 
			И СтрокаТЧ.СуммаНДС <> 0 
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДС) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
											""" табличной части ""Услуги"": ";
			СтрокаСообщения = "Не заполнено значение реквизита ""Счет НДС""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
	РеквизитыТабМатериалы = "Номенклатура,Количество,СтатьяЗатрат, СчетУчета";
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабМатериалы, "", мСтрокаРеквизиты, "", "ИспользованныеМатериалы");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ИспользованныеМатериалы", Новый Структура(РеквизитыТабМатериалы), Отказ, Заголовок);
	
	РеквизитыТабВозвраты = "Номенклатура,Количество,СчетПередачи, СчетУчета" ;
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабВозвраты, "", мСтрокаРеквизиты, "", "ВозвращенныеМатериалы");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвращенныеМатериалы", Новый Структура(РеквизитыТабВозвраты), Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитов()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	СтруктураОбязательныхПолей.Вставить("СчетУчета");

	// Теперь вызовем общую процедуру проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);

	Для каждого СтрокаТЧ из ТаблицаПоТаре Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Возвратная тара"": ";

		Если СтрокаТЧ.СчетУчета.Забалансовый Тогда

			СтрокаСообщения = "указан забалансовый счет!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)

	ТаблицаПоУслугам = РезультатЗапросаПоУслугам.Выгрузить();
	
	ТаблицаПоУслугам.Колонки.Добавить("СуммаБезНДС");
	ТаблицаПоУслугам.Колонки.Добавить("СчетУчетаЦенности");
	ТаблицаПоУслугам.Колонки.Добавить("ВидЦенности");
	ТаблицаПоУслугам.Колонки.Добавить("СчетФактура");
	ТаблицаПоУслугам.Колонки.Добавить("Субконто1");
	ТаблицаПоУслугам.Колонки.Добавить("Субконто2");
	ТаблицаПоУслугам.Колонки.Добавить("Субконто3");
	ТаблицаПоУслугам.Колонки.Добавить("ПодразделениеЗатрат");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		
		//СтрокаТаблицы.СуммаБезНДС 		= ?(СтруктураШапкиДокумента.СуммаВключаетНДС, СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС, СтрокаТаблицы.Сумма);
		СтрокаТаблицы.СчетУчетаЦенности = СтруктураШапкиДокумента.СчетЗатрат;
		СтрокаТаблицы.ВидЦенности 		= Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		СтрокаТаблицы.СчетФактура		= СтруктураШапкиДокумента.Ссылка;
		СтрокаТаблицы.ПодразделениеЗатрат 	= СтруктураШапкиДокумента.ПодразделениеЗатрат;
		
		СтрокаТаблицы.Субконто1 = СтруктураШапкиДокумента.НоменклатурнаяГруппа;
		СтрокаТаблицы.Субконто2 = СтрокаТаблицы.СтатьяЗатрат;
		
	КонецЦикла;
	
	Возврат ТаблицаПоУслугам;

КонецФункции // ПодготовитьТаблицуТары()

// Процедура формирует движения регистров по табличной части Продукция
////
Процедура ДвиженияПоТабличнойЧастиПродукция(ТаблицаПоПродукции, СтруктураШапкиДокумента)

	Если Продукция.Количество() = 0 И Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Счет40 = (мУчетнаяПолитика.СпособУчетаВыпускаГотовойПродукции = Перечисления.СпособыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40);

	Операция = Движения["Хозрасчетный"];
	ДвиженияВыпускПродукцииУслуг = Движения["ВыпускПродукцииУслуг"];
	ТаблицаДвиженийВыпуск        = ДвиженияВыпускПродукцииУслуг.Выгрузить();

	Для Каждого Строка Из ТаблицаПоПродукции Цикл

		ДвиженияПоВыпускуПродукцииОтходов(Строка, Операция, ТаблицаДвиженийВыпуск, Истина, Счет40,СтруктураШапкиДокумента);
		
	КонецЦикла;
		

	ДвиженияВыпускПродукцииУслуг.мПериод = Дата;
	ДвиженияВыпускПродукцииУслуг.мТаблицаДвижений = ТаблицаДвиженийВыпуск;

КонецПроцедуры // ДвиженияПоТабличнойЧастиПродукция()

// Процедура формирует движения регистров по табличной части Услуги
////
Процедура ДвиженияПоТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента)

	Если ТаблицаПоУслугам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Проводки = Движения["Хозрасчетный"];

	ДатаДока = СтруктураШапкиДокумента.Дата;
	
	ВидыСубконтоСчетов = Новый Соответствие; // кэш видов субконто
	
	Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		
		Проводка = Проводки.Добавить();
		
		Проводка.Период       = Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		
		Проводка.Содержание   = СтрокаТаблицы.Содержание + ?(ПредъявленСчетФактура, " сч.ф." + НомерВходящегоСчетаФактуры + " от " + Формат(ДатаВходящегоСчетаФактуры, "ДЛФ=Д"), "");
		
		СуммаБУ        = СтрокаТаблицы.СуммаБУ;
		Проводка.Сумма = СуммаБУ;
		
		Проводка.СчетДт       = СтрокаТаблицы.СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппа);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
		
		Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",Ссылка);
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеЗатрат, "Дт");
		
		// {ОбособленныеПодразделения
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Кт");
		// }ОбособленныеПодразделения 
		
		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
				СуммаНУ = СтрокаТаблицы.СуммаНУ + СтрокаТаблицы.НДС;
			Иначе
				СуммаНУ = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаБУ - СуммаНУ,СуммаБУ - СуммаНУ,0,0,Проводка, мПоддержкаПБУ18); 
			
		КонецЕсли;

		// Проводка по НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда
			
			НалоговыйАгентЗаСчетСобственныхСредств = УчетНДС.НалоговыйАгентЗаСчетСобственныхСредств(СтрокаТаблицы.ВидЦенности);
			Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
				Проводка = Проводки.Добавить();
				
				Проводка.Период       = Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				
				Проводка.Сумма        = СтрокаТаблицы.НДС;
				Проводка.Содержание   = СтрокаТаблицы.Содержание + ?(ПредъявленСчетФактура, "сч.ф." + НомерВходящегоСчетаФактуры + " от " + Формат(ДатаВходящегоСчетаФактуры, "ДЛФ=Д"), "");
				
				Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СФПолученные", Ссылка, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
				
				Если Не НалоговыйАгентЗаСчетСобственныхСредств 
					Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
					// Проводка при исполнении обязанностей налогового агента
					Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.НДСВал;
					КонецЕсли;
				Иначе
					Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
				КонецЕсли;
				
				// {ОбособленныеПодразделения
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				// }ОбособленныеПодразделения 
								
				Если СтруктураШапкиДокумента.УпрощенныйУчетНДС 
					И СтруктураШапкиДокумента.ПредъявленСчетФактура 
					И СтруктураШапкиДокумента.НДСПредъявленКВычету Тогда
					// Проводки по вычету в случае упрощенного учета НДС

					Проводка = Проводки.Добавить();
					
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					
					Проводка.Содержание   = СтрокаТаблицы.Содержание + ?(ПредъявленСчетФактура, "сч.ф." + НомерВходящегоСчетаФактуры + " от " + Формат(ДатаВходящегоСчетаФактуры, "ДЛФ=Д"), "");
					
					Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НДС; //68.02
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

					Проводка.СчетКт      = СтрокаТаблицы.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"СФПолученные", СтруктураШапкиДокумента.Ссылка, Истина, Заголовок);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент, Истина);

					Проводка.Сумма       = СтрокаТаблицы.НДС;
				КонецЕсли;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.УчетАгентскогоНДС
				И (Не НалоговыйАгентЗаСчетСобственныхСредств 
					Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате) Тогда 
				
				// Нужно дополнительно сформировать проводку по начислению НДС налогового агента
				Проводка2 = Проводки.Добавить();
				
				Проводка2.Период          = Дата;
				Проводка2.Организация     = Проводка.Организация;
								
				Проводка2.Сумма           = Проводка.Сумма;
				Проводка2.Содержание      = "Начислен НДС в качестве налогового агента";
				
				Проводка2.СчетДт          = Проводка.СчетКт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Ссылка);
				
				Если Проводка2.СчетДт.Валютный Тогда
					Проводка2.ВалютаДт        = Проводка.ВалютаКт;
					Проводка2.ВалютнаяСуммаДт = Проводка.ВалютнаяСуммаКт;
				КонецЕсли;
				
				Если Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
					Проводка2.СчетКт          = ПланыСчетов.Хозрасчетный.НДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				Иначе
					Проводка2.СчетКт          = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				КонецЕсли;
									
				// {ОбособленныеПодразделения
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка2, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				// }ОбособленныеПодразделения 
				
				Проводка2.Сумма       = СтрокаТаблицы.НДС;
				
			КонецЕсли;
			
		КонецЕсли; // Проводка по НДС
		
	КонецЦикла;		
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиУслуги()
		
// Процедура формирует движения по выпуску продукции.
//
Процедура ДвиженияПоВыпускуПродукцииОтходов(Строка, Операция, ТаблицаДвиженийВыпуск, ВБухгалтерскомУчете, Счет40,СтруктураШапкиДокумента)

	Если ВБухгалтерскомУчете Тогда
		Счет                = Строка.Счет;
		СчетЗатратТекущий   = ?(Счет40, ПланыСчетов.Хозрасчетный.ВыпускПродукции, СчетЗатрат);
		СчетЗатратТекущийРегистра = СчетЗатрат;
		УчетнаяПолитика     = мУчетнаяПолитика;
	КонецЕсли;

	// Сформируем проводку.
	Если НЕ ЗначениеЗаполнено(Счет)
	 ИЛИ НЕ ЗначениеЗаполнено(СчетЗатратТекущий) Тогда
		Возврат;
	КонецЕсли;

	НоваяПроводка = Операция.Добавить();

	НоваяПроводка.Организация = Организация;
	НоваяПроводка.Период      = Дата;

	НоваяПроводка.СчетДт = Счет;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", Строка.Номенклатура);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады",       Склад);
	
	// Если способ оценки ФИФО или ЛИФО и на счете ведется партионный учет,
	// то в проводке указываем в качестве партии текущий документ.
	Если УправлениеЗапасами.ВедетсяПартионныйУчет(УчетнаяПолитика) Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Партии",       Ссылка);
	КонецЕсли; 

	НоваяПроводка.Содержание   = "Выпуск " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(Счет);

	НоваяПроводка.СчетКт = СчетЗатратТекущий;
	Если Счет40 Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "ВидыСтоимости",        Перечисления.ВидыСтоимости.Плановая);
	КонецЕсли;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", НоменклатурнаяГруппа);
	
	// {ОбособленныеПодразделения
	БухгалтерскийУчет.УстановитьПодразделениеПроводки(НоваяПроводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");
	// }ОбособленныеПодразделения 
	
	БухгалтерскийУчет.УстановитьПодразделениеПроводки(НоваяПроводка, СтруктураШапкиДокумента.ПодразделениеЗатрат, "Кт");
	
	НоваяПроводка.КоличествоДт = ?(НоваяПроводка.СчетДТ.Количественный, Строка.Количество, 0);
	НоваяПроводка.Сумма        = Строка.СуммаПлановая;
	
	// Отражения выпуска в регистре накопления ВыпускПродукцииУслуг
	СтрокаДвижения = ТаблицаДвиженийВыпуск.Добавить();
	СтрокаДвижения.Организация           = Организация;
	СтрокаДвижения.Продукция             = Строка.Номенклатура;
	СтрокаДвижения.СчетЗатрат            = СчетЗатратТекущийРегистра;
	СтрокаДвижения.Подразделение         = СтруктураШапкиДокумента.ПодразделениеЗатрат;
	СтрокаДвижения.НоменклатурнаяГруппа  = НоменклатурнаяГруппа;
	СтрокаДвижения.СчетСписания          = Счет;
	// {ОбособленныеПодразделения
	СтрокаДвижения.ПодразделениеСписания = СтруктураШапкиДокумента.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 
	
	Если Счет.ВидыСубконто.Количество() > 0 Тогда
		СтрокаДвижения.СубконтоСписания1 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[0].ВидСубконто];
	КонецЕсли; 
	
	Если Счет.ВидыСубконто.Количество() > 1 Тогда
		СтрокаДвижения.СубконтоСписания2 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[1].ВидСубконто];
	КонецЕсли;
	
	Если Счет.ВидыСубконто.Количество() > 2 Тогда
		СтрокаДвижения.СубконтоСписания3 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[2].ВидСубконто];
	КонецЕсли;
	
	СтрокаДвижения.Количество = Строка.Количество;
	СтрокаДвижения.ПлановаяСтоимость = Строка.СуммаПлановая;
	
КонецПроцедуры // ДвиженияПоВыпускуПродукцииОтходов()

// Процедура формирует движения по подсистеме УСН.
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, ТаблицаПоПродукции, ТаблицаМатериалов, ТаблицаПоУслугам, Отказ, Заголовок)
	
	Если (Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН) Тогда
		Возврат;
	КонецЕсли;
	
	//ПО РАСХОДАМ УСН
	Движения.РасходыПриУСН.Очистить();
	НаборДвижений = Движения.РасходыПриУСН;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаДвижений, 
							Перечисления.ВидыРасходовУСН.Услуги, СтруктураШапкиДокумента.ДоговорКонтрагента,
							Перечисления.СтатусыПартийУСН.Купленные, СтруктураШапкиДокумента.СуммаВключаетНДС);
							
	//Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.РасходыПриУСН.ВыполнитьПриход();
		НаборДвижений.Записать(Истина);
	КонецЕсли;
	
	ТаблицаМатериаловУСН = ТаблицаМатериалов.Скопировать();
	ТаблицаВозвращенныхМатериаловУСН = ТаблицаМатериалов.Скопировать();
	
	КолСтрок = ТаблицаМатериалов.Количество();
	Для Счетчик = 1 по КолСтрок Цикл
		Если ТаблицаМатериалов[КолСтрок - Счетчик].НеВозвращенныйМатериал Тогда
			ТаблицаВозвращенныхМатериаловУСН.Удалить(ТаблицаВозвращенныхМатериаловУСН[КолСтрок - Счетчик]);
		Иначе
			ТаблицаМатериаловУСН.Удалить(ТаблицаМатериаловУСН[КолСтрок - Счетчик]);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДопПараметров = Новый Структура("ТаблицаМатериалов, ТаблицаВозвращенныхМатериалов, ТаблицаРасчетов", ТаблицаМатериаловУСН, ТаблицаВозвращенныхМатериаловУСН, ТаблицаВзаиморасчетов);
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, СтруктураДопПараметров);
			
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаУслуг, ТаблицаПоМатериалам, ТаблицаВзаиморасчетов, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСПредъявленномуПоставщиком(СтруктураШапкиДокумента, ТаблицаУслуг, Движения, Отказ);
		Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
			УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаУслуг, Движения, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаУслуг, "Услуги", ТаблицаВзаиморасчетов, Движения, Отказ);
	КонецЕсли;
	
	Если ТаблицаПоПродукции.Количество() > 0 Тогда
	    ТаблицаДвиженийНДСПартии = Движения.НДСПоПриобретеннымЦенностям;
		
		ТаблицаДляНДСПартии = ТаблицаПоПродукции.Скопировать();
		ТаблицаДляНДСПартии.Колонки.Добавить("СчетФактура");// Значение не заполняется, только количественный учет
		ТаблицаДляНДСПартии.Колонки.Добавить("ВидЦенности");
		ТаблицаДляНДСПартии.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.Товары,"ВидЦенности");
		ТаблицаДляНДСПартии.Колонки.Счет.Имя = "СчетУчетаЦенности";
		УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураШапкиДокумента, ТаблицаДляНДСПартии, ТаблицаДвиженийНДСПартии, Отказ);
	КонецЕсли;
		
	Если ТаблицаПоМатериалам.Количество() = 0 Тогда
		// Отрабатывать движения по партиям не требуется
		Возврат;
	КонецЕсли;
		
	ТаблицаДвиженийПартии = Движения.НДСПоПриобретеннымЦенностям.ВыгрузитьКолонки();
	
	/////////////////////////////////////////////////////////////////////////////////
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	ТаблицаНДСПартииСписания = УчетНДС.ПодготовитьТаблицуСписанияПартийДляНДС(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	/////////////////////////////////////////////////////////////////////////////////
		
	Если ТаблицаНДСПартииСписания.Количество() <> 0 Тогда
		
		/////////////////////////////////////////////////////////////////////////////////
		// Требуется разбить таблицу партий на две - материалы и возвращенные материалы
		ТаблицаНДСПартииСписания.Индексы.Добавить("НеВозвращенныйМатериал");
		СтрокиМатериалы = ТаблицаНДСПартииСписания.НайтиСтроки(Новый Структура("НеВозвращенныйМатериал", Истина));
		ТаблицаНДСПартииСписанияМатериалы = Новый ТаблицаЗначений;
		Если СтрокиМатериалы.Количество() <> 0 Тогда
			
			Для Каждого Колонка Из ТаблицаНДСПартииСписания.Колонки Цикл
				ТаблицаНДСПартииСписанияМатериалы.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого СтрокаМатериалы Из СтрокиМатериалы Цикл
			
			НоваяСтрока = ТаблицаНДСПартииСписанияМатериалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериалы);
			
			ТаблицаНДСПартииСписания.Удалить(СтрокаМатериалы);
			
		КонецЦикла;
		// Требуется разбить таблицу партий на две - материалы и возвращенные материалы
		/////////////////////////////////////////////////////////////////////////////////
			
		Если ТаблицаНДСПартииСписанияМатериалы.Количество() <> 0 Тогда
			Движения.НДСПоПриобретеннымЦенностям.мПериод          = СтруктураШапкиДокумента.Дата;
				
			ТаблицаДвиженийПартии.Очистить();
				
			/////////////////////////////////////////////////////////////////////////////////
			// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
			УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписанияМатериалы, ТаблицаДвиженийПартии, Истина, Движения.Хозрасчетный, Заголовок, Движения);
			УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписанияМатериалы, ТаблицаДвиженийПартии, Ложь, Движения.Хозрасчетный,Заголовок, Движения);
				
			Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
				Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
				Движения.НДСПоПриобретеннымЦенностям.ВыполнитьПриход();
			КонецЕсли;
				
			/////////////////////////////////////////////////////////////////////////////////
			// НДС по партиям - отразить непосредственное списание.
			ТаблицаДвиженийПартии.Очистить();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписанияМатериалы, ТаблицаДвиженийПартии);
			Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
				Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
				Движения.НДСПоПриобретеннымЦенностям.ВыполнитьРасход();
			КонецЕсли;
			// НДС по партиям - отразить непосредственное списание.
			/////////////////////////////////////////////////////////////////////////////////
			
			/////////////////////////////////////////////////////////////////////////////////
			// НДС по косвенным расходам - движения по регистру НДСКосвенныеРасходы для
			// статей с распределением расходов или с расходами не относящимися к ЕНВД
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаНДСПартииСписанияМатериалы, Движения, Отказ);	
			// НДС по косвенным расходам 
			/////////////////////////////////////////////////////////////////////////////////
		КонецЕсли;
		
		Если ТаблицаНДСПартииСписания.Количество() <> 0 Тогда
			////////////////////////////
			//// Приведение таблицы к общему виду для стандартной работы с таблицами по партиям
			//Если ТаблицаТоваровПоПартиям.Колонки.Найти("Склад") = Неопределено Тогда
			//	ТаблицаТоваровПоПартиям.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
			//КонецЕсли; 
			//ТаблицаТоваровПоПартиям.ЗаполнитьЗначения(Справочники.Склады.ПустаяСсылка(), "Склад");
			//// Приведение таблицы к общему виду для стандартной работы с таблицами по партиям
			////////////////////////////
						
			Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
				//Партии не найдены или отражение в партионном учете НДС не производится.
				//Дальнейшая обработка не требуется
				Возврат;
			КонецЕсли;
					
			// Полученные партии могли быть реализованы с другого склада
			Для Каждого СтрокаПартии Из ТаблицаНДСПартииСписания Цикл
				БУ = СтрокаПартии.СчетУчета.ПолучитьОбъект();
				ВестиСкладскойУчет  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
				Если ВестиСкладскойУчет Тогда
					ВестиСуммовойУчетПоСкладам = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой;
				Иначе
					ВестиСуммовойУчетПоСкладам = Ложь;
				КонецЕсли;
				Если ВестиСуммовойУчетПоСкладам Тогда
					СтрокаПартии.Склад = СтруктураШапкиДокумента.Склад;
				КонецЕсли;
						
			КонецЦикла;
					
			/////////////////////////////////////////////////////////////////////////////////
			// НДС по партиям - отразить сторно непосредственного списания.
			ТаблицаДвиженийПартии.Очистить();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
			Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
				Движения.НДСПоПриобретеннымЦенностям.мПериод          = Дата;
				Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
				Движения.НДСПоПриобретеннымЦенностям.ВыполнитьРасход();
			КонецЕсли;
			// НДС по партиям - отразить сторно непосредственного списания.
			/////////////////////////////////////////////////////////////////////////////////
					
			/////////////////////////////////////////////////////////////////////////////////
			// НДС по партиям - отразить возврат из переработки.
			Для Каждого СтрокаПартии Из ТаблицаНДСПартииСписания Цикл 
				СтрокаПартии.СчетУчета = СтрокаПартии.КорСчетСписания;
				БУ = СтрокаПартии.СчетУчета.ПолучитьОбъект();
				ВестиСкладскойУчет  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
				Если ВестиСкладскойУчет Тогда
					ВестиСуммовойУчетПоСкладам = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой;
				Иначе
					ВестиСуммовойУчетПоСкладам = Ложь;
				КонецЕсли;
				Если ВестиСуммовойУчетПоСкладам Тогда
					СтрокаПартии.Склад = СтруктураШапкиДокумента.Склад;
				КонецЕсли;
			КонецЦикла;
						
			ТаблицаДвиженийПартии.Очистить();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
			Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
				Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
				Движения.НДСПоПриобретеннымЦенностям.ВыполнитьПриход();
			КонецЕсли;
			// НДС по партиям - отразить приход от комиссионера.
			/////////////////////////////////////////////////////////////////////////////////
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоПродукции,ТаблицаМатериалов, ТаблицаВозвращенныхМатериалов, ТаблицаПоУслугам, ТаблицаПоТаре, 
	ТаблицаЗачетаАвансов, Отказ, Заголовок)
	
	ДвиженияПоТабличнойЧастиПродукция(ТаблицаПоПродукции, СтруктураШапкиДокумента);
	
	Проводки  = Движения.Хозрасчетный;
	ТаблицыДокумента = Новый Структура("ТаблицаПоУслугам",ТаблицаПоУслугам);

	ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
		СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, 
		СтруктураШапкиДокумента.НДСВключенВСтоимость, Отказ, Заголовок);
		
	ДвиженияПоТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента);
	ТаблицаМатериалов.Колонки.Добавить("НеВозвращенныйМатериал", Новый ОписаниеТипов("Булево"));
	ТаблицаМатериалов.ЗаполнитьЗначения(Истина, "НеВозвращенныйМатериал");
	
	Если Не ТаблицаВозвращенныхМатериалов.Количество() = 0 Тогда
		
		ТаблицаМатериалов.Колонки.Добавить("СчетПередачи");
		ТаблицаМатериалов.Колонки.Добавить("СодержаниеПроводки"); 
		
		ТаблицаМатериалов.ЗаполнитьЗначения("Списание материалов в производство", "СодержаниеПроводки");
		
		ТаблицаВозвращенныхМатериалов.Колонки.Добавить("СодержаниеПроводки");
		ТаблицаВозвращенныхМатериалов.ЗаполнитьЗначения("Возврат материалов из переработки на стороне", "СодержаниеПроводки");

		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВозвращенныхМатериалов, ТаблицаМатериалов);
	КонецЕсли;
                                                                                                                            
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаМатериалов, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, ,"Списание запасов на затраты производства");
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		
		// Зачет аванса по приобретенным услугам.
		ТаблицаАвансовВрем = ТаблицаВзаиморасчетов.Скопировать();
		Сч10 = ПланыСчетов.Хозрасчетный.СырьеИМатериалы;
		ТаблицаПоУслугам.Колонки.Добавить("СчетМатериалов");
		ТаблицаПоУслугам.ЗаполнитьЗначения(Сч10, "СчетМатериалов");
		ДоходыИРасходыПредпринимателя.ПоступлениеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, мУчетнаяПолитика, 1, ТаблицаПоУслугам, "СчетМатериалов", "Номенклатура", "Субконто", "Субконто", ТаблицаАвансовВрем);
		
		// Подготовка таблиц для распределения материалов и услуг на готовую продукцию.
		ТаблицаМатериаловПродукции = ТаблицаМатериалов.СкопироватьКолонки();
		ТаблицаМатериаловПродукции.Колонки.Добавить("НоменклатурнаяГруппа");
		ТаблицаМатериаловПродукции.Колонки.Добавить("СчетУчетаПродукции");
		ТаблицаМатериаловПродукции.Колонки.Добавить("Продукция");
		
		ПолученныеУслуги = Новый ТаблицаЗначений;
		ПолученныеУслуги.Колонки.Добавить("Организация");
		ПолученныеУслуги.Колонки.Добавить("НоменклатурнаяГруппа");
		ПолученныеУслуги.Колонки.Добавить("ХарактерДеятельности");
		ПолученныеУслуги.Колонки.Добавить("ВидМПЗ");
		ПолученныеУслуги.Колонки.Добавить("Номенклатура");
		ПолученныеУслуги.Колонки.Добавить("Партия");
		ПолученныеУслуги.Колонки.Добавить("ДокументОплаты");
		ПолученныеУслуги.Колонки.Добавить("РеквизитыДокументаОплаты");
		ПолученныеУслуги.Колонки.Добавить("Количество");
		ПолученныеУслуги.Колонки.Добавить("Сумма");
		ПолученныеУслуги.Колонки.Добавить("НДС");
		ПолученныеУслуги.Колонки.Добавить("СчетУчетаПродукции");
		ПолученныеУслуги.Колонки.Добавить("Продукция");
		
		ТаблицаПродукцииВрем = ТаблицаПоПродукции.Скопировать();
		ТаблицаПродукцииВрем.Колонки.Номенклатура.Имя = "Продукция";
		ТаблицаПродукцииВрем.Колонки.Добавить("НоменклатурнаяГруппа");
		ТаблицаПродукцииВрем.ЗаполнитьЗначения(СтруктураШапкиДокумента.НоменклатурнаяГруппа, "НоменклатурнаяГруппа");
		ТаблицаПродукцииВрем.Свернуть("НоменклатурнаяГруппа,Продукция,Счет", "СуммаПлановая,Количество");
			
		// Распределение материалов по готовой продукции.
		МассивКоэф = ТаблицаПродукцииВрем.ВыгрузитьКолонку("СуммаПлановая");
			
		Для Каждого Материал Из ТаблицаМатериалов Цикл
			
			Индекс = 0;
			МассивКоличество = ОбщегоНазначения.РаспределитьПропорционально(Материал.Количество, МассивКоэф, 3);
			
			Если МассивКоэф.Количество() > 0 Тогда
				Индекс = 0;
				Пока Индекс < МассивКоэф.Количество() Цикл
					МатериалПоПродукции = ТаблицаМатериаловПродукции.Добавить();
					ЗаполнитьЗначенияСвойств(МатериалПоПродукции, Материал);
					
					МатериалПоПродукции.Количество = ?(МассивКоличество <> Неопределено, МассивКоличество[Индекс], 0);
					
					МатериалПоПродукции.Продукция = ТаблицаПродукцииВрем[Индекс].Продукция;
					МатериалПоПродукции.НоменклатурнаяГруппа = ТаблицаПродукцииВрем[Индекс].НоменклатурнаяГруппа;
					МатериалПоПродукции.СчетУчетаПродукции = ТаблицаПродукцииВрем[Индекс].Счет;
					
					Индекс = Индекс + 1;
				КонецЦикла;
				
			Иначе
				МатериалПоПродукции = ТаблицаМатериаловПродукции.Добавить();
				ЗаполнитьЗначенияСвойств(МатериалПоПродукции, Материал);
				МатериалПоПродукции.Продукция = Материал.СтатьяЗатрат;
				МатериалПоПродукции.НоменклатурнаяГруппа = СтруктураШапкиДокумента.НоменклатурнаяГруппа;
				МатериалПоПродукции.СчетУчетаПродукции = СтруктураШапкиДокумента.СчетЗатрат;
			КонецЕсли;
			
		КонецЦикла;
		
		// Распределение услуг по готовой продукции.
		Для Каждого Услуга Из Движения.ИПМПЗ Цикл
			
			Индекс = 0;
			МассивКоличество = ОбщегоНазначения.РаспределитьПропорционально(Услуга.Количество, МассивКоэф, 3);
			МассивСумма = ОбщегоНазначения.РаспределитьПропорционально(Услуга.Сумма, МассивКоэф, 3);
			МассивНДС = ОбщегоНазначения.РаспределитьПропорционально(Услуга.НДС, МассивКоэф, 3);
			
			Если МассивКоэф.Количество() > 0 Тогда
				Индекс = 0;
				Пока Индекс < МассивКоэф.Количество() Цикл
					МатериалПоПродукции = ПолученныеУслуги.Добавить();
					ЗаполнитьЗначенияСвойств(МатериалПоПродукции, Услуга);
					
					МатериалПоПродукции.Количество = ?(МассивКоличество <> Неопределено, МассивКоличество[Индекс], 0);
					МатериалПоПродукции.Сумма = ?(МассивСумма <> Неопределено, МассивСумма[Индекс], 0);
					МатериалПоПродукции.НДС = ?(МассивНДС <> Неопределено, МассивНДС[Индекс], 0);
					
					МатериалПоПродукции.Продукция = ТаблицаПродукцииВрем[Индекс].Продукция;
					МатериалПоПродукции.НоменклатурнаяГруппа = ТаблицаПродукцииВрем[Индекс].НоменклатурнаяГруппа;
					МатериалПоПродукции.СчетУчетаПродукции = ТаблицаПродукцииВрем[Индекс].Счет;
					
					Индекс = Индекс + 1;
				КонецЦикла;
				
			Иначе // отнесение услуг на ИМР
				Движение = Движения.ИПИныеМатериальныеРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, Услуга);
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.СтатьяЗатрат = Услуга.Номенклатура;
			КонецЕсли;
			
		КонецЦикла;
		
		// После распределения полученных услуг по готовой продукции движения регистра ИПМПЗ можно очистить,
		// чтобы не пришлось их лишний раз сторнировать из-за возможного несовпадения характера деятельности.
		Движения.ИПМПЗ.Очистить();
		
		// Списание материалов
		ТаблицаПолучПродукции = ДоходыИРасходыПредпринимателя.СписаниеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, мУчетнаяПолитика, 2, ТаблицаМатериаловПродукции, "КорСубконтоСписания", "СчетУчета", "СчетУчетаПродукции", "СтатьяЗатрат",, Отказ);
		
		// Если не было списано ни одного материала, то таблица полученной продукции
		// может понадобиться для отражения стоимости услуг
		Если ТаблицаПолучПродукции = Неопределено Тогда
			ТаблицаПолучПродукции = Новый ТаблицаЗначений;
			ТаблицаПолучПродукции.Колонки.Добавить("ВидМПЗ");
			ТаблицаПолучПродукции.Колонки.Добавить("ХарактерДеятельности");
			ТаблицаПолучПродукции.Колонки.Добавить("НоменклатурнаяГруппа");
			ТаблицаПолучПродукции.Колонки.Добавить("Номенклатура");
			ТаблицаПолучПродукции.Колонки.Добавить("ДокументОплаты");
			ТаблицаПолучПродукции.Колонки.Добавить("РеквизитыДокументаОплаты");
			ТаблицаПолучПродукции.Колонки.Добавить("Сумма");
			ТаблицаПолучПродукции.Колонки.Добавить("НДС");
		КонецЕсли;
		
		// Получение и списание услуг
		Для Каждого Услуга Из ПолученныеУслуги Цикл
			ДвижениеПриход = Движения.ИПМПЗ.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(ДвижениеПриход, Услуга);
			ДвижениеПриход.Период = СтруктураШапкиДокумента.Дата;
			ДвижениеПриход.НоменклатурнаяГруппа = ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации(,,Услуга.НоменклатурнаяГруппа,,мУчетнаяПолитика);
			ДвижениеПриход.ХарактерДеятельности = ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, Услуга.СчетУчетаПродукции,,, мУчетнаяПолитика);
			
			ДвижениеРасход = Движения.ИПМПЗ.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеРасход, ДвижениеПриход);
			ДвижениеРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			Движение = Движения.ИПМПЗОбороты.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Услуга);
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.НоменклатурнаяГруппа = ДвижениеПриход.НоменклатурнаяГруппа;
			Движение.ХарактерДеятельности = ДвижениеПриход.ХарактерДеятельности;
			Движение.ВидСписанногоМПЗ = Услуга.ВидМПЗ;
			Движение.НоменклатураСписанная = Услуга.Номенклатура;
			Движение.ПартияСписаннойНоменклатуры = СтруктураШапкиДокумента.Ссылка;
			Движение.ВидПоступившегоМПЗ = ДоходыИРасходыПредпринимателя.ВидМПЗПоСчетуУчета(Услуга.СчетУчетаПродукции);
			Движение.НоменклатураПоступившая = Услуга.Продукция;
			Движение.ПартияПоступившейНоменклатуры = СтруктураШапкиДокумента.Ссылка;
			
			// Добавим стоимость услуг в таблицу полученной продукции
			ПолучПродукция = ТаблицаПолучПродукции.Добавить();
			ПолучПродукция.ВидМПЗ = Движение.ВидПоступившегоМПЗ;
			ПолучПродукция.ХарактерДеятельности = Движение.ХарактерДеятельности;
			ПолучПродукция.НоменклатурнаяГруппа = Движение.НоменклатурнаяГруппа;
			ПолучПродукция.Номенклатура = Движение.НоменклатураПоступившая;
			ПолучПродукция.ДокументОплаты = Движение.ДокументОплаты;
			ПолучПродукция.РеквизитыДокументаОплаты = Услуга.РеквизитыДокументаОплаты;
			ПолучПродукция.Сумма = Движение.Сумма;
			ПолучПродукция.НДС = Движение.НДС;
		КонецЦикла;
		
		// Отражение поступления продукции
		ДоходыИРасходыПредпринимателя.ПоступлениеПродукции(ЭтотОбъект, СтруктураШапкиДокумента, мУчетнаяПолитика, ТаблицаПродукцииВрем, "Счет",, "НоменклатурнаяГруппа", "Продукция", ТаблицаПолучПродукции);
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, ТаблицаПоПродукции, ТаблицаМатериалов, ТаблицаПоУслугам, Отказ, Заголовок);
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоУслугам, ТаблицаМатериалов, ТаблицаВзаиморасчетов, Отказ, Заголовок);
	
	Если ТаблицаПоПродукции.Количество() <> 0 Или ТаблицаПоУслугам.Количество() <> 0 Тогда
		ДвиженияВыпускПродукцииУслуг.ДобавитьДвижение();
	КонецЕсли;
	
	ПартионныйУчет = УправлениеЗапасами.ВедетсяПартионныйУчет(мУчетнаяПолитика);
	Проводки = Движения.Хозрасчетный;
	
	// Проводки по таре
	Для Каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл
		
		// Бухгалтерский учет
		Проводка = Проводки.Добавить();
		Проводка.Период       = Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание   = "Передача тары";
		Проводка.Сумма        = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт       = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура,Истина, Заголовок);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтруктураШапкиДокумента.Склад);
		
		// Для товаров, принятых на комиссию партия прописывается всегда 
		Если (ПартионныйУчет) Тогда 
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", Ссылка, Истина, Заголовок);
		КонецЕсли;
		
		Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		
		// Проверка - вид Операции - комиссия
		Если СтрокаТаблицы.СчетУчета.Забалансовый Тогда
			
			Если НЕ (СтрокаТаблицы.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты ,"ВидСубконто") = Неопределено) Тогда
				Проводка.СубконтоДт.Контрагенты = СтруктураШапкиДокумента.Контрагент;
			КонецЕсли;
			
		Иначе
			
			Проводка.СчетКт   = СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
			КонецЕсли;
			
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
	КонецЦикла; // Проводки по таре
	
	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);
		
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС, УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"          , "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"          , "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС"    , "УчетАгентскогоНДС");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидАгентскогоДоговора", "ВидАгентскогоДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "НалоговыйАгентПоОплате", "НалоговыйАгентПоОплате");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"             ,   "ВидСклада"            , "ВидСклада");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, );
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоУслугам, ТаблицаМатериалов, ТаблицаВозвращенныхМатериалов, ТаблицаПоТаре) Экспорт
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура",        "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      ,        "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"  ,        "Количество");
	СтруктураПолей.Вставить("СуммаПлановая",       "СуммаПлановая");
	СтруктураПолей.Вставить("Счет"                 , "Счет");
			
	РезультатЗапросаПоТаблицеПродукция = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей);
	ТаблицаПоПродукции = РезультатЗапросаПоТаблицеПродукция.Выгрузить();
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("СчетЗатрат"  , "Ссылка.СчетЗатрат");
	СтруктураПолей.Вставить("СтатьяЗатрат", "СтатьяЗатрат");
	СтруктураПолей.Вставить("СтавкаНДС"   , "СтавкаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДС");
	СтруктураПолей.Вставить("Содержание"  , "Содержание");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("ОтражениеВУСН", "ОтражениеВУСН");


	РезультатЗапросаПоУслугам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость);
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("НомерСтроки" , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("СчетУчета" , "СчетУчета");
	СтруктураПолей.Вставить("СтатьяЗатрат", "СтатьяЗатрат");
	
	РезультатЗапросаПоМатериалам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ИспользованныеМатериалы", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаМатериалов = ПодготовитьТаблицуТоваров(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("НомерСтроки" , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("СчетУчета" , "СчетУчета");
	СтруктураПолей.Вставить("СчетПередачи" , "СчетПередачи");
	
	РезультатЗапросаПоВозвращеннымМатериалам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвращенныеМатериалы", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаВозвращенныхМатериалов = ПодготовитьТаблицуВозвратов(РезультатЗапросаПоВозвращеннымМатериалам, СтруктураШапкиДокумента);
	// Проверим, что в табличной части продукция не указаны услуги.
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("СчетУчета", "СчетУчета");

	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	ТаблицаПоТаре         = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТаре, СтруктураШапкиДокумента, Ложь);
	
КонецПроцедуры

// Процедуры и  функции, обслуживающие зачет авансов

Функция ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ТаблицаЗачетаАвансов = ЗачетАвансов.ВыгрузитьКолонки();
	Иначе
		ТаблицаЗачетаАвансов = ЗачетАвансов.Выгрузить();
		ТаблицаЗачетаАвансов.Свернуть("ДокументАванса", "СуммаЗачета");
	КонецЕсли;
	ТаблицаЗачетаАвансов.Колонки.ДокументАванса.Имя = "ДокументРасчетов";
	ТаблицаЗачетаАвансов.Колонки.СуммаЗачета.Имя    = "СуммаВзаиморасчетов";
	
	Возврат ТаблицаЗачетаАвансов;

КонецФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если (ТаблицаЗачетаАвансов.Количество() = 0) Тогда
		
		Если СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли (ТаблицаЗачетаАвансов.Количество() = 1) 
		И (НЕ ЗначениеЗаполнено(ТаблицаЗачетаАвансов[0].ДокументРасчетов)) Тогда
	
		ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		
	Иначе
	
		СтруктураОбязательныхПолей = Новый Структура("ДокументАванса");
    	
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(
			ЭтотОбъект, "ЗачетАвансов", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов()

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	ТаблицаТары.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаТары.Колонки.Добавить("КорПодразделениеОрганизации");
	
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорПодразделениеОрганизации");
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Процедура - обработчик события "ОбработкаПроведения"
////
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоУслугам, ТаблицаМатериалов, ТаблицаВозвращенныхМатериалов, ТаблицаПоТаре;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверка заполнены ли все необходимые реквизиты шапки.
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация);
	
	мПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(Организация, Дата);	

	// Проверка заполнены ли все необходимые реквизиты табличной части.
	ПроверкаРеквизитовТЧ(Отказ, Заголовок, СтруктураШапкиДокумента);
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоУслугам, ТаблицаМатериалов, ТаблицаВозвращенныхМатериалов, ТаблицаПоТаре);

	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Продукция", ТаблицаПоПродукции, Отказ, Заголовок);
	
	// Зачет авансов
	ТаблицаЗачетаАвансов = ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок);

	Если НЕ Отказ Тогда // Формирование движений регистров
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоПродукции, ТаблицаМатериалов, ТаблицаВозвращенныхМатериалов, ТаблицаПоУслугам, ТаблицаПоТаре, 
			ТаблицаЗачетаАвансов, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаМатериалов = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаМатериалов.Колонки.Добавить("ДокументОприходования");
	ТаблицаМатериалов.Колонки.Добавить("Регистратор");
	ТаблицаМатериалов.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаМатериалов.Колонки.Добавить("Организация");
	ТаблицаМатериалов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаМатериалов.Колонки.Добавить("Валюта");
	ТаблицаМатериалов.Колонки.Добавить("ВходящийНДС");
	
	ТаблицаМатериалов.Колонки.Добавить("КорСчетСписания");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания2");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания3");
	ТаблицаМатериалов.Колонки.Добавить("ПодразделениеСписания");
	ТаблицаМатериалов.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаМатериалов.Колонки.Добавить("КорПодразделениеОрганизации");
	
	ТаблицаМатериалов.ЗаполнитьЗначения(ЭтотОбъект,    "Регистратор");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,       "ДоговорКонтрагента");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,              "Организация");
	ТаблицаМатериалов.ЗаполнитьЗначения(СчетЗатрат,                                       "КорСчетСписания");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.НоменклатурнаяГруппа,     "КорСубконтоСписания1");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеЗатрат,      "ПодразделениеСписания");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеЗатрат,      "КорПодразделениеОрганизации");
	
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	
	Для Каждого Строка Из ТаблицаМатериалов Цикл
	Строка.КорСубконтоСписания2  = Строка.СтатьяЗатрат;
	КонецЦикла;
	
	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуТоваров()

Функция ПодготовитьТаблицуВозвратов(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаМатериалов = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаМатериалов.Колонки.Добавить("ДокументОприходования");
	ТаблицаМатериалов.Колонки.Добавить("Регистратор");
	ТаблицаМатериалов.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаМатериалов.Колонки.Добавить("Организация");
	ТаблицаМатериалов.Колонки.Добавить("ДоговорКонтрагента");
	//ТаблицаМатериалов.Колонки.Добавить("ОтражениеВНУ");
	ТаблицаМатериалов.Колонки.Добавить("Валюта");
	ТаблицаМатериалов.Колонки.Добавить("ВходящийНДС");
	
	ТаблицаМатериалов.Колонки.Добавить("КорСчетСписания");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания2");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписания3");
	
	ТаблицаМатериалов.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаМатериалов.Колонки.Добавить("КорПодразделениеОрганизации");
	
	ТаблицаМатериалов.ЗаполнитьЗначения(ЭтотОбъект,    "Регистратор");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,       "ДоговорКонтрагента");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад, "КорСубконтоСписания3");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад, "Склад");
	
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеЗатрат, "ПодразделениеОрганизации");
	
	// {ОбособленныеПодразделения
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорПодразделениеОрганизации");
	// }ОбособленныеПодразделения 
	
	Для Каждого Строка Из ТаблицаМатериалов Цикл
		Строка.КорСчетСписания       = Строка.СчетПередачи;	
		Строка.КорСубконтоСписания1  = Строка.Номенклатура;
	КонецЦикла;

	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуВозвратов()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
		
	// Снятие флага НДСПредъявленКВычету если не предъявлен счет-фактура
	Если (НДСВключенВСтоимость Или Не ПредъявленСчетФактура) И НДСПредъявленКВычету Тогда
		НДСПредъявленКВычету = Ложь;
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураПолученный", Ложь);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

