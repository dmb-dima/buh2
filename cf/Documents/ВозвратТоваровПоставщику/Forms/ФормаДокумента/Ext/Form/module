////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

//Используется для определения необходимости заполнения счетов в документе
Перем мСклад;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения

// Хранит текущую форму подбора номенклатуры
Перем мФормаПодбораНоменклатуры; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит список видов договоров, доступных для данного документа
Перем мСписокВидовДоговоров;

Перем ОткрыватьНастройкуДвижений;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура определяет список доступных видов договоров с контрагентом в 
// зависимости от вида операции.
//
Процедура ОпределитьСписокДоступныхВидовДоговоровПоОперации()
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Иначе
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	КонецЕсли;	
		
КонецПроцедуры // ОпределитьСписокДоступныхВидовДоговоровПоОперации

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// <Функция определяет заполнена ли ТЧ в зависимости от вида операции>
//
Функция ЕстьСтрокиВТЧ()

	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия Тогда
		Возврат Булево(Товары.Количество() + ВозвратнаяТара.Количество());
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		Возврат Булево(Товары.Количество());
                             
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда
		Возврат Булево(Товары.Количество() + ВозвратнаяТара.Количество());
			
	Иначе
		Возврат Ложь;
		
	КонецЕсли;


КонецФункции // ОпределитьЗаполненаЛиТЧ()


// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	КонецЕсли;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Покупка", "Товары", мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	УстановитьВидимость();
	
	Если мТекущийДоговорКонтрагента = неопределено Тогда 
		мТекущийДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Конецесли;
	
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	
	//Проверим какие же счета будем изменять
	ЗаполнятьСчетаРасчета  = Ложь; //Заполнять ли счета расчетов
	ЗаполнятьСчетаУчета    = Ложь; //Заполнять ли счета учета
	ЗадаватьВопрос         = Ложь; //Если заполнять то Задавать ли вопрос о его перезаполнении 
	
	Если ПоказыватьВДокументахСчетаУчета Тогда

		СтруктураОбязательныхПолей = Новый Структура;
		СтруктураНеОбязательныхПолей = Новый Структура;
		СтруктураОбязательныхПолей.Вставить("СчетУчетаДоходов", СчетаУчета.СчетУчетаДоходовПоТаре);			
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасходов", СчетаУчета.СчетУчетаРасходовПоТаре);			
		Если ВозвратнаяТара.Количество() > 0 Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре", СчетаУчета.СчетУчетаТары);
		КонецЕсли;				
		
		Если ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда			
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоПретензиям", СчетаУчета.СчетРасчетовПоПретензиям);
		КонецЕсли;
		
		БухгалтерскийУчет.ПроверитьНеобходимостьПерезаполненияСчетовУчета(ЭтотОбъект, СтруктураОбязательныхПолей,СтруктураНеОбязательныхПолей, ЗадаватьВопрос, ЗаполнятьСчетаРасчета);
		
		Если (ДоговорКонтрагента.ВидДоговора<>мТекущийДоговорКонтрагента.ВидДоговора)И ЕстьСтрокиВТЧ() Тогда

			ЗаполнятьСчетаУчета = Истина;

		КонецЕсли;
		
		Если (ЗадаватьВопрос ИЛИ ЗаполнятьСчетаУчета) Тогда
			
			Ответ = Вопрос("Установить счета учета в соответствии со значениями по умолчанию?", 
			РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета при смене договора");
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				ЗаполнятьСчетаРасчета = Ложь;
				ЗаполнятьСчетаУчета = Ложь;
			КонецЕсли;
			
		КонецЕсли;
						
	Иначе
		
		ЗаполнятьСчетаРасчета     = Истина;
        ЗаполнятьСчетаУчета 	  = Истина;  
		
	КонецЕсли;
	
	Если ЗаполнятьСчетаУчета Тогда
		ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , Истина);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", Истина);
	КонецЕсли;
	
	Если ЗаполнятьСчетаРасчета Тогда		
		ЗаполнитьСчетаУчетаРасчетов(СчетаУчета);		
	КонецЕсли;  

КонецПроцедуры // ПриИзмененииДоговора()

// Процедура выполняет заполнение табличной части 
// копированием из выбранного пользователем документа Поступления.
//
// Параметры:
//  ТабличнаяЧасть   - табличная часть, которую необходимо заполнить.
//  СпособЗаполнения - строка ("Заполнить" или "Добавить"), определяет способ заполнения.
//
Процедура ЗаполнитьТабличнуюЧастьПоПоступлению(ТабличнаяЧасть, СпособЗаполнения)

	// Оценочная стоимость возвратной тары учитывается в валюте взаиморасчетов по договору,
	// поэтому перед заполнением договор должен быть выбран.
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
		Возврат;
	КонецЕсли; 

	// Если заполняем, то почистим ТЧ
	Если СпособЗаполнения = "Заполнить"
	   И ТабличнаяЧасть.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ТабличнаяЧасть.Очистить();

	КонецЕсли;

	ДокументПоступления = Сделка;
	
	Если (СпособЗаполнения = "Заполнить" И НЕ ЗначениеЗаполнено(ДокументПоступления))
	 ИЛИ (СпособЗаполнения = "Добавить") Тогда
	
		// Теперь нужно выбрать документ, по которому будем заполнять
		ФормаВыбора = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
		ФормаВыбора.Заголовок   = "Выберите документ ""Поступление товаров"" для заполнения возврата поставщику";
		ФормаВыбора.РежимВыбора = Истина;

		// По умолчанию поставим отбор по договору
		ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = ДоговорКонтрагента;
		ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;

		СписокОпераций = Новый СписокЗначений;
		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
		Иначе
			СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
			СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование);
		КонецЕсли;

		ФормаВыбора.Отбор.ВидОперации.ВидСравнения  = ВидСравнения.ВСписке;
		ФормаВыбора.Отбор.ВидОперации.Значение      = СписокОпераций;
		ФормаВыбора.Отбор.ВидОперации.Использование = Истина;

		ДокументПоступления = ФормаВыбора.ОткрытьМодально();

		Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда 
			Возврат; // ничего не выбрали.
		КонецЕсли;
		
	КонецЕсли;
	
	Если СпособЗаполнения = "Заполнить" Тогда
		
		Сделка = ДокументПоступления;
		
	КонецЕсли;

	// Вызываем процедуру заполнения в модуле документа.
	Если ТабличнаяЧасть = Товары Тогда

		Если СпособЗаполнения = "Заполнить" Тогда

			Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда
				ЗаполнитьОборудованиеПоОснованию(ДокументПоступления);
			Иначе
				ЗаполнитьТоварыПоОснованию(ДокументПоступления);
			КонецЕсли;

		Иначе // При добавлении надо сворачивать дубли строк, аналогично подбору

			ДобавитьСтрокиТабличнойЧастиИзДокументаПоступления(ДокументПоступления, ТабличнаяЧасть);

		КонецЕсли;

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Если СпособЗаполнения = "Заполнить" Тогда

			ЗаполнитьВозвратнуюТаруПоОснованию(ДокументПоступления);

			
		Иначе // При добавлении надо сворачивать дубли строк, аналогично подбору

			ДобавитьСтрокиТабличнойЧастиИзДокументаПоступления(ДокументПоступления, ТабличнаяЧасть);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоПоступлению()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Товары
	 ИЛИ ТабличнаяЧасть = ВозвратнаяТара Тогда

	 Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		 
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				СписокЗапросов.Добавить("ОстаткиТоваровКомитентов", "Остатки товаров комитентов");
			Иначе
				СписокЗапросов.Добавить("ОстаткиНоменклатуры",      "Остатки номенклатуры");
				СписокЗапросов.Добавить("ОстаткиИЦеныНоменклатуры", "Остатки и цены номенклатуры");
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Добавляет с необходимым пересчетом строки табличной части из выбранного документа Поступления
//
// Параметры: 
//  ДокументПоступления - ссылка на документ типа Поступление, из которого надо добавить строки табличной части,
//  ТабличнаяЧасть     - табличная часть, в которую надо добавить строки.
//
Процедура ДобавитьСтрокиТабличнойЧастиИзДокументаПоступления(ДокументПоступления, ТабличнаяЧасть)

	// Будем работать только с проведенными документами, потому что только у проведенных документов
	// проверено заполнение необходимых реквизитов.
	Если Не ДокументПоступления.Проведен Тогда

		Предупреждение("Документ " + ДокументПоступления.Метаданные().Представление() + " не проведен.
		               |Заполнение невозможно.", , Метаданные().Представление());
		Возврат;

	КонецЕсли; 

	ВидОперацииОборудование = (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование);

	// Считываем нужную информацию по документу Поступления
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступления);

	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.СчетУчета,
	|	Док.Цена,";

	Если ТабличнаяЧасть = Товары Тогда

		Запрос.Текст = Запрос.Текст + "
		|	Док.ЕдиницаИзмерения,
		|	Док.Коэффициент,
		|	Док.Ссылка.ВалютаДокумента,
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КурсВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КурсДокумента,
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КратностьВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КратностьДокумента,
		|	Док.Ссылка.УчитыватьНДС,
		|	Док.Ссылка.СуммаВключаетНДС,
		|	Док.СтавкаНДС, 
		|	Док.СчетУчетаНДС" +
		?(ВидОперацииОборудование, "", ",
		|	Док.НомерГТД,
		|	Док.СтранаПроисхождения");

	Иначе

		Запрос.Текст = Запрос.Текст + "
		|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов  КАК ВалютаВзаиморасчетов,
		|	Док.Ссылка.КурсВзаиморасчетов, 
		|	Док.Ссылка.КратностьВзаиморасчетов ";

	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг" + ?(ТабличнаяЧасть = Товары,?(ВидОперацииОборудование, ".Оборудование",".Товары"),".ВозвратнаяТара") + " КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование";

	Выборка = Запрос.Выполнить().Выбрать();

	// Обходим строки Поступления
	СтруктураОтбора = Новый Структура();

	Пока Выборка.Следующий() Цикл

		// Ищем текущую позицию основания в табличной части документа возврата.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.

		Если ТабличнаяЧасть = Товары Тогда
			СтруктураОтбора.Вставить("Номенклатура"       , Выборка.Номенклатура);
		КонецЕсли;

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество     = СтрокаТабличнойЧасти.Количество + Выборка.Количество;
 			СтрокаТабличнойЧасти.КоличествоМест = ?(СтрокаТабличнойЧасти.Коэффициент = 0, 0, 
											СтрокаТабличнойЧасти.Количество / СтрокаТабличнойЧасти.Коэффициент);

			Если ТабличнаяЧасть = Товары Тогда

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			КонецЕсли;
		Иначе

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество   = Выборка.Количество;

			Если ТабличнаяЧасть = Товары Тогда

				СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент      = 1;

				СтрокаТабличнойЧасти.КоличествоМест   = ?(СтрокаТабличнойЧасти.Коэффициент = 0, 0,
												СтрокаТабличнойЧасти.Количество / СтрокаТабличнойЧасти.Коэффициент);

				Если НЕ ВидОперацииОборудование Тогда
					СтрокаТабличнойЧасти.НомерГТД            = Выборка.НомерГТД;
					СтрокаТабличнойЧасти.СтранаПроисхождения = Выборка.СтранаПроисхождения;
				КонецЕсли;

				// Заполняем реквизиты табличной части.
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

				// Пересчитаем цену в валюту документа.
				Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, 
				                  Выборка.ВалютаДокумента,    ВалютаДокумента, 
				                  Выборка.КурсДокумента,      ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				                  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                                                 Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				                                                 Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
				                                                 УчитыватьНДС,
				                                                 СуммаВключаетНДС,
				                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

				СтрокаТабличнойЧасти.СчетУчета  = Выборка.СчетУчета;
				СтрокаТабличнойЧасти.СчетУчетаНДС = Выборка.СчетУчетаНДС;

				// Рассчитываем реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

				// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
				СтрокаТабличнойЧасти.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, 
				                  Выборка.ВалютаВзаиморасчетов, ДоговорКонтрагента.ВалютаВзаиморасчетов,
				                  Выборка.КурсВзаиморасчетов, КурсВзаиморасчетов,
				                  Выборка.КратностьВзаиморасчетов, КратностьВзаиморасчетов);

				// По флагам налогообложения тару пересчитывать не надо,
				// Считаем, для тары флаги одинаковы (с НДС),

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

				СтрокаТабличнойЧасти.СчетУчета  = Выборка.СчетУчета;

			КонецЕсли;

		КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	КонецЦикла; 

КонецПроцедуры // ДобавитьСтрокиТабличнойЧастиИзДокументаПоступления()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбораНоменклатуры, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Истина;

	Если ТабличнаяЧасть = Товары Тогда
		
		Команда = "ПодборВТабличнуюЧастьТовары";
		Валюта  = ВалютаДокумента;
		ИмяТабличнойЧасти = "Товары";
		
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			Предупреждение("Не выбран договор контрагента!");
			Возврат;
		ИначеЕсли НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
			Возврат;
		КонецЕсли; 

		Команда = "ПодборВТабличнуюЧастьВозвратнаяТара";
		Валюта  = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		ЕстьСерия = Ложь;
		ИмяТабличнойЧасти = "Тара";
		
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"       , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"              , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"             , ТипЦен);
	СтруктураПараметровПодбора.Вставить("Контрагент"         , Контрагент);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента" , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Организация"        , Организация);
	// {ОбособленныеПодразделения
	СтруктураПараметровПодбора.Вставить("Подразделение"      , ПодразделениеОрганизации);
	// }ОбособленныеПодразделения
	СтруктураПараметровПодбора.Вставить("Комиссионер"        , Справочники.Контрагенты.ПустаяСсылка());
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен", Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"           , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"    , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок"          , "Подбор номенклатуры в документ " + 
	                                                           ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, мФормаПодбораНоменклатуры);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			Если КоличествоМест = Неопределено Тогда
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			Иначе
				СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.КоличествоМест + КоличествоМест;
			КонецЕсли;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			Если КоличествоМест = Неопределено Тогда
				СтрокаТабличнойЧасти.Количество       = Количество;
			Иначе
				СтрокаТабличнойЧасти.КоличествоМест   = КоличествоМест;
			КонецЕсли;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = 1;
			
			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Товары", Истина);
			ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти, Ложь, Организация, Дата);
			
			Если (НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
				И мУчетВПродажныхЦенах 
				И (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия)
				И (НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
				
				СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, Склад.ТипЦенРозничнойТорговли, 
																			Дата, мВалютаРегламентированногоУчета, 1, 1);
				СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаВРознице;
				Если (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) и (мРазделятьПоСтавкамНДС) Тогда
					СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура, Склад);
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
						СтрокаТабличнойЧасти.СтавкаНДСВРознице = ?(НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетаУчета.СчетДоходов), Перечисления.СтавкиНДС.БезНДС, СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли;

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС,
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "ВозвратнаяТара", Истина);

		КонецЕсли;
	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	ТабличнаяЧастьИмя = ?(ТабличнаяЧасть = Товары, "Товары", "ВозвратнаяТара");
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект); 
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);

	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 

	// Заполним номер ГТД и страну происхождения
	ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти, Ложь, Организация, Дата);

КонецПроцедуры // ПриИзмененииНоменклатурыТоваров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Колонки     = ЭлементыФормы.Товары.Колонки;
	КолонкиТара = ЭлементыФормы.ВозвратнаяТара.Колонки;

	ИзПереработки  = (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки);
	Комиссия       = (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	УСН            = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	УказанаПартия  = ЗначениеЗаполнено(Сделка);

	РозницаВПродажныхЦенах = ((НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
								И мУчетВПродажныхЦенах 
								И (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия)
								И (НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));
								
	НТТ = (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	Предприниматель = ОбщегоНазначения.Предприниматель(Организация, Дата);
	ОСН_ЮрЛицо = (НЕ Предприниматель И НЕ УСН);
	
	Если НТТ И РозницаВПродажныхЦенах Тогда
		
		Если Склад <> мСклад Тогда
			
			Ответ = Вопрос("Свернуть табличную часть по номенклатуре?", 
							РежимДиалогаВопрос.ДаНет, , , "Свертка по номенклатуре");
							
			Для Каждого Строка Из Товары Цикл
				Строка.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, Склад.ТипЦенРозничнойТорговли, 
																Дата, мВалютаРегламентированногоУчета, 1, 1);
				Строка.СуммаВРознице = Строка.Количество * Строка.ЦенаВРознице;
				Если мРазделятьПоСтавкамНДС Тогда
					СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, Строка.Номенклатура, Склад);
					Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
						Строка.СтавкаНДСВРознице = ?(НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетаУчета.СчетДоходов), Перечисления.СтавкиНДС.БезНДС, Строка.Номенклатура.СтавкаНДС);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ТаблицаТоваров = Товары.Выгрузить();
				ТаблицаТоваров.Свернуть("СтавкаНДС, СтавкаНДСВРознице", "Сумма, СуммаНДС, СуммаВРознице");
				Товары.Очистить();
				Товары.Загрузить(ТаблицаТоваров);
				
				Колонки.ЦенаВРознице.Видимость      = Ложь;
				Колонки.СуммаВРознице.Видимость     = НТТ;
				Колонки.СтавкаНДСВРознице.Видимость = мРазделятьПоСтавкамНДС;
				
				Колонки.Номенклатура.Видимость = Ложь;
				Колонки.Количество.Видимость   = Ложь;
				Колонки.Цена.Видимость         = Ложь;
				
				Колонки.Номенклатура.ИзменятьВидимость = Истина;
				Колонки.Количество.ИзменятьВидимость   = Истина;
				Колонки.Цена.ИзменятьВидимость         = Истина;

			Иначе
				
				Колонки.ЦенаВРознице.Видимость      = Истина;
				Колонки.СуммаВРознице.Видимость     = НТТ;
				Колонки.СтавкаНДСВРознице.Видимость = мРазделятьПоСтавкамНДС;
				
				Колонки.Номенклатура.Видимость = Истина;
				Колонки.Количество.Видимость   = Истина;
				Колонки.Цена.Видимость         = Истина;
				
				Колонки.Номенклатура.ИзменятьВидимость = Истина;
				Колонки.Количество.ИзменятьВидимость   = Истина;
				Колонки.Цена.ИзменятьВидимость         = Истина;
				
			КонецЕсли; 
		Иначе
			Если Товары.Количество() > 0 Тогда
				ПоказыватьНоменклатуру = ЗначениеЗаполнено(Товары[0].Номенклатура);
			Иначе
				ПоказыватьНоменклатуру = НЕ НТТ; 
			КонецЕсли;
			
			Колонки.ЦенаВРознице.Видимость      = ПоказыватьНоменклатуру И НТТ;
			Колонки.СуммаВРознице.Видимость     = НТТ;
			Колонки.СтавкаНДСВРознице.Видимость = мРазделятьПоСтавкамНДС;
			
			Колонки.Номенклатура.Видимость = ПоказыватьНоменклатуру;
			Колонки.Количество.Видимость   = ПоказыватьНоменклатуру;
			Колонки.Цена.Видимость         = ПоказыватьНоменклатуру;
			
			Колонки.Номенклатура.ИзменятьВидимость = Истина;
			Колонки.Количество.ИзменятьВидимость   = Истина;
			Колонки.Цена.ИзменятьВидимость         = Истина;
		КонецЕсли;
		
	Иначе
		Колонки.ЦенаВРознице.Видимость      = Ложь;
		Колонки.СуммаВРознице.Видимость     = Ложь;
		Колонки.СтавкаНДСВРознице.Видимость = Ложь;
		
		Колонки.Номенклатура.Видимость = Истина;
		Колонки.Количество.Видимость   = Истина;
		Колонки.Цена.Видимость         = Истина;
		
	КонецЕсли;
	
   	Колонки.СтавкаНДС.Видимость    = УчитыватьНДС;
	Колонки.СуммаНДС.Видимость     = УчитыватьНДС;
	Колонки.СчетУчетаНДС.Видимость = ПоказыватьВДокументахСчетаУчета И НЕ ИзПереработки И НЕ Комиссия И УчитыватьНДС И НЕ РозницаВПродажныхЦенах;
	Колонки.СчетУчета.Видимость  = ПоказыватьВДокументахСчетаУчета И НЕ РозницаВПродажныхЦенах;
	
	КолонкиТара.СчетУчета.Видимость = ПоказыватьВДокументахСчетаУчета;

	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);
	Если ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость = НЕ ИзПереработки;
	КонецЕсли;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаРасчетов.Видимость = ПоказыватьВДокументахСчетаУчета И НЕ ИзПереработки;
	
	ИспользоватьВозвратнуюТару = ?(ВозвратнаяТара.Количество() = 0, Константы.ИспользоватьВозвратнуюТару.Получить(), Истина);
	
	ЭлементыФормы.НадписьСчетУчетаРасчетовПоТаре.Видимость = ИспользоватьВозвратнуюТару;
	ЭлементыФормы.СчетУчетаРасчетовПоТаре.Видимость        = ИспользоватьВозвратнуюТару;
	
	
	ВидимостьСчетаФактуры = (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия Или ВидОперации =  Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование)
							И Не ДоговорКонтрагента.УчетАгентскогоНДС И Не ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	
	ЭлементыФормы.ГиперссылкаСчетФактура.Видимость	= ВидимостьСчетаФактуры;
	ЭлементыФормы.НадписьСчетФактура.Видимость		= ВидимостьСчетаФактуры;
	
	ЭлементыФормы.ПоставщикуВыставляетсяСчетФактураНаВозврат.Доступность = Дата >= '20060101' И ВидимостьСчетаФактуры;
	
	Если мУчетнаяПолитикаБУ.Количество() > 0 Тогда	
		Если мУчетнаяПолитикаБУ.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
			ЭлементыФормы.Товары.Колонки.ДокументОприходования.Видимость = Ложь;
			ЭлементыФормы.Товары.Колонки.ДокументОприходования.ИзменятьВидимость = Ложь;
		Иначе
			Если ЭлементыФормы.Товары.Колонки.Себестоимость.Видимость Тогда
				ЭлементыФормы.Товары.Колонки.ДокументОприходования.Видимость = Истина;
			КонецЕсли;
			ЭлементыФормы.Товары.Колонки.ДокументОприходования.ИзменятьВидимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры // УстановитьВидимость()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары"));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС"));

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета) +  ДокументОбъект.ВалютаДокумента
		                + " = " + ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		РаботаСДиалогами.ВыбратьВидОперации(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	   	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Покупка",ПараметрОбъектКопирования);
		
		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			УчитыватьНДС         = Ложь;
			СуммаВключаетНДС     = Ложь;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ЗаполнитьСчетаУчетаРасчетов();
			СтатьяДоходовИРасходов = Справочники.ПрочиеДоходыИРасходы.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров;
		КонецЕсли;
		
		Если Дата >= '20060101' 
			И Не ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом 
			И Не ДоговорКонтрагента.УчетАгентскогоНДС Тогда
			ПоставщикуВыставляетсяСчетФактураНаВозврат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация, "Бух");
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация, "Нал");
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
	мРазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитикаБУ.Количество() > 0 Тогда	
		Если (мУчетнаяПолитикаБУ.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("СчетУчета");

	// Установить ограничение - изменять видимость колонок для табличной части 
	// "Возвратная тара".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ВозвратнаяТара.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Очистить();
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("СчетУчета");
	СтруктураКолонок.Вставить("СчетУчетаНДС");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Определить счет-фактуру, введенный на основании этого документа, если такой 
	// счет-фактура существует.
	ЗаполнитьТекстПроСчетФактуру();
	
	ОпределитьСписокДоступныхВидовДоговоровПоОперации();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мСклад 						 = Склад;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Товары",	"Товары");
	Страницы.Добавить("Тара",	"ВозвратнаяТара");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,,ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница,Страницы);

	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	ИначеЕсли ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" Тогда
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			Если Параметр.Найти(Ссылка) <> Неопределено Тогда
				ЗаполнитьТекстПроСчетФактуру();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;

	Иначе

		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ОбщегоНазначения.ФорматСумм(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары"),  
		                                             ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
		                                             ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета) , КратностьВзаиморасчетов));
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                                 КурсВзаиморасчетов,
	                                                                                 КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
	                                                                                 Истина);

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	ЗаголовокТовары = ?(ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование, "Оборудование (",
		?(ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки, "Материалы (", "Товары ("));
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = ЗаголовокТовары + ДокументОбъект.Товары.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм 
// для заполнения (с предварительной очисткой) табличной части по Поступлению.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоПоступлению(Кнопка)

	ЗаполнитьТабличнуюЧастьПоПоступлению(Товары, "Заполнить");

КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоПоступлению()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм 
// для заполнения табличной части по Поступлению.
//
Процедура КоманднаяПанельТоварыДействиеДобавитьПоПоступлению(Кнопка)

	ЗаполнитьТабличнуюЧастьПоПоступлению(Товары, "Добавить");

КонецПроцедуры // КоманднаяПанельТоварыДействиеДобавитьПоПоступлению()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// группового изменения значений реквизитов табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект       = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента      = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС             = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице    = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	
	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	СтруктураРеквизитовДокумента.Вставить("НДСВключенВСтоимость");
	СтруктураЗапрещенных = Неопределено;
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
	 ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	 
	 	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия Тогда
			СтруктураЗапрещенных = Новый Структура("НДСВключенВСтоимость");
		Иначе
			СтруктураЗапрещенных = Новый Структура("НДСВключенВСтоимость, УчитыватьНДС, СуммаВключаетНДС");
		КонецЕсли;

	КонецЕсли;

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураЗапрещенных, "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "ВозвратнаяТара", вызывает сервисный механизм 
// для заполнения (с предварительной очисткой) табличной части по Поступлению.
//
Процедура КоманднаяПанельВозвратнаяТараДействиеЗаполнитьПоПоступлению(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоПоступлению(ВозвратнаяТара, "Заполнить");
	
КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеЗаполнитьПоПоступлению()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "ВозвратнаяТара", вызывает сервисный механизм 
// для заполнения табличной части по Поступлению.
//
Процедура КоманднаяПанельВозвратнаяТараДействиеДобавитьПоПоступлению(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоПоступлению(ВозвратнаяТара, "Добавить");
	
КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеДобавитьПоПоступлению()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	ПредыдущийВидОперации=ВидОперации; //Сохраним пред. вид операции для его сравнения с новым

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику[Кнопка.Имя];
	КонецЕсли;
	
	//Если операция не поменялась то выходим
	Если  ПредыдущийВидОперации = ВидОперации Тогда 
		Возврат;
    КонецЕсли;
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	//УстановитьНадписьСделки(ЭтотОбъект, ЭтаФорма, Ложь);

	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
	 ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		// Очистим реквизиты счетов в табличных частях.
		Пустой = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

		Для каждого Строка Из Товары Цикл
			Строка.СчетУчетаНДС = Пустой;
		КонецЦикла;
		
		НДСВключенВСтоимость    = Истина;
		УчитыватьНДС            = Ложь;
		СуммаВключаетНДС        = Ложь;

	Иначе
		Если Не УчитыватьНДС Тогда
			НДСВключенВСтоимость    = Ложь;
			УчитыватьНДС            = Истина;
			СуммаВключаетНДС        = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	//Сохраним предыдущий вид Договора для его сравнения с новым	
	ПредыдущийВидДоговора=ДоговорКонтрагента.ВидДоговора; 
	
	ОпределитьСписокДоступныхВидовДоговоровПоОперации();

	// Проверить текущий договор
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И мСписокВидовДоговоров.НайтиПоЗначению(ДоговорКонтрагента.ВидДоговора) = Неопределено Тогда
		ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	Если (мУчетВПродажныхЦенах) 
		И (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия)
		И (НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
		И (НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		//Для поступления в розницу по продажным ценам счета не указываем
	Иначе
		//Если Не ЗначениеЗаполнено(ПредыдущийВидДоговора) Тогда
		//	ПредыдущийВидДоговора = ДоговорКонтрагента.ВидДоговора.ПустаяСсылка();
		//КонецЕсли;
		
		ЗаполнятьСчетаУчета    = Ложь; //Заполнять ли счета учета
		
		Если ПоказыватьВДокументахСчетаУчета Тогда
			
			ИзПереработки = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки;
			ДогСКомитентом = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
			Если (ВидОперации=ИзПереработки)
				ИЛИ (ПредыдущийВидОперации=ИзПереработки 
				ИЛИ ((ПредыдущийВидДоговора <> ДоговорКонтрагента.ВидДоговора)И (ПредыдущийВидДоговора = ДогСКомитентом ИЛИ ДоговорКонтрагента.ВидДоговора = ДогСКомитентом))) Тогда
				
				Если ЕстьСтрокиВТЧ() Тогда
					
					ЗаполнятьСчетаУчета = Истина;
					
				КонецЕсли;	
			КонецЕсли;	
				
			Если ЗаполнятьСчетаУчета Тогда
				Ответ = Вопрос("Установить счета учета в соответствии со значениями по умолчанию?", 
				РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета при смене вида операции");
				
			Иначе
				
				Ответ = КодВозвратаДиалога.Нет;
				
			КонецЕсли;
			
		Иначе
			
			Ответ = КодВозвратаДиалога.Да;
			
		КонецЕсли;
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , Истина);
			ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", Истина);
			
		КонецЕсли;
	КонецЕсли;
	
	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();
	
	Если УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента,Контрагент, Организация, мСписокВидовДоговоров) Тогда
		ПриИзмененииДоговора();
	КонецЕсли;


КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
                  

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Если Дата <= '20060101' И ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
		ПоставщикуВыставляетсяСчетФактураНаВозврат = Ложь;
	КонецЕсли;

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	УстановитьВидимость();
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация, "Бух");
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация, "Нал");
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
	мРазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитикаБУ.Количество() > 0 Тогда	
		Если (мУчетнаяПолитикаБУ.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;
		
    УстановитьВидимость();
	
	Если УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента,Контрагент, Организация, мСписокВидовДоговоров) Тогда
		ПриИзмененииДоговора();
	КонецЕсли;

	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСписокВидовДоговоров);

	// Могли поменять договор.
	ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Склад.
//
Процедура СкладПриИзменении(Элемент)

	// {ОбособленныеПодразделения
	ПодразделениеОрганизации = УправлениеПодразделениями.ПолучитьПодразделение(Организация, Склад);
	// }ОбособленныеПодразделения
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;

	Если Не ЕстьСтрокиВТЧ() Тогда
		Возврат;
	КонецЕсли;

	Если мСклад = Элемент.Значение Тогда
		Возврат;
	КонецЕсли;

	Если (мУчетВПродажныхЦенах) 
		И (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия)
		И (НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
		И (НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		//Для поступления в розницу по продажным ценам счета не указываем
	Иначе
		
		Если ПоказыватьВДокументахСчетаУчета Тогда	
			
			Ответ = Вопрос("Установить счета учета в соответствии со значениями по умолчанию?", 
			РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета при смене склада");
	
		Иначе
			
			Ответ = КодВозвратаДиалога.Да;
			
		КонецЕсли;
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , Истина);
			ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", Истина);
		КонецЕсли;
	КонецЕсли;

	мСклад = Склад;
КонецПроцедуры // СкладПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;
	
	ОпределитьСписокДоступныхВидовДоговоровПоОперации();

	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
		                                        Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, СтандартнаяОбработка);
	Иначе
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
		                                        СписокВидовДоговоров, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Документ поступления".
//
//  Открывает форму выбора документа "Поступление товаров и услуг" 
// с установленными отборами по Контрагенту, Договору и Организации (если
// установлена настройка пользователя "Учет по всем организациям".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора(, Элемент);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ФормаВыбора.Отбор.Контрагент.Установить(Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ФормаВыбора.Отбор.ДоговорКонтрагента.Установить(ДоговорКонтрагента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ФормаВыбора.Отбор.Организация.Установить(Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // СделкаНачалоВыбора() 

// Процедура - обработчик события "ПриИзменении" поля ввода "Документ поступления".
// 
Процедура СделкаПриИзменении(Элемент)
	
	// Определить счет-фактуру, введенный на основании этого документа, если такой 
	// счет-фактура существует.
	ЗаполнитьТекстПроСчетФактуру();
	
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Возврат;
	КонецЕсли;
	
	// При подстановке контрагента сделка очищается.
	// Сохраняем значение для последующей подстановки.
	ТекущееЗначение = Элемент.Значение;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Организация = Сделка.Организация;
		
		ОрганизацияПриИзменении(ЭлементыФормы.Организация);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		
		Склад = Сделка.Склад;
		
		СкладПриИзменении(ЭлементыФормы.Склад);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		
		Контрагент = Сделка.Контрагент;
		
		КонтрагентПриИзменении(Неопределено);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		ДоговорКонтрагента = Сделка.ДоговорКонтрагента;
		
		ПриИзмененииДоговора();
		
	КонецЕсли;
	
	Сделка = ТекущееЗначение;
	
	УстановитьВидимость();
	
КонецПроцедуры // СделкаПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" элемента формы СчетУчетаДоходов
//
Процедура СчетУчетаДоходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СчетУчетаДоходовОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" элемента формы СчетУчетаРасходов
//
Процедура СчетУчетаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СчетУчетаРасходовОбработкаВыбора()

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	Если ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(
		                                                 УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураВыданный"));
		ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка = Истина;
		ЭлементыФормы.НадписьСчетФактура.Заголовок = "Счет-фактура (выданный):";
	ИначеЕсли Не ЗначениеЗаполнено(Сделка) Тогда
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(
		                                                 УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный"));
		ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка = Истина;
		ЭлементыФормы.НадписьСчетФактура.Заголовок = "Счет-фактура (полученный):";
	Иначе	
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = "не требуется";
		ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка = Ложь;
		ЭлементыФормы.НадписьСчетФактура.Заголовок = "Счет-фактура (полученный):";
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

Процедура ГиперссылкаСчетФактураНажатие(Элемент)
	
	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, ?(Не ПоставщикуВыставляетсяСчетФактураНаВозврат, "СчетФактураПолученный", "СчетФактураВыданный"));

КонецПроцедуры

Процедура ПоставщикуВыставляетсяСчетФактураНаВозвратПриИзменении(Элемент)
	
	ЗаполнитьТекстПроСчетФактуру();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));
	КонецЕсли;
	
	// Если заполнен документ партии, то себестоимость будет браться из него.
	// Поэтому если колонка видна, будем выводить в нее текст.
	Если ЭлементыФормы.Товары.Колонки.ДокументОприходования.Видимость
	   И НЕ ЗначениеЗаполнено(ДанныеСтроки.ДокументОприходования) Тогда

		ОформлениеСтроки.Ячейки.ДокументОприходования.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ДокументОприходования.Текст           = "<Авто>";
		ОформлениеСтроки.Ячейки.Себестоимость.ТолькоПросмотр  = Истина;

	КонецЕсли;
	
	Если ЭлементыФормы.Товары.Колонки.Себестоимость.Видимость
	   И НЕ ЗначениеЗаполнено(ДанныеСтроки.Себестоимость) Тогда

		ОформлениеСтроки.Ячейки.Себестоимость.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Себестоимость.Текст           = "<Авто>";

	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Товары", Истина);

	Если (НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
		 И мУчетВПродажныхЦенах 
		 И (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия)
		 И (НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		 
		СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, Склад.ТипЦенРозничнойТорговли, 
														Дата, мВалютаРегламентированногоУчета, 1, 1);
		СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаВРознице;
		Если (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) и (мРазделятьПоСтавкамНДС) Тогда
			СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура, Склад);
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				СтрокаТабличнойЧасти.СтавкаНДСВРознице = ?(НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетаУчета.СчетДоходов), Перечисления.СтавкиНДС.БезНДС, СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	
	Если (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) 
		 И мУчетВПродажныхЦенах 
		 И (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия)
		 И (НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		 
		СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
		СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаВРознице;
	КонецЕсли;

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчета
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры // ТоварыСчетУчетаОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры // ТоварыСчетУчетаНДСОбработкаВыбора()

Процедура ТоварыСчетУчетаНДСНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь);

КонецПроцедуры

// Процедура - обработчик начала выбора номера ГТД
//
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеЗапасами.ОткрытьФормуВыбораНомераГТД(ЭлементыФормы.Товары, СтандартнаяОбработка, Ссылка, Организация, ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура, Дата);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект); 

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, "ВозвратнаяТара", Истина);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчета
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры // ВозвратнаяТараСчетУчетаОбработкаВыбора()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.ВозвратнаяТара.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаВРознице;

КонецПроцедуры

Процедура ТоварыСуммаВРозницеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЦенаВРознице = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.СуммаВРознице/СтрокаТабличнойЧасти.Количество);

КонецПроцедуры

Процедура ТоварыДокументОприходованияПриИзменении(Элемент)
	
	Строка = ЭлементыФормы.Товары.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(Строка.ДокументОприходования) Тогда
		Строка.Себестоимость = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыДокументОприходованияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Строка = ЭлементыФормы.Товары.ТекущиеДанные;
	
	СтандартнаяОбработка    = Ложь;
	ФормаВыбора             = Документы.Партия.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.Организация = Организация;
	
	ФормаВыбора.Счет         = Строка.СчетУчета;
	ФормаВыбора.Номенклатура = Строка.Номенклатура;
	ФормаВыбора.Склад        = Склад;
	ФормаВыбора.ВидСубконто  = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	
	Если ЭтоНовый() Тогда
		ФормаВыбора.КонПериода         = КонецДня(РабочаяДата);
	Иначе
		ФормаВыбора.КонПериода         = Дата;
	КонецЕсли;
	
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
		МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// {ОбособленныеПодразделения
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;

КонецПроцедуры

// }ОбособленныеПодразделения
