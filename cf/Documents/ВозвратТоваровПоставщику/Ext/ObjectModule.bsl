Перем мВалютаРегламентированногоУчета Экспорт;
Перем мУчетнаяПолитикаБУ Экспорт;
Перем мУчетнаяПолитикаНУ Экспорт;
Перем мИспользоватьОборотнуюНоменклатуру Экспорт;
Перем мРазделятьПоСтавкамНДС Экспорт;
Перем мУчетВПродажныхЦенах Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьВозвратаПоставщику()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Номер,
	|	ВозвратТоваровПоставщику.Дата,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента,
	|	ВозвратТоваровПоставщику.Контрагент,
	|	ВозвратТоваровПоставщику.Организация,
	// {ОбособленныеПодразделения
	|	ВозвратТоваровПоставщику.ПодразделениеОрганизации,
	// }ОбособленныеПодразделения 
	|	ВозвратТоваровПоставщику.СуммаДокумента,
	|	ВозвратТоваровПоставщику.ВалютаДокумента,
	|	ВозвратТоваровПоставщику.УчитыватьНДС,
	|	ВозвратТоваровПоставщику.СуммаВключаетНДС,
	|	ВозвратТоваровПоставщику.Товары.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            КАК Артикул,
	|		ВЫРАЗИТЬ(ВозвратТоваровПоставщику.Товары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|		Количество,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		СуммаНДС
	|	),
	|	ВозвратТоваровПоставщику.ВозвратнаяТара.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            КАК Артикул,
	|		ВЫРАЗИТЬ(ВозвратТоваровПоставщику.ВозвратнаяТара.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|		Количество,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		0 КАК СуммаНДС
	|	)
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Возврат поставщику");
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
		
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	
	Ном = 0;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Ном = Ном + 1;
		
		ОбластьНомера.Параметры.НомерСтроки = Ном;
		ТабДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар);
		ТабДокумент.Присоединить(ОбластьДанных);

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	Пока ВыборкаСтрокТара.Следующий() Цикл

		Ном = Ном + 1;
		
		ОбластьНомера.Параметры.НомерСтроки = Ном;
		ТабДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьДанных.Параметры.Товар       = СокрЛП(ВыборкаСтрокТара.Товар) + " (возвратная тара)";
		ТабДокумент.Присоединить(ОбластьДанных);

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
		ТабДокумент.Присоединить(ОбластьСуммы);

		Сумма    = Сумма    + ВыборкаСтрокТара.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТара.СуммаНДС;

	КонецЦикла;
	
	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		Если Товары.Итог("СуммаНДС") <> 0 Тогда
			ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС"));		
		Иначе
			ОбластьДанных.Параметры.НДС = "Без налога (НДС)";
			ОбластьСуммы.Параметры.ВсегоНДС = "-";
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + Ном
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьВозвратаПоставщику()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьТОРГ12()
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент",  ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Дата КАК ДатаДокумента,
	|	Номер КАК НомерДокумента,
	|	Организация КАК Руководители,
	|	Организация КАК Организация,
	|	Контрагент КАК Контрагент,
	|	Организация КАК Поставщик,
	// {ОбособленныеПодразделения
	|	ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫРАЗИТЬ(ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200)) КАК ПредставлениеПодразделения,
	// }ОбособленныеПодразделения
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Контрагент
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      ТОГДА Организация
	|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	Контрагент КАК Плательщик,
	|	ДоговорКонтрагента.Представление КАК Основание,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();

	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Если ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда

		// Документ оформлен в валюте взаиморасчетов
		Запрос.УстановитьПараметр("Курс",      ЭтотОбъект.КурсВзаиморасчетов);
		Запрос.УстановитьПараметр("Кратность", ЭтотОбъект.КратностьВзаиморасчетов);

	Иначе

		// Документ оформлен в валюте регламентированного учета
		Запрос.УстановитьПараметр("Курс", 1);
		Запрос.УстановитьПараметр("Кратность", 1);

	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                      КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное          КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код                                  КАК ТоварКод,
	|	ВложенныйЗапрос.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.Номенклатура.БазоваяЕдиницаИзмерения.Код          КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                                  КАК ВидУпаковки,
	|	ВложенныйЗапрос.Коэффициент                                       КАК КоличествоВОдномМесте,
	|	ВложенныйЗапрос.Коэффициент                                       КАК Коэффициент,
	|	ВложенныйЗапрос.НомерГТД                                          КАК НомерГТД,
	|	ВложенныйЗапрос.СтранаПроисхождения                               КАК СтранаПроисхождения,
	|	ВложенныйЗапрос.СтавкаНДС                                         КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                                              КАК Цена,
	|	ВложенныйЗапрос.Количество                                        КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест                                    КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма                                             КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС                                          КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки                                       КАК НомерСтроки,
	|	1                                                                 КАК ID
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		ВозвратТоваровПоставщику.Номенклатура,
	|		ВозвратТоваровПоставщику.Коэффициент,
	|		ВозвратТоваровПоставщику.ЕдиницаИзмерения,
	|		ВозвратТоваровПоставщику.НомерГТД,
	|		ВозвратТоваровПоставщику.СтранаПроисхождения,
	|		ВозвратТоваровПоставщику.СтавкаНДС,
	|		ВозвратТоваровПоставщику.Цена * &Курс / &Кратность            КАК Цена,
	|		СУММА(ВозвратТоваровПоставщику.Количество)                    КАК Количество,
	|		СУММА(ВозвратТоваровПоставщику.КоличествоМест)                КАК КоличествоМест,
	|		СУММА(ВозвратТоваровПоставщику.Сумма    * &Курс / &Кратность) КАК Сумма,
	|		СУММА(ВозвратТоваровПоставщику.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|		МИНИМУМ(ВозвратТоваровПоставщику.НомерСтроки)                 КАК НомерСтроки
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
	|	ГДЕ
	|		ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		ВозвратТоваровПоставщику.Номенклатура,
	|		ВозвратТоваровПоставщику.Коэффициент,
	|		ВозвратТоваровПоставщику.ЕдиницаИзмерения,
	|		ВозвратТоваровПоставщику.НомерГТД,
	|		ВозвратТоваровПоставщику.СтранаПроисхождения,
	|		ВозвратТоваровПоставщику.СтавкаНДС,
	|		ВозвратТоваровПоставщику.Цена
	|
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Номенклатура,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщику.Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	ВозвратТоваровПоставщику.Номенклатура.Код,
	|	ВозвратТоваровПоставщику.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ВозвратТоваровПоставщику.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	NULL,
	|	0,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВозвратТоваровПоставщику.Цена * &Курс / &Кратность,
	|	ВозвратТоваровПоставщику.Количество,
	|	0,
	|	ВозвратТоваровПоставщику.Сумма * &Курс / &Кратность,
	|	0,
	|	ВозвратТоваровПоставщику.НомерСтроки,
	|	2
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.ВозвратнаяТара КАК ВозвратТоваровПоставщику
	|
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Код", "Номенклатура.Артикул");
	КонецЕсли;
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_ТОРГ12";

	Макет = ПолучитьОбщийМакет("ТОРГ12");

	ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");
	
	// Выводим общие реквизиты шапки
	
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация,      Шапка.ДатаДокумента);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);

	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);

	ЗапросЗаказ = Новый Запрос;
	ЗапросЗаказ.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросЗаказ.Текст =
	"ВЫБРАТЬ
	|	Сделка.Номер       КАК Номер,
	|	Сделка.Дата        КАК Дата,
	|	Сделка.ВидОперации КАК ВидОперации,
	|	Сделка.Организация КАК Организация
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент";
	ШапкаЗаказ = ЗапросЗаказ.Выполнить().Выбрать();
	ШапкаЗаказ.Следующий();

	ОбластьМакетаШапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	Если Шапка.Организация = Шапка.Грузоотправитель Тогда
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика      = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика     = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);

	// Выводим всевозможные коды
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО     = СведенияОГрузоотправителе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП = "";
	ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО  = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ОснованиеНомер   = "";
	ОбластьМакетаШапка.Параметры.ОснованиеДата    = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";

	ТабДокумент.Вывести(ОбластьМакетаШапка);

	// Инициализация счетчика страниц
	НомерСтраницы = 1;

	// Инициализация итогов по странице
	ИтогоМестНаСтранице       = 0;
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаНаСтранице      = 0;
	ИтогоНДСНаСтранице        = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// Инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	ИтогоСумма      = 0;
	ИтогоНДС        = 0;
	
	// Инициализация счетчика строк
	НомерСтроки     = 0;
	КоличествоСтрок = ЗапросТовары.Количество();
	
	// Выводим заголовок многострочной части
	ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Выводим многострочную часть документа
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		НомерСтроки = НомерСтроки + 1;

		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
		
		ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
			ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
			ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
		КонецЕсли;
		
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);

		СуммаСНДС = (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
		
		КоличествоМест = ВыборкаСтрок.КоличествоМест;
		Количество     = ВыборкаСтрок.Количество;
		СуммаНДС       = ВыборкаСтрок.СуммаНДС;
		СуммаБезНДС    = СуммаСНДС - СуммаНДС;

		ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
		ОбластьМакетаСтрока.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);
		
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		Если НомерСтроки = 1 Тогда
			СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
		КонецЕсли;                                                   // помещаться заголовок
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
		Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;

		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда

			Если КоличествоСтрок > 1 Тогда
				
				// Выводим итоги по странице
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
				
				// Очистим итоги по странице
				ИтогоМестНаСтранице       = 0;
				ИтогоКоличествоНаСтранице = 0;
				ИтогоСуммаНаСтранице      = 0;
				ИтогоНДСНаСтранице        = 0;
				ИтогоСуммаСНДСНаСтранице  = 0;
				
				// Выведем заголовок таблицы
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакетаСтрока);

		// Увеличим итоги по странице
		ИтогоМестНаСтранице       = ИтогоМестНаСтранице       + КоличествоМест;
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
		ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;

		// Увеличим итоги по документу
		ИтогоМест       = ИтогоМест       + КоличествоМест;
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
		ИтогоНДС        = ИтогоНДС        + СуммаНДС;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по странице
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакетаВсего.Параметры.ИтогМест       = ИтогоМест;
	ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
	ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
	ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
	ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакетаВсего);

	// Выводим подвал документа
	
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	
	ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.РуководительПредставление;
	ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = Руководители.ГлавныйБухгалтерПредставление;
	ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;

	ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью                          = ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")); 
	ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
	
	ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель   = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель   = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	
	ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
	ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);	
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ12()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная"  Тогда
		ТабДокумент = ПечатьВозвратаПоставщику();
	ИначеЕсли ИмяМакета = "ТОРГ12" тогда
		ТабДокумент = ПечатьТОРГ12();
	КонецЕсли; 

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), НепосредственнаяПечать);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Накладная,ТОРГ12","Возврат поставщику","ТОРГ-12 (Товарная накладная)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ЗаполнитьСтрокуТЧТоварыПоПоступлениюРегл(СтрокаТабличнойЧасти, Выборка)

	СтрокаТабличнойЧасти.НомерГТД            = Выборка.НомерГТД;
	СтрокаТабличнойЧасти.СтранаПроисхождения = Выборка.СтранаПроисхождения;
	
КонецПроцедуры

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Ссылка.ВалютаДокумента,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ПоступлениеТоваровУслугТовары.Сумма,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.НомерГТД,
	|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения,
	|	ПоступлениеТоваровУслугТовары.СчетУчета,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНДС,
	|	ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслугТовары.Ссылка.УчитыватьНДС,
	|	ПоступлениеТоваровУслугТовары.Ссылка.НДСВключенВСтоимость,
	|	ПоступлениеТоваровУслугТовары.ЦенаВРознице,
	|	ПоступлениеТоваровУслугТовары.СуммаВРознице,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДСВРознице
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();

	Курс         = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, мВалютаРегламентированногоУчета);
	Кратность    = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, мВалютаРегламентированногоУчета);

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.КоличествоМест   = Выборка.КоличествоМест;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.СуммаНДС         = Выборка.СуммаНДС;
		СтрокаТабличнойЧасти.Цена             = Выборка.Цена;
		СтрокаТабличнойЧасти.Сумма            = Выборка.Сумма;
		
		//Для НТТ в продажных ценах
		СтрокаТабличнойЧасти.ЦенаВРознице      = Выборка.ЦенаВРознице;
		СтрокаТабличнойЧасти.СуммаВРознице     = Выборка.СуммаВРознице;
		СтрокаТабличнойЧасти.СтавкаНДСВРознице = Выборка.СтавкаНДСВРознице;

		// Если валюта документа отличается от валюты основания, пересчитаем цену и суммы.
		Если ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента)
		   И НЕ (ЭтотОбъект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда
		
			Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ВалютаДокумента,
			                                  КурсОсн, Курс,КратностьОсн, Кратность);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                  Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
			                                  Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
			                                  УчитыватьНДС, СуммаВключаетНДС,
			                                  УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СчетУчета  = Выборка.СчетУчета;
		СтрокаТабличнойЧасти.СчетУчетаНДС = Выборка.СчетУчетаНДС;

		ЗаполнитьСтрокуТЧТоварыПоПоступлениюРегл(СтрокаТабличнойЧасти, Выборка);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьОборудованиеПоОснованию(ДокументОснование) Экспорт

	ОснованиеПоступление = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка.ВалютаДокумента,
	|	Ссылка.НДСВключенВСтоимость,
	|	Ссылка.СуммаВключаетНДС,
	|	Ссылка.УчитыватьНДС,
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	Коэффициент,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	СтавкаНДС,
	|	СчетУчета,
	|	СчетУчетаНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();

	Курс         = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, мВалютаРегламентированногоУчета);
	Кратность    = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, мВалютаРегламентированногоУчета);

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.КоличествоМест   = Выборка.Количество;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.Цена             = Выборка.Цена;
		СтрокаТабличнойЧасти.Сумма            = Выборка.Сумма;
		СтрокаТабличнойЧасти.СуммаНДС         = Выборка.СуммаНДС;
		СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.СчетУчета      = Выборка.СчетУчета;
		СтрокаТабличнойЧасти.СчетУчетаНДС     = Выборка.СчетУчетаНДС;

		// Если валюта документа отличается от валюты основания, пересчитаем цену и суммы.
		Если ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента)
		   И НЕ (ЭтотОбъект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда
		
			Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, 
			                                  КурсОсн, Курс,КратностьОсн, Кратность);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
										Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
										УчитыватьНДС, СуммаВключаетНДС,
										УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение возвратной тары по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка.ВалютаДокумента,
	|	Номенклатура,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СчетУчета
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслугВозвратнаяТара
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугВозвратнаяТара.Ссылка = &Ссылка";

	Выборка = Запрос.Выполнить().Выбрать();

	Курс         = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, мВалютаРегламентированногоУчета);
	Кратность    = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, мВалютаРегламентированногоУчета);

	Пока Выборка.Следующий() Цикл

		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество   = Выборка.Количество;
		СтрокаВозвратнойТары.Цена         = Выборка.Цена;
		СтрокаВозвратнойТары.Сумма        = Выборка.Сумма;
		СтрокаВозвратнойТары.СчетУчета  = Выборка.СчетУчета;

		// Если валюта документа отличается от валюты основания, пересчитаем цену и суммы.
		Если ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента)
		   И НЕ (ЭтотОбъект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда
		
			СтрокаВозвратнойТары.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаВозвратнойТары.Цена, 
			                            Выборка.ВалютаДокумента, ВалютаДокумента,
			                            КурсОсн, Курс, КратностьОсн, Кратность);

			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОснованию()

// Заполняет счета в строке табличной части.
//
Процедура ЗаполнитьСчета(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, Заполнять, МетаданныеДокумента)

	Если Заполнять = Истина Тогда

		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчетаДавСырья;

		Иначе
			
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчетаДоп;

			Иначе

				СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
					СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	ИначеЕсли Заполнять = Ложь Тогда

		СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчета()

// Заполняет счета в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, Заполнять) Экспорт

	СчетаУчета    = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
	МетаданныеДок = ЭтотОбъект.Метаданные();

	ЗаполнитьСчета(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, Заполнять, МетаданныеДок);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета в табличной части.
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, Заполнять) Экспорт

	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, Заполнять);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

Процедура ЗаполнитьСчетаУчетаРасчетов(СчетаУчета = неопределено) Экспорт
	
    Если СчетаУчета = неопределено Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	КонецЕсли;
		СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетов;
		СчетУчетаРасчетовПоПретензиям     = СчетаУчета.СчетРасчетовПоПретензиям;
		СчетУчетаРасчетовПоТаре           = СчетаУчета.СчетУчетаТары;
		СчетУчетаДоходов                = СчетаУчета.СчетУчетаДоходовПоТаре;
		СчетУчетаРасходов               = СчетаУчета.СчетУчетаРасходовПоТаре;

КонецПроцедуры // ЗаполнитьСчетаУчетаРасчетов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	//ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("ДоговорПоставщика");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ИмяТабЧасти");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("Субконто");
	ТаблицаТоваров.Колонки.Добавить("КорСчетСписания");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписания1");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписания2");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписания3");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("СчетДоходов");

	ТаблицаТоваров.Колонки.Добавить("ОтражениеВУСН");
	
	ТаблицаТоваров.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаТоваров.Колонки.Добавить("КорПодразделениеОрганизации");
	
	ТаблицаТоваров.Колонки.Добавить("СписыватьПоУказаннойСтоимости");
	
	ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.НеПринимаются, "ОтражениеВУСН");
	
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                          "Регистратор");
	Для Каждого Строка из ТаблицаТоваров Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ДокументОприходования) Тогда
			Строка.ДокументОприходования = СтруктураШапкиДокумента.Сделка;
		КонецЕсли;
	КонецЦикла;
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,       "Склад");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаТоваров.ЗаполнитьЗначения("Товары",                            "ИмяТабЧасти");

	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,                       "ДоговорКонтрагента");
	
	// {ОбособленныеПодразделения
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорПодразделениеОрганизации");
	// }ОбособленныеПодразделения 
	
	ТаблицаТоваров.ЗаполнитьЗначения(Ложь, "СписыватьПоУказаннойСтоимости");
	
	//Заполнение счета и аналитики возвратов
	
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовПоПретензиям, "КорСчетСписания");
	Для каждого Субконто из СтруктураШапкиДокумента.СчетУчетаРасчетовПоПретензиям.ВидыСубконто Цикл
		Если Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты тогда
			ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "КорСубконтоСписания"+Субконто.НомерСтроки);
		ИначеЕсли Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры тогда
			ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "КорСубконтоСписания"+Субконто.НомерСтроки);
		ИначеЕсли Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами тогда
			ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "КорСубконтоСписания"+Субконто.НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТоваров.Индексы.Добавить("Услуга");
	СтрокиСУслугой_Null = ТаблицаТоваров.НайтиСтроки(новый Структура ("Услуга", NULL));
	Для Каждого Строка из СтрокиСУслугой_Null Цикл
		Строка.Услуга = Ложь;
	КонецЦикла;
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	ТаблицаТары.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("ДокументОприходования");
	ТаблицаТары.Колонки.Добавить("ДоговорПоставщика");
	ТаблицаТары.Колонки.Добавить("Регистратор");
	ТаблицаТары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТары.Колонки.Добавить("Организация");
	ТаблицаТары.Колонки.Добавить("Субконто");
	ТаблицаТары.Колонки.Добавить("КорСчетСписания");
	ТаблицаТары.Колонки.Добавить("КорСубконтоСписания1");
	ТаблицаТары.Колонки.Добавить("КорСубконтоСписания2");
	ТаблицаТары.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТары.Колонки.Добавить("СчетДоходов");
	ТаблицаТары.Колонки.Добавить("Тара");
	
	ТаблицаТары.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаТары.Колонки.Добавить("КорПодразделениеОрганизации");
	
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма;

	КонецЦикла;

	ТаблицаТары.ЗаполнитьЗначения(Истина, "Тара");
	ТаблицаТары.ЗаполнитьЗначения(ЭтотОбъект,                          "Регистратор");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка,      "ДокументОприходования");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,       "Склад");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");

	ТаблицаТары.ЗаполнитьЗначения(СчетУчетаРасчетовПоТаре,                    "КорСчетСписания");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент,         "КорСубконтоСписания1");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "КорСубконтоСписания2");

	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,      				    "ДоговорПоставщика");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,                       "ДоговорКонтрагента");
	
	// {ОбособленныеПодразделения
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорПодразделениеОрганизации");
	// }ОбособленныеПодразделения 
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация, ВалютаДокумента, Контрагент, 
	                                             |ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");

												 
	Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаДоходов");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасходов");
		СтруктураОбязательныхПолей.Вставить("СтатьяДоходовИРасходов");
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоПретензиям");
					
		Если ВозвратнаяТара.Количество() > 0 Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре");
		КонецЕсли;

	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
	//	ОбщегоНазначения.ОшибкаПриПроведении("Документ не может осуществлять реализацию с неавтоматизированной торговой точки!", Отказ, Заголовок);
	//КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	НТТ = (мУчетВПродажныхЦенах И (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка));
	АТТ = (мУчетВПродажныхЦенах И (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный));
	
	// Укажем, что надо проверить:
	Если НТТ Тогда
		СтруктураОбязательныхПолей = Новый Структура("СуммаВРознице");
		Если мРазделятьПоСтавкамНДС Тогда
			СтруктураОбязательныхПолей.Вставить("СтавкаНДСВРознице");
		КонецЕсли;
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	КонецЕсли;

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	СтруктураОбязательныхПолей.Вставить("СчетУчета");

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
		Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда

		Если (НЕ(СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)) И (НЕ НТТ) Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		КонецЕсли;
		
	КонецЕсли;

	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Товары"": ";
		
		// Проверка номера ГТД
		Если УправлениеЗапасами.НеУказанНомерГТД(СтрокаТЧ.НомерГТД, СтрокаТЧ.СтранаПроисхождения) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Номер ГТД""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, Заголовок);
		КонецЕсли;
		
	КонецЦикла;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если НЕ НТТ Тогда
		// Здесь услуг быть не должно.
		УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	СтруктураОбязательныхПолей.Вставить("СчетУчета");

	// Теперь вызовем общую процедуру проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Процедура формирует проводки по отражению дохода или расхода от разницы 
// между стоимостью товаров, указанной в табличной части документа и 
// стоимостью, сформированной процедурой партионного учета.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура - выборка из результата запроса по
//                            шапке документа
//  ТаблицаПоТоварам - ТаблицаЗначений - таблица, содержащая данные для 
//                     проведения и проверки табличной части "Товары"
//  Отказ        - Булево - флаг отказа в проведении
//  Заголовок    - Строка - заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРазницамВСтоимостиТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		// Не отражаем разницы по возврату из переработки
		Возврат;
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// Не отражаем разницы по договорам с комитентом
		Возврат;
	КонецЕсли;
	
	УСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	
	Проводки = Движения.Хозрасчетный;
	
	ВидУчетаПВ = ?(СтруктураШапкиДокумента.СтатьяДоходовИРасходов.ПринятиеКналоговомуУчету, Перечисления.ВидыУчетаПоПБУ18.НУ, Перечисления.ВидыУчетаПоПБУ18.ПР);
	
	Для Каждого Строка Из ТаблицаПоТоварам Цикл
        МПЗ = БухгалтерскийУчет.ПолучитьНазваниеОбъекта(Строка.СчетУчета);
		Если Строка.РазницаВСтоимости > 0 ИЛИ 
			((Строка.РазницаВСтоимости = 0) И (Строка.РазницаВСтоимостиНУ > 0 ИЛИ Строка.РазницаВСтоимостиПР > 0 ИЛИ Строка.РазницаВСтоимостиВР > 0)) Тогда
			
			Проводка = Проводки.Добавить();
				
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Возврат " + МПЗ + " поставщику";
			Проводка.Сумма       = Строка.РазницаВСтоимости;
			
			Проводка.СчетДт = Строка.КорСчетСписания;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.КорСубконтоСписания1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Строка.КорСубконтоСписания2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Строка.КорСубконтоСписания3);
			
			Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаДоходов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СтатьяДоходовИРасходов);
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
			Если Проводка.СчетДт.Валютный Тогда
				Если Строка.Сумма = Строка.СуммаВал Тогда
					Проводка.ВалютаДт = Константы.ВалютаРегламентированногоУчета.Получить();
					Проводка.ВалютнаяСуммаДт = Строка.РазницаВСтоимости;
				Иначе
					Если (ЗначениеЗаполнено(Строка.ДоговорКонтрагента)) И (ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
						Проводка.ВалютаДт = Строка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаДт = ?(Строка.Сумма = 0, Строка.РазницаВСтоимости, Строка.РазницаВСтоимости * Строка.СуммаВал / Строка.Сумма);
					Конецесли;
				КонецЕсли;
			КонецЕсли;
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Строка.РазницаВСтоимостиНУ, Строка.РазницаВСтоимостиНУ, 
						Строка.РазницаВСтоимостиПР, Строка.РазницаВСтоимостиПР, Строка.РазницаВСтоимостиВР, Строка.РазницаВСтоимостиВР, Проводка);
			
		ИначеЕсли Строка.РазницаВСтоимости < 0 ИЛИ Строка.РазницаВСтоимостиНУ < 0 ИЛИ Строка.РазницаВСтоимостиПР < 0 ИЛИ Строка.РазницаВСтоимостиВР < 0 Тогда
			
			Проводка = Проводки.Добавить();
				
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Возврат " + МПЗ + " поставщику";
			Проводка.Сумма       = -Строка.РазницаВСтоимости;
			Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасходов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СтатьяДоходовИРасходов);
			
			Проводка.СчетКт = Строка.КорСчетСписания;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Строка.КорСубконтоСписания1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Строка.КорСубконтоСписания2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Строка.КорСубконтоСписания3);
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
			Если Проводка.СчетКт.Валютный Тогда
				Если Строка.Сумма = Строка.СуммаВал Тогда
					Проводка.ВалютаКт = Константы.ВалютаРегламентированногоУчета.Получить();
					Проводка.ВалютнаяСуммаКт = -Строка.РазницаВСтоимости;
				Иначе
					Если (ЗначениеЗаполнено(Строка.ДоговорКонтрагента)) И (ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
						Проводка.ВалютаКт = Строка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = -?(Строка.Сумма = 0, Строка.РазницаВСтоимости, Строка.РазницаВСтоимости * Строка.СуммаВал / Строка.Сумма);
					Конецесли;
				КонецЕсли;
			КонецЕсли;
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-Строка.РазницаВСтоимостиНУ, -Строка.РазницаВСтоимостиНУ, 
						-Строка.РазницаВСтоимостиПР, -Строка.РазницаВСтоимостиПР, -Строка.РазницаВСтоимостиВР, -Строка.РазницаВСтоимостиВР, Проводка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРазницамВСтоимостиТоваров()

// Процедура формирует проводки по отражению дохода или расхода от разницы 
// между залоговой стоимостью тары, указанной в табличной части документа и 
// ее фактической стоимостью, сформированной процедурой партионного учета.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура - выборка из результата запроса по
//                            шапке документа
//  ТаблицаПоТаре - ТаблицаЗначений - таблица, содержащая данные для 
//                     проведения и проверки табличной части "Тара"
//  Отказ        - Булево - флаг отказа в проведении
//  Заголовок    - Строка - заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРазницамФактическойЗалоговойСтоимостиТары(СтруктураШапкиДокумента, ТаблицаПоТаре, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		// Не отражаем разницы по возврату из переработки
		Возврат;
	КонецЕсли;
	
	ДатаДока = СтруктураШапкиДокумента.Дата;
	
	Проводки = Движения.Хозрасчетный;
	
	// Корректировка списания партий
	Для Каждого СтрокаТЧ из ТаблицаПоТаре Цикл

		ТаблицаПартий  = СтрокаТЧ.СписанныеПартии;

		СуммаПоПродаже = СтрокаТЧ.Сумма;
		Цена           = СуммаПоПродаже / СтрокаТЧ.Количество;

		РазницаЦен     = (СуммаПоПродаже - ТаблицаПартий.Итог("СуммаСписания"));

		Для Каждого СтрокаТП Из ТаблицаПартий Цикл

			ЦенаПартии = СтрокаТП.СуммаСписания / СтрокаТП.Количество;

			Если НЕ (Цена = ЦенаПартии) Тогда // Есть разница - нужно записать корректрирующую проводку.

				ДоляСуммыСписания = СтрокаТП.Количество / СтрокаТЧ.Количество * СтрокаТЧ.Сумма - СтрокаТП.СуммаСписания;

				Если РазницаЦен > 0 Тогда

					Проводка = Проводки.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Возврат тары поставщику";
					Проводка.Сумма       = ДоляСуммыСписания;

					Проводка.СчетДт = СтрокаТЧ.КорСчетСписания;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

					Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаДоходов;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СтатьяДоходовИРасходов);

					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
					Если Проводка.СчетДт.Валютный Тогда
						Если СтрокаТЧ.Сумма = СтрокаТЧ.СуммаВал Тогда
							Проводка.ВалютаДт = Константы.ВалютаРегламентированногоУчета.Получить();
							Проводка.ВалютнаяСуммаДт = ДоляСуммыСписания;
						Иначе
							Если (ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента)) И (ТипЗнч(СтрокаТЧ.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
								Проводка.ВалютаДт = СтрокаТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов;
								Проводка.ВалютнаяСуммаДт = ?(СтрокаТЧ.Сумма = 0, ДоляСуммыСписания, ДоляСуммыСписания * СтрокаТЧ.СуммаВал / СтрокаТЧ.Сумма);
							Конецесли;
						КонецЕсли;
					КонецЕсли;
					
				Иначе

					Проводка = Проводки.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Возврат тары поставщику";
					Проводка.Сумма       = - ДоляСуммыСписания;

					Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасходов;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СтатьяДоходовИРасходов);

					Проводка.СчетКт = СтрокаТЧ.КорСчетСписания;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
					Если Проводка.СчетКт.Валютный Тогда
						Если СтрокаТЧ.Сумма = СтрокаТЧ.СуммаВал Тогда
							Проводка.ВалютаКт = Константы.ВалютаРегламентированногоУчета.Получить();
							Проводка.ВалютнаяСуммаКт = -ДоляСуммыСписания;
						Иначе
							Если (ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента)) И (ТипЗнч(СтрокаТЧ.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
								Проводка.ВалютаКт = СтрокаТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов;
								Проводка.ВалютнаяСуммаКт = -?(СтрокаТЧ.Сумма = 0, ДоляСуммыСписания, ДоляСуммыСписания * СтрокаТЧ.СуммаВал / СтрокаТЧ.Сумма);
							Конецесли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли; //Если РазницаЦен >= 0 Тогда

			КонецЕсли; // Если НЕ (Цена = ЦенаПартии) Тогда

		КонецЦикла; // Для Каждого СтрокаТП Из ТаблицаПартий Цикл

	КонецЦикла; // Для Каждого СтрокаТЧ из ТаблицаПоТаре Цикл
	
КонецПроцедуры // ДвиженияПоРазницамФактическойЗалоговойСтоимостиТары()

// Определяет разницу в стоимости товаров, дополняет полученную таблицу колонками
// отражения разницы в стоимости, определяет и записывает разницу
//
Процедура ОпределениеРазницыВСтоимостиТоваров(ТаблицаПоТоварам, СтруктураШапкиДокумента)

	Если ТаблицаПоТоварам.Колонки.Найти("РазницаВСтоимости") = Неопределено Тогда
		ТаблицаПоТоварам.Колонки.Добавить("РазницаВСтоимости", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		ТаблицаПоТоварам.Колонки.Добавить("РазницаВСтоимостиНУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		ТаблицаПоТоварам.Колонки.Добавить("РазницаВСтоимостиПР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		ТаблицаПоТоварам.Колонки.Добавить("РазницаВСтоимостиВР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаПоТоварам Цикл
		Строка.РазницаВСтоимости 	= Строка.СуммаБезНДС + ?(СтруктураШапкиДокумента.НДСВключенВСтоимость, Строка.НДС, 0) - Строка.СписанныеПартии.Итог("СуммаСписания");
		Строка.РазницаВСтоимостиНУ 	= Строка.СуммаБезНДС + ?(СтруктураШапкиДокумента.НДСВключенВСтоимость, Строка.НДС, 0) - Строка.СписанныеПартии.Итог("СуммаСписанияНУ");
		Строка.РазницаВСтоимостиПР 	= - Строка.СписанныеПартии.Итог("СуммаСписанияПР");
		Строка.РазницаВСтоимостиВР 	= - Строка.СписанныеПартии.Итог("СуммаСписанияВР");
	КонецЦикла;

КонецПроцедуры // ОпределниеРазницыВСтоимостиТоваров()


// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	Проводки = Движения.Хозрасчетный;
	
	НТТ = (мУчетВПродажныхЦенах И (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка));
	АТТ = (мУчетВПродажныхЦенах И (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный));
	
	Если АТТ Тогда
		//Спишем торговую наценку
		ТаблицаНаценок = УправлениеЗапасамиПартионныйУчет.ТорговаяНаценкаАТТ(Ссылка, Склад, ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"), СтруктураШапкиДокумента.ПодразделениеОрганизации);
		СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
		ТаблицаНаценок.Индексы.Добавить("Номенклатура,Партия");

		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТоварам, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, , "Возврат поставщику");
		
		Для Каждого Строка Из ТаблицаПоТоварам Цикл
			
			ПолучательСчетНаценки = Строка.КорСчетСписания;
			
			Для Каждого Партия Из Строка.СписанныеПартии Цикл
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Номенклатура",Строка.Номенклатура);
				СтруктураОтбора.Вставить("Партия",		Партия.Партия);
				
				СтрокаТаблицыНаценок = ТаблицаНаценок.НайтиСтроки(СтруктураОтбора);
				
				Сумма = Партия.СуммаСписания;
				
				Если СтрокаТаблицыНаценок.Количество() = 0 Тогда
					СуммаНаценки 	= 0;
					СуммаНаценкиНУ 	= 0;
					СуммаНаценкиПР 	= 0;
					СуммаНаценкиВР 	= 0;
				ИначеЕсли НЕ (СтрокаТаблицыНаценок[0].ПС + СтрокаТаблицыНаценок[0].ОБ) = 0 Тогда
					СуммаНаценки = СтрокаТаблицыНаценок[0].ТН * Сумма / (СтрокаТаблицыНаценок[0].ПС + СтрокаТаблицыНаценок[0].ОБ);
					СуммаНаценкиНУ = СтрокаТаблицыНаценок[0].ТН_НУ * Сумма / (СтрокаТаблицыНаценок[0].ПС + СтрокаТаблицыНаценок[0].ОБ);
					СуммаНаценкиПР = СтрокаТаблицыНаценок[0].ТН_ПР * Сумма / (СтрокаТаблицыНаценок[0].ПС + СтрокаТаблицыНаценок[0].ОБ);
					СуммаНаценкиВР = СтрокаТаблицыНаценок[0].ТН_ВР * Сумма / (СтрокаТаблицыНаценок[0].ПС + СтрокаТаблицыНаценок[0].ОБ);
				Иначе
					СуммаНаценки 	= Сумма;
					СуммаНаценкиНУ 	= Сумма;
					СуммаНаценкиПР 	= 0;
					СуммаНаценкиВР 	= 0;
				КонецЕсли;
				
				Если СуммаНаценки <> 0 ИЛИ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И 
					(СуммаНаценкиНУ <> 0 ИЛИ СуммаНаценкиПР <> 0 ИЛИ СуммаНаценкиВР <> 0))Тогда
					
					Проводка = Проводки.Добавить();
					Проводка.Период      = Дата;
					Проводка.Организация = Организация;
					Проводка.Содержание  = "Возврат товаров поставщику";
					
					Проводка.СчетДт      = ПолучательСчетНаценки;
					Проводка.СчетКт      = СчетНаценки;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.КорСубконтоСписания1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Строка.КорСубконтоСписания2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Строка.КорСубконтоСписания3);
			
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
					
					Проводка.Сумма = - СуммаНаценки;
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-СуммаНаценкиНУ,-СуммаНаценкиНУ,-СуммаНаценкиПР,-СуммаНаценкиПР,-СуммаНаценкиВР,-СуммаНаценкиВР,Проводка);
					КонецЕсли;
					
					Если Проводка.СчетДт.Валютный Тогда
						Если Строка.Сумма = Строка.СуммаВал Тогда
							Проводка.ВалютаДт = Константы.ВалютаРегламентированногоУчета.Получить();
							Проводка.ВалютнаяСуммаДт = Проводка.Сумма;
						Иначе
							Если (ЗначениеЗаполнено(Строка.ДоговорКонтрагента)) И (ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
								Проводка.ВалютаДт = Строка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
								Проводка.ВалютнаяСуммаДт = ?(Строка.Сумма = 0, Проводка.Сумма, Проводка.Сумма * Строка.СуммаВал / Строка.Сумма);
							Конецесли;
						КонецЕсли;
					КонецЕсли;
					
					Партия.СуммаСписания = Сумма - СуммаНаценки;
					Партия.СуммаСписанияНУ = Сумма - СуммаНаценкиНУ;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
        		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТаре,    Истина, Ложь, Отказ, , "Возврат тары");
		
		ОпределениеРазницыВСтоимостиТоваров(ТаблицаПоТоварам, СтруктураШапкиДокумента);
		
		ДвиженияПоРазницамВСтоимостиТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
		ДвиженияПоРазницамФактическойЗалоговойСтоимостиТары(СтруктураШапкиДокумента, ТаблицаПоТаре, Отказ, Заголовок);		
		
		// Учет товаров по номерам ГТД
		УправлениеЗапасами.ПроведениеДокументаСписанияПоСчетуГТД(ЭтотОбъект, ТаблицаПоТоварам);

	ИначеЕсли НТТ Тогда
		
		ТаблицаНаценок = УправлениеЗапасамиПартионныйУчет.ТорговаяНаценкаНТТ(Ссылка, Склад, СтруктураШапкиДокумента.ПодразделениеОрганизации, мРазделятьПоСтавкамНДС);
		СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
		Если мРазделятьПоСтавкамНДС Тогда
			ТаблицаНаценок.Индексы.Добавить("СтавкиНДС");
		КонецЕсли;
		
		Если ТаблицаПоТоварам.Колонки.Найти("СписанныеПартии") = Неопределено Тогда
			ТаблицаПоТоварам.Колонки.Добавить("СписанныеПартии");
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаПоТоварам Цикл
			
			ПолучательСчетНаценки = Строка.КорСчетСписания;
			
			Если мРазделятьПоСтавкамНДС Тогда
				СтрокаТаблицыНаценок = ТаблицаНаценок.Найти(Строка.СтавкаНДСВРознице, "СтавкиНДС");
			Иначе
				СтрокаТаблицыНаценок = ?(ТаблицаНаценок.Количество() > 0, ТаблицаНаценок[0], Неопределено);
			КонецЕсли;
			
			Сумма = Строка.СуммаВРознице;
			
			Если СтрокаТаблицыНаценок = Неопределено Тогда
				СуммаНаценки 	= 0;
				СуммаНаценкиНУ 	= 0;
				СуммаНаценкиПР 	= 0;
				СуммаНаценкиВР 	= 0;
			ИначеЕсли НЕ (СтрокаТаблицыНаценок.ПС + СтрокаТаблицыНаценок.ОБ) = 0 Тогда
				СуммаНаценки = СтрокаТаблицыНаценок.ТН * Сумма / (СтрокаТаблицыНаценок.ПС + СтрокаТаблицыНаценок.ОБ);
				СуммаНаценкиНУ = СтрокаТаблицыНаценок.ТН_НУ * Сумма / (СтрокаТаблицыНаценок.ПС + СтрокаТаблицыНаценок.ОБ);
				СуммаНаценкиПР = СтрокаТаблицыНаценок.ТН_ПР * Сумма / (СтрокаТаблицыНаценок.ПС + СтрокаТаблицыНаценок.ОБ);
				СуммаНаценкиВР = СтрокаТаблицыНаценок.ТН_ВР * Сумма / (СтрокаТаблицыНаценок.ПС + СтрокаТаблицыНаценок.ОБ);
			Иначе
				СуммаНаценки 	= Сумма;
				СуммаНаценкиНУ 	= Сумма;
				СуммаНаценкиПР 	= 0;
				СуммаНаценкиВР 	= 0;
			КонецЕсли;
			
			//Спишем товар из розницы
			Проводка = Проводки.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Возврат товаров поставщику";
			
			Проводка.СчетДт      = Строка.КорСчетСписания;
			Проводка.СчетКт      = Строка.СчетУчета;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.КорСубконтоСписания1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Строка.КорСубконтоСписания2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Строка.КорСубконтоСписания3);
					
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
			
			Если мРазделятьПоСтавкамНДС Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
			КонецЕсли;
			
			Сумма = Строка.СуммаВРознице;
			Проводка.Сумма         = Сумма;
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
			Если Проводка.СчетДт.Валютный Тогда
				Если Строка.Сумма = Строка.СуммаВал Тогда
					Проводка.ВалютаДт = Константы.ВалютаРегламентированногоУчета.Получить();
					Проводка.ВалютнаяСуммаДт = Проводка.Сумма;
				Иначе
					Если (ЗначениеЗаполнено(Строка.ДоговорКонтрагента)) И (ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
						Проводка.ВалютаДт = Строка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаДт = ?(Строка.Сумма = 0, Проводка.Сумма, Проводка.Сумма * Строка.СуммаВал / Строка.Сумма);
					Конецесли;
				КонецЕсли;
			КонецЕсли;
			
			//Спишем торговую наценку
			Если СуммаНаценки <> 0 ИЛИ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И 
				(СуммаНаценкиНУ <> 0 ИЛИ СуммаНаценкиПР <> 0 ИЛИ СуммаНаценкиВР <> 0))Тогда
				
				Проводка = Проводки.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Возврат товаров поставщику";
				
				Проводка.СчетДт      = Строка.КорСчетСписания;
				Проводка.СчетКт      = СчетНаценки;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.КорСубконтоСписания1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Строка.КорСубконтоСписания2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Строка.КорСубконтоСписания3);
					
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
				Если мРазделятьПоСтавкамНДС Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
				КонецЕсли;
				
				Проводка.Сумма = - СуммаНаценки;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-СуммаНаценкиНУ,-СуммаНаценкиНУ,-СуммаНаценкиПР,-СуммаНаценкиПР,-СуммаНаценкиВР,-СуммаНаценкиВР,Проводка);
				КонецЕсли;
				
				Если Проводка.СчетДт.Валютный Тогда
					Если Строка.Сумма = Строка.СуммаВал Тогда
						Проводка.ВалютаДт = Константы.ВалютаРегламентированногоУчета.Получить();
						Проводка.ВалютнаяСуммаДт = Проводка.Сумма;
					Иначе
						Если (ЗначениеЗаполнено(Строка.ДоговорКонтрагента)) И (ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
							Проводка.ВалютаДт = Строка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
							Проводка.ВалютнаяСуммаДт = ?(Строка.Сумма = 0, Проводка.Сумма, Проводка.Сумма * Строка.СуммаВал / Строка.Сумма);
						Конецесли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ТаблицаПартий = Новый ТаблицаЗначений;
			ТаблицаПартий.Колонки.Добавить("СуммаСписания");
			ТаблицаПартий.Колонки.Добавить("СуммаСписанияНУ");
			ТаблицаПартий.Колонки.Добавить("СуммаСписанияПР");
			ТаблицаПартий.Колонки.Добавить("СуммаСписанияВР");
			ТаблицаПартий.Колонки.Добавить("Комиссионный");
			ТаблицаПартий.Колонки.Добавить("Количество");
			
			СтрокаСтоимости = ТаблицаПартий.Добавить();
			СтрокаСтоимости.СуммаСписания = Сумма - СуммаНаценки;
			СтрокаСтоимости.СуммаСписанияНУ = СтрокаСтоимости.СуммаСписания;
			СтрокаСтоимости.СуммаСписанияПР = 0;
			СтрокаСтоимости.СуммаСписанияВР = 0;
			СтрокаСтоимости.Комиссионный  = Ложь;
			СтрокаСтоимости.Количество    = 0;
			
			Строка.СписанныеПартии = ТаблицаПартий;
			
		КонецЦикла;
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТаре,    Истина, Ложь, Отказ, , "Возврат тары");
		
		ОпределениеРазницыВСтоимостиТоваров(ТаблицаПоТоварам, СтруктураШапкиДокумента);
		
		//ДвиженияПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
		ДвиженияПоРазницамВСтоимостиТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		ДвиженияПоРазницамФактическойЗалоговойСтоимостиТары(СтруктураШапкиДокумента, ТаблицаПоТаре, Отказ, Заголовок);
			
	Иначе
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТоварам, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, , "Возврат поставщику");
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТаре,    Истина, Ложь, Отказ, , "Возврат тары");
		
		ОпределениеРазницыВСтоимостиТоваров(ТаблицаПоТоварам, СтруктураШапкиДокумента);
		
		//ДвиженияПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
		ДвиженияПоРазницамВСтоимостиТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
			
		ДвиженияПоРазницамФактическойЗалоговойСтоимостиТары(СтруктураШапкиДокумента, ТаблицаПоТаре, Отказ, Заголовок);
		
		// Учет товаров по номерам ГТД
		УправлениеЗапасами.ПроведениеДокументаСписанияПоСчетуГТД(ЭтотОбъект, ТаблицаПоТоварам);
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ДатаДок    = Дата;
	Проводки = Движения.Хозрасчетный;

	Если СтруктураШапкиДокумента.ВидДоговора = перечисления.ВидыДоговоровКонтрагентов.СПоставщиком  и ТаблицаПоТоварам.Количество()>0 тогда

		Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом) тогда
				//Счет расчетов с контрагентом не указан, определить состояние расчетов невозможно.
				//Корректировка расчетного документа в пределах счета расчетов по претензиям не производится!
				//Корректирующая проводка не требуется.
			Если не (ТаблицаПоТоварам.Итог("СуммаБезНДС") + ТаблицаПоТоварам.Итог("НДС")=0) Тогда
				СтруктураТаблицыРасчетов = Новый структура("НомерСтроки,СчетУчета,СчетУчетаЦенности,ВидЦенности,Номенклатура,Ценность,Партия,СчетУчетаНДС,СтавкаНДС
					|,Количество,Сумма,СуммаБУ,СуммаНУ,СуммаБУБезНДС,СуммаВал,НДС,НДСВал,СуммаБезНДС,СуммаБезНДСВал");

				//Формируем таблицу расчетов с нужной структурой и заполняем по таблице возвратов
				ТаблицаРасчетов = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам,СтруктураТаблицыРасчетов,,Истина);
			КонецЕсли; 
		Иначе
			//Определение неоплаченной части, частичное (в размере остатка задолженности по счету расчетов)
			// закрытие претензии в размере неоплаченной части по накладной.

			РазделятьРасчетыПоПартиям = НЕ НТТ
				И НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) 
				И ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом)
				И СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Найти(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто") <> Неопределено;
			
			СтруктураТаблицыРасчетов = Новый структура("НомерСтроки,СчетУчета,СчетУчетаЦенности,ВидЦенности,Номенклатура,Ценность,Партия,СчетУчетаНДС,СтавкаНДС
					|,Количество,Сумма,СуммаБУ,СуммаНУ,СуммаБУБезНДС,СуммаВал,НДС,НДСВал,СуммаБезНДС,СуммаБезНДСВал");

			//Формируем таблицу расчетов с нужной структурой и заполняем по таблице возвратов
			ТаблицаРасчетов = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам,СтруктураТаблицыРасчетов,,Истина);
			
			// Если не заполнена сделка, документ приобретения мог быть получен по партионному учету.
			// В этом случае зачет непогашенной задолженности необходимо проводить в разрезе документов поступления.
			Если РазделятьРасчетыПоПартиям Тогда
				//Развернем таблицу товаров по партиям для распределения выручки.
				//Распределение выручки по товарам по партиям
				ТаблицаРасчетов.Очистить();
                ТаблицаРасчетов.Колонки.Удалить("Партия");
				ТаблицаРасчетов.Колонки.Добавить("Партия", Документы.ТипВсеСсылки());
				
				СписокРаспределяемыхКолонок = Новый Структура("Количество,Сумма,СуммаБУ,СуммаНУ,СуммаБУБезНДС,СуммаВал,НДС,НДСВал,СуммаБезНДС,СуммаБезНДСВал");

				Для каждого СтрокаТаблицыТоваров Из ТаблицаПоТоварам Цикл 

					ТаблицаПартий = СтрокаТаблицыТоваров.СписанныеПартии;

					Для каждого Партия из ТаблицаПартий Цикл

						СтрокаТаблицыРасчетов = ТаблицаРасчетов.Добавить();

						Если Партия.Комиссионный тогда
							ПараметрыПартии = УправлениеВзаиморасчетами.ПараметрыРасчетовСКомитентом(Партия.Партия, Отказ, Заголовок);
						КонецЕсли;

						Для каждого Колонка из ТаблицаРасчетов.Колонки Цикл

							Если СписокРаспределяемыхКолонок.Свойство(Колонка.Имя) тогда
								СтрокаТаблицыРасчетов[Колонка.Имя]= Партия.Количество;

							ИначеЕсли Не(ТаблицаПартий.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
								СтрокаТаблицыРасчетов[Колонка.Имя] = Партия[Колонка.Имя];
							
							ИначеЕсли Не(ТаблицаПоТоварам.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
								СтрокаТаблицыРасчетов[Колонка.Имя] = СтрокаТаблицыТоваров[Колонка.Имя];

							Иначе

								Если Партия.Комиссионный тогда

									Если ПараметрыПартии.Свойство(Колонка.Имя) тогда
										СтрокаТаблицыРасчетов[Колонка.Имя] = ПараметрыПартии[Колонка.Имя];
									КонецЕсли;

								КонецЕсли;

							КонецЕсли;

						КонецЦикла; // Для каждого Колонка из ВыручкаПоТоварам.Колонки Цикл

					КонецЦикла; // Для каждого Партия из ТаблицаПартий Цикл

				КонецЦикла; // Для каждого СтрокаТаблицыТоваров Из ТаблицаПоТоварам Цикл 

				//Распределим выручку по партиям

				ТаблицаРасчетов = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаПоТоварам,ТаблицаРасчетов,СписокРаспределяемыхКолонок);

			КонецЕсли; 
			
			СтруктураШапкиДляЗачетаНеоплаченнойЧасти =  Новый Структура();
			Для каждого ЭлементСШД из СтруктураШапкиДокумента Цикл
				Если ЭлементСШД.Ключ = "СчетУчетаРасчетовПоПретензиям" тогда
					СтруктураШапкиДляЗачетаНеоплаченнойЧасти.Вставить("СчетУчетаРасчетовСКонтрагентом",ЭлементСШД.Значение);
				ИначеЕсли ЭлементСШД.Ключ = "СчетУчетаРасчетовСКонтрагентом" тогда
					СтруктураШапкиДляЗачетаНеоплаченнойЧасти.Вставить("СчетУчетаРасчетовПоАвансам",ЭлементСШД.Значение);
				Иначе
					СтруктураШапкиДляЗачетаНеоплаченнойЧасти.Вставить(ЭлементСШД.Ключ,ЭлементСШД.Значение);
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗачетаАвансов = Новый ТаблицаЗначений;
			ТаблицаЗачетаАвансов.Колонки.Добавить("ДокументРасчетов",    Метаданные().Реквизиты.Сделка.Тип);
			ТаблицаЗачетаАвансов.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
			
			Если НЕ РазделятьРасчетыПоПартиям Тогда
				
				ТаблицыДокумента = Новый Структура("ТаблицаПоТоварам", ТаблицаРасчетов);
				
				Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) Тогда
					СтруктураШапкиДляЗачетаНеоплаченнойЧасти.Вставить(
						"СпособЗачетаАвансов", Перечисления.СпособыЗачетаАвансов.ПоДокументу);
					СтрокаЗачета = ТаблицаЗачетаАвансов.Добавить();
					СтрокаЗачета.ДокументРасчетов    = СтруктураШапкиДокумента.Сделка;
					СтрокаЗачета.СуммаВзаиморасчетов = 0;
				Иначе
					СтруктураШапкиДляЗачетаНеоплаченнойЧасти.Вставить(
						"СпособЗачетаАвансов", Перечисления.СпособыЗачетаАвансов.Автоматически);
				КонецЕсли;
				
				ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
					СтруктураШапкиДляЗачетаНеоплаченнойЧасти, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, 
					СтруктураШапкиДляЗачетаНеоплаченнойЧасти.НДСВключенВСтоимость, 
					Отказ, Заголовок);
				
			Иначе
					
				СписокПартий = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаРасчетов.ВыгрузитьКолонку("Партия"));
				
				ТаблицаРасчетов.Индексы.Добавить("Партия");
				
				СтруктураШапкиДляЗачетаНеоплаченнойЧасти.Вставить("СпособЗачетаАвансов", Перечисления.СпособыЗачетаАвансов.ПоДокументу);
				
				ТаблицаВзаиморасчетов = Неопределено;
				
				Для каждого ТекущаяПартия Из СписокПартий Цикл
					
					ТаблицаЗачетаАвансов.Очистить();
					СтрокаЗачета = ТаблицаЗачетаАвансов.Добавить();
					СтрокаЗачета.ДокументРасчетов    = ТекущаяПартия;
					СтрокаЗачета.СуммаВзаиморасчетов = 0;

					ТаблицаРасчетов_ОтборПоПартиям = ТаблицаРасчетов.Скопировать(Новый Структура("Партия", ТаблицаЗачетаАвансов));
					
					ТаблицыДокумента = Новый Структура("ТаблицаПоТоварам", ТаблицаРасчетов_ОтборПоПартиям);
				
					ТекущаяТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
						СтруктураШапкиДляЗачетаНеоплаченнойЧасти, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, 
						СтруктураШапкиДляЗачетаНеоплаченнойЧасти.НДСВключенВСтоимость,
						Отказ, Заголовок);
						
					Если ТаблицаВзаиморасчетов = Неопределено Тогда
						ТаблицаВзаиморасчетов = ТекущаяТаблицаВзаиморасчетов.Скопировать();
					Иначе
						ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТекущаяТаблицаВзаиморасчетов, ТаблицаВзаиморасчетов);
					КонецЕсли; 
					
				КонецЦикла; 
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ДвиженияПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаВзаиморасчетов, Отказ, Заголовок);
		
	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);
	
	Если ТаблицаПоТоварам.Количество() > 0 Тогда
		ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

	// {УчетДоходовИРасходовИП
	ДвиженияПоРегистрамНУПредпринимателя(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	// }УчетДоходовИРасходовИП
	
КонецПроцедуры // ДвиженияПоРегистрам

// {УчетДоходовИРасходовИП
Процедура ДвиженияПоРегистрамНУПредпринимателя(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя ИЛИ ТаблицаПоТоварам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	
	Если СтруктураШапкиДокумента.Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка
		И УчетнаяПолитикаНУ.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		Возврат;
	КонецЕсли;
	
	СписокРаспределяемыхКолонок = Новый Структура("Количество,НДС,СуммаБезНДС","Количество","Количество","Количество");
	СписокИсключаемыхКолонок = Новый Структура;
	
	БУ = ПланыСчетов.Хозрасчетный.Товары.ПолучитьОбъект();	
	ВестиСкладскойУчетБУ  = НЕ (БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено);
	Если НЕ ВестиСкладскойУчетБУ Тогда
		СписокИсключаемыхКолонок.Вставить("Склад",);
	КонецЕсли;
	
	ТаблицаВозврата = ОбщегоНазначения.РазвернутьПоВложеннойТаблице(ТаблицаПоТоварам, "СписанныеПартии", СписокРаспределяемыхКолонок, СписокИсключаемыхКолонок);
	
	Если ТаблицаВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	СтруктураОтбора = Новый Структура("Номенклатура,ВидМПЗ,Партия");
	
	ТаблицаВозврата.Колонки.Добавить("ВидМПЗ");
	Для Каждого МПЗ Из ТаблицаВозврата Цикл
		МПЗ.ВидМПЗ = ДоходыИРасходыПредпринимателя.ВидМПЗПоСчетуУчета(МПЗ.СчетУчета);
	КонецЦикла;
	
	ТаблицаВозврата.Свернуть("Номенклатура, ВидМПЗ, Партия", "Количество");
	
	СписокПартий = ТаблицаВозврата.ВыгрузитьКолонку("Партия");
	СписокТоваров = ТаблицаВозврата.ВыгрузитьКолонку("Номенклатура");
	СписокВидовМПЗ = ТаблицаВозврата.ВыгрузитьКолонку("ВидМПЗ");
		
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокПартий);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокТоваров);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокВидовМПЗ);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокТоваров", СписокТоваров);
	Запрос.УстановитьПараметр("СписокВидовМПЗ", СписокВидовМПЗ);
	Запрос.УстановитьПараметр("СписокПартий", СписокПартий);
	Запрос.УстановитьПараметр("КонецПериода", СтруктураШапкиДокумента.Дата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПМПЗОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПМПЗОстатки.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПМПЗОстатки.ВидМПЗ КАК ВидМПЗ,
	|	ИПМПЗОстатки.Номенклатура КАК Номенклатура,
	|	ИПМПЗОстатки.Партия,
	|	ИПМПЗОстатки.ДокументОплаты,
	|	СУММА(ИПМПЗОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(ИПМПЗОстатки.СуммаОстаток) КАК Сумма,
	|	СУММА(ИПМПЗОстатки.НДСОстаток) КАК НДС
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Остатки(
	|			&КонецПериода,
	|			Номенклатура В (&СписокТоваров)
	|				И Организация = &Организация
	|				И Партия В (&СписокПартий)
	|				И ВидМПЗ В (&СписокВидовМПЗ)) КАК ИПМПЗОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПМПЗОстатки.ХарактерДеятельности,
	|	ИПМПЗОстатки.ДокументОплаты,
	|	ИПМПЗОстатки.ВидМПЗ,
	|	ИПМПЗОстатки.Номенклатура,
	|	ИПМПЗОстатки.Партия,
	|	ИПМПЗОстатки.НоменклатурнаяГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатурнаяГруппа,
	|	ХарактерДеятельности,
	|	ВидМПЗ,
	|	Номенклатура,
	|	ИПМПЗОстатки.Партия.Дата,
	|	ИПМПЗОстатки.ДокументОплаты.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если СтруктураОтбора.Номенклатура <> Выборка.Номенклатура
			ИЛИ СтруктураОтбора.ВидМПЗ <> Выборка.ВидМПЗ
			ИЛИ СтруктураОтбора.Партия <> Выборка.Партия Тогда
		
			СтруктураОтбора.Номенклатура = Выборка.Номенклатура;
			СтруктураОтбора.ВидМПЗ = Выборка.ВидМПЗ;
			СтруктураОтбора.Партия = Выборка.Партия;
			
			СтрокаТовара = ТаблицаВозврата.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокаТовара.Количество() = 0 Тогда
				СтруктураОтбора = Новый Структура("Номенклатура,ВидМПЗ,Партия");
				Продолжить;
				
			ИначеЕсли СтрокаТовара[0].Количество = 0 Тогда
				СтруктураОтбора = Новый Структура("Номенклатура,ВидМПЗ,Партия");
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Количество = СтрокаТовара[0].Количество;
			
		Если Количество >= Выборка.Количество Тогда
			КоличествоСписано = Выборка.Количество;
			СуммаСписано = Выборка.Сумма;
			НДССписано = Выборка.НДС;
			
			Количество = Количество - КоличествоСписано;
	
		Иначе
			КоличествоСписано = Количество;
			СуммаСписано = Окр(Выборка.Сумма * КоличествоСписано / Выборка.Количество, 2, 1);
			НДССписано = Окр(Выборка.НДС * КоличествоСписано / Выборка.Количество, 2, 1);

			Количество = 0;
		КонецЕсли;
			
		СтрокаТовара[0].Количество = Количество;
			
		Движение = Движения.ИПМПЗ.ДобавитьПриход();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация = СтруктураШапкиДокумента.Организация;
		Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
		Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
		Движение.Номенклатура = Выборка.Номенклатура;
		Движение.ВидМПЗ = Выборка.ВидМПЗ;
		Движение.Партия = Выборка.Партия;
		Движение.ДокументОплаты = Выборка.ДокументОплаты;
		Движение.Сумма = - СуммаСписано;
		Движение.НДС = - НДССписано;
		Движение.Количество = - КоличествоСписано;
			
	КонецЦикла;
	
КонецПроцедуры
// }УчетДоходовИРасходовИП

Процедура ДвиженияВозвратаТоваровПоставщикуПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВозвратов, Отказ, Заголовок) Экспорт

	Если Не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	ИначеЕсли СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	ИначеЕсли ТаблицаВозвратов.Количество()=0 Тогда
		// Возврат товаров не осуществлялся
		Возврат;
	ИначеЕсли СтруктураШапкиДокумента.Свойство("ВидОперации") и СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		// Это не наши ценности (были даны в переработку), следовательно НДС по ним учитывать не нужно
		Возврат;
	ИначеЕсли СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// Это не наши ценности (договор комиссии), следовательно НДС по ним отражать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		Если Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
			ТаблицаВозвратов.Колонки.Добавить("СчетФактура");
			ТаблицаВозвратов.ЗаполнитьЗначения(?(Не ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка), СтруктураШапкиДокумента.Ссылка, СтруктураШапкиДокумента.Сделка), "СчетФактура");
			ТаблицаВозвратов.Колонки.Добавить("Событие");
			ТаблицаВозвратов.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС, "Событие");
		КонецЕсли;
		УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаВозвратов, Движения, Отказ);
		Если СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Или Не СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
			Для Каждого СтрокаВозврата Из ТаблицаВозвратов Цикл
				
				Проводка = Движения.Хозрасчетный.Добавить();

				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Возврат поставщику";
				Проводка.Сумма       = СтрокаВозврата.НДС;

				Если Не (СтруктураШапкиДокумента.УчетАгентскогоНДС И СтруктураШапкиДокумента.НалоговыйАгентПоОплате) Тогда
					Проводка.Сумма       = СтрокаВозврата.НДС;
					Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовПоПретензиям;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
						
					Если Проводка.СчетДт.Валютный Тогда
						Если не СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
							СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов",СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов);
						КонецЕсли;
						
						Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
							Проводка.ВалютнаяСуммаДт = Проводка.Сумма;
						Иначе
							Проводка.ВалютнаяСуммаДт = СтрокаВозврата.НДСВал;
						КонецЕсли; 
					КонецЕсли;
				Иначе
					Проводка.Сумма       = СтрокаВозврата.НДСНеоплаченнаяЧасть;
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				КонецЕсли;

				Если СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
					Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.НДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				Иначе
					Проводка.СчетКт      = СтрокаВозврата.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",     СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФПолученные",    ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка), СтруктураШапкиДокумента.Сделка, СтруктураШапкиДокумента.Ссылка));
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
			КонецЦикла; 
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	СчетНДС = ПланыСчетов.Хозрасчетный.НДС;
	
	НТТ = (мУчетВПродажныхЦенах И (СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка));

	Если НТТ Тогда
		ТаблицаПоПартиям = ТаблицаВозвратов.Скопировать();
	Иначе
		/////////////////////////////////////////////////////////////////////////////////
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		СписокРаспределяемыхКолонок = Новый Структура("Количество,Сумма,СуммаВал,НДС,НДСВал,СуммаБезНДС,СуммаБезНДСВал","Количество","Количество","Количество","Количество","Количество","Количество","Количество");
		
		СписокИсключаемыхКолонок = новый Структура("СуммаСписания"+
		", ОтражениеВУСН "+
		", Регистратор, СчетДоходов, Субконто, СчетУчетаНДСПоРеализации");
		
		ТаблицаВозвратовНДС = ТаблицаВозвратов.Скопировать();
		ТаблицаВозвратовНДС.Колонки.Удалить("Склад");
	
		ТаблицаПоПартиям = ОбщегоНазначения.РазвернутьПоВложеннойТаблице(ТаблицаВозвратовНДС, "СписанныеПартии",СписокРаспределяемыхКолонок, СписокИсключаемыхКолонок);
	КонецЕсли; 
		
	ТаблицаПоПартиям.Колонки.Добавить("НомерСтрокиТаблицыПоПартиям", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10,0));
	ТаблицаПоПартиям.Индексы.Добавить("НомерСтрокиТаблицыПоПартиям");
		
	НомерСтроки = 0;
	Для каждого СтрокаПартии Из ТаблицаПоПартиям Цикл
		НомерСтроки = НомерСтроки +1;
		СтрокаПартии.НомерСтрокиТаблицыПоПартиям = НомерСтроки;
	КонецЦикла;
		
	//При учете "По средней" или если партионный учет не ведется - партия может быть незаполнена.
	Если ТаблицаПоПартиям.Колонки.Найти("Партия") = Неопределено Тогда
		ТаблицаПоПартиям.Колонки.Добавить("Партия");
	КонецЕсли; 
		
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) Тогда
		Для каждого СтрокаТаблицыСписания Из ТаблицаПоПартиям Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыСписания.Партия) Тогда
				СтрокаТаблицыСписания.Партия = СтруктураШапкиДокумента.Сделка; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 

	Если НТТ Тогда
		СтруктураКолонок = Новый структура ("НомерСтроки, НомерСтрокиТаблицыПоПартиям, СчетФактура,Номенклатура,ВидЦенности, СтавкаНДС, НДСВключенВСтоимость, СчетУчетаНДС, 
											|ПартияСовпадаетСУказаннымДокументомДляВозврата, Количество, Стоимость, НДС, НДСНеоплаченнаяЧасть, НДСВалНеоплаченнаяЧасть");
		ТаблицаНДСПартииСписания = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоПартиям,СтруктураКолонок, ,Истина);
		ТаблицаНДСПартииСписания.Очистить();
	Иначе
		ТаблицаНДСПартииСписания = УчетНДС.ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаПоПартиям, Отказ, Заголовок, Истина);
		Если ТаблицаНДСПартииСписания.Колонки.Найти("СчетФактура") = Неопределено Тогда
			ТаблицаНДСПартииСписания.Колонки.Партия.Имя = "СчетФактура";
		КонецЕсли;
		Если ТаблицаНДСПартииСписания.Колонки.Найти("НДСВключенВСтоимость") = Неопределено Тогда
			ТаблицаНДСПартииСписания.Колонки.Добавить("НДСВключенВСтоимость");
			ТаблицаНДСПартииСписания.ЗаполнитьЗначения(СтруктураШапкиДокумента.НДСВключенВСтоимость, "НДСВключенВСтоимость");
		КонецЕсли;
		Если ТаблицаНДСПартииСписания.Колонки.Найти("Стоимость") = Неопределено Тогда
			ТаблицаНДСПартииСписания.Колонки.Сумма.Имя = "Стоимость";
		КонецЕсли;
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////
	// НДС по партиям - отразить непосредственное списание.
	Если не ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		//Партии найдены (хотя бы частично). Отразим в партионном учете НДС.
			
		ТаблицаДвиженийПартии = Движения.НДСПоПриобретеннымЦенностям.ВыгрузитьКолонки();
		Движения.НДСПоПриобретеннымЦенностям.мПериод          = Дата;
			
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
			
		// Делаем не расход, а сторно прихода по регистру.
		Для каждого СтрокаПартии Из ТаблицаДвиженийПартии Цикл
			СтрокаПартии.Стоимость	= - СтрокаПартии.Стоимость;
			СтрокаПартии.НДС		= - СтрокаПартии.НДС;
			СтрокаПартии.Количество	= - СтрокаПартии.Количество;
		КонецЦикла; 
		Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
		Движения.НДСПоПриобретеннымЦенностям.ВыполнитьПриход();
			
		/////////////////////////////////////////////////////////////////////////////////
		// НДС по ОС - ТМЦ могли принадлежать к будущим ОС,
		// в этом случае при возврате необходимо снять блокировку с вычета.
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, ТаблицаДвиженийПартии, Движения, Отказ);
		// НДС по ОС
		/////////////////////////////////////////////////////////////////////////////////

	КонецЕсли; 
	// НДС по партиям - отразить непосредственное списание.
	///////////////////////////
		
	Если Не (СтруктураШапкиДокумента.УчетАгентскогоНДС И СтруктураШапкиДокумента.НалоговыйАгентПоОплате) Тогда
    	СуммаНДСПоСтрокам = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоПартиям,Новый структура("НомерСтрокиТаблицыПоПартиям, НДС,СуммаБезНДС"));
	Иначе
		СуммаНДСПоСтрокам = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоПартиям,Новый структура("НомерСтрокиТаблицыПоПартиям, НДСНеоплаченнаяЧасть, СуммаБезНДСНеоплаченнаяЧасть"));
		СуммаНДСПоСтрокам.Колонки.СуммаБезНДСНеоплаченнаяЧасть.Имя = "СуммаБезНДС";
		СуммаНДСПоСтрокам.Колонки.НДСНеоплаченнаяЧасть.Имя = "НДС";
	КонецЕсли;
		
	СуммаНДСПоСтрокам.Индексы.Добавить("НомерСтрокиТаблицыПоПартиям");
	
	//// Попытка списания товаров по партионному учету НДС
	////////////////////////////////////////////////////////////////////////////
	
	ТаблицаПроводокПоНДС = Новый ТаблицаЗначений();
	ТаблицаПроводокПоНДС.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10,0));
	ТаблицаПроводокПоНДС.Колонки.Добавить("НомерСтрокиТаблицыПоПартиям", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10,0));
	ТаблицаПроводокПоНДС.Колонки.Добавить("СчетФактура");
	ТаблицаПроводокПоНДС.Колонки.Добавить("Поставщик", Новый ОписаниеТИпов("СправочникСсылка.Контрагенты"));
	ТаблицаПроводокПоНДС.Колонки.Добавить("СчетУчетаНДС");
	ТаблицаПроводокПоНДС.Колонки.Добавить("НДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаПроводокПоНДС.Колонки.Добавить("НДСВал", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	//Если включен сложный учет НДС - производим корректировку регистра НДС покупки по данным о списании партий
	СокращеннаяТаблицаСФВозвратов = ТаблицаНДСПартииСписания.Скопировать();
	СокращеннаяТаблицаСФВозвратов.Свернуть("НомерСтроки, НомерСтрокиТаблицыПоПартиям, СчетФактура,Номенклатура,ВидЦенности, СтавкаНДС, НДСВключенВСтоимость,СчетУчетаНДС,ПартияСовпадаетСУказаннымДокументомДляВозврата","Количество,Стоимость, НДС, НДСНеоплаченнаяЧасть, НДСВалНеоплаченнаяЧасть");
	СокращеннаяТаблицаСФВозвратов.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	СокращеннаяТаблицаСФВозвратов.Колонки.Добавить("СуммаБезНДСНеоплаченнаяЧасть", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Определение поставщика по счету-фактуре
	Если СокращеннаяТаблицаСФВозвратов.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СчетаФактуры",       ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СокращеннаяТаблицаСФВозвратов.ВыгрузитьКолонку("СчетФактура"),Истина));
		Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОбороты.Поставщик,
		|	НДСПредъявленныйОбороты.СчетФактура
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Обороты(
		|		,
		|		,
		|		,
		|		Организация = &Организация
		|		    И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
		|ГДЕ
		|	НДСПредъявленныйОбороты.Поставщик <> &ПустойКонтрагент";
		
		КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();
		КонтрагентПоСчетуФактуре.Индексы.Добавить("СчетФактура");
		СокращеннаяТаблицаСФВозвратов.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
		Для каждого СтрокаОбрабатываемая  Из СокращеннаяТаблицаСФВозвратов Цикл
			СтрокаОбрабатываемая.СуммаБезНДС = СтрокаОбрабатываемая.Стоимость - СтрокаОбрабатываемая.НДС;
			СтрокаОбрабатываемая.СуммаБезНДСНеоплаченнаяЧасть = СтрокаОбрабатываемая.Стоимость - СтрокаОбрабатываемая.НДСНеоплаченнаяЧасть;
			
			СтрокаКонтрагента = КонтрагентПоСчетуФактуре.Найти(СтрокаОбрабатываемая.СчетФактура,"СчетФактура");
			Если не СтрокаКонтрагента = Неопределено Тогда
				СтрокаОбрабатываемая.Поставщик = СтрокаКонтрагента.Поставщик;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	// Движения возврата по регистру НДСПредъявленный
	ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
	
	//Подготовим переменную для таблицы по сторнированию включения в стоимость в случае необходимости
	ТаблицаДвижений_НДСВключенныйВСтоимость = Движения.НДСВключенныйВСтоимость.Выгрузить();
	
	ОтразитьВКнигеПродаж =  (СтруктураШапкиДокумента.Дата>='20060530');
	
	Если ОтразитьВКнигеПродаж Тогда
		ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
	КонецЕсли; 

	УказанДокументВозврата = ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) И Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат;
	Если ОтразитьВКнигеПродаж Тогда
		Если Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
			ВидНачисления = Перечисления.НДСВидНачисления.НДСВосстановлен;
		Иначе
			ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
		КонецЕсли;
	КонецЕсли;
	
	СокращеннаяТаблицаСФВозвратов.Индексы.Добавить("НомерСтрокиТаблицыПоПартиям");
	
	Для каждого СтрокаВозврата Из ТаблицаПоПартиям Цикл
		
		Если ОтразитьВКнигеПродаж И СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
			Если СтрокаВозврата.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
			ИначеЕсли СтрокаВозврата.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС;
			КонецЕсли;
		КонецЕсли;
		
		ОтработанНДСпоСтроке = СуммаНДСПоСтрокам.Найти(СтрокаВозврата.НомерСтрокиТаблицыПоПартиям,"НомерСтрокиТаблицыПоПартиям");
		
		СтрокиПартийВозврата = СокращеннаяТаблицаСФВозвратов.НайтиСтроки(Новый Структура("НомерСтрокиТаблицыПоПартиям",СтрокаВозврата.НомерСтрокиТаблицыПоПартиям));
		
		Если Не (СтруктураШапкиДокумента.УчетАгентскогоНДС
			И СтруктураШапкиДокумента.НалоговыйАгентПоОплате) Тогда
			Если ОтразитьВКнигеПродаж Тогда
				Если СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
					// НДС был включен в стоимость а не отражен в книге покупок.
					// Формирование записи в книге продаж не требуется, так как НДС в книге покупок не отражался)
				Иначе
					//Отражение возврата поставщику в регистре "НДС начисленный" 
					СтрокаДвижения = ТаблицаДвижений_НДСНачисленный.Добавить();
					СтрокаДвижения.Период 		= СтруктураШапкиДокумента.Дата;
					СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
					СтрокаДвижения.СчетФактура	= ?(УказанДокументВозврата, СтруктураШапкиДокумента.Сделка, СтруктураШапкиДокумента.Ссылка);
					СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
					СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
					СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
					СтрокаДвижения.Покупатель	= СтруктураШапкиДокумента.Контрагент;
					СтрокаДвижения.ВидНачисления = ВидНачисления;
					
					Если Не (СтруктураШапкиДокумента.УчетАгентскогоНДС
						И СтруктураШапкиДокумента.НалоговыйАгентПоОплате) Тогда 
						СтрокаДвижения.СуммаБезНДС	= СтрокаВозврата.СуммаБезНДС;
						СтрокаДвижения.НДС			= СтрокаВозврата.НДС;
					Иначе
						СтрокаДвижения.СуммаБезНДС	= СтрокаВозврата.СуммаБезНДС;
						СтрокаДвижения.НДС			= СтрокаВозврата.НДС;
					КонецЕсли;
					СтрокаДвижения.Событие		= ?(Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат, 
					                                Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС,
													Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
					СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
					// Если возврат отражается как начисления, проводки формируются по таблице начисления
					Если СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
						
						ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
						ПроводкаНДСПоСтроке.НомерСтроки = СтрокаВозврата.НомерСтроки;
						Если Не (СтруктураШапкиДокумента.УчетАгентскогоНДС
							И СтруктураШапкиДокумента.НалоговыйАгентПоОплате) Тогда 
							ПроводкаНДСПоСтроке.НДС 		= СтрокаВозврата.НДС;
							ПроводкаНДСПоСтроке.НДСВал 		= СтрокаВозврата.НДСВал;
						Иначе
							ПроводкаНДСПоСтроке.НДС 		= СтрокаВозврата.НДСНеоплаченнаяЧасть;
							ПроводкаНДСПоСтроке.НДСВал 		= СтрокаВозврата.НДСВалНеоплаченнаяЧасть;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли; 
			ИначеЕсли ?(УказанДокументВозврата, Истина, не СтруктураШапкиДокумента.НДСВключенВСтоимость) Тогда
				// Сторнирование поступления НДС по регистру "НДС предъявленный"
				СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();
			
				СтрокаДвижения.Период 		= СтруктураШапкиДокумента.Дата;
				СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
				СтрокаДвижения.СчетФактура	= ?(УказанДокументВозврата, СтруктураШапкиДокумента.Сделка, СтруктураШапкиДокумента.Ссылка);
				СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
				СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
				СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
				СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
					
				СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаВозврата.СуммаБезНДС;
				СтрокаДвижения.НДС			= (-1)* СтрокаВозврата.НДС;
				СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
				СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
			
			КонецЕсли;
			
		ИначеЕсли СтрокаВозврата.СуммаБезНДСНеоплаченнаяЧасть <> 0 Тогда
			// Сторнирование поступления НДС по регистру "НДС предъявленный" по налоговому агенту на неоплаченную сумму
			СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();
		
			СтрокаДвижения.Период 		= СтруктураШапкиДокумента.Дата;
			СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
			СтрокаДвижения.СчетФактура	= ?(УказанДокументВозврата, СтруктураШапкиДокумента.Сделка, СтруктураШапкиДокумента.Ссылка);
			СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
			СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
			СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
			СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
			СтрокаДвижения.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
				
			СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаВозврата.СуммаБезНДСНеоплаченнаяЧасть;
			СтрокаДвижения.НДС			= (-1)* СтрокаВозврата.НДСНеоплаченнаяЧасть;
			СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
			СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
			
		КонецЕсли;
		
	    Если Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
			Для каждого СтрокаПартииВозврата Из СтрокиПартийВозврата Цикл
				
				Если СтрокаПартииВозврата.ПартияСовпадаетСУказаннымДокументомДляВозврата Тогда
					Если не СтрокаПартииВозврата.Количество = 0 тогда
						// По партиеобразующему движению
						Если СтрокаПартииВозврата.НДСвключенВСтоимость Тогда
							Если Не (СтруктураШапкиДокумента.УчетАгентскогоНДС
									И СтруктураШапкиДокумента.НалоговыйАгентПоОплате) И ОтразитьВКнигеПродаж Тогда
								Если не СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
									//Отмена отражение возврата поставщику в регистре "НДС начисленный"
									//по строке списаной партии
									СтрокаДвижения = ТаблицаДвижений_НДСНачисленный.Добавить();
									СтрокаДвижения.Период 		= СтруктураШапкиДокумента.Дата;
									СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
									СтрокаДвижения.СчетФактура	= ?(УказанДокументВозврата, СтруктураШапкиДокумента.Сделка, СтруктураШапкиДокумента.Ссылка);
									СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
									СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
									СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
									СтрокаДвижения.Покупатель	= СтруктураШапкиДокумента.Контрагент;
									СтрокаДвижения.ВидНачисления = ВидНачисления;
										
									СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаПартииВозврата.СуммаБезНДС;
									СтрокаДвижения.НДС			= (-1)* СтрокаПартииВозврата.НДС;
									СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС;
									СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
								 КонецЕсли;
								
							Иначе
								// Сторно расхода по регистру "НДС предъявленный", произведенного при включении НДС в стоимость
								СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();
								СтрокаДвижения.Период 		= СтруктураШапкиДокумента.Дата;
								СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
								СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
								СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
								СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
								СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
								СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
								Если СтруктураШапкиДокумента.УчетАгентскогоНДС
									И СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
									СтрокаДвижения.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
								КонецЕсли;
								
								СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаПартииВозврата.СуммаБезНДС;
								СтрокаДвижения.НДС			= (-1)* СтрокаПартииВозврата.НДС;
								СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
								СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Расход;
								
								// Сторнирование записи по регистру "НДС включенный в стоимость" записи, введенной ранее
								СтрокаДвижения = ТаблицаДвижений_НДСВключенныйВСтоимость.Добавить();
								СтрокаДвижения.Период 		= СтруктураШапкиДокумента.Дата;
								СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
								СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
								СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
								СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
								СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
								СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
								
								СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаПартииВозврата.СуммаБезНДС;
								СтрокаДвижения.НДС			= (-1)* СтрокаПартииВозврата.НДС;
							КонецЕсли;
							
							// Формирование проводки по НДС не требуется, был включен в стоимость ранее
							ОтработанНДСпоСтроке.НДС = ОтработанНДСпоСтроке.НДС - СтрокаПартииВозврата.НДС;
							ОтработанНДСпоСтроке.СуммаБезНДС = ОтработанНДСпоСтроке.СуммаБезНДС - СтрокаПартииВозврата.СуммаБезНДС;
							
						Иначе
							// Формирование проводки требуется, НДС считаем отработанным
							ОтработанНДСпоСтроке.НДС = ОтработанНДСпоСтроке.НДС - СтрокаПартииВозврата.НДС;
							ОтработанНДСпоСтроке.СуммаБезНДС = ОтработанНДСпоСтроке.СуммаБезНДС - СтрокаПартииВозврата.СуммаБезНДС;
							
							ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
							ЗаполнитьЗначенияСвойств(ПроводкаНДСПоСтроке, СтрокаПартииВозврата);
							ПроводкаНДСПоСтроке.Поставщик 	= СтруктураШапкиДокумента.Контрагент;
							Если СтруктураШапкиДокумента.УчетАгентскогоНДС
								И СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда 
								ПроводкаНДСПоСтроке.НДС 		= СтрокаПартииВозврата.НДСНеоплаченнаяЧасть;
								ПроводкаНДСПоСтроке.НДСВал 		= СтрокаПартииВозврата.НДСВалНеоплаченнаяЧасть;
							КонецЕсли;
							
							Если Не (СтруктураШапкиДокумента.УчетАгентскогоНДС
									И СтруктураШапкиДокумента.НалоговыйАгентПоОплате) 
									И ОтразитьВКнигеПродаж и СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
								//Отражение возврата поставщику в регистре "НДС начисленный"
								//Не отражался ранее так как предполагалось, что НДС включен в стоимость 
								// (не отражен в книге покупок) и не требует отражения в книге продаж
								СтрокаДвижения = ТаблицаДвижений_НДСНачисленный.Добавить();
								СтрокаДвижения.Период 		= СтруктураШапкиДокумента.Дата;
								СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
								СтрокаДвижения.СчетФактура	= ?(УказанДокументВозврата, СтруктураШапкиДокумента.Сделка, СтруктураШапкиДокумента.Ссылка);
								СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
								СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
								СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
								СтрокаДвижения.Покупатель	= СтруктураШапкиДокумента.Контрагент;
								СтрокаДвижения.ВидНачисления = ВидНачисления;
										
								СтрокаДвижения.СуммаБезНДС	= СтрокаПартииВозврата.СуммаБезНДС;
								СтрокаДвижения.НДС			= СтрокаПартииВозврата.НДС;
								СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС;
								СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
							 КонецЕсли;
						КонецЕсли;
					Иначе 
						// По доп. расходам
						Если не СтрокаПартииВозврата.НДСвключенВСтоимость Тогда
							// Если по доп. расходам не производилось включение НДС в стоимость ранее, необходимо сделать это сейчас,
							// так как ценности не используются и не будут использоваться в дальнейшем для деятельности с НДС.
							
	//						Если Не ОтразитьВКнигеПродаж Тогда
								// Расход по регистру "НДС предъявленный" (включение НДС в стоимость)
								СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();
								СтрокаДвижения.Период 		= СтруктураШапкиДокумента.Дата;
								СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
								СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
								СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
								СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
								СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
								СтрокаДвижения.Поставщик	= СтрокаПартииВозврата.Поставщик;
								
								СтрокаДвижения.СуммаБезНДС	= СтрокаПартииВозврата.СуммаБезНДС;
								СтрокаДвижения.НДС			= СтрокаПартииВозврата.НДС;
								СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
								СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Расход;
							
								ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
								ЗаполнитьЗначенияСвойств(ПроводкаНДСПоСтроке, СтрокаПартииВозврата);
								
								// Формирование записи по регистру "НДС включенный в стоимость"
								СтрокаДвижения = ТаблицаДвижений_НДСВключенныйВСтоимость.Добавить();
								СтрокаДвижения.Период 		= СтруктураШапкиДокумента.Дата;
								СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
								СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
								СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
								СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
								СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
								СтрокаДвижения.Поставщик	= СтрокаПартииВозврата.Поставщик;
								
								СтрокаДвижения.СуммаБезНДС	= СтрокаПартииВозврата.СуммаБезНДС;
								СтрокаДвижения.НДС			= СтрокаПартииВозврата.НДС;
							//КонецЕсли;

						КонецЕсли;
					КонецЕсли;
				иначе //не Если СтрокаПартииВозврата.ПартияСовпадаетСУказаннымДокументомДляВозврата
					
					// Спсываем другую партию. Включение в стоимость по флагу документа "НДС включен в стоимость"
					Если не СтрокаПартииВозврата.НДСвключенВСтоимость = СтруктураШапкиДокумента.НДСвключенВСтоимость Тогда
						ЗнакОперации = ?(СтруктураШапкиДокумента.НДСвключенВСтоимость,1,-1);// 1 включение; -1 исключение
						
						// Движение по регистру "НДС предъявленный"
						//Если Не ОтразитьВКнигеПродаж Тогда
							СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();
							СтрокаДвижения.Период 		= СтруктураШапкиДокумента.Дата;
							СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
							СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
							СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
							СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
							СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
							СтрокаДвижения.Поставщик	= СтрокаПартииВозврата.Поставщик;
							
							СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
							
							СтрокаДвижения.СуммаБезНДС	= ЗнакОперации * СтрокаПартииВозврата.СуммаБезНДС;
							СтрокаДвижения.НДС			= ЗнакОперации * СтрокаПартииВозврата.НДС;
							
							СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Расход;
							
							ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
							ЗаполнитьЗначенияСвойств(ПроводкаНДСПоСтроке, СтрокаПартииВозврата);
							ПроводкаНДСПоСтроке.НДС 		= ЗнакОперации * СтрокаПартииВозврата.НДС;
						
							// Формирование записи по регистру "НДС включенный в стоимость"
							СтрокаДвижения = ТаблицаДвижений_НДСВключенныйВСтоимость.Добавить();
							СтрокаДвижения.Период 		= СтруктураШапкиДокумента.Дата;
							СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
							СтрокаДвижения.СчетФактура	= СтрокаПартииВозврата.СчетФактура;
							СтрокаДвижения.ВидЦенности	= СтрокаПартииВозврата.ВидЦенности;
							СтрокаДвижения.СтавкаНДС	= СтрокаПартииВозврата.СтавкаНДС;
							СтрокаДвижения.СчетУчетаНДС	= СтрокаПартииВозврата.СчетУчетаНДС;
							СтрокаДвижения.Поставщик	= СтрокаПартииВозврата.Поставщик;
								
							СтрокаДвижения.СуммаБезНДС	= ЗнакОперации * СтрокаПартииВозврата.СуммаБезНДС;
							СтрокаДвижения.НДС			= ЗнакОперации * СтрокаПартииВозврата.НДС;
						//КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
			
			Если не ОтработанНДСпоСтроке.НДС =0 или не ОтработанНДСпоСтроке.СуммаБезНДС = 0 тогда
				// Не вся сумма НДС по строке отработана
				Если УказанДокументВозврата Тогда
					Если СтруктураШапкиДокумента.НДСвключенВСтоимость Тогда
						// Необходимо отменить включение НДС в стоимость по указанному документу
						// Формирование проводки не требуется
						ЗнакОперации = -1;// 1 включение; -1 исключение
						
						Если Не ОтразитьВКнигеПродаж Тогда
							// Движение по регистру "НДС предъявленный"
							СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();
							СтрокаДвижения.Период 		= СтруктураШапкиДокумента.Дата;
							СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
							СтрокаДвижения.СчетФактура	= СтруктураШапкиДокумента.Сделка;
							СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
							СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
							СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
							СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
							
							СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
							
							СтрокаДвижения.СуммаБезНДС	= ЗнакОперации * ОтработанНДСпоСтроке.СуммаБезНДС;
							СтрокаДвижения.НДС			= ЗнакОперации * ОтработанНДСпоСтроке.НДС;
							
							СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Расход;
							
							// Формирование записи по регистру "НДС включенный в стоимость"
							СтрокаДвижения = ТаблицаДвижений_НДСВключенныйВСтоимость.Добавить();
							СтрокаДвижения.Период 		= СтруктураШапкиДокумента.Дата;
							СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
							СтрокаДвижения.СчетФактура	= СтруктураШапкиДокумента.Сделка;
							СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
							СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
							СтрокаДвижения.СчетУчетаНДС	= СтрокаВозврата.СчетУчетаНДС;
							СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
								
							СтрокаДвижения.СуммаБезНДС	= ЗнакОперации * ОтработанНДСпоСтроке.СуммаБезНДС;
							СтрокаДвижения.НДС			= ЗнакОперации * ОтработанНДСпоСтроке.НДС;
						КонецЕсли;
					Иначе
						Если не ОтработанНДСпоСтроке.НДС = 0 Тогда
							// Требуется проводка по отнесению НДС на счет расчетов по претензиям
							ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
							ПроводкаНДСПоСтроке.НомерСтрокиТаблицыПоПартиям = СтрокаВозврата.НомерСтрокиТаблицыПоПартиям;
							ПроводкаНДСПоСтроке.НомерСтроки = СтрокаВозврата.НомерСтроки;
							ПроводкаНДСПоСтроке.СчетУчетаНДС= СтрокаВозврата.СчетУчетаНДС;
							
							ПроводкаНДСПоСтроке.СчетФактура	= СтруктураШапкиДокумента.Сделка;
							ПроводкаНДСПоСтроке.Поставщик 	= СтруктураШапкиДокумента.Контрагент;
							ПроводкаНДСПоСтроке.НДС 		= ОтработанНДСпоСтроке.НДС;
						КонецЕсли; 
					КонецЕсли; 
				Иначе //не Если УказанДокументВозврата Тогда
					Если СтруктураШапкиДокумента.НДСвключенВСтоимость Тогда
						// НДС был включен в стоимость, но формирование сторнирующих записей по регистрам не требуется,
						// так как не был документ для списания, а по возврату записей в регистре НДС включенный в стоимость нет
						// Формирование проводки не требуется
					Иначе
						Если не ОтработанНДСпоСтроке.НДС = 0 Тогда
							// Требуется проводка по отнесению НДС на счет расчетов по претензиям
							ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();
							ПроводкаНДСПоСтроке.НомерСтрокиТаблицыПоПартиям = СтрокаВозврата.НомерСтрокиТаблицыПоПартиям;
							ПроводкаНДСПоСтроке.НомерСтроки = СтрокаВозврата.НомерСтроки;
							ПроводкаНДСПоСтроке.СчетФактура	= СтруктураШапкиДокумента.Ссылка;
							ПроводкаНДСПоСтроке.Поставщик 	= СтруктураШапкиДокумента.Контрагент;
							ПроводкаНДСПоСтроке.НДС 		= ОтработанНДСпоСтроке.НДС;
							ПроводкаНДСПоСтроке.СчетУчетаНДС= СтрокаВозврата.СчетУчетаНДС;
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			
			// Сторнируем начисление агентского НДС.
			Если СтруктураШапкиДокумента.УчетАгентскогоНДС
				И Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
				 
				СтрокаДвижений_НДСНачисленный = ТаблицаДвижений_НДСНачисленный.Добавить();
				
				СтрокаДвижений_НДСНачисленный.Период 		= СтруктураШапкиДокумента.Дата;
				СтрокаДвижений_НДСНачисленный.Организация	= СтруктураШапкиДокумента.Организация;
				СтрокаДвижений_НДСНачисленный.Покупатель	= СтруктураШапкиДокумента.Контрагент;
				СтрокаДвижений_НДСНачисленный.СчетФактура	= ?(УказанДокументВозврата, СтруктураШапкиДокумента.Сделка, СтруктураШапкиДокумента.Ссылка);
				СтрокаДвижений_НДСНачисленный.ВидЦенности	= СтрокаВозврата.ВидЦенности;
				СтрокаДвижений_НДСНачисленный.СтавкаНДС		= СтрокаВозврата.СтавкаНДС;
				СтрокаДвижений_НДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.НДСНачисленКУплате;
				
				СтрокаДвижений_НДСНачисленный.СуммаБезНДС	= (-1)* СтрокаВозврата.СуммаБезНДС;
				СтрокаДвижений_НДСНачисленный.НДС			= (-1)* СтрокаВозврата.НДС;
				
				СтрокаДвижений_НДСНачисленный.Событие 		= Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
				СтрокаДвижений_НДСНачисленный.ДатаСобытия 	= СтруктураШапкиДокумента.Дата;
				
				СтрокаДвижений_НДСНачисленный.ВидДвижения	= ВидДвиженияНакопления.Приход;
				
				СтрокаДвижений_НДСНачисленный.СчетУчетаНДС	= СчетНДС;
				
				// Формирование проводки по сторнированию начисления НДС при исп. обязанностей налогового агента
				Проводка = Движения.Хозрасчетный.Добавить();

				Проводка.Период      			= СтруктураШапкиДокумента.Дата;
				Проводка.Организация 			= СтруктураШапкиДокумента.Организация;
				Проводка.Сумма                  = СтрокаВозврата.НДС;
				Проводка.Содержание             = "Сторнирован НДС, начисленный в качестве налогового агента";
				
				Проводка.СчетДт                 = СчетНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

				Проводка.СчетКт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовПоПретензиям;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", ?(УказанДокументВозврата, СтруктураШапкиДокумента.Сделка, СтруктураШапкиДокумента.Ссылка));
					
				Если Проводка.СчетКт.Валютный Тогда
					Если не СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
						СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов",СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов);
					КонецЕсли; 
					
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаВозврата.НДСВал;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	
	Если ОтразитьВКнигеПродаж тогда
		Если ТаблицаДвижений_НДСНачисленный.Количество()>1 Тогда
			// Сворачивание записей регистра "НДС Начисленный"
			СуммовыеКолонки = "СуммаБезНДС, НДС";
			ГруппировочныеКолонки = "";
			Для каждого Колонка Из ТаблицаДвижений_НДСНачисленный.Колонки Цикл
				Если Колонка.Имя = "СуммаБезНДС" или Колонка.Имя = "НДС" Тогда
					Продолжить;
				Иначе
					ГруппировочныеКолонки = ГруппировочныеКолонки + Колонка.Имя+ ",";
				КонецЕсли; 
			КонецЦикла;
			ГруппировочныеКолонки = Лев(ГруппировочныеКолонки, СтрДлина(ГруппировочныеКолонки)-1);
			
			ТаблицаДвижений_НДСНачисленный.Свернуть(ГруппировочныеКолонки,СуммовыеКолонки); 
		КонецЕсли;
		
		// Удаление записей с пустыми суммами
		ТаблицаДвижений_НДСНачисленный.Индексы.Добавить("СуммаБезНДС, НДС");
		СтрокиКУдалению =  ТаблицаДвижений_НДСНачисленный.НайтиСтроки(Новый Структура("СуммаБезНДС, НДС",0,0));
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений_НДСНачисленный.Удалить(СтрокаКУдалению);
		КонецЦикла; 
	КонецЕсли; 
	
	//Формирование проводок по отнесению НДС на счет расчетов по претензиям
	НомерСтрокиТаблицыПоПартиям = 0;
	Коэффициент = 0;
	Если Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
		ТаблицаПроводокПоНДС.Свернуть("НомерСтроки, НомерСтрокиТаблицыПоПартиям, Поставщик, СчетФактура, СчетУчетаНДС","НДС, НДСВал");
	Иначе
		ТаблицаПроводокПоНДС.Свернуть("НомерСтроки","НДС, НДСВал");
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ТаблицаПроводокПоНДС Цикл
		Если СтрокаТЧ.НДС = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Возврат поставщику";
		Проводка.Сумма       = СтрокаТЧ.НДС;

		Если Не (СтруктураШапкиДокумента.УчетАгентскогоНДС И СтруктураШапкиДокумента.НалоговыйАгентПоОплате) Тогда
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовПоПретензиям;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
				
			Если Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
				Если Проводка.СчетДт.Валютный Тогда
					Если не СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
						СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов",СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов);
					КонецЕсли;
					
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
						Проводка.ВалютнаяСуммаДт = Проводка.Сумма;
					Иначе
						Если не НомерСтрокиТаблицыПоПартиям = СтрокаТЧ.НомерСтрокиТаблицыПоПартиям Тогда
							НомерСтрокиТаблицыПоПартиям = СтрокаТЧ.НомерСтрокиТаблицыПоПартиям;
							СтрокаТаблицыПоПартиям = ТаблицаПоПартиям.Найти(НомерСтрокиТаблицыПоПартиям,"НомерСтрокиТаблицыПоПартиям");
							Если не СтрокаТаблицыПоПартиям.НДС = 0 Тогда
								Коэффициент = ?(СтрокаТаблицыПоПартиям.НДСВал =0,1,СтрокаТаблицыПоПартиям.НДСВал/СтрокаТаблицыПоПартиям.НДС);
							Иначе
								Коэффициент = ?(СтрокаТаблицыПоПартиям.СуммаБезНДСВал =0 или СтрокаТаблицыПоПартиям.СуммаБезНДС = 0,1,СтрокаТаблицыПоПартиям.СуммаБезНДСВал/СтрокаТаблицыПоПартиям.СуммаБезНДС);
							КонецЕсли; 
						КонецЕсли; 
						Проводка.ВалютнаяСуммаДт = Окр(Проводка.Сумма*Коэффициент,2);
					КонецЕсли; 
					
					СтрокаТЧ.НДСВал = Проводка.ВалютнаяСуммаДт;
				КонецЕсли;
					
				Проводка.СчетКт      = СтрокаТЧ.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",     СтрокаТЧ.Поставщик);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФПолученные",    СтрокаТЧ.СчетФактура);
			Иначе
				Если Проводка.СчетДт.Валютный Тогда
					Если не СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
						СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов",СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов);
					КонецЕсли;
					
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
						Проводка.ВалютнаяСуммаДт = Проводка.Сумма;
					Иначе
						Проводка.ВалютнаяСуммаДт = СтрокаТЧ.НДСВал;
					КонецЕсли; 
				КонецЕсли;
				
				Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			КонецЕсли;
		Иначе
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			Проводка.СчетКт      = СтрокаТЧ.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",     СтрокаТЧ.Поставщик);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФПолученные",    СтрокаТЧ.СчетФактура);
			
		КонецЕсли;
			
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаТЧ.НДС, СтрокаТЧ.НДС, 0, 0, 0, 0, Проводка);
		КонецЕсли;
	
	КонецЦикла;
	
	Если ТаблицаПроводокПоНДС.Количество()>0 тогда 
		//Корректировка разницы в стоимости товаров на проводки по НДС
		ТаблицаПроводокПоНДС.Свернуть("НомерСтроки","НДС, НДСВал");
	КонецЕсли;

	Если ТаблицаДвижений_НДСПредъявленный.Количество()>0 Тогда
		Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ДобавитьДвижение();
	КонецЕсли; 
	
	Если ТаблицаДвижений_НДСВключенныйВСтоимость.Количество()>0 Тогда
	
		Движения.НДСВключенныйВСтоимость.мПериод			= СтруктураШапкиДокумента.Дата;
		Движения.НДСВключенныйВСтоимость.мТаблицаДвижений	= ТаблицаДвижений_НДСВключенныйВСтоимость;
		Движения.НДСВключенныйВСтоимость.ДобавитьДвижение();
		
	КонецЕсли; 
	
	Если не ТаблицаДвижений_НДСНачисленный = неопределено и ТаблицаДвижений_НДСНачисленный.Количество()>0 Тогда
	    		
		Движения.НДСНачисленный.мПериод			= СтруктураШапкиДокумента.Дата;
		Движения.НДСНачисленный.мТаблицаДвижений	= ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ДобавитьДвижение();
		
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()

// Вызывается из тела процедуры "ДвиженияПоРегистрам".
// На основе анализа данных табличной части, операция возврата товаров отражается в регистрах подсистемы
// учета НДС.
// 
Процедура ДвиженияПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВозвратов, ТаблицаВзаиморасчетов, Отказ, Заголовок)

	ТаблицаВозвратов.Колонки.Добавить("СуммаБезНДСНеоплаченнаяЧасть", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаВозвратов.Колонки.Добавить("НДСНеоплаченнаяЧасть", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаВозвратов.Колонки.Добавить("НДСВалНеоплаченнаяЧасть", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Если СтруктураШапкиДокумента.УчетАгентскогоНДС И
		СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
		
		СтрокаНеоплаченнаяЧасть = ТаблицаВзаиморасчетов.Найти(СтруктураШапкиДокумента.Сделка, "ДокументРасчетов");
		Если СтрокаНеоплаченнаяЧасть <> Неопределено 
			И СтрокаНеоплаченнаяЧасть.СуммаВзаиморасчетов <> 0 Тогда
			
			РаспределеннаяСумма = ОбщегоНазначения.РаспределитьПропорционально(СтрокаНеоплаченнаяЧасть.СуммаБУ, ТаблицаВозвратов.ВыгрузитьКолонку("СуммаБезНДС"));
			ТаблицаВозвратов.ЗагрузитьКолонку(РаспределеннаяСумма, "СуммаБезНДСНеоплаченнаяЧасть");
			
			Для Каждого СтрокаТаблицы Из ТаблицаВозвратов Цикл
				СтрокаТаблицы.НДСНеоплаченнаяЧасть = СтрокаТаблицы.НДС * Окр(СтрокаТаблицы.СуммаБезНДСНеоплаченнаяЧасть/СтрокаТаблицы.СуммаБезНДС, 2);
				СтрокаТаблицы.НДСВалНеоплаченнаяЧасть = СтрокаТаблицы.НДСВал * Окр(СтрокаТаблицы.СуммаБезНДСНеоплаченнаяЧасть/СтрокаТаблицы.СуммаБезНДС, 2);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДвиженияВозвратаТоваровПоставщикуПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВозвратов, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()

// Вызывается из тела процедуры "ДвиженияПоРегистрам" для отражения движений в подсистеме УСН.
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		Возврат;		
	КонецЕсли;
	
	СтруктураДопПараметров = Новый Структура("ТаблицаТМЦ, ТаблицаРасчетов", ТаблицаПоТоварам, ТаблицаВзаиморасчетов);
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, СтруктураДопПараметров);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если НЕ (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) Тогда
		Возврат;
	КонецЕсли;

	// Заполним реквизиты из стандартного набора.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	Склад = Основание.Склад;

	// Заполним вид операции.
	ВидыОперацийПоступлениеТоваров       = Перечисления.ВидыОперацийПоступлениеТоваровУслуг;
	ВидыОперацийВозвратТоваровПоставщику = Перечисления.ВидыОперацийВозвратТоваровПоставщику;
	Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ВидОперации          = ВидыОперацийВозвратТоваровПоставщику.ИзПереработки;
		УчитыватьНДС         = Ложь;
		НДСВключенВСтоимость = Ложь;
		СуммаВключаетНДС     = Ложь;
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		ВидОперации = ВидыОперацийВозвратТоваровПоставщику.Оборудование;
	Иначе
		ВидОперации = ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
	КонецЕсли;
	
	Сделка = Основание;

	Если Основание.Проведен Тогда

		// Заполним табличные части по поступлению Товаров.
		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда
			ЗаполнитьОборудованиеПоОснованию(Основание);
		Иначе
			ЗаполнитьТоварыПоОснованию(Основание);
		КонецЕсли;

		ЗаполнитьВозвратнуюТаруПоОснованию(Основание);

	КонецЕсли;

	Если Основание.ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		СчетУчетаРасчетовСКонтрагентом = Основание.СчетУчетаРасчетовСКонтрагентом;
		СчетУчетаРасчетовПоАвансам     = Основание.СчетУчетаРасчетовПоАвансам;
		СчетУчетаРасчетовПоТаре        = Основание.СчетУчетаРасчетовПоТаре;
		
	КонецЕсли;


КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
	мРазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитикаБУ.Количество() > 0 Тогда	
		Если (мУчетнаяПолитикаБУ.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;

	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");

	// В этом случае почистим в табличных частях поля ЗаказПокупателя, НомерГТД и СтранаПроисхождения.
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
	 Или ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда

		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл

			Если ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД)Тогда
				СтрокаТаблицы.НомерГТД = Неопределено;
			КонецЕсли;

			Если ЗначениеЗаполнено(СтрокаТаблицы.СтранаПроисхождения)Тогда
				СтрокаТаблицы.СтранаПроисхождения = Неопределено;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
	РозницаВПродажныхЦенах = ((НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) 
								И мУчетВПродажныхЦенах 
								И (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия)
								И (НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));
								
	Если РозницаВПродажныхЦенах Тогда
		Для Каждого Строка Из Товары Цикл
			Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
				Строка.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
				Строка.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
			Иначе
				Строка.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
				Строка.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если (Дата < '20060101' ИЛИ ДоговорКонтрагента.УчетАгентскогоНДС) И ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
		ПоставщикуВыставляетсяСчетФактураНаВозврат = Ложь;
	КонецЕсли;
	
	Если ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
		УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный", ПометкаУдаления);
		УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", Истина);
	Иначе
		УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный", Истина);
		Если Не ЗначениеЗаполнено(Сделка) Тогда
			УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", ПометкаУдаления);
		Иначе
			УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", Истина);
		КонецЕсли;
	КонецЕсли;
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, ?(Не ПоставщикуВыставляетсяСчетФактураНаВозврат, "СчетФактураПолученный", "СчетФактураВыданный"));
	
КонецПроцедуры // ПередЗаписью

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();

	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"  , "ВидСклада");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС"    , "УчетАгентскогоНДС");
 	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидАгентскогоДоговора"       , "ВидАгентскогоДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "НалоговыйАгентПоОплате", "НалоговыйАгентПоОплате");
 	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах"    , "РасчетыВУсловныхЕдиницах");
	
 	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка", "КурсВзаиморасчетов"     , "КурсВзаиморасчетовСделки");
 	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка", "КратностьВзаиморасчетов", "КратностьВзаиморасчетовСделки");
	
	Если мУчетнаяПолитикаНУ = Неопределено Тогда
		СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС, УпрощенныйУчетНДС");
		ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	Иначе
		Если мУчетнаяПолитикаНУ.Свойство("СложныйУчетНДС") Тогда
			СтруктураШапкиДокумента.Вставить("СложныйУчетНДС", мУчетнаяПолитикаНУ.СложныйУчетНДС);
		Иначе
			СтруктураШапкиДокумента.Вставить("СложныйУчетНДС", Ложь);
		КонецЕсли;
		Если мУчетнаяПолитикаНУ.Свойство("УпрощенныйУчетНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС", мУчетнаяПолитикаНУ.УпрощенныйУчетНДС);
		Иначе
			СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС", Ложь);
		КонецЕсли;
	КонецЕсли; 

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры

// Процедура подготавливает данные из таблиц документа для проведения.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре) Экспорт
	
	СтруктураПолей = Новый Структура();
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей.Вставить("Номенклатура"       , "Номенклатура");
	СтруктураПолей.Вставить("Сумма"              , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"          , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                , "СуммаНДС");
	СтруктураПолей.Вставить("Количество"         , "Количество");
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("НомерГТД"           , "НомерГТД");
	СтруктураПолей.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	СтруктураПолей.Вставить("СчетУчета"        , "СчетУчета");
	СтруктураПолей.Вставить("СчетУчетаНДС"       , "СчетУчетаНДС");
	СтруктураПолей.Вставить("СуммаВРознице"      , "СуммаВРознице");
	СтруктураПолей.Вставить("СтавкаНДСВРознице"  , "СтавкаНДСВРознице");
	СтруктураПолей.Вставить("ДокументОприходования", "ДокументОприходования");
	СтруктураПолей.Вставить("Себестоимость"		   , "Себестоимость");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("СчетУчета" , "СчетУчета");

	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу товаров и тары для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоТаре    = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, ?(СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, Истина, СтруктураШапкиДокумента.НДСВключенВСтоимость));
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТаре   , СтруктураШапкиДокумента, ?(СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, Истина, СтруктураШапкиДокумента.НДСВключенВСтоимость));

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

    Перем Заголовок, СтруктураШапкиДокумента;
    Перем ТаблицаПоТоварам, ТаблицаПоТаре;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре);
	
	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента,Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураВыданный", Ложь);
	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураПолученный", Ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();


