////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики налоговому учету
Перем мМассивЭУЕНВД;
Перем мМассивЭУЕНВД2011;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

Перем мСписокВидовДляОсновныхНачислений;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ИсчисленныйЕСН,ЭлементыФормы.КоманднаяПанель1);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеНачисления,ЭлементыФормы.КоманднаяПанель2);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры


// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	//Проверка источника кадровой информации
	ПроцедурыУправленияПерсоналом.УчетЗарплатыИКадровВоВнешнейПрограмме(Отказ, Ссылка, ЭтаФорма, ЭтоНовый());
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		Дата = КонецМесяца(Дата);
		ДокументОбъект.ПериодРегистрации = НачалоМесяца(Дата);

	КонецЕсли;
	
	ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(Дата);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("ФизЛицо");
 	СтруктураКолонок.Вставить("Приказ");
	СтруктураКолонок.Вставить("КодДоходаЕСН");
	СтруктураКолонок.Вставить("ВидДохода");
	СтруктураКолонок.Вставить("ОблагаетсяПоДополнительномуТарифу");
	
	// Установить ограничение - изменять видимость колонок для табличной части ИсчисленныйЕСН	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ИсчисленныйЕСН.Колонки, СтруктураКолонок);
	
	// Установить ограничение - изменять видимость колонок для табличной части ИсчисленныйЕСН	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки, СтруктураКолонок);
	
	// Установить ограничение - изменять видимость колонок для табличной части ОсновныеНачисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ОсновныеНачисления.Колонки, СтруктураКолонок);
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

 	СписокДоступныхКодовЕСН = Новый СписокЗначений;
 	СписокДоступныхКодовЕСН.Добавить(Справочники.ДоходыЕСН.ВыплатыЗаСчетПрибыли);
 	СписокДоступныхКодовЕСН.Добавить(Справочники.ДоходыЕСН.ДоговораАвторские);
 	СписокДоступныхКодовЕСН.Добавить(Справочники.ДоходыЕСН.ДоговораГПХ);
 	СписокДоступныхКодовЕСН.Добавить(Справочники.ДоходыЕСН.ПособияЗаСчетФСС);
 	СписокДоступныхКодовЕСН.Добавить(Справочники.ДоходыЕСН.НеОблагаетсяЦеликом);
 	СписокДоступныхКодовЕСН.Добавить(Справочники.ДоходыЕСН.НеЯвляетсяОбъектом);
 	СписокДоступныхКодовЕСН.Добавить(Справочники.ДоходыЕСН.ОблагаетсяЦеликом);

 	ЭлементыФормы.ОсновныеНачисления.Колонки.КодДоходаЕСН.ЭлементУправления.СписокВыбора = СписокДоступныхКодовЕСН; 
	
	мСписокВидовДляОсновныхНачислений = Новый СписокЗначений;
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.НеОблагаетсяЦеликом);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.НеЯвляетсяОбъектом);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.ОблагаетсяЦеликом);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.ПособияЗаСчетФСС);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.Матпомощь);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.МатпомощьПриРожденииРебенка);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.ДоговорыГПХ);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеАудиовизуальныеПроизведения);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеГрафическиеПроизведения);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеДругиеМузыкальныеПроизведения);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеИсполнениеПроизведений);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеЛитературныеПроизведения);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеМузыкальноСценическиеПроизведение);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеНаучныеТруды);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеОткрытия);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеСкульптуры);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоГражданскоПравовомуДоговору);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоТрудовомуДоговору);

	
	мМассивЭУЕНВД = Новый Массив();
	мМассивЭУЕНВД.Добавить(ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ПФРНакопительнаяЕНВД);
	мМассивЭУЕНВД.Добавить(ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ПФРСтраховаяЕНВД);
	мМассивЭУЕНВД.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.ОблагаетсяЕНВД);

	мМассивЭУЕНВД2011 = Новый Массив();
	мМассивЭУЕНВД2011.Добавить(ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ТФОМСЕНВД);
	мМассивЭУЕНВД2011.Добавить(ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ФФОМСЕНВД);
	мМассивЭУЕНВД2011.Добавить(ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ФССЕНВД);
	
	УстановитьВидимостьРеквизитовЕНВД();	
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента= Дата;
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установка текущей страницы
	Если НЕ КорректировкаРасчета Тогда
		Страницы = Новый СписокЗначений;
		Страницы.Добавить("Страница1",	"ИсчисленныйЕСН");
		Страницы.Добавить("Страница2",	"ОсновныеНачисления");
		РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.Панель1, Страницы,);
	Иначе
		Страницы = Неопределено;
	КонецЕсли;
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,ПериодРегистрации, Организация");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.Панель1.ТекущаяСтраница,Страницы);
	
	УстановитьВидимость();
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	Оповестить("РегОперация", ?(Проведен, Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено, Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено), "РасчетЕСН");
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события нажатия кнопки "Заполнить и рассчитать"
Процедура ДействияФормыЗаполнитьИРассчитать(Кнопка)
	
	Если Проведен Тогда
		Если Вопрос("Автоматически заполнить документ можно только после отмены его проведения. Выполнить отмену проведения документа?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Проведен = Ложь;
			ЗаписатьВФорме();
		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли Модифицированность() Тогда
		Ответ = Вопрос("Перед автозаполнением документ необходимо записать. Записать?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		ЗаписатьВФорме();
	КонецЕсли;
	
	Если ИсчисленныйЕСН.Количество() > 0 Тогда
	
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	мСообщать = Истина;
	ЗаполнитьИРассчитать(Ложь);
	мСообщать = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события нажатия кнопки "Рассчитать ЕСН"
Процедура ДействияФормыРассчитатьЕСН(Кнопка)
	
	Если Проведен Тогда
		Если Вопрос("Автоматически рассчитать документ можно только после отмены его проведения. Выполнить отмену проведения документа?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Проведен = Ложь;
			ЗаписатьВФорме();
		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли Модифицированность() Тогда
		Ответ = Вопрос("Для авторасчета документ необходимо записать. Записать?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		ЗаписатьВФорме();
	КонецЕсли;

	РассчитатьЕСН();
	
КонецПроцедуры


// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);
	
КонецПроцедуры


// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанель3Подбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ИсчисленныйЕСН, Ссылка, Ложь, Дата, мГоловнаяОрганизация);
	
КонецПроцедуры // КоманднаяПанель3Подбор()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанель1Подбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ОсновныеНачисления, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 1);
	
КонецПроцедуры // КоманднаяПанель1Подбор()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;
	
	ДокументОбъект.ПериодРегистрации = НачалоМесяца(Дата);
	
	ИсчисленныеСтраховыеВзносы.Очистить();
	УстановитьВидимостьРеквизитовЕНВД();

	УстановитьВидимость();

	


КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении реквизита Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));

	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	ИсчисленныеСтраховыеВзносы.Очистить();
	УстановитьВидимостьРеквизитовЕНВД();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Направление = 1 Тогда // увеличиваем значение
		ПериодРегистрации = КонецМесяца(ПериодРегистрации) + 1
	Иначе // = -1 - уменьшаем значение
		ПериодРегистрации = НачалоМесяца(ПериодРегистрации - 1)
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
    ПериодРегистрации = НачалоМесяца(ПериодРегистрации);
	
	ИсчисленныеСтраховыеВзносы.Очистить();
	УстановитьВидимостьРеквизитовЕНВД();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ
 
// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура ИсчисленныйЕСНОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Физлицо = ВыбранноеЗначение.Физлицо;
	
	Если ИсчисленныйЕСН.НайтиСтроки(Новый Структура("Физлицо", Физлицо)).Количество() = 0 Тогда
		ИсчисленныйЕСН.Добавить().Физлицо = Физлицо;
	КонецЕсли;
	
КонецПроцедуры // ИсчисленныйЕСНОбработкаВыбора()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ИсчисленныйЕСН

// Процедура - обработчик события "ПриИзменении" поля ввода физлица
//
Процедура ИсчисленныйЕСНФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 0, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ИсчисленныйЕСНФизЛицоНачалоВыбора()

Процедура ИсчисленныйЕСНФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсчисленныйЕСНФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Организация);
	
КонецПроцедуры // ИсчисленныйЕСНФизЛицоАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсчисленныйЕСНФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Элемент.Значение, Организация, Истина);
	
КонецПроцедуры // ИсчисленныйЕСНФизЛицоОкончаниеВводаТекста()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ИсчисленныеСтраховыеВзносы

Процедура ИсчисленныеСтраховыеВзносыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Физлицо = ВыбранноеЗначение.Физлицо;
	
	ТабличнаяЧасть = Элемент.Значение;
	Если ТабличнаяЧасть.НайтиСтроки(Новый Структура("Физлицо", Физлицо)).Количество() = 0 Тогда
		ТабличнаяЧасть.Добавить().Физлицо = Физлицо;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события нажатия кнопки "Рассчитать ЕСН"
//
Процедура КоманднаяПанельИсчисленныеСтраховыеВзносыРассчитатьВзносы(Кнопка)
		
	Если Проведен Тогда
		Если Вопрос("Автоматически рассчитать документ можно только после отмены его проведения. Выполнить отмену проведения документа?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Проведен = Ложь;
			ЗаписатьВФорме();
		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли Модифицированность() Тогда
		Ответ = Вопрос("Для авторасчета документ необходимо записать. Записать?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		ЗаписатьВФорме();
	КонецЕсли;

	РассчитатьСтраховыеВзносы();	
	
КонецПроцедуры // КоманднаяПанельИсчисленныеСтраховыеВзносыРассчитатьВзносы()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельИсчисленныеСтраховыеВзносыПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ИсчисленныеСтраховыеВзносы, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 1);
	
КонецПроцедуры // КоманднаяПанельИсчисленныеСтраховыеВзносыПодбор()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ОсновныеНачисления

Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Физлицо = Элемент.Значение.ФизЛицо;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Организация);
	
КонецПроцедуры // СотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // СотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода вида начисления
Процедура ОсновныеНачисленияВидРасчетаПриИзменении(Элемент)
	
	//ЕСН
	КодЕСН = Элемент.Значение.КодДоходаЕСН;
	Если ЭлементыФормы.ОсновныеНачисления.Колонки.КодДоходаЕСН.ЭлементУправления.СписокВыбора.НайтиПоЗначению(КодЕСН) <> Неопределено  Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.КодДоходаЕСН = КодЕСН
	КонецЕсли;
	//Страховые взносы
	Код = Элемент.Значение.КодДоходаСтраховыеВзносы;
	Если мСписокВидовДляОсновныхНачислений.НайтиПоЗначению(Код) <> Неопределено  Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.ВидДохода = Код;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура ОсновныеНачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ОсновныеНачисления.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		НоваяСтрока = ОсновныеНачисления.Добавить();
		НоваяСтрока.Сотрудник		= ВыбранноеЗначение;
		НоваяСтрока.Физлицо	= ВыбранноеЗначение.ФизЛицо;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияОбработкаВыбора()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

////////////////////////////////////////////////////////
// {Процедуры помощника

Процедура УстановитьВидимость()
	
	Если НЕ КорректировкаРасчета Тогда
		
		ЭлементыФормы.Панель1.Свертка = РежимСверткиЭлементаУправления.Верх;				
		Если Этаформа.СпособОтображенияОкна = ВариантСпособаОтображенияОкна.Нормальное Тогда
			ЭтаФорма.Высота = 162;		
		КонецЕсли;
		
	Иначе
		
		ЭлементыФормы.Панель1.Свертка = РежимСверткиЭлементаУправления.Нет;		
		Если Этаформа.СпособОтображенияОкна = ВариантСпособаОтображенияОкна.Нормальное Тогда
			ЭтаФорма.Высота = 438;		
		КонецЕсли;
		
	КонецЕсли;
			
	ЭлементыФормы.НадписьМесяц.Видимость = (КорректировкаРасчета) И (ДокументОбъект.ПериодРегистрации <> НачалоМесяца(Дата));
	ЭлементыФормы.ПериодРегистрации.Видимость = (КорректировкаРасчета) И (ДокументОбъект.ПериодРегистрации <> НачалоМесяца(Дата));
	ЭлементыФормы.Дата.Видимость = (КорректировкаРасчета) И (ДокументОбъект.ПериодРегистрации <> НачалоМесяца(Дата));
		
	Если ЭлементыФормы.НадписьМесяц.Видимость Тогда
		ЭлементыФормы.НадписьОт.Заголовок = "от:";
	Иначе
		ЭлементыФормы.НадписьОт.Заголовок = "за:";
	КонецЕсли;
	
	ПереключитьСтраницы = (ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница1) ИЛИ (ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница3);
	ПериодГод2010 = Год(ПериодРегистрации) >= 2010;
	ЭлементыФормы.Панель1.Страницы.Страница1.Видимость = НЕ ПериодГод2010;
	ЭлементыФормы.ОсновныеНачисления.Колонки.КодДоходаЕСН.Видимость = НЕ ПериодГод2010;
	ЭлементыФормы.Панель1.Страницы.Страница3.Видимость = ПериодГод2010;
	ЭлементыФормы.ОсновныеНачисления.Колонки.ВидДохода.Видимость = ПериодГод2010;
	ЭлементыФормы.ОсновныеНачисления.Колонки.ОблагаетсяПоДополнительномуТарифу.Видимость = ПериодГод2010;
	Если ПереключитьСтраницы Тогда
		Если ПериодГод2010 Тогда
			ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница3;
		Иначе
			ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КорректировкаРасчета(Кнопка)
	
	УстановитьВидимость();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПРЕДСТАВЛЕНИЯ ПЕРИОДА
//

// Процедура - обработчик события "Регулирование" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РаботаСДиалогами.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации);
	Дата = КонецМесяца(ПериодРегистрации);
	ПредставлениеПериодаРегистрацииПриИзменении(Элемент);
		
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Проверка на последний рабочий день месяца.
	ПоследнийРабочийДеньМесяца = ПолучитьРабочийДеньМесяца(Дата);
	
	ПериодРегистрации = НачалоМесяца(Дата);
	мТекущаяДатаДокумента = Дата;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, Дата, ЭтаФорма);
	ПредставлениеПериодаРегистрацииПриИзменении(Элемент);
	Дата = КонецМесяца(Дата);
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Проверка на последний рабочий день месяца.
	ПоследнийРабочийДеньМесяца = ПолучитьРабочийДеньМесяца(Дата);
	
	ПериодРегистрации = НачалоМесяца(Дата);
	мТекущаяДатаДокумента = Дата;
	
КонецПроцедуры

Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ПериодРегистрации (Дата)
// Обновляется список операции, согласно учетной политике установленной на указанную дату
//
Процедура ПредставлениеПериодаРегистрацииПриИзменении(Элемент)
	
	ДатаПриИзменении(Элемент);
	

КонецПроцедуры

Функция ПолучитьРабочийДеньМесяца(ДатаДокумента)

	ПоследнийДеньМесяца = КонецМесяца(ДатаДокумента);
	Если ДеньНедели(КонецМесяца(ДатаДокумента)) = 6 Тогда
		ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца - 86400
	ИначеЕсли ДеньНедели(КонецМесяца(ДатаДокумента)) = 7 Тогда	
		ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца - 2 * 86400
	Иначе	
	    ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца
	КонецЕсли;
	
	Возврат ПоследнийРабочийДеньМесяца
	
КонецФункции // ПолучитьРабочийДеньМесяца()

// Процедуры помощника}
////////////////////////////////////////////////////////

//Страховые взносы

Процедура ОсновныеНачисленияВидДоходаНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.ДоходыПоСтраховымВзносам.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаРасчетСтраховыхВзносов");
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбора.Отбор.Ссылка.Значение = мСписокВидовДляОсновныхНачислений;
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.Открыть();

КонецПроцедуры

Процедура ИсчисленныеСтраховыеВзносыФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 0, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ИсчисленныеСтраховыеВзносыФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	Иначе
		Элемент.Значение = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсчисленныеСтраховыеВзносыФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Организация);
	
КонецПроцедуры

Процедура ИсчисленныеСтраховыеВзносыФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Элемент.Значение, Организация, Истина);
	
КонецПроцедуры

Процедура ОсновныеНачисленияВидДоходаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ЗначениеНайдено = Ложь;
	СтандартнаяОбработка = Ложь;
	ДлинаТекста = СтрДлина(Текст);
	Для Каждого ВидДохода Из мСписокВидовДляОсновныхНачислений Цикл
		Если Лев(НРег(ВидДохода.Значение), ДлинаТекста) = НРег(Текст) Тогда
			Если ЗначениеНайдено Тогда 
				ТекстАвтоПодбора = "";
				Возврат;
			КонецЕсли;
			ЗначениеНайдено = Истина;
			ТекстАвтоПодбора = ВидДохода;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОсновныеНачисленияВидДоходаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДлинаТекста = СтрДлина(Текст);
	ЗначениеПроинициализировано = Ложь;
	Для Каждого ВидДохода Из мСписокВидовДляОсновныхНачислений Цикл
		Если Лев(НРег(ВидДохода), ДлинаТекста) = НРег(Текст) Тогда
			Если НЕ ЗначениеПроинициализировано Тогда 
				Значение = Новый СписокЗначений;
			КонецЕсли;
			ЗначениеПроинициализировано = Истина;
			Значение.Добавить(ВидДохода.Значение, ВидДохода.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Устанавливает видимость реквизитов формы относящихся к ЕНВД
Процедура УстановитьВидимостьРеквизитовЕНВД()
	
	ВидимостьЕНВД = НалоговыйУчет.ПрименениеЕНВД(Организация, Дата);
	
	Для Каждого Элемент Из мМассивЭУЕНВД Цикл 
		Элемент.Видимость = ВидимостьЕНВД;
	КонецЦикла;
	
	ВидимостьЕНВД2011 = ВидимостьЕНВД И Год(ПериодРегистрации) >= Год(ПроведениеРасчетов.ДатаРасширенияПеречняЛьготныхТарифовСтраховыхВзносов());
	Для Каждого Элемент Из мМассивЭУЕНВД2011 Цикл 
		Элемент.Видимость = ВидимостьЕНВД2011;
	КонецЦикла;	
	
КонецПроцедуры // УстановитьВидимостьРеквизитовЕНВД()
