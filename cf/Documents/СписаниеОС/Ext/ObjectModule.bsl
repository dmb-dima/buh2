////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция возвращает параметры ОС
	//
	Функция ПолучитьПробегАвто(ОбъектОС, НачДата, КонДата)
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВыработкаОС.ОсновноеСредство КАК ОбъектОС,
		|	ВыработкаОС.ПараметрВыработки,
		|	ВыработкаОС.КоличествоОборот КАК Пробег
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&КонДата, ОсновноеСредство = &ОС и Организация = &Организация) КАК РегСведенияОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(&НачГраница, &КонГраница, , ОсновноеСредство = &ОС) КАК ВыработкаОС
		|		ПО РегСведенияОС.ОсновноеСредство = ВыработкаОС.ОсновноеСредство И РегСведенияОС.ПараметрВыработки = ВыработкаОС.ПараметрВыработки";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("КонДата", КонДата);
		Запрос.УстановитьПараметр("НачГраница", Новый Граница(НачДата, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонГраница", Новый Граница(КонДата, ВидГраницы.Включая));
		
		Запрос.УстановитьПараметр("ОС", ОбъектОС);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		РезультатЗапроса.Следующий();
		
		Возврат РезультатЗапроса.Пробег;
		
	КонецФункции // ПолучитьПробегАвто()
	
	// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьСписаниеОС()
		Перем ПодразделениеОтветственныхЛиц;
		
		ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеОС_ОС4";
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеОС.Номер КАК НомерДок,
		|	СписаниеОС.Дата КАК ДатаДок,
		|	СписаниеОС.СобытиеОС КАК Состояние,
		|	СписаниеОС.ПричинаСписания КАК ПричинаСписания,
		|	СписаниеОС.Организация КАК Организация,
		|	СписаниеОС.Организация.КодПоОКПО КАК КодОКПО,
		|	СписаниеОС.ПодразделениеОрганизации
		|ИЗ
		|	Документ.СписаниеОС КАК СписаниеОС
		|ГДЕ
		|	СписаниеОС.Ссылка = &Ссылка";
		СтруктураДока = Запрос.Выполнить().Выбрать();
		СтруктураДока.Следующий();
		
		СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СтруктураДока.Организация, СтруктураДока.ДатаДок);
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
		
		// {ОбособленныеПодразделения
		ПодразделениеОтветственныхЛиц = СтруктураДока.ПодразделениеОрганизации;
		// }ОбособленныеПодразделения 
		
		ОтветственныеЛица = ОбщегоНазначения.ОтветственныеЛица(СтруктураДока.Организация, СтруктураДока.ДатаДок, ПодразделениеОтветственныхЛиц);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",         Ссылка);
		Запрос.УстановитьПараметр("ДатаДок",        Дата);
		Запрос.УстановитьПараметр("Организация",    Организация);
		Запрос.УстановитьПараметр("ПериодОборотов", Ссылка.МоментВремени());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
		|ПОМЕСТИТЬ СтоимостьОС
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ПериодОборотов, &ПериодОборотов, , СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС), , , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
		|ПОМЕСТИТЬ АмортизацияОС
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ПериодОборотов, &ПериодОборотов, , , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчета,
		|" + ?(ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "БАУКОРП", "СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияИзноса КАК СчетНачисленияИзноса,", "") + "	
		|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
		|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОССрезПоследних
		|ИЗ
		|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
		|			&ДатаДок,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						Документ.СписаниеОС.ОС.ОсновноеСредство
		|					ИЗ
		|						Документ.СписаниеОС.ОС
		|					ГДЕ
		|						Документ.СписаниеОС.ОС.Ссылка = &Ссылка)) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1,
		|	ХозрасчетныйОборотыДтКт.Сумма КАК СуммаОборот
		|ПОМЕСТИТЬ ИзносОС
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&ПериодОборотов,
		|			&ПериодОборотов,
		|			Организация = &Организация
		|				И СубконтоКт1 В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						Документ.СписаниеОС.ОС.ОсновноеСредство
		|					ИЗ
		|						Документ.СписаниеОС.ОС
		|					ГДЕ
		|						Документ.СписаниеОС.ОС.Ссылка = &Ссылка)
		|				И СчетКт В
		|					(ВЫБРАТЬ
		|						СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисления" + ?(ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "БАУКОРП", "Износа", "Амортизации") + "
		|					ИЗ
		|						СчетаБухгалтерскогоУчетаОССрезПоследних)
		|				И Регистратор = &Ссылка) КАК ХозрасчетныйОборотыДтКт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписаниеОСОС.НомерСтроки КАК НП,
		|	СписаниеОСОС.ОсновноеСредство КАК ОС,
		|	СписаниеОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
		|	СписаниеОСОС.ОсновноеСредство.Автотранспорт КАК Автотранспорт,
		|	СписаниеОСОС.ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
		|	СписаниеОСОС.ОсновноеСредство.НаименованиеПолное КАК НаимОС,
		|	СписаниеОСОС.ОсновноеСредство.ГруппаОС КАК Группа,
		|	ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ПервоначальнаяСтоимость КАК НачСтоимость,
		|	ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ИнвентарныйНомер КАК ИнвНомер,
		|	ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
		|	МестонахождениеОсновныхСредствСрезПоследних.Местонахождение КАК Подразделение,
		|	МестонахождениеОсновныхСредствСрезПоследних.МОЛ,
		|	СотрудникиОрганизаций.Код КАК ТабНомерМОЛ,
		|	ЕСТЬNULL(СтоимостьОС.СуммаОборот, 0) КАК Стоимость,
		|	ВЫБОР
		|		КОГДА ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ)
		|		  ИЛИ ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса)
		|			ТОГДА ЕСТЬNULL(ИзносОС.СуммаОборот, 0)
		|		ИНАЧЕ ЕСТЬNULL(АмортизацияОС.СуммаОборот, 0)
		|	КОНЕЦ КАК НачАмортизация
		|ИЗ
		|	Документ.СписаниеОС.ОС КАК СписаниеОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|				&ДатаДок,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Документ.СписаниеОС.ОС.ОсновноеСредство
		|						ИЗ
		|							Документ.СписаниеОС.ОС
		|						ГДЕ
		|							Документ.СписаниеОС.ОС.Ссылка = &Ссылка)) КАК ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних
		|		ПО СписаниеОСОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|				&ДатаДок,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Документ.СписаниеОС.ОС.ОсновноеСредство
		|						ИЗ
		|							Документ.СписаниеОС.ОС
		|						ГДЕ
		|							Документ.СписаниеОС.ОС.Ссылка = &Ссылка)) КАК МестонахождениеОсновныхСредствСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				СрезПоследнихСотрудникиОрганизаций.Физлицо КАК Физлицо,
		|				РаботникиОрганизацийСрезПоследних.Сотрудник.Код КАК Код
		|			ИЗ
		|				(ВЫБРАТЬ
		|					СотрудникиОрганизаций.Физлицо КАК Физлицо,
		|					МАКСИМУМ(ЕСТЬNULL(РаботникиОрганизацийСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК Период
		|				ИЗ
		|					Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних КАК РаботникиОрганизацийСрезПоследних
		|						ПО (РаботникиОрганизацийСрезПоследних.Сотрудник = СотрудникиОрганизаций.Ссылка)
		|				ГДЕ
		|					СотрудникиОрганизаций.Организация = &Организация
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СотрудникиОрганизаций.Физлицо) КАК СрезПоследнихСотрудникиОрганизаций
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних КАК РаботникиОрганизацийСрезПоследних
		|					ПО СрезПоследнихСотрудникиОрганизаций.Физлицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
		|						И СрезПоследнихСотрудникиОрганизаций.Период = РаботникиОрганизацийСрезПоследних.Период
		|						И (РаботникиОрганизацийСрезПоследних.Организация = &Организация)
		|			ГДЕ
		|				(НЕ РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))) КАК СотрудникиОрганизаций
		|			ПО МестонахождениеОсновныхСредствСрезПоследних.МОЛ = СотрудникиОрганизаций.Физлицо
		|		ПО СписаниеОСОС.ОсновноеСредство = МестонахождениеОсновныхСредствСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОССрезПоследних КАК СчетаБухгалтерскогоУчетаОССрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОС КАК СтоимостьОС
		|			ПО СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство = СтоимостьОС.СубконтоКт1
		|				И СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета = СтоимостьОС.СчетКт
		|			ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОС КАК АмортизацияОС
		|			ПО СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство = АмортизацияОС.СубконтоДт1
		|				И СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации = АмортизацияОС.СчетДт
		|			ЛЕВОЕ СОЕДИНЕНИЕ ИзносОС КАК ИзносОС
		|			ПО СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство = ИзносОС.СубконтоКт1
		|				И СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисления" + ?(ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "БАУКОРП", "Износа", "Амортизации") + " = ИзносОС.СчетКт
		|		ПО СписаниеОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
		|ГДЕ
		|	СписаниеОСОС.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НП";
		ВыборкаОС = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаОС.Количество() = 1 Тогда
			
			ВыборкаОС.Следующий();
			
			Если ВыборкаОС.Автотранспорт Тогда 
				Макет = ПолучитьМакет("ОС4а");
			Иначе
				Макет = ПолучитьМакет("ОС4");
			КонецЕсли;
			
			Область = Макет.ПолучитьОбласть("Заголовок");
			Область.Параметры.Заполнить(СтруктураДока);
			Область.Параметры.Организация = ПредставлениеОрганизации;
			
			Область.Параметры.Заполнить(ВыборкаОС);
			Если НЕ ЗначениеЗаполнено(ВыборкаОС.НаимОС) тогда
				Область.Параметры["НаимОС"] = ВыборкаОС.ОС;
			КонецЕслИ;
			
			ДокументПринятияКУчету     = "";
			ДокументВводаВЭксплуатацию = "";
			ПринятоКУчету              = "";
			ВведеноВЭксплуатацию       = "";
			
			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ПринятоКУчету, ДокументВводаВЭксплуатацию, ВведеноВЭксплуатацию);
			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ПринятоКУчету, ДокументПринятияКУчету,     ПринятоКУчету);
			
			Если ВыборкаОС.Автотранспорт Тогда
				Область.Параметры.ВведеноВЭксплуатацию = ВведеноВЭксплуатацию;
				Если ДокументВводаВЭксплуатацию = Неопределено Тогда
					Область.Параметры.Пробег = ПолучитьПробегАвто(ВыборкаОС.ОС, Дата, Дата);
				Иначе
					Область.Параметры.Пробег = ПолучитьПробегАвто(ВыборкаОС.ОС, ДокументВводаВЭксплуатацию.Дата, Дата);
				КонецЕсли;
			Иначе
				Область.Параметры.СрокЭкспл  = ?(ЗначениеЗаполнено(ВведеноВЭксплуатацию),
				УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ВведеноВЭксплуатацию, Дата),
				0); 
			КонецЕсли;
			
			СтоимостьОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
			ВыборкаОС.НачСтоимость,
			ВыборкаОС.Стоимость);
			
			АмортизацияОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
			0,
			ВыборкаОС.НачАмортизация);
			
			Область.Параметры.ГодВыпуска     = ?(ЗначениеЗаполнено(ВыборкаОС.ГодВыпуска), Год(ВыборкаОС.ГодВыпуска), 0);
			Область.Параметры.ПринятоКУчету  = ПринятоКУчету;
			Область.Параметры.НачСтоимость   = СтоимостьОС;
			Область.Параметры.НачАмортизация = АмортизацияОС;
			
			Область.Параметры.ОстСтоимость = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
			0,
			СтоимостьОС - АмортизацияОС);
			
			Область.Параметры.ГлавБух               = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
			Область.Параметры.Руководитель          = ОтветственныеЛица.РуководительПредставление;
			Область.Параметры.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжность;
			
			ТабДокумент.Вывести(Область);
			
		Иначе
			
			Макет  = ПолучитьМакет("ОС4б");
			
			Шапка = Макет.ПолучитьОбласть("Шапка0");
			Шапка.Параметры.Заполнить(СтруктураДока);
			Шапка.Параметры.Организация           = ПредставлениеОрганизации;
			Шапка.Параметры.Руководитель          = ОтветственныеЛица.РуководительПредставление;
			Шапка.Параметры.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжность;
			
			ТабДокумент.Вывести(Шапка);
			
			Шапка = Макет.ПолучитьОбласть("Шапка1");
			Шапка.Параметры.Заполнить(СтруктураДока);
			ТабДокумент.Вывести(Шапка);
			
			Строка1 = Макет.ПолучитьОбласть("Строка1");
			
			Пока ВыборкаОС.Следующий() Цикл
				
				Строка1.Параметры.Заполнить(ВыборкаОС);
				Если НЕ ЗначениеЗаполнено(ВыборкаОС.НаимОС) Тогда
					Строка1.Параметры["НаимОС"] = ВыборкаОС.ОС;
				КонецЕсли;
				
				СтоимостьОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
				ВыборкаОС.НачСтоимость,
				ВыборкаОС.Стоимость);
				
				АмортизацияОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
				0,
				ВыборкаОС.НачАмортизация);
				
				Строка1.Параметры.Заполнить(СтруктураДока);
				Строка1.Параметры.НачСтоимость   = СтоимостьОС;
				Строка1.Параметры.НачАмортизация = АмортизацияОС;
				Строка1.Параметры.ОстСтоимость = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
				0,
				СтоимостьОС - АмортизацияОС);
				
				Строка1.Параметры.Причина = СтруктураДока.ПричинаСписания;
				
				ДокументПринятияКУчету     = "";
				ДокументВводаВЭксплуатацию = "";
				ПринятоКУчету              = "";
				ВведеноВЭксплуатацию       = "";
				
				УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ПринятоКУчету, ДокументВводаВЭксплуатацию, ВведеноВЭксплуатацию);
				
				Строка1.Параметры.СрокЭкспл  = ?(ЗначениеЗаполнено(ВведеноВЭксплуатацию),
				УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ВведеноВЭксплуатацию, Дата),
				0); 
				
				ТабДокумент.Вывести(Строка1);
				
			КонецЦикла;
			
			Шапка = Макет.ПолучитьОбласть("Шапка2");
			Шапка.Параметры.Заполнить(СтруктураДока);
			
			Шапка.Параметры.ГлавБух = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
			
			ТабДокумент.Вывести(Шапка);
			
		КонецЕсли;
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьСписаниеТоваров()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
		
		// Получить экземпляр документа на печать
		Если ИмяМакета = "ОС4" Тогда
			
			ТабДокумент = ПечатьСписаниеОС();
			
		КонецЕсли; 
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
		
	КонецПроцедуры // Печать
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОС4","ОС-4");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ОбязательныеРеквизитыШапки = "Организация, СчетСписания";
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверка недопустимых видов событий ОС.
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету 
		ИЛИ СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию 
		ИЛИ СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию Тогда
		
		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не могут отражаться данным документом!",Отказ,Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов табличного поля 
// "Основные средства". 
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличногоПоляОсновныеСредства(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	РеквизитыТабОС = "ОсновноеСредство";
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличногоПоляОсновныеСредства()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		
		Если Основание.ЭтоГруппа Тогда
			
			Сообщить("Нельзя списать группу основных средств",СтатусСообщения.Внимание);
			Возврат;
			
		КонецЕсли; 
		
		СтрокаТабличнойЧасти = ОС.Добавить();
		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияОС") Тогда
		
		Организация = Основание.Организация;
		
		Для Каждого ТекСтрокаОС Из Основание.ОС Цикл
			
			Если ТекСтрокаОС.НаличиеПоДаннымУчета И НЕ ТекСтрокаОС.НаличиеФактическое Тогда
				
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ТекСтрокаОС.ОсновноеСредство;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ)
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Формирование структуры реквизитов шапки документа.
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС", СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("МетодНачисленияАмортизацииНУ");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	// Проверка правильности заполнения документа.
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличногоПоляОсновныеСредства(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СодержаниеПроводки = "Списание ОС: " + СтруктураШапкиДокумента.ПричинаСписания;
	
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	// Применяется нелинейный метод.
	Если СтруктураШапкиДокумента.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда 
		
		СписокОС_НелинейныйМетод = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период",      СтруктураШапкиДокумента.Дата);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СписокОС",    ОС.ВыгрузитьКолонку("ОсновноеСредство"));
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеОСОС.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	Документ.СписаниеОС.ОС КАК СписаниеОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
		|				&Период,
		|				Организация = Организация
		|					И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
		|		ПО СписаниеОСОС.ОсновноеСредство = ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	СписаниеОСОС.Ссылка = &Ссылка
		|	И ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов = ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации)
		|	И (НЕ(СписаниеОСОС.ОсновноеСредство.АмортизационнаяГруппа = ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа)
		|				ИЛИ (СписаниеОСОС.ОсновноеСредство.АмортизационнаяГруппа = ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ВосьмаяГруппа)
		|					ИЛИ СписаниеОСОС.ОсновноеСредство.АмортизационнаяГруппа = ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДевятаяГруппа)
		|					ИЛИ СписаниеОСОС.ОсновноеСредство.АмортизационнаяГруппа = ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДесятаяГруппа))
		|					И (СписаниеОСОС.ОсновноеСредство.ГруппаОС = ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Здания)
		|						ИЛИ СписаниеОСОС.ОсновноеСредство.ГруппаОС = ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Сооружения))))";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СписокОС_НелинейныйМетод.Добавить(Выборка.ОсновноеСредство);
			СписокОС.Удалить(СписокОС.Найти(Выборка.ОсновноеСредство));
			
		КонецЦикла;
		
		Если СписокОС_НелинейныйМетод.Количество() > 0 Тогда
			
			ТаблицаОстаточнойСтоимости = УправлениеВнеоборотнымиАктивами.ВыбытиеОС(ЭтотОбъект, СтруктураШапкиДокумента, СписокОС_НелинейныйМетод, СодержаниеПроводки, Отказ, Заголовок, Истина, Истина);
			
			Для Каждого СтрокаОС Из ТаблицаОстаточнойСтоимости Цикл
				
				// Списание остаточной стоимости Дт 91.02 Кт 01.09
				СуммаПроводки   = СтрокаОС.ОстаточнаяСтоимость;
				// не поддерживается из-за недостатка законодательной базы
				СуммаПроводкиНУ = 0;
				СуммаПроводкиПР = 0;
				СуммаПроводкиВР = 0;
				
				Если СуммаПроводки > 0 
					ИЛИ СуммаПроводкиНУ > 0
					ИЛИ СуммаПроводкиПР <> 0 
					ИЛИ СуммаПроводкиВР <> 0 Тогда
					
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Период       = СтруктураШапкиДокумента.Дата;
					Проводка.Активность   = Истина;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание   = СодержаниеПроводки;
					Проводка.Сумма        = СуммаПроводки;
					
					Проводка.СчетДт          = СтруктураШапкиДокумента.СчетСписания;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.Субконто);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РеализуемыеАктивы", СтрокаОС.ОсновноеСредство);
					
					Проводка.СчетКт          = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
					Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства] = СтрокаОС.ОсновноеСредство;
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтрокаОС.ПодразделениеОрганизации, СтрокаОС.ПодразделениеОрганизации);
					
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаПроводкиНУ,СуммаПроводкиНУ,СуммаПроводкиПР,СуммаПроводкиПР,СуммаПроводкиВР,СуммаПроводкиВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Движения по регистру СостоянияОСОрганизаций кроме нелинейных ос
	Для каждого СтрокаОС ИЗ СписокОС Цикл
		Если Не СписокОС_НелинейныйМетод = НЕопределено И Не СписокОС_НелинейныйМетод.Найти(СтрокаОС) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
			Движение = Движения.СостоянияОСОрганизаций.Добавить();
			Движение.Период           = СтруктураШапкиДокумента.Дата;
			Движение.ДатаСостояния    = СтруктураШапкиДокумента.Дата;
			Движение.ОсновноеСредство = СтрокаОС;
			Движение.Организация      = СтруктураШапкиДокумента.Организация;
			Движение.Состояние        = Перечисления.СостоянияОС.СнятоСУчета;
		
	КонецЦикла;
	
	
	Если СписокОС.Количество() > 0 Тогда
		
		ТаблицаОстаточнойСтоимости = УправлениеВнеоборотнымиАктивами.ВыбытиеОС(ЭтотОбъект, СтруктураШапкиДокумента, СписокОС, СодержаниеПроводки, Отказ, Заголовок);
		
		Для Каждого СтрокаОС Из ТаблицаОстаточнойСтоимости Цикл
			
			// Списание остаточной стоимости Дт 91.02 Кт 01.09
			СуммаПроводки   = СтрокаОС.ОстаточнаяСтоимость;
			СуммаПроводкиНУ = СтрокаОС.ОстаточнаяСтоимостьНУ;
			СуммаПроводкиПР = СтрокаОС.ОстаточнаяСтоимостьПР;
			СуммаПроводкиВР = СтрокаОС.ОстаточнаяСтоимостьВР;
			
			Если СуммаПроводки > 0 
				ИЛИ СуммаПроводкиНУ > 0
				ИЛИ СуммаПроводкиПР <> 0 
				ИЛИ СуммаПроводкиВР <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Активность   = Истина;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = СодержаниеПроводки;
				Проводка.Сумма        = СуммаПроводки;
				
				Проводка.СчетДт          = СтруктураШапкиДокумента.СчетСписания;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.Субконто);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РеализуемыеАктивы", СтрокаОС.ОсновноеСредство);
				
				Проводка.СчетКт          = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
				Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства] = СтрокаОС.ОсновноеСредство;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтрокаОС.ПодразделениеОрганизации, СтрокаОС.ПодразделениеОрганизации);
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаПроводкиНУ,СуммаПроводкиНУ,СуммаПроводкиПР,СуммаПроводкиПР,СуммаПроводкиВР,СуммаПроводкиВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// {УчетДоходовИРасходовИП
	// Отражение в налоговом учете индивидуального предпринимателя.
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		
		ТаблицаПоОС = ОС.Выгрузить();
		
		СписокОбъектов = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
		
		ТаблицаАмортизацииНУ = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНалогРеглФизЛицо(ЭтотОбъект,СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, СписокОбъектов, Истина);
		ТаблицаАмортизацииНУ.Колонки.ОС.Имя   = "ОбъектУчета";
		ТаблицаАмортизацииНУ.Колонки.Налог.Имя = "СуммаАмортизации";
		ТаблицаАмортизацииНУ.Колонки.Добавить("СчетАмортизации");
		ТаблицаАмортизацииНУ.Индексы.Добавить("ОбъектУчета");
		
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТаблицаАмортизацииНУ, СтруктураШапкиДокумента, "", "Списание ОС");
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		ДоходыИРасходыПредпринимателя.ОтражениеАмортизации(ЭтотОбъект, СтруктураШапкиДокумента, ТабЗатрат, УчетнаяПолитикаНУ);
		
		// Списание объекта
		ТаблицаАмортизацииНУ.Свернуть("ОбъектУчета, РасчетныйДокумент, ДокументОплаты, НоменклатурнаяГруппа, ХарактерДеятельности", "СуммаАмортизации,АмортизацияКонечныйОстаток");
		
		Для Каждого ОбъектОС Из ТаблицаАмортизацииНУ Цикл
			Если (ОбъектОС.СуммаАмортизации + ОбъектОС.АмортизацияКонечныйОстаток) <> 0 Тогда
				Движение = Движения.ИПМПЗ.ДобавитьПриход(); // самортизированную часть стоимости сторнируем, чтобы не попала в Книгу учета
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.Организация = СтруктураШапкиДокумента.Организация;
				Движение.НоменклатурнаяГруппа = ОбъектОС.НоменклатурнаяГруппа;
				Движение.ХарактерДеятельности = ОбъектОС.ХарактерДеятельности;
				Движение.ВидМПЗ = Перечисления.ВидыМПЗ.ОС;
				Движение.Номенклатура = ОбъектОС.ОбъектУчета;
				Движение.Партия = ОбъектОС.РасчетныйДокумент;
				Движение.ДокументОплаты = ОбъектОС.ДокументОплаты;
				Движение.Сумма = -(ОбъектОС.СуммаАмортизации + ОбъектОС.АмортизацияКонечныйОстаток);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПоОС.Колонки.Добавить("Номенклатура");
		ТаблицаПоОС.Колонки.Добавить("СчетДоходов");
		ТаблицаПоОС.Колонки.Добавить("Субконто");
		ТаблицаПоОС.Колонки.Добавить("СуммаБезНДС");
		ТаблицаПоОС.Колонки.Добавить("НДС");
		ТаблицаПоОС.ЗагрузитьКолонку(ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"), "Номенклатура");
		ТаблицаПоОС.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетСписания, "СчетДоходов");
		ТаблицаПоОС.ЗаполнитьЗначения(СтруктураШапкиДокумента.Субконто, "Субконто");
		ТаблицаПоОС.ЗаполнитьЗначения(0, "СуммаБезНДС");
		ТаблицаПоОС.ЗаполнитьЗначения(0, "НДС");
		
		СчетУчета = ПланыСчетов.Хозрасчетный.ОсновныеСредства;
		
		ДоходыИРасходыПредпринимателя.СписаниеАмортизируемогоИмущества(ЭтотОбъект, СтруктураШапкиДокумента, ТаблицаПоОС, СчетУчета, "Субконто", УчетнаяПолитикаНУ);
		//Движения.ИПМПЗ.Записать(Ложь);
		
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

