Перем ТКонтрагент, ТДоговор;

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;


// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПоДаннымОрганизации,ЭлементыФормы.КоманднаяПанельПоДаннымОрганизации.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПоДаннымКонтрагента,ЭлементыФормы.КоманднаяПанельПоДаннымКонтрагента.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.СписокСчетов,ЭлементыФормы.КоманднаяПанельСписокСчетов.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимость()
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И (НЕ ДоговорКонтрагента.ЭтоГруппа) Тогда
		ЭлементыФормы.РазбитьПоДоговорам.Доступность = Ложь;
		ЭлементыФормы.РазбитьПоДоговорам.Значение = Ложь;
		РазбитьПоДоговорам = Ложь;
		ЭлементыФормы.ПоДаннымОрганизации.Колонки.Договор.Видимость = Ложь; 
		ЭлементыФормы.ПоДаннымКонтрагента.Колонки.Договор.Видимость = Ложь; 
	Иначе
		ЭлементыФормы.РазбитьПоДоговорам.Доступность = Истина;
		ЭлементыФормы.ПоДаннымОрганизации.Колонки.Договор.Видимость = Истина; 
		ЭлементыФормы.ПоДаннымКонтрагента.Колонки.Договор.Видимость = Истина; 

	КонецЕсли;
	
    Если РазбитьПоДоговорам Тогда
    	ЭлементыФормы.ПоДаннымОрганизации.Колонки.Договор.Видимость = Истина; 
    	ЭлементыФормы.ПоДаннымКонтрагента.Колонки.Договор.Видимость = Истина; 
		ПоДаннымОрганизации.Сортировать("Договор, Дата,Документ,Представление");		
    Иначе
		ПоДаннымОрганизации.Сортировать("Дата,Документ,Представление,Договор");
    	ЭлементыФормы.ПоДаннымОрганизации.Колонки.Договор.Видимость = Ложь; 
    	ЭлементыФормы.ПоДаннымКонтрагента.Колонки.Договор.Видимость = Ложь; 
	КонецЕсли;
	
    Если ВыводитьПолныеНазванияДокументов Тогда
    	ЭлементыФормы.ПоДаннымОрганизации.Колонки.Документ.Видимость = Ложь; 
    Иначе
    	ЭлементыФормы.ПоДаннымОрганизации.Колонки.Документ.Видимость = Истина; 

	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьДоступность()
	
	ЭлементыФормы.Организация.Доступность		  = не СверкаСогласована;
	ЭлементыФормы.Контрагент.Доступность          = не СверкаСогласована;
	ЭлементыФормы.ДоговорКонтрагента.Доступность  = не СверкаСогласована;
	ЭлементыФормы.ВалютаДокумента.Доступность 	  = не СверкаСогласована;
	
	ЭлементыФормы.ДатаНачала.Доступность 		  = не СверкаСогласована;
	ЭлементыФормы.ДатаОкончания.Доступность 	  = не СверкаСогласована;
	ЭлементыФормы.КнопкаНастройкаПериода.Доступность = не СверкаСогласована;
	
	ЭлементыФормы.ОстатокНаНачало.Доступность     = не СверкаСогласована;
	ЭлементыФормы.ВыводитьПолныеНазванияДокументов.Доступность     = не СверкаСогласована;
	
	ЭлементыФормы.КоманднаяПанельПоДаннымОрганизации.Доступность	= не СверкаСогласована;
	ЭлементыФормы.КоманднаяПанельПоДаннымКонтрагента.Доступность	= не СверкаСогласована;
	ЭлементыФормы.КоманднаяПанельСписокСчетов.Доступность      		= не СверкаСогласована;
	
	ЭлементыФормы.ПоДаннымКонтрагента.ТолькоПросмотр = СверкаСогласована;
	ЭлементыФормы.ПоДаннымОрганизации.ТолькоПросмотр = СверкаСогласована;
	ЭлементыФормы.СписокСчетов.ТолькоПросмотр 		  = СверкаСогласована;

КонецПроцедуры

Процедура УстановитьПодписиВалют()
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ПодписьВалюты = "("+СокрЛП(Строка(мВалютаРегламентированногоУчета))+")";
	Иначе
		ПодписьВалюты = "("+СокрЛП(Строка(ВалютаДокумента))+")";
	КонецЕсли; 
	
	ЭлементыФормы.ПоДаннымОрганизации.Колонки.Дебет.ТекстШапки = "Дебет "+ПодписьВалюты;
	ЭлементыФормы.ПоДаннымОрганизации.Колонки.Кредит.ТекстШапки = "Кредит "+ПодписьВалюты;
	
	ЭлементыФормы.ПоДаннымКонтрагента.Колонки.Дебет.ТекстШапки = "Дебет "+ПодписьВалюты;
	ЭлементыФормы.ПоДаннымКонтрагента.Колонки.Кредит.ТекстШапки = "Кредит "+ПодписьВалюты;
	
	ЭлементыФормы.НадписьОстатки.Значение = "Остатки "+ПодписьВалюты+":";
	ЭлементыФормы.НадписьОстаткиКонтрагент.Значение = "Остатки "+ПодписьВалюты+":";
	
КонецПроцедуры	

Процедура ПересчитатьОстатки()

	ОстатокНаКонец = ОстатокНаНачало + ПоДаннымОрганизации.Итог("Дебет") -  ПоДаннымОрганизации.Итог("Кредит");
	ЭлементыФормы.ОстатокНаНачалоКонтрагент.Значение = - ОстатокНаНачало;
	ЭлементыФормы.ОстатокНаКонец.Значение = ОстатокНаКонец;
	
	ОстатокНаКонецКонтрагент = - ОстатокНаНачало + ПоДаннымКонтрагента.Итог("Дебет") -  ПоДаннымКонтрагента.Итог("Кредит");
	ЭлементыФормы.ОстатокНаКонецКонтрагент.Значение = ОстатокНаКонецКонтрагент;
	
	Если Расхождение <> ОстатокНаКонец + ОстатокНаКонецКонтрагент Тогда
		Расхождение = ОстатокНаКонец + ОстатокНаКонецКонтрагент;
	КонецЕсли; 
	ЭлементыФормы.Расхождение.Значение = Расхождение;
	
	ЭлементыФормы.РасхождениеКонтрагент.Значение = Расхождение*(-1);

КонецПроцедуры

Процедура ЗаполнитьСписокСчетовЗначениямиПоУмолчанию(ВыдаватьСообщения = Ложь)
	
	Если СписокСчетов.Количество() > 0 тогда
		Если ВыдаватьСообщения Тогда
		
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли;
		
		СписокСчетов.Очистить();
		
	КонецЕсли;

	СчетаПоУмолчанию = Новый Массив();
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам);
	СчетаПоУмолчанию.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
	
	Для Счетчик =1  По СчетаПоУмолчанию.Количество() Цикл
		СтрокаСчета = СписокСчетов.Добавить();
		СтрокаСчета.УчаствуетВРасчетах = Истина;
	КонецЦикла; 
	
	СписокСчетов.ЗагрузитьКолонку(СчетаПоУмолчанию,"Счет");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	УстановитьВидимость();
	    	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета);
		
		//Заполнить таблицу счетов значениями по умолчанию
		ЗаполнитьСписокСчетовЗначениямиПоУмолчанию();
		
		СверкаСогласована = Ложь;
		
		ДатаОкончания = Дата;
		ДатаНачала = НачалоГода(Дата);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю3);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю3,ЭлементыФормы.Номер);

	мТекущаяДатаДокумента        = Дата;
	НП.УстановитьПериод(ДатаНачала, ДатаОкончания, Истина);
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Подписать колонки и реквизиты остатков.
	УстановитьПодписиВалют();

	// Пересчитать конечные остатки и расхождение
	ПересчитатьОстатки();
	
	УстановитьДоступность();
	
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,ДатаНачала,ДатаОкончания,Организация,Контрагент");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.ПоДаннымОрганизации);


	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии

// Процедура - обработчик события "ПриЗакрытии" формы.
Процедура ПриЗакрытии()
				
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры //ПриЗакрытии

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю3, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()


Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	Если НП.Редактировать() Тогда
		Если ПоДаннымОрганизации.Количество() > 0 Тогда
			
			ТекстВопроса = "При изменении периода сверки табличная часть будет очищена. Изменить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			
			ПоДаннымОрганизации.Очистить();
		КонецЕсли;
		
		ДатаНачала    = НП.ПолучитьДатуНачала();
		ДатаОкончания = НП.ПолучитьДатуОкончания();
	КонецЕсли;

КонецПроцедуры

Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если ПоДаннымОрганизации.Количество() > 0 Тогда
		
		ТекстВопроса = "При изменении периода сверки табличная часть будет очищена. Изменить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			ДатаНачала = НП.ДатаНачала;
			Возврат;
		КонецЕсли; 
		
		ПоДаннымОрганизации.Очистить();
	КонецЕсли;

		НП.УстановитьПериод(ДатаНачала, ДатаОкончания, Истина);

КонецПроцедуры

Процедура ДатаОкончанияПриИзменении(Элемент)

	Если ПоДаннымОрганизации.Количество() > 0 Тогда
		
		ТекстВопроса = "При изменении периода сверки табличная часть будет очищена. Изменить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			ДатаОкончания = НП.ДатаОкончания;
			Возврат;
		КонецЕсли; 
		
		ПоДаннымОрганизации.Очистить();
	КонецЕсли;

	НП.УстановитьПериод(ДатаНачала, ДатаОкончания, Истина);

КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	РазбитьПоДоговорамПриИзменении(Элемент);
	
КонецПроцедуры


Процедура КоманднаяПанельПоДаннымОрганизацииЗаполнитьПоДаннымБухгалтерскогоУчета(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не выбрана организация!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Предупреждение("Не выбран контрагент!");
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Предупреждение("Не выбрана валюта документа!");
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
	    Предупреждение("Не выбрана дата начала периода сверки расчетов!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
	    Предупреждение("Не выбрана дата конца периода сверки расчетов!");
		Возврат;
	КонецЕсли;
		
	Если ДатаОкончания < ДатаНачала Тогда
	    Предупреждение("Неверно задан период сверки расчетов!");
		Возврат;
	КонецЕсли;
	
	КоличествоСчетов = СписокСчетов.Количество();

	ФильтрСписокСчетов = Новый массив();
	Для каждого СтрокаСчета Из СписокСчетов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) или СтрокаСчета.УчаствуетВРасчетах = Ложь Тогда
			Продолжить;
		Иначе
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли; 
	КонецЦикла; 
		
	Если ФильтрСписокСчетов.Количество() = 0 Тогда
		Предупреждение("Неверно задан список счетов, по которым производится сверка!");
		Возврат;
	КонецЕсли;

	Если ПоДаннымОрганизации.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ПоДаннымОрганизации.Очистить();
	КонецЕсли;
	
	ЗаполнитьПоДаннымБухгалтерскогоУчета(ФильтрСписокСчетов);
	
	ПересчитатьОстатки();
	
КонецПроцедуры

Процедура КоманднаяПанельПоДаннымКонтрагентаДействиеПоДаннымОрганизации(Кнопка)
	
	Если ПоДаннымКонтрагента.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ПоДаннымКонтрагента.Очистить();
	КонецЕсли;

	ЗаполнитьПоДаннымОрганизации();

	ПересчитатьОстатки();

КонецПроцедуры

Процедура СверкаСогласованаПриИзменении(Элемент)
	УстановитьДоступность();
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);
	
	ПредставительКонтрагента = Контрагент.ОсновноеКонтактноеЛицо;
	
КонецПроцедуры

Процедура ВалютаДокументаПриИзменении(Элемент)
	
	
	УстановитьПодписиВалют();
	
КонецПроцедуры

Процедура СписокСчетовСчетНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Хозрасчетный.Ссылка КАК Счет
	                      |ИЗ
	                      |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	                      |ГДЕ
	                      |	Хозрасчетный.Забалансовый = ЛОЖЬ
	                      |	И Хозрасчетный.ВидыСубконто.ВидСубконто = &ВидСубконтоКонтрагент
	                      |	И Хозрасчетный.ВидыСубконто.ВидСубконто = &ВидСубконтоДоговор
	                      |	И ВЫБОР
	                      |			КОГДА &ФильтроватьПоСписку = ИСТИНА
	                      |				ТОГДА (НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаУжеВыбраны))
	                      |			ИНАЧЕ ИСТИНА
	                      |		КОНЕЦ
	                      |	И (НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СписокИсключаемыхСчетов))
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Хозрасчетный.Порядок");

	Запрос.УстановитьПараметр("ВидСубконтоКонтрагент", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("ВидСубконтоДоговор", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	ФильтрСписокСчетов = СписокСчетов.ВыгрузитьКолонку("Счет");
	КоличествоСчетов = ФильтрСписокСчетов.Количество();
	Для Счетчик = 1 по КоличествоСчетов Цикл
		Если НЕ ЗначениеЗаполнено(ФильтрСписокСчетов[КоличествоСчетов - Счетчик]) Тогда
			ФильтрСписокСчетов.Удалить(КоличествоСчетов - Счетчик);
		КонецЕсли; 
	КонецЦикла; 
	
	ФильтроватьПоСписку = не (ФильтрСписокСчетов.Количество()= 0);
	
	Запрос.УстановитьПараметр("СчетаУжеВыбраны", ФильтрСписокСчетов);
	Запрос.УстановитьПараметр("ФильтроватьПоСписку", ФильтроватьПоСписку);
	
	СписокИсключаемыхСчетов = Новый Массив();
	СписокИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);
	СписокИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет);
	Запрос.УстановитьПараметр("СписокИсключаемыхСчетов", СписокИсключаемыхСчетов);
	
	ВыборкаСчетов = Запрос.Выполнить().Выбрать();

	ФильтрСписокСчетов  = Новый СписокЗначений;
	Пока ВыборкаСчетов.Следующий() Цикл
		ФильтрСписокСчетов.Добавить(ВыборкаСчетов.Счет);
	КонецЦикла;

	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора("ФормаВыбора", Элемент, );

	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Значение      = ФильтрСписокСчетов;

	ФормаВыбора.ЭлементыФормы.Список.НастройкаОтбора.Ссылка.Доступность = Ложь;

	ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;

	ФормаВыбора.Открыть();

КонецПроцедуры

Процедура СписокСчетовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	

	ОформлениеСтроки.Ячейки.Наименование.УстановитьТекст(ДанныеСтроки.Счет.Наименование);

КонецПроцедуры

Процедура ОстатокНаНачалоПриИзменении(Элемент)
	ПересчитатьОстатки();
КонецПроцедуры

Процедура ПоДаннымОрганизацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчитатьОстатки();
КонецПроцедуры

Процедура ПоДаннымКонтрагентаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчитатьОстатки();
	
КонецПроцедуры

Процедура СписокСчетовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока Тогда
		ТД = Элемент.ТекущиеДанные;
		
		Если Не ТД=Неопределено Тогда
			ТД.УчаствуетВРасчетах = Истина;	
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Процедура КоманднаяПанельСписокСчетовЗаполнитьПоУмолчанию(Кнопка)
	
	ЗаполнитьСписокСчетовЗначениямиПоУмолчанию(Истина);
	
КонецПроцедуры

Процедура ПоДаннымОрганизацииПослеУдаления(Элемент)
	ПересчитатьОстатки();
КонецПроцедуры

Процедура ПоДаннымКонтрагентаПослеУдаления(Элемент)
	ПересчитатьОстатки();
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
     

Процедура ДатаПриИзменении(Элемент)
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю3, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);	

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	УстановитьВидимость();
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю3, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	Если УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента,Контрагент,Организация) Тогда
		ПредставительКонтрагента = Контрагент.ОсновноеКонтактноеЛицо;
	КонецЕсли;

	УстановитьВидимость();
	
КонецПроцедуры

Процедура НачалоВыбораЗначенияДоговораКонтрагента(ЭлементФормы, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(, ЭлементФормы, );

	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;

	ФормаВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	// Фильтруем договоры по головной организации
	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	ФормаВыбора.СправочникСписок.Отбор.Организация.Установить(ГоловнаяОрганизация);
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ДоговорКонтрагента;
	КонецЕсли;
	
	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияДоговораКонтрагента()

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораЗначенияДоговораКонтрагента(Элемент, СтандартнаяОбработка);
											
КонецПроцедуры

Процедура ПоДаннымОрганизацииДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Отбор = Новый Структура("Организация, Контрагент, ДокументыПоДоговоруКонтрагента", Организация, Контрагент, ДоговорКонтрагента);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "ПоДаннымОрганизации");
	
КонецПроцедуры

Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если (Контрагент <> ВыбранноеЗначение) 
		И (ПоДаннымКонтрагента.Количество() <> 0 Или ПоДаннымОрганизации.Количество() <> 0) Тогда
		ТекстВопроса = "При изменении значения контрагента табличные части будут очищены. Вы уверены?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			СтандартнаяОбработка = Ложь;
		Иначе
			ОчиститьСодержимоеТабличныхЧастей();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если (Организация <> ВыбранноеЗначение) 
		И (ПоДаннымКонтрагента.Количество() <> 0 Или ПоДаннымОрганизации.Количество() <> 0) Тогда
		ТекстВопроса = "При изменении организации табличные части будут очищены. Вы уверены?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			СтандартнаяОбработка = Ложь;
		Иначе
			ОчиститьСодержимоеТабличныхЧастей();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если (ДоговорКонтрагента <> ВыбранноеЗначение) 
		И (ПоДаннымКонтрагента.Количество() <> 0 Или ПоДаннымОрганизации.Количество() <> 0) Тогда
		ТекстВопроса = "При изменении значения договора контрагента табличные части будут очищены. Вы уверены?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			СтандартнаяОбработка = Ложь;
		Иначе
			ОчиститьСодержимоеТабличныхЧастей();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Очищает содержимое табличных частей документа
//
Процедура ОчиститьСодержимоеТабличныхЧастей()
	
	Если ПоДаннымОрганизации.Количество() <> 0 Тогда
		ПоДаннымОрганизации.Очистить();
	КонецЕсли;
	
	Если ПоДаннымКонтрагента.Количество() <> 0 Тогда
		ПоДаннымКонтрагента.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура РазбитьПоДоговорамПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ВыводитьПолныеНазванияДокументовПриИзменении(Элемент)
	
	Если (ПоДаннымКонтрагента.Количество() <> 0 Или ПоДаннымОрганизации.Количество() <> 0) Тогда
		ТекстВопроса = "При изменении способа вывода названий документов табличные части будут очищены. Вы уверены?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОчиститьСодержимоеТабличныхЧастей();
			УстановитьВидимость();
		Иначе
			ЭлементыФормы.ВыводитьПолныеНазванияДокументов.Значение = не ВыводитьПолныеНазванияДокументов;
		КонецЕсли; 
	КонецЕсли;	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю3, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ПоДаннымОрганизацииДоговорНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.ПоДаннымОрганизации.ТекущиеДанные;
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ТекДанные.Договор, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПоДаннымКонтрагентаДоговорНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.ПоДаннымКонтрагента.ТекущиеДанные;
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ТекДанные.Договор, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры


НП = Новый НастройкаПериода;

