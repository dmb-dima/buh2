Перем мВалютаРегламентированногоУчета Экспорт;
Перем ТаблицаВзаиморасчетов;
Перем ОтгрузкаОС;

Процедура ЗаполнитьСчетаУчетаРасчетов(СчетаУчета = Неопределено) Экспорт
	
    Если СчетаУчета = Неопределено Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	КонецЕсли;
	
	СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	Если (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически)
		ИЛИ (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу) Тогда
		СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
	Иначе
		СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаРасчетов()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, ДокументОтгрузки, СчетУчетаРасчетовСКонтрагентом");

	// Зачет авансов
	СтруктураОбязательныхПолей.Вставить("СпособЗачетаАвансов");
	Если (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически)
		ИЛИ (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу) Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
		
    Если НЕ ОтгрузкаОС И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокументОтгрузки) Тогда
        Если НЕ СтруктураШапкиДокумента.ДокументОтгрузки.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
            СтрокаСообщения = "Указанный документ отгрузки не регистрирует отгрузку без перехода права собственности!";
            ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, , Заголовок, СтатусСообщения.Внимание);
        КонецЕсли;
    ИначеЕсли ОтгрузкаОС И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокументОтгрузки) Тогда
        Если НЕ СтруктураШапкиДокумента.ДокументОтгрузки.ПравоСобственностиПереходитПослеГосРегистрации Тогда
            СтрокаСообщения = "Указанный документ передачи ОС не регистрирует отгрузку без перехода права собственности!
            |На закладке ""Дополнительно"" взведите флажок ""Право собственности переходит после государственной регистрации""";
            ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, , Заголовок, СтатусСообщения.Внимание);
        КонецЕсли;
    КонецЕсли;  
    
    Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокументОтгрузки) И НЕ СтруктураШапкиДокумента.ДокументОтгрузки.Проведен Тогда
        СтрокаСообщения = "В качестве документа отгрузки указан непроведенный документ!";
        ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, , Заголовок, СтатусСообщения.Внимание);
    КонецЕсли;
	

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.СчетРасходов.Имя = "КорСчетСписания";

	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписания1");
	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");

	ТаблицаТоваров.Колонки.Добавить("ОтражениеВУСН");
	
	ТаблицаТоваров.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаТоваров.Колонки.Добавить("КорПодразделениеОрганизации");

	ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.Принимаются,        "ОтражениеВУСН");
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                                 "Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,        "Организация");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.КорСубконтоСписания1 = СтрокаТаблицы.Субконто;

	КонецЦикла;

	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорПодразделениеОрганизации");
    
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ДвиженияПоРеализацииТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаЗачетаАвансов, Отказ, Заголовок)
	
	ДатаДока   = Дата;
	Проводки = Движения.Хозрасчетный;

	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТоварам, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, , "Реализация отгруженных товаров");
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ВидыСубконтоСчетов = Новый Соответствие; // кэш видов субконто
	ПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(СтруктураШапкиДокумента.Организация, ДатаДока);
	
	//Отразим в подсистеме НДС движения по партиям товаров 
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам,Неопределено,Отказ, Заголовок, Истина);
	
	ТаблицыДокумента = Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам);
	
	ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
		СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, Истина, Отказ, Заголовок);
	
	//////////////////////////////////////////////////////////	
	//Распределение выручки по товарам по партиям
	СтруктураТаблицыВыручки = Новый структура("Номенклатура, Количество, ВидЦенности, Ценность, Партия, СчетУчетаНДСПоРеализации, СчетУчета, СчетДоходов, Субконто, 
											  |СтавкаНДС, Сумма, СуммаБУ, СуммаНУ, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБУБезНДС, СуммаБезНДСВал,Комиссионный,Комитент,ДоговорКомиссии,СчетРасчетовСКомитентом,ВалютаРасчетовСКомитентом,СуммаСписания");

	//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
	ВыручкаПоТоварам = ОбщегоНазначения.СформироватьТаблицуЗначений(Новый ТаблицаЗначений(),СтруктураТаблицыВыручки,,Истина);

	СписокРаспределяемыхКолонок = Новый Структура("Количество,Сумма,СуммаБУ,СуммаНУ,СуммаВал,НДС,НДСВал,СуммаБезНДС,СуммаБУБезНДС,СуммаБезНДСВал");

	Для каждого СтрокаТаблицыТоваров Из ТаблицаПоТоварам Цикл 

		ТаблицаПартий = СтрокаТаблицыТоваров.СписанныеПартии;

		Для каждого Партия из ТаблицаПартий Цикл

			СтрокаТаблицыВыручки = ВыручкаПоТоварам.Добавить();

			Если Партия.Комиссионный тогда
				ПараметрыПартии = УправлениеВзаиморасчетами.ПараметрыРасчетовСКомитентом(Партия.Партия, Отказ, Заголовок);
			КонецЕсли;

			Для каждого Колонка из ВыручкаПоТоварам.Колонки Цикл

				Если СписокРаспределяемыхКолонок.Свойство(Колонка.Имя) тогда
					СтрокаТаблицыВыручки[Колонка.Имя]= Партия.Количество * 10;

				ИначеЕсли Не(ТаблицаПартий.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
					СтрокаТаблицыВыручки[Колонка.Имя] = Партия[Колонка.Имя];
				
				ИначеЕсли Не(ТаблицаПоТоварам.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
					СтрокаТаблицыВыручки[Колонка.Имя] = СтрокаТаблицыТоваров[Колонка.Имя];

				Иначе

					Если Партия.Комиссионный тогда

						Если ПараметрыПартии.Свойство(Колонка.Имя) тогда
							СтрокаТаблицыВыручки[Колонка.Имя] = ПараметрыПартии[Колонка.Имя];
						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

	//Распределим выручку по партиям
	ВыручкаПоТоварам = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаПоТоварам,ВыручкаПоТоварам,СписокРаспределяемыхКолонок);


	//Фиксация выручки и НДС (проводки)
	Выручка = ВыручкаПоТоварам.Скопировать();
	Выручка.Свернуть("СчетУчетаНДСПоРеализации, СчетДоходов, Субконто, СтавкаНДС,Комиссионный,Комитент,ДоговорКомиссии,СчетРасчетовСКомитентом,ВалютаРасчетовСКомитентом,Номенклатура",
		"Сумма, СуммаБУ, СуммаНУ, СуммаВал, НДС, НДСВал,Количество");

	Для Каждого СтрокаТаблицы Из ВыручкаПоТоварам Цикл
		ОтражатьНДСКомитента = (СтрокаТаблицы.Комиссионный И СтрокаТаблицы.ДоговорКомиссии.УчетАгентскогоНДС);
		Если ОтражатьНДСКомитента Тогда 
			СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент;
		КонецЕсли;
	КонецЦикла;
	
	// Формирование движений документа для подсистемы НДС
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ВыручкаПоТоварам, ТаблицаВзаиморасчетов,Отказ, Заголовок);
	
    Для Каждого СтрокаТаблицы из Выручка Цикл

		// Выручка
		Если СтрокаТаблицы.СуммаБУ = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Проводки.Добавить();

		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;

		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;

		КонецЕсли;
		
		Проводка.Содержание = "Реализация отгруженных товаров (продукции)";
		Если СтрокаТаблицы.Комиссионный = Ложь тогда
			Проводка.СчетКт = СтрокаТаблицы.СчетДоходов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,           СтрокаТаблицы.Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РеализуемыеАктивы", СтрокаТаблицы.Номенклатура);
			Если Проводка.СчетКт.Количественный Тогда
				Проводка.КоличествоКт = СтрокаТаблицы.Количество;  
			КонецЕсли;
			
		Иначе
			Проводка.СчетКт = СтрокаТаблицы.СчетРасчетовСКомитентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",        СтрокаТаблицы.Комитент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",           СтрокаТаблицы.ДоговорКомиссии);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
			Если Проводка.СчетКт.Валютный Тогда
				
				ДанныеОВалютеРасчетовСКомитентом = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаТаблицы.ВалютаРасчетовСКомитентом,СтруктураШапкиДокумента.Дата);

				Проводка.ВалютаКт        = СтрокаТаблицы.ВалютаРасчетовСКомитентом;
				Проводка.ВалютнаяСуммаКт = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма
											,мВалютаРегламентированногоУчета,СтрокаТаблицы.ВалютаРасчетовСКомитентом
											,1,ДанныеОВалютеРасчетовСКомитентом.Курс
											,1,ДанныеОВалютеРасчетовСКомитентом.Кратность);
				СтрокаТаблицы.СуммаВал   = Проводка.ВалютнаяСуммаКт;
			КонецЕсли;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			СуммаНУДт = СтрокаТаблицы.СуммаНУ + СтрокаТаблицы.НДС;
			СуммаНУКт = ?(СтрокаТаблицы.Комиссионный, СуммаНУДт, СтрокаТаблицы.СуммаНУ);
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
				СуммаНУДт, СуммаНУКт, Проводка.Сумма - СуммаНУДт, Проводка.Сумма - СуммаНУДт, , , 
				Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
			
		КонецЕсли;

		// НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда
				
			Если Не СтрокаТаблицы.Комиссионный Тогда

				Проводка = Проводки.Добавить();

				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = СтрокаТаблицы.НДС;
				Проводка.Содержание = "Реализация отгруженных товаров (продукции)";
				
				Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,           СтрокаТаблицы.Субконто);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
				
				Если СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФВыданные",   СтруктураШапкиДокумента.ДокументОтгрузки);
				Иначе
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет",Перечисления.ВидыПлатежейВГосБюджет.Налог);
				КонецЕсли;

				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
			КонецЕсли;
				
		КонецЕсли;
			
	КонецЦикла;
    	
	Если Не СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
		УчетНДСФормированиеДвижений.ОтразитьНДСНалоговогоАгентаКомиссионер(СтруктураШапкиДокумента, Выручка, Движения);
	КонецЕсли;
	
	// {УчетДоходовИРасходовИП
	// Списание по партиям
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	ДоходыИРасходыПредпринимателя.СписаниеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, 1, ТаблицаПоТоварам, "Субконто", "СчетУчета", "СчетУчета",, "СчетДоходов", Отказ);
	ДоходыИРасходыПредпринимателя.ЗачетОплатыПокупателя(ЭтотОбъект, СтруктураШапкиДокумента, Движения.ИПМПЗОтгруженные.Выгрузить(), ТаблицаВзаиморасчетов);
	// }УчетДоходовИРасходовИП

КонецПроцедуры

Процедура ДвиженияПоРеализацииОС(СтруктураШапкиДокумента,ТаблицаПоОС, ОтражатьВНалоговомУчетеУСН, ТаблицаЗачетаАвансов, Отказ, Заголовок)
    
	Проводки = Движения.Хозрасчетный;
    
    // Списание ОС
    
        Содержание = "Переход права собственности по гос.регистрации";
    
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаДокумента", СтруктураШапкиДокумента.Дата);
		Запрос.УстановитьПараметр("Организация",   СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("ПокупательОС",  СтруктураШапкиДокумента.Контрагент);
		Запрос.УстановитьПараметр("СписокОС",      ТаблицаПоОС.ВыгрузитьКолонку("Номенклатура"));
        
        Массив = Новый Массив;
        Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
        Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		Запрос.УстановитьПараметр("ВидыСубконто",  Массив);
        
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтоимостьОС.Субконто1 КАК ОсновноеСредство,
		|	ЕСТЬNULL(СтоимостьОС.СуммаОстатокДт, 0) КАК ОстаточнаяСтоимость,
		|	ЕСТЬNULL(СтоимостьОС.СуммаНУОстатокДт, 0) КАК ОстаточнаяСтоимостьНУ,
		|	ЕСТЬNULL(СтоимостьОС.СуммаПРОстатокДт, 0) КАК ОстаточнаяСтоимостьПР,
		|	ЕСТЬNULL(СтоимостьОС.СуммаВРОстатокДт, 0) КАК ОстаточнаяСтоимостьВР
		|ИЗ 
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаДокумента, 
		|	                                        Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости),
		|	                                        &ВидыСубконто, 
		|	                                        Организация = &Организация И Субконто1 В (&СписокОС) И Субконто2 = &ПокупательОС) КАК СтоимостьОС
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки
		|";
		ТаблицаОстаточнойСтоимости = Запрос.Выполнить().Выгрузить();
        
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаОстаточнойСтоимости", ТаблицаОстаточнойСтоимости);
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ВнешнийИсточник.ОсновноеСредство КАК ОсновноеСредство,
	|	ВнешнийИсточник.ОстаточнаяСтоимость КАК ОстаточнаяСтоимость,
	|	ВнешнийИсточник.ОстаточнаяСтоимостьНУ КАК ОстаточнаяСтоимостьНУ,
	|	ВнешнийИсточник.ОстаточнаяСтоимостьПР КАК ОстаточнаяСтоимостьПР,
	|	ВнешнийИсточник.ОстаточнаяСтоимостьВР КАК ОстаточнаяСтоимостьВР
	|ПОМЕСТИТЬ 
	|   ТаблицаОстаточнойСтоимости
	|ИЗ 
	|	&ТаблицаОстаточнойСтоимости КАК ВнешнийИсточник";
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОтгрузки);
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ТаблицаОстаточнойСтоимости.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОстаточнойСтоимости.ОстаточнаяСтоимость КАК ОстаточнаяСтоимость,
	|	ТаблицаОстаточнойСтоимости.ОстаточнаяСтоимостьНУ КАК ОстаточнаяСтоимостьНУ,
	|	ТаблицаОстаточнойСтоимости.ОстаточнаяСтоимостьПР КАК ОстаточнаяСтоимостьПР,
	|	ТаблицаОстаточнойСтоимости.ОстаточнаяСтоимостьВР КАК ОстаточнаяСтоимостьВР,
    |	ПередачаОСОС.СчетРасходов КАК СчетРасходов,
	|	ПередачаОСОС.Субконто КАК Субконто
	|ИЗ 
	|	ТаблицаОстаточнойСтоимости 
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ОсновноеСредство, СчетРасходов, Субконто ИЗ Документ.ПередачаОС.ОС ГДЕ Ссылка = &Ссылка) КАК ПередачаОСОС
	|	ПО ТаблицаОстаточнойСтоимости.ОсновноеСредство = ПередачаОСОС.ОсновноеСредство
	|";
	ТаблицаОстаточнойСтоимости = Запрос.Выполнить().Выгрузить();
    
    Если ТаблицаОстаточнойСтоимости.Количество() = 0 Тогда
        
    		ОбщегоНазначения.СообщитьОбОшибке("Основные средства сняты с учета на счете 45.04 в указанной организации.",,, СтатусСообщения.Важное);
    		Отказ = Истина;
    		Возврат;
    КонецЕсли;
    
    
    Для Каждого СтрокаТаблицы Из ТаблицаОстаточнойСтоимости Цикл
        
        Если СтрокаТаблицы.ОстаточнаяСтоимость = 0 Тогда
            ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаТаблицы.ОсновноеСредство+"> снято с учета на счете 45.04 в указанной организации.",,, СтатусСообщения.Важное);
            Отказ = Истина;
        КонецЕсли;
            
        Проводка 					= Проводки.Добавить();
        Проводка.Период             = СтруктураШапкиДокумента.Дата;
		Проводка.Организация        = СтруктураШапкиДокумента.Организация;
        Проводка.Содержание 		= Содержание;
        Проводка.СчетКт 			= ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости;
        БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Контрагент);
        БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.ОсновноеСредство);
        
        БухгалтерскийУчет.УстановитьПодразделенияПроводки(
        Проводка, ДокументОтгрузки.ПодразделениеОрганизации, ДокументОтгрузки.ПодразделениеОрганизации);
        
        Проводка.СчетДт 			= СтрокаТаблицы.СчетРасходов;
        БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто);
        БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.ОсновноеСредство);
        
        Проводка.Сумма 		= СтрокаТаблицы.ОстаточнаяСтоимость;
        НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаТаблицы.ОстаточнаяСтоимостьНУ,СтрокаТаблицы.ОстаточнаяСтоимостьНУ,СтрокаТаблицы.ОстаточнаяСтоимостьПР,СтрокаТаблицы.ОстаточнаяСтоимостьПР,СтрокаТаблицы.ОстаточнаяСтоимостьВР,СтрокаТаблицы.ОстаточнаяСтоимостьВР,Проводка);
        
        Если Проводка.СчетДт.Количественный Тогда
            Проводка.КоличествоДт = 1;
        КонецЕсли;
        
    КонецЦикла;	
    
   // Выручка и НДС 
    
    НачислятьНДСНедвижимости = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация).НачислятьНДСПриПередачеНедвижимости;
	
	ТаблицыДокумента = Новый Структура("ТаблицаПоТоварам", ТаблицаПоОС);
	
	ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
		СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, Истина, Отказ, Заголовок);
	
	ВыручкаПоБУ = ТаблицаПоОС.Скопировать();
	ВыручкаПоБУ.Свернуть("Номенклатура, СчетДоходов, СчетУчетаНДСПоРеализации, Субконто, СтавкаНДС", 
		"Сумма, СуммаБУ, СуммаНУ, СуммаВал, НДС, НДСВал");
	
	Для каждого СтрокаТаблицы из ВыручкаПоБУ Цикл
		
		// Выручка
       
            
            Если СтрокаТаблицы.СуммаБУ = 0 Тогда
                Продолжить;
            КонецЕсли;
            
            Проводка = Проводки.Добавить();
            
            Проводка.Период       = СтруктураШапкиДокумента.Дата;
            Проводка.Организация  = СтруктураШапкиДокумента.Организация;
            Проводка.Сумма        = СтрокаТаблицы.СуммаБУ;
            
            Проводка.Содержание   = Содержание;
            
            Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
            БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
            БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
            БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
            
            Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
                //Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
                Проводка.ВалютаДт        = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
                Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;
                
            КонецЕсли;
            
            Проводка.СчетКт = СтрокаТаблицы.СчетДоходов;
            БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.Субконто);
            БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
            БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РеализуемыеАктивы", СтрокаТаблицы.Номенклатура);
            
            БухгалтерскийУчет.УстановитьПодразделенияПроводки(
            Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
            
            Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
                
                СуммаНУДт = СтрокаТаблицы.СуммаНУ + СтрокаТаблицы.НДС;
                СуммаНУКт = СтрокаТаблицы.СуммаНУ;
                НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
                СуммаНУДт, СуммаНУКт, Проводка.Сумма - СуммаНУДт, Проводка.Сумма - СуммаНУДт, , , 
                Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
                
            КонецЕсли;
            
               
		// НДС
             
		Если ДокументОтгрузки.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда
			
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СтрокаТаблицы.НДС;
			Проводка.Содержание   = Содержание;
            
                Проводка.СчетДт          = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто);
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РеализуемыеАктивы", СтрокаТаблицы.Номенклатура);
            
            Если НачислятьНДСНедвижимости Тогда
                Проводка.СчетКт          = ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке;
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФВыданные",  СтруктураШапкиДокумента.ДокументОтгрузки);
            Иначе    
                Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет",Перечисления.ВидыПлатежейВГосБюджет.Налог);
             КонецЕсли;
        
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
		КонецЕсли;
		
	КонецЦикла;
    
    Если Не НачислятьНДСНедвижимости Тогда
        ДвиженияРегистровПодсистемыНДСДляОС(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаВзаиморасчетов, Отказ);
        // НДС будет начислен документом "Реализация отргруженных товраов"
    КонецЕсли;
    
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДСДляОС(СтруктураШапкиДокумента, ТаблицаВыручки,ТаблицаАвансов, Отказ)
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СчетОтнесенияНДС = ПланыСчетов.Хозрасчетный.НДС;
		
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ, СчетОтнесенияНДС, ТаблицаАвансов);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистру подсистемы учета УСН
// для отражения реализации
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если НЕ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) Тогда
		Возврат;
	КонецЕсли;
			
	СтруктураДопПараметров = Новый Структура("ТаблицаТМЦ, ТаблицаРасчетов", ТаблицаПоТоварам, ТаблицаВзаиморасчетов);
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, СтруктураДопПараметров);
		
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаЗачетаАвансов, Отказ, Заголовок)
	
    Если ОтгрузкаОС Тогда
        ДвиженияПоРеализацииОС(СтруктураШапкиДокумента, ТаблицаПоТоварам, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН,ТаблицаЗачетаАвансов, Отказ, Заголовок);
    Иначе
        ДвиженияПоРеализацииТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаЗачетаАвансов, Отказ, Заголовок);
    КонецЕсли;
    
	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);
	
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки,ТаблицаВзаиморасчетов,Отказ, Заголовок, ОтработкаДвиженийПоПартиям = Ложь)
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС И Не (ОтработкаДвиженийПоПартиям Или СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке) Тогда
		УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если ОтработкаДвиженийПоПартиям Тогда
		Если ТаблицаВыручки.Количество() = 0 Тогда
			//Отработка по партиям НДС не требуется. 
			Возврат;
		КонецЕсли; 
		
		/////////////////////////////////////////////////////////////////////////////////
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		ТаблицаНДСПартииСписания = УчетНДС.ПодготовитьТаблицуСписанияПартийДляНДС(СтруктураШапкиДокумента, ТаблицаВыручки, Отказ, Заголовок);
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		/////////////////////////////////////////////////////////////////////////////////
		
		Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
			//Партии не найдены или отражение в партионном учете НДС не производится.
			//Дальнейшая обработка не требуется
		    Возврат;
		КонецЕсли; 
		
		ТаблицаДвиженийПартии = Движения.НДСПоПриобретеннымЦенностям.ВыгрузитьКолонки();
		Движения.НДСПоПриобретеннымЦенностям.мПериод          = Дата;
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии, Истина, Движения.Хозрасчетный, Заголовок, Движения);
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии, Ложь, Движения.Хозрасчетный, Заголовок, Движения);
		
		// Занесем в регистр переквалификацию партий (включение/исключение НДС из стоимости)
		Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
			Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
			Движения.НДСПоПриобретеннымЦенностям.ВыполнитьПриход();
		КонецЕсли;
		// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
		/////////////////////////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////////////////////
		// Отработка предположения ставки 0% по НДС покупки.
		// При передачи товаров комиссионеру предположение ставки 0% не должно отрабатывать, только по фактическому отражению реализации
		Если не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			УчетНДСФормированиеДвижений.ОтразитьПредположениеСтавки0(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии, Движения.Хозрасчетный,Заголовок,Движения);
		КонецЕсли;
		// Отработка предположения ставки 0% по НДС покупки.
		/////////////////////////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС по партиям - отразить непосредственное списание.
		ТаблицаДвиженийПартии.Очистить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
		
		Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
		Движения.НДСПоПриобретеннымЦенностям.ВыполнитьРасход();
		// НДС по партиям - отразить непосредственное списание.
		/////////////////////////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС по партиям - отразить занесение на счета товаров отгруженных (45).
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером и СтруктураШапкиДокумента.СложныйУчетНДС Тогда
			// Для операций перемещения на комиссию необходимо отразить поступление по новому счету учета
			ТаблицаДвиженийПартии.Очистить();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
			ТаблицаДвиженийПартии.ЗагрузитьКолонку(ТаблицаНДСПартииСписания.ВыгрузитьКолонку("КорСчетСписания"),"СчетУчета");
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(Справочники.Склады.ПустаяСсылка(),"Склад");
			ТаблицаДвиженийПартии.Колонки.Добавить("Услуга",новый ОписаниеТипов("Булево"));
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(Ложь,"Услуга");
			ТаблицаДвиженийПартии.Колонки.СчетУчета.Имя = "СчетУчетаЦенности";
			
			УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураШапкиДокумента,ТаблицаДвиженийПартии, Движения.НДСПоПриобретеннымЦенностям, Отказ);
		КонецЕсли; 
		// НДС по партиям - отразить занесение на счета товаров отгруженных (45).
		/////////////////////////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС по ОС - при списании ТМЦ они могут перестать принадлежать к будущим ОС,
		// в этом случае необходимо снять блокировку с вычета.
		// Если в результате перемещения ТМЦ будет отнесено на счет учета ОС, необходимо включить блокировку.
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, Движения.НДСПоПриобретеннымЦенностям.Выгрузить(), Движения, Отказ);
		// НДС по ОС
		/////////////////////////////////////////////////////////////////////////////////
		//Все необходимые действия на данном этапе отработаны.
		
	ИначеЕсли Не СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
	
		Если СтруктураШапкиДокумента.УчитыватьНДС Тогда

			УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			СчетОтнесенияНДС = ПланыСчетов.Хозрасчетный.НДС;
				
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ, СчетОтнесенияНДС, ТаблицаВзаиморасчетов);
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	СтруктураШапкиЭтогоДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"          , "ДоговорОрганизация");
 	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"          , "ВидДоговора");

	СтруктураШапкиЭтогоДокумента 	= УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиЭтогоДокумента, мВалютаРегламентированногоУчета);

	Если Не ЗначениеЗаполнено(ДокументОтгрузки) Тогда
		СтруктураШапкиДокумента = СтруктураШапкиЭтогоДокумента;
		Возврат;
	КонецЕсли;
	
	ДокументОтгрузкиОбъект = ДокументОтгрузки.ПолучитьОбъект();
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокументаОтгрузки = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ДокументОтгрузкиОбъект);
		
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС, НачислятьНДСПоОтгрузке, УпрощенныйУчетНДС,НачислятьНДСПриПередачеНедвижимости");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокументаОтгрузки, СтруктураШапкиДокументаОтгрузки.Дата, Отказ, СтруктураШапкиДокументаОтгрузки.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокументаОтгрузки = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ДокументОтгрузкиОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокументаОтгрузки, мВалютаРегламентированногоУчета);
	
	СтруктураШапкиДокументаОтгрузки.Вставить("Дата",			СтруктураШапкиЭтогоДокумента.Дата);
	СтруктураШапкиДокументаОтгрузки.Вставить("Номер",			СтруктураШапкиЭтогоДокумента.Номер);
	СтруктураШапкиДокументаОтгрузки.Вставить("Ссылка",			СтруктураШапкиЭтогоДокумента.Ссылка);
	СтруктураШапкиДокументаОтгрузки.Вставить("ДокументОтгрузки",СтруктураШапкиЭтогоДокумента.ДокументОтгрузки);
	
	СтруктураШапкиДокументаОтгрузки.Вставить("СпособЗачетаАвансов",            СтруктураШапкиЭтогоДокумента.СпособЗачетаАвансов);
	СтруктураШапкиДокументаОтгрузки.Вставить("СчетУчетаРасчетовСКонтрагентом", СтруктураШапкиЭтогоДокумента.СчетУчетаРасчетовСКонтрагентом);
	СтруктураШапкиДокументаОтгрузки.Вставить("СчетУчетаРасчетовПоАвансам",     СтруктураШапкиЭтогоДокумента.СчетУчетаРасчетовПоАвансам);
	
	СтруктураШапкиДокументаОтгрузки.Вставить("ОтражатьВНалоговомУчетеУСН",	СтруктураШапкиЭтогоДокумента.ОтражатьВНалоговомУчетеУСН);
			
	СтруктураШапкиДокумента = СтруктураШапкиДокументаОтгрузки;
	
	// Курсы валют определяем на дату текущего документа
	
	Если СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
	
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.Дата);
		СтруктураШапкиДокумента.Вставить("КурсДокумента", СтруктураКурса.Курс);
		СтруктураШапкиДокумента.Вставить("КратностьДокумента", СтруктураКурса.Кратность);
	
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
	
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.Дата);
		СтруктураШапкиДокумента.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
		СтруктураШапкиДокумента.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
    СтруктураПолей = Новый Структура();
    Если ОтгрузкаОС Тогда
        СтруктураПолей.Вставить("Номенклатура" , "ОсновноеСредство");
    Иначе
        СтруктураПолей.Вставить("Номенклатура" , "Номенклатура");
        СтруктураПолей.Вставить("Услуга"       , "Номенклатура.Услуга");
        СтруктураПолей.Вставить("Количество"   , "Количество");
        СтруктураПолей.Вставить("НомерГТД"     , "НомерГТД");
        СтруктураПолей.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
        СтруктураПолей.Вставить("СчетУчета"  , "ПереданныеСчетУчета");
        СтруктураПолей.Вставить("ПереданныеСчетУчета", "ПереданныеСчетУчета");
        
    КонецЕсли;
    СтруктураПолей.Вставить("Сумма"        , "Сумма");
    СтруктураПолей.Вставить("СтавкаНДС"    , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"          , "СуммаНДС");
	
	СтруктураПолей.Вставить("СчетДоходов", "СчетДоходов");
	СтруктураПолей.Вставить("СчетРасходов","СчетРасходов");
	СтруктураПолей.Вставить("Субконто"   , "Субконто");
	
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации", "СчетУчетаНДСПоРеализации");

	ДокументОтгрузкиОбъект = ДокументОтгрузки.ПолучитьОбъект();
	
	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ДокументОтгрузкиОбъект, ?(ОтгрузкаОС, "ОС", "Товары"), СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	
КонецПроцедуры

// Процедуры и  функции, обслуживающие зачет авансов

Функция ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ТаблицаЗачетаАвансов = ЗачетАвансов.ВыгрузитьКолонки();
	Иначе
		ТаблицаЗачетаАвансов = ЗачетАвансов.Выгрузить();
		ТаблицаЗачетаАвансов.Свернуть("ДокументАванса", "СуммаЗачета");
	КонецЕсли;
	ТаблицаЗачетаАвансов.Колонки.ДокументАванса.Имя = "ДокументРасчетов";
	ТаблицаЗачетаАвансов.Колонки.СуммаЗачета.Имя    = "СуммаВзаиморасчетов";
	
	Возврат ТаблицаЗачетаАвансов;

КонецФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если (ТаблицаЗачетаАвансов.Количество() = 0) Тогда
		
		Если СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли (ТаблицаЗачетаАвансов.Количество() = 1) 
		И (НЕ ЗначениеЗаполнено(ТаблицаЗачетаАвансов[0].ДокументРасчетов)) Тогда
	
		ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		
	Иначе
	
		СтруктураОбязательныхПолей = Новый Структура("ДокументАванса");
    	
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(
			ЭтотОбъект, "ЗачетАвансов", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    
    Если (ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")) Тогда
        
        
        Если НЕ (Основание.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) Тогда
            Возврат;
        КонецЕсли;
        
        // Заполним реквизиты из стандартного набора по документу основанию.
        ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
        
        ДокументОтгрузки = Основание;
    ИначеЕсли (ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаОС")) Тогда
        
        Если НЕ (Основание.ПравоСобственностиПереходитПослеГосРегистрации) Тогда
            Возврат;
        КонецЕсли;
        
        // Заполним реквизиты из стандартного набора по документу основанию.
        ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
        
        ДокументОтгрузки = Основание;
    Иначе
        Возврат
    КонецЕсли;
    
    СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
    
    СчетУчетаРасчетовСКонтрагентом = Основание.СчетУчетаРасчетовСКонтрагентом;
    Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
        СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
        СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
    КонецЕсли;
    
    СчетУчетаРасчетовПоАвансам = Основание.СчетУчетаРасчетовПоАвансам;
    Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовПоАвансам) Тогда
        СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
        СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
    КонецЕсли;
    
    
    
    
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
    ОтгрузкаОС = (ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС"));
    
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);

	// Зачет авансов
	ТаблицаЗачетаАвансов = ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок);

	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
		СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента,Отказ, Заголовок);
        
    // Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаЗачетаАвансов, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
    
    Если Не ЗначениеЗаполнено(ДокументОтгрузки) Тогда
        Возврат;
    КонецЕсли;
    
    ОтгрузкаОС = (ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС")); 
    
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента      = УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументОтгрузки, ?(ОтгрузкаОС, "ОС", "Товары"));
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный");

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураВыданный", Ложь);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

ОтгрузкаОС = (ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС"));