// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизиты Экспорт; // (Регл)

Перем НачислятьАмортизацию;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой ОС-2.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма ОС-2.
//
Функция ПечатьОС2()
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеОС.Организация КАК Организация,
	|	ПеремещениеОС.Организация.КодПоОКПО КАК КодПоОКПО,
	|	ПеремещениеОС.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ПеремещениеОС.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
	// {ОбособленныеПодразделения
	|	ВЫБОР
	|		КОГДА ПеремещениеОС.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ПеремещениеОС.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ПеремещениеОС.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ КАК ПодрСдатчик,
	|	ВЫБОР
	|		КОГДА ПеремещениеОС.ПодразделениеПолучатель.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ПеремещениеОС.ПодразделениеПолучатель.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ПеремещениеОС.ПодразделениеПолучатель.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ КАК ПодрПолучатель,
	// }ОбособленныеПодразделения 
	|	ПеремещениеОС.Номер КАК НомерДок,
	|	ПеремещениеОС.Дата КАК ДатаДок,
	|	ПеремещениеОС.МОЛОрганизации КАК МОЛСдатчик,
	|	ПеремещениеОС.МОЛПолучатель КАК МОЛПолучатель,
	|	Константы.ВалютаРегламентированногоУчета.Наименование КАК Валюта
	|ИЗ
	|	Документ.ПеремещениеОС КАК ПеремещениеОС,
	|	Константы КАК Константы
	|ГДЕ
	|	ПеремещениеОС.Ссылка = &Ссылка";
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",      Ссылка);
	Запрос.УстановитьПараметр("Организация", ВыборкаПоШапке.Организация);
	Запрос.УстановитьПараметр("Период",      Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Запрос.Текст =	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремещениеОСОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	Документ.ПеремещениеОС.ОС КАК ПеремещениеОСОС
	|ГДЕ
	|	ПеремещениеОСОС.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОССрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС)) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.СуммаОстатокДт
	|ПОМЕСТИТЬ ХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаОССрезПоследних),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеОСОС.НомерСтроки КАК НС,
	|	ПеремещениеОСОС.ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА ПеремещениеОСОС.ОсновноеСредство.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ПеремещениеОСОС.ОсновноеСредство.Наименование
	|		ИНАЧЕ ПеремещениеОСОС.ОсновноеСредство.НаименованиеПолное
	|	КОНЕЦ КАК НаименованиеОС,
	|	ПеремещениеОСОС.ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвНомер,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаПеремещения
	|ИЗ
	|	Документ.ПеремещениеОС.ОС КАК ПеремещениеОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО (ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПеремещениеОСОС.ОсновноеСредство)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОССрезПоследних КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК ХозрасчетныйОстатки
	|			ПО (ХозрасчетныйОстатки.Субконто1 = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство)
	|				И (ХозрасчетныйОстатки.Счет = СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета)
	|		ПО (СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство = ПеремещениеОСОС.ОсновноеСредство)
	|ГДЕ
	|	ПеремещениеОСОС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НС";
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	ТабДокумент   = Новый ТабличныйДокумент();
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеОС_ОС2";
	
	Макет                 = ПолучитьМакет("ОС2");
	ОбластьШапка1         = Макет.ПолучитьОбласть("Шапка1");
	ОбластьСтрока         = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвалСтраницы = Макет.ПолучитьОбласть("ПодвалСтраницы");
	ОбластьПодвал         = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапка2         = Макет.ПолучитьОбласть("Шапка2");

	ОбластьШапка1.Параметры.ПодрСдатчик = Строка(ПодразделениеОрганизации);
	ОбластьШапка1.Параметры.ПодрПолучатель = Строка(ПодразделениеПолучатель);
	ОбластьШапка1.Параметры.Заполнить(ВыборкаПоШапке);
	
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаПоШапке.Организация, ВыборкаПоШапке.ДатаДок);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
	
	ОбластьШапка1.Параметры.Организация = ПредставлениеОрганизации;
	
	ТабДокумент.Вывести(ОбластьШапка1);

	ИтогСумма = 0;
	Пока ВыборкаПоОС.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(ВыборкаПоОС);
		
		ОбластьСтрока.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.НаименованиеОС);
		
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьСтрока);
		СтрокаСПодвалом.Добавить(ОбластьПодвал);
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			ТабДокумент.Вывести(ОбластьПодвалСтраницы);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьШапка2);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьСтрока);
		ИтогСумма = ИтогСумма + ВыборкаПоОС.СуммаПеремещения;
		
	КонецЦикла;

	ОбластьПодвал.Параметры.ИтогСумма = ИтогСумма;
	
	Если ЗначениеЗаполнено(ВыборкаПоШапке.МОЛСдатчик) Тогда
		ДанныеМОЛ = ОбщегоНазначения.ДанныеФизЛиц(ВыборкаПоШапке.Организация, ВыборкаПоШапке.МОЛСдатчик, ВыборкаПоШапке.ДатаДок);
		ОбластьПодвал.Параметры.СдатчикДолжность          = ДанныеМОЛ[0].Должность;
		ОбластьПодвал.Параметры.СдатчикРасшифровкаПодписи = ДанныеМОЛ[0].Представление;
		ОбластьПодвал.Параметры.СдатчикТабельныйНомер     = ДанныеМОЛ[0].ТабельныйНомер;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоШапке.МОЛПолучатель) Тогда
		ДанныеМОЛ = ОбщегоНазначения.ДанныеФизЛиц(ВыборкаПоШапке.Организация, ВыборкаПоШапке.МОЛПолучатель, ВыборкаПоШапке.ДатаДок);
		ОбластьПодвал.Параметры.ПолучательДолжность          = ДанныеМОЛ[0].Должность;
		ОбластьПодвал.Параметры.ПолучательРасшифровкаПодписи = ДанныеМОЛ[0].Представление;
		ОбластьПодвал.Параметры.ПолучательТабельныйНомер     = ДанныеМОЛ[0].ТабельныйНомер;
	КонецЕсли;
	
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = ВыборкаПоШапке.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 
	
	ОтветственныеЛица = ОбщегоНазначения.ОтветственныеЛица(ВыборкаПоШапке.Организация, ВыборкаПоШапке.ДатаДок, ПодразделениеОтветственныхЛиц);
	
	ОбластьПодвал.Параметры.ГлавБух = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
	
	ТабДокумент.Вывести(ОбластьПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьОС2()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОС2" Тогда
		
		ТабДокумент = ПечатьОС2();
		
	КонецЕсли; 
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОС2", "ОС-2");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизиты =  "ПодразделениеПолучатель,
								|МОЛПолучатель
								|";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация";

	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, "", мСтрокаРеквизиты, "");

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ПодразделениеОрганизации) И ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) И СтруктураШапкиДокумента.ПодразделениеОрганизации.Владелец <> СтруктураШапкиДокумента.Организация Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Выбранное подразделение организации не соответствует указанной организации", Отказ,Заголовок);
	КонецЕсли;
	
	//Проверим на виды операций, которые не будут полностью отработаны в данном документе
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету 
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию 
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание Тогда

		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не будут полноценно отражены данным документом (учетное состояние ОС не изменится)!",,Заголовок);

	КонецЕсли;


КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, "", мСтрокаРеквизиты, "", "ОС");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

	// Проверим соответствие организаций ОС и организации документа

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОС"      , ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("ВыбОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаСреза"     , Новый Граница(СтруктураШапкиДокумента.Дата, ВидГраницы.Исключая));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МестонахождениеОСБухгалтерскийУчет.Местонахождение  КАК ПодразделениеОрганизации,
	|	МестонахождениеОСБухгалтерскийУчет.МОЛ              КАК МОЛ,
	|	МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство КАК ОсновноеСредство
	|
	|ИЗ
	|	 РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаСреза, (ОсновноеСредство В(&СписокОС) И Организация = &ВыбОрганизация)) КАК МестонахождениеОСБухгалтерскийУчет
	|";
	ВыборкаОС = Запрос.Выполнить().Выбрать();

	Если ВыборкаОС.Количество() > 0 Тогда

		Пока ВыборкаОС.Следующий() Цикл
			
			Если ВыборкаОС.ПодразделениеОрганизации <> СтруктураШапкиДокумента.ПодразделениеОрганизации Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Основное средство <" + ВыборкаОС.ОсновноеСредство + "> не отражалось в учете в подразделении <" + СтруктураШапкиДокумента.ПодразделениеОрганизации + ">.",,, СтатусСообщения.Важное);
				Отказ = Истина;
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаОС.МОЛ <> СтруктураШапкиДокумента.МОЛОрганизации Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Основное средство <" + ВыборкаОС.ОсновноеСредство + "> не отражалось в учете за МОЛ <" + СтруктураШапкиДокумента.МОЛОрганизации + ">.",,, СтатусСообщения.Важное);
				Отказ = Истина;
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ПроверкаРеквизитов()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС,Отказ, Заголовок)

	ДатаДока = Дата;
	ИзменятьСпособОтраженияРасходовПоАмортизации = ЗначениеЗаполнено(СтруктураШапкиДокумента.СпособОтраженияРасходовПоАмортизации);
	ИзменятьНачислениеАмортизации                = ЗначениеЗаполнено(СтруктураШапкиДокумента.НачислениеАмортизации);

	МестонахождениеОСОрганизаций = Движения.МестонахождениеОСБухгалтерскийУчет;
	ОперацииОС                   = Движения.СобытияОСОрганизаций;

	Для каждого СтрокаОС Из ТаблицаПоОС Цикл

		Движение = МестонахождениеОСОрганизаций.Добавить();
	
		Движение.Период           = ДатаДока;
		Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		Движение.Организация      = СтруктураШапкиДокумента.Организация;
		Движение.МОЛ              = СтруктураШапкиДокумента.МОЛПолучатель;
		Движение.Местонахождение  = СтруктураШапкиДокумента.ПодразделениеПолучатель;

		// Движения по регистру СобытияОСОрганизаций
		Движение = ОперацииОС.Добавить();
		Движение.Период				= ДатаДока;
		Движение.ОсновноеСредство	= СтрокаОС.ОсновноеСредство;
		Движение.Организация		= СтруктураШапкиДокумента.Организация;
		Движение.Событие 			= СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента	= Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента		= СтруктураШапкиДокумента.Номер;
		
		// Движения по регистру СпособыОтраженияРасходовПоАмортизации
		Если ИзменятьСпособОтраженияРасходовПоАмортизации Тогда
		
			Движение = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.Добавить();
			Движение.Период                                = СтруктураШапкиДокумента.Дата;
			Движение.ОсновноеСредство                      = СтрокаОС.ОсновноеСредство;
			Движение.Организация                           = СтруктураШапкиДокумента.Организация;
			Движение.СпособыОтраженияРасходовПоАмортизации = СтруктураШапкиДокумента.СпособОтраженияРасходовПоАмортизации;
			
		КонецЕсли;

		// Движения по регистру НачислениеАмортизацииОСБухгалтерскийУчет
		Если ИзменятьНачислениеАмортизации Тогда
		
			Движение = Движения.НачислениеАмортизацииОСБухгалтерскийУчет.Добавить();
			Движение.Период               = СтруктураШапкиДокумента.Дата;
			Движение.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
			Движение.Организация          = СтруктураШапкиДокумента.Организация;
			Движение.НачислятьАмортизацию = ?(СтруктураШапкиДокумента.НачислениеАмортизации = НачислятьАмортизацию, Истина, Ложь);
			
		КонецЕсли;

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			// Движения по регистру НачислениеАмортизацииОСНалоговыйУчет
			Если ИзменятьНачислениеАмортизации Тогда
			
				Движение = Движения.НачислениеАмортизацииОСНалоговыйУчет.Добавить();
				Движение.Период               = СтруктураШапкиДокумента.Дата;
				Движение.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
				Движение.Организация          = СтруктураШапкиДокумента.Организация;
				Движение.НачислятьАмортизацию = ?(СтруктураШапкиДокумента.НачислениеАмортизации = НачислятьАмортизацию, Истина, Ложь);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	// {ОбособленныеПодразделения
	
	Если ПодразделениеОрганизации = ПодразделениеПолучатель Тогда
		Возврат;
	КонецЕсли;
	
	Проводки = Движения.Хозрасчетный;
	
	// Начисление амортизации за текущий период.
	УправлениеВнеоборотнымиАктивами.НачислениеАмортизации(ЭтотОбъект, 
	                                СтруктураШапкиДокумента, 
	                                ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"),
	                                ,
	                                ,
	                                ,
	                                СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
	                                Отказ, 
	                                Заголовок);
									
	Если НЕ Отказ Тогда
		Проводки.Записать();
	КонецЕсли;
	
	// Выборка остатков по основным средствам в регистрах бухгалтерии.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоОС);
	Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Период",          Новый Граница(МоментВремени()));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерСтроки,
	|   ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство,
	|	ХозрасчетныйОстатки.Счет,
	|	ЕСТЬNULL(МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ПодразделениеОрганизации,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаОстатокДт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК СуммаОстатокКт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокДт, 0) КАК СуммаНУОстатокДт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокКт, 0) КАК СуммаНУОстатокКт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокДт, 0) КАК СуммаПРОстатокДт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокКт, 0) КАК СуммаПРОстатокКт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокДт, 0) КАК СуммаВРОстатокДт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокКт, 0) КАК СуммаВРОстатокКт
	|ИЗ
	|	ОсновныеСредства,
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация) КАК ХозрасчетныйОстатки
	|	ПО ОсновныеСредства.ОсновноеСредство = ХозрасчетныйОстатки.Субконто1
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Период, Организация = &Организация) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	|УПОРЯДОЧИТЬ ПО
	|	ОсновныеСредства.НомерСтроки, ХозрасчетныйОстатки.Счет.Код
	|";
	Остатки = Запрос.Выполнить().Выбрать();
	
	// Движения по регистрам бухгалтерии.
	Пока Остатки.Следующий() Цикл
		
		// Перемещение дебетовых остатков 
		Если ЗначениеЗаполнено(Остатки.Счет)
		   И (Остатки.СуммаОстатокДт > 0
		      ИЛИ Остатки.СуммаНУОстатокДт > 0 
		      ИЛИ Остатки.СуммаПРОстатокДт <> 0 
		      ИЛИ Остатки.СуммаВРОстатокДт <> 0) Тогда
		
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Перемещение ОС";
			Проводка.Сумма        = Остатки.СуммаОстатокДт;
			
			Проводка.СчетДт          = Остатки.Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", Остатки.ОсновноеСредство);

			Проводка.СчетКт          = Остатки.Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", Остатки.ОсновноеСредство);
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеПолучатель, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Остатки.СуммаНУОстатокДт,Остатки.СуммаНУОстатокДт,Остатки.СуммаПРОстатокДт,Остатки.СуммаПРОстатокДт,Остатки.СуммаВРОстатокДт,Остатки.СуммаВРОстатокДт,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
			КонецЕсли;

		КонецЕсли;
		
		// Перемещение кредитовых остатков 
		Если ЗначениеЗаполнено(Остатки.Счет)
		   И (Остатки.СуммаОстатокКт > 0
		      ИЛИ Остатки.СуммаНУОстатокКт > 0 
		      ИЛИ Остатки.СуммаПРОстатокКт <> 0 
		      ИЛИ Остатки.СуммаВРОстатокКт <> 0) Тогда
		   
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Перемещение ОС";
			Проводка.Сумма        = Остатки.СуммаОстатокКт;
			
			Проводка.СчетДт          = Остатки.Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", Остатки.ОсновноеСредство);

			Проводка.СчетКт          = Остатки.Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", Остатки.ОсновноеСредство);
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеПолучатель);
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Остатки.СуммаНУОстатокКт,Остатки.СуммаНУОстатокКт,Остатки.СуммаПРОстатокКт,Остатки.СуммаПРОстатокКт,Остатки.СуммаВРОстатокКт,Остатки.СуммаВРОстатокКт,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;

	// }ОбособленныеПодразделения

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик события "ОбработкаПроведения" документа.
//
Процедура ОбработкаПроведения(Отказ)
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");

	РезультатЗапросаПоОС = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	ПроверкаРеквизитовТЧ(ТаблицаПоОС, СтруктураШапкиДокумента,Отказ, Заголовок);
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);

	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Обработчик события "ОбработкаЗаполнения" документа.
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияОС") Тогда
		
		Организация = Основание.Организация;
		
		Для Каждого ТекСтрокаОС Из Основание.ОС Цикл
			
			Если ТекСтрокаОС.НаличиеПоДаннымУчета И НЕ ТекСтрокаОС.НаличиеФактическое Тогда
				
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ТекСтрокаОС.ОсновноеСредство;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
КонецПроцедуры

НачислятьАмортизацию = 1;

