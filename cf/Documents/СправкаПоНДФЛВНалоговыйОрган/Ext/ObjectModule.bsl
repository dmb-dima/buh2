
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

Процедура ДобавитьИнформациюВДерево(ДеревоВыгрузки, НаборЗаписей) 
	
	Для каждого ЭлементНабора Из НаборЗаписей Цикл
		ИмяЗаписи = ЭлементНабора.Ключ;
		Запись = ЭлементНабора.Значение;
		ТипДанных = Запись.ТипДанных;
		Если ТипДанных = "КОНСТАНТА" Тогда
			
			ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение)
			
		ИначеЕсли ТипДанных = "ЧИСЛО" Тогда
			
			ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Формат(Запись.Значение,"ЧЦ=" + Запись.Размер + "; ЧДЦ=" + Запись.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0"))
			
		ИначеЕсли ТипДанных = "СТРОКА" Тогда
			
			ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение)
			
		ИначеЕсли ТипДанных = "ДАТА" Тогда
			
			ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, ?(Не ЗначениеЗаполнено(Запись.Значение),"00.00.0000", Формат(Запись.Значение,"ДФ=dd.MM.yyyy")))
			
		ИначеЕсли ТипДанных = "ТАБЛИЦА" Тогда	
			
			ПроверятьНеобязательныеПоля = Ложь;
			Для каждого Поле Из Запись.Поля Цикл
				ПроверятьНеобязательныеПоля = Поле.ЭлементНеОбязателен = "Н";
				Если ПроверятьНеобязательныеПоля Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
			Для каждого СтрокаТЗ Из Запись.Значение Цикл
				
				ВыводитьНеобязательныеПоля = Ложь;
				Если ПроверятьНеобязательныеПоля Тогда
					Для каждого Поле Из Запись.Поля Цикл
						Если Поле.ЭлементНеОбязателен = "Н" Тогда
							ВыводитьНеобязательныеПоля = ЗначениеЗаполнено(СтрокаТЗ[Поле.ИмяПоля]);
							Если ВыводитьНеобязательныеПоля Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли;
				
				Атрибуты = Новый Структура;
				Для каждого Поле Из Запись.Поля Цикл
					
					Если Поле.ЭлементНеОбязателен = "Н" И Не ВыводитьНеобязательныеПоля Тогда
						Продолжить;
					КонецЕсли;
					
					Данные = СтрокаТЗ[Поле.ИмяПоля];
					
					Если Поле.ТипДанных = "ЧИСЛО" Тогда
						Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
					ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
						Если Не ЗначениеЗаполнено(Данные) Тогда
							Данные = ""
						Иначе
							Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						КонецЕсли;
					КонецЕсли;
					
					Если Поле.ТипЭлемента = "А" Тогда
						Атрибуты.Вставить(Поле.ИмяПоля, Данные);
					КонецЕсли;
					
				КонецЦикла;
				
				ВеткаСтрокиТЗ = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты);
				
				Для каждого Поле Из Запись.Поля Цикл
					
					Если Поле.ТипЭлемента = "А" Тогда
						Продолжить;
					КонецЕсли;
					
					Если Поле.ЭлементНеОбязателен = "Н" И Не ВыводитьНеобязательныеПоля Тогда
						Продолжить;
					КонецЕсли;
					
					ДобавитьИнформациюВДерево(ВеткаСтрокиТЗ, СтрокаТЗ[Поле.ИмяПоля])
					
				КонецЦикла;
			КонецЦикла; 
			
		ИначеЕсли ТипДанных = "СТРУКТУРА" Тогда	
			
			Атрибуты = Новый Структура;
			Для каждого Поле Из Запись.Поля Цикл
				
				Данные = Запись.Значение[Поле.ИмяПоля];
				
				Если Поле.ЭлементНеОбязателен = "Н" И Не ЗначениеЗаполнено(Данные) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					Если Не ЗначениеЗаполнено(Данные) Тогда
						Данные = ""
					Иначе
						Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
					КонецЕсли;
				КонецЕсли;
				Атрибуты.Вставить(Поле.ИмяПоля, Данные);
			КонецЦикла; 
				
			ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты);
			
		ИначеЕсли ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			Значение = Запись.Значение;
			
			Атрибуты = Новый Структура;
			Для каждого Поле Из Значение Цикл
				Если Поле.Значение.ТипЭлемента = "А" Тогда
					Данные = Поле.Значение.Значение;
					Если Поле.Значение.ТипДанных = "ЧИСЛО" Тогда
						Данные = Формат(Данные,"ЧЦ=" + Поле.Значение.Размер + "; ЧДЦ=" + Поле.Значение.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
					ИначеЕсли Поле.Значение.ТипДанных = "ДАТА" Тогда
						Если Не ЗначениеЗаполнено(Данные) Тогда
							Данные = ""
						Иначе
							Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						КонецЕсли;
					КонецЕсли;
					Атрибуты.Вставить(Поле.Ключ, Данные);
					Значение.Удалить(Поле.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты), Значение)
			
		КонецЕсли;	
		
	КонецЦикла; 
	
КонецПроцедуры

// Загружает формат набора записей файла сведений о доходах физлиц из заданного табличного документа
//
Функция ЗагрузитьФорматНабораЗаписей(Знач МакетФормата, Знач ИмяНабораЗаписей, ЭтоФизЛицо = Ложь)

	ФорматНабора = Новый Структура();
	
	ОбластьНабораЗаписей = МакетФормата.ПолучитьОбласть(ИмяНабораЗаписей);
	
	Для НСтр = 1 По ОбластьНабораЗаписей.ВысотаТаблицы Цикл
		
		ФорматЗаписи = Новый Структура("ТипДанных, Размер, РазрядностьДробнойЧасти, Поля, Значение, ТипЭлемента, ЭлементНеОбязателен");
		
		// имя записи хранится в 4 колонке
		ИмяЗаписи =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 4).Текст);
		
		// тип элемента хранится в 5 колонке
		ТипЭлемента =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 5).Текст);
		
		// тип данных хранится во 2 колонке
		ТипДанных = Врег(СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 2).Текст));
		
		Если ТипДанных = "" Тогда// Если тип данных не задан, то встретили строку - группировку
			Продолжить;
		КонецЕсли; 
		
		ПозицияРазделителя = Найти(ТипДанных,"/");
		Если ПозицияРазделителя <> 0 Тогда
			Если ЭтоФизЛицо Тогда
				ТипДанных = Сред(ТипДанных, ПозицияРазделителя + 1)
			Иначе
				ТипДанных = Лев(ТипДанных, ПозицияРазделителя - 1)
			КонецЕсли;	
		КонецЕсли;
		
		ФорматЗаписи.ТипДанных =  ТипДанных;
		ФорматЗаписи.ТипЭлемента = ТипЭлемента;
		
		// размер хранится в 3 колонке
		СтрРазмерПоля =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 3).Текст);
		
		Если ФорматЗаписи.ТипДанных = "КОНСТАНТА" тогда
			
			// в колонке "размер" должно указываться значение константы
			ФорматЗаписи.Значение = СтрРазмерПоля;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ЧИСЛО" тогда
			
			ПозицияТочки = Найти(СтрРазмерПоля,".");
			Если ПозицияТочки<>0 тогда
				ФорматЗаписи.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
				ФорматЗаписи.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
			Иначе	
				ФорматЗаписи.Размер = Число(СтрРазмерПоля);
				ФорматЗаписи.РазрядностьДробнойЧасти = 0;
			КонецЕсли;	 
			
			ФорматЗаписи.Значение = 0;

		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРОКА" тогда
			
			ФорматЗаписи.Размер = Число(СтрРазмерПоля);
			
			ФорматЗаписи.Значение = "";
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ДАТА" тогда
			
			ФорматЗаписи.Значение = '00010101';
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ТАБЛИЦА" тогда	
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ТаблицаФорматаНабораЗаписей(МакетФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый ТаблицаЗначений;
			
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				Если Поле.ТипДанных = "ТАБЛИЦА" Тогда
					ФорматЗаписи.Значение.Колонки.Добавить(Поле.ИмяПоля);
				Иначе
					Если Поле.ТипДанных = "ЧИСЛО" Тогда
						ОписаниеТиповПоля = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(Поле.Размер, Поле.РазрядностьДробнойЧасти);
					ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
						ОписаниеТиповПоля = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(Поле.Размер);
					ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
						ОписаниеТиповПоля = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
					КонецЕсли; 
					ФорматЗаписи.Значение.Колонки.Добавить(Поле.ИмяПоля, ОписаниеТиповПоля);
				КонецЕсли; 
			
			КонецЦикла; 
			
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРУКТУРА" тогда	
			
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				Если ЭтоФизЛицо Тогда
					ИмяЗаписи = Сред(ИмяЗаписи, ПозицияРазделителя + 1)
				Иначе
					ИмяЗаписи = Лев(ИмяЗаписи, ПозицияРазделителя - 1)
				КонецЕсли;	
			КонецЕсли;
			ПозицияРазделителя = Найти(СтрРазмерПоля,"/");
			Если ПозицияРазделителя <> 0 Тогда
				Если ЭтоФизЛицо Тогда
					СтрРазмерПоля = Сред(СтрРазмерПоля, ПозицияРазделителя + 1)
				Иначе
					СтрРазмерПоля = Лев(СтрРазмерПоля, ПозицияРазделителя - 1)
				КонецЕсли;	
			КонецЕсли;
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ТаблицаФорматаНабораЗаписей(МакетФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый Структура;
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				ПустоеЗначениеПоля = Неопределено;
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ПустоеЗначениеПоля = 0;
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					ПустоеЗначениеПоля = Дата('00010101');
                Иначе
					ПустоеЗначениеПоля = "";
				КонецЕсли; 
				
				ФорматЗаписи.Значение.Вставить(Поле.ИмяПоля, ПустоеЗначениеПоля);
				
			КонецЦикла; 
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			// Имя набора записей хранится в третьей колонке
			ИмяНабора = СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 3).Текст);
			ПозицияРазделителя = Найти(ИмяНабора,"/");
			Если ПозицияРазделителя <> 0 Тогда
				Если ЭтоФизЛицо Тогда
					ИмяНабора = Сред(ИмяНабора, ПозицияРазделителя + 1)
				Иначе
					ИмяНабора = Лев(ИмяНабора, ПозицияРазделителя - 1)
				КонецЕсли;	
			КонецЕсли;
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				Если ЭтоФизЛицо Тогда
					ИмяЗаписи = Сред(ИмяЗаписи, ПозицияРазделителя + 1)
				Иначе
					ИмяЗаписи = Лев(ИмяЗаписи, ПозицияРазделителя - 1)
				КонецЕсли;	
			КонецЕсли;
			ФорматЗаписи.Значение = ЗагрузитьФорматНабораЗаписей(МакетФормата, ИмяНабора, ЭтоФизЛицо);
			
		КонецЕсли;	
		
		ФорматНабора.Вставить(ИмяЗаписи, ФорматЗаписи);
		
	КонецЦикла;	
	
	Возврат ФорматНабора;
	
КонецФункции // ЗагрузитьФорматНабораЗаписей()

//Возвращает формат записи файла сведений в виде таблицы с именами и типами полей
//
Функция ТаблицаФорматаНабораЗаписей(Знач МакетФормата, Знач ИмяЗаписи) 

	ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
	ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипДанных",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	ТаблицаФормаЗаписи.Колонки.Добавить("Размер",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипЭлемента",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1));
	ТаблицаФормаЗаписи.Колонки.Добавить("ЭлементНеОбязателен",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1));

	ОбластьФорматЗаписи = МакетФормата.ПолучитьОбласть(ИмяЗаписи);

	Для НСтр = 1 По ОбластьФорматЗаписи.ВысотаТаблицы Цикл
		
		//имя поля хранится в 4-ой колонке
		ИмяПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 4).Текст);
		Если ИмяПоля <> "" тогда

			НовоеПоле = ТаблицаФормаЗаписи.Добавить();
			НовоеПоле.ИмяПоля = СокрЛП(ИмяПоля);
			//тип данных хранится во 2-ой колонке	
			НовоеПоле.ТипДанных = ВРЕГ(СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 2).Текст));
			//размер поля хранится в 3-ей колонке	
			СтрРазмерПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 3).Текст);
			//Если указан размер поля, сохраним его
			
			Если (НовоеПоле.ТипДанных = "ЧИСЛО" Или НовоеПоле.ТипДанных = "СТРОКА") И СтрРазмерПоля<>"" тогда
				ПозицияТочки = Найти(СтрРазмерПоля,".");
				Если ПозицияТочки<>0 тогда
					НовоеПоле.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
					НовоеПоле.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
				Иначе	
					НовоеПоле.Размер = Число(СтрРазмерПоля);
					НовоеПоле.РазрядностьДробнойЧасти = 0;
				КонецЕсли;	 
			КонецЕсли;	 
			// тип элемента хранится в 5 колонке
			НовоеПоле.ТипЭлемента = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 5).Текст);
			//Признак обязательности элемента хранится в 6-й колонке	
			НовоеПоле.ЭлементНеОбязателен = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 6).Текст);
			
		КонецЕсли;	 

	КонецЦикла;

	Возврат ТаблицаФормаЗаписи;
КонецФункции	 

// Формирует печатную форму - реестр справок о доходах
//
Функция ПечатьРеестра(ИмяМакета = "Реестр")

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Отказ = Ложь;
	
	СтруктураЗаголовка = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Организация,"ИНН, НаименованиеПолное, КодИМНС");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГлавныйБухгалтер", ГлавныйБухгалтер);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ФИОГлБухгалтера.Фамилия + "" "" + ФИОГлБухгалтера.Имя + "" "" + ФИОГлБухгалтера.Отчество, ДанныеДокумента.Наименование) КАК ФИОГлБухгалтера
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо = &ГлавныйБухгалтер) КАК ФИОГлБухгалтера
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ГлавныйБухгалтер";
    Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураЗаголовка.Вставить("ГлБух", Выборка.ФИОГлБухгалтера)	
	КонецЕсли;
	
	Если ИмяМакета = "Реестр2009" Тогда
		СтруктураЗаголовка.Вставить("ОбщаяСуммаДохода", СотрудникиОрганизации.Итог("ОбщаяСуммаДохода"));	
		СтруктураЗаголовка.Вставить("Исчислено", СотрудникиОрганизации.Итог("Исчислено"));	
		СтруктураЗаголовка.Вставить("Удержано", СотрудникиОрганизации.Итог("Удержано"));
		Если ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(Организация) Тогда
			Запрос.УстановитьПараметр("ГлавныйБухгалтер", СправкуПодписал);
		    Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураЗаголовка.Вставить("ФИОРуководителя", Выборка.ФИОГлБухгалтера)	
			КонецЕсли;
		Иначе
			Запрос = Новый Запрос;
			// Установим параметры запроса
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница",Организация);
			Запрос.УстановитьПараметр("ДатаДокумента", Дата);
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			Запрос.Текст = ФормированиеПечатныхФорм.ПолучитьТекстЗапросаПоОтветственнымЛицам(
			"ДатаДокумента",
			"ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
			|И СтруктурнаяЕдиница = &СтруктурнаяЕдиница");
			Запрос.Выполнить();
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОтветственныеЛицаОрганизаций.НаименованиеОтветственногоЛица КАК ФИОРуководителя
			|ИЗ
			|	ВТДанныеОбОтветственномЛице КАК ОтветственныеЛицаОрганизаций";
		    Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураЗаголовка.Вставить("ФИОРуководителя", Выборка.ФИОРуководителя)	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеестрСправок2_НДФЛ";
	
	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка	= Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ОбластьМакетаПодвал	= Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета 		= Макет.ПолучитьОбласть("Строка"); // область сотрудника

	//Надо позвать проверку заполнения реквизитов шапки
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	ОбластьМакетаШапка.Параметры.Заполнить(СтруктураЗаголовка); // Шапка документа.
	ОбластьМакетаШапка.Параметры.Год = Формат(НалоговыйПериод,"ЧЦ=4; ЧДЦ=0; ЧГ=0");
	Если ИмяМакета = "Реестр" Тогда
		ОбластьМакетаШапка.Параметры.ОКАТО = СправкиПоНДФЛ.КодОКАТОизСуммыОКАТОиКПП(ОКАТО_КПП);
	Иначе	
		ОбластьМакетаШапка.Параметры.ДатаСоставления = Формат(Дата, "ДФ=dd.MM.yyyy");
		ОбластьМакетаШапка.Параметры.НомерРеестра = ПроцедурыПерсонифицированногоУчета.НомерПачкиДокумента(Номер);
	КонецЕсли;
	ОбластьМакетаШапка.Параметры.КПП = СправкиПоНДФЛ.КППизСуммыОКАТОиКПП(ОКАТО_КПП);
	ОбластьМакетаШапка.Параметры.КоличествоСправок = Формат(СотрудникиОрганизации.Количество(),"ЧЦ=4; ЧДЦ=0; ЧГ=0");
	
	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
	
	// выводим строки по сотрудникам
	Для каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
		
		НачалоСообщения = "В строке № """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
									""" табл. части ""Сотрудники организации"": ";
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.НомерСправки) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указан номер справки!", Отказ, Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаРождения) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указана дата рождения!", Отказ, Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Фамилия + СтрокаТЧ.Имя) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указаны фамилия и имя!", Отказ, Заголовок);
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТЧ);
		ТабДокумент.Вывести(ОбластьМакета);
	
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		
		Если ИмяМакета = "Реестр2009" Тогда
			 ОбластьМакетаПодвал.Параметры.Заполнить(СтруктураЗаголовка);
		КонецЕсли;
		
		// выводим предварительно подготовленный Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		Возврат ТабДокумент;
		
	КонецЕсли;
	
	
	Возврат Неопределено	

КонецФункции // ПечатьРеестра()
	
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Справка" Тогда
		
		СтруктураДанныхНА = СправкиПоНДФЛ.ДанныеНалоговогоАгентаДля2НДФЛ(Организация, НалоговыйПериод, ОКАТО_КПП, Дата, Телефон, ДолжностьПодписавшегоЛица, СправкуПодписал);
		СтруктураДанныхНА.Признак = ?(ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ,"2","1");
		
		ТабДокумент = СправкиПоНДФЛ.ПечатьСправок2НДФЛ(Ссылка, СтруктураДанныхНА, СотрудникиОрганизации.Выгрузить(), СведенияОДоходах.Выгрузить(), СведенияОВычетах.Выгрузить());
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Справка 2-НДФЛ для передачи в ИФНС "));
	ИначеЕсли ИмяМакета = "Реестр" Тогда
		ТабДокумент = ПечатьРеестра("Реестр");
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Реестр справок о доходах (2-НДФЛ) "));
		Возврат Неопределено;
	ИначеЕсли ИмяМакета = "Реестр2009" Тогда
		ТабДокумент = ПечатьРеестра("Реестр2009");
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Реестр справок о доходах (2-НДФЛ) "));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Неопределено	
	
КонецФункции // Печать

// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
Функция СформироватьВыходнойФайл(Отказ) Экспорт
	
	// здесь поддерживаем формирование сведений в соответствии с Приказом ФНС России от 17.11.2010 № ММВ-7-3/611@ 
	
	Отказ = Ложь;
	
	СоответствиеКодовСтран = Новый Соответствие;
	СоответствиеИменСтран = Новый Соответствие;
	СоответствиеДокументовУдостоверяющиеЛичность = Новый Соответствие;
	СоответствиеКодовРегионов = Новый Соответствие;
	СоответствиеСтавок = Новый Соответствие;
	СоответствиеКодовДоходов = Новый Соответствие;
	СоответствиеКодовВычетов = Новый Соответствие;
	СправкиПоНДФЛ.ПрочитатьКлассификаторыВСоответствия(СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеКодовДоходов, СоответствиеКодовВычетов);
	
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка09] = 9;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка13] = 13;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка15] = 15;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка30] = 30;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка35] = 35;
	
	//-----------------------------------------------------------------------------
	// СВЕДЕНИЯ О НАЛОГОВОМ АГЕНТЕ
	
	СтруктураДанныхНА = СправкиПоНДФЛ.ДанныеНалоговогоАгентаДля2НДФЛ(Организация, НалоговыйПериод, ОКАТО_КПП, Дата, Телефон, ДолжностьПодписавшегоЛица, СправкуПодписал);
	СтруктураДанныхНА.Признак = ?(ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ,"2","1");
	
	СправкиПоНДФЛ.ПроверитьОбщиеДанныеСправки(СтруктураДанныхНА, Отказ);
	ОрганизацияЭтоФизЛицо = Не СтруктураДанныхНА.ЭтоЮрЛицо;
	
	//-----------------------------------------------------------------------------
	// ФОРМИРОВАНИЕ ДЕРЕВА ДАННЫХ
	
	Если Не Отказ Тогда
		
		// Загружаем формат файла сведений
		МакетФормата = ПолучитьМакет("ФорматНДФЛ2010");
		
		// Создаем начальное дерево
		ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
		
		Атрибуты = Новый Соответствие;
		Атрибуты.Вставить("ИдФайл", ИмяФайла);
		Атрибуты.Вставить("ВерсПрог", "1С:" + РегламентированнаяОтчетность.ИДКонфигурации() + " " + РегламентированнаяОтчетность.РедакцияКонфигурации());
		Атрибуты.Вставить("ВерсФорм", "5.01");
		
		Узел2НДФЛ = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "Файл", "", Атрибуты);
		
		// Информационная часть
		ФорматФайла = ЗагрузитьФорматНабораЗаписей(МакетФормата, "Файл", ОрганизацияЭтоФизЛицо);
		
		// Общие сведения служебной части
		НаборЗаписейОбщСвСЧ = ФорматФайла.СвРекв.Значение;
		НаборЗаписейОбщСвСЧ.ОКАТО.Значение = СтруктураДанныхНА.ОКАТО;
		НаборЗаписейОбщСвСЧ.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
		
		ФорматСправка = ФорматФайла.Документ.Значение;
		ФорматСправка.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
		ФорматСправка.ДатаДок.Значение = СтруктураДанныхНА.Дата;
		ФорматСправка.Признак.Значение = СтруктураДанныхНА.Признак;
		ФорматСправка.КодНО.Значение = СтруктураДанныхНА.КодИФНС;
		
		// Сведения об отправителе
		ФорматСправка.СвНА.Значение.ОКАТО.Значение = СтруктураДанныхНА.ОКАТО;
		Если НЕ ЗначениеЗаполнено(СтруктураДанныхНА.Телефон) Тогда
			ФорматСправка.СвНА.Значение.Удалить("Тлф");
		Иначе
			ФорматСправка.СвНА.Значение.Тлф.Значение = Телефон;
		КонецЕсли;
		
		Если ОрганизацияЭтоФизЛицо Тогда
			
			НаборЗаписейОбщСвСЧ.СвФЛ.Значение.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
			
			НаборЗаписейОтправитель = ФорматСправка.СвНА.Значение.СвНАФЛ.Значение;
			НаборЗаписейОтправитель.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.ФИО.Значение.Фамилия = СтруктураДанныхНА.Фамилия;
			НаборЗаписейОтправитель.ФИО.Значение.Имя = СтруктураДанныхНА.Имя;
			НаборЗаписейОтправитель.ФИО.Значение.Отчество = СтруктураДанныхНА.Отчество;
			
		Иначе
			
			// Сведения об отправителе
			НаборЗаписейОтправитель = НаборЗаписейОбщСвСЧ.СвЮЛ.Значение;
			НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
			
			НаборЗаписейОтправитель = ФорматСправка.СвНА.Значение.СвНАЮЛ.Значение;
			НаборЗаписейОтправитель.НаимОрг.Значение = СтруктураДанныхНА.НазваниеОрганизации;
			НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
			
		КонецЕсли;
		
		Атрибуты = Новый Структура;
		Для каждого Поле Из НаборЗаписейОбщСвСЧ Цикл
			Если Поле.Значение.ТипЭлемента = "А" Тогда
				Данные = Поле.Значение.Значение;
				Если Поле.Значение.ТипДанных = "ЧИСЛО" Тогда
					Данные = Формат(Данные,"ЧЦ=" + Поле.Значение.Размер + "; ЧДЦ=" + Поле.Значение.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
				ИначеЕсли Поле.Значение.ТипДанных = "ДАТА" Тогда
					Если Не ЗначениеЗаполнено(Данные) Тогда
						Данные = ""
					Иначе
						Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
					КонецЕсли;
				КонецЕсли;
				Атрибуты.Вставить(Поле.Ключ, Данные);
				НаборЗаписейОбщСвСЧ.Удалить(Поле.Ключ);
			КонецЕсли;
		КонецЦикла;
		ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(Узел2НДФЛ, "СвРекв", "", Атрибуты), НаборЗаписейОбщСвСЧ);
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("НомерСправки");
	СтруктураОтбораДохода = Новый Структура("Месяц,КодДохода");
	ТаблицаВычетовКДоходам = СведенияОВычетах.ВыгрузитьКолонки("СуммаВычета");
	ТаблицаВычетовКДоходам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	Для каждого СтрокаДанных Из СотрудникиОрганизации Цикл 
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
		ДоходыПоВидам = СведенияОДоходах.Выгрузить(СведенияОДоходах.НайтиСтроки(СтруктураОтбора));
		ВычетыПоВидам = СведенияОВычетах.Выгрузить(СведенияОВычетах.НайтиСтроки(СтруктураОтбора));
		
		// Проверка корректности выводимых данных
		СправкиПоНДФЛ.ПроверитьДанныеСотрудника(СтруктураДанныхНА.Признак, СтрокаДанных, ДоходыПоВидам, ВычетыПоВидам, Дата, Отказ, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеИменСтран);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ДоходыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		Для каждого СтрокаТЗ Из ДоходыПоВидам Цикл
			СтрокаТЗ.КодВычетаСтрокой = СоответствиеКодовВычетов[СтрокаТЗ.КодВычета];
		КонецЦикла;
		
		СтруктураДанныхСправки = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСправка);
		
		СтруктураДанныхСправки.НомСпр.Значение = СтрокаДанных.НомерСправки;
		
		// Данные о физическом лице - получателе дохода
		НаборЗаписейФизЛицо = СтруктураДанныхСправки.ПолучДох.Значение;
		
		//  Фамилия, Имя, Отчество
		НаборЗаписейФизЛицо.ФИО.Значение.Фамилия = СтрокаДанных.Фамилия;                     
		НаборЗаписейФизЛицо.ФИО.Значение.Имя = СтрокаДанных.Имя;                     
		НаборЗаписейФизЛицо.ФИО.Значение.Отчество = СтрокаДанных.Отчество;
		Если ПустаяСтрока(СтрокаДанных.ИНН) Тогда
			НаборЗаписейФизЛицо.Удалить("ИННФЛ");
		Иначе
			НаборЗаписейФизЛицо.ИННФЛ.Значение = СтрокаДанных.ИНН;
		КонецЕсли;
		НаборЗаписейФизЛицо.Статус.Значение = ?(СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников,2,?(СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист,3,1));
		НаборЗаписейФизЛицо.ДатаРожд.Значение = СтрокаДанных.ДатаРождения;
		НаборЗаписейФизЛицо.Гражд.Значение = СоответствиеКодовСтран[СтрокаДанных.Гражданство];
		
		// Удостоверение личности
		НаборЗаписейДокУдЛичности = НаборЗаписейФизЛицо.УдЛичнФЛ.Значение;//  КодУдЛичн, СерНомДок 
		НаборЗаписейДокУдЛичности.КодУдЛичн = СоответствиеДокументовУдостоверяющиеЛичность[СтрокаДанных.ВидДокумента];
		НаборЗаписейДокУдЛичности.СерНомДок = СокрЛП(СтрокаДанных.СерияДокумента) + " " + СокрЛП(СтрокаДанных.НомерДокумента);
		
		// Адреса
		Если ЗначениеЗаполнено(СтрокаДанных.АдресРФ) Тогда
			СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(СтрокаДанных.АдресРФ);
			ЗаполнитьЗначенияСвойств(НаборЗаписейФизЛицо.АдрМЖРФ.Значение,СтруктураАдреса); //  Индекс, КодРегион, Район, Город, НасПункт, Улица, Дом, Корп, Кварт
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.КодРегион = СоответствиеКодовРегионов[СтруктураАдреса.Регион];
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.НаселПункт = СтруктураАдреса.НаселенныйПункт;
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.Кварт = СтруктураАдреса.Квартира;
		Иначе // очищаем адресные данные
			НаборЗаписейФизЛицо.Удалить("АдрМЖРФ");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.АдресЗарубежом) Тогда
			СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(СтрокаДанных.АдресЗарубежом);
			НаборЗаписейФизЛицо.АдрИНО.Значение.КодСтр = СоответствиеИменСтран[СтруктураАдреса.Страна];
			НаборЗаписейФизЛицо.АдрИНО.Значение.АдрТекст = СтруктураАдреса.Представление;
		Иначе // очищаем адресные данные
			НаборЗаписейФизЛицо.Удалить("АдрИНО");
		КонецЕсли;
		
		// Сведения об облагаемых доходах
		НаборЗаписейСведенияОДоходах = СтруктураДанныхСправки.СведДох.Значение;
		НаборЗаписейСведенияОДоходах.Ставка.Значение = СоответствиеСтавок[СтрокаДанных.Ставка];
		
		НаборЗаписейДоходы = НаборЗаписейСведенияОДоходах.ДохВыч.Значение;
		ТаблицаДоходов = НаборЗаписейДоходы.СвСумДох.Значение;
		ТаблицаСтрок = ДоходыПоВидам.Скопировать();
		ТаблицаСтрок.Свернуть("Месяц,КодДохода");
		ТаблицаСтрок.Сортировать("Месяц,КодДохода");
		Для каждого СтрокаДоходов Из ТаблицаСтрок Цикл // Доходы
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбораДохода, СтрокаДоходов);
			Строки = ДоходыПоВидам.НайтиСтроки(СтруктураОтбораДохода);
			СуммаДохода = 0;
			ТаблицаВычетовКДоходам.Очистить();
			Для каждого ОтобраннаяСтрока Из Строки Цикл
				СуммаДохода = СуммаДохода + ОтобраннаяСтрока.СуммаДохода;
				Если ЗначениеЗаполнено(ОтобраннаяСтрока.КодВычета) И ЗначениеЗаполнено(ОтобраннаяСтрока.СуммаВычета) Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаВычетовКДоходам.Добавить(), ОтобраннаяСтрока);	
				КонецЕсли;	
			КонецЦикла;
			
			СтрокаТЗ = ТаблицаДоходов.Добавить();
			СтрокаТЗ.Месяц = ?(СтрДлина(СтрокаДоходов.Месяц) = 1,"0","") + СтрокаДоходов.Месяц;
			СтрокаТЗ.КодДоход = СоответствиеКодовДоходов[СтрокаДоходов.КодДохода];
			СтрокаТЗ.СумДоход = СуммаДохода;
			Если ТаблицаВычетовКДоходам.Количество() > 0 Тогда
				ТаблицаДляСтроки = ТаблицаВычетовКДоходам.Скопировать();
				ТаблицаДляСтроки.Колонки.КодВычетаСтрокой.Имя = "КодВычет";
				ТаблицаДляСтроки.Колонки.СуммаВычета.Имя = "СумВычет";
				ОписаниеФормата = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(НаборЗаписейСведенияОДоходах.НалВычССИ.Значение.ПредВычССИ);
				ОписаниеФормата.Значение = ТаблицаДляСтроки;
				СтрокаТЗ.СвСумВыч = Новый Структура("СвСумВыч", ОписаниеФормата);
			КонецЕсли;
		КонецЦикла;
		
		// Налоговые вычеты
		Если ВычетыПоВидам.Количество() > 0 Тогда
			
			НаборЗаписейВычет = НаборЗаписейСведенияОДоходах.НалВычССИ.Значение;
			ТаблицаВычетов = НаборЗаписейВычет.ПредВычССИ.Значение;
			Для каждого СтрокаВычетов Из ВычетыПоВидам Цикл // Вычеты
				СтрокаТЗ = ТаблицаВычетов.Добавить();
				СтрокаТЗ.КодВычет = СоответствиеКодовВычетов[СтрокаВычетов.КодВычета];
				СтрокаТЗ.СумВычет = СтрокаВычетов.СуммаВычета;
			КонецЦикла;
			
			Если (ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код311, "КодВычета") <> Неопределено Или ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код312, "КодВычета") <> Неопределено Или ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код318, "КодВычета") <> Неопределено) Тогда
				Уведомление = НаборЗаписейВычет.УведИмущВыч.Значение;
				Уведомление.НомерУвед = СтрокаДанных.НомерУведомления;
				Уведомление.ДатаУвед = СтрокаДанных.ДатаУведомления;
				Уведомление.ИФНСУвед = СтрокаДанных.КодНалоговогоОрганаУведомления;
			Иначе
				НаборЗаписейВычет.Удалить("УведИмущВыч");
			КонецЕсли;
			
		Иначе
			НаборЗаписейСведенияОДоходах.Удалить("НалВычССИ");
		КонецЕсли;
		
		// Общая сумма дохода и налога на доходы по итогам налогового периода
		
		СтруктураСГДНалПер = НаборЗаписейСведенияОДоходах.СГДНалПер.Значение;
		СтруктураСГДНалПер.СумДохОбщ = СтрокаДанных.ОбщаяСуммаДохода;
		СтруктураСГДНалПер.НалБаза = СтрокаДанных.ОблагаемаяСуммаДохода;
		СтруктураСГДНалПер.НалИсчисл = СтрокаДанных.Исчислено;
		СтруктураСГДНалПер.НалУдерж = СтрокаДанных.Удержано;
		Если НалоговыйПериод > 2010 Тогда
			СтруктураСГДНалПер.НалПеречисл = СтрокаДанных.Перечислено;
		КонецЕсли;
		СтруктураСГДНалПер.НалУдержЛиш = СтрокаДанных.ИзлишнеУдержано;
		СтруктураСГДНалПер.НалНеУдерж = СтрокаДанных.Задолженность;
		
		Атрибуты = Новый Структура;
		Для каждого Поле Из СтруктураДанныхСправки Цикл
			Если Поле.Значение.ТипЭлемента = "А" Тогда
				Данные = Поле.Значение.Значение;
				Если Поле.Значение.ТипДанных = "ЧИСЛО" Тогда
					Данные = Формат(Данные,"ЧЦ=" + Поле.Значение.Размер + "; ЧДЦ=" + Поле.Значение.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
				ИначеЕсли Поле.Значение.ТипДанных = "ДАТА" Тогда
					Если Не ЗначениеЗаполнено(Данные) Тогда
						Данные = ""
					Иначе
						Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
					КонецЕсли;
				КонецЕсли;
				Атрибуты.Вставить(Поле.Ключ, Данные);
				СтруктураДанныхСправки.Удалить(Поле.Ключ);
			КонецЕсли;
		КонецЦикла;
		ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(Узел2НДФЛ, "Документ", "", Атрибуты), СтруктураДанныхСправки);
		
		ОбработкаПрерыванияПользователя();	
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат ""	
	КонецЕсли;
		
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ПроцедурыПерсонифицированногоУчета.СоздатьПотокXML();
	СправкиПоНДФЛ.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	// получаем содержимое файла в виде строки
	СтрокаXML = ПроцедурыПерсонифицированногоУчета.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрокаXML
	
КонецФункции // СформироватьВыходнойФайл()

#КонецЕсли

// Заполняет табличную часть документа физлицами, получавшими доходы
//
// Параметры
//   нет
//
Процедура Автозаполнение() Экспорт

	// Рассчитаем номер первой справки о доходах
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",Дата);
	Запрос.УстановитьПараметр("НалоговыйПериод",НалоговыйПериод);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки) КАК КоличествоСформированныхСправок
	|ИЗ
	|	Документ.СправкаПоНДФЛВНалоговыйОрган.СотрудникиОрганизации КАК СведенияОДоходахФизлицРаботникиОрганизации
	|ГДЕ
	|	СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Дата < &ДатаДокумента
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Проведен
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Организация = &Организация
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.НалоговыйПериод = &НалоговыйПериод";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		НомерПервойСправки = ?(Выборка.КоличествоСформированныхСправок = NULL, 0, Выборка.КоличествоСформированныхСправок) + 1;
	Иначе	
		НомерПервойСправки = 1;
	КонецЕсли;  
	
    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",Дата);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ДатаЗакона229ФЗ", ПроведениеРасчетов.ДатаЗакона229ФЗ());
	Запрос.УстановитьПараметр("ГодНП",НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецНП",КонецГода(Дата(НалоговыйПериод,1,1)));
	Запрос.УстановитьПараметр("ДатаПодачиСведений", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КодПоОКАТО", СправкиПоНДФЛ.КодОКАТОизСуммыОКАТОиКПП(ОКАТО_КПП));
	Запрос.УстановитьПараметр("КПП", СправкиПоНДФЛ.КППизСуммыОКАТОиКПП(ОКАТО_КПП));
	Запрос.УстановитьПараметр("ОКАТО_КПП", ОКАТО_КПП);
	Запрос.УстановитьПараметр("ПустойКодПоОКАТО","");
	Запрос.УстановитьПараметр("ПустойКПП","");
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДФЛСведенияОДоходах.ФизЛицо,
	|	НДФЛСведенияОДоходах.КодДохода,
	|	НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкаПоНДФЛВНалоговыйОрган.СотрудникиОрганизации КАК СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации
	|		ПО НДФЛСведенияОДоходах.ФизЛицо = СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Сотрудник
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Дата < &ДатаДокумента)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Проведен)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Организация = &Организация)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.НалоговыйПериод = &ГодНП)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.ОКАТО_КПП = &ОКАТО_КПП)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка <> &Ссылка)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.ОснованиеДляПредставленияСправок = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность))
	|ГДЕ
	|	НДФЛСведенияОДоходах.ОбособленноеПодразделение = &Организация
	|	И ГОД(НДФЛСведенияОДоходах.Период) = &ГодНП
	|	И НДФЛСведенияОДоходах.ПериодРегистрации < &ДатаПодачиСведений
	|	И ВЫБОР
	|			КОГДА НДФЛСведенияОДоходах.КодПоОКАТО <> &ПустойКодПоОКАТО
	|				ТОГДА НДФЛСведенияОДоходах.КодПоОКАТО
	|			КОГДА ЕСТЬNULL(НДФЛСведенияОДоходах.ПодразделениеОрганизации.КодПоОКАТО, &ПустойКодПоОКАТО) <> &ПустойКодПоОКАТО
	|				ТОГДА НДФЛСведенияОДоходах.ПодразделениеОрганизации.КодПоОКАТО
	|			ИНАЧЕ ЕСТЬNULL(НДФЛСведенияОДоходах.ОбособленноеПодразделение.КодПоОКАТО, &ПустойКодПоОКАТО)
	|		КОНЕЦ = &КодПоОКАТО
	|	И ВЫБОР
	|			КОГДА НДФЛСведенияОДоходах.КПП <> &ПустойКПП
	|				ТОГДА НДФЛСведенияОДоходах.КПП
	|			КОГДА ЕСТЬNULL(НДФЛСведенияОДоходах.ПодразделениеОрганизации.КПП, &ПустойКПП) <> &ПустойКПП
	|				ТОГДА НДФЛСведенияОДоходах.ПодразделениеОрганизации.КПП
	|			ИНАЧЕ ЕСТЬNULL(НДФЛСведенияОДоходах.ОбособленноеПодразделение.КПП, &ПустойКПП)
	|		КОНЕЦ = &КПП
	|	И СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Сотрудник ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.ФизЛицо,
	|	Статусы.Статус
	|ПОМЕСТИТЬ ВТРезидентствоФизлицНаКонецГода
	|ИЗ
	|	РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СрезПоследних(
	|			&КонецНП,
	|			ФизЛицо В
	|				(ВЫБРАТЬ
	|					ФизическиеЛица.ФизЛицо
	|				ИЗ
	|					ВТДоходы КАК ФизическиеЛица)) КАК Статусы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыРегистра.ФизЛицо КАК ФизЛицо,
	|	ПериодыРегистра.МесяцНалоговогоПериода,
	|	ЕСТЬNULL(СтатусНалогоплательщика.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) КАК Статус
	|ПОМЕСТИТЬ ВТРезидентствоФизлицНаКонецМесяца
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Физлица.ФизЛицо КАК ФизЛицо,
	|		Физлица.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		МАКСИМУМ(СтатусНалогоплательщика.Период) КАК Период
	|	ИЗ
	|		ВТДоходы КАК Физлица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусНалогоплательщика
	|			ПО Физлица.ФизЛицо = СтатусНалогоплательщика.ФизЛицо
	|				И (СтатусНалогоплательщика.Период <= КОНЕЦПЕРИОДА(Физлица.МесяцНалоговогоПериода, МЕСЯЦ))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Физлица.ФизЛицо,
	|		Физлица.МесяцНалоговогоПериода) КАК ПериодыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусНалогоплательщика
	|		ПО ПериодыРегистра.ФизЛицо = СтатусНалогоплательщика.ФизЛицо
	|			И ПериодыРегистра.Период = СтатусНалогоплательщика.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Физлица.ФизЛицо,
	|	Физлица.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА Физлица.МесяцНалоговогоПериода < &ДатаЗакона229ФЗ
	|			ТОГДА ЕСТЬNULL(РезидентствоФизлицНаКонецГода.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент))
	|		КОГДА ЕСТЬNULL(РезидентствоФизлицНаКонецГода.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
	|		ИНАЧЕ РезидентствоФизлицНаКонецМесяца.Статус
	|	КОНЕЦ КАК Статус
	|ПОМЕСТИТЬ ВТСтатусы
	|ИЗ
	|	ВТДоходы КАК Физлица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезидентствоФизлицНаКонецМесяца КАК РезидентствоФизлицНаКонецМесяца
	|		ПО Физлица.ФизЛицо = РезидентствоФизлицНаКонецМесяца.ФизЛицо
	|			И Физлица.МесяцНалоговогоПериода = РезидентствоФизлицНаКонецМесяца.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезидентствоФизлицНаКонецГода КАК РезидентствоФизлицНаКонецГода
	|		ПО Физлица.ФизЛицо = РезидентствоФизлицНаКонецГода.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 3000
	|	НДФЛСведенияОДоходах.ФизЛицо КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
	|			ТОГДА ВЫБОР
	|					КОГДА НДФЛСведенияОДоходах.КодДохода = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1010)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|				КОНЕЦ
	|		КОГДА НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|		КОГДА НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
	|		КОГДА НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Ставка
	|ИЗ
	|	ВТДоходы КАК НДФЛСведенияОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусы КАК Статусы
	|		ПО НДФЛСведенияОДоходах.ФизЛицо = Статусы.ФизЛицо
	|			И НДФЛСведенияОДоходах.МесяцНалоговогоПериода = Статусы.МесяцНалоговогоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДФЛСведенияОДоходах.ФизЛицо.Наименование";

	СотрудникиОрганизации.Загрузить(СправкиПоНДФЛ.ДанныеСотрудников(Запрос.Выполнить().Выгрузить(), Дата, НалоговыйПериод));
	Для каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
		СтрокаТЧ.НомерСправки = НомерПервойСправки + СотрудникиОрганизации.Индекс(СтрокаТЧ)
	КонецЦикла;
	СтруктураДанных = СправкиПоНДФЛ.ДанныеОДоходах(СотрудникиОрганизации.Выгрузить(), НалоговыйПериод, Организация, ОбщегоНазначения.ГоловнаяОрганизация(Организация), ОКАТО_КПП, НачалоМесяца(Дата));
	СведенияОДоходах.Загрузить(СтруктураДанных.Доходы);
	СведенияОВычетах.Загрузить(СтруктураДанных.Вычеты);
	ТаблицаИтогов = СтруктураДанных.Итоги;
	Для каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ТаблицаИтогов.Найти(СтрокаТЧ.НомерСправки, "НомерСправки"));
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение()

// Пронумеровывает справки о доходах с учетом уже зафиксированных в ИБ
//
// Параметры
//   нет
//
Процедура ПронумероватьСправки() Экспорт 

	// Рассчитаем номер первой справки о доходах
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",Дата);
	Запрос.УстановитьПараметр("НалоговыйПериод",НалоговыйПериод);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки) КАК КоличествоСформированныхСправок
	|ИЗ
	|	Документ.СправкаПоНДФЛВНалоговыйОрган.СотрудникиОрганизации КАК СведенияОДоходахФизлицРаботникиОрганизации
	|ГДЕ
	|	СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Дата < &ДатаДокумента
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Проведен
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Организация = &Организация
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.НалоговыйПериод = &НалоговыйПериод";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		НомерПервойСправки = ?(Выборка.КоличествоСформированныхСправок = NULL, 0, Выборка.КоличествоСформированныхСправок) + 1;
	Иначе	
		НомерПервойСправки = 1;
	КонецЕсли;  
	
	Для каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
		ПроставитьНовыйНомерСправки(СтрокаТЧ.НомерСправки, НомерПервойСправки, СведенияОДоходах);
		ПроставитьНовыйНомерСправки(СтрокаТЧ.НомерСправки, НомерПервойСправки, СведенияОВычетах);
		СтрокаТЧ.НомерСправки = НомерПервойСправки;
		НомерПервойСправки = НомерПервойСправки + 1;
	КонецЦикла;
	
КонецПроцедуры

// Переписывает номер справки (являющийся ключом соответствия т.ч. документов)
// в логически подчиненных т.ч.
//
// Параметры
// 	СтарыйНомерСправки, НовыйНомерСправки - Число, номера справок
// 	ТабличнаяЧасть - табличная часть документа
//
Процедура ПроставитьНовыйНомерСправки(СтарыйНомерСправки, НовыйНомерСправки, ТабличнаяЧасть) Экспорт

    Для каждого СтрокаТЧ Из ТабличнаяЧасть.НайтиСтроки(Новый Структура("НомерСправки",СтарыйНомерСправки)) Цикл
		СтрокаТЧ.НомерСправки = НовыйНомерСправки
	КонецЦикла;
	
КонецПроцедуры

// Формирует имя файла в установленном формате для организации документа
//
// Параметры
// 	ЭтоЮрЛицо - булево, дополнительная характеристика организации
//
// Возвращаемое значение:
//  Строка с именем файла
//
Функция ИмяФайлаОбмена(ЭтоЮрЛицо) Экспорт

	Параметры = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Организация, "ЮрФизЛицо, КодИФНСПолучателя, КодИМНС, ИНН, КПП");
	
	Возврат "NO_NDFL2"
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПолучателя), Параметры.КодИФНСПолучателя, Параметры.КодИМНС)
			+ "_" + Параметры.КодИМНС
			+ "_" + ?(ЭтоЮрЛицо, СокрЛП(Параметры.ИНН) + СокрЛП(Параметры.КПП), СокрЛП(Параметры.ИНН))
			+ "_" + Формат(Дата, "ДФ=ггггММдд")
			+ "_" + Новый УникальныйИдентификатор();

КонецФункции // ИмяФайлаОбмена()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура("Справка, Реестр, Реестр2009", "2-НДФЛ", "Реестр справок (проект 2011 года)", "Реестр справок 2009 года");
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправкаПоНДФЛВНалоговыйОрган.Дата,
	|	СправкаПоНДФЛВНалоговыйОрган.Ссылка,
	|	СправкаПоНДФЛВНалоговыйОрган.Организация,
	|	ВЫБОР
	|		КОГДА СправкаПоНДФЛВНалоговыйОрган.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА СправкаПоНДФЛВНалоговыйОрган.Организация
	|		ИНАЧЕ СправкаПоНДФЛВНалоговыйОрган.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	СправкаПоНДФЛВНалоговыйОрган.НалоговыйПериод,
	|	СправкаПоНДФЛВНалоговыйОрган.ОКАТО_КПП,
	|	СправкаПоНДФЛВНалоговыйОрган.ОснованиеДляПредставленияСправок,
	|	СправкаПоНДФЛВНалоговыйОрган.ГлавныйБухгалтер,
	|	СправкаПоНДФЛВНалоговыйОрган.СправкуПодписал,
	|	СправкаПоНДФЛВНалоговыйОрган.ДолжностьПодписавшегоЛица
	|ИЗ
	|	Документ.СправкаПоНДФЛВНалоговыйОрган КАК СправкаПоНДФЛВНалоговыйОрган
	|ГДЕ
	|	СправкаПоНДФЛВНалоговыйОрган.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части документам
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Сотрудник,
	|	ВЫБОР
	|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.ПустаяСсылка)
	|	КОНЕЦ КАК СтавкаНалогообложенияРезидента,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Задолженность
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.СправкаПоНДФЛВНалоговыйОрган.СотрудникиОрганизации КАК СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации
	|ГДЕ
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Сотрудник,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.СтавкаНалогообложенияРезидента,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Задолженность,
	|	МИНИМУМ(ПовторяющиесяНомераСправок.НомерСтроки) КАК НомерСтрокиПовторяющегосяНомераСправки,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ПовторяющиесяНомераСправок.НомерСтроки) ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПовторяющиесяНомераСправок,
	|	МИНИМУМ(ПовторяющиесяСправки.НомерСтроки) КАК НомерСтрокиПовторяющейсяСправки,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ПовторяющиесяСправки.НомерСтроки) ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПовторяющиесяСправки
	|ИЗ
	|	ВТДанныеДокумента КАК СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ПовторяющиесяНомераСправок
	|		ПО СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки < ПовторяющиесяНомераСправок.НомерСтроки
	|			И СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки = ПовторяющиесяНомераСправок.НомерСправки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ПовторяющиесяСправки
	|		ПО СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки < ПовторяющиесяСправки.НомерСтроки
	|			И СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Сотрудник = ПовторяющиесяСправки.Сотрудник
	|			И СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ПовторяющиесяСправки.Ставка
	|
	|СГРУППИРОВАТЬ ПО
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Сотрудник,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.СтавкаНалогообложенияРезидента,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки,
	|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Задолженность";
	
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении,
//	Заголовок	 - Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НалоговыйПериод) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан налоговый период, за который подаются сведения!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрЗаменить(ВыборкаПоШапкеДокумента.ОКАТО_КПП, "/","")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан код по ОКАТО, по которому подаются сведения!", Отказ, Заголовок);
	Иначе
		
		Если СтрДлина(СправкиПоНДФЛ.КодОКАТОизСуммыОКАТОиКПП(ВыборкаПоШапкеДокумента.ОКАТО_КПП)) <> 11 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Неверно указан код по ОКАТО!", Отказ, Заголовок);
		КонецЕсли;
		Если ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(ВыборкаПоШапкеДокумента.Организация) Тогда
			КПП = СправкиПоНДФЛ.КППизСуммыОКАТОиКПП(ВыборкаПоШапкеДокумента.ОКАТО_КПП);
			Если НЕ ЗначениеЗаполнено(КПП) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не указан КПП!", Отказ, Заголовок);
			ИначеЕсли СтрДлина(СокрЛП(КПП)) <> 9 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Неверно указан КПП!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОснованиеДляПредставленияСправок) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид справок!", Отказ, Заголовок);
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(ИмяФайла)) < 50 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Неверно указано имя файла!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строки документа.
Процедура ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоШапкеДокумента,ВыборкаПоРаботникиОрганизации, Отказ, Заголовок)

	НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) +
								""" табл. части ""Сотрудники организации"": ";
									
	Если Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указано физическое лицо!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоРаботникиОрганизации.ЕстьПовторяющиесяСправки Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "справка повторяется в другой строке документа (" + ВыборкаПоРаботникиОрганизации.НомерСтрокиПовторяющейсяСправки + ")!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.НомерСправки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указан номер справки!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоРаботникиОрганизации.ЕстьПовторяющиесяНомераСправок Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "номер справки повторяется в другой строке документа (" + ВыборкаПоРаботникиОрганизации.НомерСтрокиПовторяющегосяНомераСправки + ")!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.Ставка) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указана ставка налогообложения дохода!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.Задолженность) И ВыборкаПоШапкеДокумента.ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указана передаваемая в налоговый орган задолженность!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ)
	
	// Вычислим дату для заполнения измерения "МесяцНалоговогоПериода"
	КонецНП = Дата(ВыборкаПоШапкеДокумента.НалоговыйПериод, 12 , 31);
	Если Дата < КонецНП Тогда
		МесяцНалоговогоПериода = Дата;
	Иначе	
		МесяцНалоговогоПериода = КонецНП;
	КонецЕсли; 
	
	Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
	// Свойства
	Движение.Период                 		= Дата;
	Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
	// Измерения
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ФизЛицо                		= ВыборкаПоТЧ.Сотрудник;
	Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоТЧ.СтавкаНалогообложенияРезидента;
	Движение.МесяцНалоговогоПериода      	= МесяцНалоговогоПериода;
	// Ресурсы
	Движение.Налог							= ВыборкаПоТЧ.Задолженность; 
	// Реквизиты
	Движение.ОбособленноеПодразделение  	= ВыборкаПоШапкеДокумента.Организация;
	Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.ПереданоНаВзыскание;
	
	Движение.КодПоОКАТО						= СправкиПоНДФЛ.КодОКАТОизСуммыОКАТОиКПП(ВыборкаПоШапкеДокумента.ОКАТО_КПП);
	Движение.КПП							= СправкиПоНДФЛ.КППизСуммыОКАТОиКПП(ВыборкаПоШапкеДокумента.ОКАТО_КПП);
	
	Движение = Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Добавить();
	// Свойства
	Движение.Период                 		= Дата;
	Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
	// Измерения
	Движение.Организация					= ВыборкаПоШапкеДокумента.Организация;
	Движение.ФизЛицо                		= ВыборкаПоТЧ.Сотрудник;
	Движение.Ставка							= ВыборкаПоТЧ.Ставка;
	Движение.МесяцНалоговогоПериода      	= МесяцНалоговогоПериода;
	Движение.ОКАТО_КПП						= ВыборкаПоШапкеДокумента.ОКАТО_КПП;
	// Ресурсы
	Движение.Сумма							= -ВыборкаПоТЧ.Задолженность; 
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если Проведен И ПринятоНалоговымОрганом Тогда
		Возврат
	КонецЕсли;
	
	
	Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
	КонецЦикла;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ И ВыборкаПоШапкеДокумента.ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ Тогда

			// получим реквизиты табличной части
			ВыборкаПоРаботникиОрганизации = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоШапкеДокумента,ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);
				
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации);

			КонецЦикла;
			
		КонецЕсли; 

	КонецЕсли;
	
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ФАЙЛА СВЕДЕНИЙ
	
	#Если Клиент Тогда
		//При проведении файл формируем заново 
		ТекстФайла = СформироватьВыходнойФайл(Отказ);
	#Иначе
		// На сервере и во внешнем соединении документ проводить нельзя
		ТекстФайла = "";
		Отказ = Истина;
	#КонецЕсли
	

	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения.АрхивДанныхРегламентированнойОтчетности.Добавить();

	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл-пачка сведений о доходах физических лиц (формы 2-НДФЛ)";
	Запись.Данные = ТекстФайла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(СотрудникиОрганизации,, "Сотрудник");

	Если РежимЗаписи = РежимЗаписиДокумента.Запись И НалоговыйПериод = 0 Тогда // документ без налогового периода неконсистентен
		НалоговыйПериод = Макс(Год(Дата),2010);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Отказ = ПринятоНалоговымОрганом;
	Если Не Отказ Тогда
		Для Каждого Набор Из Движения Цикл
			Набор.Очистить();
			Набор.Записать();
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

