// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизиты Экспорт; // (Регл)
Перем мВалютаРегламентированногоУчета;
Перем ТаблицаТекущегоСостояния;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, НематериальныйАктив, СчетСписания");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)

	ТекОрганизация	= СтруктураШапкиДокумента.Организация;
	ДатаДока   		= СтруктураШапкиДокумента.Дата;
	
	// Движения по регистрам учета НМА и формирование проводок по начислению амортизации и списанию стоимости.
	
	Период = Новый Граница(МоментВремени(), ВидГраницы.Исключая);
	ТаблицаТекущегоСостояния = УправлениеВнеоборотнымиАктивами.ОпределитьСтоимостьПоСпискуНМА(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.НематериальныйАктив,Период);
	ТаблицаТекущегоСостояния.Индексы.Добавить("НМА");

	ТаблицаАмортизации = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМА_НИОКР(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.НематериальныйАктив, ЭтотОбъект,, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);
	ТаблицаАмортизации.Колонки.НематериальныйАктив.Имя = "ОбъектУчета";
	ТаблицаАмортизации.Индексы.Добавить("ОбъектУчета");

	Проводки   = Движения.Хозрасчетный;
	ТабЗатрат    = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТаблицаАмортизации, СтруктураШапкиДокумента,"Бух", "Списание НМА " + Комментарий);
	//Проводки.Записать(Ложь);

	СостояниеНМА = Движения.СостоянияНМАОрганизаций;
	ТекНМА       = СтруктураШапкиДокумента.НематериальныйАктив;

	// Движения по регистру СостояниеНМА
	Движение = СостояниеНМА.Добавить();
	Движение.Период               = ДатаДока;
	Движение.НематериальныйАктив  = ТекНМА;
	Движение.Организация          = ТекОрганизация;
	Движение.Состояние            = Перечисления.ВидыСостоянийНМА.Списан;

	СтрокаАмортизации = ТаблицаАмортизации.Найти(ТекНМА,"ОбъектУчета");
	СтрокаТТС         = ТаблицаТекущегоСостояния.Найти(ТекНМА,"НМА");

	Если СтрокаТТС <> Неопределено Тогда

		СчетУчетаСтоимости   = СтрокаТТС.СчетУчета;
		СчетУчетаАмортизации = СтрокаТТС.СчетАмортизации;

		Если СтрокаАмортизации = Неопределено тогда
			АмортизацияЗаМесяц   = 0;
			АмортизацияЗаМесяцНУ = 0;
			АмортизацияЗаМесяцПР = 0;
			АмортизацияЗаМесяцВР = 0;
		Иначе
			АмортизацияЗаМесяц   = СтрокаАмортизации.СуммаАмортизации;
			АмортизацияЗаМесяцНУ = СтрокаАмортизации.СуммаАмортизацииНУ;
			АмортизацияЗаМесяцПР = СтрокаАмортизации.СуммаАмортизацииПР;
			АмортизацияЗаМесяцВР = СтрокаАмортизации.СуммаАмортизацииВР;
		КонецЕсли;

		// списание амортизации Д (Счет амортизации) К (счет учета)
		СуммаПроводки   = СтрокаТТС.Амортизация + АмортизацияЗаМесяц;
		СуммаПроводкиНУ = СтрокаТТС.АмортизацияНУ + АмортизацияЗаМесяцНУ;
		СуммаПроводкиПР = СтрокаТТС.АмортизацияПР + АмортизацияЗаМесяцПР;
		СуммаПроводкиВР = СтрокаТТС.АмортизацияВР + АмортизацияЗаМесяцВР;

		Если ((СуммаПроводки <> 0) 
			  ИЛИ (СуммаПроводкиНУ <> 0)
			  ИЛИ (СуммаПроводкиПР <> 0)
			  ИЛИ (СуммаПроводкиВР <> 0))
		   И НЕ (СчетУчетаСтоимости = СчетУчетаАмортизации) Тогда

			Проводка = Проводки.Добавить();
			Проводка.Период      = ДатаДока;
			Проводка.Организация = ТекОрганизация;
			Проводка.Содержание  = "Списание НМА " + Комментарий;
			Проводка.Сумма       = СуммаПроводки;
			
			Проводка.СчетДт = СчетУчетаАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", ТекНМА);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР"		 , ТекНМА);
			Проводка.СуммаНУДт = СуммаПроводкиНУ;
			Проводка.СуммаПРДт = СуммаПроводкиПР;
			Проводка.СуммаВРДт = СуммаПроводкиВР;
			
			Проводка.СчетКт = СчетУчетаСтоимости;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"		 , ТекНМА);
			Проводка.СуммаНУКт = СуммаПроводкиНУ;
			Проводка.СуммаПРКт = СуммаПроводкиПР;
			Проводка.СуммаВРКт = СуммаПроводкиВР;
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
		КонецЕсли;

		// списание остаточной стоимости Д 91.02 К 09.01
		СуммаПроводки = СтрокаТТС.Стоимость - СтрокаТТС.Амортизация - АмортизацияЗаМесяц;
		СуммаПроводкиНУ = СтрокаТТС.СтоимостьНУ - СтрокаТТС.АмортизацияНУ - АмортизацияЗаМесяцНУ;
		СуммаПроводкиПР = СтрокаТТС.СтоимостьПР - СтрокаТТС.АмортизацияПР - АмортизацияЗаМесяцПР;
		СуммаПроводкиВР = СтрокаТТС.СтоимостьВР - СтрокаТТС.АмортизацияВР - АмортизацияЗаМесяцВР;

		Если СуммаПроводки <> 0
		 ИЛИ СуммаПроводкиНУ <> 0 
		 ИЛИ СуммаПроводкиПР <> 0 
		 ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Проводки.Добавить();
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = "Списание НМА " + Комментарий;
			Проводка.Сумма        = СуммаПроводки;

			Проводка.СчетДт = СтруктураШапкиДокумента.СчетСписания;
			Если Проводка.СчетДт.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = ТипЗнч(СтруктураШапкиДокумента.Субконто) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.Субконто);
			КонецЕсли;
			Проводка.СуммаНУДт = СуммаПроводкиНУ;
			Проводка.СуммаПРДт = СуммаПроводкиПР;
			Проводка.СуммаВРДт = СуммаПроводкиВР;

			Проводка.СчетКт = СчетУчетаСтоимости;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"      , ТекНМА);
			Проводка.СуммаНУКт = СуммаПроводкиНУ;
			Проводка.СуммаПРКт = СуммаПроводкиПР;
			Проводка.СуммаВРКт = СуммаПроводкиВР;

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
		КонецЕсли;

	КонецЕсли;

	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		
		ДатаРегистратора = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
		ТаблицаАмортизацииНУ = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМА_НИОКР_НалогРеглФизЛицо(ЭтотОбъект,СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.НематериальныйАктив, Истина, ДатаРегистратора);
		ТаблицаАмортизацииНУ.Колонки.НМА.Имя   = "ОбъектУчета";
		ТаблицаАмортизацииНУ.Колонки.Налог.Имя = "СуммаАмортизации";
		ТаблицаАмортизацииНУ.Колонки.Добавить("СчетАмортизации");
		ТаблицаАмортизацииНУ.Индексы.Добавить("ОбъектУчета");
		
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТаблицаАмортизацииНУ, СтруктураШапкиДокумента, "");
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		ДоходыИРасходыПредпринимателя.ОтражениеАмортизации(ЭтотОбъект, СтруктураШапкиДокумента, ТабЗатрат, УчетнаяПолитикаНУ);
		
		// Списание объекта
		ТаблицаАмортизацииНУ.Свернуть("ОбъектУчета, РасчетныйДокумент, ДокументОплаты, НоменклатурнаяГруппа, ХарактерДеятельности", "СуммаАмортизации,АмортизацияКонечныйОстаток");
		
		Для Каждого НМА Из ТаблицаАмортизацииНУ Цикл
			Если (НМА.СуммаАмортизации + НМА.АмортизацияКонечныйОстаток) <> 0 Тогда
				Движение = Движения.ИПМПЗ.ДобавитьПриход(); // самортизированную часть стоимости сторнируем, чтобы не попала в Книгу учета
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.Организация = СтруктураШапкиДокумента.Организация;
				Движение.НоменклатурнаяГруппа = НМА.НоменклатурнаяГруппа;
				Движение.ХарактерДеятельности = НМА.ХарактерДеятельности;
				Движение.ВидМПЗ = Перечисления.ВидыМПЗ.НМА;
				Движение.Номенклатура = НМА.ОбъектУчета;
				Движение.Партия = НМА.РасчетныйДокумент;
				Движение.ДокументОплаты = НМА.ДокументОплаты;
				Движение.Сумма = -(НМА.СуммаАмортизации + НМА.АмортизацияКонечныйОстаток);
			КонецЕсли;
		КонецЦикла;
		
		//Движения.ИПМПЗ.Записать(Ложь);
		
		ТаблицаПоНМА = Новый ТаблицаЗначений;
		ТаблицаПоНМА.Колонки.Добавить("Номенклатура");
		ТаблицаПоНМА.Колонки.Добавить("СчетДоходов");
		ТаблицаПоНМА.Колонки.Добавить("Субконто");
		ТаблицаПоНМА.Колонки.Добавить("СуммаБезНДС");
		ТаблицаПоНМА.Колонки.Добавить("НДС");
		
		СтрНМА = ТаблицаПоНМА.Добавить();
		СтрНМА.Номенклатура = СтруктураШапкиДокумента.НематериальныйАктив;
		СтрНМА.СчетДоходов = СтруктураШапкиДокумента.СчетСписания;
		СтрНМА.Субконто = СтруктураШапкиДокумента.Субконто;
		СтрНМА.СуммаБезНДС = 0;
		СтрНМА.НДС = 0;
		
		СчетУчета = ПланыСчетов.Хозрасчетный.НематериальныеАктивы;
		
		ДоходыИРасходыПредпринимателя.СписаниеАмортизируемогоИмущества(ЭтотОбъект, СтруктураШапкиДокумента, ТаблицаПоНМА, СчетУчета, "Субконто", УчетнаяПолитикаНУ);
		//Движения.ИПМПЗ.Записать(Ложь);
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	//Проводки.Записать(Ложь);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
		//ДвиженияПоРазницам(СтруктураШапкиДокумента);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
