////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, 
												 Новый Структура("ПлатежноеТребование", "Платежное требование"), 
												 Новый Действие("ОсновныеДействияФормыПечать"), 
												 Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, 
								ЭлементыФормы.ОсновныеДействияФормы, 
								НЕ (мДеревоМакетов.Строки.Количество() = 0));
								
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, 
								ЭлементыФормы.ОсновныеДействияФормы, 
								мДеревоМакетов, 
								Метаданные().Имя,
								Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не (мПодменюПечати = Неопределено) Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, 
							мПодменюПечати, 
							Не (мПодменюПечати = Неопределено), 
							Не (мПодменюПечати = Неопределено));
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

// Процедура выполняет необходимые действия формирования текста назначения платежа
//
Процедура СформироватьНазначениеПлатежа(ТолькоСумму = Ложь)
	
	ПозицияНДС = Найти(НазначениеПлатежа, "В т.ч. НДС");
	Если ПозицияНДС = 0 Тогда
		ПозицияНДС = Найти(НазначениеПлатежа, "Без налога (НДС)");
	КонецЕсли;
	
	Если ТолькоСумму Тогда
		
		ТекстНазначение = ?(ПозицияНДС = 0, НазначениеПлатежа, Лев(НазначениеПлатежа, ПозицияНДС - 1));
		Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
			ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(СчетКонтрагента.ТекстНазначения) Тогда
			ТекстНазначение = СчетКонтрагента.ТекстНазначения;
		Иначе
			ТекстНазначение = "Оплата по договору ";
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		ТекстНДС = "Без налога (НДС)";
	ИначеЕсли СуммаНДС > 0 Тогда
		ТекстНДС = "В т.ч. НДС " 
			+ ?(ЗначениеЗаполнено(СтавкаНДС), " (" + СтавкаНДС + ") ", "")
			+ Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	Иначе
		ТекстНДС = "";
	КонецЕсли;
	
	НазначениеПлатежа = ТекстНазначение
		+ ?(ПустаяСтрока(ТекстНДС),   "", Символы.ПС + ТекстНДС);
	
КонецПроцедуры // СформироватьНазначениеПлатежа()

// Процедура устанавливает видимость закладок. 
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, Ложь);
		
	// Плательщик - контрагент
	ЭлементыФормы.НадписьРеквизитыПлательщика.Заголовок = 
		"ИНН " + АвтоЗначенияРеквизитов.ИННПолучателя 
		+ ", " + АвтоЗначенияРеквизитов.ТекстПолучателя;
	// Получатель - наша организация
	ЭлементыФормы.НадписьРеквизитыПолучателя.Заголовок = 
		"ИНН " + АвтоЗначенияРеквизитов.ИННПлательщика
		+ ", " + АвтоЗначенияРеквизитов.ТекстПлательщика;

	ЭлементыФормы.СрокДляАкцепта.Доступность 	= САкцептом;
	ЭлементыФормы.ОснованиеДляБезакцептногоСписания.Доступность = НЕ САкцептом;

КонецПроцедуры // УстановитьВидимость()

// Процедура выполняет действия, необходимые при выборе счета организации
//
Процедура ПриИзмененииСчетаОрганизации()
	
	Если СчетОрганизации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		Организация = СчетОрганизации.Владелец;
	КонецЕсли;
	
	ВалютаДокумента = СчетОрганизации.ВалютаДенежныхСредств;
	
	Если (НЕ СчетКонтрагента.Пустая()) 
	И (НЕ СчетОрганизации.ВалютаДенежныхСредств = СчетКонтрагента.ВалютаДенежныхСредств) Тогда
		Сообщить("Валюта счета контрагента не соответствует валюте счета организации!");
		СчетКонтрагента = "";
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриИзмененииСчетаОрганизации()

// Процедура выполняет действия, необходимые при выборе счета контрагента
//
Процедура ПриИзмененииСчетаКонтрагента()
	
	Если (СчетКонтрагента.Пустая()) Тогда
		Возврат;
	ИначеЕсли НЕ (СчетОрганизации.Пустая()) 
		И НЕ (СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств) Тогда
		
		Сообщить("Валюта счета контрагента не соответствует валюте счета организации!");
		СчетКонтрагента = "";
		Возврат;
	КонецЕсли;
	
	Если (Контрагент.Пустая()) Тогда
		Контрагент = СчетКонтрагента.Владелец;
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриИзмененииСчетаКонтрагента()

// Процедура выполняет действия, необходимые при выборе организации
//
// Параметры:
//  Нет.
//
Процедура НачальноеЗаполнениеПриВыбореОрганизации()
	
	Если Организация.Пустая() Тогда
		СчетОрганизации = "";
	КонецЕсли;
	
КонецПроцедуры	// НачальноеЗаполнениеПриВыбореОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыПлатежногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, ПараметрОбъектКопирования);
		
		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда

			САкцептом = ВосстановитьЗначение("ПлатежноеТребованиеСАкцептом");

			ВидПлатежаПоУмолчанию = ВосстановитьЗначение("ПлатежноеТребованиеВидПлатежа");
			ВидПлатежаБылСохранен = (ВидПлатежаПоУмолчанию = "")
					ИЛИ НЕ (ЭлементыФормы.ВидПлатежа.СписокВыбора.НайтиПоЗначению(ВидПлатежаПоУмолчанию) = Неопределено);
									
			Если ВидПлатежаБылСохранен Тогда
				ВидПлатежа = ВидПлатежаПоУмолчанию;
			Иначе
				ВидПлатежа = ""; // Вид платежа по умолчанию не заполняется
			КонецЕсли;
			
			ОчередностьПлатежа = 6;
			
			СформироватьНазначениеПлатежа();
	
		КонецЕсли;
		
	КонецЕсли;
	
	// Поддержка механизма автонумерации
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	
	// Запомнить текущие значения реквизитов формы
	мТекущаяДатаДокумента        = Дата;
	
	УстановитьВидимость();
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);	
	
	// Установим активный реквизит.
	УстановитьАктивныйРеквизит();
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
				
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры //ПриЗакрытии

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает активный реквизит.
Процедура УстановитьАктивныйРеквизит()
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,СчетОрганизации,Контрагент,СчетКонтрагента,СуммаДокумента");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов);		

КонецПроцедуры

Процедура ПослеЗаписи()

	УстановитьКнопкиПечати();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	Если ТипЗнч(ВладелецФормы) = Тип("Форма") Тогда
		Оповестить("ОбновитьФорму", ВладелецФормы, ЭтотОбъект);
	КонецЕсли;
	
	СохранитьЗначение("ПлатежноеТребованиеВидПлатежа", ВидПлатежа);
	СохранитьЗначение("ПлатежноеТребованиеСАкцептом", САкцептом);
	           
КонецПроцедуры // ПослеЗаписи()
 
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()
  
// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события "ПриИзменении" реквизита "Организация"
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	НачальноеЗаполнениеПриВыбореОрганизации();
	
	Если УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетОрганизации, Организация, мВалютаРегламентированногоУчета) Тогда
		ПриИзмененииСчетаОрганизации();
	КонецЕсли;
	
	КонтрагентПриИзменении(Элемент);
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетКонтрагента"
//
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииСчетаКонтрагента();
	
КонецПроцедуры // СчетКонтрагентаПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетОрганизации"
//
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииСчетаОрганизации();
	
КонецПроцедуры // СчетОрганизацииПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "СчетОрганизации"
//
Процедура СчетОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаСчета = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент);
	ФормаСчета.Отбор.ВалютаДенежныхСредств.Установить(мВалютаРегламентированногоУчета);
	
	Если (НЕ Организация.Пустая()) Тогда
		ФормаСчета.Отбор.Владелец.Установить(Организация);
	КонецЕсли;
	    	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ФормаСчета.ПараметрТекущаяСтрока = Элемент.Значение;
	КонецЕсли;

	ФормаСчета.Открыть();
	
КонецПроцедуры // СчетОрганизацииНачалоВыбора()

// Обработчик события "НачалоВыбора" реквизита "СчетКонтрагента"
//
Процедура СчетКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаСчета = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент);
	ФормаСчета.Отбор.ВалютаДенежныхСредств.Установить(мВалютаРегламентированногоУчета);
	
	Если НЕ (Контрагент.Пустая()) Тогда
		ФормаСчета.Отбор.Владелец.Установить(Контрагент);
	КонецЕсли;
	               	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ФормаСчета.ПараметрТекущаяСтрока = Элемент.Значение;
	КонецЕсли;

	ФормаСчета.Открыть();
	
КонецПроцедуры // СчетКонтрагентаНачалоВыбора()

Процедура КонтрагентПриИзменении(Элемент)
	
	Если УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетКонтрагента, Контрагент, СчетОрганизации.ВалютаДенежныхСредств) Тогда
		ПриИзмененииСчетаКонтрагента();
	КонецЕсли;

	УстановитьВидимость();
	
КонецПроцедуры // КонтрагентПриИзменении()

Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС();
	СформироватьНазначениеПлатежа(Истина);
	
КонецПроцедуры // СтавкаНДСПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СуммаНДС"
//
Процедура СуммаНДСПриИзменении(Элемент)
	
	СформироватьНазначениеПлатежа(Истина);
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении()
	
	ПересчитатьСуммуНДС();
	СформироватьНазначениеПлатежа(Истина);
	
КонецПроцедуры // СуммаДокументаПриИзменении()


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	УстановитьКнопкиПечати();
	УстановитьКнопкиПодменюЗаполненияТЧ();
	     
КонецПроцедуры // ПередОткрытием()

Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

Процедура ОсновныеДействияФормыПечать(Кнопка)

	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли; 
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

Процедура ВидПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранныйВидПлатежа = ЭлементыФормы.ВидПлатежа.СписокВыбора.НайтиПоЗначению(ВидПлатежа);
	ВыбранныйВидПлатежа = ВыбратьИзСписка(ЭлементыФормы.ВидПлатежа.СписокВыбора, Элемент, ВыбранныйВидПлатежа);
	Если НЕ (ВыбранныйВидПлатежа = Неопределено) Тогда
		ВидПлатежа = ВыбранныйВидПлатежа.Значение;
	КонецЕсли;

КонецПроцедуры // ВидПлатежаНачалоВыбора()

Процедура УсловиеОплатыПриИзменении(Элемент)
	
	Если САкцептом Тогда
		ОснованиеДляБезакцептногоСписания = "";
	Иначе
		СрокДляАкцепта = 0;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ

ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Почтой");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Телеграфом");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Электронно");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("", "Не указывать");

