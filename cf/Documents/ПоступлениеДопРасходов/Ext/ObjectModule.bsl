Перем мВалютаРегламентированногоУчета Экспорт;
Перем ПартионныйУчет;
Перем СодержаниеПроводки;
Перем мПоддержкаПБУ18;
Перем ТаблицаВзаиморасчетов;

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция ПечатьПоступлениеДопРасходов()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Курс",            ЭтотОбъект.КурсВзаиморасчетов);
	Запрос.УстановитьПараметр("Кратность",       ЭтотОбъект.КратностьВзаиморасчетов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	НомерВходящегоДокумента,
	|	ДатаВходящегоДокумента,
	|	ДоговорКонтрагента,
	|	Контрагент,
	|	Организация,
	|	Содержание,
	|	Сумма КАК СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ЕСТЬNULL(СуммаНДС, 0) КАК СуммаНДС,
	|	ЕСТЬNULL(ВложенныйЗапрос.ТоварыСумма, 0) КАК ТоварыСумма,
	|	ЕСТЬNULL(ВложенныйЗапрос.ТоварыКоличество, 0) КАК ТоварыКоличество,
	|   ЕСТЬNULL(ВложенныйЗапрос.ТоварыСуммаНДС, 0) КАК ТоварыСуммаНДС
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов,
	|	(ВЫБРАТЬ
	|		СУММА(ПоступлениеДопРасходовТовары.Сумма) КАК ТоварыСумма,
	|		КОЛИЧЕСТВО(ПоступлениеДопРасходовТовары.Номенклатура) КАК ТоварыКоличество,
	|       СУММА(ПоступлениеДопРасходовТовары.СуммаНДС) КАК ТоварыСуммаНДС
	|
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|
	|	ГДЕ
	|		Ссылка = &ТекущийДокумент) КАК ВложенныйЗапрос
	|
	|ГДЕ
	|	ПоступлениеДопРасходов.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Макет       = ПолучитьМакет("Накладная");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеДопРасходов_Накладная";

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	Если ЗначениеЗаполнено(Шапка.НомерВходящегоДокумента) Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = "Доп. расходы № " + СокрЛП(Шапка.НомерВходящегоДокумента) + " от " + Формат(Шапка.ДатаВходящегоДокумента, "ДФ='дд ММММ гггг'")+ " г.";
	Иначе
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Доп. расходы");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	СуммаВсего = Шапка.СуммаДокумента + Шапка.ТоварыСумма;

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	ОбластьМакета.Параметры.НомерСтроки = 1;
	ОбластьМакета.Параметры.Товар       = Шапка.Содержание;
	ОбластьМакета.Параметры.Цена        = СуммаВсего;
	ОбластьМакета.Параметры.Количество  = 1;
	ОбластьМакета.Параметры.Сумма       = СуммаВсего;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаВсего);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Шапка.СуммаНДС + Шапка.ТоварыСуммаНДС);
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = СуммаВсего + ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС + Шапка.ТоварыСуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + 1 + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);

	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // Печать

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная" тогда
		
		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПоступлениеДопРасходов();
		
	ИначеЕсли ИмяМакета = "СправкаРасчетВал" Тогда
		
		// Справка-расчет формирования рублевой суммы документа в валюте
		БухгалтерскийУчетРасчетовСКонтрагентами.НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(Ссылка);
		Возврат;
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "услуга сторонней организации"), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Накладная, СправкаРасчетВал", "Доп. расходы", "Справка-расчет ""Рублевая сумма документа в валюте""");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет счета БУ в строке табличной части
//
Процедура ЗаполнитьСчетаБУРегл(СтрокаТЧ,  СчетаУчета, ЗаполнятьБУ)

	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	Если ЗаполнятьБУ = Истина Тогда
		СтрокаТЧ.СчетУчета  = СчетаУчета.СчетУчета;
		СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;

	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		СтрокаТЧ.СчетУчета    = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры

// Заполняет счета НУ в строке табличной части
//
Процедура ЗаполнитьСчетаНУРегл(СтрокаТЧ, СчетаУчета, ЗаполнятьНУ)

	Если ЗаполнятьНУ  = Истина Тогда
		СтрокаТЧ.СчетУчетаНУ = СчетаУчета.СчетУчета;

	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры

// Заполняет счета НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУСНРегл(СтрокаТЧ, СчетаУчета, ЗаполнятьНУ)

	СтрокаТЧ.ОтражениеВУСН   	= Перечисления.ОтражениеВУСН.Принимаются;

КонецПроцедуры

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Склад = Неопределено;
	
	Если ЗначениеЗаполнено(СтрокаТЧ.ДокументПартии) И ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", СтрокаТЧ.ДокументПартии.Метаданные()) Тогда
		Склад = СтрокаТЧ.ДокументПартии.Склад;
	КонецЕсли;
	
	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);

	ЗаполнитьСчетаБУРегл(СтрокаТЧ, СчетаУчета, ЗаполнятьБУ);
	Если НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда
		ЗаполнитьСчетаУСНРегл(СтрокаТЧ, СчетаУчета, ЗаполнятьНУ);
	Иначе
		ЗаполнитьСчетаНУРегл(СтрокаТЧ, СчетаУчета, ЗаполнятьНУ);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в указанной табличной части
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЦикла;

КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧасти()

Процедура ЗаполнитьСчетаУчетаРасчетов(СчетаУчета = неопределено) Экспорт
	
    Если СчетаУчета = неопределено Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	КонецЕсли;
	СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;

КонецПроцедуры // ЗаполнитьСчетаУчетаРасчетов()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура выполняет заполнение табличной части по поступлению товаров.
// Заполним табличные части по документу основанию (Поступление товаров);
// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваров(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Ссылка,
	|	Док.Ссылка.ВалютаДокумента КАК ВалютаОснования,
	|	Док.Сумма,
	|	Док.СуммаНДС,
	|	Док.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Док.Количество,
	|	Док.СчетУчета,
	|	Док.ОтражениеВУСН,
	|	Док.СчетУчетаНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Ссылка,
	|	Док.Ссылка.ВалютаДокумента,
	|	Док.Сумма,
	|	Док.СуммаНДС,
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|	Док.Количество,
	|	Док.СчетУчета,
	|	Null,
	|	Док.СчетУчетаНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование";

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.ДокументПартии   = ДокументОснование;
		СтрокаТабличнойЧасти.СуммаТовара      = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма + 
		                                                                   ?(Выборка.УчитыватьНДС И НЕ Выборка.СуммаВключаетНДС, Выборка.СуммаНДС, 0),
		                                                                   Выборка.ВалютаОснования ,ВалютаДокумента,
		                                                                   ЗаполнениеДокументов.КурсДокумента(Выборка.Ссылка, мВалютаРегламентированногоУчета),
		                                                                   ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                                                   ЗаполнениеДокументов.КратностьДокумента(Выборка.Ссылка, мВалютаРегламентированногоУчета),
		                                                                   ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

		СтрокаТабличнойЧасти.СчетУчета  = Выборка.СчетУчета;
		СтрокаТабличнойЧасти.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		СтрокаТабличнойЧасти.СчетУчетаНУ  = Выборка.СчетУчета;
		СтрокаТабличнойЧасти.ОтражениеВУСН = ?(ЗначениеЗаполнено(Выборка.ОтражениеВУСН), Выборка.ОтражениеВУСН, Перечисления.ОтражениеВУСН.НеПринимаются);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаТоваров.Колонки.Добавить("Ценность");

	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.Сумма = 0 тогда

		Возврат; //Дополнительное распределение не требуется

	КонецЕсли;

	СуммаКРаспределению = СтруктураШапкиДокумента.Сумма;
	НДСКРаспределению   = СтруктураШапкиДокумента.СуммаНДС;
	КолонкаБазиса       = ?(СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству, "Количество",
	                      ?(СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме,      "СуммаТовара",""));

	Если НЕ ЗначениеЗаполнено(КолонкаБазиса) тогда
		//Не выбран способ распределения
		Возврат;

	ИначеЕсли ТаблицаТоваров.Итог(КолонкаБазиса) = 0 тогда 
		//Базис распределения - пустая колонка!
		Возврат;

	КонецЕсли;

	БазисРаспределения = ТаблицаТоваров.ВыгрузитьКолонку(КолонкаБазиса);
	ИтогРаспределения  = ОбщегоНазначения.РаспределитьПропорционально(СуммаКРаспределению,БазисРаспределения);

	Если НЕ (НДСКРаспределению = 0) тогда
		ИтогРаспределенияНДС = ОбщегоНазначения.РаспределитьПропорционально(НДСКРаспределению,БазисРаспределения);
	КонецЕсли;

	Для НомерСтрокиТаблицы = 0 по ИтогРаспределения.ВГраница() цикл

		Если не ИтогРаспределения[НомерСтрокиТаблицы] = 0 тогда
			ТаблицаТоваров[НомерСтрокиТаблицы].Сумма  = ТаблицаТоваров[НомерСтрокиТаблицы].Сумма + ИтогРаспределения[НомерСтрокиТаблицы];
		КонецЕсли;

		Если Не(НДСКРаспределению = 0) тогда

			Если НЕ ИтогРаспределенияНДС[НомерСтрокиТаблицы] = 0 тогда
				ТаблицаТоваров[НомерСтрокиТаблицы].НДС = ТаблицаТоваров[НомерСтрокиТаблицы].НДС + ИтогРаспределенияНДС[НомерСтрокиТаблицы];
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, 
								 |ВалютаДокумента, Контрагент, ДоговорКонтрагента, 
								 |КурсВзаиморасчетов,КратностьВзаиморасчетов");

	Если НЕ СтруктураШапкиДокумента.Сумма = 0 Тогда
		СтруктураОбязательныхПолей.Вставить("СпособРаспределения");
	КонецЕсли;
	
	СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");

	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	// Зачет авансов
	СтруктураОбязательныхПолей.Вставить("СпособЗачетаАвансов");
	Если (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически)
		ИЛИ (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу) Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество,СчетУчета");

	СтруктураОбязательныхПолей.Вставить("ДокументПартии");

	Если СтруктураШапкиДокумента.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме Тогда
		СтруктураОбязательныхПолей.Вставить("СуммаТовара");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Для Каждого СтрокаТЧ из ТаблицаПоТоварам Цикл

		Если ЗначениеЗаполнено(СтрокаТЧ.СчетУчета) И СтрокаТЧ.СчетУчетаБУЗабалансовый Тогда
			
			СтрокаНачалаСообщенияОбОшибке = "Строка номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
			                               """ табличной части ""Товары"": Доп. расходы не могут быть отнесены на забалансовый счет!"; 

			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке, Отказ, Заголовок);
			
		Иначе
			
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
			                               """ табличной части ""Товары"": Не заполнено значение реквизита ""Счет учета НДС""!"; 

			Если СтруктураШапкиДокумента.УчитыватьНДС 
			   И Не СтруктураШапкиДокумента.НДСВключенВСтоимость 
			   И СтрокаТЧ.НДС <> 0
			   И (Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДС)) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке, Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;
		
		Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтатьяЗатратНУ) Тогда
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
												""" табличной части ""Товары"": Не заполнено значение реквизита ""Статья затрат (НУ)""!"; 
				
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект,"Товары", ТаблицаПоТоварам, Отказ, Заголовок); // Здесь услуг быть не должно.

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Формируем движения по регистрам.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаЗачетаАвансов, Отказ, Заголовок, РежимПроведения)

	ДвиженияПоРегистрамБухгалтерии(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаЗачетаАвансов, Отказ, Заголовок, РежимПроведения);
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	// {УчетДоходовИРасходовИП
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	ТаблицаВзаиморасчетовВрем = ТаблицаВзаиморасчетов.Скопировать();
	ДоходыИРасходыПредпринимателя.ПоступлениеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, 2, ТаблицаПоТоварам,,,, "СтатьяЗатратНУ", ТаблицаВзаиморасчетовВрем);
	// }УчетДоходовИРасходовИП

КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует бухгалтерские и налоговые проводки по регистрам бухгалтерии
// а также регистрирует НДС с распределяемых доп. расходов в регистре НДСДопРасходы
// 
Процедура ДвиженияПоРегистрамБухгалтерии(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаЗачетаАвансов, Отказ, Заголовок, РежимПроведения)

	ДатаДока       = Дата;
	Проводки       = Движения.Хозрасчетный;

	ТаблицыДокумента = Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам);
	
	ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
		СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, 
		СтруктураШапкиДокумента.НДСВключенВСтоимость, Отказ, Заголовок);
	
	ВидыСубконтоСчетов = Новый Соответствие; // кэш видов субконто
	
	ИтогоКоличество  = ТаблицаПоТоварам.Итог("Количество");
	ИтогоСуммаТовара = ТаблицаПоТоварам.Итог("СуммаТовара");

	// Проводки по дополнительным расходам
	Для каждого СтрокаТЧ из ТаблицаПоТоварам Цикл

		Если СтрокаТЧ.СуммаБУ = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Проводки.Добавить();
		
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = СодержаниеПроводки;
		Проводка.Сумма       = СтрокаТЧ.СуммаБУ;
		
		Проводка.СчетДт          = СтрокаТЧ.СчетУчета;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", ?(ПартионныйУчет, СтрокаТЧ.ДокументОприходования, Неопределено));
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтрокаТЧ.Склад);
		
		Если НЕ СтрокаТЧ.СчетУчета.Забалансовый Тогда
			
			Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТЧ.СуммаВал;
			КонецЕсли;
			
		Конецесли;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтрокаТЧ.ПодразделениеОрганизации, СтрокаТЧ.ПодразделениеОрганизации);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если СтрокаТЧ.СчетУчета = СтрокаТЧ.СчетУчетаНУ Тогда
				СубконтоНУ1 = СтрокаТЧ.Номенклатура;
				СубконтоНУ2 = Новый Структура("Тип,Значение", "Партии", ?(ПартионныйУчет, СтрокаТЧ.ДокументОприходования, Неопределено));
				СубконтоНУ3 = Новый Структура("Тип,Значение", "Склады", СтрокаТЧ.Склад);
			Иначе
				СубконтоНУ1 = СтрокаТЧ.СтатьяЗатратНУ;
				СубконтоНУ2 = Неопределено;
				СубконтоНУ3 = Неопределено;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
				СуммаНУ = СтрокаТЧ.СуммаНУ + СтрокаТЧ.НДС;
			Иначе
				СуммаНУ = СтрокаТЧ.СуммаНУ;
			КонецЕсли;
			
			НалоговыйУчет.СоздатьПроводкиПоРазнымСчетамБУиНУ(
				СтруктураШапкиДокумента, Проводки, Проводка, Заголовок, СуммаНУ,
				СтрокаТЧ.СчетУчетаНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3);
			
		КонецЕсли;
		
		// Проводки по НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТЧ.НДС > 0 Тогда

			НалоговыйАгентЗаСчетСобственныхСредств = УчетНДС.НалоговыйАгентЗаСчетСобственныхСредств(СтрокаТЧ.ВидЦенности);
			Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость тогда
				Проводка = Проводки.Добавить();

				Проводка.Период      = ДатаДока;

				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = СодержаниеПроводки;

				Проводка.СчетДт      = СтрокаТЧ.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СФПолученные",    СтруктураШапкиДокумента.Ссылка,Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент,Истина);

				Если Не НалоговыйАгентЗаСчетСобственныхСредств 
					Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
					// Проводка при исполнении обязанностей налогового агента
					Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтрокаТЧ.НДСВал;
					КонецЕсли;
				Иначе
					Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
				КонецЕсли;

				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтрокаТЧ.ПодразделениеОрганизации, СтрокаТЧ.ПодразделениеОрганизации);
				
				Проводка.Сумма       = СтрокаТЧ.НДС;
				Если СтруктураШапкиДокумента.УпрощенныйУчетНДС 
					И СтруктураШапкиДокумента.ПредъявленСчетФактура 
					И СтруктураШапкиДокумента.НДСПредъявленКВычету Тогда
					// Проводки по вычету в случае упрощенного учета НДС
		
					Проводка = Проводки.Добавить();

					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = СодержаниеПроводки;
					
					Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НДС; //68.02
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
					
					Проводка.СчетКт      = СтрокаТЧ.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"СФПолученные", СтруктураШапкиДокумента.Ссылка, Истина, Заголовок);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент, Истина);

					Проводка.Сумма       = СтрокаТЧ.НДС;
					
				КонецЕсли;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.УчетАгентскогоНДС
				И (Не НалоговыйАгентЗаСчетСобственныхСредств 
					Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате) Тогда 

				// Нужно дополнительно сформировать проводку по начислению НДС налогового агента
				Проводка2 = Проводки.Добавить();

				Проводка2.Период          = ДатаДока;
				Проводка2.Организация     = Проводка.Организация;
				Проводка2.Содержание      = "Начислен НДС в качестве налогового агента";

				Проводка2.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Ссылка);
				
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка2.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка2.ВалютнаяСуммаДт = СтрокаТЧ.НДСВал;
				КонецЕсли;
				
				Если Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
					Проводка2.СчетКт          = ПланыСчетов.Хозрасчетный.НДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				Иначе
					Проводка2.СчетКт          = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка2, СтрокаТЧ.ПодразделениеОрганизации, СтрокаТЧ.ПодразделениеОрганизации);
					
				Проводка2.Сумма       = СтрокаТЧ.НДС;

			КонецЕсли;

		КонецЕсли; // Проводки по НДС

	КонецЦикла; // Для каждого СтрокаТЧ из ТаблицаПоТоварам Цикл

	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрамБухгалтерииРегл()

// Вызывается из тела процедуры "ДвиженияПоРегистрам" в процедуре формируются движения, отражающие
// поступление доп. расходов в подсистеме учета УСН.
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если (Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН) Тогда
		Возврат;
	КонецЕсли;
	
	Движения.РасходыПриУСН.Очистить();	
	НаборДвижений = Движения.РасходыПриУСН;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	//ТаблицаДопРасходов = ТаблицаПоТоварам.Скопировать();
	//ТаблицаДопРасходов.Колонки.Добавить("Содержание");
	//ТаблицаДопРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Содержание,"Содержание");
	//ТаблицаДопРасходов.Свернуть("Содержание, СчетУчетаБУ, ОтражениеВУСН", "Сумма, СуммаВал, НДС, НДСВал");
	
	НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаДвижений, 
							Перечисления.ВидыРасходовУСН.ДопРасходы, СтруктураШапкиДокумента.ДоговорКонтрагента,
							Перечисления.СтатусыПартийУСН.Купленные, СтруктураШапкиДокумента.СуммаВключаетНДС);
	
	//Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.РасходыПриУСН.ВыполнитьПриход();
		НаборДвижений.Записать(Истина);
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, Новый Структура("ТаблицаРасчетов", ТаблицаВзаиморасчетов));
			
КонецПроцедуры

// Вызывается из тела процедуры "ДвиженияПоРегистрам" в процедуре формируются движения, отражающие
// поступление доп. расходов в подсистеме учета НДС
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)

	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСПредъявленномуПоставщиком(СтруктураШапкиДокумента, ТаблицаПоТоварам, Движения, Отказ);
		Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
			УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаПоТоварам, Движения, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоТоварам, "ТаблицаПоТоварам", ТаблицаВзаиморасчетов, Движения, Отказ);
	
	Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
		 УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШапкиДокумента,Движения.НДСПредъявленный.Выгрузить(),Движения);
	КонецЕсли; 

	// при необходимости отражаем в регистре партионного учета для НДС
    ТаблицаДвиженийНДСПартии = Движения.НДСПоПриобретеннымЦенностям;
	
	Если ТаблицаПоТоварам.Количество()>0 
		Тогда
		ТаблицаДляНДСПартии = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам
				, Новый Структура("ДокументОприходования, Склад, ВидЦенности,СчетУчетаЦенности,СчетУчетаНДС, Номенклатура,Услуга,НДС,СуммаБезНДС,Количество","Партия"));
		СтрокиКУдалению = Новый массив();
		Для каждого СтрокаТаблицыТоваров Из ТаблицаДляНДСПартии Цикл
			Если СтрокаТаблицыТоваров.Услуга Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицыТоваров);
			КонецЕсли; 
		КонецЦикла;
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДляНДСПартии.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		ТаблицаДляНДСПартии.ЗаполнитьЗначения(Истина,"Услуга");
		УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураШапкиДокумента,ТаблицаДляНДСПартии, ТаблицаДвиженийНДСПартии, Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС, УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"          , "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"          , "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС"    , "УчетАгентскогоНДС");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидАгентскогоДоговора", "ВидАгентскогоДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "НалоговыйАгентПоОплате", "НалоговыйАгентПоОплате");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДС");

	СтруктураПолей.Вставить("Услуга"               , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("СуммаТовара"          , "СуммаТовара");
	СтруктураПолей.Вставить("ДокументОприходования", "ДокументПартии");
	СтруктураПолей.Вставить("Склад" ,                "ДокументПартии.Склад");
	СтруктураПолей.Вставить("ПодразделениеОрганизации" 	,	 "ДокументПартии.ПодразделениеОрганизации");
	СтруктураПолей.Вставить("ВидДоговораПартии" ,    "ДокументПартии.ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("ДокументПартииВидОперации", "ДокументПартии.ВидОперации");
	СтруктураПолей.Вставить("СчетУчета" ,          "СчетУчета");
	СтруктураПолей.Вставить("СчетУчетаБУЗабалансовый","СчетУчета.Забалансовый");
	СтруктураПолей.Вставить("СчетУчетаНДС",          "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетУчетаНУ" ,          "СчетУчетаНУ");
	СтруктураПолей.Вставить("ОтражениеВУСН"  ,       "ОтражениеВУСН");
	СтруктураПолей.Вставить("СтатьяЗатратНУ",        "СтатьяЗатратНУ");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам          = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость);
	
КонецПроцедуры

// Процедуры и  функции, обслуживающие зачет авансов

Функция ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ТаблицаЗачетаАвансов = ЗачетАвансов.ВыгрузитьКолонки();
	Иначе
		ТаблицаЗачетаАвансов = ЗачетАвансов.Выгрузить();
		ТаблицаЗачетаАвансов.Свернуть("ДокументАванса", "СуммаЗачета");
	КонецЕсли;
	ТаблицаЗачетаАвансов.Колонки.ДокументАванса.Имя = "ДокументРасчетов";
	ТаблицаЗачетаАвансов.Колонки.СуммаЗачета.Имя    = "СуммаВзаиморасчетов";
	
	Возврат ТаблицаЗачетаАвансов;

КонецФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если (ТаблицаЗачетаАвансов.Количество() = 0) Тогда
		
		Если СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли (ТаблицаЗачетаАвансов.Количество() = 1) 
		И (НЕ ЗначениеЗаполнено(ТаблицаЗачетаАвансов[0].ДокументРасчетов)) Тогда
	
		ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		
	Иначе
	
		СтруктураОбязательныхПолей = Новый Структура("ДокументАванса");
    	
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(
			ЭтотОбъект, "ЗачетАвансов", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	//Документ можно вводить только на основании поступлений
	Если ТипЗнч(Основание) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Возврат;
	КонецЕсли;	

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	ЗаполнитьТоварыПоПоступлениюТоваров(Основание);

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
    
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Если шапка не заполнена корректно, то дальше лучше не идти, поскольку возможны ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПартионныйУчет = УправлениеЗапасами.ВедетсяПартионныйУчет(ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация));

	мПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(Организация, Дата);	

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Зачет авансов
	ТаблицаЗачетаАвансов = ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок);

	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
		СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента, Отказ, Заголовок);

	Если НЕ Отказ Тогда
		СодержаниеПроводки   = Содержание + ?(ПредъявленСчетФактура, " по сч.ф." + НомерВходящегоСчетаФактуры + " от " + Формат(ДатаВходящегоСчетаФактуры, "ДЛФ=Д"), "");
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаЗачетаАвансов, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураПолученный", Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	
	// Снятие флага НДСПредъявленКВычету если не предъявлен счет-фактура
	Если (НДСВключенВСтоимость Или Не ПредъявленСчетФактура) И НДСПредъявленКВычету Тогда
		НДСПредъявленКВычету = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

