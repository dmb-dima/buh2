////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит текущее значение валюты документа.
Перем мТекущаяВалютаДокумента;

Перем мТекущийДоговорКонтрагента;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущую форму подбора номенклатуры
Перем мФормаПодбораНоменклатуры; 

// Хранит список видов договоров, доступных для данного документа
Перем мСписокВидовДоговоров; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит значение параметра учетной политики УпрощенныйУчетНДС
Перем мУпрощенныйУчетНДС;
 
//Используется для определения необходимости открытия настроек движения после сохранения
Перем ОткрыватьНастройкуДвижений;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный"),
																								ЭтотОбъект, ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка, ЭлементыФормы.ОсновнаяПанель.Страницы.СчетФактура.Видимость);

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура рассчитывает сумму документа и сумму НДС 
// 
Процедура РассчитатьСуммыДокумента()

	СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));

КонецПроцедуры

// Расчет суммы НДС в табличной части, исходя из ставки, заданной в шапке документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуНДСТабличнойЧасти(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
    	                                               УчитыватьНДС, 
													   СуммаВключаетНДС,
            	                                       УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));

КонецПроцедуры // РассчитатьСуммуНДСТабличнойЧасти()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбораНоменклатуры, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена = Ложь;

	Команда = "ПодборВТабличнуюЧастьТовары";
	Валюта  = ВалютаДокумента;
	ИмяТабличнойЧасти = "Товары";
	
	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"           , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора", СписокВидовПодбора);
	
	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"      , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Контрагент"        , Контрагент);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Организация"       , Организация);
	СтруктураПараметровПодбора.Вставить("ТипЦен"            , Неопределено);
	СтруктураПараметровПодбора.Вставить("Склад"             , Неопределено);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"          , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"   , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок",          "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, мФормаПодбораНоменклатуры);

КонецПроцедуры // ДействиеПодбор()

Процедура ТоварыПриАктивизацииСтроки(Элемент)

	Если НЕ (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
	
		СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

		Если СтрокаТЧ = Неопределено Тогда
			ЭлементыФормы.Товары.Колонки.СтатьяЗатратНУ.Доступность = Ложь;
			Возврат;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНУ) Тогда
			ЭлементыФормы.Товары.Колонки.СтатьяЗатратНУ.Доступность = Ложь;
			Возврат;
		КонецЕсли;

		Если СтрокаТЧ.СчетУчетаНУ.ВидыСубконто.Количество() = 0 Тогда
			ЭлементыФормы.Товары.Колонки.СтатьяЗатратНУ.Доступность = Ложь;
			Возврат;
		КонецЕсли;

		Если СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.СтатьиЗатрат") ИЛИ СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ЭлементыФормы.Товары.Колонки.СтатьяЗатратНУ.Доступность = Истина;
		Иначе
			ЭлементыФормы.Товары.Колонки.СтатьяЗатратНУ.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры
 
// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, Количество, Цена;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	
	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура",     Номенклатура);
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Количество;
		
		// Рассчитываем реквизиты табличной части.
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, Истина, Истина);

	КонецЕсли;

	ТабличнаяЧастьИмя = "Товары";
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Пересчитывает суммы в шапке и табличной части документа из одной валюты в другую.
//
// Параметры:
// СтараяВалютаДокумента - старая валюта всех сумм
// НоваяВалютаДокумента - валюта, в которую надо пересчитать суммы
//
Процедура ПересчетСуммДокумента(СтараяВалютаДокумента, НоваяВалютаДокумента, СтарыйКурс = 0, СтараяКратность = 0, ТолькоСуммыТовара = Истина)

	Если СтараяВалютаДокумента = НоваяВалютаДокумента Тогда

		Для каждого СтрокаТЧ из Товары Цикл
			РассчитатьСуммуНДСТабличнойЧасти(СтрокаТЧ);
		КонецЦикла;

		РассчитатьСуммыДокумента();
		
		Возврат;

	КонецЕсли;

	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(НоваяВалютаДокумента, Дата);
	НовыйКурсДокумента      = СтруктураКурсаДокумента.Курс;
	НовыйКратностьДокумента = СтруктураКурсаДокумента.Кратность;

	СтарыйКурс      = ?(СтарыйКурс = 0,      ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),      СтарыйКурс);
	СтараяКратность = ?(СтараяКратность = 0, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтараяКратность);

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл

		Если ТолькоСуммыТовара Тогда
			СтрокаТабличнойЧасти.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма,
													СтараяВалютаДокумента, НоваяВалютаДокумента,
													СтарыйКурс, НовыйКурсДокумента,
													СтараяКратность, НовыйКратностьДокумента);
		КонецЕсли;

		СтрокаТабличнойЧасти.СуммаТовара = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаТовара,
												СтараяВалютаДокумента, НоваяВалютаДокумента,
												СтарыйКурс, НовыйКурсДокумента,
												СтараяКратность, НовыйКратностьДокумента);

		РассчитатьСуммуНДСТабличнойЧасти(СтрокаТабличнойЧасти);

	КонецЦикла;

	Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма,
						СтараяВалютаДокумента, НоваяВалютаДокумента,
						СтарыйКурс, НовыйКурсДокумента,
						СтараяКратность, НовыйКратностьДокумента);

	РассчитатьСуммыДокумента();

КонецПроцедуры // ПересчетСуммДокумента()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда

		КурсВзаиморасчетов      = 0;
		КратностьВзаиморасчетов = 0;

		Возврат;

	КонецЕсли;

	Если Контрагент <> ДоговорКонтрагента.Владелец Тогда
		Контрагент = ДоговорКонтрагента.Владелец;
	КонецЕсли;

	Если НЕ ((Товары.Итог("Сумма") = 0) И (Товары.Итог("СуммаТовара") = 0) И (Сумма = 0)) Тогда

		Если ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда

			НоваяВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;

			Если ВалютаДокумента <> НоваяВалютаДокумента Тогда
				ТекстВопроса = "Договор с контрагентом предусматривает параметры взаиморасчетов,
							   |отличные от установленных в документе.
							   |Валюта документа: """ +
							   ?(НЕ ЗначениеЗаполнено(ВалютаДокумента), "не задана",СокрЛП(ВалютаДокумента)) +
							   """, договора: """ +  СокрЛП(НоваяВалютаДокумента) + """.
							   |Пересчитать документ в соответствии с договором?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

				Если Ответ = КодВозвратаДиалога.Да Тогда
					ПересчетСуммДокумента(ВалютаДокумента, НоваяВалютаДокумента);
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ВалютаДокумента              = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СтруктураКурсаНовый          = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсВзаиморасчетов           = СтруктураКурсаНовый.Курс;
	КратностьВзаиморасчетов      = СтруктураКурсаНовый.Кратность;
	КурсДокумента                = СтруктураКурсаНовый.Курс;
	КратностьДокумента           = СтруктураКурсаНовый.Кратность;
	мТекущаяВалютаДокумента      = ВалютаДокумента;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	// Зачет авансов
	УстановитьСпособЗачетаАвансов();
	
	ЗаполнитьСчетаУчетаРасчетов();

	ЗаполнитьТекстПроСчетФактуру();
	
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

// Процедура выполняет копирование табличной части заказа поставщику в документ.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//
Процедура ЗаполнитьТабличнуюЧастьПоПоступлению(СпособЗаполнения)

	ФормаПоступления = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();

	ФормаПоступления.Заголовок   = "Выберите документ поступления для заполнения поступления доп. расходов";
	ФормаПоступления.РежимВыбора = Истина;

	Поступление = ФормаПоступления.ОткрытьМодально();
	
	Если Поступление = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Товары.Количество() > 0 И СпособЗаполнения = "Заполнить" Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		Товары.Очистить();

	КонецЕсли;

	ЗаполнитьТоварыПоПоступлениюТоваров(Поступление);

КонецПроцедуры // СкопироватьТабличнуюЧасть()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	УСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	Предприниматель = ОбщегоНазначения.Предприниматель(Организация, Дата);
	
	ЭтоКомиссия = (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	Колонки = ЭлементыФормы.Товары.Колонки;

	Колонки.СчетУчета.Видимость    = ПоказыватьВДокументахСчетаУчета;
	Колонки.СчетУчетаНУ.Видимость    = ПоказыватьВДокументахСчетаУчета И НЕ УСН И НЕ Предприниматель;
	Колонки.СтатьяЗатратНУ.Видимость = ПоказыватьВДокументахСчетаУчета И НЕ УСН ИЛИ Предприниматель;
	Колонки.СчетУчетаНДС.Видимость   = ПоказыватьВДокументахСчетаУчета И УчитыватьНДС;
	Колонки.СуммаНДС.Видимость       = УчитыватьНДС;
	
	Колонки.ОтражениеВУСН.Видимость  = УСН;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость = ПоказыватьВДокументахСчетаУчета;

	// Закладка Счет-фактура
	ЭлементыФормы.НадписьДатаВходящегоСчетаФактуры.Видимость = ПредъявленСчетФактура;
	ЭлементыФормы.НадписьНомерВходящегоСчетаФактуры.Видимость = ПредъявленСчетФактура;
	ЭлементыФормы.ДатаВходящегоСчетаФактуры.Видимость = ПредъявленСчетФактура;
	ЭлементыФормы.НомерВходящегоСчетаФактуры.Видимость = ПредъявленСчетФактура;
	ЭлементыФормы.НДСПредъявленКВычету.Видимость = Не НДСВключенВСтоимость И ПредъявленСчетФактура и мУпрощенныйУчетНДС;

	// Зачет авансов
	
	ЗачетАвансовВозможен = НЕ (ЭтоКомиссия);
	
	ЭлементыФормы.СпособЗачетаАвансов.Доступность = ЗачетАвансовВозможен;
	
	ЗачетПоДокументу   = ЗачетАвансовВозможен И (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу);
	ЗачетАвтоматически = ЗачетАвансовВозможен И (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
	
	ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Доступность        = ЗачетПоДокументу ИЛИ ЗачетАвтоматически;
	ЭлементыФормы.НадписьСчетУчетаРасчетовПоАвансам.Доступность = ЗачетПоДокументу ИЛИ ЗачетАвтоматически;
	
	ЭлементыФормы.СчетУчетаРасчетовПоАвансам.АвтоОтметкаНезаполненного = ЗачетПоДокументу ИЛИ ЗачетАвтоматически;
	Если НЕ (ЗачетПоДокументу ИЛИ ЗачетАвтоматически) Тогда
		ЭлементыФормы.СчетУчетаРасчетовПоАвансам.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ЗачетАвансов.Видимость = ЗачетПоДокументу;
	Если СписокДокументовАванса Тогда
		ЭлементыФормы.ПанельЗачетАвансов.ТекущаяСтраница = ЭлементыФормы.ПанельЗачетАвансов.Страницы.СписокАвансов;
	Иначе
		ЭлементыФормы.ПанельЗачетАвансов.ТекущаяСтраница = ЭлементыФормы.ПанельЗачетАвансов.Страницы.ОдинАванс;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	ПромежуточныйИтогНДС = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьНДСДокумента(ЭтотОбъект));
	ПромежуточныйИтог    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект));

	ЭлементыФормы.Всего.Значение    = ПромежуточныйИтог;
	ЭлементыФормы.ВсегоНДС.Значение = ПромежуточныйИтогНДС;

	// Зачет авансов
	Если ЗачетАвансов.Найти(0, "СуммаЗачета") <> Неопределено Тогда
		ЭлементыФормы.ВсегоЗачетАвансов.Значение = "<Авто>";
	Иначе
		ЭлементыФормы.ВсегоЗачетАвансов.Значение = ОбщегоНазначения.ФорматСумм(ЗачетАвансов.Итог("СуммаЗачета"));
	КонецЕсли;
	
	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента))
	   И (ЭтотОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента, 
		                                                                         ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                                                         ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                                                         мВалютаРегламентированногоУчета);

	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если УчитыватьНДС Тогда
		Если СуммаВключаетНДС Тогда
			ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
		Иначе
			ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
		КонецЕсли;

	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "";
	КонецЕсли;
	
	ЭлементыФормы.ВсегоНДС.Видимость = УчитыватьНДС;

КонецПроцедуры // ОбновитьПодвал()

// Процедура устанавливает доступность реквизитов формы.
//
Процедура УстановитьДоступность()

	Элементыформы.СуммаНДС.Доступность = УчитыватьНДС;

КонецПроцедуры // УстановитьДоступность()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	        
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Покупка",ПараметрОбъектКопирования);

		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ЗаполнитьСчетаУчетаРасчетов();
			Содержание = "Доп.расходы";
		КонецЕсли;
	
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
       
	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("СчетУчета");
	СтруктураКолонок.Вставить("СчетУчетаНУ");
	СтруктураКолонок.Вставить("СчетУчетаНДС");
	СтруктураКолонок.Вставить("СтатьяЗатратНУ");
	СтруктураКолонок.Вставить("ОтражениеВУСН");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("услуга сторонней организации", ЭтотОбъект, ЭтаФорма);

	// Определить счет-фактуру, введенный на основании этого документа, если такой 
	// счет-фактура существует.
	ЗаполнитьТекстПроСчетФактуру();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаДокумента      = ВалютаДокумента;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Зачет авансов
	Если ЗачетАвансов.Количество() > 0 Тогда
		ЭлементыФормы.ЗачетАвансов.ТекущаяСтрока       = ЗачетАвансов[0];
		ЭлементыФормы.ТабПолеСуммыЗачета.ТекущаяСтрока = ЗачетАвансов[0];
	КонецЕсли;
	СписокДокументовАванса = (ЗачетАвансов.Количество() > 1);
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установить доступность реквизитов.
	УстановитьДоступность();

	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,Контрагент,СпособРаспределения,ДоговорКонтрагента");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.Товары);
	
	// Установим ограничение типов для выбора в табличной части документа-партии 
	ЭлементыФормы.Товары.Колонки.ДокументПартии.ЭлементУправления.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения;
	
    // Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	ИначеЕсли ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" Тогда
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			Если Параметр.Найти(Ссылка) <> Неопределено Тогда
				ЗаполнитьТекстПроСчетФактуру();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		Если СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = "Товары (" + ЭтотОбъект.Товары.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("услуга сторонней организации", ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	           
	ЗаполнитьТекстПроСчетФактуру();
	
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);


КонецПроцедуры // ПослеЗаписи()

 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоПоступлению(Кнопка)

	ЗаполнитьТабличнуюЧастьПоПоступлению("Заполнить");

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Скопировать состав" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеДобавитьИзПоступления(Кнопка)

	ЗаполнитьТабличнуюЧастьПоПоступлению("Добавить");

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

	Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		мКурс = 1;
		мКрат = 1;
	Иначе
		мКурс = КурсВзаиморасчетов;
		мКрат = КратностьВзаиморасчетов;
	КонецЕсли;
	мТекущаяВалютаДокумента  = ВалютаДокумента;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	СтруктураРеквизитовДокумента.Вставить("НДСВключенВСтоимость");

	СтруктураЗапрещенных	= Неопределено;
	
	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета, СтруктураЗапрещенных, "Товары");
    ПересчитатьСуммы = Истина;
	Если СтруктураЗначений <> Неопределено Тогда
		мКурс = СтруктураЗначений.ТекущийКурсДокумента;
		мКрат = СтруктураЗначений.ТекущийКратностьДокумента;
		ПересчитатьСуммы = СтруктураЗначений.ПересчитатьЦеныПоВалюте;
		СтруктураЗначений.ПересчитатьЦеныПоВалюте = Ложь;
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, СтруктураЗапрещенных, "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);
		Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма, 
		                                                 Неопределено, 
												         СтруктураЗначений.ТекущийСуммаВключаетНДС, 
												         СтруктураЗначений.НовыйУчитыватьНДС, 
												         СтруктураЗначений.НовыйСуммаВключаетНДС, 
												         УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
		Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
			СтрокаТабличнойЧасти.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Сумма, 
		                        			                                      Неопределено, 
															                      СтруктураЗначений.ТекущийСуммаВключаетНДС, 
												        			              СтруктураЗначений.НовыйУчитыватьНДС, 
												                    			  СтруктураЗначений.НовыйСуммаВключаетНДС, 
												                      			  УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
		КонецЦикла;
	КонецЕсли;

	// Если налог не учитываем. то надо снять флаг включения в сумму.
	Если Не УчитыватьНДС Тогда

		СтавкаНДС = Неопределено;
		СуммаНДС  = 0;
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.СуммаНДС = 0;
		КонецЦикла;

	КонецЕсли;

	Если ПересчитатьСуммы Тогда
		ПересчетСуммДокумента(мТекущаяВалютаДокумента, ВалютаДокумента, мКурс, мКрат);
	КонецЕсли;
	
	//РассчитатьСуммыДокумента();

	УстановитьДоступность();
	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
       
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	//Открывает форму движений документа для ручного редактирования
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Если НачалоМесяца(мТекущаяДатаДокумента) <> НачалоМесяца(Дата) Тогда
		мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
		УстановитьВидимость();
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата);

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	
	КонтрагентПриИзменении(Элемент);

	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект,мСписокВидовДоговоров);

	// Могли поменять договор.
	ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        мСписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураПолученный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода Сумма
//
Процедура СуммаПриИзменении(Элемент)

	РассчитатьСуммыДокумента();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага "Ставка НДС".
//
Процедура СтавкаНДСПриИзменении(Элемент)

	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		РассчитатьСуммуНДСТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	РассчитатьСуммыДокумента();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаРасчетовСКонтрагентом
// в строке табличной части "Товары".
//
Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаРасчетовПоАвансам
// в строке табличной части "Товары".
//
Процедура СчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура ПредъявленСчетФактураПриИзменении(Элемент)
	
	Если ПредъявленСчетФактура Тогда
		СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный", Новый Структура("ПометкаУдаления",Ложь),Ссылка);
		Если ЗначениеЗаполнено(СчетФактура) И ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			Ответ = Вопрос("Для указания данных счета-фактуры требуется пометить на удаление подчиненный документ <" + СчетФактура + ">. Пометить документ на удаление?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
				СчетФактураОбъект.ДокументОснование = Неопределено;
				СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СчетФактураОбъект.УстановитьПометкуУдаления(Истина);
			Иначе
				ПредъявленСчетФактура = Ложь;			
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если мУпрощенныйУчетНДС Тогда
		НДСПредъявленКВычету = ПредъявленСчетФактура;
	КонецЕсли;
	
	ЗаполнитьТекстПроСчетФактуру();
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

Функция ПараметрыНеобходимыеДляВыбораДокументПартии(Элемент)

	ДанныеТекущейСтроки = ЭлементыФормы.Товары.ТекущиеДанные;

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         Дата);
	СписокПараметров.Вставить("СчетУчета",    ДанныеТекущейСтроки.СчетУчета);
	СписокПараметров.Вставить("Номенклатура", ДанныеТекущейСтроки.Номенклатура);
	СписокПараметров.Вставить("Склад",        Неопределено);
	СписокПараметров.Вставить("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	СписокПараметров.Вставить("ЭтоНовыйДокумент",ЭтоНовый());
	
	Возврат СписокПараметров;

КонецФункции // ПараметрыНеобходимыеДляВыбораСубконто()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	РассчитатьСуммуНДСТабличнойЧасти(СтрокаТЧ);
	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, Истина, Истина);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Сумма
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	РассчитатьСуммуНДСТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьСуммыДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчета
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	
	СтрокаТЧ.СчетУчетаНУ = СтрокаТЧ.СчетУчета;

КонецПроцедуры

// Обработчик события "ПриИзменении" поля ввода "Счет учета (НУ)".
//
//  Устанавливает тип значения в поле "Статья затрат (НУ)".
//
Процедура ТоварыСчетУчетаНУПриИзменении(Элемент)

	ТоварыПриАктивизацииСтроки(Элемент);

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНУ) Тогда
		
		СтрокаТЧ.СтатьяЗатратНУ = Неопределено;
		
		Возврат;
		
	КонецЕсли;

	Если СтрокаТЧ.СчетУчетаНУ.ВидыСубконто.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаТЧ.СтатьяЗатратНУ = Новый(СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
   
	Если (НЕ (СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.СтатьиЗатрат"))) И (НЕ (СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.ПрочиеДоходыИРасходы"))) Тогда
			
		СтрокаТЧ.СтатьяЗатратНУ = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыСчетУчетаНУПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДокументПартии"
// в строке табличной части "Прочее".
//
Процедура ДокументПартииНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = ПараметрыНеобходимыеДляВыбораДокументПартии(Элемент);
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "Документ партии"
// табличного поля "Товары".
//
//  Вызывает процедуру подстановки счетов учета номенклатуры.
//
Процедура ТоварыДокументПартииПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, Истина, Истина);
	
КонецПроцедуры // ТоварыДокументПартииПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНУ
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

Процедура ТоварыОтражениеВУСННачалоВыбора(Элемент, СтандартнаяОбработка)
	Если Элемент.ДоступныеЗначения.Количество() = 0 Тогда
		Элемент.ДоступныеЗначения.Добавить(Перечисления.ОтражениеВУСН.Принимаются);
		Элемент.ДоступныеЗначения.Добавить(Перечисления.ОтражениеВУСН.НеПринимаются);
	КонецЕсли;
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
		
	ОформлениеСтроки.Ячейки.СчетУчетаНДС.ОтметкаНезаполненного = (УчитыватьНДС И Не НДСВключенВСтоимость И (ДанныеСтроки.СуммаНДС <> 0 Или СуммаНДС <> 0) И Не ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДС));
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ОБСЛУЖИВАЮЩИЕ ЗАЧЕТ АВАНСОВ

Процедура УстановитьСпособЗачетаАвансов()

	Если (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		СчетУчетаРасчетовПоАвансам = Неопределено;
	Иначе 
		СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовПоАвансам) Тогда
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
				Организация, Контрагент, ДоговорКонтрагента);
			СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
		КонецЕсли;
	КонецЕсли;
	
	ЗачетАвансов.Очистить();
	СписокДокументовАванса = Ложь;

КонецПроцедуры

Процедура СпособЗачетаАвансовПриИзменении(Элемент)
	
	СчетУчетаРасчетовПоАвансам = Неопределено;
	ЗачетАвансов.Очистить();
	СписокДокументовАванса = Ложь;
	
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически
		ИЛИ СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
			Организация, Контрагент, ДоговорКонтрагента);
		СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
		
	КонецЕсли;
		
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ЗачетАвансов.Добавить();
		ЭлементыФормы.ЗачетАвансов.ТекущаяСтрока       = ЗачетАвансов[0];
		ЭлементыФормы.ТабПолеСуммыЗачета.ТекущаяСтрока = ЗачетАвансов[0];
	КонецЕсли;
	
	УстановитьВидимость();
	
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ЗачетАвансов;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокДокументовАвансаПриИзменении(Элемент)
	
	Если НЕ СписокДокументовАванса И ЗачетАвансов.Количество() > 1 Тогда

		ТекстВопроса = "Все строки зачета авансов, кроме первой, будут удалены.
		|Продолжить?";

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ <> КодВозвратаДиалога.Да Тогда
			СписокДокументовАванса = Истина;
			Возврат;
		КонецЕсли;

		Пока ЗачетАвансов.Количество() > 1 Цикл
			ЗачетАвансов.Удалить(ЗачетАвансов.Количество() - 1);
		КонецЦикла;
        
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДокументАвансаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка  = Ложь;

	СтруктураПараметров   = Новый Структура;
	СтруктураПараметров.Вставить("Организация",                Организация);
	СтруктураПараметров.Вставить("Контрагент",                 Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",         ДоговорКонтрагента);
	СтруктураПараметров.Вставить("КонецПериода",               Дата-1);
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СчетУчетаРасчетовПоАвансам);
	СтруктураПараметров.Вставить("СторонаСчета",               "Дт");
	СтруктураПараметров.Вставить("ЭтоНовыйДокумент",           ЭтоНовый());
	СтруктураПараметров.Вставить("РежимОтбораДокументов",      Перечисления.РежимОтбораДокументов.ПоОстаткам);

	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(
		СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти.ЗачетАвансов.Реквизиты.ДокументАванса.Тип);

КонецПроцедуры

Процедура ДокументАвансаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ЗачетАвансов.ТекущиеДанные;
	ТекДанные.СуммаЗачета = 0;
	
КонецПроцедуры

Процедура ЗачетАвансовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	
		Если ОформлениеСтроки.ДанныеСтроки.СуммаЗачета = 0 Тогда
		
			ОформлениеСтроки.Ячейки.СуммаЗачета.Текст = "<Авто>";
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

мСписокВидовДоговоров = Новый СписокЗначений;
мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

