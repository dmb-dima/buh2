////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
Перем мНачДата;
Перем мКонДата;
Перем мНачГода;
Перем мНачГраница;
Перем мКонГраница;

Перем мПроводки;

Перем мКУДиР;
Перем мКУДиР_ОС;
Перем мКУДиР_НМА;
Перем мДатаПереходаНаУСН;

Перем мСтавкаНалогаНаПрибыль;

Перем ПорядокПодразделенийСообщался;
Перем ТаблицаНеЗакрытыхПодразделений;

Перем ПорядокПеределов;

Перем КоэффициентЕНВД;

Перем ВспомогательныеДанныеРасчета, ТаблицаДолейКосвенныхРасходов;

Перем Отказ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ВыявлениеУчетныхОшибок(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	СтруктураШапкиДокумента.Вставить("Ссылка", Ссылка); 
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда
		
		СчетаЗатрат = Новый Массив();
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		
		СчетаПрямыхЗатрат = Новый Массив();
		СчетаПрямыхЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
		СчетаПрямыхЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		
		СубконтоПрямыхЗатрат = Новый Массив();
		СубконтоПрямыхЗатрат.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		СубконтоПрямыхЗатрат.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		
		//На счете 20,23,26,26 не указано подразделение 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("ТекущийДокумент", 	СтруктураШапкиДокумента.Ссылка);
		
		Запрос.УстановитьПараметр("СчетаЗатрат", 	    СчетаЗатрат);
		Запрос.УстановитьПараметр("СтатьиЗатрат", 		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Запрос.УстановитьПараметр("ПустоеПодразделение",Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачДата,
		|			&КонДата,
		|			Регистратор,
		|			СчетДт В ИЕРАРХИИ (&СчетаЗатрат),
		|			&СтатьиЗатрат,
		|			,
		|			,
		|			Организация = &Организация
		|				И ПодразделениеДт = &ПустоеПодразделение) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	ХозрасчетныйОборотыДтКт.Регистратор <> &ТекущийДокумент";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Отказ = Истина;
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				ТекстСообщения = "Не указано подразделение производственных затрат.
				|Обнаружены обороты по дебету счетов 20, 23, 25, 26, для которых не указано подразделение в документе " + ВыборкаОшибок.Регистратор + ".
				|Укажите подразделение затрат в этом документе";
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
			КонецЦикла;
		КонецЕсли;
		
		//На счете 20,23,26,26 не указана статья затрат 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("ТекущийДокумент", 	СтруктураШапкиДокумента.Ссылка);
		
		Запрос.УстановитьПараметр("СчетаЗатрат", 	    СчетаЗатрат);
		Запрос.УстановитьПараметр("СтатьиЗатрат", 		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат", Справочники.СтатьиЗатрат.ПустаяСсылка());
		Запрос.Текст = 
		"ВЫБРАТЬ
        |   ХозрасчетныйОборотыДтКт.Регистратор
        |ИЗ
        |   РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
        |           &НачДата,
        |           &КонДата,
        |           Регистратор,
        |           СчетДт В ИЕРАРХИИ (&СчетаЗатрат),
        |           &СтатьиЗатрат,
        |           ,
        |           ,
        |           Организация = &Организация
        |               И СубконтоДт1 = &ПустаяСтатьяЗатрат) КАК ХозрасчетныйОборотыДтКт
        |ГДЕ
        |   ХозрасчетныйОборотыДтКт.Регистратор <> &ТекущийДокумент";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Отказ = Истина;
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				ТекстСообщения = "Не указана статья производственных затрат.
				|Обнаружены обороты по дебету счетов 20, 23, 25, 26, для которых не указана статья затрат в документе " + ВыборкаОшибок.Регистратор + ".
				|Укажите статью затрат в этом документе";
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
			КонецЦикла;
		КонецЕсли;
		
		//На счете 20,23 использована распределяемая статья 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("ТекущийДокумент", 	СтруктураШапкиДокумента.Ссылка);
		
		Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", 	СчетаПрямыхЗатрат);
		Запрос.УстановитьПараметр("СтатьиЗатрат", 		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Запрос.УстановитьПараметр("Распределяемые", 	Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.Регистратор,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, Регистратор, СчетДт В ИЕРАРХИИ (&СчетаПрямыхЗатрат), &СтатьиЗатрат, , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
		|	И ХозрасчетныйОборотыДтКт.Регистратор <> &ТекущийДокумент";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Отказ = Истина;
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				ТекстСообщения = "Прямые расходы отражены по распределяемым статьям затрат.
				|Обнаружены обороты по дебету счетов 20 и 23 по статьям, предназначенным для учета затрат, связанных с разными видами деятельности """ + ВыборкаОшибок.СубконтоДт1 + """ в документе " + ВыборкаОшибок.Регистратор + ".
				|Если расходы распределяемые, то укажите счета затрат - 25, 26, 44. Если расходы прямые, то вместо этой статьи затрат укажите статью затрат для конкретного вида деятельности.";
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
			КонецЦикла;
		КонецЕсли;
		
		//Использована одна и та же номенклатурная группа для услуг по выручке и для продукции
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа,
		|	ВыпускПродукцииУслугОбороты.Регистратор КАК РегистраторПродукции,
		|	РеализацияУслугОбороты.Регистратор КАК РегистраторУслуг
		|ИЗ
		|	РегистрНакопления.РеализацияУслуг.Обороты(&НачДата, &КонДата, Регистратор, Организация = &Организация) КАК РеализацияУслугОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыпускПродукцииУслуг.Обороты(&НачДата, &КонДата, Регистратор, Организация = &Организация) КАК ВыпускПродукцииУслугОбороты
		|		ПО РеализацияУслугОбороты.НоменклатурнаяГруппа = ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Отказ = Истина;
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				ТекстСообщения = "Неверно указана номенклатурная группа для выпуска.
				|Номенклатурная группа """ + ВыборкаОшибок.НоменклатурнаяГруппа + """ указана при отражении реализации услуг в документе  " + ВыборкаОшибок.РегистраторУслуг + "
				|и при отражении выпуска готовой продукции и услуг " + ВыборкаОшибок.РегистраторПродукции + ".
				|Рекомендуется указать разные номенклатурные группы в этих документах";
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, ВыборкаОшибок.НоменклатурнаяГруппа, Истина, ЭтотОбъект);
			КонецЦикла;
		КонецЕсли;
		
		//Не указана номенклатурная группа при реализации услуг
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("ТекущийДокумент", 	СтруктураШапкиДокумента.Ссылка);
		Запрос.УстановитьПараметр("ПустаяСсылка", 		Справочники.НоменклатурныеГруппы.ПустаяСсылка());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияУслугОбороты.Регистратор
		|ИЗ
		|	РегистрНакопления.РеализацияУслуг.Обороты(&НачДата, &КонДата, Регистратор, Организация = &Организация) КАК РеализацияУслугОбороты
		|ГДЕ
		|	РеализацияУслугОбороты.НоменклатурнаяГруппа = &ПустаяСсылка
		|	И РеализацияУслугОбороты.Регистратор <> &ТекущийДокумент";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Отказ = Истина;
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				ТекстСообщения = "Не указана номенклатурная группа оказанных услуг.
				|Не заполнена колонка ""Субконто"" на закладке ""Услуги"" в документе " + ВыборкаОшибок.Регистратор + ".
				|Рекомендуется заполнить указанную колонку в указанном документе.";
				
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
			КонецЦикла;
		КонецЕсли;
		
		
		//Выручка и производственные затраты содержат незаполненные номенклатурные группы  
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("НоменклатурныеГруппы",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.УстановитьПараметр("СчетаВыручки",	     ПланыСчетов.Хозрасчетный.Выручка);
		Запрос.УстановитьПараметр("Пустая",              Справочники.НоменклатурныеГруппы.ПустаяСсылка());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКтВыручка.СчетКт КАК СчетКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , , , СчетКт В ИЕРАРХИИ (&СчетаВыручки), &НоменклатурныеГруппы, Организация = &Организация) КАК ХозрасчетныйОборотыДтКтВыручка
		|ГДЕ
		|	(ХозрасчетныйОборотыДтКтВыручка.СубконтоКт1 ЕСТЬ NULL 
		|			ИЛИ ХозрасчетныйОборотыДтКтВыручка.СубконтоКт1 = &Пустая)";
		
		Результат = Запрос.Выполнить();
		
		ВсеНомГруппыЗаполенены = Истина;
		
		Если Не Результат.Пустой() Тогда
			Отказ = Истина;
			ВсеНомГруппыЗаполенены = Ложь;
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				ТекстСообщения = "Не указана номенклатурная группа для доходов.
				|Обнаружены обороты по кредиту счета " + ВыборкаОшибок.СчетКт + ", для которых не указана номенклатурная группа.
				|Найдите документы, проводки которых составили этот оборот, и укажите в них номенклатурную группу или заполните колонку ""Субконто""";
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,, Истина, ЭтотОбъект);
			КонецЦикла;
		КонецЕсли;
		
		
		Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", 	СчетаПрямыхЗатрат);
		Запрос.УстановитьПараметр("НоменклатурныеГруппы",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, Регистратор, СчетДт В ИЕРАРХИИ (&СчетаПрямыхЗатрат), &НоменклатурныеГруппы, , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	(ХозрасчетныйОборотыДтКт.СубконтоДт1 ЕСТЬ NULL Или ХозрасчетныйОборотыДтКт.СубконтоДт1 = &Пустая)";
		
		Результат = Запрос.Выполнить();		
		Если НЕ Результат.Пустой() Тогда
			Отказ = Истина;
			ВсеНомГруппыЗаполенены = Ложь;
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				ТекстСообщения = "Не указана номенклатурная группа для расходов.
				|Обнаружены обороты по дебету счетов 20, 23, 25, 26, для которых не указана номенклатурная группа в документе " + ВыборкаОшибок.Регистратор + ".
				|Укажите номенклатурную группу в этом документе";
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,, Истина, ЭтотОбъект);
			КонецЦикла;
		КонецЕсли;
		Если ВсеНомГруппыЗаполенены Тогда
			//Распределение выручки по номенклатурным группам противоречит отнесенным на них затратам 
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
			Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
			Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
			
			Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", 	СчетаПрямыхЗатрат);
			Запрос.УстановитьПараметр("СубконтоЗатрат", 	СубконтоПрямыхЗатрат);
			Запрос.УстановитьПараметр("НоменклатурныеГруппы",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
			
			Запрос.УстановитьПараметр("СчетаВыручкиЕНВД",	ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);
			Запрос.УстановитьПараметр("СчетаВыручкиНеЕНВД",	ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
			Запрос.УстановитьПараметр("ЕНВД", 				Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
			Запрос.УстановитьПараметр("НеЕНВД", 			Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ХозрасчетныйОборотыДтКтВыручка.СубконтоКт1 КАК НоменклатурнаяГруппа,
			|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СтатьяЗатрат
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , , , СчетКт В ИЕРАРХИИ (&СчетаВыручкиЕНВД), &НоменклатурныеГруппы, Организация = &Организация) КАК ХозрасчетныйОборотыДтКтВыручка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
			|				&НачДата,
			|				&КонДата,
			|				,
			|				СчетДт В ИЕРАРХИИ (&СчетаПрямыхЗатрат),
			|				&СубконтоЗатрат,
			|				,
			|				,
			|				Организация = &Организация
			|					И СубконтоДт2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НЕЕНВД) КАК ХозрасчетныйОборотыДтКт
			|		ПО (ХозрасчетныйОборотыДтКт.СубконтоДт1 = ХозрасчетныйОборотыДтКтВыручка.СубконтоКт1)
			|ГДЕ
			|	(НЕ ХозрасчетныйОборотыДтКт.СубконтоДт2 ЕСТЬ NULL )";
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Отказ = Истина;
				ВыборкаОшибок = Результат.Выбрать();
				Пока ВыборкаОшибок.Следующий() Цикл
					ТекстСообщения = "Неверно указана номенклатурная группа для доходов и расходов.
					|По номенклатурной группе """ + ВыборкаОшибок.НоменклатурнаяГруппа + """ обнаружены обороты по кредиту счета 90.01.2 и обороты по дебету счетов 20,23,25,26
					|для статей затрат по деятельности с основной системой налогообложения """ + ВыборкаОшибок.СтатьяЗатрат + """. 
					|Если эта номенклатурная группа отражает вид деятельности с особым порядком налогообложения, то используйте соответствующую статью.
					|Если эта номенклатурная группа отражает вид деятельности с основной системой налогообложения, то исправьте счет 90.01.2 на 90.01.1.";
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,, Истина, ЭтотОбъект);
				КонецЦикла;
			КонецЕсли;
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ХозрасчетныйОборотыДтКтВыручка.СубконтоКт1 КАК НоменклатурнаяГруппа,
			|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СтатьяЗатрат
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , , , СчетКт В ИЕРАРХИИ (&СчетаВыручкиНЕЕНВД), &НоменклатурныеГруппы, Организация = &Организация) КАК ХозрасчетныйОборотыДтКтВыручка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
			|				&НачДата,
			|				&КонДата,
			|				,
			|				СчетДт В ИЕРАРХИИ (&СчетаПрямыхЗатрат),
			|				&СубконтоЗатрат,
			|				,
			|				,
			|				Организация = &Организация
			|					И СубконтоДт2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД) КАК ХозрасчетныйОборотыДтКт
			|		ПО (ХозрасчетныйОборотыДтКт.СубконтоДт1 = ХозрасчетныйОборотыДтКтВыручка.СубконтоКт1)
			|ГДЕ
			|	(НЕ ХозрасчетныйОборотыДтКт.СубконтоДт2 ЕСТЬ NULL )";
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Отказ = Истина;
				ВыборкаОшибок = Результат.Выбрать();
				Пока ВыборкаОшибок.Следующий() Цикл
					ТекстСообщения = "Неверно указана номенклатурная группа для доходов и расходов.
					|По номенклатурной группе """ + ВыборкаОшибок.НоменклатурнаяГруппа + """ обнаружены обороты по кредиту счета 90.01.1 и обороты по дебету счетов 20,23,25,26 для статей затрат 
					|по деятельности с особым порядком налогообложения " + ВыборкаОшибок.СтатьяЗатрат + ". 
					|Если эта номенклатурная группа отражает вид деятельности с основной системой налогообложения, то используйте соответствующую статью.
					|Если эта номенклатурная группа отражает вид деятельности с особым порядком налогообложения, то исправьте счет 90.01.1 на 90.01.2";
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,, Истина, ЭтотОбъект);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		//Записи о выпуске по регистру бухгалтерии не совпадают с записями о выпуске в регистре накопления
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("ТекущийДокумент", 	СтруктураШапкиДокумента.Ссылка);
		
		Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", 	СчетаПрямыхЗатрат);
		Запрос.УстановитьПараметр("НоменклатурныеГруппы",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.Текст = 
		"ВЫБРАТЬ
        |   ВложенныйЗапрос.СуммаОборот КАК СуммаОборот,
        |   ВложенныйЗапрос.ПлановаяСтоимостьОборот КАК ПлановаяСтоимостьОборот,
        |   ВложенныйЗапрос.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
        |   ВложенныйЗапрос.Регистратор КАК Регистратор,
        |   ВложенныйЗапрос.КоличествоОборот
        |ИЗ
        |   (ВЫБРАТЬ
        |       ЕСТЬNULL(СУММА(ХозрасчетныйОборотыДтКт.СуммаОборотКт), 0) КАК СуммаОборот,
        |       ЕСТЬNULL(СУММА(ВыпускПродукцииУслугОбороты.ПлановаяСтоимостьОборот), 0) КАК ПлановаяСтоимостьОборот,
        |       ХозрасчетныйОборотыДтКт.Субконто1 КАК НоменклатурнаяГруппа,
        |       ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
        |       ВыпускПродукцииУслугОбороты.КоличествоОборот КАК КоличествоОборот
        |   ИЗ
        |       РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Регистратор, Счет В ИЕРАРХИИ (&СчетаПрямыхЗатрат), &НоменклатурныеГруппы, Организация = &Организация, , ) КАК ХозрасчетныйОборотыДтКт
        |           ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыпускПродукцииУслуг.Обороты(&НачДата, &КонДата, Регистратор, Организация = &Организация) КАК ВыпускПродукцииУслугОбороты
        |           ПО ХозрасчетныйОборотыДтКт.Счет = ВыпускПродукцииУслугОбороты.СчетЗатрат
        |               И ХозрасчетныйОборотыДтКт.Субконто1 = ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа
        |               И ХозрасчетныйОборотыДтКт.Подразделение = ВыпускПродукцииУслугОбороты.Подразделение
        |   ГДЕ
        |       (НЕ ХозрасчетныйОборотыДтКт.Регистратор = &ТекущийДокумент)
        |   
        |   СГРУППИРОВАТЬ ПО
        |       ХозрасчетныйОборотыДтКт.Субконто1,
        |       ХозрасчетныйОборотыДтКт.Регистратор,
        |       ВыпускПродукцииУслугОбороты.КоличествоОборот) КАК ВложенныйЗапрос
        |ГДЕ
        |   ВложенныйЗапрос.ПлановаяСтоимостьОборот = 0
        |   И ВложенныйЗапрос.КоличествоОборот = 0";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Отказ = Истина;
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				ТекстСообщения = "Неверно отражен выпуск продукции или услуг.
				|Для документа " + ВыборкаОшибок.Регистратор + " отсутствуют записи в  регистре накопления ""Выпуск продукции и услуг"" для выпуска продукции (полуфабрикатов, товаров, услуг) по номенклатурной группе " + ВыборкаОшибок.НоменклатурнаяГруппа + ". 
                |Создайте записи о выпуске в указанном регистре (кнопка ""Корректировка регистров"" в форме ручной операции) или отражайте выпуск с помощью документов ""Отчет производства за смену"", ""Акт об оказании услуг производственного характера"",  ""Поступление из переработки"".";
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,ВыборкаОшибок.НоменклатурнаяГруппа,  Истина, ЭтотОбъект);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26
		Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда
		//Не указано применение ЕНВД в учетной политике, но использованы статьи с видом ЕНВД и распределяемые
		Если НЕ СтруктураШапкиДокумента.УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД Тогда
			
			ВидыДеятельностиЕНВД = Новый Массив();
			ВидыДеятельностиЕНВД.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
			ВидыДеятельностиЕНВД.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
			Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
			Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда
				МассивСчетов = СчетаЗатрат;
			Иначе
				МассивСчетов = Новый Массив;
				МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ИздержкиОбращения);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("СчетаЗатрат", 		МассивСчетов);
			Запрос.УстановитьПараметр("СтатьиЗатрат", 		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
			Запрос.УстановитьПараметр("ВидыДеятельностиЕНВД",ВидыДеятельностиЕНВД);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СтатьяЗатрат
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&СчетаЗатрат), &СтатьиЗатрат, , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
			|ГДЕ
			|	ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидДеятельностиДляНалоговогоУчетаЗатрат В (&ВидыДеятельностиЕНВД)";
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Отказ = Истина;
				ВыборкаОшибок = Результат.Выбрать();
				Пока ВыборкаОшибок.Следующий() Цикл
					ТекстСообщения = "Не указано применение особого порядка налогообложения по отдельным видам деятельности.
					|В записях регистра сведений ""Учетная политика"" на " + НачалоГода(СтруктураШапкиДокумента.Дата) + " не установлен флаг ""Применяется особой порядок налогообложения по отдельным видам деятельности"",
					|но отражено признание расходов по видам деятельности с особым порядком налогообложения, по статье затрат """ + ВыборкаОшибок.СтатьяЗатрат + """.
					|Установите флаг ""Применяется особой порядок налогообложения по отдельным видам деятельности"" (меню ""Предприятие"" - ""Учетная политика"" - ""Учетная политика организаций"") 
					|или используйте статьи затрат для видов деятельности с основной системой налогообложения";
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,ВыборкаОшибок.СтатьяЗатрат, Истина, ЭтотОбъект);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда
		
		//Транспортные расходы 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("ТекущийДокумент", 	СтруктураШапкиДокумента.Ссылка);
		
		Запрос.УстановитьПараметр("Счет_44_01", 		ПланыСчетов.Хозрасчетный.ИздержкиОбращения);
		Запрос.УстановитьПараметр("СтатьиЗатрат", 		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Запрос.УстановитьПараметр("Транспортные", 		Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
		Запрос.УстановитьПараметр("Распределяемые", 	Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам);
		Запрос.УстановитьПараметр("ЕНВД", 				Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.Регистратор,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйОборотыДтКт.СчетДт <> &Счет_44_01
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НеВерныйСчет,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Распределяемые,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЕНВД,
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачДата,
		|			&КонДата,
		|			Регистратор,
		|			,
		|			&СтатьиЗатрат,
		|			,
		|			,
		|			Организация = &Организация
		|				И СубконтоДт1.ВидРасходовНУ = &Транспортные) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	ХозрасчетныйОборотыДтКт.Регистратор <> &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.Регистратор,
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				Если ВыборкаОшибок.НеВерныйСчет > 0 Тогда
					Отказ = Истина;
					ТекстСообщения = "Неверно указан счет учета транспортных расходов.
					|Обнаружены обороты по дебету счета " + ВыборкаОшибок.СчетДт + " по статьям """ + ВыборкаОшибок.СубконтоДт1 + """ с видом расходов ""Транспортные расходы"" в документе " + ВыборкаОшибок.Регистратор + ".
					|Если в указанном документе отражены транспортные расходы, то укажите счет учета затрат - 44.01.
					|Если отражены иные расходы, то укажите статью затрат с видом, отличным от вида ""Транспортные расходы"".";
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
				КонецЕсли;
				Если ВыборкаОшибок.Распределяемые > 0 Тогда
					Отказ = Истина;
					ТекстСообщения = "Неверно указан вид статьи учета транспортных расходов.
					|Обнаружены обороты по дебету счета " + ВыборкаОшибок.СчетДт + " по статьям """ + ВыборкаОшибок.СубконтоДт1 + """ с признаком ""По разным видам деятельности"" в документе " + ВыборкаОшибок.Регистратор + ".
					|Если в указанном документе отражены транспортные расходы, то используйте статью затрат для видов деятельности с основной системой налогообложения.
					|Если отражены иные расходы, то укажите статью затрат с видом, отличным от вида ""Транспортные расходы"".";
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
				КонецЕсли;
				Если ВыборкаОшибок.ЕНВД > 0 Тогда
					Отказ = Истина;
					ТекстСообщения = "Неверно указан вид статьи учета транспортных расходов.
					|Обнаружены обороты по дебету счета " + ВыборкаОшибок.СчетДт + " для статьи """ + ВыборкаОшибок.СубконтоДт1 + """ по видам деятельности с особым порядком налогообложения в документе " + ВыборкаОшибок.Регистратор + ".
					|Если в указанном документе отражены транспортные расходы, то используйте статью затрат по видам деятельности с основной системой налогообложения
					|Если отражены иные расходы, то укажите статью затрат с видом, отличным от вида ""Транспортные расходы"".";
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаРекламу КАК ДоляРасходовНаРекламу,
		|	РасчетДолейСписанияКосвенныхРасходов.ДоляПредставительскихРасходов КАК ДоляПредставительскихРасходов,
		|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаДобровольноеМедицинскоеСтрахование КАК ДоляРасходовНаДобровольноеМедицинскоеСтрахование,
		|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаДобровольноеСтрахованиеЖизни КАК ДоляРасходовНаДобровольноеСтрахованиеЖизни,
		|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаВозмещениеПроцентовРаботникам КАК ДоляРасходовНаВозмещениеПроцентовРаботникам,
		|	РасчетДолейСписанияКосвенныхРасходов.ДоляЕНВД КАК ДоляЕНВД,
		|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев КАК ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев
		|ИЗ
		|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК РасчетДолейСписанияКосвенныхРасходов
		|ГДЕ
		|	РасчетДолейСписанияКосвенныхРасходов.Организация = &Организация
		|	И РасчетДолейСписанияКосвенныхРасходов.ПериодРасчета МЕЖДУ &ДатаНач И &ДатаКон";
		
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.ГоловноеПодразделение);
		Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(СтруктураШапкиДокумента.Дата));
		
		Результат = Запрос.Выполнить();                      
		
		Если Результат.Пустой() Тогда
			СчетаЗатрат = Новый Массив();
			СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
			СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
			СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
			СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
			
			СписокВидов = Новый Массив();
			СписокВидов.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование);
			СписокВидов.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
			СписокВидов.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников);
			СписокВидов.Добавить(Перечисления.ВидыРасходовНУ.РасходыНаВозмещениеЗатратРаботниковПоУплатеПроцентов);
			СписокВидов.Добавить(Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые);
			СписокВидов.Добавить(Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
			Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
			Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
			Запрос.УстановитьПараметр("СчетаЗатрат", 	    СчетаЗатрат);
			Запрос.УстановитьПараметр("Список",     	    СписокВидов);
			Запрос.УстановитьПараметр("СтатьиЗатрат",     	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК СтатьяЗатрат
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
			|			&НачДата,
			|			&КонДата,
			|			,
			|			,
			|			Счет В ИЕРАРХИИ (&СчетаЗатрат),
			|			&СтатьиЗатрат,
			|			Организация = &Организация
			|				И (Субконто1.ВидРасходовНУ В (&Список)
			|					ИЛИ Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам))) КАК ХозрасчетныйОстаткиИОбороты";
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Отказ = Истина;
				ВыборкаОшибок = Результат.Выбрать();
				Пока ВыборкаОшибок.Следующий() Цикл
					ТекстСообщения = "Не указаны доли списания косвенных расходов.
					|Обнаружены обороты по дебету счетов 20, 23, 25, 26 для нормируемых и распределяемых расходов.
					|Заполните регистр сведений ""Доли списания косвенных расходов"" или выполните регламентную операцию ""Расчет долей списания косвенных расходов""";
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , Истина, ЭтотОбъект);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
    
 	
    
    Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаРекламу КАК ДоляРасходовНаРекламу,
		|	РасчетДолейСписанияКосвенныхРасходов.ДоляПредставительскихРасходов КАК ДоляПредставительскихРасходов,
		|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаДобровольноеМедицинскоеСтрахование КАК ДоляРасходовНаДобровольноеМедицинскоеСтрахование,
		|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаДобровольноеСтрахованиеЖизни КАК ДоляРасходовНаДобровольноеСтрахованиеЖизни,
		|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаВозмещениеПроцентовРаботникам КАК ДоляРасходовНаВозмещениеПроцентовРаботникам,
		|	РасчетДолейСписанияКосвенныхРасходов.ДоляЕНВД КАК ДоляЕНВД,
		|	РасчетДолейСписанияКосвенныхРасходов.ДоляТранспортныхРасходов КАК ДоляТранспортныхРасходов,
		|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев КАК ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев
		|ИЗ
		|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК РасчетДолейСписанияКосвенныхРасходов
		|ГДЕ
		|	РасчетДолейСписанияКосвенныхРасходов.Организация = &Организация
		|	И РасчетДолейСписанияКосвенныхРасходов.ПериодРасчета МЕЖДУ &ДатаНач И &ДатаКон";
		
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.ГоловноеПодразделение);
		Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(СтруктураШапкиДокумента.Дата));
		
		Результат = Запрос.Выполнить();                      
		
		Если Результат.Пустой() Тогда
			СчетаЗатрат = Новый Массив();
			СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ИздержкиОбращения);
			
			СписокВидов = Новый Массив();
			СписокВидов.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование);
			СписокВидов.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
			СписокВидов.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников);
			СписокВидов.Добавить(Перечисления.ВидыРасходовНУ.РасходыНаВозмещениеЗатратРаботниковПоУплатеПроцентов);
			СписокВидов.Добавить(Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые);
			СписокВидов.Добавить(Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
			СписокВидов.Добавить(Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
			Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
			Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
			Запрос.УстановитьПараметр("СчетаЗатрат", 	    СчетаЗатрат);
			Запрос.УстановитьПараметр("Список",     	    СписокВидов);
			Запрос.УстановитьПараметр("СтатьиЗатрат",     	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК СтатьяЗатрат
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
			|			&НачДата,
			|			&КонДата,
			|			,
			|			,
			|			Счет В ИЕРАРХИИ (&СчетаЗатрат),
			|			&СтатьиЗатрат,
			|			Организация = &Организация
			|				И (Субконто1.ВидРасходовНУ В (&Список)
			|					ИЛИ Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам))) КАК ХозрасчетныйОстаткиИОбороты";
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Отказ = Истина;
				ВыборкаОшибок = Результат.Выбрать();
				Пока ВыборкаОшибок.Следующий() Цикл
					ТекстСообщения = "Не указаны доли списания косвенных расходов.
					|Обнаружены обороты по дебету счетов 44 для нормируемых, транспортных, распределяемых расходов.
					|Заполните регистр сведений ""Доли списания косвенных расходов"" или выполните регламентную операцию ""Расчет долей списания косвенных расходов""";
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , Истина, ЭтотОбъект);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91 Тогда
		
		//Закрытие счета 91
		ПрочиеДоходыИрасходы = Новый Массив();
		ПрочиеДоходыИрасходы.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
		ПрочиеДоходыИрасходы.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("ТекущийДокумент", 	СтруктураШапкиДокумента.Ссылка);
		
		Запрос.УстановитьПараметр("Счет_91_01", 			ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
		Запрос.УстановитьПараметр("Счет_91_02", 			ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
		Запрос.УстановитьПараметр("ПрочиеДоходыИрасходы", 	ПрочиеДоходыИрасходы);
		Запрос.УстановитьПараметр("СтатьиДоходовИРасходов",	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
		Запрос.УстановитьПараметр("ПустаяСтатья", 		    Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка());
		Запрос.УстановитьПараметр("Распределяемые", 	    Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам);
		Запрос.УстановитьПараметр("ПрочиеВнереализационные",НалоговыйУчет.ПолучитьМассивВнереализационныхРасходов());
		Запрос.УстановитьПараметр("ПрочиеКосвенные",        Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы);
        
        Запрос.Текст = 
		"ВЫБРАТЬ
        |   ХозрасчетныйОбороты.Регистратор,
        |   СУММА(ВЫБОР
        |           КОГДА ХозрасчетныйОбороты.Субконто1 = &ПустаяСтатья
        |               ТОГДА 0
        |           КОГДА ХозрасчетныйОбороты.Счет = &Счет_91_01
        |                   И ХозрасчетныйОбороты.СуммаОборотКт > 0
        |                   И ХозрасчетныйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
        |               ТОГДА 1
        |           ИНАЧЕ 0
        |       КОНЕЦ) КАК РаспределяемыеДоходы,
        |   СУММА(ВЫБОР
        |           КОГДА ХозрасчетныйОбороты.Субконто1 = &ПустаяСтатья
        |                   ИЛИ ХозрасчетныйОбороты.Субконто1 ЕСТЬ NULL 
        |               ТОГДА 1
        |           ИНАЧЕ 0
        |       КОНЕЦ) КАК ПустоеСубконто,
        |   ХозрасчетныйОбороты.СуммаОборот,
        |   ВЫБОР
        |       КОГДА ХозрасчетныйОбороты.Субконто1 = &ПустаяСтатья
        |           ТОГДА 0
        |       КОГДА ХозрасчетныйОбороты.СуммаОборотДт > 0
        |               И ХозрасчетныйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
        |               И ((НЕ ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов В (&ПрочиеВнереализационные))
        |                   И (НЕ ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов = &ПрочиеКосвенные))
        |           ТОГДА 1
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК РаспределяемыеРасходы,
        |   ХозрасчетныйОбороты.Субконто1
        |ИЗ
        |   РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Регистратор, Счет В ИЕРАРХИИ (&ПрочиеДоходыИрасходы), &СтатьиДоходовИРасходов, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
        |ГДЕ
        |   (НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РегламентнаяОперация)
        |
        |СГРУППИРОВАТЬ ПО
        |   ХозрасчетныйОбороты.Регистратор,
        |   ХозрасчетныйОбороты.СуммаОборот,
        |   ХозрасчетныйОбороты.Субконто1,
        |   ВЫБОР
        |       КОГДА ХозрасчетныйОбороты.Субконто1 = &ПустаяСтатья
        |           ТОГДА 0
        |       КОГДА ХозрасчетныйОбороты.СуммаОборотДт > 0
        |               И ХозрасчетныйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
        |               И ((НЕ ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов В (&ПрочиеВнереализационные))
        |                   И (НЕ ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов = &ПрочиеКосвенные))
        |           ТОГДА 1
        |       ИНАЧЕ 0
        |   КОНЕЦ";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				Если ВыборкаОшибок.РаспределяемыеДоходы > 0 Тогда
					Отказ = Истина;
					ТекстСообщения = "Неверно указан вид деятельности для статьи прочих доходов
					|Обнаружены обороты по кредиту счета 91.01 по статье """ + ВыборкаОшибок.Субконто1 + """ с видом деятельности ""Распределяемые (По разным видам деятельности)""  в документе " + ВыборкаОшибок.Регистратор + ".
                    |Для этой статьи укажите вид деятельности ""Основная система налогообложения"" или ""Особый порядок налогообложения""";
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
				КонецЕсли;
				Если ВыборкаОшибок.ПустоеСубконто > 0 Тогда
					Отказ = Истина;
					ТекстСообщения = "Не указана аналитика для прочих доходов и расходов.
					|Обнаружены обороты по счету 91, по которым в проводках не указаны статьи прочих доходов и расходов в документе " + ВыборкаОшибок.Регистратор + ".
					|Рекомендуется заполнить колонку ""Субконто"" в этом документе"; 
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
				КонецЕсли;
				Если ВыборкаОшибок.РаспределяемыеРасходы > 0 Тогда
					Отказ = Истина;
					ТекстСообщения = "Неверно указан вид деятельности для статьи прочих расходов
					|Обнаружены обороты по кредиту счета 91.02 по статье """ + ВыборкаОшибок.Субконто1 + """ с видом деятельности ""Распределяемые (По разным видам деятельности)"" в документе " + ВыборкаОшибок.Регистратор + ".
                    |Для этой статьи укажите вид деятельности ""Основная система налогообложения"" или ""Особый порядок налогообложения"" или измените вид прочих доходов и расходов";
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
				КонецЕсли;
            КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль Тогда
		
		//Нет ставок налога на прибыль
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Дата", 				КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.Текст =       		
		"ВЫБРАТЬ
		|	СтавкиНалогаНаПрибыльСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.СрезПоследних(&Дата) КАК СтавкиНалогаНаПрибыльСрезПоследних";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Отказ = Истина;
			ТекстСообщения = "Не указана ставка налога на прибыль.                              
			|Отсутствуют записи в регистре сведений ""Ставки налога на прибыль"" на " + Формат(НачалоГода(СтруктураШапкиДокумента.Дата), "ДФ=дд.ММ.гггг") + ".
			|Установите ставку налога на прибыль (меню ""Предприятие"" - ""Ставки налога на прибыль"").";
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,, Истина, ЭтотОбъект);			
		КонецЕсли;
		
		
		Если СтруктураШапкиДокумента.РазныеСтавкиНалогаНаПрибыль Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Период", НачалоДня(СтруктураШапкиДокумента.Дата));
			Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.СтавкаСубъектРФ КАК Ставка,
			|	Неопределено КАК Регистрация
			|ИЗ
			|	РегистрСведений.СтавкиНалогаНаПрибыльВБюджетСубъектовРФ.СрезПоследних(&Период, Организация = &Организация) КАК СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних";
			
			// {ОбособленныеПодразделения
            Запрос.Текст = СтрЗаменить(Запрос.Текст, "Неопределено КАК Регистрация", "СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.РегистрацияВИФНС КАК Регистрация");
			// }ОбособленныеПодразделения
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Отказ = Истина;
				ТекстСообщения = "Не указана ставка налога на прибыль в бюджет субъектов РФ.                              
				|Отсутствуют записи в регистре сведений ""Ставки налога на прибыль в бюджет субъектов РФ"" на " + Формат(НачалоГода(СтруктураШапкиДокумента.Дата), "ДФ=дд.ММ.гггг") + ".
				|Установите ставку налога на прибыль (меню ""Предприятие"" - ""Ставки налога на прибыль"" - ""Ставки налога на прибыль в бюджет субъектов РФ"").";
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,, Истина, ЭтотОбъект);			
			КонецЕсли; 
            
            // {ОбособленныеПодразделения
			Ставки = Результат.Выгрузить();
			Для Каждого Ставка Из Ставки Цикл
				Если Не ЗначениеЗаполнено(Ставка.Регистрация) Тогда
					Отказ = Истина;
					ТекстСообщения = "Не указана регистрация в ИФНС для субъекта РФ.                              
					|Не заполнена колонка ""Сведения об ИФНС"" в регистре сведений ""Ставки налога на прибыль в региональный бюджет"" на " + Формат(НачалоГода(СтруктураШапкиДокумента.Дата), "ДФ=дд.ММ.гггг") + ".
					|Заполните эту колонку (меню ""Предприятие"" - ""Ставки налога на прибыль"" - ""Ставки в бюджет субъекта РФ"").";
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,, Истина, ЭтотОбъект);			
				КонецЕсли;
			КонецЦикла;
			// }ОбособленныеПодразделения
			
		КонецЕсли;	
		
		//Убыток прошлого года не перенесен на будущее
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Дата", 				НачалоГода(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("Счет", 				ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
		Запрос.УстановитьПараметр("ТекущийУбыток", 		Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Организация
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Дата,
		|			Счет = &Счет,
		|			,
		|			Организация = &Организация
		|				И Субконто1 = &ТекущийУбыток) КАК ХозрасчетныйОстатки";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Отказ = Истина;
			ТекстСообщения = "Не перенесен убыток прошлого года.
			|Обнаружен остаток на начало года на счете 09 по виду ""Убыток текущего периода"".
			|Рекомендуется перед реформацией баланса прошлого года ввести проводки с датой конца прошлого года:
			|С кредита счета 09 по виду ""Убыток текущего периода"" в дебет счета 09 по виду ""Расходы будущих периодов"" с датой конца прошлого года на сумму остатка по виду ""Убыток текущего периода"".
			|С кредита счета 99 в дебет счета 97 по статье РБП с видом ""Убытки прошлых лет"" на положительную сумму налогового учета и отрицательную сумму временных разниц, равную сумме убытка";
			
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,, Истина, ЭтотОбъект);			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры     

Функция ПроверкаПовторовВидовОпераций(Отказ, Заголовок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Комментарий",  "#Движения документа");
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОперацияБух.Ссылка КАК ОперацияБух
	|ИЗ
	|	Документ.ОперацияБух КАК ОперацияБух
	|ГДЕ
	|	ОперацияБух.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ОперацияБух.Организация = &Организация
	|	И ПОДСТРОКА(ОперацияБух.Комментарий, 1, 19) = &Комментарий";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Повтор регламентной операции
		|Обнаружен документ <Операция (бухгалтерский и налоговый учет)> с комментарием ""#Движения документа..."". Вероятно, закрытие месяца за этот период уже было выполнено.
		|Рекомендуется пометить на удаление эту операцию и выполнить удаление помеченных объектов. После этого можно повторить процедуру закрытия месяца", Отказ, Заголовок);
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ВидОперации",  ВидОперации);
	Запрос.УстановитьПараметр("ЭтаОперация",  Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегламентнаяОперация.Ссылка КАК РегламентнаяОперация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = &ВидОперации
	|	И РегламентнаяОперация.Ссылка <> &ЭтаОперация
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И РегламентнаяОперация.Организация = &Организация";
	
	Если ЭтоНовый() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РегламентнаяОперация.Ссылка <> &ЭтаОперация", "");
	КонецЕсли;
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
		
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Повтор регламентной операции
		|Регламентная операции с видом """ + ВидОперации + """ была создана ранее
		|Рекомендуется отменить создание этой операции и воспользововаться той, что уже существует", Отказ, Заголовок);
		Возврат Ложь;
	КонецЕсли;	
	
Конецфункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Функция ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Возврат Отказ;
	
КонецФункции // ПроверитьЗаполнениеШапки()

Функция ЗаполнитьСтруктуруШапкиДокумента(Отказ = Ложь, Заголовок) Экспорт
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("УчетнаяПолитика"      , ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, СтруктураШапкиДокумента.Организация));
	СтруктураШапкиДокумента.Вставить("ГоловноеПодразделение", ?(ЗначениеЗаполнено(Организация.ГоловнаяОрганизация), Организация.ГоловнаяОрганизация, Организация));
	СтруктураШапкиДокумента.Вставить("Предприниматель"      , (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) И НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН);
	СтруктураШапкиДокумента.Вставить("ПрименениеЕНВД"       , НалоговыйУчет.ПрименениеЕНВД(СтруктураШапкиДокумента.Организация, мКонДата));
	СтруктураШапкиДокумента.Вставить("РазныеСтавкиНалогаНаПрибыль", Константы.ПрименяютсяРазныеСтавкиНалогаНаПрибыль.Получить());
	
	Если ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок) Тогда
		Отказ = Истина;
		Возврат СтруктураШапкиДокумента;
	КонецЕсли;
	
	СписокОП = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	СписокОП.Добавить(Организация.Ссылка, Организация.Наименование);
	СтруктураШапкиДокумента.Вставить("СписокОП", СписокОП);
	
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация.ГоловнаяОрганизация) Тогда
		ЕстьОбособленныеПодразделения = Истина;
	Иначе
		ЕстьОбособленныеПодразделения = СписокОП.Количество() > 1;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("ЕстьОбособленныеПодразделения", ЕстьОбособленныеПодразделения);
	
	Если СтруктураШапкиДокумента.УчетнаяПолитика = Неопределено Тогда
		ТекстСообщения = "Не установлена учетная политика
		|Отсутствуют записи в регистре сведений ""Учетная политика"" на " + НачалоГода(СтруктураШапкиДокумента.Дата) + "
		|Установите учетную политику (меню ""Предприятие"" - ""Учетная политика"" - ""Учетная политика организаций"" - закладка ""Налог на прибыль"" - кнопка ""Указать ставки налога на прибыль"")";
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,СтруктураШапкиДокумента.Организация.Ссылка, Отказ, ЭтотОбъект);
	Конецесли;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции

// Выполняет запись в регистры информации параметров расчетов по рег.операциям
// по данным которых будут построены справки - расчеты
Процедура ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента, ТаблицаДвижений, ВспомогательныйРегистр, СтрокаГруппировки,СтрокаСуммирования)
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ПериодРасчета");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.Свернуть(СтрокаГруппировки,СтрокаСуммирования);
	ВспомогательныйРасчет = ВспомогательныйРегистр.СоздатьНаборЗаписей();
	ВспомогательныйРасчет.Отбор.Регистратор.Установить(Ссылка);
	ВспомогательныйРасчет.Загрузить(ТаблицаДвижений);
	
	ВспомогательныйРасчет.Записать();
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО НАЧИСЛЕНИЮ АМОРТИЗАЦИИ ОС, НМА и НИОКР

// Выполняет начисление амортизации основных средств
//
Процедура НачислениеАмортизацииОС(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	УправлениеВнеоборотнымиАктивами.НачислениеАмортизации(ЭтотОбъект, 
	СтруктураШапкиДокумента, 
	,
	СтруктураШапкиДокумента.ПрименениеПБУ18,
	СтруктураШапкиДокумента.УчетнаяПолитика,
	Истина,
	НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН,
	Отказ, 
	Заголовок);
	
КонецПроцедуры // НачислениеАмортизацииОС()

// Выполняет начисление износа основных средств
//
Процедура НачислениеИзносаОС(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ТабИзноса  = УправлениеВнеоборотнымиАктивами.РасчетИзносаБухРегл(Дата, СтруктураШапкиДокумента.Организация,,, ЭтотОбъект, Отказ);
	
	Проводки = Движения.Хозрасчетный;
	
	Для Каждого СтрокаИзноса Из ТабИзноса Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаИзноса.Износ) тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Проводки.Добавить();
		
		Проводка.Период       = Дата;
		Проводка.Содержание   = "Износ основных средств";
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма        = СтрокаИзноса.Износ;
		
		Проводка.СчетДт = СтрокаИзноса.СчетНачисленияИзноса;
		БухгалтерскийУчет.УстановитьСубконто(СтрокаИзноса.СчетНачисленияИзноса, Проводка.СубконтоДт, 1, СтрокаИзноса.ОсновноеСредство);
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, СтрокаИзноса.ПодразделениеОрганизации, Неопределено);
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры // НачислениеИзносаОС()

// Выполняет начисление амортизации НМА и списание расходов по НИОКР
//
Процедура НачислениеАмортизацииНМА_НИОКР(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМА_НИОКР(Дата,СтруктураШапкиДокумента.Организация,, ЭтотОбъект,,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете, Отказ);
	
	ТабАмортизации.Колонки.НематериальныйАктив.Имя  = "ОбъектУчета";
	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Бух");	
	
	мПроводки.Записать(Ложь);
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.Предприниматель Тогда
		ТабАмортизации = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМА_НИОКР_НалогРеглФизЛицо(ЭтотОбъект,Дата,СтруктураШапкиДокумента.Организация);
		ТабАмортизации.Колонки.Налог.Имя = "СуммаАмортизации";
		ТабАмортизации.Колонки.НМА.Имя = "ОбъектУчета";
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"");
		ДоходыИРасходыПредпринимателя.ОтражениеАмортизации(ЭтотОбъект, СтруктураШапкиДокумента, ТабЗатрат, СтруктураШапкиДокумента.УчетнаяПолитика);
		Движения.ИППрочиеРасходы.Записать(Ложь);
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
КонецПроцедуры

// Выполняет погашение стоимости спецодежды и спецоснастки
//
Процедура ПогашениеСтоимостиСпецодеждыИСпецоснастки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ТабАмортизации  = СпецодеждаИСпецоснастка.РасчетСуммыПогашенияСтоимостиМатериалов(ЭтотОбъект, СтруктураШапкиДокумента.Организация, , Истина, , Отказ);
	
	ТабАмортизации.Колонки.Номенклатура.Имя  = "ОбъектУчета";
	ТабЗатрат = СпецодеждаИСпецоснастка.ПолучитьРаспределениеПогашенияСтоимости(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента);
	
	мПроводки.Записать(Ложь);    
	
КонецПроцедуры // ПогашениеСтоимостиСпецодеждыИСпецоснастки()

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПЕРЕОЦЕНКЕ ВАЛЮТНЫХ СРЕДСТВ

// Выполняет переоценку валютных счетов
//
Процедура ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("РегламентнаяПереоценка", Истина);
	СтруктураПараметров.Вставить("РегламентныйДокумент",   ЭтотОбъект);
	СтруктураПараметров.Вставить("ГраницаОстатков",        Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
	
	ОтражатьВ_НУ = НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН И НЕ СтруктураШапкиДокумента.Предприниматель;
	СтруктураПараметров.Вставить("ОтражатьВНалоговомУчете", ОтражатьВ_НУ);
	СтруктураПараметров.Вставить("ПрименениеПБУ18",         СтруктураШапкиДокумента.ПрименениеПБУ18);
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
		ОтражатьВ_УСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(СтруктураШапкиДокумента.Организация, Дата);
		ОтражатьВ_УСН       = НЕ ОтражатьВ_УСНДоходы;
	Иначе
		ОтражатьВ_УСНДоходы = Ложь;
		ОтражатьВ_УСН       = Ложь;
	КонецЕсли;
	СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН",       ОтражатьВ_УСН);
	СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", ОтражатьВ_УСНДоходы);
	
	ТаблицаРасчетаПереоценкиВалюты = Движения.РасчетПереоценкиВалютныхСредств.ВыгрузитьКолонки();
	СтруктураПараметров.Вставить("ТаблицаРасчетаПереоценкиВалюты", ТаблицаРасчетаПереоценкиВалюты);
	
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок, СтруктураПараметров);
	
	мПроводки.Записать(Ложь);
	
	ЗаписьВВспомогательныеРегистрыСведений(
	СтруктураШапкиДокумента,
	СтруктураПараметров.ТаблицаРасчетаПереоценкиВалюты, 
	РегистрыСведений.РасчетПереоценкиВалютныхСредств,
	"Организация, Подразделение, ПериодРасчета, Активность, Регистратор, Счет, Валюта, Субконто1, Субконто2, Субконто3, КурсПереоценки",
	"Сумма,СуммаНУ,СуммаПР,СуммаВР, СуммаВВалюте, СуммаВРублях, СуммаВРубляхНУ, СуммаВРубляхПР, СуммаВРубляхВР");
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО КОРРЕКТИРОВКЕ СТОИМОСТИ НОМЕНКЛАТУРЫ

Процедура КорректировкаСтоимостиНоменклатуры(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок)
	
	СтруктураДопПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураДопПараметров.Вставить("Период", Дата);
	СтруктураДопПараметров.Вставить("Регистратор", ЭтотОбъект);
	СтруктураДопПараметров.Вставить("ТаблицаТоваров", Неопределено);
	СтруктураДопПараметров.Вставить("Учет", "Бух");
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);
	СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", Массив);
	СтруктураДопПараметров.Вставить("РасчетПрямыхЗатратНомер", "");
	
	КорректировкаСтоимости.КорректировкаСтоимости(Неопределено, мНачДата, мКонДата, СтруктураДопПараметров);
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО СПИСАНИЮ РАСХОДОВ БУДУЩИХ ПЕРИОДОВ

Процедура ЗакрытиеСчета97(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ЗаписьРасчетаРБП = Движения.РасчетСписанияРБП.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
	
	ВидРБП = Новый Массив;
	ВидРБП.Добавить(Перечисления.ВидыРБП.Прочие);
	ВидРБП.Добавить(Перечисления.ВидыРБП.ОсвоениеПриродныхРесурсов);
	ВидРБП.Добавить(Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества);
	ВидРБП.Добавить(Перечисления.ВидыРБП.ДолгосрочноеСтрахованиеЖизни);
	ВидРБП.Добавить(Перечисления.ВидыРБП.СтрахованиеНаОплатуМедицинскихРасходов);
	ВидРБП.Добавить(Перечисления.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности);
	Запрос.УстановитьПараметр("ВидРБП",      ВидРБП);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("Счет",        Массив);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Подразделение,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК Остаток,
	|	СУММА(ХозрасчетныйОстатки.СуммаНУОстатокДт) КАК ОстатокНУ,
	|	СУММА(ХозрасчетныйОстатки.СуммаПРОстатокДт) КАК ОстатокПР,
	|	СУММА(ХозрасчетныйОстатки.СуммаВРОстатокДт) КАК ОстатокВР,
	|	ХозрасчетныйОстатки.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецМесяца,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			,
	|			Организация = &Организация
	|				И (Субконто1.ВидРБП В (&ВидРБП)
	|					ИЛИ Субконто2.ВидРБП В (&ВидРБП)
	|					ИЛИ Субконто3.ВидРБП В (&ВидРБП))) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Подразделение
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки";
	
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Счет   = Выборка.Счет;
		РБП         = УстановитьРБП(Выборка);
		Если РБП = "" Тогда
			Продолжить;
		КонецЕсли;
		Если РБП.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке Тогда
			Продолжить;
		КонецЕсли;      
		СчетЗатрат = РБП.СчетЗатрат;
		
		Если Не ЗначениеЗаполнено(РБП) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РБП.ДатаНачалаСписания) Тогда
			Отказ = Истина;
			ТекстСообщения = "Не заполнена дата начала списания для статьи расходов будущих периодов """+ РБП + """. 
			|Укажите дату начала списания (меню - ""Предприятие"" - ""Доходы и расходы"" - ""Расходы будущих перидодов"").";
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, РБП, Отказ, ЭтотОбъект);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РБП.ДатаОкончанияСписания) Тогда
			Отказ = Истина;
			ТекстСообщения = "Не заполнена дата окончания списания для статьи расходов будущих периодов """+ РБП + """. 
			|Укажите дату окончания списания (меню - ""Предприятие"" - ""Доходы и расходы"" - ""Расходы будущих перидодов"").";
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, РБП, Отказ, ЭтотОбъект);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СчетЗатрат) Тогда
			Отказ = Истина;
			ТекстСообщения = "Не заполнен счет списания для статьи расходов будущих периодов """+ РБП + """. 
			|Укажите счет списания списания (меню - ""Предприятие"" - ""Доходы и расходы"" - ""Расходы будущих перидодов"").";
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, РБП, Отказ, ЭтотОбъект);
		КонецЕсли;
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ВспомогательныеДанныеРасчета = Новый Структура("КоличествоМесяцевДней, КоличествоМесяцевДнейТекущегоПериода", 0, 0);
		ДатаНачала = ?(РБП.ДатаНачалаСписания > мНачДата, РБП.ДатаНачалаСписания, мНачДата);
		
		СуммаСписания   = БухгалтерскийУчет.СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.Остаток,   ВспомогательныеДанныеРасчета, мНачДата, мКонДата );
		СуммаСписанияНУ = БухгалтерскийУчет.СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.ОстатокНУ, ВспомогательныеДанныеРасчета, мНачДата, мКонДата );
		СуммаСписанияПР = БухгалтерскийУчет.СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.ОстатокПР, ВспомогательныеДанныеРасчета, мНачДата, мКонДата );
		СуммаСписанияВР = БухгалтерскийУчет.СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.ОстатокВР, ВспомогательныеДанныеРасчета, мНачДата, мКонДата );
		
		Если СуммаСписания = 0 И СуммаСписанияНУ = 0 И СуммаСписанияПР = 0 И СуммаСписанияВР = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка                = мПроводки.Добавить();
		Проводка.Период         = Дата;
		Проводка.Организация    = СтруктураШапкиДокумента.Организация;
		
		Проводка.СчетДт         = СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, РБП.СубконтоЗатрат1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РБП.СубконтоЗатрат2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, РБП.СубконтоЗатрат3);
		
		Проводка.СчетКт       = Счет;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Выборка.Субконто3);
		
		Проводка.Сумма        = СуммаСписания;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
		Проводка, Выборка.Подразделение, Выборка.Подразделение);
		
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаСписанияНУ,СуммаСписанияНУ,СуммаСписанияПР, СуммаСписанияПр,СуммаСписанияВР,СуммаСписанияВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
		
		Проводка.Содержание   = "Списание РБП за " + ПредставлениеПериода(мНачДата, мКонДата, "ФП=Истина");
		
		СтрокаЗаписьРасчетаРБП = ЗаписьРасчетаРБП.Добавить();
		СтрокаЗаписьРасчетаРБП.ПодразделениеОрганизации = Выборка.Подразделение;
		СтрокаЗаписьРасчетаРБП.ДатаНачала = РБП.ДатаНачалаСписания;
		СтрокаЗаписьРасчетаРБП.ДатаОкончания = РБП.ДатаОкончанияСписания;
		СтрокаЗаписьРасчетаРБП.КоличествоМесяцевДней = ВспомогательныеДанныеРасчета.КоличествоМесяцевДней;
		СтрокаЗаписьРасчетаРБП.КоличествоМесяцевДнейТекущегоПериода = ВспомогательныеДанныеРасчета.КоличествоМесяцевДнейТекущегоПериода;
		СтрокаЗаписьРасчетаРБП.СпособПризнанияРасходов = РБП.СпособПризнанияРасходов;
		СтрокаЗаписьРасчетаРБП.СчетУчета = Счет;
		СтрокаЗаписьРасчетаРБП.СчетСписания = СчетЗатрат;
		СтрокаЗаписьРасчетаРБП.Статья = РБП;
		СтрокаЗаписьРасчетаРБП.СуммаДоговора = РБП.Сумма;
		СтрокаЗаписьРасчетаРБП.Сумма = СуммаСписания;
		СтрокаЗаписьРасчетаРБП.НачОстаток = Выборка.Остаток;
		СтрокаЗаписьРасчетаРБП.КонОстаток = Выборка.Остаток - Окр(СуммаСписания,2);
		СтрокаЗаписьРасчетаРБП.НачОстатокНУ = Выборка.ОстатокНУ;
		СтрокаЗаписьРасчетаРБП.КонОстатокНУ = Выборка.ОстатокНУ - Окр(СуммаСписанияНУ,2);
		СтрокаЗаписьРасчетаРБП.СуммаНУ = СуммаСписанияНУ;
		СтрокаЗаписьРасчетаРБП.НачОстатокПР = Выборка.ОстатокПР;
		СтрокаЗаписьРасчетаРБП.КонОстатокПР = Выборка.ОстатокПР - Окр(СуммаСписанияПР,2);
		СтрокаЗаписьРасчетаРБП.СуммаПР = СуммаСписанияПР;
		СтрокаЗаписьРасчетаРБП.НачОстатокВР = Выборка.ОстатокВР;
		СтрокаЗаписьРасчетаРБП.КонОстатокВР = Выборка.ОстатокВР - Окр(СуммаСписанияВР,2);
		СтрокаЗаписьРасчетаРБП.СуммаВР = СуммаСписанияВР;
		
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
	ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
	ЗаписьРасчетаРБП,
	РегистрыСведений.РасчетСписанияРБП,
	"Организация,ПериодРасчета,Активность,Регистратор,Статья,СчетУчета,СчетСписания,СпособПризнанияРасходов,ДатаНачала,ДатаОкончания,КоличествоМесяцевДнейТекущегоПериода,КоличествоМесяцевДней,СуммаДоговора,ПодразделениеОрганизации",
	"Сумма,НачОстаток,КонОстаток,НачОстатокНУ,КонОстатокНУ,СуммаНУ,НачОстатокПР,КонОстатокПР,СуммаПР,НачОстатокВР,КонОстатокВР,СуммаВР");
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.Предприниматель Тогда
		ДоходыИРасходыПредпринимателя.РасчетИСписаниеРПБ(ЭтотОбъект, СтруктураШапкиДокумента, Заголовок);
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
		
		Параметры = Новый Структура("Ссылка, Объект, Организация, Дата", Ссылка, ЭтотОбъект, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
		НалоговыйУчетУСН.ОтразитьВУСН(Ссылка, "СписаниеРБП",Параметры,0);
		
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьРБП(Выборка)
	
	Если ТипЗнч(Выборка.Субконто1)=Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
		Возврат Выборка.Субконто1;
	ИначеЕсли ТипЗнч(Выборка.Субконто2)=Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
		Возврат Выборка.Субконто2;
	ИначеЕсли ТипЗнч(Выборка.Субконто3)=Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
		Возврат Выборка.Субконто3;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции


Процедура ПолучитьДолиСписанияКосвенныхРасходов(СтруктураШапкиДокумента, Отказ)
	
	
	ТаблицаДолейКосвенныхРасходов = НалоговыйУчет.ПолучитьТаблицуДолейСписанияКосвенныхРасходов(СтруктураШапкиДокумента);
	Если ТаблицаДолейКосвенныхРасходов = Неопределено Тогда
		Отказ = Истина;
		ТекстСообщения = "Нет данных о долях списания косвенных расходов
		|Не обнаружена регламентная операция ""Расчет долей списания косвенных расходов""
		|Выполните указанную операцию";
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , Отказ, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПРОИЗВОДСТВЕННОЙ ЧАСТИ

Функция СчетУчетаПоХарактеруЗатрат(ОбщепроизводственныеРасходы = Истина)
	
	Счет = Неопределено;
	Если ОбщепроизводственныеРасходы Тогда
		Счет = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы; // счет 25
		
	Иначе
		Счет = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы; // счет 26
	КонецЕсли;
	
	Возврат Счет;
	
КонецФункции // СчетУчетаПоХарактеруЗатрат()

// Формируется запрос по косвенным затратам в котором собрана
// информация о косвенных затратах их способе их распределения.
//
Процедура СформироватьЗапросПоКосвеннымЗатратам(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы = Истина, РезультатЗапроса, СтруктураДопПараметров)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДопПараметров.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачДата",             мНачДата);
	Запрос.УстановитьПараметр("КонДата",             мКонГраница);
	Запрос.УстановитьПараметр("Организация",         СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат",  Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЕНВД",                Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Затраты.Счет КАК Счет,
	|	Затраты.КорСчет КАК КорСчет,
	|	Затраты.Подразделение КАК Подразделение,
	|	Затраты.Организация КАК Организация,
	|	Затраты.Субконто1 КАК Субконто1,
	|	ВЫРАЗИТЬ(Затраты.Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|	Затраты.СуммаОборот КАК СуммаОборот,
	|	Затраты.СуммаНУОборот КАК СуммаНуОборот,
	|	Затраты.СуммаПРОборот КАК СуммаПрОборот,
	|	Затраты.СуммаВРОборот КАК СуммаВрОборот
	|ПОМЕСТИТЬ ВТ_ВсеЗатраты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Месяц, Счет В ИЕРАРХИИ (&СчетаЗатрат), &ВидыСубконто, Организация = &Организация, , ) КАК Затраты
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеЗатраты.Счет КАК Счет,
	|	ВТ_ВсеЗатраты.Подразделение КАК Подразделение,
	|	ВТ_ВсеЗатраты.Субконто1 КАК Субконто1,
	|	СУММА(ВТ_ВсеЗатраты.СуммаОборот) КАК СуммаОборот,
	|	СУММА(ВТ_ВсеЗатраты.СуммаНуОборот) КАК СуммаНуОборот,
	|	СУММА(ВТ_ВсеЗатраты.СуммаПрОборот) КАК СуммаПрОборот,
	|	СУММА(ВТ_ВсеЗатраты.СуммаВрОборот) КАК СуммаВрОборот
	|ПОМЕСТИТЬ ВТ_ДляПроверки
	|ИЗ
	|	ВТ_ВсеЗатраты КАК ВТ_ВсеЗатраты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ВсеЗатраты.Счет,
	|	ВТ_ВсеЗатраты.Подразделение,
	|	ВТ_ВсеЗатраты.Субконто1
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВТ_ВсеЗатраты.СуммаОборот) <> 0
	|		ИЛИ СУММА(ВТ_ВсеЗатраты.СуммаНуОборот) <> 0
	|		ИЛИ СУММА(ВТ_ВсеЗатраты.СуммаПрОборот) <> 0
	|		ИЛИ СУММА(ВТ_ВсеЗатраты.СуммаВрОборот) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеЗатраты.Счет,
	|	ВТ_ВсеЗатраты.Подразделение,
	|	ВТ_ВсеЗатраты.Организация,
	|	ВТ_ВсеЗатраты.Субконто1,
	|	ВТ_ВсеЗатраты.ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|	СУММА(ВТ_ВсеЗатраты.СуммаОборот) КАК СуммаОборот,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ВсеЗатраты.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_ДляПроверки.СуммаОборот = 0
	|								И ВТ_ДляПроверки.СуммаНуОборот = 0
	|							ТОГДА 0
	|						ИНАЧЕ ВТ_ВсеЗатраты.СуммаНуОборот
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0
	|						ТОГДА 0
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВТ_ДляПроверки.СуммаОборот = 0
	|									И ВТ_ДляПроверки.СуммаНуОборот = 0
	|								ТОГДА 0
	|							ИНАЧЕ ВТ_ВсеЗатраты.СуммаНуОборот
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ) КАК СуммаНуОборот,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДляПроверки.СуммаОборот = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВТ_ВсеЗатраты.СуммаПрОборот
	|		КОНЕЦ) КАК СуммаПрОборот,
	|	СУММА(ВТ_ВсеЗатраты.СуммаВрОборот) КАК СуммаВрОборот
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОбороты_Затраты
	|ИЗ
	|	ВТ_ВсеЗатраты КАК ВТ_ВсеЗатраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокПрямыхРасходовНУ КАК Правила
	|		ПО (Правила.ВидЗатратНУ = ВТ_ВсеЗатраты.Субконто1.ВидРасходовНУ)
	|			И (ВЫБОР
	|				КОГДА Правила.Подразделение <> НЕОПРЕДЕЛЕНО
	|					ТОГДА Правила.Подразделение = ВТ_ВсеЗатраты.Подразделение
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА Правила.СчетЗатрат <> НЕОПРЕДЕЛЕНО
	|					ТОГДА Правила.СчетЗатрат = ВТ_ВсеЗатраты.Счет
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА Правила.КорСчетЗатрат <> НЕОПРЕДЕЛЕНО
	|					ТОГДА Правила.КорСчетЗатрат = ВТ_ВсеЗатраты.КорСчет
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА Правила.СтатьяЗатрат <> НЕОПРЕДЕЛЕНО
	|					ТОГДА Правила.СтатьяЗатрат = ВТ_ВсеЗатраты.Субконто1
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДляПроверки КАК ВТ_ДляПроверки
	|		ПО ВТ_ВсеЗатраты.Счет = ВТ_ДляПроверки.Счет
	|			И ВТ_ВсеЗатраты.Подразделение = ВТ_ДляПроверки.Подразделение
	|			И ВТ_ВсеЗатраты.Субконто1 = ВТ_ДляПроверки.Субконто1
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ВсеЗатраты.Счет,
	|	ВТ_ВсеЗатраты.Субконто1,
	|	ВТ_ВсеЗатраты.ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|	ВТ_ВсеЗатраты.Подразделение,
	|	ВТ_ВсеЗатраты.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСпособовРаспределения.НалоговыйРежим КАК НалоговыйРежим,
	|	ВЫБОР
	|		КОГДА ТаблицаСпособовРаспределения.БазаРаспределения ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.БазаРаспределения
	|		КОГДА ТаблицаСпособовРаспределения.РаспределениеПоПодразделению ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.РаспределениеПоПодразделению
	|		КОГДА ТаблицаСпособовРаспределения.РаспределениеПоСтатьеЗатрат ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.РаспределениеПоСтатьеЗатрат
	|		КОГДА ТаблицаСпособовРаспределения.РаспределениеПоСчету ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.РаспределениеПоСчету
	|		ИНАЧЕ ТаблицаСпособовРаспределения.РаспределениеПоОрганизации
	|	КОНЕЦ КАК Метод,
	|	ТаблицаСпособовРаспределения.СчетЗатрат,
	|	ТаблицаСпособовРаспределения.Подразделение,
	|	ТаблицаСпособовРаспределения.СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатрат ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатрат
	|		КОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоПодразделению ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоПодразделению
	|		КОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоСтатьеЗатрат ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоСтатьеЗатрат
	|		КОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоСчету ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоСчету
	|		ИНАЧЕ ТаблицаСпособовРаспределения.СписокСтатейЗатратПоОрганизации
	|	КОНЕЦ КАК СписокСтатейЗатрат,
	|	ТаблицаСпособовРаспределения.Сумма,
	|	ТаблицаСпособовРаспределения.СуммаНУ,
	|	ТаблицаСпособовРаспределения.СуммаПР,
	|	ТаблицаСпособовРаспределения.СУммаВР
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТекущиеЗатраты.НалоговыйРежим КАК НалоговыйРежим,
	|		ТекущиеЗатраты.Счет КАК СчетЗатрат,
	|		ТекущиеЗатраты.Подразделение КАК Подразделение,
	|		ТекущиеЗатраты.Субконто1 КАК СтатьяЗатрат,
	|		СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
	|		СпособыРаспределенияПоПодразделению.БазаРаспределения КАК РаспределениеПоПодразделению,
	|		СпособыРаспределенияПоСтатьеЗатрат.БазаРаспределения КАК РаспределениеПоСтатьеЗатрат,
	|		СпособыРаспределенияПоСчету.БазаРаспределения КАК РаспределениеПоСчету,
	|		СпособыРаспределенияПоОрганизации.БазаРаспределения КАК РаспределениеПоОрганизации,
	|		СпособыРаспределения.СписокСтатейЗатрат КАК СписокСтатейЗатрат,
	|		СпособыРаспределенияПоОрганизации.СписокСтатейЗатрат КАК СписокСтатейЗатратПоОрганизации,
	|		СпособыРаспределенияПоПодразделению.СписокСтатейЗатрат КАК СписокСтатейЗатратПоПодразделению,
	|		СпособыРаспределенияПоСтатьеЗатрат.СписокСтатейЗатрат КАК СписокСтатейЗатратПоСтатьеЗатрат,
	|		СпособыРаспределенияПоСчету.СписокСтатейЗатрат КАК СписокСтатейЗатратПоСчету,
	|		ТекущиеЗатраты.Сумма КАК Сумма,
	|		ТекущиеЗатраты.СуммаНУ КАК СуммаНУ,
	|		ТекущиеЗатраты.СуммаПР КАК СуммаПР,
	|		ТекущиеЗатраты.СУммаВР КАК СУммаВР
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ИСТИНА КАК НалоговыйРежим,
	|			ЗатратыЕНВД.Счет КАК Счет,
	|			ЗатратыЕНВД.Организация КАК Организация,
	|			ЗатратыЕНВД.Подразделение КАК Подразделение,
	|			ЗатратыЕНВД.Субконто1 КАК Субконто1,
	|			ВЫБОР
	|				КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	|					ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаОборот, 0)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|							ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаОборот, 0) * &КоэффициентЕНВД
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ КАК Сумма,
	|			ВЫБОР
	|				КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	|					ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаНуОборот, 0)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|							ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаНуОборот, 0) * &КоэффициентЕНВД
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ КАК СуммаНУ,
	|			ВЫБОР
	|				КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	|					ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаПрОборот, 0)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|							ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаПрОборот, 0) * &КоэффициентЕНВД
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ КАК СуммаПР,
	|			ВЫБОР
	|				КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	|					ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаВрОборот, 0)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|							ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаВрОборот, 0) * &КоэффициентЕНВД
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ КАК СУммаВР
	|		ИЗ
	|			ВТ_ХозрасчетныйОбороты_Затраты КАК ЗатратыЕНВД
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЛОЖЬ,
	|			ЗатратыННП.Счет,
	|			ЗатратыННП.Организация,
	|			ЗатратыННП.Подразделение,
	|			ЗатратыННП.Субконто1,
	|			ВЫБОР
	|				КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ННП
	|					ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаОборот, 0)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|							ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаОборот, 0) * &КоэффициентННП
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ННП
	|					ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаНуОборот, 0)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|							ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаНуОборот, 0) * &КоэффициентННП
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ННП
	|					ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаПрОборот, 0)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|							ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаПрОборот, 0) * &КоэффициентННП
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ННП
	|					ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаВрОборот, 0)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|							ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаВрОборот, 0) * &КоэффициентННП
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|		ИЗ
	|			ВТ_ХозрасчетныйОбороты_Затраты КАК ЗатратыННП) КАК ТекущиеЗатраты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК СпособыРаспределения
	|			ПО ТекущиеЗатраты.Счет = СпособыРаспределения.СчетЗатрат
	|				И ТекущиеЗатраты.Подразделение = СпособыРаспределения.Подразделение
	|				И ТекущиеЗатраты.Субконто1 = СпособыРаспределения.СтатьяЗатрат
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	|					&КонДата,
	|					Организация = &Организация
	|						И Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоСтатьеЗатрат
	|			ПО ТекущиеЗатраты.Счет = СпособыРаспределенияПоСтатьеЗатрат.СчетЗатрат
	|				И ТекущиеЗатраты.Субконто1 = СпособыРаспределенияПоСтатьеЗатрат.СтатьяЗатрат
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	|					&КонДата,
	|					Организация = &Организация
	|						И СтатьяЗатрат = &ПустаяСтатьяЗатрат) КАК СпособыРаспределенияПоПодразделению
	|			ПО ТекущиеЗатраты.Подразделение = СпособыРаспределенияПоПодразделению.Подразделение
	|				И ТекущиеЗатраты.Счет = СпособыРаспределенияПоПодразделению.СчетЗатрат
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	|					&КонДата,
	|					Организация = &Организация
	|						И СтатьяЗатрат = &ПустаяСтатьяЗатрат
	|						И Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоСчету
	|			ПО ТекущиеЗатраты.Счет = СпособыРаспределенияПоСчету.СчетЗатрат
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	|					&КонДата,
	|					Организация = &Организация
	|						И СчетЗатрат = &ПустойСчет
	|						И СтатьяЗатрат = &ПустаяСтатьяЗатрат
	|						И Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоОрганизации
	|			ПО ТекущиеЗатраты.Организация = СпособыРаспределенияПоОрганизации.Организация) КАК ТаблицаСпособовРаспределения
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговыйРежим,
	|	Метод,
	|	СписокСтатейЗатрат
	|ИТОГИ ПО
	|	НалоговыйРежим,
	|	Метод,
	|	СписокСтатейЗатрат";	
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	Запрос.УстановитьПараметр("Распределяемые",Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам);
	Запрос.УстановитьПараметр("ЕНВД",Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	Запрос.УстановитьПараметр("ННП",Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);
	Запрос.УстановитьПараметр("КоэффициентЕНВД",СтруктураДопПараметров.КоэффициентЕНВД);
	Запрос.УстановитьПараметр("КоэффициентННП", 1- СтруктураДопПараметров.КоэффициентЕНВД);
	Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("СчетаЗатрат", СчетУчетаПоХарактеруЗатрат(ОбщепроизводственныеРасходы));
	
	РезультатЗапроса = Запрос.Выполнить();
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ВсеЗатраты";
	Запрос.Выполнить();
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ДляПроверки";
	Запрос.Выполнить();
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ХозрасчетныйОбороты_Затраты";
	Запрос.Выполнить();
	
КонецПроцедуры // СформироватьЗапросПоКосвеннымЗатратам()

// Функция распределения ОХР и ОПР затрат.
//
//	Параметры:
//		ОбщепроизводственныеРасходы - Булево;
//		БазаКоэффициентов - база коэф-тов распределения
//
Функция РаспределитьОПРиОХР(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы, СтруктураДопПараметров)
	
	РаспределениеВыполнено = Ложь;
	мКэшВидовСубконтоСчета=неопределено;
	
	// Формирование запроса по косвенным расходам
	РезультатЗапроса = НЕОПРЕДЕЛЕНО;
	СформироватьЗапросПоКосвеннымЗатратам(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы, РезультатЗапроса, СтруктураДопПараметров);
	
	ОбходПоНалоговымРежимам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ОбходПоНалоговымРежимам.Следующий() Цикл
		
		НалоговыйРежим = ОбходПоНалоговымРежимам.НалоговыйРежим;
		мБазаКоэффициентов = РасчетБазыКоэффициентов(СтруктураШапкиДокумента, НалоговыйРежим, СтруктураДопПараметров, ОбщепроизводственныеРасходы);
		
		ОбходПоМетодамРаспределения = ОбходПоНалоговымРежимам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ОбходПоМетодамРаспределения.Следующий() Цикл
			
			Если ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда
				ИмяРеквБазы = "Мат";
			ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ОплатаТруда Тогда
				ИмяРеквБазы = "ЗП";
			ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
				ИмяРеквБазы = "План";
			ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска Тогда
				ИмяРеквБазы = "Выпуск";
			ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ПрямыеЗатраты Тогда
				ИмяРеквБазы = "Прямые";
			ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
				ИмяРеквБазы = "ПрямыеСписок";  
				
			ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка Тогда
				ИмяРеквБазы = "Выручка";
				
			ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.НеРаспределяется Тогда	
				Обход = ОбходПоМетодамРаспределения.Выбрать();
				Пока Обход.Следующий() Цикл
					
					Если ЗначениеЗаполнено(Обход.Метод) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Не Обход.Сумма = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если ОбщепроизводственныеРасходы Тогда
						Если ЗначениеЗаполнено(Обход.Подразделение) И ЗначениеЗаполнено(Обход.СтатьяЗатрат) Тогда
							ТекстСообщения = "Не списаны общепроизводственные расходы, распределяемые вручную.
							|Для расходов по подразделению """ + Обход.Подразделение + """ и статье затрат """ + Обход.СтатьяЗатрат + """ установлен метод  ""Не распределять"" и обнаружены остатки по дебету счета 25.
							|Отразите списание этих расходов до проведения регламентной операции или измените метод распределения косвенных расходов (меню ""Предприятие"" - ""Учетная политика"" - ""Методы распределения косвенных расходов"".";
							ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, Обход.СтатьяЗатрат, Отказ, ЭтотОбъект);
						КонецЕсли;
						
					Иначе
						Если ЗначениеЗаполнено(Обход.СтатьяЗатрат) Тогда
							ТекстСообщения = "Не списаны общехозяйственные расходы, распределяемые вручную.
							|Для расходов по статье затрат """ + Обход.СтатьяЗатрат + """ установлен метод  ""Не распределять"" и обнаружены остатки по дебету счета 26.
							|Отразите списание этих расходов до проведения регламентной операции или измените метод распределения косвенных расходов (меню ""Предприятие"" - ""Учетная политика"" - ""Методы распределения косвенных расходов"".";
							ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, Обход.СтатьяЗатрат, Отказ, ЭтотОбъект);
							
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Продолжить;
			Иначе
				
				Обход = ОбходПоМетодамРаспределения.Выбрать();
				Пока Обход.Следующий() Цикл
					Если ОбщепроизводственныеРасходы Тогда
						Если ЗначениеЗаполнено(Обход.Подразделение) И ЗначениеЗаполнено(Обход.СтатьяЗатрат) Тогда
							ТекстСообщения = "Не указан способ распределения для общепроизводственных расходов по подразделению """ + Обход.Подразделение + """ и статье затрат """ + Обход.СтатьяЗатрат + """.
							|Рекомендуется воспользоваться меню ""Предприятие"" - ""Учетная политика"" - ""Методы распределения косвенных расходов организаций"".";
							ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, Обход.СтатьяЗатрат, Отказ, ЭтотОбъект);
						КонецЕсли;
					Иначе
						Если ЗначениеЗаполнено(Обход.СтатьяЗатрат) Тогда
							ТекстСообщения = "Не указан способ распределения для общехозяйственных расходов по статье затрат """ + Обход.СтатьяЗатрат + """.
							|Рекомендуется воспользоваться меню ""Предприятие"" - ""Учетная политика"" - ""Методы распределения косвенных расходов организаций""";
							ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, Обход.СтатьяЗатрат, Отказ, ЭтотОбъект);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			Обход = ОбходПоМетодамРаспределения.Выбрать();
			Пока Обход.Следующий() Цикл
				
				Если ИмяРеквБазы = "ПрямыеСписок" Тогда
					ОбходПоСпискуСтатейЗатрат = ОбходПоМетодамРаспределения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"СписокСтатейЗатрат");
					
					Пока ОбходПоСпискуСтатейЗатрат.Следующий() Цикл
						ТекущийСписокПрямыхЗатрат = ОбходПоСпискуСтатейЗатрат.СписокСтатейЗатрат;
						СписокПрямыхЗатрат = ТекущийСписокПрямыхЗатрат.СтатьиЗатрат.ВыгрузитьКолонку("СтатьяЗатрат");
						Если СписокПрямыхЗатрат.Количество() = 0 Тогда
							Отказ = Истина;
							ТекстСообщения = "Не указан список статей базы распределения ""Отдельные статьи прямых затрат"".
							|Для косвенных расходов по статье затрат " + ОбходПоСпискуСтатейЗатрат.СтатьяЗатрат + " указана база распределения ""Отдельные статьи прямых затрат"", но не указан сам список.
							|Укажите список затрат (меню ""Предприятие"" - ""Учетная политика"" - ""Методы распределения косвенных расходов"")";
							
							ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, ОбходПоСпискуСтатейЗатрат.СтатьяЗатрат, Отказ, ЭтотОбъект);
						Иначе
							мБазаКоэффициентов = РасчетБазыКоэффициентовСпискаЗатрат(СтруктураШапкиДокумента, СписокПрямыхЗатрат, НалоговыйРежим, СтруктураДопПараметров);
							Обход = ОбходПоСпискуСтатейЗатрат.Выбрать();
							Пока Обход.Следующий() Цикл
								
								РаспределитьОПРиОХРПроводки(Обход,мБазаКоэффициентов,ОбщепроизводственныеРасходы,ИмяРеквБазы,СтруктураДопПараметров,СтруктураШапкиДокумента,мКэшВидовСубконтоСчета,РаспределениеВыполнено);
							КонецЦикла;	
						КонецЕсли;
					КонецЦикла;
				Иначе	
					РаспределитьОПРиОХРПроводки(Обход,мБазаКоэффициентов,ОбщепроизводственныеРасходы,ИмяРеквБазы,СтруктураДопПараметров,СтруктураШапкиДокумента,мКэшВидовСубконтоСчета,РаспределениеВыполнено);	
				КонецЕсли;
				
				Если Отказ Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат РаспределениеВыполнено;
	
КонецФункции // РаспределитьОПРиОХР()


Процедура РаспределитьОПРиОХРПроводки(Обход,мБазаКоэффициентов,ОбщепроизводственныеРасходы,ИмяРеквБазы,СтруктураДопПараметров,СтруктураШапкиДокумента,мКэшВидовСубконтоСчета,РаспределениеВыполнено)
	
	ЗаписьРасчетаКосвенныхРасходов = СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов;
	
	СтруктПоиска = Новый Структура;
	
	Если (Обход.Сумма = 0 Или Обход.Сумма = NULL) И (Обход.СуммаНУ = 0 Или Обход.СуммаНУ = NULL) И (Обход.СуммаПР = 0 Или Обход.СуммаПР = NULL) И (Обход.СуммаВР = 0 Или Обход.СуммаВР = NULL) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктПоиска.Очистить();
	ФлагПоВсейБазе = НЕ ОбщепроизводственныеРасходы;
	
	ВсегоБазаРаспределения   = 0;
	ВсегоБазаРаспределенияНУ = 0;
	
	Если ФлагПоВсейБазе Тогда
		Для Каждого СтрКоэф Из мБазаКоэффициентов Цикл
			Если ЗначениеЗаполнено(СтрКоэф.ПодразделениеКт) Тогда
				Если Не Обход.Подразделение = СтрКоэф.ПодразделениеКт Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ВсегоБазаРаспределения = ВсегоБазаРаспределения   + СтрКоэф["База" + ИмяРеквБазы];
			ВсегоБазаРаспределенияНУ = ВсегоБазаРаспределенияНУ + СтрКоэф["База" + ИмяРеквБазы + "НУ"];
		КонецЦикла;
		НаборСтрок = мБазаКоэффициентов;
		
	Иначе
		
		СтруктПоиска.Вставить("Подразделение", Обход.Подразделение);
		НаборСтрок = мБазаКоэффициентов.НайтиСтроки(СтруктПоиска);
		Для Каждого СтрКоэф Из НаборСтрок Цикл
			Если ИмяРеквБазы = "Выручка" И Не Обход.Подразделение = СтрКоэф.ПодразделениеКт Тогда    
				Продолжить;
			КонецЕсли;
			ВсегоБазаРаспределения = ВсегоБазаРаспределения   + СтрКоэф["База" + ИмяРеквБазы];
			ВсегоБазаРаспределенияНУ = ВсегоБазаРаспределенияНУ + СтрКоэф["База" + ИмяРеквБазы + "НУ"];
		КонецЦикла;
	КонецЕсли;
	
	ПоследнийПередел = (Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "3" Или  СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "");
	
	СуммаКРаспр = Новый Структура("Сумма,СуммаНУ,СуммаПР,СуммаВР",0,0,0,0);
	СуммаСписанияНаСебестоимость = Новый Структура("Сумма,СуммаНУ,СуммаПР,СуммаВР",0,0,0,0);
	УчтеноБазаРаспределения = Новый Структура("Сумма,СуммаНУ",0,0);
	
	Для Каждого СтрКоэф Из НаборСтрок Цикл
		
		Если ЗначениеЗаполнено(СтрКоэф.ПодразделениеКт) Тогда
			Если ИмяРеквБазы = "Выручка" И Не Обход.Подразделение = СтрКоэф.ПодразделениеКт Тогда   
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		БазаРаспределения   = СтрКоэф["База" + ИмяРеквБазы];
		БазаРаспределенияНУ = СтрКоэф["База" + ИмяРеквБазы + "НУ"];
		БазаРаспределенияНаВыпуск = БазаРаспределения;
		
		
		УчтеноБазаРаспределения.Сумма   = УчтеноБазаРаспределения.Сумма + БазаРаспределения;
		УчтеноБазаРаспределения.СуммаНУ = УчтеноБазаРаспределения.СуммаНУ + БазаРаспределенияНУ;
		ДолжноБытьСписано   = ?(ВсегоБазаРаспределения = 0, 0, Окр(Обход.Сумма   * УчтеноБазаРаспределения.Сумма / ВсегоБазаРаспределения, 2, 1));
		ДолжноБытьСписаноНУ = ?(ВсегоБазаРаспределенияНУ = 0, 0, Окр(Обход.СуммаНУ * УчтеноБазаРаспределения.СуммаНУ / ВсегоБазаРаспределенияНУ, 2, 1));
		ДолжноБытьСписаноПР = ?(ВсегоБазаРаспределения = 0, 0, Окр(Обход.СуммаПР * УчтеноБазаРаспределения.Сумма / ВсегоБазаРаспределения, 2, 1));
		ДолжноБытьСписаноВР = ?(ВсегоБазаРаспределения = 0, 0, Окр(Обход.СуммаВР * УчтеноБазаРаспределения.Сумма / ВсегоБазаРаспределения, 2, 1));
		СуммаСписания   = ДолжноБытьСписано - СуммаКРаспр.Сумма;
		СуммаСписанияНУ = ДолжноБытьСписаноНУ - СуммаКРаспр.СуммаНУ;
		СуммаСписанияПР = ДолжноБытьСписаноПР - СуммаКРаспр.СуммаПР;
		СуммаСписанияВР = ДолжноБытьСписаноВР - СуммаКРаспр.СуммаВР;
		СуммаКРаспр.Сумма = СуммаКРаспр.Сумма + СуммаСписания;
		СуммаКРаспр.СуммаНУ = СуммаКРаспр.СуммаНУ + СуммаСписанияНУ;
		СуммаКРаспр.СуммаПР = СуммаКРаспр.СуммаПР + СуммаСписанияПР;
		СуммаКРаспр.СуммаВР = СуммаКРаспр.СуммаВР + СуммаСписанияВР;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
			Разница = СуммаСписания - СуммаСписанияНУ - СуммаСписанияПР - СуммаСписанияВР;
		Иначе
			Разница = 0;
		КонецЕсли;
		
		СуммаСписанияПР = СуммаСписанияПР + Разница;
		
		Если СуммаСписания <> 0 Или СуммаСписанияНУ <> 0 Или СуммаСписанияПР <> 0 Или СуммаСписанияВР <> 0  Тогда
			
			НоваяПроводка = мПроводки.Добавить();
			НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
			
			НоваяПроводка.Активность  = Истина;
			НоваяПроводка.Период      = СтруктураШапкиДокумента.Дата;
			НоваяПроводка.Содержание  = "Распределение ОПР и ОХР";
			
			НоваяПроводка.Сумма   = СуммаСписания;
			СуммаНУ = СуммаСписанияНУ;
			СуммаПР = СуммаСписанияПР;
			СуммаВР = СуммаСписанияВР;
			
			Если Не ЗначениеЗаполнено(СтрКоэф.СчетЗатрат) Тогда
				ТекстСообщения = "Не указан счета учета прямых расходов для оказания услуг.
				|Не обнаружен счет учета прямых расходов для отражения стоимости оказанных услуг по номенклатурной группе " + СтрКоэф.НоменклатурнаяГруппа + ".
				|Укажите счет учета прямых расходов (меню ""Предприятие"" - ""Учетная политика"" - ""Методы распределения косвенных расходов организаций""), для записи для базы распределения ""Выручка"" заполните колонку ""Счет учета прямых затрат"").";
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , Отказ, ЭтотОбъект);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрКоэф.Подразделение) Тогда
				ТекстСообщения = "Ошибка подразделения учета прямых расходов для оказания услуг.
				|Не обнаружено подразделение прямых расходов для отражения стоимости оказанных услуг по номенклатурной группе " + СтрКоэф.НоменклатурнаяГруппа + ".
				|Укажите подразделение учета прямых расходов (меню ""Предприятие"" - ""Учетная политика"" - ""Методы распределения косвенных расходов организаций""), для записи для базы распределения ""Выручка"", заполните колонку ""Подразделение затрат"").";
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , Отказ, ЭтотОбъект);
			КонецЕсли;
			НоваяПроводка.СчетДт = СтрКоэф.СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрКоэф.НоменклатурнаяГруппа,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(НоваяПроводка.СчетДт,мКэшВидовСубконтоСчета));
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         Обход.СтатьяЗатрат,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(НоваяПроводка.СчетДт,мКэшВидовСубконтоСчета));
			
			СчетКт = Обход.СчетЗатрат;
			НоваяПроводка.СчетКт = СчетКт;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",         Обход.СтатьяЗатрат,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(НоваяПроводка.СчетКт,мКэшВидовСубконтоСчета));
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			НоваяПроводка, СтрКоэф.Подразделение, Обход.Подразделение);
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,НоваяПроводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
			
			РаспределениеВыполнено = Истина;
			
			//Записываем порциями(в случае большого количество проводок)
			Если НЕ Отказ И мПроводки.Количество() >= 10000 Тогда
				мПроводки.Записать(Ложь);	
			КонецЕсли;	
			
			
			СтрокаЗаписьРасчетаКосвенныхРасходов = ЗаписьРасчетаКосвенныхРасходов.Добавить();
			СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = СчетКт;
			СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = ?(ОбщепроизводственныеРасходы, Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов, Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщехозяйственныхРасходов);
			СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Обход.Подразделение;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Обход.СтатьяЗатрат;
			СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = Обход.Метод;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = БазаРаспределения;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазыНУ = БазаРаспределенияНУ;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазыПР = БазаРаспределения;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазыВР = БазаРаспределения;
			СтрокаЗаписьРасчетаКосвенныхРасходов.ЕНВД = Обход.НалоговыйРежим;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = СтрКоэф.СчетЗатрат;
			СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения = СтрКоэф.Подразделение;
			СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = СтрКоэф.НоменклатурнаяГруппа;
			СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма = СуммаСписания;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаНУ = СуммаСписанияНУ;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаПР = СуммаСписанияПР;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаВР = СуммаСписанияВР;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Отказ И РаспределениеВыполнено Тогда
		мПроводки.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры


// Функция расчета коэф. распределения косвенных затрат по переделам
//
Функция РасчетБазыКоэффициентов(СтруктураШапкиДокумента, ЭтоЕНВД, СтруктураДопПараметров, ОбщепроизводственныеРасходы)  
	
	СтруктураДопПараметров.Вставить("МенеджерВременныхТаблиц", НалоговыйУчет.СписокПрямыхРасходовНУ(Организация, Дата));
	НалоговыйРежим = ?(ЭтоЕНВД, Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД, Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);
	
	Запрос = Новый Запрос;   
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ПолнаяБазаРаспределения.СчетЗатрат КАК СчетЗатрат,
	|	ПолнаяБазаРаспределения.Подразделение КАК Подразделение,
	|	ПолнаяБазаРаспределения.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	СУММА(ПолнаяБазаРаспределения.БазаМат) КАК БазаМат,
	|	СУММА(ПолнаяБазаРаспределения.БазаЗП) КАК БазаЗП,
	|	СУММА(ПолнаяБазаРаспределения.БазаВыпуск) КАК БазаВыпуск,
	|	СУММА(ПолнаяБазаРаспределения.БазаПлан) КАК БазаПлан,
	|	СУММА(ПолнаяБазаРаспределения.БазаПрямые) КАК БазаПрямые,
	|	СУММА(ПолнаяБазаРаспределения.БазаСписокЗатрат) КАК БазаПрямыеСписок,
	|	МИНИМУМ(ПолнаяБазаРаспределения.БазаВыручка) КАК БазаВыручка,
	|	СУММА(ПолнаяБазаРаспределения.БазаМатНУ) КАК БазаМатНУ,
	|	СУММА(ПолнаяБазаРаспределения.БазаЗПНУ) КАК БазаЗПНУ,
	|	СУММА(ПолнаяБазаРаспределения.БазаПрямыеНУ) КАК БазаПрямыеНУ,
	|	МИНИМУМ(ПолнаяБазаРаспределения.БазаВыручкаНУ) КАК БазаВыручкаНУ,
	|	СУММА(ПолнаяБазаРаспределения.БазаВыпуск) КАК БазаВыпускНУ,
	|	СУММА(ПолнаяБазаРаспределения.БазаПлан) КАК БазаПланНУ,
	|	ПолнаяБазаРаспределения.ПодразделениеКт КАК ПодразделениеКт
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Счет КАК СчетЗатрат,
	|		ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|		ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппа,
	|		СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ = &МатЗатраты
	|					ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК БазаМат,
	|		СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ = &ОплатаТруда
	|					ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК БазаЗП,
	|		0 КАК БазаВыпуск,
	|		0 КАК БазаПлан,
	|		0 КАК БазаПрямые,
	|		0 КАК БазаСписокЗатрат,
	|		0 КАК БазаВыручка,
	|		СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ = &МатЗатраты
	|					ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотДт, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК БазаМатНУ,
	|		СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ = &ОплатаТруда
	|					ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотДт, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК БазаЗПНУ,
	|		0 КАК БазаПрямыеНУ,
	|		0 КАК БазаВыручкаНУ,
	|		NULL КАК ПодразделениеКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачДата,
	|				&КонГраница,
	|				Месяц,
	|				Счет В ИЕРАРХИИ (&СчетЗатрат),
	|				&ВидыСубконто,
	|				Организация = &Организация
	|					И Субконто2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим,
	|				(НЕ КорСчет В ИЕРАРХИИ (&СчетаВсехЗатрат)),
	|				) КАК ХозрасчетныйОбороты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ХозрасчетныйОбороты.Счет,
	|		ХозрасчетныйОбороты.Подразделение,
	|		ХозрасчетныйОбороты.Субконто1
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВыпускПродукцииУслуг.СчетЗатрат,
	|		ВыпускПродукцииУслуг.Подразделение,
	|		ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
	|		0,
	|		0,
	|		СУММА(ВыпускПродукцииУслуг.Количество),
	|		СУММА(ВыпускПродукцииУслуг.ПлановаяСтоимость),
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукцииУслуг КАК ВыпускПродукцииУслуг
	|	ГДЕ
	|		ВыпускПродукцииУслуг.Период МЕЖДУ &НачДата И &КонДата
	|		И ВыпускПродукцииУслуг.Подразделение.Владелец = &Организация
	|		И ВыпускПродукцииУслуг.СчетСписания В ИЕРАРХИИ(&Счет90ЕНВД)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВыпускПродукцииУслуг.СчетЗатрат,
	|		ВыпускПродукцииУслуг.Подразделение,
	|		ВыпускПродукцииУслуг.НоменклатурнаяГруппа
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрямыеЗатраты.Счет,
	|		ПрямыеЗатраты.Подразделение,
	|		ПрямыеЗатраты.Субконто1,
	|		0,
	|		0,
	|		0,
	|		0,
	|		СУММА(ЕСТЬNULL(ПрямыеЗатраты.СуммаОборотДт, 0)),
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		NULL
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачДата,
	|				&КонГраница,
	|				Месяц,
	|				Счет В ИЕРАРХИИ (&СчетаПрямыхЗатрат),
	|				&ВидыСубконто,
	|				Организация = &Организация
	|					И Субконто2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим,
	|				(НЕ КорСчет В ИЕРАРХИИ (&СчетаВсехЗатрат)),
	|				) КАК ПрямыеЗатраты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПрямыеЗатраты.Счет,
	|		ПрямыеЗатраты.Подразделение,
	|		ПрямыеЗатраты.Субконто1
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА &ОбщепроизводственныеРасходы
	|				ТОГДА ЕСТЬNULL(ЗатратыПроизводства.Счет, МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СчетПрямыхЗатрат)
	|			ИНАЧЕ ЕСТЬNULL(ЗатратыПроизводства.Счет, ЕСТЬNULL(Подразделения26.СчетПрямыхЗатрат, МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СчетПрямыхЗатрат))
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА &ОбщепроизводственныеРасходы
	|				ТОГДА ЕСТЬNULL(ЗатратыПроизводства.Субконто1, Подразделение25.Подразделение)
	|			ИНАЧЕ ЕСТЬNULL(ЗатратыПроизводства.Субконто1, ЕСТЬNULL(Подразделения26.ПодразделениеЗатрат, МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.ПодразделениеЗатрат))
	|		КОНЕЦ,
	|		ВыручкаУслуг.НоменклатурнаяГруппа,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ЕСТЬNULL(ВыручкаУслуг.ВыручкаБУ, 0),
	|		0,
	|		0,
	|		0,
	|		ЕСТЬNULL(ВыручкаУслуг.ВыручкаНУ, 0),
	|		Подразделения26.Подразделение
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ХозрасчетныйОбороты.Подразделение КАК Подразделение
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонГраница, , Счет В ИЕРАРХИИ (&СчетТекущихЗатрат), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты) КАК Подразделение25,
	|		РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	|				&КонГраница,
	|				Организация = &Организация
	|					И БазаРаспределения = &Выручка
	|					И СчетЗатрат В ИЕРАРХИИ (&СчетТекущихЗатрат)) КАК МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних,
	|		(ВЫБРАТЬ
	|			МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|			МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СчетПрямыхЗатрат КАК СчетПрямыхЗатрат,
	|			ХозрасчетныйОбороты.Подразделение КАК Подразделение
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонГраница, , Счет В ИЕРАРХИИ (&СчетТекущихЗатрат), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	|						&КонГраница,
	|						Организация = &Организация
	|							И БазаРаспределения = &Выручка
	|							И СчетЗатрат В ИЕРАРХИИ (&СчетТекущихЗатрат)) КАК МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних
	|				ПО (ВЫБОР
	|						КОГДА МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Подразделение = &ПустоеПодразделение
	|							ТОГДА ХозрасчетныйОбороты.Организация = МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Организация
	|						ИНАЧЕ ХозрасчетныйОбороты.Подразделение = МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Подразделение
	|					КОНЕЦ)) КАК Подразделения26,
	|		(ВЫБРАТЬ
	|			РеализацияУслугОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|			РеализацияУслугОбороты.СуммаОборот КАК ВыручкаБУ,
	|			РеализацияУслугОбороты.СуммаОборот КАК ВыручкаНУ
	|		ИЗ
	|			РегистрНакопления.РеализацияУслуг.Обороты(
	|					&НачДата,
	|					&КонГраница,
	|					,
	|					Организация = &Организация
	|						И СчетРасходов В ИЕРАРХИИ (&Счет90_2)) КАК РеализацияУслугОбороты) КАК ВыручкаУслуг
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ХозрасчетныйОбороты.Счет КАК Счет,
	|				ХозрасчетныйОбороты.Подразделение КАК Субконто1,
	|				ХозрасчетныйОбороты.Субконто1 КАК Субконто2,
	|				СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаОборотДт
	|			ИЗ
	|				РегистрБухгалтерии.Хозрасчетный.Обороты(
	|						&НачДата,
	|						&КонГраница,
	|						Месяц,
	|						Счет В ИЕРАРХИИ (&СчетЗатрат),
	|						&ВидыСубконто,
	|						Организация = &Организация
	|							И Субконто2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим,
	|						(НЕ КорСчет В ИЕРАРХИИ (&СчетЗатратКосвенных)),
	|						) КАК ХозрасчетныйОбороты
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ХозрасчетныйОбороты.Счет,
	|				ХозрасчетныйОбороты.Подразделение,
	|				ХозрасчетныйОбороты.Субконто1
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ВыпускПродукцииУслугОбороты.СчетЗатрат,
	|				ВыпускПродукцииУслугОбороты.Подразделение,
	|				ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа,
	|				ВыпускПродукцииУслугОбороты.ПлановаяСтоимостьОборот
	|			ИЗ
	|				РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
	|						&НачДата,
	|						&КонГраница,
	|						Месяц,
	|						Организация = &Организация
	|							И СчетСписания В ИЕРАРХИИ (&Счет90_2)
	|							И СчетЗатрат В ИЕРАРХИИ (&СчетЗатрат)) КАК ВыпускПродукцииУслугОбороты) КАК ЗатратыПроизводства
	|			ПО ВыручкаУслуг.НоменклатурнаяГруппа = ЗатратыПроизводства.Субконто2
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА &ОбщепроизводственныеРасходы
	|				ТОГДА ЕСТЬNULL(ЗатратыПроизводства.Счет, МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СчетПрямыхЗатрат)
	|			ИНАЧЕ ЕСТЬNULL(ЗатратыПроизводства.Счет, ЕСТЬNULL(Подразделения26.СчетПрямыхЗатрат, МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СчетПрямыхЗатрат))
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА &ОбщепроизводственныеРасходы
	|				ТОГДА ЕСТЬNULL(ЗатратыПроизводства.Субконто1, Подразделение25.Подразделение)
	|			ИНАЧЕ ЕСТЬNULL(ЗатратыПроизводства.Субконто1, ЕСТЬNULL(Подразделения26.ПодразделениеЗатрат, МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.ПодразделениеЗатрат))
	|		КОНЕЦ,
	|		ВыручкаПродукции.НоменклатурнаяГруппа,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ЕСТЬNULL(ВыручкаПродукции.ВыручкаБУ, 0),
	|		0,
	|		0,
	|		0,
	|		ЕСТЬNULL(ВыручкаПродукции.ВыручкаНУ, 0),
	|		Подразделения26.Подразделение
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ХозрасчетныйОбороты.Подразделение КАК Подразделение
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонГраница, , Счет В ИЕРАРХИИ (&СчетТекущихЗатрат), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты) КАК Подразделение25,
	|		РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	|				&КонГраница,
	|				Организация = &Организация
	|					И БазаРаспределения = &Выручка
	|					И СчетЗатрат В ИЕРАРХИИ (&СчетТекущихЗатрат)) КАК МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних,
	|		(ВЫБРАТЬ
	|			МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|			МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.СчетПрямыхЗатрат КАК СчетПрямыхЗатрат,
	|			ХозрасчетныйОбороты.Подразделение КАК Подразделение
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонГраница, , Счет В ИЕРАРХИИ (&СчетТекущихЗатрат), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	|						&КонГраница,
	|						Организация = &Организация
	|							И БазаРаспределения = &Выручка
	|							И СчетЗатрат В ИЕРАРХИИ (&СчетТекущихЗатрат)) КАК МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних
	|				ПО (ВЫБОР
	|						КОГДА МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Подразделение = &ПустоеПодразделение
	|							ТОГДА ХозрасчетныйОбороты.Организация = МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Организация
	|						ИНАЧЕ ХозрасчетныйОбороты.Подразделение = МетодыРаспределенияКосвенныхРасходовОрганизацийСрезПоследних.Подразделение
	|					КОНЕЦ)) КАК Подразделения26,
	|		(ВЫБРАТЬ
	|			ВыручкаПРодукции.НоменклатурнаяГруппаПродукции КАК НоменклатурнаяГруппа,
	|			ВыручкаПРодукции.ВыручкаБУ КАК ВыручкаБУ,
	|			ВыручкаПРодукции.ВыручкаНУ КАК ВыручкаНУ
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппаПродукции,
	|				ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт КАК ВыручкаБУ,
	|				ХозрасчетныйОбороты.СуммаНУОборотКт КАК ВыручкаНУ
	|			ИЗ
	|				РегистрНакопления.ВыпускПродукцииУслуг.Обороты(&НачДата, &КонГраница, , Организация = &Организация) КАК ВыпускПродукцииУслугОбороты
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонГраница, , Счет В ИЕРАРХИИ (&Счет90), &НоменклатурныеГруппы, Организация = &Организация, (НЕ КорСчет В ИЕРАРХИИ (&Счет90)), ) КАК ХозрасчетныйОбороты
	|					ПО ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа = ХозрасчетныйОбороты.Субконто1) КАК ВыручкаПРодукции) КАК ВыручкаПродукции
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ХозрасчетныйОбороты.Счет КАК Счет,
	|				ХозрасчетныйОбороты.Подразделение КАК Субконто1,
	|				ХозрасчетныйОбороты.Субконто1 КАК Субконто2,
	|				СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаОборотДт
	|			ИЗ
	|				РегистрБухгалтерии.Хозрасчетный.Обороты(
	|						&НачДата,
	|						&КонГраница,
	|						Месяц,
	|						Счет В ИЕРАРХИИ (&СчетЗатрат),
	|						&ВидыСубконто,
	|						Организация = &Организация
	|							И Субконто2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим,
	|						(НЕ КорСчет В ИЕРАРХИИ (&СчетЗатратКосвенных)),
	|						) КАК ХозрасчетныйОбороты
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ХозрасчетныйОбороты.Счет,
	|				ХозрасчетныйОбороты.Подразделение,
	|				ХозрасчетныйОбороты.Субконто1
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ВыпускПродукцииУслугОбороты.СчетЗатрат,
	|				ВыпускПродукцииУслугОбороты.Подразделение,
	|				ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа,
	|				ВыпускПродукцииУслугОбороты.ПлановаяСтоимостьОборот
	|			ИЗ
	|				РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
	|						&НачДата,
	|						&КонГраница,
	|						Месяц,
	|						Организация = &Организация
	|							И СчетСписания В ИЕРАРХИИ (&Счет90_2)
	|							И СчетЗатрат В ИЕРАРХИИ (&СчетЗатрат)) КАК ВыпускПродукцииУслугОбороты) КАК ЗатратыПроизводства
	|			ПО ВыручкаПродукции.НоменклатурнаяГруппа = ЗатратыПроизводства.Субконто2
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрямыеЗатраты.Счет,
	|		ПрямыеЗатраты.Подразделение,
	|		ПрямыеЗатраты.Субконто1,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		СУММА(ВЫБОР
	|				КОГДА Правила.ВидЗатратНУ ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ ЕСТЬNULL(ПрямыеЗатраты.СуммаНУОборотДт, 0)
	|			КОНЕЦ),
	|		0,
	|		NULL
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачДата,
	|				&КонГраница,
	|				Месяц,
	|				Счет В ИЕРАРХИИ (&СчетаВсехЗатрат),
	|				&ВидыСубконто,
	|				Организация = &Организация
	|					И Субконто2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим,
	|				(НЕ КорСчет В ИЕРАРХИИ (&СчетаВсехЗатрат)),
	|				) КАК ПрямыеЗатраты
	|			ЛЕВОЕ СОЕДИНЕНИЕ СписокПрямыхРасходовНУ КАК Правила
	|			ПО (Правила.ВидЗатратНУ = ПрямыеЗатраты.Субконто2.ВидРасходовНУ)
	|				И (ВЫБОР
	|					КОГДА Правила.Подразделение <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.Подразделение = ПрямыеЗатраты.Подразделение
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СчетЗатрат = ПрямыеЗатраты.Счет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.КорСчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.КорСчетЗатрат = ПрямыеЗатраты.КорСчет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СтатьяЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СтатьяЗатрат = ПрямыеЗатраты.Субконто2
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПрямыеЗатраты.Счет,
	|		ПрямыеЗатраты.Подразделение,
	|		ПрямыеЗатраты.Субконто1) КАК ПолнаяБазаРаспределения
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолнаяБазаРаспределения.СчетЗатрат,
	|	ПолнаяБазаРаспределения.Подразделение,
	|	ПолнаяБазаРаспределения.НоменклатурнаяГруппа,
	|	ПолнаяБазаРаспределения.ПодразделениеКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетЗатрат,
	|	Подразделение,
	|	НоменклатурнаяГруппа,
	|	ПодразделениеКт";
	
	Запрос.МенеджерВременныхТаблиц = СтруктураДопПараметров.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("КонДата",     мКонДата);
	Запрос.УстановитьПараметр("КонГраница",  мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ОплатаТруда", Перечисления.ВидыРасходовНУ.ОплатаТруда);
	Запрос.УстановитьПараметр("МатЗатраты",  Перечисления.ВидыРасходовНУ.МатериальныеРасходы);
	Запрос.УстановитьПараметр("Выручка",  Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка);
	Запрос.УстановитьПараметр("НалоговыйРежим", НалоговыйРежим);
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	Запрос.УстановитьПараметр("СчетаВсехЗатрат", СчетаЗатрат);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	Запрос.УстановитьПараметр("НоменклатурныеГруппы",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	Запрос.УстановитьПараметр("Счет90",  ?(ЭтоЕНВД, ПланыСчетов.Хозрасчетный.ВыручкаЕНВД, Массив));
	Запрос.УстановитьПараметр("Счет90_2",  ?(ЭтоЕНВД, ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД, ПланыСчетов.Хозрасчетный.СебестоимостьПродажНЕЕНВД));
	
	Если НЕ ЭтоЕНВД Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыпускПродукцииУслуг.СчетСписания В ИЕРАРХИИ(&Счет90ЕНВД)", "Не ВыпускПродукцииУслуг.СчетСписания В ИЕРАРХИИ(&Счет90ЕНВД)");
	КонецЕсли;
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	
	Запрос.УстановитьПараметр("СчетЗатрат", СчетаЗатрат);
	Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", СчетаЗатрат);
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	Запрос.УстановитьПараметр("СчетЗатратКосвенных", СчетаЗатрат);
	
	Запрос.УстановитьПараметр("СчетТекущихЗатрат", СчетУчетаПоХарактеруЗатрат(ОбщепроизводственныеРасходы));
	Запрос.УстановитьПараметр("ОбщепроизводственныеРасходы", ОбщепроизводственныеРасходы);
	
	Запрос.УстановитьПараметр("Счет90ЕНВД", ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД);
	Запрос.УстановитьПараметр("Пустой",     ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	Результат =  Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // РасчетБазыКоэффициентов()

Функция РасчетБазыКоэффициентовСпискаЗатрат(СтруктураШапкиДокумента, СписокЗатрат, ЭтоЕНВД, СтруктураДопПараметров)
	
	НалоговыйРежим = ?(ЭтоЕНВД, Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД, Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);
	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ПолнаяБазаРаспределения.СчетЗатрат КАК СчетЗатрат,
	|	ПолнаяБазаРаспределения.Подразделение КАК Подразделение,
	|	ПолнаяБазаРаспределения.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	0 КАК БазаМат,
	|	0 КАК БазаЗП,
	|	0 КАК БазаВыпуск,
	|	0 КАК БазаПлан,
	|	0 КАК БазаПрямые,
	|	0 КАК БазаВыручка,
	|	0 КАК БазаМатНУ,
	|	0 КАК БазаЗПНУ,
	|	0 КАК БазаВыпускНУ,
	|	0 КАК БазаПланНУ,
	|	0 КАК БазаПрямыеНУ,
	|	0 КАК БазаВыручкаНУ,
	|	СУММА(ПолнаяБазаРаспределения.БазаПрямые) КАК БазаПрямыеСписок,
	|	СУММА(ПолнаяБазаРаспределения.БазаПрямыеНУ) КАК БазаПрямыеСписокНУ,
	|	ПолнаяБазаРаспределения.ПодразделениеКт КАК ПодразделениеКт
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПрямыеЗатраты.Счет КАК СчетЗатрат,
	|		ПрямыеЗатраты.Подразделение КАК Подразделение,
	|		ПрямыеЗатраты.Субконто1 КАК НоменклатурнаяГруппа,
	|		ПрямыеЗатраты.СуммаОборотДт КАК БазаПрямые,
	|		0 КАК БазаПрямыеНУ,
	|		ПрямыеЗатраты.ПодразделениеКор КАК ПодразделениеКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачДата,
	|				&КонДата,
	|				Месяц,
	|				Счет В ИЕРАРХИИ (&СчетаПрямыхЗатрат),
	|				&ВидыСубконто,
	|				Организация = &Организация
	|					И Субконто2 В (&СписокЗатрат)
	|					И Субконто2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим,
	|				,
	|				) КАК ПрямыеЗатраты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПрямыеЗатраты.Счет,
	|		ПрямыеЗатраты.СуммаОборотДт,
	|		ПрямыеЗатраты.Подразделение,
	|		ПрямыеЗатраты.Субконто1,
	|		ПрямыеЗатраты.ПодразделениеКор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрямыеЗатраты.Счет,
	|		ПрямыеЗатраты.Подразделение,
	|		ПрямыеЗатраты.Субконто1,
	|		0,
	|		ПрямыеЗатраты.СуммаНУОборотДт,
	|		ПрямыеЗатраты.ПодразделениеКор
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачДата,
	|				&КонДата,
	|				Месяц,
	|				Счет В ИЕРАРХИИ (&СчетаПрямыхЗатрат),
	|				&ВидыСубконто,
	|				Организация = &Организация
	|					И Субконто2 В (&СписокЗатрат)
	|					И Субконто2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим,
	|				,
	|				) КАК ПрямыеЗатраты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПрямыеЗатраты.Счет,
	|		ПрямыеЗатраты.СуммаНУОборотДт,
	|		ПрямыеЗатраты.Подразделение,
	|		ПрямыеЗатраты.Субконто1,
	|		ПрямыеЗатраты.ПодразделениеКор) КАК ПолнаяБазаРаспределения
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолнаяБазаРаспределения.СчетЗатрат,
	|	ПолнаяБазаРаспределения.Подразделение,
	|	ПолнаяБазаРаспределения.НоменклатурнаяГруппа,
	|	ПолнаяБазаРаспределения.БазаПрямыеНУ,
	|	ПолнаяБазаРаспределения.ПодразделениеКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетЗатрат,
	|	Подразделение,
	|	НоменклатурнаяГруппа,
	|	БазаПрямыеНУ,
	|	ПодразделениеКт";
	
	Запрос.УстановитьПараметр("НачДата",      мНачДата);
	Запрос.УстановитьПараметр("КонДата",      мКонГраница);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокЗатрат", СписокЗатрат);
	Запрос.УстановитьПараметр("НалоговыйРежим",НалоговыйРежим);
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.УстановитьПараметр("СчетЗатрат", СчетаЗатрат);
	Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", СчетаЗатрат);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	Запрос.УстановитьПараметр("СчетВсехЗатрат", СчетаЗатрат);
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", СчетаЗатрат);
	
	
	Результат =  Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // РасчетБазыКоэффициентовСпискаЗатрат()

// Общепроизводственные и общехозяйственные расходы (не
// используется директ-костинг) списываются на счета учета
// прямых расходов основного и вспомогательного производства.
// При списании расходы распределяются по подразделениям и
// номенклатурным группам.
//
Процедура РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров, ЗакрыватьОПР = Истина, ЗакрыватьОХР = Истина)
	
	СтруктураДопПараметров.ЭтапСписанияКосвенныхРасходов = 2;
	ЗакрытиеCчетовКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	
	РаспределениеВыполнено = Ложь;
	КоэффициентЕНВД = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, мКонДата, мНачДата, "БУ", Ложь);
	СтруктураДопПараметров.Вставить("КоэффициентЕНВД", КоэффициентЕНВД);
	
	// Списание общехозяйственных расходов на счете учета расходов
	// основного и вспомогательного производств.
	Если Не СтруктураШапкиДокумента.УчетнаяПолитика.ДиректКостинг И ЗакрыватьОХР Тогда
		ОбщепроизводственныеРасходы = Ложь;
		РаспределениеВыполнено = РаспределитьОПРиОХР(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы, СтруктураДопПараметров);
	КонецЕсли;
	
	// Списание общепроизводственных расходов на счете учета расходов
	// основного и вспомогательного производств.
	Если ЗакрыватьОПР Тогда
		ОбщепроизводственныеРасходы = Истина;
		РаспределениеВыполнено = РаспределитьОПРиОХР(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы, СтруктураДопПараметров);
	КонецЕсли;
	
	// Распределение общехозяйственных и общепроизводственных расходов
	// на себестоимость выпущенной продукции (услуг).
	РасчетПрямыхЗатрат(СтруктураШапкиДокумента, Истина, СтруктураДопПараметров);
	
КонецПроцедуры // РаспределениеКосвенныхРасходов()

// Процедура списывает затраты по услугам, реализация которых отражена 
// без отражения выпуска в плановых ценах
Процедура ДвиженияПоПрямымЗатратамПоУслугам(СтруктураШапкиДокумента, СтруктураДопПараметров, ВыполненоРаспределениеОХРИлиОПР)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",               мНачДата);
	Запрос.УстановитьПараметр("КонДата",               мКонДата);
	Запрос.УстановитьПараметр("НачГраница",            мНачГраница);
	Запрос.УстановитьПараметр("КонГраница",            мКонГраница);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	ХозрасчетныйОстатки.Субконто1 КАК НоменклатурнаяГруппа,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0)) КАК ОстатокПрямыхРасходов,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокДт, 0) КАК ОстатокПрямыхРасходовНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокДт, 0) КАК ОстатокПрямыхРасходовПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокДт, 0) КАК ОстатокПрямыхРасходовВР,
	|	МАКСИМУМ(ЕСТЬNULL(ОстаткиНЗП.СуммаБУ, 0)) КАК СуммаНЗП,
	|	ЕСТЬNULL(ОстаткиНЗП.СуммаНУ, 0) КАК СуммаНЗПНУ,
	|	ЕСТЬNULL(РеализацияУслуг.СчетРасходов, 0) КАК СчетРасходов,
	|	ЕСТЬNULL(РеализацияУслуг.СуммаОборот, 0) КАК Выручка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&Счета), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ИнвентаризацияНЗП.СчетЗатрат КАК СчетЗатрат,
	|			ИнвентаризацияНЗП.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|			СУММА(ИнвентаризацияНЗПСостав.Сумма) КАК СуммаБУ,
	|			ИнвентаризацияНЗПСостав.СуммаНУ КАК СуммаНУ
	|		ИЗ
	|			Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
	|				ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
	|		ГДЕ
	|			ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата
	|			И ИнвентаризацияНЗП.Организация = &Организация
	|			И (НЕ ИнвентаризацияНЗП.ПометкаУдаления)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ИнвентаризацияНЗП.СчетЗатрат,
	|			ИнвентаризацияНЗП.ПодразделениеОрганизации,
	|			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
	|			ИнвентаризацияНЗПСостав.СуммаНУ) КАК ОстаткиНЗП
	|		ПО ХозрасчетныйОстатки.Субконто1 = ОстаткиНЗП.НоменклатурнаяГруппа
	|			И ХозрасчетныйОстатки.Счет = ОстаткиНЗП.СчетЗатрат
	|			И ХозрасчетныйОстатки.Подразделение = ОстаткиНЗП.ПодразделениеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РеализацияУслугОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|			РеализацияУслугОбороты.СчетРасходов КАК СчетРасходов,
	|			СУММА(ЕСТЬNULL(РеализацияУслугОбороты.СуммаОборот, 0)) КАК СуммаОборот
	|		ИЗ
	|			РегистрНакопления.РеализацияУслуг.Обороты(&НачГраница, &КонГраница, , Организация = &Организация) КАК РеализацияУслугОбороты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РеализацияУслугОбороты.НоменклатурнаяГруппа,
	|			РеализацияУслугОбороты.СчетРасходов) КАК РеализацияУслуг
	|		ПО ХозрасчетныйОстатки.Субконто1 = РеализацияУслуг.НоменклатурнаяГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	РеализацияУслуг.СчетРасходов,
	|	РеализацияУслуг.СуммаОборот,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ОстаткиНЗП.СуммаНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокДт, 0),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокДт, 0),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокДт, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	Подразделение,
	|	НоменклатурнаяГруппа,
	|	СчетРасходов
	|ИТОГИ
	|	МАКСИМУМ(ОстатокПрямыхРасходов),
	|	МАКСИМУМ(ОстатокПрямыхРасходовНУ),
	|	МАКСИМУМ(ОстатокПрямыхРасходовПР),
	|	МАКСИМУМ(ОстатокПрямыхРасходовВР),
	|	МАКСИМУМ(СуммаНЗП),
	|	МАКСИМУМ(СуммаНЗПНУ),
	|	СУММА(Выручка)
	|ПО
	|	Счет,
	|	Подразделение,
	|	НоменклатурнаяГруппа,
	|	СчетРасходов";
	
	Массив = Новый Массив;	
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.УстановитьПараметр("Счета"      , Массив);
	
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаписьРасчетаСебестоимости = СтруктураДопПараметров.ЗаписьРасчетаСебестоимости;
	
	ОбходПоСчетамЗатрат = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоСчетамЗатрат.Следующий() Цикл
		ОбходПоПодразделениям = ОбходПоСчетамЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоПодразделениям.Следующий() Цикл
			ОбходПоНомГруппам = ОбходПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоНомГруппам.Следующий() Цикл
				
				Если ОбходПоНомГруппам.Выручка = NULL Тогда
					Продолжить;
				КонецЕсли;
				
				// Прямые расходы за минусом НЗП подлежат распределению
				// на стоимость готовой продукции, услуг.
				// Т.к. при оприходовании на склад готовой продукции часть прямых
				// расходов (в размере плановой стоимости этой продукции) была
				// списана, то необходимо к общей сумме прямых расходов прибавить
				// списанную ранее сумму прямых расходов.
				
				ВсегоБазаРаспределения = ОбходПоНомГруппам.Выручка;
				
				Обход = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Обход.Следующий() Цикл
					
					ВсегоПрямыхРасходов = ОбходПоНомГруппам.ОстатокПрямыхРасходов;
					ВсегоПрямыхРасходовНУ = ОбходПоНомГруппам.ОстатокПрямыхРасходовНУ;
					ВсегоПрямыхРасходовПР = ОбходПоНомГруппам.ОстатокПрямыхРасходовПР;
					ВсегоПрямыхРасходовВР = ОбходПоНомГруппам.ОстатокПрямыхРасходовВР;
					
					СуммаНЗП = ОбходПоНомГруппам.СуммаНЗП;
					СуммаНЗПНУ = ОбходПоНомГруппам.СуммаНЗПНУ;
					
					СуммаРазницНЗП = НайтиРазницуВНЗП(СтруктураДопПараметров, Обход.Счет, Обход.Подразделение, Обход.НоменклатурнаяГруппа);
					СуммаНЗППР = СуммаРазницНЗП.СуммаПР;
					СуммаНЗПВР = СуммаРазницНЗП.СуммаВР;
					
					СуммаПрямыхРасходовНаВыпуск   = ВсегоПрямыхРасходов - СуммаНЗП;
					СуммаПрямыхРасходовНаВыпускНУ = ВсегоПрямыхРасходовНУ - СуммаНЗПНУ;
					СуммаПрямыхРасходовНаВыпускПР = ВсегоПрямыхРасходовПР - СуммаНЗППР;
					СуммаПрямыхРасходовНаВыпускВР = ВсегоПрямыхРасходовВР - СуммаНЗПВР;
					
					СуммаКорректировкиСписания   = ?(ВсегоБазаРаспределения   = 0, 0, Окр(СуммаПрямыхРасходовНаВыпуск  *Обход.Выручка/ВсегоБазаРаспределения, 2));
					СуммаКорректировкиСписанияНУ = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускНУ*Обход.Выручка/ВсегоБазаРаспределения, 2));
					СуммаКорректировкиСписанияПР = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускПР*Обход.Выручка/ВсегоБазаРаспределения, 2));
					СуммаКорректировкиСписанияВР = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускВР*Обход.Выручка/ВсегоБазаРаспределения, 2));
					
					
					Если СуммаКорректировкиСписания <> 0 Или СуммаКорректировкиСписанияНУ <> 0 Или СуммаКорректировкиСписанияПР <> 0 Или СуммаКорректировкиСписанияВР <> 0 Тогда
						
						
						Если СтруктураДопПараметров.Счет40 Тогда
							// Проводки Дт40 Кт20 на сумму фактической стоимости,
							//          Дт43 Кт40 на сумму отклонений
							НоваяПроводка = мПроводки.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорректировкиСписания;
							НоваяПроводка.СуммаНУДт   = СуммаКорректировкиСписанияНУ;
							НоваяПроводка.СуммаПРДт   = СуммаКорректировкиСписанияПР;
							НоваяПроводка.СуммаВРДт   = СуммаКорректировкиСписанияВР;
							НоваяПроводка.СуммаНУКт   = СуммаКорректировкиСписанияНУ;
							НоваяПроводка.СуммаПРКт   = СуммаКорректировкиСписанияПР;
							НоваяПроводка.СуммаВРКт   = СуммаКорректировкиСписанияВР;
							
							НоваяПроводка.СчетДт =  ПланыСчетов.Хозрасчетный.ВыпускПродукции;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "ВидыСтоимости", Перечисления.ВидыСтоимости.Фактическая);
							
							НоваяПроводка.СчетКт = Обход.Счет;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							БухгалтерскийУчет.УстановитьПодразделенияПроводки(
							НоваяПроводка, Обход.Подразделение, Обход.Подразделение);
							
							НоваяПроводка = мПроводки.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорректировкиСписания;
							СуммаНУ     = СуммаКорректировкиСписанияНУ;
							СуммаПР     = СуммаКорректировкиСписанияПР;
							СуммаВР     = СуммаКорректировкиСписанияВР;
							
							НоваяПроводка.СчетДт = Обход.СчетРасходов;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							НоваяПроводка.СчетКт =  ПланыСчетов.Хозрасчетный.ВыпускПродукции;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "ВидыСтоимости", Перечисления.ВидыСтоимости.Отклонение);
							
							БухгалтерскийУчет.УстановитьПодразделенияПроводки(
							НоваяПроводка, Обход.Подразделение, Обход.Подразделение);
							
							НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР,СуммаПР,СуммаВР,СуммаВР,НоваяПроводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
							
						Иначе
							// Проводка Дт 43 Кт 20 на сумму отклонений
							НоваяПроводка = мПроводки.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорректировкиСписания;
							СуммаНУ     = СуммаКорректировкиСписанияНУ;
							СуммаПР     = СуммаКорректировкиСписанияПР;
							СуммаВР     = СуммаКорректировкиСписанияВР;
							
							НоваяПроводка.СчетДт = Обход.СчетРасходов;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							НоваяПроводка.СчетКт = Обход.Счет;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							БухгалтерскийУчет.УстановитьПодразделенияПроводки(
							НоваяПроводка, Обход.Подразделение, Обход.Подразделение);
							
							НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР,СуммаПР,СуммаВР,СуммаВР,НоваяПроводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
							
						КонецЕсли;
						
						СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
						СтрокаЗаписиРасчетаСебестоимости.СчетУчета = ОбходПоСчетамЗатрат.Счет;
						СтрокаЗаписиРасчетаСебестоимости.Подразделение = ОбходПоПодразделениям.Подразделение;
						СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
						СтрокаЗаписиРасчетаСебестоимости.СуммаПлан = 0;
						СтрокаЗаписиРасчетаСебестоимости.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.УслугиБезИспользованияПлановыхЦен;
						СтрокаЗаписиРасчетаСебестоимости.Сумма = СуммаКорректировкиСписания;
						СтрокаЗаписиРасчетаСебестоимости.СуммаНЗП =  СуммаНЗП;
						СтрокаЗаписиРасчетаСебестоимости.СуммаНУ = СуммаКорректировкиСписанияНУ;
						СтрокаЗаписиРасчетаСебестоимости.СуммаНЗПНУ =  СуммаНЗПНУ;
						СтрокаЗаписиРасчетаСебестоимости.СуммаПР = СуммаКорректировкиСписанияПР;
						СтрокаЗаписиРасчетаСебестоимости.СуммаНЗППР =  СуммаНЗППР;
						СтрокаЗаписиРасчетаСебестоимости.СуммаВР = СуммаКорректировкиСписанияВР;
						СтрокаЗаписиРасчетаСебестоимости.СуммаНЗПВР =  СуммаНЗПВР;
						
					КонецЕсли;
					
				КонецЦикла; // по направлениям выпуска продукции (услуг)
				
			КонецЦикла; // по номенклатурным группам
		КонецЦикла; // по подразделениям
	КонецЦикла; // по счетам учета прямых затрат
	
	Если НЕ Отказ Тогда
		мПроводки.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиРазницуВНЗП(СтруктураДопПараметров, ПеределСчет, ПеределПодразделение, ПеределНоменклатурнаяГруппа)
	
	НЗП = Новый Структура("СуммаПР,СуммаВР",0,0);
	
	Если Не СтруктураДопПараметров.НЗП = Неопределено Тогда
		
		ПеределНЗП = СтруктураДопПараметров.НЗП.НайтиСтроки(Новый Структура("Счет, Подразделение, НоменклатурнаяГруппа", ПеределСчет, ПеределПодразделение, ПеределНоменклатурнаяГруппа));
		
		Если ПеределНЗП = Неопределено Или ПеределНЗП.Количество() = 0 Тогда
			НЗП.СуммаПР = 0;
			НЗП.СуммаВР = 0;
		Иначе
			НЗП.СуммаПР = ПеределНЗП[0].СуммаПР;
			НЗП.СуммаВР = ПеределНЗП[0].СуммаВР;
		КонецЕсли;
	КонецЕсли;
	Возврат НЗП;
	
КонецФункции

// Процедура формирует данные о прямых затратах на переделе по продукции
//
Процедура СформироватьЗапросПоПрямымЗатратам(СтруктураШапкиДокумента, ПодразделенияИНоменклатурныеГруппы, РезультатЗапроса, СтруктураДопПараметров, ВыполненоРаспределениеОХРИлиОПР)
	
	РасчетПрямыхЗатратНомер = СтруктураДопПараметров.РасчетПрямыхЗатратНомер;
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВыпускПродукцииУслуг.СчетЗатрат КАК СчетЗатрат,
	|	ВыпускПродукцииУслуг.Подразделение КАК Подразделение,
	|	ВыпускПродукцииУслуг.ПодразделениеСписания КАК ПодразделениеСписания,
	|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВыпускПродукцииУслуг.Продукция,
	|	ВыпускПродукцииУслуг.СчетСписания,
	|	ВыпускПродукцииУслуг.СубконтоСписания1,
	|	ВыпускПродукцииУслуг.СубконтоСписания2,
	|	ВыпускПродукцииУслуг.СубконтоСписания3,
	|	СУММА(ВЫБОР
	|			КОГДА ВыпускПродукцииУслуг.ПрямыеРасходыРаспределятьПоКоличеству
	|				ТОГДА ЕСТЬNULL(ВыпускПродукцииУслуг.КоличествоОборот, 0)
	|			ИНАЧЕ ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)
	|		КОНЕЦ) КАК ПлановаяСтоимость,
	|	СУММА(ВЫБОР
	|			КОГДА ВыпускПродукцииУслуг.ПрямыеРасходыРаспределятьПоКоличеству
	|				ТОГДА ЕСТЬNULL(ВыпускПродукцииУслуг.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПлановаяСтоимостьВПроводках,
	|	СУММА(ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)) КАК ПлановаяСтоимостьОборот
	|ПОМЕСТИТЬ ВТ_ВыпускПродукцииУслуг
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
	|			&НачГраница,
	|			&КонГраница,
	|			Месяц,
	|			Организация = &Организация
	|				И (Подразделение, НоменклатурнаяГруппа) В
	|					(ВЫБРАТЬ
	|						Фильтр.Подразделение,
	|						Фильтр.НоменклатурнаяГруппа
	|					ИЗ
	|						Фильтр КАК Фильтр)) КАК ВыпускПродукцииУслуг
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукцииУслуг.СчетЗатрат,
	|	ВыпускПродукцииУслуг.Подразделение,
	|	ВыпускПродукцииУслуг.ПодразделениеСписания,
	|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
	|	ВыпускПродукцииУслуг.Продукция,
	|	ВыпускПродукцииУслуг.СчетСписания,
	|	ВыпускПродукцииУслуг.СубконтоСписания1,
	|	ВыпускПродукцииУслуг.СубконтоСписания2,
	|	ВыпускПродукцииУслуг.СубконтоСписания3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Подразделение,
	|	ХозрасчетныйОбороты.Субконто1,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0
	|					И (НЕ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД)
	|				ТОГДА 0
	|			ИНАЧЕ ХозрасчетныйОбороты.СуммаНУОборотДт
	|		КОНЕЦ) КАК СуммаНуОборотДт,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0
	|					И (НЕ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД)
	|				ТОГДА 0
	|			ИНАЧЕ ХозрасчетныйОбороты.СуммаПРОборотДт
	|		КОНЕЦ) КАК СуммаПрОборотДт,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0
	|					И (НЕ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД)
	|				ТОГДА 0
	|			ИНАЧЕ ХозрасчетныйОбороты.СуммаВРОборотДт
	|		КОНЕЦ) КАК СуммаВрОборотДт
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОбороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачГраница,
	|			&КонГраница,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВТ_ВыпускПродукцииУслуг.СчетЗатрат
	|				ИЗ
	|					ВТ_ВыпускПродукцииУслуг),
	|			&ВидыСубконтоНГиСЗ,
	|			Организация = &Организация
	|					И (Подразделение, Субконто1) В
	|						(ВЫБРАТЬ
	|							Фильтр.Подразделение,
	|							Фильтр.НоменклатурнаяГруппа
	|						ИЗ
	|							Фильтр КАК Фильтр)
	|				ИЛИ Подразделение ЕСТЬ NULL 
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							Фильтр.НоменклатурнаяГруппа
	|						ИЗ
	|							Фильтр КАК Фильтр),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокПрямыхРасходовНУ КАК Правила
	|		ПО (Правила.ВидЗатратНУ = ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ)
	|			И (ВЫБОР
	|				КОГДА Правила.Подразделение <> НЕОПРЕДЕЛЕНО
	|					ТОГДА Правила.Подразделение = ХозрасчетныйОбороты.Подразделение
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА Правила.СчетЗатрат <> НЕОПРЕДЕЛЕНО
	|					ТОГДА Правила.СчетЗатрат = ХозрасчетныйОбороты.Счет
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА Правила.КорСчетЗатрат <> НЕОПРЕДЕЛЕНО
	|					ТОГДА Правила.КорСчетЗатрат = ХозрасчетныйОбороты.КорСчет
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА Правила.СтатьяЗатрат <> НЕОПРЕДЕЛЕНО
	|					ТОГДА Правила.СтатьяЗатрат = ХозрасчетныйОбороты.Субконто2
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Подразделение,
	|	ХозрасчетныйОбороты.Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыИОстатки.Счет,
	|	ХозрасчетныйОборотыИОстатки.Подразделение,
	|	ХозрасчетныйОборотыИОстатки.Субконто1 КАК НоменклатурнаяГруппа,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаОборотДт, 0)) КАК СуммаОборотДт,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаНуОборотДт, 0)) КАК СуммаНуОборотДт,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаПрОборотДт, 0)) КАК СуммаПрОборотДт,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаВрОборотДт, 0)) КАК СуммаВрОборотДт,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаОстаток, 0)) КАК СуммаКонечныйОстаток,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаНуОстаток, 0)) КАК СуммаНуКонечныйОстаток,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаПрОстаток, 0)) КАК СуммаПрКонечныйОстаток,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаВрОстаток, 0)) КАК СуммаВрКонечныйОстаток
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОборотыИОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Счет КАК Счет,
	|		ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|		ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|		ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|		ХозрасчетныйОбороты.СуммаНуОборотДт КАК СуммаНуОборотДт,
	|		ХозрасчетныйОбороты.СуммаПрОборотДт КАК СуммаПрОборотДт,
	|		ХозрасчетныйОбороты.СуммаВрОборотДт КАК СуммаВрОборотДт,
	|		0 КАК СуммаОстаток,
	|		0 КАК СуммаНуОстаток,
	|		0 КАК СуммаПрОстаток,
	|		0 КАК СуммаВрОстаток
	|	ИЗ
	|		ВТ_ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОстатки.Счет,
	|		ХозрасчетныйОстатки.Подразделение,
	|		ХозрасчетныйОстатки.Субконто1,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ХозрасчетныйОстатки.СуммаОстаток,
	|		ХозрасчетныйОстатки.СуммаНУОстаток,
	|		ХозрасчетныйОстатки.СуммаПРОстаток,
	|		ХозрасчетныйОстатки.СуммаВРОстаток
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&КонГраница,
	|				Счет В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_ВыпускПродукцииУслуг.СчетЗатрат
	|					ИЗ
	|						ВТ_ВыпускПродукцииУслуг),
	|				&ВидыСубконтоНГиСЗ,
	|				Организация = &Организация
	|						И (Подразделение, Субконто1) В
	|							(ВЫБРАТЬ
	|								Фильтр.Подразделение,
	|								Фильтр.НоменклатурнаяГруппа
	|							ИЗ
	|								Фильтр КАК Фильтр)
	|					ИЛИ Подразделение ЕСТЬ NULL 
	|						И Субконто1 В
	|							(ВЫБРАТЬ
	|								Фильтр.НоменклатурнаяГруппа
	|							ИЗ
	|								Фильтр КАК Фильтр)) КАК ХозрасчетныйОстатки) КАК ХозрасчетныйОборотыИОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОборотыИОстатки.Счет,
	|	ХозрасчетныйОборотыИОстатки.Подразделение,
	|	ХозрасчетныйОборотыИОстатки.Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыпускПродукцииУслуг.СчетЗатрат КАК СчетЗатрат,
	|	ВыпускПродукцииУслуг.Подразделение КАК Подразделение,
	|	ВыпускПродукцииУслуг.ПодразделениеСписания КАК ПодразделениеСписания,
	|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВыпускПродукцииУслуг.Продукция,
	|	ВыпускПродукцииУслуг.СчетСписания,
	|	ВыпускПродукцииУслуг.СубконтоСписания1,
	|	ВыпускПродукцииУслуг.СубконтоСписания2,
	|	ВыпускПродукцииУслуг.СубконтоСписания3,
	|	СУММА(ВыпускПродукцииУслуг.ПлановаяСтоимость) КАК ПлановаяСтоимость,
	|	СУММА(ВыпускПродукцииУслуг.ПлановаяСтоимостьВПроводках) КАК ПлановаяСтоимостьВПроводках,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаКонечныйОстаток, 0)) КАК ОстатокПрямыхРасходов,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОборотДт, 0)) КАК ВсегоПрямыхРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ХозрасчетныйОстатки2023.СуммаОстаток, 0) - ЕСТЬNULL(ОстаткиНЗП.СуммаБУ, 0) > 0
	|				ТОГДА ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СписаноРасходов,
	|	СУММА(ЕСТЬNULL(ОстаткиНЗП.СуммаБУ, 0)) КАК СуммаНЗП,
	|	СУММА(ЕСТЬNULL(ОстаткиНЗП.СуммаНУ, 0)) КАК СуммаНЗПНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНуКонечныйОстаток, 0) + ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаВРОборотКт, 0) + ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаПРОборотКт, 0) КАК ОстатокПрямыхРасходовНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПрКонечныйОстаток, 0) КАК ОстатокПрямыхРасходовПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВрКонечныйОстаток, 0) КАК ОстатокПрямыхРасходовВР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНуОборотДт, 0) КАК ВсегоПрямыхРасходовНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПрОборотДт, 0) КАК ВсегоПрямыхРасходовПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВрОборотДт, 0) КАК ВсегоПрямыхРасходовВР,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ХозрасчетныйОстатки2023.СуммаНУОстаток, 0) - ЕСТЬNULL(ОстаткиНЗП.СуммаНУ, 0) > 0
	|				ИЛИ ЕСТЬNULL(ХозрасчетныйОстатки2023.СуммаОстаток, 0) - ЕСТЬNULL(ОстаткиНЗП.СуммаБУ, 0) > 0
	|			ТОГДА ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СписаноРасходовНУ,
	|	0 КАК СписаноРасходовПР,
	|	0 КАК СписаноРасходовВР
	|ИЗ
	|	ВТ_ВыпускПродукцииУслуг КАК ВыпускПродукцииУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ХозрасчетныйОборотыИОстатки КАК ХозрасчетныйОстатки
	|		ПО ВыпускПродукцииУслуг.СчетЗатрат = ХозрасчетныйОстатки.Счет
	|			И ВыпускПродукцииУслуг.Подразделение = ХозрасчетныйОстатки.Подразделение
	|			И ВыпускПродукцииУслуг.НоменклатурнаяГруппа = ХозрасчетныйОстатки.НоменклатурнаяГруппа
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ИнвентаризацияНЗПСостав.Ссылка.СчетЗатрат КАК СчетЗатрат,
	|			ИнвентаризацияНЗПСостав.Ссылка.ПодразделениеОрганизации КАК Подразделение,
	|			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|			СУММА(ИнвентаризацияНЗПСостав.Сумма) КАК СуммаБУ,
	|			СУММА(ИнвентаризацияНЗПСостав.СуммаНУ) КАК СуммаНУ
	|		ИЗ
	|			Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
	|				ПО ИнвентаризацияНЗПСостав.Ссылка.ПодразделениеОрганизации = Фильтр.Подразделение
	|					И ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа = Фильтр.НоменклатурнаяГруппа
	|		ГДЕ
	|			ИнвентаризацияНЗПСостав.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|			И ИнвентаризацияНЗПСостав.Ссылка.Организация = &Организация
	|			И (НЕ ИнвентаризацияНЗПСостав.Ссылка.ПометкаУдаления)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ИнвентаризацияНЗПСостав.Ссылка.СчетЗатрат,
	|			ИнвентаризацияНЗПСостав.Ссылка.ПодразделениеОрганизации,
	|			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа) КАК ОстаткиНЗП
	|		ПО (ХозрасчетныйОстатки.Счет = ОстаткиНЗП.СчетЗатрат)
	|			И (ХозрасчетныйОстатки.Подразделение = ОстаткиНЗП.Подразделение)
	|			И (ХозрасчетныйОстатки.НоменклатурнаяГруппа = ОстаткиНЗП.НоменклатурнаяГруппа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачДата,
	|				&КонДата,
	|				,
	|				СчетДт В ИЕРАРХИИ (&Счет90),
	|				&ВидыСубконто,
	|				СчетКт В ИЕРАРХИИ (&СчетаЗатрат),
	|				,
	|				Организация = &Организация
	|						И (ПодразделениеКт, СубконтоКт1) В
	|							(ВЫБРАТЬ
	|								Фильтр.Подразделение,
	|								Фильтр.НоменклатурнаяГруппа
	|							ИЗ
	|								Фильтр КАК Фильтр)
	|					ИЛИ ПодразделениеКт ЕСТЬ NULL 
	|						И СубконтоКт1 В
	|							(ВЫБРАТЬ
	|								Фильтр.НоменклатурнаяГруппа
	|							ИЗ
	|								Фильтр КАК Фильтр)) КАК ХозрасчетныйОборотыДтКт
	|		ПО ВыпускПродукцииУслуг.СчетЗатрат = ХозрасчетныйОборотыДтКт.СчетКт
	|			И ВыпускПродукцииУслуг.Подразделение = ХозрасчетныйОборотыДтКт.ПодразделениеКт
	|			И ВыпускПродукцииУслуг.НоменклатурнаяГруппа = ХозрасчетныйОборотыДтКт.СубконтоКт1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетаЗатрат), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы), Организация = &Организация) КАК ХозрасчетныйОстатки2023
	|		ПО ВыпускПродукцииУслуг.СчетЗатрат = ХозрасчетныйОстатки2023.Счет
	|			И ВыпускПродукцииУслуг.НоменклатурнаяГруппа = ХозрасчетныйОстатки2023.Субконто1
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукцииУслуг.СчетЗатрат,
	|	ВыпускПродукцииУслуг.Подразделение,
	|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
	|	ВыпускПродукцииУслуг.Продукция,
	|	ВыпускПродукцииУслуг.СчетСписания,
	|	ВыпускПродукцииУслуг.СубконтоСписания1,
	|	ВыпускПродукцииУслуг.СубконтоСписания2,
	|	ВыпускПродукцииУслуг.СубконтоСписания3,
	|	ВыпускПродукцииУслуг.ПодразделениеСписания,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПрКонечныйОстаток, 0),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВрКонечныйОстаток, 0),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПрОборотДт, 0),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВрОборотДт, 0),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНуОборотДт, 0),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНуКонечныйОстаток, 0) + ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаВРОборотКт, 0) + ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаПРОборотКт, 0),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ХозрасчетныйОстатки2023.СуммаНУОстаток, 0) - ЕСТЬNULL(ОстаткиНЗП.СуммаНУ, 0) > 0
	|				ИЛИ ЕСТЬNULL(ХозрасчетныйОстатки2023.СуммаОстаток, 0) - ЕСТЬNULL(ОстаткиНЗП.СуммаБУ, 0) > 0
	|			ТОГДА ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение,
	|	СчетЗатрат,
	|	НоменклатурнаяГруппа
	|ИТОГИ
	|	СУММА(ПлановаяСтоимость),
	|	СУММА(ПлановаяСтоимостьВПроводках),
	|	МАКСИМУМ(ОстатокПрямыхРасходов),
	|	СУММА(ВсегоПрямыхРасходов),
	|	СУММА(СписаноРасходов),
	|	МАКСИМУМ(СуммаНЗП),
	|	МАКСИМУМ(СуммаНЗПНУ),
	|	МАКСИМУМ(ОстатокПрямыхРасходовНУ),
	|	МАКСИМУМ(ОстатокПрямыхРасходовПР),
	|	МАКСИМУМ(ОстатокПрямыхРасходовВР),
	|	СУММА(ВсегоПрямыхРасходовНУ),
	|	СУММА(ВсегоПрямыхРасходовПР),
	|	СУММА(ВсегоПрямыхРасходовВР),
	|	СУММА(СписаноРасходовНУ),
	|	СУММА(СписаноРасходовПР),
	|	СУММА(СписаноРасходовВР)
	|ПО
	|	Подразделение,
	|	СчетЗатрат,
	|	НоменклатурнаяГруппа
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если ПодразделенияИНоменклатурныеГруппы.Количество() > 0
		И ПодразделенияИНоменклатурныеГруппы[0].НоменклатурнаяГруппа = "Все" Тогда
		
		ТекстЗапросаФильтр =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ Фильтр
		|ИЗ
		|	&ПодразделенияИНоменклатурныеГруппы КАК Таблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ИЛИ Подразделение ЕСТЬ NULL 
			|					И Субконто1 В
			|						(ВЫБРАТЬ
			|							Фильтр.НоменклатурнаяГруппа
			|						ИЗ
			|							Фильтр КАК Фильтр)",
			"ИЛИ Подразделение ЕСТЬ NULL");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ИЛИ Подразделение ЕСТЬ NULL 
			|						И Субконто1 В
			|							(ВЫБРАТЬ
			|								Фильтр.НоменклатурнаяГруппа
			|							ИЗ
			|								Фильтр КАК Фильтр)",
			"ИЛИ Подразделение ЕСТЬ NULL");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"И ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа = Фильтр.НоменклатурнаяГруппа", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (ПодразделениеКт, СубконтоКт1) В", "И ПодразделениеКт В");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"ИЛИ ПодразделениеКт ЕСТЬ NULL 
			|						И СубконтоКт1 В
			|							(ВЫБРАТЬ
			|								Фильтр.НоменклатурнаяГруппа
			|							ИЗ
			|								Фильтр КАК Фильтр)",
			"ИЛИ ПодразделениеКт ЕСТЬ NULL");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И (Подразделение, НоменклатурнаяГруппа) В", "И Подразделение В");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Фильтр.Подразделение,", "Фильтр.Подразделение");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Фильтр.НоменклатурнаяГруппа", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И (Подразделение, Субконто1) В", "И Подразделение В");
			
	Иначе
			
		ТекстЗапросаФильтр =
		"ВЫБРАТЬ
		|	Таблица.Подразделение КАК Подразделение,
		|	Таблица.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ПОМЕСТИТЬ Фильтр
		|ИЗ
		|	&ПодразделенияИНоменклатурныеГруппы КАК Таблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	НоменклатурнаяГруппа";
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДопПараметров.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПодразделенияИНоменклатурныеГруппы", ПодразделенияИНоменклатурныеГруппы);
	Запрос.Текст = ТекстЗапросаФильтр;
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата",               мНачДата);
	Запрос.УстановитьПараметр("КонДата",               мКонДата);
	Запрос.УстановитьПараметр("НачГраница",            мНачГраница);
	Запрос.УстановитьПараметр("КонГраница",            мКонГраница);
	Запрос.УстановитьПараметр("Организация",           СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ЕНВД",                  Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.УстановитьПараметр("СчетаЗатрат",        СчетаЗатрат);
	Счета90 = Новый Массив;
	Счета90.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу);
	Счета90.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы);
	Запрос.УстановитьПараметр("Счет90",        Счета90);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконтоНГиСЗ",  ВидыСубконто);
	
	РезультатЗапроса = Запрос.Выполнить();
	Запрос.Текст = "УНИЧТОЖИТЬ Фильтр";
	Запрос.Выполнить();
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ВыпускПродукцииУслуг";
	Запрос.Выполнить();
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ХозрасчетныйОбороты";
	Запрос.Выполнить();
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ХозрасчетныйОборотыИОстатки";
	Запрос.Выполнить();
	
КонецПроцедуры // СформироватьЗапросПоПрямымЗатратам()

// Процедура формирования движений по прямым затратам по переделу
// Производит распределение прямых расходов, учтенных на счетах 20 и 23,
// на стоимость продукции (услуг).
// Распределяются только те прямые расходы, для которых установлен текущий номер передела.
//
//	Параметры:
//		НомерПередела - Число - номер передела;
//		ВыполненоРаспределениеОХРИлиОПР - Булево - определяет на данный момент выполнено ли
//			распределение общепроизводственных и общехозяйственных расходов.
//
Процедура ДвиженияПоПрямымЗатратам(СтруктураШапкиДокумента, ПодразделенияИНоменклатурныеГруппы, ВыполненоРаспределениеОХРИлиОПР = Ложь, МассивНоменклатуры, СтруктураДопПараметров)
	
	Если Не СтруктураШапкиДокумента.УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам Тогда
		ДвиженияПоПрямымЗатратамПоУслугам(СтруктураШапкиДокумента, СтруктураДопПараметров, ВыполненоРаспределениеОХРИлиОПР);
	КонецЕсли;
	
	// Формирование запроса по прямым расходам.
	РезультатЗапроса = Неопределено;
	СформироватьЗапросПоПрямымЗатратам(СтруктураШапкиДокумента, ПодразделенияИНоменклатурныеГруппы, РезультатЗапроса, СтруктураДопПараметров, ВыполненоРаспределениеОХРИлиОПР);
	ЗаписьРасчетаСебестоимости = СтруктураДопПараметров.ЗаписьРасчетаСебестоимости;
	
	// Выбираются прямые расходы в разрезе счета учета, подразделения, номенклатурной группы.
	ОбходПоподразделениям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоподразделениям.Следующий() Цикл
		ОбходПоСчетамЗатрат = ОбходПоподразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоСчетамЗатрат.Следующий() Цикл
			
			ОбходПоНомГруппам = ОбходПоСчетамЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоНомГруппам.Следующий() Цикл
				
				
				// Прямые расходы за минусом НЗП подлежат распределению
				// на стоимость готовой продукции, услуг.
				// Т.к. при оприходовании на склад готовой продукции часть прямых
				// расходов (в размере плановой стоимости этой продукции) была
				// списана, то необходимо к общей сумме прямых расходов прибавить
				// списанную ранее сумму прямых расходов.
				
				СписаноРасходов = ОбходПоНомГруппам.СписаноРасходов;
				СписаноРасходовНУ = ОбходПоНомГруппам.СписаноРасходовНУ;
				СписаноРасходовПР = ОбходПоНомГруппам.СписаноРасходовПР;
				СписаноРасходовВР = ОбходПоНомГруппам.СписаноРасходовВР;
				
				ВсегоПрямыхРасходов   = ОбходПоНомГруппам.ОстатокПрямыхРасходов   + ?(ВыполненоРаспределениеОХРИлиОПР, 0, СписаноРасходов);
				ВсегоПрямыхРасходовНУ = ОбходПоНомГруппам.ОстатокПрямыхРасходовНУ + ?(ВыполненоРаспределениеОХРИлиОПР, 0, СписаноРасходовНУ);
				ВсегоПрямыхРасходовПР = ОбходПоНомГруппам.ОстатокПрямыхРасходовПР + ?(ВыполненоРаспределениеОХРИлиОПР, 0, СписаноРасходовПР);
				ВсегоПрямыхРасходовВР = ОбходПоНомГруппам.ОстатокПрямыхРасходовВР + ?(ВыполненоРаспределениеОХРИлиОПР, 0, СписаноРасходовВР);
				
				СуммаНЗП   = ОбходПоНомГруппам.СуммаНЗП;
				СуммаНЗПНУ = ОбходПоНомГруппам.СуммаНЗПНУ;
				РазницыВНЗП = НайтиРазницуВНЗП(СтруктураДопПараметров, ОбходПоСчетамЗатрат.СчетЗатрат, ОбходПоНомГруппам.Подразделение, ОбходПоНомГруппам.НоменклатурнаяГруппа);
				СуммаНЗППР = РазницыВНЗП.СуммаПр;
				СуммаНЗПВР = РазницыВНЗП.СуммаВр;
				
				СуммаПрямыхРасходовНаВыпуск   = ВсегоПрямыхРасходов   - СуммаНЗП;
				СуммаПрямыхРасходовНаВыпускНУ = ВсегоПрямыхРасходовНУ - СуммаНЗПНУ;
				СуммаПрямыхРасходовНаВыпускПР = ВсегоПрямыхРасходовПР - СуммаНЗППР;
				СуммаПрямыхРасходовНаВыпускВР = ВсегоПрямыхРасходовВР - СуммаНЗПВР;
				
				// В качестве базы распределения прямых расходов на выпущенную продукцию
				// используется плановая себестоимость.
				ВсегоБазаРаспределения = ОбходПоНомГруппам.ПлановаяСтоимость;
				РаспределеноБазыРаспределения = 0;
				СписаноПрямыхРасходов   = 0;
				СписаноПрямыхРасходовНУ = 0;
				СписаноПрямыхРасходовПР = 0;
				СписаноПрямыхРасходовВР = 0;
				
				ПоследнийПередел = (Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "1" Или  СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "");
				
				Если ПоследнийПередел И НЕ СуммаНЗП = 0 Тогда
					СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
					СтрокаЗаписиРасчетаСебестоимости.СчетУчета = ОбходПоСчетамЗатрат.СчетЗатрат;
					СтрокаЗаписиРасчетаСебестоимости.Подразделение = ОбходПоПодразделениям.Подразделение;
					СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
					СтрокаЗаписиРасчетаСебестоимости.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.РасходыНаПроизводствоПродукцииИУслуг;
					СтрокаЗаписиРасчетаСебестоимости.СуммаНЗП   =  СуммаНЗП;
					СтрокаЗаписиРасчетаСебестоимости.СуммаНЗПНУ =  СуммаНЗПНУ;
					СтрокаЗаписиРасчетаСебестоимости.СуммаНЗППР =  СуммаНЗППР;
					СтрокаЗаписиРасчетаСебестоимости.СуммаНЗПВР =  СуммаНЗПВР;
					СтрокаЗаписиРасчетаСебестоимости.Сумма      =  0;
					СтрокаЗаписиРасчетаСебестоимости.СуммаНУ    =  0;
					СтрокаЗаписиРасчетаСебестоимости.СуммаПР    =  0;
					СтрокаЗаписиРасчетаСебестоимости.СуммаВР    =  0;
					СтрокаЗаписиРасчетаСебестоимости.СуммаПлан  =  0;
				КонецЕсли;	
				
				// Обход по операциям выпуска продукции (услуг). Обходя все операции выпуска
				// производим распределение по ним прямых расходов.
				ТаблицаКорректируемыхНаправлений = Новый ТаблицаЗначений;
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("Продукция");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("Подразделение");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("ПодразделениеСписания");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("НоменклатурнаяГруппа");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания1");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания2");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания3");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СчетСписания");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СчетЗатрат");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаКорректировкиСписания");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаКорректировкиСписанияНУ");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаКорректировкиСписанияПР");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаКорректировкиСписанияВР");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СписаноРасходов");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СписаноРасходовНУ");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СписаноРасходовПР");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СписаноРасходовВР");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("ПлановаяСтоимость");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("ПлановаяСтоимостьВПроводках");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаНЗП");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаНЗПНУ");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаНЗППР");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаНЗПВР");
				
				СуммаНеКорректируемыхНаправлений   = 0;
				СуммаНеКорректируемыхНаправленийНУ = 0;
				СуммаНеКорректируемыхНаправленийПР = 0;
				СуммаНеКорректируемыхНаправленийВР = 0;
				
				
				Обход = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Обход.Следующий() Цикл
					
					РаспределеноБазыРаспределения = РаспределеноБазыРаспределения + Обход.ПлановаяСтоимость;
					
					СуммаСписания   = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпуск/ВсегоБазаРаспределения*РаспределеноБазыРаспределения, 2) - СписаноПрямыхРасходов);
					СуммаСписанияНУ = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускНУ/ВсегоБазаРаспределения*РаспределеноБазыРаспределения, 2) - СписаноПрямыхРасходовНУ);
					СуммаСписанияПр = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускПР/ВсегоБазаРаспределения*РаспределеноБазыРаспределения, 2) - СписаноПрямыхРасходовПР);
					СуммаСписанияВР = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускВР/ВсегоБазаРаспределения*РаспределеноБазыРаспределения, 2) - СписаноПрямыхРасходовВР);
					
					СписаноПрямыхРасходов   = СписаноПрямыхРасходов   + СуммаСписания;
					СписаноПрямыхРасходовНУ = СписаноПрямыхРасходовНУ + СуммаСписанияНУ;
					СписаноПрямыхРасходовПР = СписаноПрямыхРасходовПР + СуммаСписанияПР;
					СписаноПрямыхРасходовВР = СписаноПрямыхРасходовВР + СуммаСписанияВР;
					
					СуммаКорректировкиСписания   = СуммаСписания - ?(ВыполненоРаспределениеОХРИлиОПР, 0, Обход.СписаноРасходов);
					СуммаКорректировкиСписанияНУ = СуммаСписанияНУ - ?(ВыполненоРаспределениеОХРИлиОПР, 0, Обход.СписаноРасходовНУ);
					СуммаКорректировкиСписанияПР = СуммаСписанияПР - ?(ВыполненоРаспределениеОХРИлиОПР, 0, Обход.СписаноРасходовПР);
					СуммаКорректировкиСписанияВР = СуммаСписанияВР - ?(ВыполненоРаспределениеОХРИлиОПР, 0, Обход.СписаноРасходовВР);
					
					
					Если Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "3"  Тогда
						ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, Продукция, СубконтоКт2, СубконтоКт3", Обход.Подразделение, Обход.НоменклатурнаяГруппа, Обход.СубконтоСписания1, Обход.СубконтоСписания2, Обход.СубконтоСписания3));
						Если ВстречныйВыпуск.Количество() > 0 Тогда
							СуммаНеКорректируемыхНаправлений   = СуммаНеКорректируемыхНаправлений + СуммаКорректировкиСписания;
							СуммаНеКорректируемыхНаправленийНУ = СуммаНеКорректируемыхНаправленийНУ + СуммаКорректировкиСписанияНУ;
							СуммаНеКорректируемыхНаправленийПР = СуммаНеКорректируемыхНаправленийПР + СуммаКорректировкиСписанияПР;
							СуммаНеКорректируемыхНаправленийВР = СуммаНеКорректируемыхНаправленийВР + СуммаКорректировкиСписанияВР;
							Продолжить;
						Иначе
							ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, Продукция, СубконтоКт2", Обход.Подразделение, Обход.НоменклатурнаяГруппа, Обход.СубконтоСписания1, Обход.СубконтоСписания2));
							Если ВстречныйВыпуск.Количество() > 0 Тогда
								СуммаНеКорректируемыхНаправлений   = СуммаНеКорректируемыхНаправлений + СуммаКорректировкиСписания;
								СуммаНеКорректируемыхНаправленийНУ = СуммаНеКорректируемыхНаправленийНУ + СуммаКорректировкиСписанияНУ;
								СуммаНеКорректируемыхНаправленийПР = СуммаНеКорректируемыхНаправленийПР + СуммаКорректировкиСписанияПР;
								СуммаНеКорректируемыхНаправленийВР = СуммаНеКорректируемыхНаправленийВР + СуммаКорректировкиСписанияВР;
								Продолжить;
							КонецЕсли;
							
							ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, ПодразделениеПересчета, Продукция", Обход.Подразделение, Обход.НоменклатурнаяГруппа, Обход.ПодразделениеСписания, Обход.Продукция));
							Если ВстречныйВыпуск.Количество() > 0 Тогда
								СуммаНеКорректируемыхНаправлений   = СуммаНеКорректируемыхНаправлений + СуммаКорректировкиСписания;
								СуммаНеКорректируемыхНаправленийНУ = СуммаНеКорректируемыхНаправленийНУ + СуммаКорректировкиСписанияНУ;
								СуммаНеКорректируемыхНаправленийПР = СуммаНеКорректируемыхНаправленийПР + СуммаКорректировкиСписанияПР;
								СуммаНеКорректируемыхНаправленийВР = СуммаНеКорректируемыхНаправленийВР + СуммаКорректировкиСписанияВР;
								Продолжить;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрока = ТаблицаКорректируемыхНаправлений.Добавить();
					НоваяСтрока.Продукция            = Обход.Продукция;
					НоваяСтрока.Подразделение        = Обход.Подразделение;
					НоваяСтрока.ПодразделениеСписания = Обход.ПодразделениеСписания;
					НоваяСтрока.НоменклатурнаяГруппа = Обход.НоменклатурнаяГруппа;
					НоваяСтрока.СубконтоСписания1    = Обход.СубконтоСписания1;
					НоваяСтрока.СубконтоСписания2    = Обход.СубконтоСписания2;
					НоваяСтрока.СубконтоСписания3    = Обход.СубконтоСписания3;
					НоваяСтрока.СчетСписания         = Обход.СчетСписания;
					НоваяСтрока.СчетЗатрат           = Обход.СчетЗатрат;
					НоваяСтрока.СуммаКорректировкиСписания = СуммаКорректировкиСписания;
					НоваяСтрока.СуммаКорректировкиСписанияНУ = СуммаКорректировкиСписанияНУ;
					НоваяСтрока.СуммаКорректировкиСписанияПР = СуммаКорректировкиСписанияПР;
					НоваяСтрока.СуммаКорректировкиСписанияВР = СуммаКорректировкиСписанияВР;
					НоваяСтрока.СписаноРасходов   =?(ВыполненоРаспределениеОХРИлиОПР, 0, Обход.СписаноРасходов);
					НоваяСтрока.СписаноРасходовНУ =?(ВыполненоРаспределениеОХРИлиОПР, 0, Обход.СписаноРасходовНУ);
					НоваяСтрока.СписаноРасходовПР =?(ВыполненоРаспределениеОХРИлиОПР, 0, Обход.СписаноРасходовПР);
					НоваяСтрока.СписаноРасходовВР =?(ВыполненоРаспределениеОХРИлиОПР, 0, Обход.СписаноРасходовВР);
					НоваяСтрока.ПлановаяСтоимость   = Обход.ПлановаяСтоимость;
					НоваяСтрока.ПлановаяСтоимостьВПроводках   = Обход.ПлановаяСтоимостьВПроводках;
					НоваяСтрока.СуммаНЗП            = Обход.СуммаНЗП;
					НоваяСтрока.СуммаНЗПНУ            = Обход.СуммаНЗПНУ;
				КонецЦикла;
				
				ВсегоКорректировок = ТаблицаКорректируемыхНаправлений.Итог("СуммаКорректировкиСписания");
				ВсегоКорректировокНУ = ТаблицаКорректируемыхНаправлений.Итог("СуммаКорректировкиСписанияНУ");
				ВсегоКорректировокПР = ТаблицаКорректируемыхНаправлений.Итог("СуммаКорректировкиСписанияПР");
				ВсегоКорректировокВР = ТаблицаКорректируемыхНаправлений.Итог("СуммаКорректировкиСписанияВР");
				
				КоэффициентРаспределенияНекорректируемойСуммы   = ?(ВсегоКорректировок = 0, 0,   СуммаНеКорректируемыхНаправлений / ВсегоКорректировок);
				КоэффициентРаспределенияНекорректируемойСуммыНУ = ?(ВсегоКорректировокНУ = 0, 0, СуммаНеКорректируемыхНаправленийНУ / ВсегоКорректировокНУ);
				КоэффициентРаспределенияНекорректируемойСуммыПР = ?(ВсегоКорректировокПР = 0, 0, СуммаНеКорректируемыхНаправленийПР / ВсегоКорректировокПР);
				КоэффициентРаспределенияНекорректируемойСуммыВР = ?(ВсегоКорректировокВР = 0, 0, СуммаНеКорректируемыхНаправленийВР / ВсегоКорректировокВР);
				
				Для Каждого Обход Из ТаблицаКорректируемыхНаправлений Цикл
					СуммаКорректировкиСписания = Обход.СуммаКорректировкиСписания * (1 + КоэффициентРаспределенияНекорректируемойСуммы);	
					СуммаКорректировкиСписанияНУ = Обход.СуммаКорректировкиСписанияНУ * (1 + КоэффициентРаспределенияНекорректируемойСуммыНУ);	
					СуммаКорректировкиСписанияПР = Обход.СуммаКорректировкиСписанияПР * (1 + КоэффициентРаспределенияНекорректируемойСуммыПР);	
					СуммаКорректировкиСписанияВР = Обход.СуммаКорректировкиСписанияВР * (1 + КоэффициентРаспределенияНекорректируемойСуммыВР);	
					
					СписаноРасходов   = Обход.СписаноРасходов * (1 + КоэффициентРаспределенияНекорректируемойСуммы);	
					СписаноРасходовНУ = Обход.СписаноРасходовНУ * (1 + КоэффициентРаспределенияНекорректируемойСуммыНУ);	
					СписаноРасходовПР = Обход.СписаноРасходовПР * (1 + КоэффициентРаспределенияНекорректируемойСуммыПР);	
					СписаноРасходовВР = Обход.СписаноРасходовВР * (1 + КоэффициентРаспределенияНекорректируемойСуммыВР);	
					
					// Формирование проводок по списанию
					Если СтруктураДопПараметров.Счет40 Тогда
						// Проводки Дт40 Кт20 на сумму фактической стоимости,
						//          Дт43 Кт40 на сумму отклонений
						Если СуммаКорректировкиСписания <> 0 Или СуммаКорректировкиСписанияНУ <> 0 Или СуммаКорректировкиСписанияПР <> 0 Или СуммаКорректировкиСписанияВР <> 0 Тогда
							НоваяПроводка = мПроводки.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма         = СуммаКорректировкиСписания;
							СуммаНУ       = СуммаКорректировкиСписанияНУ;
							СуммаПР       = СуммаКорректировкиСписанияПР;
							СуммаВР       = СуммаКорректировкиСписанияВР;
							
							НоваяПроводка.СчетДт =   ПланыСчетов.Хозрасчетный.ВыпускПродукции;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "ВидыСтоимости", Перечисления.ВидыСтоимости.Фактическая);
							
							НоваяПроводка.СчетКт = Обход.СчетЗатрат;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							БухгалтерскийУчет.УстановитьПодразделенияПроводки(
							НоваяПроводка, Обход.Подразделение, Обход.Подразделение);
							
							НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР,СуммаПР,СуммаВР,СуммаВР,НоваяПроводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
							
						КонецЕсли;
						
						Если СуммаКорректировкиСписания - СписаноРасходов <> 0 Или СуммаКорректировкиСписанияНУ - СписаноРасходовНУ <> 0
							Или СуммаКорректировкиСписанияПР - СписаноРасходовПР <> 0 Или СуммаКорректировкиСписанияВР - СписаноРасходовВР <> 0  Тогда
							
							НоваяПроводка = мПроводки.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорректировкиСписания - СписаноРасходов;
							СуммаНУ     = СуммаКорректировкиСписанияНУ - СписаноРасходовНУ;
							СуммаПР     = СуммаКорректировкиСписанияПР - СписаноРасходовПР;
							СуммаВР     = СуммаКорректировкиСписанияВР - СписаноРасходовВР;
							
							НоваяПроводка.СчетДт = Обход.СчетСписания;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, Обход.СубконтоСписания1);
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, Обход.СубконтоСписания2);
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, Обход.СубконтоСписания3);
							
							НоваяПроводка.СчетКт =  ПланыСчетов.Хозрасчетный.ВыпускПродукции;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "ВидыСтоимости", Перечисления.ВидыСтоимости.Отклонение);
							
							БухгалтерскийУчет.УстановитьПодразделениеПроводки(
							НоваяПроводка, Обход.ПодразделениеСписания, "Дт");
							
							БухгалтерскийУчет.УстановитьПодразделениеПроводки(
							НоваяПроводка, Обход.Подразделение, "Кт");
							
							НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР,СуммаПР,СуммаВР,СуммаВР,НоваяПроводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
							
						КонецЕсли;
					Иначе
						Если СуммаКорректировкиСписания <> 0 Или СуммаКорректировкиСписанияНУ <> 0 Или СуммаКорректировкиСписанияПР <> 0 Или СуммаКорректировкиСписанияВР <> 0 Тогда
							// Проводка Дт 43 Кт 20 на сумму отклонений
							НоваяПроводка = мПроводки.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорректировкиСписания;
							СуммаНУ     = СуммаКорректировкиСписанияНУ;
							СуммаПР     = СуммаКорректировкиСписанияПР;
							СуммаВР     = СуммаКорректировкиСписанияВР;
							
							НоваяПроводка.СчетДт = Обход.СчетСписания;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, Обход.СубконтоСписания1);
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, Обход.СубконтоСписания2);
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, Обход.СубконтоСписания3);
							
							НоваяПроводка.СчетКт = Обход.СчетЗатрат;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							БухгалтерскийУчет.УстановитьПодразделениеПроводки(
							НоваяПроводка, Обход.ПодразделениеСписания, "Дт");
							
							БухгалтерскийУчет.УстановитьПодразделениеПроводки(
							НоваяПроводка, Обход.Подразделение, "Кт");
							
							НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР,СуммаПР,СуммаВР,СуммаВР,НоваяПроводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
							
						КонецЕсли;	
					КонецЕсли;
					
					// Добавим в таблицу список номенклатуры, у которой изменилась средневзвешенная
					// стоимость и, следовательно, необходимо выполнить корректировку списаний.
					Если (СуммаКорректировкиСписания <> 0 ИЛИ ?(СтруктураДопПараметров.Счет40,СуммаКорректировкиСписания - СписаноРасходов <> 0,ложь))
						Или (СуммаКорректировкиСписанияНУ <> 0 ИЛИ ?(СтруктураДопПараметров.Счет40,СуммаКорректировкиСписанияНУ - СписаноРасходовНУ <> 0,ложь))
						Или (СуммаКорректировкиСписанияПР <> 0 ИЛИ ?(СтруктураДопПараметров.Счет40,СуммаКорректировкиСписанияПР - СписаноРасходовПР <> 0,ложь))
						Или (СуммаКорректировкиСписанияВР <> 0 ИЛИ ?(СтруктураДопПараметров.Счет40,СуммаКорректировкиСписанияВР - СписаноРасходовВР <> 0,ложь)) Тогда
						Для НомерСубконто = 1 По 2 Цикл
							Если ТипЗнч(Обход["СубконтоСписания" + НомерСубконто]) = Тип("СправочникСсылка.Номенклатура") Тогда
								МассивНоменклатуры.Добавить(Обход["СубконтоСписания" + НомерСубконто]);
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если Обход.ПлановаяСтоимость <> 0 Или СуммаКорректировкиСписания <> 0 Или СуммаКорректировкиСписанияНУ <> 0 Или СуммаКорректировкиСписанияПР <> 0 Или СуммаКорректировкиСписанияВР <> 0 Тогда
						
						СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
						СтрокаЗаписиРасчетаСебестоимости.СчетУчета = ОбходПоСчетамЗатрат.СчетЗатрат;
						СтрокаЗаписиРасчетаСебестоимости.Подразделение = ОбходПоПодразделениям.Подразделение;
						СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
						СтрокаЗаписиРасчетаСебестоимости.Продукция = Обход.Продукция;
						СтрокаЗаписиРасчетаСебестоимости.СуммаПлан = Обход.ПлановаяСтоимость;
						СтрокаЗаписиРасчетаСебестоимости.ДокументВыпуска = Строка(Обход.СубконтоСписания2) + " " + Строка(Обход.СубконтоСписания3);
						СтрокаЗаписиРасчетаСебестоимости.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.ВыпускПродукцииИУслуг;
						СтрокаЗаписиРасчетаСебестоимости.СуммаПР = СуммаКорректировкиСписанияПР;
						СтрокаЗаписиРасчетаСебестоимости.СуммаВР = СуммаКорректировкиСписанияВР;
						СтрокаЗаписиРасчетаСебестоимости.Сумма = СуммаКорректировкиСписания - ?(ПоследнийПередел И СуммаКорректировкиСписания <> 0 ,Обход.ПлановаяСтоимостьВПроводках, 0);
						СтрокаЗаписиРасчетаСебестоимости.СуммаНУ = СуммаКорректировкиСписанияНУ - ?(ПоследнийПередел И СуммаКорректировкиСписанияНУ <> 0,Обход.ПлановаяСтоимостьВПроводках, 0);
					КонецЕсли;	
					
				КонецЦикла; // по направлениям выпуска продукции (услуг)
				
			КонецЦикла; // по номенклатурным группам
		КонецЦикла; // по счетам учета прямых затрат
	КонецЦикла; // по подразделениям
	
	Если НЕ Отказ Тогда
		мПроводки.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоПрямымЗатратам()

// Процедура производит корректировку стоимости списания
// выпущенной в текущем месяце продукции.
Процедура КорректирровкаСтоимостиСписанияВыпущеннойПродукции(СтруктураШапкиДокумента, МассивНоменклатуры, ВыполненоРаспределениеОХРИлиОПР, СтруктураДопПараметров)
	
	// Формирование корректировки стоимости списаний, исходя из средевзвешенной стоимости номенклатуры
	СтруктураДопПараметров.Вставить("Организация",    СтруктураШапкиДокумента.Организация);
	СтруктураДопПараметров.Вставить("Период",         Дата);
	СтруктураДопПараметров.Вставить("Регистратор",    ЭтотОбъект);
	СтруктураДопПараметров.Вставить("ТаблицаТоваров", МассивНоменклатуры);
	
	// После закрытия общепроизводственных расходов необходимо,
	// чтобы не корректировалось списание номенклатуры в дебет
	// счетов 25 (26, если этот счет закрывается на счет 20).
	Если ВыполненоРаспределениеОХРИлиОПР Тогда
		
		// Массив счетов по которым не надо делать корректировку операций списания
		МассивСчетов = Новый Массив;
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		Если Не СтруктураШапкиДокумента.УчетнаяПолитика["ДиректКостинг"] Тогда
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		КонецЕсли; 
		
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", МассивСчетов);
		
	Иначе
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", Неопределено);
	КонецЕсли;
	
	КорректировкаСтоимости.КорректировкаСтоимости(МассивНоменклатуры, мНачДата, мКонДата, СтруктураДопПараметров);
	
КонецПроцедуры

Функция РасчетПорядкаПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	СпособРасчетаСебестоимостиПроизводства = СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства;
	СтруктураДопПараметров.Вставить("ТаблицаВстречногоВыпуска", Новый ТаблицаЗначений);
		
	Если СпособРасчетаСебестоимостиПроизводства  = "ПоПеределам" Тогда
		ПорядокПеределов = ПолучитьПорядокПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	Иначе
		ПроверкаПорядкаЗакрытияПодразделений(СтруктураШапкиДокумента);
		ПорядокПеределов = ПолучитьПорядокПодразделений(СтруктураШапкиДокумента, СтруктураДопПараметров);
		АнализДанныхПроизводства(СтруктураШапкиДокумента, СтруктураДопПараметров);
	КонецЕсли;
	
	Возврат ПорядокПеределов;	
	
КонецФункции 

Функция АнализДанныхПроизводства(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	// Модель производства ввиде последовательности цепочек:
	//ГП(готовая продукция),
	//Подразделение,
	//ном.группа,
	//Номенклатура, израсходованная на производство, в этом подразделении и на эту ном.группу, а значит и на эту ГП
	//счет учета затрат производства
	
	СчетаЗатрат = Новый Массив;
	
	ПС = ПланыСчетов.Хозрасчетный;
	
	РазрешитьУчетУслугБезПлановыхЦен = Не ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(мКонДата, Ложь, СтруктураШапкиДокумента.Организация).ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам;
		
	СчетаЗатрат.Добавить(ПС.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПС.ВспомогательныеПроизводства);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.ПодразделениеДт,
	               |	ХозрасчетныйОбороты.СубконтоДт1,
	               |	ХозрасчетныйОбороты.СчетДт,
	               |	ХозрасчетныйОбороты.СубконтоКт1
	               |ПОМЕСТИТЬ ВР_ХозрасчетныйОбороты
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), &Видысубконто, , , Организация = &Организация) КАК ХозрасчетныйОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТаблицаЗатрат.Источник КАК Источник,
	               |	ТаблицаЗатрат.Подразделение КАК Подразделение,
	               |	ПРЕДСТАВЛЕНИЕ(ТаблицаЗатрат.Подразделение) КАК ПодразделениеПредставление,
	               |	ЕСТЬNULL(ТаблицаГП.НоменклатурнаяГруппа, ТаблицаЗатрат.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа,
	               |	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ТаблицаГП.НоменклатурнаяГруппа, ТаблицаЗатрат.НоменклатурнаяГруппа)) КАК НоменклатурнаяГруппаПредставление,
	               |	ЕСТЬNULL(ТаблицаГП.ГП, ""NULL"") КАК ГП,
	               |	ТаблицаЗатрат.СчетЗатрат КАК СчетЗатрат,
	               |	ТаблицаЗатрат.НоменклатураЗатрат КАК НоменклатураЗатрат,
	               |	ПРЕДСТАВЛЕНИЕ(ТаблицаЗатрат.НоменклатураЗатрат) КАК НоменклатураЗатратПредставление
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		1 КАК Источник,
	               |		ХозрасчетныйОбороты.ПодразделениеДт КАК Подразделение,
	               |		ХозрасчетныйОбороты.СубконтоДт1 КАК НоменклатурнаяГруппа,
	               |		ХозрасчетныйОбороты.СчетДт КАК СчетЗатрат,
	               |		ХозрасчетныйОбороты.СубконтоКт1 КАК НоменклатураЗатрат
	               |	ИЗ
	               |		ВР_ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		1,
	               |		ВложенныйЗапрос.Субконто1,
	               |		ВложенныйЗапрос.Субконто2,
	               |		ВложенныйЗапрос.Счет,
	               |		ХозрасчетныйОбороты.СубконтоКт1
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ХозрасчетныйОстатки.Подразделение КАК Субконто1,
	               |			ХозрасчетныйОстатки.Субконто1 КАК Субконто2,
	               |			ХозрасчетныйОстатки.Счет КАК Счет
	               |		ИЗ
	               |			РегистрБухгалтерии.Хозрасчетный.Остатки(&НачГраница, Счет В ИЕРАРХИИ (&Счета), &Видысубконто, Организация = &Организация) КАК ХозрасчетныйОстатки) КАК ВложенныйЗапрос
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВР_ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	               |			ПО (ХозрасчетныйОбороты.ПодразделениеДт = ВложенныйЗапрос.Субконто1)
	               |				И (ХозрасчетныйОбороты.СубконтоДт1 = ВложенныйЗапрос.Субконто2)
	               |				И (ХозрасчетныйОбороты.СчетДт = ВложенныйЗапрос.Счет)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		2,
	               |		ХозрасчетныйОборотыДтКт.ПодразделениеДт,
	               |		NULL,
	               |		ХозрасчетныйОборотыДтКт.СчетДт,
	               |		&ПустаяСтатьяЗатрат
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&СчетаОбщихЗатрат), , , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		1,
	               |		ВыпускПродукцииУслугБухгалтерскийУчетОбороты.ПодразделениеСписания,
	               |		ВыпускПродукцииУслугБухгалтерскийУчетОбороты.СубконтоСписания1,
	               |		ВыпускПродукцииУслугБухгалтерскийУчетОбороты.СчетСписания,
	               |		ВыпускПродукцииУслугБухгалтерскийУчетОбороты.НоменклатурнаяГруппа
	               |	ИЗ
	               |		РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
	               |				&НачДата,
	               |				&КонДата,
	               |				Месяц,
	               |				СчетЗатрат В ИЕРАРХИИ (&Счета)
	               |					И ПрямыеРасходыРаспределятьПоКоличеству
	               |					И Организация = &Организация) КАК ВыпускПродукцииУслугБухгалтерскийУчетОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		1,
	               |		ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Подразделение,
	               |		ВыпускПродукцииУслугБухгалтерскийУчетОбороты.НоменклатурнаяГруппа,
	               |		ВыпускПродукцииУслугБухгалтерскийУчетОбороты.СчетЗатрат,
	               |		&ПустаяСтатьяЗатрат
	               |	ИЗ
	               |		РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
	               |				&НачДата,
	               |				&КонДата,
	               |				Месяц,
	               |				СчетЗатрат В ИЕРАРХИИ (&Счета)
	               |					И Организация = &Организация) КАК ВыпускПродукцииУслугБухгалтерскийУчетОбороты) КАК ТаблицаЗатрат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Подразделение КАК Подразделение,
	               |			ВыпускПродукцииУслугБухгалтерскийУчетОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |			ВыпускПродукцииУслугБухгалтерскийУчетОбороты.СчетЗатрат КАК СчетЗатрат,
	               |			ВЫБОР
	               |				КОГДА ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Продукция.Услуга
	               |					ТОГДА ВыпускПродукцииУслугБухгалтерскийУчетОбороты.НоменклатурнаяГруппа
	               |				ИНАЧЕ ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Продукция
	               |			КОНЕЦ КАК ГП
	               |		ИЗ
	               |			РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
	               |					&НачДата,
	               |					&КонДата,
	               |					,
	               |					СчетЗатрат В ИЕРАРХИИ (&Счета)
	               |						И Организация = &Организация) КАК ВыпускПродукцииУслугБухгалтерскийУчетОбороты
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВложенныйЗапрос.СубконтоДт1,
	               |			РеализацияУслугОбороты.НоменклатурнаяГруппа,
	               |			ВложенныйЗапрос.СчетДт,
	               |			&ПустаяНоменклатура
	               |		ИЗ
	               |			РегистрНакопления.РеализацияУслуг.Обороты КАК РеализацияУслугОбороты
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |					ВР_ХозрасчетныйОбороты.СчетДт КАК СчетДт,
	               |					ВР_ХозрасчетныйОбороты.ПодразделениеДт КАК СубконтоДт1,
	               |					ВР_ХозрасчетныйОбороты.СубконтоДт1 КАК СубконтоДт2
	               |				ИЗ
	               |					ВР_ХозрасчетныйОбороты КАК ВР_ХозрасчетныйОбороты
	               |				
	               |				СГРУППИРОВАТЬ ПО
	               |					ВР_ХозрасчетныйОбороты.СчетДт,
	               |					ВР_ХозрасчетныйОбороты.ПодразделениеДт,
	               |					ВР_ХозрасчетныйОбороты.СубконтоДт1) КАК ВложенныйЗапрос
	               |				ПО РеализацияУслугОбороты.НоменклатурнаяГруппа = ВложенныйЗапрос.СубконтоДт2
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ИнвентаризацияНЗП.ПодразделениеОрганизации,
	               |			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
	               |			ИнвентаризацияНЗП.СчетЗатрат,
	               |			&ПустаяНоменклатура
	               |		ИЗ
	               |			Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
	               |				ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
	               |		ГДЕ
	               |			ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата
	               |			И ИнвентаризацияНЗП.СчетЗатрат В ИЕРАРХИИ(&Счета)
	               |			И ИнвентаризацияНЗП.Организация = &Организация
	               |			И (НЕ ИнвентаризацияНЗП.ПометкаУдаления)) КАК ТаблицаГП
	               |		ПО (ТаблицаГП.Подразделение = ТаблицаЗатрат.Подразделение)
	               |			И (ВЫБОР
	               |				КОГДА ТаблицаЗатрат.Источник = 1
	               |					ТОГДА ВЫБОР
	               |								КОГДА ТаблицаГП.СчетЗатрат = ТаблицаЗатрат.СчетЗатрат
	               |									ТОГДА ИСТИНА
	               |								ИНАЧЕ ЛОЖЬ
	               |							КОНЕЦ
	               |							И ВЫБОР
	               |								КОГДА ТаблицаЗатрат.НоменклатурнаяГруппа ССЫЛКА Справочник.НоменклатурныеГруппы
	               |									ТОГДА ВЫБОР
	               |											КОГДА ТаблицаЗатрат.НоменклатурнаяГруппа = ТаблицаГП.НоменклатурнаяГруппа
	               |												ТОГДА ИСТИНА
	               |											ИНАЧЕ ЛОЖЬ
	               |										КОНЕЦ
	               |								ИНАЧЕ ИСТИНА
	               |							КОНЕЦ
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ = ИСТИНА)";
	
	
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("КонДата",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	ВидыСубконто = Новый Массив;
	Видысубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("Видысубконто",Видысубконто);
	
	СчетаЗатрат = Новый Массив;
	ПС = ПланыСчетов.Хозрасчетный;
	СчетаЗатрат.Добавить(ПС.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПС.ВспомогательныеПроизводства);			   
	Запрос.УстановитьПараметр("Счета",       СчетаЗатрат);
	
	Запрос.УстановитьПараметр("НачГраница",       Новый Граница(мНачДата, ВидГраницы.Исключая));
	
	СчетаОбщихРасх = Новый Массив;
	СчетаОбщихРасх.Добавить(ПС.ОбщепроизводственныеРасходы);
	Если НЕ СтруктураШапкиДокумента.УчетнаяПолитика.ДиректКостинг Тогда
		СчетаОбщихРасх.Добавить(ПС.ОбщехозяйственныеРасходы);
	КонецЕсли;
	Запрос.УстановитьПараметр("СчетаОбщихЗатрат", СчетаОбщихРасх);
	
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат", Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Результат);
	
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("ГП");
	ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.Значение = "NULL";
	ПостроительЗапроса.Выполнить();
	ТаблицаПроизводства = ПостроительЗапроса.Результат.Выгрузить();
	ТаблицаПроизводства.Колонки.Удалить("Источник");
	
	ПостроительЗапроса.Отбор.Сбросить();
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("ГП");
	ЭлементОтбора.Установить("NULL");
	ПостроительЗапроса.Выполнить();
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Источник = 1 Тогда // прямые затраты			
			Если  СтруктураШапкиДокумента.УчетнаяПолитика.ПрямыеРасходыБезВыпускаВключатьВНЗП
				Или Не СтруктураШапкиДокумента.УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг.ПоПлановымЦенам
				ИЛИ ТаблицаНеЗакрытыхПодразделений.НайтиСтроки(Новый Структура("Подразделение, СчетЗатрат", Выборка.Подразделение, Выборка.СчетЗатрат)).Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;			
			Если Лев(Выборка.СчетЗатрат.Код, "2") = "26" Тогда
				Продолжить;
			КонецЕсли;	
			ТекстСообщения = "Не отражен выпуск продукции, оказание услуг или остатки НЗП.
			|Не обнаружены обороты по кредиту или остатки НЗП для:
			|Счет учета " + Выборка.СчетЗатрат+ ",
			|Подразделение " + Выборка.Подразделение + ",
			|Номенклатурная группа " + Выборка.НоменклатурнаяГруппа + ".
			|Рекомендуется ввести документы ""Отчет производства за смену"", ""Инвентаризация НЗП"" (меню ""Производство""), ""Акт об оказании производственных услуг"" (меню ""Покупка"") или указать, что при отсутствии выпуска прямые расходы считаются остками НЗП (меню ""Предприятие"" - ""Учетная политика"" - ""Учетная политика организаций"" закладка ""НЗП"")";
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, Выборка.НоменклатурнаяГруппа, Отказ, ЭтотОбъект);
			
			Строка = ТаблицаНеЗакрытыхПодразделений.Добавить();
			Строка.Подразделение = Выборка.Подразделение;
			Строка.СчетЗатрат = Выборка.СчетЗатрат;
			
			
		ИначеЕсли Выборка.Источник = 2 Тогда // общие затраты		
			Если  Лев(Выборка.СчетЗатрат.Код, "2") = "26" Тогда
				Продолжить;
			КонецЕсли;	
			Если  Лев(Выборка.СчетЗатрат.Код, "2") = "25" И РазрешитьУчетУслугБезПлановыхЦен Тогда
				Продолжить;
			КонецЕсли;	
			
			
			Если СтруктураШапкиДокумента.УчетнаяПолитика.ПрямыеРасходыБезВыпускаВключатьВНЗП
				ИЛИ ТаблицаНеЗакрытыхПодразделений.Найти(Выборка.Подразделение, "Подразделение") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			
			ТекстСообщения = "Не отражено оказание услуг или остатки НЗП.
			|Не обнаружены обороты по кредиту или остатки НЗП для:
			|Счет учета " + Выборка.СчетЗатрат+ ",
			|Подразделение " + Выборка.Подразделение + ",
			|Номенклатурная группа " + Выборка.НоменклатурнаяГруппа + ".
			|Рекомендуется ввести документы ""Отчет производства за смену"", ""Инвентаризация НЗП"" (меню ""Производство""), ""Акт об оказании производственных услуг"" (меню ""Покупка"") или указать, что при отсутствии выпуска прямые расходы считаются остками НЗП (меню ""Предприятие"" - ""Учетная политика"" - ""Учетная политика организаций"" закладка ""НЗП"")";
			
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, Выборка.СчетЗатрат, Отказ, ЭтотОбъект);
			
			Строка = ТаблицаНеЗакрытыхПодразделений.Добавить();
			Строка.Подразделение = Выборка.Подразделение;
			Строка.СчетЗатрат = Выборка.СчетЗатрат;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПроизводства;
	
КонецФункции  // АнализДанныхПроизводства

Функция ПолучитьПорядокПодразделений(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	// Определяется диапазон переделов после чего начинается перебор
	// всех переделов из найденного диапазона.	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.НомерПередела КАК НомерПередела,
	|	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.ПорядокЗакрытияПодразделенийОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПередела";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("НоменклатурнаяГруппа");
	Результат.ЗаполнитьЗначения("Все", "НоменклатурнаяГруппа");
	
	Возврат Результат;
	
Конецфункции

Функция ПолучитьТаблицуВстречногоВыпуска(СтруктураШапкиДокумента)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Подразделение,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппа,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета КАК ПодразделениеПересчета,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета КАК НоменклатурнаяГруппаПересчета,
	|	ВложенныйЗапрос.СубконтоКт2,
	|	ВложенныйЗапрос.СубконтоКт3
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, Организация = &Организация) КАК ВстречныйВыпускПродукцииУслугСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК СубконтоКт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
	|			ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|			ХозрасчетныйОборотыДтКт.ПодразделениеДт КАК СубконтоДт1,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СубконтоДт3,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , (НЕ СчетДт В ИЕРАРХИИ (&СчетаОбщихЗатрат)), , , , &Организация = Организация) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
	|		ПО ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция = ВложенныйЗапрос.СубконтоКт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета = ВложенныйЗапрос.СубконтоДт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета = ВложенныйЗапрос.СубконтоДт2
	|ГДЕ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Учитывается
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Подразделение,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппа,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета,
	|	ВложенныйЗапрос.СубконтоКт2,
	|	ВложенныйЗапрос.СубконтоКт3
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, Организация = &Организация) КАК ВстречныйВыпускПродукцииУслугСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК СубконтоКт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
	|			ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|			ХозрасчетныйОборотыДтКт.ПодразделениеДт КАК СубконтоДт1,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СубконтоДт3,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&СчетаОбщихЗатрат), , , , &Организация = Организация) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
	|		ПО ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция = ВложенныйЗапрос.СубконтоКт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета = ВложенныйЗапрос.СубконтоДт1
	|ГДЕ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Учитывается";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата",     мКонГраница);
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	СчетаОбщихРасх = Новый Массив;
	СчетаОбщихРасх.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	Если НЕ СтруктураШапкиДокумента.УчетнаяПолитика.ДиректКостинг Тогда
		СчетаОбщихРасх.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	КонецЕсли;
	Запрос.УстановитьПараметр("СчетаОбщихЗатрат", СчетаОбщихРасх);
	
	ТаблицаВстречногоВыпуска = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВстречногоВыпуска;
	
КонецФункции

Функция ПолучитьПорядокПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	ТаблицаПроизводства = АнализДанныхПроизводства(СтруктураШапкиДокумента, СтруктураДопПараметров);
	ТаблицаПроизводства.Колонки.Добавить("НомерПередела", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(12, 0));
	
	// Для ускорения выгрузим колонку продукция в ТабСписПрод,
	ТабСписПрод = ТаблицаПроизводства.Скопировать();
	ТабСписПрод.Свернуть("ГП");
	
	ТаблицаПроизводства.Сортировать("ПодразделениеПредставление, Подразделение, НоменклатурнаяГруппаПредставление,"
		+ "НоменклатурнаяГруппа, НоменклатураЗатратПредставление, НоменклатураЗатрат", Новый СравнениеЗначений);
	
	Индекс = 0;
	МаксИндекс = ТаблицаПроизводства.Количество() - 1;
	ТекПередел = 1;
	ПараметрыПоиска = Новый Структура;
	ПроставленПередел = Истина;
	
	Пока ПроставленПередел Цикл
		
		ПроставленПередел = Ложь;
		
		Пока Индекс <= МаксИндекс Цикл
			ТекСтрока = ТаблицаПроизводства[Индекс];
			
			Если ТабСписПрод.Найти( ТекСтрока.НоменклатураЗатрат, "ГП") = Неопределено Тогда
				ТекСтрока.НомерПередела = ТекПередел;
				ПроставленПередел = Истина;
				Индекс = Индекс + 1;
				Пока Индекс <= МаксИндекс Цикл
					Стр = ТаблицаПроизводства[Индекс];
					Если Стр.НоменклатураЗатрат = ТекСтрока.НоменклатураЗатрат Тогда
						Стр.НомерПередела = ТекПередел;
					Иначе
						Прервать;
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
				
			Иначе
				ПараметрыПоиска.Очистить();
				ПараметрыПоиска.Вставить( "ГП", ТекСтрока.НоменклатураЗатрат);
				НаборСтрок = ТаблицаПроизводства.НайтиСтроки(ПараметрыПоиска);
				Если НаборСтрок.Количество() = 0 Тогда
					ТекСтрока.НомерПередела = ТекПередел;
					ПроставленПередел = Истина;
				Иначе
					СледПередел = Ложь;
					Для Каждого СтрокаПрод Из НаборСтрок Цикл
						Если СтрокаПрод.НомерПередела = 0 ИЛИ СтрокаПрод.НомерПередела = ТекПередел Тогда
							СледПередел = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не СледПередел Тогда
						ТекСтрока.НомерПередела = ТекПередел;
						ПроставленПередел = Истина;
					КонецЕсли;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЕсли;
		КонецЦикла;
		
		
		ТаблицаПроизводства.Сортировать("НомерПередела Убыв, ПодразделениеПредставление, Подразделение,"
			+ "НоменклатурнаяГруппаПредставление, НоменклатурнаяГруппа, НоменклатураЗатратПредставление,"
			+ "НоменклатураЗатрат", Новый СравнениеЗначений);
		ТекСтрока = ТаблицаПроизводства.Найти(0, "НомерПередела");
		
		Если ТекСтрока = Неопределено Тогда
			Прервать;
		Иначе
			Индекс = ТаблицаПроизводства.Индекс(ТекСтрока);
			
		КонецЕсли;
		
		ТекПередел = ТекПередел + 1;
		
	КонецЦикла;
	
	ТаблицаПроизводства.Сортировать("НомерПередела Убыв, ПодразделениеПредставление, Подразделение,"
			+ "НоменклатурнаяГруппаПредставление, НоменклатурнаяГруппа, НоменклатураЗатратПредставление,"
			+ "НоменклатураЗатрат", Новый СравнениеЗначений);
	
	// Продукция выпущенная на переделе.
	ТабТемп = ТаблицаПроизводства.Скопировать();
	
	// Рассчитаем максимальный уровень передела для продукции
	ТабТемп.Свернуть("Подразделение, НоменклатурнаяГруппа, ГП, НомерПередела");
	ТабПродукция = ТабТемп.Скопировать();
	ТабПродукция.Свернуть("Подразделение, НоменклатурнаяГруппа, ГП");
	ТабПродукция.Колонки.Добавить("НомерПередела", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(12, 0));
	СтруктПоиска = Новый Структура;
	Для Каждого СтрокаТаб Из ТабПродукция Цикл
		СтруктПоиска.Вставить("Подразделение", СтрокаТаб.Подразделение);
		СтруктПоиска.Вставить("НоменклатурнаяГруппа", СтрокаТаб.НоменклатурнаяГруппа);
		НаборСтрок = ТабТемп.НайтиСтроки(СтруктПоиска);
		МаксНомерПередела = 0;
		Для Каждого Строка Из НаборСтрок Цикл
			МаксНомерПередела = Макс(МаксНомерПередела, Строка.НомерПередела);
		КонецЦикла;
		СтрокаТаб.НомерПередела = МаксНомерПередела;
	КонецЦикла;
	ТабТемп = 0;
	
	ТабПродукция.Свернуть("Подразделение, НоменклатурнаяГруппа, НомерПередела");
	ТабПродукция.Сортировать("НомерПередела Возр");
	
	
	ТаблицаВстречногоВыпуска = ПолучитьТаблицуВстречногоВыпуска(СтруктураШапкиДокумента);
	
	СтруктураДопПараметров.ТаблицаВстречногоВыпуска = ТаблицаВстречногоВыпуска;
	
	// Если в порядке переделов всего один передел, то сообщение не выдается
	ПорядокПодразделенийСообщался = ПорядокПодразделенийСообщался ИЛИ (ТабПродукция.Количество() < 2);
	
	Если Не ПорядокПодразделенийСообщался Тогда
		Сообщить("Порядок переделов:");
		
		НомерПередела = 1;
		Для Каждого Передел Из ТабПродукция Цикл
			Сообщить("" + НомерПередела + " - " + Передел.Подразделение + " - " + Передел.НоменклатурнаяГруппа);
			НомерПередела = НомерПередела + 1;
		КонецЦикла;
	КонецЕсли;
	
	ПорядокПодразделенийСообщался = Истина;
	
	Возврат ТабПродукция;
	
КонецФункции

// Процедура производит расчет себестоимости по прямым затратам по переделам.
//
Процедура РасчетПрямыхЗатрат(СтруктураШапкиДокумента, ВыполненоРаспределениеОХРИлиОПР = Ложь, СтруктураДопПараметров)
	
	
	
	Если ПорядокПеределов = Неопределено Или ПорядокПеределов.Количество() = 0 Тогда
		
		Если Не СтруктураШапкиДокумента.УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам Тогда
			
			ДвиженияПоПрямымЗатратамПоУслугам(СтруктураШапкиДокумента, СтруктураДопПараметров, ВыполненоРаспределениеОХРИлиОПР);
		КонецЕсли; 
		
		Возврат;
	КонецЕсли;
	
	КоличествоПеределов = ПорядокПеределов[ПорядокПеределов.Количество() - 1].НомерПередела;
	
	Для НомерПередела = 1 По КоличествоПеределов Цикл
		
		ПодразделенияИНоменклатурныеГруппы = 
			ПорядокПеределов.Скопировать(Новый Структура("НомерПередела", НомерПередела), "Подразделение, НоменклатурнаяГруппа");
		
		Если Не ВыполненоРаспределениеОХРИлиОПР Тогда
			ОценкаОстатковНЗПпоРазницам(СтруктураШапкиДокумента, СтруктураДопПараметров, ПодразделенияИНоменклатурныеГруппы);
		КонецЕсли;
		
		// Распределение прямых расходов по тем подразделениям, которым присвоен
		// текущий номер передела.
		МассивНоменклатуры = Новый Массив; // массив номенклатуры, у которой, в результате расчета себестоимости, изменилась средневзвешенная стоимость.
		ДвиженияПоПрямымЗатратам(СтруктураШапкиДокумента, ПодразделенияИНоменклатурныеГруппы, ВыполненоРаспределениеОХРИлиОПР, МассивНоменклатуры, СтруктураДопПараметров);
		
		Если МассивНоменклатуры.Количество() > 0 Тогда
			КорректирровкаСтоимостиСписанияВыпущеннойПродукции(СтруктураШапкиДокумента, МассивНоменклатуры, ВыполненоРаспределениеОХРИлиОПР, СтруктураДопПараметров);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // РасчетПрямыхЗатрат()

// Проверка все ли подразделения указаны в порядке закрытия подразделений
Процедура ПроверкаПорядкаЗакрытияПодразделений(СтруктураШапкиДокумента)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.КонечныйПередел) КАК КонечныйПередел,
	|	ВложенныйЗапрос.Подразделение КАК Подразделение,
	|	СУММА(ВложенныйЗапрос.СуммаОборот) КАК СуммаОборот
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.НомерПередела КАК КонечныйПередел,
	|		ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.Подразделение КАК Подразделение,
	|		0 КАК СуммаОборот
	|	ИЗ
	|		РегистрСведений.ПорядокЗакрытияПодразделенийОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ВыпускПродукцииУслугОбороты.Подразделение,
	|		ВыпускПродукцииУслугОбороты.КоличествоОборот + ВыпускПродукцииУслугОбороты.ПлановаяСтоимостьОборот
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукцииУслуг.Обороты(&НачДата, &КонДата, , Организация = &Организация) КАК ВыпускПродукцииУслугОбороты) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Подразделение";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("КонДата",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Массив = Новый Массив;
	Массив.Добавить(Планысчетов.Хозрасчетный.ОсновноеПроизводство);
	Массив.Добавить(Планысчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.УстановитьПараметр("СчетЗатрат",  Массив);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из Результат Цикл
		Если Строка.КонечныйПередел = 0 И Строка.СуммаОборот <> 0  И Не ПорядокПодразделенийСообщался Тогда
			ТекстСообщения = "Не установлен порядок подразделений
			|В регистре сведений ""Порядок подразделений для закрытия счетов"" не обнаружена запись для подразделения """ + Строка.Подразделение +""".
			|Укажите порядок этого подразделения для закрытия счетов затрат (меню ""Предприятие"" - ""Учетная политика"" - ""Учетная политика организаций"" закладка ""Выпуск продукции, услуг"") или установите автоматический порядок закрытия подразделений""";
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , Отказ, ЭтотОбъект);
		КонецЕсли;
	КонецЦикла;
	
	ПорядокПодразделенийСообщался = Истина;
	
КонецПроцедуры

Функция ЕстьОстатокНаСчетахОПР_ОХР(СтруктураШапкиДокумента)
	
	ЗакрыватьОПР_ОХР = Новый Структура("ЗакрыватьОПР, ЗакрыватьОХР", Ложь, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон",      мКонГраница);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет25,
	|	NULL КАК Счет26,
	|	ХозрасчетныйОстатки.Подразделение,
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	ХозрасчетныйОстатки.СуммаНУОстаток,
	|	ХозрасчетныйОстатки.СуммаПРОстаток,
	|	ХозрасчетныйОстатки.СуммаВРОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщепроизводственныеРасходы)), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Подразделение,
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	ХозрасчетныйОстатки.СуммаНУОстаток,
	|	ХозрасчетныйОстатки.СуммаПРОстаток,
	|	ХозрасчетныйОстатки.СуммаВРОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщехозяйственныеРасходы)), , Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Счет25 = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы Тогда
			ЗакрыватьОПР_ОХР.ЗакрыватьОПР = Истина;
		ИначеЕсли Выборка.Счет26 = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы Тогда
			ЗакрыватьОПР_ОХР.ЗакрыватьОХР = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗакрыватьОПР_ОХР;
	
КонецФункции

// Процедура запускает расчет прямых и косвенных расходов
// если используется простой расчет себестоимости и не используется встречный выпуск
// (производственная цепочка не имеет "закольцованных звеньев"),
// тогда расчет прямых затрат запускается один раз
// в противном случае
// первый расчет прямых затрат производится без учета переделов, задействованных в "кольце"
// второй расчет прямых затрат производится только по пределем, задействованным в "кольце"
// третий расчет прямых затрат проводится для всех переделов, но корректирует выпуск только той,
// готовой продукции, которая не была списана на "кольцо"
//
Процедура РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров, СпособОценкиМПЗ)
	
	ЗакрытиеCчетовКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	
	Если СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства = "ПоПеределам"
		И СтруктураДопПараметров.ТаблицаВстречногоВыпуска.Количество() > 0 Тогда
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "1";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров);
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "2";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров);
		// Списание общепроизводственных и общехозяйственных расходов
		// на себестоимость продукции (услуг).
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "3" + СпособОценкиМПЗ;
		РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
		
	Иначе
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров);
		РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	КонецЕсли;
	
	ЗакрыватьОПР_ОХР = ЕстьОстатокНаСчетахОПР_ОХР(СтруктураШапкиДокумента);
	РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров, ЗакрыватьОПР_ОХР.ЗакрыватьОПР, ЗакрыватьОПР_ОХР.ЗакрыватьОХР);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ЗакрытиеCчетовКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
		Если НЕ СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
			СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "";
			РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров);
			ЗакрытиеCчетовКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
			РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытиеCчетовКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	СтруктураШапкиДокумента.Вставить("ПрименяетсяДиректКостинг", СтруктураШапкиДокумента.УчетнаяПолитика.ДиректКостинг);
	
	Если СтруктураШапкиДокумента.ПрименениеЕНВД Тогда 
		
		ВыручкаНеЕНВД = 0;
		ВыручкаЕНВД = 0;
		
		Коэффициент = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, мКонДата, мНачДата, Ложь, ВыручкаНеЕНВД, ВыручкаЕНВД);
		
	Иначе
		Коэффициент = 0;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мНачГода);
	Запрос.УстановитьПараметр("ДатаКон",      мКонГраница);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
		
	СчетаЗатрат1 = Новый Массив;
	ВидыСубконто1 = Новый Массив;
	СчетаЗатрат1.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СчетаЗатрат1.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	СчетаЗатрат2 = Новый Массив;
	ВидыСубконто2 = Новый Массив;
	СчетаЗатрат2.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаЗатрат2.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	
	ВидыСубконто1.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	ВидыСубконто1.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("СчетаЗатрат1",  СчетаЗатрат1);
	Запрос.УстановитьПараметр("ВидыСубконто1",  ВидыСубконто1);
	ВидыСубконто2 = Новый Массив;
	ВидыСубконто2.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("Счет25",  ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	Запрос.УстановитьПараметр("ВидыСубконто2",  ВидыСубконто2);
	Запрос.УстановитьПараметр("Счет26",  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	СтруктураДопПараметров.Вставить("МенеджерВременныхТаблиц", НалоговыйУчет.СписокПрямыхРасходовНУ(Организация, Дата));
	Запрос.МенеджерВременныхТаблиц = СтруктураДопПараметров.МенеджерВременныхТаблиц;
	
	СчетаЗакрытияКосвенных = Новый Массив;
	СчетаЗакрытияКосвенных.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу);
	СчетаЗакрытияКосвенных.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы);
	Запрос.УстановитьПараметр("СчетаЗакрытияКосвенных",  СчетаЗакрытияКосвенных);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Счет КАК Счет,
	|	ВложенныйЗапрос.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ВложенныйЗапрос.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.Подразделение КАК Подразделение,
	|	СУММА(ВложенныйЗапрос.СуммаДтНУ) КАК СуммаДтНУ,
	|	СУММА(ВложенныйЗапрос.СуммаДтПР) КАК СуммаДтПР,
	|	СУММА(ВложенныйЗапрос.СуммаДтВР) КАК СуммаДтВР,
	|	СУММА(ВложенныйЗапрос.СуммаДтБУ) КАК СуммаДтБУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновноеИВспомогательноеПроизводство.Счет КАК Счет,
	|		ОсновноеИВспомогательноеПроизводство.Субконто1 КАК СтатьяЗатрат,
	|		ОсновноеИВспомогательноеПроизводство.Субконто2 КАК НоменклатурнаяГруппа,
	|		ЕСТЬNULL(ОсновноеИВспомогательноеПроизводство.СуммаНУОборот, 0) КАК СуммаДтНУ,
	|		ЕСТЬNULL(ОсновноеИВспомогательноеПроизводство.СуммаПРОборот, 0) КАК СуммаДтПР,
	|		ЕСТЬNULL(ОсновноеИВспомогательноеПроизводство.СуммаВРОборот, 0) КАК СуммаДтВР,
	|		ОсновноеИВспомогательноеПроизводство.Подразделение КАК Подразделение,
	|		0 КАК СуммаДтБУ
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Период,
	|				Счет В ИЕРАРХИИ (&СчетаЗатрат1),
	|				&ВидыСубконто1,
	|				Организация = &Организация,
	|				(НЕ КорСчет В ИЕРАРХИИ (&Счет25))
	|					И (НЕ КорСчет В ИЕРАРХИИ (&Счет26)),
	|				) КАК ОсновноеИВспомогательноеПроизводство
	|			ЛЕВОЕ СОЕДИНЕНИЕ СписокПрямыхРасходовНУ КАК Правила
	|			ПО (Правила.ВидЗатратНУ = ОсновноеИВспомогательноеПроизводство.Субконто1.ВидРасходовНУ)
	|				И (ВЫБОР
	|					КОГДА Правила.Подразделение <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.Подразделение = ОсновноеИВспомогательноеПроизводство.Подразделение
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СчетЗатрат = ОсновноеИВспомогательноеПроизводство.Счет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.КорСчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.КорСчетЗатрат = ОсновноеИВспомогательноеПроизводство.КорСчет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СтатьяЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СтатьяЗатрат = ОсновноеИВспомогательноеПроизводство.Субконто1
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|	ГДЕ
	|		ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВложенныйЗапрос.Счет,
	|		ВложенныйЗапрос.Субконто1,
	|		NULL,
	|		ЕСТЬNULL(ВложенныйЗапрос.СуммаНУОборот, 0),
	|		ЕСТЬNULL(ВложенныйЗапрос.СуммаПРОборот, 0),
	|		ЕСТЬNULL(ВложенныйЗапрос.СуммаВРОборот, 0),
	|		ВложенныйЗапрос.Подразделение,
	|		0
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ОПРДт.Счет КАК Счет,
	|			ОПРДт.Субконто1 КАК Субконто1,
	|			ЕСТЬNULL(ОПРДт.СуммаНУОборотДт, 0) КАК СуммаНУОборот,
	|			ЕСТЬNULL(ОПРДт.СуммаПРОборотДт, 0) КАК СуммаПРОборот,
	|			ЕСТЬNULL(ОПРДт.СуммаВРОборотДт, 0) КАК СуммаВРОборот,
	|			ОПРДт.Подразделение КАК Подразделение,
	|			ОПРДт.КорСчет КАК КорСчет
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Период, Счет В ИЕРАРХИИ (&Счет25), &ВидыСубконто2, Организация = &Организация, (НЕ КорСчет В ИЕРАРХИИ (&СчетаЗатрат1)), ) КАК ОПРДт
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ОПРЗакрытиеКосвенныхКт.Счет,
	|			ОПРЗакрытиеКосвенныхКт.Субконто1,
	|			ЕСТЬNULL(-ОПРЗакрытиеКосвенныхКт.СуммаНУОборотКт, 0),
	|			ЕСТЬNULL(-ОПРЗакрытиеКосвенныхКт.СуммаПРОборотКт, 0),
	|			ЕСТЬNULL(-ОПРЗакрытиеКосвенныхКт.СуммаВРОборотКт, 0),
	|			ОПРЗакрытиеКосвенныхКт.Подразделение,
	|			ОПРЗакрытиеКосвенныхКт.КорСчет
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Период, Счет В ИЕРАРХИИ (&Счет25), &ВидыСубконто2, Организация = &Организация, КорСчет В ИЕРАРХИИ (&СчетаЗакрытияКосвенных), ) КАК ОПРЗакрытиеКосвенныхКт) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ СписокПрямыхРасходовНУ КАК Правила
	|			ПО (Правила.ВидЗатратНУ = ВложенныйЗапрос.Субконто1.ВидРасходовНУ)
	|				И (ВЫБОР
	|					КОГДА Правила.СчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СчетЗатрат = ВложенныйЗапрос.Счет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.КорСчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.КорСчетЗатрат = ВложенныйЗапрос.КорСчет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.Подразделение <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.Подразделение = ВложенныйЗапрос.Подразделение
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СтатьяЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СтатьяЗатрат = ВложенныйЗапрос.Субконто1
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|	ГДЕ
	|		ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОХРБУ.Счет,
	|		ОХРБУ.Субконто1,
	|		NULL,
	|		0,
	|		0,
	|		0,
	|		ОХРБУ.Подразделение,
	|		ЕСТЬNULL(ОХРБУ.СуммаОборот, 0)
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Период, Счет В ИЕРАРХИИ (&Счет26), &ВидыСубконто2, Организация = &Организация, , ) КАК ОХРБУ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОХРНУ.Счет,
	|		ОХРНУ.Субконто1,
	|		NULL,
	|		ЕСТЬNULL(ОХРНУ.СуммаНУОборот, 0),
	|		ЕСТЬNULL(ОХРНУ.СуммаПРОборот, 0),
	|		ЕСТЬNULL(ОХРНУ.СуммаВРОборот, 0),
	|		ОХРНУ.Подразделение,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Период, Счет В ИЕРАРХИИ (&Счет26), &ВидыСубконто2, Организация = &Организация, , ) КАК ОХРНУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ СписокПрямыхРасходовНУ КАК Правила
	|			ПО (Правила.ВидЗатратНУ = ОХРНУ.Субконто1.ВидРасходовНУ)
	|				И (ВЫБОР
	|					КОГДА Правила.Подразделение <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.Подразделение = ОХРНУ.Подразделение
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СчетЗатрат = ОХРНУ.Счет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.КорСчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.КорСчетЗатрат = ОХРНУ.КорСчет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СтатьяЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СтатьяЗатрат = ОХРНУ.Субконто1
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|	ГДЕ
	|		ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.Счет,
	|	ВложенныйЗапрос.СтатьяЗатрат,
	|	ВложенныйЗапрос.НоменклатурнаяГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение,
	|	Счет,
	|	СтатьяЗатрат,
	|	НоменклатурнаяГруппа
	|ИТОГИ
	|	СУММА(СуммаДтНУ),
	|	СУММА(СуммаДтПР),
	|	СУММА(СуммаДтВР),
	|	СУММА(СуммаДтБУ)
	|ПО
	|	Подразделение,
	|	Счет,
	|	СтатьяЗатрат,
	|	НоменклатурнаяГруппа";
	
	Результат = Запрос.Выполнить();
	ВыборкаПодразделение = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПодразделение.Следующий() Цикл
		ВыборкаСчет = ВыборкаПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчет.Следующий() Цикл
			КодСчета = Лев(ВыборкаСчет.Счет.Код, 2);
			ВыборкаСтатьяЗатрат = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСтатьяЗатрат.Следующий() Цикл
				ДелатьРасчетПР = Ложь;
				Если КодСчета = "20" Или КодСчета = "23"  Тогда
					ВыборкаНомГруппа = ВыборкаСтатьяЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаНомГруппа.Следующий() Цикл
						Сумма = Новый Структура("СуммаБУ,СуммаНУ,СуммаПР,СуммаВР",0,ВыборкаНомГруппа.СуммаДтНУ, 0, ВыборкаСтатьяЗатрат.СуммаДтВР);
						СписатьКосвенныеРасходы(мПроводки, ВыборкаНомГруппа, Сумма, СтруктураШапкиДокумента, СтруктураДопПараметров, Истина)
						
					КонецЦикла;
				Иначе
					Если КодСчета = "25" Или (КодСчета = "26" И Не СтруктураШапкиДокумента.ПрименяетсяДиректКостинг)  Тогда
						Сумма = Новый Структура("СуммаБУ,СуммаНУ,СуммаПР,СуммаВР",0,ВыборкаСтатьяЗатрат.СуммаДтНУ, 0, ВыборкаСтатьяЗатрат.СуммаДтВР);
						ДелатьРасчетПР = Ложь;
					Иначе
						Сумма = Новый Структура("СуммаБУ,СуммаНУ,СуммаПР,СуммаВР",ВыборкаСтатьяЗатрат.СуммаДтБУ,ВыборкаСтатьяЗатрат.СуммаДтНУ, ВыборкаСтатьяЗатрат.СуммаДтПР, ВыборкаСтатьяЗатрат.СуммаДтВР);
						ДелатьРасчетПР = Истина;
					КонецЕсли;
					
					СписатьКосвенныеРасходы(мПроводки, ВыборкаСтатьяЗатрат, Сумма, СтруктураШапкиДокумента, СтруктураДопПараметров,,ДелатьРасчетПР)
					
				КонецЕсли;
				
				
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		мПроводки.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура СписатьКосвенныеРасходы(мПроводки, Выборка, Сумма, СтруктураШапкиДокумента, СтруктураДопПараметров, АналитикаПоНомГруппам = Ложь, ДелатьРасчетПР = Ложь) 
	
	Если НЕ ЗначениеЗаполнено(Выборка.СтатьяЗатрат) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураДопПараметров.ЭтапСписанияКосвенныхРасходов = 1 И 
		(Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.РасходыНаВозмещениеЗатратРаботниковПоУплатеПроцентов Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы Или
		Выборка.СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам) Тогда
		
		Возврат;
	КонецЕсли;
	
	Это44 = (Лев(Выборка.Счет.Код,2) = "44");
	ВидРасходовНУ = Выборка.СтатьяЗатрат.ВидРасходовНУ;
	ВидДеятельности =  Выборка.СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат;
	ВсегоБУ = Сумма.СуммаБУ;
	ВсегоНУ = Сумма.СуммаНУ;
	Если СтруктураДопПараметров.ЭтапСписанияКосвенныхРасходов = 1 Тогда
		ВсегоПР = Сумма.СуммаПР;
		ВсегоВР = Сумма.СуммаВР;
	Иначе
		ВсегоПР = 0;
		ВсегоВР = 0;
	КонецЕсли;
	СуммаБУ = Сумма.СуммаБУ;
	СуммаНУ = Сумма.СуммаНУ;
	СуммаПР = Сумма.СуммаПР;
	СуммаВР = Сумма.СуммаВР;
	СуммаЕНВДБУ = 0;
	СуммаЕНВДНУ = 0;
	СуммаЕНВДПР = 0;
	СуммаЕНВДВР = 0;
	
	
	Если ВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам Тогда
		
		Коэффициент = НалоговыйУчет.ПолучитьДолюКосвенногоРасхода(ТаблицаДолейКосвенныхРасходов, Неопределено);
		СчетДт = ?(Это44, ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД, ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД);
		СуммаЕНВДБУ = Коэффициент * Сумма.СуммаБУ; СуммаБУ = Сумма.СуммаБУ - СуммаЕНВДБУ;
		СуммаЕНВДНУ = Коэффициент * Сумма.СуммаНУ; СуммаНУ = Сумма.СуммаНУ - СуммаЕНВДНУ;
		СуммаЕНВДПР = Коэффициент * Сумма.СуммаПР; СуммаПР = Сумма.СуммаПР - СуммаЕНВДПР;
		СуммаЕНВДВР = Коэффициент * Сумма.СуммаВР; СуммаВР = Сумма.СуммаВР - СуммаЕНВДВР;
		
		Если ДелатьРасчетПР Тогда
			Разница = СуммаБУ - СуммаНУ - СуммаПР - СуммаВР;
			СуммаПР = СуммаПР + Разница;
		Иначе
			Разница = СуммаБУ - СуммаНУ - СуммаПР - СуммаВР;
			СуммаВР = СуммаВР + Разница;
		КонецЕсли;
		
		Сумма.СуммаБУ = СуммаБУ;
		Сумма.СуммаНУ = СуммаНУ;
		Сумма.СуммаПР = СуммаПР;
		Сумма.СуммаВР = СуммаВР;
		НалоговыйУчет.ПроводкиПоКосвеннымРасходам(мПроводки, Выборка, Сумма, СчетДт, СтруктураШапкиДокумента, СтруктураДопПараметров, АналитикаПоНомГруппам);
		
		СчетДт = ?(Это44, ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД, ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД);
		
		Если ДелатьРасчетПР Тогда
			Разница = СуммаЕНВДБУ - СуммаЕНВДНУ - СуммаЕНВДПР - СуммаЕНВДВР;
			СуммаЕНВДПР = СуммаЕНВДПР + Разница;
		Иначе
			Разница = СуммаЕНВДБУ - СуммаЕНВДНУ - СуммаЕНВДПР - СуммаЕНВДВР;
			СуммаЕНВДВР = СуммаЕНВДВР + Разница;
		КонецЕсли;
		
		Сумма.СуммаБУ = СуммаЕНВДБУ;
		Сумма.СуммаНУ = СуммаЕНВДНУ;
		Сумма.СуммаПР = СуммаЕНВДПР;
		Сумма.СуммаВР = СуммаЕНВДВР;
		
		НалоговыйУчет.ПроводкиПоКосвеннымРасходам(мПроводки, Выборка, Сумма, СчетДт, СтруктураШапкиДокумента, СтруктураДопПараметров, АналитикаПоНомГруппам);
	ИначеЕсли ВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД Тогда
		
		Коэффициент = НалоговыйУчет.ПолучитьДолюКосвенногоРасхода(ТаблицаДолейКосвенныхРасходов,ВидРасходовНУ);
		
		Если ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы Тогда
			СуммаБУ = Коэффициент * Сумма.СуммаБУ;
			СуммаПР = Коэффициент * Сумма.СуммаПР;
			СуммаНУ = Коэффициент * Сумма.СуммаНУ;
			СуммаВР = Коэффициент * Сумма.СуммаВР;
		Иначе
			СуммаБУ = Сумма.СуммаБУ;
			СуммаПР = Сумма.СуммаПР;
			СуммаНУ = Коэффициент * Сумма.СуммаНУ;
			СуммаВР = Сумма.СуммаВР;
		КонецЕсли;
		
		Если ДелатьРасчетПР Тогда
			Разница = СуммаБУ - СуммаНУ - СуммаПР - СуммаВР;
			СуммаПР = СуммаПР + Разница;
			ВсегоПР = СуммаПР / ?(Коэффициент = 0, 1, Коэффициент);
		Иначе
			Разница = СуммаБУ - СуммаНУ - СуммаПР - СуммаВР;
			СуммаВР = СуммаВР + Разница;
			ВсегоВР = СуммаВР / ?(Коэффициент = 0, 1, Коэффициент);
		КонецЕсли;
		
		Сумма.СуммаБУ = СуммаБУ;
		Сумма.СуммаНУ = СуммаНУ;
		Сумма.СуммаПР = СуммаПР;
		Сумма.СуммаВР = СуммаВР;
		
		СчетДт = ?(Это44, ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД, ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД);
		НалоговыйУчет.ПроводкиПоКосвеннымРасходам(мПроводки, Выборка, Сумма, СчетДт, СтруктураШапкиДокумента, СтруктураДопПараметров, АналитикаПоНомГруппам);
		
		СуммаБУ = Сумма.СуммаБУ;
		СуммаНУ = Сумма.СуммаНУ;
		СуммаПР = Сумма.СуммаПР;
		СуммаВР = Сумма.СуммаВР;
		
	Иначе  // ЕНВД
		
		СуммаЕНВДБУ = Сумма.СуммаБУ;
		СуммаЕНВДНУ = Сумма.СуммаНУ;
		СуммаЕНВДПР = Сумма.СуммаПР;
		СуммаЕНВДВР = Сумма.СуммаВР;
		
		Если ДелатьРасчетПР Тогда
			Разница = СуммаЕНВДБУ - СуммаЕНВДНУ - СуммаЕНВДПР - СуммаЕНВДВР;
			СуммаЕНВДПР = СуммаЕНВДПР + Разница;
			ВсегоЕНВДПР = СуммаЕНВДПР;
		Иначе
			Разница = СуммаЕНВДБУ - СуммаЕНВДНУ - СуммаЕНВДПР - СуммаЕНВДВР;
			СуммаЕНВДВР = СуммаЕНВДВР + Разница;
			ВсегоЕНВДВР = СуммаЕНВДВР;
		КонецЕсли;
		
		
		СуммаБУ = 0;
		СуммаНУ = 0;
		СуммаПР = 0;
		СуммаВР = 0;
		
		Сумма.СуммаБУ = СуммаЕНВДБУ;
		Сумма.СуммаНУ = СуммаЕНВДНУ;
		Сумма.СуммаПР = СуммаЕНВДПР;
		Сумма.СуммаВР = СуммаЕНВДВР;
		
		СчетДт = ?(Это44, ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД, ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД);
		НалоговыйУчет.ПроводкиПоКосвеннымРасходам(мПроводки, Выборка, Сумма, СчетДт, СтруктураШапкиДокумента, СтруктураДопПараметров, АналитикаПоНомГруппам);
	КонецЕсли;
	
    Если Не Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы Тогда
		
		Если  СуммаБУ = 0 И СуммаНУ = 0 И СуммаПР = 0 И СуммаВР = 0
			И ВсегоБУ = 0 И ВсегоНУ = 0 И ВсегоПР = 0 И ВсегоВР = 0
			И СуммаЕНВДБУ = 0 И СуммаЕНВДНУ = 0 И СуммаЕНВДПР = 0 И СуммаЕНВДВР = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаЗаписьСписанияКосвенныхРасходов              = СтруктураДопПараметров.ЗаписьСписанияКосвенныхРасходов.Добавить();
		СтрокаЗаписьСписанияКосвенныхРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат  = Выборка.СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат;
		СтрокаЗаписьСписанияКосвенныхРасходов.СчетУчета   = Выборка.Счет;
		СтрокаЗаписьСписанияКосвенныхРасходов.СтатьяЗатрат= Выборка.СтатьяЗатрат;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаЗатрат = ВсегоБУ;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаННП    = СуммаБУ;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаНеННП  = СуммаЕНВДБУ;
		
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаЗатратНУ = ВсегоНУ;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаННПНУ    = СуммаНУ;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаНеННПНУ  = СуммаЕНВДНУ;	
		
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаЗатратПР = ВсегоПР;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаННППР    = СуммаПР;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаНеННППР  = СуммаЕНВДПР;	
		
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаЗатратВР = ВсегоВР;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаННПВР    = СуммаВР;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаНеННПВР  = СуммаЕНВДВР;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьЗаписьРасчетаСебестоимости(СтруктураДопПараметров)
	
	Если Не СтруктураДопПараметров.Счет40 Тогда
		Возврат;
	КонецЕсли;
	ЗаписьРасчетаСебестоимости = СтруктураДопПараметров.ЗаписьРасчетаСебестоимости;
	Для Каждого Строка Из ЗаписьРасчетаСебестоимости Цикл
		Строка.СуммаПР = Строка.СуммаПР - ?(СтруктураДопПараметров.Счет40, 0, Строка.СуммаПлан);
		Строка.СуммаВР = Строка.СуммаВР - ?(СтруктураДопПараметров.Счет40, 0, Строка.СуммаПлан);
	КонецЦикла;
	
КонецПроцедуры

// вспомогательная процедура для расчета ПР и ВР НЗП
// т.к. пользователь указывает сумму НЗП по БУ и по НУ,
// то долю ПР и ВР в НЗП высчитываем по пропорции с начальными остатками НЗП
Процедура ОценкаОстатковНЗПпоРазницам(СтруктураШапкиДокумента, СтруктураДопПараметров, ПодразделенияИНоменклатурныеГруппы)
	
	НЗП = СтруктураДопПараметров.НЗП;
	
	Если НЗП = Неопределено Тогда
		НЗП = Новый ТаблицаЗначений;
		НЗП.Колонки.Добавить("Счет");
		НЗП.Колонки.Добавить("Подразделение");
		НЗП.Колонки.Добавить("НоменклатурнаяГруппа");
		НЗП.Колонки.Добавить("СуммаПР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		НЗП.Колонки.Добавить("СуммаВР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.НЗППР) КАК НЗППР,
	|	СУММА(ВложенныйЗапрос.НЗПВР) КАК НЗПВР,
	|	СУММА(ВложенныйЗапрос.Разницы) КАК Разницы,
	|	ВложенныйЗапрос.Счет КАК Счет,
	|	ВложенныйЗапрос.Подразделение КАК Подразделение,
	|	ВложенныйЗапрос.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОстаткиИОбороты.СуммаПРНачальныйОстатокДт + ХозрасчетныйОстаткиИОбороты.СуммаПРОборотДт КАК НЗППР,
	|		ХозрасчетныйОстаткиИОбороты.СуммаВРНачальныйОстатокДт + ХозрасчетныйОстаткиИОбороты.СуммаВРОборотДт КАК НЗПВР,
	|		0 КАК Разницы,
	|		ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|		ХозрасчетныйОстаткиИОбороты.Подразделение КАК Подразделение,
	|		ХозрасчетныйОстаткиИОбороты.Субконто1 КАК НоменклатурнаяГруппа
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|				&НачПериода,
	|				&КонПериода,
	|				,
	|				,
	|				Счет В ИЕРАРХИИ (&Счет),
	|				&НоменклатурныеГруппы,
	|				Организация = &Организация
	|					И (Подразделение, Субконто1) В
	|						(ВЫБРАТЬ
	|							Фильтр.Подразделение,
	|							Фильтр.НоменклатурнаяГруппа
	|						ИЗ
	|							Фильтр КАК Фильтр)) КАК ХозрасчетныйОстаткиИОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		0,
	|		ИнвентаризацияНЗПСостав.Сумма - ИнвентаризацияНЗПСостав.СуммаНУ,
	|		ИнвентаризацияНЗПСостав.Ссылка.СчетЗатрат,
	|		ИнвентаризацияНЗПСостав.Ссылка.ПодразделениеОрганизации,
	|		ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа
	|	ИЗ
	|		Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
	|			ПО ИнвентаризацияНЗПСостав.Ссылка.ПодразделениеОрганизации = Фильтр.Подразделение
	|				И ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа = Фильтр.НоменклатурнаяГруппа
	|	ГДЕ
	|		ИнвентаризацияНЗПСостав.Ссылка.Организация = &Организация
	|		И ИнвентаризацияНЗПСостав.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|		И (НЕ ИнвентаризацияНЗПСостав.Ссылка.ПометкаУдаления)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Счет,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.НоменклатурнаяГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	Подразделение,
	|	НоменклатурнаяГруппа";
	
	Если ПодразделенияИНоменклатурныеГруппы.Количество() > 0 
		И ПодразделенияИНоменклатурныеГруппы[0].НоменклатурнаяГруппа = "Все" Тогда
		
		ТекстЗапросаФильтр = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ Фильтр
		|ИЗ
		|	&ПодразделенияИНоменклатурныеГруппы КАК Таблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа = Фильтр.НоменклатурнаяГруппа", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И (Подразделение, Субконто1) В", "И Подразделение В");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Фильтр.Подразделение,", "Фильтр.Подразделение");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Фильтр.НоменклатурнаяГруппа", "");
		
	Иначе
		ТекстЗапросаФильтр = 
		"ВЫБРАТЬ
		|	Таблица.Подразделение КАК Подразделение,
		|	Таблица.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ПОМЕСТИТЬ Фильтр
		|ИЗ
		|	&ПодразделенияИНоменклатурныеГруппы КАК Таблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	НоменклатурнаяГруппа";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПодразделенияИНоменклатурныеГруппы", ПодразделенияИНоменклатурныеГруппы);
	Запрос.Текст = ТекстЗапросаФильтр;
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачПериода", мНачГраница);
	Запрос.УстановитьПараметр("КонПериода", мКонГраница);
	Запрос.УстановитьПараметр("НачДата", мНачДата);
	Запрос.УстановитьПараметр("КонДата", мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НоменклатурныеГруппы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.УстановитьПараметр("Счет", СписокСчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Результат = РезультатЗапроса.Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Выборка Из Результат Цикл
		
		СтрокаНЗП = НЗП.НайтиСтроки(Новый Структура("Счет, Подразделение, НоменклатурнаяГруппа", 
			Выборка.Счет, Выборка.Подразделение, Выборка.НоменклатурнаяГруппа));
		
		Если СтрокаНЗП.Количество() = 0 Тогда
			СтрокиНЗП = НЗП.Добавить();
		Иначе
			СтрокиНЗП = СтрокаНЗП[0];
		КонецЕсли;
		
		Разницы = Выборка.Разницы;
		СуммаПР = Выборка.НЗППР;
		СуммаВР = Выборка.НЗПВР;
		
		СтрокиНЗП.Счет = Выборка.Счет;
		СтрокиНЗП.Подразделение = Выборка.Подразделение;
		СтрокиНЗП.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
		
		Если СуммаПр = 0 И НЕ СуммаВр = 0 Тогда
			СтрокиНЗП.СуммаПР = 0;
			СтрокиНЗП.СуммаВР = Разницы;
		ИначеЕсли Не СуммаПр = 0 И СуммаВр = 0 Тогда
			СтрокиНЗП.СуммаПР = Разницы;
			СтрокиНЗП.СуммаВР = 0;
		Иначе
			Если СуммаВР + СуммаПР <> 0 Тогда
				СтрокиНЗП.СуммаПР = Разницы * СуммаПР / (СуммаВР + СуммаПР);
				СтрокиНЗП.СуммаВР = Разницы * СуммаВР / (СуммаВР + СуммаПР);
			Иначе
				СтрокиНЗП.СуммаПР = 0;
				СтрокиНЗП.СуммаВР = Разницы;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДопПараметров.Вставить("НЗП", НЗП);
	
КонецПроцедуры


// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура РасчетДолейСписанияКосвенныхРасходов()
	
	СтруктураШапкиДокумента = Новый Структура("Дата", Дата);
	СписокОП = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	СписокОП.Добавить(Организация.Ссылка, Организация.Наименование);
	СтруктураШапкиДокумента.Вставить("Организация", Организация);
	СтруктураШапкиДокумента.Вставить("СписокОрганизаций", СписокОП);
	
	
	ЗаписьНормированияРасходов = Движения.РасчетНормированияРасходов.ВыгрузитьКолонки();
	ЗаписиДолей                = Движения.ДолиСписанияКосвенныхРасходов.ВыгрузитьКолонки();
	СтруктураШапкиДокумента.Вставить("ЗаписьНормированияРасходов", ЗаписьНормированияРасходов);
	СтруктураШапкиДокумента.Вставить("ЗаписиДолей", ЗаписиДолей);
	
	НалоговыйУчет.ПровестиРасчетСуммРасходовПоКоторымПредусмотреныОграничения(СтруктураШапкиДокумента);
	
	ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
	СтруктураШапкиДокумента.ЗаписьНормированияРасходов, 
	РегистрыСведений.РасчетНормированияРасходов,
	"Организация,ПериодРасчета,Активность,Регистратор,ВидОперации,ВидРегОперации,СуммаБазы",
	"РасходыМесяц,РазницыМесяц,ЗатратыГод,РасходыГод,РазницыГод");
	
	ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
	СтруктураШапкиДокумента.ЗаписиДолей, 
	РегистрыСведений.ДолиСписанияКосвенныхРасходов,
	"Организация,ПериодРасчета,Активность,Регистратор",
	"ДоляРасходовНаРекламу,ДоляРасходовНаДобровольноеСтрахованиеЖизни,ДоляРасходовНаДобровольноеМедицинскоеСтрахование,ДоляПредставительскихРасходов,ДоляЕНВД,ДоляТранспортныхРасходов,ДоляРасходовНаВозмещениеПроцентовРаботникам,ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев");
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ЗакрытиеСчетов20_23_25_26(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок)
	
	СпособРасчетаСебестоимостиПроизводства = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация).СпособРасчетаСебестоимостиПроизводства;
	Если СпособРасчетаСебестоимостиПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		СтруктураДопПараметров.Вставить("СпособРасчетаСебестоимостиПроизводства", "ПоПеределам");
	Иначе
		СтруктураДопПараметров.Вставить("СпособРасчетаСебестоимостиПроизводства", "ПоПодразделениям");
	КонецЕсли;
	
	Счет40 = (СтруктураШапкиДокумента.УчетнаяПолитика.СпособУчетаВыпускаГотовойПродукции = Перечисления.СпособыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40);
	СтруктураДопПараметров.Вставить("Счет40", Счет40);
	СтруктураДопПараметров.Вставить("НЗП", Неопределено);
	
	СтруктураДопПараметров.Вставить("РасчетПрямыхЗатратНомер", "");
	
	ЗаписьРасчетаСебестоимости = Движения.РасчетСебестоимостиПродукции.ВыгрузитьКолонки();
	ЗаписьРасчетаСебестоимости.Колонки.Добавить("ДокументВыпуска"); 
	СтруктураДопПараметров.Вставить("ЗаписьРасчетаСебестоимости", ЗаписьРасчетаСебестоимости);
	
	ЗаписьРасчетаРаспределенияКосвенныхРасходов = Движения.РасчетРаспределенияКосвенныхРасходов.ВыгрузитьКолонки();
	СтруктураДопПараметров.Вставить("ЗаписьРасчетаКосвенныхРасходов", ЗаписьРасчетаРаспределенияКосвенныхРасходов);
	ЗаписьСписанияКосвенныхРасходов = Движения.РасчетСписанияКосвенныхРасходов.ВыгрузитьКолонки();
	СтруктураДопПараметров.Вставить("ЗаписьСписанияКосвенныхРасходов", ЗаписьСписанияКосвенныхРасходов);
	СтруктураДопПараметров.Вставить("МенеджерВременныхТаблиц", НалоговыйУчет.СписокПрямыхРасходовНУ(Организация, Дата));
	СтруктураДопПараметров.Вставить("ЭтапСписанияКосвенныхРасходов", 1);
	
	РасчетПорядкаПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	
	РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров, СтруктураШапкиДокумента.УчетнаяПолитика.СпособОценкиМПЗ);
	
	Если НЕ СтруктураШапкиДокумента.Предприниматель Тогда
		СтруктураДопПараметров.ЗаписьРасчетаСебестоимости.Свернуть("Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,НоменклатурнаяГруппа,Продукция,ВидОперации,СуммаПлан,СуммаНЗП,СуммаНЗПНУ,СуммаНЗППР,СуммаНЗПВР,ДокументВыпуска",  
		"Сумма,СуммаНУ,СуммаПР,СуммаВР");
		ПодготовитьЗаписьРасчетаСебестоимости(СтруктураДопПараметров);
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента, 
		СтруктураДопПараметров.ЗаписьРасчетаСебестоимости,
		РегистрыСведений.РасчетСебестоимостиПродукции,
		"Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,НоменклатурнаяГруппа,Продукция,ВидОперации",
		"Сумма,СуммаНУ,СуммаПР,СуммаВР,СуммаНЗП,СуммаНЗПНУ,СуммаНЗППР,СуммаНЗПВР,СуммаПлан");
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
		СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов,
		РегистрыСведений.РасчетРаспределенияКосвенныхРасходов,
		"Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,СтатьяЗатрат,ПодразделениеРаспределения,НоменклатурнаяГруппаРаспределения,БазаРаспределения,СчетРаспределения,ВидОперации,ЕНВД",
		"Сумма,СуммаНУ,СуммаПР,СуммаВР,СуммаБазы,СуммаБазыНУ,СуммаБазыПР,СуммаБазыВР");
	КонецЕсли;
	
КонецПроцедуры

//ТОРГОВЛЯ

Процедура РасчетТорговойНаценкиПоПроданнымТоварам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ (СтруктураШапкиДокумента.УчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
		Возврат;
	КонецЕсли;
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	РазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	//НТТ
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если РазделятьПоСтавкамНДС Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
	КонецЕсли;
	
	Счет90 = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", 			мНачГраница);
	Запрос.УстановитьПараметр("ДатаКон", 			мКонГраница);
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СчетТН", 			ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
	Запрос.УстановитьПараметр("СчетПС", 			ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	Запрос.УстановитьПараметр("Счет90", 			Счет90);
	Запрос.УстановитьПараметр("ВидыСубконто", 	ВидыСубконто);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОстаткиТН.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	ХозрасчетныйОстаткиТН.Субконто1 КАК Склады,"+?(РазделятьПоСтавкамНДС,"
	|	ХозрасчетныйОстаткиТН.Субконто2 КАК СтавкиНДС,","")+"
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстаток,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаНУОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаНУОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстатокНУ,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаПРОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаПРОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстатокПР,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаВРОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаВРОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстатокВР,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиПС.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиПС.СуммаОстатокДт КОНЕЦ) КАК ПродажнаяСтоимостьОстаток,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОборотыДтКт.СуммаОборот ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот КОНЕЦ) КАК ПродажнаяСтоимостьРеализация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетТН, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиТН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиПС
	|		ПО ЕСТЬNULL(ХозрасчетныйОстаткиТН.Подразделение, Неопределено) = ЕСТЬNULL(ХозрасчетныйОстаткиПС.Подразделение, Неопределено)
	|			И ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОстаткиПС.Субконто1"+?(РазделятьПоСтавкамНДС,"
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОстаткиПС.Субконто2","")+"
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, , СчетДт В ИЕРАРХИИ (&Счет90), , СчетКт = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|		ПО ЕСТЬNULL(ХозрасчетныйОстаткиТН.Подразделение, Неопределено) = ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеКт, Неопределено)
	|			И ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОборотыДтКт.СубконтоКт1"+?(РазделятьПоСтавкамНДС,"
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОборотыДтКт.СубконтоКт2","")+"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ХозрасчетныйОстаткиТН.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
	|	ХозрасчетныйОстаткиТН.Субконто1"+?(РазделятьПоСтавкамНДС,",
	|	ХозрасчетныйОстаткиТН.Субконто2","")+"
	|
	|ИТОГИ ПО
	|	Склады,
	|	Подразделение"+?(РазделятьПоСтавкамНДС,",
	|	СтавкиНДС","");
	
	
	ВыборкаПоСкладам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склады");
	
	Пока ВыборкаПоСкладам.Следующий() Цикл
		
		СчетаУчетаВНТТ = БухгалтерскийУчет.ПолучитьСчетаУчетаВНТТ(СтруктураШапкиДокумента.Организация, ВыборкаПоСкладам.Склады, СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.УчетнаяПолитика);
		
		НоменклатурнаяГруппаВыручки = ВыборкаПоСкладам.Склады.НоменклатурнаяГруппа;
		СчетВыручки					= СчетаУчетаВНТТ.СчетДоходовОтРеализации;
		СчетСебестоимости 			= СчетаУчетаВНТТ.СчетРасходовОтРеализации;
		
		ВыборкаПоПодразделениям = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Подразделение");
		
		Пока ВыборкаПоПодразделениям.Следующий() Цикл
			
			Если РазделятьПоСтавкамНДС Тогда
				ВыборкаПоСтавкамНДС = ВыборкаПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтавкиНДС");
				Пока ВыборкаПоСтавкамНДС.Следующий() Цикл
					
					//Расчет торговой наценки
					ТН 		= ВыборкаПоСтавкамНДС.ТорговаяНаценкаОстаток;
					ТН_НУ 	= ВыборкаПоСтавкамНДС.ТорговаяНаценкаОстатокНУ;
					ТН_ПР 	= ВыборкаПоСтавкамНДС.ТорговаяНаценкаОстатокПР;
					ТН_ВР 	= ВыборкаПоСтавкамНДС.ТорговаяНаценкаОстатокВР;
					ПС 		= ВыборкаПоСтавкамНДС.ПродажнаяСтоимостьОстаток;
					ОБ 		= ВыборкаПоСтавкамНДС.ПродажнаяСтоимостьРеализация;
					
					Если ПС + ОБ = 0 Тогда
						Продолжить;
					Иначе
						СуммаНаценки 	= ТН * ОБ / (ПС + ОБ);
						СуммаНаценкиНУ 	= ТН_НУ * ОБ / (ПС + ОБ);
						СуммаНаценкиПР 	= ТН_ПР * ОБ / (ПС + ОБ);
						СуммаНаценкиВР 	= ТН_ВР * ОБ / (ПС + ОБ);
					КонецЕсли;
					
					Если (СуммаНаценки <> 0) ИЛИ (СуммаНаценкиНУ <> 0) ИЛИ (СуммаНаценкиПР <> 0) ИЛИ (СуммаНаценкиВР <> 0) Тогда
						
						//Формируем проводку по списанию торговой наценки
						Проводка = мПроводки.Добавить();
						Проводка.Период                    = Дата;
						Проводка.Организация               = СтруктураШапкиДокумента.Организация;
						Проводка.СчетДт                    = СчетСебестоимости;
						Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  ВыборкаПоСтавкамНДС.СтавкиНДС);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы",  НоменклатурнаяГруппаВыручки);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  ВыборкаПоСтавкамНДС.СтавкиНДС);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  ВыборкаПоСтавкамНДС.Склады);
						Проводка.Сумма                     = - СуммаНаценки;
						
						БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, ВыборкаПоСтавкамНДС.Подразделение, ВыборкаПоСтавкамНДС.Подразделение);
						
						НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-СуммаНаценкиНУ,-СуммаНаценкиНУ,-СуммаНаценкиПР,-СуммаНаценкиПР,-СуммаНаценкиВР,-СуммаНаценкиВР,Проводка);
						
						Проводка.Содержание                = "Торговая наценка";
						
					КонецЕсли;
				КонецЦикла;
			Иначе
				//Расчет торговой наценки
				ТН 		= ВыборкаПоПодразделениям.ТорговаяНаценкаОстаток;
				ТН_НУ 	= ВыборкаПоПодразделениям.ТорговаяНаценкаОстатокНУ;
				ТН_ПР 	= ВыборкаПоПодразделениям.ТорговаяНаценкаОстатокПР;
				ТН_ВР 	= ВыборкаПоПодразделениям.ТорговаяНаценкаОстатокВР;
				ПС 		= ВыборкаПоПодразделениям.ПродажнаяСтоимостьОстаток;
				ОБ 		= ВыборкаПоПодразделениям.ПродажнаяСтоимостьРеализация;
				
				Если ПС + ОБ = 0 Тогда
					Продолжить;
				Иначе
					СуммаНаценки 	= ТН * ОБ / (ПС + ОБ);
					СуммаНаценкиНУ 	= ТН_НУ * ОБ / (ПС + ОБ);
					СуммаНаценкиПР 	= ТН_ПР * ОБ / (ПС + ОБ);
					СуммаНаценкиВР 	= ТН_ВР * ОБ / (ПС + ОБ);
				КонецЕсли;
				
				Если (СуммаНаценки <> 0) ИЛИ (СуммаНаценкиНУ <> 0) ИЛИ (СуммаНаценкиПР <> 0) ИЛИ (СуммаНаценкиВР <> 0) Тогда
					
					//Формируем проводку по списанию торговой наценки
					Проводка = мПроводки.Добавить();
					Проводка.Период                    = Дата;
					Проводка.Организация               = СтруктураШапкиДокумента.Организация;
					Проводка.СчетДт                    = СчетСебестоимости;
					Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы",  НоменклатурнаяГруппаВыручки);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  ВыборкаПоПодразделениям.Склады);
					Проводка.Сумма                     = - СуммаНаценки;
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, ВыборкаПоПодразделениям.Подразделение, ВыборкаПоПодразделениям.Подразделение);
					
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-СуммаНаценкиНУ,-СуммаНаценкиНУ,-СуммаНаценкиПР,-СуммаНаценкиПР,-СуммаНаценкиВР,-СуммаНаценкиВР,Проводка);
					
					Проводка.Содержание                = "Торговая наценка";
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//АТТ
	РазделятьПоПартиям = УправлениеЗапасамиПартионныйУчет.НаСчетеВедетсяПартионныйУчет(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если РазделятьПоПартиям Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	КонецЕсли;
	
	Счет90_02 = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", 			мНачГраница);
	Запрос.УстановитьПараметр("ДатаКон", 			мКонГраница);
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СчетТН", 			ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ);
	Запрос.УстановитьПараметр("СчетПС", 			ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	Запрос.УстановитьПараметр("Счет90_02", 			Счет90_02);
	Запрос.УстановитьПараметр("ВидыСубконто", 		ВидыСубконто);
	Запрос.УстановитьПараметр("ПустаяПартия",    	Документы.Партия.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидСубконтоНГ",    	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиТН.Субконто1 КАК Номенклатура,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиТН.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	ХозрасчетныйОстаткиТН.Субконто2 КАК Склады,"+?(РазделятьПоПартиям, "
	|	ХозрасчетныйОстаткиТН.Субконто3 КАК Партия,", "
	|	&ПустаяПартия КАК Партия,")+"
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СубСчет90_02,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК НоменклатурнаяГруппа,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстаток,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаНУОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаНУОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстатокНУ,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаПРОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаПРОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстатокПР,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаВРОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаВРОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстатокВР,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиПС.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиПС.СуммаОстатокДт КОНЕЦ) КАК ПродажнаяСтоимостьОстаток,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОборотыДтКт.СуммаОборот ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот КОНЕЦ) КАК ПродажнаяСтоимостьРеализация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетТН, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиТН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиПС
	|		ПО ЕСТЬNULL(ХозрасчетныйОстаткиТН.Подразделение, Неопределено) = ЕСТЬNULL(ХозрасчетныйОстаткиПС.Подразделение, Неопределено)
	|			И ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОстаткиПС.Субконто1
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОстаткиПС.Субконто2"+?(РазделятьПоПартиям, " И	ХозрасчетныйОстаткиТН.Субконто3 = ХозрасчетныйОстаткиПС.Субконто3", "")+"
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, , СчетДт В ИЕРАРХИИ (&Счет90_02), &ВидСубконтоНГ, СчетКт = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|		ПО ЕСТЬNULL(ХозрасчетныйОстаткиТН.Подразделение, Неопределено) = ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеКт, Неопределено)
	|			И ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОборотыДтКт.СубконтоКт1
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОборотыДтКт.СубконтоКт2"+?(РазделятьПоПартиям, " И	ХозрасчетныйОстаткиТН.Субконто3 = ХозрасчетныйОборотыДтКт.СубконтоКт3", "")+"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ХозрасчетныйОстаткиТН.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
	|	ХозрасчетныйОстаткиТН.Субконто1,
	|	ХозрасчетныйОстаткиТН.Субконто2"+?(РазделятьПоПартиям, ",
	|	ХозрасчетныйОстаткиТН.Субконто3", "")+",
	|	ХозрасчетныйОборотыДтКт.СчетДт,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1
	|
	|ИТОГИ ПО
	|	Подразделение,
	|	Номенклатура,
	|	Склады,
	|	Партия,
	|	СубСчет90_02,
	|	НоменклатурнаяГруппа";
	
	ВыборкаПоПодразделениям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Подразделение");
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		ВыборкаПоНоменклатуре = ВыборкаПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
			ВыборкаПоСкладам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склады");
			Пока ВыборкаПоСкладам.Следующий() Цикл
				ВыборкаПоПартиям = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Партия");
				Пока ВыборкаПоПартиям.Следующий() Цикл
					
					ТН 			= ВыборкаПоПартиям.ТорговаяНаценкаОстаток;
					ТН_НУ 		= ВыборкаПоПартиям.ТорговаяНаценкаОстатокНУ;
					ТН_ПР 		= ВыборкаПоПартиям.ТорговаяНаценкаОстатокПР;
					ТН_ВР 		= ВыборкаПоПартиям.ТорговаяНаценкаОстатокВР;
					ПС 			= ВыборкаПоПартиям.ПродажнаяСтоимостьОстаток;
					ОБ_Всего 	= ВыборкаПоПартиям.ПродажнаяСтоимостьРеализация;
					
					ВыборкаПоСчетам = ВыборкаПоПартиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СубСчет90_02");
					Пока ВыборкаПоСчетам.Следующий() Цикл
						ВыборкаПоНГ = ВыборкаПоСчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НоменклатурнаяГруппа");
						Пока ВыборкаПоНГ.Следующий() Цикл
							//Расчет торговой наценки
							
							ОБ = ВыборкаПоНГ.ПродажнаяСтоимостьРеализация;
							
							Если ПС + ОБ_Всего = 0 Тогда
								Продолжить;
							Иначе
								СуммаНаценки 	= ТН * ОБ / (ПС + ОБ_Всего);
								СуммаНаценкиНУ 	= ТН_НУ * ОБ / (ПС + ОБ_Всего);
								СуммаНаценкиПР 	= ТН_ПР * ОБ / (ПС + ОБ_Всего);
								СуммаНаценкиВР 	= ТН_ВР * ОБ / (ПС + ОБ_Всего);
							КонецЕсли;
							
							Если (СуммаНаценки <> 0) ИЛИ (СуммаНаценкиНУ <> 0) ИЛИ (СуммаНаценкиПР <> 0) ИЛИ (СуммаНаценкиВР <> 0) Тогда
								
								//Формируем проводку по списанию торговой наценки
								Проводка = мПроводки.Добавить();
								Проводка.Период                    = Дата;
								Проводка.Организация               = СтруктураШапкиДокумента.Организация;
								Проводка.СчетДт                    = ВыборкаПоНГ.СубСчет90_02;
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы",  ВыборкаПоНГ.НоменклатурнаяГруппа);
								Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  ВыборкаПоПартиям.Номенклатура);
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  ВыборкаПоПартиям.Склады);
								Если РазделятьПоПартиям Тогда
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  ВыборкаПоПартиям.Партия);
								КонецЕсли;
								Проводка.Сумма                     = - СуммаНаценки;
								
								БухгалтерскийУчет.УстановитьПодразделенияПроводки(
								Проводка, ВыборкаПоПартиям.Подразделение, ВыборкаПоПартиям.Подразделение);
								
								НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-СуммаНаценкиНУ,-СуммаНаценкиНУ,-СуммаНаценкиПР,-СуммаНаценкиПР,-СуммаНаценкиВР,-СуммаНаценкиВР,Проводка);
								
								Проводка.Содержание                = "Торговая наценка";
								
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ЗАКРЫТИЮ СЧЕТОВ БУ

Процедура ЗакрытиеСчета44(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок, ТранспортныеРасходы)
	
	ЗаписьСписанияКосвенныхРасходов = Движения.РасчетСписанияКосвенныхРасходов.ВыгрузитьКолонки();
	СтруктураДопПараметров.Вставить("ЗаписьСписанияКосвенныхРасходов", ЗаписьСписанияКосвенныхРасходов);
	СтруктураДопПараметров.Вставить("ЭтапСписанияКосвенныхРасходов", 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК СтатьяЗатрат,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаБУ,
	|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстаток КАК СуммаПР,
	|	ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонГраница,
	|			Счет В ИЕРАРХИИ (&СчетЗатрат),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1.ВидРасходовНУ = &ТранспортныеРасходы) КАК ХозрасчетныйОстатки
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки";
	
	Запрос.УстановитьПараметр("КонГраница",  мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетЗатрат",  ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	Запрос.УстановитьПараметр("ВидыСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ТранспортныеРасходы",  Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	Если НЕ ТранспортныеРасходы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Субконто1.ВидРасходовНУ","НЕ Субконто1.ВидРасходовНУ");
		
	КонецЕсли;
	
	ВсегоРасходов = 0;
	СтруктураДопПараметров.ЭтапСписанияКосвенныхРасходов = 1;
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Выборка Из РезультатЗапроса Цикл
		Сумма = Новый Структура("СуммаБУ,СуммаНУ,СуммаПР,СуммаВР",Выборка.СуммаБУ,Выборка.СуммаНУ, Выборка.СуммаПР, Выборка.СуммаВР);
		СписатьКосвенныеРасходы(мПроводки, Выборка, Сумма, СтруктураШапкиДокумента, СтруктураДопПараметров,,Истина)
		
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

Процедура ЗакрытиеСчета90(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     мНачДата);
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.СписокОП);
	Запрос.УстановитьПараметр("Счет90",      ПланыСчетов.Хозрасчетный.Продажи);
	Запрос.УстановитьПараметр("Счет909",     ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж);
	Запрос.УстановитьПараметр("СчетаЕНВД",   НалоговыйУчет.ПолучитьМассивСчетовЕНВД());
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0) КАК Прибыль,
	|	ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0) КАК ПрибыльПР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0) КАК ПРибыльВР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0) КАК ПрибыльНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет90)
	|				И Счет <> &Счет909
	|				И (НЕ Счет В ИЕРАРХИИ (&СчетаЕНВД)),
	|			,
	|			Организация В ИЕРАРХИИ (&Организация),
	|			КорСчет <> &Счет909,
	|			) КАК Хозрасчетный";
	
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.Прибыль = 0 Или Не Выборка.ПрибыльНУ = 0 Или Не Выборка.ПрибыльПР = 0 Или Не Выборка.ПрибыльВР = 0 Тогда
			
			Проводка = мПроводки.Добавить();
			
			Если Выборка.Прибыль >= 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
				Проводка.СубконтоКт.ПрибылиИУбытки  = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				Проводка.Сумма = Выборка.Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Выборка.ПрибыльНУ,Выборка.ПрибыльНУ,Выборка.ПрибыльПР,Выборка.ПрибыльПР,Выборка.ПрибыльВР,Выборка.ПрибыльВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				
			КонецЕсли;
			
			Если Выборка.Прибыль < 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
				Проводка.СубконтоДт.ПрибылиИУбытки  = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				Проводка.Сумма = - Выборка.Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-Выборка.ПрибыльНУ,-Выборка.ПрибыльНУ,-Выборка.ПрибыльПР,-Выборка.ПрибыльПР,-Выборка.ПрибыльВР,-Выборка.ПрибыльВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0) КАК Прибыль,
	|	ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0) КАК ПрибыльПР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0) КАК ПРибыльВР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0) КАК ПрибыльНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет90)
	|				И Счет <> &Счет909
	|				И Счет В ИЕРАРХИИ (&СчетаЕНВД),
	|			,
	|			Организация В ИЕРАРХИИ (&Организация),
	|			КорСчет <> &Счет909,
	|			) КАК Хозрасчетный";
	
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.Прибыль = 0 Или Не Выборка.ПрибыльНУ = 0 Или Не Выборка.ПрибыльПР = 0 Или Не Выборка.ПрибыльВР = 0 Тогда
			
			Проводка = мПроводки.Добавить();
			
			Если Выборка.Прибыль >= 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
				Проводка.СубконтоКт.ПрибылиИУбытки  = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				Проводка.Сумма = Выборка.Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Выборка.ПрибыльНУ,Выборка.ПрибыльНУ,Выборка.ПрибыльПР,Выборка.ПрибыльПР,Выборка.ПрибыльВР,Выборка.ПрибыльВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				
			КонецЕсли;
			
			Если Выборка.Прибыль < 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
				Проводка.СубконтоДт.ПрибылиИУбытки  = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				Проводка.Сумма = - Выборка.Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-Выборка.ПрибыльНУ,-Выборка.ПрибыльНУ,-Выборка.ПрибыльПР,-Выборка.ПрибыльПР,-Выборка.ПрибыльВР,-Выборка.ПрибыльВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

Процедура ЗакрытиеСчета91(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Сч_91_09 = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
	КоэффициентЕНВД = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, мКонДата, мНачДата, "БУ", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     мНачДата);
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.СписокОП);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Хозрасчетный.Субконто1 = ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА Хозрасчетный.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫРАЗИТЬ(Хозрасчетный.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|	КОНЕЦ КАК ВидДеятельности,
	|	СУММА(Хозрасчетный.СуммаОборотКт) КАК СуммаОборотКт,
	|	СУММА(Хозрасчетный.СуммаПРОборотКт) КАК СуммаПРОборотКт,
	|	СУММА(Хозрасчетный.СуммаВРОборотКт) КАК СуммаВРОборотКт,
	|	СУММА(Хозрасчетный.СуммаНУОборотКт) КАК СуммаНУОборотКт,
	|	СУММА(Хозрасчетный.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(Хозрасчетный.СуммаПРОборотДт) КАК СуммаПРОборотДт,
	|	СУММА(Хозрасчетный.СуммаВРОборотДт) КАК СуммаВРОборотДт,
	|	СУММА(Хозрасчетный.СуммаНУОборотДт) КАК СуммаНУОборотДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходыИРасходы)), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы), Организация В ИЕРАРХИИ (&Организация), , ) КАК Хозрасчетный
	|ГДЕ
	|	(Хозрасчетный.Субконто1 <> ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)
	|			ИЛИ Хозрасчетный.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов)
	|				И (НЕ Хозрасчетный.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходыИРасходы))))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Хозрасчетный.Субконто1 = ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА Хозрасчетный.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫРАЗИТЬ(Хозрасчетный.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|	КОНЕЦ";
	ТаблицаОборотов = Запрос.Выполнить().Выгрузить();
	
	ПараметрыНеЕНВД = Новый Структура;
	ПараметрыНеЕНВД.Вставить("ВидДеятельности", 
		Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);
	ПараметрыНеЕНВД.Вставить("СчетПрибылейИУбытков", ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД);
	ПараметрыНеЕНВД.Вставить("Коэффициент", 1 - КоэффициентЕНВД);
	
	ПараметрыЕНВД = Новый Структура;
	ПараметрыЕНВД.Вставить("ВидДеятельности", 
		Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	ПараметрыЕНВД.Вставить("СчетПрибылейИУбытков", ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД);
	ПараметрыЕНВД.Вставить("Коэффициент", КоэффициентЕНВД);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрыНеЕНВД);
	МассивПараметров.Добавить(ПараметрыЕНВД);
	
	Для каждого Параметры Из МассивПараметров Цикл
		
		Прибыль = 0;
		ПрибыльНУ = 0;
		ПрибыльПР = 0;
		ПрибыльВР = 0;
		
		ОсновныеОбороты = ТаблицаОборотов.Найти(Параметры.ВидДеятельности, "ВидДеятельности");
		Если ОсновныеОбороты <> Неопределено Тогда
			Прибыль = ОсновныеОбороты.СуммаОборотКт - ОсновныеОбороты.СуммаОборотДт;
			ПрибыльНУ = ОсновныеОбороты.СуммаНУОборотКт - ОсновныеОбороты.СуммаНУОборотДт;
			ПрибыльПР = ОсновныеОбороты.СуммаПРОборотКт - ОсновныеОбороты.СуммаПРОборотДт;
			ПрибыльВР = ОсновныеОбороты.СуммаВРОборотКт - ОсновныеОбороты.СуммаВРОборотДт;
		КонецЕсли;
		
		РаспределяемыеОбороты = ТаблицаОборотов.Найти(
			Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам, "ВидДеятельности");
		Если РаспределяемыеОбороты <> Неопределено Тогда
			Прибыль = Прибыль
				+ (РаспределяемыеОбороты.СуммаОборотКт - РаспределяемыеОбороты.СуммаОборотДт) * Параметры.Коэффициент;;
			ПрибыльНУ = ПрибыльНУ 
				+ (РаспределяемыеОбороты.СуммаНУОборотКт - РаспределяемыеОбороты.СуммаНУОборотДт) * Параметры.Коэффициент;
			ПрибыльПР = ПрибыльПР 
				+ (РаспределяемыеОбороты.СуммаПРОборотКт - РаспределяемыеОбороты.СуммаПРОборотДт) * Параметры.Коэффициент;
			ПрибыльВР = ПрибыльВР 
				+ (РаспределяемыеОбороты.СуммаВРОборотКт - РаспределяемыеОбороты.СуммаВРОборотДт) * Параметры.Коэффициент;
		КонецЕсли;
		
		Если Прибыль <> 0 ИЛИ ПрибыльНУ <> 0 ИЛИ ПрибыльПР <> 0 ИЛИ ПрибыльВР <> 0 Тогда
			
			Проводка = мПроводки.Добавить();
			
			Если Прибыль >= 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = Сч_91_09;
				Проводка.СчетКт                    = Параметры.СчетПрибылейИУбытков;
				Проводка.СубконтоКт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
				Проводка.Сумма = Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(ПрибыльНУ, ПрибыльНУ, ПрибыльПР, ПрибыльПР, ПрибыльВР, ПрибыльВР,
					Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				
			КонецЕсли;
			
			Если Прибыль < 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетКт                    = Сч_91_09;
				Проводка.СчетДт                    = Параметры.СчетПрибылейИУбытков;
				Проводка.СубконтоДт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
				Проводка.Сумма = - Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-ПрибыльНУ, -ПрибыльНУ, -ПрибыльПР, -ПрибыльПР, -ПрибыльВР, -ПрибыльВР,
					Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

Процедура СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     НачалоГода(мКонДата));
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет99",      ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД);
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) - СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт) КАК ПрибыльНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет99),
	|			,
	|			Организация = &Организация,
	|			) КАК ХозрасчетныйОбороты
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	ПрибыльНУ = Результат.Итог("ПрибыльНУ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     НачалоГода(мКонДата));
	Запрос.УстановитьПараметр("ДатаКон",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет97",      ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ВидРБП",      Перечисления.ВидыРБП.УбыткиПрошлыхЛет);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1.ДатаНачалаСписания КАК ГОД,
	|	ХозрасчетныйОбороты.Счет,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК СуммаНУ,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.СуммаНУКонечныйОстаток КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет97),
	|			&ВидСубконто,
	|			Организация = &Организация
	|				И Субконто1.ВидРБП = &ВидРБП) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1.ДатаНачалаСписания <= &ДатаНач
	|	И ХозрасчетныйОбороты.Субконто1.ДатаОкончанияСписания >= &ДатаКон
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.СуммаНУКонечныйОстаток,
	|	ХозрасчетныйОбороты.Субконто1.ДатаНачалаСписания,
	|	ХозрасчетныйОбороты.Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГОД";
	
	
	ТаблицаУбытков      = Запрос.Выполнить().Выгрузить();
	ВсегоУбытковСписано = ТаблицаУбытков.Итог("СуммаНУ");
	ВсегоУбытков        = ТаблицаУбытков.Итог("Остаток");
	
	Если ПрибыльНУ <= 0 И ВсегоУбытковСписано = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПрибыльНУ <= 0  Тогда
		СуммаСписания =  ?(ПрибыльНУ > - ВсегоУбытковСписано, ПрибыльНУ, - ВсегоУбытковСписано);
	Иначе
		СуммаСписания = ?(ПрибыльНУ > ВсегоУбытков + ВсегоУбытковСписано, ВсегоУбытков ,ПрибыльНУ);
	КонецЕсли;	
	
	Если СуммаСписания < 0 Тогда
		ТаблицаУбытков.Сортировать("Год Убыв");
	КонецЕсли;
	
	Для Каждого УбытокПрошлогоПериода Из ТаблицаУбытков Цикл
		
		Если СуммаСписания = 0 Тогда
			Прервать;
		КонецЕсли;
		
		СуммаУбыткаВсего          = УбытокПрошлогоПериода.Субконто1.Сумма;
		
		Если СуммаСписания > 0 Тогда 
			СуммаУбыткаМожноСписать = ?(СуммаСписания < УбытокПрошлогоПериода.Остаток, СуммаСписания, УбытокПрошлогоПериода.Остаток);
		Иначе
			СуммаУбыткаМожноСписать = ?( -СуммаСписания < УбытокПрошлогоПериода.СуммаНУ, СуммаСписания, -УбытокПрошлогоПериода.СуммаНУ);
		КонецЕсли;
		
		
		Если СуммаСписания <> 0 Тогда 
			СуммаСписания  = СуммаСписания - СуммаУбыткаМожноСписать;
			
			Если СуммаУбыткаМожноСписать <> 0 Тогда
				Проводка = мПроводки.Добавить();
				Проводка.Период                            = Дата;
				Проводка.Организация                       = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                            = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
				Проводка.СубконтоДт.ПрибылиИУбытки         = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				Проводка.СчетКт                            = УбытокПрошлогоПериода.Счет;
				Проводка.СубконтоКт.РасходыБудущихПериодов = УбытокПрошлогоПериода.Субконто1;
				Проводка.Содержание                        = "Убытки прошлых лет";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаУбыткаМожноСписать,СуммаУбыткаМожноСписать,0,0,-СуммаУбыткаМожноСписать,-СуммаУбыткаМожноСписать,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

// РЕГЛАМЕНТНЫЕ ОПЕРАЦИИ ПО УСН

Процедура УчестьОстаткиНЗПприУСН(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НачПрошлогоПериода", ДобавитьМесяц(мНачДата,-1));
	Запрос.УстановитьПараметр("КонПрошлогоПериода", ДобавитьМесяц(мКонДата,-1));
	Запрос.УстановитьПараметр("НачТекПериода", мНачДата);
	Запрос.УстановитьПараметр("КонТекПериода", мКонДата);
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	СУММА(ВложенныйЗапрос.СуммаНУ) КАК СуммаНУ,
	|	ВложенныйЗапрос.ОтражениеВУСН
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|		СУММА(ВЫБОР
	|				КОГДА ИнвентаризацияНЗПСостав.Ссылка.Дата МЕЖДУ &НачТекПериода И &КонТекПериода
	|					ТОГДА -ИнвентаризацияНЗПСостав.СуммаНУ
	|				ИНАЧЕ ИнвентаризацияНЗПСостав.СуммаНУ
	|			КОНЕЦ) КАК СуммаНУ,
	|		ИнвентаризацияНЗПСостав.ОтражениеВУСН КАК ОтражениеВУСН
	|	ИЗ
	|		Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	|	ГДЕ
	|		ИнвентаризацияНЗПСостав.Ссылка.Дата МЕЖДУ &НачПрошлогоПериода И &КонТекПериода
	|		И ИнвентаризацияНЗПСостав.Ссылка.Организация = &Организация
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
	|		ИнвентаризацияНЗПСостав.ОтражениеВУСН
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВводНачальныхОстатковБухСправка.Субконто2,
	|		СУММА(ВЫБОР
	|				КОГДА ВводНачальныхОстатковБухСправка.Ссылка.Дата МЕЖДУ &НачТекПериода И &КонТекПериода
	|					ТОГДА -ВводНачальныхОстатковБухСправка.Сумма
	|				ИНАЧЕ ВводНачальныхОстатковБухСправка.Сумма
	|			КОНЕЦ),
	|		ВводНачальныхОстатковБухСправка.ОтражениеВУСН
	|	ИЗ
	|		Документ.ВводНачальныхОстатков.БухСправка КАК ВводНачальныхОстатковБухСправка
	|	ГДЕ
	|		ВводНачальныхОстатковБухСправка.Ссылка.Дата МЕЖДУ &НачПрошлогоПериода И &КонТекПериода
	|		И ВводНачальныхОстатковБухСправка.Ссылка.Организация = &Организация
	|		И ВводНачальныхОстатковБухСправка.Ссылка.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВводНачальныхОстатковБухСправка.Субконто2,
	|		ВводНачальныхОстатковБухСправка.ОтражениеВУСН) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.ОтражениеВУСН";
	
	ТаблицаНЗП = Запрос.Выполнить().Выгрузить();
	Для Каждого НЗП Из ТаблицаНЗП Цикл
		
		Если НЗП.СуммаНУ = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЗП.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
			
			Если НЗП.СуммаНУ > 0 Тогда
				Содержание = "Признаны материальные расходы, ранее отраженные в составе незавершенного производства по номенклатурной группе """
				+НЗП.НоменклатурнаяГруппа+""".";
			Иначе
				Содержание = "Сумма материальных расходов уменьшена на остаток незавершенного производства по номенклатурной группе """
				+НЗП.НоменклатурнаяГруппа+""".";
			КонецЕсли;
			СтрокаКниги  				= мКУДиР.Добавить();
			СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаКниги.СтрокаДокумента = 0;
			СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
			СтрокаКниги.ТабличнаяЧасть  = "";
			СтрокаКниги.Содержание      = Содержание;
			СтрокаКниги.Графа7          = НЗП.СуммаНУ;
			СтрокаКниги.НДС             = 0;
			СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
			
		ИначеЕсли НЗП.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются Тогда
			
			Если НЗП.СуммаНУ > 0 Тогда
				Содержание = "Списаны остатки НЗП";
			Иначе
				Содержание = "Расходы отражены как НЗП";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	мКУДиР.Записать(Ложь);
	
КонецПроцедуры

Процедура ВключитьВРасходыОС(СтруктураШапкиДокумента, ОС, Строка, СуммаОплаты, ДатаВводаВэксплуатацию, Параметры = Неопределено)
	
	ОбщПервоначальнаяСтоимостьУСН = Строка.ПервоначальнаяСтоимостьУСН;
	ОбщСуммаНачисленнойАмортизации = Строка.СуммаНачисленнойАмортизации;
	
	ПервоначальнаяСтоимостьУСН = Строка.СуммаОплатыОборот;
	СуммаНачисленнойАмортизации = ?(НЕ ОбщПервоначальнаяСтоимостьУСН = 0, ОбщСуммаНачисленнойАмортизации * ПервоначальнаяСтоимостьУСН / ОбщПервоначальнаяСтоимостьУСН, 0);
	ОстаточнаяСтоимость = Макс(0, ПервоначальнаяСтоимостьУСН - СуммаНачисленнойАмортизации);
	
	СтрокаКниги = мКУДиР_ОС.Добавить();
	СтрокаКниги.ОсновноеСредство = ОС;
	СтрокаКниги.Период = мКонДата;
	СтрокаКниги.Организация = СтруктураШапкиДокумента.Организация;
	СтрокаКниги.ДатаОплаты = Строка.ДатаОплаты;
	СтрокаКниги.Графа3_ДатаВводаВЭксплуатацию = ДатаВводаВэксплуатацию;
	СтрокаКниги.Графа5_ПервоначальнаяСтоимость = Строка.СуммаОплатыОборот;
	
	ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
	Если ОстатокРасходов < 0.01 Тогда
		СуммаОплаты = СуммаОплаты + ОстатокРасходов;
		ОстатокРасходов = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.ДокументМодернизации) Тогда
		СтрокаКниги.ДокументМодернизации = Строка.ДокументМодернизации
	КонецЕсли;
	
	Если НЕ (Параметры = Неопределено) Тогда
		
		Если Параметры.ПереходныйПериод Тогда
			СтрокаКниги.Графа6_ОстаточнаяСтоимость = ОстаточнаяСтоимость;
			СтрокаКниги.Графа7_СрокПолезногоИспользования = Цел(Строка.СрокПолезногоИспользования/12) + ?(Строка.СрокПолезногоИспользования%12 <> 0, 1, 0);
			СтрокаКниги.Графа8_КолКварталовВОтчетномПериоде = Параметры.КоличествоКварталовВОтчетномПериоде;
			СтрокаКниги.Графа14_РасходыПрошлыхПериодов = Строка.СуммаРасходовВсего - (Строка.СуммаРасходовЗаГод);
			СтрокаКниги.Графа15_ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
		КонецЕсли;
		
		СтрокаКниги.Графа9_КолКварталовВНалПериоде  = Параметры.КоличествоКварталовВНалоговомПериоде;
		СтрокаКниги.Графа10_ДоляРасходовЗаНалПериод  = Параметры.ПроцентПринятияРасходов;
		СтрокаКниги.Графа11_ДоляРасходовЗаКвартал   = Параметры.ПроцентПринятияРасходовОтч;
	Иначе
		СтрокаКниги.Графа7_СрокПолезногоИспользования = Цел(Строка.СрокПолезногоИспользования/12) + ?(Строка.СрокПолезногоИспользования%12 <> 0, 1, 0);
		СтрокаКниги.Графа14_РасходыПрошлыхПериодов = Строка.СуммаРасходовВсего - (Строка.СуммаРасходовЗаГод + СуммаОплаты);
		
	КонецЕсли;
	
	СтрокаКниги.Графа12_СуммаРасходовЗаОтчетнПериод = Строка.СуммаРасходовЗаГод + СуммаОплаты;
	СтрокаКниги.Графа13_СуммаРасходовЗаКвартал = Строка.СуммаРасходовЗаКвартал + СуммаОплаты;
	СтрокаКниги.Графа15_ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
	
	Если СуммаОплаты > 0 Тогда
		
		СтрокаКниги  = мКУДиР.Добавить();
		Если ЗначениеЗаполнено(Строка.ДокументМодернизации) Тогда
			СтрокаСодержания = "Признание расходов: основное средство """+Строка(ОС)+""", " + Строка.ДокументМодернизации.СобытиеОС + " от " + Формат(Строка.ДокументМодернизации.Дата,"ДФ=дд.ММ.гггг") + " (дата оплаты: "+Формат(Строка.ДатаОплаты, "ДФ=дд.ММ.гггг")+").";
		Иначе
			СтрокаСодержания = "Признание расходов на приобретение основного средства """+Строка(ОС)+""" (дата оплаты: "+Формат(Строка.ДатаОплаты, "ДФ=дд.ММ.гггг")+").";
		КонецЕсли;
		
		СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.Период          = мКонДата;
		СтрокаКниги.Содержание      = СтрокаСодержания;
		СтрокаКниги.Графа7          = СуммаОплаты;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьВРасходыНМА(СтруктураШапкиДокумента, НМА, Строка, СуммаОплаты, ДатаПринятияКУчету, Параметры = Неопределено)
	
	ОбщПервоначальнаяСтоимостьУСН = Строка.ПервоначальнаяСтоимостьУСН;
	ОбщСуммаНачисленнойАмортизации = Строка.СуммаНачисленнойАмортизации;
	
	ПервоначальнаяСтоимостьУСН = Строка.СуммаОплатыОборот;
	СуммаНачисленнойАмортизации = ?(НЕ ОбщПервоначальнаяСтоимостьУСН = 0, ОбщСуммаНачисленнойАмортизации * ПервоначальнаяСтоимостьУСН / ОбщПервоначальнаяСтоимостьУСН, 0);
	ОстаточнаяСтоимость = Макс(0, ПервоначальнаяСтоимостьУСН - СуммаНачисленнойАмортизации);
	
	СтрокаКниги = мКУДиР_НМА.Добавить();
	СтрокаКниги.НематериальныйАктив = НМА;
	СтрокаКниги.Период = мКонДата;
	СтрокаКниги.Организация = СтруктураШапкиДокумента.Организация;
	СтрокаКниги.ДатаОплаты = Строка.ДатаОплаты;
	СтрокаКниги.Графа3_ДатаПринятияКУчету = ДатаПринятияКУчету;
	СтрокаКниги.Графа5_ПервоначальнаяСтоимость = Строка.СуммаОплатыОборот;
	
	ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
	Если ОстатокРасходов < 0.01 Тогда
		СуммаОплаты = СуммаОплаты + ОстатокРасходов;
		ОстатокРасходов = 0;
	КонецЕсли;
	
	Если НЕ (Параметры = Неопределено) Тогда
		
		Если Параметры.ПереходныйПериод Тогда
			СтрокаКниги.Графа6_ОстаточнаяСтоимость = ОстаточнаяСтоимость;
			СтрокаКниги.Графа7_СрокПолезногоИспользования = Цел(Строка.СрокПолезногоИспользования/12) + ?(Строка.СрокПолезногоИспользования%12 <> 0, 1, 0);
			СтрокаКниги.Графа8_КолКварталовВОтчетномПериоде = Параметры.КоличествоКварталовВОтчетномПериоде;
			СтрокаКниги.Графа14_РасходыПрошлыхПериодов = Строка.СуммаРасходовВсего - (Строка.СуммаРасходовЗаГод);
			СтрокаКниги.Графа15_ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
		КонецЕсли;
		
		СтрокаКниги.Графа9_КолКварталовВНалПериоде  = Параметры.КоличествоКварталовВНалоговомПериоде;
		СтрокаКниги.Графа10_ДоляРасходовЗаНалПериод  = Параметры.ПроцентПринятияРасходов;
		СтрокаКниги.Графа11_ДоляРасходовЗаКвартал   = Параметры.ПроцентПринятияРасходовОтч;
	Иначе
		СтрокаКниги.Графа7_СрокПолезногоИспользования = Цел(Строка.СрокПолезногоИспользования/12) + ?(Строка.СрокПолезногоИспользования%12 <> 0, 1, 0);
		СтрокаКниги.Графа14_РасходыПрошлыхПериодов = Строка.СуммаРасходовВсего - (Строка.СуммаРасходовЗаГод + СуммаОплаты);
		
	КонецЕсли;
	
	СтрокаКниги.Графа12_СуммаРасходовЗаОтчетнПериод = Строка.СуммаРасходовЗаГод + СуммаОплаты;
	СтрокаКниги.Графа13_СуммаРасходовЗаКвартал = Строка.СуммаРасходовЗаКвартал + СуммаОплаты;
	СтрокаКниги.Графа15_ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
	
	Если СуммаОплаты > 0 Тогда
		
		СтрокаКниги  = мКУДиР.Добавить();
		
		СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.Период          = мКонДата;
		СтрокаКниги.Содержание      = "Признание расходов на приобретение нематериального актива """+Строка(НМА)+""" (дата оплаты: "+Формат(Строка.ДатаОплаты, "ДФ=дд.ММ.гггг")+").";
		СтрокаКниги.Графа7          = СуммаОплаты;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьВРасходыПрочее(СтруктураШапкиДокумента, Объект, Строка, СуммаОплаты, Параметры = Неопределено)
	
	Если СуммаОплаты > 0 Тогда
		
		СтрокаКниги  = мКУДиР.Добавить();
		
		СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.Период          = мКонДата;
		СтрокаКниги.Содержание      = "Признание расходов на """+Строка(Объект)+""" (дата оплаты: "+Формат(Строка.ДатаОплаты, "ДФ=дд.ММ.гггг")+").";
		СтрокаКниги.Графа7          = СуммаОплаты;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПризнаниеРасходовНаПриобретениеОСУСН(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.Предприниматель Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаПереходаНаУСН", мДатаПереходаНаУСН);
	Запрос.УстановитьПараметр("НачПериода",        мНачГода);
	Запрос.УстановитьПараметр("НачКвартала",       НачалоКвартала(Дата));
	Запрос.УстановитьПараметр("КонДата",           мКонДата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ОплатыОСДляУСНОбороты.ДокументМодернизации,
	|	ОплатыОСДляУСНОбороты.ДатаОплаты КАК ДатаОплаты,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.СуммаНачисленнойАмортизации,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ДатаПриобретения,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовОСОбороты.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовОСОбороты.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовВсего,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовОСОборотыГод.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовОСОборотыГод.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовОСОборотыКв.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовОСОборотыКв.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовЗаКвартал,
	|	СУММА(ВЫБОР
	|			КОГДА ОплатыОСДляУСНОбороты.СуммаОплатыОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ОплатыОСДляУСНОбороты.СуммаОплатыОборот
	|		КОНЕЦ) КАК СуммаОплатыОборот,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|ИЗ
	|	РегистрНакопления.ОплатыОСДляУСН.Обороты(, &КонДата, , Организация = &Организация) КАК ОплатыОСДляУСНОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчетУСН.СрезПоследних(&КонДата, ) КАК ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних
	|		ПО ОплатыОСДляУСНОбороты.ОсновноеСредство = ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовОС.Обороты(&ДатаПереходаНаУСН, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОСОбороты
	|		ПО КнигаУчетаДоходовИРасходовОСОбороты.ОсновноеСредство = ОплатыОСДляУСНОбороты.ОсновноеСредство
	|			И КнигаУчетаДоходовИРасходовОСОбороты.ДатаОплаты = ОплатыОСДляУСНОбороты.ДатаОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовОС.Обороты(&НачПериода, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОСОборотыГод
	|		ПО КнигаУчетаДоходовИРасходовОСОборотыГод.ОсновноеСредство = ОплатыОСДляУСНОбороты.ОсновноеСредство
	|			И КнигаУчетаДоходовИРасходовОСОборотыГод.ДатаОплаты = ОплатыОСДляУСНОбороты.ДатаОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовОС.Обороты(&НачКвартала, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОСОборотыКв
	|		ПО КнигаУчетаДоходовИРасходовОСОборотыКв.ОсновноеСредство = ОплатыОСДляУСНОбороты.ОсновноеСредство
	|			И КнигаУчетаДоходовИРасходовОСОборотыКв.ДатаОплаты = ОплатыОСДляУСНОбороты.ДатаОплаты
	|ГДЕ
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ОсновноеСредство,
	|	ОплатыОСДляУСНОбороты.ДокументМодернизации,
	|	ОплатыОСДляУСНОбороты.ДатаОплаты,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.СуммаНачисленнойАмортизации,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ДатаПриобретения,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредство,
	|	ДатаОплаты";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТекОС = "";
	ТекМодернизацияОС = "";
	Для Каждого СтрокаРезультата ИЗ ТаблицаРезультата Цикл
		Если (СтрокаРезультата.ОсновноеСредство = ТекОС) И (СтрокаРезультата.ДокументМодернизации = ТекМодернизацияОС) Тогда
			//
		Иначе
			ТекОС = СтрокаРезультата.ОсновноеСредство;
			ТекМодернизацияОС = СтрокаРезультата.ДокументМодернизации;
			Если ЗначениеЗаполнено(СтрокаРезультата.ДокументМодернизации) Тогда //Модернизация
				
				ПервоначальнаяСтоимостьУСН = 0;
				СуммаНачисленнойАмортизации = 0;
				СрокПолезногоИспользования = 12;
				ДатаПриобретения = СтрокаРезультата.ДокументМодернизации.Дата;
				ДатаВвода = ДатаПриобретения;
				
				СтрокаРезультата.ПервоначальнаяСтоимостьУСН = ПервоначальнаяСтоимостьУСН;
				СтрокаРезультата.СуммаНачисленнойАмортизации = СуммаНачисленнойАмортизации;
				СтрокаРезультата.СрокПолезногоИспользования = СрокПолезногоИспользования;
				СтрокаРезультата.ДатаПриобретения = ДатаПриобретения;
				
				Если (СтрокаРезультата.ДатаОплаты < Дата("20070101")) ИЛИ (ДатаВвода < Дата("20070101")) Тогда
					ТекОС = "";
					Продолжить;
				КонецЕсли;
				
				Если Макс(СтрокаРезультата.ДатаОплаты, ДатаВвода) < Дата("20080101") Тогда
					ТекОС = "";
					Продолжить;
				КонецЕсли;
				
				Если ДатаПриобретения < мДатаПереходаНаУСН Тогда
					ТекОС = "";
					Продолжить;
				КонецЕсли;
				
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("Ссылка", 		СтрокаРезультата.ДокументМодернизации);
				Запрос.УстановитьПараметр("ОС", 			СтрокаРезультата.ОсновноеСредство);
				Запрос.УстановитьПараметр("Организация", 	СтруктураШапкиДокумента.Организация);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СУММА(СобытияОСОрганизаций.СуммаЗатратБУ) КАК СуммаЗатратБУ,
				|	СУММА(СобытияОСОрганизаций.СуммаЗатратНУ) КАК СуммаЗатратНУ,
				|	СУММА(СобытияОСОрганизаций.СуммаЗатратУСН) КАК СуммаЗатратУСН,
				|	СобытияОСОрганизаций.Событие
				|ИЗ
				|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
				|ГДЕ
				|	СобытияОСОрганизаций.Регистратор = &Ссылка
				|	И СобытияОСОрганизаций.ОсновноеСредство = &ОС
				|	И СобытияОСОрганизаций.Организация = &Организация
				|
				|СГРУППИРОВАТЬ ПО
				|	СобытияОСОрганизаций.Событие";
				
				Результат = Запрос.Выполнить().Выбрать();
				Если Результат.Следующий() Тогда
					ПервоначальнаяСтоимостьУСН = Результат.СуммаЗатратУСН;
				КонецЕсли;
				
			Иначе //ОС
				
				ПервоначальнаяСтоимостьУСН = СтрокаРезультата.ПервоначальнаяСтоимостьУСН;
				СуммаНачисленнойАмортизации = СтрокаРезультата.СуммаНачисленнойАмортизации;
				СрокПолезногоИспользования = СтрокаРезультата.СрокПолезногоИспользования;
				ДатаПриобретения = СтрокаРезультата.ДатаПриобретения;
				
				ДокРегистратор   = Неопределено;
				ДатаВвода		 = Неопределено;
				УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ТекОС, СтруктураШапкиДокумента.Организация, Перечисления.СостоянияОС.ПринятоКУчету, ДокРегистратор, ДатаВвода);
				
			КонецЕсли;
			
			ДокументСнятоСУчетаБУ = Неопределено;
			ДатаВыбытия			  = Неопределено;
			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ТекОС, СтруктураШапкиДокумента.Организация, Перечисления.СостоянияОС.СнятоСУчета,  ДокументСнятоСУчетаБУ, ДатаВыбытия);
			ДатаВыбытия = ?(ДатаВыбытия > КонецДня(СтруктураШапкиДокумента.Дата), "", ДатаВыбытия);
			
			Если НЕ ЗначениеЗаполнено(ДатаВвода) Тогда
				ТекОС = "";
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ПервоначальнаяСтоимостьУСН) Тогда
				ТекОС = "";
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДатаВыбытия) И (НЕ Год(ДатаВыбытия) = Год(СтруктураШапкиДокумента.Дата)) Тогда
				//Основное средство выбыло в предыдущие годы
				ТекОС = "";
				Продолжить;
			КонецЕсли;
			
			ОстаточнаяСтоимость = Макс(0, ПервоначальнаяСтоимостьУСН - СуммаНачисленнойАмортизации);
			ОплаченнаяСтоимость = 0;
			ОплаченнаяОстаточнаяСтоимость = 0;
		КонецЕсли;
		
		Если (СтруктураШапкиДокумента.Дата >= Дата("20060101")) И (НЕ ЗначениеЗаполнено(СтрокаРезультата.ДокументМодернизации)) Тогда  
			
			Если СтрокаРезультата.ПорядокВключенияСтоимостиВСоставРасходовУСН = Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставРасходов Тогда
				
				Если ДатаВвода >= НачалоКвартала(Дата) Тогда
					СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
					ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
					Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
						Превышение = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
						СуммаОплаты = СуммаОплаты - Превышение;
						ТекстСообщения = "Сумма зарегистрированных оплат ОС """+ Строка(ТекОС) + """ превышает его первоначальную стоимость.
						|Проверьте суммы оплаты в документах ""Принятие к учету ОС"" и ""Регистрация оплаты ОС и НМА для УСН и ИП""";
						ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , Отказ, ЭтотОбъект);
					КонецЕсли;
					Если СуммаОплаты > 0 Тогда
						ВключитьВРасходыПрочее(СтруктураШапкиДокумента, ТекОС, СтрокаРезультата, СуммаОплаты);
					КонецЕсли;
				Иначе
					СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
					ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
					Если СтрокаРезультата.ДатаОплаты < НачалоКвартала(Дата) Тогда
						Продолжить;
					КонецЕсли;
					Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
						Превышение = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
						СуммаОплаты = СуммаОплаты - Превышение;
						ТекстСообщения = "Сумма зарегистрированных оплат ОС """+ Строка(ТекОС) + """ превышает его первоначальную стоимость.
						|Проверьте суммы оплаты в документах ""Принятие к учету ОС"" и ""Регистрация оплаты ОС и НМА для УСН и ИП""";
						ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , Отказ, ЭтотОбъект);
					КонецЕсли;
					Если СуммаОплаты > 0 Тогда
						ВключитьВРасходыПрочее(СтруктураШапкиДокумента, ТекОС, СтрокаРезультата, СуммаОплаты);
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
				
			ИначеЕсли СтрокаРезультата.ПорядокВключенияСтоимостиВСоставРасходовУСН = Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.НеВключатьВСоставРасходов Тогда
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ДатаПриобретения >= мДатаПереходаНаУСН Тогда
			
			Если Дата >= Дата("20060101") Тогда
				НачДатаОплат = НачалоГода(Дата);
			Иначе
				НачДатаОплат = НачалоКвартала(Дата);
			КонецЕсли;
			
			Если ДатаВвода >= НачДатаОплат Тогда
				СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
				ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					Превышение = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты = СуммаОплаты - Превышение;
					ТекстСообщения = "Сумма зарегистрированных оплат ОС """+ Строка(ТекОС) + """ превышает его первоначальную стоимость.
					|Проверьте суммы оплаты в документах ""Принятие к учету ОС"" и ""Регистрация оплаты ОС и НМА для УСН и ИП""";
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , Отказ, ЭтотОбъект);
				КонецЕсли;
				Параметры = Неопределено;
				Если Дата >= Дата("20060101") Тогда
					СуммаОплаты = РаспределитьОплатуПоКварталам(СуммаОплаты, СтрокаРезультата.ДатаОплаты, ДатаВвода, Параметры);
					Параметры.Вставить("ПереходныйПериод", Ложь);
				КонецЕсли;
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыОС(СтруктураШапкиДокумента, ТекОС, СтрокаРезультата, СуммаОплаты, ДатаВвода, Параметры);
				КонецЕсли;
			Иначе
				СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
				ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
				Если СтрокаРезультата.ДатаОплаты < НачДатаОплат Тогда
					Продолжить;
				КонецЕсли;
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					Превышение = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты = СуммаОплаты - Превышение;
					ТекстСообщения = "Сумма зарегистрированных оплат ОС """+ Строка(ТекОС) + """ превышает его первоначальную стоимость.
					|Проверьте суммы оплаты в документах ""Принятие к учету ОС"" и ""Регистрация оплаты ОС и НМА для УСН и ИП""";
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , Отказ, ЭтотОбъект);
				КонецЕсли;
				Параметры = Неопределено;
				Если Дата >= Дата("20060101") Тогда
					СуммаОплаты = РаспределитьОплатуПоКварталам(СуммаОплаты, СтрокаРезультата.ДатаОплаты, ДатаВвода, Параметры);
					Параметры.Вставить("ПереходныйПериод", Ложь);
				КонецЕсли;
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыОС(СтруктураШапкиДокумента, ТекОС, СтрокаРезультата, СуммаОплаты, ДатаВвода, Параметры);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			ОплаченнаяСтоимость = ОплаченнаяСтоимость + СтрокаРезультата.СуммаОплатыОборот;
			ЧастьОстаточнойСтоимости = ОстаточнаяСтоимость*(ОплаченнаяСтоимость/ПервоначальнаяСтоимостьУСН) - ОплаченнаяОстаточнаяСтоимость;
			ОплаченнаяОстаточнаяСтоимость = ОплаченнаяОстаточнаяСтоимость + ЧастьОстаточнойСтоимости;
			
			Если ОплаченнаяОстаточнаяСтоимость > ОстаточнаяСтоимость Тогда
				Превышение = ОплаченнаяОстаточнаяСтоимость - ОстаточнаяСтоимость;
				ОплаченнаяОстаточнаяСтоимость=ОплаченнаяОстаточнаяСтоимость - превышение;
				ЧастьОстаточнойСтоимости=ЧастьОстаточнойСтоимости - Превышение;
				ТекстСообщения = "Сумма зарегистрированных оплат ОС """+ Строка(ТекОС) + """ превышает его первоначальную стоимость.
				|Проверьте суммы оплаты в документах ""Принятие к учету ОС"" и ""Регистрация оплаты ОС и НМА для УСН и ИП""";
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , Отказ, ЭтотОбъект);
			КонецЕсли;
			
			Если ЧастьОстаточнойСтоимости > 0 Тогда
				ФормированиеРасходов(СтруктураШапкиДокумента, ТекОС, ЧастьОстаточнойСтоимости, СтрокаРезультата, ДатаВвода);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ мКУДиР = Неопределено Тогда
		мКУДиР.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПризнаниеРасходовНаПриобретениеНМАУСН(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.Предприниматель Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаПереходаНаУСН", мДатаПереходаНаУСН);
	Запрос.УстановитьПараметр("НачПериода",        мНачГода);
	Запрос.УстановитьПараметр("НачКвартала",       НачалоКвартала(Дата));
	Запрос.УстановитьПараметр("КонДата",           мКонДата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	ОплатыНМАДляУСНОбороты.ДатаОплаты КАК ДатаОплаты,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.СуммаНачисленнойАмортизации,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ДатаПриобретения,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовНМАОбороты.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовНМАОбороты.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовВсего,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовНМАОборотыГод.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовНМАОборотыГод.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовНМАОборотыКв.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовНМАОборотыКв.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовЗаКвартал,
	|	СУММА(ВЫБОР
	|			КОГДА ОплатыНМАДляУСНОбороты.СуммаОплатыОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ОплатыНМАДляУСНОбороты.СуммаОплатыОборот
	|		КОНЕЦ) КАК СуммаОплатыОборот,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|ИЗ
	|	РегистрНакопления.ОплатыНМАДляУСН.Обороты(, &КонДата, , Организация = &Организация) КАК ОплатыНМАДляУСНОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчетУСН.СрезПоследних(&КонДата, ) КАК ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних
	|		ПО ОплатыНМАДляУСНОбороты.НематериальныйАктив = ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовНМА.Обороты(&ДатаПереходаНаУСН, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовНМАОбороты
	|		ПО КнигаУчетаДоходовИРасходовНМАОбороты.НематериальныйАктив = ОплатыНМАДляУСНОбороты.НематериальныйАктив
	|			И КнигаУчетаДоходовИРасходовНМАОбороты.ДатаОплаты = ОплатыНМАДляУСНОбороты.ДатаОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовНМА.Обороты(&НачПериода, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовНМАОборотыГод
	|		ПО КнигаУчетаДоходовИРасходовНМАОборотыГод.НематериальныйАктив = ОплатыНМАДляУСНОбороты.НематериальныйАктив
	|			И КнигаУчетаДоходовИРасходовНМАОборотыГод.ДатаОплаты = ОплатыНМАДляУСНОбороты.ДатаОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовНМА.Обороты(&НачКвартала, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовНМАОборотыКв
	|		ПО КнигаУчетаДоходовИРасходовНМАОборотыКв.НематериальныйАктив = ОплатыНМАДляУСНОбороты.НематериальныйАктив
	|			И КнигаУчетаДоходовИРасходовНМАОборотыКв.ДатаОплаты = ОплатыНМАДляУСНОбороты.ДатаОплаты
	|ГДЕ
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.НематериальныйАктив,
	|	ОплатыНМАДляУСНОбороты.ДатаОплаты,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.СуммаНачисленнойАмортизации,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ДатаПриобретения,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	НематериальныйАктив,
	|	ДатаОплаты";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТекНМА = "";
	Для Каждого СтрокаРезультата ИЗ ТаблицаРезультата Цикл
		Если СтрокаРезультата.НематериальныйАктив = ТекНМА Тогда
			//
		Иначе
			ТекНМА = СтрокаРезультата.НематериальныйАктив;
			ПервоначальнаяСтоимостьУСН = СтрокаРезультата.ПервоначальнаяСтоимостьУСН;
			СуммаНачисленнойАмортизации = СтрокаРезультата.СуммаНачисленнойАмортизации;
			СрокПолезногоИспользования = СтрокаРезультата.СрокПолезногоИспользования;
			ДатаПриобретения = СтрокаРезультата.ДатаПриобретения;
			
			ДокРегистратор   = Неопределено;
			ДатаВвода		 = Неопределено;
			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияНМА(ТекНМА, СтруктураШапкиДокумента.Организация,Перечисления.ВидыСостоянийНМА.ПринятКУчету, ДокРегистратор, ДатаВвода);
			Если НЕ ЗначениеЗаполнено(ДатаВвода) Тогда
				ТекНМА = "";
				Продолжить;
			КонецЕсли;
			
			ДокументСнятоСУчетаБУ = Неопределено;
			ДатаВыбытия			  = Неопределено;
			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияНМА(ТекНМА, СтруктураШапкиДокумента.Организация, Перечисления.ВидыСостоянийНМА.Списан,  ДокументСнятоСУчетаБУ, ДатаВыбытия);
			ДатаВыбытия = ?(ДатаВыбытия > КонецДня(СтруктураШапкиДокумента.Дата), "", ДатаВыбытия);
			Если ЗначениеЗаполнено(ДатаВыбытия) И (НЕ Год(ДатаВыбытия) = Год(СтруктураШапкиДокумента.Дата)) Тогда
				//НМА выбыло в предыдущие годы
				ТекНМА = "";
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПервоначальнаяСтоимостьУСН) Тогда
				ТекНМА = "";
				Продолжить;
			КонецЕсли;
			
			ОстаточнаяСтоимость = Макс(0, ПервоначальнаяСтоимостьУСН - СуммаНачисленнойАмортизации);
			ОплаченнаяСтоимость = 0;
			ОплаченнаяОстаточнаяСтоимость = 0;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.Дата >= Дата("20060101") Тогда  
			
			Если СтрокаРезультата.ПорядокВключенияСтоимостиВСоставРасходовУСН = Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставРасходов Тогда
				
				Если ДатаВвода >= НачалоКвартала(Дата) Тогда
					СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
					ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
					Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
						Превышение = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
						СуммаОплаты = СуммаОплаты - Превышение;
						ТекстСообщения = "Сумма зарегистрированных оплат НМА """+ Строка(ТекНМА) + """ превышает его первоначальную стоимость.
						|Проверьте суммы оплаты в документах ""Принятие к учету НМА"" и ""Регистрация оплаты ОС и НМА для УСН и ИП"".";
						ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, ТекНМА, Отказ, ЭтотОбъект);
					КонецЕсли;
					Если СуммаОплаты > 0 Тогда
						ВключитьВРасходыПрочее(СтруктураШапкиДокумента, ТекНМА, СтрокаРезультата, СуммаОплаты);
					КонецЕсли;
				Иначе
					СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
					ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
					Если СтрокаРезультата.ДатаОплаты < НачалоКвартала(Дата) Тогда
						Продолжить;
					КонецЕсли;
					Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
						Превышение = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
						СуммаОплаты = СуммаОплаты - Превышение;
						ТекстСообщения = "Сумма зарегистрированных оплат НМА """+ Строка(ТекНМА) + """ превышает его первоначальную стоимость.
						|Проверьте суммы оплаты в документах ""Принятие к учету НМА"" и ""Регистрация оплаты ОС и НМА для УСН и ИП"".";
						ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, ТекНМА, Отказ, ЭтотОбъект);
					КонецЕсли;
					Если СуммаОплаты > 0 Тогда
						ВключитьВРасходыПрочее(СтруктураШапкиДокумента, ТекНМА, СтрокаРезультата, СуммаОплаты);
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
				
			ИначеЕсли СтрокаРезультата.ПорядокВключенияСтоимостиВСоставРасходовУСН = Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.НеВключатьВСоставРасходов Тогда
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ДатаПриобретения >= мДатаПереходаНаУСН Тогда
			
			Если Дата >= Дата("20060101") Тогда
				НачДатаОплат = НачалоГода(Дата);
			Иначе
				НачДатаОплат = НачалоКвартала(Дата);
			КонецЕсли;
			
			Если ДатаВвода >= НачДатаОплат Тогда
				СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
				ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					Превышение = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты = СуммаОплаты - Превышение;
					ТекстСообщения = "Сумма зарегистрированных оплат НМА """+ Строка(ТекНМА) + """ превышает его первоначальную стоимость.
					|Проверьте суммы оплаты в документах ""Принятие к учету НМА"" и ""Регистрация оплаты ОС и НМА для УСН и ИП"".";
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, ТекНМА, Отказ, ЭтотОбъект);
				КонецЕсли;
				Параметры = Неопределено;
				Если Дата >= Дата("20060101") Тогда
					СуммаОплаты = РаспределитьОплатуПоКварталам(СуммаОплаты, СтрокаРезультата.ДатаОплаты, ДатаВвода, Параметры);
					Параметры.Вставить("ПереходныйПериод", Ложь);
				КонецЕсли;
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыНМА(СтруктураШапкиДокумента, ТекНМА, СтрокаРезультата, СуммаОплаты, ДатаВвода, Параметры);
				КонецЕсли;
			Иначе
				СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
				ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
				Если СтрокаРезультата.ДатаОплаты < НачДатаОплат Тогда
					Продолжить;
				КонецЕсли;
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					Превышение = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты = СуммаОплаты - Превышение;
					ТекстСообщения = "Ошибка превышения оплаты
					|Не обнаружено превышение оплаты по "+ Строка(ТекНМА) + " "+СтрокаРезультата.ДатаОплаты+ " первоначальной стоимости НМА  
					|Рекомендуется проверить документы оплаты НМА";
				КонецЕсли;
				Параметры = Неопределено;
				Если Дата >= Дата("20060101") Тогда
					СуммаОплаты = РаспределитьОплатуПоКварталам(СуммаОплаты, СтрокаРезультата.ДатаОплаты, ДатаВвода, Параметры);
					Параметры.Вставить("ПереходныйПериод", Ложь);
				КонецЕсли;
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыНМА(СтруктураШапкиДокумента, ТекНМА, СтрокаРезультата, СуммаОплаты, ДатаВвода, Параметры);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			ОплаченнаяСтоимость = ОплаченнаяСтоимость + СтрокаРезультата.СуммаОплатыОборот;
			ЧастьОстаточнойСтоимости = ОстаточнаяСтоимость*(ОплаченнаяСтоимость/ПервоначальнаяСтоимостьУСН) - ОплаченнаяОстаточнаяСтоимость;
			ОплаченнаяОстаточнаяСтоимость = ОплаченнаяОстаточнаяСтоимость + ЧастьОстаточнойСтоимости;
			
			Если ОплаченнаяОстаточнаяСтоимость > ОстаточнаяСтоимость Тогда
				Превышение = ОплаченнаяОстаточнаяСтоимость - ОстаточнаяСтоимость;
				ОплаченнаяОстаточнаяСтоимость=ОплаченнаяОстаточнаяСтоимость - превышение;
				ЧастьОстаточнойСтоимости=ЧастьОстаточнойСтоимости - Превышение;
				ТекстСообщения = "Сумма зарегистрированных оплат НМА """+ Строка(ТекНМА) + """ превышает его первоначальную стоимость.
				|Проверьте суммы оплаты в документах ""Принятие к учету НМА"" и ""Регистрация оплаты ОС и НМА для УСН и ИП"".";
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, ТекНМА, Отказ, ЭтотОбъект);
			КонецЕсли;
			
			Если ЧастьОстаточнойСтоимости > 0 Тогда
				ФормированиеРасходовНМА(СтруктураШапкиДокумента, ТекНМА, ЧастьОстаточнойСтоимости, СтрокаРезультата, ДатаВвода);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	мКУДиР.Записать(Ложь);
	
КонецПроцедуры

Функция РассчитатьКоличествоМесяцевЭксплуатации(КоличествоКварталовВОтчетномПериоде, 
	
	КоличествоКварталовВНалоговомПериоде,
	ДатаВключенияСтоимостиВРасходы);
	
	НомерКвартала = Месяц(КонецКвартала(Дата)) / 3;
	Если Год(ДатаВключенияСтоимостиВРасходы) < Год(Дата) Тогда
		КоличествоКварталовВОтчетномПериоде  = НомерКвартала;
		КоличествоКварталовВНалоговомПериоде = 4;
		
	ИначеЕсли ДатаВключенияСтоимостиВРасходы <= Дата Тогда
		НомерКварталаНачалаРасчета = Месяц(КонецКвартала(ДатаВключенияСтоимостиВРасходы)) / 3;
		КоличествоКварталовВОтчетномПериоде  = НомерКвартала - НомерКварталаНачалаРасчета;
		КоличествоКварталовВНалоговомПериоде = 5 - НомерКварталаНачалаРасчета;
		
		Если (Месяц(ДатаВключенияСтоимостиВРасходы) <> Месяц(КонецКвартала(ДатаВключенияСтоимостиВРасходы))) или (ДатаВключенияСтоимостиВРасходы >= Дата("20060101")) Тогда
			КоличествоКварталовВОтчетномПериоде = КоличествоКварталовВОтчетномПериоде + 1;
		Иначе
			КоличествоКварталовВНалоговомПериоде = КоличествоКварталовВНалоговомПериоде - 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // РассчитатьКоличествоМесяцевЭксплуатации()

Функция РаспределитьОплатуПоКварталам(СуммаОплаты, ДатаОплаты, ДатаВводаВэксплуатацию, Параметры)
	
	КоличествоКварталовВОтчетномПериоде  = 0;
	КоличествоКварталовВНалоговомПериоде = 0;
	ДатаВключенияСтоимостиВРасходы       = 0;
	
	РассчитатьКоличествоМесяцевЭксплуатации(КоличествоКварталовВОтчетномПериоде, 
	КоличествоКварталовВНалоговомПериоде,
	Макс(ДатаОплаты, ДатаВводаВэксплуатацию));
	СуммаРасходов = 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		СуммаРасходов = СуммаОплаты/КоличествоКварталовВНалоговомПериоде;    
	КонецЕсли;
	
	ПроцентПринятияРасходовОтч = ?(КоличествоКварталовВНалоговомПериоде = 0, 0, Окр(100/КоличествоКварталовВНалоговомПериоде, 2));
	Параметры = Новый Структура("КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов", 0, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, 100);
	
	Возврат СуммаРасходов;
	
КонецФункции

Процедура ФормированиеРасходовНМА(СтруктураШапкиДокумента, НМА, ОстаточнаяСтоимость, Строка, ДатаПринятияКУчету)
	
	Если ОстаточнаяСтоимость <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоКварталовВОтчетномПериоде  = 0;
	КоличествоКварталовВНалоговомПериоде = 0;
	ДатаВключенияСтоимостиВРасходы       = 0;
	
	ПроцентПринятияРасходов = ПроцентПринятыхРасходов(Строка.СрокПолезногоИспользования);
	РассчитатьКоличествоМесяцевЭксплуатации(КоличествоКварталовВОтчетномПериоде, 
	КоличествоКварталовВНалоговомПериоде,
	Макс(Строка.ДатаОплаты, ДатаПринятияКУчету));
	СуммаРасходов = 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		СуммаРасходов = ОстаточнаяСтоимость*КоличествоКварталовВОтчетномПериоде*(ПроцентПринятияРасходов/КоличествоКварталовВНалоговомПериоде)/100;    
	КонецЕсли;
	
	РасходыТекущегоКварталаСумма = 0;
	ОтнесеноНаРасходы = 0;
	ОтнесеноНаРасходы = Строка.СуммаРасходовЗаГод;
	
	СуммаРасходов = Макс(0, СуммаРасходов - ОтнесеноНаРасходы);
	
	ПроцентПринятияРасходовОтч = 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		ПроцентПринятияРасходовОтч = (ПроцентПринятияРасходов/КоличествоКварталовВНалоговомПериоде);    
	КонецЕсли;
	
	Параметры = Новый Структура("КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов", КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов);
	Параметры.Вставить("ПереходныйПериод", Истина);
	
	Если НЕ СуммаРасходов = 0 Тогда
		ВключитьВРасходыНМА(СтруктураШапкиДокумента, НМА, Строка, СуммаРасходов, ДатаПринятияКУчету, Параметры);
	КонецЕсли;
	
КонецПроцедуры // ФормированиеРасходов()

Процедура ФормированиеРасходов(СтруктураШапкиДокумента, ОС, ОстаточнаяСтоимость, Строка, ДатаВводаВэксплуатацию)
	
	Если ОстаточнаяСтоимость <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоКварталовВОтчетномПериоде  = 0;
	КоличествоКварталовВНалоговомПериоде = 0;
	ДатаВключенияСтоимостиВРасходы       = 0;
	
	ПроцентПринятияРасходов = ПроцентПринятыхРасходов(Строка.СрокПолезногоИспользования);
	РассчитатьКоличествоМесяцевЭксплуатации(КоличествоКварталовВОтчетномПериоде, 
	КоличествоКварталовВНалоговомПериоде,
	Макс(Строка.ДатаОплаты, ДатаВводаВэксплуатацию));
	СуммаРасходов = 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		СуммаРасходов = ОстаточнаяСтоимость*КоличествоКварталовВОтчетномПериоде*(ПроцентПринятияРасходов/КоличествоКварталовВНалоговомПериоде)/100;    
	КонецЕсли;
	
	РасходыТекущегоКварталаСумма = 0;
	ОтнесеноНаРасходы = 0;
	ОтнесеноНаРасходы = Строка.СуммаРасходовЗаГод;
	
	СуммаРасходов = Макс(0, СуммаРасходов - ОтнесеноНаРасходы);
	
	ПроцентПринятияРасходовОтч = 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		ПроцентПринятияРасходовОтч = (ПроцентПринятияРасходов/КоличествоКварталовВНалоговомПериоде);    
	КонецЕсли;
	
	Параметры = Новый Структура("КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов", КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов);
	Параметры.Вставить("ПереходныйПериод", Истина);
	
	Если НЕ СуммаРасходов = 0 Тогда
		ВключитьВРасходыОС(СтруктураШапкиДокумента, ОС, Строка, СуммаРасходов, ДатаВводаВэксплуатацию, Параметры);
	КонецЕсли;
	
КонецПроцедуры // ФормированиеРасходов()

Функция ПроцентПринятыхРасходов(СрокПолезногоИспользования)
	
	ПроцентСписания = 0;
	
	Если СрокПолезногоИспользования <= 3*12 Тогда
		
		Если Год(Дата) = Год(мДатаПереходаНаУСН) Тогда
			ПроцентСписания = 100;
		КонецЕсли;
		
	ИначеЕсли СрокПолезногоИспользования <= 15*12 Тогда
		Если Год(Дата) = Год(мДатаПереходаНаУСН) Тогда
			ПроцентСписания = 50;
			
		ИначеЕсли (Год(Дата) - 1) = Год(мДатаПереходаНаУСН) Тогда
			ПроцентСписания = 30;
			
		ИначеЕсли (Год(Дата) - 2) = Год(мДатаПереходаНаУСН) Тогда
			ПроцентСписания = 20;
		КонецЕсли;
		
	Иначе
		ПроцентСписания = 10;
	КонецЕсли;
	
	Возврат ПроцентСписания;
	
КонецФункции // ПроцентПринятыхРасходов()

Процедура СписаниеДопРасходовУСН(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.Предприниматель Тогда
		Возврат;
	КонецЕсли;
	Параметры = Новый Структура("Ссылка, Объект, Организация, Дата", Ссылка, ЭтотОбъект, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	НалоговыйУчетУСН.ОтразитьВУСН(Ссылка, "СписаниеТЗР",Параметры,1);	
	
КонецПроцедуры

//Распределение расходов по видам деятельности

Процедура РаспределениеРасходовЕНВДУСН(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.Предприниматель Тогда
		Возврат;
	КонецЕсли;
	Параметры = Новый Структура("Ссылка, Объект, Организация, Дата", Ссылка, ЭтотОбъект, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	НалоговыйУчетУСН.ОтразитьВУСН(Ссылка, "РаспределениеЕНВД",Параметры,2);
	
КонецПроцедуры

// {УчетДоходовИРасходовИП
Процедура РаспределениеРасходовЕНВДИП(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.Предприниматель Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененияВидаДеятельности = Новый ТаблицаЗначений;
	ИзмененияВидаДеятельности.Колонки.Добавить("ВидМПЗ");
	ИзмененияВидаДеятельности.Колонки.Добавить("ХарактерДеятельности1");
	ИзмененияВидаДеятельности.Колонки.Добавить("НоменклатурнаяГруппа1");
	ИзмененияВидаДеятельности.Колонки.Добавить("ХарактерДеятельности2");
	ИзмененияВидаДеятельности.Колонки.Добавить("НоменклатурнаяГруппа2");
	ИзмененияВидаДеятельности.Колонки.Добавить("Номенклатура");
	ИзмененияВидаДеятельности.Колонки.Добавить("Партия");
	ИзмененияВидаДеятельности.Колонки.Добавить("ДокументОплаты");
	ИзмененияВидаДеятельности.Колонки.Добавить("МПЗ");
	ИзмененияВидаДеятельности.Колонки.Добавить("ПартияМПЗ");
	ИзмененияВидаДеятельности.Колонки.Добавить("Количество");
	ИзмененияВидаДеятельности.Колонки.Добавить("Сумма");
	ИзмененияВидаДеятельности.Колонки.Добавить("НДС");
	
	ОтборСтрокБазы = Новый Структура;
	
	// Получение базы распределения расходов.
	
	// Базой распределения являются доходы, полученные в этом месяце, отдельно по каждой
	// номенклатурной группе и характеру деятельности. Доходы должны быть фактически получены,
	// то есть база распределения формируется на основании погашенной задолженности покупателей
	// в текущем месяце.
	
	Если СтруктураШапкиДокумента.УчетнаяПолитика.ВестиУчетПоВидамДеятельности Тогда
		
		БазаРаспределения = ДоходыИРасходыПредпринимателя.БазаРаспределения(СтруктураШапкиДокумента.Организация, мНачГраница, мКонГраница);
		
		НедопустимыеХарактерыДеятельности = Новый Массив;
		НедопустимыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ПустаяСсылка()); // распред. на все виды деятельности
		НедопустимыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсеВидыТорговли); // распред. на опт, розницу и розницу (ЕНВД)
		НедопустимыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсеВидыПроизводстваРаботУслуг); // распред. на прочее и прочее (ЕНВД)
		НедопустимыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсяДеятельностьНеЕНВД); // распред. на опт, розницу и прочее
		НедопустимыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсяДеятельностьЕНВД); // распред. на розницу (ЕНВД) и прочее (ЕНВД)
		НедопустимыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсеВидыТорговлиНеЕНВД); // распред. на опт и розницу
		
		РаспределяемыеВидыМПЗ = Новый Массив;
		РаспределяемыеВидыМПЗ.Добавить(Перечисления.ВидыМПЗ.ВспомогательныеМатериалы);
		РаспределяемыеВидыМПЗ.Добавить(Перечисления.ВидыМПЗ.Материалы);
		РаспределяемыеВидыМПЗ.Добавить(Перечисления.ВидыМПЗ.Полуфабрикаты);
		РаспределяемыеВидыМПЗ.Добавить(Перечисления.ВидыМПЗ.Продукция);
		РаспределяемыеВидыМПЗ.Добавить(Перечисления.ВидыМПЗ.Товары);
		
		Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
			
			СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗ");
			ЗначенияБлокировки = Новый Соответствие;
			ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
			ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
			
			СтруктураПараметров.Вставить("ИмяТаблицы", "ИПИныеМатериальныеРасходы");
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
			
			СтруктураПараметров.Вставить("ИмяТаблицы", "ИППрочиеРасходы");
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
			
			СтруктураПараметров.Вставить("ИмяТаблицы", "ИПРасходыНаОплатуТруда");
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
			
		КонецЕсли;
		
		// Распределение МПЗ и ИМР, распределяемых по всем вида деятельности
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоМесяца", мНачГраница);
		Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
		Запрос.УстановитьПараметр("Период", НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("ИМР", Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы);
		Запрос.УстановитьПараметр("Прочее", Перечисления.ВидыМПЗ.ПрочиеРасходы);
		Запрос.УстановитьПараметр("НедопустимыеХарактерыДеятельности", НедопустимыеХарактерыДеятельности);
		Запрос.УстановитьПараметр("РаспределяемыеВидыМПЗ", РаспределяемыеВидыМПЗ);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИПМПЗОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа1,
		|	ИПМПЗОстатки.ХарактерДеятельности КАК ХарактерДеятельности1,
		|	НЕОПРЕДЕЛЕНО КАК НоменклатурнаяГруппа2,
		|	НЕОПРЕДЕЛЕНО КАК ХарактерДеятельности2,
		|	ИПМПЗОстатки.ВидМПЗ КАК ВидМПЗ,
		|	ИПМПЗОстатки.Номенклатура КАК Номенклатура,
		|	ИПМПЗОстатки.Партия,
		|	ИПМПЗОстатки.ДокументОплаты,
		|	НЕОПРЕДЕЛЕНО КАК МПЗ,
		|	НЕОПРЕДЕЛЕНО КАК ПартияМПЗ,
		|	СУММА(ИПМПЗОстатки.КоличествоОстаток) КАК Количество,
		|	СУММА(ИПМПЗОстатки.СуммаОстаток) КАК Сумма,
		|	СУММА(ИПМПЗОстатки.НДСОстаток) КАК НДС,
		|	&Период КАК Период
		|ИЗ
		|	РегистрНакопления.ИПМПЗ.Остатки(
		|			&КонецМесяца,
		|			Организация = &Организация
		|				И ВидМПЗ В (&РаспределяемыеВидыМПЗ)
		|				И (НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|					ИЛИ ХарактерДеятельности В (&НедопустимыеХарактерыДеятельности))) КАК ИПМПЗОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПМПЗОстатки.НоменклатурнаяГруппа,
		|	ИПМПЗОстатки.ХарактерДеятельности,
		|	ИПМПЗОстатки.ВидМПЗ,
		|	ИПМПЗОстатки.Номенклатура,
		|	ИПМПЗОстатки.Партия,
		|	ИПМПЗОстатки.ДокументОплаты
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
		|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	&ИМР,
		|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат,
		|	ИПИныеМатериальныеРасходыОстатки.Партия,
		|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
		|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
		|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ,
		|	СУММА(ИПИныеМатериальныеРасходыОстатки.КоличествоОстаток),
		|	СУММА(ИПИныеМатериальныеРасходыОстатки.СуммаОстаток),
		|	СУММА(ИПИныеМатериальныеРасходыОстатки.НДСОстаток),
		|	&Период
		|ИЗ
		|	РегистрНакопления.ИПИныеМатериальныеРасходы.Остатки(
		|			&КонецМесяца,
		|			Организация = &Организация
		|				И МПЗ = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|				И ПартияМПЗ = НЕОПРЕДЕЛЕНО
		|				И (НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|					ИЛИ ХарактерДеятельности В (&НедопустимыеХарактерыДеятельности))) КАК ИПИныеМатериальныеРасходыОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
		|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
		|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат,
		|	ИПИныеМатериальныеРасходыОстатки.Партия,
		|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
		|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
		|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИППрочиеРасходыОбороты.НоменклатурнаяГруппа,
		|	ИППрочиеРасходыОбороты.ХарактерДеятельности,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	&Прочее,
		|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
		|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
		|	ИППрочиеРасходыОбороты.ДокументОплаты,
		|	ИППрочиеРасходыОбороты.СчетУчета,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	СУММА(ИППрочиеРасходыОбороты.СуммаОборот),
		|	СУММА(ИППрочиеРасходыОбороты.НДСОборот),
		|	ИППрочиеРасходыОбороты.Период
		|ИЗ
		|	РегистрНакопления.ИППрочиеРасходы.Обороты(
		|			&НачалоМесяца,
		|			&КонецМесяца,
		|			Месяц,
		|			Организация = &Организация
		|				И (НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|					ИЛИ ХарактерДеятельности В (&НедопустимыеХарактерыДеятельности))) КАК ИППрочиеРасходыОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ИППрочиеРасходыОбороты.НоменклатурнаяГруппа,
		|	ИППрочиеРасходыОбороты.ХарактерДеятельности,
		|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
		|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
		|	ИППрочиеРасходыОбороты.ДокументОплаты,
		|	ИППрочиеРасходыОбороты.СчетУчета,
		|	ИППрочиеРасходыОбороты.Период
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИПРасходыНаОплатуТрудаОбороты.НоменклатурнаяГруппа,
		|	ИПРасходыНаОплатуТрудаОбороты.ХарактерДеятельности,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ИПРасходыНаОплатуТрудаОбороты.ВидНачисленияУдержания,
		|	ИПРасходыНаОплатуТрудаОбороты.СтатьяЗатрат,
		|	ИПРасходыНаОплатуТрудаОбороты.РасчетныйДокумент,
		|	ИПРасходыНаОплатуТрудаОбороты.ДокументОплаты,
		|	ИПРасходыНаОплатуТрудаОбороты.ФизЛицо,
		|	ИПРасходыНаОплатуТрудаОбороты.Контрагент,
		|	0,
		|	ИПРасходыНаОплатуТрудаОбороты.СуммаОборот,
		|	0,
		|	ИПРасходыНаОплатуТрудаОбороты.Период
		|ИЗ
		|	РегистрНакопления.ИПРасходыНаОплатуТруда.Обороты(
		|			&НачалоМесяца,
		|			&КонецМесяца,
		|			Месяц,
		|			Организация = &Организация
		|				И (НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|					ИЛИ ХарактерДеятельности В (&НедопустимыеХарактерыДеятельности))) КАК ИПРасходыНаОплатуТрудаОбороты
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИПРБПОбороты.НоменклатурнаяГруппа,
		|	ИПРБПОбороты.ХарактерДеятельности,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ИПРБПОбороты.ВидРасхода,
		|	ИПРБПОбороты.Партия,
		|	ИПРБПОбороты.ДокументОплаты,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	ИПРБПОбороты.СуммаРасход,
		|	ИПРБПОбороты.НДСРасход,
		|	&Период
		|ИЗ
		|	РегистрНакопления.ИПРБП.Обороты(
		|			&НачалоМесяца,
		|			&КонецМесяца,
		|			Месяц,
		|			Организация = &Организация
		|				И (НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|					ИЛИ ХарактерДеятельности В (&НедопустимыеХарактерыДеятельности))
		|				И Партия <> НЕОПРЕДЕЛЕНО) КАК ИПРБПОбороты";
		
		Если БазаРаспределения.Количество() > 0 Тогда
			МПЗ = Запрос.Выполнить().Выбрать();
			
			Пока МПЗ.Следующий() Цикл
				
				// Если известна номенклатурная группа или характер деятельности,
				// то необходимо уточнить базу распределения.
				УточненнаяБаза = ДоходыИРасходыПредпринимателя.БазаУточненнаяПоХарактеруИГруппе(БазаРаспределения, МПЗ.НоменклатурнаяГруппа1, МПЗ.ХарактерДеятельности1);
				
				Если УточненнаяБаза.Количество() > 0 Тогда
					ДоходыИРасходыПредпринимателя.РаспределениеПоБазе(МПЗ, "Сумма", 2, "НДС", 2, "Количество", 3, УточненнаяБаза, "Доход", ИзмененияВидаДеятельности);
				КонецЕсли;
				
			КонецЦикла;
			
			ДатаРегистратора = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
			ДоходыИРасходыПредпринимателя.ИзменениеВидаДеятельности(СтруктураШапкиДокумента.Организация, ИзмененияВидаДеятельности, Движения, СтруктураШапкиДокумента.Дата, Ложь,, ДатаРегистратора);
			
			Для Каждого ИМР Из ИзмененияВидаДеятельности Цикл
				Если ИМР.ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы Тогда
					Движение = Движения.ИПИныеМатериальныеРасходы.ДобавитьРасход();
					Движение.Период = СтруктураШапкиДокумента.Дата;
					Движение.Организация  = СтруктураШапкиДокумента.Организация;
					Движение.НоменклатурнаяГруппа = ИМР.НоменклатурнаяГруппа2;
					Движение.ХарактерДеятельности = ИМР.ХарактерДеятельности2;
					Движение.СтатьяЗатрат = ИМР.Номенклатура;
					Движение.Партия = ИМР.Партия;
					Движение.ДокументОплаты = ИМР.ДокументОплаты;
					Движение.МПЗ = ИМР.МПЗ;
					Движение.ПартияМПЗ = ИМР.ПартияМПЗ;
					Движение.Количество = ИМР.Количество;
					Движение.Сумма = ИМР.Сумма;
					Движение.НДС = ИМР.НДС;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
			СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПИныеМатериальныеРасходы");
			ЗначенияБлокировки = Новый Соответствие;
			ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
			ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
		|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
		|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат КАК Номенклатура,
		|	ИПИныеМатериальныеРасходыОстатки.Партия,
		|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
		|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
		|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ,
		|	СУММА(ИПИныеМатериальныеРасходыОстатки.КоличествоОстаток) КАК Количество,
		|	СУММА(ИПИныеМатериальныеРасходыОстатки.СуммаОстаток) КАК Сумма,
		|	СУММА(ИПИныеМатериальныеРасходыОстатки.НДСОстаток) КАК НДС
		|ИЗ
		|	РегистрНакопления.ИПИныеМатериальныеРасходы.Остатки(
		|			&КонецМесяца,
		|			Организация = &Организация
		|				И МПЗ = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|				И ПартияМПЗ = НЕОПРЕДЕЛЕНО) КАК ИПИныеМатериальныеРасходыОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
		|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
		|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат,
		|	ИПИныеМатериальныеРасходыОстатки.Партия,
		|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
		|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
		|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ
		|
		|ДЛЯ ИЗМЕНЕНИЯ";
		
		ИМР = Запрос.Выполнить().Выбрать();
		
		Пока ИМР.Следующий() Цикл
			Движение = Движения.ИПИныеМатериальныеРасходы.ДобавитьРасход();
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.Организация  = СтруктураШапкиДокумента.Организация;
			Движение.НоменклатурнаяГруппа = ИМР.НоменклатурнаяГруппа;
			Движение.ХарактерДеятельности = ИМР.ХарактерДеятельности;
			Движение.СтатьяЗатрат = ИМР.Номенклатура;
			Движение.Партия = ИМР.Партия;
			Движение.ДокументОплаты = ИМР.ДокументОплаты;
			Движение.МПЗ = ИМР.МПЗ;
			Движение.ПартияМПЗ = ИМР.ПартияМПЗ;
			Движение.Количество = ИМР.Количество;
			Движение.Сумма = ИМР.Сумма;
			Движение.НДС = ИМР.НДС;
		КонецЦикла;
	КонецЕсли;
	
	// Распределение ИМР по стоимости партий МПЗ
	ИзмененияВидаДеятельности.Очистить();
	Движения.ИПИныеМатериальныеРасходы.Записать(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ИМР", Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа1,
	|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности КАК ХарактерДеятельности1,
	|	НЕОПРЕДЕЛЕНО КАК НоменклатурнаяГруппа2,
	|	НЕОПРЕДЕЛЕНО КАК ХарактерДеятельности2,
	|	&ИМР КАК ВидМПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат КАК Номенклатура,
	|	ИПИныеМатериальныеРасходыОстатки.Партия,
	|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
	|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ,
	|	СУММА(ИПИныеМатериальныеРасходыОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(ИПИныеМатериальныеРасходыОстатки.СуммаОстаток) КАК Сумма,
	|	СУММА(ИПИныеМатериальныеРасходыОстатки.НДСОстаток) КАК НДС
	|ИЗ
	|	РегистрНакопления.ИПИныеМатериальныеРасходы.Остатки(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И МПЗ <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И ПартияМПЗ <> НЕОПРЕДЕЛЕНО) КАК ИПИныеМатериальныеРасходыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
	|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
	|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат,
	|	ИПИныеМатериальныеРасходыОстатки.Партия,
	|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
	|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ
	|
	|ДЛЯ ИЗМЕНЕНИЯ";
	
	НераспределенныеИМР = Запрос.Выполнить().Выгрузить();
	
	СписокМПЗ = НераспределенныеИМР.ВыгрузитьКолонку("МПЗ");
	СписокПартийМПЗ = НераспределенныеИМР.ВыгрузитьКолонку("ПартияМПЗ");
	
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокМПЗ);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокПартийМПЗ);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачГраница);
	Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
	Запрос.УстановитьПараметр("Номенклатура", СписокМПЗ);
	Запрос.УстановитьПараметр("Партии", СписокПартийМПЗ);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.ХарактерДеятельности,
	|	ВложенныйЗапрос.Партия,
	|	ВложенныйЗапрос.Номенклатура,
	|	СУММА(ВложенныйЗапрос.Расход) КАК Расход,
	|	СУММА(ВложенныйЗапрос.Остаток) КАК Остаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИПМПЗОстаткиИОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|		ИПМПЗОстаткиИОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
	|		ИПМПЗОстаткиИОбороты.Партия КАК Партия,
	|		ИПМПЗОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|		0 КАК Расход,
	|		ИПМПЗОстаткиИОбороты.СуммаКонечныйОстаток КАК Остаток
	|	ИЗ
	|		РегистрНакопления.ИПМПЗ.ОстаткиИОбороты(
	|				&НачалоМесяца,
	|				&КонецМесяца,
	|				,
	|				Движения,
	|				Организация = &Организация
	|					И Номенклатура В (&Номенклатура)
	|					И Партия В (&Партии)) КАК ИПМПЗОстаткиИОбороты
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ИПМПЗОтгруженныеОстаткиИОбороты.НоменклатурнаяГруппа,
	|		ИПМПЗОтгруженныеОстаткиИОбороты.ХарактерДеятельности,
	|		ИПМПЗОтгруженныеОстаткиИОбороты.Партия,
	|		ИПМПЗОтгруженныеОстаткиИОбороты.Номенклатура,
	|		ИПМПЗОтгруженныеОстаткиИОбороты.СуммаРасход,
	|		ИПМПЗОтгруженныеОстаткиИОбороты.СуммаКонечныйОстаток
	|	ИЗ
	|		РегистрНакопления.ИПМПЗОтгруженные.ОстаткиИОбороты(
	|				&НачалоМесяца,
	|				&КонецМесяца,
	|				,
	|				Движения,
	|				Организация = &Организация
	|					И Номенклатура В (&Номенклатура)
	|					И Партия В (&Партии)) КАК ИПМПЗОтгруженныеОстаткиИОбороты
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.НоменклатурнаяГруппа,
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.ХарактерДеятельности,
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.Партия,
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.СтатьяЗатрат,
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.СуммаРасход,
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.СуммаКонечныйОстаток
	|	ИЗ
	|		РегистрНакопления.ИПИныеМатериальныеРасходы.ОстаткиИОбороты(
	|				&НачалоМесяца,
	|				&КонецМесяца,
	|				,
	|				Движения,
	|				Организация = &Организация
	|					И СтатьяЗатрат В (&Номенклатура)
	|					И Партия В (&Партии)) КАК ИПИныеМатериальныеРасходыОстаткиИОбороты) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.ХарактерДеятельности,
	|	ВложенныйЗапрос.Партия,
	|	ВложенныйЗапрос.Номенклатура
	|
	|ДЛЯ ИЗМЕНЕНИЯ";
	
	БазаРаспределенияДопРасходов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ИМР Из НераспределенныеИМР Цикл
		ОтборСтрокБазы.Очистить();
		ОтборСтрокБазы.Вставить("Партия", ИМР.ПартияМПЗ);
		ОтборСтрокБазы.Вставить("Номенклатура", ИМР.МПЗ);
		УточненнаяБаза = БазаРаспределенияДопРасходов.Скопировать(БазаРаспределенияДопРасходов.НайтиСтроки(ОтборСтрокБазы));
		
		Если УточненнаяБаза.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Расход = УточненнаяБаза.Итог("Расход");
		Остаток = УточненнаяБаза.Итог("Остаток");
		
		Если (Остаток <> 0) И ((Остаток + Расход) <> 0) Тогда
			ИМР.Сумма = Окр(ИМР.Сумма * Расход / (Остаток + Расход), 2, 1); 
			ИМР.Количество = Окр(ИМР.Количество * Расход / (Остаток + Расход), 3, 1);
			ИМР.НДС = Окр(ИМР.НДС * Расход / (Остаток + Расход), 2, 1);
		КонецЕсли;
		
		Если ИМР.Сумма <> 0 Тогда
			ДоходыИРасходыПредпринимателя.РаспределениеПоБазе(ИМР, "Сумма", 2, "НДС", 2, "Количество", 3, УточненнаяБаза, "Расход", ИзмененияВидаДеятельности);
		КонецЕсли;
	КонецЦикла;
	
	ДатаРегистратора = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
	ДоходыИРасходыПредпринимателя.ИзменениеВидаДеятельности(СтруктураШапкиДокумента.Организация, ИзмененияВидаДеятельности, Движения, СтруктураШапкиДокумента.Дата, Ложь,, ДатаРегистратора);
	
	Для Каждого ИМР Из ИзмененияВидаДеятельности Цикл
		Движение = Движения.ИПИныеМатериальныеРасходы.ДобавитьРасход();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация  = СтруктураШапкиДокумента.Организация;
		Движение.НоменклатурнаяГруппа = ИМР.НоменклатурнаяГруппа2;
		Движение.ХарактерДеятельности = ИМР.ХарактерДеятельности2;
		Движение.СтатьяЗатрат = ИМР.Номенклатура;
		Движение.Партия = ИМР.Партия;
		Движение.ДокументОплаты = ИМР.ДокументОплаты;
		Движение.МПЗ = ИМР.МПЗ;
		Движение.ПартияМПЗ = ИМР.ПартияМПЗ;
		Движение.Количество = ИМР.Количество;
		Движение.Сумма = ИМР.Сумма;
		Движение.НДС = ИМР.НДС;
	КонецЦикла;
	
	Движения.ИПИныеМатериальныеРасходы.Записать(Ложь);
	Движения.ИППрочиеРасходы.Записать(Ложь);
	
	
КонецПроцедуры
// }УчетДоходовИРасходовИП

// {ОбособленныеПодразделения
Процедура РасчетДолиБазыНалогаНаПрибыль(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ)
	
	ЗапросВР = Новый Запрос;
	ЗапросВР.УстановитьПараметр("НачалоГода",     мНачГода);
	ЗапросВР.УстановитьПараметр("КонецМесяца",    мКонГраница);
	ЗапросВР.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.СписокОП);
	ЗапросВР.УстановитьПараметр("Пусто", Справочники.РегистрацияВИФНС.ПустаяСсылка());
	ЗапросВР.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
    ЗапросВР.УстановитьПараметр("КапВложенияВАренду", Перечисления.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество);
    ЗапросВР.УстановитьПараметр("ВидСубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);

	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	ЗапросВР.УстановитьПараметр("СчетАмортизируемогоИмущества", Счета);
	
	ЗапросВР.Текст = "ВЫБРАТЬ
	                 |	ВЫБОР
	                 |		КОГДА ХозрасчетныйОстаткиИОбороты.Подразделение.РегистрацияВИФНС = NULL
	                 |				ИЛИ ХозрасчетныйОстаткиИОбороты.Подразделение.РегистрацияВИФНС = НЕОПРЕДЕЛЕНО
	                 |				ИЛИ ХозрасчетныйОстаткиИОбороты.Подразделение.РегистрацияВИФНС = &Пусто
	                 |				ИЛИ ХозрасчетныйОстаткиИОбороты.Подразделение = &ПустоеПодразделение
	                 |			ТОГДА ХозрасчетныйОстаткиИОбороты.Организация.РегистрацияВИФНС
	                 |		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.Подразделение.РегистрацияВИФНС
	                 |	КОНЕЦ КАК ИФНС,
	                 |	ХозрасчетныйОстаткиИОбороты.Период КАК Период,
	                 |	ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстаток КАК Сумма,
	                 |	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
	                 |	ХозрасчетныйОстаткиИОбороты.Подразделение КАК Подразделение
	                 |ИЗ
	                 |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоГода, &КонецМесяца, Месяц, , Счет В ИЕРАРХИИ (&СчетАмортизируемогоИмущества), &ВидСубконтоОС, Организация В ИЕРАРХИИ (&Организация) И НЕ ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОсновныеСредства).ГруппаОС = &КапВложенияВАренду) КАК ХозрасчетныйОстаткиИОбороты
	                 |ИТОГИ
	                 |	СУММА(Сумма)
	                 |ПО
	                 |	Период ПЕРИОДАМИ(МЕСЯЦ, , ),
	                 |	ИФНС,
	                 |	Организация,
	                 |	Подразделение";
	
	
	Результат = ЗапросВР.Выполнить().Выбрать(,"Период", "Все");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИФНС", Новый ОписаниеТипов("СправочникСсылка.РегистрацияВИФНС"));
	Таблица.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	Таблица.Колонки.Добавить("Период");
	Таблица.Колонки.Добавить("Организация");
	Таблица.Колонки.Добавить("Подразделение");
	
	Пока Результат.Следующий() Цикл
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Организация) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.Подразделение =  NULL Тогда
					Продолжить;
			КонецЕсли;
			
			Строка = Таблица.Добавить();
			Строка.ИФНС = Выборка.ИФНС;
		    Строка.Сумма = Выборка.Сумма;
		    Строка.Период = Выборка.Период;
			Строка.Организация = Выборка.Организация;
			Строка.Подразделение = ?(ЗначениеЗаполнено(Выборка.Подразделение), Выборка.Подразделение, "");
	КонецЦикла;
КонецЦикла;

	Таблица.Свернуть("ИФНС,Период,Организация,Подразделение,Сумма");
	Таблица.Свернуть("ИФНС","Сумма");
	
	ЗапросВр = Новый Запрос;
	ЗапросВр.УстановитьПараметр("Таблица",     Таблица);
	ЗапросВр.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросВр.Текст = 
	 "ВЫБРАТЬ
	 |	Таблица.Сумма,
	 |	Таблица.ИФНС
	 |ПОМЕСТИТЬ АмортизацияПоМесяцам
	 |ИЗ
	 |	&Таблица КАК Таблица";
	 
	 ЗапросВр.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ЗапросВР.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоГода",     мНачГода);
	Запрос.УстановитьПараметр("НачалоМесяца",   мНачГраница);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонГраница);
	Запрос.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.СписокОП);
	Запрос.УстановитьПараметр("ПрибылиИУбытки", Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
	Запрос.УстановитьПараметр("СубконтоПрибылиИУбытки", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки);
	Запрос.УстановитьПараметр("СубконтоСтатьяЗатрат",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("Счет90",        ПланыСчетов.Хозрасчетный.Продажи);
	Запрос.УстановитьПараметр("Пусто", Справочники.РегистрацияВИФНС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
    Запрос.УстановитьПараметр("КапВложенияВАренду", Перечисления.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество);
    Запрос.УстановитьПараметр("ВидСубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ВидыРасходовНУ.ОплатаТруда);
	Массив.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование);
	Массив.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
	Массив.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников);
	Запрос.УстановитьПараметр("ОплатаТруда", Массив);
	
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
    Массив.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ИздержкиОбращения);
	Запрос.УстановитьПараметр("СчетаЗатрат", Массив);
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	
	Запрос.УстановитьПараметр("СчетАмортизируемогоИмущества", Счета);
	
    КоэффициентМесяца = Месяц(мКонДата) + 1;	
	Запрос.УстановитьПараметр("КоэффициентМесяца", КоэффициентМесяца);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФилиалыВсего.РегистрацияВИФНС КАК РегистрацияВИФНС,
	               |	ФилиалыВсего.РасходыПоОплатеТруда КАК РасходыПоОплатеТруда,
	               |	(ФилиалыВсего.СтоимостьОСПрошлыхМесяцев + ФилиалыВсего.СтоимостьОССледующегоМесяца) / &КоэффициентМесяца КАК СтоимостьАмортизируемогоИмущества,
	               |	ФилиалыВсего.СтоимостьОСПрошлыхМесяцев КАК СтоимостьОСПрошлыхМесяцев,
	               |	ФилиалыВсего.СтоимостьОССледующегоМесяца КАК СтоимостьОССледующегоМесяца
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ФилиалыГруппа.ИФНС КАК РегистрацияВИФНС,
	               |		СУММА(ЕСТЬNULL(ФилиалыГруппа.РасходыПоОплатеТруда, 0)) КАК РасходыПоОплатеТруда,
	               |		СУММА(ФилиалыГруппа.Сумма1) КАК СтоимостьОСПрошлыхМесяцев,
	               |		СУММА(ФилиалыГруппа.Сумма2) КАК СтоимостьОССледующегоМесяца
	               |	ИЗ
	               |		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			Филиалы.РасходыПоОплатеТруда КАК РасходыПоОплатеТруда,
	               |			ФилиалыНП.ИФНС КАК ИФНС,
	               |			Филиалы.Сумма1 КАК Сумма1,
	               |			Филиалы.Сумма2 КАК Сумма2
	               |		ИЗ
	               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				ВЫБОР
	               |					КОГДА ХозрасчетныйОбороты.Подразделение.РегистрацияВИФНС = NULL
	               |							ИЛИ ХозрасчетныйОбороты.Подразделение.РегистрацияВИФНС = НЕОПРЕДЕЛЕНО
	               |							ИЛИ ХозрасчетныйОбороты.Подразделение.РегистрацияВИФНС = &Пусто
	               |							ИЛИ ХозрасчетныйОбороты.Подразделение = &ПустоеПодразделение
	               |						ТОГДА ХозрасчетныйОбороты.Организация.РегистрацияВИФНС
	               |					ИНАЧЕ ХозрасчетныйОбороты.Подразделение.РегистрацияВИФНС
	               |				КОНЕЦ КАК ИФНС
	               |			ИЗ
	               |				РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоГода, &КонецМесяца, , , , Организация В ИЕРАРХИИ (&Организация), , ) КАК ХозрасчетныйОбороты) КАК ФилиалыНП
	               |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					ВЫБОР
	               |						КОГДА ОплатаТруда.Подразделение.РегистрацияВИФНС = NULL
	               |								ИЛИ ОплатаТруда.Подразделение.РегистрацияВИФНС = НЕОПРЕДЕЛЕНО
	               |								ИЛИ ОплатаТруда.Подразделение.РегистрацияВИФНС = &Пусто
	               |								ИЛИ ОплатаТруда.Подразделение = &ПустоеПодразделение
	               |							ТОГДА ОплатаТруда.Организация.РегистрацияВИФНС
	               |						ИНАЧЕ ОплатаТруда.Подразделение.РегистрацияВИФНС
	               |					КОНЕЦ КАК ИФНС,
	               |					СУММА(ОплатаТруда.СуммаНУОборотДт) КАК РасходыПоОплатеТруда,
	               |					0 КАК Сумма2,
	               |					0 КАК Сумма1
	               |				ИЗ
	               |					РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |							&НачалоГода,
	               |							&КонецМесяца,
	               |							,
	               |							Счет В ИЕРАРХИИ (&СчетаЗатрат),
	               |							&СубконтоСтатьяЗатрат,
	               |							Организация В ИЕРАРХИИ (&Организация)
	               |								И Субконто1.ВидРасходовНУ В (&ОплатаТруда),
	               |							(НЕ КорСчет В ИЕРАРХИИ (&СчетаЗатрат)),
	               |							) КАК ОплатаТруда
	               |				
	               |				СГРУППИРОВАТЬ ПО
	               |					ВЫБОР
	               |						КОГДА ОплатаТруда.Подразделение.РегистрацияВИФНС = NULL
	               |								ИЛИ ОплатаТруда.Подразделение.РегистрацияВИФНС = НЕОПРЕДЕЛЕНО
	               |								ИЛИ ОплатаТруда.Подразделение.РегистрацияВИФНС = &Пусто
	               |								ИЛИ ОплатаТруда.Подразделение = &ПустоеПодразделение
	               |							ТОГДА ОплатаТруда.Организация.РегистрацияВИФНС
	               |						ИНАЧЕ ОплатаТруда.Подразделение.РегистрацияВИФНС
	               |					КОНЕЦ
	               |				
	               |				ОБЪЕДИНИТЬ ВСЕ
	               |				
	               |				ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					ВЫБОР
	               |						КОГДА АмортизируемоеИмущество.Подразделение.РегистрацияВИФНС = NULL
	               |								ИЛИ АмортизируемоеИмущество.Подразделение.РегистрацияВИФНС = НЕОПРЕДЕЛЕНО
	               |								ИЛИ АмортизируемоеИмущество.Подразделение.РегистрацияВИФНС = &Пусто
	               |								ИЛИ АмортизируемоеИмущество.Подразделение = &ПустоеПодразделение
	               |							ТОГДА АмортизируемоеИмущество.Организация.РегистрацияВИФНС
	               |						ИНАЧЕ АмортизируемоеИмущество.Подразделение.РегистрацияВИФНС
	               |					КОНЕЦ,
	               |					0,
	               |					СУММА(АмортизируемоеИмущество.СуммаНУОстаток),
	               |					0
	               |				ИЗ
	               |					РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяца, Счет В ИЕРАРХИИ (&СчетАмортизируемогоИмущества), &ВидСубконтоОС, Организация В ИЕРАРХИИ (&Организация) И НЕ ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОсновныеСредства).ГруппаОС = &КапВложенияВАренду) КАК АмортизируемоеИмущество
	               |				
	               |				СГРУППИРОВАТЬ ПО
	               |					ВЫБОР
	               |						КОГДА АмортизируемоеИмущество.Подразделение.РегистрацияВИФНС = NULL
	               |								ИЛИ АмортизируемоеИмущество.Подразделение.РегистрацияВИФНС = НЕОПРЕДЕЛЕНО
	               |								ИЛИ АмортизируемоеИмущество.Подразделение.РегистрацияВИФНС = &Пусто
	               |								ИЛИ АмортизируемоеИмущество.Подразделение = &ПустоеПодразделение
	               |							ТОГДА АмортизируемоеИмущество.Организация.РегистрацияВИФНС
	               |						ИНАЧЕ АмортизируемоеИмущество.Подразделение.РегистрацияВИФНС
	               |					КОНЕЦ
	               |				
	               |				ОБЪЕДИНИТЬ ВСЕ
	               |				
	               |				ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					АмортизацияПоМесяцам.ИФНС,
	               |					0,
	               |					СУММА(0),
	               |					СУММА(АмортизацияПоМесяцам.Сумма)
	               |				ИЗ
	               |					АмортизацияПоМесяцам КАК АмортизацияПоМесяцам
	               |				
	               |				СГРУППИРОВАТЬ ПО
	               |					АмортизацияПоМесяцам.ИФНС) КАК Филиалы
	               |				ПО ФилиалыНП.ИФНС = Филиалы.ИФНС) КАК ФилиалыГруппа
	               |	ГДЕ
	               |		(ФилиалыГруппа.РасходыПоОплатеТруда = 0
	               |				ИЛИ ФилиалыГруппа.Сумма1 = 0
	               |				ИЛИ ФилиалыГруппа.Сумма2 = 0)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ФилиалыГруппа.ИФНС) КАК ФилиалыВсего";
	
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультат = Результат.Выгрузить();
	ТаблицаРезультат.Колонки.Добавить("Организация");
	ТаблицаРезультат.Колонки.Добавить("ПериодРасчета");
	ТаблицаРезультат.Колонки.Добавить("Активность");
	ТаблицаРезультат.Колонки.Добавить("Регистратор");
	ТаблицаРезультат.Колонки.Добавить("ДоляНалоговойБазы");
	ТаблицаРезультат.ЗаполнитьЗначения(0,"ДоляНалоговойБазы");
	ВсегоАмортизация = ТаблицаРезультат.Итог("СтоимостьАмортизируемогоИмущества");
	ВсегоОплатаТруда = ТаблицаРезультат.Итог("РасходыПоОплатеТруда");
	
	
	Если  ВсегоОплатаТруда = 0 И ВсегоАмортизация = 0 Тогда
		ТаблицаРезультат.Очистить();
	Иначе
		Для Каждого Строка Из ТаблицаРезультат Цикл
			Если Строка.РегистрацияВИФНС = Null Тогда
				Продолжить;
			КонецЕсли;
			Если  ВсегоОплатаТруда = 0 И ВсегоАмортизация = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если  ВсегоОплатаТруда = 0  Тогда
				Строка.ДоляНалоговойБазы = (Строка.СтоимостьАмортизируемогоИмущества / ВсегоАмортизация) / 1;
			ИначеЕсли ВсегоАмортизация = 0  Тогда
				Строка.ДоляНалоговойБазы = (Строка.РасходыПоОплатеТруда / ВсегоОплатаТруда ) / 1;
			Иначе
				
				Строка.ДоляНалоговойБазы = (Строка.РасходыПоОплатеТруда / ВсегоОплатаТруда + Строка.СтоимостьАмортизируемогоИмущества / ВсегоАмортизация) / 2;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;	
	СтруктураДопПараметров.Вставить("ЗаписьДолиБазыНалогаНаПрибыль", ТаблицаРезультат);
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
		СтруктураДопПараметров.ЗаписьДолиБазыНалогаНаПрибыль, 
		РегистрыСведений.РасчетДолейБазыНалогаНаПрибыль,
		"Организация,ПериодРасчета,Активность,Регистратор,РегистрацияВИФНС,ДоляНалоговойБазы",
		"РасходыПоОплатеТруда,СтоимостьАмортизируемогоИмущества,СтоимостьОСПрошлыхМесяцев,СтоимостьОССледующегоМесяца");
КонецПроцедуры
// }ОбособленныеПодразделения 

// ПБУ 18
Процедура СформироватьПроводкиПоНалогуНаПрибыль(СуммаНалога, КоррСчет, Субконто = Неопределено, ПоДебету, СодержаниеПроводки, СуммаЕНВД = 0, Субконто68_4 = Неопределено, Субконто68_4_2 = Неопределено)
	
	Счет99 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
	
	Если Субконто68_4 <> Неопределено Тогда
		
		Счет68_04 = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	Иначе
		Счет68_04 = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	КонецЕсли;
	
	Счет68_04Дебет  = Счет68_04;
	Счет68_04Кредит = Счет68_04;
	
	Если Не СуммаЕНВД = 0 Тогда
		Если ОдногоЗнака(СуммаНалога, СуммаЕНВД) Тогда
			Если БольшеПоМодулюИлиРавно(СуммаНалога, СуммаЕНВД) Тогда
				СуммаНалога = СуммаНалога - СуммаЕНВД;
				Сумма99 = СуммаЕНВД;
				СуммаЕНВД = 0;
			Иначе
				Сумма99 = СуммаНалога;
				СуммаНалога = 0;
				СуммаЕНВД = СуммаЕНВД - Сумма99;
			КонецЕсли;
		Иначе
			Если БольшеПоМодулюИлиРавно(СуммаНалога, СуммаЕНВД) Тогда
				СуммаНалога = СуммаНалога + СуммаЕНВД;
				Сумма99 = - СуммаЕНВД;
				СуммаЕНВД = 0;
			Иначе
				Сумма99 = - СуммаНалога;
				СуммаНалога = 0;
				СуммаЕНВД = СуммаЕНВД + Сумма99;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Сумма99 = 0;
	КонецЕсли;
	
	
	Если СуммаНалога <> 0 Тогда
		
		Проводка = мПроводки.Добавить();
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Сумма        = СуммаНалога;
		Проводка.Содержание   = СодержаниеПроводки;
		
		Если ПоДебету = "Д" Тогда
			Проводка.СчетДт = КоррСчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто);
			Проводка.СчетКт = Счет68_04Кредит;
			Если Субконто68_4 <> Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Субконто68_4);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Субконто68_4_2);
			КонецЕсли;
		Иначе
			Проводка.СчетДт = Счет68_04Дебет;
			Если Субконто68_4 <> Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.Счетдт, Проводка.СубконтоДт, 2, Субконто68_4);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Субконто68_4_2);
			КонецЕсли;
			Проводка.СчетКт = КоррСчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто);
		КонецЕсли
	КонецЕсли;
	
	Если Сумма99 <> 0 Тогда
		
		Проводка = мПроводки.Добавить();
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Сумма        = Сумма99;
		Проводка.Содержание   = СодержаниеПроводки;
		
		Если ПоДебету = "Д" Тогда
			Проводка.СчетДт = КоррСчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Субконто68_4_2);
			Проводка.СчетКт = Счет99;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
		Иначе
			Проводка.СчетДт = Счет99;
			Проводка.СчетКт = КоррСчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Субконто68_4_2);
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры // СформироватьПроводкиПоНалогуНаПрибыль()

// Распределение налога на прибыль по бюджетам
//
Процедура СформироватьПроводкиПоНалогуНаПрибыльРасчетыСБюджетом(СтруктураШапкиДокумента,СтруктураДопПараметров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоГода",      мНачГода);
	Запрос.УстановитьПараметр("НачалоМесяца",    мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",     мКонГраница);
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ПрименениеПБУ18", СтруктураШапкиДокумента.ПрименениеПБУ18);
	
	ПрибылиИУбытки = Новый Массив;
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);
	Запрос.УстановитьПараметр("ПрибылиИУбытки", ПрибылиИУбытки);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотКт - ХозрасчетныйОбороты.СуммаНУОборотДт КАК БазаНалогаЗаГод,
	|	0 КАК Сумма68_04_2,
	|	0 КАК БазаНалогаЗаМесяц,
	|	0 КАК ОНАпоУбыткамПрошлыхМесяцев
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоГода,
	|			&КонецМесяца,
	|			,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки),
	|			Организация = &Организация
	|				И Субконто1 В (&ПрибылиИУбытки),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоГода, &КонецМесяца, , Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетНалогаНаПрибыль), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт - ХозрасчетныйОбороты.СуммаНУОборотДт,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки),
	|			Организация = &Организация
	|				И Субконто1 В (&ПрибылиИУбытки),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	ХозрасчетныйОстатки.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоМесяца,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств),
	|			&ПрименениеПБУ18
	|				И Организация = &Организация
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода)) КАК ХозрасчетныйОстатки";
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультат = Результат.Выгрузить();
	
	Запрос.УстановитьПараметр("Счет",              ПланыСчетов.Хозрасчетный.РасчетыСБюджетом);
	СписокСубконто = Новый Массив;
	СписокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
	СписокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	// {ОбособленныеПодразделения
	СписокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РегистрацияВИФНС);
	// }ОбособленныеПодразделения
	Запрос.УстановитьПараметр("ВидСубконто",    СписокСубконто);
	Запрос.УстановитьПараметр("ВидПлатежа",    Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК Налог
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоГода, &КонецМесяца, , Счет = &Счет, &ВидСубконто, Организация = &Организация И Субконто2 = &ВидПлатежа, , ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1,
	|	СУММА(-ХозрасчетныйОбороты.СуммаОборотКт)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет = &Счет, &ВидСубконто, Организация = &Организация И Субконто2 = &ВидПлатежа, , ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1";
	
	
	// {ОбособленныеПодразделения
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ХозрасчетныйОбороты.Субконто1","ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто3");
	// }ОбособленныеПодразделения
	
	Результат = Запрос.Выполнить();
	ТаблицаСубъектов = Результат.Выгрузить();
	
	БазаНалогаЗаГод = ТаблицаРезультат.Итог("БазаНалогаЗаГод");
	Сумма68_04_2    = ТаблицаРезультат.Итог("Сумма68_04_2");
	
	СтавкаФБ      = СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкаФБ;
	СтавкаРФ      = СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкаРФ;
	
	Счет68_04Дебет  = ?(СтруктураШапкиДокумента.ПрименениеПБУ18, ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль, ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД);
	Счет68_04Кредит = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	
	СуммаРасчетногоНалога = ТаблицаРезультат.Итог("ОНАпоУбыткамПрошлыхМесяцев");
	
	Если БазаНалогаЗаГод <> 0 Тогда
		
		СтрокаТаблицаСубъектов    = ТаблицаСубъектов.НайтиСтроки(Новый Структура("Субконто1", Перечисления.УровниБюджетов.ФедеральныйБюджет));
		СуммаНалогаПрошлыхМесяцев = ?(СтрокаТаблицаСубъектов = Неопределено ИЛИ СтрокаТаблицаСубъектов.Количество() = 0, 0, СтрокаТаблицаСубъектов[0].Налог);
		
		СуммаНалогаТекМесяца    = Окр(БазаНалогаЗаГод * СтавкаФБ, 2) - СуммаНалогаПрошлыхМесяцев;
		СуммаРасчетногоНалога   = СуммаРасчетногоНалога + СуммаНалогаТекМесяца;
		СуммаФедеральногоНалога = ?(БазаНалогаЗаГод > 0, СуммаНалогаТекМесяца, -СуммаНалогаПрошлыхМесяцев);
		
		Если СуммаФедеральногоНалога <> 0  Тогда
			Проводка = мПроводки.Добавить();
			Проводка.Период       = Дата;
			Проводка.Организация  = Организация;
			Проводка.Сумма        = СуммаФедеральногоНалога;
			Проводка.Содержание   = "Налог на прибыль";
			Проводка.СчетДт = Счет68_04Дебет;
			Если НЕ СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
			КонецЕсли;
			Проводка.СчетКт = Счет68_04Кредит;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Перечисления.УровниБюджетов.ФедеральныйБюджет);
			// {ОбособленныеПодразделения
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.Организация.РегистрацияВИФНС);
			// }ОбособленныеПодразделения 
		КонецЕсли;
		
		Если СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкиНалогаРФ <> Неопределено Тогда
			
			Если СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкиНалогаРФ.Количество() = 1 Тогда  
				СтрокаТаблицаСубъектов = ТаблицаСубъектов.НайтиСтроки(Новый Структура("Субконто1", Перечисления.УровниБюджетов.РегиональныйБюджет));
				СуммаНалогаПрошлыхМесяцев = ?(СтрокаТаблицаСубъектов = Неопределено ИЛИ СтрокаТаблицаСубъектов.Количество() = 0, 0, СтрокаТаблицаСубъектов[0].Налог);
				
				СуммаНалогаТекМесяца   = Окр(БазаНалогаЗаГод * СтавкаРФ, 2) - СуммаНалогаПрошлыхМесяцев;
				СуммаРасчетногоНалога  = СуммаРасчетногоНалога + СуммаНалогаТекМесяца;
				СуммаНалогаДляСубъекта = ?(БазаНалогаЗаГод > 0, СуммаНалогаТекМесяца, -СуммаНалогаПрошлыхМесяцев);
				
				Если СуммаНалогаДляСубъекта <> 0 Тогда
					Проводка = мПроводки.Добавить();
					Проводка.Период       = Дата;
					Проводка.Организация  = Организация;
					Проводка.Сумма        = СуммаНалогаДляСубъекта;
					Проводка.Содержание   = "Налог на прибыль";
					Проводка.СчетДт = Счет68_04Дебет;
					Если НЕ СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
					КонецЕсли;
					Проводка.СчетКт = Счет68_04Кредит;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Перечисления.УровниБюджетов.РегиональныйБюджет);
					// {ОбособленныеПодразделения
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Организация.РегистрацияВИФНС);
					// }ОбособленныеПодразделения
				КонецЕсли;	
				
			Иначе
				
				Для каждого Строка Из СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкиНалогаРФ Цикл
					Если  Строка.ПриведеннаяСтавка = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТаблицаСубъектов = ТаблицаСубъектов.НайтиСтроки(Новый Структура("Субконто3,Субконто1", Строка.РегистрацияИФНС,Перечисления.УровниБюджетов.РегиональныйБюджет));
					// {ОбособленныеПодразделения
					СтавкаРФ = Строка.ПриведеннаяСтавка/100;
					// }ОбособленныеПодразделения

					СуммаНалогаПрошлыхМесяцев = ?(СтрокаТаблицаСубъектов = Неопределено ИЛИ СтрокаТаблицаСубъектов.Количество() = 0, 0, СтрокаТаблицаСубъектов[0].Налог);
					
					СуммаНалогаТекМесяца   = Окр(БазаНалогаЗаГод * СтавкаРФ, 2) - СуммаНалогаПрошлыхМесяцев;
					СуммаРасчетногоНалога  = СуммаРасчетногоНалога + СуммаНалогаТекМесяца;
					СуммаНалогаДляСубъекта = ?(БазаНалогаЗаГод > 0, СуммаНалогаТекМесяца, -СуммаНалогаПрошлыхМесяцев);
				
					Если СуммаНалогаДляСубъекта <> 0 Тогда
						Проводка = мПроводки.Добавить();
						Проводка.Период       = Дата;
						Проводка.Организация  = Организация;
						Проводка.Сумма        = СуммаНалогаДляСубъекта;
						Проводка.Содержание   = "Налог на прибыль";
						Проводка.СчетДт = Счет68_04Дебет;
						Если НЕ СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
						КонецЕсли;
						Проводка.СчетКт = Счет68_04Кредит;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Перечисления.УровниБюджетов.РегиональныйБюджет);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Строка.РегистрацияИФНС);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			СтрокаТаблицаСубъектов = ТаблицаСубъектов.НайтиСтроки(Новый Структура("Субконто1", Перечисления.УровниБюджетов.РегиональныйБюджет));
			СуммаНалогаПрошлыхМесяцев = ?(СтрокаТаблицаСубъектов = Неопределено ИЛИ СтрокаТаблицаСубъектов.Количество() = 0, 0, СтрокаТаблицаСубъектов[0].Налог);
			
			СуммаНалогаТекМесяца   = Окр(БазаНалогаЗаГод * СтавкаРФ, 2) - СуммаНалогаПрошлыхМесяцев;
			СуммаРасчетногоНалога  = СуммаРасчетногоНалога + СуммаНалогаТекМесяца;
			СуммаНалогаДляСубъекта = ?(БазаНалогаЗаГод > 0, СуммаНалогаТекМесяца, -СуммаНалогаПрошлыхМесяцев);
				
			Если СуммаНалогаДляСубъекта <> 0 Тогда
				Проводка = мПроводки.Добавить();
				Проводка.Период       = Дата;
				Проводка.Организация  = Организация;
				Проводка.Сумма        = СуммаНалогаДляСубъекта;
				Проводка.Содержание   = "Налог на прибыль";
				Проводка.СчетДт = Счет68_04Дебет;
				Если НЕ СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
				КонецЕсли;
				Проводка.СчетКт = Счет68_04Кредит;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Перечисления.УровниБюджетов.РегиональныйБюджет);
				// {ОбособленныеПодразделения
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Организация.РегистрацияВИФНС);
				// }ОбособленныеПодразделения
			КонецЕсли;
			
		КонецЕсли;
		
		// {ОбособленныеПодразделения
		Если СтруктураШапкиДокумента.ПрименениеПБУ18
			И СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкиНалогаРФ <> Неопределено 
			И СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкиНалогаРФ.Количество() > 1 Тогда
			
			БазаНалогаЗаМесяц    = ТаблицаРезультат.Итог("БазаНалогаЗаМесяц");
			СтавкаТекущегоМесяца = ?(БазаНалогаЗаМесяц = 0, 0, СуммаРасчетногоНалога / БазаНалогаЗаМесяц);
			СтруктураДопПараметров.СтавкаПрибылиТекущегоМесяца = СтавкаТекущегоМесяца;
			
			ТаблицаСтавок = Новый ТаблицаЗначений;
			ТаблицаСтавок.Колонки.Добавить("Ставка");
			ТаблицаСтавок.Колонки.Добавить("СуммаНалога");
			ТаблицаСтавок.Колонки.Добавить("СуммаБазы");
			ТаблицаСтавок.Колонки.Добавить("Организация");
			ТаблицаСтавок.Колонки.Добавить("ПериодРасчета");
			ТаблицаСтавок.Колонки.Добавить("Регистратор");
			ТаблицаСтавок.Колонки.Добавить("Активность");
			
			СтрокаТаблицыСтавок = ТаблицаСтавок.Добавить();
			СтрокаТаблицыСтавок.Ставка      = СтавкаТекущегоМесяца*100;
			СтрокаТаблицыСтавок.СуммаНалога = СуммаРасчетногоНалога;
			СтрокаТаблицыСтавок.СуммаБазы   = БазаНалогаЗаМесяц;
			
			ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
				ТаблицаСтавок, 
				РегистрыСведений.РасчетСтавкиНалогаНаПрибыльЗаМесяц,
				"Организация,ПериодРасчета,Активность,Регистратор,Ставка,СуммаНалога,СуммаБазы",
				"");
			
		КонецЕсли;
		// }ОбособленныеПодразделения 
		
		мПроводки.Записать(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьПроводкиПоНалогуНаПрибыль()

// Рассчитываются постоянные налоговые обязательства (активы) и отражаются на
// счетах бухгалтерского учета.
//
Процедура 	РасчетПостоянныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Отложенный налоговый актив (обязательство) рассчитывается следующим образом:
	// Определяется сумма постоянных разниц, отраженных на счете Н99.01, и
	// умножается на ставку налога на прибыль.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачГраница);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонГраница);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.СписокОП);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);
    Массив.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
    Массив.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
    Массив.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
    Массив.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД);
    Массив.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД);
	Запрос.УстановитьПараметр("Счет90", Массив);
	Запрос.УстановитьПараметр("Счет91", ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("КорСчет",ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД);
	Запрос.УстановитьПараметр("ВидСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	Запрос.Текст = "ВЫБРАТЬ
                   |    СУММА(ХозрасчетныйОбороты.СуммаПРОборотДт) КАК СуммаОборотДт,
                   |    СУММА(ХозрасчетныйОбороты.СуммаПРОборотКт) КАК СуммаОборотКт
                   |ИЗ
                   |    РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&Счет90), , Организация В ИЕРАРХИИ (&Организация), (НЕ КорСчет В ИЕРАРХИИ (&КорСчет)), ) КАК ХозрасчетныйОбороты
                   |
                   |ДЛЯ ИЗМЕНЕНИЯ
                   |    РегистрБухгалтерии.Хозрасчетный.Обороты
                   |
                   |ОБЪЕДИНИТЬ ВСЕ
                   |
                   |ВЫБРАТЬ
                   |    СУММА(ХозрасчетныйОбороты.СуммаПРОборотДт),
                   |    СУММА(ХозрасчетныйОбороты.СуммаПРОборотКт)
                   |ИЗ
                   |    РегистрБухгалтерии.Хозрасчетный.Обороты(
                   |            &НачалоМесяца,
                   |            &КонецМесяца,
                   |            ,
                   |            Счет В ИЕРАРХИИ (&Счет91),
                   |            &ВидСубконто,
                   |            Организация В ИЕРАРХИИ (&Организация)
                   |                И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД),
                   |            (НЕ КорСчет В ИЕРАРХИИ (&КорСчет)),
                   |            ) КАК ХозрасчетныйОбороты
                   |
                   |ДЛЯ ИЗМЕНЕНИЯ
                   |    РегистрБухгалтерии.Хозрасчетный.Обороты";
	
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	СуммаПНА = Окр(ТаблицаРезультат.Итог("СуммаОборотКт") * мСтавкаНалогаНаПрибыль, 2);
	СуммаПНО = Окр(ТаблицаРезультат.Итог("СуммаОборотДт") * мСтавкаНалогаНаПрибыль, 2);
	Счет99_02_3  = ПланыСчетов.Хозрасчетный.ПостоянноеНалоговоеОбязательство;
	
	Если СуммаПНО <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаПНО, Счет99_02_3,, "Д", "Постоянное налоговое обязательство");
	КонецЕсли;
	
	Если СуммаПНА <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаПНА, Счет99_02_3,, "К", "Постоянный налоговый актив");
	КонецЕсли;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры  // РасчетПостоянныхРазниц

// Упорядочиваются данный для передачи их в процедуру,
// которая формирует записи по счету 68.4.
//
Процедура ОтражениеОНАиОНО(ВидАктивовОбязательств,  ВременныеРазницы)
	
	Счет09 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
	Счет77 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства;
	СуммаДт09 = ВременныеРазницы.СуммаДт09;
	СуммаКт09 = ВременныеРазницы.СуммаКт09;
	СуммаДт77 = ВременныеРазницы.СуммаДт77;
	СуммаКт77 = ВременныеРазницы.СуммаКт77;
	СуммаЕНВД = ВременныеРазницы.СуммаЕНВД;
	
	// Образование отложенного налогового обязательства
	Если СуммаДт09 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаДт09, Счет09, ВидАктивовОбязательств, "Д", "Признание отложенного налогового актива", СуммаЕНВД);
	КонецЕсли;
	
	// Погашение отложенного налогового обязательства
	Если СуммаКт09 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаКт09, Счет09, ВидАктивовОбязательств, "К", "Погашение отложенного налогового актива", СуммаЕНВД);
	КонецЕсли;
	
	// Образование отложенного налогового обязательства
	Если СуммаКт77 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаКт77, Счет77, ВидАктивовОбязательств, "К", "Признание отложенного налогового обязательства", СуммаЕНВД);
	КонецЕсли;
	
	// Погашение отложенного налогового обязательства
	Если СуммаДт77 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаДт77, Счет77, ВидАктивовОбязательств, "Д", "Погашение отложенного налогового обязательства", СуммаЕНВД);
	КонецЕсли;
	
КонецПроцедуры

Функция ОдногоЗнака(Число1, Число2) 
	Возврат (Число1 * Число2 >= 0);
КонецФункции

Функция  БольшеПоМодулюИлиРавно(Число1, Число2)
	МодульЧисло1 = ?(Число1 > 0, Число1, - Число1);
	МодульЧисло2 = ?(Число2 > 0, Число2, - Число2);
	
	Возврат (МодульЧисло1 - МодульЧисло2 >= 0);
КонецФункции

// Рассчитывается отложенные налоговый актив по убыткам текущего
// периода и отражается на счете 09.
//
Процедура РассчитатьОНАПоУбыткамТекущегоПериода(СтрокаВидАктиваОбязательства, СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",мНачГраница);
	Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.СписокОП);
	Запрос.УстановитьПараметр("Счет99_01",   ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД);
	Запрос.УстановитьПараметр("Счет09",      ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	Запрос.УстановитьПараметр("Субконто1",   Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода);
	Запрос.УстановитьПараметр("Субконто2",   Перечисления.ВидыАктивовИОбязательств.РасходыБудущихПериодов);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК УбытокНУ,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК УбытокБУ,
	|	0 КАК СуммаОстаток09
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяца, Счет В ИЕРАРХИИ (&Счет99_01), , Организация В ИЕРАРХИИ (&Организация)) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	ХозрасчетныйОстатки.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяца, Счет В ИЕРАРХИИ (&Счет09), , Организация В ИЕРАРХИИ ( &Организация)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.Субконто1 = &Субконто1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Месяц,
	|			СчетДт В ИЕРАРХИИ (&Счет09),
	|			,
	|			СчетКт В ИЕРАРХИИ (&Счет09),
	|			,
	|			Организация В ИЕРАРХИИ (&Организация)
	|				И СубконтоДт1 = &Субконто2
	|				И СубконтоКт1 = &Субконто1) КАК ХозрасчетныйОборотыДтКт";
	
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультат     = Результат.Выгрузить();
	Сумма    = ТаблицаРезультат.Итог("УбытокНУ") * мСтавкаНалогаНаПрибыль - ТаблицаРезультат.Итог("СуммаОстаток09");
	УбытокБУ = ТаблицаРезультат.Итог("УбытокБУ");
	
	СуммаДт77 = 0;
	СуммаКт77 = 0;
	СуммаДт09 = 0;
	СуммаКт09 = 0;
	
	Если Сумма > 0 Тогда
		СуммаДт09 = Сумма;
	Иначе
		СуммаКт09 =- Сумма;
	КонецЕсли;
	
	Если Сумма <> 0 Тогда
		ОтражениеОНАиОНО(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств, Новый Структура("СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД", СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, 0));
	КонецЕсли;
	
КонецПроцедуры // ВременныеРазницыПоУбыткамТекущегоПериода()

// Рассчитываются отложенные налоговые обязательства и
// отложенные налоговые активы по конкретному виду активов
// (обязательств).
//
// Параметры:
//		СтрокаВидАктиваОбязательства - строка таблицы, в которой задано соответствие
//			вида актива (обязательства) и счетов налогового учета, на которых
//			отражаются разницы по этому виду активов.
//
Процедура РассчитатьОНО_ОНА(СтрокаВидАктиваОбязательства, СтруктураШапкиДокумента)
	
	// Порядок расчета:
	// 1. Определяется остаток налогооблагаемых и вычитаемых разниц по виду активов в целом.
	// 2. Исходя из остатка разниц рассчитывается остаток отложенных налоговых активов
	//    и обязательств, который должен быть отражен на счетах 09 и 77 на конец месяца.
	// 3. Определяется сумма отложенных налоговых активов и обязательств, которая отражена
	//    на счетах 09 и 77 на конец месяца.
	// 4. Счета 09 и 77 корректируются на сумму разниц того что отражено на счете и того,
	//    что должно быть по результатам расчета.
	
	// Получить временные разницы, отраженные на плане счетов
	// по данному виду ОНА (ОНО), распределив их на вычитаемые и налогооблагаемые разницы.
	ВедетсяУчетПоПодразделениям = СтрокаВидАктиваОбязательства.Счета[0].УчетПоПодразделениям;
	ОборотыВременныхРазниц = НалоговыйУчет.ОборотыВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства, Новый Структура("НачГраница,КонГраница,Организация, КоэффициентЕНВД",мНачГраница,мКонГраница,Организация, КоэффициентЕНВД),СтруктураШапкиДокумента, ВедетсяУчетПоПодразделениям);
	
	Если  ОборотыВременныхРазниц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	СуммаДт09 = Окр(ОборотыВременныхРазниц.Итог("СуммаДт09") * мСтавкаНалогаНаПрибыль, 2);
	СуммаКт09 = Окр(ОборотыВременныхРазниц.ИТог("СуммаКт09") * мСтавкаНалогаНаПрибыль, 2);
	СуммаДт77 = Окр(ОборотыВременныхРазниц.Итог("СуммаДт77") * мСтавкаНалогаНаПрибыль, 2);
	СуммаКт77 = Окр(ОборотыВременныхРазниц.ИТог("СуммаКт77") * мСтавкаНалогаНаПрибыль, 2);
	СуммаЕНВД = Окр(ОборотыВременныхРазниц.ИТог("СуммаЕНВД") * мСтавкаНалогаНаПрибыль, 2);
	
	ОтражениеОНАиОНО(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств, Новый Структура("СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД", СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД));
	
КонецПроцедуры

// Рассчитываются отложенные налоговые обязательства и
// отложенные налоговые активы.
// 

Процедура 	РасчетВременныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Формируется таблица в которой задано соответствие видов 
	// активов (обязательств) счетам налогового учета.
	
	// {ОбособленныеПодразделения   
	Если СтруктураШапкиДокумента.РазныеСтавкиНалогаНаПрибыль И СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда	
		ПересчетОНАиОНО(СтруктураШапкиДокумента, мПроводки, НачалоМесяца(СтруктураШапкиДокумента.Дата)-1, КонецМесяца(СтруктураШапкиДокумента.Дата), Ложь);
	КонецЕсли;
	// }ОбособленныеПодразделения 
	
	
	ТаблицаВидовАктивовИОбязательств = НалоговыйУчет.ПолучитьТаблицуВидовАктивовИОбязательств();
	КоэффициентЕНВД = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, мКонДата, мНачДата, "НУ");
	
	// Рассчитываем отложенные налоговые обязательства и активы и отражаем их.
	Для каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательств Цикл
		
		Если СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода Тогда
			РассчитатьОНАПоУбыткамТекущегоПериода(СтрокаВидАктиваОбязательства,СтруктураШапкиДокумента);
		Иначе
			РассчитатьОНО_ОНА(СтрокаВидАктиваОбязательства,СтруктураШапкиДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
	
КонецПроцедуры  // РасчетПостоянныхРазниц

Процедура 	РасчетНалогаНаПрибыль(СтруктураШапкиДокумента,СтруктураДопПараметров, Отказ, Заголовок) 
	
	// Условный расход (условный доход) по налогу на прибыль
	// рассчитывается следующим образом: определяется сумма
	// бухгалтерской прибыли (убытка) и умножается на ставку
	// налога на прибыль.
	
	// Виды прибылей и убытков, которые учитываются при расчете
	// условного расхода (условного дохода) по налогу на прибыль.
	
	ПрибылиИУбытки = Новый Массив;
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",   мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонГраница);
	Запрос.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.СписокОП);
	Запрос.УстановитьПараметр("Счет",           ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД);
	Запрос.УстановитьПараметр("Счет68",         ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
	Запрос.УстановитьПараметр("ПрибылиИУбытки", ПрибылиИУбытки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФинРезультаты.СуммаОборотДт,
	               |	ФинРезультаты.СуммаОборотКт,
	               |	Оборотыпо68.СуммаОборот КАК Сумма68
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет = &Счет  , , Организация В ИЕРАРХИИ (&Организация), , ) КАК ФинРезультаты,
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет = &Счет68, , Организация В ИЕРАРХИИ (&Организация), , ) КАК Оборотыпо68
	               |ГДЕ
	               |	ФинРезультаты.Субконто1 В(&ПрибылиИУбытки)
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты";
	
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультат = Результат.Выгрузить();
	
	СуммаДоходаРасхода   = ТаблицаРезультат.Итог("СуммаОборотКт") - ТаблицаРезультат.Итог("СуммаОборотДт");
	Сумма68   = ТаблицаРезультат.Итог("Сумма68");
	
	СуммаУсловногоНалога = Окр(СуммаДоходаРасхода * мСтавкаНалогаНаПрибыль,2);
	
	Если Не СуммаУсловногоНалога = Сумма68 И СуммаУсловногоНалога - Сумма68 < 0.05 И СуммаУсловногоНалога - Сумма68 > -0.05 Тогда
		 СуммаУсловногоНалога = Сумма68;
	 КонецЕсли;
	
	Если СуммаУсловногоНалога > 0 Тогда
		Сч99_02_1 = ПланыСчетов.Хозрасчетный.УсловныйРасходПоНалогуНаПрибыль;
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаУсловногоНалога, Сч99_02_1,, "Д", "Условный расход по налогу на прибыль");
		
	Иначе
		Сч99_02_2 = ПланыСчетов.Хозрасчетный.УсловныйДоходПоНалогуНаПрибыль;
		СформироватьПроводкиПоНалогуНаПрибыль(-СуммаУсловногоНалога, Сч99_02_2,, "К", "Условный доход по налогу на прибыль");
	КонецЕсли;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры //РасчетНалогаНаПрибыль

Процедура ПроведениеРеформацииБаланса(СтруктураШапкиДокумента, Отказ, Заголовок)
    
    Если СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
		ПересчетОНАиОНО(СтруктураШапкиДокумента, мПроводки,СтруктураШапкиДокумента.Дата,КонецМесяца(КонецДня(СтруктураШапкиДокумента.Дата)) + 1, Истина);  
        мПроводки.Записать(Ложь);    
    КонецЕсли;
   
    
	// Закрытие 99 счетов в БУ и реформация баланса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет",        ПланыСчетов.Хозрасчетный.ПрибылиИУбытки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаДт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК СуммаКт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокДт, 0) КАК СуммаДтНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокКт, 0) КАК СуммаКтНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокДт, 0) КАК СуммаДтПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокКт, 0) КАК СуммаКтПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокДт, 0) КАК СуммаДтВР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокКт, 0) КАК СуммаКтВР,
	|	ХозрасчетныйОстатки.Подразделение
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки";
	
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Прибыль = 0;
	ПрибыльНУ = 0;
	ПрибыльПР = 0;
	ПрибыльВР = 0;
	СуммаСписанияНУ = 0;
	СуммаСписанияПР = 0;
	СуммаСписанияВР = 0;
	
	Пока Выборка.Следующий() Цикл
		СуммаСписания =  ?(Выборка.СуммаКт = Null, 0, Выборка.СуммаКт) - ?(Выборка.СуммаДт = Null, 0, Выборка.СуммаДт);
		СуммаСписанияНУ = 0;
		СуммаСписанияПР = 0;
		СуммаСписанияВР = 0;
		
		Прибыль = Прибыль + СуммаСписания;
		Если НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН И НЕ СтруктураШапкиДокумента.Предприниматель Тогда
			СуммаСписанияНУ =  ?(Выборка.СуммаКтНУ = Null, 0, Выборка.СуммаКтНУ) - ?(Выборка.СуммаДтНУ = Null, 0, Выборка.СуммаДтНУ);
			ПрибыльНУ = ПрибыльНУ + СуммаСписанияНУ;
			СуммаСписанияПР =  ?(Выборка.СуммаКтПР = Null, 0, Выборка.СуммаКтПР) - ?(Выборка.СуммаДтПР = Null, 0, Выборка.СуммаДтПР);
			СуммаСписанияВР =  ?(Выборка.СуммаКтВр = Null, 0, Выборка.СуммаКтВР) - ?(Выборка.СуммаДтВР = Null, 0, Выборка.СуммаДтВР);
			ПрибыльПР = ПрибыльПР + СуммаСписанияПР;
			ПрибыльВР = ПрибыльВР + СуммаСписанияВР;
		КонецЕсли;
		
		
		Если Выборка.Счет = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД Тогда
			СуммаСписания = 0;
			Если НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН И НЕ СтруктураШапкиДокумента.Предприниматель Тогда
				СуммаСписанияНУ = 0;
				СуммаСписанияПР = 0;
				СуммаСписанияВР = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если СуммаСписания = 0 И СуммаСписанияНУ = 0 И СуммаСписанияПР = 0 И СуммаСписанияВР = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СуммаСписания > 0  Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт      = Выборка.Счет;
			Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
			Проводка.Сумма       = СуммаСписания;
			Проводка.Содержание  = "Реформация баланса";
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, Выборка.Подразделение, Выборка.Подразделение);
			
			СуммаНУ              = СуммаСписанияНУ;
			СуммаПР              = СуммаСписанияПР;
			СуммаВР              = СуммаСписанияВР;
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, Выборка.Подразделение, Выборка.Подразделение);
			
			
		КонецЕсли;
		
		Если СуммаСписания < 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период                    = Дата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
			Проводка.СчетКт                    = Выборка.Счет;
			Проводка.Сумма                     = - СуммаСписания;
			Проводка.Содержание                = "Реформация баланса";
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, Выборка.Подразделение, Выборка.Подразделение);
			
			СуммаНУ                     = - СуммаСписанияНУ;
			СуммаПР                     = - СуммаСписанияПР;
			СуммаВР                     = - СуммаСписанияВР;
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, Выборка.Подразделение, Выборка.Подразделение);
			
			
		КонецЕсли;
	КонецЦикла;
	
	Если Прибыль > 0 Тогда
		
		Проводка = мПроводки.Добавить();
		Проводка.Период      = Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
		Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
		Проводка.Сумма       = Прибыль;
		Проводка.Содержание  = "Реформация баланса";
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
		Проводка, Выборка.Подразделение, Выборка.Подразделение);
		
		СуммаНУ              = ПрибыльНУ;
		СуммаПР              = ПрибыльПР;
		СуммаВР              = ПрибыльВР;
		
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
		Проводка, Выборка.Подразделение, );
		
	КонецЕсли;
	
	Если Прибыль < 0 Тогда
		
		Проводка = мПроводки.Добавить();
		Проводка.Период      = Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
		Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
		Проводка.Сумма       = - Прибыль;
		Проводка.Содержание   = "Реформация баланса";
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
		Проводка, Выборка.Подразделение, Выборка.Подразделение);
		
		СуммаНУ               = - ПрибыльНУ;
		СуммаПР               = - ПрибыльПР;
		СуммаВР               = - ПрибыльВР;
		
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
		Проводка, , Выборка.Подразделение);
		
	КонецЕсли;
	
	// закрытие 90 счетов в БУ
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет",        ПланыСчетов.Хозрасчетный.Продажи);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Подразделение,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт - ХозрасчетныйОстатки.СуммаОстатокДт, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокКт - ХозрасчетныйОстатки.СуммаНУОстатокДт, 0)) КАК СуммаНУ,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокКт - ХозрасчетныйОстатки.СуммаПРОстатокДт, 0)) КАК СуммаПР,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокКт - ХозрасчетныйОстатки.СуммаВРОстатокДт, 0)) КАК СуммаВР,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.КоличествоОстатокКт - ХозрасчетныйОстатки.КоличествоОстатокДт, 0)) КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Подразделение";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Выборка Из Результат Цикл
		СуммаСписания =  ?(ЗначениеЗаполнено(Выборка.Сумма), Выборка.Сумма, 0);
		КоличествоСписания =  ?(ЗначениеЗаполнено(Выборка.Количество), Выборка.Количество, 0);
		СуммаСписанияНУ =  ?(ЗначениеЗаполнено(Выборка.СуммаНУ), Выборка.СуммаНУ, 0);
		СуммаСписанияПР =  ?(ЗначениеЗаполнено(Выборка.СуммаПР), Выборка.СуммаПР, 0);
		СуммаСписанияВР =  ?(ЗначениеЗаполнено(Выборка.СуммаВР), Выборка.СуммаВР, 0);
		
		Если Выборка.Счет = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж Тогда
			Продолжить;
		КонецЕсли;
		
		Если СуммаСписания = 0 И СуммаСписанияНУ = 0 И СуммаСписанияПР = 0 И СуммаСписанияВР = 0  И КоличествоСписания = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СуммаСписания >= 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период                    = Дата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = Выборка.Счет;
			Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
			Проводка.Сумма                     = СуммаСписания;
			Проводка.КоличествоДт              = КоличествоСписания;
			Проводка.Содержание         = "Закрытие года";
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, Выборка.Подразделение, Выборка.Подразделение);
			
			СуммаНУ                     = СуммаСписанияНУ;
			СуммаПР                     = СуммаСписанияПР;
			СуммаВР                     = СуммаСписанияВР;
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, Выборка.Подразделение, Выборка.Подразделение);
			
		ИначеЕсли СуммаСписания < 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период                    = Дата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
			Проводка.СчетКт                    = Выборка.Счет;
			Проводка.Сумма                     = - СуммаСписания;
			Проводка.КоличествоКт              = -КоличествоСписания;
			Проводка.Содержание         = "Закрытие года";
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, Выборка.Подразделение, Выборка.Подразделение);
			
			СуммаНУ                     = - СуммаСписанияНУ;
			СуммаПР                     = - СуммаСписанияПР;
			СуммаВР                     = - СуммаСписанияВР;
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, Выборка.Подразделение, Выборка.Подразделение);
			
		КонецЕсли;
	КонецЦикла;
	
	// закрытие 91 счетов в БУ
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет",        ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Подразделение,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт - ХозрасчетныйОстатки.СуммаОстатокДт, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокКт - ХозрасчетныйОстатки.СуммаНУОстатокДт, 0)) КАК СуммаНУ,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокКт - ХозрасчетныйОстатки.СуммаПРОстатокДт, 0)) КАК СуммаПР,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокКт - ХозрасчетныйОстатки.СуммаВРОстатокДт, 0)) КАК СуммаВР,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.КоличествоОстатокКт - ХозрасчетныйОстатки.КоличествоОстатокДт, 0)) КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Подразделение";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Выборка Из Результат Цикл
		СуммаСписания =  ?(ЗначениеЗаполнено(Выборка.Сумма), Выборка.Сумма, 0);
		КоличествоСписания =  ?(ЗначениеЗаполнено(Выборка.Количество), Выборка.Количество, 0);
		СуммаСписанияНУ =  ?(ЗначениеЗаполнено(Выборка.СуммаНУ), Выборка.СуммаНУ, 0);
		СуммаСписанияПР =  ?(ЗначениеЗаполнено(Выборка.СуммаПР), Выборка.СуммаПР, 0);
		СуммаСписанияВР =  ?(ЗначениеЗаполнено(Выборка.СуммаВР), Выборка.СуммаВР, 0);
		
		Если Выборка.Счет = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов Тогда
			Продолжить;
		КонецЕсли;
		
		Если СуммаСписания = 0 И СуммаСписанияНУ = 0 И СуммаСписанияПР = 0 И СуммаСписанияВР = 0 И КоличествоСписания = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СуммаСписания >= 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период                    = Дата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = Выборка.Счет;
			Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
			Проводка.Сумма                     = СуммаСписания;
			Проводка.КоличествоДт              = КоличествоСписания;
			Проводка.Содержание                = "Закрытие года";
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, Выборка.Подразделение, Выборка.Подразделение);
			
			СуммаНУ                     = СуммаСписанияНУ;
			СуммаПР                     = СуммаСписанияПР;
			СуммаВР                     = СуммаСписанияВР;
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, Выборка.Подразделение, );
			
		ИначеЕсли СуммаСписания < 0 Или Не КоличествоСписания = 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период                    = Дата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
			Проводка.СчетКт                    = Выборка.Счет;
			Проводка.Сумма                     = - СуммаСписания;
			Проводка.КоличествоКт              = - КоличествоСписания;
			Проводка.Содержание                = "Закрытие года";
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, Выборка.Подразделение, Выборка.Подразделение);
			
			СуммаНУ                            = - СуммаСписанияНУ;
			СуммаПР                     = - СуммаСписанияПР;
			СуммаВР                     = - СуммаСписанияВР;
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, , Выборка.Подразделение);
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН И НЕ СтруктураШапкиДокумента.Предприниматель Тогда
		ЗакрытиеСчетовНУ(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытиеСчетовНУ(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	//ЗАКРЫТИЕ СЧЕТОВ В НУ
	
	// закрытие счетов 20, 23, 25, 26
	СписокСчетовНУ = Новый Массив;
	
	СписокСчетовНУ.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СписокСчетовНУ.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон",		мКонГраница);
	Запрос.УстановитьПараметр("Организация",	СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовНУ",	СписокСчетовНУ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОстатки.Счет КАК Счет,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0)) КАК СуммаСписания,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокДт, 0)) КАК СуммаСписанияНУ,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокДт, 0)) КАК СуммаСписанияПР,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаВРОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаВРОстатокДт, 0)) КАК СуммаСписанияВР,
	|	НалоговыйОстатки.Субконто1 КАК СтатьяЗатрат
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В (&СписокСчетовНУ), , Организация = &Организация) КАК НалоговыйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОстатки.Счет,
	|	НалоговыйОстатки.Субконто1";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из Результат Цикл
		
		Счет = Выборка.Счет;
		СуммаСписания = Выборка.СуммаСписания;
		СуммаСписанияНУ = Выборка.СуммаСписанияНУ;
		СуммаСписанияПР = Выборка.СуммаСписанияПР;
		СуммаСписанияВР = Выборка.СуммаСписанияВР;
		
		Если СуммаСписанияНУ > 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период                    = Дата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = Счет;
			Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.СтатьяЗатрат);
			Проводка.Сумма                     = СуммаСписания;
			СуммаНУ                   = СуммаСписанияНУ;
			СуммаПР                   = СуммаСписанияПР;
			СуммаВР                   = СуммаСписанияВР;
			Проводка.Содержание                = "Закрытие года";
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
		КонецЕсли;
		
		Если СуммаСписанияНУ < 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период                    = Дата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
			Проводка.СчетКт                    = Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.СтатьяЗатрат);
			Проводка.Сумма                     = - СуммаСписания;
			СуммаНУ                   = - СуммаСписанияНУ;
			СуммаПР                   = - СуммаСписанияПР;
			СуммаВР                   = - СуммаСписанияВР;
			Проводка.Содержание                = "Закрытие года";
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
		КонецЕсли;
		
	КонецЦикла;
	
	// закрытие счета 44 по всем статьям затрат, кроме транспортных расходов
	Запрос.УстановитьПараметр("ДатаКон",             мКонГраница);
	Запрос.УстановитьПараметр("Организация",         СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет",                ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	Запрос.УстановитьПараметр("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	Запрос.УстановитьПараметр("ВидыСубконто",        ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОстатки.Счет КАК Счет,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0)) КАК СуммаСписания,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокДт, 0)) КАК СуммаСписанияНУ,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокДт, 0)) КАК СуммаСписанияПР,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаВРОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаВРОстатокДт, 0)) КАК СуммаСписанияВР,
	|	НалоговыйОстатки.Субконто1 КАК СтатьяЗатрат
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		&ДатаКон,
	|		Счет В ИЕРАРХИИ (&Счет),
	|		&ВидыСубконто,
	|		Организация = &Организация
	|			И (НЕ Субконто1.ВидРасходовНУ = &ТранспортныеРасходы)) КАК НалоговыйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОстатки.Счет,
	|	НалоговыйОстатки.Субконто1";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из Результат Цикл
		
		Счет = Выборка.Счет;
		СуммаСписания = Выборка.СуммаСписания;
		СуммаСписанияНУ = Выборка.СуммаСписанияНУ;
		СуммаСписанияПР = Выборка.СуммаСписанияПР;
		СуммаСписанияВР = Выборка.СуммаСписанияВР;
		
		Если СуммаСписанияНУ > 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период                    = Дата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = Счет;
			Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.СтатьяЗатрат);
			Проводка.Сумма                     = СуммаСписания;
			СуммаНУ                   = СуммаСписанияНУ;
			СуммаПР                   = СуммаСписанияПР;
			СуммаВР                   = СуммаСписанияВР;
			Проводка.Содержание                = "Закрытие года";
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
		КонецЕсли;
		
		Если СуммаСписанияНУ < 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период                    = Дата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
			Проводка.СчетКт                    = Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.СтатьяЗатрат);
			Проводка.Сумма                     = - СуммаСписания;
			СуммаНУ                   = - СуммаСписанияНУ;
			СуммаПР                   = - СуммаСписанияПР;
			СуммаВР                   = - СуммаСписанияВР;
			Проводка.Содержание                = "Закрытие года";
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
		КонецЕсли;
		
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

Процедура ПересчетОНАиОНО(СтруктураШапкиДокумента, мПроводкиБУ, СтараяДата, НоваяДата, Реформация) 
	
	// {ОбособленныеПодразделения
	Если Реформация Тогда
	// }ОбособленныеПодразделения
		СтруктураШапкиДокумента.Дата = КонецМесяца(КонецДня(СтруктураШапкиДокумента.Дата)) + 1;
		НоваяСтавка = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента) * 100;
		
		СтруктураШапкиДокумента.Дата = Дата;
		СтараяСтавка = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента) * 100;
	// {ОбособленныеПодразделения
	Иначе
		Отбор = Новый Структура("Организация,ПериодРасчета", СтруктураШапкиДокумента.Организация,НоваяДата);
		Ставки = РегистрыСведений.РасчетСтавкиНалогаНаПрибыльЗаМесяц.Получить(Отбор);
		НоваяСтавка = ?(Ставки = Неопределено, 0, Ставки.Ставка);
		
		Отбор = Новый Структура("Организация,ПериодРасчета", СтруктураШапкиДокумента.Организация,СтараяДата);
		Ставки = РегистрыСведений.РасчетСтавкиНалогаНаПрибыльЗаМесяц.Получить(Отбор);
		СтараяСтавка = ?(Ставки = Неопределено, 0, Ставки.Ставка);
	КонецЕсли;
	// }ОбособленныеПодразделения
	
	Если НоваяСтавка = СтараяСтавка Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВидовАктивовИОбязательств = НалоговыйУчет.ПолучитьТаблицуВидовАктивовИОбязательств();
	ТаблицаОНАОНО =  Новый ТаблицаЗначений;
	ТаблицаОНАОНО.Колонки.Добавить("Счет");
	ТаблицаОНАОНО.Колонки.Добавить("Вид");
	ТаблицаОНАОНО.Колонки.Добавить("Разница");
	ТаблицаОНАОНО.Колонки.Добавить("НоваяСумма");
	ТаблицаОНАОНО.Колонки.Добавить("СтараяСумма");
	
	Для каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательств Цикл
		
		ТаблицаВидаАктивовИОбязательств = НалоговыйУчет.ОстаткиВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства,СтруктураШапкиДокумента.СписокОП, ?(Реформация,НачалоГода(СтруктураШапкиДокумента.ДАта),НачалоМесяца(НоваяДата)), ?(Реформация,мКонГраница,НачалоМесяца(НоваяДата)));  
		Если ТаблицаВидаАктивовИОбязательств.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаВидаАктивовИОбязательств.Свернуть("СчетОНАОНО,СтараяСумма","Сумма");
		
		Для каждого Строка Из ТаблицаВидаАктивовИОбязательств Цикл
			СтрокаТаблицаОНАОНО = ТаблицаОНАОНО.Добавить();
			СтрокаТаблицаОНАОНО.Счет = Строка.СчетОНАОНО;
			СтрокаТаблицаОНАОНО.Вид = СтрокаВидАктиваОбязательства.ВидАктивовОбязательств;
			СтрокаТаблицаОНАОНО.НоваяСумма = Окр(Строка.Сумма * НоваяСтавка / 100, 2);
			СтрокаТаблицаОНАОНО.СтараяСумма = Строка.СтараяСумма;
			СтрокаТаблицаОНАОНО.Разница = 0;
		КОнецЦикла;
	КонецЦикла;
	
	ТаблицаОНАОНО.Свернуть("Счет,Вид,СтараяСумма","НоваяСумма,Разница");
	
	Для каждого Строка Из ТаблицаОНАОНО Цикл
		Строка.Разница = Строка.НоваяСумма - Строка.СтараяСумма;
	КОнецЦикла;
	
	Для Каждого Выборка Из ТаблицаОНАОНО Цикл
		
		Если Выборка.Счет.Код = "09" И Не Выборка.Разница = 0 Тогда
			
			Проводка = мПроводкиБУ.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Пересчет по ставке " + НоваяСтавка + "%";
			
			Если  Выборка.Разница > 0  Тогда
				Проводка.Сумма        = Выборка.Разница;
				Проводка.СчетДт       = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Вид);
				Проводка.СчетКт       = ?(Реформация И СтруктураШапкиДокумента.Дата < '20100101', ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению, ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
            Иначе
				Проводка.Сумма        = - Выборка.Разница;
				Проводка.СчетКт       = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Вид);
				Проводка.СчетДт       = ?(Реформация И СтруктураШапкиДокумента.Дата < '20100101', ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию,ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
            КонецЕсли;
		КонецЕсли;
		
		Если Выборка.Счет.Код = "77" И Не Выборка.Разница = 0 Тогда
			
			Проводка = мПроводкиБУ.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Пересчет по ставке " + НоваяСтавка + "%";
			
			Если  Выборка.Разница > 0  Тогда
				Проводка.Сумма        = Выборка.Разница;
				Проводка.СчетКт       = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Вид);
				Проводка.СчетДт       = ?(Реформация И СтруктураШапкиДокумента.Дата < '20100101', ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию,ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
			Иначе
				Проводка.Сумма        = - Выборка.Разница;
				Проводка.СчетДт       = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Вид);
				Проводка.СчетКт       = ?(Реформация И СтруктураШапкиДокумента.Дата < '20100101', ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению, ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
            КонецЕсли;
		КонецЕсли;
		
    КонецЦикла;
    
КонецПроцедуры

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураДопПараметров = Новый Структура;
	
	Если ВидОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияИИзносОС Тогда
		
		// АМОРТИЗАЦИЯ
		// Начисление амортизации ОС
		НачислениеАмортизацииОС(СтруктураШапкиДокумента, Отказ, Заголовок);
		Если Месяц(СтруктураШапкиДокумента.Дата) = 12 Тогда
			// Начисление износа ОС по ЕНАОФ
			НачислениеИзносаОС(СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияНМАИсписаниеРасходовПоНИОКР Тогда 
		
		// Начисление амортизации НМА и списание расходов по НИОКР
		НачислениеАмортизацииНМА_НИОКР(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПогашениеСтоимостиСпецодеждыИспецоснасткиВэксплуатации Тогда 
		// Погашение стоимости спецодежды и спецоснастки
		ПогашениеСтоимостиСпецодеждыИСпецоснастки(СтруктураШапкиДокумента, Отказ, Заголовок); 
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредств Тогда 
		// ПЕРЕОЦЕНКА
		ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры Тогда 
		// КОРРЕКТИРОВКА СТОИМОСТИ НОМЕНКЛАТУРЫ
		КорректировкаСтоимостиНоменклатуры(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета97 Тогда 
		// СПИСАНИЕ РАСХОДОВ БУДУЩИХ ПЕРИОДОВ
		ЗакрытиеСчета97(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов Тогда 
		// Расчет долей списания косвенных расходов налогового учета, транспортных расходов и распределения 
		// расходов по видам деятельности
		РасчетДолейСписанияКосвенныхРасходов();
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда 
		// РАСЧЕТ СТОИМОСТИ ВЫПУЩЕННОЙ ПРОДУКЦИИ И ОКАЗАННЫХ УСЛУГ
		ПолучитьДолиСписанияКосвенныхРасходов(СтруктураШапкиДокумента, Отказ);
		ЗакрытиеСчетов20_23_25_26(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок);
		
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
		СтруктураДопПараметров.ЗаписьСписанияКосвенныхРасходов, 
		РегистрыСведений.РасчетСписанияКосвенныхРасходов,
		"Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,СтатьяЗатрат,ВидДеятельностиДляНалоговогоУчетаЗатрат",
		"СуммаЗатрат,СуммаЗатратНУ,СуммаЗатратПР,СуммаЗатратВР,СуммаННП,СуммаННП,СуммаННПНУ,СуммаННППР,СуммаННПВР,СуммаНеННП,СуммаНеННПНУ,СуммаНеННППР,СуммаНеННПВР");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетТорговойНаценкиПоПроданнымТоварам Тогда 
		// ТОРГОВЛЯ
		РасчетТорговойНаценкиПоПроданнымТоварам(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда 
		
		ПолучитьДолиСписанияКосвенныхРасходов(СтруктураШапкиДокумента, Отказ);
		//Закрытие транспортных расходов
		ЗакрытиеСчета44(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок, Истина);
		
		//Закрытие иных расходов (не транспортных)
		ЗакрытиеСчета44(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок, Ложь);
		
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
		СтруктураДопПараметров.ЗаписьСписанияКосвенныхРасходов, 
		РегистрыСведений.РасчетСписанияКосвенныхРасходов,
		"Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,СтатьяЗатрат,ВидДеятельностиДляНалоговогоУчетаЗатрат",
		"СуммаЗатрат,СуммаЗатратНУ,СуммаЗатратПР,СуммаЗатратВР,СуммаННП,СуммаННП,СуммаННПНУ,СуммаННППР,СуммаННПВР,СуммаНеННП,СуммаНеННПНУ,СуммаНеННППР,СуммаНеННПВР");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91 Тогда 
		// Определение финансовых результатов
		ЗакрытиеСчета90(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		ЗакрытиеСчета91(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет Тогда 
		
		СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		// РЕГЛАМЕНТНЫЕ ОПЕРАЦИИ ПО УСН
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ИсключениеНЗПИзСоставаМатериальныхРасходовДляУСН Тогда 
		
		УчестьОстаткиНЗПприУСН(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеОСДляУСН Тогда 
		ПризнаниеРасходовНаПриобретениеОСУСН(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеНМАДляУСН Тогда 
		ПризнаниеРасходовНаПриобретениеНМАУСН(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеДопРасходовДляУСН Тогда 
		СписаниеДопРасходовУСН(СтруктураШапкиДокумента, Отказ, Заголовок);
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН Тогда 
		РаспределениеРасходовЕНВДУСН(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		// {УчетДоходовИРасходовИП
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляИП Тогда 
		РаспределениеРасходовЕНВДИП(СтруктураШапкиДокумента, Отказ, Заголовок);
		// }УчетДоходовИРасходовИП
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль Тогда 
		
		// {ОбособленныеПодразделения   
		РасчетДолиБазыНалогаНаПрибыль(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ);
		// }ОбособленныеПодразделения 
		
		СтруктураДопПараметров.Вставить("СтавкиНалогаНаПрибыль", Новый Структура("Ставка, СтавкаФБ, СтавкаРФ, СтавкаМестный,СтавкиНалогаРФ",0,0,0,0,Неопределено));
		ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента,СтруктураДопПараметров);
		мСтавкаНалогаНаПрибыль = СтруктураДопПараметров.СтавкиНалогаНаПрибыль.Ставка;
	    СтруктураДопПараметров.Вставить("СтавкаПрибылиТекущегоМесяца", мСтавкаНалогаНаПрибыль);
		СформироватьПроводкиПоНалогуНаПрибыльРасчетыСБюджетом(СтруктураШапкиДокумента,СтруктураДопПараметров);
		
		// {ОбособленныеПодразделения
		мСтавкаНалогаНаПрибыль = СтруктураДопПараметров.СтавкаПрибылиТекущегоМесяца;
		// }ОбособленныеПодразделения 
		
		Если СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
			РасчетПостоянныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок);
			РасчетВременныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок);
			РасчетНалогаНаПрибыль(СтруктураШапкиДокумента,СтруктураДопПараметров, Отказ, Заголовок);
		КонецЕсли;		
		
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса Тогда 
		ПроведениеРеформацииБаланса(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента,СтруктураДопПараметров) 
	
	СтавкиНалога = РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.ПолучитьПоследнее(СтруктураШапкиДокумента.Дата);
	
	СтавкаФБ        = СтавкиНалога.СтавкаФБ;
	СтавкаРФ        = СтавкиНалога.СтавкаСубъектРФ;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", НачалоДня(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);  
	Если СтруктураШапкиДокумента.РазныеСтавкиНалогаНаПрибыль Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Неопределено КАК РегистрацияИФНС,
		|	ЕСТЬNULL(СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.СтавкаСубъектРФ, 0) КАК Ставка,
		|	1 КАК ДоляНалоговойБазы
		|ИЗ
		|	РегистрСведений.СтавкиНалогаНаПрибыльВБюджетСубъектовРФ.СрезПоследних(&Период, Организация = &Организация) КАК СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних";
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.РегистрацияВИФНС КАК РегистрацияИФНС,
		|	ЕСТЬNULL(СтавкиНалогаНаПрибыльДляВсехОрганизацийСрезПоследних.СтавкаСубъектРФ, 0) КАК Ставка,
		|	1 КАК ДоляНалоговойБазы
		|ИЗ
		|	РегистрСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.СрезПоследних(&Период, ) КАК СтавкиНалогаНаПрибыльДляВсехОрганизацийСрезПоследних,
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	(Организации.Ссылка = &Организация
		|			ИЛИ Организации.ГоловнаяОрганизация = &Организация)";
		
	КонецЕсли;	 
	
	// {ОбособленныеПодразделения 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Неопределено КАК РегистрацияИФНС","СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.РегистрацияВИФНС КАК РегистрацияИФНС");
	// }ОбособленныеПодразделения 
	СтавкиНалогаРФ = Запрос.Выполнить().Выгрузить();
	СтавкаРФ = СтавкиНалогаРФ.Итог("Ставка");
	
	// {ОбособленныеПодразделения

		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период", НачалоДня(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Если СтруктураШапкиДокумента.РазныеСтавкиНалогаНаПрибыль Тогда		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетДолейБазыНалогаНаПрибыль.РегистрацияВИФНС КАК РегистрацияИФНС,
		|	ЕСТЬNULL(СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.СтавкаСубъектРФ, 0) КАК Ставка,
		|	ЕСТЬNULL(РасчетДолейБазыНалогаНаПрибыль.ДоляНалоговойБазы, 0) КАК ДоляНалоговойБазы,
		|	ЕСТЬNULL(СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.СтавкаСубъектРФ * РасчетДолейБазыНалогаНаПрибыль.ДоляНалоговойБазы, 0) КАК ПриведеннаяСтавка
		|ИЗ
		|	РегистрСведений.РасчетДолейБазыНалогаНаПрибыль КАК РасчетДолейБазыНалогаНаПрибыль
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаПрибыльВБюджетСубъектовРФ.СрезПоследних(&Период, Организация = &Организация) КАК СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних
		|		ПО РасчетДолейБазыНалогаНаПрибыль.РегистрацияВИФНС = СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.РегистрацияВИФНС
		|ГДЕ
		|	РасчетДолейБазыНалогаНаПрибыль.ПериодРасчета = &Период
		|	И РасчетДолейБазыНалогаНаПрибыль.Организация = &Организация";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(РасчетДолейБазыНалогаНаПрибыль.РегистрацияВИФНС, Организации.РегистрацияВИФНС) КАК РегистрацияИФНС,
		|	ЕСТЬNULL(СтавкиНалогаНаПрибыльДляВсехОрганизацийСрезПоследних.СтавкаСубъектРФ, 0) КАК Ставка,
		|	ЕСТЬNULL(СтавкиНалогаНаПрибыльДляВсехОрганизацийСрезПоследних.СтавкаСубъектРФ, 0) * ЕСТЬNULL(РасчетДолейБазыНалогаНаПрибыль.ДоляНалоговойБазы, 1) КАК ПриведеннаяСтавка,
		|	ЕСТЬNULL(РасчетДолейБазыНалогаНаПрибыль.ДоляНалоговойБазы, 1) КАК ДоляНалоговойБазы
		|ИЗ
		|	РегистрСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.СрезПоследних(&Период, ) КАК СтавкиНалогаНаПрибыльДляВсехОрганизацийСрезПоследних,
		|	РегистрСведений.РасчетДолейБазыНалогаНаПрибыль КАК РасчетДолейБазыНалогаНаПрибыль
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО РасчетДолейБазыНалогаНаПрибыль.Организация = Организации.Ссылка
		|ГДЕ
		|	(Организации.Ссылка = &Организация
		|			ИЛИ Организации.ГоловнаяОрганизация = &Организация)
		|	И РасчетДолейБазыНалогаНаПрибыль.ПериодРасчета = &Период
		|	И РасчетДолейБазыНалогаНаПрибыль.Организация = &Организация";
		
	КонецЕсли;	 
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			СтавкиНалогаРФ = Результат.Выгрузить();
			СтавкаРФ = СтавкиНалогаРФ.Итог("ПриведеннаяСтавка");
		КонецЕсли;
		
		// }ОбособленныеПодразделения

	
	СтруктураДопПараметров.СтавкиНалогаНаПрибыль.Ставка = (СтавкаФБ + СтавкаРФ ) / 100;
	СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкаФБ = СтавкаФБ / 100;
	СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкаРФ = СтавкаРФ / 100;
	СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкиНалогаРФ = СтавкиНалогаРФ;
	
КонецПроцедуры // ПолучитьСтавкуНалогаНаПрибыль()

Функция СформироватьЗаписи()
	
	Отказ = Ложь;
	Ошибки.Очистить();
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	мНачДата    = НачалоМесяца(Дата);
	мКонДата    = КонецМесяца (Дата);
	мНачГода    = НачалоГода(Дата);
	мНачГраница = Новый Граница(мНачДата, ВидГраницы.Включая);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	
	СтруктураШапкиДокумента = ЗаполнитьСтруктуруШапкиДокумента(Отказ, Заголовок);
	Записать();
	
	Параметр = Ссылка;
	Если Не ЗакрытиеМесяца.ПравильноеСоблюденияПоследовательности(Параметр) Тогда
		Ошибки.Загрузить(Параметр);
		Отказ = Истина; 
		Возврат Отказ;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Истина;
	КонецЕсли;
	
	Записать();
	
	ВыявлениеУчетныхОшибок(СтруктураШапкиДокумента, Отказ, Заголовок);	
	Если Отказ Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Записать();
	КонецЕсли;
	
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект,Ложь) Тогда
		Возврат Отказ;
	КонецЕсли;
	
	мПроводки = Движения.Хозрасчетный;
	
	ПорядокПодразделенийСообщался = Ложь;
	
	ТаблицаНеЗакрытыхПодразделений = Новый ТаблицаЗначений;
	ТаблицаНеЗакрытыхПодразделений.Колонки.Добавить("Подразделение");
	ТаблицаНеЗакрытыхПодразделений.Колонки.Добавить("СчетЗатрат");
	
	Если НЕ Отказ Тогда
		Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
			мКУДиР             = Движения.КнигаУчетаДоходовИРасходов;
			мКУДиР_ОС          = Движения.КнигаУчетаДоходовИРасходовОС;
			мКУДиР_НМА		   = Движения.КнигаУчетаДоходовИРасходовНМА;
			мДатаПереходаНаУСН = СтруктураШапкиДокумента.УчетнаяПолитика.ДатаПереходаНаУСН;
			
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", НалоговыйУчетУСН.ПрименениеУСНДоходы(СтруктураШапкиДокумента.Организация, мКонДата));
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН"      , НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы);
		КонецЕсли;
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция ВыполнитьОперацию() Экспорт
	
	ПометкаУдаления= Ложь;
	
	Отказ = СформироватьЗаписи();
	
	Если Отказ Тогда
		ТаблицаОшибок = Ошибки.Выгрузить();
		ТаблицаОшибок.Свернуть("Описание");
		Ошибки.Загрузить(ТаблицаОшибок);
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
		
	КонецЕсли;
	Записать();
	
	Если Отказ Тогда
		
		Если Не Ошибки.Количество() = 0 Тогда
			Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками;
			ЗакрытиеМесяца.ПоказатьОшибкиРегОперации(ЭтотОбъект);
		Иначе
			Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		КонецЕсли;
	Иначе
		Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
	КонецЕсли;
	
	Записать();
	Если ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов Тогда
		СписокОП = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
		
		Если СписокОП.Количество() = 0 Тогда
			СписокОП = "";
		КонецЕсли;
		
	Иначе
		СписокОП = "";
	КонецЕсли;
	
	ЗакрытиеМесяца.ЗаписатьСписокНеАктуальныхРегОпераций(Организация, Дата, ВидОперации);
	
	Возврат Отказ;	
	
КонецФункции

Функция ОтменитьОперацию() Экспорт
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	Ошибки.Очистить();
	Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	Записать();
	ЗакрытиеМесяца.ЗаписатьСписокНеАктуальныхРегОпераций(Организация, Дата, ВидОперации);  
	
КонецФункции

Функция ПропуститьОперацию() Экспорт
	
	ОперацияБылаВыполнена = (Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	
	Если ОперацияБылаВыполнена Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	КонецЕсли;
	Ошибки.Очистить();
	Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
	Записать();
	
	Если ОперацияБылаВыполнена Тогда
		ЗакрытиеМесяца.ЗаписатьСписокНеАктуальныхРегОпераций(Организация, Дата, ВидОперации);  
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ТипЗнч(ОбъектКопирования) <> Тип("ДокументОбъект.РегламентнаяОперация") Тогда
		Возврат;
	КонецЕсли;
	
	Организация   = ОбъектКопирования.Организация;
	Комментарий   = ОбъектКопирования.Комментарий;
	Ответственный = ОбъектКопирования.Ответственный;
	
КонецПроцедуры // ПриКопировании()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления И НЕ Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено Тогда
		ОтменитьОперацию()
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	// Для обновления статуса операции в обработке Закрытия месяца при выполнении, отмене выполнения и пометке на удаление.
	ОбщегоНазначения.ВыполнитьОповещение("РегОперация", Состояние, ВидОперации);
	
КонецПроцедуры
	
