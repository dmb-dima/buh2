////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем ПрименяетсяУСН;
Перем ПоддержкаПБУ18;
Перем Предприниматель;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ОткрыватьНастройкуДвижений;

Перем ОбработкаУправленияПоследовательностью;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы,  мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция УчетВПродажныхЦенах(УказаннаяОрганизация)
	
	Применяется = Ложь;
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(УказаннаяОрганизация) Тогда
	Иначе
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, УказаннаяОрганизация);
		Если Не Отказ Тогда
			Применяется = (УчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Применяется;

КонецФункции // ПрименяетсяДиректКостинг()

// Процедура УстановитьКомментарий()
//                             
// Устанавливает текст комментария в зависимости от даты документа
//
//		Параметры: нет
//
Процедура УстановитьКомментарий()

	Если Не мТекущаяДатаДокумента = Дата Тогда
		Комментарий = "Закрытие месяца за " + Формат( Дата, "ДФ='ММММ гггг'");
	КонецЕсли;

КонецПроцедуры // УстановитьКомментарий()

// Формируется дерево выполняемых документом действий при этом устанавливаются
// в дереве флажки в соответствии с состянием реквизитов документа.
//
Функция ФормированиеДереваВыполняемыхОпераций(ПрименяетсяУСН, ПрименяетсяУСНДоходы, УказаннаяОрганизация, УказаннаяДата)
	
	ДеревоВыполняемыхОпераций.Строки.Очистить();
	
	Предприниматель = ОбщегоНазначения.Предприниматель(УказаннаяОрганизация, УказаннаяДата);
	ПрименяетсяОСН  = (НЕ ПрименяетсяУСН И НЕ Предприниматель);
	ПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(УказаннаяОрганизация, УказаннаяДата) И НЕ Предприниматель;
	Отказ = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(УказаннаяДата, Отказ, УказаннаяОрганизация);
	ЭтоФилиал = ЗначениеЗаполнено(УказаннаяОрганизация.ГоловнаяОрганизация);
	
	Если Не ЗначениеЗаполнено (УказаннаяОрганизация) Или Отказ Тогда
		ВедетсяПроизводственнаяДеятельность = Ложь;
		ДиректКостинг = Ложь;
	Иначе
		ВедетсяПроизводственнаяДеятельность = мУчетнаяПолитика.ОрганизацияВедетПроизводственнуюДеятельность;
		ДиректКостинг  = мУчетнаяПолитика.ДиректКостинг;
	КонецЕсли;
	
	// АМОРТИЗАЦИЯ
	
	// Амортизация ОС
	СтрокаГруппаДействий             = ДеревоВыполняемыхОпераций.Строки.Добавить();
	СтрокаГруппаДействий.Действие    = "Начисление амортизации и погашение стоимости";
	СтрокаГруппаДействий.УправлятьБУ = Истина;
	ВсеБУ                            = ?(АмортизацияОС,1,0) 
	                                 + ?(Месяц(УказаннаяДата) = 12, ?(ИзносОС,1,0), 0) 
	                                 + ?(АмортизацияНМА,1,0) 
	                                 + ?(ПогашениеСтоимостиСпецодеждыИСпецоснастки,1,0);
	СтрокаГруппаДействий.БУ          = ?(ВсеБУ = 0,0,?(ВсеБУ=?(Месяц(УказаннаяДата) = 12, 4, 3),1,2));
	
	Строка = СтрокаГруппаДействий.Строки.Добавить();
	Строка.Действие      = "Начисление амортизации ОС";
	Строка.БУ            = ?(АмортизацияОС,1,0);
	Строка.УправлятьБУ   = Истина;
	
	Если Месяц(Дата) = 12 Тогда	
		// Износ ОС
		Строка = СтрокаГруппаДействий.Строки.Добавить();
		Строка.Действие      = "Начисление износа ОС по ЕНАОФ";
		Строка.БУ            = ?(ИзносОС,1,0);
		Строка.УправлятьБУ   = Истина;
	КонецЕсли;
	     	
	// Амортизация НМА
	Строка = СтрокаГруппаДействий.Строки.Добавить();
	Строка.Действие      = "Начисление амортизации НМА и списание расходов по НИОКР";
	Строка.БУ            = ?(АмортизацияНМА,1,0);
	Строка.УправлятьБУ   = Истина;
	
	// Погашение стоимости спецодежды и спецоснастки в эксплуатации
	Строка = СтрокаГруппаДействий.Строки.Добавить();
	Строка.Действие      = "Погашение стоимости спецодежды и спецоснастки в эксплуатации";
	Строка.БУ            = ?(ПогашениеСтоимостиСпецодеждыИСпецоснастки,1,0);
	Строка.УправлятьБУ   = Истина;
	
	// ПЕРЕОЦЕНКА ВАЛЮТНЫХ СРЕДСТВ
	Строка               = ДеревоВыполняемыхОпераций.Строки.Добавить();
	Строка.Действие      = "Переоценка валютных средств";
	Строка.БУ            = ?(ПереоценкаВалютныхСредств,1,0);
	Строка.УправлятьБУ   = Истина;
	
	// СПИСАНИЕ РБП
	Строка = ДеревоВыполняемыхОпераций.Строки.Добавить();
	Строка.Действие    = "Списание расходов будущих периодов";
	Строка.БУ          = ?(СписаниеРБП,1,0);
	Строка.УправлятьБУ = Истина;
	
	// КОРРЕКТИРОВКА СТОИМОСТИ НОМЕНКЛАТУРЫ
	Строка = ДеревоВыполняемыхОпераций.Строки.Добавить();
	Строка.Действие    = "Корректировка стоимости списанных МПЗ";
	Строка.БУ          = ?(КорректировкаСтоимостиНоменклатуры,1,0);
	Строка.УправлятьБУ = Истина;
	
	// ПРОИЗВОДСТВО 
	Если ВедетсяПроизводственнаяДеятельность Тогда
		Строка = ДеревоВыполняемыхОпераций.Строки.Добавить();
		Строка.Действие    = "Закрытие счетов 20, 23, 25, 26 и корректировка себестоимости выпуска";
		Строка.БУ          = ?(РасчетСтоимостиПродукции,1,0);
		Строка.УправлятьБУ = Истина;
	Иначе
		РасчетСебестоимостиПродукции = Ложь;
	КонецЕсли;

	// ТОРГОВЛЯ
	Если УчетВПродажныхЦенах(УказаннаяОрганизация) Тогда
		Строка = ДеревоВыполняемыхОпераций.Строки.Добавить();
		Строка.Действие      = "Расчет торговой наценки по проданным товарам";
		Строка.БУ            = ?(РасчетТорговойНаценкиПоПроданнымТоварам,1,0);
		Строка.УправлятьБУ   = Истина;
	КонецЕсли;
	
	// ЗАКРЫТИЕ СЧЕТОВ 
	СтрокаГруппаДействий = ДеревоВыполняемыхОпераций.Строки.Добавить();
	СтрокаГруппаДействий.Действие    = "Закрытие счета 44";
	СтрокаГруппаДействий.УправлятьБУ = Истина;
	СтрокаГруппаДействий.БУ =  ?(ЗакрытиеСчета44ТранспортныеРасходы И ЗакрытиеСчета44ИныеРасходы,1,?(ЗакрытиеСчета44ТранспортныеРасходы Или ЗакрытиеСчета44ИныеРасходы,2,0));
	
	Строка = СтрокаГруппаДействий.Строки.Добавить();
	Строка.Действие      = "Списание транспортных расходов";
	Строка.БУ            = ?(ЗакрытиеСчета44ТранспортныеРасходы,1,0);
	Строка.УправлятьБУ   = Истина;
	
	Строка = СтрокаГруппаДействий.Строки.Добавить();
	Строка.Действие      = "Списание иных расходов (кроме транспортных)";
	Строка.БУ            = ?(ЗакрытиеСчета44ИныеРасходы,1,0);
	Строка.УправлятьБУ   = Истина;
	
	
	Если Не ЭтоФилиал Тогда
		// Эти операции выполняет только головная организация
		
		СтрокаГруппаДействий = ДеревоВыполняемыхОпераций.Строки.Добавить();
		СтрокаГруппаДействий.Действие    = "Определение финансовых результатов";
		СтрокаГруппаДействий.УправлятьБУ = Истина;
		СтрокаГруппаДействий.БУ =  ?(ЗакрытиеСчета90 И ЗакрытиеСчета91,1,?(ЗакрытиеСчета90 Или ЗакрытиеСчета91,2,0));
		
		Строка = СтрокаГруппаДействий.Строки.Добавить();
		Строка.Действие      = "Закрытие счета 90";
		Строка.БУ            = ?(ЗакрытиеСчета90,1,0);
		Строка.УправлятьБУ   = Истина;
		
		Строка = СтрокаГруппаДействий.Строки.Добавить();
		Строка.Действие      = "Закрытие счета 91";
		Строка.БУ            = ?(ЗакрытиеСчета91,1,0);
		Строка.УправлятьБУ   = Истина;
		
		Если ПрименяетсяОСН Тогда
			Строка = СтрокаГруппаДействий.Строки.Добавить();
			Строка.Действие      = "Списание убытков прошлых лет";
			Строка.БУ            = ?(СписаниеУбытковПрошлыхЛет,1,0);
			Строка.УправлятьБУ   = Истина;
		КонецЕсли;
		
		Если ПрименяетсяОСН Тогда // применяется общая система налогообложения
			
			// ПБУ 18
			Если  ПоддержкаПБУ18 Тогда
				СтрокаГруппаДействий = ДеревоВыполняемыхОпераций.Строки.Добавить();
				СтрокаГруппаДействий.Действие    = "Расчеты по налогу на прибыль (ПБУ 18/02)";
				СтрокаГруппаДействий.УправлятьБУ = Истина;
				ВсеБУ = ?(РасчетПНОиПНА,1,0)+ ?(РасчетОНОиОНА,1,0)+ ?(РасчетНалогаНаПрибыль,1,0);
				СтрокаГруппаДействий.БУ = ?(ВсеБУ = 0, 0, ?(ВсеБУ = 3, 1, 2));
				
				Строка = СтрокаГруппаДействий.Строки.Добавить();
				Строка.Действие      = "Постоянные налоговые активы и обязательства";
				Строка.БУ            = ?(РасчетПНОиПНА,1,0);
				Строка.УправлятьБУ   = Истина;
				
				Строка = СтрокаГруппаДействий.Строки.Добавить();
				Строка.Действие      = "Отложенные налоговые активы и обязательства";
				Строка.БУ            = ?(РасчетОНОиОНА,1,0);
				Строка.УправлятьБУ   = Истина;
				
				Строка = СтрокаГруппаДействий.Строки.Добавить();
				Строка.Действие      = "Расчет налога на прибыль";
				Строка.БУ            = ?(РасчетНалогаНаПрибыль,1,0);
				Строка.УправлятьБУ   = Истина;
				
			Иначе
				СтрокаГруппаДействий             = ДеревоВыполняемыхОпераций.Строки.Добавить();
				СтрокаГруппаДействий.Действие      = "Расчет налога на прибыль";
				СтрокаГруппаДействий.БУ            = ?(РасчетНалогаНаПрибыль,1,0);
				СтрокаГруппаДействий.УправлятьБУ   = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПрименяетсяУСН И НЕ ПрименяетсяУСНДоходы Тогда// применяется УСН доходы минус расходы
		
		СтрокаГруппаДействий = ДеревоВыполняемыхОпераций.Строки.Добавить();
		СтрокаГруппаДействий.Действие    = "Регламентные операции по УСН";
		СтрокаГруппаДействий.УправлятьБУ = Истина;
		
		Если КонецМесяца(Дата) = КонецКвартала(Дата) Тогда
			ВсеБУ = ?(ПризнаниеРасходовНаПриобретениеОСУСН,1,0) + ?(РаспределениеРасходовЕНВДУСН,1,0) + ?(СписаниеДопРасходовУСН,1,0);
			Если (Дата < Дата("20060101")) Тогда
				ВсеБУ = ВсеБУ + 1;
			Иначе
				ВсеБУ = ВсеБУ + ?(ПризнаниеРасходовНаПриобретениеНМАУСН,1,0);
			КонецЕсли;
		Иначе
			ВсеБУ = 0;
		КонецЕслИ;
		УП = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, УказаннаяОрганизация);
		Если (ЗначениеЗаполнено(УП)) И (УП.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.УменьшатьРасходыНаОстатокНЗП) Тогда
			ВсеБУ = ВсеБУ + ?(УчестьОстаткиНЗПприУСН,1,0);
			
			Строка = СтрокаГруппаДействий.Строки.Добавить();
			Строка.Действие      = "Учесть остатки НЗП при определении материальных расходов";
			Строка.БУ            = ?(УчестьОстаткиНЗПприУСН,1,0);
			Строка.УправлятьБУ   = Истина;
			
			СтрокаГруппаДействий.БУ = ?(ВсеБУ = 0, 0, ?(ВсеБУ = ?(КонецМесяца(Дата) = КонецКвартала(Дата), 5, 1), 1, 2));					
		Иначе
			СтрокаГруппаДействий.БУ = ?(ВсеБУ = 0, 0, ?(ВсеБУ = 4, 1, 2));
		КонецЕсли;
				
		Если КонецМесяца(Дата) = КонецКвартала(Дата) Тогда
			
			Строка = СтрокаГруппаДействий.Строки.Добавить();
			Строка.Действие      = "Списание доп. расходов по товарам и материалам";
			Строка.БУ            = ?(СписаниеДопРасходовУСН,1,0);
			Строка.УправлятьБУ   = Истина;
						
			Строка = СтрокаГруппаДействий.Строки.Добавить();
			Строка.Действие      = "Признание расходов на приобретение основных средств";
			Строка.БУ            = ?(ПризнаниеРасходовНаПриобретениеОСУСН,1,0);
			Строка.УправлятьБУ   = Истина;
			
				Строка = СтрокаГруппаДействий.Строки.Добавить();
				Строка.Действие      = "Признание расходов на приобретение нематериальных активов";
				Строка.БУ            = ?(ПризнаниеРасходовНаПриобретениеНМАУСН,1,0);
			Строка.УправлятьБУ   = Истина;
			
			Строка = СтрокаГруппаДействий.Строки.Добавить();
			Строка.Действие      = "Распределение расходов по видам деятельности (УСН/ЕНВД)";
			Строка.БУ            = ?(РаспределениеРасходовЕНВДУСН,1,0);
			Строка.УправлятьБУ   = Истина;
		КонецЕслИ;
		
		
		Если СтрокаГруппаДействий.Строки.Количество() = 0 Тогда
			
		     ДеревоВыполняемыхОпераций.Строки.Удалить(СтрокаГруппаДействий);
			 
		КонецЕсли;	
		
		
	КонецЕсли; 
	
	// {УчетДоходовИРасходовИП
	Если Предприниматель Тогда
		СтрокаГруппаДействий = ДеревоВыполняемыхОпераций.Строки.Добавить();
		СтрокаГруппаДействий.Действие    = "Регламентные операции предпринимателей";
		СтрокаГруппаДействий.УправлятьБУ = Истина;
		СтрокаГруппаДействий.БУ = ?(ИПРаспределениеРасходов = 0, 0, 1);
		
		Строка = СтрокаГруппаДействий.Строки.Добавить();
		Строка.Действие      = "Распределение расходов по видам деятельности";
		Строка.БУ            = ?(ИПРаспределениеРасходов,1,0);
		Строка.УправлятьБУ   = Истина;
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	Если Месяц(УказаннаяДата) = 12 Тогда
		
		СтрокаГруппаДействий = ДеревоВыполняемыхОпераций.Строки.Добавить();
		СтрокаГруппаДействий.Действие    = "Закрытие года";
		СтрокаГруппаДействий.УправлятьБУ = Истина;
		СтрокаГруппаДействий.БУ = ?(РеформацияБаланса = 0, 0, 1);
		
		Строка               = СтрокаГруппаДействий.Строки.Добавить();
		Строка.Действие      = "Реформация баланса";
		Строка.БУ            = ?(РеформацияБаланса,1,0);
		Строка.УправлятьБУ   = Истина;
		
	КонецЕсли;   
	
КонецФункции // ФормированиеДереваВыполняемыхОпераций()

// В реквизиты документа записывается состояие установленное в дереве
// выполняемых документом действий.
//
Процедура ЗаписатьСостояниеСпискаВыполняемыхДействий()

	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Начисление амортизации ОС", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		АмортизацияОС = Ложь;
		
	Иначе
		АмортизацияОС = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Начисление износа ОС по ЕНАОФ", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		ИзносОС = Ложь;
		
	Иначе
		ИзносОС = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Начисление амортизации НМА и списание расходов по НИОКР", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		АмортизацияНМА = Ложь;
		
	Иначе
		АмортизацияНМА = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Погашение стоимости спецодежды и спецоснастки в эксплуатации", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		ПогашениеСтоимостиСпецодеждыИСпецоснастки = Ложь;
		
	Иначе
		ПогашениеСтоимостиСпецодеждыИСпецоснастки = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Переоценка валютных средств", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		ПереоценкаВалютныхСредств = Ложь;
		
	Иначе
		ПереоценкаВалютныхСредств = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Корректировка стоимости списанных МПЗ", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		КорректировкаСтоимостиНоменклатуры = Ложь;
	Иначе
		КорректировкаСтоимостиНоменклатуры = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Списание расходов будущих периодов", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		СписаниеРБП = Ложь;
	Иначе
		СписаниеРБП = НайденнаяСтрока.БУ;
	КонецЕсли;

	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Закрытие счетов 20, 23, 25, 26 и корректировка себестоимости выпуска", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		РасчетСтоимостиПродукции = Ложь;
	Иначе
		РасчетСтоимостиПродукции = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Расчет торговой наценки по проданным товарам", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		РасчетТорговойНаценкиПоПроданнымТоварам= Ложь;
		
	Иначе
		РасчетТорговойНаценкиПоПроданнымТоварам = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Списание транспортных расходов", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		ЗакрытиеСчета44ТранспортныеРасходы = Ложь;
	Иначе
		ЗакрытиеСчета44ТранспортныеРасходы = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Списание иных расходов (кроме транспортных)", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		ЗакрытиеСчета44ИныеРасходы = Ложь;
	Иначе
		ЗакрытиеСчета44ИныеРасходы = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Закрытие счета 90", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		ЗакрытиеСчета90 = Ложь;
	Иначе
		ЗакрытиеСчета90 = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Закрытие счета 91", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		ЗакрытиеСчета91 = Ложь;
	Иначе
		ЗакрытиеСчета91 = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	УП = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация);
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Учесть остатки НЗП при определении материальных расходов", "Действие", Истина);
	Если (НайденнаяСтрока = Неопределено) ИЛИ 
		(НЕ (ЗначениеЗаполнено(УП) И УП.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.УменьшатьРасходыНаОстатокНЗП)) Тогда
		УчестьОстаткиНЗПприУСН = Ложь;
		
	Иначе
		УчестьОстаткиНЗПприУСН = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Признание расходов на приобретение основных средств", "Действие", Истина);
	Если (НайденнаяСтрока = Неопределено) ИЛИ (НЕ КонецМесяца(Дата) = КонецКвартала(Дата)) Тогда
		ПризнаниеРасходовНаПриобретениеОСУСН = Ложь;
		
	Иначе
		ПризнаниеРасходовНаПриобретениеОСУСН = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Списание доп. расходов по товарам и материалам", "Действие", Истина);
	Если (НайденнаяСтрока = Неопределено) ИЛИ (НЕ КонецМесяца(Дата) = КонецКвартала(Дата)) Тогда
		СписаниеДопРасходовУСН = Ложь;
		
	Иначе
		СписаниеДопРасходовУСН = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Признание расходов на приобретение нематериальных активов", "Действие", Истина);
	Если (НайденнаяСтрока = Неопределено) ИЛИ (НЕ КонецМесяца(Дата) = КонецКвартала(Дата)) ИЛИ (Дата < Дата("20060101")) Тогда
		ПризнаниеРасходовНаПриобретениеНМАУСН = Ложь;
		
	Иначе
		ПризнаниеРасходовНаПриобретениеНМАУСН = НайденнаяСтрока.БУ;
	КонецЕсли;
		
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Распределение расходов по видам деятельности (УСН/ЕНВД)", "Действие", Истина);
	Если (НайденнаяСтрока = Неопределено) ИЛИ (НЕ КонецМесяца(Дата) = КонецКвартала(Дата)) Тогда
		РаспределениеРасходовЕНВДУСН = Ложь;
		
	Иначе
		РаспределениеРасходовЕНВДУСН = НайденнаяСтрока.БУ;
	КонецЕсли;

	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Постоянные налоговые активы и обязательства", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		РасчетПНОиПНА = Ложь;
		
	Иначе
		РасчетПНОиПНА = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Отложенные налоговые активы и обязательства", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		РасчетОНОиОНА = Ложь;
		
	Иначе
		РасчетОНОиОНА = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Расчет налога на прибыль", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		РасчетНалогаНаПрибыль = Ложь;
		
	Иначе
		РасчетНалогаНаПрибыль = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Реформация баланса", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		РеформацияБаланса = Ложь;
	Иначе
		РеформацияБаланса = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Списание убытков прошлых лет", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		СписаниеУбытковПрошлыхЛет = Ложь;
	Иначе
		СписаниеУбытковПрошлыхЛет = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	// {УчетДоходовИРасходовИП
	НайденнаяСтрока = ДеревоВыполняемыхОпераций.Строки.Найти("Распределение расходов по видам деятельности", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		ИПРаспределениеРасходов = Ложь;
	Иначе
		ИПРаспределениеРасходов = НайденнаяСтрока.БУ;
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ДеревоВыполняемыхОпераций
//
Процедура ДеревоВыполняемыхОперацийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.БУ.ОтображатьТекст  = Ложь;
	ОформлениеСтроки.Ячейки.БУ.ТолькоПросмотр = Истина;
	
	Если ДанныеСтроки.УправлятьБУ Тогда
		ОформлениеСтроки.Ячейки.БУ.ОтображатьФлажок = Истина;
		ОформлениеСтроки.Ячейки.БУ.Флажок           = ДанныеСтроки.БУ;
	КонецЕсли;

КонецПроцедуры

Процедура ОбновоитьДанныеПоследовательности();
	
	Если (Не ЗначениеЗаполнено(Организация)) или (Не ЗначениеЗаполнено(Дата)) Тогда
		ЭлементыФормы.НадписьПоследовательность.Заголовок = "";
		Возврат;
	КонецЕсли;
	
	Если ОбработкаУправленияПоследовательностью = Неопределено Тогда
		ОбработкаУправленияПоследовательностью = Обработки.УправлениеПоследовательностями.Создать();				
	КонецЕсли;
	
	ЗначениеГраницы = Неопределено;
	Результат = ОбработкаУправленияПоследовательностью.ПроверитьПоследовательность(Организация, КонецМесяца(Дата), ЗначениеГраницы);
	Если ЗначениеЗаполнено(ЗначениеГраницы) Тогда
		ЭлементыФормы.НадписьПоследовательность.ЦветТекста = ?(Результат, ЦветаСтиля.ТекстИнформационнойНадписи, Новый Цвет(255,0,0));
		ЭлементыФормы.НадписьПоследовательность.Заголовок = ?(Результат, "Документы проведены в правильной последовательности", "Нарушена последовательность проведения документов");
	Иначе
		ЭлементыФормы.НадписьПоследовательность.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		ЭлементыФормы.НадписьПоследовательность.Заголовок = "Хронология проведения документов не контролируется";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура вкллючает все флажки
//
Процедура ВключитьВыключитьФлажки(Параметр)

	НЕПрименяетсяУСН =  НЕ НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	
	АмортизацияОС                                = Параметр;
	АмортизацияНМА                               = Параметр;
	ПогашениеСтоимостиСпецодеждыИСпецоснастки    = Параметр;
	ПереоценкаВалютныхСредств                    = Параметр;
	КорректировкаСтоимостиНоменклатуры           = Параметр;
	СписаниеРБП                                     = Параметр;
	РасчетСтоимостиПродукции                     = Параметр;

	Если Месяц(Дата) =  12  Тогда
		РеформацияБаланса                           = Параметр;
		ИзносОС                                  = Параметр;
	Иначе
		РеформацияБаланса                           = Ложь;
		ИзносОС                                  = Ложь;
	КонецЕсли;  
	
	СписаниеУбытковПрошлыхЛет                       = Параметр;
	ЗакрытиеСчета44ТранспортныеРасходы           = Параметр;
	ЗакрытиеСчета44ИныеРасходы                   = Параметр;
	ЗакрытиеСчета90                              = Параметр;
	ЗакрытиеСчета91                              = Параметр;
	Если УчетВПродажныхЦенах(Организация) Тогда
		РасчетТорговойНаценкиПоПроданнымТоварам 	= Параметр;
	КонецЕсли;
	СписаниеДопРасходовУСН							= Параметр;
	ПризнаниеРасходовНаПриобретениеОСУСН            = Параметр;
	ПризнаниеРасходовНаПриобретениеНМАУСН           = Параметр;
	РаспределениеРасходовЕНВДУСН                    = Параметр;
	УчестьОстаткиНЗПприУСН							= Параметр;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ПоддержкаПБУ18 = Параметр;
	Иначе
		ПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(Организация, Дата);	
	КонецЕсли;

	Если  ПоддержкаПБУ18 Тогда
		РасчетПНОиПНА = Параметр;
		РасчетОНОиОНА = Параметр;
		
	Иначе
		РасчетПНОиПНА = Ложь;
		РасчетОНОиОНА = Ложь;
	КонецЕсли;
	
	РасчетНалогаНаПрибыль = Параметр;
	
	// {УчетДоходовИРасходовИП
	ИПРаспределениеРасходов = Параметр;
	// }УчетДоходовИРасходовИП
	
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначения.СообщитьОбОшибке("Документ не используется, рекомендуется воспользоваться меню ""Операции"" - ""Закрытие месяца""");
	Отказ = Истина;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	   	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый()  // проверить объект на то, что он еще не внесен в ИБ
		И НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		
		УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		УстановитьКомментарий();
		
		ВключитьВыключитьФлажки(Истина);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Обновить содержание информационных строк.
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,,ЭлементыФормы.ДеревоОпераций);
	
	ДеревоВыполняемыхОпераций.Колонки.Добавить("УправлятьБУ",   Новый ОписаниеТипов("Булево"));
	
	ФормированиеДереваВыполняемыхОпераций(НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата), НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата), Организация, Дата);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	ОбновоитьДанныеПоследовательности();
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Необходимо записать состояние действий, установленных
	// в дереве действия в соотвествующие реквизиты шапки документа.
	ЗаписатьСостояниеСпискаВыполняемыхДействий();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ


// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
      

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)
	
	//Открывает форму движений документа для ручного редактирования
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	УстановитьКомментарий();

	ДатаКонецМесяца = КонецМесяца(Дата);
	Если День(Дата) <> День(ДатаКонецМесяца) Тогда
		Дата = НачалоДня(ДатаКонецМесяца);
		УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	КонецЕсли;
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
    
	ЗаписатьСостояниеСпискаВыполняемыхДействий();
	Если (КонецМесяца(Дата) = КонецКвартала(Дата)) И (НЕ (КонецМесяца(мТекущаяДатаДокумента) = КонецКвартала(мТекущаяДатаДокумента))) И (НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)) Тогда
		ПризнаниеРасходовНаПриобретениеОСУСН            = Истина;
		СписаниеДопРасходовУСН							= Истина;
		РаспределениеРасходовЕНВДУСН                    = Истина;
		Если НЕ (Дата < Дата("20060101")) Тогда
			ПризнаниеРасходовНаПриобретениеНМАУСН       = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Месяц(Дата) = 12 Тогда
		РеформацияБаланса   = Истина;
		ИзносОС             = Истина;
	Иначе
		РеформацияБаланса   = Ложь;
	КонецЕсли;
	
	ФормированиеДереваВыполняемыхОпераций(НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата), НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата), Организация, Дата);
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	ОбновоитьДанныеПоследовательности();

	УстановитьКнопкиПечати();
		
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	ОбновоитьДанныеПоследовательности();

	УстановитьКнопкиПечати() 
КонецПроцедуры // ОрганизацияПриИзменении()
 
Процедура ДеревоОперацийПриИзмененииФлажка(Элемент, Колонка)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = ДеревоВыполняемыхОпераций.Строки.Найти(Элемент.ТекущиеДанные.Действие, "Действие", Истина);
	
	СтрокаДерева[Колонка.Имя] = Не СтрокаДерева[Колонка.Имя];
	
	ЭтаФорма.Модифицированность = Истина;
	
    ТекущаяСтрока = Элемент.ТекущиеДанные;
	Родитель = ТекущаяСтрока.Родитель;
	
	
	Если Родитель = Неопределено Тогда
		Для Каждого ТекСтрока Из ТекущаяСтрока.Строки Цикл
			ТекСтрока.БУ = ТекущаяСтрока.БУ;
		КонецЦикла;
	Иначе
		ВсеБУ = 0;
		КоличествоСтрок = 0;
		Для Каждого ТекСтрока Из Родитель.Строки Цикл
			ВсеБУ = ВсеБУ + ТекСтрока.БУ;
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЦикла;
		Если ВсеБУ = 0 Тогда
			Родитель.БУ = 0;
		ИначеЕсли ВсеБУ = КоличествоСтрок Тогда
			Родитель.БУ = 1;
		Иначе
			Родитель.БУ = 2;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Если в документе выбрана органиазация с другой системой налогового учета,
	// то перезаолняем список выполянемых документом операций.
	Если НалоговыйУчетУСН.ПрименениеУСН(Элемент.Значение, Дата) <> НалоговыйУчетУСН.ПрименениеУСН(ВыбранноеЗначение, Дата) Тогда
		ФормированиеДереваВыполняемыхОпераций(НалоговыйУчетУСН.ПрименениеУСН(ВыбранноеЗначение, Дата), НалоговыйУчетУСН.ПрименениеУСНДоходы(ВыбранноеЗначение, Дата), ВыбранноеЗначение, Дата);
		
	ИначеЕсли НалоговыйУчетУСН.ПрименениеУСНДоходы(Элемент.Значение, Дата) <> НалоговыйУчетУСН.ПрименениеУСНДоходы(ВыбранноеЗначение, Дата) Тогда
		ФормированиеДереваВыполняемыхОпераций(НалоговыйУчетУСН.ПрименениеУСН(ВыбранноеЗначение, Дата), НалоговыйУчетУСН.ПрименениеУСНДоходы(ВыбранноеЗначение, Дата), ВыбранноеЗначение, Дата);
		
	ИначеЕсли ПрименяетсяДиректКостинг(Элемент.Значение) <> ПрименяетсяДиректКостинг(ВыбранноеЗначение) Тогда
		ФормированиеДереваВыполняемыхОпераций(НалоговыйУчетУСН.ПрименениеУСН(ВыбранноеЗначение, Дата), НалоговыйУчетУСН.ПрименениеУСНДоходы(ВыбранноеЗначение, Дата), ВыбранноеЗначение, Дата);
		
	ИначеЕсли НалоговыйУчет.ПрименениеПБУ18(Элемент.Значение, Дата) <> НалоговыйУчет.ПрименениеПБУ18(ВыбранноеЗначение, Дата) Тогда
		ФормированиеДереваВыполняемыхОпераций(НалоговыйУчетУСН.ПрименениеУСН(ВыбранноеЗначение, Дата), НалоговыйУчетУСН.ПрименениеУСНДоходы(ВыбранноеЗначение, Дата), ВыбранноеЗначение, Дата);
		
	ИначеЕсли Элемент.Значение.ЮрФизЛицо <> ВыбранноеЗначение.ЮрФизЛицо Тогда
		ФормированиеДереваВыполняемыхОпераций(НалоговыйУчетУСН.ПрименениеУСН(ВыбранноеЗначение, Дата), НалоговыйУчетУСН.ПрименениеУСНДоходы(ВыбранноеЗначение, Дата), ВыбранноеЗначение, Дата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НалоговыйУчетУСН.ПрименениеУСН(Организация, Элемент.Значение) <> НалоговыйУчетУСН.ПрименениеУСН(Организация, ВыбранноеЗначение) Тогда
		ФормированиеДереваВыполняемыхОпераций(НалоговыйУчетУСН.ПрименениеУСН(Организация, ВыбранноеЗначение), НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, ВыбранноеЗначение), Организация, Дата);
	ИначеЕсли НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Элемент.Значение) <> НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, ВыбранноеЗначение) Тогда
		ФормированиеДереваВыполняемыхОпераций(НалоговыйУчетУСН.ПрименениеУСН(Организация, ВыбранноеЗначение), НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, ВыбранноеЗначение), Организация, Дата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьВсе(Кнопка)
	
	  ВключитьВыключитьФлажки(Истина);
	  ФормированиеДереваВыполняемыхОпераций(НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата), НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата), Организация, Дата);
	  
  КонецПроцедуры

Процедура ВыключитьВсе(Кнопка)
	  
	  ВключитьВыключитьФлажки(Ложь);
	  ФормированиеДереваВыполняемыхОпераций(НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата), НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата), Организация, Дата);
	  
  КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	ПечатьЗакрытияМесяцаПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	ПечатьЗакрытияМесяцаПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедуры печати 
Процедура ПечатьСправкиРасчета(Объект)
	
	СправкаРасчет = Объект.Создать();
	ФормаОбъекта = СправкаРасчет.ПолучитьФорму();
	СправкаРасчет.ИспользоватьИнуюНастройку = Истина;
	СправкаРасчет.Организация = Организация;
	Если Объект = Отчеты.СправкаРасчетКалькуляцияСебестоимости Тогда
		СправкаРасчет.ПериодРегистрацииНач = НачалоМесяца(Дата);
		СправкаРасчет.ПериодРегистрацииКон = КонецМесяца(Дата);
	Иначе
		СправкаРасчет.ПериодРегистрации = КонецМесяца(Дата);
		
	КонецЕсли;
	СправкаРасчет.ВариантОтчета = 1;
	ФормаОбъекта.Открыть();
КонецПроцедуры

Процедура ПечатьВсехСправок()
	
	ПрименяетсяУСН =  НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	Предприниматель = (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) И НЕ ПрименяетсяУСН;
	ПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(Организация, Дата) И НЕ Предприниматель;
	
	ПечатьСправкиРасчета(Отчеты.СправкаРасчетПереоценкаВалютныхСредств);
	ПечатьСправкиРасчета(Отчеты.СправкаРасчетСписаниеРБП);
	ПечатьСправкиРасчета(Отчеты.СправкаРасчетСебестоимостиПродукцииИУслуг);
	ПечатьСправкиРасчета(Отчеты.СправкаРасчетКалькуляцияСебестоимости);
	ПечатьСправкиРасчета(Отчеты.СправкаРасчетРаспределенияКосвенныхРасходов);
	ПечатьСправкиРасчета(Отчеты.СправкаРасчетСписанияКосвенныхРасходов);
	
	Если НЕ ПрименяетсяУСН И НЕ Предприниматель Тогда
		ПечатьСправкиРасчета(Отчеты.СправкаРасчетДолиНалоговойБазы);
		Если ПоддержкаПБУ18 Тогда
		ПечатьСправкиРасчета(Отчеты.СправкаРасчетПостоянныхИВременныхРазниц);
		КонецЕсли;

	КонецЕсли;
	ПечатьСправкиРасчета(Отчеты.СправкаРасчетНалогаНаПрибыль);
КонецПроцедуры
// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента(ИмяМакета)
	
	Если      ИмяМакета = "Валюта" Тогда
		ПечатьСправкиРасчета(Отчеты.СправкаРасчетПереоценкаВалютныхСредств);
		
	ИначеЕсли ИмяМакета = "РБП" тогда
		ПечатьСправкиРасчета(Отчеты.СправкаРасчетСписаниеРБП);
		
	ИначеЕсли ИмяМакета = "Себестоимость" Тогда
		ПечатьСправкиРасчета(Отчеты.СправкаРасчетСебестоимостиПродукцииИУслуг);
		
	ИначеЕсли ИмяМакета = "Калькуляция" Тогда
		ПечатьСправкиРасчета(Отчеты.СправкаРасчетКалькуляцияСебестоимости);
		
	ИначеЕсли ИмяМакета = "РаспределениеКосвенныхРасходов" Тогда
		ПечатьСправкиРасчета(Отчеты.СправкаРасчетРаспределенияКосвенныхРасходов);
		
	ИначеЕсли ИмяМакета = "НормированиеРасходов" Тогда
		ПечатьСправкиРасчета(Отчеты.СправкаРасчетНормированияРасходов);
		
	ИначеЕсли ИмяМакета = "СписаниеКосвенныхРасходов" Тогда
		ПечатьСправкиРасчета(Отчеты.СправкаРасчетСписанияКосвенныхРасходов);
		
	ИначеЕсли ИмяМакета = "Разницы" Тогда
		ПечатьСправкиРасчета(Отчеты.СправкаРасчетПостоянныхИВременныхРазниц);
		
	ИначеЕсли ИмяМакета = "РасчетНалогаНаПрибыль" Тогда
		ПечатьСправкиРасчета(Отчеты.СправкаРасчетНалогаНаПрибыль);
		
	ИначеЕсли ИмяМакета = "ДоляОбособленногоПодразделения" Тогда
		ПечатьСправкиРасчета(Отчеты.СправкаРасчетДолиНалоговойБазы);
		
	ИначеЕсли ИмяМакета = "ПересчетОНАиОНО" Тогда
		ПечатьСправкиРасчета(Отчеты.СправкаРасчетПересчетСтоимостиОтложенныхНалоговыхАктивовИОбязательств);
		
	Иначе
		ПечатьВсехСправок();
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	
	ТабДокумент = ПечатьДокумента(ИмяМакета);
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

Процедура ПечатьЗакрытияМесяцаПоДополнительнойКнопке(ДеревоМакетов, Объект, Форма, ТекстКнопки) Экспорт
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированностьВФорме(Объект, Форма) Тогда
		Возврат;
		//ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Объект.Проведен) Тогда
		//	Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		//	Возврат;
	КонецЕсли;
	
	СтрокаКнопки = ДеревоМакетов.Строки.Найти(ТекстКнопки,"Текст");
	
	Если СтрокаКнопки = Неопределено Тогда
		
		Предупреждение("Печать не доступна. Изменился набор реквизитов!");
		Возврат;
		
	КонецЕсли;
	
	НаПринтер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ПечатьДокументовБезПредварительногоПросмотра") = Истина;
	
	Если ТипЗнч(СтрокаКнопки.Расшифровка) = Тип("Структура") Тогда
		
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Объект.Ссылка, СтрокаКнопки.Расшифровка);
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 0, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(Объект));
		
	Иначе
		
		Печать(СтрокаКнопки.Имя, 0, НаПринтер);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура НадписьПоследовательностьНажатие(Элемент)
	Если НЕ ОбработкаУправленияПоследовательностью = Неопределено Тогда
		ОбработкаУправленияПоследовательностью.ПериодНач = НачалоМесяца(Дата);
		ОбработкаУправленияПоследовательностью.ПериодКон = КонецМесяца(Дата);
		ОбработкаУправленияПоследовательностью.Организация = Организация;
		Форма = ОбработкаУправленияПоследовательностью.ПолучитьФорму("Форма");
		Форма.ОткрытьМодально();
		ОбновоитьДанныеПоследовательности();
	КонецЕсли;
КонецПроцедуры


Процедура ПриЗакрытии()
	
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);
	
КонецПроцедуры

