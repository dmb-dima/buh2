Перем мНачДата;
Перем мКонДата;
Перем мНачГода;
Перем мНачГраница;
Перем мКонГраница;

Перем мУчетнаяПолитика;

Перем мПроводки;
Перем ЗаписьРасчетаРБП;

Перем мКУДиР;
Перем мКУДиР_ОС;
Перем мКУДиР_НМА;
Перем мДатаПереходаНаУСН;
Перем мПрименениеУСН;
Перем мПрименениеЕНВД;
Перем мПредприниматель;
Перем мПоддержкаПБУ18;
Перем ВедетсяПроизводственнаяДеятельность;

Перем мСтавкаНалогаНаПрибыль;

Перем мВалютаРегламентированногоУчета;

Перем ПроводкаНУ;

Перем ПорядокПодразделенийСообщался;
Перем ТаблицаНеЗакрытыхПодразделений;

Перем ПорядокПеределов;

Перем КоэффициентЕНВД;

Перем ВспомогательныеДанныеРасчета, ТаблицаДолейКосвенныхРасходов;

Перем ТаблицаСписанныхКосвенныхРасходов;

Перем мСчетаЕНВД;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет запись в регистры информации параметров расчетов по рег.операциям
// по данным которых будут построены справки - расчеты
Процедура ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента, ТаблицаДвижений, ВспомогательныйРегистр, СтрокаГруппировки,СтрокаСуммирования)
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ПериодРасчета");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.Свернуть(СтрокаГруппировки,СтрокаСуммирования);
	ВспомогательныйРасчет = ВспомогательныйРегистр.СоздатьНаборЗаписей();
	ВспомогательныйРасчет.Отбор.Регистратор.Установить(Ссылка);
	ВспомогательныйРасчет.Загрузить(ТаблицаДвижений);
	
	ВспомогательныйРасчет.Записать();
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО НАЧИСЛЕНИЮ АМОРТИЗАЦИИ ОС, НМА и НИОКР

// Выполняет начисление амортизации основных средств
//
Процедура НачислениеАмортизацииОС(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.АмортизацияОС Тогда
		Возврат;
	КонецЕсли;

	УправлениеВнеоборотнымиАктивами.НачислениеАмортизации(ЭтотОбъект, 
														  СтруктураШапкиДокумента, 
														  ,
														  мПоддержкаПБУ18,
														  мУчетнаяПолитика,
														  СтруктураШапкиДокумента.АмортизацияОС,
														  НЕ мПрименениеУСН,
														  Отказ, 
														  Заголовок);
														  
КонецПроцедуры // НачислениеАмортизацииОС()

// Выполняет начисление износа основных средств
//
Процедура НачислениеИзносаОС(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ИзносОС Тогда
		
		ТабИзноса  = УправлениеВнеоборотнымиАктивами.РасчетИзносаБухРегл(Дата, СтруктураШапкиДокумента.Организация);
		
		Проводки = Движения.Хозрасчетный;
		
		Для Каждого СтрокаИзноса Из ТабИзноса Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаИзноса.Износ) тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Содержание   = "Износ основных средств";
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СтрокаИзноса.Износ;
			
			Проводка.СчетДт = СтрокаИзноса.СчетНачисленияИзноса;
			БухгалтерскийУчет.УстановитьСубконто(СтрокаИзноса.СчетНачисленияИзноса, Проводка.СубконтоДт, 1, СтрокаИзноса.ОсновноеСредство);
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			
		КонецЦикла;
		
		мПроводки.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // НачислениеИзносаОС()

// Выполняет начисление амортизации НМА и списание расходов по НИОКР
//
Процедура НачислениеАмортизацииНМА_НИОКР(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.АмортизацияНМА Тогда
		ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМА_НИОКР(Дата,СтруктураШапкиДокумента.Организация,, ЭтотОбъект,,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);
		
		ТабАмортизации.Колонки.НематериальныйАктив.Имя  = "ОбъектУчета";
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Бух");	
		
		мПроводки.Записать(Ложь);
		
		// {УчетДоходовИРасходовИП
		Если мПредприниматель Тогда
			ТабАмортизации = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМА_НИОКР_НалогРеглФизЛицо(ЭтотОбъект,Дата,СтруктураШапкиДокумента.Организация);
			ТабАмортизации.Колонки.Налог.Имя = "СуммаАмортизации";
			ТабАмортизации.Колонки.НМА.Имя = "ОбъектУчета";
			ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"");
			ДоходыИРасходыПредпринимателя.ОтражениеАмортизации(ЭтотОбъект, СтруктураШапкиДокумента, ТабЗатрат, мУчетнаяПолитика);
			Движения.ИППрочиеРасходы.Записать(Ложь);
		КонецЕсли;
		// }УчетДоходовИРасходовИП
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет погашение стоимости спецодежды и спецоснастки
//
Процедура ПогашениеСтоимостиСпецодеждыИСпецоснастки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ПогашениеСтоимостиСпецодеждыИСпецоснастки Тогда
		
		ТабАмортизации  = СпецодеждаИСпецоснастка.РасчетСуммыПогашенияСтоимостиМатериалов(ЭтотОбъект, СтруктураШапкиДокумента.Организация, , Истина,, Отказ);
		
		ТабАмортизации.Колонки.Номенклатура.Имя  = "ОбъектУчета";
		ТабЗатрат = СпецодеждаИСпецоснастка.ПолучитьРаспределениеПогашенияСтоимости(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента);
		
		мПроводки.Записать(Ложь);    
		
	КонецЕсли;
	
КонецПроцедуры // ПогашениеСтоимостиСпецодеждыИСпецоснастки()

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПЕРЕОЦЕНКЕ ВАЛЮТНЫХ СРЕДСТВ

// Выполняет переоценку валютных счетов
//
Процедура ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ПереоценкаВалютныхСредств Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("РегламентнаяПереоценка", Истина);
	СтруктураПараметров.Вставить("ГраницаОстатков",        Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
	
	ОтражатьВ_НУ = НЕ мПрименениеУСН И НЕ мПредприниматель;
	СтруктураПараметров.Вставить("ОтражатьВНалоговомУчете", ОтражатьВ_НУ);
	СтруктураПараметров.Вставить("ПрименениеПБУ18",         мПоддержкаПБУ18);
	
	Если мПрименениеУСН Тогда
		ОтражатьВ_УСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(СтруктураШапкиДокумента.Организация, Дата);
		ОтражатьВ_УСН       = НЕ ОтражатьВ_УСНДоходы;
	Иначе
		ОтражатьВ_УСНДоходы = Ложь;
		ОтражатьВ_УСН       = Ложь;
	КонецЕсли;
	СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН",       ОтражатьВ_УСН);
	СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", ОтражатьВ_УСНДоходы);
	
	ТаблицаРасчетаПереоценкиВалюты = Движения.РасчетПереоценкиВалютныхСредств.ВыгрузитьКолонки();
	СтруктураПараметров.Вставить("ТаблицаРасчетаПереоценкиВалюты", ТаблицаРасчетаПереоценкиВалюты);
	
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок, СтруктураПараметров);
	
	мПроводки.Записать(Ложь);
	
	ЗаписьВВспомогательныеРегистрыСведений(
		СтруктураШапкиДокумента,
		СтруктураПараметров.ТаблицаРасчетаПереоценкиВалюты, 
		РегистрыСведений.РасчетПереоценкиВалютныхСредств,
		"Организация, Подразделение, ПериодРасчета, Активность, Регистратор, Счет, Валюта, Субконто1, Субконто2, Субконто3, КурсПереоценки, СуммаВВалюте, СуммаВРублях, СуммаВРубляхНУ, СуммаВРубляхПР, СуммаВРубляхВР",
		"Сумма,СуммаНУ,СуммаПР,СуммаВР");
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО КОРРЕКТИРОВКЕ СТОИМОСТИ НОМЕНКЛАТУРЫ

Процедура КорректировкаСтоимостиНоменклатуры(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.КорректировкаСтоимостиНоменклатуры Тогда
		СтруктураДопПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СтруктураДопПараметров.Вставить("Период", Дата);
		СтруктураДопПараметров.Вставить("Регистратор", ЭтотОбъект);
		СтруктураДопПараметров.Вставить("ТаблицаТоваров", Неопределено);
		СтруктураДопПараметров.Вставить("Учет", "Бух");
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", Массив);
		
		КорректировкаСтоимости.КорректировкаСтоимости(Неопределено, мНачДата, мКонДата, СтруктураДопПараметров);
		
		//мПроводки.Записать(Ложь);
	КонецЕсли;
	
	//Если СтруктураШапкиДокумента.КорректировкаСтоимостиНоменклатурыНУ И НЕ мПредприниматель Тогда
	//	СтруктураДопПараметров.Вставить("ВидУчетаПБУ18", Перечисления.ВидыУчетаПоПБУ18.НУ);
	//	СтруктураДопПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	//	СтруктураДопПараметров.Вставить("Период", Дата);
	//	СтруктураДопПараметров.Вставить("Регистратор", ЭтотОбъект);
	//	СтруктураДопПараметров.Вставить("ТаблицаТоваров", Неопределено);
	//	СтруктураДопПараметров.Вставить("Учет", "Нал");
	//	Массив = Новый Массив;
	//	Массив.Добавить(ПланыСчетов.Налоговый.СпецоснасткаИСпецодеждаВЭксплуатации);
	//	СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", Массив);
	//	
	//	КорректировкаСтоимости.КорректировкаСтоимости(Неопределено, мНачДата, мКонДата, СтруктураДопПараметров);
	//	
	//	Если мПоддержкаПБУ18 Тогда
	//		СтруктураДопПараметров.Вставить("ВидУчетаПБУ18", Перечисления.ВидыУчетаПоПБУ18.ПР);
	//		КорректировкаСтоимости.КорректировкаСтоимости(Неопределено, мНачДата, мКонДата, СтруктураДопПараметров);
	//		
	//		СтруктураДопПараметров.Вставить("ВидУчетаПБУ18", Перечисления.ВидыУчетаПоПБУ18.ВР);
	//		КорректировкаСтоимости.КорректировкаСтоимости(Неопределено, мНачДата, мКонДата, СтруктураДопПараметров);
	//	КонецЕсли;
	//	
	//КонецЕсли; 
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО СПИСАНИЮ РАСХОДОВ БУДУЩИХ ПЕРИОДОВ

Процедура СписаниеРБП(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.СписаниеРБП Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
	
	ВидРБП = Новый Массив;
	ВидРБП.Добавить(Перечисления.ВидыРБП.Прочие);
	ВидРБП.Добавить(Перечисления.ВидыРБП.ОсвоениеПриродныхРесурсов);
	ВидРБП.Добавить(Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества);
	ВидРБП.Добавить(Перечисления.ВидыРБП.ДолгосрочноеСтрахованиеЖизни);
	ВидРБП.Добавить(Перечисления.ВидыРБП.СтрахованиеНаОплатуМедицинскихРасходов);
	ВидРБП.Добавить(Перечисления.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности);
	Запрос.УстановитьПараметр("ВидРБП",      ВидРБП);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("Счет",        Массив);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Подразделение,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК Остаток,
	|	СУММА(ХозрасчетныйОстатки.СуммаНУОстатокДт) КАК ОстатокНУ,
	|	СУММА(ХозрасчетныйОстатки.СуммаПРОстатокДт) КАК ОстатокПР,
	|	СУММА(ХозрасчетныйОстатки.СуммаВРОстатокДт) КАК ОстатокВР,
	|	ХозрасчетныйОстатки.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецМесяца,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			,
	|			Организация = &Организация
	|				И (Субконто1.ВидРБП В (&ВидРБП)
	|					ИЛИ Субконто2.ВидРБП В (&ВидРБП)
	|					ИЛИ Субконто3.ВидРБП В (&ВидРБП))) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Подразделение
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки";
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
				
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, мКонГраница.Значение)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		
		ЗапросПоСчетам = Новый Запрос;
		
		ТекстЗапросаПоСчетам =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет)";
		
		ЗапросПоСчетам.УстановитьПараметр("Счет", Массив);
		ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
		МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

		Для каждого БлокируемыйСчет Из МассивСчетов Цикл
		
			ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		КонецЦикла;
				
	КонецЕсли;

	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Счет   = Выборка.Счет;
		РБП         = УстановитьРБП(Выборка);
		Если РБП = "" Тогда
			Продолжить;
		КонецЕсли;
		Если РБП.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке Тогда
			Продолжить;
		КонецЕсли;      
		СчетЗатрат = РБП.СчетЗатрат;
		
		Если Не ЗначениеЗаполнено(РБП) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РБП.ДатаНачалаСписания) Тогда
			ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен дата начала списания !";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Ложь, Заголовок);
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РБП.ДатаОкончанияСписания) Тогда
			ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен дата окончания списания !";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Ложь, Заголовок);
			Продолжить;
		КонецЕсли;
		
		Если СписаниеРБП И Не ЗначениеЗаполнено(СчетЗатрат) Тогда
			
			ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен реквизит ""Счет"" !";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Ложь, Заголовок);
			Продолжить;
		КонецЕсли;
		
		ВспомогательныеДанныеРасчета = Новый Структура("КоличествоМесяцевДней, КоличествоМесяцевДнейТекущегоПериода", 0, 0);
		ДатаНачала = ?(РБП.ДатаНачалаСписания > мНачДата, РБП.ДатаНачалаСписания, мНачДата);
		
		СуммаСписания   = БухгалтерскийУчет.СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.Остаток,   ВспомогательныеДанныеРасчета, мНачДата, мКонДата );
		СуммаСписанияНУ = БухгалтерскийУчет.СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.ОстатокНУ, ВспомогательныеДанныеРасчета, мНачДата, мКонДата );
		СуммаСписанияПР = БухгалтерскийУчет.СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.ОстатокПР, ВспомогательныеДанныеРасчета, мНачДата, мКонДата );
		СуммаСписанияВР = БухгалтерскийУчет.СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.ОстатокВР, ВспомогательныеДанныеРасчета, мНачДата, мКонДата );
		
		Если СуммаСписания = 0 И СуммаСписанияНУ = 0 И СуммаСписанияПР = 0 И СуммаСписанияВР = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка                = мПроводки.Добавить();
		Проводка.Период         = Дата;
		Проводка.Организация    = СтруктураШапкиДокумента.Организация;
		
		Проводка.СчетДт         = СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, РБП.СубконтоЗатрат1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РБП.СубконтоЗатрат2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, РБП.СубконтоЗатрат3);
		
		Проводка.СчетКт       = Счет;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Выборка.Субконто3);
		
		Проводка.Сумма        = СуммаСписания;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, Выборка.Подразделение, Выборка.Подразделение);
		
	    НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаСписанияНУ,СуммаСписанияНУ,СуммаСписанияПР, СуммаСписанияПр,СуммаСписанияВР,СуммаСписанияВР,Проводка, мПоддержкаПБУ18); 
		
		Проводка.Содержание   = "Списание РБП за " + ПредставлениеПериода(мНачДата, мКонДата, "ФП=Истина");
		
		СтрокаЗаписьРасчетаРБП = ЗаписьРасчетаРБП.Добавить();
		СтрокаЗаписьРасчетаРБП.ДатаНачала = РБП.ДатаНачалаСписания;
		СтрокаЗаписьРасчетаРБП.ДатаОкончания = РБП.ДатаОкончанияСписания;
		СтрокаЗаписьРасчетаРБП.КоличествоМесяцевДней = ВспомогательныеДанныеРасчета.КоличествоМесяцевДней;
		СтрокаЗаписьРасчетаРБП.КоличествоМесяцевДнейТекущегоПериода = ВспомогательныеДанныеРасчета.КоличествоМесяцевДнейТекущегоПериода;
		СтрокаЗаписьРасчетаРБП.СпособПризнанияРасходов = РБП.СпособПризнанияРасходов;
		СтрокаЗаписьРасчетаРБП.СчетУчета = Счет;
		СтрокаЗаписьРасчетаРБП.СчетСписания = СчетЗатрат;
		СтрокаЗаписьРасчетаРБП.Статья = РБП;
		СтрокаЗаписьРасчетаРБП.СуммаДоговора = РБП.Сумма;
		СтрокаЗаписьРасчетаРБП.Сумма = СуммаСписания;
		СтрокаЗаписьРасчетаРБП.НачОстаток = Выборка.Остаток;
		СтрокаЗаписьРасчетаРБП.КонОстаток = Выборка.Остаток - СуммаСписания;
		СтрокаЗаписьРасчетаРБП.НачОстатокНУ = Выборка.ОстатокНУ;
		СтрокаЗаписьРасчетаРБП.КонОстатокНУ = Выборка.ОстатокНУ - СуммаСписанияНУ;
		СтрокаЗаписьРасчетаРБП.СуммаНУ = СуммаСписанияНУ;
		СтрокаЗаписьРасчетаРБП.НачОстатокПР = Выборка.ОстатокПР;
		СтрокаЗаписьРасчетаРБП.КонОстатокПР = Выборка.ОстатокПР - СуммаСписанияПР;
		СтрокаЗаписьРасчетаРБП.СуммаПР = СуммаСписанияПР;
		СтрокаЗаписьРасчетаРБП.НачОстатокВР = Выборка.ОстатокВР;
		СтрокаЗаписьРасчетаРБП.КонОстатокВР = Выборка.ОстатокВР - СуммаСписанияВР;
		СтрокаЗаписьРасчетаРБП.СуммаВР = СуммаСписанияВР;
		
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
	ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
	ЗаписьРасчетаРБП,
	РегистрыСведений.РасчетСписанияРБП,
	"Организация,ПериодРасчета,Активность,Регистратор,Статья,СчетУчета,СчетСписания,СпособПризнанияРасходов,ДатаНачала,ДатаОкончания,КоличествоМесяцевДнейТекущегоПериода,КоличествоМесяцевДней,СуммаДоговора",
	"Сумма,НачОстаток,КонОстаток,НачОстатокНУ,КонОстатокНУ,СуммаНУ,НачОстатокПР,КонОстатокПР,СуммаПР,НачОстатокВР,КонОстатокВР,СуммаВР");
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.СписаниеРБП И мПредприниматель Тогда
		ДоходыИРасходыПредпринимателя.РасчетИСписаниеРПБ(ЭтотОбъект, СтруктураШапкиДокумента, Заголовок);
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	Если СтруктураШапкиДокумента.СписаниеРБП И мПрименениеУСН Тогда
		
		Параметры = Новый Структура("Ссылка, Объект, Организация, Дата", Ссылка, ЭтотОбъект, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
		НалоговыйУчетУСН.ОтразитьВУСН(Ссылка, "СписаниеРБП",Параметры,0);
		
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьРБП(Выборка)
	
	Если ТипЗнч(Выборка.Субконто1)=Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
		Возврат Выборка.Субконто1;
	ИначеЕсли ТипЗнч(Выборка.Субконто2)=Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
		Возврат Выборка.Субконто2;
	ИначеЕсли ТипЗнч(Выборка.Субконто3)=Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
		Возврат Выборка.Субконто3;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПРОИЗВОДСТВЕННОЙ ЧАСТИ

Функция СчетУчетаПоХарактеруЗатрат(ОбщепроизводственныеРасходы = Истина)
	
	Счет = Неопределено;
		Если ОбщепроизводственныеРасходы Тогда
			Счет = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы; // счет 25
			
		Иначе
			Счет = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы; // счет 26
		КонецЕсли;
	
	Возврат Счет;
	
КонецФункции // СчетУчетаПоХарактеруЗатрат()

// Формируется запрос по косвенным затратам в котором собрана
// информация о косвенных затратах их способе их распределения.
//
Процедура СформироватьЗапросПоКосвеннымЗатратам(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы = Истина, РезультатЗапроса, СтруктураДопПараметров)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДопПараметров.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачДата",             мНачДата);
	Запрос.УстановитьПараметр("КонДата",             мКонГраница);
	Запрос.УстановитьПараметр("Организация",         СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат",  Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЕНВД",                Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Затраты.Счет КАК Счет,
	               |	Затраты.Подразделение КАК Подразделение,
	               |	Затраты.Организация КАК Организация,
	               |	Затраты.Субконто1 КАК Субконто1,
	               |	Затраты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
	               |	СУММА(Затраты.СуммаОборот) КАК СуммаОборот,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВЫРАЗИТЬ(Затраты.Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД 
	               |				ТОГДА Затраты.СуммаНУОборот
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0
	               |						ТОГДА 0
	               |					ИНАЧЕ Затраты.СуммаНУОборот
	               |				КОНЕЦ
	               |		КОНЕЦ) КАК СуммаНуОборот,
	               |	СУММА(Затраты.СуммаПРОборот) КАК СуммаПрОборот,
	               |	СУММА(Затраты.СуммаВРОборот) КАК СуммаВрОборот
	               |ПОМЕСТИТЬ ВТ_ХозрасчетныйОбороты_Затраты
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Месяц, Счет В ИЕРАРХИИ (&СчетаЗатрат), &ВидыСубконто, Организация = &Организация, , ) КАК Затраты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СписокПрямыхРасходовНУ КАК Правила
	               |		ПО (Правила.ВидЗатратНУ = Затраты.Субконто1.ВидРасходовНУ)
	               |			И (ВЫБОР
	               |				КОГДА Правила.Подразделение <> НЕОПРЕДЕЛЕНО
	               |					ТОГДА Правила.Подразделение = Затраты.Подразделение
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |			И (ВЫБОР
	               |				КОГДА Правила.СчетЗатрат <> НЕОПРЕДЕЛЕНО
	               |					ТОГДА Правила.СчетЗатрат = Затраты.Счет
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |			И (ВЫБОР
	               |				КОГДА Правила.КорСчетЗатрат <> НЕОПРЕДЕЛЕНО
	               |					ТОГДА Правила.КорСчетЗатрат = Затраты.КорСчет
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |			И (ВЫБОР
	               |				КОГДА Правила.СтатьяЗатрат <> НЕОПРЕДЕЛЕНО
	               |					ТОГДА Правила.СтатьяЗатрат = Затраты.Субконто1
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Затраты.Счет,
	               |	Затраты.Подразделение,
	               |	Затраты.Организация,
	               |	Затраты.Субконто1,
	               |	Затраты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаСпособовРаспределения.НалоговыйРежим КАК НалоговыйРежим,
	               |	ВЫБОР
	               |		КОГДА ТаблицаСпособовРаспределения.БазаРаспределения ЕСТЬ НЕ NULL 
	               |			ТОГДА ТаблицаСпособовРаспределения.БазаРаспределения
	               |		КОГДА ТаблицаСпособовРаспределения.РаспределениеПоПодразделению ЕСТЬ НЕ NULL 
	               |			ТОГДА ТаблицаСпособовРаспределения.РаспределениеПоПодразделению
	               |		КОГДА ТаблицаСпособовРаспределения.РаспределениеПоСтатьеЗатрат ЕСТЬ НЕ NULL 
	               |			ТОГДА ТаблицаСпособовРаспределения.РаспределениеПоСтатьеЗатрат
	               |		КОГДА ТаблицаСпособовРаспределения.РаспределениеПоСчету ЕСТЬ НЕ NULL 
	               |			ТОГДА ТаблицаСпособовРаспределения.РаспределениеПоСчету
	               |		ИНАЧЕ ТаблицаСпособовРаспределения.РаспределениеПоОрганизации
	               |	КОНЕЦ КАК Метод,
	               |	ТаблицаСпособовРаспределения.СчетЗатрат,
	               |	ТаблицаСпособовРаспределения.Подразделение,
	               |	ТаблицаСпособовРаспределения.СтатьяЗатрат,
	               |	ВЫБОР
	               |		КОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатрат ЕСТЬ НЕ NULL 
	               |			ТОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатрат
	               |		КОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоПодразделению ЕСТЬ НЕ NULL 
	               |			ТОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоПодразделению
	               |		КОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоСтатьеЗатрат ЕСТЬ НЕ NULL 
	               |			ТОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоСтатьеЗатрат
	               |		КОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоСчету ЕСТЬ НЕ NULL 
	               |			ТОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоСчету
	               |		ИНАЧЕ ТаблицаСпособовРаспределения.СписокСтатейЗатратПоОрганизации
	               |	КОНЕЦ КАК СписокСтатейЗатрат,
	               |	ТаблицаСпособовРаспределения.Сумма,
	               |	ТаблицаСпособовРаспределения.СуммаНУ,
	               |	ТаблицаСпособовРаспределения.СуммаПР,
	               |	ТаблицаСпособовРаспределения.СУммаВР
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТекущиеЗатраты.НалоговыйРежим КАК НалоговыйРежим,
	               |		ТекущиеЗатраты.Счет КАК СчетЗатрат,
	               |		ТекущиеЗатраты.Подразделение КАК Подразделение,
	               |		ТекущиеЗатраты.Субконто1 КАК СтатьяЗатрат,
	               |		СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
	               |		СпособыРаспределенияПоПодразделению.БазаРаспределения КАК РаспределениеПоПодразделению,
	               |		СпособыРаспределенияПоСтатьеЗатрат.БазаРаспределения КАК РаспределениеПоСтатьеЗатрат,
	               |		СпособыРаспределенияПоСчету.БазаРаспределения КАК РаспределениеПоСчету,
	               |		СпособыРаспределенияПоОрганизации.БазаРаспределения КАК РаспределениеПоОрганизации,
	               |		СпособыРаспределения.СписокСтатейЗатрат КАК СписокСтатейЗатрат,
	               |		СпособыРаспределенияПоОрганизации.СписокСтатейЗатрат КАК СписокСтатейЗатратПоОрганизации,
	               |		СпособыРаспределенияПоПодразделению.СписокСтатейЗатрат КАК СписокСтатейЗатратПоПодразделению,
	               |		СпособыРаспределенияПоСтатьеЗатрат.СписокСтатейЗатрат КАК СписокСтатейЗатратПоСтатьеЗатрат,
	               |		СпособыРаспределенияПоСчету.СписокСтатейЗатрат КАК СписокСтатейЗатратПоСчету,
	               |		ТекущиеЗатраты.Сумма КАК Сумма,
	               |		ТекущиеЗатраты.СуммаНУ КАК СуммаНУ,
	               |		ТекущиеЗатраты.СуммаПР КАК СуммаПР,
	               |		ТекущиеЗатраты.СУммаВР КАК СУммаВР
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ИСТИНА КАК НалоговыйРежим,
	               |			ЗатратыЕНВД.Счет КАК Счет,
	               |			ЗатратыЕНВД.Организация КАК Организация,
	               |			ЗатратыЕНВД.Подразделение КАК Подразделение,
	               |			ЗатратыЕНВД.Субконто1 КАК Субконто1,
	               |			ВЫБОР
	               |				КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	               |					ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаОборот, 0)
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	               |							ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаОборот, 0) * &КоэффициентЕНВД
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОНЕЦ КАК Сумма,
	               |			ВЫБОР
	               |				КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	               |					ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаНуОборот, 0)
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	               |							ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаНуОборот, 0) * &КоэффициентЕНВД
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОНЕЦ КАК СуммаНУ,
	               |			ВЫБОР
	               |				КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	               |					ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаПрОборот, 0)
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	               |							ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаПрОборот, 0) * &КоэффициентЕНВД
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОНЕЦ КАК СуммаПР,
	               |			ВЫБОР
	               |				КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	               |					ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаВрОборот, 0)
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	               |							ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаВрОборот, 0) * &КоэффициентЕНВД
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОНЕЦ КАК СУммаВР
	               |		ИЗ
	               |			ВТ_ХозрасчетныйОбороты_Затраты КАК ЗатратыЕНВД
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ЛОЖЬ,
	               |			ЗатратыННП.Счет,
	               |			ЗатратыННП.Организация,
	               |			ЗатратыННП.Подразделение,
	               |			ЗатратыННП.Субконто1,
	               |			ВЫБОР
	               |				КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ННП
	               |					ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаОборот, 0)
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	               |							ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаОборот, 0) * &КоэффициентННП
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОНЕЦ,
	               |			ВЫБОР
	               |				КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ННП
	               |					ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаНуОборот, 0)
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	               |							ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаНуОборот, 0) * &КоэффициентННП
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОНЕЦ,
	               |			ВЫБОР
	               |				КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ННП
	               |					ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаПрОборот, 0)
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	               |							ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаПрОборот, 0) * &КоэффициентННП
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОНЕЦ,
	               |			ВЫБОР
	               |				КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ННП
	               |					ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаВрОборот, 0)
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	               |							ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаВрОборот, 0) * &КоэффициентННП
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |		ИЗ
	               |			ВТ_ХозрасчетныйОбороты_Затраты КАК ЗатратыННП) КАК ТекущиеЗатраты
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК СпособыРаспределения
	               |			ПО ТекущиеЗатраты.Счет = СпособыРаспределения.СчетЗатрат
	               |				И ТекущиеЗатраты.Подразделение = СпособыРаспределения.Подразделение
	               |				И ТекущиеЗатраты.Субконто1 = СпособыРаспределения.СтатьяЗатрат
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	               |					&КонДата,
	               |					Организация = &Организация
	               |						И Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоСтатьеЗатрат
	               |			ПО ТекущиеЗатраты.Счет = СпособыРаспределенияПоСтатьеЗатрат.СчетЗатрат
	               |				И ТекущиеЗатраты.Субконто1 = СпособыРаспределенияПоСтатьеЗатрат.СтатьяЗатрат
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	               |					&КонДата,
	               |					Организация = &Организация
	               |						И СтатьяЗатрат = &ПустаяСтатьяЗатрат) КАК СпособыРаспределенияПоПодразделению
	               |			ПО ТекущиеЗатраты.Подразделение = СпособыРаспределенияПоПодразделению.Подразделение
	               |				И ТекущиеЗатраты.Счет = СпособыРаспределенияПоПодразделению.СчетЗатрат
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	               |					&КонДата,
	               |					Организация = &Организация
	               |						И СтатьяЗатрат = &ПустаяСтатьяЗатрат
	               |						И Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоСчету
	               |			ПО ТекущиеЗатраты.Счет = СпособыРаспределенияПоСчету.СчетЗатрат
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	               |					&КонДата,
	               |					Организация = &Организация
	               |						И СчетЗатрат = &ПустойСчет
	               |						И СтатьяЗатрат = &ПустаяСтатьяЗатрат
	               |						И Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоОрганизации
	               |			ПО ТекущиеЗатраты.Организация = СпособыРаспределенияПоОрганизации.Организация) КАК ТаблицаСпособовРаспределения
	               |ИТОГИ ПО
	               |	НалоговыйРежим,
	               |	Метод,
	               |	СписокСтатейЗатрат";	
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	Запрос.УстановитьПараметр("Распределяемые",Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам);
	Запрос.УстановитьПараметр("ЕНВД",Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	Запрос.УстановитьПараметр("ННП",Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);
	Запрос.УстановитьПараметр("КоэффициентЕНВД",СтруктураДопПараметров.КоэффициентЕНВД);
	Запрос.УстановитьПараметр("КоэффициентННП", 1- СтруктураДопПараметров.КоэффициентЕНВД);
	Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	Если Не мУчетнаяПолитика["ДиректКостинг"] Тогда
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	КонецЕсли;
	Запрос.УстановитьПараметр("СчетаЗатрат", СчетУчетаПоХарактеруЗатрат(ОбщепроизводственныеРасходы));
   
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(мНачДата, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		ТекстЗапросаПоСчетам =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетЗатрат)";
		
		ЗапросПоСчетам = Новый Запрос;
		ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
		ЗапросПоСчетам.УстановитьПараметр("СчетЗатрат", СчетУчетаПоХарактеруЗатрат(ОбщепроизводственныеРасходы));
		МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		Для каждого БлокируемыйСчет Из МассивСчетов Цикл
		
			ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		КонецЦикла;
					
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ХозрасчетныйОбороты_Затраты";
	Запрос.Выполнить();
	
КонецПроцедуры // СформироватьЗапросПоКосвеннымЗатратам()

// Функция распределения ОХР и ОПР затрат.
//
//	Параметры:
//		ОбщепроизводственныеРасходы - Булево;
//		БазаКоэффициентов - база коэф-тов распределения
//
Функция РаспределитьОПРиОХР(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы, СтруктураДопПараметров)

	РаспределениеВыполнено = Ложь;
	ЗаписьРасчетаКосвенныхРасходов = СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов;
	мКэшВидовСубконтоСчета=неопределено;
	
	// Формирование запроса по косвенным расходам
	РезультатЗапроса = НЕОПРЕДЕЛЕНО;
	СформироватьЗапросПоКосвеннымЗатратам(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы, РезультатЗапроса, СтруктураДопПараметров);
	
	ОбходПоНалговымРежимам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ОбходПоНалговымРежимам.Следующий() Цикл
		
    НалоговыйРежим = ОбходПоНалговымРежимам.НалоговыйРежим;
	мБазаКоэффициентов = РасчетБазыКоэффициентов(СтруктураШапкиДокумента, НалоговыйРежим, СтруктураДопПараметров);

	ОбходПоМетодамРаспределения = ОбходПоНалговымРежимам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктПоиска = Новый Структура;
	Пока ОбходПоМетодамРаспределения.Следующий() Цикл
		
		Если ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда
			ИмяРеквБазы = "Мат";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ОплатаТруда Тогда
			ИмяРеквБазы = "ЗП";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
			ИмяРеквБазы = "План";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска Тогда
			ИмяРеквБазы = "Выпуск";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ПрямыеЗатраты Тогда
			ИмяРеквБазы = "Прямые";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
			ИмяРеквБазы = "ПрямыеСписок";
			ОбходПоСпискуСтатейЗатрат = ОбходПоМетодамРаспределения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ОбходПоСпискуСтатейЗатрат.Следующий() Цикл
				ТекущийСписокПрямыхЗатрат = ОбходПоСпискуСтатейЗатрат.СписокСтатейЗатрат;
				СписокПрямыхЗатрат = ТекущийСписокПрямыхЗатрат.СтатьиЗатрат.ВыгрузитьКолонку("СтатьяЗатрат");
				Если Не СписокПрямыхЗатрат = Справочники.СписокСтатейЗатратВключенныхВБазуРаспределенияКосвенныхРасходов.ПустаяСсылка() Тогда
					мБазаКоэффициентов = РасчетБазыКоэффициентовСпискаЗатрат(СтруктураШапкиДокумента, СписокПрямыхЗатрат, НалоговыйРежим, СтруктураДопПараметров);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка Тогда
			ИмяРеквБазы = "Выручка";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.НеРаспределяется Тогда	
			Обход = ОбходПоМетодамРаспределения.Выбрать();
			Пока Обход.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Обход.Метод) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не Обход.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ОбщепроизводственныеРасходы Тогда
					ТекстСообщения = "Установлен метод ""Не распределять"" общепроизводственные расходы для:
					|Подразделение: " + Обход.Подразделение + "
					|Статья затрат: " + Обход.СтатьяЗатрат;
					
				Иначе
					ТекстСообщения = "Установлен метод ""Не распределять"" общехозяйственные расходы для:
					|Статья затрат: " + Обход.СтатьяЗатрат;
				КонецЕсли;
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект), СтатусСообщения.Информация);
				
			КонецЦикла;
			
			Продолжить;
		Иначе
			
			Обход = ОбходПоМетодамРаспределения.Выбрать();
			Пока Обход.Следующий() Цикл
				Если ОбщепроизводственныеРасходы Тогда
					ТекстСообщения = "Не указан способ распределения общепроизводственных расходов для:
					|Подразделение: " + Обход.Подразделение + "
					|Статья затрат: " + Обход.СтатьяЗатрат;
				Иначе
					ТекстСообщения = "Не указан способ распределения общехозяйственных расходов для:
					|Статья затрат: " + Обход.СтатьяЗатрат;
				КонецЕсли; 
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект), СтатусСообщения.Важное);
				
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		Обход = ОбходПоМетодамРаспределения.Выбрать();
		Пока Обход.Следующий() Цикл
			
			Если (Обход.Сумма = 0 Или Обход.Сумма = NULL) И (Обход.СуммаНУ = 0 Или Обход.СуммаНУ = NULL) И (Обход.СуммаПР = 0 Или Обход.СуммаПР = NULL) И (Обход.СуммаВР = 0 Или Обход.СуммаВР = NULL) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктПоиска.Очистить();
			ФлагПоВсейБазе = НЕ ОбщепроизводственныеРасходы;
			
			ВсегоБазаРаспределения   = 0;
			ВсегоБазаРаспределенияНУ = 0;
			
			Если ФлагПоВсейБазе Тогда
				ВсегоБазаРаспределения   = мБазаКоэффициентов.Итог("База" + ИмяРеквБазы);
				ВсегоБазаРаспределенияНУ = мБазаКоэффициентов.Итог("База" + ИмяРеквБазы + "НУ");
				НаборСтрок = мБазаКоэффициентов;
				
			Иначе
				
				СтруктПоиска.Вставить("Подразделение", Обход.Подразделение);
				НаборСтрок = мБазаКоэффициентов.НайтиСтроки(СтруктПоиска);
				Для Каждого СтрКоэф Из НаборСтрок Цикл
					ВсегоБазаРаспределения = ВсегоБазаРаспределения   + СтрКоэф["База" + ИмяРеквБазы];
					ВсегоБазаРаспределенияНУ = ВсегоБазаРаспределенияНУ + СтрКоэф["База" + ИмяРеквБазы + "НУ"];
				КонецЦикла;
			КонецЕсли;
			
			ПоследнийПередел = (Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "3" Или  СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "");
			
			СуммаКРаспр = Новый Структура("Сумма,СуммаНУ,СуммаПР,СуммаВР",0,0,0,0);
			СуммаСписанияНаСебестоимость = Новый Структура("Сумма,СуммаНУ,СуммаПР,СуммаВР",0,0,0,0);
			УчтеноБазаРаспределения = Новый Структура("Сумма,СуммаНУ",0,0);

			Для Каждого СтрКоэф Из НаборСтрок Цикл
				
				БазаРаспределения   = СтрКоэф["База" + ИмяРеквБазы];
				БазаРаспределенияНУ = СтрКоэф["База" + ИмяРеквБазы + "НУ"];
				БазаРаспределенияНаВыпуск = БазаРаспределения;
				
				
				УчтеноБазаРаспределения.Сумма   = УчтеноБазаРаспределения.Сумма + БазаРаспределения;
				УчтеноБазаРаспределения.СуммаНУ = УчтеноБазаРаспределения.СуммаНУ + БазаРаспределенияНУ;
				ДолжноБытьСписано   = ?(ВсегоБазаРаспределения = 0, 0, Окр(Обход.Сумма   * УчтеноБазаРаспределения.Сумма / ВсегоБазаРаспределения, 2, 1));
				ДолжноБытьСписаноНУ = ?(ВсегоБазаРаспределенияНУ = 0, 0, Окр(Обход.СуммаНУ * УчтеноБазаРаспределения.СуммаНУ / ВсегоБазаРаспределенияНУ, 2, 1));
				ДолжноБытьСписаноПР = ?(ВсегоБазаРаспределения = 0, 0, Окр(Обход.СуммаПР * УчтеноБазаРаспределения.Сумма / ВсегоБазаРаспределения, 2, 1));
				ДолжноБытьСписаноВР = ?(ВсегоБазаРаспределения = 0, 0, Окр(Обход.СуммаВР * УчтеноБазаРаспределения.Сумма / ВсегоБазаРаспределения, 2, 1));
				СуммаСписания   = ДолжноБытьСписано - СуммаКРаспр.Сумма;
				СуммаСписанияНУ = ДолжноБытьСписаноНУ - СуммаКРаспр.СуммаНУ;
				СуммаСписанияПР = ДолжноБытьСписаноПР - СуммаКРаспр.СуммаПР;
				СуммаСписанияВР = ДолжноБытьСписаноВР - СуммаКРаспр.СуммаВР;
				СуммаКРаспр.Сумма = СуммаКРаспр.Сумма + СуммаСписания;
				СуммаКРаспр.СуммаНУ = СуммаКРаспр.СуммаНУ + СуммаСписанияНУ;
				СуммаКРаспр.СуммаПР = СуммаКРаспр.СуммаПР + СуммаСписанияПР;
				СуммаКРаспр.СуммаВР = СуммаКРаспр.СуммаВР + СуммаСписанияВР;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
					Разница = СуммаСписания - СуммаСписанияНУ - СуммаСписанияПР - СуммаСписанияВР;
				Иначе
					Разница = 0;
				КонецЕсли;
				СуммаСписанияПР = СуммаСписанияПР + Разница;
				
				Если СуммаСписания <> 0 Или СуммаСписанияНУ <> 0 Или СуммаСписанияПР <> 0 Или СуммаСписанияВР <> 0  Тогда
					
					НоваяПроводка = мПроводки.Добавить();
					НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
					
					НоваяПроводка.Активность  = Истина;
					НоваяПроводка.Период      = СтруктураШапкиДокумента.Дата;
					НоваяПроводка.Содержание  = "Распределение ОПР и ОХР";
					
					НоваяПроводка.Сумма   = СуммаСписания;
					СуммаНУ = СуммаСписанияНУ;
					СуммаПР = СуммаСписанияПР;
					СуммаВР = СуммаСписанияВР;
				
					НоваяПроводка.СчетДт = СтрКоэф.СчетЗатрат;
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрКоэф.НоменклатурнаяГруппа,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(НоваяПроводка.СчетДт,мКэшВидовСубконтоСчета));
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         Обход.СтатьяЗатрат,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(НоваяПроводка.СчетДт,мКэшВидовСубконтоСчета));
					
					СчетКт = Обход.СчетЗатрат;
					НоваяПроводка.СчетКт = СчетКт;
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",         Обход.СтатьяЗатрат,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(НоваяПроводка.СчетКт,мКэшВидовСубконтоСчета));
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						НоваяПроводка, СтрКоэф.Подразделение, Обход.Подразделение);
					
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,НоваяПроводка, мПоддержкаПБУ18); 
					
					РаспределениеВыполнено = Истина;
					
					//Записываем порциями(в случае большого количество проводок)
					Если мПроводки.Количество() >= 10000 Тогда
						мПроводки.Записать(Ложь);	
					КонецЕсли;	
					
								
				СтрокаЗаписьРасчетаКосвенныхРасходов = ЗаписьРасчетаКосвенныхРасходов.Добавить();
				СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = СчетКт;
				СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = ?(ОбщепроизводственныеРасходы, Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов, Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщехозяйственныхРасходов);
				СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Обход.Подразделение;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Обход.СтатьяЗатрат;
				СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = ОбходПоМетодамРаспределения.Метод;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = БазаРаспределения;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазыНУ = БазаРаспределенияНУ;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазыПР = БазаРаспределения;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазыВР = БазаРаспределения;
				СтрокаЗаписьРасчетаКосвенныхРасходов.ЕНВД = НалоговыйРежим;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = СтрКоэф.СчетЗатрат;
				СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения = СтрКоэф.Подразделение;
				СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = СтрКоэф.НоменклатурнаяГруппа;
				СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма = СуммаСписания;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаНУ = СуммаСписанияНУ;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаПР = СуммаСписанияПР;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаВР = СуммаСписанияВР;
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	КонецЦикла;

	
	Если РаспределениеВыполнено Тогда
		мПроводки.Записать(Ложь);
	КонецЕсли; 
	
	Возврат РаспределениеВыполнено;
	
КонецФункции // РаспределитьОПРиОХР()

// Функция расчета коэф. распределения косвенных затрат по переделам
//
Функция РасчетБазыКоэффициентов(СтруктураШапкиДокумента, ЭтоЕНВД, СтруктураДопПараметров)  
	
	
	НалоговыйРежим = ?(ЭтоЕНВД, Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД, Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);
	
	Запрос = Новый Запрос;   //****
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ПолнаяБазаРаспределения.СчетЗатрат КАК СчетЗатрат,
	                |	ПолнаяБазаРаспределения.Подразделение,
	                |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа,
	                |	СУММА(ПолнаяБазаРаспределения.БазаМат) КАК БазаМат,
	                |	СУММА(ПолнаяБазаРаспределения.БазаЗП) КАК БазаЗП,
	                |	СУММА(ПолнаяБазаРаспределения.БазаВыпуск) КАК БазаВыпуск,
	                |	СУММА(ПолнаяБазаРаспределения.БазаПлан) КАК БазаПлан,
	                |	СУММА(ПолнаяБазаРаспределения.БазаПрямые) КАК БазаПрямые,
	                |	СУММА(ПолнаяБазаРаспределения.БазаСписокЗатрат) КАК БазаПрямыеСписок,
	                |	СУММА(ПолнаяБазаРаспределения.БазаВыручка) КАК БазаВыручка,
	                |	СУММА(ПолнаяБазаРаспределения.БазаМатНУ) КАК БазаМатНУ,
	                |	СУММА(ПолнаяБазаРаспределения.БазаЗПНУ) КАК БазаЗПНУ,
	                |	СУММА(ПолнаяБазаРаспределения.БазаПрямыеНУ) КАК БазаПрямыеНУ,
	                |	СУММА(ПолнаяБазаРаспределения.БазаВыручкаНУ) КАК БазаВыручкаНУ,
	                |	ПолнаяБазаРаспределения.БазаВыпуск КАК БазаВыпускНУ,
	                |	ПолнаяБазаРаспределения.БазаПлан КАК БазаПланНУ
	                |ИЗ
	                |	(ВЫБРАТЬ
	                |		ХозрасчетныйОбороты.Счет КАК СчетЗатрат,
	                |		ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	                |		ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппа,
	                |		СУММА(ВЫБОР
	                |				КОГДА ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ = &МатЗатраты
	                |					ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0)
	                |				ИНАЧЕ 0
	                |			КОНЕЦ) КАК БазаМат,
	                |		СУММА(ВЫБОР
	                |				КОГДА ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ = &ОплатаТруда
	                |					ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0)
	                |				ИНАЧЕ 0
	                |			КОНЕЦ) КАК БазаЗП,
	                |		0 КАК БазаВыпуск,
	                |		0 КАК БазаПлан,
	                |		0 КАК БазаПрямые,
	                |		0 КАК БазаСписокЗатрат,
	                |		0 КАК БазаВыручка,
	                |		ВЫБОР
	                |			КОГДА ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ = &МатЗатраты
	                |				ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотДт, 0)
	                |			ИНАЧЕ 0
	                |		КОНЕЦ КАК БазаМатНУ,
	                |		ВЫБОР
	                |			КОГДА ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ = &ОплатаТруда
	                |				ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотДт, 0)
	                |			ИНАЧЕ 0
	                |		КОНЕЦ КАК БазаЗПНУ,
	                |		0 КАК БазаПрямыеНУ,
	                |		0 КАК БазаВыручкаНУ
	                |	ИЗ
	                |		РегистрБухгалтерии.Хозрасчетный.Обороты(
	                |				&НачДата,
	                |				&КонГраница,
	                |				Месяц,
	                |				Счет В ИЕРАРХИИ (&СчетЗатрат),
	                |				&ВидыСубконто,
	                |				Организация = &Организация
	                |					И Субконто2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим,
	                |				(НЕ КорСчет В ИЕРАРХИИ (&СчетЗатратКосвенных)),
	                |				) КАК ХозрасчетныйОбороты
	                |	
	                |	СГРУППИРОВАТЬ ПО
	                |		ХозрасчетныйОбороты.Счет,
	                |		ХозрасчетныйОбороты.Подразделение,
	                |		ХозрасчетныйОбороты.Субконто1,
	                |		ВЫБОР
	                |			КОГДА ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ = &МатЗатраты
	                |				ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотДт, 0)
	                |			ИНАЧЕ 0
	                |		КОНЕЦ,
	                |		ВЫБОР
	                |			КОГДА ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ = &ОплатаТруда
	                |				ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотДт, 0)
	                |			ИНАЧЕ 0
	                |		КОНЕЦ
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		ВыпускПродукцииУслуг.СчетЗатрат,
	                |		ВыпускПродукцииУслуг.Подразделение,
	                |		ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
	                |		0,
	                |		0,
	                |		СУММА(ВыпускПродукцииУслуг.Количество),
	                |		СУММА(ВыпускПродукцииУслуг.ПлановаяСтоимость),
	                |		0,
	                |		0,
	                |		0,
	                |		0,
	                |		0,
	                |		0,
	                |		0
	                |	ИЗ
	                |		РегистрНакопления.ВыпускПродукцииУслуг КАК ВыпускПродукцииУслуг
	                |	ГДЕ
	                |		ВыпускПродукцииУслуг.Период МЕЖДУ &НачДата И &КонДата
	                |		И ВыпускПродукцииУслуг.Подразделение.Владелец = &Организация
	                |		И ВыпускПродукцииУслуг.СчетСписания В ИЕРАРХИИ(&Счет90ЕНВД)
	                |	
	                |	СГРУППИРОВАТЬ ПО
	                |		ВыпускПродукцииУслуг.СчетЗатрат,
	                |		ВыпускПродукцииУслуг.Подразделение,
	                |		ВыпускПродукцииУслуг.НоменклатурнаяГруппа
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		ПрямыеЗатраты.Счет,
	                |		ПрямыеЗатраты.Подразделение,
	                |		ПрямыеЗатраты.Субконто1,
	                |		0,
	                |		0,
	                |		0,
	                |		0,
	                |		ЕСТЬNULL(ПрямыеЗатраты.СуммаОборотДт, 0),
	                |		0,
	                |		0,
	                |		0,
	                |		0,
	                |		0,
	                |		0
	                |	ИЗ
	                |		РегистрБухгалтерии.Хозрасчетный.Обороты(
	                |				&НачДата,
	                |				&КонГраница,
	                |				Месяц,
	                |				Счет В ИЕРАРХИИ (&СчетаПрямыхЗатрат),
	                |				&ВидыСубконто,
	                |				Организация = &Организация
	                |					И Субконто2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим,
	                |				(НЕ КорСчет В ИЕРАРХИИ (&СчетЗатратКосвенных)),
	                |				) КАК ПрямыеЗатраты
	                |	
	                |	СГРУППИРОВАТЬ ПО
	                |		ПрямыеЗатраты.Счет,
	                |		ПрямыеЗатраты.СуммаОборотДт,
	                |		ПрямыеЗатраты.Подразделение,
	                |		ПрямыеЗатраты.Субконто1
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		ЗатратыПроизводства.Счет,
	                |		ЗатратыПроизводства.Субконто1,
	                |		Выручка.Субконто1,
	                |		0,
	                |		0,
	                |		0,
	                |		0,
	                |		0,
	                |		0,
	                |		ЕСТЬNULL(Выручка.СуммаОборот, 0),
	                |		0,
	                |		0,
	                |		0,
	                |		ЕСТЬNULL(Выручка.СуммаНУОборот, 0)
	                |	ИЗ
	                |		(ВЫБРАТЬ
	                |			ХозрасчетныйОбороты.Счет КАК Счет,
	                |			ХозрасчетныйОбороты.Подразделение КАК Субконто1,
	                |			ХозрасчетныйОбороты.Субконто1 КАК Субконто2,
	                |			ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК СуммаОборотДт
	                |		ИЗ
	                |			РегистрБухгалтерии.Хозрасчетный.Обороты(
	                |					&НачДата,
	                |					&КонГраница,
	                |					Месяц,
	                |					Счет В ИЕРАРХИИ (&СчетЗатрат),
	                |					&ВидыСубконто,
	                |					Организация = &Организация
	                |						И Субконто2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим,
	                |					(НЕ КорСчет В ИЕРАРХИИ (&СчетЗатратКосвенных)),
	                |					) КАК ХозрасчетныйОбороты
	                |		
	                |		СГРУППИРОВАТЬ ПО
	                |			ХозрасчетныйОбороты.Счет,
	                |			ХозрасчетныйОбороты.СуммаОборотДт,
	                |			ХозрасчетныйОбороты.Подразделение,
	                |			ХозрасчетныйОбороты.Субконто1) КАК ЗатратыПроизводства
	                |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонГраница, , Счет В ИЕРАРХИИ (&Счет90), , Организация = &Организация, , ) КАК Выручка
	                |			ПО (Выручка.Субконто1 = ЗатратыПроизводства.Субконто2)
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		ПрямыеЗатраты.Счет,
	                |		ПрямыеЗатраты.Подразделение,
	                |		ПрямыеЗатраты.Субконто1,
	                |		0,
	                |		0,
	                |		0,
	                |		0,
	                |		0,
	                |		0,
	                |		0,
	                |		0,
	                |		0,
	                |		ЕСТЬNULL(ПрямыеЗатраты.СуммаНУОборотДт, 0),
	                |		0
	                |	ИЗ
	                |		РегистрБухгалтерии.Хозрасчетный.Обороты(
	                |				&НачДата,
	                |				&КонГраница,
	                |				Месяц,
	                |				Счет В ИЕРАРХИИ (&СчетаВсехЗатрат),
	                |				&ВидыСубконто,
	                |				Организация = &Организация
	                |					И Субконто2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим
	                |					И Субконто2.ВидРасходовНУ = &Прямые,
	                |				(НЕ КорСчет В ИЕРАРХИИ (&СчетЗатратКосвенных)),
	                |				) КАК ПрямыеЗатраты
	                |	
	                |	СГРУППИРОВАТЬ ПО
	                |		ПрямыеЗатраты.Счет,
	                |		ПрямыеЗатраты.СуммаОборотДт,
	                |		ПрямыеЗатраты.Подразделение,
	                |		ПрямыеЗатраты.Субконто1,
	                |		ЕСТЬNULL(ПрямыеЗатраты.СуммаНУОборотДт, 0)) КАК ПолнаяБазаРаспределения
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ПолнаяБазаРаспределения.СчетЗатрат,
	                |	ПолнаяБазаРаспределения.Подразделение,
	                |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа,
	                |	ПолнаяБазаРаспределения.БазаВыпуск,
	                |	ПолнаяБазаРаспределения.БазаПлан";
	 
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("КонДата",     мКонДата);
	Запрос.УстановитьПараметр("КонГраница",  мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ОплатаТруда", Перечисления.ВидыРасходовНУ.ОплатаТруда);
	Запрос.УстановитьПараметр("МатЗатраты",  Перечисления.ВидыРасходовНУ.МатериальныеРасходы);
	Запрос.УстановитьПараметр("НалоговыйРежим", НалоговыйРежим);
	//Запрос.УстановитьПараметр("Прямые",        Перечисления.ТипыРасходовНУ.ПрямыеРасходы);
	Запрос.УстановитьПараметр("Прямые",        Перечисления.ВидыРасходовНУ.МатериальныеРасходы);
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	Запрос.УстановитьПараметр("СчетаВсехЗатрат", СчетаЗатрат);
	 
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	Запрос.УстановитьПараметр("Счет90",  ?(ЭтоЕНВД, ПланыСчетов.Хозрасчетный.ВыручкаЕНВД, Массив));	
	
	Если НЕ ЭтоЕНВД Тогда
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыпускПродукцииУслуг.СчетСписания В ИЕРАРХИИ(&Счет90ЕНВД)", "Не ВыпускПродукцииУслуг.СчетСписания В ИЕРАРХИИ(&Счет90ЕНВД)");
КонецЕсли;

	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.УстановитьПараметр("СчетЗатрат", СчетаЗатрат);
	Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", СчетаЗатрат);
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	Запрос.УстановитьПараметр("СчетЗатратКосвенных", СчетаЗатрат);
	Запрос.УстановитьПараметр("Счет90ЕНВД", ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД);
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(мНачДата, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		
		ТекстЗапросаПоСчетам =
		"ВЫБРАТЬ
		|	Счета.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Счета
		|ГДЕ
		|	Счета.Ссылка В ИЕРАРХИИ(&СчетЗатрат)
		|ОБЪЕДИНИТЬ 
		|ВЫБРАТЬ
		|	Счета.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Счета
		|ГДЕ
		|	Счета.Ссылка В ИЕРАРХИИ(&Счет90ЕНВД)
		|ОБЪЕДИНИТЬ 
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет90)";
			
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗапросПоСчетам = Новый Запрос;
		ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
		СчетаЗатрат = Новый Массив;
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		ЗапросПоСчетам.УстановитьПараметр("СчетЗатрат",          СчетаЗатрат);
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
		Массив.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
		ЗапросПоСчетам.УстановитьПараметр("Счет90",		?(ЭтоЕНВД, ПланыСчетов.Хозрасчетный.ВыручкаЕНВД, Массив));
		ЗапросПоСчетам.УстановитьПараметр("Счет90ЕНВД",	ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД);
		МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		Для каждого БлокируемыйСчет Из МассивСчетов Цикл
		
			ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		КонецЦикла;
					
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ВыпускПродукцииУслуг");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(мНачДата, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		
		ТекстЗапросаПоСчетам =
		"ВЫБРАТЬ
		|	Счета.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Счета
		|ГДЕ
		|	Счета.Ссылка В ИЕРАРХИИ(&Счет90ЕНВД)";
		
		ЗапросПоСчетам = Новый Запрос;
		ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
		ЗапросПоСчетам.УстановитьПараметр("Счет90ЕНВД",ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД);
		МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		Для каждого БлокируемыйСчет Из МассивСчетов Цикл
		
			ЗначенияБлокировки.Вставить("СчетСписания", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		КонецЦикла;
					
	КонецЕсли;

	Результат =  Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // РасчетБазыКоэффициентов()


Функция РасчетБазыКоэффициентовСпискаЗатрат(СтруктураШапкиДокумента, СписокЗатрат, ЭтоЕНВД, СтруктураДопПараметров)
	
	
	
	 НалоговыйРежим = ?(ЭтоЕНВД, Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД, Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);
	 Запрос = Новый Запрос;
	 Запрос.Текст =  "ВЫБРАТЬ
	                 |	ПолнаяБазаРаспределения.СчетЗатрат КАК СчетЗатрат,
	                 |	ПолнаяБазаРаспределения.Подразделение КАК Подразделение,
	                 |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	                 |	0 КАК БазаМат,
	                 |	0 КАК БазаЗП,
	                 |	0 КАК БазаВыпуск,
	                 |	0 КАК БазаПлан,
	                 |	0 КАК БазаПрямые,
	                 |	0 КАК БазаВыручка,
	                 |	0 КАК БазаМатНУ,
	                 |	0 КАК БазаЗПНУ,
	                 |	0 КАК БазаВыпускНУ,
	                 |	0 КАК БазаПланНУ,
	                 |	0 КАК БазаПрямыеНУ,
	                 |	0 КАК БазаВыручкаНУ,
	                 |	СУММА(ПолнаяБазаРаспределения.БазаПрямые) КАК БазаПрямыеСписок,
	                 |	СУММА(ПолнаяБазаРаспределения.БазаПрямыеНУ) КАК БазаПрямыеСписокНУ
	                 |ИЗ
	                 |	(ВЫБРАТЬ
	                 |		ПрямыеЗатраты.Счет КАК СчетЗатрат,
	                 |		ПрямыеЗатраты.Субконто1 КАК Подразделение,
	                 |		ПрямыеЗатраты.Субконто2 КАК НоменклатурнаяГруппа,
	                 |		ПрямыеЗатраты.СуммаОборотДт КАК БазаПрямые,
	                 |		0 КАК БазаПрямыеНУ
	                 |	ИЗ
	                 |		РегистрБухгалтерии.Хозрасчетный.Обороты(
	                 |				&НачДата,
	                 |				&КонДата,
	                 |				Месяц,
	                 |				Счет В ИЕРАРХИИ (&СчетаПрямыхЗатрат),
	                 |				&ВидыСубконто,
	                 |				Организация = &Организация
	                 |					И Субконто3 В (&СписокЗатрат)
	                 |					И Субконто3.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим,
	                 |				,
	                 |				) КАК ПрямыеЗатраты
	                 |	
	                 |	СГРУППИРОВАТЬ ПО
	                 |		ПрямыеЗатраты.Счет,
	                 |		ПрямыеЗатраты.Субконто1,
	                 |		ПрямыеЗатраты.Субконто2,
	                 |		ПрямыеЗатраты.СуммаОборотДт
	                 |	
	                 |	ОБЪЕДИНИТЬ ВСЕ
	                 |	
	                 |	ВЫБРАТЬ
	                 |		ПрямыеЗатраты.Счет,
	                 |		ПрямыеЗатраты.Субконто1,
	                 |		ПрямыеЗатраты.Субконто2,
	                 |		0,
	                 |		ПрямыеЗатраты.СуммаНУОборотДт
	                 |	ИЗ
	                 |		РегистрБухгалтерии.Хозрасчетный.Обороты(
	                 |				&НачДата,
	                 |				&КонДата,
	                 |				Месяц,
	                 |				Счет В ИЕРАРХИИ (&СчетаВсехЗатрат),
	                 |				&ВидыСубконто,
	                 |				Организация = &Организация
	                 |					И Субконто3 В (&СписокЗатрат)
	                 |					И Субконто3.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим
	                 |					И Субконто3.ВидРасходовНУ = &Прямые,
	                 |				,
	                 |				) КАК ПрямыеЗатраты
	                 |	
	                 |	СГРУППИРОВАТЬ ПО
	                 |		ПрямыеЗатраты.Счет,
	                 |		ПрямыеЗатраты.Субконто1,
	                 |		ПрямыеЗатраты.Субконто2,
	                 |		ПрямыеЗатраты.СуммаНУОборотДт) КАК ПолнаяБазаРаспределения
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	ПолнаяБазаРаспределения.СчетЗатрат,
	                 |	ПолнаяБазаРаспределения.Подразделение,
	                 |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа,
	                 |	ПолнаяБазаРаспределения.БазаПрямыеНУ";
	 
	Запрос.УстановитьПараметр("НачДата",      мНачДата);
	Запрос.УстановитьПараметр("КонДата",      мКонГраница);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокЗатрат", СписокЗатрат);
	Запрос.УстановитьПараметр("НалоговыйРежим",НалоговыйРежим);
//	Запрос.УстановитьПараметр("Прямые",        Перечисления.ТипыРасходовНУ.ПрямыеРасходы);
	Запрос.УстановитьПараметр("Прямые",        Перечисления.ВидыРасходовНУ.МатериальныеРасходы);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	Запрос.УстановитьПараметр("СчетВсехЗатрат", СчетаЗатрат);
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", СчетаЗатрат);
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(мНачДата, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		ТекстЗапросаПоСчетам =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаПрямыхЗатрат)";
		
		ЗапросПоСчетам = Новый Запрос;
		ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
		СчетаЗатрат = Новый Массив;
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		ЗапросПоСчетам.УстановитьПараметр("СчетаПрямыхЗатрат", СчетаЗатрат);
		МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		Для каждого БлокируемыйСчет Из МассивСчетов Цикл
		
			ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		КонецЦикла;
					
	КонецЕсли;
	
	Результат =  Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // РасчетБазыКоэффициентовСпискаЗатрат()

// Общепроизводственные и общехозяйственные расходы (не
// используется директ-костинг) списываются на счета учета
// прямых расходов основного и вспомогательного производства.
// При списании расходы распределяются по подразделениям и
// номенклатурным группам.
//
Процедура РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
    СтруктураДопПараметров.ЭтапСписанияКосвенныхРасходов = 2;
	ЗакрытиеCчетовКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	
	РаспределениеВыполнено = Ложь;
	КоэффициентЕНВД = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, мКонДата, мНачДата, "БУ", Ложь);
	СтруктураДопПараметров.Вставить("КоэффициентЕНВД", КоэффициентЕНВД);
	
	// Списание общехозяйственных расходов на счете учета расходов
	// основного и вспомогательного производств.
	Если Не мУчетнаяПолитика["ДиректКостинг"] Тогда
		ОбщепроизводственныеРасходы = Ложь;
		РаспределениеВыполнено = РаспределитьОПРиОХР(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы, СтруктураДопПараметров);
	КонецЕсли;
	
	// Списание общепроизводственных расходов на счете учета расходов
	// основного и вспомогательного производств.
	ОбщепроизводственныеРасходы = Истина;
	РаспределениеВыполнено = РаспределитьОПРиОХР(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы, СтруктураДопПараметров);
	// Распределение общехозяйственных и общепроизводственных расходов
	// на себестоимость выпущенной продукции (услуг).
	РасчетПрямыхЗатрат(СтруктураШапкиДокумента, Истина, СтруктураДопПараметров);
	
КонецПроцедуры // РаспределениеКосвенныхРасходов()

Функция СоздатьТаблицуСписанныхКосвенныхРасходов()
	ТаблицаСписанныхКосвенныхРасходов = Новый ТаблицаЗначений;
	ТаблицаСписанныхКосвенныхРасходов.Колонки.Добавить("Счет");
	ТаблицаСписанныхКосвенныхРасходов.Колонки.Добавить("СтатьяЗатрат");
	ТаблицаСписанныхКосвенныхРасходов.Колонки.Добавить("СуммаБУ");
	ТаблицаСписанныхКосвенныхРасходов.Колонки.Добавить("СуммаНУ");
	ТаблицаСписанныхКосвенныхРасходов.Колонки.Добавить("СуммаПР");
	ТаблицаСписанныхКосвенныхРасходов.Колонки.Добавить("СуммаВР");
	ТаблицаСписанныхКосвенныхРасходов.Колонки.Добавить("СчетДт");
	ТаблицаСписанныхКосвенныхРасходов.Колонки.Добавить("Подразделение");
	ТаблицаСписанныхКосвенныхРасходов.Колонки.Добавить("НоменклатурнаяГруппа");
	ТаблицаСписанныхКосвенныхРасходов.Колонки.Добавить("Использована");
	ТаблицаСписанныхКосвенныхРасходов.Индексы.Добавить("Счет,СтатьяЗатрат,Подразделение,НоменклатурнаяГруппа,СуммаНУ,СуммаПР,СуммаВР,СуммаБУ,Использована");
КонецФункции
 
// Процедура списыват затраты по услугам, реализация которых отражена 
// без отражения выпуска в плановых ценах
Процедура ДвиженияПоПрямымЗатратамПоУслугам(СтруктураШапкиДокумента, СтруктураДопПараметров, ВыполненоРаспределениеОХРилиОПР, Отказ = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",               мНачДата);
	Запрос.УстановитьПараметр("КонДата",               мКонДата);
	Запрос.УстановитьПараметр("НачГраница",            мНачГраница);
	Запрос.УстановитьПараметр("КонГраница",            мКонГраница);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстатки.Субконто1 КАК НоменклатурнаяГруппа,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0)) КАК ОстатокПрямыхРасходов,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокДт, 0) КАК ОстатокПрямыхРасходовНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокДт, 0) КАК ОстатокПрямыхРасходовПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокДт, 0) КАК ОстатокПрямыхРасходовВР,
	|	МАКСИМУМ(ЕСТЬNULL(ОстаткиНЗП.СуммаБУ, 0)) КАК СуммаНЗП,
	|	ЕСТЬNULL(ОстаткиНЗП.СуммаНУ, 0) КАК СуммаНЗПНУ,
	|	ЕСТЬNULL(РеализацияУслуг.СчетРасходов, 0) КАК СчетРасходов,
	|	ЕСТЬNULL(РеализацияУслуг.СуммаОборот, 0) КАК Выручка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&Счета), , Организация = &ТекстУсловия) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РеализацияУслугОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|			РеализацияУслугОбороты.СчетРасходов КАК СчетРасходов,
	|			СУММА(ЕСТЬNULL(РеализацияУслугОбороты.СуммаОборот, 0)) КАК СуммаОборот
	|		ИЗ
	|			РегистрНакопления.РеализацияУслуг.Обороты(&НачГраница, &КонГраница, , Организация = &Организация) КАК РеализацияУслугОбороты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РеализацияУслугОбороты.НоменклатурнаяГруппа,
	|			РеализацияУслугОбороты.СчетРасходов) КАК РеализацияУслуг
	|		ПО ХозрасчетныйОстатки.Субконто1 = РеализацияУслуг.НоменклатурнаяГруппа
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ИнвентаризацияНЗП.СчетЗатрат КАК СчетЗатрат,
	|			ИнвентаризацияНЗП.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|			СУММА(ИнвентаризацияНЗПСостав.Сумма) КАК СуммаБУ,
	|			ИнвентаризацияНЗПСостав.СуммаНУ КАК СуммаНУ
	|		ИЗ
	|			Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
	|				ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
	|		ГДЕ
	|			ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата
	|			И ИнвентаризацияНЗП.Организация = &Организация
	|			И (НЕ ИнвентаризацияНЗП.ПометкаУдаления)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ИнвентаризацияНЗП.СчетЗатрат,
	|			ИнвентаризацияНЗП.ПодразделениеОрганизации,
	|			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
	|			ИнвентаризацияНЗПСостав.СуммаНУ) КАК ОстаткиНЗП
	|		ПО ХозрасчетныйОстатки.Субконто1 = ОстаткиНЗП.НоменклатурнаяГруппа
	|			И ХозрасчетныйОстатки.Счет = ОстаткиНЗП.СчетЗатрат
	|			И ХозрасчетныйОстатки.Субконто1 = ОстаткиНЗП.ПодразделениеОрганизации
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Подразделение,
	|	РеализацияУслуг.СчетРасходов,
	|	РеализацияУслуг.СуммаОборот,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ОстаткиНЗП.СуммаНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокДт, 0),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокДт, 0),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокДт, 0)
	|ИТОГИ
	|	МАКСИМУМ(ОстатокПрямыхРасходов),
	|	СУММА(ОстатокПрямыхРасходовНУ),
	|	СУММА(ОстатокПрямыхРасходовПР),
	|	СУММА(ОстатокПрямыхРасходовВР),
	|	МАКСИМУМ(СуммаНЗП),
	|	СУММА(СуммаНЗПНУ),
	|	СУММА(Выручка)
	|ПО
	|	Счет,
	|	Подразделение,
	|	НоменклатурнаяГруппа,
	|	СчетРасходов";
	
	Массив = Новый Массив;	
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &ТекстУсловия", "Организация = &Организация");
	
	Запрос.УстановитьПараметр("Организация",       СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счета", Массив);
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(мНачДата, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		ТекстЗапросаПоСчетам =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счета)";
		
		ЗапросПоСчетам = Новый Запрос;
		ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
		ЗапросПоСчетам.УстановитьПараметр("Счета", Массив);
		МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		Для каждого БлокируемыйСчет Из МассивСчетов Цикл
		
			ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		КонецЦикла;
					
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	ЗаписьРасчетаСебестоимости = СтруктураДопПараметров.ЗаписьРасчетаСебестоимости;
	
	ОбходПоСчетамЗатрат = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоСчетамЗатрат.Следующий() Цикл
		ОбходПоПодразделениям = ОбходПоСчетамЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоПодразделениям.Следующий() Цикл
			ОбходПоНомГруппам = ОбходПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоНомГруппам.Следующий() Цикл
				
				Если ОбходПоНомГруппам.Выручка = NULL Тогда
					Продолжить;
				КонецЕсли;
				
				// Прямые расходы за минусом НЗП подлежат распределению
				// на стоимость готовой продукции, услуг.
				// Т.к. при оприходовании на склад готовой продукции часть прямых
				// расходов (в размере плановой стоимости этой продукции) была
				// списана, то необходимо к общей сумме прямых расходов прибавить
				// списанную ранее сумму прямых расходов.
				
				ВсегоБазаРаспределения = ОбходПоНомГруппам.Выручка;
				
				Обход = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Обход.Следующий() Цикл
					
					ВсегоПрямыхРасходов = ОбходПоНомГруппам.ОстатокПрямыхРасходов;
					ВсегоПрямыхРасходовНУ = ОбходПоНомГруппам.ОстатокПрямыхРасходовНУ;
					ВсегоПрямыхРасходовПР = ОбходПоНомГруппам.ОстатокПрямыхРасходовПР;
					ВсегоПрямыхРасходовВР = ОбходПоНомГруппам.ОстатокПрямыхРасходовВР;
					
						СуммаНЗП = ОбходПоНомГруппам.СуммаНЗП;
						СуммаНЗПНУ = ОбходПоНомГруппам.СуммаНЗПНУ;
					
						СуммаРазницНЗП = НайтиРазницуВНЗП(СтруктураДопПараметров, Обход.Счет, Обход.Подразделение, Обход.НоменклатурнаяГруппа);
						СуммаНЗППР = СуммаРазницНЗП.СуммаПР;
						СуммаНЗПВР = СуммаРазницНЗП.СуммаВР;
						
						СуммаПрямыхРасходовНаВыпуск   = ВсегоПрямыхРасходов - СуммаНЗП;
						СуммаПрямыхРасходовНаВыпускНУ = ВсегоПрямыхРасходовНУ - СуммаНЗПНУ;
						СуммаПрямыхРасходовНаВыпускПР = ВсегоПрямыхРасходовПР - СуммаНЗППР;
						СуммаПрямыхРасходовНаВыпускВР = ВсегоПрямыхРасходовВР - СуммаНЗПВР;
						
						СуммаКорретировкиСписания   = ?(ВсегоБазаРаспределения   = 0, 0, Окр(СуммаПрямыхРасходовНаВыпуск  *Обход.Выручка/ВсегоБазаРаспределения, 2));
						СуммаКорретировкиСписанияНУ = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускНУ*Обход.Выручка/ВсегоБазаРаспределения, 2));
						СуммаКорретировкиСписанияПР = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускПР*Обход.Выручка/ВсегоБазаРаспределения, 2));
						СуммаКорретировкиСписанияВР = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускВР*Обход.Выручка/ВсегоБазаРаспределения, 2));
						
						
						Если СуммаКорретировкиСписания <> 0 Или СуммаКорретировкиСписанияНУ <> 0 Или СуммаКорретировкиСписанияПР <> 0 Или СуммаКорретировкиСписанияВР <> 0 Тогда
						
						
						Если СтруктураДопПараметров.Счет40 Тогда
							// Проводки Дт40 Кт20 на сумму фактической стоимости,
							//          Дт43 Кт40 на сумму отклонений
							НоваяПроводка = мПроводки.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорретировкиСписания;
							НоваяПроводка.СуммаНУ     = СуммаКорретировкиСписанияНУ;
							НоваяПроводка.СуммаПР     = СуммаКорретировкиСписанияПР;
							НоваяПроводка.СуммаВР     = СуммаКорретировкиСписанияВР;
							
							НоваяПроводка.СчетДт =  ПланыСчетов.Хозрасчетный.ВыпускПродукции;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "ВидыСтоимости", Перечисления.ВидыСтоимости.Фактическая);
							
							НоваяПроводка.СчетКт = Обход.Счет;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							БухгалтерскийУчет.УстановитьПодразделенияПроводки(
								НоваяПроводка, Обход.Подразделение, Обход.Подразделение);
							
							НоваяПроводка = мПроводки.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорретировкиСписания;
							СуммаНУ     = СуммаКорретировкиСписанияНУ;
							СуммаПР     = СуммаКорретировкиСписанияПР;
							СуммаВР     = СуммаКорретировкиСписанияВР;
							
							НоваяПроводка.СчетДт = Обход.СчетРасходов;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							НоваяПроводка.СчетКт =  ПланыСчетов.Хозрасчетный.ВыпускПродукции;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "ВидыСтоимости", Перечисления.ВидыСтоимости.Отклонение);
							
							БухгалтерскийУчет.УстановитьПодразделенияПроводки(
								НоваяПроводка, Обход.Подразделение, Обход.Подразделение);
							
							НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР,СуммаПР,СуммаВР,СуммаВР,НоваяПроводка, мПоддержкаПБУ18); 
							
						Иначе
							// Проводка Дт 43 Кт 20 на сумму отклонений
							НоваяПроводка = мПроводки.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорретировкиСписания;
							СуммаНУ     = СуммаКорретировкиСписанияНУ;
							СуммаПР     = СуммаКорретировкиСписанияПР;
							СуммаВР     = СуммаКорретировкиСписанияВР;
							
							НоваяПроводка.СчетДт = Обход.СчетРасходов;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							НоваяПроводка.СчетКт = Обход.Счет;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							БухгалтерскийУчет.УстановитьПодразделенияПроводки(
								НоваяПроводка, Обход.Подразделение, Обход.Подразделение);
							
							НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР,СуммаПР,СуммаВР,СуммаВР,НоваяПроводка, мПоддержкаПБУ18); 
							
						КонецЕсли;
						
							СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
							СтрокаЗаписиРасчетаСебестоимости.СчетУчета = ОбходПоСчетамЗатрат.Счет;
							СтрокаЗаписиРасчетаСебестоимости.Подразделение = ОбходПоПодразделениям.Подразделение;
							СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
							СтрокаЗаписиРасчетаСебестоимости.СуммаПлан = 0;
							СтрокаЗаписиРасчетаСебестоимости.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.УслугиБезИспользованияПлановыхЦен;
							СтрокаЗаписиРасчетаСебестоимости.Сумма = СуммаКорретировкиСписания;
							СтрокаЗаписиРасчетаСебестоимости.СуммаНЗП =  СуммаНЗП;
							СтрокаЗаписиРасчетаСебестоимости.СуммаНУ = СуммаКорретировкиСписанияНУ;
							СтрокаЗаписиРасчетаСебестоимости.СуммаНЗПНУ =  СуммаНЗПНУ;
							СтрокаЗаписиРасчетаСебестоимости.СуммаПР = СуммаКорретировкиСписанияПР;
							СтрокаЗаписиРасчетаСебестоимости.СуммаНЗППР =  СуммаНЗППР;
							СтрокаЗаписиРасчетаСебестоимости.СуммаВР = СуммаКорретировкиСписанияВР;
							СтрокаЗаписиРасчетаСебестоимости.СуммаНЗПВР =  СуммаНЗПВР;
							
					КонецЕсли;
					
				КонецЦикла; // по направлениям выпуска продукции (услуг)
				
			КонецЦикла; // по номенклатурным группам
		КонецЦикла; // по подразделениям
	КонецЦикла; // по счетам учета прямых затрат
	
	мПроводки.Записать(Ложь);
КонецПроцедуры

Функция НайтиРазницуВНЗП(СтруктураДопПараметров, ПеределСчет, ПеределПодразделение, ПеределНоменклатурнаяГруппа)
	
	НЗП = Новый Структура("СуммаПР,СуммаВР",0,0);
	
	Если Не СтруктураДопПараметров.НЗП = Неопределено Тогда
		
		ПеределНЗП = СтруктураДопПараметров.НЗП.НайтиСтроки(Новый Структура("Счет, Подразделение, НоменклатурнаяГруппа", ПеределСчет, ПеределПодразделение, ПеределНоменклатурнаяГруппа));
		
		Если ПеределНЗП = Неопределено Или ПеределНЗП.Количество() = 0 Тогда
			НЗП.СуммаПР = 0;
			НЗП.СуммаВР = 0;
		Иначе
			НЗП.СуммаПР = ПеределНЗП[0].СуммаПР;
			НЗП.СуммаВР = ПеределНЗП[0].СуммаВР;
		КонецЕсли;
	КонецЕсли;
	Возврат НЗП;
КонецФункции

// Процедура формирует данные о прямых затратах на переделе по продукции
//
Процедура СформироватьЗапросПоПрямымЗатратам(СтруктураШапкиДокумента, ПеределПодразделение, ПеределНоменклатурнаяГруппа, РезультатЗапроса, СтруктураДопПараметров, ВыполненоРаспределениеОХРилиОПР)
	
	УсловияВстречногоВыпуска1 = "";
	УсловияВстречногоВыпуска2 = "";
	РасчетПрямыхЗатратНомер = СтруктураДопПараметров.РасчетПрямыхЗатратНомер;
	
	
 	ТекстЗапроса = "ВЫБРАТЬ
                |	ВыпускПродукцииУслуг.СчетЗатрат КАК СчетЗатрат,
                |	ВыпускПродукцииУслуг.Подразделение КАК Подразделение,
                |	ВыпускПродукцииУслуг.ПодразделениеСписания КАК ПодразделениеСписания,
                |	ВыпускПродукцииУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
                |	ВыпускПродукцииУслуг.Продукция,
                |	ВыпускПродукцииУслуг.СчетСписания,
                |	ВыпускПродукцииУслуг.СубконтоСписания1,
                |	ВыпускПродукцииУслуг.СубконтоСписания2,
                |	ВыпускПродукцииУслуг.СубконтоСписания3,
                |	СУММА(ВЫБОР
                |			КОГДА ВыпускПродукцииУслуг.ПрямыеРасходыРаспределятьПоКоличеству
                |				ТОГДА ЕСТЬNULL(ВыпускПродукцииУслуг.КоличествоОборот, 0)
                |			ИНАЧЕ ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)
                |		КОНЕЦ) КАК ПлановаяСтоимость,
                |	СУММА(ВЫБОР
                |			КОГДА ВыпускПродукцииУслуг.ПрямыеРасходыРаспределятьПоКоличеству
                |				ТОГДА ЕСТЬNULL(ВыпускПродукцииУслуг.КоличествоОборот, 0)
                |			ИНАЧЕ 0
                |		КОНЕЦ) КАК ПлановаяСтоимостьВПроводках,
                |	СУММА(ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)) КАК ПлановаяСтоимостьОборот
                |ПОМЕСТИТЬ ВТ_ВыпускПродукцииУслуг
                |ИЗ
                |	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
                |			&НачГраница,
                |			&КонГраница,
                |			Месяц,
                |			Организация = &Организация
                |				И Подразделение = &Подразделение
                |				И НоменклатурнаяГруппа = &НоменклатурнаяГруппа) КАК ВыпускПродукцииУслуг
                |
                |СГРУППИРОВАТЬ ПО
                |	ВыпускПродукцииУслуг.СчетЗатрат,
                |	ВыпускПродукцииУслуг.Подразделение,
                |	ВыпускПродукцииУслуг.ПодразделениеСписания,
                |	ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
                |	ВыпускПродукцииУслуг.Продукция,
                |	ВыпускПродукцииУслуг.СчетСписания,
                |	ВыпускПродукцииУслуг.СубконтоСписания1,
                |	ВыпускПродукцииУслуг.СубконтоСписания2,
                |	ВыпускПродукцииУслуг.СубконтоСписания3
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ХозрасчетныйОбороты.Счет,
                |	ХозрасчетныйОбороты.Подразделение,
                |	ХозрасчетныйОбороты.Субконто1,
                |	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,                                      
				|	СУММА(ВЫБОР
				|			КОГДА ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0 И НЕ (ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД)
                |				ТОГДА 0
                |			ИНАЧЕ ХозрасчетныйОбороты.СуммаНУОборотДт
                |		КОНЕЦ) КАК СуммаНуОборотДт,
                |	СУММА(ВЫБОР
				|			КОГДА ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0 И НЕ (ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД)
                |				ТОГДА 0
                |			ИНАЧЕ ХозрасчетныйОбороты.СуммаПРОборотДт
                |		КОНЕЦ) КАК СуммаПрОборотДт,
                |	СУММА(ВЫБОР
				|			КОГДА ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0 И НЕ (ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД)
                |				ТОГДА 0
                |			ИНАЧЕ ХозрасчетныйОбороты.СуммаВРОборотДт
                |		КОНЕЦ) КАК СуммаВрОборотДт
                |ПОМЕСТИТЬ ВТ_ХозрасчетныйОбороты
                |ИЗ
                |	РегистрБухгалтерии.Хозрасчетный.Обороты(
                |			&НачГраница,
                |			&КонГраница,
                |			,
                |			Счет В
                |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
                |					ВТ_ВыпускПродукцииУслуг.СчетЗатрат
                |				ИЗ
                |					ВТ_ВыпускПродукцииУслуг),
                |			&ВидыСубконтоНГиСЗ,
                |			Организация = &Организация
                |				И Подразделение = &Подразделение
                |				И Субконто1 = &НоменклатурнаяГруппа,
                |			,
                |			) КАК ХозрасчетныйОбороты
                |		ЛЕВОЕ СОЕДИНЕНИЕ СписокПрямыхРасходовНУ КАК Правила
                |		ПО (Правила.ВидЗатратНУ = ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ)
                |			И (ВЫБОР
                |				КОГДА Правила.Подразделение <> НЕОПРЕДЕЛЕНО
                |					ТОГДА Правила.Подразделение = ХозрасчетныйОбороты.Подразделение
                |				ИНАЧЕ ИСТИНА
                |			КОНЕЦ)
                |			И (ВЫБОР
                |				КОГДА Правила.СчетЗатрат <> НЕОПРЕДЕЛЕНО
                |					ТОГДА Правила.СчетЗатрат = ХозрасчетныйОбороты.Счет
                |				ИНАЧЕ ИСТИНА
                |			КОНЕЦ)
                |			И (ВЫБОР
                |				КОГДА Правила.КорСчетЗатрат <> НЕОПРЕДЕЛЕНО
                |					ТОГДА Правила.КорСчетЗатрат = ХозрасчетныйОбороты.КорСчет
                |				ИНАЧЕ ИСТИНА
                |			КОНЕЦ)
                |			И (ВЫБОР
                |				КОГДА Правила.СтатьяЗатрат <> НЕОПРЕДЕЛЕНО
                |					ТОГДА Правила.СтатьяЗатрат = ХозрасчетныйОбороты.Субконто2
                |				ИНАЧЕ ИСТИНА
                |			КОНЕЦ)
                |
                |СГРУППИРОВАТЬ ПО
                |	ХозрасчетныйОбороты.Счет,
                |	ХозрасчетныйОбороты.Подразделение,
                |	ХозрасчетныйОбороты.Субконто1
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ХозрасчетныйОборотыИОстатки.Счет,
                |	ХозрасчетныйОборотыИОстатки.Подразделение,
                |	ХозрасчетныйОборотыИОстатки.Субконто1 КАК НоменклатурнаяГруппа,
                |	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаОборотДт, 0)) КАК СуммаОборотДт,
                |	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаНуОборотДт, 0)) КАК СуммаНуОборотДт,
                |	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаПрОборотДт, 0)) КАК СуммаПрОборотДт,
                |	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаВрОборотДт, 0)) КАК СуммаВрОборотДт,
                |	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаОстаток, 0)) КАК СуммаКонечныйОстаток,
                |	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаНуОстаток, 0)) КАК СуммаНуКонечныйОстаток,
                |	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаПрОстаток, 0)) КАК СуммаПрКонечныйОстаток,
                |	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаВрОстаток, 0)) КАК СуммаВрКонечныйОстаток
                |ПОМЕСТИТЬ ВТ_ХозрасчетныйОборотыИОстатки
                |ИЗ
                |	(ВЫБРАТЬ
                |		ХозрасчетныйОбороты.Счет КАК Счет,
                |		ХозрасчетныйОбороты.Подразделение КАК Подразделение,
                |		ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
                |		ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
                |		ХозрасчетныйОбороты.СуммаНуОборотДт КАК СуммаНуОборотДт,
                |		ХозрасчетныйОбороты.СуммаПрОборотДт КАК СуммаПрОборотДт,
                |		ХозрасчетныйОбороты.СуммаВрОборотДт КАК СуммаВрОборотДт,
                |		0 КАК СуммаОстаток,
                |		0 КАК СуммаНуОстаток,
                |		0 КАК СуммаПрОстаток,
                |		0 КАК СуммаВрОстаток
                |	ИЗ
                |		ВТ_ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
                |	
                |	ОБЪЕДИНИТЬ ВСЕ
                |	
                |	ВЫБРАТЬ
                |		ХозрасчетныйОстатки.Счет,
                |		ХозрасчетныйОстатки.Подразделение,
                |		ХозрасчетныйОстатки.Субконто1,
                |		0,
                |		0,
                |		0,
                |		0,
                |		ХозрасчетныйОстатки.СуммаОстаток,
                |		ХозрасчетныйОстатки.СуммаНУОстаток,
                |		ХозрасчетныйОстатки.СуммаПРОстаток,
                |		ХозрасчетныйОстатки.СуммаВРОстаток
                |	ИЗ
                |		РегистрБухгалтерии.Хозрасчетный.Остатки(
                |				&КонГраница,
                |				Счет В
                |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
                |						ВТ_ВыпускПродукцииУслуг.СчетЗатрат
                |					ИЗ
                |						ВТ_ВыпускПродукцииУслуг),
                |				&ВидыСубконтоНГиСЗ,
                |				Организация = &Организация
                |					И Подразделение = &Подразделение
                |					И Субконто1 = &НоменклатурнаяГруппа) КАК ХозрасчетныйОстатки) КАК ХозрасчетныйОборотыИОстатки
                |
                |СГРУППИРОВАТЬ ПО
                |	ХозрасчетныйОборотыИОстатки.Счет,
                |	ХозрасчетныйОборотыИОстатки.Подразделение,
                |	ХозрасчетныйОборотыИОстатки.Субконто1
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ВыпускПродукцииУслуг.СчетЗатрат КАК СчетЗатрат,
                |	ВыпускПродукцииУслуг.Подразделение КАК Подразделение,
                |	ВыпускПродукцииУслуг.ПодразделениеСписания КАК ПодразделениеСписания,
                |	ВыпускПродукцииУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
                |	ВыпускПродукцииУслуг.Продукция,
                |	ВыпускПродукцииУслуг.СчетСписания,
                |	ВыпускПродукцииУслуг.СубконтоСписания1,
                |	ВыпускПродукцииУслуг.СубконтоСписания2,
                |	ВыпускПродукцииУслуг.СубконтоСписания3,
                |	СУММА(ВыпускПродукцииУслуг.ПлановаяСтоимость) КАК ПлановаяСтоимость,
                |	СУММА(ВыпускПродукцииУслуг.ПлановаяСтоимостьВПроводках) КАК ПлановаяСтоимостьВПроводках,
                |	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаКонечныйОстаток, 0)) КАК ОстатокПрямыхРасходов,
                |	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОборотДт, 0)) КАК ВсегоПрямыхРасходов,
                |	СУММА(ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)) КАК СписаноРасходов,
                |	МАКСИМУМ(ЕСТЬNULL(ОстаткиНЗП.СуммаБУ, 0)) КАК СуммаНЗП,
                |	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНуКонечныйОстаток, 0) + ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаВРОборотКт, 0) + ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаПРОборотКт, 0) КАК ОстатокПрямыхРасходовНУ,
                |	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПрКонечныйОстаток, 0) КАК ОстатокПрямыхРасходовПР,
                |	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВрКонечныйОстаток, 0) КАК ОстатокПрямыхРасходовВР,
                |	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНуОборотДт, 0) КАК ВсегоПрямыхРасходовНУ,
                |	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПрОборотДт, 0) КАК ВсегоПрямыхРасходовПР,
                |	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВрОборотДт, 0) КАК ВсегоПрямыхРасходовВР,
                |	ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0) КАК СписаноРасходовНУ,
                |	0 КАК СписаноРасходовПР,
                |	0 КАК СписаноРасходовВР,
                |	ЕСТЬNULL(ОстаткиНЗП.СуммаНУ, 0) КАК СуммаНЗПНУ
                |ИЗ
                |	ВТ_ВыпускПродукцииУслуг КАК ВыпускПродукцииУслуг
                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ХозрасчетныйОборотыИОстатки КАК ХозрасчетныйОстатки
                |		ПО ВыпускПродукцииУслуг.СчетЗатрат = ХозрасчетныйОстатки.Счет
                |			И ВыпускПродукцииУслуг.Подразделение = ХозрасчетныйОстатки.Подразделение
                |			И ВыпускПродукцииУслуг.НоменклатурнаяГруппа = ХозрасчетныйОстатки.НоменклатурнаяГруппа
                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                |			ИнвентаризацияНЗП.СчетЗатрат КАК СчетЗатрат,
                |			ИнвентаризацияНЗП.ПодразделениеОрганизации КАК Подразделение,
                |			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
                |			СУММА(ИнвентаризацияНЗПСостав.Сумма) КАК СуммаБУ,
                |			ИнвентаризацияНЗПСостав.СуммаНУ КАК СуммаНУ
                |		ИЗ
                |			Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
                |				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
                |				ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
                |		ГДЕ
                |			ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата
                |			И ИнвентаризацияНЗП.Организация = &Организация
                |			И ИнвентаризацияНЗП.ПодразделениеОрганизации = &Подразделение
                |			И ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
                |			И (НЕ ИнвентаризацияНЗП.ПометкаУдаления)
                |		
                |		СГРУППИРОВАТЬ ПО
                |			ИнвентаризацияНЗП.СчетЗатрат,
                |			ИнвентаризацияНЗП.ПодразделениеОрганизации,
                |			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
                |			ИнвентаризацияНЗПСостав.СуммаНУ) КАК ОстаткиНЗП
                |		ПО (ХозрасчетныйОстатки.Счет = ОстаткиНЗП.СчетЗатрат)
                |			И (ХозрасчетныйОстатки.Подразделение = ОстаткиНЗП.Подразделение)
                |			И (ХозрасчетныйОстатки.НоменклатурнаяГруппа = ОстаткиНЗП.НоменклатурнаяГруппа)
                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
                |				&НачДата,
                |				&КонДата,
                |				,
                |				СчетДт В ИЕРАРХИИ (&Счет90),
                |				&ВидыСубконто,
                |				СчетКт В ИЕРАРХИИ (&СчетаЗатрат),
                |				,
                |				Организация = &Организация
                |					И ПодразделениеКт = &Подразделение
                |					И СубконтоКт1 = &НоменклатурнаяГруппа) КАК ХозрасчетныйОборотыДтКт
                |		ПО ВыпускПродукцииУслуг.СчетЗатрат = ХозрасчетныйОборотыДтКт.СчетКт
                |			И ВыпускПродукцииУслуг.Подразделение = ХозрасчетныйОборотыДтКт.ПодразделениеКт
                |			И ВыпускПродукцииУслуг.НоменклатурнаяГруппа = ХозрасчетныйОборотыДтКт.СубконтоКт1
                |
                |СГРУППИРОВАТЬ ПО
                |	ВыпускПродукцииУслуг.СчетЗатрат,
                |	ВыпускПродукцииУслуг.Подразделение,
                |	ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
                |	ВыпускПродукцииУслуг.Продукция,
                |	ВыпускПродукцииУслуг.СчетСписания,
                |	ВыпускПродукцииУслуг.СубконтоСписания1,
                |	ВыпускПродукцииУслуг.СубконтоСписания2,
                |	ВыпускПродукцииУслуг.СубконтоСписания3,
                |	ЕСТЬNULL(ОстаткиНЗП.СуммаБУ, 0),
                |	ЕСТЬNULL(ОстаткиНЗП.СуммаНУ, 0),
                |	ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0),
                |	ВыпускПродукцииУслуг.ПодразделениеСписания,
                |	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПрКонечныйОстаток, 0),
                |	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВрКонечныйОстаток, 0),
                |	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПрОборотДт, 0),
                |	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВрОборотДт, 0),
                |	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНуОборотДт, 0),
                |	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНуКонечныйОстаток, 0) + ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаВРОборотКт, 0) + ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаПРОборотКт, 0)
                |ИТОГИ
                |	СУММА(ПлановаяСтоимость),
                |	СУММА(ПлановаяСтоимостьВПроводках),
                |	МАКСИМУМ(ОстатокПрямыхРасходов),
                |	СУММА(ВсегоПрямыхРасходов),
                |	СУММА(СписаноРасходов),
                |	МАКСИМУМ(СуммаНЗП),
                |	МАКСИМУМ(ОстатокПрямыхРасходовНУ),
                |	МАКСИМУМ(ОстатокПрямыхРасходовПР),
                |	МАКСИМУМ(ОстатокПрямыхРасходовВР),
                |	СУММА(ВсегоПрямыхРасходовНУ),
                |	СУММА(ВсегоПрямыхРасходовПР),
                |	СУММА(ВсегоПрямыхРасходовВР),
                |	СУММА(СписаноРасходовНУ),
                |	СУММА(СписаноРасходовПР),
                |	СУММА(СписаноРасходовВР),
                |	МАКСИМУМ(СуммаНЗПНУ)
                |ПО
                |	Подразделение,
                |	СчетЗатрат,
                |	НоменклатурнаяГруппа";
 
 
	Если ПеределНоменклатурнаяГруппа = "Все" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И НоменклатурнаяГруппа = &НоменклатурнаяГруппа) КАК ВыпускПродукцииУслуг", ") КАК ВыпускПродукцииУслуг");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И Субконто1 = &НоменклатурнаяГруппа", " ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И СубконтоКт1 = &НоменклатурнаяГруппа", " ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И НоменклатурнаяГруппа = &НоменклатурнаяГруппа) КАК ВыпускПродукцииУслуг", "И НоменклатурнаяГруппа = &НоменклатурнаяГруппа" + УсловияВстречногоВыпуска2 + ") КАК ВыпускПродукцииУслуг");
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = СтруктураДопПараметров.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачДата",               мНачДата);
	Запрос.УстановитьПараметр("КонДата",               мКонДата);
	Запрос.УстановитьПараметр("НачГраница",            мНачГраница);
	Запрос.УстановитьПараметр("КонГраница",            мКонГраница);
	Запрос.УстановитьПараметр("Организация",           СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Подразделение",         ПеределПодразделение);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа",  ПеределНоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("ЕНВД",                Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.УстановитьПараметр("СчетаЗатрат",        СчетаЗатрат);
	Счета90 = Новый Массив;
	Счета90.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу);
	Счета90.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы);
	Запрос.УстановитьПараметр("Счет90",        Счета90);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконтоНГиСЗ",  ВидыСубконто);
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
		ЗначенияБлокировки.Вставить("Подразделение", ПеределПодразделение); 
		ЗначенияБлокировки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы, ПеределНоменклатурнаяГруппа); 
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		ТекстЗапросаПоСчетам =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаЗатрат)";
		
		ЗапросПоСчетам = Новый Запрос;
		ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
		ЗапросПоСчетам.УстановитьПараметр("СчетаЗатрат", СчетаЗатрат);
		МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		Для каждого БлокируемыйСчет Из МассивСчетов Цикл
		
			ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		КонецЦикла;
					
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ВыпускПродукцииУслуг");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(мНачДата, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		ЗначенияБлокировки.Вставить("Подразделение", ПеределПодразделение); 
		ЗначенияБлокировки.Вставить("НоменклатурнаяГруппа", ПеределНоменклатурнаяГруппа); 
				
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ВыпускПродукцииУслуг";
	Запрос.Выполнить();
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ХозрасчетныйОбороты";
	Запрос.Выполнить();
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ХозрасчетныйОборотыИОстатки";
	Запрос.Выполнить();

КонецПроцедуры // СформироватьЗапросПоПрямымЗатратам()

// Процедура формирования движений по прямым затратам по переделу
// Производит распределение прямых расходов, учтенных на счетах 20 и 23,
// на стоимость продукции (услуг).
// Распределяются только те прямые расходы, для которых установлен текущий номер передела.
//
//	Параметры:
//		НомерПередела - Число - номер передела;
//		ВыполненоРаспределениеОХРилиОПР - Булево - определяет на данный момент выполнено ли
//			распределение общепроизводственных и общехозяйственных расходов.
//
Процедура ДвиженияПоПрямымЗатратам(СтруктураШапкиДокумента, ПеределПодразделение = "", ПеределНоменклатурнаяГруппа = "", ВыполненоРаспределениеОХРилиОПР = Ложь, МассивНоменклатуры, СтруктураДопПараметров)
	
	
	Если Не мУчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам Тогда
		ДвиженияПоПрямымЗатратамПоУслугам(СтруктураШапкиДокумента, СтруктураДопПараметров, ВыполненоРаспределениеОХРилиОПР);
	КонецЕсли;
	
	// Формирование запроса по прямым расходам.
	РезультатЗапроса = Неопределено;
	СформироватьЗапросПоПрямымЗатратам(СтруктураШапкиДокумента, ПеределПодразделение, ПеределНоменклатурнаяГруппа, РезультатЗапроса, СтруктураДопПараметров, ВыполненоРаспределениеОХРилиОПР);
	ЗаписьРасчетаСебестоимости = СтруктураДопПараметров.ЗаписьРасчетаСебестоимости;
	
	// Выбираются прямые расходы в разрезе счета учета, подразделения, номенклатурной группы.
	ОбходПоподразделениям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоподразделениям.Следующий() Цикл
		ОбходПоСчетамЗатарт = ОбходПоподразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоСчетамЗатарт.Следующий() Цикл

			ОбходПоНомГруппам = ОбходПоСчетамЗатарт.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоНомГруппам.Следующий() Цикл
				
				
				// Прямые расходы за минусом НЗП подлежат распределению
				// на стоимость готовой продукции, услуг.
				// Т.к. при оприходовании на склад готовой продукции часть прямых
				// расходов (в размере плановой стоимости этой продукции) была
				// списана, то необходимо к общей сумме прямых расходов прибавить
				// списанную ранее сумму прямых расходов.
				
				СписаноРасходов = ОбходПоНомГруппам.СписаноРасходов;
				СписаноРасходовНУ = ОбходПоНомГруппам.СписаноРасходовНУ;
				СписаноРасходовПР = ОбходПоНомГруппам.СписаноРасходовПР;
				СписаноРасходовВР = ОбходПоНомГруппам.СписаноРасходовВР;
				
				ВсегоПрямыхРасходов   = ОбходПоНомГруппам.ОстатокПрямыхРасходов   + ?(ВыполненоРаспределениеОХРилиОПР, 0, СписаноРасходов);
				ВсегоПрямыхРасходовНУ = ОбходПоНомГруппам.ОстатокПрямыхРасходовНУ + ?(ВыполненоРаспределениеОХРилиОПР, 0, СписаноРасходовНУ);
				ВсегоПрямыхРасходовПР = ОбходПоНомГруппам.ОстатокПрямыхРасходовПР + ?(ВыполненоРаспределениеОХРилиОПР, 0, СписаноРасходовПР);
				ВсегоПрямыхРасходовВР = ОбходПоНомГруппам.ОстатокПрямыхРасходовВР + ?(ВыполненоРаспределениеОХРилиОПР, 0, СписаноРасходовВР);
				
				СуммаНЗП   = ОбходПоНомГруппам.СуммаНЗП;
				СуммаНЗПНУ = ОбходПоНомГруппам.СуммаНЗПНУ;
				РазницыВНЗП = НайтиРазницуВНЗП(СтруктураДопПараметров, ОбходПоСчетамЗатарт.СчетЗатрат, ОбходПоНомГруппам.Подразделение, ОбходПоНомГруппам.НоменклатурнаяГруппа);
				СуммаНЗППР = РазницыВНЗП.СуммаПр;
				СуммаНЗПВР = РазницыВНЗП.СуммаВр;
				
				СуммаПрямыхРасходовНаВыпуск   = ВсегоПрямыхРасходов   - СуммаНЗП;
				СуммаПрямыхРасходовНаВыпускНУ = ВсегоПрямыхРасходовНУ - СуммаНЗПНУ;
				СуммаПрямыхРасходовНаВыпускПР = ВсегоПрямыхРасходовПР - СуммаНЗППР;
				СуммаПрямыхРасходовНаВыпускВР = ВсегоПрямыхРасходовВР - СуммаНЗПВР;
				
				// В качестве базы распределения прямых расходов на выпущенную продукцию
				// используется плановая себестоимость.
				ВсегоБазаРаспределения = ОбходПоНомГруппам.ПлановаяСтоимость;
				РаспределеноБазыРаспределения = 0;
				СписаноПрямыхРасходов   = 0;
				СписаноПрямыхРасходовНУ = 0;
				СписаноПрямыхРасходовПР = 0;
				СписаноПрямыхРасходовВР = 0;
				
				ПоследнийПередел = (Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "1" Или  СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "");
				
				Если ПоследнийПередел И НЕ СуммаНЗП = 0 Тогда
					СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
					СтрокаЗаписиРасчетаСебестоимости.СчетУчета = ОбходПоСчетамЗатарт.СчетЗатрат;
					СтрокаЗаписиРасчетаСебестоимости.Подразделение = ОбходПоПодразделениям.Подразделение;
					СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
					СтрокаЗаписиРасчетаСебестоимости.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.РасходыНаПроизводствоПродукцииИУслуг;
					СтрокаЗаписиРасчетаСебестоимости.СуммаНЗП   =  СуммаНЗП;
					СтрокаЗаписиРасчетаСебестоимости.СуммаНЗПНУ =  СуммаНЗПНУ;
					СтрокаЗаписиРасчетаСебестоимости.СуммаНЗППР =  СуммаНЗППР;
					СтрокаЗаписиРасчетаСебестоимости.СуммаНЗПВР =  СуммаНЗПВР;
					СтрокаЗаписиРасчетаСебестоимости.Сумма      =  0;
					СтрокаЗаписиРасчетаСебестоимости.СуммаНУ    =  0;
					СтрокаЗаписиРасчетаСебестоимости.СуммаПР    =  0;
					СтрокаЗаписиРасчетаСебестоимости.СуммаВР    =  0;
					СтрокаЗаписиРасчетаСебестоимости.СуммаПлан  =  0;
				КонецЕсли;	
				
				// Обход по операциям выпуска продукции (услуг). Обходя все операции выпуска
				// производим распределение по ним прямых расходов.
				ТаблицаКорректируемыхНаправлений = Новый ТаблицаЗначений;
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("Продукция");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("Подразделение");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("ПодразделениеСписания");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("НоменклатурнаяГруппа");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания1");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания2");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания3");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СчетСписания");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СчетЗатрат");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаКорретировкиСписания");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаКорретировкиСписанияНУ");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаКорретировкиСписанияПР");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаКорретировкиСписанияВР");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СписаноРасходов");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СписаноРасходовНУ");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СписаноРасходовПР");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СписаноРасходовВР");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("ПлановаяСтоимость");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("ПлановаяСтоимостьВПроводках");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаНЗП");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаНЗПНУ");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаНЗППР");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаНЗПВР");
				
				СуммаНеКорректируемыхНаправлений   = 0;
				СуммаНеКорректируемыхНаправленийНУ = 0;
				СуммаНеКорректируемыхНаправленийПР = 0;
				СуммаНеКорректируемыхНаправленийВР = 0;
				
				
				Обход = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Обход.Следующий() Цикл
					
					РаспределеноБазыРаспределения = РаспределеноБазыРаспределения + Обход.ПлановаяСтоимость;
					
					СуммаСписания   = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпуск/ВсегоБазаРаспределения*РаспределеноБазыРаспределения, 2) - СписаноПрямыхРасходов);
					СуммаСписанияНУ = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускНУ/ВсегоБазаРаспределения*РаспределеноБазыРаспределения, 2) - СписаноПрямыхРасходовНУ);
					СуммаСписанияПр = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускПР/ВсегоБазаРаспределения*РаспределеноБазыРаспределения, 2) - СписаноПрямыхРасходовПР);
					СуммаСписанияВР = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускВР/ВсегоБазаРаспределения*РаспределеноБазыРаспределения, 2) - СписаноПрямыхРасходовВР);
					
					СписаноПрямыхРасходов   = СписаноПрямыхРасходов   + СуммаСписания;
					СписаноПрямыхРасходовНУ = СписаноПрямыхРасходовНУ + СуммаСписанияНУ;
					СписаноПрямыхРасходовПР = СписаноПрямыхРасходовПР + СуммаСписанияПР;
					СписаноПрямыхРасходовВР = СписаноПрямыхРасходовВР + СуммаСписанияВР;
					
					СуммаКорретировкиСписания   = СуммаСписания - ?(ВыполненоРаспределениеОХРилиОПР, 0, Обход.СписаноРасходов);
					СуммаКорретировкиСписанияНУ = СуммаСписанияНУ - ?(ВыполненоРаспределениеОХРилиОПР, 0, Обход.СписаноРасходовНУ);
					СуммаКорретировкиСписанияПР = СуммаСписанияПР - ?(ВыполненоРаспределениеОХРилиОПР, 0, Обход.СписаноРасходовПР);
					СуммаКорретировкиСписанияВР = СуммаСписанияВР - ?(ВыполненоРаспределениеОХРилиОПР, 0, Обход.СписаноРасходовВР);
					
					
					Если Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "3"  Тогда
						ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, Продукция, СубконтоКт2, СубконтоКт3", Обход.Подразделение, Обход.НоменклатурнаяГруппа, Обход.СубконтоСписания1, Обход.СубконтоСписания2, Обход.СубконтоСписания3));
						Если ВстречныйВыпуск.Количество() > 0 Тогда
							СуммаНеКорректируемыхНаправлений   = СуммаНеКорректируемыхНаправлений + СуммаКорретировкиСписания;
							СуммаНеКорректируемыхНаправленийНУ = СуммаНеКорректируемыхНаправленийНУ + СуммаКорретировкиСписанияНУ;
							СуммаНеКорректируемыхНаправленийПР = СуммаНеКорректируемыхНаправленийПР + СуммаКорретировкиСписанияПР;
							СуммаНеКорректируемыхНаправленийВР = СуммаНеКорректируемыхНаправленийВР + СуммаКорретировкиСписанияВР;
							Продолжить;
						Иначе
							ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, Продукция, СубконтоКт2", Обход.Подразделение, Обход.НоменклатурнаяГруппа, Обход.СубконтоСписания1, Обход.СубконтоСписания2));
							Если ВстречныйВыпуск.Количество() > 0 Тогда
							СуммаНеКорректируемыхНаправлений   = СуммаНеКорректируемыхНаправлений + СуммаКорретировкиСписания;
							СуммаНеКорректируемыхНаправленийНУ = СуммаНеКорректируемыхНаправленийНУ + СуммаКорретировкиСписанияНУ;
							СуммаНеКорректируемыхНаправленийПР = СуммаНеКорректируемыхНаправленийПР + СуммаКорретировкиСписанияПР;
							СуммаНеКорректируемыхНаправленийВР = СуммаНеКорректируемыхНаправленийВР + СуммаКорретировкиСписанияВР;
							Продолжить;
							КонецЕсли;
							
							ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппаПересчета, ПодразделениеПересчета", Обход.ПодразделениеСписания, Обход.НоменклатурнаяГруппа, Обход.Подразделение));
							Если ВстречныйВыпуск.Количество() > 0 Тогда
							СуммаНеКорректируемыхНаправлений   = СуммаНеКорректируемыхНаправлений + СуммаКорретировкиСписания;
							СуммаНеКорректируемыхНаправленийНУ = СуммаНеКорректируемыхНаправленийНУ + СуммаКорретировкиСписанияНУ;
							СуммаНеКорректируемыхНаправленийПР = СуммаНеКорректируемыхНаправленийПР + СуммаКорретировкиСписанияПР;
							СуммаНеКорректируемыхНаправленийВР = СуммаНеКорректируемыхНаправленийВР + СуммаКорретировкиСписанияВР;
							Продолжить;
							КонецЕсли;
						
					КонецЕсли;
					КонецЕсли;
					
					НоваяСтрока = ТаблицаКорректируемыхНаправлений.Добавить();
					НоваяСтрока.Продукция            = Обход.Продукция;
					НоваяСтрока.Подразделение        = Обход.Подразделение;
					НоваяСтрока.ПодразделениеСписания = Обход.ПодразделениеСписания;
					НоваяСтрока.НоменклатурнаяГруппа = Обход.НоменклатурнаяГруппа;
					НоваяСтрока.СубконтоСписания1    = Обход.СубконтоСписания1;
					НоваяСтрока.СубконтоСписания2    = Обход.СубконтоСписания2;
					НоваяСтрока.СубконтоСписания3    = Обход.СубконтоСписания3;
					НоваяСтрока.СчетСписания         = Обход.СчетСписания;
					НоваяСтрока.СчетЗатрат           = Обход.СчетЗатрат;
					НоваяСтрока.СуммаКорретировкиСписания = СуммаКорретировкиСписания;
					НоваяСтрока.СуммаКорретировкиСписанияНУ = СуммаКорретировкиСписанияНУ;
					НоваяСтрока.СуммаКорретировкиСписанияПР = СуммаКорретировкиСписанияПР;
					НоваяСтрока.СуммаКорретировкиСписанияВР = СуммаКорретировкиСписанияВР;
					НоваяСтрока.СписаноРасходов   =?(ВыполненоРаспределениеОХРилиОПР, 0, Обход.СписаноРасходов);
					НоваяСтрока.СписаноРасходовНУ =?(ВыполненоРаспределениеОХРилиОПР, 0, Обход.СписаноРасходовНУ);
					НоваяСтрока.СписаноРасходовПР =?(ВыполненоРаспределениеОХРилиОПР, 0, Обход.СписаноРасходовПР);
					НоваяСтрока.СписаноРасходовВР =?(ВыполненоРаспределениеОХРилиОПР, 0, Обход.СписаноРасходовВР);
					НоваяСтрока.ПлановаяСтоимость   = Обход.ПлановаяСтоимость;
					НоваяСтрока.ПлановаяСтоимостьВПроводках   = Обход.ПлановаяСтоимостьВПроводках;
					НоваяСтрока.СуммаНЗП            = Обход.СуммаНЗП;
					НоваяСтрока.СуммаНЗПНУ            = Обход.СуммаНЗПНУ;
				КонецЦикла;
				
				ВсегоКорректировок = ТаблицаКорректируемыхНаправлений.Итог("СуммаКорретировкиСписания");
				ВсегоКорректировокНУ = ТаблицаКорректируемыхНаправлений.Итог("СуммаКорретировкиСписанияНУ");
				ВсегоКорректировокПР = ТаблицаКорректируемыхНаправлений.Итог("СуммаКорретировкиСписанияПР");
				ВсегоКорректировокВР = ТаблицаКорректируемыхНаправлений.Итог("СуммаКорретировкиСписанияВР");
				
				КоэффициентРаспределенияНекорректируемойСуммы   = ?(ВсегоКорректировок = 0, 0,   СуммаНеКорректируемыхНаправлений / ВсегоКорректировок);
				КоэффициентРаспределенияНекорректируемойСуммыНУ = ?(ВсегоКорректировокНУ = 0, 0, СуммаНеКорректируемыхНаправленийНУ / ВсегоКорректировокНУ);
				КоэффициентРаспределенияНекорректируемойСуммыПР = ?(ВсегоКорректировокПР = 0, 0, СуммаНеКорректируемыхНаправленийПР / ВсегоКорректировокПР);
				КоэффициентРаспределенияНекорректируемойСуммыВР = ?(ВсегоКорректировокВР = 0, 0, СуммаНеКорректируемыхНаправленийВР / ВсегоКорректировокВР);
				
				Для Каждого Обход Из ТаблицаКорректируемыхНаправлений Цикл
					СуммаКорретировкиСписания = Обход.СуммаКорретировкиСписания * (1 + КоэффициентРаспределенияНекорректируемойСуммы);	
					СуммаКорретировкиСписанияНУ = Обход.СуммаКорретировкиСписанияНУ * (1 + КоэффициентРаспределенияНекорректируемойСуммыНУ);	
					СуммаКорретировкиСписанияПР = Обход.СуммаКорретировкиСписанияПР * (1 + КоэффициентРаспределенияНекорректируемойСуммыПР);	
					СуммаКорретировкиСписанияВР = Обход.СуммаКорретировкиСписанияВР * (1 + КоэффициентРаспределенияНекорректируемойСуммыВР);	
					
					СписаноРасходов   = Обход.СписаноРасходов * (1 + КоэффициентРаспределенияНекорректируемойСуммы);	
					СписаноРасходовНУ = Обход.СписаноРасходовНУ * (1 + КоэффициентРаспределенияНекорректируемойСуммыНУ);	
					СписаноРасходовПР = Обход.СписаноРасходовПР * (1 + КоэффициентРаспределенияНекорректируемойСуммыПР);	
					СписаноРасходовВР = Обход.СписаноРасходовВР * (1 + КоэффициентРаспределенияНекорректируемойСуммыВР);	
					
					// Формирование проводок по списанию
					Если СтруктураДопПараметров.Счет40 Тогда
						// Проводки Дт40 Кт20 на сумму фактической стоимости,
						//          Дт43 Кт40 на сумму отклонений
						Если СуммаКорретировкиСписания <> 0 Или СуммаКорретировкиСписанияНУ <> 0 Или СуммаКорретировкиСписанияПР <> 0 Или СуммаКорретировкиСписанияВР <> 0 Тогда
							НоваяПроводка = мПроводки.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма         = СуммаКорретировкиСписания;
							СуммаНУ       = СуммаКорретировкиСписанияНУ;
							СуммаПР       = СуммаКорретировкиСписанияПР;
							СуммаВР       = СуммаКорретировкиСписанияВР;
							
							НоваяПроводка.СчетДт =   ПланыСчетов.Хозрасчетный.ВыпускПродукции;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "ВидыСтоимости", Перечисления.ВидыСтоимости.Фактическая);
							
							НоваяПроводка.СчетКт = Обход.СчетЗатрат;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							БухгалтерскийУчет.УстановитьПодразделенияПроводки(
								НоваяПроводка, Обход.Подразделение, Обход.Подразделение);
							
				            НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР,СуммаПР,СуммаВР,СуммаВР,НоваяПроводка, мПоддержкаПБУ18); 
							
							НоваяПроводка = мПроводки.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорретировкиСписания - СписаноРасходов;
							СуммаНУ     = СуммаКорретировкиСписанияНУ - СписаноРасходовНУ;
							СуммаПР     = СуммаКорретировкиСписанияПР - СписаноРасходовПР;
							СуммаВР     = СуммаКорретировкиСписанияВР - СписаноРасходовВР;
							
							НоваяПроводка.СчетДт = Обход.СчетСписания;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, Обход.СубконтоСписания1);
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, Обход.СубконтоСписания2);
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, Обход.СубконтоСписания3);
							
							НоваяПроводка.СчетКт =  ПланыСчетов.Хозрасчетный.ВыпускПродукции;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "ВидыСтоимости", Перечисления.ВидыСтоимости.Отклонение);
							
							БухгалтерскийУчет.УстановитьПодразделенияПроводки(
								НоваяПроводка, Обход.ПодразделениеСписания, Обход.Подразделение);
							
				            НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР,СуммаПР,СуммаВР,СуммаВР,НоваяПроводка, мПоддержкаПБУ18); 
							
						КонецЕсли;
					Иначе
						Если СуммаКорретировкиСписания <> 0 Или СуммаКорретировкиСписанияНУ <> 0 Или СуммаКорретировкиСписанияПР <> 0 Или СуммаКорретировкиСписанияВР <> 0 Тогда
							// Проводка Дт 43 Кт 20 на сумму отклонений
							НоваяПроводка = мПроводки.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорретировкиСписания;
							СуммаНУ     = СуммаКорретировкиСписанияНУ;
							СуммаПР     = СуммаКорретировкиСписанияПР;
							СуммаВР     = СуммаКорретировкиСписанияВР;
							
							НоваяПроводка.СчетДт = Обход.СчетСписания;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, Обход.СубконтоСписания1);
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, Обход.СубконтоСписания2);
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, Обход.СубконтоСписания3);
							
							НоваяПроводка.СчетКт = Обход.СчетЗатрат;
							БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							БухгалтерскийУчет.УстановитьПодразделенияПроводки(
								НоваяПроводка, Обход.ПодразделениеСписания, Обход.Подразделение);
							
				            НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР,СуммаПР,СуммаВР,СуммаВР,НоваяПроводка, мПоддержкаПБУ18); 
							
						КонецЕсли;	
					КонецЕсли;
					
					// Добавим в таблицу список номенклатуры, у которой изменилась средневзвешенная
					// стоимость и, следовательно, необходимо выполнить корректировку списаний.
					Если (СуммаКорретировкиСписания <> 0 ИЛИ ?(СтруктураДопПараметров.Счет40,СуммаКорретировкиСписания - СписаноРасходов <> 0,ложь))
						Или (СуммаКорретировкиСписанияНУ <> 0 ИЛИ ?(СтруктураДопПараметров.Счет40,СуммаКорретировкиСписанияНУ - СписаноРасходовНУ <> 0,ложь))
						Или (СуммаКорретировкиСписанияПР <> 0 ИЛИ ?(СтруктураДопПараметров.Счет40,СуммаКорретировкиСписанияПР - СписаноРасходовПР <> 0,ложь))
						Или (СуммаКорретировкиСписанияВР <> 0 ИЛИ ?(СтруктураДопПараметров.Счет40,СуммаКорретировкиСписанияВР - СписаноРасходовВР <> 0,ложь)) Тогда
						Для НомерСубконто = 1 По 2 Цикл
							Если ТипЗнч(Обход["СубконтоСписания" + НомерСубконто]) = Тип("СправочникСсылка.Номенклатура") Тогда
								МассивНоменклатуры.Добавить(Обход["СубконтоСписания" + НомерСубконто]);
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если СуммаКорретировкиСписания <> 0 Или СуммаКорретировкиСписанияНУ <> 0 Или СуммаКорретировкиСписанияПР <> 0 Или СуммаКорретировкиСписанияВР <> 0 Тогда
						
						СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
						СтрокаЗаписиРасчетаСебестоимости.СчетУчета = ОбходПоСчетамЗатарт.СчетЗатрат;
						СтрокаЗаписиРасчетаСебестоимости.Подразделение = ОбходПоПодразделениям.Подразделение;
						СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
						СтрокаЗаписиРасчетаСебестоимости.Продукция = Обход.Продукция;
						СтрокаЗаписиРасчетаСебестоимости.СуммаПлан = Обход.ПлановаяСтоимость;
						СтрокаЗаписиРасчетаСебестоимости.ДокументВыпуска = Строка(Обход.СубконтоСписания2) + " " + Строка(Обход.СубконтоСписания3);
						СтрокаЗаписиРасчетаСебестоимости.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.ВыпускПродукцииИУслуг;
						СтрокаЗаписиРасчетаСебестоимости.СуммаПР = СуммаКорретировкиСписанияПР;
						СтрокаЗаписиРасчетаСебестоимости.СуммаВР = СуммаКорретировкиСписанияВР;
						СтрокаЗаписиРасчетаСебестоимости.Сумма = СуммаКорретировкиСписания - ?(ПоследнийПередел,Обход.ПлановаяСтоимостьВПроводках, 0);
						СтрокаЗаписиРасчетаСебестоимости.СуммаНУ = СуммаКорретировкиСписанияНУ - ?(ПоследнийПередел,Обход.ПлановаяСтоимостьВПроводках, 0);
					КонецЕсли;	
					
				КонецЦикла; // по направлениям выпуска продукции (услуг)
				
			КонецЦикла; // по номенклатурным группам
	КонецЦикла; // по счетам учета прямых затрат
КонецЦикла; // по подразделениям
	мПроводки.Записать(Ложь);
	
КонецПроцедуры // ДвиженияПоПрямымЗатратам()

// Процедура производит коррекировку стоимости списания
// выпущенной в текущем месяце продукции.
Процедура КорректирровкаСтоимостиСписанияВыпущеннойПродукции(СтруктураШапкиДокумента, МассивНоменклатуры, ВыполненоРаспределениеОХРилиОПР, СтруктураДопПараметров)
	
	// Формирование корректировки стомисти списаний, исходя из среденвзвешенной стоимости номенклатуры
	СтруктураДопПараметров.Вставить("Организация",    СтруктураШапкиДокумента.Организация);
	СтруктураДопПараметров.Вставить("Период",         Дата);
	СтруктураДопПараметров.Вставить("Регистратор",    ЭтотОбъект);
	СтруктураДопПараметров.Вставить("ТаблицаТоваров", МассивНоменклатуры);
	
	// После закрытия общепроизводственных расходов необходимо,
	// чтобы не корректировалось спиание номенклатуры в дебет
	// счетов 25 (26, если этот счет закрывается на счет 20).
	Если ВыполненоРаспределениеОХРилиОПР Тогда
		
		// Массив счетов по которым не надо делать корректировку операций списания
		МассивСчетов = Новый Массив;
					МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
			Если Не мУчетнаяПолитика["ДиректКостинг"] Тогда
				МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
			КонецЕсли; 
		
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", МассивСчетов);
		
	Иначе
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", Неопределено);
	КонецЕсли;
	
	КорректировкаСтоимости.КорректировкаСтоимости(МассивНоменклатуры, мНачДата, мКонДата, СтруктураДопПараметров);
	
КонецПроцедуры

Функция РасчетПорядкаПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	СпособРасчетаСебестоимостиПроизводства = СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства;
	СтруктураДопПараметров.Вставить("ТаблицаВстречногоВыпуска", Новый ТаблицаЗначений);

	
	Если СпособРасчетаСебестоимостиПроизводства  = "ПоПеределам" Тогда
		
		ПорядокПеределов = ПолучитьПорядокПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	Иначе
		
		ПроверкаПорядкаЗакрытияПодразделений(СтруктураШапкиДокумента);
		
		ПорядокПеределов = ПолучитьПорядокПодразделений(СтруктураШапкиДокумента, СтруктураДопПараметров);
		АнализДанныхПроизводства(СтруктураШапкиДокумента, СтруктураДопПараметров);
	КонецЕсли;
	
	Возврат ПорядокПеределов;	
КонецФункции 

Функция АнализДанныхПроизводства(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	
	// Модель поизводства ввиде последовательности цепочек:
	//ГП(готовая продукция),
	//Подразделение,
	//ном.группа,
	//Номенклатура, израсходованная на производство, в этом подразделении и на эту ном.группу, а значит и на эту ГП
	//счет учета затрат производства
	
	СчетаЗатрат = Новый Массив;
	
	ПС = ПланыСчетов.Хозрасчетный;
	
	РазрешитьУчетУслугБезПлановыхЦен = Не ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(мКонДата, Ложь, СтруктураШапкиДокумента.Организация).ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам;
	
	
	СчетаЗатрат.Добавить(ПС.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПС.ВспомогательныеПроизводства);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТаблицаЗатрат.Источник КАК Источник,
	               |	ТаблицаЗатрат.Подразделение КАК Подразделение,
	               |	ПРЕДСТАВЛЕНИЕ(ТаблицаЗатрат.Подразделение) КАК ПодразделениеПредставление,
	               |	ЕСТЬNULL(ТаблицаГП.НоменклатурнаяГруппа, ТаблицаЗатрат.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа,
	               |	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ТаблицаГП.НоменклатурнаяГруппа, ТаблицаЗатрат.НоменклатурнаяГруппа)) КАК НоменклатурнаяГруппаПредставление,
	               |	ЕСТЬNULL(ТаблицаГП.ГП, ""NULL"") КАК ГП,
	               |	ТаблицаЗатрат.СчетЗатрат КАК СчетЗатрат,
	               |	ТаблицаЗатрат.НоменклатураЗатрат КАК НоменклатураЗатрат,
	               |	ПРЕДСТАВЛЕНИЕ(ТаблицаЗатрат.НоменклатураЗатрат) КАК НоменклатураЗатратПредставление
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		1 КАК Источник,
	               |		ХозрасчетныйОбороты.ПодразделениеДт КАК Подразделение,
	               |		ХозрасчетныйОбороты.СубконтоДт1 КАК НоменклатурнаяГруппа,
	               |		ХозрасчетныйОбороты.СчетДт КАК СчетЗатрат,
	               |		ХозрасчетныйОбороты.СубконтоКт1 КАК НоменклатураЗатрат
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), , , , Организация = &Организация) КАК ХозрасчетныйОбороты
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		1,
	               |		ВложенныйЗапрос.Субконто1,
	               |		ВложенныйЗапрос.Субконто2,
	               |		ВложенныйЗапрос.Счет,
	               |		ХозрасчетныйОбороты.СубконтоКт1
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ХозрасчетныйОстатки.Подразделение КАК Субконто1,
	               |			ХозрасчетныйОстатки.Субконто1 КАК Субконто2,
	               |			ХозрасчетныйОстатки.Счет КАК Счет
	               |		ИЗ
	               |			РегистрБухгалтерии.Хозрасчетный.Остатки(&НачГраница, Счет В ИЕРАРХИИ (&Счета), , Организация = &Организация) КАК ХозрасчетныйОстатки) КАК ВложенныйЗапрос
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), , , , Организация = &Организация) КАК ХозрасчетныйОбороты
	               |			ПО (ХозрасчетныйОбороты.СубконтоДт1 = ВложенныйЗапрос.Субконто1)
	               |				И (ХозрасчетныйОбороты.СубконтоДт2 = ВложенныйЗапрос.Субконто2)
	               |				И (ХозрасчетныйОбороты.СчетДт = ВложенныйЗапрос.Счет)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		2,
	               |		ХозрасчетныйОборотыДтКт.ПодразделениеДт,
	               |		NULL,
	               |		ХозрасчетныйОборотыДтКт.СчетДт,
	               |		&ПустаяСтатьяЗатрат
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&СчетаОбщихЗатрат), , , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		1,
	               |		ВыпускПродукцииУслугОбороты.СубконтоСписания1,
	               |		ВыпускПродукцииУслугОбороты.СубконтоСписания2,
	               |		ВыпускПродукцииУслугОбороты.СчетСписания,
	               |		ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа
	               |	ИЗ
	               |		РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
	               |				&НачДата,
	               |				&КонДата,
	               |				Месяц,
	               |				СчетЗатрат В ИЕРАРХИИ (&Счета)
	               |					И ПрямыеРасходыРаспределятьПоКоличеству
	               |					И Организация = &Организация) КАК ВыпускПродукцииУслугОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		1,
	               |		ВыпускПродукцииУслугОбороты.Подразделение,
	               |		ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа,
	               |		ВыпускПродукцииУслугОбороты.СчетЗатрат,
	               |		&ПустаяСтатьяЗатрат
	               |	ИЗ
	               |		РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
	               |				&НачДата,
	               |				&КонДата,
	               |				Месяц,
	               |				СчетЗатрат В ИЕРАРХИИ (&Счета)
	               |					И Организация = &Организация) КАК ВыпускПродукцииУслугОбороты) КАК ТаблицаЗатрат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВыпускПродукцииУслугОбороты.Подразделение КАК Подразделение,
	               |			ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |			ВыпускПродукцииУслугОбороты.СчетЗатрат КАК СчетЗатрат,
	               |			ВЫБОР
	               |				КОГДА ВыпускПродукцииУслугОбороты.Продукция.Услуга
	               |					ТОГДА ВыпускПродукцииУслугОбороты.Подразделение
	               |				ИНАЧЕ ВыпускПродукцииУслугОбороты.Продукция
	               |			КОНЕЦ КАК ГП
	               |		ИЗ
	               |			РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
	               |					&НачДата,
	               |					&КонДата,
	               |					,
	               |					СчетЗатрат В ИЕРАРХИИ (&Счета)
	               |						И Организация = &Организация) КАК ВыпускПродукцииУслугОбороты
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВложенныйЗапрос.СубконтоДт1,
	               |			РеализацияУслугОбороты.НоменклатурнаяГруппа,
	               |			ВложенныйЗапрос.СчетДт,
	               |			&ПустаяНоменклатура
	               |		ИЗ
	               |			РегистрНакопления.РеализацияУслуг.Обороты КАК РеализацияУслугОбороты
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |					ХозрасчетныйОборотыДтКт.ПодразделениеДт КАК СубконтоДт1,
	               |					ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	               |					ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт2
	               |				ИЗ
	               |					РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), , , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
	               |				ПО РеализацияУслугОбороты.НоменклатурнаяГруппа = ВложенныйЗапрос.СубконтоДт2
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ИнвентаризацияНЗП.ПодразделениеОрганизации,
	               |			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
	               |			ИнвентаризацияНЗП.СчетЗатрат,
	               |			&ПустаяНоменклатура
	               |		ИЗ
	               |			Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
	               |				ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
	               |		ГДЕ
	               |			ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата
	               |			И ИнвентаризацияНЗП.СчетЗатрат В ИЕРАРХИИ(&Счета)
	               |			И ИнвентаризацияНЗП.Организация = &Организация
	               |			И (НЕ ИнвентаризацияНЗП.ПометкаУдаления)) КАК ТаблицаГП
	               |		ПО (ТаблицаГП.Подразделение = ТаблицаЗатрат.Подразделение)
	               |			И (ВЫБОР
	               |				КОГДА ТаблицаЗатрат.Источник = 1
	               |					ТОГДА ВЫБОР
	               |								КОГДА ТаблицаГП.СчетЗатрат = ТаблицаЗатрат.СчетЗатрат
	               |									ТОГДА ИСТИНА
	               |								ИНАЧЕ ЛОЖЬ
	               |							КОНЕЦ
	               |							И ВЫБОР
	               |								КОГДА ТаблицаЗатрат.НоменклатурнаяГруппа ССЫЛКА Справочник.НоменклатурныеГруппы
	               |									ТОГДА ВЫБОР
	               |											КОГДА ТаблицаЗатрат.НоменклатурнаяГруппа = ТаблицаГП.НоменклатурнаяГруппа
	               |												ТОГДА ИСТИНА
	               |											ИНАЧЕ ЛОЖЬ
	               |										КОНЕЦ
	               |								ИНАЧЕ ИСТИНА
	               |							КОНЕЦ
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ = ИСТИНА)";
	
	
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("КонДата",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	СчетаЗатрат = Новый Массив;
	ПС = ПланыСчетов.Хозрасчетный;
	СчетаЗатрат.Добавить(ПС.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПС.ВспомогательныеПроизводства);			   
	Запрос.УстановитьПараметр("Счета",       СчетаЗатрат);
	
	Запрос.УстановитьПараметр("НачГраница",       Новый Граница(мНачДата, ВидГраницы.Исключая));
	
	СчетаОбщихРасх = Новый Массив;
	СчетаОбщихРасх.Добавить(ПС.ОбщепроизводственныеРасходы);
	Если НЕ мУчетнаяПолитика.ДиректКостинг Тогда
		СчетаОбщихРасх.Добавить(ПС.ОбщехозяйственныеРасходы);
	КонецЕсли;
	Запрос.УстановитьПараметр("СчетаОбщихЗатрат", СчетаОбщихРасх);
	
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат", Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Результат);
	
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("ГП");
	ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.Значение = "NULL";
	ПостроительЗапроса.Выполнить();
	ТаблицаПроизводства = ПостроительЗапроса.Результат.Выгрузить();
	ТаблицаПроизводства.Колонки.Удалить("Источник");
	
	ПостроительЗапроса.Отбор.Сбросить();
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("ГП");
	ЭлементОтбора.Установить("NULL");
	ПостроительЗапроса.Выполнить();
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Источник = 1 Тогда // прямые затраты			
			Если ТаблицаНеЗакрытыхПодразделений.НайтиСтроки(Новый Структура("Подразделение, СчетЗатрат", Выборка.Подразделение, Выборка.СчетЗатрат)).Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;			
			Если Лев(Выборка.СчетЗатрат.Код, "2") = "26" Тогда
				Продолжить;
			КонецЕсли;	
			ТекстСообщения = "Нет базы распределения прямых расходов:
			|Счет учета: " + Выборка.СчетЗатрат+ ".
			|Подразделение: " + Выборка.Подразделение + ".
			|Номенклатурная группа: " + Выборка.НоменклатурнаяГруппа + ".
			|База распределения: плановая себестоимость продукции.";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, ,ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект), СтатусСообщения.Важное);
			
			Строка = ТаблицаНеЗакрытыхПодразделений.Добавить();
			Строка.Подразделение = Выборка.Подразделение;
			Строка.СчетЗатрат = Выборка.СчетЗатрат;
			
			
		ИначеЕсли Выборка.Источник = 2 Тогда // общие затраты		
			Если  Лев(Выборка.СчетЗатрат.Код, "2") = "26" Тогда
					Продолжить;
				Если ТаблицаПроизводства.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;		 
			Если ТаблицаНеЗакрытыхПодразделений.Найти(Выборка.Подразделение, "Подразделение") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			
			ТекстСообщения = "Нет базы распределения прямых расходов:
			|Счет учета: " + Выборка.СчетЗатрат+ ".
			|Подразделение: " + Выборка.Подразделение + ".
			|База распределения: плановая себестоимость продукции";
			
			Если РазрешитьУчетУслугБезПлановыхЦен Тогда
				ТекстСообщения = ТекстСообщения + " или выручка";
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект), СтатусСообщения.Важное);			
			
			Строка = ТаблицаНеЗакрытыхПодразделений.Добавить();
			Строка.Подразделение = Выборка.Подразделение;
			Строка.СчетЗатрат = Выборка.СчетЗатрат;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПроизводства;
	
КонецФункции  // АнализДанныхПроизводства

Функция ПолучитьПорядокПодразделений(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	// Определяется диапазон переделов после чего начинается перебор
	// всех переделов из найденного диапазона.	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.НомерПередела КАК НомерПередела,
	|	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.ПорядокЗакрытияПодразделенийОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПередела";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("НоменклатурнаяГруппа");
	Результат.ЗаполнитьЗначения("Все", "НоменклатурнаяГруппа");
	
	Возврат Результат;
	
Конецфункции

Функция ПолучитьТаблицуВстречногоВыпуска(СтруктураШапкиДокумента)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Подразделение,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппа,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета КАК ПодразделениеПересчета,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета КАК НоменклатурнаяГруппаПересчета,
	|	ВложенныйЗапрос.СубконтоКт2,
	|	ВложенныйЗапрос.СубконтоКт3
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, Организация = &Организация) КАК ВстречныйВыпускПродукцииУслугСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК СубконтоКт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
	|			ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|			ХозрасчетныйОборотыДтКт.ПодразделениеДт КАК СубконтоДт1,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СубконтоДт3,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , (НЕ СчетДт В ИЕРАРХИИ (&СчетаОбщихЗатрат)), , , , &Организация = Организация) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
	|		ПО ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция = ВложенныйЗапрос.СубконтоКт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета = ВложенныйЗапрос.СубконтоДт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета = ВложенныйЗапрос.СубконтоДт2
	|ГДЕ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Учитывается
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Подразделение,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппа,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета,
	|	ВложенныйЗапрос.СубконтоКт2,
	|	ВложенныйЗапрос.СубконтоКт3
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, Организация = &Организация) КАК ВстречныйВыпускПродукцииУслугСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК СубконтоКт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
	|			ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|			ХозрасчетныйОборотыДтКт.ПодразделениеДт КАК СубконтоДт1,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СубконтоДт3,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&СчетаОбщихЗатрат), , , , &Организация = Организация) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
	|		ПО ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция = ВложенныйЗапрос.СубконтоКт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета = ВложенныйЗапрос.СубконтоДт1
	|ГДЕ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Учитывается";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата",     мКонГраница);
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	СчетаОбщихРасх = Новый Массив;
	СчетаОбщихРасх.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	Если НЕ мУчетнаяПолитика.ДиректКостинг Тогда
		СчетаОбщихРасх.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	КонецЕсли;
	Запрос.УстановитьПараметр("СчетаОбщихЗатрат", СчетаОбщихРасх);
	
	ТаблицаВстречногоВыпуска = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВстречногоВыпуска;
КонецФункции

Функция ПолучитьПорядокПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	ТаблицаПроизводства = АнализДанныхПроизводства(СтруктураШапкиДокумента, СтруктураДопПараметров);
	ТаблицаПроизводства.Колонки.Добавить("НомерПередела", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(12, 0));
	
	// Для ускорения выгрузим колонку продукция в ТабСписПрод,
	ТабСписПрод = ТаблицаПроизводства.Скопировать();
	ТабСписПрод.Свернуть("ГП");
	
	ТаблицаПроизводства.Сортировать("ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");
	
	Индекс = 0;
	МаксИндекс = ТаблицаПроизводства.Количество() - 1;
	ТекПередел = 1;
	ПараметрыПоиска = Новый Структура;
	ПроставленПередел = Истина;
	
	Пока ПроставленПередел Цикл
		
		ПроставленПередел = Ложь;
		
		Пока Индекс <= МаксИндекс Цикл
			ТекСтрока = ТаблицаПроизводства[Индекс];
			
			Если ТабСписПрод.Найти( ТекСтрока.НоменклатураЗатрат, "ГП") = Неопределено Тогда
				ТекСтрока.НомерПередела = ТекПередел;
				ПроставленПередел = Истина;
				Индекс = Индекс + 1;
				Пока Индекс <= МаксИндекс Цикл
					Стр = ТаблицаПроизводства[Индекс];
					Если Стр.НоменклатураЗатрат = ТекСтрока.НоменклатураЗатрат Тогда
						Стр.НомерПередела = ТекПередел;
					Иначе
						Прервать;
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
				
			Иначе
				ПараметрыПоиска.Очистить();
				ПараметрыПоиска.Вставить( "ГП", ТекСтрока.НоменклатураЗатрат);
				НаборСтрок = ТаблицаПроизводства.НайтиСтроки(ПараметрыПоиска);
				Если НаборСтрок.Количество() = 0 Тогда
					ТекСтрока.НомерПередела = ТекПередел;
					ПроставленПередел = Истина;
				Иначе
					СледПередел = Ложь;
					Для Каждого СтрокаПрод Из НаборСтрок Цикл
						Если СтрокаПрод.НомерПередела = 0 ИЛИ СтрокаПрод.НомерПередела = ТекПередел Тогда
							СледПередел = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не СледПередел Тогда
						ТекСтрока.НомерПередела = ТекПередел;
						ПроставленПередел = Истина;
					КонецЕсли;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЕсли;
		КонецЦикла;
		
		
		ТаблицаПроизводства.Сортировать("НомерПередела Убыв, ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");
		ТекСтрока = ТаблицаПроизводства.Найти(0, "НомерПередела");
		
		Если ТекСтрока = Неопределено Тогда
			Прервать;
		Иначе
			Индекс = ТаблицаПроизводства.Индекс(ТекСтрока);
			
		КонецЕсли;
		
		ТекПередел = ТекПередел + 1;
		
	КонецЦикла;
	
	ТаблицаПроизводства.Сортировать("НомерПередела Убыв, ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");
	
	// Продукция выпущенная на переделе.
	ТабТемп = ТаблицаПроизводства.Скопировать();
	
	// Рассчитаем максимальный уровень передела для продукции
	ТабТемп.Свернуть("Подразделение, НоменклатурнаяГруппа, ГП, НомерПередела");
	ТабПродукция = ТабТемп.Скопировать();
	ТабПродукция.Свернуть("Подразделение, НоменклатурнаяГруппа, ГП");
	ТабПродукция.Колонки.Добавить("НомерПередела", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(12, 0));
	СтруктПоиска = Новый Структура;
	Для Каждого СтрокаТаб Из ТабПродукция Цикл
		СтруктПоиска.Вставить("Подразделение", СтрокаТаб.Подразделение);
		СтруктПоиска.Вставить("НоменклатурнаяГруппа", СтрокаТаб.НоменклатурнаяГруппа);
		НаборСтрок = ТабТемп.НайтиСтроки(СтруктПоиска);
		МаксНомерПередела = 0;
		Для Каждого Строка Из НаборСтрок Цикл
			МаксНомерПередела = Макс(МаксНомерПередела, Строка.НомерПередела);
		КонецЦикла;
		СтрокаТаб.НомерПередела = МаксНомерПередела;
	КонецЦикла;
	ТабТемп = 0;
	
	ТабПродукция.Свернуть("Подразделение, НоменклатурнаяГруппа, НомерПередела");
	ТабПродукция.Сортировать("НомерПередела Возр");
	
	
	ТаблицаВстречногоВыпуска = ПолучитьТаблицуВстречногоВыпуска(СтруктураШапкиДокумента);
	
	СтруктураДопПараметров.ТаблицаВстречногоВыпуска = ТаблицаВстречногоВыпуска;
	
	// Если в порядке переделов всего один передел, то сообщение не выдыается
	ПорядокПодразделенийСообщался = ПорядокПодразделенийСообщался ИЛИ (ТабПродукция.Количество() < 2);
	
	Если Не ПорядокПодразделенийСообщался Тогда
		Сообщить("Порядок переделов:");
		
		НомерПередела = 1;
		Для Каждого Передел Из ТабПродукция Цикл
			Сообщить("" + НомерПередела + " - " + Передел.Подразделение + " - " + Передел.НоменклатурнаяГруппа);
			НомерПередела = НомерПередела + 1;
		КонецЦикла;
	КонецЕсли;
	
	ПорядокПодразделенийСообщался = Истина;
	
	Возврат ТабПродукция;
	
КонецФункции

// Процедура производит расчет себестоимости по прямым затратам по переделам.
//
Процедура РасчетПрямыхЗатрат(СтруктураШапкиДокумента, ВыполненоРаспределениеОХРилиОПР = Ложь, СтруктураДопПараметров)
	
	Если ПорядокПеределов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Передел Из ПорядокПеределов Цикл
		
		Если Не ВыполненоРаспределениеОХРилиОПР Тогда
			ОценкаОстатковНЗПпоРазницам(СтруктураШапкиДокумента, СтруктураДопПараметров, Передел.Подразделение, Передел.НоменклатурнаяГруппа);
		КонецЕсли;
		
		
		// Распределение прямых расходов по тем подразделениям, которым присвоен
		// текущий номер передела.
		МассивНоменклатуры = Новый Массив; // массив номенклатуры, у которой, в результате расчета себестоимости, изменилась среденевзвешенная стомиость.
		ДвиженияПоПрямымЗатратам(СтруктураШапкиДокумента, Передел.Подразделение, Передел.НоменклатурнаяГруппа, ВыполненоРаспределениеОХРилиОПР, МассивНоменклатуры, СтруктураДопПараметров);
		
		Если МассивНоменклатуры.Количество() > 0 Тогда
			КорректирровкаСтоимостиСписанияВыпущеннойПродукции(СтруктураШапкиДокумента, МассивНоменклатуры, ВыполненоРаспределениеОХРилиОПР, СтруктураДопПараметров);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // РасчетПрямыхЗатрат()

// Проверка все ли подразделения, учавствующие в обороте, указаны в порядке закрытия подразделений
Процедура ПроверкаПорядкаЗакрытияПодразделений(СтруктураШапкиДокумента)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.НомерПередела) КАК КонечныйПередел,
	               |	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.Подразделение КАК Подразделение,
	               |	NULL КАК СуммаОборот
	               |ИЗ
	               |	РегистрСведений.ПорядокЗакрытияПодразделенийОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.Подразделение
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	NULL,
	               |	ХозрасчетныйОбороты.СубконтоДт1,
	               |	СУММА(ХозрасчетныйОбороты.СуммаОборот)
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , , , , , Организация = &Организация) КАК ХозрасчетныйОбороты
	               |ГДЕ
	               |	ХозрасчетныйОбороты.СубконтоДт1 ССЫЛКА Справочник.ПодразделенияОрганизаций
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОбороты.СубконтоДт1
	               |ИТОГИ
	               |	СУММА(КонечныйПередел),
	               |	СУММА(СуммаОборот)
	               |ПО
	               |	Подразделение";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("КонДата",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Свернуть("Подразделение","КонечныйПередел, СуммаОборот");
	Для Каждого Результат Из РезультатЗапроса Цикл
		Если Результат.КонечныйПередел = 0 И Результат.СуммаОборот <> 0  И Не ПорядокПодразделенийСообщался Тогда
			ТекстСообщения = "Не установлен порядок подразделения " + Результат.Подразделение +"
			|для закрытия счетов, используемый
			|при расчете стоимости продукции.
			|Порядок устанавливается документом ""Установка порядка
			|подразделений для закрытия счетов""";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, ,ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект), СтатусСообщения.ОченьВажное);
			
			ПорядокПодразделенийСообщался = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура запускает расчет прямых и косвенных расходов
// если используется простой расчет себестоимости и не используется встречный выпуск
// (производственная цепочка не имеет "закольцованных звеньев"),
// тогда расчет прямых затрат запускается один раз
// в противном случае
// первый расчет прямых затрат производится без учета переделов, задействованных в "кольце"
// второй расчет прямых затрат производится только по пределем, задействованным в "кольце"
// третий расет прямых затрат проводится для всех передлов, но корректирует выпуск только той,
// готовой продукции, которая не была списана на "кольцо"
//
Процедура РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров, СпособОценкиМПЗ)
		
	ЗакрытиеCчетовКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	
	Если СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства = "ПоПеределам"
		И СтруктураДопПараметров.ТаблицаВстречногоВыпуска.Количество() > 0 Тогда
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "1";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров);
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "2";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров);
		// Списание общепроизводственных и общехозяйственных расходов
		// на себестоимость продукции (услуг).
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "3" + СпособОценкиМПЗ;
		РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
		
	Иначе
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров);
		РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	КонецЕсли;
	
КонецПроцедуры


Процедура РасчетСебестоимостиПродукции(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.РасчетСтоимостиПродукции Тогда
		Возврат;
	КонецЕсли;
	
	Счет40 = (мУчетнаяПолитика.СпособУчетаВыпускаГотовойПродукции = Перечисления.СпособыУчетаВыпускаГотовойПродуции.СИспользованиемСчета40);
	СтруктураДопПараметров.Вставить("Счет40", Счет40);
	СтруктураДопПараметров.Вставить("НЗП", Неопределено);
	
	СоздатьТаблицуСписанныхКосвенныхРасходов();

	РасчетПорядкаПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	
	РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров, мУчетнаяПолитика.СпособОценкиМПЗ);
	
	Если НЕ мПредприниматель Тогда
		СтруктураДопПараметров.ЗаписьРасчетаСебестоимости.Свернуть("Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,НоменклатурнаяГруппа,Продукция,ВидОперации,СуммаПлан,СуммаНЗП,СуммаНЗПНУ,СуммаНЗППР,СуммаНЗПВР,ДокументВыпуска",  
		"Сумма,СуммаНУ,СуммаПР,СуммаВР");
		ПодготовитьЗаписьРасчетаСебестоимости(СтруктураДопПараметров);
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента, 
		СтруктураДопПараметров.ЗаписьРасчетаСебестоимости,
		РегистрыСведений.РасчетСебестоимостиПродукции,
		"Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,НоменклатурнаяГруппа,Продукция,ВидОперации",
		"Сумма,СуммаНУ,СуммаПР,СуммаВР,СуммаНЗП,СуммаНЗПНУ,СуммаНЗППР,СуммаНЗПВР,СуммаПлан");
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
		СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов,
		РегистрыСведений.РасчетРаспределенияКосвенныхРасходов,
		"Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,СтатьяЗатрат,ПодразделениеРаспределения,НоменклатурнаяГруппаРаспределения,БазаРаспределения,СчетРаспределения,ВидОперации,ЕНВД",
		"Сумма,СуммаНУ,СуммаПР,СуммаВР,СуммаБазы,СуммаБазыНУ,СуммаБазыПР,СуммаБазыВР");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьЗаписьРасчетаСебестоимости(СтруктураДопПараметров)
	Если Не СтруктураДопПараметров.Счет40 Тогда
		Возврат;
    КонецЕсли;
	     ЗаписьРасчетаСебестоимости = СтруктураДопПараметров.ЗаписьРасчетаСебестоимости;
		 Для Каждого Строка Из ЗаписьРасчетаСебестоимости Цикл
			 Строка.СуммаПР = Строка.СуммаПР - ?(СтруктураДопПараметров.Счет40, 0, Строка.СуммаПлан);
			 Строка.СуммаВР = Строка.СуммаВР - ?(СтруктураДопПараметров.Счет40, 0, Строка.СуммаПлан);
		 КонецЦикла;
		 
КонецПроцедуры

// вспомогательная процедура для расчета ПР и ВР НЗП
// т.к. пользователь указывает сумму НЗП по БУ и по НУ,
// то долю ПР и ВР в НЗП высчитываем по пропорции с начальными остатками НЗП
Процедура ОценкаОстатковНЗПпоРазницам(СтруктураШапкиДокумента, СтруктураДопПараметров, Подразделение, НоменклатурнаяГруппа)
	
	НЗП = СтруктураДопПараметров.НЗП;
	
	Если НЗП = Неопределено Тогда
		НЗП = Новый ТаблицаЗначений;
		НЗП.Колонки.Добавить("Счет");
		НЗП.Колонки.Добавить("Подразделение");
		НЗП.Колонки.Добавить("НоменклатурнаяГруппа");
		НЗП.Колонки.Добавить("СуммаПР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		НЗП.Колонки.Добавить("СуммаВР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВложенныйЗапрос.НЗППР) КАК НЗППР,
	               |	СУММА(ВложенныйЗапрос.НЗПВР) КАК НЗПВР,
	               |	СУММА(ВложенныйЗапрос.Разницы) КАК Разницы,
	               |	ВложенныйЗапрос.Счет
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ХозрасчетныйОстаткиИОбороты.СуммаПРНачальныйОстатокДт + ХозрасчетныйОстаткиИОбороты.СуммаПРОборотДт КАК НЗППР,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаВРНачальныйОстатокДт + ХозрасчетныйОстаткиИОбороты.СуммаВРОборотДт КАК НЗПВР,
	               |		0 КАК Разницы,
	               |		ХозрасчетныйОстаткиИОбороты.Счет КАК Счет
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				,
	               |				,
	               |				Счет В ИЕРАРХИИ (&Счет),
	               |				&НоменклатурныеГруппы,
	               |				Организация = &Организация
	               |					И Подразделение = &Подразделение
	               |					И Субконто1 = &НоменклатурнаяГруппа) КАК ХозрасчетныйОстаткиИОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		0,
	               |		0,
	               |		ИнвентаризацияНЗПСостав.Сумма - ИнвентаризацияНЗПСостав.СуммаНУ,
	               |		ИнвентаризацияНЗП.СчетЗатрат
	               |	ИЗ
	               |		Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	               |			ПО (ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка)
	               |	ГДЕ
	               |		ИнвентаризацияНЗП.Организация = &Организация
	               |		И ИнвентаризацияНЗП.ПодразделениеОрганизации = &Подразделение
	               |		И ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	               |		И ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата
	               |		И (НЕ ИнвентаризацияНЗП.ПометкаУдаления)) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Счет";
	
	Запрос.УстановитьПараметр("НачПериода", мНачГраница);
	Запрос.УстановитьПараметр("КонПериода", мКонГраница);
	Запрос.УстановитьПараметр("НачДата", мНачДата);
	Запрос.УстановитьПараметр("КонДата", мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("НоменклатурныеГруппы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.УстановитьПараметр("Счет", СписокСчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Результат = РезультатЗапроса.Выгрузить();
	
	
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Выборка Из Результат Цикл
		
		СтрокаНЗП = НЗП.НайтиСтроки(Новый Структура("Счет,Подразделение,НоменклатурнаяГруппа", Выборка.Счет, Подразделение, НоменклатурнаяГруппа));
		
		Если СтрокаНЗП.Количество() = 0 Тогда
			СтрокиНЗП = НЗП.Добавить();
		Иначе
			СтрокиНЗП = СтрокаНЗП[0];
		КонецЕсли;
		
		Разницы = Выборка.Разницы;
		СуммаПР = Выборка.НЗППР;
		СуммаВР = Выборка.НЗПВР;
		
		СтрокиНЗП.Счет = Выборка.Счет;
		СтрокиНЗП.Подразделение = Подразделение;
		СтрокиНЗП.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		
		Если СуммаПр = 0 И НЕ СуммаВр = 0 Тогда
			СтрокиНЗП.СуммаПР = 0;
			СтрокиНЗП.СуммаВР = Разницы;
		ИначеЕсли Не СуммаПр = 0 И СуммаВр = 0 Тогда
			СтрокиНЗП.СуммаПР = Разницы;
			СтрокиНЗП.СуммаВР = 0;
		Иначе
			Если СуммаВР + СуммаПР <> 0 Тогда
				СтрокиНЗП.СуммаПР = Разницы * СуммаПР / (СуммаВР + СуммаПР);
				СтрокиНЗП.СуммаВР = Разницы * СуммаВР / (СуммаВР + СуммаПР);
			Иначе
				СтрокиНЗП.СуммаПР = СуммаПР + Разницы / 2;
				СтрокиНЗП.СуммаВР = СуммаВР + Разницы / 2;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДопПараметров.Вставить("НЗП", НЗП);
	
КонецПроцедуры
//ТОРГОВЛЯ

Процедура РасчетТорговойНаценкиПоПроданнымТоварам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.РасчетТорговойНаценкиПоПроданнымТоварам Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
		Возврат;
	КонецЕсли;
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	РазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	//НТТ
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если РазделятьПоСтавкамНДС Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
	КонецЕсли;
	
	Счет90 = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", 			мНачГраница);
	Запрос.УстановитьПараметр("ДатаКон", 			мКонГраница);
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СчетТН", 			ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
	Запрос.УстановитьПараметр("СчетПС", 			ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	Запрос.УстановитьПараметр("Счет90", 			Счет90);
	Запрос.УстановитьПараметр("ВидыСубконто", 	ВидыСубконто);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиТН.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстаткиТН.Субконто1 КАК Склады,"+?(РазделятьПоСтавкамНДС,"
	|	ХозрасчетныйОстаткиТН.Субконто2 КАК СтавкиНДС,","")+"
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстаток,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаНУОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаНУОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстатокНУ,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаПРОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаПРОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстатокПР,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаВРОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаВРОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстатокВР,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиПС.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиПС.СуммаОстатокДт КОНЕЦ) КАК ПродажнаяСтоимостьОстаток,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОборотыДтКт.СуммаОборот ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот КОНЕЦ) КАК ПродажнаяСтоимостьРеализация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетТН, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиТН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиПС
	|		ПО ХозрасчетныйОстаткиТН.Подразделение = ХозрасчетныйОстаткиПС.Подразделение
	|			И ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОстаткиПС.Субконто1"+?(РазделятьПоСтавкамНДС,"
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОстаткиПС.Субконто2","")+"
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, , СчетДт В ИЕРАРХИИ (&Счет90), , СчетКт = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|		ПО ХозрасчетныйОстаткиТН.Подразделение = ХозрасчетныйОборотыДтКт.ПодразделениеКт
	|			И ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОборотыДтКт.СубконтоКт1"+?(РазделятьПоСтавкамНДС,"
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОборотыДтКт.СубконтоКт2","")+"
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиТН.Подразделение,
	|	ХозрасчетныйОстаткиТН.Субконто1"+?(РазделятьПоСтавкамНДС,",
	|	ХозрасчетныйОстаткиТН.Субконто2","")+"
	|
	|ИТОГИ ПО
	|	Склады,
	|	Подразделение"+?(РазделятьПоСтавкамНДС,",
	|	СтавкиНДС","");
	
	
	ВыборкаПоСкладам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склады");
	
	Пока ВыборкаПоСкладам.Следующий() Цикл
		
		СчетаУчетаВНТТ = БухгалтерскийУчет.ПолучитьСчетаУчетаВНТТ(СтруктураШапкиДокумента.Организация, ВыборкаПоСкладам.Склады, СтруктураШапкиДокумента.Дата, мУчетнаяПолитика);
		
		СчетВыручки			= СчетаУчетаВНТТ.СчетДоходовОтРеализации;
		СчетСебестоимсоти 	= СчетаУчетаВНТТ.СчетРасходовОтРеализации;
		
		ВыборкаПоПодразделениям = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Подразделение");
		
		Пока ВыборкаПоПодразделениям.Следующий() Цикл
			
			Если РазделятьПоСтавкамНДС Тогда
				ВыборкаПоСтавкамНДС = ВыборкаПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтавкиНДС");
				Пока ВыборкаПоСтавкамНДС.Следующий() Цикл
					
					//Расчет торговой наценки
					ТН 		= ВыборкаПоСтавкамНДС.ТорговаяНаценкаОстаток;
					ТН_НУ 	= ВыборкаПоСтавкамНДС.ТорговаяНаценкаОстатокНУ;
					ТН_ПР 	= ВыборкаПоСтавкамНДС.ТорговаяНаценкаОстатокПР;
					ТН_ВР 	= ВыборкаПоСтавкамНДС.ТорговаяНаценкаОстатокВР;
					ПС 		= ВыборкаПоСтавкамНДС.ПродажнаяСтоимостьОстаток;
					ОБ 		= ВыборкаПоСтавкамНДС.ПродажнаяСтоимостьРеализация;
					
					Если ПС + ОБ = 0 Тогда
						Продолжить;
					Иначе
						СуммаНаценки 	= ТН * ОБ / (ПС + ОБ);
						СуммаНаценкиНУ 	= ТН_НУ * ОБ / (ПС + ОБ);
						СуммаНаценкиПР 	= ТН_ПР * ОБ / (ПС + ОБ);
						СуммаНаценкиВР 	= ТН_ВР * ОБ / (ПС + ОБ);
					КонецЕсли;
					
					Если (СуммаНаценки > 0) ИЛИ (СуммаНаценкиНУ > 0) ИЛИ (СуммаНаценкиПР > 0) ИЛИ (СуммаНаценкиВР > 0) Тогда
						
						//Формируем проводку по списанию торговой наценки
						Проводка = мПроводки.Добавить();
						Проводка.Период                    = Дата;
						Проводка.Организация               = СтруктураШапкиДокумента.Организация;
						Проводка.СчетДт                    = СчетСебестоимсоти;
						Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  ВыборкаПоСтавкамНДС.СтавкиНДС);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  ВыборкаПоСтавкамНДС.СтавкиНДС);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  ВыборкаПоСтавкамНДС.Склады);
						Проводка.Сумма                     = - СуммаНаценки;

						БухгалтерскийУчет.УстановитьПодразделенияПроводки(
							Проводка, ВыборкаПоСтавкамНДС.Подразделение, ВыборкаПоСтавкамНДС.Подразделение);
							
						НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-СуммаНаценкиНУ,-СуммаНаценкиНУ,-СуммаНаценкиПР,-СуммаНаценкиПР,-СуммаНаценкиВР,-СуммаНаценкиВР,Проводка);
						
						Проводка.Содержание                = "Торговая наценка";
						
					КонецЕсли;
				КонецЦикла;
			Иначе
				//Расчет торговой наценки
				ТН 		= ВыборкаПоПодразделениям.ТорговаяНаценкаОстаток;
				ТН_НУ 	= ВыборкаПоПодразделениям.ТорговаяНаценкаОстатокНУ;
				ТН_ПР 	= ВыборкаПоПодразделениям.ТорговаяНаценкаОстатокПР;
				ТН_ВР 	= ВыборкаПоПодразделениям.ТорговаяНаценкаОстатокВР;
				ПС 		= ВыборкаПоПодразделениям.ПродажнаяСтоимостьОстаток;
				ОБ 		= ВыборкаПоПодразделениям.ПродажнаяСтоимостьРеализация;
				
				Если ПС + ОБ = 0 Тогда
					Продолжить;
				Иначе
					СуммаНаценки 	= ТН * ОБ / (ПС + ОБ);
					СуммаНаценкиНУ 	= ТН_НУ * ОБ / (ПС + ОБ);
					СуммаНаценкиПР 	= ТН_ПР * ОБ / (ПС + ОБ);
					СуммаНаценкиВР 	= ТН_ВР * ОБ / (ПС + ОБ);
				КонецЕсли;
				
				Если (СуммаНаценки > 0) ИЛИ (СуммаНаценкиНУ > 0) ИЛИ (СуммаНаценкиПР > 0) ИЛИ (СуммаНаценкиВР > 0) Тогда
					
					//Формируем проводку по списанию торговой наценки
					Проводка = мПроводки.Добавить();
					Проводка.Период                    = Дата;
					Проводка.Организация               = СтруктураШапкиДокумента.Организация;
					Проводка.СчетДт                    = СчетСебестоимсоти;
					Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  ВыборкаПоПодразделениям.Склады);
					Проводка.Сумма                     = - СуммаНаценки;

					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, ВыборкаПоПодразделениям.Подразделение, ВыборкаПоПодразделениям.Подразделение);
						
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-СуммаНаценкиНУ,-СуммаНаценкиНУ,-СуммаНаценкиПР,-СуммаНаценкиПР,-СуммаНаценкиВР,-СуммаНаценкиВР,Проводка);
					
					Проводка.Содержание                = "Торговая наценка";
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//АТТ
	РазделятьПоПартиям = УправлениеЗапасамиПартионныйУчет.НаСчетеВедетсяПартионныйУчет(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если РазделятьПоПартиям Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	КонецЕсли;
	
	Счет90_02 = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", 			мНачГраница);
	Запрос.УстановитьПараметр("ДатаКон", 			мКонГраница);
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СчетТН", 			ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ);
	Запрос.УстановитьПараметр("СчетПС", 			ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	Запрос.УстановитьПараметр("Счет90_02", 			Счет90_02);
	Запрос.УстановитьПараметр("ВидыСубконто", 		ВидыСубконто);
	Запрос.УстановитьПараметр("ПустаяПартия",    	Документы.Партия.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиТН.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОстаткиТН.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстаткиТН.Субконто2 КАК Склады,"+?(РазделятьПоПартиям, "
	|	ХозрасчетныйОстаткиТН.Субконто3 КАК Партия,", "
	|	&ПустаяПартия КАК Партия,")+"
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СубСчет90_02,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстаток,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаНУОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаНУОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстатокНУ,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаПРОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаПРОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстатокПР,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаВРОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаВРОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстатокВР,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиПС.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиПС.СуммаОстатокДт КОНЕЦ) КАК ПродажнаяСтоимостьОстаток,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОборотыДтКт.СуммаОборот ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот КОНЕЦ) КАК ПродажнаяСтоимостьРеализация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетТН, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиТН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиПС
	|		ПО ХозрасчетныйОстаткиТН.Подразделение = ХозрасчетныйОстаткиПС.Подразделение
	|			И ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОстаткиПС.Субконто1
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОстаткиПС.Субконто2"+?(РазделятьПоПартиям, " И	ХозрасчетныйОстаткиТН.Субконто3 = ХозрасчетныйОстаткиПС.Субконто3", "")+"
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, , СчетДт В ИЕРАРХИИ (&Счет90_02), , СчетКт = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|		ПО ХозрасчетныйОстаткиТН.Подразделение = ХозрасчетныйОборотыДтКт.ПодразделениеКт
	|			И ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОборотыДтКт.СубконтоКт1
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОборотыДтКт.СубконтоКт2"+?(РазделятьПоПартиям, " И	ХозрасчетныйОстаткиТН.Субконто3 = ХозрасчетныйОборотыДтКт.СубконтоКт3", "")+"
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиТН.Подразделение,
	|	ХозрасчетныйОстаткиТН.Субконто1,
	|	ХозрасчетныйОстаткиТН.Субконто2"+?(РазделятьПоПартиям, ",
	|	ХозрасчетныйОстаткиТН.Субконто3", "")+",
	|	ХозрасчетныйОборотыДтКт.СчетДт
	|
	|ИТОГИ ПО
	|	Подразделение,
	|	Номенклатура,
	|	Склады,
	|	Партия,
	|	СубСчет90_02";
	
	ВыборкаПоПодразделениям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Подразделение");
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		ВыборкаПоНоменклатуре = ВыборкаПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
			ВыборкаПоСкладам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склады");
			Пока ВыборкаПоСкладам.Следующий() Цикл
				ВыборкаПоПартиям = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Партия");
				Пока ВыборкаПоПартиям.Следующий() Цикл
					
					ТН 			= ВыборкаПоПартиям.ТорговаяНаценкаОстаток;
					ТН_НУ 		= ВыборкаПоПартиям.ТорговаяНаценкаОстатокНУ;
					ТН_ПР 		= ВыборкаПоПартиям.ТорговаяНаценкаОстатокПР;
					ТН_ВР 		= ВыборкаПоПартиям.ТорговаяНаценкаОстатокВР;
					ПС 			= ВыборкаПоПартиям.ПродажнаяСтоимостьОстаток;
					ОБ_Всего 	= ВыборкаПоПартиям.ПродажнаяСтоимостьРеализация;
					
					ВыборкаПоСчетам = ВыборкаПоПартиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СубСчет90_02");
					Пока ВыборкаПоСчетам.Следующий() Цикл
						//Расчет торговой наценки
						
						ОБ = ВыборкаПоСчетам.ПродажнаяСтоимостьРеализация;
						
						Если ПС + ОБ_Всего = 0 Тогда
							Продолжить;
						Иначе
							СуммаНаценки 	= ТН * ОБ / (ПС + ОБ_Всего);
							СуммаНаценкиНУ 	= ТН_НУ * ОБ / (ПС + ОБ_Всего);
							СуммаНаценкиПР 	= ТН_ПР * ОБ / (ПС + ОБ_Всего);
							СуммаНаценкиВР 	= ТН_ВР * ОБ / (ПС + ОБ_Всего);
						КонецЕсли;
						
						Если (СуммаНаценки > 0) ИЛИ (СуммаНаценкиНУ > 0) ИЛИ (СуммаНаценкиПР > 0) ИЛИ (СуммаНаценкиВР > 0) Тогда
							
							//Формируем проводку по списанию торговой наценки
							Проводка = мПроводки.Добавить();
							Проводка.Период                    = Дата;
							Проводка.Организация               = СтруктураШапкиДокумента.Организация;
							Проводка.СчетДт                    = ВыборкаПоСчетам.СубСчет90_02;
							Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  ВыборкаПоПартиям.Номенклатура);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  ВыборкаПоПартиям.Склады);
							Если РазделятьПоПартиям Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  ВыборкаПоПартиям.Партия);
							КонецЕсли;
							Проводка.Сумма                     = - СуммаНаценки;
							
							БухгалтерскийУчет.УстановитьПодразделенияПроводки(
								Проводка, ВыборкаПоПартиям.Подразделение, ВыборкаПоПартиям.Подразделение);
							
							НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-СуммаНаценкиНУ,-СуммаНаценкиНУ,-СуммаНаценкиПР,-СуммаНаценкиПР,-СуммаНаценкиВР,-СуммаНаценкиВР,Проводка);
							
							Проводка.Содержание                = "Торговая наценка";
							
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ЗАКРЫТИЮ СЧЕТОВ БУ

Функция ПрименяетсяДиректКостинг(УказаннаяОрганизация) Экспорт
	
	Применяется = Ложь;
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(УказаннаяОрганизация) Тогда
	Иначе
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, УказаннаяОрганизация);
		Если Не Отказ Тогда
			Применяется = УчетнаяПолитика.ДиректКостинг;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Применяется;
	
КонецФункции // ПрименяетсяДиректКостинг()

Процедура ЗакрытиеСчета44(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок)
	
	Если НЕ ЗакрытиеСчета44ТранспортныеРасходы И НЕ ЗакрытиеСчета44ИныеРасходы Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДопПараметров.Вставить("ЭтапСписанияКосвенныхРасходов", 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОстатки.Счет КАК Счет,
	               |	ХозрасчетныйОстатки.Субконто1 КАК СтатьяЗатрат,
	               |	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаБУ,
	               |	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	               |	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУ,
	               |	ХозрасчетныйОстатки.СуммаПРОстаток КАК СуммаПР,
	               |	ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВР
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |			&КонГраница,
	               |			Счет В ИЕРАРХИИ (&СчетЗатрат),
	               |			&ВидыСубконто,
	               |			Организация = &Организация
	               |				И Субконто1.ВидРасходовНУ = &ТранспортныеРасходы) КАК ХозрасчетныйОстатки
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки";
	
	Запрос.УстановитьПараметр("КонГраница",  мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетЗатрат",  ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	Запрос.УстановитьПараметр("ВидыСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ТранспортныеРасходы",  Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	Если Не ЗакрытиеСчета44ТранспортныеРасходы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Субконто1.ВидРасходовНУ","НЕ Субконто1.ВидРасходовНУ");
	ИначеЕсли ЗакрытиеСчета44ИныеРасходы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Субконто1.ВидРасходовНУ = &ТранспортныеРасходы","");
	КонецЕсли;
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
		
		ТекстЗапросаПоСчетам =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетЗатрат)";
		
		ЗапросПоСчетам = Новый Запрос;
		ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
		ЗапросПоСчетам.УстановитьПараметр("СчетЗатрат", ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
		МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		Для каждого БлокируемыйСчет Из МассивСчетов Цикл
			
			ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВсегоРасходов = 0;
	СтруктураДопПараметров.ЭтапСписанияКосвенныхРасходов = 1;
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Выборка Из РезультатЗапроса Цикл
		Сумма = Новый Структура("СуммаБУ,СуммаНУ,СуммаПР,СуммаВР",Выборка.СуммаБУ,Выборка.СуммаНУ, Выборка.СуммаПР, Выборка.СуммаВР);
		СписатьКосвенныеРасходы(мПроводки, Выборка, Сумма, СтруктураШапкиДокумента, СтруктураДопПараметров,,Истина)
		
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

Процедура ЗакрытиеСчета90(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ЗакрытиеСчета90 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     мНачДата);
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.СписокОП);
	Запрос.УстановитьПараметр("Счет90",      ПланыСчетов.Хозрасчетный.Продажи);
	Запрос.УстановитьПараметр("Счет909",     ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж);
	Запрос.УстановитьПараметр("СчетаЕНВД",   НалоговыйУчет.ПолучитьМассивСчетовЕНВД());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0) КАК Прибыль,
	               |	ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0) КАК ПрибыльПР,
	               |	ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0) КАК ПРибыльВР,
	               |	ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0) КАК ПрибыльНУ
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			Счет В ИЕРАРХИИ (&Счет90)
	               |				И Счет <> &Счет909
	               |				И (НЕ Счет В ИЕРАРХИИ (&СчетаЕНВД)),
	               |			,
	               |			Организация В ИЕРАРХИИ (&Организация),
	               |			,
	               |			) КАК Хозрасчетный";

	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(мНачДата, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		
		ЗапросПоСчетам = Новый Запрос;
		
		ТекстЗапросаПоСчетам =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет90)
		|	И Хозрасчетный.Ссылка <> &Счет909";
		
		ЗапросПоСчетам.УстановитьПараметр("Счет90",      ПланыСчетов.Хозрасчетный.Продажи);
		ЗапросПоСчетам.УстановитьПараметр("Счет909",     ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж);
		ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
		МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		Для каждого БлокируемыйСчет Из МассивСчетов Цикл
		
			ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		КонецЦикла;
		
	КонецЕсли;

	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.Прибыль = 0 Или Не Выборка.ПрибыльНУ = 0 Или Не Выборка.ПрибыльПР = 0 Или Не Выборка.ПрибыльВР = 0 Тогда
			
			Проводка = мПроводки.Добавить();
			
			Если Выборка.Прибыль >= 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
				Проводка.СубконтоКт.ПрибылиИУбытки  = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				Проводка.Сумма = Выборка.Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Выборка.ПрибыльНУ,Выборка.ПрибыльНУ,Выборка.ПрибыльПР,Выборка.ПрибыльПР,Выборка.ПрибыльВР,Выборка.ПрибыльВР,Проводка, мПоддержкаПБУ18); 
				
			КонецЕсли;
		
			Если Выборка.Прибыль < 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
				Проводка.СубконтоДт.ПрибылиИУбытки  = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				Проводка.Сумма = - Выборка.Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-Выборка.ПрибыльНУ,-Выборка.ПрибыльНУ,-Выборка.ПрибыльПР,-Выборка.ПрибыльПР,-Выборка.ПрибыльВР,-Выборка.ПрибыльВР,Проводка, мПоддержкаПБУ18); 
				
			КонецЕсли;
		 КонецЕсли;
		 
	КонецЦикла;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0) КАК Прибыль,
	               |	ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0) КАК ПрибыльПР,
	               |	ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0) КАК ПРибыльВР,
	               |	ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0) КАК ПрибыльНУ
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			Счет В ИЕРАРХИИ (&Счет90)
	               |				И Счет <> &Счет909
	               |				И Счет В ИЕРАРХИИ (&СчетаЕНВД),
	               |			,
	               |			Организация В ИЕРАРХИИ (&Организация),
	               |			,
	               |			) КАК Хозрасчетный";

	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(мНачДата, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		
		ЗапросПоСчетам = Новый Запрос;
		
		ТекстЗапросаПоСчетам =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет90)
		|	И Хозрасчетный.Ссылка <> &Счет909";
		
		ЗапросПоСчетам.УстановитьПараметр("Счет90",      ПланыСчетов.Хозрасчетный.Продажи);
		ЗапросПоСчетам.УстановитьПараметр("Счет909",     ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж);
		ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
		МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		Для каждого БлокируемыйСчет Из МассивСчетов Цикл
		
			ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		КонецЦикла;
		
	КонецЕсли;

	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.Прибыль = 0 Или Не Выборка.ПрибыльНУ = 0 Или Не Выборка.ПрибыльПР = 0 Или Не Выборка.ПрибыльВР = 0 Тогда
			
			Проводка = мПроводки.Добавить();
			
			Если Выборка.Прибыль >= 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
				Проводка.СубконтоКт.ПрибылиИУбытки  = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				Проводка.Сумма = Выборка.Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Выборка.ПрибыльНУ,Выборка.ПрибыльНУ,Выборка.ПрибыльПР,Выборка.ПрибыльПР,Выборка.ПрибыльВР,Выборка.ПрибыльВР,Проводка, мПоддержкаПБУ18); 
				
			КонецЕсли;
		
			Если Выборка.Прибыль < 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
				Проводка.СубконтоДт.ПрибылиИУбытки  = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				Проводка.Сумма = - Выборка.Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-Выборка.ПрибыльНУ,-Выборка.ПрибыльНУ,-Выборка.ПрибыльПР,-Выборка.ПрибыльПР,-Выборка.ПрибыльВР,-Выборка.ПрибыльВР,Проводка, мПоддержкаПБУ18); 
				
			КонецЕсли;
		 КонецЕсли;
		 
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

Процедура ЗакрытиеСчета91(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ЗакрытиеСчета91 Тогда
		Возврат;
	КонецЕсли;
	
	Сч_91_09 = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     мНачДата);
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.СписокОП);
	Запрос.УстановитьПараметр("счет91",      ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("счет919",     ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("НеЕНВД",      Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0) КАК Прибыль,
	               |	ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0) КАК ПрибыльПР,
	               |	ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0) КАК ПРибыльВР,
	               |	ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0) КАК ПрибыльНУ
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			Счет В ИЕРАРХИИ (&счет91)
	               |				И Счет <> &счет919,
	               |			&ВидСубконто,
	               |			Организация В ИЕРАРХИИ (&Организация)
	               |				И Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НеЕНВД,
	               |			,
	               |			) КАК Хозрасчетный";

	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(мНачДата, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		
		ЗапросПоСчетам = Новый Запрос;
		
		ТекстЗапросаПоСчетам =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&счет91)
		|	И Хозрасчетный.Ссылка <> &счет919";
		
		ЗапросПоСчетам.УстановитьПараметр("счет91",      ПланыСчетов.Хозрасчетный.Продажи);
		ЗапросПоСчетам.УстановитьПараметр("счет919",     ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж);
		ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
		МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		Для каждого БлокируемыйСчет Из МассивСчетов Цикл
		
			ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		КонецЦикла;
		
	КонецЕсли;

	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.Прибыль = 0 Или Не Выборка.ПрибыльНУ = 0 Или Не Выборка.ПрибыльПР = 0 Или Не Выборка.ПрибыльВР = 0 Тогда
			
			Проводка = мПроводки.Добавить();
			
			Если Выборка.Прибыль >= 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = Сч_91_09;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
				Проводка.СубконтоКт.ПрибылиИУбытки  = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				Проводка.Сумма = Выборка.Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Выборка.ПрибыльНУ,Выборка.ПрибыльНУ,Выборка.ПрибыльПР,Выборка.ПрибыльПР,Выборка.ПрибыльВР,Выборка.ПрибыльВР,Проводка, мПоддержкаПБУ18); 
				
			КонецЕсли;
		
			Если Выборка.Прибыль < 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетКт                    = Сч_91_09;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
				Проводка.СубконтоДт.ПрибылиИУбытки  = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				Проводка.Сумма = - Выборка.Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-Выборка.ПрибыльНУ,-Выборка.ПрибыльНУ,-Выборка.ПрибыльПР,-Выборка.ПрибыльПР,-Выборка.ПрибыльВР,-Выборка.ПрибыльВР,Проводка, мПоддержкаПБУ18); 
				
			КонецЕсли;
		 КонецЕсли;
		 
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ЕНВД",      Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0) КАК Прибыль,
	               |	ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0) КАК ПрибыльПР,
	               |	ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0) КАК ПРибыльВР,
	               |	ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0) КАК ПрибыльНУ
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			Счет В ИЕРАРХИИ (&счет91)
	               |				И Счет <> &счет919,
	               |			&ВидСубконто,
	               |			Организация В ИЕРАРХИИ (&Организация)
	               |				И Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД,
	               |			,
	               |			) КАК Хозрасчетный";

	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(мНачДата, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		
		ЗапросПоСчетам = Новый Запрос;
		
		ТекстЗапросаПоСчетам =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&счет91)
		|	И Хозрасчетный.Ссылка <> &счет919";
		
		ЗапросПоСчетам.УстановитьПараметр("счет91",      ПланыСчетов.Хозрасчетный.Продажи);
		ЗапросПоСчетам.УстановитьПараметр("счет919",     ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж);
		ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
		МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		Для каждого БлокируемыйСчет Из МассивСчетов Цикл
		
			ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		КонецЦикла;
		
	КонецЕсли;

	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.Прибыль = 0 Или Не Выборка.ПрибыльНУ = 0 Или Не Выборка.ПрибыльПР = 0 Или Не Выборка.ПрибыльВР = 0 Тогда
			
			Проводка = мПроводки.Добавить();
			
			Если Выборка.Прибыль >= 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = Сч_91_09;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
				Проводка.СубконтоКт.ПрибылиИУбытки  = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				Проводка.Сумма = Выборка.Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Выборка.ПрибыльНУ,Выборка.ПрибыльНУ,Выборка.ПрибыльПР,Выборка.ПрибыльПР,Выборка.ПрибыльВР,Выборка.ПрибыльВР,Проводка, мПоддержкаПБУ18); 
				
			КонецЕсли;
		
			Если Выборка.Прибыль < 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетКт                    = Сч_91_09;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
				Проводка.СубконтоДт.ПрибылиИУбытки  = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				Проводка.Сумма = - Выборка.Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-Выборка.ПрибыльНУ,-Выборка.ПрибыльНУ,-Выборка.ПрибыльПР,-Выборка.ПрибыльПР,-Выборка.ПрибыльВР,-Выборка.ПрибыльВР,Проводка, мПоддержкаПБУ18); 
				
			КонецЕсли;
		 КонецЕсли;
		 
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

Процедура ЗакрытиеCчетовКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	СтруктураШапкиДокумента.Вставить("ПрименяетсяДиректКостинг", мУчетнаяПолитика["ДиректКостинг"]);
	
	Если мПрименениеЕНВД Тогда 
		
		ВыручкаНеЕНВД = 0;
		ВыручкаЕНВД = 0;
		
		Коэффициент = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, мКонДата, мНачДата, Ложь, ВыручкаНеЕНВД, ВыручкаЕНВД);
		
	Иначе
		Коэффициент = 0;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мНачГраница);
	Запрос.УстановитьПараметр("ДатаКон",      мКонГраница);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	
	Запрос.УстановитьПараметр("ДатаНач26",    ?(СтруктураШапкиДокумента.ПрименяетсяДиректКостинг, мНачГода,мНачГраница));
	
	
	
	СчетаЗатрат1 = Новый Массив;
	ВидыСубконто1 = Новый Массив;
	СчетаЗатрат1.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СчетаЗатрат1.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	СчетаЗатрат2 = Новый Массив;
	ВидыСубконто2 = Новый Массив;
	СчетаЗатрат2.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаЗатрат2.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	
	ВидыСубконто1.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	ВидыСубконто1.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("СчетаЗатрат1",  СчетаЗатрат1);
	Запрос.УстановитьПараметр("ВидыСубконто1",  ВидыСубконто1);
	ВидыСубконто2 = Новый Массив;
	ВидыСубконто2.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("Счет25",  ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	Запрос.УстановитьПараметр("ВидыСубконто2",  ВидыСубконто2);
	Запрос.УстановитьПараметр("Счет26",  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	Запрос.УстановитьПараметр("ЕНВД",                Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	
	Запрос.МенеджерВременныхТаблиц = СтруктураДопПараметров.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Счет КАК Счет,
	|	ВложенныйЗапрос.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ВложенныйЗапрос.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.Подразделение КАК Подразделение,
	|	СУММА(ВложенныйЗапрос.СуммаДтНУ) КАК СуммаДтНУ,
	|	СУММА(ВложенныйЗапрос.СуммаДтПР) КАК СуммаДтПР,
	|	СУММА(ВложенныйЗапрос.СуммаДтВР) КАК СуммаДтВР,
	|	ВложенныйЗапрос.СуммаДтБУ КАК СуммаДтБУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновноеИВспомогательноеПроизводство.Счет КАК Счет,
	|		ОсновноеИВспомогательноеПроизводство.Субконто1 КАК СтатьяЗатрат,
	|		ОсновноеИВспомогательноеПроизводство.Субконто2 КАК НоменклатурнаяГруппа,
	|		ЕСТЬNULL(ОсновноеИВспомогательноеПроизводство.СуммаНУОборот, 0) КАК СуммаДтНУ,
	|		ЕСТЬNULL(ОсновноеИВспомогательноеПроизводство.СуммаПРОборот, 0) КАК СуммаДтПР,
	|		ЕСТЬNULL(ОсновноеИВспомогательноеПроизводство.СуммаВРОборот, 0) КАК СуммаДтВР,
	|		ОсновноеИВспомогательноеПроизводство.Подразделение КАК Подразделение,
	|		0 КАК СуммаДтБУ
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				,
	|				Счет В ИЕРАРХИИ (&СчетаЗатрат1),
	|				&ВидыСубконто1,
	|				Организация = &Организация
	|					И (НЕ ВЫРАЗИТЬ(Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД),
	|				(НЕ КорСчет В ИЕРАРХИИ (&Счет25))
	|					И (НЕ КорСчет В ИЕРАРХИИ (&Счет26)),
	|				) КАК ОсновноеИВспомогательноеПроизводство
	|			ЛЕВОЕ СОЕДИНЕНИЕ СписокПрямыхРасходовНУ КАК Правила
	|			ПО (Правила.ВидЗатратНУ = ОсновноеИВспомогательноеПроизводство.Субконто1.ВидРасходовНУ)
	|				И (ВЫБОР
	|					КОГДА Правила.Подразделение <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.Подразделение = ОсновноеИВспомогательноеПроизводство.Подразделение
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СчетЗатрат = ОсновноеИВспомогательноеПроизводство.Счет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.КорСчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.КорСчетЗатрат = ОсновноеИВспомогательноеПроизводство.КорСчет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СтатьяЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СтатьяЗатрат = ОсновноеИВспомогательноеПроизводство.Субконто1
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|	ГДЕ
	|		ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0
	|	
	|	ДЛЯ ИЗМЕНЕНИЯ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОПР.Счет,
	|		ОПР.Субконто1,
	|		NULL,
	|		ЕСТЬNULL(ОПР.СуммаНУОборот, 0),
	|		ЕСТЬNULL(ОПР.СуммаПРОборот, 0),
	|		ЕСТЬNULL(ОПР.СуммаВРОборот, 0),
	|		ОПР.Подразделение,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				,
	|				Счет В ИЕРАРХИИ (&Счет25),
	|				&ВидыСубконто2,
	|				Организация = &Организация
	|					И (НЕ ВЫРАЗИТЬ(Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД),
	|				,
	|				) КАК ОПР
	|			ЛЕВОЕ СОЕДИНЕНИЕ СписокПрямыхРасходовНУ КАК Правила
	|			ПО (Правила.ВидЗатратНУ = ОПР.Субконто1.ВидРасходовНУ)
	|				И (ВЫБОР
	|					КОГДА Правила.Подразделение <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.Подразделение = ОПР.Подразделение
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СчетЗатрат = ОПР.Счет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.КорСчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.КорСчетЗатрат = ОПР.КорСчет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СтатьяЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СтатьяЗатрат = ОПР.Субконто1
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|	ГДЕ
	|		ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОХРБУ.Счет,
	|		ОХРБУ.Субконто1,
	|		NULL,
	|		0,
	|		0,
	|		0,
	|		ОХРБУ.Подразделение,
	|		ЕСТЬNULL(ОХРБУ.СуммаОборот, 0)
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач26, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет26), &ВидыСубконто2, Организация = &Организация, , ) КАК ОХРБУ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОХРНУ.Счет,
	|		ОХРНУ.Субконто1,
	|		NULL,
	|		ЕСТЬNULL(ОХРНУ.СуммаНУОборот, 0),
	|		ЕСТЬNULL(ОХРНУ.СуммаПРОборот, 0),
	|		ЕСТЬNULL(ОХРНУ.СуммаВРОборот, 0),
	|		ОХРНУ.Подразделение,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&ДатаНач26,
	|				&ДатаКон,
	|				,
	|				Счет В ИЕРАРХИИ (&Счет26),
	|				&ВидыСубконто2,
	|				Организация = &Организация
	|					И (НЕ ВЫРАЗИТЬ(Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД),
	|				,
	|				) КАК ОХРНУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ СписокПрямыхРасходовНУ КАК Правила
	|			ПО (Правила.ВидЗатратНУ = ОХРНУ.Субконто1.ВидРасходовНУ)
	|				И (ВЫБОР
	|					КОГДА Правила.Подразделение <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.Подразделение = ОХРНУ.Подразделение
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СчетЗатрат = ОХРНУ.Счет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.КорСчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.КорСчетЗатрат = ОХРНУ.КорСчет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СтатьяЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СтатьяЗатрат = ОХРНУ.Субконто1
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|	ГДЕ
	|		ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.Счет,
	|	ВложенныйЗапрос.СтатьяЗатрат,
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.СуммаДтБУ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет
	|ИТОГИ
	|	СУММА(СуммаДтНУ),
	|	СУММА(СуммаДтПР),
	|	СУММА(СуммаДтВР),
	|	СУММА(СуммаДтБУ)
	|ПО
	|	Подразделение,
	|	Счет,
	|	СтатьяЗатрат,
	|	НоменклатурнаяГруппа";
	
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(мНачДата, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		
		ЗапросПоСчетам = Новый Запрос;
		
		
		
		ТекстЗапросаПоСчетам =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаЗатрат1)
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаЗатрат2)";
		
		ЗапросПоСчетам.УстановитьПараметр("СчетаЗатрат1", СчетаЗатрат1);
		ЗапросПоСчетам.УстановитьПараметр("СчетаЗатрат2", СчетаЗатрат2);
		
		
		ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
		МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		Для каждого БлокируемыйСчет Из МассивСчетов Цикл
			
			ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ВыборкаПодразделение = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПодразделение.Следующий() Цикл
		ВыборкаСчет = ВыборкаПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчет.Следующий() Цикл
			КодСчета = Лев(ВыборкаСчет.Счет.Код, 2);
			ВыборкаСтатьяЗатрат = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСтатьяЗатрат.Следующий() Цикл
				ДелатьРасчетПР = Ложь;
				Если КодСчета = "20" Или КодСчета = "23"  Тогда
					ВыборкаНомГруппа = ВыборкаСтатьяЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаНомГруппа.Следующий() Цикл
						Сумма = Новый Структура("СуммаБУ,СуммаНУ,СуммаПР,СуммаВР",0,ВыборкаНомГруппа.СуммаДтНУ, 0, - ВыборкаНомГруппа.СуммаДтНУ);
						СписатьКосвенныеРасходы(мПроводки, ВыборкаНомГруппа, Сумма, СтруктураШапкиДокумента, СтруктураДопПараметров, Истина)
						
					КонецЦикла;
				Иначе
					Если КодСчета = "25" Или (КодСчета = "26" И Не СтруктураШапкиДокумента.ПрименяетсяДиректКостинг)  Тогда
						Сумма = Новый Структура("СуммаБУ,СуммаНУ,СуммаПР,СуммаВР",0,ВыборкаСтатьяЗатрат.СуммаДтНУ, 0, - ВыборкаСтатьяЗатрат.СуммаДтНУ);
					Иначе
						Сумма = Новый Структура("СуммаБУ,СуммаНУ,СуммаПР,СуммаВР",ВыборкаСтатьяЗатрат.СуммаДтБУ,ВыборкаСтатьяЗатрат.СуммаДтНУ, ВыборкаСтатьяЗатрат.СуммаДтПР, ВыборкаСтатьяЗатрат.СуммаДтВР);
						ДелатьРасчетПР = Истина;
					КонецЕсли;
					
					СписатьКосвенныеРасходы(мПроводки, ВыборкаСтатьяЗатрат, Сумма, СтруктураШапкиДокумента, СтруктураДопПараметров,,ДелатьРасчетПР)
					
				КонецЕсли;
				
				
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;	
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры


Процедура СписатьКосвенныеРасходы(мПроводки, Выборка, Сумма, СтруктураШапкиДокумента, СтруктураДопПараметров, АналитикаПоНомГруппам = Ложь, ДелатьРасчетПР = Ложь) 
	Если НЕ ЗначениеЗаполнено(Выборка.СтатьяЗатрат) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураДопПараметров.ЭтапСписанияКосвенныхРасходов = 1 И 
		(Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.РасходыНаВозмещениеЗатратРаботниковПоУплатеПроцентов Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы Или
		Выборка.СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам) Тогда
		
		Возврат;
	КонецЕсли;
	
	ВидРасходовНУ = Выборка.СтатьяЗатрат.ВидРасходовНУ;
	ВидДеятельности =  Выборка.СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат;
	ВсегоБУ = Сумма.СуммаБУ;
	ВсегоНУ = Сумма.СуммаНУ;
	Если СтруктураДопПараметров.ЭтапСписанияКосвенныхРасходов = 1 Тогда
		ВсегоПР = Сумма.СуммаПР;
		ВсегоВР = Сумма.СуммаВР;
	Иначе
		ВсегоПР = 0;
		ВсегоВР = 0;
	КонецЕсли;
	СуммаБУ = Сумма.СуммаБУ;
	СуммаНУ = Сумма.СуммаНУ;
	СуммаПР = Сумма.СуммаПР;
	СуммаВР = Сумма.СуммаВР;
	СуммаЕНВДБУ = 0;
	СуммаЕНВДНУ = 0;
	СуммаЕНВДПР = 0;
	СуммаЕНВДВР = 0;
	
	
	Если ВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам Тогда
		
		Коэффициент = НалоговыйУчет.ПолучитьДолюКосвенногоРасхода(ТаблицаДолейКосвенныхРасходов, Неопределено);
		СчетДт = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД;
		СуммаБУ = Коэффициент * Сумма.СуммаБУ; СуммаЕНВДБУ = Сумма.СуммаБУ - СуммаБУ;
		СуммаНУ = Коэффициент * Сумма.СуммаНУ; СуммаЕНВДНУ = Сумма.СуммаНУ - СуммаНУ;
		СуммаПР = Коэффициент * Сумма.СуммаПР; СуммаЕНВДПР = Сумма.СуммаПР - СуммаПР;
		СуммаВР = Коэффициент * Сумма.СуммаВР; СуммаЕНВДВР = Сумма.СуммаВР - СуммаВР;
		Сумма.СуммаБУ = СуммаБУ;
		Сумма.СуммаНУ = СуммаНУ;
		Сумма.СуммаПР = СуммаПР;
		Сумма.СуммаВР = СуммаВР;
		НалоговыйУчет.ПроводкиПоКосвеннымРасходам(мПроводки, Выборка, Сумма, СчетДт, СтруктураШапкиДокумента, СтруктураДопПараметров, АналитикаПоНомГруппам);
		
		СчетДт = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД;
		Сумма.СуммаБУ = СуммаЕНВДБУ;
		Сумма.СуммаНУ = СуммаЕНВДНУ;
		Сумма.СуммаПР = СуммаЕНВДПР;
		Сумма.СуммаВР = СуммаЕНВДВР;
		НалоговыйУчет.ПроводкиПоКосвеннымРасходам(мПроводки, Выборка, Сумма, СчетДт, СтруктураШапкиДокумента, СтруктураДопПараметров, АналитикаПоНомГруппам);
	ИначеЕсли ВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД Тогда
		
		Коэффициент = НалоговыйУчет.ПолучитьДолюКосвенногоРасхода(ТаблицаДолейКосвенныхРасходов,ВидРасходовНУ);
	
		СуммаБУ = ?(ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы, Коэффициент, 1) * Сумма.СуммаБУ;
		СуммаПР = Коэффициент * Сумма.СуммаПР;
		СуммаНУ = Коэффициент * Сумма.СуммаНУ;
		СуммаВР = Коэффициент * Сумма.СуммаВР;
		Если ДелатьРасчетПР Тогда
				Разница = СуммаБУ - СуммаНУ - СуммаПР - СуммаВР;
				СуммаПР = СуммаПР + Разница;
		КонецЕсли;
		
		Сумма.СуммаБУ = СуммаБУ;
		Сумма.СуммаНУ = СуммаНУ;
		Сумма.СуммаПР = СуммаПР;
		Сумма.СуммаВР = СуммаВР;
		
		СчетДт = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД;
		НалоговыйУчет.ПроводкиПоКосвеннымРасходам(мПроводки, Выборка, Сумма, СчетДт, СтруктураШапкиДокумента, СтруктураДопПараметров, АналитикаПоНомГруппам);
	Иначе  // ЕНВД
		
		СуммаЕНВДБУ = Сумма.СуммаБУ;
		СуммаЕНВДНУ = Сумма.СуммаНУ;
		СуммаЕНВДПР = Сумма.СуммаПР;
		СуммаЕНВДВР = Сумма.СуммаВР;
		
		Сумма.СуммаБУ = СуммаЕНВДБУ;
		Сумма.СуммаНУ = СуммаЕНВДНУ;
		Сумма.СуммаПР = СуммаЕНВДПР;
		Сумма.СуммаВР = СуммаЕНВДВР;
		
		СчетДт = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД;
		НалоговыйУчет.ПроводкиПоКосвеннымРасходам(мПроводки, Выборка, Сумма, СчетДт, СтруктураШапкиДокумента, СтруктураДопПараметров, АналитикаПоНомГруппам);
	КонецЕсли;
	
	Если Не Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы Тогда
		
		СтрокаЗаписьСписанияКосвенныхРасходов              = СтруктураДопПараметров.ЗаписьСписанияКосвенныхРасходов.Добавить();
		СтрокаЗаписьСписанияКосвенныхРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат  = Выборка.СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат;
		СтрокаЗаписьСписанияКосвенныхРасходов.СчетУчета   = Выборка.Счет;
		СтрокаЗаписьСписанияКосвенныхРасходов.СтатьяЗатрат= Выборка.СтатьяЗатрат;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаЗатрат = ВсегоБУ;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаННП    = СуммаБУ;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаНеННП  = СуммаЕНВДБУ;
		
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаЗатратНУ = ВсегоНУ;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаННПНУ    = СуммаНУ;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаНеННПНУ  = СуммаЕНВДНУ;	
		
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаЗатратПР = ВсегоПР;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаННППР    = СуммаПР;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаНеННППР  = СуммаЕНВДПР;	
		
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаЗатратВР = ВсегоВР;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаННПВР    = СуммаВР;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаНеННПВР  = СуммаЕНВДВР;	
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.СписаниеУбытковПрошлыхЛет ИЛИ мПредприниматель Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     НачалоГода(мКонДата));
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет99",      ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) - СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт) КАК ПрибыльНУ
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			Счет В ИЕРАРХИИ (&Счет99),
	               |			,
	               |			Организация = &Организация,
	               |			) КАК ХозрасчетныйОбороты
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты";
				   
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(НачалоГода(мКонДата), мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		
		ЗапросПоСчетам = Новый Запрос;
		
		ТекстЗапросаПоСчетам =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет99)";
		
		ЗапросПоСчетам.УстановитьПараметр("Счет99",      ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиБезНалогаНаПрибыль);
		ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
		МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		Для каждого БлокируемыйСчет Из МассивСчетов Цикл
		
			ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		КонецЦикла;
		
	КонецЕсли;

	Результат = Запрос.Выполнить().Выгрузить();
	ПрибыльНУ = Результат.Итог("ПрибыльНУ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     НачалоГода(мКонДата));
	Запрос.УстановитьПараметр("ДатаКон",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет97",      ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ВидРБП",      Перечисления.ВидыРБП.УбыткиПрошлыхЛет);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.Субконто1.ДатаНачалаСписания КАК ГОД,
	               |	ХозрасчетныйОбороты.Счет,
	               |	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК СуммаНУ,
	               |	ХозрасчетныйОбороты.Субконто1,
	               |	ХозрасчетныйОбороты.СуммаНУКонечныйОстаток КАК Остаток
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			,
	               |			Счет В ИЕРАРХИИ (&Счет97),
	               |			&ВидСубконто,
	               |			Организация = &Организация
	               |				И Субконто1.ВидРБП = &ВидРБП) КАК ХозрасчетныйОбороты
	               |ГДЕ
	               |	ХозрасчетныйОбороты.Субконто1.ДатаНачалаСписания <= &ДатаНач
	               |	И ХозрасчетныйОбороты.Субконто1.ДатаОкончанияСписания >= &ДатаКон
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОбороты.Субконто1,
	               |	ХозрасчетныйОбороты.СуммаНУКонечныйОстаток,
	               |	ХозрасчетныйОбороты.Субконто1.ДатаНачалаСписания,
	               |	ХозрасчетныйОбороты.Счет
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ГОД";
				   
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(НачалоГода(мКонДата), мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		ЗначенияБлокировки.Вставить("Счет",        ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов); 
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
	КонецЕсли;

	ТаблицаУбытков      = Запрос.Выполнить().Выгрузить();
	ВсегоУбытковСписано = ТаблицаУбытков.Итог("СуммаНУ");
	ВсегоУбытков        = ТаблицаУбытков.Итог("Остаток");

	Если ПрибыльНУ <= 0 И ВсегоУбытковСписано = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПрибыльНУ <= 0  Тогда
		СуммаСписания =  ?(ПрибыльНУ > - ВсегоУбытковСписано, ПрибыльНУ, - ВсегоУбытковСписано);
	Иначе
		СуммаСписания = ?(ПрибыльНУ > ВсегоУбытков + ВсегоУбытковСписано, ВсегоУбытков ,ПрибыльНУ);
	КонецЕсли;	
	
	Если СуммаСписания < 0 Тогда
		ТаблицаУбытков.Сортировать("Год Убыв");
	КонецЕсли;
	
	Для Каждого УбытокПрошлогоПериода Из ТаблицаУбытков Цикл
		
		Если СуммаСписания = 0 Тогда
			Прервать;
		КонецЕсли;
		
		СуммаУбыткаВсего          = УбытокПрошлогоПериода.Субконто1.Сумма;
		
		Если СуммаСписания > 0 Тогда 
			СуммаУбыткаМожноСписать = ?(СуммаСписания < УбытокПрошлогоПериода.Остаток, СуммаСписания, УбытокПрошлогоПериода.Остаток);
		Иначе
			СуммаУбыткаМожноСписать = ?( -СуммаСписания < УбытокПрошлогоПериода.СуммаНУ, СуммаСписания, -УбытокПрошлогоПериода.СуммаНУ);
		КонецЕсли;
		

		Если СуммаСписания <> 0 Тогда 
			СуммаСписания  = СуммаСписания - СуммаУбыткаМожноСписать;
			
			Если СуммаУбыткаМожноСписать <> 0 Тогда
				Проводка = мПроводки.Добавить();
				Проводка.Период                            = Дата;
				Проводка.Организация                       = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                            = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
				Проводка.СубконтоДт.ПрибылиИУбытки         = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				Проводка.СчетКт                            = УбытокПрошлогоПериода.Счет;
				Проводка.СубконтоКт.РасходыБудущихПериодов = УбытокПрошлогоПериода.Субконто1;
				Проводка.Содержание                        = "Убытки прошлых лет";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаУбыткаМожноСписать,СуммаУбыткаМожноСписать,0,0,-СуммаУбыткаМожноСписать,-СуммаУбыткаМожноСписать,Проводка, мПоддержкаПБУ18); 
				
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

// РЕГЛАМЕНТНЫЕ ОПЕРАЦИИ ПО УСН

Процедура УчестьОстаткиНЗПприУСН(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.УчестьОстаткиНЗПприУСН ИЛИ мПредприниматель Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НачПрошлогоПериода", ДобавитьМесяц(мНачДата,-1));
	Запрос.УстановитьПараметр("КонПрошлогоПериода", ДобавитьМесяц(мКонДата,-1));
	Запрос.УстановитьПараметр("НачТекПериода", мНачДата);
	Запрос.УстановитьПараметр("КонТекПериода", мКонДата);
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	СУММА(ВложенныйЗапрос.СуммаНУ) КАК СуммаНУ,
	|	ВложенныйЗапрос.ОтражениеВУСН
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|		СУММА(ВЫБОР
	|				КОГДА ИнвентаризацияНЗПСостав.Ссылка.Дата МЕЖДУ &НачТекПериода И &КонТекПериода
	|					ТОГДА -ИнвентаризацияНЗПСостав.СуммаНУ
	|				ИНАЧЕ ИнвентаризацияНЗПСостав.СуммаНУ
	|			КОНЕЦ) КАК СуммаНУ,
	|		ИнвентаризацияНЗПСостав.ОтражениеВУСН КАК ОтражениеВУСН
	|	ИЗ
	|		Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	|	ГДЕ
	|		ИнвентаризацияНЗПСостав.Ссылка.Дата МЕЖДУ &НачПрошлогоПериода И &КонТекПериода
	|		И ИнвентаризацияНЗПСостав.Ссылка.Организация = &Организация
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
	|		ИнвентаризацияНЗПСостав.ОтражениеВУСН
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВводНачальныхОстатковБухСправка.Субконто2,
	|		СУММА(ВЫБОР
	|				КОГДА ВводНачальныхОстатковБухСправка.Ссылка.Дата МЕЖДУ &НачТекПериода И &КонТекПериода
	|					ТОГДА -ВводНачальныхОстатковБухСправка.Сумма
	|				ИНАЧЕ ВводНачальныхОстатковБухСправка.Сумма
	|			КОНЕЦ),
	|		ВводНачальныхОстатковБухСправка.ОтражениеВУСН
	|	ИЗ
	|		Документ.ВводНачальныхОстатков.БухСправка КАК ВводНачальныхОстатковБухСправка
	|	ГДЕ
	|		ВводНачальныхОстатковБухСправка.Ссылка.Дата МЕЖДУ &НачПрошлогоПериода И &КонТекПериода
	|		И ВводНачальныхОстатковБухСправка.Ссылка.Организация = &Организация
	|		И ВводНачальныхОстатковБухСправка.Ссылка.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВводНачальныхОстатковБухСправка.Субконто2,
	|		ВводНачальныхОстатковБухСправка.ОтражениеВУСН) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.ОтражениеВУСН";
	
	ТаблицаНЗП = Запрос.Выполнить().Выгрузить();
	Для Каждого НЗП Из ТаблицаНЗП Цикл
		
		Если НЗП.СуммаНУ = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЗП.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
			
			Если НЗП.СуммаНУ > 0 Тогда
				Содержание = "Признаны материальные расходы, ранее отраженные в составе незавершенного производства по номенклатурной группе """
				+НЗП.НоменклатурнаяГруппа+""".";
			Иначе
				Содержание = "Сумма материальных расходов уменьшена на остаток незавершенного прозводства по номенклатурной группе """
				+НЗП.НоменклатурнаяГруппа+""".";
			КонецЕсли;
			СтрокаКниги  				= мКУДиР.Добавить();
			СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаКниги.СтрокаДокумента = 0;
			СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
			СтрокаКниги.ТабличнаяЧасть  = "";
			СтрокаКниги.Содержание      = Содержание;
			СтрокаКниги.Графа7          = НЗП.СуммаНУ;
			СтрокаКниги.НДС             = 0;
			СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
			
		ИначеЕсли НЗП.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются Тогда
			
			Если НЗП.СуммаНУ > 0 Тогда
				Содержание = "Списаны остатки НЗП";
			Иначе
				Содержание = "Расходы отражены как НЗП";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	мКУДиР.Записать(Ложь);
	
КонецПроцедуры

// {УчетДоходовИРасходовИП
// РЕГЛАМЕНТНЫЕ ОПЕРАЦИИ ИНДИВИДУАЛЬНЫХ ПРЕДПРИНИМАТЕЛЕЙ

Процедура ИПРаспределениеРасходов(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ мПредприниматель ИЛИ НЕ ИПРаспределениеРасходов Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененияВидаДеятельности = Новый ТаблицаЗначений;
	ИзмененияВидаДеятельности.Колонки.Добавить("ВидМПЗ");
	ИзмененияВидаДеятельности.Колонки.Добавить("ХарактерДеятельности1");
	ИзмененияВидаДеятельности.Колонки.Добавить("НоменклатурнаяГруппа1");
	ИзмененияВидаДеятельности.Колонки.Добавить("ХарактерДеятельности2");
	ИзмененияВидаДеятельности.Колонки.Добавить("НоменклатурнаяГруппа2");
	ИзмененияВидаДеятельности.Колонки.Добавить("Номенклатура");
	ИзмененияВидаДеятельности.Колонки.Добавить("Партия");
	ИзмененияВидаДеятельности.Колонки.Добавить("ДокументОплаты");
	ИзмененияВидаДеятельности.Колонки.Добавить("МПЗ");
	ИзмененияВидаДеятельности.Колонки.Добавить("ПартияМПЗ");
	ИзмененияВидаДеятельности.Колонки.Добавить("Количество");
	ИзмененияВидаДеятельности.Колонки.Добавить("Сумма");
	ИзмененияВидаДеятельности.Колонки.Добавить("НДС");
	
	ОтборСтрокБазы = Новый Структура;
	
	// Получение базы распределения расходов.
	
	// Базой распределения являются доходы, полученные в этом месяце, отдельно по каждой
	// номенклатурной группе и характеру деятельности. Доходы должны быть фактически получены,
	// то есть база распределения формируется на основании погашенной задолженности покупателей
	// в текущем месяце.
	
	Если мУчетнаяПолитика.ВестиУчетПоВидамДеятельности Тогда
		
		БазаРаспределения = ДоходыИРасходыПредпринимателя.БазаРаспределения(СтруктураШапкиДокумента.Организация, мНачГраница, мКонГраница);
						
		НедопустимыеХарактерыДеятельности = Новый Массив;
		НедопустимыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ПустаяСсылка()); // распред. на все виды деятельности
		НедопустимыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсеВидыТорговли); // распред. на опт, розницу и розницу (ЕНВД)
		НедопустимыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсеВидыПроизводстваРаботУслуг); // распред. на прочее и прочее (ЕНВД)
		НедопустимыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсяДеятельностьНеЕНВД); // распред. на опт, розницу и прочее
		НедопустимыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсяДеятельностьЕНВД); // распред. на розницу (ЕНВД) и прочее (ЕНВД)
		НедопустимыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсеВидыТорговлиНеЕНВД); // распред. на опт и розницу
		
		РаспределяемыеВидыМПЗ = Новый Массив;
		РаспределяемыеВидыМПЗ.Добавить(Перечисления.ВидыМПЗ.ВспомогательныеМатериалы);
		РаспределяемыеВидыМПЗ.Добавить(Перечисления.ВидыМПЗ.Материалы);
		РаспределяемыеВидыМПЗ.Добавить(Перечисления.ВидыМПЗ.Полуфабрикаты);
		РаспределяемыеВидыМПЗ.Добавить(Перечисления.ВидыМПЗ.Продукция);
		РаспределяемыеВидыМПЗ.Добавить(Перечисления.ВидыМПЗ.Товары);
		
		Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
			
			СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗ");
			ЗначенияБлокировки = Новый Соответствие;
			ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
			ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
			
			СтруктураПараметров.Вставить("ИмяТаблицы", "ИПИныеМатериальныеРасходы");
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
			
			СтруктураПараметров.Вставить("ИмяТаблицы", "ИППрочиеРасходы");
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
			
			СтруктураПараметров.Вставить("ИмяТаблицы", "ИПРасходыНаОплатуТруда");
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
			
		КонецЕсли;

		// Распределение МПЗ и ИМР, распределяемых по всем вида деятельности
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоМесяца", мНачГраница);
		Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
		Запрос.УстановитьПараметр("Период", НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("ИМР", Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы);
		Запрос.УстановитьПараметр("Прочее", Перечисления.ВидыМПЗ.ПрочиеРасходы);
		Запрос.УстановитьПараметр("НедопустимыеХарактерыДеятельности", НедопустимыеХарактерыДеятельности);
		Запрос.УстановитьПараметр("РаспределяемыеВидыМПЗ", РаспределяемыеВидыМПЗ);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИПМПЗОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа1,
		|	ИПМПЗОстатки.ХарактерДеятельности КАК ХарактерДеятельности1,
		|	НЕОПРЕДЕЛЕНО КАК НоменклатурнаяГруппа2,
		|	НЕОПРЕДЕЛЕНО КАК ХарактерДеятельности2,
		|	ИПМПЗОстатки.ВидМПЗ КАК ВидМПЗ,
		|	ИПМПЗОстатки.Номенклатура КАК Номенклатура,
		|	ИПМПЗОстатки.Партия,
		|	ИПМПЗОстатки.ДокументОплаты,
		|	НЕОПРЕДЕЛЕНО КАК МПЗ,
		|	НЕОПРЕДЕЛЕНО КАК ПартияМПЗ,
		|	СУММА(ИПМПЗОстатки.КоличествоОстаток) КАК Количество,
		|	СУММА(ИПМПЗОстатки.СуммаОстаток) КАК Сумма,
		|	СУММА(ИПМПЗОстатки.НДСОстаток) КАК НДС,
		|	&Период КАК Период
		|ИЗ
		|	РегистрНакопления.ИПМПЗ.Остатки(
		|			&КонецМесяца,
		|			Организация = &Организация
		|				И ВидМПЗ В (&РаспределяемыеВидыМПЗ)
		|				И (НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|					ИЛИ ХарактерДеятельности В (&НедопустимыеХарактерыДеятельности))) КАК ИПМПЗОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПМПЗОстатки.НоменклатурнаяГруппа,
		|	ИПМПЗОстатки.ХарактерДеятельности,
		|	ИПМПЗОстатки.ВидМПЗ,
		|	ИПМПЗОстатки.Номенклатура,
		|	ИПМПЗОстатки.Партия,
		|	ИПМПЗОстатки.ДокументОплаты
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
		|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	&ИМР,
		|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат,
		|	ИПИныеМатериальныеРасходыОстатки.Партия,
		|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
		|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
		|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ,
		|	СУММА(ИПИныеМатериальныеРасходыОстатки.КоличествоОстаток),
		|	СУММА(ИПИныеМатериальныеРасходыОстатки.СуммаОстаток),
		|	СУММА(ИПИныеМатериальныеРасходыОстатки.НДСОстаток),
		|	&Период
		|ИЗ
		|	РегистрНакопления.ИПИныеМатериальныеРасходы.Остатки(
		|			&КонецМесяца,
		|			Организация = &Организация
		|				И МПЗ = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|				И ПартияМПЗ = НЕОПРЕДЕЛЕНО
		|				И (НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|					ИЛИ ХарактерДеятельности В (&НедопустимыеХарактерыДеятельности))) КАК ИПИныеМатериальныеРасходыОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
		|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
		|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат,
		|	ИПИныеМатериальныеРасходыОстатки.Партия,
		|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
		|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
		|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИППрочиеРасходыОбороты.НоменклатурнаяГруппа,
		|	ИППрочиеРасходыОбороты.ХарактерДеятельности,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	&Прочее,
		|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
		|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
		|	ИППрочиеРасходыОбороты.ДокументОплаты,
		|	ИППрочиеРасходыОбороты.СчетУчета,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	СУММА(ИППрочиеРасходыОбороты.СуммаОборот),
		|	СУММА(ИППрочиеРасходыОбороты.НДСОборот),
		|	ИППрочиеРасходыОбороты.Период
		|ИЗ
		|	РегистрНакопления.ИППрочиеРасходы.Обороты(
		|			&НачалоМесяца,
		|			&КонецМесяца,
		|			Месяц,
		|			Организация = &Организация
		|				И (НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|					ИЛИ ХарактерДеятельности В (&НедопустимыеХарактерыДеятельности))) КАК ИППрочиеРасходыОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ИППрочиеРасходыОбороты.НоменклатурнаяГруппа,
		|	ИППрочиеРасходыОбороты.ХарактерДеятельности,
		|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
		|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
		|	ИППрочиеРасходыОбороты.ДокументОплаты,
		|	ИППрочиеРасходыОбороты.СчетУчета,
		|	ИППрочиеРасходыОбороты.Период
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИПРасходыНаОплатуТрудаОбороты.НоменклатурнаяГруппа,
		|	ИПРасходыНаОплатуТрудаОбороты.ХарактерДеятельности,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ИПРасходыНаОплатуТрудаОбороты.ВидНачисленияУдержания,
		|	ИПРасходыНаОплатуТрудаОбороты.СтатьяЗатрат,
		|	ИПРасходыНаОплатуТрудаОбороты.РасчетныйДокумент,
		|	ИПРасходыНаОплатуТрудаОбороты.ДокументОплаты,
		|	ИПРасходыНаОплатуТрудаОбороты.ФизЛицо,
		|	ИПРасходыНаОплатуТрудаОбороты.Контрагент,
		|	0,
		|	ИПРасходыНаОплатуТрудаОбороты.СуммаОборот,
		|	0,
		|	ИПРасходыНаОплатуТрудаОбороты.Период
		|ИЗ
		|	РегистрНакопления.ИПРасходыНаОплатуТруда.Обороты(
		|			&НачалоМесяца,
		|			&КонецМесяца,
		|			Месяц,
		|			Организация = &Организация
		|				И (НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|					ИЛИ ХарактерДеятельности В (&НедопустимыеХарактерыДеятельности))) КАК ИПРасходыНаОплатуТрудаОбороты
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИПРБПОбороты.НоменклатурнаяГруппа,
		|	ИПРБПОбороты.ХарактерДеятельности,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ИПРБПОбороты.ВидРасхода,
		|	ИПРБПОбороты.Партия,
		|	ИПРБПОбороты.ДокументОплаты,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	ИПРБПОбороты.СуммаРасход,
		|	ИПРБПОбороты.НДСРасход,
		|	&Период
		|ИЗ
		|	РегистрНакопления.ИПРБП.Обороты(
		|			&НачалоМесяца,
		|			&КонецМесяца,
		|			Месяц,
		|			Организация = &Организация
		|				И (НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|					ИЛИ ХарактерДеятельности В (&НедопустимыеХарактерыДеятельности))
		|				И Партия <> НЕОПРЕДЕЛЕНО) КАК ИПРБПОбороты";
		
		Если БазаРаспределения.Количество() > 0 Тогда
			МПЗ = Запрос.Выполнить().Выбрать();
			
			Пока МПЗ.Следующий() Цикл
				
				// Если известна номенклатурная группа или характер деятельности,
				// то необходимо уточнить базу распределения.
				УточненнаяБаза = ДоходыИРасходыПредпринимателя.БазаУточненнаяПоХарактеруИГруппе(БазаРаспределения, МПЗ.НоменклатурнаяГруппа1, МПЗ.ХарактерДеятельности1);
				
				Если УточненнаяБаза.Количество() > 0 Тогда
					ДоходыИРасходыПредпринимателя.РаспределениеПоБазе(МПЗ, "Сумма", 2, "НДС", 2, "Количество", 3, УточненнаяБаза, "Доход", ИзмененияВидаДеятельности);
				КонецЕсли;
			
			КонецЦикла;
			
			ДатаРегистратора = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
			ДоходыИРасходыПредпринимателя.ИзменениеВидаДеятельности(СтруктураШапкиДокумента.Организация, ИзмененияВидаДеятельности, Движения, СтруктураШапкиДокумента.Дата, Ложь,, ДатаРегистратора);
			
			Для Каждого ИМР Из ИзмененияВидаДеятельности Цикл
				Если ИМР.ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы Тогда
					Движение = Движения.ИПИныеМатериальныеРасходы.ДобавитьРасход();
					Движение.Период = СтруктураШапкиДокумента.Дата;
					Движение.Организация  = СтруктураШапкиДокумента.Организация;
					Движение.НоменклатурнаяГруппа = ИМР.НоменклатурнаяГруппа2;
					Движение.ХарактерДеятельности = ИМР.ХарактерДеятельности2;
					Движение.СтатьяЗатрат = ИМР.Номенклатура;
					Движение.Партия = ИМР.Партия;
					Движение.ДокументОплаты = ИМР.ДокументОплаты;
					Движение.МПЗ = ИМР.МПЗ;
					Движение.ПартияМПЗ = ИМР.ПартияМПЗ;
					Движение.Количество = ИМР.Количество;
					Движение.Сумма = ИМР.Сумма;
					Движение.НДС = ИМР.НДС;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
			СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПИныеМатериальныеРасходы");
			ЗначенияБлокировки = Новый Соответствие;
			ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
			ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
		|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
		|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат КАК Номенклатура,
		|	ИПИныеМатериальныеРасходыОстатки.Партия,
		|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
		|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
		|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ,
		|	СУММА(ИПИныеМатериальныеРасходыОстатки.КоличествоОстаток) КАК Количество,
		|	СУММА(ИПИныеМатериальныеРасходыОстатки.СуммаОстаток) КАК Сумма,
		|	СУММА(ИПИныеМатериальныеРасходыОстатки.НДСОстаток) КАК НДС
		|ИЗ
		|	РегистрНакопления.ИПИныеМатериальныеРасходы.Остатки(
		|			&КонецМесяца,
		|			Организация = &Организация
		|				И МПЗ = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|				И ПартияМПЗ = НЕОПРЕДЕЛЕНО) КАК ИПИныеМатериальныеРасходыОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
		|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
		|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат,
		|	ИПИныеМатериальныеРасходыОстатки.Партия,
		|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
		|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
		|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ
		|
		|ДЛЯ ИЗМЕНЕНИЯ";
		
		ИМР = Запрос.Выполнить().Выбрать();
		
		Пока ИМР.Следующий() Цикл
			Движение = Движения.ИПИныеМатериальныеРасходы.ДобавитьРасход();
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.Организация  = СтруктураШапкиДокумента.Организация;
			Движение.НоменклатурнаяГруппа = ИМР.НоменклатурнаяГруппа;
			Движение.ХарактерДеятельности = ИМР.ХарактерДеятельности;
			Движение.СтатьяЗатрат = ИМР.Номенклатура;
			Движение.Партия = ИМР.Партия;
			Движение.ДокументОплаты = ИМР.ДокументОплаты;
			Движение.МПЗ = ИМР.МПЗ;
			Движение.ПартияМПЗ = ИМР.ПартияМПЗ;
			Движение.Количество = ИМР.Количество;
			Движение.Сумма = ИМР.Сумма;
			Движение.НДС = ИМР.НДС;
		КонецЦикла;
	КонецЕсли;
	
	// Распределение ИМР по стоимости партий МПЗ
	ИзмененияВидаДеятельности.Очистить();
	Движения.ИПИныеМатериальныеРасходы.Записать(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ИМР", Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа1,
	|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности КАК ХарактерДеятельности1,
	|	НЕОПРЕДЕЛЕНО КАК НоменклатурнаяГруппа2,
	|	НЕОПРЕДЕЛЕНО КАК ХарактерДеятельности2,
	|	&ИМР КАК ВидМПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат КАК Номенклатура,
	|	ИПИныеМатериальныеРасходыОстатки.Партия,
	|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
	|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ,
	|	СУММА(ИПИныеМатериальныеРасходыОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(ИПИныеМатериальныеРасходыОстатки.СуммаОстаток) КАК Сумма,
	|	СУММА(ИПИныеМатериальныеРасходыОстатки.НДСОстаток) КАК НДС
	|ИЗ
	|	РегистрНакопления.ИПИныеМатериальныеРасходы.Остатки(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И МПЗ <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И ПартияМПЗ <> НЕОПРЕДЕЛЕНО) КАК ИПИныеМатериальныеРасходыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
	|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
	|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат,
	|	ИПИныеМатериальныеРасходыОстатки.Партия,
	|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
	|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ
	|
	|ДЛЯ ИЗМЕНЕНИЯ";
	
	НераспределенныеИМР = Запрос.Выполнить().Выгрузить();
	
	СписокМПЗ = НераспределенныеИМР.ВыгрузитьКолонку("МПЗ");
	СписокПартийМПЗ = НераспределенныеИМР.ВыгрузитьКолонку("ПартияМПЗ");
	
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокМПЗ);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокПартийМПЗ);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачГраница);
	Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
	Запрос.УстановитьПараметр("номенклатура", СписокМПЗ);
	Запрос.УстановитьПараметр("Партии", СписокПартийМПЗ);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.ХарактерДеятельности,
	|	ВложенныйЗапрос.Партия,
	|	ВложенныйЗапрос.Номенклатура,
	|	СУММА(ВложенныйЗапрос.Расход) КАК Расход,
	|	СУММА(ВложенныйЗапрос.Остаток) КАК Остаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИПМПЗОстаткиИОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|		ИПМПЗОстаткиИОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
	|		ИПМПЗОстаткиИОбороты.Партия КАК Партия,
	|		ИПМПЗОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|		0 КАК Расход,
	|		ИПМПЗОстаткиИОбороты.СуммаКонечныйОстаток КАК Остаток
	|	ИЗ
	|		РегистрНакопления.ИПМПЗ.ОстаткиИОбороты(
	|				&НачалоМесяца,
	|				&КонецМесяца,
	|				,
	|				Движения,
	|				Организация = &Организация
	|					И Номенклатура В (&номенклатура)
	|					И Партия В (&Партии)) КАК ИПМПЗОстаткиИОбороты
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ИПМПЗОтгруженныеОстаткиИОбороты.НоменклатурнаяГруппа,
	|		ИПМПЗОтгруженныеОстаткиИОбороты.ХарактерДеятельности,
	|		ИПМПЗОтгруженныеОстаткиИОбороты.Партия,
	|		ИПМПЗОтгруженныеОстаткиИОбороты.Номенклатура,
	|		ИПМПЗОтгруженныеОстаткиИОбороты.СуммаРасход,
	|		ИПМПЗОтгруженныеОстаткиИОбороты.СуммаКонечныйОстаток
	|	ИЗ
	|		РегистрНакопления.ИПМПЗОтгруженные.ОстаткиИОбороты(
	|				&НачалоМесяца,
	|				&КонецМесяца,
	|				,
	|				Движения,
	|				Организация = &Организация
	|					И Номенклатура В (&номенклатура)
	|					И Партия В (&Партии)) КАК ИПМПЗОтгруженныеОстаткиИОбороты
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.НоменклатурнаяГруппа,
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.ХарактерДеятельности,
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.Партия,
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.СтатьяЗатрат,
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.СуммаРасход,
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.СуммаКонечныйОстаток
	|	ИЗ
	|		РегистрНакопления.ИПИныеМатериальныеРасходы.ОстаткиИОбороты(
	|				&НачалоМесяца,
	|				&КонецМесяца,
	|				,
	|				Движения,
	|				Организация = &Организация
	|					И СтатьяЗатрат В (&номенклатура)
	|					И Партия В (&Партии)) КАК ИПИныеМатериальныеРасходыОстаткиИОбороты) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.ХарактерДеятельности,
	|	ВложенныйЗапрос.Партия,
	|	ВложенныйЗапрос.Номенклатура
	|
	|ДЛЯ ИЗМЕНЕНИЯ";
	
	БазаРаспределенияДопРасходов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ИМР Из НераспределенныеИМР Цикл
		ОтборСтрокБазы.Очистить();
		ОтборСтрокБазы.Вставить("Партия", ИМР.ПартияМПЗ);
		ОтборСтрокБазы.Вставить("Номенклатура", ИМР.МПЗ);
		УточненнаяБаза = БазаРаспределенияДопРасходов.Скопировать(БазаРаспределенияДопРасходов.НайтиСтроки(ОтборСтрокБазы));
		
		Если УточненнаяБаза.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Расход = УточненнаяБаза.Итог("Расход");
		Остаток = УточненнаяБаза.Итог("Остаток");
		
		Если Остаток <> 0 Тогда
			ИМР.Сумма = Окр(ИМР.Сумма * Расход / (Остаток + Расход), 2, 1); 
			ИМР.Количество = Окр(ИМР.Количество * Расход / (Остаток + Расход), 3, 1);
			ИМР.НДС = Окр(ИМР.НДС * Расход / (Остаток + Расход), 2, 1);
		КонецЕсли;
		
		Если ИМР.Сумма <> 0 Тогда
			ДоходыИРасходыПредпринимателя.РаспределениеПоБазе(ИМР, "Сумма", 2, "НДС", 2, "Количество", 3, УточненнаяБаза, "Расход", ИзмененияВидаДеятельности);
		КонецЕсли;
	КонецЦикла;
	
	ДатаРегистратора = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
	ДоходыИРасходыПредпринимателя.ИзменениеВидаДеятельности(СтруктураШапкиДокумента.Организация, ИзмененияВидаДеятельности, Движения, СтруктураШапкиДокумента.Дата, Ложь,, ДатаРегистратора);
	
	Для Каждого ИМР Из ИзмененияВидаДеятельности Цикл
		Движение = Движения.ИПИныеМатериальныеРасходы.ДобавитьРасход();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация  = СтруктураШапкиДокумента.Организация;
		Движение.НоменклатурнаяГруппа = ИМР.НоменклатурнаяГруппа2;
		Движение.ХарактерДеятельности = ИМР.ХарактерДеятельности2;
		Движение.СтатьяЗатрат = ИМР.Номенклатура;
		Движение.Партия = ИМР.Партия;
		Движение.ДокументОплаты = ИМР.ДокументОплаты;
		Движение.МПЗ = ИМР.МПЗ;
		Движение.ПартияМПЗ = ИМР.ПартияМПЗ;
		Движение.Количество = ИМР.Количество;
		Движение.Сумма = ИМР.Сумма;
		Движение.НДС = ИМР.НДС;
	КонецЦикла;
	
	Движения.ИПИныеМатериальныеРасходы.Записать(Ложь);
	Движения.ИППрочиеРасходы.Записать(Ложь);
	
КонецПроцедуры
// }УчетДоходовИРасходовИП

//Признание расходов на приобретение основных средств и нематериальных активов

Процедура ВключитьВРасходыОС(СтруктураШапкиДокумента, ОС, Строка, СуммаОплаты, ДатаВводаВэксплуатацию, Параметры = Неопределено)
	
	ОбщПервоначальнаяСтоимостьУСН = Строка.ПервоначальнаяСтоимостьУСН;
	ОбщСуммаНачисленнойАмортизации = Строка.СуммаНачисленнойАмортизации;
	
	ПервоначальнаяСтоимостьУСН = Строка.СуммаОплатыОборот;
	СуммаНачисленнойАмортизации = ?(НЕ ОбщПервоначальнаяСтоимостьУСН = 0, ОбщСуммаНачисленнойАмортизации * ПервоначальнаяСтоимостьУСН / ОбщПервоначальнаяСтоимостьУСН, 0);
	ОстаточнаяСтоимость = Макс(0, ПервоначальнаяСтоимостьУСН - СуммаНачисленнойАмортизации);
	
	СтрокаКниги = мКУДиР_ОС.Добавить();
	СтрокаКниги.ОсновноеСредство = ОС;
	СтрокаКниги.Период = мКонДата;
	СтрокаКниги.Организация = СтруктураШапкиДокумента.Организация;
	СтрокаКниги.ДатаОплаты = Строка.ДатаОплаты;
	СтрокаКниги.Графа3_ДатаВводаВЭксплуатацию = ДатаВводаВэксплуатацию;
	СтрокаКниги.Графа5_ПервоначальнаяСтоимость = Строка.СуммаОплатыОборот;
	
	ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
	Если ОстатокРасходов < 0.01 Тогда
		СуммаОплаты = СуммаОплаты + ОстатокРасходов;
		ОстатокРасходов = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.ДокументМодернизации) Тогда
		СтрокаКниги.ДокументМодернизации = Строка.ДокументМодернизации
	КонецЕсли;
		
	Если НЕ (Параметры = Неопределено) Тогда
		
		Если Параметры.ПереходныйПериод Тогда
			СтрокаКниги.Графа6_ОстаточнаяСтоимость = ОстаточнаяСтоимость;
			СтрокаКниги.Графа7_СрокПолезногоИспользования = Цел(Строка.СрокПолезногоИспользования/12) + ?(Строка.СрокПолезногоИспользования%12 <> 0, 1, 0);
			СтрокаКниги.Графа8_КолКварталовВОтчетномПериоде = Параметры.КоличествоКварталовВОтчетномПериоде;
			СтрокаКниги.Графа14_РасходыПрошлыхПериодов = Строка.СуммаРасходовВсего - (Строка.СуммаРасходовЗаГод);
			СтрокаКниги.Графа15_ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
		КонецЕсли;
		
		СтрокаКниги.Графа9_КолКварталовВНалПериоде  = Параметры.КоличествоКварталовВНалоговомПериоде;
		СтрокаКниги.Графа10_ДоляРасходовЗаНалПериод  = Параметры.ПроцентПринятияРасходов;
		СтрокаКниги.Графа11_ДоляРасходовЗаКвартал   = Параметры.ПроцентПринятияРасходовОтч;
	Иначе
		СтрокаКниги.Графа7_СрокПолезногоИспользования = Цел(Строка.СрокПолезногоИспользования/12) + ?(Строка.СрокПолезногоИспользования%12 <> 0, 1, 0);
		СтрокаКниги.Графа14_РасходыПрошлыхПериодов = Строка.СуммаРасходовВсего - (Строка.СуммаРасходовЗаГод + СуммаОплаты);
		
	КонецЕсли;
	
	СтрокаКниги.Графа12_СуммаРасходовЗаОтчетнПериод = Строка.СуммаРасходовЗаГод + СуммаОплаты;
	СтрокаКниги.Графа13_СуммаРасходовЗаКвартал = Строка.СуммаРасходовЗаКвартал + СуммаОплаты;
	СтрокаКниги.Графа15_ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
	
	Если СуммаОплаты > 0 Тогда
		
		СтрокаКниги  = мКУДиР.Добавить();
		Если ЗначениеЗаполнено(Строка.ДокументМодернизации) Тогда
			СтрокаСодержания = "Признание расходов: основное средство """+Строка(ОС)+""", " + Строка.ДокументМодернизации.СобытиеОС + " от " + Формат(Строка.ДокументМодернизации.Дата,"ДФ=дд.ММ.гггг") + " (дата оплаты: "+Формат(Строка.ДатаОплаты, "ДФ=дд.ММ.гггг")+").";
		Иначе
			СтрокаСодержания = "Признание расходов на приобретение основного средства """+Строка(ОС)+""" (дата оплаты: "+Формат(Строка.ДатаОплаты, "ДФ=дд.ММ.гггг")+").";
		КонецЕсли;
		
		СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.Период          = мКонДата;
		СтрокаКниги.Содержание      = СтрокаСодержания;
		СтрокаКниги.Графа7          = СуммаОплаты;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьВРасходыНМА(СтруктураШапкиДокумента, НМА, Строка, СуммаОплаты, ДатаПринятияКУчету, Параметры = Неопределено)
	
	ОбщПервоначальнаяСтоимостьУСН = Строка.ПервоначальнаяСтоимостьУСН;
	ОбщСуммаНачисленнойАмортизации = Строка.СуммаНачисленнойАмортизации;
	
	ПервоначальнаяСтоимостьУСН = Строка.СуммаОплатыОборот;
	СуммаНачисленнойАмортизации = ?(НЕ ОбщПервоначальнаяСтоимостьУСН = 0, ОбщСуммаНачисленнойАмортизации * ПервоначальнаяСтоимостьУСН / ОбщПервоначальнаяСтоимостьУСН, 0);
	ОстаточнаяСтоимость = Макс(0, ПервоначальнаяСтоимостьУСН - СуммаНачисленнойАмортизации);
	
	СтрокаКниги = мКУДиР_НМА.Добавить();
	СтрокаКниги.НематериальныйАктив = НМА;
	СтрокаКниги.Период = мКонДата;
	СтрокаКниги.Организация = СтруктураШапкиДокумента.Организация;
	СтрокаКниги.ДатаОплаты = Строка.ДатаОплаты;
	СтрокаКниги.Графа3_ДатаПринятияКУчету = ДатаПринятияКУчету;
	СтрокаКниги.Графа5_ПервоначальнаяСтоимость = Строка.СуммаОплатыОборот;
	
	ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
	Если ОстатокРасходов < 0.01 Тогда
		СуммаОплаты = СуммаОплаты + ОстатокРасходов;
		ОстатокРасходов = 0;
	КонецЕсли;
	
	Если НЕ (Параметры = Неопределено) Тогда
		
		Если Параметры.ПереходныйПериод Тогда
			СтрокаКниги.Графа6_ОстаточнаяСтоимость = ОстаточнаяСтоимость;
			СтрокаКниги.Графа7_СрокПолезногоИспользования = Цел(Строка.СрокПолезногоИспользования/12) + ?(Строка.СрокПолезногоИспользования%12 <> 0, 1, 0);
			СтрокаКниги.Графа8_КолКварталовВОтчетномПериоде = Параметры.КоличествоКварталовВОтчетномПериоде;
			СтрокаКниги.Графа14_РасходыПрошлыхПериодов = Строка.СуммаРасходовВсего - (Строка.СуммаРасходовЗаГод);
			СтрокаКниги.Графа15_ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
		КонецЕсли;
		
		СтрокаКниги.Графа9_КолКварталовВНалПериоде  = Параметры.КоличествоКварталовВНалоговомПериоде;
		СтрокаКниги.Графа10_ДоляРасходовЗаНалПериод  = Параметры.ПроцентПринятияРасходов;
		СтрокаКниги.Графа11_ДоляРасходовЗаКвартал   = Параметры.ПроцентПринятияРасходовОтч;
	Иначе
		СтрокаКниги.Графа7_СрокПолезногоИспользования = Цел(Строка.СрокПолезногоИспользования/12) + ?(Строка.СрокПолезногоИспользования%12 <> 0, 1, 0);
		СтрокаКниги.Графа14_РасходыПрошлыхПериодов = Строка.СуммаРасходовВсего - (Строка.СуммаРасходовЗаГод + СуммаОплаты);
		
	КонецЕсли;
	
	СтрокаКниги.Графа12_СуммаРасходовЗаОтчетнПериод = Строка.СуммаРасходовЗаГод + СуммаОплаты;
	СтрокаКниги.Графа13_СуммаРасходовЗаКвартал = Строка.СуммаРасходовЗаКвартал + СуммаОплаты;
	СтрокаКниги.Графа15_ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
	
	Если СуммаОплаты > 0 Тогда
		
		СтрокаКниги  = мКУДиР.Добавить();
		
		СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.Период          = мКонДата;
		СтрокаКниги.Содержание      = "Признание расходов на приобретение нематериального актива """+Строка(НМА)+""" (дата оплаты: "+Формат(Строка.ДатаОплаты, "ДФ=дд.ММ.гггг")+").";
		СтрокаКниги.Графа7          = СуммаОплаты;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьВРасходыПрочее(СтруктураШапкиДокумента, Объект, Строка, СуммаОплаты, Параметры = Неопределено)
	
	Если СуммаОплаты > 0 Тогда
		
		СтрокаКниги  = мКУДиР.Добавить();
		
		СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.Период          = мКонДата;
		СтрокаКниги.Содержание      = "Признание расходов на """+Строка(Объект)+""" (дата оплаты: "+Формат(Строка.ДатаОплаты, "ДФ=дд.ММ.гггг")+").";
		СтрокаКниги.Графа7          = СуммаОплаты;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроцентПринятыхРасходов(СрокПолезногоИспользования)
	
	ПроцентСписания = 0;
	
	Если СрокПолезногоИспользования <= 3*12 Тогда
		
		Если Год(Дата) = Год(мДатаПереходаНаУСН) Тогда
			ПроцентСписания = 100;
		КонецЕсли;
		
	ИначеЕсли СрокПолезногоИспользования <= 15*12 Тогда
		Если Год(Дата) = Год(мДатаПереходаНаУСН) Тогда
			ПроцентСписания = 50;
			
		ИначеЕсли (Год(Дата) - 1) = Год(мДатаПереходаНаУСН) Тогда
			ПроцентСписания = 30;
			
		ИначеЕсли (Год(Дата) - 2) = Год(мДатаПереходаНаУСН) Тогда
			ПроцентСписания = 20;
		КонецЕсли;
		
	Иначе
		ПроцентСписания = 10;
	КонецЕсли;
	
	Возврат ПроцентСписания;
	
КонецФункции // ПроцентПринятыхРасходов()

Функция РассчитатьКоличествоМесяцевЭксплуатации(КоличествоКварталовВОтчетномПериоде, 
	КоличествоКварталовВНалоговомПериоде,
	ДатаВключенияСтоимостиВРасходы);
	
	НомерКвартала = Месяц(КонецКвартала(Дата)) / 3;
	Если Год(ДатаВключенияСтоимостиВРасходы) < Год(Дата) Тогда
		КоличествоКварталовВОтчетномПериоде  = НомерКвартала;
		КоличествоКварталовВНалоговомПериоде = 4;
		
	ИначеЕсли ДатаВключенияСтоимостиВРасходы <= Дата Тогда
		НомерКварталаНачалаРасчета = Месяц(КонецКвартала(ДатаВключенияСтоимостиВРасходы)) / 3;
		КоличествоКварталовВОтчетномПериоде  = НомерКвартала - НомерКварталаНачалаРасчета;
		КоличествоКварталовВНалоговомПериоде = 5 - НомерКварталаНачалаРасчета;
		
		Если (Месяц(ДатаВключенияСтоимостиВРасходы) <> Месяц(КонецКвартала(ДатаВключенияСтоимостиВРасходы))) или (ДатаВключенияСтоимостиВРасходы >= Дата("20060101")) Тогда
			КоличествоКварталовВОтчетномПериоде = КоличествоКварталовВОтчетномПериоде + 1;
		Иначе
			КоличествоКварталовВНалоговомПериоде = КоличествоКварталовВНалоговомПериоде - 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // РассчитатьКоличествоМесяцевЭксплуатации()

Функция РапределитьОплатуПоКварталам(СуммаОплаты, ДатаОплаты, ДатаВводаВэксплуатацию, Параметры)
	
	КоличествоКварталовВОтчетномПериоде  = 0;
	КоличествоКварталовВНалоговомПериоде = 0;
	ДатаВключенияСтоимостиВРасходы       = 0;
	
	РассчитатьКоличествоМесяцевЭксплуатации(КоличествоКварталовВОтчетномПериоде, 
	КоличествоКварталовВНалоговомПериоде,
	Макс(ДатаОплаты, ДатаВводаВэксплуатацию));
	СуммаРасходов = 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		СуммаРасходов = СуммаОплаты/КоличествоКварталовВНалоговомПериоде;    
	КонецЕсли;
	
	ПроцентПринятияРасходовОтч = ?(КоличествоКварталовВНалоговомПериоде = 0, 0, Окр(100/КоличествоКварталовВНалоговомПериоде, 2));
	Параметры = Новый Структура("КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов", 0, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, 100);
	
	Возврат СуммаРасходов;
	
КонецФункции

Процедура ФормированиеРасходов(СтруктураШапкиДокумента, ОС, ОстаточнаяСтоимость, Строка, ДатаВводаВэксплуатацию)
	
	Если ОстаточнаяСтоимость <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоКварталовВОтчетномПериоде  = 0;
	КоличествоКварталовВНалоговомПериоде = 0;
	ДатаВключенияСтоимостиВРасходы       = 0;
	
	ПроцентПринятияРасходов = ПроцентПринятыхРасходов(Строка.СрокПолезногоИспользования);
	РассчитатьКоличествоМесяцевЭксплуатации(КоличествоКварталовВОтчетномПериоде, 
	КоличествоКварталовВНалоговомПериоде,
	Макс(Строка.ДатаОплаты, ДатаВводаВэксплуатацию));
	СуммаРасходов = 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		СуммаРасходов = ОстаточнаяСтоимость*КоличествоКварталовВОтчетномПериоде*(ПроцентПринятияРасходов/КоличествоКварталовВНалоговомПериоде)/100;    
	КонецЕсли;
	
	РасходыТекущегоКварталаСумма = 0;
	ОтнесеноНаРасходы = 0;
	ОтнесеноНаРасходы = Строка.СуммаРасходовЗаГод;
	
	СуммаРасходов = Макс(0, СуммаРасходов - ОтнесеноНаРасходы);
	
	ПроцентПринятияРасходовОтч = 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		ПроцентПринятияРасходовОтч = (ПроцентПринятияРасходов/КоличествоКварталовВНалоговомПериоде);    
	КонецЕсли;
	
	Параметры = Новый Структура("КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов", КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов);
	Параметры.Вставить("ПереходныйПериод", Истина);
	
	Если НЕ СуммаРасходов = 0 Тогда
		ВключитьВРасходыОС(СтруктураШапкиДокумента, ОС, Строка, СуммаРасходов, ДатаВводаВэксплуатацию, Параметры);
	КонецЕсли;
	
КонецПроцедуры // ФормированиеРасходов()

Процедура ФормированиеРасходовНМА(СтруктураШапкиДокумента, НМА, ОстаточнаяСтоимость, Строка, ДатаПринятияКУчету)
	
	Если ОстаточнаяСтоимость <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоКварталовВОтчетномПериоде  = 0;
	КоличествоКварталовВНалоговомПериоде = 0;
	ДатаВключенияСтоимостиВРасходы       = 0;
	
	ПроцентПринятияРасходов = ПроцентПринятыхРасходов(Строка.СрокПолезногоИспользования);
	РассчитатьКоличествоМесяцевЭксплуатации(КоличествоКварталовВОтчетномПериоде, 
	КоличествоКварталовВНалоговомПериоде,
	Макс(Строка.ДатаОплаты, ДатаПринятияКУчету));
	СуммаРасходов = 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		СуммаРасходов = ОстаточнаяСтоимость*КоличествоКварталовВОтчетномПериоде*(ПроцентПринятияРасходов/КоличествоКварталовВНалоговомПериоде)/100;    
	КонецЕсли;
	
	РасходыТекущегоКварталаСумма = 0;
	ОтнесеноНаРасходы = 0;
	ОтнесеноНаРасходы = Строка.СуммаРасходовЗаГод;
	
	СуммаРасходов = Макс(0, СуммаРасходов - ОтнесеноНаРасходы);
	
	ПроцентПринятияРасходовОтч = 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		ПроцентПринятияРасходовОтч = (ПроцентПринятияРасходов/КоличествоКварталовВНалоговомПериоде);    
	КонецЕсли;
	
	Параметры = Новый Структура("КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов", КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов);
	Параметры.Вставить("ПереходныйПериод", Истина);
	
	Если НЕ СуммаРасходов = 0 Тогда
		ВключитьВРасходыНМА(СтруктураШапкиДокумента, НМА, Строка, СуммаРасходов, ДатаПринятияКУчету, Параметры);
	КонецЕсли;
	
КонецПроцедуры // ФормированиеРасходов()

Процедура ПризнаниеРасходовНаПриобретениеОСУСН(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ПризнаниеРасходовНаПриобретениеОСУСН ИЛИ мПредприниматель Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаПереходаНаУСН", мДатаПереходаНаУСН);
	Запрос.УстановитьПараметр("НачПериода",        мНачГода);
	Запрос.УстановитьПараметр("НачКвартала",       НачалоКвартала(Дата));
	Запрос.УстановитьПараметр("КонДата",           мКонДата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ОплатыОСДляУСНОбороты.ДокументМодернизации,
	|	ОплатыОСДляУСНОбороты.ДатаОплаты КАК ДатаОплаты,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.СуммаНачисленнойАмортизации,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ДатаПриобретения,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовОСОбороты.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовОСОбороты.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовВсего,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовОСОборотыГод.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовОСОборотыГод.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовОСОборотыКв.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовОСОборотыКв.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовЗаКвартал,
	|	СУММА(ВЫБОР
	|			КОГДА ОплатыОСДляУСНОбороты.СуммаОплатыОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ОплатыОСДляУСНОбороты.СуммаОплатыОборот
	|		КОНЕЦ) КАК СуммаОплатыОборот,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|ИЗ
	|	РегистрНакопления.ОплатыОСДляУСН.Обороты(, &КонДата, , Организация = &Организация) КАК ОплатыОСДляУСНОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчетУСН.СрезПоследних(&КонДата, ) КАК ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних
	|		ПО ОплатыОСДляУСНОбороты.ОсновноеСредство = ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовОС.Обороты(&ДатаПереходаНаУСН, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОСОбороты
	|		ПО КнигаУчетаДоходовИРасходовОСОбороты.ОсновноеСредство = ОплатыОСДляУСНОбороты.ОсновноеСредство
	|			И КнигаУчетаДоходовИРасходовОСОбороты.ДатаОплаты = ОплатыОСДляУСНОбороты.ДатаОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовОС.Обороты(&НачПериода, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОСОборотыГод
	|		ПО КнигаУчетаДоходовИРасходовОСОборотыГод.ОсновноеСредство = ОплатыОСДляУСНОбороты.ОсновноеСредство
	|			И КнигаУчетаДоходовИРасходовОСОборотыГод.ДатаОплаты = ОплатыОСДляУСНОбороты.ДатаОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовОС.Обороты(&НачКвартала, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОСОборотыКв
	|		ПО КнигаУчетаДоходовИРасходовОСОборотыКв.ОсновноеСредство = ОплатыОСДляУСНОбороты.ОсновноеСредство
	|			И КнигаУчетаДоходовИРасходовОСОборотыКв.ДатаОплаты = ОплатыОСДляУСНОбороты.ДатаОплаты
	|ГДЕ
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ОсновноеСредство,
	|	ОплатыОСДляУСНОбороты.ДокументМодернизации,
	|	ОплатыОСДляУСНОбороты.ДатаОплаты,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.СуммаНачисленнойАмортизации,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ДатаПриобретения,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредство,
	|	ДатаОплаты";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТекОС = "";
	ТекМодернизацияОС = "";
	Для Каждого СтрокаРезультата ИЗ ТаблицаРезультата Цикл
		Если (СтрокаРезультата.ОсновноеСредство = ТекОС) И (СтрокаРезультата.ДокументМодернизации = ТекМодернизацияОС) Тогда
			//
		Иначе
			ТекОС = СтрокаРезультата.ОсновноеСредство;
			ТекМодернизацияОС = СтрокаРезультата.ДокументМодернизации;
			Если ЗначениеЗаполнено(СтрокаРезультата.ДокументМодернизации) Тогда //Модернизация
				
				ПервоначальнаяСтоимостьУСН = 0;
				СуммаНачисленнойАмортизации = 0;
				СрокПолезногоИспользования = 12;
				ДатаПриобретения = СтрокаРезультата.ДокументМодернизации.Дата;
				ДатаВвода = ДатаПриобретения;

				Если (СтрокаРезультата.ДатаОплаты < Дата("20070101")) ИЛИ (ДатаВвода < Дата("20070101")) Тогда
					ТекОС = "";
					Продолжить;
				КонецЕсли;
				
				Если Макс(СтрокаРезультата.ДатаОплаты, ДатаВвода) < Дата("20080101") Тогда
					ТекОС = "";
					Продолжить;
				КонецЕсли;
				
				Если ДатаПриобретения < мДатаПереходаНаУСН Тогда
                    ТекОС = "";
					Продолжить;
				КонецЕсли;
				
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("Ссылка", 		СтрокаРезультата.ДокументМодернизации);
				Запрос.УстановитьПараметр("ОС", 			СтрокаРезультата.ОсновноеСредство);
				Запрос.УстановитьПараметр("Организация", 	СтруктураШапкиДокумента.Организация);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СУММА(СобытияОСОрганизаций.СуммаЗатратБУ) КАК СуммаЗатратБУ,
				|	СУММА(СобытияОСОрганизаций.СуммаЗатратНУ) КАК СуммаЗатратНУ,
				|	СУММА(СобытияОСОрганизаций.СуммаЗатратУСН) КАК СуммаЗатратУСН,
				|	СобытияОСОрганизаций.Событие
				|ИЗ
				|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
				|ГДЕ
				|	СобытияОСОрганизаций.Регистратор = &Ссылка
				|	И СобытияОСОрганизаций.ОсновноеСредство = &ОС
				|	И СобытияОСОрганизаций.Организация = &Организация
				|
				|СГРУППИРОВАТЬ ПО
				|	СобытияОСОрганизаций.Событие";
				
				Результат = Запрос.Выполнить().Выбрать();
				Если Результат.Следующий() Тогда
					ПервоначальнаяСтоимостьУСН = Результат.СуммаЗатратУСН;
				КонецЕсли;
				
			Иначе //ОС
				
				ПервоначальнаяСтоимостьУСН = СтрокаРезультата.ПервоначальнаяСтоимостьУСН;
				СуммаНачисленнойАмортизации = СтрокаРезультата.СуммаНачисленнойАмортизации;
				СрокПолезногоИспользования = СтрокаРезультата.СрокПолезногоИспользования;
				ДатаПриобретения = СтрокаРезультата.ДатаПриобретения;
				
				ДокРегистратор   = Неопределено;
				ДатаВвода		 = Неопределено;
				УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ТекОС, СтруктураШапкиДокумента.Организация, Перечисления.СостоянияОС.ПринятоКУчету, ДокРегистратор, ДатаВвода);
				
			КонецЕсли;
			
			ДокументСнятоСУчетаБУ = Неопределено;
			ДатаВыбытия			  = Неопределено;
			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ТекОС, СтруктураШапкиДокумента.Организация, Перечисления.СостоянияОС.СнятоСУчета,  ДокументСнятоСУчетаБУ, ДатаВыбытия);
			ДатаВыбытия = ?(ДатаВыбытия > КонецДня(СтруктураШапкиДокумента.Дата), "", ДатаВыбытия);
				
			Если НЕ ЗначениеЗаполнено(ДатаВвода) Тогда
				ТекОС = "";
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ПервоначальнаяСтоимостьУСН) Тогда
				ТекОС = "";
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДатаВыбытия) И (НЕ Год(ДатаВыбытия) = Год(СтруктураШапкиДокумента.Дата)) Тогда
				//Основное средство выбыло в предыдущие годы
				ТекОС = "";
				Продолжить;
			КонецЕсли;
			
			ОстаточнаяСтоимость = Макс(0, ПервоначальнаяСтоимостьУСН - СуммаНачисленнойАмортизации);
			ОплаченнаяСтоимость = 0;
			ОплаченнаяОстаточнаяСтоимость = 0;
		КонецЕсли;
		
		Если (СтруктураШапкиДокумента.Дата >= Дата("20060101")) И (НЕ ЗначениеЗаполнено(СтрокаРезультата.ДокументМодернизации)) Тогда  
			
			Если СтрокаРезультата.ПорядокВключенияСтоимостиВСоставРасходовУСН = Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставРасходов Тогда
				
				Если ДатаВвода >= НачалоКвартала(Дата) Тогда
					СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
					ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
					Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
						Превышение = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
						СуммаОплаты = СуммаОплаты - Превышение;
						ТекстСообщения = "По "+ Строка(ТекОС) + " "+СтрокаРезультата.ДатаОплаты+" Оплата превысила первоначальную стоимость! Проверьте документы оплаты ОС !";
						ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
					КонецЕсли;
					Если СуммаОплаты > 0 Тогда
						ВключитьВРасходыПрочее(СтруктураШапкиДокумента, ТекОС, СтрокаРезультата, СуммаОплаты);
					КонецЕсли;
				Иначе
					СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
					ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
					Если СтрокаРезультата.ДатаОплаты < НачалоКвартала(Дата) Тогда
						Продолжить;
					КонецЕсли;
					Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
						Превышение = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
						СуммаОплаты = СуммаОплаты - Превышение;
						ТекстСообщения = "По "+ Строка(ТекОС) + " "+СтрокаРезультата.ДатаОплаты+" Оплата превысила первоначальную стоимость! Проверьте документы оплаты ОС !";
						ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
					КонецЕсли;
					Если СуммаОплаты > 0 Тогда
						ВключитьВРасходыПрочее(СтруктураШапкиДокумента, ТекОС, СтрокаРезультата, СуммаОплаты);
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
				
			ИначеЕсли СтрокаРезультата.ПорядокВключенияСтоимостиВСоставРасходовУСН = Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.НеВключатьВСоставРасходов Тогда
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ДатаПриобретения >= мДатаПереходаНаУСН Тогда
			
			Если Дата >= Дата("20060101") Тогда
				НачДатаОплат = НачалоГода(Дата);
			Иначе
				НачДатаОплат = НачалоКвартала(Дата);
			КонецЕсли;
			
			Если ДатаВвода >= НачДатаОплат Тогда
				СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
				ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					Превышение = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты = СуммаОплаты - Превышение;
					ТекстСообщения = "По "+ Строка(ТекОС) + " "+СтрокаРезультата.ДатаОплаты+" Оплата превысила первоначальную стоимость! Проверьте документы оплаты ОС !";
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
				КонецЕсли;
				Параметры = Неопределено;
				Если Дата >= Дата("20060101") Тогда
					СуммаОплаты = РапределитьОплатуПоКварталам(СуммаОплаты, СтрокаРезультата.ДатаОплаты, ДатаВвода, Параметры);
					Параметры.Вставить("ПереходныйПериод", Ложь);
				КонецЕсли;
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыОС(СтруктураШапкиДокумента, ТекОС, СтрокаРезультата, СуммаОплаты, ДатаВвода, Параметры);
				КонецЕсли;
			Иначе
				СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
				ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
				Если СтрокаРезультата.ДатаОплаты < НачДатаОплат Тогда
					Продолжить;
				КонецЕсли;
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					Превышение = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты = СуммаОплаты - Превышение;
					ТекстСообщения = "По "+ Строка(ТекОС) + " "+СтрокаРезультата.ДатаОплаты+" Оплата превысила первоначальную стоимость! Проверьте документы оплаты ОС !";
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
				КонецЕсли;
				Параметры = Неопределено;
				Если Дата >= Дата("20060101") Тогда
					СуммаОплаты = РапределитьОплатуПоКварталам(СуммаОплаты, СтрокаРезультата.ДатаОплаты, ДатаВвода, Параметры);
					Параметры.Вставить("ПереходныйПериод", Ложь);
				КонецЕсли;
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыОС(СтруктураШапкиДокумента, ТекОС, СтрокаРезультата, СуммаОплаты, ДатаВвода, Параметры);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			ОплаченнаяСтоимость = ОплаченнаяСтоимость + СтрокаРезультата.СуммаОплатыОборот;
			ЧастьОстаточнойСтоимости = ОстаточнаяСтоимость*(ОплаченнаяСтоимость/ПервоначальнаяСтоимостьУСН) - ОплаченнаяОстаточнаяСтоимость;
			ОплаченнаяОстаточнаяСтоимость = ОплаченнаяОстаточнаяСтоимость + ЧастьОстаточнойСтоимости;
			
			Если ОплаченнаяОстаточнаяСтоимость > ОстаточнаяСтоимость Тогда
				Превышение = ОплаченнаяОстаточнаяСтоимость - ОстаточнаяСтоимость;
				ОплаченнаяОстаточнаяСтоимость=ОплаченнаяОстаточнаяСтоимость - превышение;
				ЧастьОстаточнойСтоимости=ЧастьОстаточнойСтоимости - Превышение;
				ТекстСообщения = "По "+ Строка(ТекОС) + " "+СтрокаРезультата.ДатаОплаты+" Оплата превысила первоначальную стоимость! Проверьте документы оплаты ОС !";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
			КонецЕсли;
			
			Если ЧастьОстаточнойСтоимости > 0 Тогда
				ФормированиеРасходов(СтруктураШапкиДокумента, ТекОС, ЧастьОстаточнойСтоимости, СтрокаРезультата, ДатаВвода);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	мКУДиР.Записать(Ложь);
	
КонецПроцедуры

Процедура ПризнаниеРасходовНаПриобретениеНМАУСН(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ПризнаниеРасходовНаПриобретениеНМАУСН ИЛИ мПредприниматель Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаПереходаНаУСН", мДатаПереходаНаУСН);
	Запрос.УстановитьПараметр("НачПериода",        мНачГода);
	Запрос.УстановитьПараметр("НачКвартала",       НачалоКвартала(Дата));
	Запрос.УстановитьПараметр("КонДата",           мКонДата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	ОплатыНМАДляУСНОбороты.ДатаОплаты КАК ДатаОплаты,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.СуммаНачисленнойАмортизации,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ДатаПриобретения,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовНМАОбороты.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовНМАОбороты.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовВсего,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовНМАОборотыГод.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовНМАОборотыГод.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовНМАОборотыКв.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовНМАОборотыКв.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовЗаКвартал,
	|	СУММА(ВЫБОР
	|			КОГДА ОплатыНМАДляУСНОбороты.СуммаОплатыОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ОплатыНМАДляУСНОбороты.СуммаОплатыОборот
	|		КОНЕЦ) КАК СуммаОплатыОборот,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|ИЗ
	|	РегистрНакопления.ОплатыНМАДляУСН.Обороты(, &КонДата, , Организация = &Организация) КАК ОплатыНМАДляУСНОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчетУСН.СрезПоследних(&КонДата, ) КАК ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних
	|		ПО ОплатыНМАДляУСНОбороты.НематериальныйАктив = ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовНМА.Обороты(&ДатаПереходаНаУСН, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовНМАОбороты
	|		ПО КнигаУчетаДоходовИРасходовНМАОбороты.НематериальныйАктив = ОплатыНМАДляУСНОбороты.НематериальныйАктив
	|			И КнигаУчетаДоходовИРасходовНМАОбороты.ДатаОплаты = ОплатыНМАДляУСНОбороты.ДатаОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовНМА.Обороты(&НачПериода, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовНМАОборотыГод
	|		ПО КнигаУчетаДоходовИРасходовНМАОборотыГод.НематериальныйАктив = ОплатыНМАДляУСНОбороты.НематериальныйАктив
	|			И КнигаУчетаДоходовИРасходовНМАОборотыГод.ДатаОплаты = ОплатыНМАДляУСНОбороты.ДатаОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовНМА.Обороты(&НачКвартала, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовНМАОборотыКв
	|		ПО КнигаУчетаДоходовИРасходовНМАОборотыКв.НематериальныйАктив = ОплатыНМАДляУСНОбороты.НематериальныйАктив
	|			И КнигаУчетаДоходовИРасходовНМАОборотыКв.ДатаОплаты = ОплатыНМАДляУСНОбороты.ДатаОплаты
	|ГДЕ
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.НематериальныйАктив,
	|	ОплатыНМАДляУСНОбороты.ДатаОплаты,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.СуммаНачисленнойАмортизации,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ДатаПриобретения,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	НематериальныйАктив,
	|	ДатаОплаты";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТекНМА = "";
	Для Каждого СтрокаРезультата ИЗ ТаблицаРезультата Цикл
		Если СтрокаРезультата.НематериальныйАктив = ТекНМА Тогда
			//
		Иначе
			ТекНМА = СтрокаРезультата.НематериальныйАктив;
			ПервоначальнаяСтоимостьУСН = СтрокаРезультата.ПервоначальнаяСтоимостьУСН;
			СуммаНачисленнойАмортизации = СтрокаРезультата.СуммаНачисленнойАмортизации;
			СрокПолезногоИспользования = СтрокаРезультата.СрокПолезногоИспользования;
			ДатаПриобретения = СтрокаРезультата.ДатаПриобретения;
			
			ДокРегистратор   = Неопределено;
			ДатаВвода		 = Неопределено;
			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияНМА(ТекНМА, СтруктураШапкиДокумента.Организация,Перечисления.ВидыСостоянийНМА.ПринятКУчету, ДокРегистратор, ДатаВвода);
			Если НЕ ЗначениеЗаполнено(ДатаВвода) Тогда
				ТекНМА = "";
				Продолжить;
			КонецЕсли;
			
			ДокументСнятоСУчетаБУ = Неопределено;
			ДатаВыбытия			  = Неопределено;
			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияНМА(ТекНМА, СтруктураШапкиДокумента.Организация, Перечисления.ВидыСостоянийНМА.Списан,  ДокументСнятоСУчетаБУ, ДатаВыбытия);
			ДатаВыбытия = ?(ДатаВыбытия > КонецДня(СтруктураШапкиДокумента.Дата), "", ДатаВыбытия);
			Если ЗначениеЗаполнено(ДатаВыбытия) И (НЕ Год(ДатаВыбытия) = Год(СтруктураШапкиДокумента.Дата)) Тогда
				//НМА выбыло в предыдущие годы
				ТекНМА = "";
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПервоначальнаяСтоимостьУСН) Тогда
				ТекНМА = "";
				Продолжить;
			КонецЕсли;
			
			ОстаточнаяСтоимость = Макс(0, ПервоначальнаяСтоимостьУСН - СуммаНачисленнойАмортизации);
			ОплаченнаяСтоимость = 0;
			ОплаченнаяОстаточнаяСтоимость = 0;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.Дата >= Дата("20060101") Тогда  
			
			Если СтрокаРезультата.ПорядокВключенияСтоимостиВСоставРасходовУСН = Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставРасходов Тогда
				
				Если ДатаВвода >= НачалоКвартала(Дата) Тогда
					СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
					ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
					Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
						Превышение = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
						СуммаОплаты = СуммаОплаты - Превышение;
						ТекстСообщения = "По "+ Строка(ТекНМА) + " "+СтрокаРезультата.ДатаОплаты+" Оплата превысила первоначальную стоимость! Проверьте документы оплаты НМА !";
						ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
					КонецЕсли;
					Если СуммаОплаты > 0 Тогда
						ВключитьВРасходыПрочее(СтруктураШапкиДокумента, ТекНМА, СтрокаРезультата, СуммаОплаты);
					КонецЕсли;
				Иначе
					СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
					ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
					Если СтрокаРезультата.ДатаОплаты < НачалоКвартала(Дата) Тогда
						Продолжить;
					КонецЕсли;
					Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
						Превышение = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
						СуммаОплаты = СуммаОплаты - Превышение;
						ТекстСообщения = "По "+ Строка(ТекНМА) + " "+СтрокаРезультата.ДатаОплаты+" Оплата превысила первоначальную стоимость! Проверьте документы оплаты НМА !";
						ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
					КонецЕсли;
					Если СуммаОплаты > 0 Тогда
						ВключитьВРасходыПрочее(СтруктураШапкиДокумента, ТекНМА, СтрокаРезультата, СуммаОплаты);
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
				
			ИначеЕсли СтрокаРезультата.ПорядокВключенияСтоимостиВСоставРасходовУСН = Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.НеВключатьВСоставРасходов Тогда
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ДатаПриобретения >= мДатаПереходаНаУСН Тогда
			
			Если Дата >= Дата("20060101") Тогда
				НачДатаОплат = НачалоГода(Дата);
			Иначе
				НачДатаОплат = НачалоКвартала(Дата);
			КонецЕсли;
			
			Если ДатаВвода >= НачДатаОплат Тогда
				СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
				ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					Превышение = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты = СуммаОплаты - Превышение;
					ТекстСообщения = "По "+ Строка(ТекНМА) + " "+СтрокаРезультата.ДатаОплаты+" Оплата превысила первоначальную стоимость! Проверьте документы оплаты НМА !";
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
				КонецЕсли;
				Параметры = Неопределено;
				Если Дата >= Дата("20060101") Тогда
					СуммаОплаты = РапределитьОплатуПоКварталам(СуммаОплаты, СтрокаРезультата.ДатаОплаты, ДатаВвода, Параметры);
					Параметры.Вставить("ПереходныйПериод", Ложь);
				КонецЕсли;
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыНМА(СтруктураШапкиДокумента, ТекНМА, СтрокаРезультата, СуммаОплаты, ДатаВвода, Параметры);
				КонецЕсли;
			Иначе
				СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
				ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
				Если СтрокаРезультата.ДатаОплаты < НачДатаОплат Тогда
					Продолжить;
				КонецЕсли;
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					Превышение = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты = СуммаОплаты - Превышение;
					ТекстСообщения = "По "+ Строка(ТекНМА) + " "+СтрокаРезультата.ДатаОплаты+" Оплата превысила первоначальную стоимость! Проверьте документы оплаты НМА !";
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
				КонецЕсли;
				Параметры = Неопределено;
				Если Дата >= Дата("20060101") Тогда
					СуммаОплаты = РапределитьОплатуПоКварталам(СуммаОплаты, СтрокаРезультата.ДатаОплаты, ДатаВвода, Параметры);
					Параметры.Вставить("ПереходныйПериод", Ложь);
				КонецЕсли;
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыНМА(СтруктураШапкиДокумента, ТекНМА, СтрокаРезультата, СуммаОплаты, ДатаВвода, Параметры);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			ОплаченнаяСтоимость = ОплаченнаяСтоимость + СтрокаРезультата.СуммаОплатыОборот;
			ЧастьОстаточнойСтоимости = ОстаточнаяСтоимость*(ОплаченнаяСтоимость/ПервоначальнаяСтоимостьУСН) - ОплаченнаяОстаточнаяСтоимость;
			ОплаченнаяОстаточнаяСтоимость = ОплаченнаяОстаточнаяСтоимость + ЧастьОстаточнойСтоимости;
			
			Если ОплаченнаяОстаточнаяСтоимость > ОстаточнаяСтоимость Тогда
				Превышение = ОплаченнаяОстаточнаяСтоимость - ОстаточнаяСтоимость;
				ОплаченнаяОстаточнаяСтоимость=ОплаченнаяОстаточнаяСтоимость - превышение;
				ЧастьОстаточнойСтоимости=ЧастьОстаточнойСтоимости - Превышение;
				ТекстСообщения = "По "+ Строка(ТекНМА) + " "+СтрокаРезультата.ДатаОплаты+" Оплата превысила первоначальную стоимость! Проверьте документы оплаты НМА !";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
			КонецЕсли;
			
			Если ЧастьОстаточнойСтоимости > 0 Тогда
				ФормированиеРасходовНМА(СтруктураШапкиДокумента, ТекНМА, ЧастьОстаточнойСтоимости, СтрокаРезультата, ДатаВвода);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	мКУДиР.Записать(Ложь);
	
КонецПроцедуры

//Распределение расходов по видам деятельности

Процедура РаспределениеРасходовЕНВДУСН(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.РаспределениеРасходовЕНВДУСН ИЛИ мПредприниматель Тогда
		Возврат;
	КонецЕсли;
	Параметры = Новый Структура("Ссылка, Объект, Организация, Дата", Ссылка, ЭтотОбъект, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	НалоговыйУчетУСН.ОтразитьВУСН(Ссылка, "РаспределениеЕНВД",Параметры,2);
	
	
КонецПроцедуры

Процедура СписаниеДопРасходовУСН(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.СписаниеДопРасходовУСН ИЛИ мПредприниматель Тогда
		Возврат;
	КонецЕсли;
	Параметры = Новый Структура("Ссылка, Объект, Организация, Дата", Ссылка, ЭтотОбъект, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	НалоговыйУчетУСН.ОтразитьВУСН(Ссылка, "СписаниеТЗР",Параметры,1);
	
	
КонецПроцедуры

// ПБУ 18
Процедура СформироватьПроводкиПоНалогуНаПрибыль(СуммаНалога, КоррСчет, Субконто = Неопределено, ПоДебету, СодержаниеПроводки, СуммаЕНВД = Неопределено, Субконто68_4 = Неопределено, Субконто68_4_2 = Неопределено)
	
	Счет99 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
	
	Если Субконто68_4 <> Неопределено Тогда
		
		Счет68_04 = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	Иначе
		Счет68_04 = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	КонецЕсли;
	
	Счет68_04Дебет  = Счет68_04;
	Счет68_04Кредит = Счет68_04;
	
	// Переход к учету без суммовых разниц в БУ (в соответствие с приказами Минфина РФ №№ 154н, 155н, 156н от 27.11.2006)
	// остатки по ОНО и ОНА вносятся в корреспонденции со счетом 84
	Если Субконто = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВУЕ И НачалоДня(Дата) ='20061231' Тогда
	     Счет68_04Дебет  = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
	     Счет68_04Кредит  = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
	КонецЕсли;
	
	Если Не СуммаЕНВД = Неопределено И ОдногоЗнака(СуммаНалога, СуммаЕНВД) Тогда
		Если БольшеПоМодулюИлиРавно(СуммаНалога, СуммаЕНВД) Тогда
			СуммаНалога = СуммаНалога - СуммаЕНВД;
			Сумма99 = СуммаЕНВД;
			СуммаЕНВД = 0;
		Иначе
			Сумма99 = СуммаНалога;
			СуммаНалога = 0;
			СуммаЕНВД = СуммаЕНВД - Сумма99;
		КонецЕсли;
	Иначе
		Сумма99 = 0;
	КонецЕсли;
			
	
	Если СуммаНалога <> 0 Тогда
		
		Проводка = мПроводки.Добавить();
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Сумма        = СуммаНалога;
		Проводка.Содержание   = СодержаниеПроводки;
		
		Если ПоДебету = "Д" Тогда
			Проводка.СчетДт = КоррСчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто);
			Проводка.СчетКт = Счет68_04Кредит;
			Если Субконто68_4 <> Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Субконто68_4);
		        БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Субконто68_4_2);
			КонецЕсли;
		Иначе
			Проводка.СчетДт = Счет68_04Дебет;
			Если Субконто68_4 <> Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.Счетдт, Проводка.СубконтоДт, 2, Субконто68_4);
		        БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Субконто68_4_2);
			КонецЕсли;
			Проводка.СчетКт = КоррСчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто);
		КонецЕсли
	КонецЕсли;
	
	Если Сумма99 <> 0 Тогда
		
		Проводка = мПроводки.Добавить();
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Сумма        = Сумма99;
		Проводка.Содержание   = СодержаниеПроводки;
		
		Если ПоДебету = "Д" Тогда
			Проводка.СчетДт = КоррСчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто);
		    БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Субконто68_4_2);
			Проводка.СчетКт = Счет99;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
		Иначе
			Проводка.СчетДт = Счет99;
			Проводка.СчетКт = КоррСчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
		    БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Субконто68_4_2);
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры // СформироватьПроводкиПоНалогуНаПрибыль()

// Распределение налога на прибыль по бюджетам
//
Процедура СформироватьПроводкиПоНалогуНаПрибыльРасчетыСБюджетом(СтруктураШапкиДокумента,СтруктураДопПараметров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",   мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонГраница);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("Счет",           ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт Как СуммаНалога
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет = &Счет, , Организация = &Организация, , ) КАК ХозрасчетныйОбороты";
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(мНачДата, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		ЗначенияБлокировки.Вставить("Счет",        ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль); 
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
	КонецЕсли;

	Результат = Запрос.Выполнить();
	ТаблицаРезультат = Результат.Выгрузить();
	СуммаНалога   = ТаблицаРезультат.Итог("СуммаНалога");
	
	СтавкаФБ = 0;
	СтавкаРФ = 0;
	СтавкаМестный = 0;
	НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента,  СтавкаФБ, СтавкаРФ, СтавкаМестный);
	ВсеСтавки = СтавкаФБ + СтавкаРФ + СтавкаМестный;
	Счет68_04Дебет  = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	Счет68_04Кредит = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	
	Если ВсеСтавки <> 0 И СуммаНалога <> 0 Тогда
	Если СтавкаФБ <> 0  Тогда
		Проводка = мПроводки.Добавить();
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Сумма        = СуммаНалога * СтавкаФБ / ВсеСтавки;
		Проводка.Содержание   = "Налог на прибыль";
		Проводка.СчетДт = Счет68_04Дебет;
		Проводка.СчетКт = Счет68_04Кредит;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Перечисления.УровниБюджетов.ФедеральныйБюджет);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.ОРганизация.РегистрацияВИФНС);
	КонецЕсли;
	Если СтавкаРФ <> 0 Тогда
		
		Для Каждого Строка ИЗ СтруктураДопПараметров.ЗаписьДолиБазыНалогаНаПрибыль Цикл
			Если  Строка.ДоляНалоговойБАзы = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		Проводка = мПроводки.Добавить();
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Сумма        = Строка.ДоляНалоговойБАзы * СуммаНалога * СтавкаРФ / ВсеСтавки;
		Проводка.Содержание   = "Налог на прибыль";
		Проводка.СчетДт = Счет68_04Дебет;
		Проводка.СчетКт = Счет68_04Кредит;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Перечисления.УровниБюджетов.РегиональныйБюджет);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Строка.РегистрацияВИФНС);
		
	КонецЦикла;
	КонецЕсли;
	Если СтавкаМестный <> 0 Тогда
		Проводка = мПроводки.Добавить();
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Сумма        = СуммаНалога * СтавкаМестный / ВсеСтавки;
		Проводка.Содержание   = "Налог на прибыль";
		Проводка.СчетДт = Счет68_04Дебет;
		Проводка.СчетКт = Счет68_04Кредит;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Перечисления.УровниБюджетов.МестныйБюджет);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.ОРганизация.РегистрацияВИФНС);
	КонецЕсли;
	КонецЕсли;

	мПроводки.Записать(Ложь);
КонецПроцедуры // СформироватьПроводкиПоНалогуНаПрибыль()

// Рассчитываются постоянные налоговые обязательства (активы) и отражаются на
// счетах бухгалтерского учета.
//
Процедура 	РасчетПостоянныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок)
	Если НЕ СтруктураШапкиДокумента.РасчетПНОиПНА Тогда
		Возврат;
	КонецЕсли;
	
	// Отложенный налоговый актив (обязательство) рассчитывается следующим образом:
	// Определяется сумма постоянных разниц, отраженных на счете Н99.01, и
	// умножается на ставку налога на прибыль.
	
	
	мСтавкаНалогаНаПрибыль = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачГраница);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонГраница);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.СписокОП);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.Продажи);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("Счет",         Массив);
	Запрос.УстановитьПараметр("КорСчет",      ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиБезНалогаНаПрибыль);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаПРОборотДт) КАК СуммаОборотДт,
	|	СУММА(ХозрасчетныйОбороты.СуммаПРОборотКт) КАК СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&Счет), , Организация В ИЕРАРХИИ (&Организация), Не КорСчет В ИЕРАРХИИ (&КорСчет), ) КАК ХозрасчетныйОбороты
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты
	|";
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(мНачДата, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		
		ЗапросПоСчетам = Новый Запрос;
		
		ТекстЗапросаПоСчетам =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет)";
		
		ЗапросПоСчетам.УстановитьПараметр("Счет",      Массив);
		ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
		МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		Для каждого БлокируемыйСчет Из МассивСчетов Цикл
		
			ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		КонецЦикла;
		
	КонецЕсли;

	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	СуммаПостоянныхРазниц = ТаблицаРезультат.Итог("СуммаОборотКт") - ТаблицаРезультат.Итог("СуммаОборотДт");
	
	СуммаПНА = Окр(ТаблицаРезультат.Итог("СуммаОборотКт") * мСтавкаНалогаНаПрибыль, 2);
	СуммаПНО = Окр(ТаблицаРезультат.Итог("СуммаОборотДт") * мСтавкаНалогаНаПрибыль, 2);
	Счет99_02_3  = ПланыСчетов.Хозрасчетный.ПостоянноеНалоговоеОбязательство;
	
	Если СуммаПНО <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаПНО, Счет99_02_3,, "Д", "Постоянное налоговое обязательство");
	КонецЕсли;
	
	Если СуммаПНА <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаПНА, Счет99_02_3,, "К", "Постоянный налоговый актив");
	КонецЕсли;
	
	
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры  // РасчетПостоянныхРазниц

// Упорядочиваются данный для передачи их в процедуру,
// которая формирует записи по счету 68.4.
//
Процедура ОтражениеОНАиОНО(ВидАктивовОбязательств,  ВременныеРазницы)
	
	Счет09 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
	Счет77 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства;
	СуммаДт09 = ВременныеРазницы.СуммаДт09;
	СуммаКт09 = ВременныеРазницы.СуммаКт09;
	СуммаДт77 = ВременныеРазницы.СуммаДт77;
	СуммаКт77 = ВременныеРазницы.СуммаКт77;
	СуммаЕНВД = ВременныеРазницы.СуммаЕНВД;
	
	// Образование отложенного налогового обязательства
	Если СуммаДт09 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаДт09, Счет09, ВидАктивовОбязательств, "Д", "Признание отложенного налогового актива", СуммаЕНВД);
	КонецЕсли;
	
	// Погашение отложенного налогового обязательства
	Если СуммаКт09 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаКт09, Счет09, ВидАктивовОбязательств, "К", "Погашение отложенного налогового актива", СуммаЕНВД);
	КонецЕсли;
	
	// Образование отложенного налогового обязательства
	Если СуммаКт77 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаКт77, Счет77, ВидАктивовОбязательств, "К", "Признание отложенного налогового обязательства", СуммаЕНВД);
	КонецЕсли;
	
	// Погашение отложенного налогового обязательства
	Если СуммаДт77 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаДт77, Счет77, ВидАктивовОбязательств, "Д", "Погашение отложенного налогового обязательства", СуммаЕНВД);
	КонецЕсли;
	
КонецПроцедуры

Функция ОдногоЗнака(Число1, Число2) 
	Возврат (Число1 * Число2 >= 0);
КонецФункции

Функция  БольшеПоМодулюИлиРавно(Число1, Число2)
	МодульЧисло1 = ?(Число1 > 0, Число1, - Число1);
	МодульЧисло2 = ?(Число2 > 0, Число2, - Число2);
	
	Возврат (МодульЧисло1 - МодульЧисло2 >= 0);
КонецФункции

// Рассчитывается отложенные налоговый актив по убыткам текущего
// периода и отражается на счете 09.
//
Процедура РассчитатьОНАПоУбыткамТекущегоПериода(СтрокаВидАктиваОбязательства, СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",мНачГраница);
	Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.СписокОП);
	Запрос.УстановитьПараметр("Счет99_01",   ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиБезНалогаНаПрибыль);
	Запрос.УстановитьПараметр("Счет09",      ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	Запрос.УстановитьПараметр("Субконто1",   Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода);
	Запрос.УстановитьПараметр("Субконто2",   Перечисления.ВидыАктивовИОбязательств.РасходыБудущихПериодов);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК УбытокНУ,
	               |	ХозрасчетныйОстатки.СуммаОстатокДт КАК УбытокБУ,
	               |	0 КАК СуммаОстаток09
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяца, Счет В ИЕРАРХИИ (&Счет99_01), , Организация В ИЕРАРХИИ (&Организация)) КАК ХозрасчетныйОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	0,
	               |	0,
	               |	ХозрасчетныйОстатки.СуммаОстатокДт
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяца, Счет В ИЕРАРХИИ (&Счет09), , Организация В ИЕРАРХИИ ( &Организация)) КАК ХозрасчетныйОстатки
	               |ГДЕ
	               |	ХозрасчетныйОстатки.Субконто1 = &Субконто1
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	0,
	               |	0,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	               |			&НачалоМесяца,
	               |			&КонецМесяца,
	               |			Месяц,
	               |			СчетДт В ИЕРАРХИИ (&Счет09),
	               |			,
	               |			СчетКт В ИЕРАРХИИ (&Счет09),
	               |			,
	               |			Организация В ИЕРАРХИИ (&Организация)
	               |				И СубконтоДт1 = &Субконто2
	               |				И СубконтоКт1 = &Субконто1) КАК ХозрасчетныйОборотыДтКт";
				   
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		
		ЗапросПоСчетам = Новый Запрос;
		
		ТекстЗапросаПоСчетам =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет99_01)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет09)";
		
		ЗапросПоСчетам.УстановитьПараметр("Счет99_01",   ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиБезНалогаНаПрибыль);
		ЗапросПоСчетам.УстановитьПараметр("Счет09",      ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
		ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
		МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		Для каждого БлокируемыйСчет Из МассивСчетов Цикл
		
			ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультат     = Результат.Выгрузить();
	Сумма    = ТаблицаРезультат.Итог("УбытокНУ") * мСтавкаНалогаНаПрибыль - ТаблицаРезультат.Итог("СуммаОстаток09");
	УбытокБУ = ТаблицаРезультат.Итог("УбытокБУ");
	
	СуммаДт77 = 0;
	СуммаКт77 = 0;
	СуммаДт09 = 0;
	СуммаКт09 = 0;
	
	Если Сумма > 0 Тогда
		СуммаДт09 = Сумма;
	Иначе
		СуммаКт09 =- Сумма;
	КонецЕсли;
	
	Если Сумма <> 0 Тогда
		ОтражениеОНАиОНО(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств, Новый Структура("СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД", СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, 0));
	КонецЕсли;
	
КонецПроцедуры // ВременныеРазницыПоУбыткамТекущегоПериода()

// Рассчитываются отложенные налоговые обязательства и
// отложенные налоговые активы по конкретному виду активов
// (обязательств).
//
// Параметры:
//		СтрокаВидАктиваОбязательства - строка таблицы в каторой задано соответствие
//			вида актива (обязательства) и счетов налогового учета, на которых
//			отражаются разницы по этому виду активов.
//
Процедура РассчитатьОНО_ОНА(СтрокаВидАктиваОбязательства, СтруктураШапкиДокумента)
	
	// Порядок расчета:
	// 1. Определяется остаток налогооблагаемых и вычитаемых разниц по виду активов в целом.
	// 2. Исходя из остатка разниц рассчитывается остаток отложенных налоговых активов
	//    и обязательств, который должен быть отражен на счетах 09 и 77 на конец месяца.
	// 3. Определяется сумма отложенных налоговых активов и обязательств, которая отражена
	//    на счетах 09 и 77 на конец месяца.
	// 4. Счета 09 и 77 корректируются на сумму разниц того что отражено на счете и того,
	//    что должно быть по результатам расчета.
	
	// Получить временные разницы, отраженные на плане счетов
	// по данному виду ОНА (ОНО), распределив их на вычитаемые и налогооблагемые разницы.
	ОборотыВременныхРазниц = НалоговыйУчет.ОборотыВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства, Новый Структура("НачГраница,КонГраница,Организация, КоэффициентЕНВД",мНачГраница,мКонГраница,Организация, КоэффициентЕНВД),СтруктураШапкиДокумента);
	
	
	СуммаДт09 = Окр(ОборотыВременныхРазниц.Итог("СуммаДт09") * мСтавкаНалогаНаПрибыль, 2);
	СуммаКт09 = Окр(ОборотыВременныхРазниц.ИТог("СуммаКт09") * мСтавкаНалогаНаПрибыль, 2);
	СуммаДт77 = Окр(ОборотыВременныхРазниц.Итог("СуммаДт77") * мСтавкаНалогаНаПрибыль, 2);
	СуммаКт77 = Окр(ОборотыВременныхРазниц.ИТог("СуммаКт77") * мСтавкаНалогаНаПрибыль, 2);
	СуммаЕНВД = Окр(ОборотыВременныхРазниц.ИТог("СуммаЕНВД") * мСтавкаНалогаНаПрибыль, 2);
	
	ОтражениеОНАиОНО(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств, Новый Структура("СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД", СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД));
	
КонецПроцедуры


// Рассчитываются отложенные налоговые обязательства и
// отложенные налоговые активы.
// 

Процедура 	РасчетВременныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок)
	Если НЕ СтруктураШапкиДокумента.РасчетОНОиОНА Тогда
		Возврат;
	КонецЕсли;	
	
	мСтавкаНалогаНаПрибыль = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента);
	
	// Формируется таблица в которой задано соответствие видов 
	// активов (обязательств) счетам налогового учета.
	ТаблицаВидовАктивовИОбязательств = НалоговыйУчет.ПолучитьТаблицуВидовАктивовИОбязательств();
	КоэффициентЕНВД = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, мКонДата, мНачДата, "НУ");
	
	// Рассчитываем отложенные налоговые обязательства и активы и отражаем их.
	Для каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательств Цикл
		
		Если СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода Тогда
			РассчитатьОНАПоУбыткамТекущегоПериода(СтрокаВидАктиваОбязательства,СтруктураШапкиДокумента);
		Иначе
			РассчитатьОНО_ОНА(СтрокаВидАктиваОбязательства,СтруктураШапкиДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
	
КонецПроцедуры  // РасчетПостоянныхРазниц

Процедура РасчетДолиБазыНалогаНаПрибыль(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ)
	
	Если НЕ СтруктураШапкиДокумента.РасчетНалогаНаПрибыль Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",   мНачГода);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонГраница);
	Запрос.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.СписокОП);
	Запрос.УстановитьПараметр("ПрибылиИУбытки", Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
	Запрос.УстановитьПараметр("СубконтоПрибылиИУбытки", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки);
	Запрос.УстановитьПараметр("СубконтоСтатьяЗатрат",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("Счет90",        ПланыСчетов.Хозрасчетный.Продажи);
	Запрос.УстановитьПараметр("Счет70",        ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	Запрос.УстановитьПараметр("ОплатаТруда",    Перечисления.ВидыРасходовНУ.ОплатаТруда);
	Запрос.УстановитьПараметр("Пусто", Справочники.РегистрацияВИФНС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	
	Запрос.УстановитьПараметр("СчетАморизируемогоИмущества", Счета);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФилиалыГруппа.ИФНС КАК РегистрацияВИФНС,
	               |	ЕСТЬNULL(ФилиалыГруппа.РасходыПоОплатеТруда, 0) КАК РасходыПоОплатеТруда,
	               |	ЕСТЬNULL(ФилиалыГруппа.АмортизируемоеИмущество, 0) КАК СтоимостьАмортизируемогоИмущества
	               |ИЗ
	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		Филиалы.РасходыПоОплатеТруда КАК РасходыПоОплатеТруда,
	               |		Филиалы.АмортизируемоеИмущество КАК АмортизируемоеИмущество,
	               |		ФилиалыНП.ИФНС КАК ИФНС
	               |	ИЗ
	               |		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ХозрасчетныйОбороты.Организация КАК Организация,
	               |			ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	               |			ВЫБОР
	               |				КОГДА ХозрасчетныйОбороты.Подразделение.РегистрацияВИФНС = NULL
	               |						ИЛИ ХозрасчетныйОбороты.Подразделение.РегистрацияВИФНС = НЕОПРЕДЕЛЕНО
	               |						ИЛИ ХозрасчетныйОбороты.Подразделение.РегистрацияВИФНС = &Пусто
	               |						ИЛИ ХозрасчетныйОбороты.Подразделение = &ПустоеПодразделение
	               |					ТОГДА ХозрасчетныйОбороты.Организация.РегистрацияВИФНС
	               |				ИНАЧЕ ХозрасчетныйОбороты.Подразделение.РегистрацияВИФНС
	               |			КОНЕЦ КАК ИФНС
	               |		ИЗ
	               |			РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СЧЕТ90), , Организация В ИЕРАРХИИ (&Организация), , ) КАК ХозрасчетныйОбороты
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ХозрасчетныйОбороты.Организация,
	               |			ХозрасчетныйОбороты.Подразделение,
	               |			ВЫБОР
	               |				КОГДА ХозрасчетныйОбороты.Подразделение.РегистрацияВИФНС = NULL
	               |						ИЛИ ХозрасчетныйОбороты.Подразделение.РегистрацияВИФНС = НЕОПРЕДЕЛЕНО
	               |						ИЛИ ХозрасчетныйОбороты.Подразделение.РегистрацияВИФНС = &Пусто
	               |						ИЛИ ХозрасчетныйОбороты.Подразделение = &ПустоеПодразделение
	               |					ТОГДА ХозрасчетныйОбороты.Организация.РегистрацияВИФНС
	               |				ИНАЧЕ ХозрасчетныйОбороты.Подразделение.РегистрацияВИФНС
	               |			КОНЕЦ) КАК ФилиалыНП
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				ОплатаТруда.Организация КАК Организация,
	               |				ОплатаТруда.Подразделение КАК Подразделение,
	               |				ВЫБОР
	               |					КОГДА ОплатаТруда.Подразделение.РегистрацияВИФНС = NULL
	               |							ИЛИ ОплатаТруда.Подразделение.РегистрацияВИФНС = НЕОПРЕДЕЛЕНО
	               |							ИЛИ ОплатаТруда.Подразделение.РегистрацияВИФНС = &Пусто
	               |							ИЛИ ОплатаТруда.Подразделение = &ПустоеПодразделение
	               |						ТОГДА ОплатаТруда.Организация.РегистрацияВИФНС
	               |					ИНАЧЕ ОплатаТруда.Подразделение.РегистрацияВИФНС
	               |				КОНЕЦ КАК ИФНС,
	               |				СУММА(ОплатаТруда.СуммаНУОборотДт) КАК РасходыПоОплатеТруда,
	               |				0 КАК АмортизируемоеИмущество
	               |			ИЗ
	               |				РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |						&НачалоМесяца,
	               |						&КонецМесяца,
	               |						,
	               |						,
	               |						&СубконтоСтатьяЗатрат,
	               |						Организация В ИЕРАРХИИ (&Организация)
	               |							И Субконто1.ВидРасходовНУ = &ОплатаТруда,
	               |						КорСчет В ИЕРАРХИИ (&Счет70),
	               |						) КАК ОплатаТруда
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				ОплатаТруда.Организация,
	               |				ОплатаТруда.Подразделение,
	               |				ВЫБОР
	               |					КОГДА ОплатаТруда.Подразделение.РегистрацияВИФНС = NULL
	               |							ИЛИ ОплатаТруда.Подразделение.РегистрацияВИФНС = НЕОПРЕДЕЛЕНО
	               |							ИЛИ ОплатаТруда.Подразделение.РегистрацияВИФНС = &Пусто
	               |							ИЛИ ОплатаТруда.Подразделение = &ПустоеПодразделение
	               |						ТОГДА ОплатаТруда.Организация.РегистрацияВИФНС
	               |					ИНАЧЕ ОплатаТруда.Подразделение.РегистрацияВИФНС
	               |				КОНЕЦ
	               |			
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |			
	               |			ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				АморизируемоеИмущество.Организация,
	               |				АморизируемоеИмущество.Подразделение,
	               |				ВЫБОР
	               |					КОГДА АморизируемоеИмущество.Подразделение.РегистрацияВИФНС = NULL
	               |							ИЛИ АморизируемоеИмущество.Подразделение.РегистрацияВИФНС = НЕОПРЕДЕЛЕНО
	               |							ИЛИ АморизируемоеИмущество.Подразделение.РегистрацияВИФНС = &Пусто
	               |							ИЛИ АморизируемоеИмущество.Подразделение = &ПустоеПодразделение
	               |						ТОГДА АморизируемоеИмущество.Организация.РегистрацияВИФНС
	               |					ИНАЧЕ АморизируемоеИмущество.Подразделение.РегистрацияВИФНС
	               |				КОНЕЦ,
	               |				0,
	               |				СУММА(АморизируемоеИмущество.СуммаНУОстаток)
	               |			ИЗ
	               |				РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяца, Счет В ИЕРАРХИИ (&СчетАморизируемогоИмущества), , Организация В ИЕРАРХИИ (&Организация)) КАК АморизируемоеИмущество
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				АморизируемоеИмущество.Организация,
	               |				АморизируемоеИмущество.Подразделение,
	               |				ВЫБОР
	               |					КОГДА АморизируемоеИмущество.Подразделение.РегистрацияВИФНС = NULL
	               |							ИЛИ АморизируемоеИмущество.Подразделение.РегистрацияВИФНС = НЕОПРЕДЕЛЕНО
	               |							ИЛИ АморизируемоеИмущество.Подразделение.РегистрацияВИФНС = &Пусто
	               |							ИЛИ АморизируемоеИмущество.Подразделение = &ПустоеПодразделение
	               |						ТОГДА АморизируемоеИмущество.Организация.РегистрацияВИФНС
	               |					ИНАЧЕ АморизируемоеИмущество.Подразделение.РегистрацияВИФНС
	               |				КОНЕЦ) КАК Филиалы
	               |			ПО ФилиалыНП.ИФНС = Филиалы.ИФНС) КАК ФилиалыГруппа
	               |ГДЕ
	               |	(ФилиалыГруппа.РасходыПоОплатеТруда <> 0
	               |			ИЛИ ФилиалыГруппа.АмортизируемоеИмущество <> 0)";
	
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультат = Результат.Выгрузить();
	ТаблицаРезультат.Свернуть("РегистрацияВИФНС","РасходыПоОплатеТруда,СтоимостьАмортизируемогоИмущества");
	ТаблицаРезультат.Колонки.Добавить("Организация");
	ТаблицаРезультат.Колонки.Добавить("ПериодРасчета");
	ТаблицаРезультат.Колонки.Добавить("Активность");
	ТаблицаРезультат.Колонки.Добавить("Регистратор");
	ТаблицаРезультат.Колонки.Добавить("ДоляНалоговойБазы");
	ТаблицаРезультат.ЗаполнитьЗначения(0,"ДоляНалоговойБазы");
	ВсегоАмортизация = ТаблицаРезультат.Итог("СтоимостьАмортизируемогоИмущества");
	ВсегоОплатаТруда = ТаблицаРезультат.Итог("РасходыПоОплатеТруда");
	Если  ВсегоОплатаТруда = 0 И ВсегоАмортизация = 0 Тогда
		ТаблицаРезультат.Очистить();
	Иначе
		Для Каждого Строка Из ТаблицаРезультат Цикл
			Если Строка.РегистрацияВИФНС = Null Тогда
				 Продолжить;
			 КонецЕсли;
			Если  ВсегоОплатаТруда = 0 И ВсегоАмортизация = 0 Тогда
				 Продолжить;
			 КонецЕсли;
			
			Если  ВсегоОплатаТруда = 0  Тогда
				Строка.ДоляНалоговойБазы = (Строка.СтоимостьАмортизируемогоИмущества / ВсегоАмортизация) / 1;
			ИначеЕсли ВсегоАмортизация = 0  Тогда
				Строка.ДоляНалоговойБазы = (Строка.РасходыПоОплатеТруда / ВсегоОплатаТруда ) / 1;
			Иначе
				
				Строка.ДоляНалоговойБазы = (Строка.РасходыПоОплатеТруда / ВсегоОплатаТруда + Строка.СтоимостьАмортизируемогоИмущества / ВсегоАмортизация) / 2;
			КонецЕсли;	
		КонецЦикла;
	
КонецЕсли;	
	СтруктураДопПараметров.Вставить("ЗаписьДолиБазыНалогаНаПрибыль", ТаблицаРезультат);
	
КонецПроцедуры

Процедура 	РасчетНалогаНаПрибыль(СтруктураШапкиДокумента,СтруктураДопПараметров, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.РасчетНалогаНаПрибыль Тогда
		Возврат;
	КонецЕсли;
	
	мСтавкаНалогаНаПрибыль = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента);
	
	// Условный расход (условный доход) по налогу на прибыль
	// рассчитывается следующим образом: определяется сумма
	// бухгалтерской прибыли (убытка) и умножается на ставку
	// налога на прибыль.
	
	// Виды прибылей и убытков, которые учитываются при расчете
	// условного расхода (условного дохода) по налогу на прибыль.
	ПрибылиИУбытки = Новый Массив;
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",   мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонГраница);
	Запрос.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.СписокОП);
	Запрос.УстановитьПараметр("Счет",           ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД);
	Запрос.УстановитьПараметр("ПрибылиИУбытки", ПрибылиИУбытки);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет = &Счет, , Организация В ИЕРАРХИИ (&Организация), , ) КАК ХозрасчетныйОбороты
	|
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1 В(&ПрибылиИУбытки)
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты	
	|";
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(мНачДата, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		ЗначенияБлокировки.Вставить("Счет",        ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД); 
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультат = Результат.Выгрузить();
	
	СуммаДоходаРасхода   = ТаблицаРезультат.Итог("СуммаОборотКт") - ТаблицаРезультат.Итог("СуммаОборотДт");
	СуммаУсловногоНалога = Окр(СуммаДоходаРасхода * НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента), 2);
	
	Если СуммаУсловногоНалога > 0 Тогда
		Сч99_02_1 = ПланыСчетов.Хозрасчетный.УсловныйРасходПоНалогуНаПрибыль;
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаУсловногоНалога, Сч99_02_1,, "Д", "Условный расход по налогу на прибыль");
		
	Иначе
		Сч99_02_2 = ПланыСчетов.Хозрасчетный.УсловныйДоходПоНалогуНаПрибыль;
		СформироватьПроводкиПоНалогуНаПрибыль(-СуммаУсловногоНалога, Сч99_02_2,, "К", "Условный доход по налогу на прибыль");
	КонецЕсли;
	
	мПроводки.Записать(Ложь);
	
   СформироватьПроводкиПоНалогуНаПрибыльРасчетыСБюджетом(СтруктураШапкиДокумента,СтруктураДопПараметров);

КонецПроцедуры //РасчетНалогаНаПрибыль

Процедура 	РасчетНалогаНаПрибыльБезПоддержкиПБУ18(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок)
	
	// Если ПБУ18 не ведется, то условный доход считается по данным налогового учета
	
	Если НЕ СтруктураШапкиДокумента.РасчетНалогаНаПрибыль Тогда
		Возврат;
	КонецЕсли;
	
	мСтавкаНалогаНаПрибыль = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента);
	
	ПрибылиИУбытки = Новый Массив;
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоГода",     мНачГода);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонГраница);
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяца", КонецМесяца(НачалоМесяца(мКонДата) - 1));
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("Счет",           ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД);
	Запрос.УстановитьПараметр("Счет68",         ПланыСчетов.Хозрасчетный.РасчетыСБюджетом);
	Запрос.УстановитьПараметр("ПрибылиИУбытки", ПрибылиИУбытки);
	Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	-ХозрасчетныйОбороты.СуммаНУОборот КАК Прибыль,
	               |	0 КАК НалогНаПрибыль
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			&НачалоГода,
	               |			&КонецМесяца,
	               |			,
	               |			Счет = &Счет,
	               |			,
	               |			Организация = &Организация
	               |				И Субконто1 В (&ПрибылиИУбытки),
	               |			,
	               |			) КАК ХозрасчетныйОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	0,
	               |	ХозрасчетныйОбороты.СуммаОборотКт
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			&НачалоГода,
	               |			&КонецПредыдущегоМесяца,
	               |			,
	               |			Счет = &Счет68,
	               |			,
	               |			Организация = &Организация
	               |				И Субконто1 В (&ВидыПлатежейВГосБюджет),
	               |			,
	               |			) КАК ХозрасчетныйОбороты
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты";
	
				   
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(мНачДата, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		ЗначенияБлокировки.Вставить("Счет",        ПланыСчетов.Хозрасчетный.РасчетыСБюджетом);
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(мНачДата, мКонДата)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		ЗначенияБлокировки.Вставить("Счет",        ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиБезНалогаНаПрибыль);
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);

	КонецЕсли;

	Результат = Запрос.Выполнить();
	
	ТаблицаРезультат = Результат.Выгрузить();
	
	СуммаДоходаРасхода   = ТаблицаРезультат.Итог("Прибыль");
	СуммаНалогаНаПрибыльРанееНачисленного   = ТаблицаРезультат.Итог("НалогНаПрибыль");
	СтавкаФБ = 0;
	СтавкаРФ = 0;
	СтавкаМестный = 0;
	СуммаНалога = Окр(СуммаДоходаРасхода * НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента,  СтавкаФБ, СтавкаРФ, СтавкаМестный), 2) - СуммаНалогаНаПрибыльРанееНачисленного;
	СуммаНалога = ?(СуммаНалога > 0, СуммаНалога, ?(- СуммаНалога > СуммаНалогаНаПрибыльРанееНачисленного, - СуммаНалогаНаПрибыльРанееНачисленного, СуммаНалога));
	ВсеСтавки = СтавкаФБ + СтавкаРФ + СтавкаМестный;
	Сч99_01_1 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
	
	Если ВсеСтавки <> 0 И СуммаНалога <> 0 Тогда
	Если СтавкаФБ <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаНалога * СтавкаФБ / ВсеСтавки, Сч99_01_1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль, "Д", "Налог на прибыль", ,Перечисления.УровниБюджетов.ФедеральныйБюджет,СтруктураШапкиДокумента.Организация.РегистрацияВИФНС);
	КонецЕсли;
	Если СтавкаРФ <> 0 Тогда
		Если СтруктураДопПараметров.ЗаписьДолиБазыНалогаНаПрибыль.Количество() = 0 Тогда
			СформироватьПроводкиПоНалогуНаПрибыль(СуммаНалога * СтавкаРФ / ВсеСтавки, Сч99_01_1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль, "Д", "Налог на прибыль", ,Перечисления.УровниБюджетов.РегиональныйБюджет,СтруктураШапкиДокумента.Организация.РегистрацияВИФНС);
		Иначе
			Для Каждого Строка ИЗ СтруктураДопПараметров.ЗаписьДолиБазыНалогаНаПрибыль Цикл
				Если  Строка.ДоляНалоговойБАзы = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СформироватьПроводкиПоНалогуНаПрибыль(Строка.ДоляНалоговойБАзы * СуммаНалога * СтавкаРФ / ВсеСтавки, Сч99_01_1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль, "Д", "Налог на прибыль", ,Перечисления.УровниБюджетов.РегиональныйБюджет,Строка.РегистрацияВИФНС);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СтавкаМестный <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаНалога * СтавкаМестный / ВсеСтавки, Сч99_01_1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль, "Д", "Налог на прибыль", ,Перечисления.УровниБюджетов.МестныйБюджет,СтруктураШапкиДокумента.Организация.РегистрацияВИФНС);
	КонецЕсли;
	КонецЕсли;

	мПроводки.Записать(Ложь);	
КонецПроцедуры //РасчетНалогаНаПрибыль

Процедура ПроведениеРеформацииБаланса(СтруктураШапкиДокумента, Отказ, Заголовок)  
	
	Если СтруктураШапкиДокумента.РеформацияБаланса Тогда
		
		// Закрытие 99 счетов в БУ и реформация баланса
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Счет",        ПланыСчетов.Хозрасчетный.ПрибылиИУбытки);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаДт,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК СуммаКт,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокДт, 0) КАК СуммаДтНУ,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокКт, 0) КАК СуммаКтНУ,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокДт, 0) КАК СуммаДтПР,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокКт, 0) КАК СуммаКтПР,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокДт, 0) КАК СуммаДтВР,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокКт, 0) КАК СуммаКтВР,
		|	ХозрасчетныйОстатки.Подразделение
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки";
		
		Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
			
			СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
			
			ЗначенияБлокировки = Новый Соответствие;
			ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, мКонДата)); 
			ЗначенияБлокировки.Вставить("Организация", Организация); 
			
			ЗапросПоСчетам = Новый Запрос;
			
			ТекстЗапросаПоСчетам =
			"ВЫБРАТЬ
			|	Хозрасчетный.Ссылка КАК Счет
			|ИЗ
			|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
			|ГДЕ
			|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет)";
			
			ЗапросПоСчетам.УстановитьПараметр("Счет",   ПланыСчетов.Хозрасчетный.ПрибылиИУбытки);
			ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
			МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
			
			Для каждого БлокируемыйСчет Из МассивСчетов Цикл
		    	
				ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
				ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
			
			КонецЦикла;
		
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		Прибыль = 0;
		ПрибыльНУ = 0;
		ПрибыльПР = 0;
		ПрибыльВР = 0;
		Пока Выборка.Следующий() Цикл
			СуммаСписания =  ?(Выборка.СуммаКт = Null, 0, Выборка.СуммаКт) - ?(Выборка.СуммаДт = Null, 0, Выборка.СуммаДт);
			Прибыль = Прибыль + СуммаСписания;
			Если НЕ мПрименениеУСН И НЕ мПредприниматель Тогда
				СуммаСписанияНУ =  ?(Выборка.СуммаКтНУ = Null, 0, Выборка.СуммаКтНУ) - ?(Выборка.СуммаДтНУ = Null, 0, Выборка.СуммаДтНУ);
				ПрибыльНУ = ПрибыльНУ + СуммаСписанияНУ;
				Если мПоддержкаПБУ18 Тогда
					СуммаСписанияПР =  ?(Выборка.СуммаКтПР = Null, 0, Выборка.СуммаКтПР) - ?(Выборка.СуммаДтПР = Null, 0, Выборка.СуммаДтПР);
					СуммаСписанияВР =  ?(Выборка.СуммаКтВр = Null, 0, Выборка.СуммаКтВР) - ?(Выборка.СуммаДтВР = Null, 0, Выборка.СуммаДтВР);
					ПрибыльПР = ПрибыльПР + СуммаСписанияПР;
					ПрибыльВР = ПрибыльВР + СуммаСписанияВР;
				КонецЕсли;
			КонецЕсли;
			
			
			Если Выборка.Счет = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД Тогда
				СуммаСписания = 0;
				Если НЕ мПрименениеУСН И НЕ мПредприниматель Тогда
					СуммаСписанияНУ = 0;
					Если мПоддержкаПБУ18 Тогда
						СуммаСписанияПР = 0;
						СуммаСписанияВР = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СуммаСписания = 0 И СуммаСписанияНУ = 0 И СуммаСписанияПР = 0 И СуммаСписанияВР = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СуммаСписания >= 0 Тогда
				
				Проводка = мПроводки.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт      = Выборка.Счет;
				Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
				Проводка.Сумма       = СуммаСписания;
				Проводка.Содержание  = "Реформация баланса";
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, Выборка.Подразделение, Выборка.Подразделение);
				
				СуммаНУ              = СуммаСписанияНУ;
				СуммаПР              = СуммаСписанияПР;
				СуммаВР              = СуммаСписанияВР;

                Проводка = мПроводки.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт      = Выборка.Счет;
				Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
				Проводка.Содержание  = "Реформация баланса";
				
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, мПоддержкаПБУ18); 
				
			КонецЕсли;
			
			Если СуммаСписания < 0 Тогда
				
				Проводка = мПроводки.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
				Проводка.СчетКт                    = Выборка.Счет;
				Проводка.Сумма                     = - СуммаСписания;
				Проводка.Содержание                = "Реформация баланса";
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, Выборка.Подразделение, Выборка.Подразделение);
				
				СуммаНУ                     = - СуммаСписанияНУ;
				СуммаПР                     = - СуммаСписанияПР;
				СуммаВР                     = - СуммаСписанияВР;
				
				Проводка = мПроводки.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
				Проводка.СчетКт                    = Выборка.Счет;
				Проводка.Содержание                = "Реформация баланса";
	            НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, мПоддержкаПБУ18); 
				
			КонецЕсли;
		КонецЦикла;
		
		Если Прибыль > 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
			Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
			Проводка.Сумма       = Прибыль;
			Проводка.Содержание  = "Реформация баланса";
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, Выборка.Подразделение, Выборка.Подразделение);
				
			СуммаНУ              = ПрибыльНУ;
			СуммаПР              = ПрибыльПР;
			СуммаВР              = ПрибыльВР;
			
			Проводка = мПроводки.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
			Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
			Проводка.Содержание  = "Реформация баланса";
	        НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, мПоддержкаПБУ18); 
		КонецЕсли;
		
		Если Прибыль < 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
			Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
			Проводка.Сумма       = - Прибыль;
			Проводка.Содержание   = "Реформация баланса";
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, Выборка.Подразделение, Выборка.Подразделение);
				
			СуммаНУ               = - ПрибыльНУ;
			СуммаПР               = - ПрибыльПР;
			СуммаВР               = - ПрибыльВР;
			
			Проводка = мПроводки.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
			Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
			Проводка.Содержание   = "Реформация баланса";
	        НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, мПоддержкаПБУ18); 
			
		КонецЕсли;
		
		// закрытие 90 счетов в БУ
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Счет",        ПланыСчетов.Хозрасчетный.Продажи);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаДт,
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаКт,
		|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СуммаДтНУ,
		|	ХозрасчетныйОстатки.СуммаНУОстатокКт КАК СуммаКтНУ,
		|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СуммаДтПР,
		|	ХозрасчетныйОстатки.СуммаПРОстатокКт КАК СуммаКтПР,
		|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СуммаДтВР,
		|	ХозрасчетныйОстатки.СуммаВРОстатокКт КАК СуммаКтВР,
		|	ХозрасчетныйОстатки.Подразделение
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки";
		
		Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
			
			СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
			
			ЗначенияБлокировки = Новый Соответствие;
			ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, мКонДата)); 
			ЗначенияБлокировки.Вставить("Организация", Организация); 
			
			ЗапросПоСчетам = Новый Запрос;
			
			ТекстЗапросаПоСчетам =
			"ВЫБРАТЬ
			|	Хозрасчетный.Ссылка КАК Счет
			|ИЗ
			|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
			|ГДЕ
			|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет)";
			
			ЗапросПоСчетам.УстановитьПараметр("Счет",   ПланыСчетов.Хозрасчетный.Продажи);
			ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
			МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
			
			Для каждого БлокируемыйСчет Из МассивСчетов Цикл
			
				ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
				ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
			
			КонецЦикла;
		
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СуммаСписания =  ?(Выборка.СуммаКт = Null, 0, Выборка.СуммаКт) - ?(Выборка.СуммаДт = Null, 0, Выборка.СуммаДт);


			СуммаСписанияНУ =  ?(Выборка.СуммаКтНУ = Null, 0, Выборка.СуммаКтНУ) - ?(Выборка.СуммаДтНУ = Null, 0, Выборка.СуммаДтНУ);

			СуммаСписанияПР =  ?(Выборка.СуммаКтПР = Null, 0, Выборка.СуммаКтПР) - ?(Выборка.СуммаДтПР = Null, 0, Выборка.СуммаДтПР);
			СуммаСписанияВР =  ?(Выборка.СуммаКтВР = Null, 0, Выборка.СуммаКтВР) - ?(Выборка.СуммаДтВР = Null, 0, Выборка.СуммаДтВР);


			
			Если Выборка.Счет = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж Тогда
				Продолжить;
			КонецЕсли;
			
			Если СуммаСписания = 0 И СуммаСписанияНУ = 0 И СуммаСписанияПР = 0 И СуммаСписанияВР = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СуммаСписания >= 0 Тогда
				
				Проводка = мПроводки.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = Выборка.Счет;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
				Проводка.Сумма                     = СуммаСписания;
				Проводка.Содержание         = "Закрытие года";
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, Выборка.Подразделение, Выборка.Подразделение);
				
				СуммаНУ                     = СуммаСписанияНУ;
				СуммаПР                     = СуммаСписанияПР;
				СуммаВР                     = СуммаСписанияВР;
				
				Проводка = мПроводки.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = Выборка.Счет;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;				Проводка.Содержание         = "Закрытие года";
	            НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, мПоддержкаПБУ18); 
				
			КонецЕсли;
			
			Если СуммаСписания < 0 Тогда
				
				Проводка = мПроводки.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
				Проводка.СчетКт                    = Выборка.Счет;
				Проводка.Сумма                     = - СуммаСписания;
				Проводка.Содержание         = "Закрытие года";
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, Выборка.Подразделение, Выборка.Подразделение);
				
				СуммаНУ                     = - СуммаСписанияНУ;
				СуммаПР                     = - СуммаСписанияПР;
				СуммаВР                     = - СуммаСписанияВР;
				
				Проводка = мПроводки.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
				Проводка.СчетКт                    = Выборка.Счет;
				Проводка.Содержание         = "Закрытие года";
	            НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, мПоддержкаПБУ18); 
			КонецЕсли;
		КонецЦикла;
		
		// закрытие 91 счетов в БУ
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Счет",        ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаДт,
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаКт,
		|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СуммаДтНУ,
		|	ХозрасчетныйОстатки.СуммаНУОстатокКт КАК СуммаКтНУ,
		|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СуммаДтПР,
		|	ХозрасчетныйОстатки.СуммаПРОстатокКт КАК СуммаКтПР,
		|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СуммаДтВР,
		|	ХозрасчетныйОстатки.СуммаВРОстатокКт КАК СуммаКтВР,
		|	ХозрасчетныйОстатки.Подразделение
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки";
		
		Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
			
			СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
			
			ЗначенияБлокировки = Новый Соответствие;
			ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, мКонДата)); 
			ЗначенияБлокировки.Вставить("Организация", Организация); 
			
			ЗапросПоСчетам = Новый Запрос;
			
			ТекстЗапросаПоСчетам =
			"ВЫБРАТЬ
			|	Хозрасчетный.Ссылка КАК Счет
			|ИЗ
			|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
			|ГДЕ
			|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет)";
			
			ЗапросПоСчетам.УстановитьПараметр("Счет",   ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
			ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
			МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
			
			Для каждого БлокируемыйСчет Из МассивСчетов Цикл
			
				ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
				ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
			
			КонецЦикла;
		
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СуммаСписания =  ?(Выборка.СуммаКт = Null, 0, Выборка.СуммаКт) - ?(Выборка.СуммаДт = Null, 0, Выборка.СуммаДт);
			
			Если НЕ мПрименениеУСН И НЕ мПредприниматель Тогда
				СуммаСписанияНУ =  ?(Выборка.СуммаКтНУ = Null, 0, Выборка.СуммаКтНУ) - ?(Выборка.СуммаДтНУ = Null, 0, Выборка.СуммаДтНУ);
				Если мПоддержкаПБУ18 Тогда
					СуммаСписанияПР =  ?(Выборка.СуммаКтПР = Null, 0, Выборка.СуммаКтПР) - ?(Выборка.СуммаДтПР = Null, 0, Выборка.СуммаДтПР);
					СуммаСписанияВР =  ?(Выборка.СуммаКтВР = Null, 0, Выборка.СуммаКтВР) - ?(Выборка.СуммаДтВР = Null, 0, Выборка.СуммаДтВР);
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.Счет = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов Тогда
				Продолжить;
			КонецЕсли;
			
			Если СуммаСписания = 0 И СуммаСписанияНУ = 0 И СуммаСписанияПР = 0 И СуммаСписанияВР = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СуммаСписания >= 0 Тогда
				
				Проводка = мПроводки.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = Выборка.Счет;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
				Проводка.Сумма                     = СуммаСписания;
				Проводка.Содержание                = "Закрытие года";
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, Выборка.Подразделение, Выборка.Подразделение);
				
				СуммаНУ                     = СуммаСписанияНУ;
				СуммаПР                     = СуммаСписанияПР;
				СуммаВР                     = СуммаСписанияВР;
				
				Проводка = мПроводки.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = Выборка.Счет;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
				Проводка.Содержание                = "Закрытие года";
	            НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, мПоддержкаПБУ18); 
			КонецЕсли;
			
			Если СуммаСписания < 0 Тогда
				
				Проводка = мПроводки.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
				Проводка.СчетКт                    = Выборка.Счет;
				Проводка.Сумма                     = - СуммаСписания;
				Проводка.Содержание                = "Закрытие года";
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, Выборка.Подразделение, Выборка.Подразделение);
				
				СуммаНУ                            = - СуммаСписанияНУ;
				СуммаПР                     = - СуммаСписанияПР;
				СуммаВР                     = - СуммаСписанияВР;
				
				Проводка = мПроводки.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
				Проводка.СчетКт                    = Выборка.Счет;
				Проводка.Содержание                = "Закрытие года";
	            НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, мПоддержкаПБУ18); 
			КонецЕсли;
		КонецЦикла;
		
		Если мПоддержкаПБУ18 Тогда
			ПересчетОНАиОНО(СтруктураШапкиДокумента, мПроводки);
		КонецЕсли;
		
		мПроводки.Записать(Ложь);
		
		Если НЕ мПрименениеУСН И НЕ мПредприниматель Тогда
			ЗакрытиеСчетовНУ(СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытиеСчетовНУ(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	//ЗАКРЫТИЕ СЧЕТОВ В НУ
	
	// закрытие счетов 20, 23, 25, 26
	СписокСчетовНУ = Новый Массив;
	
	СписокСчетовНУ.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СписокСчетовНУ.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
	СписокСчетовНУ.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	СписокСчетовНУ.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СписокСчетовНУ.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон",		мКонГраница);
	Запрос.УстановитьПараметр("Организация",	СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовНУ",	СписокСчетовНУ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОстатки.Счет КАК Счет,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0)) КАК СуммаСписания,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокДт, 0)) КАК СуммаСписанияНУ,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокДт, 0)) КАК СуммаСписанияПР,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаВРОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаВРОстатокДт, 0)) КАК СуммаСписанияВР,
	|	НалоговыйОстатки.Субконто1 КАК СтатьяЗатрат
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В (&СписокСчетовНУ), , Организация = &Организация) КАК НалоговыйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОстатки.Счет,
	|	НалоговыйОстатки.Субконто1";
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, мКонГраница.Значение)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		
		Для каждого БлокируемыйСчет Из СписокСчетовНУ Цикл
		
			ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		КонецЦикла;
		
	КонецЕсли;

	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из Результат Цикл

		Счет = Выборка.Счет;
		СуммаСписания = Выборка.СуммаСписания;
		СуммаСписанияНУ = Выборка.СуммаСписанияНУ;
		СуммаСписанияПР = Выборка.СуммаСписанияПР;
		СуммаСписанияВР = Выборка.СуммаСписанияВР;
		
		Если СуммаСписанияНУ > 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период                    = Дата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = Счет;
			Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.СтатьяЗатрат);
			Проводка.Сумма                     = СуммаСписания;
			СуммаНУ                   = СуммаСписанияНУ;
			СуммаПР                   = СуммаСписанияПР;
			СуммаВР                   = СуммаСписанияВР;
			Проводка.Содержание                = "Закрытие года";
	        НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, мПоддержкаПБУ18); 
		КонецЕсли;
		
		Если СуммаСписанияНУ < 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период                    = Дата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
			Проводка.СчетКт                    = Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.СтатьяЗатрат);
			Проводка.Сумма                     = - СуммаСписания;
			СуммаНУ                   = - СуммаСписанияНУ;
			СуммаПР                   = - СуммаСписанияПР;
			СуммаВР                   = - СуммаСписанияВР;
			Проводка.Содержание                = "Закрытие года";
	        НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, мПоддержкаПБУ18); 
		КонецЕсли;
		
	КонецЦикла;
	
	// закрытие счета 44 по всем статьям затрат, кроме транспортных расходов
	Запрос.УстановитьПараметр("ДатаКон",             мКонГраница);
	Запрос.УстановитьПараметр("Организация",         СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет",                ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	Запрос.УстановитьПараметр("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	Запрос.УстановитьПараметр("ВидыСубконто",        ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОстатки.Счет КАК Счет,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0)) КАК СуммаСписания,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокДт, 0)) КАК СуммаСписанияНУ,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокДт, 0)) КАК СуммаСписанияПР,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаВРОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаВРОстатокДт, 0)) КАК СуммаСписанияВР,
	|	НалоговыйОстатки.Субконто1 КАК СтатьяЗатрат
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		&ДатаКон,
	|		Счет В ИЕРАРХИИ (&Счет),
	|		&ВидыСубконто,
	|		Организация = &Организация
	|			И (НЕ Субконто1.ВидРасходовНУ = &ТранспортныеРасходы)) КАК НалоговыйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОстатки.Счет,
	|	НалоговыйОстатки.Субконто1";
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		СтруктураПараметров  = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, мКонГраница.Значение)); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		
		ЗапросПоСчетам = Новый Запрос;
		
		ТекстЗапросаПоСчетам =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет)";
		
		ЗапросПоСчетам.УстановитьПараметр("Счет",     ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
		ЗапросПоСчетам.Текст = ТекстЗапросаПоСчетам;
		МассивСчетов = ЗапросПоСчетам.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		Для каждого БлокируемыйСчет Из МассивСчетов Цикл
		
			ЗначенияБлокировки.Вставить("Счет", БлокируемыйСчет);
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		КонецЦикла;
		
	КонецЕсли;

	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из Результат Цикл

		Счет = Выборка.Счет;
		СуммаСписания = Выборка.СуммаСписания;
		СуммаСписанияНУ = Выборка.СуммаСписанияНУ;
		СуммаСписанияПР = Выборка.СуммаСписанияПР;
		СуммаСписанияВР = Выборка.СуммаСписанияВР;
		
		Если СуммаСписанияНУ > 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период                    = Дата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = Счет;
			Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.СтатьяЗатрат);
			Проводка.Сумма                     = СуммаСписания;
			СуммаНУ                   = СуммаСписанияНУ;
			СуммаПР                   = СуммаСписанияПР;
			СуммаВР                   = СуммаСписанияВР;
			Проводка.Содержание                = "Закрытие года";
	    НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, мПоддержкаПБУ18); 
		КонецЕсли;
		
		Если СуммаСписанияНУ < 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период                    = Дата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
			Проводка.СчетКт                    = Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.СтатьяЗатрат);
			Проводка.Сумма                     = - СуммаСписания;
			СуммаНУ                   = - СуммаСписанияНУ;
			СуммаПР                   = - СуммаСписанияПР;
			СуммаВР                   = - СуммаСписанияВР;
			Проводка.Содержание                = "Закрытие года";
	        НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, мПоддержкаПБУ18); 
		КонецЕсли;
		
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

Процедура ПересчетОНАиОНО(СтруктураШапкиДокумента, мПроводкиБУ)
	
	СтруктураШапкиДокумента.Дата = КонецМесяца(КонецДня(СтруктураШапкиДокумента.Дата)) + 1;
	НоваяСтавка = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента) * 100;
	
	СтруктураШапкиДокумента.Дата = Дата;
	СтараяСтавка = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента) * 100;
	
	Если НоваяСтавка = СтараяСтавка Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВидовАктивовИОбязательств = НалоговыйУчет.ПолучитьТаблицуВидовАктивовИОбязательств();
	ТаблицаОНАОНО =  Новый ТаблицаЗначений;
	ТаблицаОНАОНО.Колонки.Добавить("Счет");
	ТаблицаОНАОНО.Колонки.Добавить("Вид");
	ТаблицаОНАОНО.Колонки.Добавить("Разница");
	ТаблицаОНАОНО.Колонки.Добавить("НоваяСумма");
	ТаблицаОНАОНО.Колонки.Добавить("СтараяСумма");
	
	Для каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательств Цикл
		
		ТаблицаВидаАктивовИОбязательств = НалоговыйУчет.ОстаткиВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства,СтруктураШапкиДокумента.СписокОП, мНачГраница, мКонГраница);
		Если ТаблицаВидаАктивовИОбязательств.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаВидаАктивовИОбязательств.Свернуть("СчетОНАОНО,СтараяСумма","Сумма");
		
		Для каждого Строка Из ТаблицаВидаАктивовИОбязательств Цикл
			СтрокаТаблицаОНАОНО = ТаблицаОНАОНО.Добавить();
			СтрокаТаблицаОНАОНО.Счет = Строка.СчетОНАОНО;
			СтрокаТаблицаОНАОНО.Вид = СтрокаВидАктиваОбязательства.ВидАктивовОбязательств;
			СтрокаТаблицаОНАОНО.НоваяСумма = Окр(Строка.Сумма * НоваяСтавка / 100, 2);
			СтрокаТаблицаОНАОНО.СтараяСумма = Строка.СтараяСумма;
			СтрокаТаблицаОНАОНО.Разница = 0;
		КОнецЦикла;
	КонецЦикла;
	
	ТаблицаОНАОНО.Свернуть("Счет,Вид,СтараяСумма","НоваяСумма,Разница");
	
	
		Для каждого Строка Из ТаблицаОНАОНО Цикл
			Строка.Разница = Строка.НоваяСумма - Строка.СтараяСумма;
        КОнецЦикла;
	
	Для Каждого Выборка Из ТаблицаОНАОНО Цикл
		
		Если Выборка.Счет.Код = "09" И Не Выборка.Разница = 0 Тогда
			
			Проводка = мПроводкиБУ.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Пересчет по ставке " + НоваяСтавка + "%";
			
			Если  Выборка.Разница > 0  Тогда
				Проводка.Сумма        = Выборка.Разница;
				Проводка.СчетДт       = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Вид);
				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
			Иначе
				Проводка.Сумма        = - Выборка.Разница;
				Проводка.СчетКт       = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Вид);
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
			КонецЕсли;
		КонецЕсли;
	
		Если Выборка.Счет.Код = "77" И Не Выборка.Разница = 0 Тогда
			
			Проводка = мПроводкиБУ.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Пересчет по ставке " + НоваяСтавка + "%";
			
			Если  Выборка.Разница > 0  Тогда
				Проводка.Сумма        = Выборка.Разница;
				Проводка.СчетКт       = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Вид);
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
			Иначе
				Проводка.Сумма        = - Выборка.Разница;
				Проводка.СчетДт       = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Вид);
				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураДопПараметров = Новый Структура;
	
	Если  СтруктураШапкиДокумента.РасчетСтоимостиПродукции Или СтруктураШапкиДокумента.КорректировкаСтоимостиНоменклатуры Тогда
		
		СпособРасчетаСебестоимостиПроизводства = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация).СпособРасчетаСебестоимостиПроизводства;
		Если СпособРасчетаСебестоимостиПроизводства  = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
			СтруктураДопПараметров.Вставить("СпособРасчетаСебестоимостиПроизводства", "ПоПеределам");
			
		Иначе
			СтруктураДопПараметров.Вставить("СпособРасчетаСебестоимостиПроизводства", "ПоПодразделениям");
		КонецЕсли;
		
		СтруктураДопПараметров.Вставить("РасчетПрямыхЗатратНомер", "");
		
		ЗаписьРасчетаСебестоимости = Движения.РасчетСебестоимостиПродукции.ВыгрузитьКолонки();
		ЗаписьРасчетаСебестоимости.Колонки.Добавить("ДокументВыпуска"); 
		СтруктураДопПараметров.Вставить("ЗаписьРасчетаСебестоимости", ЗаписьРасчетаСебестоимости);
		
		ЗаписьРасчетаРаспределенияКосвенныхРасходов = Движения.РасчетРаспределенияКосвенныхРасходов.ВыгрузитьКолонки();
		СтруктураДопПараметров.Вставить("ЗаписьРасчетаКосвенныхРасходов", ЗаписьРасчетаРаспределенияКосвенныхРасходов);
	КонецЕсли;
	
	Если  СтруктураШапкиДокумента.ЗакрытиеСчета44ИныеРасходы Или 
		  СтруктураШапкиДокумента.РасчетСтоимостиПродукции Тогда 
		ЗаписьСписанияКосвенныхРасходов = Движения.РасчетСписанияКосвенныхРасходов.ВыгрузитьКолонки();
		СтруктураДопПараметров.Вставить("ЗаписьСписанияКосвенныхРасходов", ЗаписьСписанияКосвенныхРасходов);
	КонецЕсли;
	
	
	Если СтруктураШапкиДокумента.РасчетСтоимостиПродукции  Тогда
		СтруктураДопПараметров.Вставить("МенеджерВременныхТаблиц", НалоговыйУчет.СписокПрямыхРасходовНУ(Организация, Дата));
        СтруктураДопПараметров.Вставить("ЭтапСписанияКосвенныхРасходов", 1);
	КонецЕсли;

	Если СтруктураШапкиДокумента.СписаниеРБП Тогда
		
		ЗаписьРасчетаРБП = Движения.РасчетСписанияРБП.Выгрузить();
		ЗаписьРасчетаРБП.Очистить();
	КонецЕсли;
	
	// АМОРТИЗАЦИЯ
	// Начисление амортизации ОС
	НачислениеАмортизацииОС(СтруктураШапкиДокумента, Отказ, Заголовок);
	// Начисление износа ОС по ЕНАОФ
	НачислениеИзносаОС(СтруктураШапкиДокумента, Отказ, Заголовок);
	// Начисление амортизации НМА и списание расходов по НИОКР
	НачислениеАмортизацииНМА_НИОКР(СтруктураШапкиДокумента, Отказ, Заголовок);
	// Погашение стоимости спецодежды и спецоснастки
	ПогашениеСтоимостиСпецодеждыИСпецоснастки(СтруктураШапкиДокумента, Отказ, Заголовок); 
	
	// ПЕРЕОЦЕНКА
	ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// КОРРЕКТИРОВКА СТОИМОСТИ НОМЕНКЛАТУРЫ
	КорректировкаСтоимостиНоменклатуры(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок);
	
	// СПИСАНИЕ РАСХОДОВ БУДУЩИХ ПЕРИОДОВ
	СписаниеРБП(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// ПРОИЗВОДСТВО
	РасчетСебестоимостиПродукции(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок);
	
	// ТОРГОВЛЯ
	РасчетТорговойНаценкиПоПроданнымТоварам(СтруктураШапкиДокумента, Отказ, Заголовок);


	//Закрытие иных расходов (не транспортных)
	ЗакрытиеСчета44(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок);

	// Определение финансовых результатов
	ЗакрытиеСчета90(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЗакрытиеСчета91(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// РЕГЛАМЕНТНЫЕ ОПЕРАЦИИ ПО УСН
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда	
		
		УчестьОстаткиНЗПприУСН(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		ПризнаниеРасходовНаПриобретениеОСУСН(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		ПризнаниеРасходовНаПриобретениеНМАУСН(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		СписаниеДопРасходовУСН(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		РаспределениеРасходовЕНВДУСН(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	КонецЕсли;
	
	// РЕГЛАМЕНТНЫЕ ОПЕРАЦИИ ПБУ 18
	
	Если НЕ мПредприниматель Тогда
		
		РасчетДолиБазыНалогаНаПрибыль(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ);
		
		Если мПоддержкаПБУ18 Тогда
			РасчетПостоянныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок);
			
			РасчетВременныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок);
			
			РасчетНалогаНаПрибыль(СтруктураШапкиДокумента,СтруктураДопПараметров, Отказ, Заголовок);
		Иначе
			РасчетНалогаНаПрибыльБезПоддержкиПБУ18(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	ПроведениеРеформацииБаланса(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// {УчетДоходовИРасходовИП
	// Регламентные операции индивидуального предпринимателя
	ИПРаспределениеРасходов(СтруктураШапкиДокумента, Отказ, Заголовок);
	// }УчетДоходовИРасходовИП
	
	// Формирование расшифровки
	Если СтруктураШапкиДокумента.РасчетСтоимостиПродукции Или 
		СтруктураШапкиДокумента.ЗакрытиеСчета44ИныеРасходы Тогда
		
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
		СтруктураДопПараметров.ЗаписьСписанияКосвенныхРасходов, 
		РегистрыСведений.РасчетСписанияКосвенныхРасходов,
		"Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,СтатьяЗатрат,ВидДеятельностиДляНалоговогоУчетаЗатрат",
		"СуммаЗатрат,СуммаЗатратНУ,СуммаЗатратПР,СуммаЗатратВР,СуммаННП,СуммаННП,СуммаННПНУ,СуммаННППР,СуммаННПВР,СуммаНеННП,СуммаНеННПНУ,СуммаНеННППР,СуммаНеННПВР");
		
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.РасчетНалогаНаПрибыль И СтруктураДопПараметров.ЗаписьДолиБазыНалогаНаПрибыль.Количество() > 0 И НЕ мПредприниматель  Тогда
		
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
		СтруктураДопПараметров.ЗаписьДолиБазыНалогаНаПрибыль, 
		РегистрыСведений.РасчетДолейБазыНалогаНаПрибыль,
		"Организация,ПериодРасчета,Активность,Регистратор,РегистрацияВИФНС,ДоляНалоговойБазы",
		"РасходыПоОплатеТруда,СтоимостьАмортизируемогоИмущества");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)
	
	ОбщегоНазначения.СообщитьОбОшибке("Документ не используется, рекомендуется воспользоваться меню ""Операции"" - ""Закрытие месяца""");
	Отказ = Истина;
	Возврат;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ГоловноеПодразделение",?(ЗначениеЗаполнено(Организация.ГоловнаяОрганизация), Организация.ГоловнаяОрганизация, Организация));
	СписокОП = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	СписокОП.Добавить(Организация.Ссылка, Организация.Наименование);
	СтруктураШапкиДокумента.Вставить("СписокОП", СписокОП);
	
	
	мНачДата    = НачалоМесяца(Дата);
	мКонДата    = КонецМесяца (Дата);
	мНачГода    = НачалоГода(Дата);
	мНачГраница = Новый Граница(мНачДата, ВидГраницы.Включая);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(мКонДата, Отказ, СтруктураШапкиДокумента.Организация);
	Если мУчетнаяПолитика = Неопределено Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("Не установлена учетная политика", Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
	Конецесли;
	
	ВедетсяПроизводственнаяДеятельность = мУчетнаяПолитика.ОрганизацияВедетПроизводственнуюДеятельность;
	
	СообщенияОповторахВидовОпераций = ПроверкаПовторовВидовОпераций(СтруктураШапкиДокумента);
	Если ЗначениеЗаполнено(СообщенияОповторахВидовОпераций) Тогда
		ТекстСообщения = СообщенияОповторахВидовОпераций;
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект,Ложь) Тогда
		Возврат
	КонецЕсли;
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если НалоговыйУчетУСН.ПрименениеУСН(СтруктураШапкиДокумента.Организация, мКонДата) Тогда
		мПрименениеУСН     = Истина;
	Иначе
		мПрименениеУСН     = Ложь;
	КонецЕсли;
	
	мПредприниматель = (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) И НЕ мПрименениеУСН;
	СтруктураШапкиДокумента.Вставить("Предприниматель", мПредприниматель);

	мПроводки = Движения.Хозрасчетный;
	
	ПорядокПодразделенийСообщался = Ложь;
	ТаблицаНеЗакрытыхПодразделений = Новый ТаблицаЗначений;
	ТаблицаНеЗакрытыхПодразделений.Колонки.Добавить("Подразделение");
	ТаблицаНеЗакрытыхПодразделений.Колонки.Добавить("СчетЗатрат");
	
	мСчетаЕНВД = Новый Массив;
	мСчетаЕНВД.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД);
	мСчетаЕНВД.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД);
	
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация.ГоловнаяОрганизация) Тогда
		ЕстьОбособленныеПодразделения = Истина;
	Иначе
		
		ЕстьОбособленныеПодразделения = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделений(СтруктураШапкиДокумента.Организация).Количество() > 1;
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("ЕстьОбособленныеПодразделения", ЕстьОбособленныеПодразделения);
	
	Если Не (СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Или мПредприниматель) 
		И (РасчетСтоимостиПродукции Или ЗакрытиеСчета44ИныеРасходы Или ЗакрытиеСчета44ТранспортныеРасходы) Тогда
		
		ПолучитьДолиСписанияКосвенныхРасходов(СтруктураШапкиДокумента, Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Если мПрименениеУСН Тогда
			
			мПрименениеУСН     = Истина;
			мКУДиР             = Движения.КнигаУчетаДоходовИРасходов;
			мКУДиР_ОС          = Движения.КнигаУчетаДоходовИРасходовОС;
			мКУДиР_НМА		   = Движения.КнигаУчетаДоходовИРасходовНМА;
			мДатаПереходаНаУСН = мУчетнаяПолитика["ДатаПереходаНаУСН"];
			
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", НалоговыйУчетУСН.ПрименениеУСНДоходы(СтруктураШапкиДокумента.Организация, мКонДата));
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН",	НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы);
		КонецЕсли;
		
		мПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
		мПрименениеЕНВД = НалоговыйУчет.ПрименениеЕНВД(СтруктураШапкиДокумента.Организация, мКонДата);
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверкаПовторовВидовОпераций(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.АмортизацияОС = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК АмортизацияОС,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.ИзносОС = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ИзносОС,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.АмортизацияНМА = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК АмортизацияНМА,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.ПогашениеСтоимостиСпецодеждыИСпецоснастки = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ПогашениеСтоимостиСпецодеждыИСпецоснастки,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.ПереоценкаВалютныхСредств = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ПереоценкаВалютныхСредств,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.КорректировкаСтоимостиНоменклатуры = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК КорректировкаСтоимостиНоменклатуры,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.СписаниеРБП = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СписаниеРБП,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.РасчетСтоимостиПродукции = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК РасчетСтоимостиПродукции,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.ЗакрытиеСчета44ТранспортныеРасходы = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ЗакрытиеСчета44ТранспортныеРасходы,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.ЗакрытиеСчета44ИныеРасходы = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ЗакрытиеСчета44ИныеРасходы,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.ЗакрытиеСчета90 = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ЗакрытиеСчета90,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.ЗакрытиеСчета91 = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ЗакрытиеСчета91,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.ПризнаниеРасходовНаПриобретениеОСУСН = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ПризнаниеРасходовНаПриобретениеОСУСН,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.РаспределениеРасходовЕНВДУСН = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК РаспределениеРасходовЕНВДУСН,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.РасчетПНОиПНА = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК РасчетПНОиПНА,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.РасчетОНОиОНА = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК РасчетОНОиОНА,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.РасчетНалогаНаПрибыль = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК РасчетНалогаНаПрибыль,
	               |// {УчетДоходовИРасходовИП
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.ИПРаспределениеРасходов = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ИПРаспределениеРасходов,
	               |// }УчетДоходовИРасходовИП
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗакрытиеМесяца.РеформацияБаланса = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК РеформацияБаланса
	               |ИЗ
	               |	Документ.УдалитьЗакрытиеМесяца КАК ЗакрытиеМесяца
	               |ГДЕ
	               |	ЗакрытиеМесяца.Организация = &Организация
	               |	И ЗакрытиеМесяца.Дата >= &НачалоМесяца
	               |	И ЗакрытиеМесяца.Дата <= &КонецМесяца
	               |	И ЗакрытиеМесяца.Проведен
	               |	И (НЕ ЗакрытиеМесяца.ПометкаУдаления)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТекстСообщения = "";
	
	Для Каждого Выборка Из Результат Цикл
		
		Если Выборка.АмортизацияОС > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Амортизация ОС
			|";
		КонецЕсли;
		
		Если Выборка.ИзносОС> 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Износ ОС
			|";
		КонецЕсли;
		
		Если Выборка.АмортизацияНМА> 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Амортизация НМА
			|";
		КонецЕсли;
		
		Если Выборка.ПогашениеСтоимостиСпецодеждыИСпецоснастки> 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Погашение стоимости спецодежды и спецоснастки в эксплуатации
			|";
		КонецЕсли;
		
		Если Выборка.ПереоценкаВалютныхСредств> 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Переоценка валютных средств
			|";
		КонецЕсли;
		
		Если Выборка.КорректировкаСтоимостиНоменклатуры> 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Корректировка стоимости номенклатуры
			|";
		КонецЕсли;
		
		Если Выборка.СписаниеРБП > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Списание РБП
			|";
		КонецЕсли;
		
		Если Выборка.РасчетСтоимостиПродукции> 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Закрытие 20,23,25,26
			|";
		КонецЕсли;
		
		Если Выборка.ЗакрытиеСчета44ТранспортныеРасходы> 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Закрытие транспортных расходов
			|";
		КонецЕсли;
		
		Если Выборка.ЗакрытиеСчета44ИныеРасходы> 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Закрытие 44 счета расходов
			|";
		КонецЕсли;
		
		Если Выборка.ЗакрытиеСчета90 > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Закрытие счета 90
			|";
		КонецЕсли;
		
		Если Выборка.ЗакрытиеСчета91 > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Закрытие счета 91
			|";
		КонецЕсли;
		
	
		Если Выборка.ПризнаниеРасходовНаПриобретениеОСУСН > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Признание расходов на приобретение ОС УСН
			|";
		КонецЕсли;
		
		Если Выборка.РаспределениеРасходовЕНВДУСН > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Распределение расходов ЕНВД УСН
			|";
		КонецЕсли;
		
		Если Выборка.РасчетПНОиПНА > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Расчет постоянных налоговых активов и обязательств
			|";
		КонецЕсли;
		
		Если Выборка.РасчетОНОиОНА > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Расчет временных налоговых активов и обязательств
			|";
		КонецЕсли;
		
		Если Выборка.РасчетНалогаНаПрибыль > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Расчет налога на прибыль
			|";
		КонецЕсли;
		
		Если Выборка.РеформацияБаланса > 1 Тогда   
			ТекстСообщения = ТекстСообщения + "Повторение операции Реформация баланса
			|";
		КонецЕсли;
		
		// {УчетДоходовИРасходовИП
		Если Выборка.ИПРаспределениеРасходов > 1 Тогда    
			ТекстСообщения = ТекстСообщения + "Повторение операции Распределение расходов индивидуальных предпринимателей по видам деятельности
			|";
		КонецЕсли;
		// }УчетДоходовИРасходовИП
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
	
Конецфункции

Процедура ПолучитьДолиСписанияКосвенныхРасходов(СтруктураШапкиДокумента, Отказ)
	
	Если СтруктураШапкиДокумента.ЕстьОбособленныеПодразделения Тогда
		
		ТаблицаДолейКосвенныхРасходов = НалоговыйУчет.ПолучитьТаблицуДолейСписанияКосвенныхРасходов(СтруктураШапкиДокумента);
		Если ТаблицаДолейКосвенныхРасходов = Неопределено Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке("Не обнаружена информация о долях списания косвенных расходов
			|Рекомендуется создать документ ""Расчет долей списания косвенных расходов"" для головной организации", Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
		КонецЕсли;
	ИначеЕсли ВедетсяПроизводственнаяДеятельность И
		Не СтруктураШапкиДокумента.РасчетСтоимостиПродукции
		И СтруктураШапкиДокумента.ЗакрытиеСчета44ИныеРасходы Тогда
		
		ТаблицаДолейКосвенныхРасходов = НалоговыйУчет.ПолучитьТаблицуДолейСписанияКосвенныхРасходов(СтруктураШапкиДокумента);
		Если ТаблицаДолейКосвенныхРасходов = Неопределено Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке("Не обнаружена информация о долях списания косвенных расходов
			|Рекомендуется создать документ ""Закрытие месяца"" с операцией ""Закрытие 20,23,25,26""", Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
		КонецЕсли;
	Иначе
		
		Если Не Отказ Тогда
			
			ЗаписьНормированияРасходов = Движения.РасчетНормированияРасходов.ВыгрузитьКолонки();
			ЗаписиДолей                = Движения.ДолиСписанияКосвенныхРасходов.ВыгрузитьКолонки();
			СтруктураШапкиДокумента.Вставить("ЗаписьНормированияРасходов", ЗаписьНормированияРасходов);
			СтруктураШапкиДокумента.Вставить("ЗаписиДолей", ЗаписиДолей);
			СписокОП = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
			СписокОП.Добавить(Организация.Ссылка, Организация.Наименование);
			СтруктураШапкиДокумента.Вставить("СписокОрганизаций", СписокОП);
			
			НалоговыйУчет.ПровестиРасчетСуммРасходовПоКоторымПредусмотреныОграничения(СтруктураШапкиДокумента);
			
			ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
			СтруктураШапкиДокумента.ЗаписьНормированияРасходов, 
			РегистрыСведений.РасчетНормированияРасходов,
			"Организация,ПериодРасчета,Активность,Регистратор,ВидОперации,ВидРегОперации,СуммаБазы",
			"РасходыМесяц,РазницыМесяц,ЗатратыГод,РасходыГод,РазницыГод");
			
			ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
			СтруктураШапкиДокумента.ЗаписиДолей, 
			РегистрыСведений.ДолиСписанияКосвенныхРасходов,
			"Организация,ПериодРасчета,Активность,Регистратор",
			"ДоляРасходовНаРекламу,ДоляРасходовНаДобровольноеСтрахованиеЖизни,ДоляРасходовНаДобровольноеМедицинскоеСтрахование,ДоляПредставительскихРасходов,ДоляЕНВД,ДоляТранспортныхРасходов,ДоляРасходовНаВозмещениеПроцентовРаботникам,ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев");
			
			ТаблицаДолейКосвенныхРасходов = СтруктураШапкиДокумента.ЗаписиДолей;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает доступные варианты печати документа.
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	мПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(Организация, Дата);
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	
	Если НЕ мПрименениеУСН И Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо И мПоддержкаПБУ18 Тогда
		Если Месяц(Дата) = 12 Тогда
			Возврат Новый Структура("Все,Валюта,РБП,Себестоимость,Калькуляция,РаспределениеКосвенныхРасходов,НормированиеРасходов,СписаниеКосвенныхРасходов,Разницы,РасчетНалогаНаПрибыль,ДоляОбособленногоПодразделения,ПересчетОНАиОНО","Все операции","Переоценка валютных средств","Списание расходов будущих периодов", "Себестоимость продукции","Калькуляция", "Распределение косвенных расходов", "Нормирование расходов", "Списание косвенных расходов", "Постоянные и временные разницы", "Расчет налога на прибыль", "Доля базы обособленного подразделения", "Пересчет ОНА и ОНО");
		Иначе
			Возврат Новый Структура("Все,Валюта,РБП,Себестоимость,Калькуляция,РаспределениеКосвенныхРасходов,НормированиеРасходов,СписаниеКосвенныхРасходов,Разницы,РасчетНалогаНаПрибыль,ДоляОбособленногоПодразделения","Все операции","Переоценка валютных средств","Списание расходов будущих периодов", "Себестоимость продукции","Калькуляция", "Распределение косвенных расходов", "Нормирование расходов", "Списание косвенных расходов", "Постоянные и временные разницы", "Расчет налога на прибыль", "Доля базы обособленного подразделения");
		КонецЕсли;
		
	ИначеЕсли НЕ мПрименениеУСН И Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо И Не мПоддержкаПБУ18 Тогда
		Возврат Новый Структура("Все,Валюта,РБП,Себестоимость,Калькуляция,РаспределениеКосвенныхРасходов,НормированиеРасходов, СписаниеКосвенныхРасходов,РасчетНалогаНаПрибыль,ДоляОбособленногоПодразделения","Все операции","Переоценка валютных средств","Списание расходов будущих периодов", "Себестоимость продукции","Калькуляция", "Распределение косвенных расходов", "Нормирование расходов", "Списание косвенных расходов", "Расчет налога на прибыль", "Доля базы обособленного подразделения");
	Иначе
		Возврат Новый Структура("Все,Валюта,РБП,Себестоимость,Калькуляция,РаспределениеКосвенныхРасходов,НормированиеРасходов,СписаниеКосвенныхРасходов,РасчетНалогаНаПрибыль","Все операции","Переоценка валютных средств","Списание расходов будущих периодов", "Себестоимость продукции","Калькуляция", "Распределение косвенных расходов", "Нормирование расходов", "Списание косвенных расходов", "Финансовые результаты");
	КонецЕсли;
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект,Префикс);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
КонецПроцедуры
