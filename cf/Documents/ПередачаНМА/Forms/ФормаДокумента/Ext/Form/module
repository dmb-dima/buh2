////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

// Хранит список видов договоров, доступных для данного документа
Перем мСписокВидовДоговоров; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;
   
//Используется для определения необходимости открытия настроек движения после сохранения
Перем ОткрыватьНастройкуДвижений;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(
													 УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураВыданный"));

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураВыданный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,, СтруктураРеквизитовДокумента, "Продажа",, мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	// Зачет авансов
	УстановитьСпособЗачетаАвансов();
	
	ЗаполнитьСчетаУчетаРасчетов();

	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ЗаполнитьСчетаУчета(Заполнять)

	Если Заполнять Тогда

		СчетДоходов  = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
		СчетРасходов = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;

	КонецЕсли;

	Счет = СчетДоходов;
	Если Счет.ВидыСубконто.Количество() > 0 Тогда
		Субконто = Новый(Счет.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
	Иначе
		Субконто = Неопределено;
	КонецЕсли;

КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> ЭлементыФормы.СтавкаНДС.Видимость Тогда

		ЭлементыФормы.СтавкаНДС.Видимость        = УчитыватьНДС;
		ЭлементыФормы.НадписьСтавкаНДС.Видимость = УчитыватьНДС;
		ЭлементыФормы.СуммаНДС.Видимость         = УчитыватьНДС;
		ЭлементыФормы.НадписьСуммаНДС.Видимость  = УчитыватьНДС;

	КонецЕсли;

	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчетаРасчетов.Видимость = ПоказыватьВДокументахСчетаУчета;

	ЭлементыФормы.СчетУчетаНДСПоРеализации.ОтметкаНезаполненного   = УчитыватьНДС И СуммаНДС <> 0 И Не ЗначениеЗаполнено(СчетУчетаНДСПоРеализации);
	
	// Зачет авансов
	
	ЗачетАвансовВозможен = Истина;
	
	ЭлементыФормы.СпособЗачетаАвансов.Доступность = ЗачетАвансовВозможен;
	
	ЗачетПоДокументу   = ЗачетАвансовВозможен И (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу);
	ЗачетАвтоматически = ЗачетАвансовВозможен И (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
	
	ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Доступность        = ЗачетПоДокументу ИЛИ ЗачетАвтоматически;
	ЭлементыФормы.НадписьСчетУчетаРасчетовПоАвансам.Доступность = ЗачетПоДокументу ИЛИ ЗачетАвтоматически;
	
	ЭлементыФормы.СчетУчетаРасчетовПоАвансам.АвтоОтметкаНезаполненного = ЗачетПоДокументу ИЛИ ЗачетАвтоматически;
	Если НЕ (ЗачетПоДокументу ИЛИ ЗачетАвтоматически) Тогда
		ЭлементыФормы.СчетУчетаРасчетовПоАвансам.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ЗачетАвансов.Видимость = ЗачетПоДокументу;
	Если СписокДокументовАванса Тогда
		ЭлементыФормы.ПанельЗачетАвансов.ТекущаяСтраница = ЭлементыФормы.ПанельЗачетАвансов.Страницы.СписокАвансов;
	Иначе
		ЭлементыФормы.ПанельЗачетАвансов.ТекущаяСтраница = ЭлементыФормы.ПанельЗачетАвансов.Страницы.ОдинАванс;
	КонецЕсли;
	
	Если (НЕ ПоказыватьВДокументахСчетаУчета) И (НЕ ЗачетПоДокументу) Тогда
	
		ЭлементыФормы.ОсновнаяПанель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
		
	Иначе
	
		ЭлементыФормы.ОсновнаяПанель.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение = ОбщегоНазначения.ФорматСумм(Сумма + ?(СуммаВключаетНДС, 0, СуммаНДС));

	// Зачет авансов
	Если ЗачетАвансов.Найти(0, "СуммаЗачета") <> Неопределено Тогда
		ЭлементыФормы.ВсегоЗачетАвансов.Значение = "<Авто>";
	Иначе
		ЭлементыФормы.ВсегоЗачетАвансов.Значение = ОбщегоНазначения.ФорматСумм(ЗачетАвансов.Итог("СуммаЗачета"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа", ПараметрОбъектКопирования);
		
		Если ПараметрОбъектКопирования = Неопределено Тогда
		
			ЗаполнитьСчетаУчета(Истина);
			
		КонецЕсли;

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
    
	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
    // }ОбособленныеПодразделения
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Зачет авансов
	Если ЗачетАвансов.Количество() > 0 Тогда
		ЭлементыФормы.ЗачетАвансов.ТекущаяСтрока       = ЗачетАвансов[0];
		ЭлементыФормы.ТабПолеСуммыЗачета.ТекущаяСтрока = ЗачетАвансов[0];
	КонецЕсли;
	СписокДокументовАванса = (ЗачетАвансов.Количество() > 1);
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	ЗаполнитьТекстПроСчетФактуру();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	ИначеЕсли ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" Тогда
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			Если Параметр.Найти(Ссылка) <> Неопределено Тогда
				ЗаполнитьТекстПроСчетФактуру();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
       
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

Процедура ОбработкаДиалогаИзмененияВалютыЦены(СтруктураРеквизитовДокумента, СтруктураЗначений)

	Если СтруктураЗначений <> Неопределено Тогда

		Ценообразование.УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта(СтруктураЗначений, ЭтотОбъект, СтруктураРеквизитовДокумента);								  

		Если СтруктураЗначений.ПересчитатьЦеныПоВалюте Тогда

			Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма,
								СтруктураЗначений.ТекущийВалютаДокумента,
								СтруктураЗначений.НовыйВалютаДокумента,
								СтруктураЗначений.ТекущийКурсДокумента,
								СтруктураЗначений.НовыйКурсДокумента,
								СтруктураЗначений.ТекущийКратностьДокумента,
								СтруктураЗначений.НовыйКратностьДокумента);

		КонецЕсли;

		СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));

		УстановитьВидимость();

	КонецЕсли

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ЭтотОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            Неопределено, "НематериальныеАктивы", Неопределено);

	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	ОбработкаДиалогаИзмененияВалютыЦены(СтруктураРеквизитовДокумента, СтруктураЗначений);

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	//Открывает форму движений документа для ручного редактирования
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата);

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата);

	КонтрагентПриИзменении(Элемент);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект,мСписокВидовДоговоров);

	// Могли поменять договор.
	ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
			мСписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

Процедура УстановитьАналитику(Счет,Субконто)

	Если Счет.ВидыСубконто.Количество() > 0 Тогда

		Если Счет.ВидыСубконто[0].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Субконто)) тогда
			//Не надо менять, значение подходит
		Иначе
			Субконто = Новый(Счет.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;

	Иначе

		Субконто = Неопределено;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
//
Процедура СчетДоходовПриИзменении(Элемент)

	Счет = СчетДоходов;

	УстановитьАналитику(Счет,Субконто);

	ЭлементыФормы.Субконто.Доступность = НЕ (НЕ ЗначениеЗаполнено(Счет) ИЛИ (Счет.ВидыСубконто.Количество() = 0));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
//
Процедура СчетДоходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
//
Процедура СчетРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
//
Процедура СтавкаНДСПриИзменении(Элемент)

	СуммаБезНДС    = ?(СуммаВключаетНДС, Сумма - СуммаНДС, Сумма);
	СуммаНДС       = УчетНДС.РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
	Сумма          = ?(СуммаВключаетНДС, СуммаБезНДС + СуммаНДС, СуммаБезНДС);
	СуммаДокумента = ?(СуммаВключаетНДС, Сумма, Сумма + СуммаНДС);

	ОбновитьПодвал();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
//
Процедура СуммаПриИзменении(Элемент)

	СуммаНДС       = УчетНДС.РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
	СуммаДокумента = ?(СуммаВключаетНДС, Сумма, Сумма + СуммаНДС);

	ОбновитьПодвал();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
//
Процедура СуммаНДСПриИзменении(Элемент)

	СуммаБезНДС    = ?(СуммаВключаетНДС, Сумма - СуммаНДС, Сумма);
	Сумма          = ?(СуммаВключаетНДС, СуммаБезНДС + СуммаНДС, СуммаБезНДС);
	СуммаДокумента = ?(СуммаВключаетНДС, Сумма, Сумма + СуммаНДС);

	ОбновитьПодвал();
	
	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
//
Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
//
Процедура СчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
//
Процедура СчетУчетаНДСПоРеализацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

Процедура СчетУчетаНДСПоРеализацииПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
         

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// {ОбособленныеПодразделения
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()
// }ОбособленныеПодразделения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ОБСЛУЖИВАЮЩИЕ ЗАЧЕТ АВАНСОВ

Процедура УстановитьСпособЗачетаАвансов()

	СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовПоАвансам) Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
			Организация, Контрагент, ДоговорКонтрагента);
		СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;
	
	ЗачетАвансов.Очистить();
	СписокДокументовАванса = Ложь;

КонецПроцедуры

Процедура СпособЗачетаАвансовПриИзменении(Элемент)
	
	СчетУчетаРасчетовПоАвансам = Неопределено;
	ЗачетАвансов.Очистить();
	СписокДокументовАванса = Ложь;
	
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически
		ИЛИ СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
			Организация, Контрагент, ДоговорКонтрагента);
		СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
		
	КонецЕсли;
		
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ЗачетАвансов.Добавить();
		ЭлементыФормы.ЗачетАвансов.ТекущаяСтрока       = ЗачетАвансов[0];
		ЭлементыФормы.ТабПолеСуммыЗачета.ТекущаяСтрока = ЗачетАвансов[0];
	КонецЕсли;
	
	УстановитьВидимость();
	
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ЗачетАвансов;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокДокументовАвансаПриИзменении(Элемент)
	
	Если НЕ СписокДокументовАванса И ЗачетАвансов.Количество() > 1 Тогда

		ТекстВопроса = "Все строки зачета авансов, кроме первой, будут удалены.
		|Продолжить?";

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ <> КодВозвратаДиалога.Да Тогда
			СписокДокументовАванса = Истина;
			Возврат;
		КонецЕсли;

		Пока ЗачетАвансов.Количество() > 1 Цикл
			ЗачетАвансов.Удалить(ЗачетАвансов.Количество() - 1);
		КонецЦикла;
        
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДокументАвансаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка  = Ложь;

	СтруктураПараметров   = Новый Структура;
	СтруктураПараметров.Вставить("Организация",                Организация);
	СтруктураПараметров.Вставить("Контрагент",                 Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",         ДоговорКонтрагента);
	СтруктураПараметров.Вставить("КонецПериода",               Дата-1);
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СчетУчетаРасчетовПоАвансам);
	СтруктураПараметров.Вставить("СторонаСчета",               "Кт");
	СтруктураПараметров.Вставить("ЭтоНовыйДокумент",           ЭтоНовый());
	СтруктураПараметров.Вставить("РежимОтбораДокументов",      Перечисления.РежимОтбораДокументов.ПоОстаткам);

	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(
		СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти.ЗачетАвансов.Реквизиты.ДокументАванса.Тип);

КонецПроцедуры

Процедура ДокументАвансаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ЗачетАвансов.ТекущиеДанные;
	ТекДанные.СуммаЗачета = 0;
	
КонецПроцедуры

Процедура ЗачетАвансовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	
		Если ОформлениеСтроки.ДанныеСтроки.СуммаЗачета = 0 Тогда
		
			ОформлениеСтроки.Ячейки.СуммаЗачета.Текст = "<Авто>";
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

мСписокВидовДоговоров = Новый СписокЗначений;
мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);

