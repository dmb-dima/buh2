Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем ПоддержкаПБУ18;
Перем ТаблицаТекущегоСостояния;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
		
	// Получить экземпляр документа на печать
	Если ИмяМакета = "СправкаРасчетВал" Тогда
		
		// Справка-расчет формирования рублевой суммы документа в валюте
		БухгалтерскийУчетРасчетовСКонтрагентами.НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(Ссылка);
		Возврат;
	КонецЕсли;
				
КонецПроцедуры // Печать
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("СправкаРасчетВал", "Справка-расчет ""Рублевая сумма документа в валюте""");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ЗаполнитьСчетаУчетаРасчетов(СчетаУчета = неопределено) Экспорт
	
    Если СчетаУчета = неопределено Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	КонецЕсли;
	СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;

КонецПроцедуры // ЗаполнитьСчетаУчетаРасчетов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура(
		"Организация, НематериальныйАктив, Сумма, ВалютаДокумента, Контрагент, ДоговорКонтрагента, 
		|КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетДоходов, СчетРасходов, СчетУчетаРасчетовСКонтрагентом");

	Если СтруктураШапкиДокумента.УчитыватьНДС И СтруктураШапкиДокумента.СуммаНДС <> 0 Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСпоРеализации");
	КонецЕсли;			
		
	// Зачет авансов
	СтруктураОбязательныхПолей.Вставить("СпособЗачетаАвансов");
	Если (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически)
		ИЛИ (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу) Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(
		Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаЗачетаАвансов, Отказ, Заголовок)

	ТекОрганизация = СтруктураШапкиДокумента.Организация;

	//Фиксация выручки и НДС (проводки)

	//Определение параметров учетной политики по отражению НДС с продажи
    УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация).МоментОпределенияНалоговойБазыНДС;
	
	Проводки = Движения.Хозрасчетный;

	ТаблицыДокумента = Новый Структура();
	ТаблицыДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);

	ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
		СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, Истина, Отказ, Заголовок);
		
	ВидыСубконтоСчетов = Новый Соответствие; // кэш видов субконто
	
	// Движения по регистрам учета НМА и формирование проводок по начислению амортизации и списанию стоимости.

	Период = Новый Граница(МоментВремени(), ВидГраницы.Исключая);
	ТаблицаТекущегоСостояния = УправлениеВнеоборотнымиАктивами.ОпределитьСтоимостьПоСпискуНМА(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.НематериальныйАктив,Период);
	ТаблицаТекущегоСостояния.Индексы.Добавить("НМА");

	ТаблицаАмортизации = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМА_НИОКР(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.НематериальныйАктив, ЭтотОбъект,, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);
    
	ТаблицаАмортизации.Колонки.НематериальныйАктив.Имя = "ОбъектУчета";
	ТаблицаАмортизации.Индексы.Добавить("ОбъектУчета");

	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя тогда
		ДатаРегистратора = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
		ТаблицаАмортизацииНУ = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМА_НИОКР_НалогРеглФизЛицо(ЭтотОбъект,СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.НематериальныйАктив,Истина, ДатаРегистратора);
		ТаблицаАмортизацииНУ.Колонки.НМА.Имя   = "ОбъектУчета";
		ТаблицаАмортизацииНУ.Колонки.Налог.Имя = "СуммаАмортизации";
		ТаблицаАмортизацииНУ.Колонки.Добавить("СчетАмортизации");
		ТаблицаАмортизацииНУ.Индексы.Добавить("ОбъектУчета");
	КонецЕсли;
	// }УчетДоходовИРасходовИП

	ТабЗатрат    = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТаблицаАмортизации, СтруктураШапкиДокумента,"Бух","Передача НМА");
	
	СостояниеНМА = Движения.СостоянияНМАОрганизаций;

	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		ТекНМА = СтрокаТЧ.НематериальныйАктив;

		// Движения по регистру СостояниеНМА
		Движение = СостояниеНМА.Добавить();

		Движение.Период              = Дата;
		Движение.НематериальныйАктив = ТекНМА;
		Движение.Организация         = ТекОрганизация;
		Движение.Состояние           = Перечисления.ВидыСостоянийНМА.Списан;

		СтрокаАмортизации = ТаблицаАмортизации.Найти(ТекНМА,"ОбъектУчета");
		СтрокаТТС         = ТаблицаТекущегоСостояния.Найти(ТекНМА,"НМА");

		Если СтрокаТТС <> Неопределено Тогда

			СчетУчетаСтоимости   = СтрокаТТС.СчетУчета;
			СчетУчетаАмортизации = СтрокаТТС.СчетАмортизации;

			Если СтрокаАмортизации = Неопределено тогда
				АмортизацияЗаМесяц   = 0;
				АмортизацияЗаМесяцНУ = 0;
				АмортизацияЗаМесяцПР = 0;
				АмортизацияЗаМесяцВР = 0;
			Иначе
				АмортизацияЗаМесяц   = СтрокаАмортизации.СуммаАмортизации;
				АмортизацияЗаМесяцНУ = СтрокаАмортизации.СуммаАмортизацииНУ;
				АмортизацияЗаМесяцПР = СтрокаАмортизации.СуммаАмортизацииПР;
				АмортизацияЗаМесяцВР = СтрокаАмортизации.СуммаАмортизацииВР;
			КонецЕсли;

			// списание амортизации Д (Счет амортизации) К (счет учета)
			СуммаПроводки   = СтрокаТТС.Амортизация + АмортизацияЗаМесяц;
			СуммаПроводкиНУ = СтрокаТТС.АмортизацияНУ + АмортизацияЗаМесяцНУ;
			СуммаПроводкиПР = СтрокаТТС.АмортизацияПР + АмортизацияЗаМесяцПР;
			СуммаПроводкиВР = СтрокаТТС.АмортизацияВР + АмортизацияЗаМесяцВР;

			Если ((СуммаПроводки <> 0) 
			      ИЛИ (СуммаПроводкиНУ <> 0)
			      ИЛИ (СуммаПроводкиПР <> 0)
			      ИЛИ (СуммаПроводкиВР <> 0))
			   И НЕ (СчетУчетаСтоимости = СчетУчетаАмортизации) Тогда

				Проводка = Проводки.Добавить();

				Проводка.Период       = Дата;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Передача НМА";
				Проводка.Сумма        = СуммаПроводки;

				Проводка.СчетДт = СчетУчетаАмортизации;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", ТекНМА);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР"		 , ТекНМА);
				Проводка.СуммаНУДт = СуммаПроводкиНУ;
				Проводка.СуммаПРДт = СуммаПроводкиПР;
				Проводка.СуммаВРДт = СуммаПроводкиВР;
				
				Проводка.СчетКт = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"		 , ТекНМА);
				Проводка.СуммаНУКт = СуммаПроводкиНУ;
				Проводка.СуммаПРКт = СуммаПроводкиПР;
				Проводка.СуммаВРКт = СуммаПроводкиВР;

				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
			КонецЕсли;

			// списание остаточной стоимости Д 91.02 К 01.09
			СуммаПроводки = СтрокаТТС.Стоимость - СтрокаТТС.Амортизация - АмортизацияЗаМесяц;
			СуммаПроводкиНУ = СтрокаТТС.СтоимостьНУ - СтрокаТТС.АмортизацияНУ - АмортизацияЗаМесяцНУ;
			СуммаПроводкиПР = СтрокаТТС.СтоимостьПР - СтрокаТТС.АмортизацияПР - АмортизацияЗаМесяцПР;
			СуммаПроводкиВР = СтрокаТТС.СтоимостьВР - СтрокаТТС.АмортизацияВР - АмортизацияЗаМесяцВР;

			Если СуммаПроводки <> 0
			 ИЛИ СуммаПроводкиНУ <> 0 
			 ИЛИ СуммаПроводкиПР <> 0 
			 ИЛИ СуммаПроводкиВР <> 0 Тогда

				Проводка = Проводки.Добавить();

				Проводка.Период       = Дата;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Передача НМА";
				Проводка.Сумма        = СуммаПроводки;

				Проводка.СчетДт       = СтрокаТЧ.СчетРасходов;
				Если Проводка.СчетДт.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = ТипЗнч(СтрокаТЧ.Субконто) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СтрокаТЧ.Субконто);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РеализуемыеАктивы", СтруктураШапкиДокумента.НематериальныйАктив);
				Проводка.СуммаНУДт = СуммаПроводкиНУ;
				Проводка.СуммаПРДт = СуммаПроводкиПР;
				Проводка.СуммаВРДт = СуммаПроводкиВР;
				
				Проводка.СчетКт      = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"      , ТекНМА);
				Проводка.СуммаНУКт = СуммаПроводкиНУ;
				Проводка.СуммаПРКт = СуммаПроводкиПР;
				Проводка.СуммаВРКт = СуммаПроводкиВР;
					
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда 
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТаблицаАмортизацииНУ, СтруктураШапкиДокумента, "");
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		ДоходыИРасходыПредпринимателя.ОтражениеАмортизации(ЭтотОбъект, СтруктураШапкиДокумента, ТабЗатрат, УчетнаяПолитикаНУ);
		
		// Списание объекта
		ТаблицаАмортизацииНУ.Свернуть("ОбъектУчета, РасчетныйДокумент, ДокументОплаты, НоменклатурнаяГруппа, ХарактерДеятельности", "СуммаАмортизации,АмортизацияКонечныйОстаток");
		
		Для Каждого НМА Из ТаблицаАмортизацииНУ Цикл
			Если (НМА.СуммаАмортизации + НМА.АмортизацияКонечныйОстаток) <> 0 Тогда
				Движение = Движения.ИПМПЗ.ДобавитьПриход(); // самортизированную часть стоимости сторнируем, чтобы не попала в Книгу учета
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.Организация = СтруктураШапкиДокумента.Организация;
				Движение.НоменклатурнаяГруппа = НМА.НоменклатурнаяГруппа;
				Движение.ХарактерДеятельности = НМА.ХарактерДеятельности;
				Движение.ВидМПЗ = Перечисления.ВидыМПЗ.НМА;
				Движение.Номенклатура = НМА.ОбъектУчета;
				Движение.Партия = НМА.РасчетныйДокумент;
				Движение.ДокументОплаты = НМА.ДокументОплаты;
				Движение.Сумма = -(НМА.СуммаАмортизации + НМА.АмортизацияКонечныйОстаток);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПоТоварам.Колонки.Добавить("Номенклатура");
		ТаблицаПоТоварам.ЗагрузитьКолонку(ТаблицаПоТоварам.ВыгрузитьКолонку("НематериальныйАктив"), "Номенклатура");
		СчетУчета = ПланыСчетов.Хозрасчетный.НематериальныеАктивы;
		
		ДоходыИРасходыПредпринимателя.СписаниеАмортизируемогоИмущества(ЭтотОбъект, СтруктураШапкиДокумента, ТаблицаПоТоварам, СчетУчета, "Субконто", УчетнаяПолитикаНУ);
		ДоходыИРасходыПредпринимателя.ЗачетОплатыПокупателя(ЭтотОбъект, СтруктураШапкиДокумента, Движения.ИПМПЗОтгруженные.Выгрузить(), ТаблицаВзаиморасчетов);
		
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	Выручка = ТаблицаПоТоварам.Скопировать();
	Выручка.Свернуть("СчетДоходов, Субконто, СтавкаНДС",
		"Сумма, СуммаБУ, СуммаНУ, СуммаВал, НДС, НДСВал");

	Для каждого СтрокаТаблицы из Выручка Цикл

		// Выручка
		Если СтрокаТаблицы.СуммаБУ = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Проводки.Добавить();

		Проводка.Период       = СтруктураШапкиДокумента.Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма        = СтрокаТаблицы.СуммаБУ;
		Проводка.Содержание   = "Передача НМА";

		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;

		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетДоходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.Субконто);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РеализуемыеАктивы", СтруктураШапкиДокумента.НематериальныйАктив);
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			СуммаНУДт = СтрокаТаблицы.СуммаНУ + СтрокаТаблицы.НДС;
			СуммаНУКт = СтрокаТаблицы.СуммаНУ;
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
				СуммаНУДт, СуммаНУКт, Проводка.Сумма - СуммаНУДт, Проводка.Сумма - СуммаНУДт, , , 
				Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
			
		КонецЕсли;
		
		// НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда

			Проводка = Проводки.Добавить();

			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СтрокаТаблицы.НДС;
			Проводка.Содержание   = "Передача НМА";

			Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаНДСПоРеализации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РеализуемыеАктивы", СтруктураШапкиДокумента.НематериальныйАктив);
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет",Перечисления.ВидыПлатежейВГосБюджет.Налог);

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
		КонецЕсли;

	КонецЦикла;

	// Движения во регистрам подсистемы учета НДС
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам,ТаблицаВзаиморасчетов, Отказ);

	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);

	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, Отказ, Заголовок)
	
	Если НЕ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, Новый Структура("ТаблицаРасчетов", ТаблицаВзаиморасчетов));
		
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки, ТаблицаВзаиморасчетов, Отказ)

	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда

		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СчетОтнесенияНДС = ПланыСчетов.Хозрасчетный.НДС;
			
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ, СчетОтнесенияНДС, ТаблицаВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	ПередачаНМА.НематериальныйАктив,
	|	ПередачаНМА.Сумма,
	|	ПередачаНМА.СтавкаНДС,
	|	ПередачаНМА.СуммаНДС КАК НДС,
	|	ПередачаНМА.СчетДоходов,
	|	ПередачаНМА.СчетРасходов,
	|	ПередачаНМА.Субконто
	|ИЗ
	|	Документ.ПередачаНМА КАК ПередачаНМА
	|
	|ГДЕ
	|	ПередачаНМА.Ссылка = &Ссылка";
	ТаблицаПоТоварам = Запрос.Выполнить().Выгрузить();

	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам	,СтруктураШапкиДокумента, Истина );

	
КонецПроцедуры

Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры

// Процедуры и  функции, обслуживающие зачет авансов

Функция ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ТаблицаЗачетаАвансов = ЗачетАвансов.ВыгрузитьКолонки();
	Иначе
		ТаблицаЗачетаАвансов = ЗачетАвансов.Выгрузить();
		ТаблицаЗачетаАвансов.Свернуть("ДокументАванса", "СуммаЗачета");
	КонецЕсли;
	ТаблицаЗачетаАвансов.Колонки.ДокументАванса.Имя = "ДокументРасчетов";
	ТаблицаЗачетаАвансов.Колонки.СуммаЗачета.Имя    = "СуммаВзаиморасчетов";
	
	Возврат ТаблицаЗачетаАвансов;

КонецФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если (ТаблицаЗачетаАвансов.Количество() = 0) Тогда
		
		Если СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли (ТаблицаЗачетаАвансов.Количество() = 1) 
		И (НЕ ЗначениеЗаполнено(ТаблицаЗачетаАвансов[0].ДокументРасчетов)) Тогда
	
		ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		
	Иначе
	
		СтруктураОбязательныхПолей = Новый Структура("ДокументАванса");
    	
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(
			ЭтотОбъект, "ЗачетАвансов", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Подготовим таблицу товаров для проведения.
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	// Зачет авансов
	ТаблицаЗачетаАвансов = ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок);

	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
		СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента,Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		
		ПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата);	
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоТоварам, ТаблицаЗачетаАвансов, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаРасчетная = Сумма+?(УчитыватьНДС и не СуммаВключаетНДС,СуммаНДС,0);
	
	Если не СуммаДокумента = СуммаРасчетная Тогда
		СуммаДокумента = СуммаРасчетная;
	КонецЕсли;
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный");

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураВыданный", Ложь);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

