Перем мВалютаРегламентированногоУчета Экспорт;
Перем Доля0;
Перем ВидыСубконтоСчетов;
Перем ПоддержкаПБУ18;
Перем мУчетнаяПолитика Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОтчетаКомиссионера()
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Номер,
	|	ОтчетКомиссионераОПродажах.Дата,
	|	ОтчетКомиссионераОПродажах.ДоговорКонтрагента,
	|	ОтчетКомиссионераОПродажах.Контрагент,
	|	ОтчетКомиссионераОПродажах.Организация,
	|	ОтчетКомиссионераОПродажах.СуммаДокумента,
	|	ОтчетКомиссионераОПродажах.ВалютаДокумента,
	|	ОтчетКомиссионераОПродажах.УчитыватьНДС,
	|	ОтчетКомиссионераОПродажах.СуммаВключаетНДС,
	// {ОбособленныеПодразделения
	|	ОтчетКомиссионераОПродажах.ПодразделениеОрганизации,
	// }ОбособленныеПодразделения
	|	ОтчетКомиссионераОПродажах.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|		Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаХранения,
	|		Цена,
	|		Сумма,
	|		СуммаВознаграждения КАК Вознаграждение,
	|		СуммаНДС
	|	)
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &ТекущийДокумент";

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Номер,
	|	ОтчетКомиссионераОПродажах.Дата,
	|	ОтчетКомиссионераОПродажах.ДоговорКонтрагента,
	|	ОтчетКомиссионераОПродажах.Контрагент,
	|	ОтчетКомиссионераОПродажах.Организация,
	|	ОтчетКомиссионераОПродажах.СуммаДокумента,
	|	ОтчетКомиссионераОПродажах.ВалютаДокумента,
	|	ОтчетКомиссионераОПродажах.УчитыватьНДС,
	|	ОтчетКомиссионераОПродажах.СуммаВключаетНДС,
	|	ОтчетКомиссионераОПродажах.Товары.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|		Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаХранения,
	|		Цена,
	|		Сумма,
	|		СуммаВознаграждения КАК Вознаграждение,
	|		СуммаНДС
	|	),
	|	ОтчетКомиссионераОПродажах.Услуги.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Количество,
	|		Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаХранения,
	|		Цена,
	|		Сумма,
	|		СуммаВознаграждения КАК Вознаграждение,
	|		СуммаНДС
	|	)
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомиссионераОПродажах_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Отчет комиссионера");
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);

	Сумма    = 0;
	СуммаНДС = 0;
    НомерСтроки = 1;
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		ТабДокумент.Вывести(ОбластьМакета);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
		НомерСтроки = НомерСтроки + 1;

	КонецЦикла;
	
	ВыборкаСтрокУслуги = Шапка.Услуги.Выбрать();
	Пока ВыборкаСтрокУслуги.Следующий() Цикл

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокУслуги);
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		ТабДокумент.Вывести(ОбластьМакета);

		Сумма    = Сумма    + ВыборкаСтрокУслуги.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокУслуги.СуммаНДС;
		НомерСтроки = НомерСтроки + 1;

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС"));
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьОтчетаКомиссионера()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если ИмяМакета = "Накладная" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОтчетаКомиссионера();
		
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Накладная","Отчет комиссионера");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполниение табличной части.
//
// Параметры:
//  ДокументПередачи - ссылка на документ основание.
//
Процедура ЗаполнитьТовары(ДокументПередачи = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПередачи", ДокументПередачи);
	Запрос.УстановитьПараметр("Счет45",           ПланыСчетов.Хозрасчетный.ТоварыОтгруженные);
	Запрос.УстановитьПараметр("Счет004",          ПланыСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию);
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.КоличествоМест,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.Коэффициент,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	РеализацияТоваровУслугТовары.СуммаНДС,
	|	РеализацияТоваровУслугТовары.ПереданныеСчетУчета КАК СчетУчета,
	|	РеализацияТоваровУслугТовары.НомерГТД,
	|	РеализацияТоваровУслугТовары.СтранаПроисхождения
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументПередачи И
	|	РеализацияТоваровУслугТовары.ПереданныеСчетУчета В ИЕРАРХИИ(&Счет45)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.КоличествоМест,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.Коэффициент,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	РеализацияТоваровУслугТовары.СуммаНДС,
	|	РеализацияТоваровУслугТовары.ПереданныеСчетУчета,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументПередачи И
	|	РеализацияТоваровУслугТовары.ПереданныеСчетУчета В ИЕРАРХИИ(&Счет004)";
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", Истина, Истина);

		Если ДокументПередачи = Неопределено Тогда
			СтрокаТабличнойЧасти.Количество   = Выборка.Количество;
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Иначе
			СтрокаТабличнойЧасти.Количество   = Выборка.Количество;
			СтрокаТабличнойЧасти.СтавкаНДС    = Выборка.СтавкаНДС;

		КонецЕсли;

		СтрокаТабличнойЧасти.ЕдиницаИзмерения    = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент         = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.КоличествоМест      = Выборка.КоличествоМест;
		СтрокаТабличнойЧасти.НомерГТД            = Выборка.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхождения = Выборка.СтранаПроисхождения;

		Если НЕ ДокументПередачи.СуммаВключаетНДС Тогда
			СуммаКПересчету = Выборка.Сумма + Выборка.СуммаНДС
		Иначе
			СуммаКПересчету = Выборка.Сумма;
		КонецЕсли;

		Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаКПересчету, ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, 
		                                   КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                   КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

		СтрокаТабличнойЧасти.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
		                                   Истина, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.ЦенаПередачи  = СтрокаТабличнойЧасти.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда

			СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения * СтрокаТабличнойЧасти.Сумма / 100;
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
								                                              УчитыватьНДС, СуммаВключаетНДС,
								                                              УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));

		КонецЕсли;

		СтрокаТабличнойЧасти.СчетУчета = Выборка.СчетУчета;

		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", Истина, Истина);

	КонецЦикла; // Пока Выборка.Следующий() Цикл

КонецПроцедуры // ЗаполнитьТоварыУпр()

// Заполняет счета в строке табличной части
//
Процедура ЗаполнитьСчета(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, Заполнять, МетаданныеДокумента, ТолькоДоходы)

	Если Заполнять = Истина Тогда

		Если НЕ ТолькоДоходы Тогда
			СтрокаТЧ.СчетУчета  = СчетаУчета.СчетПередачи;
		КонецЕсли;

		СтрокаТЧ.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;

		СтрокаТЧ.СчетДоходов  = СчетаУчета.СчетДоходов;
		СтрокаТЧ.СчетРасходов = СчетаУчета.СчетРасходов;

		Если СтрокаТЧ.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
			СтрокаТЧ.Субконто = Новый(СтрокаТЧ.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
			Если ТипЗнч(СтрокаТЧ.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				СтрокаТЧ.Субконто = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
			КонецЕсли;
		Иначе
			СтрокаТЧ.Субконто = Неопределено;
		КонецЕсли;
		

	ИначеЕсли Заполнять = Ложь Тогда

		СтрокаТЧ.СчетУчета    = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.СчетДоходов  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.СчетРасходов = ПланыСчетов.Хозрасчетный.ПустаяСсылка();;
		СтрокаТЧ.Субконто     = Неопределено;

	КонецЕсли;

КонецПроцедуры

// Заполняет счета в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, Заполнять, ТолькоДоходы = Ложь) Экспорт

	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	ЗаполнитьСчета(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, Заполнять, МетаданныеДокумента, ТолькоДоходы);
		
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, Заполнять) Экспорт

	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, Заполнять)
	КонецЦикла

КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаРасчетов(СчетаУчета = неопределено) Экспорт
	
    Если СчетаУчета = неопределено Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	КонецЕсли;
	СчетУчетаРасчетовСКонтрагентом          = СчетаУчета.СчетРасчетовПокупателя;
	СчетУчетаРасчетовПоАвансамПолученным	= СчетаУчета.СчетАвансовПокупателя;
	СчетУчетаРасчетовЗаПосредническиеУслуги = СчетаУчета.СчетРасчетов;
	СчетУчетаРасчетовПоАвансамВыданным      = СчетаУчета.СчетАвансов;
	
	СчетУчетаНДС                            = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;

КонецПроцедуры // ЗаполнитьСчетаУчетаРасчетов()

Процедура ЗаполнитьСчетаВСтрокеУслуг(СтрокаТЧ, СчетаУчета, Заполнять, МетаданныеДокумента) Экспорт

	МетаданныеДокумента = Метаданные();

	Если Заполнять = Истина Тогда

		СтрокаТЧ.СчетДоходов  = СчетаУчета.СчетДоходов;
		СтрокаТЧ.СчетРасходов = СчетаУчета.СчетРасходов;
		СтрокаТЧ.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;

		Если СтрокаТЧ.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
			СтрокаТЧ.Субконто = Новый(СтрокаТЧ.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
			Если ТипЗнч(СтрокаТЧ.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				СтрокаТЧ.Субконто = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
			КонецЕсли;
		Иначе
			СтрокаТЧ.Субконто = Неопределено;
		КонецЕсли;

	ИначеЕсли Заполнять = Ложь Тогда

		СтрокаТЧ.СчетДоходов  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.СчетРасходов = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.Субконто     = Неопределено;
		СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.ПустаяСсылка()

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаВСтрокеУслуг

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, Заполнять) Экспорт

	СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	МетаданныеДока = Метаданные();

	ЗаполнитьСчетаВСтрокеУслуг(СтрокаТЧ, СчетаУчета, Заполнять, МетаданныеДока);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги()

Процедура ЗаполнитьСчетаУчетаВТабЧастиУслуги(Заполнять) Экспорт

	Для каждого СтрокаТЧ Из Услуги Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, Заполнять)
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧастиУслуги()
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.СчетРасходов.Имя = "КорСчетСписания";

	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписания1");
	//ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");

	ТаблицаТоваров.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаТоваров.Колонки.Добавить("КорПодразделениеОрганизации");

	ТаблицаТоваров.Колонки.Добавить("ОтражениеВУСН");
	ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.Принимаются,        "ОтражениеВУСН");
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                                 "Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,        "Организация");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");

	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорПодразделениеОрганизации");

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.КорСубконтоСписания1 = СтрокаТаблицы.Субконто;

	КонецЦикла;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
								  ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	//ПодготовитьТаблицуУслугРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	//ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуУслуг()

Функция ПодготовитьТаблицуУслугКомиссионера(СтруктураШапкиДокумента)
	Запрос = Новый Запрос;
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		Запрос.Текст = 		
			"ВЫБРАТЬ
			|	СУММА(ОтчетКомиссионераОПродажахТовары.СуммаВознаграждения) КАК Сумма,
			|	СУММА(ОтчетКомиссионераОПродажахТовары.СуммаНДСВознаграждения) КАК НДС,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СтавкаНДСВознаграждения КАК СтавкаНДС,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СчетУчетаЗатрат КАК СчетЗатрат,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СчетУчетаНДС,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто1,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто2,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто3,
			|	ОтчетКомиссионераОПродажахТовары.Номенклатура,
			|	ОтчетКомиссионераОПродажахТовары.Субконто КАК НоменклатурнаяГруппа,
			|	ОтчетКомиссионераОПродажахТовары.СчетУчета,
			|	ОтчетКомиссионераОПродажахТовары.СчетДоходов
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
			|ГДЕ
			|	ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СтавкаНДСВознаграждения,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СчетУчетаЗатрат,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СчетУчетаНДС,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто1,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто2,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто3,
			|	ОтчетКомиссионераОПродажахТовары.Номенклатура,
			|	ОтчетКомиссионераОПродажахТовары.Субконто,
			|	ОтчетКомиссионераОПродажахТовары.СчетУчета,
			|	ОтчетКомиссионераОПродажахТовары.СчетДоходов
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СУММА(ОтчетКомиссионераОПродажахТовары.СуммаВознаграждения) КАК Сумма,
			|	СУММА(ОтчетКомиссионераОПродажахТовары.СуммаНДСВознаграждения) КАК НДС,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СтавкаНДСВознаграждения КАК СтавкаНДС,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СчетУчетаЗатрат КАК СчетЗатрат,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СчетУчетаНДС,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто1,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто2,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто3,
			|	ОтчетКомиссионераОПродажахТовары.Номенклатура,
			|	ОтчетКомиссионераОПродажахТовары.Субконто КАК НоменклатурнаяГруппа,
			|	NULL,
			|	ОтчетКомиссионераОПродажахТовары.СчетДоходов
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах.Услуги КАК ОтчетКомиссионераОПродажахТовары
			|ГДЕ
			|	ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СтавкаНДСВознаграждения,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СчетУчетаЗатрат,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СчетУчетаНДС,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто1,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто2,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто3,
			|	ОтчетКомиссионераОПродажахТовары.Номенклатура,
			|	ОтчетКомиссионераОПродажахТовары.Субконто,
			|	ОтчетКомиссионераОПродажахТовары.СчетДоходов";
		
	Иначе
	// }УчетДоходовИРасходовИП
		Запрос.Текст = 		
			"ВЫБРАТЬ
			|	СУММА(ОтчетКомиссионераОПродажахТовары.СуммаВознаграждения) КАК Сумма,
			|	СУММА(ОтчетКомиссионераОПродажахТовары.СуммаНДСВознаграждения) КАК НДС,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СтавкаНДСВознаграждения КАК СтавкаНДС,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СчетУчетаЗатрат КАК СчетЗатрат,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СчетУчетаНДС,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто1,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто2,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто3
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
			|
			|ГДЕ
			|	ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СтавкаНДСВознаграждения,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СчетУчетаЗатрат,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СчетУчетаНДС,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто1,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто2,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто3
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СУММА(ОтчетКомиссионераОПродажахТовары.СуммаВознаграждения) КАК Сумма,
			|	СУММА(ОтчетКомиссионераОПродажахТовары.СуммаНДСВознаграждения) КАК НДС,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СтавкаНДСВознаграждения КАК СтавкаНДС,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СчетУчетаЗатрат КАК СчетЗатрат,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СчетУчетаНДС,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто1,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто2,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто3
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах.Услуги КАК ОтчетКомиссионераОПродажахТовары
			|
			|ГДЕ
			|	ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СтавкаНДСВознаграждения,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СчетУчетаЗатрат,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.СчетУчетаНДС,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто1,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто2,
			|	ОтчетКомиссионераОПродажахТовары.Ссылка.Субконто3";
	// {УчетДоходовИРасходовИП
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	
	РезультатЗапросаПоУслугам = Запрос.Выполнить().Выгрузить(); //ОбходРезультатаЗапроса.Прямой
	Возврат РезультатЗапросаПоУслугам;
КонецФункции // ПодготовитьТаблицуУслуг()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента,Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов, СпособРасчетаКомиссионногоВознаграждения");

	СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
	СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовЗаПосредническиеУслуги");
	СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
	
	// Зачет авансов
	СтруктураОбязательныхПолей.Вставить("СпособЗачетаАвансов");
	Если (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически)
		ИЛИ (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу) Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансамПолученным");
	КонецЕсли;
	// Зачет авансов по вознаграждению
	Если (СтруктураШапкиДокумента.СпособЗачетаАвансовПоВознаграждению = Перечисления.СпособыЗачетаАвансов.Автоматически) Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансамВыданным");
	КонецЕсли;

	Если СуммаВознаграждения > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаЗатрат");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления
		Или СтруктураШапкиДокумента.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДСВознаграждения");
	КонецЕсли;
    
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(
		Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, СтавкаНДС");

	СтруктураОбязательныхПолей.Вставить("СчетУчета");
	СтруктураОбязательныхПолей.Вставить("СчетДоходов");
	СтруктураОбязательныхПолей.Вставить("СчетРасходов");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
										""" табличной части ""Товары"": ";
		
		// {УчетДоходовИРасходовИП
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя 
			И НЕ СтруктураШапкиДокумента.СчетаСНоменклатурнымиГруппами.Найти(СтрокаТЧ.СчетДоходов) = Неопределено 
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.Субконто) 
			Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Субконто""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		// }УчетДоходовИРасходовИП
		
		Если УчитыватьНДС 
			И СтрокаТЧ.НДС <> 0 Тогда
			Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДСПоРеализации) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС по реализации""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоУслугам        - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		Если ТаблицаПоУслугам.Количество() > 0 Тогда
			Сообщить("Документ передачи на комиссию не может содержать услуг!");
		КонецЕсли;

	КонецЕсли;

	// Укажем, что надо проверить:
	Если СтруктураШапкиДокумента.РазрешитьУчетУслугБезПлановыхЦен Тогда
		СтруктураОбязательныхПолей = Новый Структура("Сумма, СчетДоходов, СчетРасходов");
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("Сумма, СчетДоходов" );
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Для Каждого СтрокаТЧ Из ТаблицаПоУслугам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Услуги"": ";

		Если УчитыватьНДС 
			И СтрокаТЧ.НДС <> 0
			И Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДСПоРеализации) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС по реализации""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;

		// {УчетДоходовИРасходовИП
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя 
			И Не СтруктураШапкиДокумента.СчетаСНоменклатурнымиГруппами.Найти(СтрокаТЧ.СчетДоходов) = Неопределено 
			И Не ЗначениеЗаполнено(СтрокаТЧ.Субконто) 
			Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Субконто""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		// }УчетДоходовИРасходовИП

	КонецЦикла;

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства(ТаблицаПоДенежнымСредствам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидОтчетаПоПлатежам, Сумма, СтавкаНДС");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДенежныеСредства", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоУслугамКомиссионера, ТаблицаПоДенежнымСредствам, 
	ТаблицаЗачетаАвансов, ТаблицаЗачетаАвансовПоВознаграждению, Отказ, Заголовок)

	ВидыСубконтоСчетов = Новый Соответствие; // кэш видов субконто
	
	ПоддержкаПБУ18 = СтруктураШапкиДокумента.ПрименениеПБУ18;
	
	//Подготовка структуры для движений по реализации товаров комиссионером
	
	СтруктураШапкиДляВыручки = Новый Структура();
	Для каждого Параметр из СтруктураШапкиДокумента цикл
		Если Параметр.Ключ = "СчетУчетаРасчетовЗаПосредническиеУслуги" или Параметр.Ключ = "СчетУчетаРасчетовПоАвансамВыданным" тогда
			Продолжить;
		ИначеЕсли Параметр.Ключ = "СчетУчетаРасчетовПоАвансамПолученным" тогда
			СтруктураШапкиДляВыручки.Вставить("СчетУчетаРасчетовПоАвансам",Параметр.Значение);
		Иначе
			СтруктураШапкиДляВыручки.Вставить(Параметр.Ключ,Параметр.Значение);
		КонецЕслИ;
	КонецЦикла;
	СтруктураШапкиДляВыручки.Вставить("ВидОперации","РеализацияТоваров");
	
	Если СтруктураШапкиДокумента.УдержатьВознаграждение Тогда
		СуммаУменьшенияЗачетаАванса   = ТаблицаПоУслугамКомиссионера.Итог("СуммаВал") 
			+ ?((НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость), ТаблицаПоУслугамКомиссионера.Итог("НДСВал"), 0);
		СуммаУменьшенияЗачетаАвансаБУ = ТаблицаПоУслугамКомиссионера.Итог("Сумма") 
			+ ?((НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость), ТаблицаПоУслугамКомиссионера.Итог("НДС"), 0);
	Иначе
		СуммаУменьшенияЗачетаАванса   = 0;
		СуммаУменьшенияЗачетаАвансаБУ = 0;
	КонецЕсли;
	
	СтруктураШапкиДляВыручки.Вставить("СуммаУменьшенияЗачетаАванса",   СуммаУменьшенияЗачетаАванса);
	СтруктураШапкиДляВыручки.Вставить("СуммаУменьшенияЗачетаАвансаБУ", СуммаУменьшенияЗачетаАвансаБУ);
	
	ТаблицыДокументаПоРеализации = Новый Структура("ТаблицаПоТоварам, ТаблицаПоУслугам", ТаблицаПоТоварам, ТаблицаПоУслугам);
	
	ТаблицаРасчетовПоРеализации = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
		СтруктураШапкиДляВыручки, ТаблицыДокументаПоРеализации, ТаблицаЗачетаАвансов, 
		Движения.Хозрасчетный, Истина, Отказ, Заголовок);
	
	ДвиженияПоРеализацииТоваров(СтруктураШапкиДляВыручки, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоУслугамКомиссионера, ТаблицаРасчетовПоРеализации,
		Отказ, Заголовок);
	
	//Подготовка структуры для движений по комиссионному вознаграждению
	
	СтруктураШапкиДляВознаграждения = Новый Структура();
	
	СтруктураШапкиДляВознаграждения.Вставить("СуммаУменьшенияЗачетаАванса",   СуммаУменьшенияЗачетаАванса);
	СтруктураШапкиДляВознаграждения.Вставить("СуммаУменьшенияЗачетаАвансаБУ", СуммаУменьшенияЗачетаАвансаБУ);
	Для каждого Параметр из СтруктураШапкиДокумента цикл
		Если Параметр.Ключ = "СчетУчетаРасчетовПоАвансамПолученным" тогда
			Продолжить;
		ИначеЕсли  Параметр.Ключ = "СчетУчетаРасчетовСКонтрагентом" тогда
			СтруктураШапкиДляВознаграждения.Вставить("СчетУчетаРасчетовПоРеализацииТоваров",Параметр.Значение);
		ИначеЕсли Параметр.Ключ = "СчетУчетаРасчетовПоАвансамВыданным" тогда
			СтруктураШапкиДляВознаграждения.Вставить("СчетУчетаРасчетовПоАвансам",Параметр.Значение);
		ИначеЕсли Параметр.Ключ = "СчетУчетаРасчетовЗаПосредническиеУслуги"  тогда
			СтруктураШапкиДляВознаграждения.Вставить("СчетУчетаРасчетовСКонтрагентом",Параметр.Значение);
		ИначеЕсли Параметр.Ключ = "СпособЗачетаАвансов"  тогда
			Продолжить;
		ИначеЕсли Параметр.Ключ = "СпособЗачетаАвансовПоВознаграждению"  тогда
			СтруктураШапкиДляВознаграждения.Вставить("СпособЗачетаАвансов",Параметр.Значение);
		Иначе
			СтруктураШапкиДляВознаграждения.Вставить(Параметр.Ключ,Параметр.Значение);
		КонецЕслИ;
	КонецЦикла;
	СтруктураШапкиДляВознаграждения.Вставить("ВидОперации","КомиссионноеВознаграждение");
	
	ТаблицыДокументаПоПриобретению = Новый Структура("ТаблицаПоУслугамКомиссионера", ТаблицаПоУслугамКомиссионера);
	
	ТаблицаРасчетовПоПриобретению = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
		СтруктураШапкиДляВознаграждения, ТаблицыДокументаПоПриобретению, ТаблицаЗачетаАвансовПоВознаграждению, 
		Движения.Хозрасчетный, СтруктураШапкиДокумента.НДСВключенВСтоимость, Отказ, Заголовок);
		
	Если СтруктураШапкиДокумента.УдержатьВознаграждение И
		(СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) Тогда
		К_ЕНВД = ?(ТаблицаРасчетовПоРеализации.Итог("СуммаВзаиморасчетов") = 0, 0, ТаблицаРасчетовПоРеализации.Итог("СуммаВзаиморасчетовЕНВД") / ТаблицаРасчетовПоРеализации.Итог("СуммаВзаиморасчетов")); 
		К_Комитента = ?(ТаблицаРасчетовПоРеализации.Итог("СуммаВзаиморасчетов") = 0, 0, ТаблицаРасчетовПоРеализации.Итог("СуммаВзаиморасчетовКомитента") / ТаблицаРасчетовПоРеализации.Итог("СуммаВзаиморасчетов")); 
		Для Каждого СтрокаУслуг Из ТаблицаРасчетовПоПриобретению Цикл
			СтрокаУслуг.СуммаВзаиморасчетовЕНВД 		= СтрокаУслуг.СуммаВзаиморасчетов * К_ЕНВД;
			СтрокаУслуг.СуммаВзаиморасчетовКомитента 	= СтрокаУслуг.СуммаВзаиморасчетов * К_Комитента;
		КонецЦикла
	КонецЕсли;
		
	ДвиженияПоПриобретениюУслуг(СтруктураШапкиДляВознаграждения, ТаблицаПоУслугамКомиссионера, ТаблицаПоТоварам, ТаблицаРасчетовПоПриобретению, 
		Отказ, Заголовок);	
	
	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);

	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаРасчетовПоПриобретению, ТаблицаРасчетовПоРеализации, ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРеализацииТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоУслугамКомиссионера, ТаблицаРасчетовПоРеализации, Отказ, Заголовок)
	
	ДатаДока = Дата;
	Проводки = Движения.Хозрасчетный;

	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТоварам, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, , "Реализация товаров, переданных на комиссию");
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ДвиженияРегистровПодсистемыНДСРеализация(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено, Отказ, Заголовок, Истина);
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, СтруктураШапкиДокумента.Организация);
		
		ДоходыИРасходыПредпринимателя.СписаниеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитика, 1, ТаблицаПоТоварам, "Субконто", "СчетУчета",,, "СчетДоходов", Отказ);
		ДоходыИРасходыПредпринимателя.ЗачетОплатыПокупателя(ЭтотОбъект, СтруктураШапкиДокумента, Движения.ИПМПЗОтгруженные.Выгрузить(), ТаблицаРасчетовПоРеализации);
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	//////////////////////////////////////////////////////////	
	//Распределение выручки по товарам по партиям
	СтруктураТаблицыВыручки = Новый Структура("Номенклатура, Количество, ВидЦенности, Ценность, Партия, 
		|СчетУчетаНДСПоРеализации, СчетУчета, СчетДоходов, Субконто, СтавкаНДС, Сумма, СуммаБУ, СуммаНУ, СуммаВал, 
		|НДС, НДСВал, СуммаБезНДС, СуммаБУБезНДС, СуммаБезНДСВал, Комиссионный, Комитент, ДоговорКомиссии,
		|СчетРасчетовСКомитентом, ВалютаРасчетовСКомитентом, СуммаСписания, Услуга");

	//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
	ТаблицаВыручки = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоУслугам,СтруктураТаблицыВыручки,,Истина);
	ТаблицаВыручки.ЗаполнитьЗначения(Ложь, "Комиссионный");
	// Для дальнейшей работы количество по услугам интереса не представляет.
	ТаблицаВыручки.ЗаполнитьЗначения(0,    "Количество");
	ТаблицаВыручки.ЗаполнитьЗначения(Истина,    "Услуга");
	//Дополним данными по таблице товаров с распределением по партиям
	
	//Развернем таблицу товаров по партиям для распределения выручки.
	ВыручкаПоТоварам = ТаблицаВыручки.СкопироватьКолонки();
	
	СписокРаспределяемыхКолонок = Новый Структура("Количество,Сумма,СуммаБУ,СуммаНУ,СуммаВал,НДС,НДСВал,СуммаБезНДС,СуммаБУБезНДС,СуммаБезНДСВал");

	Для каждого СтрокаТаблицыТоваров Из ТаблицаПоТоварам Цикл 

		ТаблицаПартий = СтрокаТаблицыТоваров.СписанныеПартии;

		Для каждого Партия из ТаблицаПартий Цикл

			СтрокаТаблицыВыручки = ВыручкаПоТоварам.Добавить();

			Если Партия.Комиссионный тогда
				ПараметрыПартии = УправлениеВзаиморасчетами.ПараметрыРасчетовСКомитентом(Партия.Партия, Отказ, Заголовок);
			КонецЕсли;

			Для каждого Колонка из ВыручкаПоТоварам.Колонки Цикл

				Если СписокРаспределяемыхКолонок.Свойство(Колонка.Имя) тогда
					СтрокаТаблицыВыручки[Колонка.Имя]= Партия.Количество * 10;

				ИначеЕсли Не(ТаблицаПартий.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
					СтрокаТаблицыВыручки[Колонка.Имя] = Партия[Колонка.Имя];
				
				ИначеЕсли Не(ТаблицаПоТоварам.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
					СтрокаТаблицыВыручки[Колонка.Имя] = СтрокаТаблицыТоваров[Колонка.Имя];

				Иначе

					Если Партия.Комиссионный тогда

						Если ПараметрыПартии.Свойство(Колонка.Имя) тогда
							СтрокаТаблицыВыручки[Колонка.Имя] = ПараметрыПартии[Колонка.Имя];
						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

	//Распределим выручку по партиям
	ВыручкаПоТоварам = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаПоТоварам,ВыручкаПоТоварам,СписокРаспределяемыхКолонок);
    ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВыручкаПоТоварам,ТаблицаВыручки );
	//Определение параметров учетной политики по отражению НДС с продажи
	
    УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация).МоментОпределенияНалоговойБазыНДС;
	
	//Фиксация выручки и НДС (проводки)
	Выручка = ТаблицаВыручки.Скопировать();
	Выручка.Свернуть("СчетУчетаНДСПоРеализации, СчетДоходов, Субконто, СтавкаНДС, Комиссионный, Комитент, ДоговорКомиссии,
		|СчетРасчетовСКомитентом, ВалютаРасчетовСКомитентом, Услуга, Номенклатура",
		"Сумма, СуммаБУ, СуммаНУ, СуммаВал, НДС, НДСВал,Количество");

	Для Каждого СтрокаТаблицы Из ТаблицаВыручки Цикл
		ОтражатьНДСКомитента = СтрокаТаблицы.Комиссионный И СтрокаТаблицы.ДоговорКомиссии.УчетАгентскогоНДС;
		Если ОтражатьНДСКомитента Тогда 
			СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент;
		КонецЕсли;
	КонецЦикла;
	
	// Формирование движений документа для подсистемы НДС
	ДвиженияРегистровПодсистемыНДСРеализация(СтруктураШапкиДокумента, ТаблицаВыручки, ТаблицаРасчетовПоРеализации, Отказ, Заголовок);

	Для Каждого СтрокаТаблицы из Выручка Цикл

		// Выручка
		Если СтрокаТаблицы.СуммаБУ = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Проводки.Добавить();

		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;

		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;

		КонецЕсли;

		Если СтрокаТаблицы.Комиссионный = Ложь тогда
			Проводка.СчетКт = СтрокаТаблицы.СчетДоходов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,           СтрокаТаблицы.Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РеализуемыеАктивы", СтрокаТаблицы.Номенклатура);
			Если Проводка.СчетКт.Количественный Тогда
				Проводка.КоличествоКт = СтрокаТаблицы.Количество;  
			КонецЕсли;
			Проводка.Содержание = "Реализация " + ?(СтрокаТаблицы.Услуга, "услуг", "товаров, переданных на комиссию");
			
		Иначе
			Проводка.СчетКт = СтрокаТаблицы.СчетРасчетовСКомитентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",        СтрокаТаблицы.Комитент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",           СтрокаТаблицы.ДоговорКомиссии);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
			Проводка.Содержание = "Реализация " + ?(СтрокаТаблицы.Услуга, "услуг агентом", "товаров, переданных на комиссию");
			Если Проводка.СчетКт.Валютный Тогда
				
				ДанныеОВалютеРасчетовСКомитентом = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаТаблицы.ВалютаРасчетовСКомитентом,СтруктураШапкиДокумента.Дата);

				Проводка.ВалютаКт        = СтрокаТаблицы.ВалютаРасчетовСКомитентом;
				Проводка.ВалютнаяСуммаКт = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма
											,мВалютаРегламентированногоУчета,СтрокаТаблицы.ВалютаРасчетовСКомитентом
											,1,ДанныеОВалютеРасчетовСКомитентом.Курс
											,1,ДанныеОВалютеРасчетовСКомитентом.Кратность);
				СтрокаТаблицы.СуммаВал   = Проводка.ВалютнаяСуммаКт;
			КонецЕслИ;
		КонецЕсли;

		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			СуммаНУДт = СтрокаТаблицы.СуммаНУ + СтрокаТаблицы.НДС;
			СуммаНУКт = ?(СтрокаТаблицы.Комиссионный, СуммаНУДт, СтрокаТаблицы.СуммаНУ);
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
				СуммаНУДт, СуммаНУКт, Проводка.Сумма - СуммаНУДт, Проводка.Сумма - СуммаНУДт, , , 
				Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
			
		КонецЕсли;
		
		// НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 и (СтрокаТаблицы.Комиссионный=Ложь) Тогда

			Проводка = Проводки.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = СтрокаТаблицы.НДС;
			Проводка.Содержание = "Реализация " + ?(СтрокаТаблицы.Услуга, "услуг", "товаров, переданных на комиссию");

			Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,           СтрокаТаблицы.Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет",Перечисления.ВидыПлатежейВГосБюджет.Налог);

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
		КонецЕсли;

	КонецЦикла;

	УчетНДСФормированиеДвижений.ОтразитьНДСНалоговогоАгентаКомиссионер(СтруктураШапкиДокумента, Выручка, Движения);
	
	// Учет реализованных услуг
	ДвиженияПоРегиструРеализацияУслуг(СтруктураШапкиДокумента, ДатаДока, ТаблицаПоУслугам);
	
КонецПроцедуры

Процедура ДвиженияПоРегиструРеализацияУслуг(СтруктураШапкиДокумента, ДатаДока, ТаблицаПоУслугам)
	
	Если НЕ СтруктураШапкиДокумента.РазрешитьУчетУслугБезПлановыхЦен Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРеализацияУслуг = Движения["РеализацияУслуг"];
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		Если Лев(СтрокаТаблицы.СчетРасходов.Код, 2) = "91" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения                       = ДвиженияРеализацияУслуг.Добавить();
		СтрокаДвижения.Период                = ДатаДока;
		СтрокаДвижения.Организация           = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.СчетРасходов          = СтрокаТаблицы.СчетРасходов;
		СтрокаДвижения.НоменклатурнаяГруппа  = СтрокаТаблицы.Субконто;
		// {ОбособленныеПодразделения
		СтрокаДвижения.Подразделение         = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		// }ОбособленныеПодразделения
		СтрокаДвижения.Сумма                 = СтрокаТаблицы.Сумма;
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРеализацииТоваров
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
// для операций реализации товаров по комиссии
Процедура ДвиженияРегистровПодсистемыНДСРеализация(СтруктураШапкиДокумента, ТаблицаВыручки, ТаблицаАвансов, Отказ, Заголовок, ОтработкаДвиженийПоПартиям= Ложь)

	Если Не ОтработкаДвиженийПоПартиям И СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если ОтработкаДвиженийПоПартиям Тогда
		Если ТаблицаВыручки.Количество() = 0 Тогда
			//Отработка по партиям НДС не требуется. 
			Возврат;
		КонецЕсли; 
		
		/////////////////////////////////////////////////////////////////////////////////
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		ТаблицаНДСПартииСписания = УчетНДС.ПодготовитьТаблицуСписанияПартийДляНДС(СтруктураШапкиДокумента, ТаблицаВыручки, Отказ, Заголовок);
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		/////////////////////////////////////////////////////////////////////////////////
		
		Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
			//Партии не найдены или отражение в партионном учете НДС не производится.
			//Дальнейшая обработка не требуется
		    Возврат;
		КонецЕсли; 
		
		
		ТаблицаДвиженийПартии = Движения.НДСПоПриобретеннымЦенностям.ВыгрузитьКолонки();
		Движения.НДСПоПриобретеннымЦенностям.мПериод          = Дата;
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии,Истина,Движения.Хозрасчетный,Заголовок, Движения);
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии,Ложь,Движения.Хозрасчетный,Заголовок, Движения);
		
		// Занесем в регистр переквалификацию партий (включение/исключение НДС из стоимости)
		Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
			Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
			Движения.НДСПоПриобретеннымЦенностям.ВыполнитьПриход();
		КонецЕсли;
		// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
		/////////////////////////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////////////////////
		// Отработка предположения ставки 0% по НДС покупки.
		УчетНДСФормированиеДвижений.ОтразитьПредположениеСтавки0(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии, Движения.Хозрасчетный,Заголовок, Движения);
		// Отработка предположения ставки 0% по НДС покупки.
		/////////////////////////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС по партиям - отразить непосредственное списание.
		ТаблицаДвиженийПартии.Очистить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
		Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
		Движения.НДСПоПриобретеннымЦенностям.ВыполнитьРасход();
		// НДС по партиям - отразить непосредственное списание.
		/////////////////////////////////////////////////////////////////////////////////
		
		//Все необходимые действия на данном этапе отработаны.
	Иначе
	
		Если СтруктураШапкиДокумента.УчитыватьНДС Тогда

			УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			СчетОтнесенияНДС = ПланыСчетов.Хозрасчетный.НДС;
			
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ, СчетОтнесенияНДС, ТаблицаАвансов);
			
		КонецЕсли;
		
	КонецЕсли; 
 	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДСРеализация()

Процедура ДвиженияПоПриобретениюУслуг(СтруктураШапкиДокумента, ТаблицаПоУслугамКомиссионера, ТаблицаПоТоварам, ТаблицаРасчетовПоПриобретению, Отказ, Заголовок)
	
	ДатаДока   = Дата;
	Проводки = Движения.Хозрасчетный;

	Если СтруктураШапкиДокумента.УдержатьВознаграждение Тогда
		
		СуммаУменьшенияЗачетаАванса   = СтруктураШапкиДокумента.СуммаУменьшенияЗачетаАванса;
		СуммаУменьшенияЗачетаАвансаБУ = СтруктураШапкиДокумента.СуммаУменьшенияЗачетаАвансаБУ;
			
		Если СуммаУменьшенияЗачетаАвансаБУ > 0 Тогда
			
			Проводка = Проводки.Добавить();

			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Вознаграждение комиссионера";
			Проводка.Сумма        = СуммаУменьшенияЗачетаАвансаБУ;

			Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Ссылка);
			
			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовПоРеализацииТоваров;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СуммаУменьшенияЗачетаАванса;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовПоРеализацииТоваров.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СуммаУменьшенияЗачетаАванса;
			КонецЕсли;
			
			Если (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) И (ТаблицаРасчетовПоПриобретению.Итог("СуммаВзаиморасчетовЕНВД") <> 0) Тогда

				К_ЕНВД = ?(ТаблицаРасчетовПоПриобретению.Итог("СуммаВзаиморасчетов") = 0, 0, ТаблицаРасчетовПоПриобретению.Итог("СуммаВзаиморасчетовЕНВД")/ТаблицаРасчетовПоПриобретению.Итог("СуммаВзаиморасчетов"));
				
				Проводка = Проводки.Добавить();
				
				Проводка.Период       	= Дата;
				Проводка.Организация  	= СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  	= "Уменьшение задолженности по деятельности ЕНВД";
	            Проводка.Сумма 			= СуммаУменьшенияЗачетаАвансаБУ * К_ЕНВД; 
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.СчетКт          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД;
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СуммаУменьшенияЗачетаАванса * К_ЕНВД;
				Иначе
					Проводка.СчетКт          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				Конецесли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
			КонецЕсли;
			
			Если (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) И (ТаблицаРасчетовПоПриобретению.Итог("СуммаВзаиморасчетовКомитента") <> 0) Тогда
				
				К_Комитента = ?(ТаблицаРасчетовПоПриобретению.Итог("СуммаВзаиморасчетов") = 0, 0, ТаблицаРасчетовПоПриобретению.Итог("СуммаВзаиморасчетовКомитента")/ТаблицаРасчетовПоПриобретению.Итог("СуммаВзаиморасчетов"));
								
				Проводка = Проводки.Добавить();
			
				Проводка.Период       	= Дата;
				Проводка.Организация  	= СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   	= "Уменьшение задолженности за товары и услуги комитента";
	            Проводка.Сумма 			= СуммаУменьшенияЗачетаАвансаБУ * К_Комитента; 
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.СчетКт          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент;
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СуммаУменьшенияЗачетаАванса * К_Комитента;
				Иначе
					Проводка.СчетКт          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Конецесли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
			КонецЕсли;
			
			// {УчетДоходовИРасходовИП
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
				УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, СтруктураШапкиДокумента.Организация);
				
				Для каждого МПЗ из ТаблицаПоУслугамКомиссионера Цикл
		
					Если МПЗ.СуммаБезНДС = 0 Тогда
						Продолжить;
					КонецЕсли;
												
					СтатьяЗатрат = ДоходыИРасходыПредпринимателя.НайтиСсылкуВСтроке(ТаблицаПоУслугамКомиссионера, МПЗ, "Субконто", 2);
					ХарактерДеятельности = ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, МПЗ.СчетУчета,, МПЗ.СчетДоходов, УчетнаяПолитика);
					НоменклатурнаяГруппа = ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации(Ложь,,МПЗ.НоменклатурнаяГруппа,, УчетнаяПолитика);
							
					Движение = Движения.ИПИныеМатериальныеРасходы.ДобавитьПриход();
					Движение.Период = СтруктураШапкиДокумента.Дата;
					Движение.Организация = СтруктураШапкиДокумента.Организация;
					Движение.ХарактерДеятельности = ХарактерДеятельности;
					Движение.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
					Движение.СтатьяЗатрат = СтатьяЗатрат;
					Движение.Партия = СтруктураШапкиДокумента.Ссылка;
					Движение.ДокументОплаты = СтруктураШапкиДокумента.Ссылка;
					Движение.РеквизитыДокументаОплаты = ДоходыИРасходыПредпринимателя.РеквизитыДокументаОплаты(СтруктураШапкиДокумента.Ссылка);
					Движение.Количество = 1;
					Движение.Сумма = МПЗ.СуммаБезНДС;
					Движение.НДС = МПЗ.НДС;
					
					Движение = Движения.ИПИныеМатериальныеРасходы.ДобавитьРасход();
					Движение.Период = СтруктураШапкиДокумента.Дата;
					Движение.Организация = СтруктураШапкиДокумента.Организация;
					Движение.ХарактерДеятельности = ХарактерДеятельности;
					Движение.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
					Движение.СтатьяЗатрат = СтатьяЗатрат;
					Движение.Партия = СтруктураШапкиДокумента.Ссылка;
					Движение.ДокументОплаты = СтруктураШапкиДокумента.Ссылка;
					Движение.Количество = 1;
					Движение.Сумма = МПЗ.СуммаБезНДС;
					Движение.НДС = МПЗ.НДС;
					
				КонецЦикла;
			КонецЕсли;
			// }УчетДоходовИРасходовИП
		КонецЕсли; 
	// {УчетДоходовИРасходовИП
	Иначе
		
		// Учет доходов и расходов предпринимателя
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, СтруктураШапкиДокумента.Организация);
		ТаблицаАвансовВрем = ТаблицаРасчетовПоПриобретению.Скопировать();
		ТаблицаПоУслугамКомиссионера.Колонки.Добавить("Количество");
		ТаблицаПоУслугамКомиссионера.ЗаполнитьЗначения(1, "Количество");
		ДоходыИРасходыПредпринимателя.ПоступлениеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитика, 1, ТаблицаПоУслугамКомиссионера, "СчетЗатрат", "Номенклатура", "Субконто", "Субконто", ТаблицаАвансовВрем);
	// }УчетДоходовИРасходовИП
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаПоУслугамКомиссионера Цикл
		
		Если СтрокаТаблицы.СуммаБУ <> 0 Тогда
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Вознаграждение комиссионера";
			
			СуммаБУ        = СтрокаТаблицы.СуммаБУ;
			Проводка.Сумма = СуммаБУ;
			
			Проводка.СчетДт       = СтрокаТаблицы.СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
			
			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Ссылка);
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
				Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
					СуммаНУ = СтрокаТаблицы.СуммаНУ + СтрокаТаблицы.НДС;
				Иначе
					СуммаНУ = СтрокаТаблицы.СуммаНУ;
				КонецЕсли;
				
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
					СуммаНУ, СуммаНУ, СуммаБУ - СуммаНУ, СуммаБУ - СуммаНУ, 0, 0,
					Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				
			КонецЕсли;
			
		КонецЕсли;

		// Проводки по НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда

			НалоговыйАгентЗаСчетСобственныхСредств = УчетНДС.НалоговыйАгентЗаСчетСобственныхСредств(СтрокаТаблицы.ВидЦенности);
			Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость тогда
				Проводка = Проводки.Добавить();

				Проводка.Период      = ДатаДока;

				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Реализация товаров, переданных на комиссию";

				Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СФПолученные",    СтруктураШапкиДокумента.Ссылка,Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент,Истина);

				Если Не НалоговыйАгентЗаСчетСобственныхСредств 
					Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
					// Проводка при исполнении обязанностей налогового агента
					Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.НДСВал;
					КонецЕсли;
				Иначе
					Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
				КонецЕсли;

				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
				Проводка.Сумма       = СтрокаТаблицы.НДС;
				
				Если СтруктураШапкиДокумента.УпрощенныйУчетНДС 
					И СтруктураШапкиДокумента.ПредъявленСчетФактура 
					И СтруктураШапкиДокумента.НДСПредъявленКВычету Тогда
					// Проводки по вычету в случае упрощенного учета НДС

					Проводка = Проводки.Добавить();

					Проводка.Период      = СтруктураШапкиДокумента.Дата;

					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Реализация товаров, переданных на комиссию";

					Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НДС; //68.02
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

					Проводка.СчетКт      = СтрокаТаблицы.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"СФПолученные", СтруктураШапкиДокумента.Ссылка, Истина, Заголовок);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент, Истина);

					Проводка.Сумма       = СтрокаТаблицы.НДС;
					
				КонецЕсли;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.УчетАгентскогоНДС
				И (Не НалоговыйАгентЗаСчетСобственныхСредств 
					Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате) Тогда 

				// Нужно дополнительно сформировать проводку по начислению НДС налогового агента
				Проводка2 = Проводки.Добавить();

				Проводка2.Период          = ДатаДока;
				Проводка2.Организация     = СтруктураШапкиДокумента.Организация;
				Проводка2.Содержание      = "Начислен НДС в качестве налогового агента";

				Проводка2.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Ссылка);
				
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка2.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка2.ВалютнаяСуммаДт = СтрокаТаблицы.НДСВал;
				КонецЕсли;
				
				Если Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
					Проводка2.СчетКт          = ПланыСчетов.Хозрасчетный.НДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				Иначе
					Проводка2.СчетКт          = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка2, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
				Проводка2.Сумма       = СтрокаТаблицы.НДС;
			КонецЕсли;

			
		КонецЕсли; // Проводки по НДС

	КонецЦикла;
	
	// Формирование движений документа для подсистемы НДС
	ДвиженияРегистровПодсистемыНДСПоступление(СтруктураШапкиДокумента, ТаблицаПоУслугамКомиссионера, ТаблицаРасчетовПоПриобретению, Отказ);
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоПриобретениюУслуг
// Формирует движения по регистру подсистемы учета НДС "НДСПокупки"
// для отражения поступления услуг от комиссионера
Процедура ДвиженияРегистровПодсистемыНДСПоступление(СтруктураШапкиДокумента, ТабЧасть, ТаблицаАвансов, Отказ)

	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСПредъявленномуПоставщиком(СтруктураШапкиДокумента, ТабЧасть, Движения, Отказ);
		ТабЧасть.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы, "ВидЦенности");
		Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
			УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТабЧасть, Движения, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если ТабЧасть.Количество()= 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
					
		ТаблицаАвансовДляНДС = ТаблицаАвансов.СкопироватьКолонки();
		Для Каждого СтрокаТаблицы Из ТаблицаАвансов Цикл
			Если СтрокаТаблицы.ДокументРасчетов <> СтруктураШапкиДокумента.Ссылка 
				Или СтруктураШапкиДокумента.УдержатьВознаграждение Тогда
				НоваяСтрока = ТаблицаАвансовДляНДС.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				Если НоваяСтрока.ДокументРасчетов = СтруктураШапкиДокумента.Ссылка Тогда
					НоваяСтрока.ДокументРасчетов = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТабЧасть, "ТаблицаПоУслугамКомиссионера", ТаблицаАвансовДляНДС, Движения, Отказ);
		
		Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШапкиДокумента, Движения.НДСПредъявленный.Выгрузить(), Движения);
		КонецЕсли;
		 
	КонецЕсли;
   	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДСПоступление()

// Процедура вызывается из тела процедуры ДвиженияПоПриобретениюУслуг
// Формирует движения по регистру подсистемы учета УСН
// для отражения поступления услуг от комиссионера
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаРасчетовПоПриобретению, ТаблицаРасчетовПоРеализации, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если НЕ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) Тогда
		Возврат;
	КонецЕсли;
	
	Если (НЕ (СтруктураШапкиДокумента.УдержатьВознаграждение ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы)) И (СуммаВознаграждения <> 0) Тогда
		
		//Отразим услугу
		Движения.РасходыПриУСН.Очистить();
		НаборДвижений = Движения.РасходыПриУСН;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Валюта 				= СтруктураШапкиДокумента.ВалютаДокумента;
		СтрокаДвижений.ДоговорКонтрагента 	= СтруктураШапкиДокумента.ДоговорКонтрагента;
		СтрокаДвижений.СтатусыПартийУСН		= Перечисления.СтатусыПартийУСН.Купленные;
		СтрокаДвижений.РасчетныйДокумент 	= СтруктураШапкиДокумента.Ссылка;
		СтрокаДвижений.ВидРасхода 			= Перечисления.ВидыРасходовУСН.Услуги;
		СтрокаДвижений.ОтражениеВУСН 		= Перечисления.ОтражениеВУСН.Принимаются;
		СтрокаДвижений.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
		
		СуммаНДСВознаграждения = СтруктураШапкиДокумента.Ссылка.Товары.Итог("СуммаНДСВознаграждения");
		
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		ВыделятьНДСУСН = ?(Отказ, Истина, УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
		Если ВыделятьНДСУСН Тогда
			СтрокаДвижений.Сумма 			= СуммаВознаграждения - СуммаНДСВознаграждения;
		Иначе
			СтрокаДвижений.Сумма 			= СуммаВознаграждения;
		КонецЕсли;
		СтрокаДвижений.НДС 					= СуммаНДСВознаграждения;
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.РасходыПриУСН.ВыполнитьПриход();
			НаборДвижений.Записать(Истина);
		КонецЕсли;
		
	КонецЕсли;
	 
	СтруктураДопПараметров = Новый Структура("ТаблицаТМЦ, ТаблицаРасчетовПоПриобретению, ТаблицаРасчетовПоРеализации", ТаблицаПоТоварам, ТаблицаРасчетовПоПриобретению, ТаблицаРасчетовПоРеализации);
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, СтруктураДопПараметров);
		
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, СтруктураШапкиДокумента.Организация);
	Если Не Отказ Тогда
		РазрешитьУчетУслугБезПлановыхЦен = Не ПараметрыУчетнойПолитики.ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам;
	Иначе
		РазрешитьУчетУслугБезПлановыхЦен = Ложь;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("РазрешитьУчетУслугБезПлановыхЦен", РазрешитьУчетУслугБезПлановыхЦен);
	
	СтруктураШапкиДокумента.Вставить("Комиссионер", Контрагент); // Для контроля по регистру "Остатки организаций"

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"          , "ДоговорОрганизация");
 	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"          , "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС"    , "УчетАгентскогоНДС");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС, УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ХозрасчетныйВидыСубконто.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|ГДЕ
		|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
		|	И ХозрасчетныйВидыСубконто.НомерСтроки = 1";
		
		СчетаСНоменклатурнымиГруппами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		СтруктураШапкиДокумента.Вставить("СчетаСНоменклатурнымиГруппами", СчетаСНоменклатурнымиГруппами);
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	Если УдержатьВознаграждение Тогда
		СтруктураШапкиДокумента.Вставить("СпособЗачетаАвансовПоВознаграждению", Перечисления.СпособыЗачетаАвансов.НеЗачитывать);
	Иначе
		СтруктураШапкиДокумента.Вставить("СпособЗачетаАвансовПоВознаграждению", Перечисления.СпособыЗачетаАвансов.Автоматически);
	КонецЕсли;

КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоУслугамКомиссионера, ТаблицаПоДенежнымСредствам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура" , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"   , "Количество");
	СтруктураПолей.Вставить("Сумма"        , "Сумма");
	СтруктураПолей.Вставить("СуммаПередачи", "СуммаПередачи");
	СтруктураПолей.Вставить("СтавкаНДС"    , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"          , "СуммаНДС");
	СтруктураПолей.Вставить("НомерГТД"     , "НомерГТД");
	СтруктураПолей.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа",     "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации", "СчетУчетаНДСПоРеализации");
	СтруктураПолей.Вставить("ДокументОприходования", "ДокументОприходования");
	СтруктураПолей.Вставить("Себестоимость"		   , "Себестоимость");

	СтруктураПолей.Вставить("СчетУчета"  , "СчетУчета");
	СтруктураПолей.Вставить("СчетДоходов", "СчетДоходов");
	СтруктураПолей.Вставить("СчетРасходов","СчетРасходов");
	СтруктураПолей.Вставить("Субконто"   , "Субконто");
	
	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(
		ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);

	//Формируем отдельную таблицу для Комиссионного вознаграждения.
	// Подготовим таблицу услуг для проведения.
	ТаблицаПоУслугамКомиссионера = ПодготовитьТаблицуУслугКомиссионера(СтруктураШапкиДокумента);

	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(
		ТаблицаПоУслугамКомиссионера, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость);
	
	ТаблицаПоУслугамКомиссионера.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.ПосредническиеУслуги, "ВидЦенности");
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"  , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"    , "Содержание");
	СтруктураПолей.Вставить("Услуга"        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"    , "Количество");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"     , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"           , "СуммаНДС");
	СтруктураПолей.Вставить("СчетДоходов" , "СчетДоходов");
	СтруктураПолей.Вставить("Субконто"    , "Субконто");
	СтруктураПолей.Вставить("СчетРасходов", "СчетРасходов");
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации", "СчетУчетаНДСПоРеализации");
	СтруктураПолей.Вставить("Цена"		    , "Цена");

	РезультатЗапросаПоУслугам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(
		ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);
	
	//Формируем отдельную таблицу по платежам.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("ВидОтчетаПоПлатежам", "ВидОтчетаПоПлатежам");
	СтруктураПолей.Вставить("Сумма"              , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"          , "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаНДС"           , "СуммаНДС");
	СтруктураПолей.Вставить("СуммаСНДС"          , "Сумма"+?(СтруктураШапкиДокумента.СуммаВключаетНДС,"","+ СуммаНДС"));

	РезультатЗапросаПоДенежнымСредствам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДенежныеСредства", СтруктураПолей);

	// Подготовим таблицу денежных средств для проведения.
	ТаблицаПоДенежнымСредствам = РезультатЗапросаПоДенежнымСредствам.Выгрузить();
	
КонецПроцедуры

// Процедуры и  функции, обслуживающие зачет авансов

Функция ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ТаблицаЗачетаАвансов = ЗачетАвансов.ВыгрузитьКолонки();
	Иначе
		ТаблицаЗачетаАвансов = ЗачетАвансов.Выгрузить();
		ТаблицаЗачетаАвансов.Свернуть("ДокументАванса", "СуммаЗачета");
	КонецЕсли;
	ТаблицаЗачетаАвансов.Колонки.ДокументАванса.Имя = "ДокументРасчетов";
	ТаблицаЗачетаАвансов.Колонки.СуммаЗачета.Имя    = "СуммаВзаиморасчетов";
	
	Возврат ТаблицаЗачетаАвансов;

КонецФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если (ТаблицаЗачетаАвансов.Количество() = 0) Тогда
		
		Если СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов по реализации"")";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли (ТаблицаЗачетаАвансов.Количество() = 1) 
		И (НЕ ЗначениеЗаполнено(ТаблицаЗачетаАвансов[0].ДокументРасчетов)) Тогда
	
		ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов по реализации"")";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		
	Иначе
	
		СтруктураОбязательныхПолей = Новый Структура("ДокументАванса");
    	
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(
			ЭтотОбъект, "ЗачетАвансов", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов()

// Процедуры и  функции, обслуживающие зачет авансов по вознаграждению

Функция ПодготовитьТаблицуЗачетаАвансовПоВознаграждению(СтруктураШапкиДокумента)

	ТаблицаЗачетаАвансовПоВознаграждению = ЗачетАвансов.ВыгрузитьКолонки();
	ТаблицаЗачетаАвансовПоВознаграждению.Колонки.ДокументАванса.Имя = "ДокументРасчетов";
	ТаблицаЗачетаАвансовПоВознаграждению.Колонки.СуммаЗачета.Имя    = "СуммаВзаиморасчетов";
	
	Возврат ТаблицаЗачетаАвансовПоВознаграждению;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
       
		Если НЕ (Основание.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
			Возврат;    
		КонецЕсли;

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.Проведен Тогда    


			СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
			СтавкаНДСВознаграждения              = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

			ЗаполнитьТовары(Основание);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента      = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	СуммаВознаграждения = Товары.Итог("СуммаВознаграждения") + Услуги.Итог("СуммаВознаграждения") + ?(СуммаВключаетНДС,0,Товары.Итог("СуммаНДСВознаграждения") + Услуги.Итог("СуммаНДСВознаграждения"));
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	// Снятие флага НДСПредъявленКВычету если не предъявлен счет-фактура
	Если (НДСВключенВСтоимость Или Не ПредъявленСчетФактура) И НДСПредъявленКВычету Тогда
		НДСПредъявленКВычету = Ложь;
	КонецЕсли;
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный");
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный");

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугамКомиссионера, ТаблицаПоУслугам, ТаблицаПоДенежнымСредствам;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
    
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

 	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоУслугамКомиссионера, ТаблицаПоДенежнымСредствам);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	// Проверить заполнение ТЧ "Услуги".
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверить заполнение ТЧ "ДенежныеСредства"
	ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства(ТаблицаПоДенежнымСредствам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Зачет авансов
	ТаблицаЗачетаАвансов = ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(
		ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Зачет авансов по вознаграждению
	ТаблицаЗачетаАвансовПоВознаграждению = ПодготовитьТаблицуЗачетаАвансовПоВознаграждению(СтруктураШапкиДокумента);

	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
		СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента,Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоУслугамКомиссионера, ТаблицаПоДенежнымСредствам, 
			ТаблицаЗачетаАвансов, ТаблицаЗачетаАвансовПоВознаграждению, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураПолученный", Ложь);
	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураВыданный", Ложь);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

