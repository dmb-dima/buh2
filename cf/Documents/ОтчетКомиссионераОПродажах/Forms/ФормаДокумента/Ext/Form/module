////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// Хранит текущую форму подбора номенклатуры
Перем мФормаПодбораНоменклатуры; 

// Хранит список видов договоров, доступных для данного документа
Перем мСписокВидовДоговоров; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

//Используется для определения необходимости открытия настроек движения после сохранения
Перем ОткрыватьНастройкуДвижений;

// Хранит значение параметра учетной политики УпрощенныйУчетНДС
Перем мУпрощенныйУчетНДС;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Услуги,ЭлементыФормы.КоманднаяПанельУслуги);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДенежныеСредства,ЭлементыФормы.КоманднаяПанельДенежныеСредства);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(
													 УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураВыданный",Новый Структура("ВидСчетаФактуры", Перечисления.НДСВидСчетаФактуры.НаРеализацию)));

	ЭлементыФормы.ГиперссылкаСчетФактураПолученный.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный"),
																								ЭтотОбъект, ЭлементыФормы.ГиперссылкаСчетФактураПолученный.ГиперСсылка);

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Рассчитываем сумму документа со всеми налогами
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Сумма документа со всеми налогами.
//
Функция РассчитатьСуммуДокумента()

	СуммаДок = Товары.Итог("Сумма") + Услуги.Итог("Сумма");

	Если (УчитыватьНДС) И ( НЕ СуммаВключаетНДС) Тогда
		СуммаДок = СуммаДок + Товары.Итог("СуммаНДС") + Услуги.Итог("СуммаНДС");
	КонецЕсли; 

	Возврат СуммаДок;

КонецФункции // РассчитатьСуммуДокумента()

// Процедура выполняет заполнение и расчет реквизитов, связанных с комиссионным вознаграждением.
//
Процедура ЗаполнитьИРассчитатьСпособРасчетаКомиссионногоВознаграждения()

	// при необходимости поменяем способ расчета и процент
	ЧтоИзменилось = "";
	Если СпособРасчетаКомиссионногоВознаграждения <> ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения Тогда
		СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
		ЧтоИзменилось = "способ расчета";
	КонецЕсли;
	Если ПроцентКомиссионногоВознаграждения <> ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения Тогда
		ПроцентКомиссионногоВознаграждения = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
		ЧтоИзменилось = ЧтоИзменилось + ?(ЧтоИзменилось = "", "", " и")+" процент вознаграждения";
	КонецЕсли;

	// Если в табличной части отсутствуют строки - пересчитывать ничего не нужно.
	Если (Товары.Количество() + Услуги.Количество() > 0) И (ЧтоИзменилось <> "") Тогда
		// Надо предложить пересчитать комиссионное вознаграждение.
		Ответ = Вопрос("Изменился "+ЧтоИзменилось+". Пересчитать комиссионное вознаграждение?", 
					   РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого СтрокаТабличнойЧасти Из Товары Цикл
				РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, "Товары");
			КонецЦикла;
			Для каждого СтрокаТабличнойЧасти Из Услуги Цикл
				РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, "Услуги");
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ЗаполнитьИРассчитатьСпособРасчетаКомиссионногоВознаграждения()

// Рассчитывает комиссионное вознаграждение в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//
Процедура РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)

	Если СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда

	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда

		СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения 
		                                       * СтрокаТабличнойЧасти.Сумма / 100;

	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления Тогда
		 
		 Если ИмяТабличнойЧасти <> "Услуги" Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения 
		    	  * (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПередачи) / 100;
         КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.СуммаВознаграждения = 0;
	КонецЕсли;

	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
	                                              УчитыватьНДС, СуммаВключаетНДС,
	                                              УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));


КонецПроцедуры // РассчитатьКомиссионноеВознаграждение()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);

	ЗаполнитьИРассчитатьСпособРасчетаКомиссионногоВознаграждения();

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	// Зачет авансов
	УстановитьСпособЗачетаАвансов();
	
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	
	//Проверим какие же счета будем изменять
	ЗаполнятьСчетаРасчета = Ложь; //Заполнять ли счета расчетов
	ЗадаватьВопрос	   	  = Ложь; //Если заполнять то Задавать ли вопрос о его перезаполнении 
	
	Если ПоказыватьВДокументахСчетаУчета Тогда
		СтруктураОбязательныхПолей = Новый Структура;
		СтруктураНеОбязательныхПолей = Новый Структура;
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетовПокупателя);			
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансамПолученным", СчетаУчета.СчетАвансовПокупателя);			
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовЗаПосредническиеУслуги", СчетаУчета.СчетРасчетов);			
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансамВыданным", СчетаУчета.СчетАвансов);			
		
		БухгалтерскийУчет.ПроверитьНеобходимостьПерезаполненияСчетовУчета(ЭтотОбъект, СтруктураОбязательныхПолей,СтруктураНеОбязательныхПолей, ЗадаватьВопрос, ЗаполнятьСчетаРасчета);		
		Если ЗадаватьВопрос Тогда			
			Ответ = Вопрос("Установить счета учета расчетов в соответствии со значениями по умолчанию?", 
			РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета при смене договора");			
 			Если Ответ = КодВозвратаДиалога.Нет Тогда
				ЗаполнятьСчетаРасчета = Ложь;
			КонецЕсли;	
		КонецЕсли;	
	Иначе		
		ЗаполнятьСчетаРасчета     = Истина;		
	КонецЕсли;

	Если ЗаполнятьСчетаРасчета Тогда
    	ЗаполнитьСчетаУчетаРасчетов(СчетаУчета);
	КонецЕсли;	

	УстановитьВидимость();
	УстановитьАвтоотметку();

КонецПроцедуры // ПриИзмененииДоговора()

// {ОбособленныеПодразделения
// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()
// }ОбособленныеПодразделения

// Производит выбор документа реализации и заполнение на его основании
//
// СпособЗаполнения - "Заполнить" - заполнить с предварительной очисткой
//					  "Добавить"  - добавить строки к уже имеющимся.
//
Процедура ЗаполнитьПоРеализации(СпособЗаполнения = "Заполнить")
	
	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Имя);
		Возврат;
	КонецЕсли;

	// Если заполняем, то почистим ТЧ
	Если СпособЗаполнения = "Заполнить"
	   И Товары.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		Товары.Очистить();
	КонецЕсли;
	
	ФормаВыбора = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите документ передачи на комиссию для заполнения отчета комиссионера";
	ФормаВыбора.РежимВыбора = Истина;

	// По умолчанию поставим отбор по договору
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;

	Реализация = ФормаВыбора.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(Реализация) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТовары(Реализация);

КонецПроцедуры //ЗаполнитьПоРеализации()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

	// Заполним номер ГТД и страну происхождения
	ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти, Ложь, Организация, Дата, , Контрагент)

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Колонки 		= ЭлементыФормы.Товары.Колонки;
	КолонкиУслуги 	= ЭлементыФормы.Услуги.Колонки;

	УСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	УСНРасходы = (УСН И (НЕ НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата)));
	ОСН_ЮрЛицо = (НЕ ОбщегоНазначения.Предприниматель(Организация, Дата) И НЕ УСН);
	
	ДоступностьПроцента = Истина;

	Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда

		ДоступностьПроцента = Ложь;

		Если ПроцентКомиссионногоВознаграждения <> 0 Тогда
			
			ПроцентКомиссионногоВознаграждения = 0;
			
		КонецЕсли;

	КонецЕсли;

	ЭлементыФормы.ПроцентКомиссионногоВознаграждения.Доступность = ДоступностьПроцента;
	
	Колонки.СчетУчета.Видимость              = ПоказыватьВДокументахСчетаУчета;
	Колонки.СчетДоходов.Видимость            = ПоказыватьВДокументахСчетаУчета;
	Колонки.Субконто.Видимость               = ПоказыватьВДокументахСчетаУчета;
	Колонки.СчетРасходов.Видимость           = ПоказыватьВДокументахСчетаУчета;
	Колонки.СчетУчетаНДСПоРеализации.Видимость = ПоказыватьВДокументахСчетаУчета И УчитыватьНДС;
	
	Колонки.СтавкаНДС.Видимость              = УчитыватьНДС;
	Колонки.СуммаНДС.Видимость               = УчитыватьНДС;
	Колонки.СуммаНДСВознаграждения.Видимость = УчитыватьНДС;
	
	КолонкиУслуги.СчетДоходов.Видимость            = ПоказыватьВДокументахСчетаУчета;
	КолонкиУслуги.Субконто.Видимость               = ПоказыватьВДокументахСчетаУчета;
	КолонкиУслуги.СчетРасходов.Видимость           = ПоказыватьВДокументахСчетаУчета;
	КолонкиУслуги.СчетУчетаНДСПоРеализации.Видимость = ПоказыватьВДокументахСчетаУчета И УчитыватьНДС;
	
	КолонкиУслуги.СтавкаНДС.Видимость              = УчитыватьНДС;
	КолонкиУслуги.СуммаНДС.Видимость               = УчитыватьНДС;
	КолонкиУслуги.СуммаНДСВознаграждения.Видимость = УчитыватьНДС;
	
	Если мУчетнаяПолитика.Количество() > 0 Тогда	
		Если мУчетнаяПолитика.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
			ЭлементыФормы.Товары.Колонки.ДокументОприходования.Видимость = Ложь;
			ЭлементыФормы.Товары.Колонки.ДокументОприходования.ИзменятьВидимость = Ложь;
		Иначе
			Если ЭлементыФормы.Товары.Колонки.Себестоимость.Видимость Тогда
				ЭлементыФормы.Товары.Колонки.ДокументОприходования.Видимость = Истина;
			КонецЕсли;
			ЭлементыФормы.Товары.Колонки.ДокументОприходования.ИзменятьВидимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаРасчетов.Видимость = ПоказыватьВДокументахСчетаУчета;
	
	Для Ном = 1 По 3 Цикл

		Если (Ном <= СчетУчетаЗатрат.ВидыСубконто.Количество()) И (ЗначениеЗаполнено(СчетУчетаЗатрат)) Тогда
			ЭлементыФормы["НадписьСубконто"+Ном].Заголовок = Строка(СчетУчетаЗатрат.ВидыСубконто[Ном-1].ВидСубконто);
			ЭлементыФормы["НадписьСубконто"+Ном].Видимость   = Истина;
			ЭлементыФормы["Субконто"+Ном].Видимость          = Истина;
		Иначе
			ЭлементыФормы["НадписьСубконто"+Ном].Видимость   = Ложь;
			ЭлементыФормы["Субконто"+Ном].Видимость          = Ложь;
		КонецЕсли;

	КонецЦикла;
	
	// Закладка Счет-фактура
	ЭлементыФормы.НадписьДатаВходящегоСчетаФактуры.Видимость = ПредъявленСчетФактура;
	ЭлементыФормы.НадписьНомерВходящегоСчетаФактуры.Видимость = ПредъявленСчетФактура;
	ЭлементыФормы.ДатаВходящегоСчетаФактуры.Видимость = ПредъявленСчетФактура;
	ЭлементыФормы.НомерВходящегоСчетаФактуры.Видимость = ПредъявленСчетФактура;
	ЭлементыФормы.НДСПредъявленКВычету.Видимость = Не НДСВключенВСтоимость И ПредъявленСчетФактура и мУпрощенныйУчетНДС;
	
	// Зачет авансов
	
	ЗачетАвансовВозможен = Истина;
	
	ЭлементыФормы.СпособЗачетаАвансов.Доступность = ЗачетАвансовВозможен;
	
	ЗачетПоДокументу   = ЗачетАвансовВозможен И (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу);
	ЗачетАвтоматически = ЗачетАвансовВозможен И (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
	
	ЭлементыФормы.СчетУчетаРасчетовПоАвансамПолученным.Доступность        = ЗачетПоДокументу ИЛИ ЗачетАвтоматически;
	ЭлементыФормы.НадписьСчетУчетаРасчетовПоАвансамПолученным.Доступность = ЗачетПоДокументу ИЛИ ЗачетАвтоматически;
	
	ЭлементыФормы.СчетУчетаРасчетовПоАвансамПолученным.АвтоОтметкаНезаполненного = ЗачетПоДокументу ИЛИ ЗачетАвтоматически;
	Если НЕ (ЗачетПоДокументу ИЛИ ЗачетАвтоматически) Тогда
		ЭлементыФормы.СчетУчетаРасчетовПоАвансамПолученным.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ЗачетАвансов.Видимость = ЗачетПоДокументу;
	Если СписокДокументовАванса Тогда
		ЭлементыФормы.ПанельЗачетАвансов.ТекущаяСтраница = ЭлементыФормы.ПанельЗачетАвансов.Страницы.СписокАвансов;
	Иначе
		ЭлементыФормы.ПанельЗачетАвансов.ТекущаяСтраница = ЭлементыФормы.ПанельЗачетАвансов.Страницы.ОдинАванс;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает автоотметку незаполненного для тех колонок в табличной части 
// "Товары", обязательность заполнения которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

	// Процент и ставка НДС с комиссионного вознаграждения
	Автоотметка = Ложь;
	Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления
	 ИЛИ СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
		Автоотметка = Истина;
	КонецЕсли;

	Если ЭлементыФормы.ПроцентКомиссионногоВознаграждения.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		ЭлементыФормы.ПроцентКомиссионногоВознаграждения.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.ПроцентКомиссионногоВознаграждения.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(ПроцентКомиссионногоВознаграждения) Тогда
		ЭлементыФормы.ПроцентКомиссионногоВознаграждения.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.СтавкаНДСВознаграждения.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		ЭлементыФормы.СтавкаНДСВознаграждения.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.СтавкаНДСВознаграждения.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(СтавкаНДСВознаграждения) Тогда
		ЭлементыФормы.СтавкаНДСВознаграждения.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;
	
КонецПроцедуры // УстановитьАвтоотметку()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = РассчитатьСуммуДокумента();
	ЭлементыФормы.ВсегоНДС.Значение = Товары.Итог("СуммаНДС") + Услуги.Итог("СуммаНДС");

	ЭлементыФормы.ВсегоВознаграждения.Значение    = Товары.Итог("СуммаВознаграждения") + Услуги.Итог("СуммаВознаграждения");
	ЭлементыФормы.СуммаНДСВознаграждения.Значение = Товары.Итог("СуммаНДСВознаграждения") + Услуги.Итог("СуммаНДСВознаграждения");

	Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
		ЭлементыФормы.ВсегоВознаграждения.Значение = ЭлементыФормы.ВсегоВознаграждения.Значение 
		                                           + ЭлементыФормы.СуммаНДСВознаграждения.Значение;
	КонецЕсли; 

	// Зачет авансов
	Если ЗачетАвансов.Найти(0, "СуммаЗачета") <> Неопределено Тогда
		ЭлементыФормы.ВсегоЗачетАвансов.Значение = "<Авто>";
	Иначе
		ЭлементыФормы.ВсегоЗачетАвансов.Значение = ОбщегоНазначения.ФорматСумм(ЗачетАвансов.Итог("СуммаЗачета"));
	КонецЕсли;
	
	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                                  + " " +  ДокументОбъект.ВалютаДокумента
		                                  + " = " + ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                                  + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	    	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() и не ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа",ПараметрОбъектКопирования);

		СтавкаНДСВознаграждения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		ЗаполнитьИРассчитатьСпособРасчетаКомиссионногоВознаграждения();

		УдержатьВознаграждение = Истина;
		СпособЗачетаАвансовПоВознаграждению = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;

		ЗаполнитьСчетаУчетаРасчетов();

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СчетУчета");
	СтруктураКолонок.Вставить("СчетУчетаНДСПоРеализации");
	СтруктураКолонок.Вставить("СчетДоходов");
	СтруктураКолонок.Вставить("СчетРасходов");
	СтруктураКолонок.Вставить("Субконто");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СчетУчетаНДСПоРеализации");
	СтруктураКолонок.Вставить("СчетДоходов");
	СтруктураКолонок.Вставить("СчетРасходов");
	СтруктураКолонок.Вставить("Субконто");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Услуги.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация);
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
    // }ОбособленныеПодразделения
	
	мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	
	// Установить видимость реквизитов и заголовков колонок.
	ЗаполнитьТекстПроСчетФактуру(); 

	УстановитьАвтоотметку();

	// Зачет авансов
	Если ЗачетАвансов.Количество() > 0 Тогда
		ЭлементыФормы.ЗачетАвансов.ТекущаяСтрока       = ЗачетАвансов[0];
		ЭлементыФормы.ТабПолеСуммыЗачета.ТекущаяСтрока = ЗачетАвансов[0];
	КонецЕсли;
	СписокДокументовАванса = (ЗачетАвансов.Количество() > 1);
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Товары",	"Товары");
	Страницы.Добавить("Услуги",	"Услуги");
	Страницы.Добавить("ДенежныеСредства",	"ДенежныеСредства");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);

	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,ПодразделениеОрганизации,Контрагент,ДоговорКонтрагента,СпособРасчетаКомиссионногоВознаграждения");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница,Страницы);

	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	ИначеЕсли ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" Тогда
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			Если Параметр.Найти(Ссылка) <> Неопределено Тогда
				ЗаполнитьТекстПроСчетФактуру();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

	ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.ДенежныеСредства.Заголовок = "Денежные средства (" + ДокументОбъект.ДенежныеСредства.Количество() + " поз.)";


КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
       
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);
	
	ЗаполнитьТекстПроСчетФактуру();

КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызывается при выборе пункта меню "Заполнить по реализации" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоРеализации(Кнопка)

	ЗаполнитьПоРеализации();

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

// Процедура вызывается при выборе пункта меню "Добавить из реализации" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеДобавитьИзРеализации(Кнопка)

	ЗаполнитьПоРеализации("Добавить");

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

// Процедура вызывается при нажатии кнопки "Изменить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для изменения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Неопределено;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	
	// дополнительно устанавливаем для редактирования реквизит для включения НДС в стоимость
	// комиссионных услуг
	СтруктураРеквизитовДокумента.Вставить("НДСВключенВСтоимость");
	
	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда

		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);

		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл
			РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, "Товары");
		КонецЦикла;
		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.Услуги Цикл
			РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, "Услуги");
		КонецЦикла;

	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()


// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
     

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	//Открывает форму движений документа для ручного редактирования
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
    мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация);

	Если НачалоМесяца(мТекущаяДатаДокумента) <> НачалоМесяца(Дата) Тогда
		мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	УстановитьВидимость();

КонецПроцедуры // ДатаПриИзменении()

// {ОбособленныеПодразделения
// Процедура - обработчик события "ПриИзменении" поля ввода "Подразделение".
// 
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры // ПодразделениеОрганизацииПриИзменении()
// }ОбособленныеПодразделения

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация);
	
	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	
	КонтрагентПриИзменении(Элемент);

	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода способа
// расчета комиссионного вознаграждения.
//
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзменении(Элемент)

	Если СпособРасчетаКомиссионногоВознаграждения
		<> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда

		// Если в табличной части отсутствуют строки - пересчитывать ничего не нужно.
		Если Товары.Количество() + Услуги.Количество() > 0 Тогда

			// Надо предложить пересчитать комиссионное вознаграждение.
			Ответ = Вопрос("Изменился способ расчета. Пересчитать комиссионное вознаграждение?", 
			               РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Для каждого СтрокаТабличнойЧасти Из Товары Цикл
					РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, "Товары");
				КонецЦикла;
				Для каждого СтрокаТабличнойЧасти Из Услуги Цикл
					РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, "Услуги");
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;

	УстановитьВидимость();
	УстановитьАвтоотметку();

КонецПроцедуры // СпособРасчетаКомиссионногоВознагражденияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода процента
// комиссионного вознаграждения.
//
Процедура ПроцентКомиссионногоВознагражденияПриИзменении(Элемент)

	// Если в табличной части отсутствуют строки - пересчитывать ничего не нужно.
	Если Товары.Количество() + Услуги.Количество() > 0 Тогда

		// Надо предложить пересчитать комиссионное вознаграждение.
		Ответ = Вопрос("Изменился процент вознаграждения. Пересчитать комиссионное вознаграждение?", 
		               РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого СтрокаТабличнойЧасти Из Товары Цикл
				РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, "Товары");
			КонецЦикла;
			Для каждого СтрокаТабличнойЧасти Из Услуги Цикл
				РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, "Услуги");
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ПроцентКомиссионногоВознагражденияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект,мСписокВидовДоговоров);

	// Договор меняется.
	ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
											мСписокВидовДоговоров , СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();
	
КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураВыданный", Новый Структура("ВидСчетаФактуры", Перечисления.НДСВидСчетаФактуры.НаРеализацию));

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

Процедура ГиперссылкаСчетФактураПолученныйНажатие(Элемент)

	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураПолученный");

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора".
//
Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора".
//
Процедура СчетУчетаРасчетовПоАвансамПолученнымОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора".
//
Процедура СчетУчетаРасчетовЗаПосредническиеУслугиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора".
//
Процедура СчетУчетаРасчетовПоАвансамВыданнымОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора".
//
Процедура СчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаЗатрат
//
Процедура СчетУчетаЗатратПриИзменении(Элемент)

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		Субконто1, ЭлементыФормы.Субконто1,
		Субконто2, ЭлементыФормы.Субконто2,
		Субконто3, ЭлементыФормы.Субконто3);
								 
	УстановитьВидимость();

КонецПроцедуры

Процедура СчетУчетаЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СтавкаНДСВознаграждения
//
Процедура СтавкаНДСВознагражденияПриИзменении(Элемент)

	// Нужно спросить об обновлении сумм НДС вознаграждения в ТЧ
	Если Товары.Количество() + Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Пересчитать суммы НДС вознаграждения?", 
	               РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТЧ Из Товары Цикл
		СтрокаТЧ.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.СуммаВознаграждения,
		                                                     УчитыватьНДС, СуммаВключаетНДС,
		                                                     УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
	КонецЦикла;
    Для каждого СтрокаТЧ Из Услуги Цикл
		СтрокаТЧ.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.СуммаВознаграждения,
		                                                     УчитыватьНДС, СуммаВключаетНДС,
		                                                     УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Субконто
// в строке табличной части "Прочее".
//
Процедура СубконтоНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = ПараметрыНеобходимыеДляВыбораСубконто(Элемент, "Бух");
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

Функция ПараметрыНеобходимыеДляВыбораСубконто(Элемент, Учет = "Бух")

	// Если тип выбираемого субконто - Партия, то создадим 
	// структуру дополнительных параметров.
	Если Элемент.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения  Тогда
		
		СписокПараметров = Новый Структура;
		СписокПараметров.Вставить("Дата", Дата);
		СписокПараметров.Вставить("ЭтоНовыйДокумент",ЭтоНовый());
	    Если Учет = "Бух" Тогда
			СписокПараметров.Вставить("СчетУчета",    СчетУчетаЗатрат);
			СписокПараметров.Вставить("Номенклатура", УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Номенклатура", Субконто1, Субконто2, Субконто3));
			СписокПараметров.Вставить("Склад",        УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Склады", Субконто1, Субконто2, Субконто3));
		КонецЕсли; 
		
	Иначе // Тип выбираемого субконто - не Партия.
		СписокПараметров = Неопределено;
	КонецЕсли; 
	
	Возврат СписокПараметров;

КонецФункции // ПараметрыНеобходимыеДляВыбораСубконто()

Процедура ПредъявленСчетФактураПриИзменении(Элемент)
	
	Если ПредъявленСчетФактура Тогда
		СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный", Новый Структура("ПометкаУдаления",Ложь),Ссылка);
		Если ЗначениеЗаполнено(СчетФактура) И ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			Ответ = Вопрос("Для указания данных счета-фактуры требуется пометить на удаление подчиненный документ <" + СчетФактура + ">. Пометить документ на удаление?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
				СчетФактураОбъект.ДокументОснование = Неопределено;
				СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СчетФактураОбъект.УстановитьПометкуУдаления(Истина);
			Иначе
				ПредъявленСчетФактура = Ложь;			
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если мУпрощенныйУчетНДС Тогда
		НДСПредъявленКВычету = ПредъявленСчетФактура;
	КонецЕсли;
	
	ЗаполнитьТекстПроСчетФактуру();
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Товары", Истина);
	ПриИзмененииНоменклатурыТоваров(СтрокаТЧ);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
	РассчитатьКомиссионноеВознаграждение(СтрокаТЧ, "Товары");
    
	ТоварыПриАктивизацииСтроки(Элемент);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, "Товары");

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, "Товары");

КонецПроцедуры // ТоварыЦенаПриИзменении()



// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, "Товары");

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, "Товары");

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

Процедура ТоварыЦенаПередачиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи 
	                                   * СтрокаТабличнойЧасти.Количество;

	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, "Товары");

КонецПроцедуры

Процедура ТоварыСуммаПередачиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТабличнойЧасти.СуммаПередачи 
	                                  / СтрокаТабличнойЧасти.Количество;

	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, "Товары");

КонецПроцедуры

Процедура ТоварыДокументОприходованияНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	Строка = ЭлементыФормы.Товары.ТекущиеДанные;
	
	СтандартнаяОбработка    = Ложь;
	ФормаВыбора             = Документы.Партия.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.Организация = Организация;
	
	ФормаВыбора.Счет         = Строка.СчетУчета;
	ФормаВыбора.Номенклатура = Строка.Номенклатура;
	ФормаВыбора.ВидСубконто  = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	
	Если ЭтоНовый() Тогда
		ФормаВыбора.КонПериода         = КонецДня(РабочаяДата);
	Иначе
		ФормаВыбора.КонПериода         = Дата;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ТоварыДокументОприходованияПриИзменении(Элемент)
	Строка = ЭлементыФормы.Товары.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(Строка.ДокументОприходования) Тогда
		Строка.Себестоимость = 0;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПриИзменении" поля ввода Номенклатура
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТабличнойЧасти, ИСТИНА);
	
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, 1);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, "Услуги");
	УслугиПриАктивизацииСтроки(Элемент);

КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, 1);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	РассчитатьКомиссионноеВознаграждение(ЭлементыФормы.Услуги.ТекущиеДанные, "Услуги");

КонецПроцедуры // УслугиКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, 1);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	РассчитатьКомиссионноеВознаграждение(ЭлементыФормы.Услуги.ТекущиеДанные, "Услуги");

КонецПроцедуры // УслугиЦенаПриИзменении()            

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, 1);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	РассчитатьКомиссионноеВознаграждение(ЭлементыФормы.Услуги.ТекущиеДанные, "Услуги");

КонецПроцедуры// УслугиСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Услуги".
//
Процедура УслугиСчетДоходовПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	Счет   = СтрокаТЧ.СчетДоходов;

	Если Счет.ВидыСубконто.Количество() > 0 Тогда
		СтрокаТЧ.Субконто = Новый(Счет.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
	Иначе
		СтрокаТЧ.Субконто = Неопределено;
	КонецЕсли;

	ЭлементыФормы.Услуги.Колонки.Субконто.Доступность = НЕ (НЕ ЗначениеЗаполнено(Счет) ИЛИ (Счет.ВидыСубконто.Количество() = 0));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Услуги".
//
Процедура УслугиСчетДоходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" 
// в табличной части "Услуги".
//
Процедура УслугиПриАктивизацииСтроки(Элемент)

	Если ЭлементыФормы.Услуги.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Счет = ЭлементыФормы.Услуги.ТекущиеДанные.СчетДоходов;

	ЭлементыФормы.Услуги.Колонки.Субконто.Доступность = НЕ (НЕ ЗначениеЗаполнено(Счет) ИЛИ (Счет.ВидыСубконто.Количество() = 0));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Услуги".
//
Процедура УслугиСчетУчетаНДСПоРеализацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
		
	ОформлениеСтроки.Ячейки.СчетУчетаНДСПоРеализации.ОтметкаНезаполненного = (УчитыватьНДС И ДанныеСтроки.СуммаНДС <> 0 И Не ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДСПоРеализации));
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Товары".
//
Процедура УслугиВознаграждениеПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;

	СтрокаТЧ.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.СуммаВознаграждения,
	                                                     УчитыватьНДС, СуммаВключаетНДС,
	                                                     УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));

КонецПроцедуры

/////////////////////////////////////////////////////////////////

// Функция формирует список запросов для передачи в форму подбора.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	
	ПустойТипЦен = НЕ ЗначениеЗаполнено(ТипЦен);

	Если ТабличнаяЧасть = Товары Тогда
	 
		СписокЗапросов.Добавить("ОстаткиУКомиссионеров", 	"Остатки товаров у комиссионеров");
		
		Если НЕ ПустойТипЦен Тогда
			СписокЗапросов.Добавить("ЦеныНоменклатуры",         "Цены номенклатуры");
		КонецЕсли;
		
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		
		СписокЗапросов.Добавить("Услуги", "Услуги");

		Если НЕ ПустойТипЦен Тогда
			СписокЗапросов.Добавить("ЦеныУслуг", "Цены услуг");
		КонецЕсли;
		
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбораНоменклатуры, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	ЕстьЦена = Истина;

	Если ТабличнаяЧасть = Товары Тогда

		Команда         	= "ПодборВТабличнуюЧастьТовары";
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		ИмяТабличнойЧасти 	= "Товары";

	ИначеЕсли ТабличнаяЧасть = Услуги Тогда

		Команда           	= "ПодборВТабличнуюЧастьУслуги";
		ИмяТабличнойЧасти 	= "Услуги";

	КонецЕсли;
	
	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора", СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("Команда"           	, Команда);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         	, ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               	, ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"	, ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"           	, Контрагент);
	СтруктураПараметровПодбора.Вставить("Организация"          	, Организация);
	// {ОбособленныеПодразделения
	СтруктураПараметровПодбора.Вставить("Подразделение"      	, ПодразделениеОрганизации);
	// }ОбособленныеПодразделения
	СтруктураПараметровПодбора.Вставить("Склад"                	, Неопределено);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             	, ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("Заголовок"				, "Подбор номенклатуры в документ " + 
	                                    						ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, мФормаПодбораНоменклатуры);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, Количество, Цена, ЕдиницаИзмерения;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		ЗначениеВыбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);

	Если (ТабличнаяЧасть = Товары) И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура",     Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Цена) Тогда
		СтруктураОтбора.Вставить("Цена",         Цена);
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		
		Если ТабличнаяЧасть = Товары Тогда
			
			СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
		   	// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, "Товары");
			
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Рассчитать реквизиты табличной части.
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, 1);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
            РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти, "Услуги");
		КонецЕсли;
		
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Количество;
		
		Если ТабличнаяЧасть = Товары Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = 1;
			
			Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена * Количество,
			ВалютаЦены, ВалютаДокумента, КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
			
			СтрокаТабличнойЧасти.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
			Истина, УчитыватьНДС, СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.ЦенаПередачи  = СтрокаТабличнойЧасти.Цена;
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", Истина);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
				СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100 * СтрокаТабличнойЧасти.Сумма;
			КонецЕсли;
			
			ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти, Ложь, Организация, Дата, , Контрагент)
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда
			// Заполняем реквизиты табличной части.
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТабличнойЧасти, Истина);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Содержание = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, 1);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
				СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100 * СтрокаТабличнойЧасти.Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ТабличнаяЧастьИмя = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ТоварыОбработкаПодбора()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)

	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДСПоРеализации
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаНДСПоРеализацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчета
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" 
// строки табличной части "Товары".
//
Процедура ТоварыПриАктивизацииСтроки(Элемент)

	Если ЭлементыФормы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Счет  = ЭлементыФормы.Товары.ТекущиеДанные.СчетДоходов;

	ЭлементыФормы.Товары.Колонки.Субконто.Доступность = НЕ (НЕ ЗначениеЗаполнено(Счет) ИЛИ (Счет.ВидыСубконто.Количество() = 0));

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Товары".
//
Процедура ТоварыВознаграждениеПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	СтрокаТЧ.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.СуммаВознаграждения,
	                                                     УчитыватьНДС, СуммаВключаетНДС,
	                                                     УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетДоходовПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	Счет   = СтрокаТЧ.СчетДоходов;

	Если Счет.ВидыСубконто.Количество() > 0 Тогда
		СтрокаТЧ.Субконто = Новый(Счет.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
		Если ТипЗнч(СтрокаТЧ.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			СтрокаТЧ.Субконто = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
		КонецЕсли;
	Иначе
		СтрокаТЧ.Субконто = Неопределено;
	КонецЕсли;

	ЭлементыФормы.Товары.Колонки.Субконто.Доступность = НЕ (НЕ ЗначениеЗаполнено(Счет) ИЛИ (Счет.ВидыСубконто.Количество() = 0));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетДоходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Денежные средства

Процедура ДенежныеСредстваСуммаПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.ДенежныеСредства.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

Процедура ДенежныеСредстваСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.ДенежныеСредства.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	// Если заполнен документ партии, то себестоимость будет браться из него.
	// Поэтому если колонка видна, будем выводить в нее текст.
	Если ЭлементыФормы.Товары.Колонки.ДокументОприходования.Видимость
	   И НЕ ЗначениеЗаполнено(ДанныеСтроки.ДокументОприходования) Тогда

		ОформлениеСтроки.Ячейки.ДокументОприходования.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ДокументОприходования.Текст           = "<Авто>";
		ОформлениеСтроки.Ячейки.Себестоимость.ТолькоПросмотр  = Истина;

	КонецЕсли;
	
	Если ЭлементыФормы.Товары.Колонки.Себестоимость.Видимость
	   И НЕ ЗначениеЗаполнено(ДанныеСтроки.Себестоимость) Тогда

		ОформлениеСтроки.Ячейки.Себестоимость.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Себестоимость.Текст           = "<Авто>";

	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.СчетУчетаНДСПоРеализации.ОтметкаНезаполненного = (УчитыватьНДС И ДанныеСтроки.СуммаНДС <> 0 И Не ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДСПоРеализации));
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ОБСЛУЖИВАЮЩИЕ ЗАЧЕТ АВАНСОВ

Процедура УстановитьСпособЗачетаАвансов()

	СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовПоАвансамПолученным) Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
			Организация, Контрагент, ДоговорКонтрагента);
		СчетУчетаРасчетовПоАвансамПолученным = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;
	
	ЗачетАвансов.Очистить();
	СписокДокументовАванса = Ложь;

КонецПроцедуры

Процедура СпособЗачетаАвансовПриИзменении(Элемент)
	
	СчетУчетаРасчетовПоАвансамПолученным = Неопределено;
	ЗачетАвансов.Очистить();
	СписокДокументовАванса = Ложь;
	
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически
		ИЛИ СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
			Организация, Контрагент, ДоговорКонтрагента);
		СчетУчетаРасчетовПоАвансамПолученным = СчетаУчета.СчетАвансовПокупателя;
		
	КонецЕсли;
		
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ЗачетАвансов.Добавить();
		ЭлементыФормы.ЗачетАвансов.ТекущаяСтрока       = ЗачетАвансов[0];
		ЭлементыФормы.ТабПолеСуммыЗачета.ТекущаяСтрока = ЗачетАвансов[0];
	КонецЕсли;
	
	УстановитьВидимость();
	
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ЗачетАвансов;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокДокументовАвансаПриИзменении(Элемент)
	
	Если НЕ СписокДокументовАванса И ЗачетАвансов.Количество() > 1 Тогда

		ТекстВопроса = "Все строки зачета авансов, кроме первой, будут удалены.
		|Продолжить?";

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ <> КодВозвратаДиалога.Да Тогда
			СписокДокументовАванса = Истина;
			Возврат;
		КонецЕсли;

		Пока ЗачетАвансов.Количество() > 1 Цикл
			ЗачетАвансов.Удалить(ЗачетАвансов.Количество() - 1);
		КонецЦикла;
        
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДокументАвансаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка  = Ложь;

	СтруктураПараметров   = Новый Структура;
	СтруктураПараметров.Вставить("Организация",                Организация);
	СтруктураПараметров.Вставить("Контрагент",                 Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",         ДоговорКонтрагента);
	СтруктураПараметров.Вставить("КонецПериода",               Дата-1);
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СчетУчетаРасчетовПоАвансамПолученным);
	СтруктураПараметров.Вставить("СторонаСчета",               "Кт");
	СтруктураПараметров.Вставить("ЭтоНовыйДокумент",           ЭтоНовый());
	СтруктураПараметров.Вставить("РежимОтбораДокументов",      Перечисления.РежимОтбораДокументов.ПоОстаткам);

	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(
		СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти.ЗачетАвансов.Реквизиты.ДокументАванса.Тип);

КонецПроцедуры

Процедура ДокументАвансаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ЗачетАвансов.ТекущиеДанные;
	ТекДанные.СуммаЗачета = 0;
	
КонецПроцедуры

Процедура ЗачетАвансовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	
		Если ОформлениеСтроки.ДанныеСтроки.СуммаЗачета = 0 Тогда
		
			ОформлениеСтроки.Ячейки.СуммаЗачета.Текст = "<Авто>";
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

мСписокВидовДоговоров = Новый СписокЗначений;
мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

