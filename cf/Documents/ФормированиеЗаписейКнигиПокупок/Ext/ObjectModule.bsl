Перем мВалютаРегламентированногоУчета Экспорт;

Перем мВестиУчетНДС Экспорт;

// Хранит признак ведения упрощенного учета НДС
Перем мУпрощенныйУчетНДС Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ АВТОЗАПОЛНЕНИЯ СТРОК ДОКУМЕНТА

// Процедура вызывается при нажатии на кнопку "Заполнить" в диалоге документа
// Реализует алгоритм автоматического заполнения табличной части.
//
Процедура ЗаполнитьДокумент(ОшибкаЗаполнения = Ложь, Сообщать = Истина, СтрокаСообщения = "", ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ОшибкаЗаполнения = Истина;
			СтрокаСообщения = " перед заполнением требуется отменить проведение документа";
			Если Сообщать Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:" + СтрокаСообщения, , Строка(Ссылка));
			КонецЕсли; 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если мУпрощенныйУчетНДС = Неопределено Тогда
		мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	КонецЕсли;
	
	Если Не мУпрощенныйУчетНДС Тогда
		ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям(, Ложь, СтрокаСообщения, ОшибкаЗаполнения);
		ЗаполнитьСтроки_ВычетНДСПоНалоговомуАгенту(, Ложь, СтрокаСообщения, ОшибкаЗаполнения);
	КонецЕсли;
	
	ЗаполнитьСтроки_НДСсАвансов();
	
	Если Не мУпрощенныйУчетНДС И Не ПредъявленНДСКВычету0 Тогда
		ЗаполнитьСтроки_НДСсАвансовВыданных();
	КонецЕсли;
	
	Если Не (ВычетПоПриобретеннымЦенностям.Количество() > 0 
		Или НДСсАвансов.Количество() >0
 		Или НДСсАвансовВыданных.Количество() >0
 		Или ВычетНДСПоНалоговомуАгенту.Количество() >0
       ) Тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = СтрокаСообщения+Символы.ПС+" - не обнаружены записи к отражению в книге покупок"
	КонецЕсли;	

   Если ОшибкаЗаполнения Тогда
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:"+СтрокаСообщения,,Строка(Ссылка));
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьСтрокиДокумента()

////////////////////////////////////////////////////////////////////////////////
// Заполнение табличной части "Вычет НДС по приобретенным ценностям"

// Процедура выполняет автоматическое заполнение табличной части документа
// Вызывается из процедуры КоманднаяПанельВычетПоПриобретеннымЦенностямЗаполнить
//
Процедура ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям(ОтменитьПроведение = Ложь,Сообщать = Истина, СтрокаСообщения = "", ОшибкаЗаполнения = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаЗаполнения, Организация);
	
	Если ОшибкаЗаполнения Тогда
		СтрокаСообщения = "Не указаны параметры учетной политики ("+СокрЛП(Организация)+") на " + Формат(Дата, "ДЛФ=DD") + Символы.ПС 
						+ "Табличное поле «Вычет НДС по приобретенным ценностям» не может быть заполнено автоматически.";
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:"+СтрокаСообщения,,Строка(Ссылка));
		КонецЕсли; 
		Возврат;
	КонецЕсли;

	ТаблицаРезультатов = ВычетПоПриобретеннымЦенностям.ВыгрузитьКолонки();
	
	Если ПредъявленНДСКВычету0 Тогда
		Таблица_НДСкВычету = ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0();
	Иначе	
		Таблица_НДСкВычету = ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный();
	КонецЕсли;
	
	Если Таблица_НДСкВычету.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		ВычетПоПриобретеннымЦенностям.Очистить();
		Возврат;
	КонецЕсли;
	
	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Таблица_НДСкВычету.ВыгрузитьКолонку("СчетФактура"), Истина);
	
	// Ограничиваем получаемые распределенные оплаты только отфактурованными поступлениями.
	// Отсутствие СФ допускается только для НДС, уплаченного на таможне, а оплаты по нему тоже не регистрируются.
	ТаблицаСФ = УчетНДС.ОпределитьНаличиеСчетовФактурПолученных(,КонецДня(Дата),Организация, СписокСчетовФактур,Ложь, Истина, Истина, КонецДня(Дата));
	ОтфактурованныеПоступления = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСФ.ВыгрузитьКолонку("Документ"),Истина);
	
	СписокСчетовФактур = Новый СписокЗначений;
	СписокСчетовФактур.ЗагрузитьЗначения(ОтфактурованныеПоступления);
	Для Каждого СтрокаСчетФактура Из Таблица_НДСкВычету Цикл
		Если Не СписокСчетовФактур.НайтиПоЗначению(СтрокаСчетФактура.СчетФактура) = Неопределено Тогда
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСчетФактура);
			
			Если ПредъявленНДСКВычету0 
				И НоваяСтрока.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 
				И Не КонецКвартала(НоваяСтрока.ДокументОтгрузки.Дата) = КонецКвартала(Дата) Тогда
				
				НоваяСтрока.ЗаписьДополнительногоЛиста = Истина;
				НоваяСтрока.КорректируемыйПериод = НоваяСтрока.ДокументОтгрузки.Дата;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
		
	ВычетПоПриобретеннымЦенностям.Загрузить(ТаблицаРезультатов);
	
	ВычетПоПриобретеннымЦенностям.Сортировать("СчетФактура, Поставщик, ВидЦенности, СтавкаНДС, ДокументОплаты, СчетУчетаНДС");

КонецПроцедуры // ЗаполнитьСтрокиДокумента()

// Вызывается из процедуры ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// Заполняет ТЧ ВычетПоПриобретеннымЦенностям по данным регистра НДСПредъявленный
Функция ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ДатаОплаты,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СУММА(НДСПредъявленныйОстаткиИтог.СуммаБезНДСОстаток), 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ (ЕСТЬNULL(СУММА(НДСПредъявленныйОстаткиИтог.СуммаБезНДСОстаток), 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0)) * ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) / ЕСТЬNULL(СУММА(НДСПредъявленныйОстаткиИтог.СуммаБезНДСОстаток), 0)
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СУММА(НДСПредъявленныйОстаткиИтог.НДСОстаток), 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ (ЕСТЬNULL(СУММА(НДСПредъявленныйОстаткиИтог.НДСОстаток), 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) * ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) / ЕСТЬNULL(СУММА(НДСПредъявленныйОстаткиИтог.НДСОстаток), 0)
		|	КОНЕЦ КАК НДС,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) КАК СчетФактураДата
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
		|				И ВЫБОР
		|					КОГДА ВидЦенности В (&ВидыЦенностейОплата)
		|						ТОГДА ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
		|					КОГДА ВидЦенности В (&ВидыЦенностей_ОплатаПоНДССМР)
		|						ТОГДА ВЫБОР
		|								КОГДА ЕСТЬNULL(СчетФактура.Дата, &Дата) < ДАТАВРЕМЯ(2009, 1, 1)
		|									ТОГДА ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
		|								ИНАЧЕ ИСТИНА
		|							КОНЕЦ
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСпоОСиНМА.Остатки(
		|				&ДатаГраница,
		|				Организация = &Организация
		|					И НДСВключенВСтоимость = ЛОЖЬ
		|					И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
		|					И НеВлияетНаВычет = ЛОЖЬ) КАК НДСпоОСиНМАОстатки
		|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСпоОСиНМАОстатки.СчетФактура
		|			И НДСПредъявленныйОстатки.ВидЦенности = НДСпоОСиНМАОстатки.ВидЦенности
		|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСпоОСиНМАОстатки.СтавкаНДС
		|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСпоОСиНМАОстатки.СчетУчетаНДС
		|			И (НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток > 0)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|				&ДатаГраница,
		|				Организация = &Организация
		|					И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйРеализация0Остатки
		|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСПредъявленныйРеализация0Остатки.СчетФактура
		|			И НДСПредъявленныйОстатки.ВидЦенности = НДСПредъявленныйРеализация0Остатки.ВидЦенности
		|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСПредъявленныйРеализация0Остатки.СтавкаНДС
		|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС
		|			И (НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток + НДСПредъявленныйРеализация0Остатки.НДСОстаток > 0)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(
		|				&ДатаГраница,
		|				Организация = &Организация
		|					И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
		|					И ВЫБОР
		|						КОГДА ВидЦенности В (&ВидыЦенностейОплата)
		|							ТОГДА ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
		|						КОГДА ВидЦенности В (&ВидыЦенностей_ОплатаПоНДССМР)
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(СчетФактура.Дата, &Дата) < ДАТАВРЕМЯ(2009, 1, 1)
		|										ТОГДА ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
		|									ИНАЧЕ ИСТИНА
		|								КОНЕЦ
		|						ИНАЧЕ ИСТИНА
		|					КОНЕЦ) КАК НДСПредъявленныйОстаткиИтог
		|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСПредъявленныйОстаткиИтог.СчетФактура
		|			И НДСПредъявленныйОстатки.ВидЦенности = НДСПредъявленныйОстаткиИтог.ВидЦенности
		|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСПредъявленныйОстаткиИтог.СтавкаНДС
		|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСПредъявленныйОстаткиИтог.СчетУчетаНДС
		|			И НДСПредъявленныйОстатки.Организация = НДСПредъявленныйОстаткиИтог.Организация
		|			И НДСПредъявленныйОстатки.Поставщик = НДСПредъявленныйОстаткиИтог.Поставщик
		|ГДЕ
		|	(НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСПредъявленныйОстатки.НДСОстаток > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата),
		|	НДСПредъявленныйОстатки.ДатаОплаты,
		|	НДСпоОСиНМАОстатки.СуммаБезНДСОстаток,
		|	НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток,
		|	НДСПредъявленныйРеализация0Остатки.НДСОстаток,
		|	НДСпоОСиНМАОстатки.НДСОстаток,
		|	НДСПредъявленныйОстатки.НДСОстаток
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстаткиИтог.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстаткиИтог.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	// Виды ценностей, по которым требуется оплата
	ВидыЦенностейОплата = Новый СписокЗначений;
	ВидыЦенностейОплата.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностейОплата.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностейОплата.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДССМР = Новый СписокЗначений;
	ВидыЦенностей_ОплатаПоНДССМР.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	Запрос.УстановитьПараметр("ВидыЦенностейОплата", ВидыЦенностейОплата);
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДССМР", ВидыЦенностей_ОплатаПоНДССМР);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

// Вызывается из процедуры ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// Заполняет ТЧ ВычетПоПриобретеннымЦенностям по данным регистра НДСПредъявленныйРеализация0
Функция ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0()

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
	               |	НДСПредъявленныйРеализация0Остатки.ВидЦенности,
	               |	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
	               |	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС,
	               |	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) КАК СуммаБезНДС,
	               |	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) КАК НДС,
	               |	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата, &Дата) КАК СчетФактураДата,
	               |	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
	               |	НДСПредъявленныйРеализация0Остатки.Состояние
	               |ИЗ
	               |	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	               |			&ДатаГраница,
	               |			Организация = &Организация
	               |				И Состояние В (&ОтрабатываемыеСостояния)) КАК НДСПредъявленныйРеализация0Остатки
	               |ГДЕ
	               |	(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток > 0
	               |			ИЛИ НДСПредъявленныйРеализация0Остатки.НДСОстаток > 0)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СчетФактураДата";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);

	// Виды ценностей, по которым требуется оплата
	ВидыЦенностейОплата = Новый СписокЗначений;
	ВидыЦенностейОплата.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностейОплата.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностейОплата.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностейОплата.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностейОплата.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	Запрос.УстановитьПараметр("ВидыЦенностейОплата", ВидыЦенностейОплата);
	
	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния",ОтрабатываемыеСостояния);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСПредъявленныйОстатки.СчетФактура,
	               |	НДСПредъявленныйОстатки.ВидЦенности,
	               |	НДСПредъявленныйОстатки.СтавкаНДС,
	               |	НДСПредъявленныйОстатки.СчетУчетаНДС,
	               |	НДСПредъявленныйОстатки.Поставщик,
	               |	НДСПредъявленныйОстатки.ДатаОплаты,
	               |	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	               |	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
	               |ИЗ
	               |	РегистрНакопления.НДСПредъявленный.Остатки(
	               |			&ДатаГраница,
	               |			Организация = &Организация
	               |				И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
	               |				И ВЫБОР
	               |					КОГДА ВидЦенности В (&ВидыЦенностейОплата)
	               |						ТОГДА ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |				И СчетФактура В (&СписокСчетовФактур)) КАК НДСПредъявленныйОстатки
	               |ГДЕ
	               |	НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток > 0";
	
	Запрос.УстановитьПараметр("СписокСчетовФактур", РезультатЗапроса.ВыгрузитьКолонку("СчетФактура"));
	
	НДСПредъявленный = Запрос.Выполнить().Выгрузить();
	Результат = РезультатЗапроса.СкопироватьКолонки();
	Результат.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Результат.Колонки.Добавить("ДатаОплаты", Новый ОписаниеТипов("Дата"));
	СтруктураОтбора = Новый структура("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС");
	
	// Отбираем строки к вычету по регистру НДСПредъявленныйРеализация0, не превышающие остаток по НДСПредъявленный.
	// Определяем поставщика и дату оплаты по остаткам НДСПредъявленный.
	
	Для Каждого СтрокаКВычету Из РезультатЗапроса Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаКВычету);
		
		СтрокиНДСПредъявленный = НДСПредъявленный.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиНДСПредъявленный.Количество() = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаНДСПредъявленный Из СтрокиНДСПредъявленный Цикл
			
			Если СтрокаКВычету.СуммаБезНДС = 0 И СтрокаКВычету.НДС = 0 Тогда
				Прервать;
			КонецЕсли;	
			
			СуммаБезНДС = Мин(СтрокаКВычету.СуммаБезНДС, СтрокаНДСПредъявленный.СуммаБезНДС);
			НДС = Мин(СтрокаКВычету.НДС, СтрокаНДСПредъявленный.НДС);
			
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКВычету);
			НоваяСтрока.СуммаБезНДС = СуммаБезНДС;
			НоваяСтрока.НДС = НДС;
			НоваяСтрока.Поставщик = СтрокаНДСПредъявленный.Поставщик;
			НоваяСтрока.ДатаОплаты = СтрокаНДСПредъявленный.ДатаОплаты;
			
			СтрокаКВычету.СуммаБезНДС = СтрокаКВычету.СуммаБезНДС - СуммаБезНДС;
			СтрокаКВычету.НДС = СтрокаКВычету.НДС - НДС;
			СтрокаНДСПредъявленный.СуммаБезНДС = СтрокаНДСПредъявленный.СуммаБезНДС - СуммаБезНДС;
			СтрокаНДСПредъявленный.НДС = СтрокаНДСПредъявленный.НДС - НДС;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0()

// Заполнение табличной части "Вычет НДС по приобретенным ценностям"
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Заполнение табличной части "Вычет НДС с полученных авансов"

// Процедура выполняет автоматическое заполнение табличной части документа
// Вызывается из процедуры КоманднаяПанельНДСсАвансовЗаполнить
//
Процедура ЗаполнитьСтроки_НДСсАвансов(ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаПолученияУчетнойПолитики = Ложь;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаПолученияУчетнойПолитики, Организация);
	
	Если ОшибкаПолученияУчетнойПолитики Тогда
		Возврат;
	КонецЕсли;

	Если мУпрощенныйУчетНДС = Неопределено Тогда
		мУпрощенныйУчетНДС = УчетнаяПолитикаНУ.УпрощенныйУчетНДС;
	КонецЕсли;
	
	ТаблицаРезультатов = НДСсАвансов.ВыгрузитьКолонки();
	ТаблицаРезультатов.Колонки.Добавить("СчетФактураВыданныйДата");
	
	Если Не мУпрощенныйУчетНДС Тогда
		
		Если ПредъявленНДСКВычету0 Тогда
			ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансовИНДСПредъявленныйРеализация0(ТаблицаРезультатов);

		Иначе	
			Дерево_НДСсАвансов = ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансов();
			Если Дерево_НДСсАвансов.Строки.Количество()=0 Тогда
				// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
				НДСсАвансов.Очистить();
				Возврат;
			КонецЕсли;
			
			СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСсАвансов.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
			
			ТаблицаЗачетовАвансов = ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФ(СписокСчетовФактур);
			
			РаспределитьЗачетыАвансаПоСФ(Дерево_НДСсАвансов, ТаблицаРезультатов,СписокСчетовФактур,ТаблицаЗачетовАвансов);
			
		КонецЕсли; 
		
		СтрокиКУдалению = ТаблицаРезультатов.НайтиСтроки(Новый Структура("СуммаБезНДС,НДС,ВалютнаяСумма", 0, 0, 0));
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаРезультатов.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
	Иначе 
		
		ТаблицаАвансов = ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансов_УпрощенныйУчет();
		Если ТаблицаАвансов.Количество() = 0 Тогда
			НДСсАвансов.Очистить();
			Возврат;
		КонецЕсли;
		
		СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаАвансов.ВыгрузитьКолонку("СчетФактура"),Истина);
		
		ТаблицаЗачетовАвансов = ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФ_УпрощенныйУчетНДС(СписокСчетовФактур);
		
		РаспределитьЗачетыАвансаПоСФ_УпрощенныйУчетНДС(ТаблицаАвансов, ТаблицаРезультатов, СписокСчетовФактур, ТаблицаЗачетовАвансов);
			
	КонецЕсли;
	
	НДСсАвансов.Загрузить(ТаблицаРезультатов);
	
	НДСсАвансов.Сортировать("СчетФактура, Покупатель, ДоговорКонтрагента, ДатаСобытия, СтавкаНДС, ВалютаДокумента, ДокументОтгрузки, Состояние");
	
КонецПроцедуры // ЗаполнитьСтрокиДокумента()

// Вызывается из процедуры ЗаполнитьСтроки_НДСсАвансов.
// Заполняет ТЧ ВычетПоПриобретеннымЦенностям по данным регистра НДСПредъявленный
Функция ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСсАвансовОстатки.СчетФактура КАК СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0) > НДСсАвансовОстатки.СуммаБезНДСОстаток
	|				ТОГДА 0
	|			ИНАЧЕ НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0)
	|		КОНЕЦ) КАК СуммаБезНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0) > НДСсАвансовОстатки.НДСОстаток
	|				ТОГДА 0
	|			ИНАЧЕ НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0)
	|		КОНЕЦ) КАК НДС,
	|	СУММА(ВЫРАЗИТЬ((ВЫБОР
	|				КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0) > НДСсАвансовОстатки.СуммаБезНДСОстаток
	|					ТОГДА 0
	|				ИНАЧЕ НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0)
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0) > НДСсАвансовОстатки.НДСОстаток
	|					ТОГДА 0
	|				ИНАЧЕ НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0)
	|			КОНЕЦ) * НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток / ВЫБОР
	|				КОГДА НДСсАвансовОстатки.СуммаБезНДСОстаток + НДСсАвансовОстатки.НДСОстаток > 0
	|					ТОГДА НДСсАвансовОстатки.СуммаБезНДСОстаток + НДСсАвансовОстатки.НДСОстаток
	|				ИНАЧЕ 1
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ВалютнаяСуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(
	|			&ДатаГраница,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)) КАК НДСсАвансовОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
	|			НДСПредъявленныйРеализация0Остатки.СтавкаНДС КАК СтавкаНДС,
	|			НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток КАК СуммаБезНДСОстаток,
	|			НДСПредъявленныйРеализация0Остатки.НДСОстаток КАК НДСОстаток,
	|			НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Контрагент КАК Покупатель,
	|			НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.ДоговорКонтрагента КАК ДоговорКонтрагента
	|		ИЗ
	|			РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|				&ДатаГраница,
	|				Организация = &Организация
	|				    И ВидЦенности В (&ВидыЦенностейАванс)) КАК НДСПредъявленныйРеализация0Остатки) КАК НДСсАвансовПоРеализации0
	|		ПО НДСсАвансовОстатки.СчетФактура = НДСсАвансовПоРеализации0.СчетФактура
	|			И НДСсАвансовОстатки.СтавкаНДС = НДСсАвансовПоРеализации0.СтавкаНДС
	|			И НДСсАвансовОстатки.Покупатель = НДСсАвансовПоРеализации0.Покупатель
	|			И НДСсАвансовОстатки.ДоговорКонтрагента = НДСсАвансовПоРеализации0.ДоговорКонтрагента
	|ГДЕ
	|	(НДСсАвансовОстатки.СуммаБезНДСОстаток > 0
	|			ИЛИ НДСсАвансовОстатки.НДСОстаток > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СчетФактура.Дата,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовПоРеализации0.СуммаБезНДСОстаток,
	|	НДСсАвансовПоРеализации0.НДСОстаток
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|ИТОГИ ПО
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	// Анализируемые виды ценностей
	ВидыЦенностейАванс = Новый СписокЗначений;
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидыЦенностейАванс", ВидыЦенностейАванс);

	Дерево_НДСсАвансов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Дерево_НДСсАвансов.Строки.Количество() = 0 тогда 
		Возврат Дерево_НДСсАвансов;
	КонецЕсли;
	
	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСсАвансов.Строки.ВыгрузитьКолонку("СчетФактура"), Истина);
	
	// Получим остатки по авансам для определения суммы незачтенного аванса.
	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным); // 62.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ); // 62.32
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	
	// Движения по курсовым разницам не должны вызывать регистрации аванса
	Запрос.УстановитьПараметр("МассивСчетовАвансов", МассивСчетовАвансов);
	
	СубконтоСчетаРасчетов_ЕстьДР = Новый Массив();
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("СубконтоСчетаРасчетов_ЕстьДР",  СубконтоСчетаРасчетов_ЕстьДР);

	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	// Получим остатки по авансам для определения суммы незачтенного аванса.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Покупатель,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.Субконто3 КАК ДокументОплаты,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|			ТОГДА ХозрасчетныйОстатки.Валюта
	|		ИНАЧЕ &ВалютаРегламентированногоУчета
	|	КОНЕЦ КАК ВалютаРасчетов,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|					И ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах, ЛОЖЬ) = ЛОЖЬ
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК ВалютнаяСумма,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаГраница,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Хозрасчетный.Ссылка
	|				ИЗ
	|					ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|				ГДЕ
	|					Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовАвансов)
	|					И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСконтрагентами)),
	|			&СубконтоСчетаРасчетов_ЕстьДР,
	|			Организация = &Организация
	|				И Субконто3 В (&СписокСчетовФактур)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|			ТОГДА ХозрасчетныйОстатки.Валюта
	|		ИНАЧЕ &ВалютаРегламентированногоУчета
	|	КОНЕЦ,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах, ЛОЖЬ)
	|ИТОГИ ПО
	|	ДокументОплаты";
	
	
	НепогашенныеАвансы = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого НепогашенныйАвансПоСФ Из НепогашенныеАвансы.Строки Цикл
		
		ЗафиксированныйАвансПоСФ = Дерево_НДСсАвансов.Строки.Найти(НепогашенныйАвансПоСФ.ДокументОплаты,"СчетФактура");
		Если ЗафиксированныйАвансПоСФ = Неопределено Тогда
		    Продолжить;
		КонецЕсли; 
		
		Для Каждого СтрокаЗафиксированногоАванса Из НепогашенныйАвансПоСФ.Строки Цикл
			
			ВалютаАванса = ?(СтрокаЗафиксированногоАванса.РасчетыВУсловныхЕдиницах Или НЕ ЗначениеЗаполнено(СтрокаЗафиксированногоАванса.ВалютаРасчетов),мВалютаРегламентированногоУчета,СтрокаЗафиксированногоАванса.ВалютаРасчетов);
						
			Отбор = Новый Структура("Покупатель, ДоговорКонтрагента, ВалютаАванса", СтрокаЗафиксированногоАванса.Покупатель, СтрокаЗафиксированногоАванса.ДоговорКонтрагента, ВалютаАванса);
			
			СтрокиАвансаПоОтбору = ЗафиксированныйАвансПоСФ.Строки.НайтиСтроки(Отбор);
			Если СтрокиАвансаПоОтбору.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			МассивСуммаБезНДС = новый Массив();
			МассивСуммаНДС = новый Массив();
			МассивВалютнаяСуммаСНДС = новый Массив();
			
			СуммаБезНДС = 0;
			СуммаНДС = 0;
			ВалютнаяСуммаСНДС = 0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
				МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
				МассивВалютнаяСуммаСНДС.Добавить(СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС);
				
				СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
				СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
				ВалютнаяСуммаСНДС = ВалютнаяСуммаСНДС + СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС
			КонецЦикла; 
			
			Если ВалютнаяСуммаСНДС = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаЗафиксированногоАванса.ВалютаРасчетов = мВалютаРегламентированногоУчета или 
				НЕ ЗначениеЗаполнено(СтрокаЗафиксированногоАванса.ВалютаРасчетов) Тогда
				// Сопоставление по рублевой сумме
				ВалютнаяСуммаСНДС = Окр(ВалютнаяСуммаСНДС*Мин(СтрокаЗафиксированногоАванса.Сумма, (СуммаБезНДС+СуммаНДС))/(СуммаБезНДС+СуммаНДС), 2);
				СуммаСНДС = Мин(СтрокаЗафиксированногоАванса.Сумма, (СуммаБезНДС+СуммаНДС));
				Если СуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе
				// Сопоставление по валютной сумме
				СуммаСНДС = Окр((СуммаБезНДС+СуммаНДС)*Мин(СтрокаЗафиксированногоАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС)/ВалютнаяСуммаСНДС,2);
				ВалютнаяСуммаСНДС = Мин(СтрокаЗафиксированногоАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС);
				
				Если ВалютнаяСуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
			КонецЕсли; 
			
			СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
			СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
			Если СуммаБезНДС>0 Тогда
				МассивСуммаБезНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаБезНДС,МассивСуммаБезНДС);
			КонецЕсли;
			
			Если СуммаНДС>0 Тогда
				МассивСуммаНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаНДС,МассивСуммаНДС);
			КонецЕсли; 
			
			Если ВалютнаяСуммаСНДС >0 Тогда
				МассивВалютнаяСуммаСНДС = ОбщегоНазначения.РаспределитьПропорционально(ВалютнаяСуммаСНДС,МассивВалютнаяСуммаСНДС);
			КонецЕсли; 
			
			Счетчик =0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
				СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
				СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС = СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС - ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0);
				
				
				Счетчик = Счетчик +1;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
 	КУдалениюСФ = новый массив();
	Для каждого СтрокаПоСФ Из Дерево_НДСсАвансов.Строки Цикл
		СтрокиКУдалению = Новый Массив();
		Для каждого СтрокаАванса Из СтрокаПоСФ.Строки Цикл
			Если СтрокаАванса.СуммаБезНДС = 0 и СтрокаАванса.НДС = 0  и СтрокаАванса.ВалютнаяСуммаСНДС = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаАванса);
			КонецЕсли; 
		КонецЦикла; 
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			СтрокаПоСФ.Строки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		Если СтрокаПоСФ.Строки.Количество() = 0 тогда
			КУдалениюСФ.Добавить(СтрокаПоСФ);
		Иначе
			СтрокаПоСФ.СуммаБезНДС = СтрокаПоСФ.Строки.Итог("СуммаБезНДС");
			СтрокаПоСФ.НДС = СтрокаПоСФ.Строки.Итог("НДС");
			СтрокаПоСФ.ВалютнаяСуммаСНДС = СтрокаПоСФ.Строки.Итог("ВалютнаяСуммаСНДС");
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаКУдалению Из КУдалениюСФ Цикл
		Дерево_НДСсАвансов.Строки.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Возврат Дерево_НДСсАвансов;
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

// Вызывается из процедуры ЗаполнитьСтроки_НДСсАвансов.
// Заполняет ТЧ ВычетПоПриобретеннымЦенностям по данным регистра НДСПредъявленный
Функция  ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансовИНДСПредъявленныйРеализация0(ТаблицаРезультатов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйРеализация0Остатки.Состояние,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
	|	СУММА(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСПредъявленныйРеализация0Остатки.НДСОстаток) КАК НДС,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Контрагент КАК Покупатель,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Дата
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|		&ДатаГраница,
	|		Организация = &Организация
	|		    И ВидЦенности В (&ВидыЦенностейАванс)
	|		    И состояние В (&ОтрабатываемыеСостояния)) КАК НДСПредъявленныйРеализация0Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйРеализация0Остатки.Состояние,
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура,
	|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Контрагент,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.ДоговорКонтрагента,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата
	|ИТОГИ ПО
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	// Анализируемые виды ценностей
	ВидыЦенностейАванс = Новый СписокЗначений;
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидыЦенностейАванс", ВидыЦенностейАванс);
	
	// Отрабатываемые состояния (ожидание 0% не отрабатываем)
	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния", ОтрабатываемыеСостояния);

	АвансыНДСПредъявленныйРеализация0 = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	Если АвансыНДСПредъявленныйРеализация0.Строки.Количество() = 0 Тогда
	    Возврат ТаблицаРезультатов;
	КонецЕсли; 
	
	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива( АвансыНДСПредъявленныйРеализация0.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСсАвансовОстатки.СчетФактура КАК СчетФактура,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	СУММА(НДСсАвансовОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСсАвансовОстатки.НДСОстаток) КАК НДС,
	|	СУММА(НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток) КАК ВалютнаяСуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(
	|		&ДатаГраница,
	|		Организация = &Организация
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)) КАК НДСсАвансовОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.ВалютаАванса
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДСсАвансовОстатки.СчетФактура.Дата
	|ИТОГИ ПО
	|	СчетФактура";
	
	ЗафиксированныеАвансы = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ЗафиксированныеАвансы.Строки.Количество() = 0 тогда
		Возврат ТаблицаРезультатов;
	КонецЕсли;
	
	Для каждого СтрокаСФ Из АвансыНДСПредъявленныйРеализация0.Строки Цикл
		
		ЗафиксированныйАвансПоСФ = ЗафиксированныеАвансы.Строки.Найти(СтрокаСФ.СчетФактура,"СчетФактура");
		
		Если ЗафиксированныйАвансПоСФ = Неопределено Тогда
		    Продолжить;
		КонецЕсли; 
		
		Для каждого СтрокаЗафиксированногоАванса Из ЗафиксированныйАвансПоСФ.Строки Цикл
			
			Отбор = Новый Структура("Покупатель,ДоговорКонтрагента,СтавкаНДС",СтрокаЗафиксированногоАванса.Покупатель, СтрокаЗафиксированногоАванса.ДоговорКонтрагента, СтрокаЗафиксированногоАванса.СтавкаНДС);
			
			СтрокиАванса0 = СтрокаСФ.Строки.НайтиСтроки(Отбор);
			Если СтрокиАванса0.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			МассивСуммаБезНДС = новый Массив();
			МассивСуммаНДС = новый Массив();
			МассивСуммаСНДС = новый Массив();
			СуммаБезНДС = 0;
			СуммаНДС = 0;
			Для каждого СтрокаАванса0 Из СтрокиАванса0 Цикл
				МассивСуммаБезНДС.Добавить(СтрокаАванса0.СуммаБезНДС);
				МассивСуммаНДС.Добавить(СтрокаАванса0.НДС);
				МассивСуммаСНДС.Добавить(СтрокаАванса0.СуммаБезНДС+СтрокаАванса0.НДС);
				
				СуммаБезНДС = СуммаБезНДС + СтрокаАванса0.СуммаБезНДС;
				СуммаНДС = СуммаНДС + СтрокаАванса0.НДС;
			КонецЦикла; 
			
			СуммаБезНДС = Мин(СтрокаЗафиксированногоАванса.СуммаБезНДС, СуммаБезНДС);
			СуммаНДС = Мин(СтрокаЗафиксированногоАванса.НДС, СуммаНДС);
			
			Если СуммаБезНДС>0 Тогда
				МассивСуммаБезНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаБезНДС,МассивСуммаБезНДС);
			КонецЕсли; 
			Если СуммаНДС>0 Тогда
				МассивСуммаНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаНДС,МассивСуммаНДС);
			КонецЕсли; 
			
			Если СуммаБезНДС + СуммаНДС >0 Тогда
				ВалютнаяСуммаСНДС = Окр(СтрокаЗафиксированногоАванса.ВалютнаяСуммаСНДС * (СуммаБезНДС+СуммаНДС)/(СтрокаЗафиксированногоАванса.СуммаБезНДС+СтрокаЗафиксированногоАванса.НДС),2);
			Иначе 
				ВалютнаяСуммаСНДС = 0;
			КонецЕсли; 
			
			
			Если ВалютнаяСуммаСНДС>0 Тогда
				МассивСуммаСНДС = ОбщегоНазначения.РаспределитьПропорционально(ВалютнаяСуммаСНДС,МассивСуммаСНДС);
			КонецЕсли;
			
			Счетчик =0;
			Для каждого СтрокаАванса0 Из СтрокиАванса0 Цикл
			    СтрокаРезультата = ТаблицаРезультатов.Добавить();
				СтрокаРезультата.СчетФактура		= СтрокаАванса0.СчетФактура;
				СтрокаРезультата.Покупатель			= СтрокаАванса0.Покупатель;
				СтрокаРезультата.ДоговорКонтрагента	= СтрокаАванса0.ДоговорКонтрагента;
				СтрокаРезультата.СтавкаНДС			= СтрокаАванса0.СтавкаНДС;
				СтрокаРезультата.ДокументОтгрузки	= СтрокаАванса0.ДокументОтгрузки;
				СтрокаРезультата.Состояние			= СтрокаАванса0.Состояние;
				СтрокаРезультата.ВалютаДокумента	= СтрокаЗафиксированногоАванса.ВалютаАванса;
				
				//Если СтрокаРезультата.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
				СтрокаРезультата.ДатаСобытия	= СтрокаАванса0.ДокументОтгрузкиДата;
				//Иначе
				//	СтрокаРезультата.ДатаСобытия	= СтрокаАванса0.ДокументОтгрузкиДата;
				//КонецЕсли; 
				
				СтрокаРезультата.СуммаБезНДС		= ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
				СтрокаРезультата.НДС				= ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
				СтрокаРезультата.ВалютнаяСумма		= ?(ВалютнаяСуммаСНДС>0,МассивСуммаСНДС[Счетчик],0);
				
				СтрокаАванса0.СуммаБезНДС = СтрокаАванса0.СуммаБезНДС - СтрокаРезультата.СуммаБезНДС;
				СтрокаАванса0.НДС = СтрокаАванса0.НДС - СтрокаРезультата.НДС;
				
			    Счетчик = Счетчик +1;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат ТаблицаРезультатов;
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

// Процедура вызывается из ЗаполнитьСтроки_НДСсАвансов.
// По списку счетов-фактур определяет суммы не использованных ранее распределенных оплат.
Функция ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФ(СписокСчетовФактур)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	 
	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным); // 62.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ); // 62.32
	
	// Движения по курсовым разницам не должны вызывать регистрации аванса
	Запрос.УстановитьПараметр("МассивСчетовАвансов", МассивСчетовАвансов);
	
	СубконтоСчетаРасчетов_ЕстьДР = Новый Массив();
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("СубконтоСчетаРасчетов_ЕстьДР",  СубконтоСчетаРасчетов_ЕстьДР);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Субконто1 КАК Покупатель,
	|	ХозрасчетныйОбороты.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОбороты.Субконто3 КАК ДокументОплаты,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет.Валютный
	|				И (НЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт ЕСТЬ NULL )
	|			ТОГДА ХозрасчетныйОбороты.Валюта
	|		ИНАЧЕ &ВалютаРегламентированногоУчета
	|	КОНЕЦ КАК ВалютаРасчетов,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Счет.Валютный
	|					И (НЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт ЕСТЬ NULL )
	|				ТОГДА ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|			ИНАЧЕ ХозрасчетныйОбороты.СуммаОборотДт
	|		КОНЕЦ) КАК ВалютнаяСумма,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ХозрасчетныйОбороты.Период КАК Дата
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			,
	|			&ДатаГраница,
	|			День,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Хозрасчетный.Ссылка
	|				ИЗ
	|					ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|				ГДЕ
	|					Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовАвансов)
	|					И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСконтрагентами)),
	|			&СубконтоСчетаРасчетов_ЕстьДР,
	|			Организация = &Организация
	|				И Субконто3 В (&СписокСчетовФактур),
	|			(НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВекселяПолученные)))
	|				И (НЕ КорСчет В ИЕРАРХИИ (&МассивСчетовАвансов)),
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходыИРасходы))
	|				ТОГДА (НЕ ХозрасчетныйОбороты.КорСубконто1 В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								Справочник.ПрочиеДоходыИРасходы.Ссылка
	|							ИЗ
	|								Справочник.ПрочиеДоходыИРасходы
	|							ГДЕ
	|								Справочник.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы)))
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ХозрасчетныйОбороты.СуммаОборотДт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Субконто3,
	|	ХозрасчетныйОбороты.Организация,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет.Валютный
	|				И (НЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт ЕСТЬ NULL )
	|			ТОГДА ХозрасчетныйОбороты.Валюта
	|		ИНАЧЕ &ВалютаРегламентированногоУчета
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|ИТОГИ ПО
	|	ДокументОплаты";
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	

КонецФункции // ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФ()

// Процедура осуществляет автоматическое распределение фактов зачета авансов
// на документы отгрузки, оформленные в рамках соответствующего договора
//
Процедура РаспределитьЗачетыАвансаПоСФ(Дерево_НДСсАвансов, ТаблицаРезультатов, СписокСчетовФактур, ТаблицаЗачетовАвансов)
	
	СчетаФактурыВыданные = ПолучитьСписокСчетовФактурВыданныхНаАванс(СписокСчетовФактур);
	
	Для Каждого ПогашенныйАвансПоСФ Из ТаблицаЗачетовАвансов.Строки Цикл
		
		ЗафиксированныйАвансПоСФ = Дерево_НДСсАвансов.Строки.Найти(ПогашенныйАвансПоСФ.ДокументОплаты, "СчетФактура");
		Если ЗафиксированныйАвансПоСФ = Неопределено Тогда
		    Продолжить;
		КонецЕсли; 
		
		СчетФактураВыданныйДата = '00010101';
		СчетФактураВыданный = СчетаФактурыВыданные.Найти(ПогашенныйАвансПоСФ.ДокументОплаты, "СчетФактура");
		Если СчетФактураВыданный <> Неопределено Тогда
			СчетФактураВыданныйДата = СчетФактураВыданный.СчетФактураВыданныйДата;
		КонецЕсли;
		
		Для Каждого СтрокаПогашенияАванса Из ПогашенныйАвансПоСФ.Строки Цикл
			
			Если НачалоДня(СтрокаПогашенияАванса.Дата) < НачалоДня(СчетФактураВыданныйДата) Тогда
				Продолжить;
			КонецЕсли;
			
			ВалютаАванса = ?(СтрокаПогашенияАванса.РасчетыВУсловныхЕдиницах или НЕ ЗначениеЗаполнено(СтрокаПогашенияАванса.ВалютаРасчетов),мВалютаРегламентированногоУчета,СтрокаПогашенияАванса.ВалютаРасчетов);
			
			Отбор = Новый Структура("Покупатель, ДоговорКонтрагента, ВалютаАванса", СтрокаПогашенияАванса.Покупатель, СтрокаПогашенияАванса.ДоговорКонтрагента, ВалютаАванса);
			
			СтрокиАвансаПоОтбору = ЗафиксированныйАвансПоСФ.Строки.НайтиСтроки(Отбор);
			Если СтрокиАвансаПоОтбору.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			МассивСуммаБезНДС = новый Массив();
			МассивСуммаНДС = новый Массив();
			МассивВалютнаяСуммаСНДС = новый Массив();
			
			СуммаБезНДС = 0;
			СуммаНДС = 0;
			ВалютнаяСуммаСНДС = 0;
			Для Каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				
				МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
				МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
				МассивВалютнаяСуммаСНДС.Добавить(СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС);
				
				СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
				СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
				ВалютнаяСуммаСНДС = ВалютнаяСуммаСНДС + СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС
				
			КонецЦикла; 
			
			Если ВалютаАванса = мВалютаРегламентированногоУчета Тогда
				Если СуммаБезНДС+СуммаНДС = 0 тогда
					Продолжить;
				КонецЕсли; 
				// Сопоставление по рублевой сумме
				ВалютнаяСуммаСНДС = Окр(ВалютнаяСуммаСНДС*Мин(СтрокаПогашенияАванса.Сумма, (СуммаБезНДС+СуммаНДС))/(СуммаБезНДС+СуммаНДС), 2);
				СуммаСНДС = Мин(СтрокаПогашенияАванса.Сумма, (СуммаБезНДС+СуммаНДС));
				Если СуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если ВалютнаяСуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли; 
				// Сопоставление по валютной сумме
				СуммаСНДС = Окр((СуммаБезНДС+СуммаНДС)*Мин(СтрокаПогашенияАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС)/ВалютнаяСуммаСНДС,2);
				ВалютнаяСуммаСНДС = Мин(СтрокаПогашенияАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС);
				
				Если ВалютнаяСуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
			КонецЕсли; 
			
			СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
			СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
			Если СуммаБезНДС>0 Тогда
				МассивСуммаБезНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаБезНДС,МассивСуммаБезНДС);
			КонецЕсли;
			
			Если СуммаНДС>0 Тогда
				МассивСуммаНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаНДС,МассивСуммаНДС);
			КонецЕсли; 
			
			Если ВалютнаяСуммаСНДС >0 Тогда
				МассивВалютнаяСуммаСНДС = ОбщегоНазначения.РаспределитьПропорционально(ВалютнаяСуммаСНДС,МассивВалютнаяСуммаСНДС);
			КонецЕсли; 
			
			Счетчик =0;
			Для Каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				
				Если ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0) = 0 и ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0) = 0 и ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0)= 0  Тогда
					Продолжить;
				КонецЕсли; 
				
				СтрокаРезультата = ТаблицаРезультатов.Добавить();
				СтрокаРезультата.СчетФактура	= СтрокаАвансаПоОтбору.СчетФактура;
				СтрокаРезультата.Покупатель		= СтрокаАвансаПоОтбору.Покупатель;
				СтрокаРезультата.ДоговорКонтрагента	= СтрокаАвансаПоОтбору.ДоговорКонтрагента;
				СтрокаРезультата.ВалютаДокумента	= СтрокаАвансаПоОтбору.ВалютаАванса;
				СтрокаРезультата.СтавкаНДС		= СтрокаАвансаПоОтбору.СтавкаНДС;

				СтрокаРезультата.ДатаСобытия	= СтрокаПогашенияАванса.Дата;
				
				СтрокаРезультата.СуммаБезНДС	= ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
				СтрокаРезультата.НДС			=  ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
				СтрокаРезультата.ВалютнаяСумма	=  ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0);
				
				СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
				СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
				СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС = СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС - ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0);
				
				Счетчик = Счетчик +1;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

// Вызывается из процедуры ЗаполнитьСтроки_НДСсАвансов.
// Заполняет ТЧ ВычетПоПриобретеннымЦенностям по данным регистра НДСПредъявленный
Функция ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансов_УпрощенныйУчет()

	Запрос = Новый Запрос;
	
	ВидыСубконто = Новый Массив;

	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные);
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Покупатель,
	|	ХозрасчетныйОстатки.Субконто2 КАК СчетФактура,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаНДСАванса
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаГраница, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСПоАвансамИПредоплатам), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	ОстаткиПоСчету = Запрос.Выполнить().Выгрузить();
	
	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ОстаткиПоСчету.ВыгрузитьКолонку("СчетФактура"));
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	ВидыЦенностейАванс = Новый СписокЗначений;
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	Запрос.УстановитьПараметр("ВидыЦенностейАванс", ВидыЦенностейАванс);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот, 0) - ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0)) КАК СуммаБезНДС,
	|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.НДСОборот, 0) - ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0)) КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&ДатаГраница,
	|			,
	|			Организация = &Организация
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И ВидЦенности В (&ВидыЦенностейАванс)) КАК НДСЗаписиКнигиПродажОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|				,
	|				&ДатаГраница,
	|				,
	|				Организация = &Организация
	|					И СчетФактура В (&СписокСчетовФактур)
	|					И ВидЦенности В (&ВидыЦенностейАванс)) КАК НДСЗаписиКнигиПокупокОбороты
	|		ПО (НДСЗаписиКнигиПокупокОбороты.Организация = НДСЗаписиКнигиПродажОбороты.Организация)
	|			И (НДСЗаписиКнигиПокупокОбороты.Поставщик = НДСЗаписиКнигиПродажОбороты.Покупатель)
	|			И (НДСЗаписиКнигиПокупокОбороты.СчетФактура = НДСЗаписиКнигиПродажОбороты.СчетФактура)
	|			И (НДСЗаписиКнигиПокупокОбороты.ВидЦенности = НДСЗаписиКнигиПродажОбороты.ВидЦенности)
	|			И (НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = НДСЗаписиКнигиПродажОбороты.СтавкаНДС)
	|ГДЕ
	|	ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот, 0) - ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0) > 0
	|	И ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.НДСОборот, 0) - ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0) > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата";
	
	ОстаткиПоРегистру = Запрос.Выполнить().Выгрузить();
	
	Если ОстаткиПоРегистру.Количество() = 0 Тогда
		Возврат ОстаткиПоРегистру;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("СчетФактура, Покупатель");
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаОстаткаПоСчету Из ОстаткиПоСчету Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаОстаткаПоСчету);
		
		СтрокиОстаткаПоРегистру = ОстаткиПоРегистру.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаОстаткаПоРегистру Из СтрокиОстаткаПоРегистру Цикл
			
			Если СтрокаОстаткаПоСчету.СуммаНДСАванса = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаОстаткаПоРегистру);
				Продолжить;
			КонецЕсли;
			
			Если СтрокаОстаткаПоСчету.СуммаНДСАванса >= СтрокаОстаткаПоРегистру.НДС Тогда
				СтрокаОстаткаПоСчету.СуммаНДСАванса = СтрокаОстаткаПоСчету.СуммаНДСАванса - СтрокаОстаткаПоРегистру.НДС;
			Иначе				
				СтрокаОстаткаПоРегистру.СуммаБезНДС = СтрокаОстаткаПоРегистру.СуммаБезНДС - (СтрокаОстаткаПоРегистру.СуммаБезНДС/СтрокаОстаткаПоРегистру.НДС) * СтрокаОстаткаПоСчету.СуммаНДСАванса;
				СтрокаОстаткаПоРегистру.НДС = СтрокаОстаткаПоРегистру.НДС - СтрокаОстаткаПоСчету.СуммаНДСАванса;
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ОстаткиПоРегистру.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Если ОстаткиПоРегистру.Количество() = 0 Тогда
		Возврат ОстаткиПоРегистру;
	КонецЕсли;
	
	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным); // 62.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ); // 62.32
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	
	// Движения по курсовым разницам не должны вызывать регистрации аванса
	Запрос.УстановитьПараметр("МассивСчетовАвансов", МассивСчетовАвансов);
	
	СубконтоСчетаРасчетов_ЕстьДР = Новый Массив();
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("СубконтоСчетаРасчетов_ЕстьДР",  СубконтоСчетаРасчетов_ЕстьДР);
	
	// Получим остатки по авансам для определения суммы незачтенного аванса.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Покупатель,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.Субконто3 КАК СчетФактура,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаГраница,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Хозрасчетный.Ссылка
	|				ИЗ
	|					ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|				ГДЕ
	|					Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовАвансов)
	|					И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСконтрагентами)),
	|			&СубконтоСчетаРасчетов_ЕстьДР,
	|			Организация = &Организация
	|				И Субконто3 В (&СписокСчетовФактур)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3";
	
	НепогашенныеАвансы = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтбора = Новый Структура("Покупатель, ДоговорКонтрагента");
		
	Для каждого НепогашенныйАвансПоСФ Из НепогашенныеАвансы Цикл
		
		Если НепогашенныйАвансПоСФ.СчетФактура = Неопределено Тогда
			Если СтруктураОтбора.Свойство("СчетФактура") Тогда
				СтруктураОтбора.Удалить("СчетФактура");
			КонецЕсли;
		Иначе
			Если Не СтруктураОтбора.Свойство("СчетФактура") Тогда
				СтруктураОтбора.Вставить("СчетФактура");
			КонецЕсли;
		КонецЕсли;
		// Отбор строк зачета авансов с документом расчетов
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, НепогашенныйАвансПоСФ);
		
		СтрокиАвансаПоОтбору = ОстаткиПоРегистру.НайтиСтроки(СтруктураОтбора);
		
		МассивСуммаБезНДС = Новый Массив();
		МассивСуммаНДС = Новый Массив();
			
		СуммаБезНДС = 0;
		СуммаНДС = 0;
		Для Каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
			МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
			МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
			
			СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
			СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
		КонецЦикла; 
			
		СуммаСНДС = Мин(НепогашенныйАвансПоСФ.Сумма, (СуммаБезНДС+СуммаНДС));
		Если СуммаСНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
				
		СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
		СуммаНДС = СуммаСНДС - СуммаБезНДС;
		
		Если СуммаБезНДС>0 Тогда
			МассивСуммаБезНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаБезНДС,МассивСуммаБезНДС);
		КонецЕсли;
		
		Если СуммаНДС>0 Тогда
			МассивСуммаНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаНДС,МассивСуммаНДС);
		КонецЕсли; 
		
		Счетчик =0;
		Для Каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
			СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0);
			СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0);
			
			Счетчик = Счетчик + 1;
		КонецЦикла; 
	КонецЦикла;
	
	СтрокиКУдалению = Новый Массив();
	Для Каждого СтрокаПоСФ Из ОстаткиПоРегистру Цикл
		Если СтрокаПоСФ.СуммаБезНДС = 0 И СтрокаПоСФ.НДС = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаПоСФ);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ОстаткиПоРегистру.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Возврат ОстаткиПоРегистру;
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

Функция ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФ_УпрощенныйУчетНДС(СписокСчетовФактур)
	
	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным); // 62.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ); // 62.32
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	
	// Движения по курсовым разницам не должны вызывать регистрации аванса
	Запрос.УстановитьПараметр("МассивСчетовАвансов", МассивСчетовАвансов);

	СубконтоСчетаРасчетов_ЕстьДР = Новый Массив();
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("СубконтоСчетаРасчетов_ЕстьДР",  СубконтоСчетаРасчетов_ЕстьДР);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Субконто1 КАК Покупатель,
	|	ХозрасчетныйОбороты.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОбороты.Субконто3 КАК СчетФактура,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаАванса,
	|	ХозрасчетныйОбороты.Период КАК ДатаСобытия
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			,
	|			&ДатаГраница,
	|			День,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Хозрасчетный.Ссылка
	|				ИЗ
	|					ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|				ГДЕ
	|					Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовАвансов)
	|					И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСконтрагентами)),
	|			&СубконтоСчетаРасчетов_ЕстьДР,
	|			Организация = &Организация
	|				И Субконто3 В (&СписокСчетовФактур),
	|			(НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВекселяПолученные)))
	|				И (НЕ КорСчет В ИЕРАРХИИ (&МассивСчетовАвансов)),
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходыИРасходы))
	|				ТОГДА (НЕ ХозрасчетныйОбороты.КорСубконто1 В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								Справочник.ПрочиеДоходыИРасходы.Ссылка
	|							ИЗ
	|								Справочник.ПрочиеДоходыИРасходы
	|							ГДЕ
	|								Справочник.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы)))
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ХозрасчетныйОбороты.СуммаОборотДт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Субконто3,
	|	ХозрасчетныйОбороты.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия УБЫВ";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФ_УпрощенныйУчетНДС()

Процедура РаспределитьЗачетыАвансаПоСФ_УпрощенныйУчетНДС(ТаблицаАвансов, ТаблицаРезультатов,СписокСчетовФактур,ТаблицаЗачетовАвансов)
	
	СчетаФактурыВыданные = ПолучитьСписокСчетовФактурВыданныхНаАванс(СписокСчетовФактур);
	
	СтруктураОтбора = Новый Структура("Покупатель, ДоговорКонтрагента");

	Для Каждого ПогашенныйАвансПоСФ Из ТаблицаЗачетовАвансов Цикл
		
		СчетФактураВыданныйДата = '00010101';
		СчетФактураВыданный = СчетаФактурыВыданные.Найти(ПогашенныйАвансПоСФ.СчетФактура, "СчетФактура");
		Если СчетФактураВыданный <> Неопределено Тогда
			СчетФактураВыданныйДата = СчетФактураВыданный.СчетФактураВыданныйДата;
		КонецЕсли;
		
		Если ПогашенныйАвансПоСФ.ДатаСобытия < СчетФактураВыданныйДата Тогда
			Продолжить;
		КонецЕсли;
			
		Если ПогашенныйАвансПоСФ.СчетФактура = Неопределено Тогда
			Если СтруктураОтбора.Свойство("СчетФактура") Тогда
				СтруктураОтбора.Удалить("СчетФактура");
			КонецЕсли;
		Иначе
			Если Не СтруктураОтбора.Свойство("СчетФактура") Тогда
				СтруктураОтбора.Вставить("СчетФактура");
			КонецЕсли;
		КонецЕсли;
		// Отбор строк зачета авансов с документом расчетов
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ПогашенныйАвансПоСФ);
		
		СтрокиАвансаПоОтбору = ТаблицаАвансов.НайтиСтроки(СтруктураОтбора);

		Если СтрокиАвансаПоОтбору.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		МассивСуммаБезНДС = Новый Массив();
		МассивСуммаНДС = Новый Массив();
		
		СуммаБезНДС = 0;
		СуммаНДС = 0;
		
		Для Каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
			
			МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
			МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);

			
			СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
			СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
			
		КонецЦикла; 

		Если СуммаБезНДС + СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		СуммаСНДС = Мин(ПогашенныйАвансПоСФ.СуммаАванса, (СуммаБезНДС+СуммаНДС));
		Если СуммаСНДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
		СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
		Если СуммаБезНДС > 0 Тогда
			МассивСуммаБезНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаБезНДС, МассивСуммаБезНДС);
		КонецЕсли;
		
		Если СуммаНДС > 0 Тогда
			МассивСуммаНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаНДС, МассивСуммаНДС);
		КонецЕсли; 
		
		Счетчик =0;
			
		Для Каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
			
			Если ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0) = 0 
				И ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0) = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаРезультата = ТаблицаРезультатов.Добавить();
			СтрокаРезультата.СчетФактура	= СтрокаАвансаПоОтбору.СчетФактура;
			СтрокаРезультата.Покупатель		= СтрокаАвансаПоОтбору.Покупатель;
			СтрокаРезультата.ДоговорКонтрагента	= СтрокаАвансаПоОтбору.ДоговорКонтрагента;

			СтрокаРезультата.СтавкаНДС		= СтрокаАвансаПоОтбору.СтавкаНДС;

			СтрокаРезультата.ДатаСобытия	= ПогашенныйАвансПоСФ.ДатаСобытия;
			
			СтрокаРезультата.СуммаБезНДС	= ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик],0);
			СтрокаРезультата.НДС			=  ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик],0);

			
			СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0);
			СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0);
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла; 
	КонецЦикла;
	
	Для Каждого СтрокаПоСФ Из ТаблицаАвансов Цикл
		Если СтрокаПоСФ.СуммаБезНДС = 0 И СтрокаПоСФ.НДС = 0 Тогда
			Продолжить;
		КонецЕсли; 
			
		СтрокаРезультата = ТаблицаРезультатов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаПоСФ);
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьСписокСчетовФактурВыданныхНаАванс(СписокСчетовФактур)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактураВыданный,
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК СчетФактура,
	               |	СчетФактураВыданныйДокументыОснования.Ссылка.Дата КАК СчетФактураВыданныйДата
	               |ИЗ
	               |	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |ГДЕ
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование В(&СписокСчетовФактур)
	               |	И СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)";
				   
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Заполнение табличной части "Вычет НДС с полученных авансов"
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Заполнение табличной части "Вычет НДС с авансов выданных"

// Процедура выполняет автоматическое заполнение табличной части документа
// Вызывается из процедуры КоманднаяПанельНДСсАвансовЗаполнить
//
Процедура ЗаполнитьСтроки_НДСсАвансовВыданных(ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаПолученияУчетнойПолитики = Ложь;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаПолученияУчетнойПолитики, Организация);
	
	Если ОшибкаПолученияУчетнойПолитики Тогда
		Возврат;
	КонецЕсли;
	
	Если мУпрощенныйУчетНДС = Неопределено Тогда
		мУпрощенныйУчетНДС = УчетнаяПолитикаНУ.УпрощенныйУчетНДС;
	КонецЕсли;
	
	ТаблицаРезультатов = НДСсАвансовВыданных.ВыгрузитьКолонки();
	
	Если Не мУпрощенныйУчетНДС Тогда
		
		ЗаполнитьНДССАвансовВыданныхПоДаннымРегистраНДСПредъявленный(ТаблицаРезультатов);
		
	КонецЕсли;
	
	НДСсАвансовВыданных.Загрузить(ТаблицаРезультатов);
	
	НДСсАвансовВыданных.Сортировать("СчетФактура, Поставщик, ДоговорКонтрагента, СтавкаНДС");
	
КонецПроцедуры // ЗаполнитьСтрокиДокумента()

Процедура ЗаполнитьНДССАвансовВыданныхПоДаннымРегистраНДСПредъявленный(ТаблицаРезультатов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСПредъявленныйОстатки.СчетФактура,
	               |	НДСПредъявленныйОстатки.СтавкаНДС,
	               |	НДСПредъявленныйОстатки.Поставщик,
	               |	НДСПредъявленныйОстатки.ДоговорКонтрагента,
	               |	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	               |	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
	               |ИЗ
	               |	РегистрНакопления.НДСПредъявленный.Остатки(
	               |			&ДатаГраница,
	               |			Организация = &Организация
	               |				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСПредъявленныйОстатки";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Результат.Выгрузить(), ТаблицаРезультатов);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение табличной части "Вычет НДС с авансов выданных"
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Заполнение табличной части "Вычет НДС по налоговому агенту"

// Процедура выполняет автоматическое заполнение табличной части документа
// Вызывается из процедуры КоманднаяПанельВычетПоПриобретеннымЦенностямЗаполнить
//
Процедура ЗаполнитьСтроки_ВычетНДСПоНалоговомуАгенту(ОтменитьПроведение = Ложь, Сообщать = Истина, СтрокаСообщения = "", ОшибкаЗаполнения = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПредъявленНДСКВычету0 Тогда
		ТаблицаРезультатов = ЗаполнитьНДСПоНалоговомуАгентуКВычетуПоДаннымРегистраНДСПредъявленный();
	Иначе
		ТаблицаРезультатов = ЗаполнитьНДСПоНалоговомуАгентуКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0();
	КонецЕсли;
	
	Если ТаблицаРезультатов.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		ВычетНДСПоНалоговомуАгенту.Очистить();
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультатов.Колонки.Добавить("ДокументОплаты", Новый ОписаниеТипов(ЭтотОбъект.Метаданные().ТабличныеЧасти.ВычетНДСПоНалоговомуАгенту.Реквизиты.ДокументОплаты.Тип.Типы()));
	ТаблицаРезультатов.Колонки.Добавить("ДатаОплаты", Новый ОписаниеТипов("Дата"));
	
	ИсключитьНДСНалоговогоАгентаНеоплаченныйПоставщику(ТаблицаРезультатов);
	
	ПолучитьДанныеОДокументахОплаты(ТаблицаРезультатов);
	
	ИсключитьНДСНалоговогоАгентаНеоплаченныйВБюджет(ТаблицаРезультатов);
	
	ОтфактурованныеВычеты = ОпределитьНаличиеСчетовФактурНалоговогоАгента(ТаблицаРезультатов);
	
	ТаблицаРезультатов.Сортировать("СчетФактура, ДатаОплаты");
	
	СтруктураОтбора = Новый Структура("ДокументОплаты, ДоговорКонтрагента");
	
	ВычетНДСПоНалоговомуАгенту.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
		Если ОтфактурованныеВычеты.НайтиСтроки(СтруктураОтбора).Количество() <> 0 Тогда
			
			НоваяСтрока = ВычетНДСПоНалоговомуАгенту.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
			
	ВычетНДСПоНалоговомуАгенту.Свернуть("ВидЦенности, Поставщик, ДоговорКонтрагента, СчетФактура, СтавкаНДС, ДокументОплаты, ДатаОплаты, ДокументОтгрузки, Состояние, ЗаписьДополнительногоЛиста, КорректируемыйПериод, СчетУчетаНДС", "СуммаБезНДС, НДС");
	
	ВычетНДСПоНалоговомуАгенту.Сортировать("СчетФактура, Поставщик, ДоговорКонтрагента, ВидЦенности, СтавкаНДС, ДокументОплаты, ДатаОплаты, ДокументОтгрузки, Состояние, СчетУчетаНДС");
	
КонецПроцедуры

Функция ОпределитьНаличиеСчетовФактурНалоговогоАгента(ТаблицаДокументов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОплаты", ТаблицаДокументов.ВыгрузитьКолонку("ДокументОплаты"));
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ТаблицаДокументов.ВыгрузитьКолонку("ДоговорКонтрагента"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОплаты,
	               |	СчетФактураВыданныйДокументыОснования.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента
	               |ИЗ
	               |	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |ГДЕ
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование В(&ДокументОплаты)
	               |	И СчетФактураВыданныйДокументыОснования.Ссылка.ДоговорКонтрагента В(&ДоговорКонтрагента)
	               |	И СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НалоговыйАгент)
	               |	И СчетФактураВыданныйДокументыОснования.Ссылка.Проведен = ИСТИНА
	               |	И СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления = ЛОЖЬ";
			 
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Вызывается из процедуры ЗаполнитьСтроки_ВычетНДСПоНалоговомуАгенту.
// Заполняет ТЧ ВычетНДСПоНалоговомуАгенту по данным регистра НДСПредъявленный
Функция ЗаполнитьНДСПоНалоговомуАгентуКВычетуПоДаннымРегистраНДСПредъявленный()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) КАК НДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) КАК СНДС,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) КАК СчетФактураДата
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
		|				И ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСпоОСиНМА.Остатки(
		|				&ДатаГраница,
		|				Организация = &Организация
		|					И НДСВключенВСтоимость = ЛОЖЬ
		|					И ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
		|					И НеВлияетНаВычет = ЛОЖЬ) КАК НДСпоОСиНМАОстатки
		|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСпоОСиНМАОстатки.СчетФактура
		|			И НДСПредъявленныйОстатки.ВидЦенности = НДСпоОСиНМАОстатки.ВидЦенности
		|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСпоОСиНМАОстатки.СтавкаНДС
		|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСпоОСиНМАОстатки.СчетУчетаНДС
		|			И (НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток > 0)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|				&ДатаГраница,
		|				Организация = &Организация
		|					И ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)) КАК НДСПредъявленныйРеализация0Остатки
		|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСПредъявленныйРеализация0Остатки.СчетФактура
		|			И НДСПредъявленныйОстатки.ВидЦенности = НДСПредъявленныйРеализация0Остатки.ВидЦенности
		|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСПредъявленныйРеализация0Остатки.СтавкаНДС
		|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС
		|			И (НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток + НДСПредъявленныйРеализация0Остатки.НДСОстаток > 0)
		|ГДЕ
		|	(НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСПредъявленныйОстатки.НДСОстаток > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
		|	НДСПредъявленныйОстатки.ДатаОплаты,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата)
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	ВидыЦенностей_НалоговыйАгент = УчетНДС.ВидыЦенностиНалоговыйАгентПоступление();
	
	Запрос.УстановитьПараметр("ВидыЦенностей_НалоговыйАгент", ВидыЦенностей_НалоговыйАгент);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

// Вызывается из процедуры ЗаполнитьСтроки_ВычетНДСПоНалоговомуАгенту.
// Заполняет ТЧ ВычетНДСПоНалоговомуАгенту по данным регистра НДСПредъявленный
Функция ЗаполнитьНДСПоНалоговомуАгентуКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйРеализация0Остатки.Организация,
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйРеализация0Остатки.ВидЦенности,
		|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
		|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
		|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
		|	НДСПредъявленныйРеализация0Остатки.Состояние,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК НДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК СНДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата, &Дата) КАК СчетФактураДата
		|ИЗ
		|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
		|				И Состояние В (&ОтрабатываемыеСостояния)) КАК НДСПредъявленныйРеализация0Остатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(
		|				&ДатаГраница,
		|				Организация = &Организация
		|					И ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
		|					И ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК НДСПредъявленныйОстатки
		|		ПО НДСПредъявленныйРеализация0Остатки.СчетФактура = НДСПредъявленныйОстатки.СчетФактура
		|			И НДСПредъявленныйРеализация0Остатки.ВидЦенности = НДСПредъявленныйОстатки.ВидЦенности
		|			И НДСПредъявленныйРеализация0Остатки.СтавкаНДС = НДСПредъявленныйОстатки.СтавкаНДС
		|			И НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС = НДСПредъявленныйОстатки.СчетУчетаНДС
		|			И (НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток > 0)
		|ГДЕ
		|	(НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСПредъявленныйОстатки.НДСОстаток > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПредъявленныйРеализация0Остатки.Организация,
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура,
		|	НДСПредъявленныйРеализация0Остатки.ВидЦенности,
		|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
		|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
		|	НДСПредъявленныйОстатки.ДатаОплаты,
		|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
		|	НДСПредъявленныйРеализация0Остатки.Состояние,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата, &Дата)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	ВидыЦенностей_НалоговыйАгент = УчетНДС.ВидыЦенностиНалоговыйАгентПоступление();
	
	Запрос.УстановитьПараметр("ВидыЦенностей_НалоговыйАгент", ВидыЦенностей_НалоговыйАгент);
	
	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния",ОтрабатываемыеСостояния);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

Процедура ПолучитьДанныеОДокументахОплаты(ТаблицаРезультатов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаРезультатов", ТаблицаРезультатов);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента);
	
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаРезультатов.СчетФактура,
	               |	ТаблицаРезультатов.Поставщик,
	               |	ТаблицаРезультатов.ДоговорКонтрагента
	               |ПОМЕСТИТЬ ТаблицаРезультатов
	               |ИЗ
	               |	&ТаблицаРезультатов КАК ТаблицаРезультатов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.Субконто1 КАК Поставщик,
	               |	ХозрасчетныйОбороты.Субконто2 КАК ДоговорКонтрагента,
	               |	ХозрасчетныйОбороты.Субконто3 КАК СчетФактура,
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.КорСубконто3 ЕСТЬ NULL 
	               |			ТОГДА ХозрасчетныйОбороты.Регистратор
	               |		ИНАЧЕ ХозрасчетныйОбороты.КорСубконто3
	               |	КОНЕЦ КАК ДокументОплаты,
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.КорСубконто3 ЕСТЬ NULL 
	               |			ТОГДА ХозрасчетныйОбороты.Регистратор.Дата
	               |		ИНАЧЕ ХозрасчетныйОбороты.КорСубконто3.Дата
	               |	КОНЕЦ КАК ДатаОплаты,
	               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаБезНДС
	               |ПОМЕСТИТЬ ОборотыРасчеты
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(, &Дата, Регистратор, (НЕ Счет В (&СчетаИсключения)), &ВидыСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ХозрасчетныйОбороты.КорСубконто3 ЕСТЬ NULL 
	               |				ТОГДА ХозрасчетныйОбороты.Регистратор
	               |			ИНАЧЕ ХозрасчетныйОбороты.КорСубконто3
	               |		КОНЕЦ <> ХозрасчетныйОбороты.Субконто3
	               |	И ХозрасчетныйОбороты.СуммаОборотДт > 0
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВводНачальныхОстатковДанныеПоСФНДС.Контрагент,
	               |	ВводНачальныхОстатковДанныеПоСФНДС.ДоговорКонтрагента,
	               |	ВводНачальныхОстатковДанныеПоСФНДС.СчетФактура,
	               |	ВводНачальныхОстатковДанныеПоСФНДС.ДокументОплаты,
	               |	ВводНачальныхОстатковДанныеПоСФНДС.ДатаСФ,
	               |	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	               |	ВводНачальныхОстатковДанныеПоСФНДС.СуммаБезНДСОплата
	               |ИЗ
	               |	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ВводНачальныхОстатковДанныеПоСФНДС
	               |ГДЕ
	               |	ВводНачальныхОстатковДанныеПоСФНДС.Ссылка.Дата <= &КонецПериода
	               |	И ВводНачальныхОстатковДанныеПоСФНДС.Ссылка.Организация = &Организация
	               |	И ВводНачальныхОстатковДанныеПоСФНДС.Ссылка.Проведен
	               |	И ВводНачальныхОстатковДанныеПоСФНДС.ПредъявленСФ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НДСЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	               |	НДСЗаписиКнигиПокупок.ДокументОплаты КАК ДокументОплаты,
	               |	НДСЗаписиКнигиПокупок.Поставщик КАК Поставщик,
	               |	НДСЗаписиКнигиПокупок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	НДСЗаписиКнигиПокупок.СуммаБезНДСОборот КАК СуммаОплаты
	               |ПОМЕСТИТЬ ДокументыОплатыКнигаПокупок
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(, &Дата, , Организация = &Организация) КАК НДСЗаписиКнигиПокупок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаРезультатов.СчетФактура,
	               |	ТаблицаРезультатов.Поставщик,
	               |	ТаблицаРезультатов.ДоговорКонтрагента,
	               |	ОборотыРасчеты.ДокументОплаты,
	               |	ОборотыРасчеты.ДатаОплаты КАК ДатаОплаты,
	               |	ОборотыРасчеты.СуммаБезНДС - ЕСТЬNULL(ДокументыОплатыКнигаПокупок.СуммаОплаты, 0) КАК СуммаБезНДС
	               |ИЗ
	               |	ТаблицаРезультатов КАК ТаблицаРезультатов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыРасчеты КАК ОборотыРасчеты
	               |		ПО ТаблицаРезультатов.СчетФактура = ОборотыРасчеты.СчетФактура
	               |			И ТаблицаРезультатов.Поставщик = ОборотыРасчеты.Поставщик
	               |			И ТаблицаРезультатов.ДоговорКонтрагента = ОборотыРасчеты.ДоговорКонтрагента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыОплатыКнигаПокупок КАК ДокументыОплатыКнигаПокупок
	               |		ПО (ОборотыРасчеты.СчетФактура = ДокументыОплатыКнигаПокупок.СчетФактура)
	               |			И (ОборотыРасчеты.ДокументОплаты = ДокументыОплатыКнигаПокупок.ДокументОплаты)
	               |			И (ОборотыРасчеты.Поставщик = ДокументыОплатыКнигаПокупок.Поставщик)
	               |			И (ОборотыРасчеты.ДоговорКонтрагента = ДокументыОплатыКнигаПокупок.ДоговорКонтрагента)
	               |ГДЕ
	               |	(НЕ ОборотыРасчеты.ДокументОплаты ЕСТЬ NULL )
	               |	И (НЕ ОборотыРасчеты.ДокументОплаты = НЕОПРЕДЕЛЕНО)
	               |	И ОборотыРасчеты.СуммаБезНДС - ЕСТЬNULL(ДокументыОплатыКнигаПокупок.СуммаОплаты, 0) > 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаОплаты";
				   
	ОплаченныйНДС = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура("СчетФактура, Поставщик, ДоговорКонтрагента");

	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		СтрокиОтбора = ОплаченныйНДС.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			Если СтрокаОтбора.СуммаБезНДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаОтбора.ДокументОплаты) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				// Вычет по поступлениям, по которым отражен возврат, уже отсторнирован
				Продолжить;
			КонецЕсли;
			
			СуммаБезНДССтроки = Мин(СтрокаТаблицы.СуммаБезНДС, СтрокаОтбора.СуммаБезНДС);
			НДССтроки = Окр(СтрокаТаблицы.НДС * СуммаБезНДССтроки / СтрокаТаблицы.СуммаБезНДС, 2);
			
			Если СуммаБезНДССтроки < СтрокаТаблицы.СуммаБезНДС
				Или НДССтроки < СтрокаТаблицы.НДС Тогда
				
				НоваяСтрока = ТаблицаРезультатов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.СуммаБезНДС = НоваяСтрока.СуммаБезНДС - СуммаБезНДССтроки;
				НоваяСтрока.НДС = НоваяСтрока.НДС - НДССтроки;
				
			КонецЕсли;
				
			СтрокаТаблицы.СуммаБезНДС = СуммаБезНДССтроки;
			СтрокаТаблицы.НДС = НДССтроки;
			СтрокаТаблицы.ДокументОплаты = СтрокаОтбора.ДокументОплаты;
			СтрокаТаблицы.ДатаОплаты = СтрокаОтбора.ДатаОплаты;
			СтрокаОтбора.СуммаБезНДС = СтрокаОтбора.СуммаБезНДС - СуммаБезНДССтроки;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) Тогда 
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;	
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРезультатов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьНДСНалоговогоАгентаНеоплаченныйПоставщику(ТаблицаРезультатов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Поставщики", ТаблицаРезультатов.ВыгрузитьКолонку("Поставщик"));
	Запрос.УстановитьПараметр("ДоговорыКонтрагентов", ТаблицаРезультатов.ВыгрузитьКолонку("ДоговорКонтрагента"));
	Запрос.УстановитьПараметр("СчетаФактуры", ТаблицаРезультатов.ВыгрузитьКолонку("СчетФактура"));

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОстатки.Субконто1 КАК Поставщик,
	               |	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	               |	ХозрасчетныйОстатки.Субконто3 КАК СчетФактура,
	               |	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаБезНДС
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |			&Дата,
	               |			,
	               |			&ВидыСубконто,
	               |			Организация = &Организация
	               |				И Субконто1 В (&Поставщики)
	               |				И Субконто2 В (&ДоговорыКонтрагентов)
	               |				И Субконто3 В (&СчетаФактуры)) КАК ХозрасчетныйОстатки";
				   
	НеоплаченныйНДС = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура("Поставщик, ДоговорКонтрагента, СчетФактура");

	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из НеоплаченныйНДС Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		СтрокиОтбора = ТаблицаРезультатов.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			Если СтрокаОтбора.НДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаБезНДС = Мин(СтрокаТаблицы.СуммаБезНДС, СтрокаОтбора.СуммаБезНДС);
			СтрокаОтбора.НДС = СтрокаОтбора.НДС - Окр(СтрокаОтбора.НДС * СуммаБезНДС / СтрокаОтбора.СуммаБезНДС, 2);
			СтрокаОтбора.СуммаБезНДС = СтрокаОтбора.СуммаБезНДС - СуммаБезНДС;
			
			Если СтрокаОтбора.СуммаБезНДС = 0 Или СтрокаОтбора.НДС = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРезультатов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьНДСНалоговогоАгентаНеоплаченныйВБюджет(ТаблицаРезультатов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаРезультатов", ТаблицаРезультатов);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));

	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОстатки.Субконто1 КАК Поставщик,
	               |	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	               |	ХозрасчетныйОстатки.Субконто3 КАК ДокументОплаты,
	               |	ХозрасчетныйОстатки.СуммаОстатокКт КАК НДС
	               |ПОМЕСТИТЬ Остаток68_32
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента), , Организация = &Организация) КАК ХозрасчетныйОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаРезультатов.Поставщик,
	               |	ТаблицаРезультатов.ДоговорКонтрагента,
	               |	ТаблицаРезультатов.ДокументОплаты
	               |ПОМЕСТИТЬ ТаблицаРезультатов
	               |ИЗ
	               |	&ТаблицаРезультатов КАК ТаблицаРезультатов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаРезультатов.Поставщик,
	               |	ТаблицаРезультатов.ДоговорКонтрагента,
	               |	ТаблицаРезультатов.ДокументОплаты,
	               |	ЕСТЬNULL(Остаток68_32.НДС, 0) КАК НДС
	               |ИЗ
	               |	ТаблицаРезультатов КАК ТаблицаРезультатов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Остаток68_32 КАК Остаток68_32
	               |		ПО ТаблицаРезультатов.Поставщик = Остаток68_32.Поставщик
	               |			И ТаблицаРезультатов.ДоговорКонтрагента = Остаток68_32.ДоговорКонтрагента
	               |			И ТаблицаРезультатов.ДокументОплаты = Остаток68_32.ДокументОплаты
	               |ГДЕ
	               |	ЕСТЬNULL(Остаток68_32.НДС, 0) > 0";
				   
	НеоплаченныйНДС = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура("Поставщик, ДоговорКонтрагента, ДокументОплаты");

	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из НеоплаченныйНДС Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		СтрокиОтбора = ТаблицаРезультатов.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			Если СтрокаОтбора.НДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НДС = Мин(СтрокаТаблицы.НДС, СтрокаОтбора.НДС);
			СтрокаОтбора.СуммаБезНДС = СтрокаОтбора.СуммаБезНДС - Окр(СтрокаОтбора.СуммаБезНДС * НДС / СтрокаОтбора.НДС, 2);
			СтрокаОтбора.НДС = СтрокаОтбора.НДС - НДС;
			
			СтрокаТаблицы.НДС = СтрокаТаблицы.НДС - НДС;
			
			Если СтрокаОтбора.СуммаБезНДС = 0 Или СтрокаОтбора.НДС = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРезультатов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

// Заполнение табличной части "Вычет НДС по налоговому агенту"
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоВычетам(РезультатЗапросаПоВычетам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ТаблицаВычетов = РезультатЗапросаПоВычетам.Выгрузить();
	
	НачалоНалоговогоПериода = УчетНДС.ПолучитьНачалоПериодаПоУчетнойПолитике(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	КонецНалоговогоПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	Для каждого СтрокаТаблицы из ТаблицаВычетов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСчетаФактуры) Тогда
			СтрокаТаблицы.ДатаСчетаФактуры = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
							
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты) Тогда
			СтрокаТаблицы.ДатаОплаты = СтрокаТаблицы.ДатаДокументаОплаты;
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
			СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузкиДата), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДокументОтгрузкиДата);
			Если Не (СтрокаТаблицы.ДатаСобытия >= НачалоНалоговогоПериода И СтрокаТаблицы.ДатаСобытия <= КонецНалоговогоПериода) Тогда
				СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
			КонецЕсли;
		Иначе
			Если СтруктураШапкиДокумента.Дата < '20060101' Тогда
				СтрокаТаблицы.ДатаСобытия = Макс(?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДатаОплаты), СтрокаТаблицы.ДатаСчетаФактуры);
			Иначе
				Если СтрокаТаблицы.ДатаСчетаФактуры >= НачалоНалоговогоПериода И СтрокаТаблицы.ДатаСчетаФактуры <= КонецНалоговогоПериода Тогда
					СтрокаТаблицы.ДатаСобытия = СтрокаТаблицы.ДатаСчетаФактуры;
				Иначе
					СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
		Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
			// Контрагент по данным видам ценностей не указывается
			СтрокаТаблицы.Поставщик = Неопределено;
		КонецЕсли; 
		
		Если Не СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = '00010101000000';
		КонецЕсли;
		
	КонецЦикла; 
	
	ТаблицаВычетов.Колонки.Добавить("Событие");
	ТаблицаВычетов.ЗаполнитьЗначения( ?(СтруктураШапкиДокумента.ПредъявленНДСКВычету0, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету),"Событие");
	
	Возврат ТаблицаВычетов;

КонецФункции // ПодготовитьТаблицуПоОплатам()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоАвансам(РезультатЗапросаПоАвансам, СтруктураШапкиДокумента)
	
	ТаблицаПоАвансам = РезультатЗапросаПоАвансам.Выгрузить();
	
	ТаблицаПоАвансам.Колонки.Добавить("Событие");
	ТаблицаПоАвансам.ЗаполнитьЗначения( ?(СтруктураШапкиДокумента.ПредъявленНДСКВычету0, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету),"Событие");
	
	ТаблицаПоАвансам.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаПоАвансам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыПолученные,"ВидЦенности");
	
	Для каждого СтрокаТаблицы из ТаблицаПоАвансам Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты) Тогда
			СтрокаТаблицы.ДатаОплаты = СтруктураШапкиДокумента.Дата;
		КонецЕсли; 
		
		Если Не СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = '00010101000000';
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ТаблицаПоАвансам;
	
КонецФункции // ПодготовитьТаблицуПоОплатам()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоАвансамВыданным(РезультатЗапросаПоАвансамВыданным, СтруктураШапкиДокумента)
	
	ТаблицаПоАвансамВыданным = РезультатЗапросаПоАвансамВыданным.Выгрузить();
	
	ТаблицаПоАвансамВыданным.Колонки.Добавить("Событие", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПокупки"));
	ТаблицаПоАвансамВыданным.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
	
	ТаблицаПоАвансамВыданным.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаПоАвансамВыданным.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыВыданные,"ВидЦенности");
	
	ТаблицаПоАвансамВыданным.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	
	НачалоНалоговогоПериода = ?(СтруктураШапкиДокумента.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, НачалоМесяца(СтруктураШапкиДокумента.Дата), НачалоКвартала(СтруктураШапкиДокумента.Дата));
	КонецНалоговогоПериода = ?(СтруктураШапкиДокумента.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, КонецМесяца(СтруктураШапкиДокумента.Дата), КонецКвартала(СтруктураШапкиДокумента.Дата));
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоАвансамВыданным Цикл
		
		Если Не СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = '00010101000000';
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаСчетаФактуры) 
			И СтрокаТаблицы.ДатаСчетаФактуры >= НачалоНалоговогоПериода
			И СтрокаТаблицы.ДатаСчетаФактуры <= КонецНалоговогоПериода Тогда
			СтрокаТаблицы.ДатаСобытия = СтрокаТаблицы.ДатаСчетаФактуры;
		Иначе
			СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ТаблицаПоАвансамВыданным;
	
КонецФункции // ПодготовитьТаблицуПоАвансамВыданным()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоВычетамНалоговыйАгент(РезультатЗапросаПоВычетамНалоговыйАгент, СтруктураШапкиДокумента, Отказ, Заголовок)

	ТаблицаВычетовНалоговыйАгент = РезультатЗапросаПоВычетамНалоговыйАгент.Выгрузить();
	
	Для Каждого СтрокаТаблицы из ТаблицаВычетовНалоговыйАгент Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСчетаФактуры) Тогда
			СтрокаТаблицы.ДатаСчетаФактуры = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
									
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты) Тогда
			СтрокаТаблицы.ДатаОплаты = СтрокаТаблицы.ДатаДокументаОплаты;
		КонецЕсли; 
		
		Если Не СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = '00010101000000';
		КонецЕсли;
		
	КонецЦикла; 
	
	ТаблицаВычетовНалоговыйАгент.Колонки.Добавить("Событие");
	ТаблицаВычетовНалоговыйАгент.ЗаполнитьЗначения( ?(СтруктураШапкиДокумента.ПредъявленНДСКВычету0, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету),"Событие");
	
	Возврат ТаблицаВычетовНалоговыйАгент;

КонецФункции // ПодготовитьТаблицуПоОплатам()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоВычетам(СтруктураШапкиДокумента,ТаблицаПоВычетам, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, СчетФактура, СтавкаНДС"); 
	
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		СтруктураОбязательныхПолей.Вставить("Состояние"); 
	КонецЕсли; 
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВычетПоПриобретеннымЦенностям", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
	СтрокаСообщения = "Не заполнены документ оплаты и дата оплаты. В книге покупок по данной записи в качестве даты оплаты будет установлена дата текущего документа!";
	СтрокаСообщенияДокОтгрузки = "Не заполнен документ отгрузки при реализации товара по ставке НДС 0%!";
	СтрокаСообщенияПоставщик = "Не заполнено значение реквизита ""Поставщик""!";
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";


	Для Каждого СтрокаТаблицы Из ТаблицаПоВычетам Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет по приобретенным ценностям"" : ";
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) и СтрокаТаблицы.НДС <> 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщения,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) и НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСобытия) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщения,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 и НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщенияДокОтгрузки,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		// Проверка на заполнение контрагента
		Если не СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами и НЕ ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщенияПоставщик,Отказ,Заголовок);
		КонецЕсли; 
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщенияКорПериод,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;

	КонецЦикла; 

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоАвансам(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Покупатель,ДоговорКонтрагента, СчетФактура, СтавкаНДС"); 
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		СтруктураОбязательныхПолей.Вставить("Состояние");
	КонецЕсли; 
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НДСсАвансов", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
	СтрокаСообщенияДокОтгрузки = "Не заполнен документ отгрузки при реализации товара по ставке НДС 0%!";
 	СтрокаСообщения = "Не заполнена дата зачета аванса. В качестве даты зачета аванса будет использоваться дата текущего документа!";
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";

	Для каждого СтрокаТаблицы из ТаблицаПоАвансам Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСобытия) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет НДС с полученных авансов"": ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщения,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 и НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет НДС с полученных авансов"": ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщенияДокОтгрузки,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет НДС с полученных авансов"": ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщенияКорПериод,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоАвансамВыданным(СтруктураШапкиДокумента, ТаблицаПоАвансамВыданным, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Поставщик, ДоговорКонтрагента, СчетФактура, СтавкаНДС"); 
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НДСсАвансовВыданных", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";

	Для Каждого СтрокаТаблицы Из ТаблицаПоАвансамВыданным Цикл
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста И Не ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет НДС с выданных авансов"": ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияКорПериод, , Заголовок, СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПоАвансамВыданным()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоВычетамНалоговыйАгент(СтруктураШапкиДокумента, ТаблицаПоВычетамНалоговыйАгент, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, СчетФактура, СтавкаНДС, Поставщик, ДоговорКонтрагента, ДокументОплаты, ДатаОплаты"); 
	
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		СтруктураОбязательныхПолей.Вставить("Состояние"); 
	КонецЕсли; 
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВычетНДСПоНалоговомуАгенту", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
	СтрокаСообщенияСчетУчетаНДС = "Не заполнено значение реквизита ""Счет учета НДС""!";
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";

	Для Каждого СтрокаТаблицы Из ТаблицаПоВычетамНалоговыйАгент Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет по приобретенным ценностям"": ";
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) и СтрокаТаблицы.НДС <> 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияСчетУчетаНДС, Отказ, Заголовок, СтатусСообщения.Внимание);
		КонецЕсли;
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияКорПериод, , Заголовок, СтатусСообщения.Внимание);
		КонецЕсли;

	КонецЦикла; 

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоВычетам, ТаблицапоАвансам, ТаблицаПоАвансамВыданным, ТаблицаПоВычетамНалоговыйАгент, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		ДвиженияПоВычетамНДСпоПриобретеннымЦенностям(СтруктураШапкиДокумента, ТаблицаПоВычетам, Отказ, Заголовок);
		ДвиженияПоВычетамНДСпоНалоговомуАгенту(СтруктураШапкиДокумента, ТаблицаПоВычетамНалоговыйАгент, Отказ, Заголовок)
	КонецЕсли;
	
	ДвиженияПоВычетамНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок);
	
	ДвиженияПоВычетамНДСсАвансовВыданных(СтруктураШапкиДокумента, ТаблицаПоАвансамВыданным, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// По результату запроса по шапке документа формируем движения по регистрам.
// Отрабатывает по табличной части "Вычет НДС по приобретенным ценностям"
//
Процедура ДвиженияПоВычетамНДСпоПриобретеннымЦенностям(СтруктураШапкиДокумента, ТаблицаПоВычетам, Отказ, Заголовок)

	Если ТаблицаПоВычетам.КОличество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если мВестиУчетНДС Тогда
	// Отражение по регистру "НДС предъявленный"
		ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетам,ТаблицаДвижений_НДСПредъявленный);
		ТаблицаДвижений_НДСПредъявленный.Свернуть("Период,Активность,Организация,СчетФактура,ВидЦенности,СтавкаНДС,СчетУчетаНДС,Поставщик,ДатаСобытия,Событие, ДатаОплаты","СуммаБезНДС,НДС");
		
		Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ВыполнитьРасход();
	КонецЕсли;
	
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("ДокументОтгрузкиДата",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетам,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
		
		
		Для каждого СтрокаЗаписи Из ТаблицаДвижений_НДСЗаписиКнигиПокупок Цикл
			Если СтрокаЗаписи.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 тогда
				Если СтрокаЗаписи.ЗаписьДополнительногоЛиста = Ложь Тогда
					СтрокаЗаписи.Период = Макс(СтрокаЗаписи.ДатаОплаты, СтрокаЗаписи.ДокументОтгрузкиДата);
				Иначе
					СтрокаЗаписи.Период = СтруктураШапкиДокумента.Дата;
				КонецЕсли; 
				СтрокаЗаписи.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
				
			КонецЕсли;
		КонецЦикла; 
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.ДокументОтгрузкиДата);
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Состояние);
		
		Если мВестиУчетНДС Тогда
			// Отражение по регистру НДСПредъявленныйРеализация0
			ТаблицаДвижений_НДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0.ВыгрузитьКолонки();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетам,ТаблицаДвижений_НДСПредъявленныйРеализация0);
			
			Движения.НДСПредъявленныйРеализация0.мПериод 		 = СтруктураШапкиДокумента.Дата;
			Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленныйРеализация0;
			Движения.НДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетам,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	КонецЕсли; 
	
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты, ДатаОплаты,СтавкаНДС,СчетУчетаНДС,Поставщик,ЗаписьДополнительногоЛиста,КорректируемыйПериод,ДатаСобытия,Событие,ВидЦенности","СуммаБезНДС,НДС");
		
	Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
	Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение(Ложь);
	                                                                                                                                                                                        
	// Сформировать проводи по записям книги покупок
	Для каждого ТекСтрокаВычета Из ТаблицаПоВычетам Цикл
		Если ТекСтрокаВычета.НДС = 0 Тогда
			ПродолжитЬ;
		КонецЕсли; 
		                                                                                                                                                                                               
		Движение = Движения.Хозрасчетный.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация =  СтруктураШапкиДокумента.Организация;
		Движение.Сумма = ТекСтрокаВычета.НДС;
		Движение.Содержание = "НДС";
		
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДС; //68.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		Если ПредъявленНДСКВычету0 Тогда // подстраховка для ручного ввода
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0; //19.07
		Иначе
			Движение.СчетКт = ТекСтрокаВычета.СчетУчетаНДС; //19.чч
		КонецЕсли;

		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", ТекСтрокаВычета.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФПолученные", ТекСтрокаВычета.СчетФактура);
		
		Если ПредъявленНДСКВычету0 Тогда // Дополнительное субконто по 19.07
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ДокументыРеализации", ТекСтрокаВычета.ДокументОтгрузки);
		КонецЕсли;

	КонецЦикла; 

КонецПроцедуры // ДвиженияПоВычетамНДСпоПриобретеннымЦенностям()
 
// По результату запроса по шапке документа формируем движения по регистрам.
// Отрабатывает по табличной части "Вычет НДС по приобретенным ценностям"
//
Процедура ДвиженияПоВычетамНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок)

	Если ТаблицаПоАвансам.КОличество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если мВестиУчетНДС И Не СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		// Отражение по регистру "НДС с авансов"
		ТаблицаДвижений_НДСсАвансов = Движения.НДСсАвансов.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоАвансам,ТаблицаДвижений_НДСсАвансов);
		ТаблицаДвижений_НДСсАвансов.Свернуть("Период, Активность, Организация, ВидЦенности, СчетФактура, Покупатель, ДоговорКонтрагента, СтавкаНДС, ВалютаАванса, ДатаСобытия", "СуммаБезНДС, НДС, ВалютнаяСуммаСНДС");
		
		Движения.НДСсАвансов.мПериод = 			СтруктураШапкиДокумента.Дата;
		Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений_НДСсАвансов;
		Движения.НДСсАвансов.ВыполнитьРасход();
	КонецЕсли;
	
	
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("ДокументОтгрузкиДата",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоАвансам,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
		
		
		Для каждого СтрокаЗаписи Из ТаблицаДвижений_НДСЗаписиКнигиПокупок Цикл
			Если СтрокаЗаписи.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 тогда
				Если Не СтрокаЗаписи.ЗаписьДополнительногоЛиста Тогда
					СтрокаЗаписи.Период = Макс(СтрокаЗаписи.ДатаОплаты, СтрокаЗаписи.ДокументОтгрузкиДата);
				Иначе
					СтрокаЗаписи.Период = СтруктураШапкиДокумента.Дата;
				КонецЕсли;
				СтрокаЗаписи.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
			КонецЕсли;
		КонецЦикла; 
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.ДокументОтгрузкиДата);
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Состояние);
		
		Если мВестиУчетНДС Тогда
			// Отражение по регистру НДСсАвансовРеализация0
			ТаблицаДвижений_НДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0.ВыгрузитьКолонки();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоАвансам,ТаблицаДвижений_НДСПредъявленныйРеализация0);
			
			Движения.НДСПредъявленныйРеализация0.мПериод 		 = СтруктураШапкиДокумента.Дата;
			Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленныйРеализация0;
			Движения.НДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоАвансам,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	КонецЕсли; 
	
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты, ДатаОплаты,СтавкаНДС,СчетУчетаНДС,Поставщик,ДатаСобытия,Событие,ВидЦенности,ЗаписьДополнительногоЛиста,КорректируемыйПериод,ДоговорКонтрагента","СуммаБезНДС,НДС");
		
	Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
	Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение(Ложь);
	
	// Сформировать проводки по записям книги покупок
	Для каждого ТекСтрокаВычета Из ТаблицаПоАвансам Цикл
		Если ТекСтрокаВычета.НДС = 0 Тогда
			ПродолжитЬ;
		КонецЕсли; 
		
		Движение = Движения.Хозрасчетный.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация =  СтруктураШапкиДокумента.Организация;
		Движение.Сумма = ТекСтрокаВычета.НДС;
		Движение.Содержание = "Вычет НДС по предоплате";
		
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДС; //68.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам; //76.АВ

		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", ТекСтрокаВычета.Покупатель);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФВыданные", ТекСтрокаВычета.СчетФактура);

	КонецЦикла; 

КонецПроцедуры // ДвиженияПоВычетамНДСпоПриобретеннымЦенностям()

// По результату запроса по шапке документа формируем движения по регистрам.
// Отрабатывает по табличной части "Вычет НДС по приобретенным ценностям"
//
Процедура ДвиженияПоВычетамНДСсАвансовВыданных(СтруктураШапкиДокумента, ТаблицаПоАвансамВыданным, Отказ, Заголовок)

	Если ТаблицаПоАвансамВыданным.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Отражение по регистру НДСПредъявленный
	ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоАвансамВыданным, ТаблицаДвижений_НДСПредъявленный);
	ТаблицаДвижений_НДСПредъявленный.Свернуть("Период, Активность, Организация, СчетФактура, ВидЦенности, СтавкаНДС, Поставщик, ДоговорКонтрагента, ДатаСобытия, Событие", "СуммаБезНДС, НДС");
		
	Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
	Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
	Движения.НДСПредъявленный.ВыполнитьРасход();
		
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоАвансамВыданным, ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	                                                                                                                                                                                                                                           
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Период, Активность, Организация, СчетФактура, СтавкаНДС, Поставщик, ДоговорКонтрагента, ДатаСобытия, Событие, ВидЦенности, ЗаписьДополнительногоЛиста, КорректируемыйПериод", "СуммаБезНДС, НДС");
		
	Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
	Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение(Ложь);
	
	// Сформировать проводки по записям книги покупок
	Для каждого ТекСтрокаВычета Из ТаблицаПоАвансамВыданным Цикл
		Если ТекСтрокаВычета.НДС = 0 Тогда
			ПродолжитЬ;
		КонецЕсли; 
		
		Движение = Движения.Хозрасчетный.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация =  СтруктураШапкиДокумента.Организация;
		Движение.Сумма = ТекСтрокаВычета.НДС;
		Движение.Содержание = "Вычет НДС с выданного аванса";
		
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДС; //68.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным; //76.ВА

		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", ТекСтрокаВычета.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФПолученные", ТекСтрокаВычета.СчетФактура);

	КонецЦикла; 

КонецПроцедуры // ДвиженияПоВычетамНДСпоПриобретеннымЦенностям()

// По результату запроса по шапке документа формируем движения по регистрам.
// Отрабатывает по табличной части "Вычет НДС по приобретенным ценностям"
//
Процедура ДвиженияПоВычетамНДСпоНалоговомуАгенту(СтруктураШапкиДокумента, ТаблицаПоВычетамНалоговыйАгент, Отказ, Заголовок)

	Если ТаблицаПоВычетамНалоговыйАгент.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если мВестиУчетНДС Тогда
	// Отражение по регистру "НДС предъявленный"
		ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетамНалоговыйАгент,ТаблицаДвижений_НДСПредъявленный);
		ТаблицаДвижений_НДСПредъявленный.Свернуть("Период,Активность,Организация,СчетФактура,ВидЦенности,СтавкаНДС,СчетУчетаНДС,Поставщик,ДоговорКонтрагента,ДатаСобытия,Событие","СуммаБезНДС,НДС");
		
		Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ВыполнитьРасход();
		                                                                                                                              
	КонецЕсли;
	
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("ДокументОтгрузкиДата",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетамНалоговыйАгент,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
		
		
		Для каждого СтрокаЗаписи Из ТаблицаДвижений_НДСЗаписиКнигиПокупок Цикл
			Если СтрокаЗаписи.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 тогда
				Если СтрокаЗаписи.ЗаписьДополнительногоЛиста = Ложь Тогда
					СтрокаЗаписи.Период = Макс(СтрокаЗаписи.ДатаОплаты, СтрокаЗаписи.ДокументОтгрузкиДата);
				Иначе
					СтрокаЗаписи.Период = СтруктураШапкиДокумента.Дата;
				КонецЕсли; 
				СтрокаЗаписи.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
				
			КонецЕсли;
		КонецЦикла; 
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.ДокументОтгрузкиДата);
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Состояние);
		
		// Отражение по регистру НДСПредъявленныйРеализация0
		ТаблицаДвижений_НДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетамНалоговыйАгент,ТаблицаДвижений_НДСПредъявленныйРеализация0);
		
		Движения.НДСПредъявленныйРеализация0.мПериод 		 = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленныйРеализация0;
		Движения.НДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
		
	Иначе
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетамНалоговыйАгент,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	КонецЕсли; 
	
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты, ДатаОплаты,СтавкаНДС,СчетУчетаНДС,Поставщик,ДоговорКонтрагента,ЗаписьДополнительногоЛиста,КорректируемыйПериод,ДатаСобытия,Событие,ВидЦенности","СуммаБезНДС,НДС");
		
	Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
	Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение(Ложь);
	                                                                                                                                                                                        
	// Сформировать проводи по записям книги покупок
	Для каждого ТекСтрокаВычета Из ТаблицаПоВычетамНалоговыйАгент Цикл
		Если ТекСтрокаВычета.НДС = 0 Тогда
			ПродолжитЬ;
		КонецЕсли; 
		                                                                                                                                                                                               
		Движение = Движения.Хозрасчетный.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация =  СтруктураШапкиДокумента.Организация;
		Движение.Сумма = ТекСтрокаВычета.НДС;
		Движение.Содержание = "НДС";
		
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДС; //68.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		Если ПредъявленНДСКВычету0 Тогда // подстраховка для ручного ввода
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0; //19.07
		Иначе
			Движение.СчетКт = ТекСтрокаВычета.СчетУчетаНДС; //19.чч
		КонецЕсли;

		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", ТекСтрокаВычета.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФПолученные", ТекСтрокаВычета.СчетФактура);
		
		Если ПредъявленНДСКВычету0 Тогда // Дополнительное субконто по 19.07
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ДокументыРеализации", ТекСтрокаВычета.ДокументОтгрузки);
		КонецЕсли;

	КонецЦикла; 

КонецПроцедуры // ДвиженияПоВычетамНДСпоПриобретеннымЦенностям()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("НДСНалоговыйПериод", Перечисления.Периодичность.Квартал);
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС", Ложь);
	КонецЕсли; 
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	Если Не СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		
		// Подготовим данные необходимые для проведения и проверки заполнения табличной части.
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("Организация",					"Ссылка.Организация");
		СтруктураПолей.Вставить("ВидЦенности",					"ВидЦенности");
		СтруктураПолей.Вставить("Поставщик",					"Поставщик");
		СтруктураПолей.Вставить("СчетФактура",					"СчетФактура");
		СтруктураПолей.Вставить("ДатаСчетаФактуры",				"СчетФактура.Дата");
		СтруктураПолей.Вставить("ДокументОплаты",				"ДокументОплаты");
		СтруктураПолей.Вставить("ДатаОплаты",					"ДатаОплаты");
		СтруктураПолей.Вставить("ДатаДокументаОплаты",			"ДокументОплаты.Дата");
		СтруктураПолей.Вставить("ДатаСобытия",					"ДатаОплаты");
		СтруктураПолей.Вставить("СтавкаНДС",					"СтавкаНДС");
		СтруктураПолей.Вставить("СуммаБезНДС",					"СуммаБезНДС");
		СтруктураПолей.Вставить("НДС",							"НДС");
		СтруктураПолей.Вставить("СчетУчетаНДС",					"СчетУчетаНДС");
		СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
		СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
		Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
			СтруктураПолей.Вставить("ДокументОтгрузки",	"ДокументОтгрузки");
			СтруктураПолей.Вставить("ДокументОтгрузкиДата",	"ДокументОтгрузки.Дата");
			СтруктураПолей.Вставить("Состояние",	"Состояние");
		КонецЕсли; 

		РезультатЗапросаПоВычетам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВычетПоПриобретеннымЦенностям", СтруктураПолей);
		ТаблицаПоВычетам = 			ПодготовитьТаблицуПоВычетам(РезультатЗапросаПоВычетам,СтруктураШапкиДокумента, Отказ, Заголовок);
		
		ПроверитьЗаполнениеТабличнойЧастиПоВычетам(СтруктураШапкиДокумента,ТаблицаПоВычетам, Отказ, Заголовок);
	
	Иначе
		
		ТаблицаПоВычетам = Неопределено;
		
	КонецЕсли;
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части по авансам.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",		 "Ссылка.Организация");
	СтруктураПолей.Вставить("Покупатель",		 "Покупатель");
	СтруктураПолей.Вставить("Поставщик",		 "Покупатель");
	СтруктураПолей.Вставить("ДоговорКонтрагента","ДоговорКонтрагента");
	СтруктураПолей.Вставить("СчетФактура",	 	 "СчетФактура");
	СтруктураПолей.Вставить("СтавкаНДС",		 "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",		 "СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",				 "НДС");
	СтруктураПолей.Вставить("ВалютнаяСуммаСНДС", "ВалютнаяСумма");
	СтруктураПолей.Вставить("ВалютаАванса",	 	 "ВалютаДокумента");
	СтруктураПолей.Вставить("ДатаСобытия",	 	 "ДатаСобытия");
	СтруктураПолей.Вставить("ДатаОплаты",		 "ДатаСобытия");
	СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
	СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
	
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		СтруктураПолей.Вставить("ДокументОтгрузки",	"ДокументОтгрузки");
		СтруктураПолей.Вставить("ДокументОплаты",	"ДокументОтгрузки");
		СтруктураПолей.Вставить("ДокументОтгрузкиДата",	"ДокументОтгрузки.Дата");
		СтруктураПолей.Вставить("Состояние",	"Состояние");
	КонецЕсли; 
	
	РезультатЗапросаПоАвансам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НДСсАвансов", СтруктураПолей);
	ТаблицаПоАвансам = 			ПодготовитьТаблицуПоАвансам(РезультатЗапросаПоАвансам, СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧастиПоАвансам(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок);
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части по авансам.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",		 "Ссылка.Организация");
	СтруктураПолей.Вставить("Поставщик",		 "Поставщик");
	СтруктураПолей.Вставить("ДоговорКонтрагента","ДоговорКонтрагента");
	СтруктураПолей.Вставить("СчетФактура",	 	 "СчетФактура");
	СтруктураПолей.Вставить("ДатаСчетаФактуры",	 "СчетФактура.Дата");
	СтруктураПолей.Вставить("СтавкаНДС",		 "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",		 "СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",				 "НДС");
	СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
	СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
	
	РезультатЗапросаПоАвансамВыданным = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НДСсАвансовВыданных", СтруктураПолей);
	ТаблицаПоАвансамВыданным = ПодготовитьТаблицуПоАвансамВыданным(РезультатЗапросаПоАвансамВыданным, СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧастиПоАвансамВыданным(СтруктураШапкиДокумента, ТаблицаПоАвансамВыданным, Отказ, Заголовок);
	
	Если Не СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		// Подготовим данные необходимые для проведения и проверки заполнения табличной части.
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("Организация",					"Ссылка.Организация");
		СтруктураПолей.Вставить("ВидЦенности",					"ВидЦенности");
		СтруктураПолей.Вставить("Поставщик",					"Поставщик");
		СтруктураПолей.Вставить("ДоговорКонтрагента",			"ДоговорКонтрагента");
		СтруктураПолей.Вставить("СчетФактура",					"СчетФактура");
		СтруктураПолей.Вставить("ДатаСчетаФактуры",				"СчетФактура.Дата");
		СтруктураПолей.Вставить("ДокументОплаты",				"ДокументОплаты");
		СтруктураПолей.Вставить("ДатаОплаты",					"ДатаОплаты");
		СтруктураПолей.Вставить("ДатаДокументаОплаты",			"ДокументОплаты.Дата");
		СтруктураПолей.Вставить("ДатаСобытия",					"Ссылка.Дата");
		СтруктураПолей.Вставить("СтавкаНДС",					"СтавкаНДС");
		СтруктураПолей.Вставить("СуммаБезНДС",					"СуммаБезНДС");
		СтруктураПолей.Вставить("НДС",							"НДС");
		СтруктураПолей.Вставить("СчетУчетаНДС",					"СчетУчетаНДС");
		СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
		СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
		Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
			СтруктураПолей.Вставить("ДокументОтгрузки",	"ДокументОтгрузки");
			СтруктураПолей.Вставить("ДокументОтгрузкиДата",	"ДокументОтгрузки.Дата");
			СтруктураПолей.Вставить("Состояние",	"Состояние");
		КонецЕсли; 

		РезультатЗапросаПоНалоговомуАгенту = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВычетНДСПоНалоговомуАгенту", СтруктураПолей);
		ТаблицаПоВычетамНалоговыйАгент = ПодготовитьТаблицуПоВычетамНалоговыйАгент(РезультатЗапросаПоНалоговомуАгенту, СтруктураШапкиДокумента, Отказ, Заголовок);
		ПроверитьЗаполнениеТабличнойЧастиПоВычетамНалоговыйАгент(СтруктураШапкиДокумента, ТаблицаПоВычетамНалоговыйАгент, Отказ, Заголовок);
		
	Иначе
		
		ТаблицаПоВычетамНалоговыйАгент = Неопределено;
		
	КонецЕсли;
	
	мВестиУчетНДС = УчетНДС.ПроводитьПоРазделуУчетаНДС(Дата);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоВычетам, ТаблицаПоАвансам, ТаблицаПоАвансамВыданным, ТаблицаПоВычетамНалоговыйАгент, Отказ, Заголовок);
	КонецЕсли;
	
	Если Не Отказ Тогда
		УниверсальныеМеханизмы.ЗафиксироватьФактВыполненияРегламентнойОперации(НачалоМесяца(Дата),
													  СтруктураШапкиДокумента.Организация,
													  Ссылка,														  
													  ?(СтруктураШапкиДокумента.ПредъявленНДСКВычету0,Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0,Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок));
	ЗакрытиеМесяца.ЗаписатьСписокНеАктуальныхРегОпераций(Организация, Дата, "НДС");
													  
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	УниверсальныеМеханизмы.СброситьФактВыполненияОперации(Ссылка);
		
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	ЗакрытиеМесяца.ЗаписатьСписокНеАктуальныхРегОпераций(Организация, Дата, "НДС");
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

