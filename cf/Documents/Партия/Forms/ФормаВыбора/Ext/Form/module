Перем мГраница;
Перем НП;
//Перем ТипСчета;

Процедура ПриОткрытии()

	// Если даты не заполнены, то период устанавливается по умолчанию
	Если НЕ ЗначениеЗаполнено(КонПериода) и не мПереданИнтервал = Истина Тогда
		КонПериода = КонецМесяца(ТекущаяДата());
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(НачПериода) и не мПереданИнтервал = Истина Тогда
		НачПериода = НачалоМесяца(КонПериода);
	КонецЕсли;
	
	СохранятьРежимОтбораДокументов = ВосстановитьЗначение("ДокПартияПодбор_СохранятьРежимОтбораДокументов");
	ФормироватьСписокПриОткрытии   = ВосстановитьЗначение("ДокПартияПодбор_ФормироватьСписокПриОткрытии");
	
	Если НЕ ЗначениеЗаполнено(РежимОтбораДокументов) И СохранятьРежимОтбораДокументов тогда
		РежимОтбораДокументов = ВосстановитьЗначение("ДокПартияПодбор_РежимОтбораДокументов");
	ИначеЕсли НЕ ЗначениеЗаполнено(РежимОтбораДокументов) Тогда
		РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоРеквизитам;
	КонецЕсли;
    	
	Если НЕ ЗначениеЗаполнено(ВидСубконто) Тогда
		ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(мТипыДокументов) тогда
		Если ЭтаФорма.ВладелецФормы = Неопределено Тогда
			мТипыДокументов = ВидСубконто.ТипЗначения;
		Иначе
			Попытка
				Если НЕ ЗначениеЗаполнено(ЭтаФорма.ВладелецФормы.ОграничениеТипа) Тогда
					мТипыДокументов = ВидСубконто.ТипЗначения;
				Иначе
					мТипыДокументов = ЭтаФорма.ВладелецФормы.ОграничениеТипа;
				КонецЕсли;
			Исключение
				мТипыДокументов = ВидСубконто.ТипЗначения;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Счет = Неопределено Тогда
		Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();		
	КонецЕслИ;
    ЭтаФорма.ЭлементыФормы.ТаблицаДокументов.Колонки.Остаток.Видимость = Ложь;
	РежимОтбораДокументовПриИзменении();
	
	Если ФормироватьСписокПриОткрытии Тогда
		ОбновитьСписок();
	КонецЕсли; 

	НП = Новый НастройкаПериода;

КонецПроцедуры

Процедура УправлениеВидимостью()

	ДоступностьСчета = (РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОборотам 
					или РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОстаткам);
					
	ЭлементыФормы.НадписьСчет.Доступность			= ДоступностьСчета;
	ЭлементыФормы.Счет.Доступность					= ДоступностьСчета;

	ДоступностьСклада = (Счет <> Неопределено);
	
	Если не Счет = Неопределено Тогда
		Если не Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады,"ВидСубконто") = Неопределено Тогда
			ДоступностьСклада = Истина;
		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы.НадписьСклад.Доступность = ДоступностьСклада;
	ЭлементыФормы.Склад.Доступность        = ДоступностьСклада;
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	СохранитьЗначение( "ДокПартияПодбор_СохранятьРежимОтбораДокументов",	СохранятьРежимОтбораДокументов);
	СохранитьЗначение( "ДокПартияПодбор_ФормироватьСписокПриОткрытии", 		ФормироватьСписокПриОткрытии);
	СохранитьЗначение( "ДокПартияПодбор_РежимОтбораДокументов", 			?(СохранятьРежимОтбораДокументов, РежимОтбораДокументов,Перечисления.РежимОтбораДокументов.ПоРеквизитам));

КонецПроцедуры

Процедура ОбновитьСписок()
	
	Если РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОборотам Тогда
		ВыборИзПартийПоНоменклатуре();

	ИначеЕсли РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОстаткам Тогда
		ВыборИзПартийИмеющихОстатки();

	Иначе
		ВыборИзПолногоСпискаПартий();

	КонецЕсли;
КонецПроцедуры

Процедура ОграничениеСпискаДокументовПоТипу(Результат)

	СтрокиКУдалению = новый Массив();

	Для каждого СтрокаВыборки из Результат Цикл

		Если (не мТипыДокументов.СодержитТип(ТипЗнч(СтрокаВыборки.Документ))) или НЕ ЗначениеЗаполнено(СтрокаВыборки.Документ) тогда
			СтрокиКУдалению.Добавить(СтрокаВыборки);
		КонецЕсли;

	КонецЦикла;

	Для каждого СтрокаВыборки из СтрокиКУдалению Цикл
		Результат.Удалить(СтрокаВыборки);
	КонецЦикла;

КонецПроцедуры

Процедура ВыборИзПолногоСпискаПартий()

	Запрос = Новый Запрос;

	ОграничениеТипа = мТипыДокументов;
	
	// Определим типы документов, которые могут являться партиями и по ним по всем сформируем текст запроса
	ТипыСубконтоПартии = ОграничениеТипа.Типы();

	НачалоЗапроса = 
	"ВЫБРАТЬ
	|	СписокПартий.Партия КАК Документ
	|ИЗ
	|	(";

	ОсновноеТелоЗапроса = "";

	Для Каждого Тип Из ТипыСубконтоПартии Цикл

		ИдентификаторДокумента = Метаданные.НайтиПоТипу(Тип).Имя;

		Если ОсновноеТелоЗапроса <> "" Тогда

			ОсновноеТелоЗапроса = ОсновноеТелоЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";

		КонецЕсли;

		ОсновноеТелоЗапроса = ОсновноеТелоЗапроса + "
		|ВЫБРАТЬ
		|	Партия.Ссылка Как Партия
		|ИЗ
		|	Документ." + ИдентификаторДокумента + " КАК Партия
		|
		|ГДЕ
		|	Партия.Дата МЕЖДУ &НачПериода И &КонПериода И" + ?(ЗначениеЗаполнено(Организация),"
		|	Партия.Организация = &Организация И", "") + "
		|	НЕ Партия.ПометкаУдаления";

	КонецЦикла;

	КонецЗапроса = "
	|	) КАК СписокПартий
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписокПартий.Партия
	|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.Текст = НачалоЗапроса + ОсновноеТелоЗапроса + КонецЗапроса;
	Запрос.УстановитьПараметр("НачПериода",  НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("КонПериода",  КонПериода);
	Запрос.УстановитьПараметр("Организация", Организация);

	Результат = Запрос.Выполнить();

	ТаблицаДокументов = Результат.Выгрузить();

	ЭтаФорма.ЭлементыФормы.ТаблицаДокументов.Колонки.Остаток.Видимость = Ложь;
    ЭлементыФормы.ТаблицаДокументов.Колонки.Цена.Видимость = (РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОстаткам);
	ЭлементыФормы.ТаблицаДокументов.Колонки.Сумма.Видимость = (РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОстаткам);
КонецПроцедуры

Процедура ВыборИзПартийПоНоменклатуре()

	ВидыСубконто = Новый Массив;
	Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
		Видысубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		Видысубконто.Добавить(ВидСубконто);
	Иначе
		Видысубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		Видысубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",   НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("КонПериода",   КонПериода);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);

	УсловиеВТекстеЗапроса = ?(НЕ ЗначениеЗаполнено(Организация), "Субконто1 = &Номенклатура", "Субконто1 = &Номенклатура И Организация = &Организация");

	// Если указан счет учета, то необходимо отобрать партии по счету учета
	Если ЗначениеЗаполнено(Счет) Тогда
		Запрос.УстановитьПараметр("Счет",   Счет);
		УсловиеВыбораСчетаВТекстеЗапроса = "Счет В (&Счет)";

	Иначе
		УсловиеВыбораСчетаВТекстеЗапроса = "";

	КонецЕсли;

	// Если указан склад, то необходимо отобрать партии по складу
	Если (ЭлементыФормы.Склад.Доступность) И (ЗначениеЗаполнено(Склад)) Тогда

		Запрос.УстановитьПараметр("Склад", Склад);
		Видысубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		УсловиеВТекстеЗапроса = УсловиеВТекстеЗапроса + " И Субконто3 = &Склад";

	КонецЕсли;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОсновнойОбороты.Субконто2.Ссылка КАК Документ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, , " + УсловиеВыбораСчетаВТекстеЗапроса + ", &ВидыСубконто, " + УсловиеВТекстеЗапроса + ", , ) КАК ОсновнойОбороты";
	Результат = Запрос.Выполнить().Выгрузить();

	ОграничениеСпискаДокументовПоТипу(Результат);
	ТаблицаДокументов = Результат.Скопировать();
	
	ЭтаФорма.ЭлементыФормы.ТаблицаДокументов.Колонки.Остаток.Видимость = Ложь;
    ЭлементыФормы.ТаблицаДокументов.Колонки.Цена.Видимость = (РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОстаткам);
	ЭлементыФормы.ТаблицаДокументов.Колонки.Сумма.Видимость = (РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОстаткам);
КонецПроцедуры

Процедура ВыборИзПартийИмеющихОстатки()

	ВидыСубконто = Новый Массив;
	Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
		Видысубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		Видысубконто.Добавить(ВидСубконто);
	Иначе
		Видысубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		Видысубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонПериода",   КонПериода);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);

	УсловиеВТекстеЗапроса = ?(НЕ ЗначениеЗаполнено(Организация), "Субконто1 = &Номенклатура", "Субконто1 = &Номенклатура И Организация = &Организация");

	// Если указан склад, то необходимо отобрать партии по складу
	Если ЗначениеЗаполнено(Счет) Тогда
		Запрос.УстановитьПараметр("Счет", Счет);
		УсловиеВыбораСчетаВТекстеЗапроса = "Счет В ИЕРАРХИИ(&Счет)";

	Иначе 
		УсловиеВыбораСчетаВТекстеЗапроса = "";

	КонецЕсли;

	// Если указан склад, то необходимо отобрать партии по складу
	Если (ЭлементыФормы.Склад.Доступность) И (ЗначениеЗаполнено(Склад)) Тогда
		Запрос.УстановитьПараметр("Склад", Склад);
		Видысубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		УсловиеВТекстеЗапроса = УсловиеВТекстеЗапроса + " И Субконто3 = &Склад";
	КонецЕсли;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОсновнойОстатки.Субконто2 КАК Документ,
	|	ОсновнойОстатки.КоличествоОстаток Как Остаток,
	|	ОсновнойОстатки.СуммаОстаток Как Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонПериода, "+ УсловиеВыбораСчетаВТекстеЗапроса + ", &ВидыСубконто, " + УсловиеВТекстеЗапроса + ") КАК ОсновнойОстатки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	ОграничениеСпискаДокументовПоТипу(Результат);
	ТаблицаДокументов = Результат.Скопировать();
    ТаблицаДокументов.Колонки.Добавить("Цена");

	ЭтаФорма.ЭлементыФормы.ТаблицаДокументов.Колонки.Остаток.Видимость = Истина;
    ЭлементыФормы.ТаблицаДокументов.Колонки.Цена.Видимость = (РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОстаткам);
	ЭлементыФормы.ТаблицаДокументов.Колонки.Сумма.Видимость = (РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоОстаткам);
	
КонецПроцедуры

Процедура РежимОтбораДокументовПриИзменении()

	ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	УправлениеВидимостью();

КонецПроцедуры

Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	НП.УстановитьПериод(НачПериода, КонПериода);

	Если НП.Редактировать() Тогда

		НачПериода = НП.ПолучитьДатуНачала();
		КонПериода = НП.ПолучитьДатуОкончания();

	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

Процедура ПросмотретьДокумент(Кнопка)
	
	СтрокаДанных = ЭлементыФормы.ТаблицаДокументов.ТекущиеДанные;
	Если Не СтрокаДанных = Неопределено Тогда
		ФормаВыбора = СтрокаДанных.Документ.ПолучитьФорму();
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель1Выбрать(Кнопка)

	Если ЭлементыФормы.ТаблицаДокументов.ТекущиеДанные	= Неопределено тогда
		Сообщить("Документ партии не выбран");
	Иначе
		ОповеститьОВыборе(ЭлементыФормы.ТаблицаДокументов.ТекущиеДанные.Документ);
	КонецЕслИ;

КонецПроцедуры

Процедура СписокПартийВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ОповеститьОВыборе(ВыбраннаяСтрока.Документ);
КонецПроцедуры

Процедура КоманднаяПанель1СоздатьИВыбрать(Кнопка)
	Док = Документы.Партия.СоздатьДокумент();

	Док.Дата        = ?(НЕ ЗначениеЗаполнено(КонПериода),ТекущаяДата(),КонПериода);
	Док.Организация = Организация;
	Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	Док.ПолучитьФорму("ФормаДокумента").ОткрытьМодально();

	Если НЕ Док.Ссылка.Пустая() Тогда
		ОповеститьОВыборе(Док.Ссылка);
	КонецЕсли;
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ТаблицаДокументовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.ТаблицаДокументов.Колонки.Цена.Видимость Тогда
		ДанныеСтроки.Цена = ?(ДанныеСтроки.Остаток = 0, 0, ДанныеСтроки.Сумма / ДанныеСтроки.Остаток);
	КонецЕсли;
	
КонецПроцедуры
