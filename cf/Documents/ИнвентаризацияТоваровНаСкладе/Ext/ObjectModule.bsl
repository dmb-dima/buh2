Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	ВалютаПечати = мВалютаРегламентированногоУчета;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад.Представление КАК ПредставлениеСклада,
	|	Организация,
	|	Склад,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество                      КАК Количество,
	|		КоличествоУчет                  КАК КоличествоПоУчету,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		СуммаУчет                       КАК СуммаПоУчету
	|	)
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";
	Шапка = Запрос.Выполнить().Выбрать();

	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИнвентаризацияТоваровНаСкладе";

	Макет = ПолучитьМакет("ИнвентаризацияТоваровНаСкладе");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Инвентаризация товаров на складе");
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим данные об организации и складе
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
	
	ОбластьМакета.Параметры.ВалютаНаименование = Строка(ВалютаПечати);
	ОбластьМакета.Параметры.Валюта             = ВалютаПечати;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим шапку таблицы
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	ИтогСуммы        = 0;
	ИтогСуммыПоУчету = 0;

	ОбластьМакета    = Макет.ПолучитьОбласть(ОбластьСтроки);
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.Товар = ВыборкаСтрокТовары.Товар;

		ИтогСуммы        = ИтогСуммы        + ВыборкаСтрокТовары.Сумма;
		ИтогСуммыПоУчету = ИтогСуммыПоУчету + ВыборкаСтрокТовары.СуммаПоУчету;
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета                        = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего        = ОбщегоНазначения.ФорматСумм(ИтогСуммы);
	ОбластьМакета.Параметры.ВсегоПоУчету = ОбщегоНазначения.ФорматСумм(ИтогСуммыПоУчету);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подписи к документу
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// ТекстОписания
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Функция ПечатьИНВ3()

	ВалютаПечати = мВалютаРегламентированногоУчета;

	Запрос       = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер КАК НомерДокумента,
	|	Дата  КАК ДатаДокумента,
	|	ДатаНачалаИнвентаризации  КАК ДатаНачалаИнвентаризации,
	|	ДатаОкончанияИнвентаризации  КАК ДатаОкончанияИнвентаризации,
	|	ДокументОснованиеВид  КАК ДокументОснованиеВид,
	|	ДокументОснованиеДата  КАК ДокументОснованиеДата,
	|	ДокументОснованиеНомер  КАК ДокументОснованиеНомер,
	|	ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	Организация,
	|	Склад.Представление КАК ПредставлениеСклада,
	|	Товары.(
	|		НомерСтроки                     КАК Номер,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура.Код                КАК ТоварКод,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Код          КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|		СчетУчета КАК СубСчет,
	|		Цена КАК Цена,
	|		Количество     КАК ФактКоличество,
	|		КоличествоУчет КАК БухКоличество,
	|		Сумма КАК ФактСумма,
	|		СуммаУчет КАК БухСумма
	|	)
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Код", "Номенклатура.Артикул");
	КонецЕсли;
	
	Шапка = Запрос.Выполнить().Выбрать();

	Шапка.Следующий();
	
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ЗапросКомиссия = Новый Запрос;
	ЗапросКомиссия.УстановитьПараметр("ТекущийДокумент", Ссылка);	
	ЗапросКомиссия.Текст =
	"ВЫБРАТЬ
	|	ИнвентаризацияТоваровНаСкладеИнвентаризационнаяКомиссия.ФизЛицо КАК ФизЛицо,
	|	ИнвентаризацияТоваровНаСкладеИнвентаризационнаяКомиссия.Председатель КАК Председатель
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.ИнвентаризационнаяКомиссия КАК ИнвентаризацияТоваровНаСкладеИнвентаризационнаяКомиссия
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладеИнвентаризационнаяКомиссия.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Председатель УБЫВ,
	|	ИнвентаризацияТоваровНаСкладеИнвентаризационнаяКомиссия.НомерСтроки";
	
	ТаблицаИнвентаризационнаяКомиссия = ЗапросКомиссия.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИНВ3";
	Макет       = ПолучитьМакет("ИНВ3");

	//////////////////////////////////////////////////////////////////////
	// 1-я страница формы

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
	
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	ОбластьМакета.Параметры.ДатаОкончанияИнвентаризацииЛокальныйФормат = Шапка.ДатаОкончанияИнвентаризации; 
	
	ДанныеМОЛ = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация, Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
	ОбластьМакета.Параметры.ДолжностьМОЛ1     = ДанныеМОЛ.Должность;
	ОбластьМакета.Параметры.ФИОМОЛ1           = ДанныеМОЛ.Представление;	
		
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	//////////////////////////////////////////////////////////////////////
	// 2-я страница формы

	ИтогФактКоличество = 0;
	ИтогФактСумма      = 0;
	ИтогФактСуммаВсего = 0;
	ИтогБухКоличество  = 0;
	ИтогБухСумма       = 0;

	КолвоСтрокПоСтранице = 0;
	КолвоПоСтранице      = 0;
	СуммаЛиста           = 0;
	ИтогоКолво           = 0;
	
	НомерСтраницы = 2;
    Ном = 0;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	// Выводим многострочную часть документа
	ПодвалСтраницы  = Макет.ПолучитьОбласть("ПодвалСтраницы");	
		
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Ном = Ном + 1;
		СтрокаТаблицы   = Макет.ПолучитьОбласть("Строка");
		СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокТовары);
		
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(СтрокаТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалСтраницы);
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда

			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтраницы");

			ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество = ИтогФактКоличество;
			ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма      = ИтогФактСумма;
			ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество  = ИтогБухКоличество;
			ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма       = ИтогБухСумма;

			ОбластьИтоговПоСтранице.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью     = ЧислоПрописью(КолвоСтрокПоСтранице, ,",,,,,,,,0");
			ОбластьИтоговПоСтранице.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(КолвоПоСтранице);
			ОбластьИтоговПоСтранице.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаЛиста, ВалютаПечати);
			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
			
			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

			ИтогФактКоличество = 0;
			ИтогФактСумма      = 0;
			ИтогБухКоличество  = 0;
			ИтогБухСумма       = 0;

			КолвоСтрокПоСтранице = 0;
			КолвоПоСтранице      = 0;
			СуммаЛиста           = 0;

		КонецЕсли;

		СтрокаТаблицы.Параметры.Номер = Ном;
		СтрокаТаблицы.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование;

		ТабДокумент.Вывести(СтрокаТаблицы);

		ИтогФактКоличество = ИтогФактКоличество + ВыборкаСтрокТовары.ФактКоличество;
		ИтогФактСумма      = ИтогФактСумма      + ВыборкаСтрокТовары.ФактСумма;
		ИтогФактСуммаВсего = ИтогФактСуммаВсего + ВыборкаСтрокТовары.ФактСумма;
		ИтогБухКоличество  = ИтогБухКоличество  + ВыборкаСтрокТовары.БухКоличество;
		ИтогБухСумма       = ИтогБухСумма       + ВыборкаСтрокТовары.БухСумма;
		ИтогоКолво         = ИтогоКолво         + ВыборкаСтрокТовары.ФактКоличество;

		КолвоСтрокПоСтранице = КолвоСтрокПоСтранице + 1;
		КолвоПоСтранице      = КолвоПоСтранице      + ВыборкаСтрокТовары.ФактКоличество;
		СуммаЛиста           = СуммаЛиста           + ВыборкаСтрокТовары.ФактСумма;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтраницы");

	ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество  = ИтогФактКоличество;
	ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма       = ИтогФактСумма;
	ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество   = ИтогБухКоличество;
	ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма        = ИтогБухСумма;
	ОбластьИтоговПоСтранице.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью     = ЧислоПрописью(КолвоСтрокПоСтранице, ,",,,,,,,,0");
	ОбластьИтоговПоСтранице.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(КолвоПоСтранице);
	ОбластьИтоговПоСтранице.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаЛиста, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

	// Выводим подвал документа
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(ИтогоКолво);
	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью     = ЧислоПрописью(ВыборкаСтрокТовары.Количество(), ,",,,,,,,,0");
	ОбластьМакета.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогФактСуммаВсего, ВалютаПечати);
	
	Инд = 1;
	Для Каждого ЧленКомиссии Из ТаблицаИнвентаризационнаяКомиссия Цикл
		ДанныеЧленаКомиссии = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация, ЧленКомиссии.ФизЛицо, Шапка.ДатаДокумента);
		Если Инд <= 4 Тогда
			Если ЧленКомиссии.Председатель Тогда
				ОбластьМакета.Параметры["ДолжностьПредседателя"] = ДанныеЧленаКомиссии.Должность;
				ОбластьМакета.Параметры["ФИОПредседателя"] = ДанныеЧленаКомиссии.Представление;
			Иначе
				ОбластьМакета.Параметры["ДолжностьЧленаКомиссии" + Инд] = ДанныеЧленаКомиссии.Должность;
				ОбластьМакета.Параметры["ФИОЧленаКомиссии" + Инд] = ДанныеЧленаКомиссии.Представление;
			КонецЕсли;		
		Иначе
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ДопЧленКомиссии");
           	ОбластьМакета.Параметры["ДолжностьЧленаКомиссии"] = ДанныеЧленаКомиссии.Должность;
			ОбластьМакета.Параметры["ФИОЧленаКомиссии"] = ДанныеЧленаКомиссии.Представление;
		КонецЕсли;
		Инд = Инд + 1;
	КонецЦикла;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОписиМОЛ");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.НачальныйНомерПоПорядку = 1;
	ОбластьМакета.Параметры.НомерКонца              = ВыборкаСтрокТовары.Количество();
		
	ОбластьМакета.Параметры.ДолжностьМОЛ1   = ДанныеМОЛ.Должность;
	ОбластьМакета.Параметры.ФИОМОЛ1         = ДанныеМОЛ.Представление;
	
	ОбластьМакета.Параметры.ДатаДокумента 	= Шапка.ДатаДокумента;
	
	ТабДокумент.Вывести(ОбластьМакета);
    
	Возврат ТабДокумент;

КонецФункции // ПечатьИНВ3()

// ТекстОписания
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Функция ПечатьИНВ19()

	ВалютаПечати = мВалютаРегламентированногоУчета;
	Параметры    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаПечати, Дата);

	Запрос       = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Курс",            Параметры.Курс);
	Запрос.УстановитьПараметр("Кратность",       Параметры.Кратность);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер КАК НомерДокумента,
	|	Дата  КАК ДатаДокумента,
	|	ДатаНачалаИнвентаризации  КАК ДатаНачалаИнвентаризации,
	|	ДатаОкончанияИнвентаризации  КАК ДатаОкончанияИнвентаризации,
	|	ДокументОснованиеВид  КАК ДокументОснованиеВид,
	|	ДокументОснованиеДата  КАК ДокументОснованиеДата,
	|	ДокументОснованиеНомер  КАК ДокументОснованиеНомер,
	|	ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	Организация,
	|	Организация КАК Руководители,
	|	Склад.Представление КАК ПредставлениеСклада,
	|	Товары.(
	|		НомерСтроки КАК Номер,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура.Код                КАК ТоварКод,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Код           КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|		Цена      * &Курс / &Кратность  КАК Цена,
	|		Количество                      КАК ФактКоличество,
	|		КоличествоУчет                  КАК БухКоличество,
	|		Сумма     * &Курс / &Кратность  КАК ФактСумма,
	|		СуммаУчет * &Курс / &Кратность  КАК БухСумма
	|	)
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Код", "Номенклатура.Артикул");
	КонецЕсли;

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	
	// Параметры печати.
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИНВ19";
	
	// Получение областей макета.
	Макет = ПолучитьМакет("ИНВ19");
	
	ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы1");
	ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("СтрокаТаблицы1");
	ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоТаблицы1");
	ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");

	// Вывод шапки документа.
	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
	
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакетаШапка.Параметры.ДатаНачалаИнвентаризации = Шапка.ДатаНачалаИнвентаризации;
	ОбластьМакетаШапка.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	
	ДанныеМОЛ = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация, Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
	ОбластьМакетаШапка.Параметры.ДолжностьМОЛ1     = ДанныеМОЛ.Должность;
	ОбластьМакетаШапка.Параметры.ФИОМОЛ1           = ДанныеМОЛ.Представление;

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;

	ТабДокумент.Вывести(ОбластьМакетаШапка);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	НомерСтраницы   = 2;
	НомерСтроки     = 1;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	ИтогоРезультатИзлишекКоличество   = 0;
	ИтогоРезультатИзлишекСумма        = 0;
	ИтогоРезультатНедостачаКоличество = 0;
	ИтогоРезультатНедостачаСумма      = 0;

	// Вывод заголовка таблицы.
	ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

	// Вывод многострочной части докмента.
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование;

		Разница     = 0;
		РазницаСумм = 0;

		Разница     = ВыборкаСтрокТовары.ФактКоличество - ВыборкаСтрокТовары.БухКоличество;
		РазницаСумм = ВыборкаСтрокТовары.ФактСумма      - ВыборкаСтрокТовары.БухСумма;
		
		Если Разница = 0 Тогда
			Продолжить;
		КонецЕсли;

		ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
		
		Если Разница < 0 Тогда
			
			ОбластьМакетаСтрока.Параметры.РезультатНедостачаКоличество = - Разница;
			ОбластьМакетаСтрока.Параметры.РезультатНедостачаСумма      = - РазницаСумм;
			ОбластьМакетаСтрока.Параметры.РезультатИзлишекКоличество   = 0;
			ОбластьМакетаСтрока.Параметры.РезультатИзлишекСумма        = 0;

			ИтогоРезультатНедостачаКоличество = ИтогоРезультатНедостачаКоличество + ( - Разница);
			ИтогоРезультатНедостачаСумма      = ИтогоРезультатНедостачаСумма      + ( - РазницаСумм);
			ИтогоРезультатИзлишекКоличество   = ИтогоРезультатИзлишекКоличество   + 0;
			ИтогоРезультатИзлишекСумма        = ИтогоРезультатИзлишекСумма        + 0;
			
		Иначе
			
			ОбластьМакетаСтрока.Параметры.РезультатНедостачаКоличество = 0;
			ОбластьМакетаСтрока.Параметры.РезультатНедостачаСумма      = 0;
			ОбластьМакетаСтрока.Параметры.РезультатИзлишекКоличество   = Разница;
			ОбластьМакетаСтрока.Параметры.РезультатИзлишекСумма        = РазницаСумм;

			ИтогоРезультатНедостачаКоличество = ИтогоРезультатНедостачаКоличество + 0;
			ИтогоРезультатНедостачаСумма      = ИтогоРезультатНедостачаСумма      + 0;
			ИтогоРезультатИзлишекКоличество   = ИтогоРезультатИзлишекКоличество   + Разница;
			ИтогоРезультатИзлишекСумма        = ИтогоРезультатИзлишекСумма        + РазницаСумм;
			
		КонецЕсли;

		// Проверка вывода.
		СтрокаСПодвалом = Новый Массив();
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
		СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			Если НЕ КоличествоСтрок = 1 Тогда
		
				// Вывод итого по странице.
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				// Вывод разделителя страниц.
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				// Вывод заголовка таблицы.
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
			КонецЕсли;

		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		
		НомерСтроки = НомерСтроки + 1;

	КонецЦикла;

	// Вывод итого по странице.
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоРезультатИзлишекКоличество   = ИтогоРезультатИзлишекКоличество;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоРезультатИзлишекСумма        = ИтогоРезультатИзлишекСумма;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоРезультатНедостачаКоличество = ИтогоРезультатНедостачаКоличество;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоРезультатНедостачаСумма      = ИтогоРезультатНедостачаСумма;
	ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
	
	// Вывод подвала.
	ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
	ОбластьМакетаПодвал.Параметры.ФИОБухгалтера = Бухгалтер;
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьИНВ19()

// Функция формирует табличный документ с печатной формой приказа о проведении
// инвентаризации.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма приказа.
//
Функция ПечатьИНВ22()

	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        "Члены комиссии");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияТоваровНаСкладе.Дата КАК Дата,
	|	ИнвентаризацияТоваровНаСкладе.Номер КАК Номер,
	|	ИнвентаризацияТоваровНаСкладе.Организация КАК Организация,
	|	ИнвентаризацияТоваровНаСкладе.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияТоваровНаСкладе.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияТоваровНаСкладе.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	ИнвентаризацияТоваровНаСкладе.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	ИнвентаризацияТоваровНаСкладе.ПричинаПроведенияИнвентаризации КАК ПричинаПроведенияИнвентаризации
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка = &Ссылка";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнвентаризацияТоваровНаСкладеИнвентаризационнаяКомиссия.ФизЛицо КАК ФизЛицо,
	|	ИнвентаризацияТоваровНаСкладеИнвентаризационнаяКомиссия.Председатель КАК Председатель
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.ИнвентаризационнаяКомиссия КАК ИнвентаризацияТоваровНаСкладеИнвентаризационнаяКомиссия
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладеИнвентаризационнаяКомиссия.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИнвентаризацияТоваровНаСкладеИнвентаризационнаяКомиссия.НомерСтроки";
	
	ТаблицаИнвентаризационнаяКомиссия = Запрос.Выполнить().Выгрузить();
	
	Макет = ПолучитьОбщийМакет("ИНВ22");
	
	// Получаем области макета для вывода в табличный документ
	Шапка   = Макет.ПолучитьОбласть("Шапка");
	Подпись = Макет.ПолучитьОбласть("Подпись");
	Подвал  = Макет.ПолучитьОбласть("Подвал");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 20;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОС_ИНВ22";

	// Выведем шапку документа
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
	
	Шапка.Параметры.Заполнить(Док);
	Шапка.Параметры.Организация          = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	Шапка.Параметры.ОрганизацияКодПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	
	Шапка.Параметры.НомерДокумента = Док.ДокументОснованиеНомер;
	Шапка.Параметры.ДатаДокумента  = Док.ДокументОснованиеДата;
	
	Шапка.Параметры.НаименованиеИмуществаОбязательств = "";
	
	ТабДокумент.Вывести(Шапка);
	
	// Выведем подпись председателя инвентаризационной комиссии
	ТаблицаИнвентаризационнаяКомиссия.Индексы.Добавить("Председатель");
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		ДанныеПредседателя = ОбщегоНазначения.ДанныеФизЛица(Док.Организация, ПредседательКомиссии.ФизЛицо, Док.Дата);
			
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		Подпись.Параметры.Должность                = ДанныеПредседателя.Должность;
		Подпись.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		
	Иначе
		
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		Подпись.Параметры.Должность                = "";
		Подпись.Параметры.РасшифровкаПодписи       = "";
		
	КонецЕсли;
		
	ТабДокумент.Вывести(Подпись);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	КоличествоЧленовКомиссии = 0;
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ТаблицаИнвентаризационнаяКомиссия Цикл
		
		Если ЧленКомиссии.Председатель Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		КоличествоЧленовКомиссии = КоличествоЧленовКомиссии + 1;
		
		ДанныеЧленаКомиссии = ОбщегоНазначения.ДанныеФизЛица(Док.Организация, ЧленКомиссии.ФизЛицо, Док.Дата);
		
		Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
		                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
													   "");
		Подпись.Параметры.Должность                = ДанныеЧленаКомиссии.Должность;
		Подпись.Параметры.РасшифровкаПодписи       = ДанныеЧленаКомиссии.Представление;
		
		ТабДокумент.Вывести(Подпись);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	// подписей, как в форме, утвержденной Госкомстатом)
	Если КоличествоЧленовКомиссии < 3 Тогда
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Для Итератор = (КоличествоЧленовКомиссии + 1) По 3 Цикл
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
														   "");
			Подпись.Параметры.Должность                = "";
			Подпись.Параметры.РасшифровкаПодписи       = "";
			
			ТабДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
	
	КонецЕсли;
	
	// Выведем подвал приказа
	Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подвал) Тогда
		
		// Выведем разрыв страницы
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЕсли;
	
	Подвал.Параметры.НаименованиеИмуществаОбязательств = "";
	Подвал.Параметры.ДатаНачалаИнвентаризации          = Формат(Док.ДатаНачалаИнвентаризации, "ДЛФ=DD");
	Подвал.Параметры.ДатаОкончанияИнвентаризации       = Формат(Док.ДатаОкончанияИнвентаризации, "ДЛФ=DD");
	Подвал.Параметры.ПричинаПроведенияИнвентаризации   = Док.ПричинаПроведенияИнвентаризации;
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Док.Организация, Док.Дата);
	
	Подвал.Параметры.ДолжностьРуководителя          = Руководители.РуководительДолжность;
	Подвал.Параметры.РасшифровкаПодписиРуководителя = Руководители.РуководительПредставление;
	
	ТабДокумент.Вывести(Подвал);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьИНВ22()

 // Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Ведомость" Тогда
		ТабДокумент = ПечатьДокумента();
		
	ИначеЕсли ИмяМакета = "ИНВ3" тогда
		ТабДокумент = ПечатьИНВ3();
		
	ИначеЕсли ИмяМакета = "ИНВ19" тогда
		ТабДокумент = ПечатьИНВ19();
		
	ИначеЕсли ИмяМакета = "ИНВ22" тогда
		ТабДокумент = ПечатьИНВ22();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Ведомость,ИНВ3,ИНВ19,ИНВ22","Инвентаризация товаров на складе","ИНВ-3 (Инвентаризационная опись товаров)","ИНВ-19 (Сличительная ведомость)","ИНВ-22 (приказ)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Заполняет документ по остаткам на складе
// 
Процедура ЗаполнитьПоОстаткамНаСкладе() Экспорт

	СписокСкладов = Новый Массив();
	Если ЗначениеЗаполнено(Склад) Тогда
		СписокСкладов.Добавить(Склад);
	Иначе
		ЗапросПоСкладам = Новый Запрос();
		ЗапросПоСкладам.УстановитьПараметр("МОЛ", ОтветственноеЛицо);
		ЗапросПоСкладам.УстановитьПараметр("КонецПериода",    Дата);
		ЗапросПоСкладам.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница
		|ИЗ
		|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&КонецПериода, ФизическоеЛицо = &МОЛ) КАК ОтветственныеЛицаСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница";
		
		Выборка   = ЗапросПоСкладам.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.СтруктурнаяЕдиница = NULL Тогда
				Продолжить;
			КонецЕсли;
			СписокСкладов.Добавить(Выборка.СтруктурнаяЕдиница);
		КонецЦикла;
	КонецЕсли;
		
	//Определим настройки аналитического учета
	БУ = ПланыСчетов.Хозрасчетный.Товары.ПолучитьОбъект();
	ВестиСкладскойУчетБУ  = НЕ (БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено);
	ВестиСуммовойУчетПоСкладамБУ = ?(ВестиСкладскойУчетБУ, БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой, Ложь);
	
	ТекстУсловияК = ?(ВестиСкладскойУчетБУ, "И Субконто2 В (&Склад)", "");
	ТекстУсловияС = ?(ВестиСуммовойУчетПоСкладамБУ, "И Субконто2 В (&Склад)", "");
	
	ПорядокСубконтоК = Новый Массив();
	ПорядокСубконтоК.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Если ВестиСкладскойУчетБУ Тогда
		ПорядокСубконтоК.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	
	ПорядокСубконтоС = Новый Массив();
	ПорядокСубконтоС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Если ВестиСуммовойУчетПоСкладамБУ Тогда
		ПорядокСубконтоС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
		
	ПорядокСубконтоМОЛ = Новый Массив();
	ПорядокСубконтоМОЛ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ПорядокСубконтоМОЛ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);

	МассивИсклСчетов = Новый Массив();
	МассивИсклСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеЦенностиВЭксплуатации);
	МассивИсклСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	МассивИсклСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ);
	МассивИсклСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",		         СписокСкладов);
	Запрос.УстановитьПараметр("МОЛ",	 			 ОтветственноеЛицо);
	Запрос.УстановитьПараметр("КонецПериода",	 	 Дата);
	Запрос.УстановитьПараметр("Организация",	     Организация);
	Запрос.УстановитьПараметр("ВидСубконто",	     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Запрос.УстановитьПараметр("ПорядокСубконтоК",	 ПорядокСубконтоК);
	Запрос.УстановитьПараметр("ПорядокСубконтоС",	 ПорядокСубконтоС);
	Запрос.УстановитьПараметр("ПорядокСубконтоМОЛ",	 ПорядокСубконтоМОЛ);
	Запрос.УстановитьПараметр("ИсклСчета",	 		 МассивИсклСчетов);
	ТекстЗапросаИнвентаризация = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет              КАК Счет,
	|	ХозрасчетныйОстатки.Счет.Порядок      КАК Порядок,
	|	ХозрасчетныйОстатки.Субконто1         КАК Номенклатура,
	|	ХозрасчетныйОстатки.Субконто1.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	ХозрасчетныйОстаткиС.СуммаОстаток      		КАК СуммаВсего,
	|	ХозрасчетныйОстаткиС.КоличествоОстаток 		КАК КоличествоВсего,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, , &ПорядокСубконтоК, Организация В (&Организация) " + ТекстУсловияК + ") КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, , &ПорядокСубконтоС, Организация В (&Организация) " + ТекстУсловияС + ") КАК ХозрасчетныйОстаткиС
	|		ПО ХозрасчетныйОстатки.Счет = ХозрасчетныйОстаткиС.Счет	И ХозрасчетныйОстатки.Субконто1 = ХозрасчетныйОстаткиС.Субконто1
	|";
	
	Если (НЕ ЗначениеЗаполнено(Склад)) И (ЗначениеЗаполнено(ОтветственноеЛицо)) Тогда
		ТекстЗапросаИнвентаризация = ТекстЗапросаИнвентаризация + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Счет.Порядок,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто1.БазоваяЕдиницаИзмерения,
		|	ХозрасчетныйОстатки.СуммаОстаток,
		|	ХозрасчетныйОстатки.КоличествоОстаток,
		|	ХозрасчетныйОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, , &ПорядокСубконтоМОЛ, Организация В (&Организация) И Субконто2 В (&МОЛ)) КАК ХозрасчетныйОстатки
		|
		|ГДЕ
		|  НЕ (ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (&ИсклСчета))
		|";
	КонецЕсли;
	ТекстЗапросаИнвентаризация = ТекстЗапросаИнвентаризация + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.Текст =ТекстЗапросаИнвентаризация;

	Выборка   = Запрос.Выполнить().Выбрать();

	ЭтоНТТ   = (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	ДатаДока  = Дата;
	ТипЦен    = Склад.ТипЦенРозничнойТорговли;

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Количество = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.СчетУчета	      = Выборка.Счет;
		СтрокаТабличнойЧасти.КоличествоУчет   = СтрокаТабличнойЧасти.Количество;

		Цена = ?(Выборка.КоличествоВсего = 0 ИЛИ Выборка.КоличествоВсего = NULL, 0, Выборка.СуммаВсего / Выборка.КоличествоВсего);
		
		СтрокаТабличнойЧасти.СуммаУчет        = Цена*Выборка.Количество;
		СтрокаТабличнойЧасти.Сумма            = СтрокаТабличнойЧасти.СуммаУчет;
		СтрокаТабличнойЧасти.Цена             = Цена;

		Если ЭтоНТТ Тогда

			СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
			                                    ТипЦен, ДатаДока, мВалютаРегламентированногоУчета, 1, 1);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоОстаткамНаСкладе()

// Процедура перезаполняет учетные количества в документе
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Процедура ПерезаполнитьУчетныеКоличества() Экспорт

	# Если Клиент Тогда

		Если Товары.Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить учетные количества и суммы?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Синоним);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		Иначе
			Возврат;
		КонецЕсли;

		// Документ должен быть записан, чтобы этот запрос сработал.
		Если Модифицированность() Тогда

			ТекстВопроса = "Перед заполнением следует записать документ.
			               |Продолжить?";

			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Синоним);

			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;

			Записать(РежимЗаписиДокумента.Запись);

		КонецЕсли;

	#КонецЕсли

	СписокСкладов = Новый Массив();
	Если ЗначениеЗаполнено(Склад) Тогда
		СписокСкладов.Добавить(Склад);
	Иначе
		ЗапросПоСкладам = Новый Запрос();
		ЗапросПоСкладам.УстановитьПараметр("МОЛ", ОтветственноеЛицо);
		ЗапросПоСкладам.УстановитьПараметр("КонецПериода",    Дата);
		ЗапросПоСкладам.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница
		|ИЗ
		|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&КонецПериода, ФизическоеЛицо = &МОЛ) КАК ОтветственныеЛицаСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница";
		
		Выборка   = ЗапросПоСкладам.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.СтруктурнаяЕдиница = NULL Тогда
				Продолжить;
			КонецЕсли;
			СписокСкладов.Добавить(Выборка.СтруктурнаяЕдиница);
		КонецЦикла;
	КонецЕсли;
		
	//Определим настройки аналитического учета
	БУ = ПланыСчетов.Хозрасчетный.Товары.ПолучитьОбъект();
	ВестиСкладскойУчетБУ  = НЕ (БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено);
	ВестиСуммовойУчетПоСкладамБУ = ?(ВестиСкладскойУчетБУ, БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой, Ложь);
	
	ТекстУсловияК = ?(ВестиСкладскойУчетБУ, "И Субконто2 В (&Склад)", "");
	ТекстУсловияС = ?(ВестиСуммовойУчетПоСкладамБУ, "И Субконто2 В (&Склад)", "");
	
	ПорядокСубконтоК = Новый Массив();
	ПорядокСубконтоК.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Если ВестиСкладскойУчетБУ Тогда
		ПорядокСубконтоК.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	
	ПорядокСубконтоС = Новый Массив();
	ПорядокСубконтоС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Если ВестиСуммовойУчетПоСкладамБУ Тогда
		ПорядокСубконтоС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
		
	ПорядокСубконтоМОЛ = Новый Массив();
	ПорядокСубконтоМОЛ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ПорядокСубконтоМОЛ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);

	МассивИсклСчетов = Новый Массив();
	МассивИсклСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеЦенностиВЭксплуатации);
	МассивИсклСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	МассивИсклСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ);
	МассивИсклСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",		         СписокСкладов);
	Запрос.УстановитьПараметр("МОЛ",	 			 ОтветственноеЛицо);
	Запрос.УстановитьПараметр("КонецПериода",	 	 Дата);
	Запрос.УстановитьПараметр("Организация",	     Организация);
	Запрос.УстановитьПараметр("ВидСубконто",	     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Запрос.УстановитьПараметр("ПорядокСубконтоК",	 ПорядокСубконтоК);
	Запрос.УстановитьПараметр("ПорядокСубконтоС",	 ПорядокСубконтоС);
	Запрос.УстановитьПараметр("ПорядокСубконтоМОЛ",	 ПорядокСубконтоМОЛ);
	Запрос.УстановитьПараметр("ИсклСчета",	 		 МассивИсклСчетов);
	Запрос.УстановитьПараметр("ДокументСсылка",  	 Ссылка);
	
	ТекстЗапросаИнвентаризация = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОстаткиС.СуммаОстаток) 		КАК СуммаВсего,
	|	СУММА(ХозрасчетныйОстаткиС.КоличествоОстаток) 	КАК КоличествоВсего,
	|	СУММА(ХозрасчетныйОстатки.КоличествоОстаток) 	КАК Количество,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.СчетУчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИнвентаризацияТоваровНаСкладеТовары.Номенклатура 	КАК Номенклатура,
	|		ИнвентаризацияТоваровНаСкладеТовары.СчетУчета 		КАК СчетУчета,
	|		ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки 	КАК НомерСтроки
	|	ИЗ
	|		Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	|	ГДЕ
	|		ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &ДокументСсылка) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&КонецПериода,
	|				,
	|				&ПорядокСубконтоК,
	|				Организация В (&Организация) "+ ТекстУсловияК + ") КАК ХозрасчетныйОстатки
	|		ПО (ХозрасчетныйОстатки.Субконто1 = ВложенныйЗапрос.Номенклатура)
	|			И (ХозрасчетныйОстатки.Счет = ВложенныйЗапрос.СчетУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&КонецПериода,
	|				,
	|				&ПорядокСубконтоС,
	|				Организация В (&Организация) "+ ТекстУсловияС + ") КАК ХозрасчетныйОстаткиС
	|		ПО (ХозрасчетныйОстаткиС.Субконто1 = ВложенныйЗапрос.Номенклатура)
	|			И (ХозрасчетныйОстаткиС.Счет = ВложенныйЗапрос.СчетУчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.СчетУчета";
	
	Если (НЕ ЗначениеЗаполнено(Склад)) И (ЗначениеЗаполнено(ОтветственноеЛицо)) Тогда
		ТекстЗапросаИнвентаризация = ТекстЗапросаИнвентаризация + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаВсего,
		|	СУММА(ХозрасчетныйОстатки.КоличествоОстаток) КАК КоличествоВсего,
		|	СУММА(ХозрасчетныйОстатки.КоличествоОстаток) КАК Количество,
		|	ВложенныйЗапрос.НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.СчетУчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИнвентаризацияТоваровНаСкладеТовары.Номенклатура КАК Номенклатура,
		|		ИнвентаризацияТоваровНаСкладеТовары.СчетУчета КАК СчетУчета,
		|		ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки КАК НомерСтроки
		|	ИЗ
		|		Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
		|	ГДЕ
		|		ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &ДокументСсылка И
		| 		(НЕ (ИнвентаризацияТоваровНаСкладеТовары.СчетУчета В ИЕРАРХИИ (&ИсклСчета)))
		|	) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&КонецПериода,
		|				,
		|				&ПорядокСубконтоМОЛ,
		|				Организация В (&Организация)
		|					И Субконто2 В (&МОЛ)) КАК ХозрасчетныйОстатки
		|		ПО (ХозрасчетныйОстатки.Субконто1 = ВложенныйЗапрос.Номенклатура)
		|			И (ХозрасчетныйОстатки.Счет = ВложенныйЗапрос.СчетУчета)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.СчетУчета
		|";
	КонецЕсли;
	ТекстЗапросаИнвентаризация = ТекстЗапросаИнвентаризация + "
	|
	|УПОРЯДОЧИТЬ ПО
	|   НомерСтроки";
	
	Запрос.Текст =ТекстЗапросаИнвентаризация;
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();	
	ТаблицаЗапроса.Свернуть("НомерСтроки", "СуммаВсего, КоличествоВсего, Количество");
	
	ЭтоНТТ  = (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);

	Для каждого СтрокаТабличнойЧасти ИЗ Товары Цикл

		СтрокаЗапроса = ТаблицаЗапроса.Найти(СтрокаТабличнойЧасти.НомерСтроки, "НомерСтроки");
		
		Если НЕ ЗначениеЗаполнено(СтрокаЗапроса) Тогда
			СтрокаТабличнойЧасти.КоличествоУчет = 0;
			СтрокаТабличнойЧасти.СуммаУчет      = 0;
			Продолжить;
		КонецЕсли;
		
		Если (СтрокаЗапроса.Количество = NULL) ИЛИ (СтрокаЗапроса.Количество <= 0) Тогда
			СтрокаТабличнойЧасти.КоличествоУчет = 0;
			СтрокаТабличнойЧасти.СуммаУчет      = 0;
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти.КоличествоУчет = СтрокаЗапроса.Количество;
		
		Цена = ?(СтрокаЗапроса.КоличествоВсего = 0 ИЛИ СтрокаЗапроса.КоличествоВсего = NULL, 0, СтрокаЗапроса.СуммаВсего / СтрокаЗапроса.КоличествоВсего);
		
		СтрокаТабличнойЧасти.СуммаУчет        = Цена*СтрокаЗапроса.Количество;
		СтрокаТабличнойЧасти.Цена             = Цена;

	КонецЦикла;

КонецПроцедуры // ПерезаполнитьУчетныеКоличества()

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

