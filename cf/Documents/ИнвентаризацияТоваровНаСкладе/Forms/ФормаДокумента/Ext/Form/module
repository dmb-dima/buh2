// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит текущую форму подбора номенклатуры
Перем мФормаПодбораНоменклатуры; 

// Валюта курс и кратность для пересчета регламентированных сумм
Перем мВалютаУпрУчета;
Перем мКурсУпрУчета;
Перем мКратностьУпрУчета;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит индекс удаляемого элемента табличного поля - для корректной 
// обработки удаления председателя инвентаризационной комиссии
Перем мУдаляемыйЭлементИндекс;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.Цена             = 0;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Колонки = ЭлементыФормы.Товары.Колонки;

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		Колонки.ЦенаВРознице.Видимость  = Истина;
		Колонки.Цена.Видимость          = Ложь;
		Колонки.ЦенаВРознице.ТекстШапки = "Розн. цена ("
		                                + мВалютаРегламентированногоУчета
		                                + ")";
	Иначе
		Колонки.ЦенаВРознице.Видимость = Ложь;
		Колонки.Цена.Видимость         = Истина;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимость()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.СуммаПоУчету.Значение = Товары.Итог("СуммаУчет");
	ЭлементыФормы.СуммаПоФакту.Значение = Товары.Итог("Сумма");

	ПредставлениеВалюты = мВалютаРегламентированногоУчета;

	ЭлементыФормы.НадписьВсего.Заголовок = "Сумма, " + ПредставлениеВалюты + " :";
	ЭлементыФормы.НадписьВсегоПоУчету.Заголовок = "Сумма по учету, " + ПредставлениеВалюты + " :";

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ТАБЛИЧНОЙ ЧАСТИ

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбораНоменклатуры, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем СпособЗаполненияЦен;

	ЕстьЦена = Ложь;

	СписокВидовПодбора = Новый СписокЗначений();
	СписокВидовПодбора.Добавить(,                      "По справочнику");

	Если ЗначениеЗаполнено(Склад) И (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
		СписокВидовПодбора.Добавить("ОстаткиНеавтоматизированнаяТорговаяТочка", "По остаткам и ценам номенклатуры в торговой точке");
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам;
		ЕстьЦена = Истина;
	Иначе
		СписокВидовПодбора.Добавить("ОстаткиНоменклатуры", "Остатки номенклатуры");
	КонецЕсли;	
	
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"       , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Команда"            , "ПодборВТабличнуюЧастьТовары");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);
	СтруктураПараметровПодбора.Вставить("Склад"              , Склад);
	СтруктураПараметровПодбора.Вставить("Организация"        , Организация);

	ВалютаДокумента = мВалютаУпрУчета;

	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен", СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"           , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"    , ВалютаДокумента);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер);

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, мФормаПодбораНоменклатуры);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, Количество, Цена;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"      , ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура",     Номенклатура);
	СтруктураОтбора.Вставить("Цена"            , Цена);

	Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
		СтруктураОтбора.Вставить("Цена", Цена);
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			
		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();

		СтрокаТабличнойЧасти.Номенклатура   = Номенклатура;
        СтрокаТабличнойЧасти.Количество     = Количество;
		
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			// Подбирали уже в нужной валюте.
			СтрокаТабличнойЧасти.Цена = Цена;
		КонецЕсли;

		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЕсли;

	ЭлементыФормы.Товары.ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы.Товары.ТекущаяКолонка = ЭлементыФормы.Товары.Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	       	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	// Установить список документов-основания для проведения инвентаризации
	СписокВидовДокументОснование = Новый СписокЗначений();
	СписокВидовДокументОснование.Добавить("Приказ");
	СписокВидовДокументОснование.Добавить("Постановление");
	СписокВидовДокументОснование.Добавить("Распоряжение");
	ЭлементыФормы.ДокументОснованиеВид.СписокВыбора = СписокВидовДокументОснование;
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	УстановитьВидимость();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,,ЭлементыФормы.Товары);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
Процедура ПриЗакрытии()
				
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры //ПриЗакрытии

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()


// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		
		ЗначениеВыбора.Свойство("Команда", Команда);
		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		СтрокаТабличнойЧасти = ИнвентаризационнаяКомиссия.Найти(ЗначениеВыбора, "ФизЛицо");
		
		Если НЕ (СтрокаТабличнойЧасти = Неопределено) Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Физическое лицо <" + ЗначениеВыбора + "> уже подобрано!",,, СтатусСообщения.Обычное);
			
		Иначе
			
			НоваяСтрока = ИнвентаризационнаяКомиссия.Добавить();
			
			НоваяСтрока.ФизЛицо = ЗначениеВыбора;
			Если ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
				НоваяСтрока.Председатель = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ "Инвентаризационная комиссия"
//

// Обработчик события "ПриИзмененииФлажка" табличной части 
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "Председатель" Тогда
		
		Если НЕ (Элемент.ТекущиеДанные[Колонка.Имя]) Тогда
			Элемент.ТекущиеДанные[Колонка.Имя] = Истина;
		КонецЕсли;
		
		Для Каждого Строка Из ИнвентаризационнаяКомиссия Цикл
			
			Если НЕ (Строка.НомерСтроки = Элемент.ТекущиеДанные.НомерСтроки) Тогда
				Строка.Председатель = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры // ИнвентаризационнаяКомиссияПриИзмененииФлажка()

// Обработчик события "ПередУдалением" табличной части
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияПередУдалением(Элемент, Отказ)
	
	мУдаляемыйЭлементИндекс = ?(Элемент.ТекущиеДанные.Председатель,
	                            ИнвентаризационнаяКомиссия.Индекс(Элемент.ТекущаяСтрока),
								Неопределено);
	
КонецПроцедуры // ИнвентаризационнаяКомиссияПередУдалением()

// Обработчик события "ПослеУдаления" табличной части
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияПослеУдаления(Элемент)
	
	КоличествоСтрок = ИнвентаризационнаяКомиссия.Количество();
	
	Если КоличествоСтрок > 0 И НЕ (мУдаляемыйЭлементИндекс = Неопределено) Тогда
		
		ИнвентаризационнаяКомиссия[?(мУдаляемыйЭлементИндекс < КоличествоСтрок - 1, 
		                             мУдаляемыйЭлементИндекс,
		                             КоличествоСтрок - 1)].Председатель = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ИнвентаризационнаяКомиссияПослеУдаления()

// Обработчик события "ПриНачалеРедактирования" табличной части
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, 
	                                                        НоваяСтрока, 
                                                            Копирование)
	
	Если Копирование Тогда
		
		Элемент.ТекущиеДанные.ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		Элемент.ТекущиеДанные.Председатель = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ИнвентаризационнаяКомиссияПриНачалеРедактирования()

// Обработчик события "ПриИзменении" колонки "ФизЛицо" табличной части
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияФизЛицоПриИзменении(Элемент)
	
	Если ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
		
		ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	
	КонецЕсли;

КонецПроцедуры // ИнвентаризационнаяКомиссияФизЛицоПриИзменении()

// Обработчик события "ОбработкаВыбора" колонки "ФизЛицо" табличной части
// "Инвентаризационная комиссия".
//
Процедура ИнвентаризационнаяКомиссияФизЛицоОбработкаВыбора(Элемент,
                                                           ВыбранноеЗначение,
                                                           СтандартнаяОбработка)
	
	Если НЕ (Элемент.Значение = ВыбранноеЗначение) Тогда // если выбрано значение, отличное от того, что было
		
		СтрокаТабличнойЧасти = ИнвентаризационнаяКомиссия.Найти(ВыбранноеЗначение, "ФизЛицо");

		Если НЕ (СтрокаТабличнойЧасти = Неопределено) Тогда
					
			Предупреждение("Физическое лицо <" + СокрЛП(ВыбранноеЗначение) + "> уже включено в состав комиссии!", 60);
			СтандартнаяОбработка = Ложь;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИнвентаризационнаяКомиссияФизЛицоОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткамНаСкладе(Кнопка)
	
	Если Товары.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Синоним);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Товары.Очистить();
	КонецЕсли;
	
	ЗаполнитьПоОстаткамНаСкладе();

	Запрос = Новый Запрос;

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнить()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для заполнения 
// учетных количеств и сумм товаров в табличной части
//
Процедура КоманднаяПанельТоварыПерезаполнитьУчетныеКоличестваИСуммы(Кнопка)

	ПерезаполнитьУчетныеКоличества();

КонецПроцедуры // КоманднаяПанельТоварыПерезаполнитьУчетныеКоличестваИСуммы()


// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели табличной
// части "Инвентаризационная комиссия", вызывает диалог подбора из справочника
// "Физические лица".
//
Процедура КоманднаяПанельИнвентаризационнаяКомиссияПодбор(Кнопка)
	
	Форма = Справочники.ФизическиеЛица.ПолучитьФормуВыбора(, ЭтаФорма);
	Форма.РежимВыбора = Истина;
	Форма.ЗакрыватьПриВыборе = Ложь;
	Форма.Открыть();

КонецПроцедуры // КоманднаяПанельИнвентаризационнаяКомиссияПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Склад.
//
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		Отбор = Новый Структура("СтруктурнаяЕдиница");
		Отбор.СтруктурнаяЕдиница = Элемент.Значение;
		СрезПоследних   = РегистрыСведений.ОтветственныеЛица.СрезПоследних(Дата, Отбор);
		
		Если СрезПоследних.Количество() < 1 Тогда
			ОтветственноеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		Иначе
			ОтветственноеЛицо = СрезПоследних[0].ФизическоеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Элемент.Значение)) или (ЗначениеЗаполнено(ОтветственноеЛицо)) Тогда	
		УстановитьВидимость();
		ПерезаполнитьУчетныеКоличества();
	КонецЕсли;

КонецПроцедуры

Процедура ОтветственноеЛицоПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		Если ЗначениеЗаполнено(Склад) Тогда
			Отбор = Новый Структура("СтруктурнаяЕдиница");
			Отбор.СтруктурнаяЕдиница = Склад;
			СрезПоследних   = РегистрыСведений.ОтветственныеЛица.СрезПоследних(Дата, Отбор);
			
			Если СрезПоследних.Количество() < 1 Тогда
				Склад = Справочники.Склады.ПустаяСсылка();
				УстановитьВидимость();
				ПерезаполнитьУчетныеКоличества();
			Иначе
				Если НЕ ОтветственноеЛицо = СрезПоследних[0].ФизическоеЛицо Тогда
					Склад = Справочники.Склады.ПустаяСсылка();
					УстановитьВидимость();
					ПерезаполнитьУчетныеКоличества();
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПерезаполнитьУчетныеКоличества();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Товары.Колонки.Отклонение.Видимость Тогда
		ОформлениеСтроки.Ячейки.Отклонение.УстановитьТекст(ДанныеСтроки.Количество - ДанныеСтроки.КоличествоУчет);
	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества учета
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоУчетПриИзменении(Элемент)

	ЭлементыФормы.Товары.ТекущиеДанные.СуммаУчет = ЭлементыФормы.Товары.ТекущиеДанные.Цена * ЭлементыФормы.Товары.ТекущиеДанные.КоличествоУчет;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода цены в рознице
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаВРозницеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбрана позиция номенклатуры!"); 
		Возврат;
	КонецЕсли; 

КонецПроцедуры // ТоварыЦенаНачалоВыбораИзСписка()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
       

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

СтруктураКурса     = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУпрУчета, Дата);
мКурсУпрУчета      = СтруктураКурса.Курс;
мКратностьУпрУчета = СтруктураКурса.Кратность;

