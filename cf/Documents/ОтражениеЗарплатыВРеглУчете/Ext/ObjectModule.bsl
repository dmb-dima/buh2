Перем мПоддержкаПБУ18;
Перем ТаблицаОтражениеВУчете;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УстановитьСубконтоПоСчету(СтрокаТаблицы, СведенияОСчетеИсточнике, СведенияОСчетеПриемнике, КолонкиИсточник, КолонкиПриемник) Экспорт 
	
	// попробуем использовать значения субконто из колонок-образцов
	// если они не подойдут по виду субконто, оставим то, что было 
	СоответствиеСубконто = Новый Соответствие;
	Для Сч = 1 По 3 Цикл
		СоответствиеСубконто.Вставить(СведенияОСчетеИсточнике["ВидСубконто"+Сч],СтрокаТаблицы[КолонкиИсточник + Сч]);
		Если СведенияОСчетеИсточнике.КоличествоСубконто = Сч Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Для Сч = 1 По 3 Цикл
		Если СведенияОСчетеПриемнике.КоличествоСубконто >= Сч Тогда
			СубконтоВБУ = СоответствиеСубконто[СведенияОСчетеПриемнике["ВидСубконто"+Сч]];
			СтрокаТаблицы[КолонкиПриемник + Сч] = СведенияОСчетеПриемнике["ТипСубконто"+Сч].ПривестиЗначение(?(СубконтоВБУ <> Неопределено, СубконтоВБУ,СтрокаТаблицы[КолонкиПриемник + Сч]));
		Иначе
			СтрокаТаблицы[КолонкиПриемник + Сч] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция СформироватьЗапросПоОтражениюВУчете()
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц        = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ПроцедурыУчетаЗарплаты.СоздатьВТОтражениеВУчете(Запрос, ТаблицаОтражениеВУчете, Ссылка);
	Запрос.Текст = ПроцедурыУчетаЗарплаты.СформироватьЗапросПоОтражениюВУчете(Ссылка);
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьДляПроверкиОтраженияВУчете()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.НомерСтроки КАК НомерСтроки,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1.ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт2.ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт3.ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		ИНАЧЕ &ПустаяСтатьяЗатрат
	|	КОНЕЦ КАК СтатьяЗатратЕНДВД,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт КАК СчетКт
	|ИЗ
	|	Документ.ОтражениеЗарплатыВРеглУчете.ОтражениеВУчете КАК ОтражениеЗарплатыВРеглУчетеОтражениеВУчете
	|ГДЕ
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка = &парамРегистратор");
	
	
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка());
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не задана организация!", Отказ, Заголовок);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не задан период за который выполняется отражение начислений в бухгалтерском учете!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиОтраженияВУчете(ВыборкаПоДоходам, НеВедетсяНУ, Отказ)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер "+ СокрЛП(ВыборкаПоДоходам.НомерСтроки) + ": ";

	Если НЕ ЗначениеЗаполнено(ВыборкаПоДоходам.СчетДт) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не указан счет дебета!", Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВыборкаПоДоходам.СчетКт) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не указан счет кредита!", Отказ);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	ПроверитьЗаполнениеШапки(Отказ, Заголовок);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, КонецМесяца(ПериодРегистрации));
	ОСН_ФизЛицо = (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И НЕ ПрименениеУСН);
	НеВедетсяНУ = ПрименениеУСН ИЛИ ОСН_ФизЛицо;
	
	мПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(Организация, Дата);
		
	ВыборкаПоОтражениюВУчете = СформироватьДляПроверкиОтраженияВУчете().Выбрать();
	Пока ВыборкаПоОтражениюВУчете.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиОтраженияВУчете(ВыборкаПоОтражениюВУчете, НеВедетсяНУ, Отказ);
	КонецЦикла;
	
	Если Не Отказ Тогда
		ПроцедурыУчетаЗарплаты.ПодготовитьТаблицуЗначений(ТаблицаОтражениеВУчете);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ОтражениеВУчете, ТаблицаОтражениеВУчете);
		
		РезультатЗапросаПоОтражениюВУчете = СформироватьЗапросПоОтражениюВУчете();
		ВыборкаПоОтражениюВУчете = РезультатЗапросаПоОтражениюВУчете.Выбрать();
		
		Пока ВыборкаПоОтражениюВУчете.Следующий() Цикл
			ПроцедурыУчетаЗарплаты.ДобавитьСтрокуВДвиженияПоОтражениюВУчете(Ссылка, Движения, ВыборкаПоОтражениюВУчете, ПрименениеУСН, ОСН_ФизЛицо, мПоддержкаПБУ18, Организация, ПериодРегистрации);
		КонецЦикла;
		
		Если ПрименениеУСН Тогда
			СтруктураДопПараметров = Новый Структура;		
			СтруктураДопПараметров.Вставить("ОтражениеВУчете", ТаблицаОтражениеВУчете);
			НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, Режим, СтруктураДопПараметров);	
		КонецЕсли;
		
		// {УчетДоходовИРасходовИП
		Если ОСН_ФизЛицо Тогда
			УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация);
			ДоходыИРасходыПредпринимателя.ОтражениеРасходовНаОплатуТруда(ЭтотОбъект, ВыборкаПоОтражениюВУчете, УчетнаяПолитика, Режим);
		КонецЕсли;
		// }УчетДоходовИРасходовИП
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения

