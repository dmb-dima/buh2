////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мСведенияОСчетах;  // для получения сведений о счетах на время работы формы
Перем мСведенияОСтатьяхЗатрат;  // для получения сведений о статьях затрат на время работы формы

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Порядок отражения проводок в БУ
Перем мСводныеПроводки;
Перем мСчетаУчетаРасчетовСРаботниками;

Перем ОткрыватьНастройкуДвижений;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УстановитьВидимостьКолонок()
	
	ЭтоУСН 		= НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	УСНДоходы   = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	ОСН_ФизЛицо = ОбщегоНазначения.Предприниматель(Организация, Дата);
	ОСН_ЮрЛицо  = (НЕ ОСН_ФизЛицо И НЕ ЭтоУСН);
	
	//ЭлементыФормы.ОтражениеВУчете.Колонки.ВидНачисленияПоСт255НК.Видимость = ОСН_ЮрЛицо;
	ЭлементыФормы.ОтражениеВУчете.Колонки.РасходыУСН.Видимость = ЭтоУСН и Не УСНДоходы;
	ЭлементыФормы.ОтражениеВУчете.Колонки.ВидНачисленияУдержания.Видимость = ОСН_ФизЛицо;
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОтражениеВУчете,ЭлементыФормы.ОтражениеВУчетеПанель);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры


Процедура ПоказатьДополнительнуюКолонку(ОформлениеСтроки, ИмяКолонки, Счет) Экспорт

	ОформлениеСтроки.Ячейки[ИмяКолонки].Видимость = мСчетаУчетаРасчетовСРаботниками[Счет] = Истина И мСводныеПроводки
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	    	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		ДокументОбъект.ПериодРегистрации = НачалоМесяца(Дата);

	КонецЕсли;
	
	ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ДокументОбъект.ПериодРегистрации);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СчетДт");
	СтруктураКолонок.Вставить("СчетКт");
 	СтруктураКолонок.Вставить("Сумма");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ОтражениеВУчете.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);	

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мСводныеПроводки = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.ВидыСубконто.Количество() = 0;
	
	СчетаУчета = Новый Массив;
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов);
	
	СчетаУчетаТекст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаУчета)";
	
	Запрос = Новый Запрос(СчетаУчетаТекст);
	Запрос.УстановитьПараметр("СчетаУчета",СчетаУчета);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		мСчетаУчетаРасчетовСРаботниками.Вставить(Выборка.Ссылка,Истина)
	КонецЦикла;
	
	// отразим видимость элементов формы в зависимости от учетной политики
	УстановитьВидимостьКолонок();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,,ЭлементыФормы.ОтражениеВУчете);
	
	ЭлементыФормы.ОтражениеВУчете.Колонки.РасходыУСН.ЭлементУправления.ДоступныеЗначения.Очистить();
	ЭлементыФормы.ОтражениеВУчете.Колонки.РасходыУСН.ЭлементУправления.ДоступныеЗначения.Добавить(Перечисления.ОтражениеВУСН.НеПринимаются);
	ЭлементыФормы.ОтражениеВУчете.Колонки.РасходыУСН.ЭлементУправления.ДоступныеЗначения.Добавить(Перечисления.ОтражениеВУСН.Принимаются);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыОчистить(Кнопка)
	
	ТекстВопроса = "Табличные части будут очищены. Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	ОтражениеВУчете.Очистить();
		
КонецПроцедуры


// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
Процедура ДатаПриИзменении(Элемент = Неопределено)

	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	УстановитьВидимостьКолонок();

КонецПроцедуры // ОрганизацияПриИзменении()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПРЕДСТАВЛЕНИЯ ПЕРИОДА
//

// Процедура - обработчик события "Регулирование" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РаботаСДиалогами.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации);
	ПредставлениеПериодаРегистрацииПриИзменении(Элемент);
		
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Проверка на последний рабочий день месяца.
	ПоследнийРабочийДеньМесяца = ПолучитьРабочийДеньМесяца(Дата);

	УстановитьВидимостьКолонок();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	ПредставлениеПериодаРегистрацииПриИзменении(Элемент);
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Проверка на последний рабочий день месяца.
	ПоследнийРабочийДеньМесяца = ПолучитьРабочийДеньМесяца(Дата);
	
КонецПроцедуры

Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ПериодРегистрации (Дата)
// Обновляется список операции, согласно учетной политике установленной на указанную дату
//
Процедура ПредставлениеПериодаРегистрацииПриИзменении(Элемент)
	
	УстановитьВидимостьКолонок();
	
КонецПроцедуры

Функция ПолучитьРабочийДеньМесяца(ДатаДокумента)

	ПоследнийДеньМесяца = КонецМесяца(ДатаДокумента);
	Если ДеньНедели(КонецМесяца(ДатаДокумента)) = 6 Тогда
		ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца - 86400
	ИначеЕсли ДеньНедели(КонецМесяца(ДатаДокумента)) = 7 Тогда	
		ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца - 2 * 86400
	Иначе	
	    ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца
	КонецЕсли;
	
	Возврат ПоследнийРабочийДеньМесяца
	
КонецФункции // ПолучитьРабочийДеньМесяца()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ОтражениеВУчете 

Процедура ОтражениеВУчетеПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетДт);
	//	ОформлениеСтроки.Ячейки["ПустаяКолонкаСубконтоДт"].Видимость = СведенияОСчете.КоличествоСубконто = 0;
		БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Дт", СведенияОСчете);
		ПоказатьДополнительнуюКолонку(ОформлениеСтроки, "ФизлицоДт", ДанныеСтроки.СчетДт);
		
		СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетКт);
	//	ОформлениеСтроки.Ячейки["ПустаяКолонкаСубконтоКт"].Видимость = СведенияОСчете.КоличествоСубконто = 0;
		БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Кт", СведенияОСчете);
		ОформлениеСтроки.Ячейки["ВидРасчета"].Видимость = (ДанныеСтроки.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
		ОформлениеСтроки.Ячейки["ФизлицоКт"].Видимость  = мСчетаУчетаРасчетовСРаботниками[ДанныеСтроки.СчетКт] = Истина И мСводныеПроводки;
	//	ОформлениеСтроки.Ячейки["ВидНачисленияПоСт255НК"].Видимость = мСчетаУчетаРасчетовСРаботниками[ДанныеСтроки.СчетКт] = Истина И мСводныеПроводки;
	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтражениеВУчетеСчетДтПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.ОтражениеВУчете, "Дт", СведенияОСчете);		

КонецПроцедуры

Процедура ОтражениеВУчетеСчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

Процедура ОтражениеВУчетеСубконтоДтПриИзменении(Элемент)
	
	Если Не мСводныеПроводки и мСчетаУчетаРасчетовСРаботниками[ЭлементыФормы.ОтражениеВУчете.ТекущиеДанные.СчетДт] = Истина Тогда
		Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ЭлементыФормы.ОтражениеВУчете.ТекущиеДанные.Физлицо = Элемент.Значение
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОтражениеВУчетеСубконтоДтНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекущаяСтрока = ЭлементыФормы.ОтражениеВУчете.ТекущиеДанные;

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         Дата);
	СписокПараметров.Вставить("СчетУчета",    ТекущаяСтрока.СчетДт);
	СписокПараметров.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	СписокПараметров.Вставить("Склад",        Справочники.Склады.ПустаяСсылка());
	СписокПараметров.Вставить("Контрагент",   ТекущаяСтрока.СубконтоДт1);
    СписокПараметров.Вставить("ЭтоНовыйДокумент",ЭтоНовый());

	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

Процедура ОтражениеВУчетеСчетКтПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчет.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.ОтражениеВУчете, "Кт", СведенияОСчете);
		
КонецПроцедуры

Процедура ОтражениеВУчетеСчетКтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

Процедура ОтражениеВУчетеСубконтоКтПриИзменении(Элемент)
	
	Если Не мСводныеПроводки и мСчетаУчетаРасчетовСРаботниками[ЭлементыФормы.ОтражениеВУчете.ТекущиеДанные.СчетКт] = Истина Тогда
		Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ЭлементыФормы.ОтражениеВУчете.ТекущиеДанные.Физлицо = Элемент.Значение
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОтражениеВУчетеСубконтоКтНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ОтражениеВУчете.ТекущиеДанные;

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         Дата);
	СписокПараметров.Вставить("СчетУчета",    ТекущаяСтрока.СчетКт);
	СписокПараметров.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	СписокПараметров.Вставить("Склад",        Справочники.Склады.ПустаяСсылка());
	СписокПараметров.Вставить("Контрагент",   ТекущаяСтрока.СубконтоКт1);
    СписокПараметров.Вставить("ЭтоНовыйДокумент",ЭтоНовый());
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);
	
КонецПроцедуры

Процедура ОтражениеВУчетеРасходыУСННачалоВыбора(Элемент, СтандартнаяОбработка)
	Если Элемент.ДоступныеЗначения.Количество() = 0 Тогда
		Элемент.ДоступныеЗначения.Добавить(Перечисления.ОтражениеВУСН.Принимаются);
		Элемент.ДоступныеЗначения.Добавить(Перечисления.ОтражениеВУСН.НеПринимаются);
	КонецЕсли;
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


мСведенияОСчетах = Новый Соответствие;
мСведенияОСтатьяхЗатрат = Новый Соответствие;
мСчетаУчетаРасчетовСРаботниками = Новый Соответствие;
