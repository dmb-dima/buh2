Перем мВалютаРегламентированногоУчета Экспорт;
Перем ПартионныйУчет;
Перем мУчетнаяПолитика Экспорт;
Перем мОтказ;
Перем мИспользоватьОборотнуюНоменклатуру Экспорт;
Перем мРазделятьПоСтавкамНДС Экспорт;
Перем мУчетВПродажныхЦенах Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОприходованияТоваров()
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	// {ОбособленныеПодразделения
	|	ПодразделениеОрганизации,
	// }ОбособленныеПодразделения
	|	СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное  КАК Товар,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмерения.Представление   КАК ЕдиницаИзмерения,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Представление  КАК ЕдиницаХранения,
	|		Цена,
	|		Сумма
	|	)
	|ИЗ
	|	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров,
	|	Константы
	|ГДЕ
	|	ОприходованиеТоваров.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();

	Шапка.Следующий();

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	Макет       = ПолучитьМакет("Накладная");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОприходованиеТоваров_Накладная";

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Оприходование товаров");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);

	Пока ВыборкаСтрокТовары.Следующий() Цикл

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	                                         + ", на сумму " + ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьОприходованияТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Ведомость" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОприходованияТоваров();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Ведомость","Накладная на оприходование товаров");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполнение табличной части по инвентаризации Товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация Товаров).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОснование) Экспорт

	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("НеавтоматизированнаяТорговаяТочка", (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка));
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);

	// Заполняем выявленными излишками по инвентаризации, с учетом уже выполненного оприходования 
	// по данной инвентаризации. Цены берем из документа инвентраизации. 
	// Если розница – заполняем розничную цену.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.СчетУчета,
	|	Док.Номенклатура.НомерГТД                     КАК НомерГТД,
	|	Док.Номенклатура.СтранаПроисхождения          КАК СтранаПроисхождения,
	|	МАКСИМУМ(Док.Количество - Док.КоличествоУчет) КАК КоличествоОтклонениеИнвентаризации, // в единицах инвентаризации
	|	СУММА(ВЫБОР
	|		КОГДА ДокОприходование.Количество ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			ДокОприходование.Количество
	|		КОНЕЦ)                                    КАК КоличествоОприходованное,
	|	Док.Цена
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ОприходованиеТоваров.Товары КАК ДокОприходование
	|ПО                                       
	|	  Док.Номенклатура                                      = ДокОприходование.Номенклатура
	|	И Док.СчетУчета                                       = ДокОприходование.СчетУчета
	|	И Док.Ссылка.Склад                                      = ДокОприходование.Ссылка.Склад
	|	И ДокОприходование.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|	И ДокОприходование.Ссылка.Проведен
	|	И ДокОприходование.Ссылка <> &ДокументСсылка
	|ГДЕ
	|	  Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.Количество - Док.КоличествоУчет > 0
	|
	|СГРУППИРОВАТЬ ПО 
	|	Док.Номенклатура,
	|	Док.СчетУчета,
	|	Док.Цена";
	Выборка = Запрос.Выполнить().Выбрать();

	Склад   = ДокументОснование.Склад;

	СтрокиДобавлены = Ложь;

	Пока Выборка.Следующий() Цикл

		КоличествоОприходовать = Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоОприходованное;

		Если КоличествоОприходовать <= 0 Тогда
			Продолжить;
		КонецЕсли; 

		СтрокиДобавлены = Истина;
		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура        = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.СчетУчета         	 = Выборка.СчетУчета;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения    = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент         = 1;
		СтрокаТабличнойЧасти.Количество          = КоличествоОприходовать;
		СтрокаТабличнойЧасти.Цена                = Выборка.Цена;
		СтрокаТабличнойЧасти.НомерГТД            = Выборка.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхождения = Выборка.СтранаПроисхождения;
		
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
        Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, Истина);
		КонецЕсли;

	КонецЦикла;

	#Если Клиент Тогда

	Если Товары.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары фактическое количество которых превышает учетное.");
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

// Заполняет счета в строке табличной части.
//
Процедура ЗаполнитьСчета(СтрокаТЧ, СчетаУчета, Заполнять)

	Если Заполнять = Истина Тогда

		СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;

	ИначеЕсли Заполнять = Ложь Тогда

		СтрокаТЧ.СчетУчета  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчета

// Заполняет счета в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, Заполнять) Экспорт

	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);

	ЗаполнитьСчета(СтрокаТЧ, СчетаУчета, Заполнять);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета в табличной части.
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, Заполнять) Экспорт

	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, Заполнять);
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Если мУчетВПродажныхЦенах И (СтруктураШапкиДокумента.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный) Тогда
		
		ТаблицаТоваров.Колонки.Добавить("РозничнаяЦена");
		ТаблицаТоваров.Колонки.Добавить("УчетнаяЦена");
		
		// Установим параметры запроса
		ПорядокСубконто = Новый Массив();
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		
		МассивНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Склад",           СтруктураШапкиДокумента.Склад);
		Запрос.УстановитьПараметр("КонецПериода",    СтруктураШапкиДокумента.Дата);
		Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Подразделение",   СтруктураШапкиДокумента.ПодразделениеОрганизации);
		Запрос.УстановитьПараметр("Счет",     		 ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
		Запрос.УстановитьПараметр("Номенклатура", 	 МассивНоменклатуры);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
		|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет, &ПорядокСубконто, Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL) И Субконто1 В (&Номенклатура) И Субконто2 = &Склад) КАК Остатки
		|ГДЕ
		|	Остатки.КоличествоОстаток > 0 
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Субконто1
		|";
		
		
		
		ТаблицаУчетныхЦен = Запрос.Выполнить().Выгрузить();
		ТаблицаУчетныхЦен.Индексы.Добавить("Номенклатура");

		Для Каждого Строка из ТаблицаТоваров Цикл
			СтрокаТаблицыЦен = ТаблицаУчетныхЦен.Найти(Строка.Номенклатура, "Номенклатура");
			Если НЕ СтрокаТаблицыЦен = Неопределено Тогда
				Строка.УчетнаяЦена = Окр(?(СтрокаТаблицыЦен.КоличествоОстаток = 0, 0, СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток),2,1);
			Иначе
				Строка.УчетнаяЦена = 0;
			КонецЕсли;
			Строка.РозничнаяЦена = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, СтруктураШапкиДокумента.Склад.ТипЦенРозничнойТорговли, 
															СтруктураШапкиДокумента.Дата, мВалютаРегламентированногоУчета, 1, 1);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад, СтатьяПрочихДоходовРасходов");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	НТТ = (мУчетВПродажныхЦенах И (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка));
	АТТ = (мУчетВПродажныхЦенах И (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный));
	
	// Укажем, что надо проверить:
	Если НТТ Тогда
		СтруктураОбязательныхПолей.Вставить("СуммаВРознице");
		Если мРазделятьПоСтавкамНДС Тогда
			СтруктураОбязательныхПолей.Вставить("СтавкаНДСВРознице");
		КонецЕсли;
	КонецЕсли;
	
	СтруктураОбязательныхПолей.Вставить("СчетУчета");
	
	// Проверка номера ГТД
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Товары"": ";

		Если УправлениеЗапасами.НеУказанНомерГТД(СтрокаТЧ.НомерГТД, СтрокаТЧ.СтранаПроисхождения) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Номер ГТД""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, Заголовок);
		КонецЕсли;
		
		Если СтрокаТЧ.СчетУчета.Забалансовый Тогда
            ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Указан забалансовый счет! Оприходование излишков на забалансовый счет не допускается.", Отказ, "");
		КонецЕсли;
		
		
	КонецЦикла;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	Если АТТ Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			
			//Допустимое отклонение цены составляет цену минимальной единицы количества (0.001)
			ДопустимоеОтклонение = СтрокаТаблицы.УчетнаяЦена * 0.001;
			
			Если СтрокаТаблицы.РозничнаяЦена = 0 Тогда
				СтрокаСообщения = "Для товара """ + СтрокаТаблицы.Номенклатура + """ не установлена розничная цена.";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			ИначеЕсли СтрокаТаблицы.УчетнаяЦена = 0 Тогда
				// Учетная цена неизвестна.
			ИначеЕсли СтрокаТаблицы.РозничнаяЦена - СтрокаТаблицы.УчетнаяЦена > ДопустимоеОтклонение
				ИЛИ СтрокаТаблицы.РозничнаяЦена - СтрокаТаблицы.УчетнаяЦена < - ДопустимоеОтклонение Тогда
				СтрокаСообщения = "Для товара """ + СтрокаТаблицы.Номенклатура + """ розничная цена (" + 
									СтрокаТаблицы.РозничнаяЦена + ") не равна учетной цене(" + СтрокаТаблицы.УчетнаяЦена + ").
									|измените розничную цену или проведите переоценку.";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проводит табличные части "Товары" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	// Бухгалтерские проводки
	ДатаДока   = Дата;
	Проводки = Движения.Хозрасчетный;

	НТТ = (мУчетВПродажныхЦенах И (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка));
	АТТ = (мУчетВПродажныхЦенах И (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный));  
	мПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата);	
	мСтавкаНалогаНаПрибыль = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента);
	
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

		Проводка = Проводки.Добавить();

		Проводка.Период       = ДатаДока;
		Проводка.Организация  = Организация;
    	Проводка.Содержание   = "Оприходование излишков " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(СтрокаТаблицы.СчетУчета);
		Проводка.Сумма        = СтрокаТаблицы.Сумма;

		Проводка.СчетДт       = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтруктураШапкиДокумента.Склад);
		
		Если НТТ И мРазделятьПоСтавкамНДС Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  СтрокаТаблицы.СтавкаНДСВРознице);
		КонецЕсли;
		
		// Для товаров, принятых на комиссию партия прописывается всегда 
		Если ПартионныйУчет Тогда 
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",       Ссылка);
		КонецЕсли;

		Если (НЕ НТТ) Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СтатьяПрочихДоходовРасходов);
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
		Если ЗначениеЗаполнено(ИнвентаризацияТоваровНаСкладе) Тогда
			
			Сумма        = СтрокаТаблицы.Сумма;
			СуммаНУ = Сумма * ?(ДатаДока < '20100101', мСтавкаНалогаНаПрибыль, 1);
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,Сумма,Сумма - СуммаНУ, 0,0,0,Проводка, мПоддержкаПБУ18); 
		КонецЕсли;
		
		ТорговаяНаценка = 0;
		
		Если АТТ ИЛИ НТТ Тогда
			Если АТТ Тогда
				ТорговаяНаценка = (СтрокаТаблицы.РозничнаяЦена * СтрокаТаблицы.Количество) - СтрокаТаблицы.Сумма;
				СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
			Иначе
				ТорговаяНаценка = СтрокаТаблицы.СуммаВРознице - СтрокаТаблицы.Сумма;
				СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
			КонецЕсли;
			
			Если ТорговаяНаценка <> 0 Тогда
				Проводка = Проводки.Добавить();
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
            	Проводка.Содержание   = "Оприходование излишков " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(СтрокаТаблицы.СчетУчета);
				
				Проводка.СчетДт      = СтрокаТаблицы.СчетУчета;
				Проводка.СчетКт      = СчетНаценки;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.Склад);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
				
				Если ПартионныйУчет Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Ссылка);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", Ссылка);
				КонецЕсли;
				
				Если (НЕ НТТ) ИЛИ (мИспользоватьОборотнуюНоменклатуру) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  СтрокаТаблицы.Номенклатура);
				КонецЕсли;
				Если НЕ НТТ Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  СтрокаТаблицы.Номенклатура);
				КонецЕсли;
				Если НТТ И мРазделятьПоСтавкамНДС Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  СтрокаТаблицы.СтавкаНДСВРознице);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  СтрокаТаблицы.СтавкаНДСВРознице);
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
				Проводка.Сумма       = ТорговаяНаценка;

			КонецЕсли;
		КонецЕсли;
			
		// Учет товаров по номерам ГТД
		Если УправлениеЗапасами.ЭтоИмпортныйТовар(СтрокаТаблицы.СчетУчета, СтрокаТаблицы.НомерГТД, СтрокаТаблицы.СтранаПроисхождения) Тогда
			
			Проводка = Проводки.Добавить();

			Проводка.Период = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
    		Проводка.Содержание   = "Оприходование излишков " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(СтрокаТаблицы.СчетУчета);

			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ГТД;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура, Истина, Заголовок);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НомераГТД", СтрокаТаблицы.НомерГТД, Истина, Заголовок);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтраныПроисхождения", СтрокаТаблицы.СтранаПроисхождения, Истина, Заголовок);
		
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;

		КонецЕсли;
		
	КонецЦикла; // Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя И НЕ НТТ Тогда
		Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			Сумма = СтрокаТаблицы.Сумма;
			
			Если Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СчетУчета = СтрокаТаблицы.СчетУчета;
			ВидМПЗ = ДоходыИРасходыПредпринимателя.ВидМПЗПоСчетуУчета(СчетУчета);
			НоменклатурнаяГруппа = ДоходыИРасходыПредпринимателя.НоменклатурнаяГруппаПоОперации(Истина, СтрокаТаблицы.Номенклатура,СтрокаТаблицы.НоменклатурнаяГруппа, ВидМПЗ, мУчетнаяПолитика); 
			ХарактерДеятельности = ДоходыИРасходыПредпринимателя.ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, СчетУчета,,, мУчетнаяПолитика);
			
			Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ИнвентаризацияТоваровНаСкладе) Тогда
				РеквизитыДокументаОплаты = ДоходыИРасходыПредпринимателя.РеквизитыДокументаОплаты(СтруктураШапкиДокумента.ИнвентаризацияТоваровНаСкладе);
				
			Иначе
				РеквизитыДокументаОплаты = ДоходыИРасходыПредпринимателя.РеквизитыДокументаОплаты(СтруктураШапкиДокумента);
			КонецЕсли;
			
			Движение = Движения.ИППрочиеДоходы.Добавить();
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.Организация = СтруктураШапкиДокумента.Организация;
			Движение.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
			Движение.ХарактерДеятельности = ХарактерДеятельности;
			Движение.СтатьяДоходов = СтруктураШапкиДокумента.СтатьяПрочихДоходовРасходов;
			Движение.РеквизитыДокументаОплаты = РеквизитыДокументаОплаты;
			Движение.Сумма = Сумма;
			
			Движение = Движения.ИПМПЗ.Добавить();
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.Организация = СтруктураШапкиДокумента.Организация;
			Движение.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
			Движение.ХарактерДеятельности = ХарактерДеятельности;
			Движение.ВидМПЗ = ВидМПЗ;
			Движение.ДокументОплаты = СтруктураШапкиДокумента.Ссылка;
			Движение.Номенклатура = СтрокаТаблицы.Номенклатура;
			Движение.Партия = СтруктураШапкиДокумента.Ссылка;
			Движение.РеквизитыДокументаОплаты = РеквизитыДокументаОплаты;
			Движение.Сумма = Сумма;
			Движение.Количество = СтрокаТаблицы.Количество;
		КонецЦикла;
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКниги  = Движения.КнигаУчетаДоходовИРасходов.Добавить();
    СтрокаКниги.Организация		= СтруктураШапкиДокумента.Организация;
	СтрокаКниги.СтрокаДокумента = 0;
	СтрокаКниги.Период			= СтруктураШапкиДокумента.Дата;
	СтрокаКниги.Графа4			= ТаблицаПоТоварам.Итог("Сумма");

	Если СтруктураШапкиДокумента.СтатьяПрочихДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД Тогда

	Иначе

		СтрокаКниги.Графа5 = ТаблицаПоТоварам.Итог("Сумма");

	КонецЕсли;

	СтрокаКниги.Графа6 = 0;
	СтрокаКниги.Графа7 = 0;
	СтрокаКниги.НДС    = 0;

	Если НЕ ЗначениеЗаполнено(ИнвентаризацияТоваровНаСкладе) Тогда
		СтрокаКниги.Содержание = "Оприходованы излишки ТМЦ.";
	Иначе
		СтрокаКниги.Содержание = "Оприходованы излишки, выявленные при проведении инвентаризации "+НалоговыйУчетУСН.РеквизитыПервичногоДокумента(ИнвентаризацияТоваровНаСкладе)+".";
	КонецЕсли;
	
	СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	ТаблицаДвиженийНДСПартии = Движения.НДСПоПриобретеннымЦенностям;
	ТаблицаДляНДСПартии = ТаблицаПоТоварам.Скопировать();
	УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураШапкиДокумента, ТаблицаДляНДСПартии, ТаблицаДвиженийНДСПартии, Отказ);
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если НЕ (ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе")) Тогда
		Возврат;
	КонецЕсли;

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	Если Основание.Склад.ВидСклада <> Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда

		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;

	Иначе

		КурсДокумента      = 1;
		КратностьДокумента = 1;

	КонецЕсли;

	ИнвентаризацияТоваровНаСкладе = Основание;

	ЗаполнитьТоварыПоИнвентаризацииТоваров(Основание);

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мОтказ = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, мОтказ, Организация);
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
	мРазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитика.Количество() > 0 Тогда	
		Если (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Товары.Итог("Сумма");

	РозницаВПродажныхЦенах = ((НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый) И мУчетВПродажныхЦенах);
								
	Если РозницаВПродажныхЦенах Тогда
		Для Каждого Строка Из Товары Цикл
			Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
				Строка.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
			Иначе
				Строка.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	Отказ = мОтказ;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки"        , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"       , "Номенклатура");
	СтруктураПолей.Вставить("Количество"         , "Количество");
	СтруктураПолей.Вставить("Сумма"              , "Сумма");
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("НомерГТД"           , "НомерГТД");
	СтруктураПолей.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	СтруктураПолей.Вставить("СчетУчета"        , "СчетУчета");
	СтруктураПолей.Вставить("СуммаВРознице"		 , "СуммаВРознице");
	СтруктураПолей.Вставить("СтавкаНДСВРознице"  , "СтавкаНДСВРознице");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина, мВалютаРегламентированногоУчета);
	
	// Движения по документу
	Если Не Отказ Тогда
		
		ПартионныйУчет = УправлениеЗапасами.ВедетсяПартионныйУчет(ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация), "БУ");
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	

