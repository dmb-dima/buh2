Перем мВалютаРегламентированногоУчета Экспорт;

Перем НомераСубконтоРДпоСчету;

Перем РасчетыВВалюте2008;
Перем СчетаРасчетовСПоставщиками;
Перем СчетаРасчетовСПокупателями;				

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАвизо()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Авизо.Номер,
	|	Авизо.Дата,
	|	Авизо.СчетРасчетов,
	|	Авизо.ВалютаДокумента,
	|	Авизо.Организация  КАК ОрганизацияОтправитель,
	|	ВЫБОР
	|		КОГДА Авизо.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Авизо.Организация
	|		ИНАЧЕ Авизо.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	Авизо.ОрганизацияПолучатель КАК ОрганизацияПолучатель
	|ИЗ
	|	Документ.АвизоРасчетыИсходящее КАК Авизо
	|ГДЕ
	|	Авизо.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	// Запрос по табличной части
	ЗапросПоТЧ = Новый Запрос;
	ЗапросПоТЧ.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТЧ.Текст =
	"ВЫБРАТЬ
	|	ВидЗадолженности     КАК ВидЗадолженности,
	|	Контрагент			 КАК КонтрагентСсылка,
	|	ДоговорКонтрагента   КАК ДоговорКонтрагента,
	|	СУММА(Сумма)	 	 КАК Сумма,
	|	СУММА(СуммаВзаиморасчетов)	КАК ВалСумма
	|ИЗ
	|	Документ.АвизоРасчетыИсходящее.СуммыДолга КАК АвизоРасчетыИсходящее
	|ГДЕ
	|	АвизоРасчетыИсходящее.Ссылка = &ТекущийДокумент
	|СГРУППИРОВАТЬ ПО
	|	ВидЗадолженности,
	|	Контрагент,
	|	ДоговорКонтрагента";
	
	РезультатЗапроса = ЗапросПоТЧ.Выполнить();
	ВыборкаСтрок = РезультатЗапроса.Выбрать();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвизоРасчетыИсходящее_Авизо";
	Макет       = ПолучитьМакет("Авизо");

	// Выводим основную шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Извещение (авизо) на передачу расчетов");
	
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.Организация = ПредставлениеОрганизации;
	
	СведенияОбОтправителе    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ОрганизацияОтправитель, Шапка.Дата);
	ПредставлениеОтправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОтправителе, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.Отправитель = ПредставлениеОтправителя;
	
	СведенияОПолучателе     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ОрганизацияПолучатель, Шапка.Дата);
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПолучателе, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.Получатель = ПредставлениеПолучателя;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим шапку таблицы дебиторской задолженности
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицыРасчетов");
	ОбластьМакета.Параметры.ВидЗадолженности = "1. " + Перечисления.ВидыЗадолженности.Дебиторская + " задолженность";
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим строки таблицы задолженности
	ИтогоСумма = 0;
	ИтогоВалСумма = 0;
	НС = 1;
	СтруктураПоиска = Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская);
	Пока ВыборкаСтрок.НайтиСледующий(СтруктураПоиска) Цикл

		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыРасчетов");
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.Валюта = Шапка.ВалютаДокумента;
		ОбластьМакета.Параметры.НомерСтроки = НС;
		
		ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаСтрок.КонтрагентСсылка, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,");
		
		ОбластьМакета.Параметры.КонтрагентДоговор = СокрЛП(ПредставлениеКонтрагента) + Символы.ПС
		            					+ Строка(ВыборкаСтрок.ДоговорКонтрагента);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ИтогоСумма = ИтогоСумма + ВыборкаСтрок.Сумма;
		ИтогоВалСумма = ИтогоВалСумма + ВыборкаСтрок.ВалСумма;
		
		НС = НС + 1;		
	КонецЦикла;

	// Выводим подвал таблицы задолженности
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыРасчетов");
	ОбластьМакета.Параметры.ИтогоСумма = ИтогоСумма;
	ОбластьМакета.Параметры.ИтогоВалСумма = ИтогоВалСумма;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим шапку таблицы кредиторской задолженности
	ВыборкаСтрок.Сбросить();
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицыРасчетов");
	ОбластьМакета.Параметры.ВидЗадолженности = "2. " + Перечисления.ВидыЗадолженности.Кредиторская + " задолженность";
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим строки таблицы задолженности
	ИтогоСумма = 0;
	ИтогоВалСумма = 0;
	НС = 1;
	СтруктураПоиска = Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская);
	Пока ВыборкаСтрок.НайтиСледующий(СтруктураПоиска) Цикл

		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыРасчетов");
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.Валюта = Шапка.ВалютаДокумента;
		ОбластьМакета.Параметры.НомерСтроки = НС;
		
		ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаСтрок.КонтрагентСсылка, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,");
		
		ОбластьМакета.Параметры.КонтрагентДоговор = СокрЛП(ПредставлениеКонтрагента) + Символы.ПС
		            					+ Строка(ВыборкаСтрок.ДоговорКонтрагента);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ИтогоСумма = ИтогоСумма + ВыборкаСтрок.Сумма;
		ИтогоВалСумма = ИтогоВалСумма + ВыборкаСтрок.ВалСумма;
		
		НС = НС + 1;		
	КонецЦикла;

	// Выводим подвал таблицы задолженности
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыРасчетов");
	ОбластьМакета.Параметры.ИтогоСумма = ИтогоСумма;
	ОбластьМакета.Параметры.ИтогоВалСумма = ИтогоВалСумма;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим шапку таблицы БУ
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицыБУ");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Счет", Шапка.СчетРасчетов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ВЫБОР КОГДА ХозрасчетныйДвиженияССубконто.ВалютаДт ЕСТЬ NULL ТОГДА ХозрасчетныйДвиженияССубконто.ВалютаКт ИНАЧЕ ХозрасчетныйДвиженияССубконто.ВалютаДт КОНЕЦ КАК Валюта,
	|	ХозрасчетныйДвиженияССубконто.Сумма,
	|	ВЫБОР КОГДА ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт ЕСТЬ NULL ТОГДА ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт ИНАЧЕ ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт КОНЕЦ КАК ВалСумма,
	|	ХозрасчетныйДвиженияССубконто.КоличествоДт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт,
	|	ХозрасчетныйДвиженияССубконто.Содержание,
	|	ВЫБОР КОГДА ХозрасчетныйДвиженияССубконто.СуммаНУДт ЕСТЬ NULL ТОГДА ХозрасчетныйДвиженияССубконто.СуммаНУКт ИНАЧЕ ХозрасчетныйДвиженияССубконто.СуммаНУДт КОНЕЦ КАК СуммаНУ,
	|	ВЫБОР КОГДА ХозрасчетныйДвиженияССубконто.СуммаПРДт ЕСТЬ NULL ТОГДА ХозрасчетныйДвиженияССубконто.СуммаПРКт ИНАЧЕ ХозрасчетныйДвиженияССубконто.СуммаПРДт КОНЕЦ КАК СуммаПР,
	|	ВЫБОР КОГДА ХозрасчетныйДвиженияССубконто.СуммаВРДт ЕСТЬ NULL ТОГДА ХозрасчетныйДвиженияССубконто.СуммаВРКт ИНАЧЕ ХозрасчетныйДвиженияССубконто.СуммаВРДт КОНЕЦ КАК СуммаВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор = &Регистратор
	|				И (СчетДт = &Счет
	|					ИЛИ СчетКт = &Счет)) КАК ХозрасчетныйДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаДвижений = Запрос.Выполнить().Выбрать();

	НС = 1;
	// Выводим строки таблицы БУ
	Пока ВыборкаДвижений.Следующий() Цикл
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыБУ");
		ОбластьМакета.Параметры.Заполнить(ВыборкаДвижений);
		ОбластьМакета.Параметры.НомерСтроки = НС;
		
		АналитикаДт = Строка(ВыборкаДвижений.СубконтоДт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоДт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоДт3);
					
		АналитикаКт = Строка(ВыборкаДвижений.СубконтоКт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоКт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоКт3);
					
		ОбластьМакета.Параметры.АналитикаДт = АналитикаДт;
		ОбластьМакета.Параметры.АналитикаКт = АналитикаКт;
		
		ТабДокумент.Вывести(ОбластьМакета);
        НС = НС +1;		
	КонецЦикла;

	// Выводим подвал таблицы БУ
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыБУ");
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим общий подвал
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.РасшифровкаПодписиИсполнителя = ?(НЕ ЗначениеЗаполнено(Ответственный), "", ОбщегоНазначения.ФамилияИнициалыФизЛица(Ответственный.ФизЛицо));
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Авизо" Тогда
		
		ТабДокумент = ПечатьАвизо();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Авизо","Авизо");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента)

	ТаблицаРасчетов = РезультатЗапросаПоСуммамДолга.Выгрузить();
	
	Возврат ТаблицаРасчетов;

КонецФункции // ПодготовитьТаблицуСуммДолга()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)

	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, ОрганизацияПолучатель, СчетРасчетов");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "СуммыДолга".
//
// Параметры:
// Параметры: 
//  ТаблицаПоСуммамДолга    - таблица значений, содержащая данные для проведения и проверки ТЧ СуммыДолга
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "СуммыДолга";

	СтруктураОбязательныхПолей = Новый Структура("Контрагент, ДоговорКонтрагента, ДокументРасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетУчетаРасчетовСКонтрагентом, СуммаВзаиморасчетов");

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Организация в документе должна соответствовать организации, указанной в договорах взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
	// Договор должен соответствовать контрагенту
	Для каждого СтрокаДолга Из СуммыДолга Цикл
	
		Если ЗначениеЗаполнено(СтрокаДолга.ДоговорКонтрагента) 
			И СтрокаДолга.ДоговорКонтрагента.Владелец  <> СтрокаДолга.Контрагент Тогда
			
			СтрокаНачалаСообщенияОбОшибке = "Строка номер " + СокрЛП(СтрокаДолга.НомерСтроки) + " табличной части ""Суммы долга"": ";
			СтрокаСообщения = "выбран договор другого контрагента.";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСуммыДолга()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоСуммамДолга          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)

	Если ТаблицаПоСуммамДолга.Количество() = 0 Тогда
		 Возврат;
	КонецЕсли;  
	
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)
	
	СодержаниеПроводки = "Передача задолженности по авизо";
	
	Для каждого СтрокаДолга Из ТаблицаПоСуммамДолга Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Организация = Организация;
		Проводка.Период = Дата;
		Проводка.Содержание = СодержаниеПроводки;
		
		Проводка.Сумма = СтрокаДолга.Сумма;
		
		Если СтрокаДолга.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
		
			Проводка.СчетДт = СчетРасчетов;
			Проводка.СубконтоДт.ОбособленныеПодразделения = ОрганизацияПолучатель;
			
			Проводка.СчетКт = СтрокаДолга.СчетУчетаРасчетовСКонтрагентом;
			Проводка.СубконтоКт.Контрагенты = СтрокаДолга.Контрагент;
			Проводка.СубконтоКт.Договоры    = СтрокаДолга.ДоговорКонтрагента;
			Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаДолга.ДокументРасчетов;
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, ПодразделениеОрганизации, "Кт");
			
			Если СтрокаДолга.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаКт        = ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаДолга.СуммаВзаиморасчетов;
			КонецЕсли;
		
		Иначе
		
			Проводка.СчетДт = СтрокаДолга.СчетУчетаРасчетовСКонтрагентом;
			Проводка.СубконтоДт.Контрагенты = СтрокаДолга.Контрагент;
			Проводка.СубконтоДт.Договоры    = СтрокаДолга.ДоговорКонтрагента;
			Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = СтрокаДолга.ДокументРасчетов;
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, ПодразделениеОрганизации, "Дт");
			
			Если СтрокаДолга.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаДт        = ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтрокаДолга.СуммаВзаиморасчетов;
			КонецЕсли;
		
			Проводка.СчетКт = СчетРасчетов;
			Проводка.СубконтоКт.ОбособленныеПодразделения = ОрганизацияПолучатель;
			
		КонецЕсли;
		
		Если СтрокаДолга.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда 
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаДолга.СуммаНУ,СтрокаДолга.СуммаНУ,СтрокаДолга.СуммаПР,СтрокаДолга.СуммаПР,,,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
		Иначе
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаДолга.Сумма,СтрокаДолга.Сумма,,,,,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
		КонецЕсли;
	
	КонецЦикла;
		
	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)   
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СуммыДолга.ВидЗадолженности,
	|	СуммыДолга.СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&СуммыДолга КАК СуммыДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаДокумента.СуммаВзаиморасчетов) КАК СуммаДокументаДт,
	|	СУММА(0) КАК СуммаДокументаКт
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Дебиторская)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(0),
	|	СУММА(ТаблицаДокумента.СуммаВзаиморасчетов)
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Кредиторская)");
	
	Запрос.УстановитьПараметр("СуммыДолга", СуммыДолга);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	СуммаДокументаДт = ТаблицаРезультата.Итог("СуммаДокументаДт");
	СуммаДокументаКт = ТаблицаРезультата.Итог("СуммаДокументаКт");

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	//Занесем в структуру шапки дополнительный параметр для проведения 
	СтруктураШапкиДокумента.Вставить("ЭтоВозврат",Ложь);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(Ложь, Отказ, Заголовок, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ВидЗадолженности"                        , "ВидЗадолженности");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                      , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("Контрагент"                              , "Контрагент");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"                    , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("РасчетыВУсловныхЕдиницах"                , "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах");
	СтруктураПолей.Вставить("ДоговорОрганизация"                      , "ДоговорКонтрагента.Организация");
	
	СтруктураПолей.Вставить("ДокументРасчетов"                		  , "ДокументРасчетов");
	СтруктураПолей.Вставить("ВидДоговора"                             , "ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("Сумма"              					  , "Сумма");
	СтруктураПолей.Вставить("СуммаНУ"              					  , "СуммаНУ");
	СтруктураПолей.Вставить("СуммаПР"              					  , "СуммаПР");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"              		  , "СуммаВзаиморасчетов");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"                      , "КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов"                 , "КратностьВзаиморасчетов");
 	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом"          , "СчетУчетаРасчетовСКонтрагентом");
	
	РезультатЗапросаПоСуммамДолга = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СуммыДолга", СтруктураПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоСуммамДолга = ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);

	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, ложь, ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

