////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ОткрыватьНастройкуДвижений;

Перем ТипыДокументаРасчетов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.СуммыДолга, ЭлементыФормы.КоманднаяПанельВзаиморасчеты);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает подменю "Перейти" 
//
Процедура УстановитьПодменюПерейти()
	
	// Устанавливаем подменю перейти
	//мСоответствиеДействийПодменюПерейти = Новый Соответствие;
	//УниверсальныеМеханизмы.СформироватьПодменю(УниверсальныеМеханизмы.ПолучитьДеревоПодменюПерейти("Документы", Метаданные().Имя, Новый Действие("ПриНажатииНаКнопкуВПодменюПерейти"), мСоответствиеДействийПодменюПерейти), ЭлементыФормы.ДействияФормы.Кнопки.ПодменюПерейти);
	
КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ) Экспорт

	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, СтрокаТЧ.Контрагент, СтрокаТЧ.ДоговорКонтрагента);

	Если (СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком)
		ИЛИ (СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
		ИЛИ (СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее)
		Тогда
		
		Если СтрокаТЧ.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетАвансов;
		Иначе
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		КонецЕсли;
		
	ИначеЕсли (СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
		ИЛИ (СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
		Тогда
		
		Если СтрокаТЧ.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		Иначе
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетАвансовПокупателя;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

//Очищает табличную часть документа при смене организации
Процедура ОчиститьСтрокиТабЧасти(ТекстВопроса, СтандартнаяОбработка,
			ПровестиСравнение = Ложь, ВыбранноеЗначение = Неопределено, ОбъектСравнения = Неопределено)
	
	Если СуммыДолга.Количество() > 0
	   И ?(ПровестиСравнение, СуммыДолга[0].ДоговорКонтрагента[ОбъектСравнения] <> ВыбранноеЗначение,Истина) Тогда

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СуммыДолга.Очистить();
		Иначе  
			СтандартнаяОбработка = Ложь;
		КонецЕсли; 		
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает видимость реквизитов субконто и подписей к ним.
//
Процедура УстановитьВидимость()
	
	ЭлементыФормы.НадписьВалютаДокумента.Видимость = АвизоПоРасчетамВВалюте;
	ЭлементыФормы.ВалютаДокумента.Видимость        = АвизоПоРасчетамВВалюте;
	ЭлементыФормы.НадписьКурсДокумента.Видимость   = АвизоПоРасчетамВВалюте;
	ЭлементыФормы.КурсДокумента.Видимость          = АвизоПоРасчетамВВалюте;
	
	Колонки = ЭлементыФормы.СуммыДолга.Колонки;
	
	Колонки.КурсВзаиморасчетов.Видимость      = АвизоПоРасчетамВВалюте;
	Если Колонки.КратностьВзаиморасчетов.Видимость Тогда
		Колонки.КратностьВзаиморасчетов.Видимость = АвизоПоРасчетамВВалюте;
	КонецЕсли;
	Колонки.Сумма.Видимость                   = АвизоПоРасчетамВВалюте;
	Колонки.СуммаНУ.Видимость                 = АвизоПоРасчетамВВалюте;
	Колонки.СуммаПР.Видимость                 = АвизоПоРасчетамВВалюте;
	
	Если АвизоПоРасчетамВВалюте Тогда
		Колонки.СуммаВзаиморасчетов.ТекстШапки = "Валютная сумма";
	Иначе
		Колонки.СуммаВзаиморасчетов.ТекстШапки = "Сумма";
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	// Установка кнопок подменю перейти
	УстановитьПодменюПерейти();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(
			ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, , ПараметрОбъектКопирования);
		
		Если НЕ ЗначениеЗаполнено(СчетРасчетов) Тогда
			СчетРасчетов = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям; // 79.02
		КонецЕсли;

	КонецЕсли;
	
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ДоговорКонтрагента");
	СтруктураКолонок.Вставить("ДокументРасчетов");
	СтруктураКолонок.Вставить("КурсВзаиморасчетов");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.СуммыДолга.Колонки, СтруктураКолонок);

	// Установить видимость элементов
	УстановитьВидимость();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	ЭлементыФормы.ОрганизацияПолучатель.СписокВыбора = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделений(Организация);
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,ПодразделениеОрганизации,ВалютаДокумента,ОрганизацияПолучатель,СчетРасчетов");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма, СтруктураРеквизитов, ЭлементыФормы.СуммыДолга);
	
	ВывестиНадписи();
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Проверка необходимости пересчета
	ФлагПересчета = Ложь;

	Для каждого СтрокаТаблицы Из СуммыДолга Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			ВалютаДоговора  = СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДоговора, мТекущаяДатаДокумента);
			СтарыйКурс      = СтруктураВалюты.Курс;
			СтараяКратность = СтруктураВалюты.Кратность;
			СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДоговора, Дата);
			НовыйКурс       = СтруктураВалюты.Курс;
			НоваяКратность  = СтруктураВалюты.Кратность;

			Если НЕ (НовыйКурс = СтарыйКурс И НоваяКратность = СтараяКратность) Тогда
				ФлагПересчета = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Если изменился курс пересчитаем взаиморасчеты
	Если ФлагПересчета Тогда
		ТекстВопроса = "На дату документа у валюты взаиморасчетов был задан другой курс.
		               |Установить курс взаиморасчетов в соответствии с курсом валюты?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого СтрокаТаблицы Из СуммыДолга Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
					ВалютаДоговора                        = СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов;
					СтруктураВалюты                       = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДоговора, Дата);
					СтрокаТаблицы.КурсВзаиморасчетов      = СтруктураВалюты.Курс;
					СтрокаТаблицы.КратностьВзаиморасчетов = СтруктураВалюты.Кратность;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении реквизита Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	ЭлементыФормы.ОрганизацияПолучатель.СписокВыбора = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделений(Организация);
	
	Если ЭлементыФормы.ОрганизацияПолучатель.СписокВыбора.НайтиПоЗначению(ОрганизацияПолучатель) = Неопределено Тогда
		ОрганизацияПолучатель = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Организация <> ВыбранноеЗначение Тогда
		ОчиститьСтрокиТабЧасти("При смене организации табличная часть будет очищена. Продолжить?",СтандартнаяОбработка, Ложь); 
	КонецЕсли; 
				
КонецПроцедуры // ОрганизацияОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ СУММЫДОЛГА

Процедура ПриИзмененииДоговораКонтрагента(ТекДанные)

	ТекДанные.ДокументРасчетов = Неопределено;

	Если ЗначениеЗаполнено(ТекДанные.ДоговорКонтрагента) Тогда
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекДанные.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		ТекДанные.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		ТекДанные.КратностьВзаиморасчетов = СтруктураКурса.Кратность;

		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ТекДанные);

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода договора.
//
Процедура СуммыДолгаДоговорКонтрагентаПриИзменении(Элемент)

	ТекДанные = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	
	ПриИзмененииДоговораКонтрагента(ТекДанные);
	
	Если НЕ ЗначениеЗаполнено(ТекДанные.Контрагент) Тогда
		ТекДанные.Контрагент = Элемент.Значение.Владелец;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = Элемент.Значение.Организация;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода сделки.
//
Процедура СуммыДолгаДокументРасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТекДанные = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода",
		Организация, ТекДанные.Контрагент, ТекДанные.ДоговорКонтрагента, Дата);

	СторонаСчета = ?(ТекДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 1, 0);
	СтруктураПараметров.Вставить("СторонаСчета", СторонаСчета);
	
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", ТекДанные.СчетУчетаРасчетовСКонтрагентом);
	СтруктураПараметров.Вставить("ЭтоНовыйДокумент", ЭтоНовый());

	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, ТипыДокументаРасчетов);
	
Конецпроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаРасчетов.
//
Процедура СуммыДолгаСчетУчетаРасчетовСконтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода договора.
Процедура СуммыДолгаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетов", Новый Структура("ЗначениеОтбора", ВалютаДокумента));
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента,
		Неопределено, СтандартнаяОбработка, СтруктураПараметров);
		
КонецПроцедуры

Процедура ВывестиНадписи() 
	
	ТабСумм = СуммыДолга.Выгрузить();
	
	Если ВалютаДокумента = мВалютаРегламентированногоУчета или ВалютаДокумента = Справочники.Валюты.ПустаяСсылка() Тогда
		ТабСумм.Свернуть("ВидЗадолженности","Сумма");
	Иначе
		ТабСумм.Свернуть("ВидЗадолженности","СуммаВзаиморасчетов");
		ТабСумм.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
	КонецЕсли; 
	
	СуммаДтЗадолж  = 0;
	СуммаКтЗадолж = 0;
	
	Для каждого СтрокаТаблицы Из ТабСумм Цикл
		Если  СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			СуммаДтЗадолж  = СтрокаТаблицы.Сумма;
		ИначеЕсли  СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
			СуммаКтЗадолж = СтрокаТаблицы.Сумма;
		КонецЕсли; 
	КонецЦикла; 

	Разница = СуммаДтЗадолж - СуммаКтЗадолж;
	
	ЭлементыФормы.НадписьДебиторскаяЗадолженность.Заголовок
							= "Дебиторская задолженность: " + Формат(СуммаДтЗадолж, "ЧЦ=15; ЧДЦ=2; ЧН=-")+" " +Строка(ВалютаДокумента);
	ЭлементыФормы.НадписьКредиторскаяЗадолженность.Заголовок
							= "Кредиторская задолженность: " + Формат(СуммаКтЗадолж, "ЧЦ=15; ЧДЦ=2; ЧН=-")+" "+Строка(ВалютаДокумента);
							
КонецПроцедуры

Процедура СуммыДолгаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	Если НоваяСтрока Тогда
	     ТекДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская;
		 УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ТекДанные.ДоговорКонтрагента, ТекДанные.Контрагент, Организация);
	 КонецЕсли; 
	 
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ВывестиНадписи();
	
КонецПроцедуры

Процедура ВалютаДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если не ВалютаДокумента = ВыбранноеЗначение Тогда
		ОчиститьСтрокиТабЧасти("При смене валюты табличная часть будет очищена. Продолжить?",СтандартнаяОбработка, Ложь); 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВалютаДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ОчиститьСтрокиТабЧасти("При смене валюты табличная часть будет очищена. Продолжить?",СтандартнаяОбработка, Ложь); 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВалютаДокументаПриИзменении(Элемент)
	
	КурсИКратность     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата); 
	КурсДокумента      = КурсИКратность.Курс;
	КратностьДокумента = КурсИКратность.Кратность;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РассчитатьРублевыеСуммыПоСтроке(СтрокаДанных)

	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли; 
	
	ВалютаДоговора = СтрокаДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	РасчетыВВалюте = (ВалютаДоговора <> мВалютаРегламентированногоУчета);
	
	Если НЕ РасчетыВВалюте Тогда
		
		СтрокаДанных.Сумма   = СтрокаДанных.СуммаВзаиморасчетов;
		СтрокаДанных.СуммаНУ = СтрокаДанных.СуммаВзаиморасчетов;
		СтрокаДанных.СуммаПР = 0;
	
	Иначе
		
		// БУ: суммы авансов рассчитываются по курсу из строки, остальные суммы по курсу из шапки
		// НУ: суммы авансов в УЕ и задолженностей в УЕ рассчитываются по курсу из строки, остальные суммы по курсу из шапки
		ВидДоговора = СтрокаДанных.ДоговорКонтрагента.ВидДоговора;
		ЭтоАванс = 
			((ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
				ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) 
			И (СтрокаДанных.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская))
			ИЛИ ((ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
				ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) 
			И (СтрокаДанных.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская));
		
		РасчетыВУЕ = СтрокаДанных.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
		
		КурсБУ      = ?(ЭтоАванс, СтрокаДанных.КурсВзаиморасчетов, КурсДокумента);
		КратностьБУ = ?(ЭтоАванс, СтрокаДанных.КратностьВзаиморасчетов, КратностьДокумента);
		
		КурсНУ      = ?(РасчетыВУЕ, СтрокаДанных.КурсВзаиморасчетов, КурсДокумента);
		КратностьНУ = ?(РасчетыВУЕ, СтрокаДанных.КратностьВзаиморасчетов, КратностьДокумента);
		
		СтрокаДанных.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДанных.СуммаВзаиморасчетов,
			ВалютаДоговора, мВалютаРегламентированногоУчета,
			КурсБУ, 1, 
			КратностьБУ, 1);
	
		СтрокаДанных.СуммаНУ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДанных.СуммаВзаиморасчетов,
			ВалютаДоговора, мВалютаРегламентированногоУчета,
			КурсНУ, 1, 
			КратностьНУ, 1);
			
		РассчитатьСуммуПРпоСтроке(СтрокаДанных);
			
	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьСуммуПРпоСтроке(СтрокаДанных)

	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных.СуммаПР = СтрокаДанных.Сумма - СтрокаДанных.СуммаНУ;

КонецПроцедуры

Процедура РассчитатьКурсПоСтроке(СтрокаДанных)

	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ДоговорКонтрагента) Тогда
		ВалютаДоговора = СтрокаДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		РасчетыВВалюте = (ВалютаДоговора <> мВалютаРегламентированногоУчета);
	Иначе
		ВалютаДоговора = мВалютаРегламентированногоУчета;
		РасчетыВВалюте = Ложь;
	КонецЕсли; 
	
	Если НЕ РасчетыВВалюте Тогда
		СтрокаДанных.КурсВзаиморасчетов      = 1;
		СтрокаДанных.КратностьВзаиморасчетов = 1;
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ДокументРасчетов) Тогда
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДоговора, СтрокаДанных.ДокументРасчетов.Дата);
		СтрокаДанных.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СтрокаДанных.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	Иначе
		СтрокаДанных.КурсВзаиморасчетов      = КурсДокумента;
		СтрокаДанных.КратностьВзаиморасчетов = КратностьДокумента;
	КонецЕсли;
	
	РассчитатьРублевыеСуммыПоСтроке(СтрокаДанных);
	
КонецПроцедуры

Процедура СуммыДолгаСуммаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	РассчитатьСуммуПРпоСтроке(ТекДанные);
	
КонецПроцедуры

Процедура СуммыДолгаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	РассчитатьРублевыеСуммыПоСтроке(ТекДанные);

КонецПроцедуры

Процедура КурсДокументаПриИзменении(Элемент)
	
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета и ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Для каждого СтрокаДолга из СуммыДолга Цикл
			РассчитатьРублевыеСуммыПоСтроке(СтрокаДолга);
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

Процедура КурсДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаДокумента;
	ФормаВводаКурсаИКратности.КратностьВалюты = КратностьДокумента;
	ФормаВводаКурсаИКратности.КурсВалюты      = КурсДокумента;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;
	
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	
	Если СтруктураКурсаИКратности <> неопределено Тогда
		
		КурсДокумента = СтруктураКурсаИКратности.КурсВалюты;
		КратностьДокумента = СтруктураКурсаИКратности.КратностьВалюты;
		
		КурсДокументаПриИзменении(Элементыформы.КурсДокумента);
	КонецЕсли;

КонецПроцедуры

Процедура СуммыДолгаКурсВзаиморасчетовПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	РассчитатьРублевыеСуммыПоСтроке(ТекДанные);

КонецПроцедуры

Процедура СуммыДолгаВидЗадолженностиПриИзменении(Элемент)
	 
	ТекДанные = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	Если ТекДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
  		УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ТекДанные.ДоговорКонтрагента, ТекДанные.Контрагент, Организация);
	ИначеЕсли ТекДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
  		УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ТекДанные.ДоговорКонтрагента, ТекДанные.Контрагент, Организация);		
	КонецЕсли;

 КонецПроцедуры

 // Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ОрганизацияПолучательНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.ВыбратьЗначениеПоляВводаИзСписка(
		ЭтаФорма, Элемент, СтандартнаяОбработка, ЭлементыФормы.ОрганизацияПолучатель.СписокВыбора, ОрганизацияПолучатель);
	
КонецПроцедуры

Процедура ОрганизацияПолучательАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ОбработатьАвтоПодборТекста(
		Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ЭлементыФормы.ОрганизацияПолучатель.СписокВыбора);
	
КонецПроцедуры

Процедура ОрганизацияПолучательОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ОбработатьОкончаниеВводаТекста(
		Текст, Значение, СтандартнаяОбработка, ЭлементыФормы.ОрганизацияПолучатель.СписокВыбора);
	
КонецПроцедуры

Процедура АвизоПоРасчетамВВалютеПриИзменении(Элемент)
	
	Если (НЕ АвизоПоРасчетамВВалюте) И ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		
		СтандартнаяОбработка = Истина;
		ОчиститьСтрокиТабЧасти("При смене валюты табличная часть будет очищена. Продолжить?", СтандартнаяОбработка); 
		
		Если СтандартнаяОбработка Тогда
			ВалютаДокумента    = мВалютаРегламентированногоУчета;
			КурсДокумента      = 1;
			КратностьДокумента = 1;
		Иначе
			АвизоПоРасчетамВВалюте = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СуммыДолгаДокументРасчетовПриИзменении(Элемент)
	
	СтрокаДанных = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	РассчитатьКурсПоСтроке(СтрокаДанных);
	
КонецПроцедуры

Процедура СуммыДолгаСуммаНУПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	РассчитатьСуммуПРпоСтроке(ТекДанные);
	
КонецПроцедуры

Процедура СуммыДолгаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаДанных = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.ДоговорКонтрагента) Тогда
		Предупреждение("До выбора курса нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;
	
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	
	ФормаВводаКурсаИКратности.Валюта          = СтрокаДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаДанных.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаДанных.КурсВзаиморасчетов;
	Если ЗначениеЗаполнено(СтрокаДанных.ДокументРасчетов) Тогда
		ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = СтрокаДанных.ДокументРасчетов.Дата;
	Иначе
		ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;
	КонецЕсли;
	
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	
	Если СтруктураКурсаИКратности <> неопределено Тогда
		
		СтрокаДанных.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаДанных.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
		
	КонецЕсли;
	
	РассчитатьРублевыеСуммыПоСтроке(СтрокаДанных);
	
КонецПроцедуры

Процедура СуммыДолгаКонтрагентПриИзменении(Элемент)
	
	СтрокаДанных = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	
	СтруктураОтбора     = Новый Структура("ЗначениеОтбора", ВалютаДокумента);
	СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", СтруктураОтбора);
	
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(
		СтрокаДанных.ДоговорКонтрагента,
		СтрокаДанных.Контрагент,
		Организация,
		,
		СтруктураПараметров); 
		
	ПриИзмененииДоговораКонтрагента(СтрокаДанных);
	
КонецПроцедуры


ТипыДокументаРасчетов = Метаданные().ТабличныеЧасти.СуммыДолга.Реквизиты.ДокументРасчетов.Тип;
