////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,,ПараметрОбъектКопирования);
		СчетРасчетов = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям;
	КонецЕсли;
	
	ЭлементыФормы.ОрганизацияПолучатель.СписокВыбора = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделений(Организация);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

	мТекущаяДатаДокумента = Дата;

	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Дата,Организация,ОрганизацияПолучатель,СчетРасчетов");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма, СтруктураРеквизитов, ЭлементыФормы.ТабличнаяЧастьДанныеБух);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Новый Структура("Авизо","Авизо"), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ТабличнаяЧастьДанныеБух, ЭлементыФормы.КоманднаяПанельДанныеБух);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьДоступностьРеквизитовПроводки()

	ТекущиеДанные = ЭлементыФормы.ТабличнаяЧастьДанныеБух.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;

	Колонки = ЭлементыФормы.ТабличнаяЧастьДанныеБух.Колонки;
	
	// Доступность субконто
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекущиеДанные.СчетУчета,
		ТекущиеДанные.Субконто1, Колонки.Субконто1,
		ТекущиеДанные.Субконто2, Колонки.Субконто2,
		ТекущиеДанные.Субконто3, Колонки.Субконто3,
		ТекущиеДанные.Подразделение, Колонки.Подразделение,
		Колонки.СчетУчета, Ложь);
		
	Колонки.Сумма.ТолькоПросмотр   = НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетУчета);
	Колонки.СуммаКт.ТолькоПросмотр = НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетУчета);

	Колонки.Валюта.ТолькоПросмотр		 = НЕ ТекущиеДанные.СчетУчета.Валютный;
	Колонки.ВалютнаяСумма.ТолькоПросмотр = НЕ ТекущиеДанные.СчетУчета.Валютный;

	Колонки.Количество.ТолькоПросмотр = НЕ ТекущиеДанные.СчетУчета.Количественный;
	
КонецПроцедуры // УстановитьДоступностьРеквизитовПроводки()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ и ее РЕКВИЗИТОВ 

Процедура ТабличнаяЧастьДанныеБухПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьРеквизитовПроводки();

КонецПроцедуры

Процедура ТабличнаяЧастьДанныеБухСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура ТабличнаяЧастьДанныеБухСчетУчетаПриИзменении(Элемент)
	
	УстановитьДоступностьРеквизитовПроводки();

	ТекущиеДанные = ЭлементыФормы.ТабличнаяЧастьДанныеБух.ТекущиеДанные;
	Колонки       = ЭлементыФормы.ТабличнаяЧастьДанныеБух.Колонки;
	                                
	РаботаСДиалогами.УстановитьПодразделениеПоСчету(
		ТекущиеДанные.Подразделение, ТекущиеДанные.СчетУчета, Организация);
	
	//обнулим незадействованные реквизиты
	Если НЕ ТекущиеДанные.СчетУчета.Валютный Тогда
		ТекущиеДанные.ВалютнаяСумма = 0;
		ТекущиеДанные.Валюта = "";
	КонецЕсли;

	Если НЕ ТекущиеДанные.СчетУчета.Количественный Тогда
		ТекущиеДанные.Количество = 0;
	КонецЕсли;

	Если Колонки.СуммаКт.ТолькоПросмотр Тогда
		Если ТекущиеДанные.СуммаКт <> 0 Тогда
			ТекущиеДанные.Сумма = ТекущиеДанные.СуммаКт;
			ТекущиеДанные.СуммаКт = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Колонки.Сумма.ТолькоПросмотр Тогда
		Если ТекущиеДанные.Сумма <> 0 Тогда
			ТекущиеДанные.СуммаКт = ТекущиеДанные.Сумма;
			ТекущиеДанные.Сумма = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает стоимость (ВР)
//
Процедура ПересчитатьСуммыРазниц()
	
	ТекущаяТаблица = ЭлементыФормы.ТабличнаяЧастьДанныеБух;
	
	Если ТекущаяТаблица.ТекущаяКолонка.Имя = "Сумма" 
		И ТекущаяТаблица.ТекущиеДанные.Сумма <> 0 Тогда
		ТекущаяТаблица.ТекущиеДанные.СуммаКт = 0;
	ИначеЕсли ТекущаяТаблица.ТекущаяКолонка.Имя = "СуммаКт" 
		И ТекущаяТаблица.ТекущиеДанные.СуммаКт <> 0 Тогда
		ТекущаяТаблица.ТекущиеДанные.Сумма = 0;
	КонецЕсли;
	
	Если ТекущаяТаблица.ТекущиеДанные.Сумма <> 0 Тогда
		СуммаРасчет = ТекущаяТаблица.ТекущиеДанные.Сумма;
	Иначе
		СуммаРасчет = ТекущаяТаблица.ТекущиеДанные.СуммаКт;
	КонецЕсли;
	
	ТекущиеДанные = ТекущаяТаблица.ТекущиеДанные;

	Если ТекущиеДанные.СуммаНУ = 0 Тогда
		Если ЭтаФорма.ТекущийЭлемент.ТекущаяКолонка.Имя = "Сумма" Тогда
			ТекущиеДанные.СуммаНУ = ТекущиеДанные.Сумма;
		ИначеЕсли ЭтаФорма.ТекущийЭлемент.ТекущаяКолонка.Имя = "СуммаКт" Тогда
			ТекущиеДанные.СуммаНУ = ТекущиеДанные.СуммаКт;
		ИначеЕсли ЭтаФорма.ТекущийЭлемент.ТекущаяКолонка.Имя = "СуммаНУ" 
			ИЛИ ЭтаФорма.ТекущийЭлемент.ТекущаяКолонка.Имя = "СуммаПР" Тогда
			//Сумму НУ не трогаем
		Иначе
			Если ЭтаФорма.ТекущийЭлемент.Колонки.Найти("СуммаКт") <> Неопределено Тогда
				Если ТекущиеДанные.СуммаКт <> 0 Тогда
					ТекущиеДанные.СуммаНУ = ТекущиеДанные.СуммаКт;
				Иначе
					ТекущиеДанные.СуммаНУ = ТекущиеДанные.Сумма;
				КонецЕсли;
			Иначе
				ТекущиеДанные.СуммаНУ = ТекущиеДанные.Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПересчитатьСуммыРазниц()

Процедура ТабличнаяЧастьДанныеБухВалютаПриИзменении(Элемент)

	ТекущиеДанные       = ЭлементыФормы.ТабличнаяЧастьДанныеБух.ТекущиеДанные;
	Сумма = ПересчетСуммыПоКурсу(ТекущиеДанные.ВалютнаяСумма, ТекущиеДанные.Валюта, Дата);
	Если ТекущиеДанные.Сумма > 0 Тогда
		ТекущиеДанные.Сумма = Сумма;
	ИначеЕсли ТекущиеДанные.СуммаКТ > 0 Тогда
		ТекущиеДанные.СуммаКТ = Сумма;
	КонецЕсли;
	
КонецПроцедуры

// Пересчет валютной суммы в основную по курсу на указанную дату
//
Функция ПересчетСуммыПоКурсу(ВалютнаяСумма, Валюта, Дата) Экспорт

	Запись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Валюта));
	Сумма  = ВалютнаяСумма * Запись.Курс;

	Если Запись.Кратность <> 0 Тогда
		Сумма = Сумма / Запись.Кратность;
	КонецЕсли;

	Возврат Сумма;

КонецФункции // ПересчетСуммыПоКурсу()

Процедура ОрганизацияПолучательНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.ВыбратьЗначениеПоляВводаИзСписка(
		ЭтаФорма, Элемент, СтандартнаяОбработка, ЭлементыФормы.ОрганизацияПолучатель.СписокВыбора, ОрганизацияПолучатель);
	
КонецПроцедуры

Процедура ОрганизацияПолучательАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ОбработатьАвтоПодборТекста(
		Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ЭлементыФормы.ОрганизацияПолучатель.СписокВыбора);
	
КонецПроцедуры

Процедура ОрганизацияПолучательОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ОбработатьОкончаниеВводаТекста(
		Текст, Значение, СтандартнаяОбработка, ЭлементыФормы.ОрганизацияПолучатель.СписокВыбора);
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении реквизита Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	ЭлементыФормы.ОрганизацияПолучатель.СписокВыбора = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделений(Организация);
	
	Если ЭлементыФормы.ОрганизацияПолучатель.СписокВыбора.НайтиПоЗначению(ОрганизацияПолучатель) = Неопределено Тогда
		ОрганизацияПолучатель = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

