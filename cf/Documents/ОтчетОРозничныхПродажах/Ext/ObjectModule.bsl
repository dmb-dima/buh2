Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУчетнаяПолитика Экспорт;
Перем мИспользоватьОборотнуюНоменклатуру Экспорт;
Перем мРазделятьПоСтавкамНДС Экспорт;
Перем мУчетВПродажныхЦенах Экспорт;

// Хранит признак ведения в конфигурации учета по статьям движения денежных средств
Перем ЕстьУчетПоСтатьямДДС Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОтчетаОПродажахККМ()
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Номер КАК НомерДокумента,
	|	ОтчетОРозничныхПродажах.Дата КАК ДатаДокумента,
	|	ОтчетОРозничныхПродажах.Организация КАК Руководители,
	|	ОтчетОРозничныхПродажах.Организация,
	|	ОтчетОРозничныхПродажах.СуммаДокумента,
	|	ОтчетОРозничныхПродажах.ВалютаДокумента,
	|	ОтчетОРозничныхПродажах.СуммаВключаетНДС,
	// {ОбособленныеПодразделения
	|	ОтчетОРозничныхПродажах.ПодразделениеОрганизации,
	|	ОтчетОРозничныхПродажах.ПодразделениеОрганизации.НаименованиеПолное КАК ПодразделениеПредставление,
	// }ОбособленныеПодразделения
	|	ОтчетОРозничныхПродажах.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Цена,
	|		СуммаНДС,
	|		Сумма КАК Итого
	|	)
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетККМОПродажах_ОтчетККМ";

	Макет = ПолучитьМакет("ОтчетККМ");

	// Выводим шапку накладной
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация,Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ОрганизацияПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ОрганизацияИНН    = СведенияОПокупателе.ИНН;
	ОбластьМакета.Параметры.ПрограммаУчета    = "1С:Предприятие 8";
	ОбластьМакета.Параметры.НомерДокумента    = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);

	МассивСтрок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Товары");
	МассивСтрок[0].Свернуть(, "Итого, СуммаНДС");
	ТаблицаСтрок = МассивСтрок[0];

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого Строка Из ТаблицаСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(Строка);
		ОбластьМакета.Параметры.Итого = Строка.Итого 
			+ ?(Шапка.СуммаВключаетНДС, 0, Строка.СуммаНДС);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла; 

	ОбластьМакета = Макет.ПолучитьОбласть("Итог");
	СуммаИтого = ТаблицаСтрок.Итог("Итого") + ?(Шапка.СуммаВключаетНДС, 0, ТаблицаСтрок.Итог("СуммаНДС"));
	ОбластьМакета.Параметры.Итого = СуммаИтого;

	ОбластьМакета.Параметры.СуммаВыручкиПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаИтого, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Оборот");
	
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	
	ОбластьМакета.Параметры.ФИОРуководителя       = Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьОтчетаОПродажахККМ()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОтчетККМ" Тогда
		
		ТабДокумент = ПечатьОтчетаОПродажахККМ();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОтчетККМ","КМ-6 (Справка-отчет кассира-операциониста)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет счета в строке табличной части.
//
Процедура ЗаполнитьСчета(СтрокаТЧ, СчетаУчета, Заполнять, ТипГруппы, Комиссия)

	Если Заполнять = Истина Тогда

		СтрокаТЧ.СчетУчета              = ?(НЕ Комиссия, СчетаУчета.СчетУчета, СчетаУчета.СчетУчетаДоп);
		СтрокаТЧ.СчетДоходов            = ?(НЕ Комиссия, СчетаУчета.СчетДоходов, ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		СтрокаТЧ.СчетРасходов           = ?(НЕ Комиссия, СчетаУчета.СчетРасходов, ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		СтрокаТЧ.СчетУчетаНДСПоРеализации = ?(НЕ Комиссия, СчетаУчета.СчетУчетаНДСПродажи, ПланыСчетов.Хозрасчетный.ПустаяСсылка());

		Если СтрокаТЧ.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда

			СтрокаТЧ.Субконто = Новый(СтрокаТЧ.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);

			Если ТипЗнч(СтрокаТЧ.Субконто) = ТипГруппы Тогда
				СтрокаТЧ.Субконто = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
			КонецЕсли;

		Иначе

			СтрокаТЧ.Субконто = Неопределено;

		КонецЕсли;

	ИначеЕсли Заполнять = Ложь Тогда

		СтрокаТЧ.СчетУчета              = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.СчетДоходов            = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.Субконто               = Неопределено;
		СтрокаТЧ.СчетРасходов           = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчета

// Заполняет счета в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, Заполнять) Экспорт

	ВидСклада = ?(НЕ ЗначениеЗаполнено(Склад), Неопределено, Склад.ВидСклада);
   	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(НЕ ЗначениеЗаполнено(Дата), ТекущаяДата(), Дата), Ложь, Организация);	
	Если ПараметрыУчетнойПолитики.Свойство("СпособОценкиТоваровВРознице") Тогда
		СпособОценкиТоваровВРознице = ПараметрыУчетнойПолитики.СпособОценкиТоваровВРознице;
	Иначе
		СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоСтоимостиПриобретения;
	КонецЕсли;
	Если (ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка)
		И (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
		Комиссия = Истина;
	Иначе
		Комиссия = Ложь;
	КонецЕсли;
	
	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
	ТипГруппы  = Тип("СправочникСсылка.НоменклатурныеГруппы");

	ЗаполнитьСчета(СтрокаТЧ, СчетаУчета, Заполнять, ТипГруппы, Комиссия);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета в табличной части.
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, Заполнять) Экспорт

	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, Заполнять);
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура выполняет заполнение табличной части проданными ТМЦ по инвентаризации товаров (розница).
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация Товаров (розница)).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОснование) Экспорт

	УчитыватьНДС     = Истина;
	СуммаВключаетНДС = Истина;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка"                   , Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка"          , ДокументОснование);
	Запрос.УстановитьПараметр("НеавтоматизированнаяТорговаяТочка", Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.СчетУчета,
	|	Док.Ссылка.Склад                              КАК Склад,
	|	Док.Ссылка.Склад.ВидСклада                    КАК ВидСклада,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			СУММА(ВложенныйЗапрос.Количество)
	|	КОНЕЦ КАК КоличествоСписанное,
	|	Док.ЦенаВРознице КАК Цена
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ 
	|		ДокСписание.Номенклатура,
	|		ДокСписание.СчетУчета,
	|		ДокСписание.Ссылка.Склад                  КАК Склад,
	|		ДокСписание.Количество                    КАК Количество,
	|		ДокСписание.Цена
	|	ИЗ
	|		Документ.СписаниеТоваров.Товары КАК ДокСписание
	|	ГДЕ
	|		ДокСписание.Ссылка.Проведен
	|		И ДокСписание.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ 
	|		ДокОтчетККМ.Номенклатура,
	|		ДокОтчетККМ.СчетУчета,
	|		ДокОтчетККМ.Ссылка.Склад                  КАК Склад,
	|		ДокОтчетККМ.Количество                    КАК Количество,
	|		ДокОтчетККМ.Цена
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Товары КАК ДокОтчетККМ
	|	ГДЕ
	|		ДокОтчетККМ.Ссылка <> &ДокументСсылка
	|		И ДокОтчетККМ.Ссылка.Проведен
	|		И ДокОтчетККМ.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка) КАК ВложенныйЗапрос
	|ПО
	|	Док.Номенклатура = ВложенныйЗапрос.Номенклатура
	|	И Док.СчетУчета = ВложенныйЗапрос.СчетУчета
	|	И Док.Ссылка.Склад = ВложенныйЗапрос.Склад
	|	И (НЕ Док.Ссылка.Склад.ВидСклада = &НеавтоматизированнаяТорговаяТочка 
	|	ИЛИ Док.Цена = ВложенныйЗапрос.Цена)
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|	И ((Док.КоличествоУчет - Док.Количество) > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка.Склад,
	|	Док.Номенклатура,
	|	Док.СчетУчета,
	|	Док.ЦенаВРознице";
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		КоличествоСписать = Выборка.КоличествоОтклонение - Выборка.КоличествоСписанное;
		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли; 

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = КоличествоСписать;

		Если Выборка.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			СтрокаТабличнойЧасти.Цена         = Выборка.Цена;
		Иначе
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		КонецЕсли;

		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, Истина);
		
		Если ЗначениеЗаполнено(Выборка.СчетУчета) Тогда
			СтрокаТабличнойЧасти.СчетУчета      = Выборка.СчетУчета;
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЦикла;

	#Если Клиент Тогда

	Если Товары.Количество() = 0 Тогда

		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары учетное количество которых превышает фактическое.");

	КонецЕсли;

	#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Записать суммы документа в соответствующие реквизиты шапки для показа в журналах
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура РасчетСуммДокумента() Экспорт

	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "АгентскиеУслуги");

КонецПроцедуры // РасчетСуммДокумента

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.СчетРасходов.Имя = "КорСчетСписания";
	
	ТаблицаТоваров.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));

	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписания1");
	//ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");

	ТаблицаТоваров.Колонки.Добавить("ОтражениеВУСН");

	ТаблицаТоваров.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаТоваров.Колонки.Добавить("КорПодразделениеОрганизации");

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.КорСубконтоСписания1 = СтрокаТаблицы.Субконто;
		
		Если НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТаблицы.СчетДоходов) Тогда
			СтрокаТаблицы.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
		Иначе
			СтрокаТаблицы.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;

	КонецЦикла;

	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                              "Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,           "Склад");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,     "Организация");

	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорПодразделениеОрганизации");

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
								  ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	//ПодготовитьТаблицуУслугРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	//ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуУслуг()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Склад, СчетКасса");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация);
	РазрешитьУчетУслугБезПлановыхЦен = Не ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация).ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам;
	
	Для Каждого СтрокаТЧ из ТаблицаПоТоварам Цикл

		НеЕНВД = НЕ НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетДоходов);

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Товары"": ";

		Если НЕ СтрокаТЧ.Услуга Тогда

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчета) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
						
		КонецЕсли; // Если НЕ СтрокаТЧ.Услуга Тогда
		
		Если СтрокаТЧ.Услуга Тогда
			
			Если РазрешитьУчетУслугБезПлановыхЦен И НЕ ЗначениеЗаполнено(СтрокаТЧ.КорСчетСписания) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет расходов""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли; // Если СтрокаТЧ.Услуга Тогда
				
		Если СтрокаТЧ.СчетУчетаЗабалансовый = Null Тогда
			СчетУчетаЗабалансовый = Ложь;
		Иначе
			СчетУчетаЗабалансовый = СтрокаТЧ.СчетУчетаЗабалансовый;
		КонецЕсли;

		Если НЕ СчетУчетаЗабалансовый Тогда

			Если (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах)
				И (ПараметрыУчетнойПолитики.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
					
				СтрокаСообщения = "Указан собственный товар.
				|При учете продажных ценах продажи собственных товаров в неавтоматизированной торговой точке 
				|отражаются документом ""Приходный кассовый ордер""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				
			Иначе
				
				Если СтруктураШапкиДокумента.УчитыватьНДС 
					И СтрокаТЧ.НДС <> 0 
					И НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДСПоРеализации) 
					И НеЕНВД Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС по реализации""!";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетДоходов) Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Счет доходов""!";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				
				Если (НЕ СтрокаТЧ.Услуга) И (НЕ ЗначениеЗаполнено(СтрокаТЧ.КорСчетСписания)) Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Счет расходов""!";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
								
			КонецЕсли;
			
			
		КонецЕсли; // Если НЕ СтрокаТЧ.СчетУчетаЗабалансовый Тогда
		
		Если УправлениеЗапасами.НеУказанНомерГТД(СтрокаТЧ.НомерГТД, СтрокаТЧ.СтранаПроисхождения) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Номер ГТД""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, Заголовок);
		КонецЕсли;

		// {УчетДоходовИРасходовИП
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
			
			Если НЕ СтруктураШапкиДокумента.СчетаСНоменклатурнымиГруппами.Найти(СтрокаТЧ.СчетДоходов) = Неопределено 
				И НЕ ЗначениеЗаполнено(СтрокаТЧ.Субконто) 
				Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Субконто""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		// }УчетДоходовИРасходовИП
	
	КонецЦикла; // Для Каждого СтрокаТЧ из ТаблицаПоТоварам Цикл

	Если СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета 
	 ИЛИ (СтруктураШапкиДокумента.УчитыватьНДС И Не СтруктураШапкиДокумента.СуммаВключаетНДС) Тогда

		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Документ не может осуществлять реализацию с неавтоматизированной торговой точки, 
			                    |если выбрана валюта отличная от валюты регламентированного учета или НДС не включается в сумму.", Отказ, Заголовок);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаОплата, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидОплаты, Контрагент, ДоговорКонтрагента, СчетУчетаРасчетов");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоУслугам        - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиАгентскиеУслуги(ТаблицаПоАгентскимУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "АгентскиеУслуги";

	СтруктураОбязательныхПолей = Новый Структура("Сумма, Контрагент, ДоговорКонтрагента, СчетРасчетов");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "АгентскиеУслуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
    	
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "АгентскиеУслуги", ТаблицаПоАгентскимУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоАгентскимУслугам, ТаблицаОплата, Отказ, Заголовок);

	// Формирование бухгалтерских проводок

	// По некоторым регистрам услуги проводить не нужно.
	// Подготовим отдельную таблицу.
	
	ТаблицаПоТоварамБезУслуг = ТаблицаПоТоварам.Скопировать(Новый Структура("Услуга", Ложь));
	ТаблицаПоУслугам = ТаблицаПоТоварам.Скопировать(Новый Структура("Услуга", Истина));
	
	// Списание товаров по партиям со склада.
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТоварамБезУслуг, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, ,"Реализация товаров в розницу");
	
	ПереоценкаАТТВПродажныхЦенах(СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// Отразим списание по партионному учету НДС при необходимости
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг,Отказ, Заголовок,Истина);
	
	Проводки   = Движения.Хозрасчетный;
	ДатаДока     = Дата;
	
	Если ТаблицаОплата.Количество() = 0 Тогда
		СчетДт       = СтруктураШапкиДокумента.СчетКасса;
	Иначе
		СчетДт       = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
	КонецЕсли;
	
	КассаВВалюте = СчетДт.Валютный;

	СторноНДСРозничнойВыручки = Новый ТаблицаЗначений;
	СторноНДСРозничнойВыручки.Колонки.Добавить("СтавкаНДС");
	СторноНДСРозничнойВыручки.Колонки.Добавить("Сумма");
	СторноНДСРозничнойВыручки.Колонки.Добавить("НДС");
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоАгентскимУслугам,ТаблицаПоТоварам);
	
    ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация);
	// Отчет заполнен по ЧЕКАМ ККМ - требуется перераспределение выручки.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
        
		Если (ПараметрыУчетнойПолитики.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			СторноРозничнойВыручкиПКОПоПродажнымЦенам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОплата, СторноНДСРозничнойВыручки, Проводки, СчетДт, ДатаДока, Отказ, Заголовок);
		Иначе
			СторноРозничнойВыручкиПКОПоПокупнымЦенам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОплата, Проводки, СчетДт, ДатаДока, Отказ, Заголовок);
		КонецЕсли;
	
	КонецЕсли;

	/////////////////////////////////////////////////////////////////////
	// Записи по выручке.

	СтруктураТаблицыВыручки = Новый Структура("Номенклатура, Количество, ВидЦенности, Ценность, Партия, 
		|СчетУчетаНДСПоРеализации,СчетУчета, СчетДоходов, Субконто, СтавкаНДС, Сумма, СуммаВал, НДС, НДСВал, СуммаБУ, СуммаБУБезНДС,
		|СуммаБезНДС, СуммаБезНДСВал, Комиссионный, Комитент, ДоговорКомиссии, СчетРасчетовПоАвансамСКомитентом, 
		|СчетРасчетовСКомитентом, ВалютаРасчетовСКомитентом, СуммаСписания");
		
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
		СтруктураТаблицыВыручки.Вставить("ЭтоДоходЕНВД");
		СтруктураТаблицыВыручки.Вставить("ЭтоДоходКомитента");
	КонецЕсли;

	//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
	ТаблицаВыручки = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоУслугам,СтруктураТаблицыВыручки,,Истина);
	ТаблицаВыручки.ЗаполнитьЗначения(Ложь, "Комиссионный");
	
	//Агентские услуги
	ТаблицаВыручкиПоАгентскимУслугам = ТаблицаПоАгентскимУслугам.Скопировать();
	ТаблицаВыручкиПоАгентскимУслугам.Колонки.Контрагент.Имя 		= "Комитент";
	ТаблицаВыручкиПоАгентскимУслугам.Колонки.ДоговорКонтрагента.Имя = "ДоговорКомиссии";
	ТаблицаВыручкиПоАгентскимУслугам.Колонки.СчетРасчетов.Имя 		= "СчетРасчетовСКомитентом";
	
	ТаблицаВыручкиПоАгентскимУслугам.Колонки.Добавить("Комиссионный");
	ТаблицаВыручкиПоАгентскимУслугам.ЗаполнитьЗначения(Истина, "Комиссионный");
	ТаблицаВыручкиПоАгентскимУслугам.ЗаполнитьЗначения(Истина, "Услуга");
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВыручкиПоАгентскимУслугам,ТаблицаВыручки);

	//Дополним данными по таблице товаров с распределением по партиям

	//Развернем таблицу товаров по партиям для распределения выручки.
	ВыручкаПоТоварам = ТаблицаВыручки.СкопироватьКолонки();

	СписокРаспределяемыхКолонок = Новый Структура("Количество,СуммаБУ,СуммаБУБезНДС,Сумма,СуммаВал,НДС,НДСВал,СуммаБезНДС,СуммаБезНДСВал");

	Для каждого СтрокаТаблицыТоваров Из ТаблицаПоТоварамБезУслуг Цикл 

		ТаблицаПартий = СтрокаТаблицыТоваров.СписанныеПартии;

		Для каждого Партия из ТаблицаПартий Цикл

			СтрокаТаблицыВыручки = ВыручкаПоТоварам.Добавить();

			Если Партия.Комиссионный тогда
				ПараметрыПартии = УправлениеВзаиморасчетами.ПараметрыРасчетовСКомитентом(Партия.Партия, Отказ, Заголовок);
			КонецЕсли;

			Для каждого Колонка из ВыручкаПоТоварам.Колонки Цикл

				Если СписокРаспределяемыхКолонок.Свойство(Колонка.Имя) тогда
					СтрокаТаблицыВыручки[Колонка.Имя]= Партия.Количество * 10;

				ИначеЕсли Не(ТаблицаПартий.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
					СтрокаТаблицыВыручки[Колонка.Имя] = Партия[Колонка.Имя];

				ИначеЕсли Не(ТаблицаПоТоварам.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
					СтрокаТаблицыВыручки[Колонка.Имя] = СтрокаТаблицыТоваров[Колонка.Имя];

				Иначе

					Если Партия.Комиссионный тогда

						Если ПараметрыПартии.Свойство(Колонка.Имя) тогда
							СтрокаТаблицыВыручки[Колонка.Имя] = ПараметрыПартии[Колонка.Имя];
						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;
 
	//Распределим выручку по партиям

	ВыручкаПоТоварам = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаПоТоварам,ВыручкаПоТоварам,СписокРаспределяемыхКолонок);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВыручкаПоТоварам,ТаблицаВыручки);

	//Фиксация выручки и НДС (проводки)
	Выручка = ТаблицаВыручки.Скопировать();
	Выручка.Свернуть("СчетУчетаНДСПоРеализации, СчетДоходов, Субконто, СтавкаНДС,Комиссионный,Комитент,ДоговорКомиссии,
		|СчетРасчетовПоАвансамСКомитентом,СчетРасчетовСКомитентом,ВалютаРасчетовСКомитентом,Номенклатура",
		"СуммаБУ, СуммаБУБезНДС, Сумма, СуммаВал, НДС, НДСВал, Количество");

	// Формирование движений документа для подсистемы НДС
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах 
		И (ПараметрыУчетнойПолитики.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, СторноНДСРозничнойВыручки, Отказ, Заголовок);
	Иначе
		Для Каждого СтрокаТаблицы Из ТаблицаВыручки Цикл
			ОтражатьНДСКомитента = СтрокаТаблицы.Комиссионный И СтрокаТаблицы.ДоговорКомиссии.УчетАгентскогоНДС;
			Если ОтражатьНДСКомитента Тогда 
				СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент;
			КонецЕсли;
		КонецЦикла;
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки, Отказ, Заголовок);
	КонецЕсли;
	
	// Формирование движений документа для подсистемы УСН
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг, Отказ, Заголовок);

	Для каждого СтрокаТаблицы из Выручка Цикл

		// Выручка
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Проводки.Добавить();

		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма       = СтрокаТаблицы.Сумма;
		Проводка.СчетДт       = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтруктураШапкиДокумента.Склад);

		Если Проводка.СчетДт.Валютный Тогда

			//Если счет валютный, установить валюту в проводках
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;

		КонецЕсли;

		Если СтрокаТаблицы.Комиссионный = Ложь тогда

			Проводка.СчетКт = СтрокаТаблицы.СчетДоходов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,           СтрокаТаблицы.Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РеализуемыеАктивы", СтрокаТаблицы.Номенклатура);
			Если Проводка.СчетКт.Количественный Тогда
				Проводка.КоличествоКт = СтрокаТаблицы.Количество;  
			КОнецЕсли;
			
			Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
			КонецЕсли; 

			Проводка.Содержание = "Реализация товаров в розницу";

			Если Проводка.СчетКт.Валютный Тогда
				//Если счет валютный, установить валюту в проводках
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
			КонецЕсли;

		Иначе

			Проводка.СчетКт = СтрокаТаблицы.СчетРасчетовСКомитентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",        СтрокаТаблицы.Комитент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",           СтрокаТаблицы.ДоговорКомиссии);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
			Проводка.Содержание = "Реализация товаров в розницу";

			Если Проводка.СчетКт.Валютный Тогда

				Проводка.ВалютаКт        = СтрокаТаблицы.ВалютаРасчетовСКомитентом;
				Если СтруктураШапкиДокумента.ВалютаДокумента = СтрокаТаблицы.ВалютаРасчетовСКомитентом тогда

					//Если валюта расчетов с комитентом совпадает с валютой расчетов по договору, считаем что и курсы совпадают.
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;

				Иначе

					ДанныеОВалютеРасчетовСКомитентом = МодульВалютногоУчета.ПолучитьКурсВалюты(
						СтрокаТаблицы.ВалютаРасчетовСКомитентом,СтруктураШапкиДокумента.Дата);

					Проводка.ВалютнаяСуммаКт = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						СтрокаТаблицы.Сумма,
						мВалютаРегламентированногоУчета, СтрокаТаблицы.ВалютаРасчетовСКомитентом,
						1, ДанныеОВалютеРасчетовСКомитентом.Курс,
						1, ДанныеОВалютеРасчетовСКомитентом.Кратность);
					СтрокаТаблицы.СуммаВал   = Проводка.ВалютнаяСуммаКт;

				КонецЕсли;

			Иначе
				СтрокаТаблицы.СуммаВал =  Проводка.Сумма;

			КонецЕсли; // Если Проводка.СчетКт.Валютный Тогда

		КонецЕсли; // Если СтрокаТаблицы.Комиссионный = Ложь тогда

		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			СуммаНУ = СтрокаТаблицы.Сумма;
			СуммаНУКт = ?(СтрокаТаблицы.Комиссионный, СтрокаТаблицы.Сумма, СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС);
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
				СуммаНУ, СуммаНУКт, Проводка.Сумма - СуммаНУ, Проводка.Сумма - СуммаНУ, , , 
				Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
			
		КонецЕсли;
		
		// НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 и (СтрокаТаблицы.Комиссионный=Ложь) Тогда

			Проводка = Проводки.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = СтрокаТаблицы.НДС;
			Проводка.Содержание  = "Реализация товаров в розницу";

			Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,           СтрокаТаблицы.Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
			
			//При розничной реализации весь товар считается оплаченным (ограничение при проведении)
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет",Перечисления.ВидыПлатежейВГосБюджет.Налог);

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
		КонецЕсли;

	КонецЦикла; // Для каждого СтрокаТаблицы из Выручка Цикл
	
	// {УчетДоходовИРасходовИП
	// Списание по партиям в налоговом учете предпринимателя
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
	
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		ДоходыИРасходыПредпринимателя.СписаниеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, 1, ТаблицаПоТоварамБезУслуг, "Субконто", "СчетУчета", "СчетУчета",, "СчетДоходов", Отказ);
		ДоходыИРасходыПредпринимателя.ОказаниеУслуг(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, ТаблицаПоУслугам, "Субконто", "СчетУчета");
	
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("КонецПериода", МоментВремени());
			Запрос.УстановитьПараметр("Контрагент", СтруктураШапкиДокумента.Склад);
			Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК ДокументОплаты,
			|	ПрочиеРасчетыОстатки.СуммаОстаток КАК Сумма
			|ИЗ
			|	РегистрНакопления.ПрочиеРасчеты.Остатки(
			|		&КонецПериода,
			|		Организация = &Организация
			|			И Контрагент = &Контрагент) КАК ПрочиеРасчетыОстатки
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПрочиеРасчетыОстатки.РасчетныйДокумент.МоментВремени";
			
			ТаблицаАвансов = Запрос.Выполнить().Выгрузить();
			
		Иначе
			ТаблицаАвансов = Новый ТаблицаЗначений;
			ТаблицаАвансов.Колонки.Добавить("ДокументОплаты");
			ТаблицаАвансов.Колонки.Добавить("Сумма");
			Аванс = ТаблицаАвансов.Добавить();
			Аванс.ДокументОплаты = СтруктураШапкиДокумента.Ссылка;
			Аванс.Сумма = Выручка.Итог("Сумма") - ТаблицаОплата.Итог("СуммаОплаты");
		КонецЕсли;
		
		ДоходыИРасходыПредпринимателя.ЗачетОплатыПокупателя(ЭтотОбъект, СтруктураШапкиДокумента, Движения.ИПМПЗОтгруженные.Выгрузить(), ТаблицаАвансов);
	КонецЕсли;
	// }УчетДоходовИРасходовИП

	УчетНДСФормированиеДвижений.ОтразитьНДСНалоговогоАгентаКомиссионер(СтруктураШапкиДокумента, Выручка, Движения);
	
	//Зачитываем аванс по комиссионным товарам по счету комиссии
	Выручка.Индексы.Добавить("Комиссионный");
	ВыручкаКомиссия = Выручка.Скопировать(Новый Структура("Комиссионный", Истина));

	ВыручкаКомиссия.Свернуть("Комитент,ДоговорКомиссии,ВалютаРасчетовСКомитентом,СчетРасчетовСКомитентом,СчетРасчетовПоАвансамСКомитентом",
		"Сумма, СуммаБУ, СуммаВал");
	Если ВыручкаКомиссия.Количество()>0 тогда
		УправлениеВзаиморасчетами.ЗачестьАвансПоРасчетамСКомитентом(ЭтотОбъект,СтруктураШапкиДокумента,ВыручкаКомиссия,Отказ,Заголовок);
	КонецЕсли;

	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);
	
	// Учет товаров по номерам ГТД
	УправлениеЗапасами.ПроведениеДокументаСписанияПоСчетуГТД(ЭтотОбъект, ТаблицаПоТоварам);
	
	// Учет реализованных услуг
	ДвиженияПоРегиструРеализацияУслуг(СтруктураШапкиДокумента, ДатаДока, ТаблицаПоУслугам);
	
	// Учет агентских услуг
	ДвиженияПоРегиструАгентскихУслуг(СтруктураШапкиДокумента, ТаблицаПоАгентскимУслугам);
	
	ДвиженияПоРаспределениюОплат(СтруктураШапкиДокумента, ТаблицаОплата, ТаблицаВыручки);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ПереоценкаАТТВПродажныхЦенах(СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Ссылка.Дата, УчетнаяПолитикаНеЗадана, Ссылка.Организация);
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитика.Количество() > 0 Тогда	
		Если (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;
	Если мУчетВПродажныхЦенах И СтруктураШапкиДокумента.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		
		Проводки = Движения.Хозрасчетный;
		
		Для Каждого Строка из ТаблицаПоТоварам Цикл
			
			Если УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(Строка.СчетУчета) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Партия Из Строка.СписанныеПартии Цикл
				Если Партия.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				УчетнаяЦена = Партия.СуммаСписания;
				СуммаПродажи = Строка.Сумма;
				СуммаПереоценки = (СуммаПродажи * Партия.Количество / Строка.Количество) - (УчетнаяЦена);
				
				Если СуммаПереоценки <> 0 Тогда
					Проводка = Проводки.Добавить();
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Переоценка товаров в рознице";
					
					Проводка.СчетДт      = Строка.СчетУчета;
					Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
					
					Проводка.Сумма       = СуммаПереоценки;
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
					//Списание результата переоценки продаваемого товара
					Проводка = Проводки.Добавить();
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Переоценка товаров в рознице";
					
					Проводка.СчетКт      = Строка.СчетУчета;
					Проводка.СчетДт      = Строка.КорСчетСписания;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.КорСубконтоСписания1);
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
					
					Проводка.Сумма       = СуммаПереоценки;
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
				КонецЕсли;
			КонецЦикла;
									
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Выполняет сторнирование выручки после того как она принята с помощь ПКО без учета ставок налогов
//
Процедура СторноРозничнойВыручкиПКОПоПокупнымЦенам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОплата, Проводки, СчетДт, ДатаДока, Отказ, Заголовок)
	
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация);
	КассаВВалюте = СчетДт.Валютный;
	НоменклатурнаяГруппаВыручки = СтруктураШапкиДокумента.Склад.НоменклатурнаяГруппа;
	
	//Установим управляемые блокировки
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, ДатаДока)); 
		ЗначенияБлокировки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, 	СтруктураШапкиДокумента.Склад); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		ЗначенияБлокировки.Вставить("Подразделение", СтруктураШапкиДокумента.ПодразделениеОрганизации);
		ЗначенияБлокировки.Вставить("Счет", ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручка);
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, );
		
		ЗначенияБлокировки.Вставить("Счет", ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручке);
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, );
		
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период"     , Новый Граница(Новый МоментВремени(ДатаДока, Ссылка) ,ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Склад"      , СтруктураШапкиДокумента.Склад);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Подразделение", СтруктураШапкиДокумента.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("СчетСуммы"  , ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручка);
	Запрос.УстановитьПараметр("СчетНДС"    , ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручке);
	Запрос.УстановитьПараметр("ПустоеНДС"  , Перечисления.СтавкиНДС.ПустаяСсылка());
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОстаткиПоСуммам.Субконто1 КАК Склад,
	|	ОстаткиПоСуммам.Субконто2 КАК СтавкаНДС,
	|	ВЫБОР КОГДА (ОстаткиПоСуммам.СуммаОстатокДт) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиПоСуммам.СуммаОстатокДт КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА (ОстаткиПоНДС.СуммаОстатокДт)    ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиПоНДС.СуммаОстатокДт    КОНЕЦ КАК СуммаНДС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &СчетСуммы, , Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL) И Субконто1 = &Склад) КАК ОстаткиПоСуммам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &СчетНДС, , Организация = &Организация И Субконто1 = &Склад) КАК ОстаткиПоНДС
	|		ПО ОстаткиПоСуммам.Субконто1 = ОстаткиПоНДС.Субконто1 И ОстаткиПоСуммам.Субконто2 = ОстаткиПоНДС.Субконто2";
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	СуммаОстаткаВыручки = ТаблицаОстатков.Итог("Сумма");
	СуммаКСравнению = ТаблицаПоТоварам.Итог("Сумма");
	
	//Учтем оплаты по платежным картам и кредитам
	Для Каждого СтрокаТаблицы Из ТаблицаОплата Цикл
		Если СтрокаТаблицы.ВидОплаты.ТипОплаты = Перечисления.ТипыОплат.БанковскийКредит 
			ИЛИ СтрокаТаблицы.ВидОплаты.ТипОплаты = Перечисления.ТипыОплат.ПлатежнаяКарта Тогда
			
			СуммаКСравнению = СуммаКСравнению - СтрокаТаблицы.СуммаОплаты;
		КонецЕсли;
	КонецЦикла;
	
	// Если СуммаОстаткаВыручки > 0 Тогда нам нужно сделать сторнирование и перераспределение
	// выручки - т.е. у нас есть выручка с НТТ - т.е. сначала ввели ПКО, потом отчет ККМ
	
	Если СуммаОстаткаВыручки <= 0 Тогда 
		
		Если СуммаКСравнению > 0 Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Нет доступной розничной выручки.", Отказ, Заголовок);
			
		КонецЕсли;
		
	Иначе
		// т.е. есть ПКО не закрытые Отчетами ККМ
		
		// Сторнирование выручку по кассе - проводки 50.01 - 90.01
		
		Если СуммаКСравнению > СуммаОстаткаВыручки Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Доступной розничной выручки для продаж " + СуммаОстаткаВыручки +". 
			|сначала оприходуйте недостающую розничную выручку с помощью ПКО. ", Отказ, Заголовок);
			
		КонецЕсли;
		
		МожноРаспределить = СуммаКСравнению;
		
		Для каждого СтрокаТЧ из ТаблицаОстатков Цикл
			
			Если МожноРаспределить = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если МожноРаспределить >= СтрокаТЧ.Сумма Тогда
				КРаспределению    = СтрокаТЧ.Сумма;
				СуммаНДС          = СтрокаТЧ.СуммаНДС;
				МожноРаспределить = МожноРаспределить - КРаспределению;
			Иначе
				КРаспределению    = МожноРаспределить;
				СуммаНДС          = СтрокаТЧ.СуммаНДС * (МожноРаспределить / СтрокаТЧ.Сумма);
				МожноРаспределить = 0;
			КонецЕсли;
			
			// Сторно выручки
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = - (КРаспределению);
			Проводка.Содержание   = "Реализация товаров в розницу";
			
			Проводка.СчетДт       = СтруктураШапкиДокумента.СчетКасса;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
			
			Если ПараметрыУчетнойПолитики.РозничнаяТорговляОблагаетсяЕНВД Тогда
				Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД;
			Иначе
				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТЧ.СтавкаНДС);
			КонецЕсли;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы",  НоменклатурнаяГруппаВыручки);
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-КРаспределению, -(КРаспределению - СуммаНДС), , , , , Проводка);
			
			Если КассаВВалюте Тогда
				Проводка.ВалютаДт         = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт  = Проводка.Сумма / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента;
			КонецЕсли;
			
			// Сторно НДС, если оно есть
			Если НЕ (СуммаНДС = 0) Тогда
				
				Проводка = Проводки.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма        = - СуммаНДС;
				Проводка.Содержание   = "Реализация товаров в розницу";
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.Продажи_НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.СтавкаНДС);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы",  НоменклатурнаяГруппаВыручки);
				
				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
			КонецЕсли; // Если НЕ (СуммаНДС = 0) Тогда
			
		КонецЦикла; // Для каждого СтрокаТЧ из ТаблицаОстатков Цикл
		
		// Сторнирование выручку по кассе завершено
		
		// Сторнирование выручки оприходованной ПКО - счета РВ.1 и РВ.2
		
		Если СуммаОстаткаВыручки >= СуммаКСравнению Тогда
			МожноРаспределить = СуммаКСравнению;
		Иначе
			МожноРаспределить = СуммаОстаткаВыручки;
		КонецЕсли;
		
		Для каждого СтрокаТЧ из ТаблицаОстатков Цикл
			
			Если МожноРаспределить = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаТЧ.Сумма >= МожноРаспределить Тогда
				КРаспределению    = МожноРаспределить;
				СуммаНДС          = СтрокаТЧ.СуммаНДС * (МожноРаспределить / СтрокаТЧ.Сумма);
				МожноРаспределить = 0;
			Иначе
				КРаспределению    = СтрокаТЧ.Сумма;
				СуммаНДС          = СтрокаТЧ.СуммаНДС;
				МожноРаспределить = МожноРаспределить - КРаспределению;
			КонецЕсли;
			
			// Отсторнируем счета по учету выручки РВ
			Проводка = Проводки.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = Организация;
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручка;
			Проводка.СубконтоДт.Склады    = СтруктураШапкиДокумента.Склад;
			Проводка.СубконтоДт.СтавкиНДС = СтрокаТЧ.СтавкаНДС;
			Проводка.Содержание  = "Реализация товаров в розницу";
			Проводка.Сумма       = - КРаспределению;
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");
			
			Если СуммаНДС > 0 Тогда
				
				Проводка = Проводки.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Реализация товаров в розницу";
				Проводка.Сумма       = - СуммаНДС;
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручке;
				Проводка.СубконтоДт.Склады    = СтруктураШапкиДокумента.Склад;
				Проводка.СубконтоДт.СтавкиНДС = СтрокаТЧ.СтавкаНДС;
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");
				
			КонецЕсли; // Если СуммаНДС > 0 Тогда
			
		КонецЦикла; // Для каждого СтрокаТЧ из ТаблицаОстатков Цикл
		
		// Сторнирование выручки оприходованной ПКО завершено
		
		// Перераспределение выручки согласна фактическим ставкам НДС
		
		Если СуммаОстаткаВыручки >= СуммаКСравнению Тогда
			МожноРаспределить = СуммаКСравнению;
		Иначе
			МожноРаспределить = СуммаОстаткаВыручки;
		КонецЕсли;
		
		Для каждого СтрокаТЧ из ТаблицаПоТоварам Цикл
			
			Если МожноРаспределить = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаТЧ.Сумма >= МожноРаспределить Тогда
				КРаспределению    = МожноРаспределить;
				СуммаНДС          = УчетНДС.РассчитатьСуммуНДС(МожноРаспределить, Истина, Истина,УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
				МожноРаспределить = 0;
			Иначе
				КРаспределению    = СтрокаТЧ.Сумма;
				СуммаНДС          = СтрокаТЧ.НДС;
				МожноРаспределить = МожноРаспределить - КРаспределению;
			КонецЕсли;
			
			// Отсторнируем счета по учету выручки РВ
			Проводка = Проводки.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = Организация;
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручка;
			Проводка.СубконтоДт.Склады    = СтруктураШапкиДокумента.Склад;
			Проводка.СубконтоДт.СтавкиНДС = СтрокаТЧ.СтавкаНДС;
			Проводка.Содержание  = "Реализация товаров в розницу";
			Проводка.Сумма       = КРаспределению;
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");
			
			Если СуммаНДС > 0 Тогда
				
				Проводка = Проводки.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Реализация товаров в рознице";
				Проводка.Сумма       = СуммаНДС;
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручке;
				Проводка.СубконтоДт.Склады    = СтруктураШапкиДокумента.Склад;
				Проводка.СубконтоДт.СтавкиНДС = СтрокаТЧ.СтавкаНДС;
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Дт");
				
			КонецЕсли; // Если СуммаНДС > 0 Тогда
			
			// Закрытие счетов РВ - кредитовые проводки
			Проводка = Проводки.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = Организация;
			Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручка;
			Проводка.СубконтоКт.Склады    = СтруктураШапкиДокумента.Склад;
			Проводка.СубконтоКт.СтавкиНДС = СтрокаТЧ.СтавкаНДС;
			Проводка.Содержание  = "Реализация товаров в розницу";
			Проводка.Сумма       = КРаспределению;
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Кт");
			
			Если СтрокаТЧ.НДС > 0 Тогда
				
				Проводка = Проводки.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Реализация товаров в розницу";
				Проводка.Сумма       = СуммаНДС;
				Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручке;
				Проводка.СубконтоКт.Склады    = СтруктураШапкиДокумента.Склад;
				Проводка.СубконтоКт.СтавкиНДС = СтрокаТЧ.СтавкаНДС;
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, "Кт");
				
			КонецЕсли; // Если СуммаНДС > 0 Тогда
			
		КонецЦикла; // Для каждого СтрокаТЧ из ТаблицаСуммНДС Цикл
		
		// Перераспределение выручки согласна фактическим ставкам НДС
		
	КонецЕсли; // Если СуммаОстаткаВыручки > 0 Тогда // т.е. есть ПКО не закрытые Отчетами ККМ
		
КонецПроцедуры

// Выполняет сторнирование выручки после того как она принята с помощь ПКО без учета ставок налогов
//
Процедура СторноРозничнойВыручкиПКОПоПродажнымЦенам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОплата, СторноНДСРозничнойВыручки, Проводки, СчетДт, ДатаДока, Отказ, Заголовок)
	
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация);
	КассаВВалюте = СчетДт.Валютный;
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	РазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	
	ВидыСубконто = Новый Массив;
	Если РазделятьПоСтавкамНДС Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
	КонецЕсли;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	СчетаУчетаВНТТ = БухгалтерскийУчет.ПолучитьСчетаУчетаВНТТ(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Склад, СтруктураШапкиДокумента.Дата, мУчетнаяПолитика);
	
	НоменклатурнаяГруппаВыручки = СтруктураШапкиДокумента.Склад.НоменклатурнаяГруппа;
	СчетВыручки					= СчетаУчетаВНТТ.СчетДоходовОтРеализации;
	СчетСебестоимости 			= СчетаУчетаВНТТ.СчетРасходовОтРеализации;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНач"    , НачалоМесяца(ДатаДока));
	Запрос.УстановитьПараметр("ДатаКон"    , ДатаДока);
	Запрос.УстановитьПараметр("Склад"      , СтруктураШапкиДокумента.Склад);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Розница"    , Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	Запрос.УстановитьПараметр("Истина"     , Истина);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ПриходныйКассовыйОрдер.СуммаПлатежа) КАК СуммаПлатежа,
	|	ПриходныйКассовыйОрдер.СтавкаНДС,
	|	СУММА(ПриходныйКассовыйОрдер.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПриходныйКассовыйОрдер.Ссылка.Организация = &Организация
	|	И ПриходныйКассовыйОрдер.Ссылка.ВидОперации = &Розница
	|	И ПриходныйКассовыйОрдер.Ссылка.ВыручкаСНТТ = &Истина
	|	И ПриходныйКассовыйОрдер.Ссылка.Контрагент = &Склад
	|	И ПриходныйКассовыйОрдер.Ссылка.Проведен = &Истина
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйКассовыйОрдер.СтавкаНДС";

	ТаблицаВыручки = Запрос.Выполнить().Выгрузить();
	ТаблицаВыручки.Индексы.Добавить("СтавкаНДС");
	
	СуммаВыручки = ТаблицаВыручки.Итог("СуммаПлатежа");
	СуммаКСравнению = ТаблицаПоТоварам.Итог("Сумма");
	
	//Учтем оплаты по платежным картам и кредитам
	Для Каждого СтрокаТаблицы Из ТаблицаОплата Цикл
		Если СтрокаТаблицы.ВидОплаты.ТипОплаты = Перечисления.ТипыОплат.БанковскийКредит 
			ИЛИ СтрокаТаблицы.ВидОплаты.ТипОплаты = Перечисления.ТипыОплат.ПлатежнаяКарта Тогда
			
			СуммаКСравнению = СуммаКСравнению - СтрокаТаблицы.СуммаОплаты;
		КонецЕсли;
	КонецЦикла;
	
	// Если СуммаВыручки > 0 Тогда нам нужно сделать сторнирование и переаспределение
	// выручки - т.е. у нас есть выручка с НТТ - т.е. сначала ввели ПКО, потом отчет ККМ
	
	Если СуммаВыручки <= 0 Тогда 
		Если СуммаКСравнению > 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Нет доступной розничной выручки.", Отказ, Заголовок);//Отказ
		КонецЕсли;
	Иначе
		Если СуммаКСравнению > СуммаВыручки Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Доступной розничной выручки для продаж " + СуммаВыручки +". 
			|сначала оприходуйте недостающую розничную выручку с помощью ПКО. ", Отказ, Заголовок); //Отказ
		КонецЕсли;
		
		ТаблицаПоСтавкамНДС = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоСтавкамНДС.Свернуть("СтавкаНДС", "Сумма, НДС");
		Для каждого СтрокаТЧ из ТаблицаПоСтавкамНДС Цикл
			
			КРаспределению = СтрокаТЧ.Сумма;
			
			Пока КРаспределению > 0 Цикл
				Если ТаблицаВыручки.Количество() = 0 Тогда
					Прервать;
				КонецЕсли;
				
				СтрокаВыручки = ТаблицаВыручки.Найти(Перечисления.СтавкиНДС.ПустаяСсылка(), "СтавкаНДС");
				Если СтрокаВыручки = Неопределено Тогда
					СтрокаВыручки = ТаблицаВыручки.Найти(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
					Если СтрокаВыручки = Неопределено Тогда
						СтрокаВыручки = ТаблицаВыручки.Найти(СтрокаТЧ.СтавкаНДС, "СтавкаНДС");
						Если СтрокаВыручки = Неопределено Тогда
							СтрокаВыручки = ТаблицаВыручки[0];
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если КРаспределению >= СтрокаВыручки.СуммаПлатежа Тогда
					КСписанию 					= СтрокаВыручки.СуммаПлатежа;
					СуммаНДС 					= СтрокаВыручки.СуммаНДС;
					СтрокаВыручки.СуммаПлатежа 	= 0;
					СтрокаВыручки.СуммаНДС 		= 0;
				Иначе
					КСписанию 					= КРаспределению;
					СуммаНДС 					= ?(СтрокаВыручки.СуммаПлатежа = 0, 0, СтрокаВыручки.СуммаНДС * КРаспределению / СтрокаВыручки.СуммаПлатежа);
					СтрокаВыручки.СуммаПлатежа 	= СтрокаВыручки.СуммаПлатежа - КСписанию;
					СтрокаВыручки.СуммаНДС 		= СтрокаВыручки.СуммаНДС - СуммаНДС;
				КонецЕсли;
								
				КРаспределению = КРаспределению - КСписанию;
				
				// Формируем сторнирующие проводки
				Проводка = Проводки.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Реализация товаров в розницу";
				Проводка.СчетДт      = СтруктураШапкиДокумента.СчетКасса;
				Проводка.СчетКт  = СчетВыручки;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы",  НоменклатурнаяГруппаВыручки);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  СтрокаВыручки.СтавкаНДС);
				Проводка.Сумма       = - КСписанию;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-КСписанию, -(КСписанию - СуммаНДС), , , , , Проводка);
				
				//сторно списания товаров по продажным ценам
				Проводка = Проводки.Добавить();
				Проводка.Период      = ДатаДока;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Реализация товаров в розницу";
				Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  СтрокаВыручки.СтавкаНДС);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
				Проводка.СчетДт  = СчетСебестоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы",  НоменклатурнаяГруппаВыручки);
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
				Проводка.Сумма       = - КСписанию;
				
				//НДС
				Если КСписанию <> 0 Тогда
					СтрокаСторноНДС 			= СторноНДСРозничнойВыручки.Добавить();
					СтрокаСторноНДС.СтавкаНДС 	= СтрокаВыручки.СтавкаНДС;
					СтрокаСторноНДС.Сумма 		= КСписанию;
					СтрокаСторноНДС.НДС 		= СуммаНДС;
				КонецЕсли;
				
				Если СуммаНДС > 0 Тогда
					
					Проводка = Проводки.Добавить();
					Проводка.Период      = ДатаДока;
					Проводка.Организация = Организация;
					Проводка.Содержание  = "Реализация товаров в розницу";
					
					Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.Продажи_НДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы",  НоменклатурнаяГруппаВыручки);
					Проводка.СубконтоДт.СтавкиНДС = СтрокаВыручки.СтавкаНДС;
					Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.НДС;
					Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
					Проводка.Сумма       = - СуммаНДС;
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
				КонецЕсли;
				
				Если СтрокаВыручки.СуммаПлатежа = 0 Тогда
					ТаблицаВыручки.Удалить(СтрокаВыручки);
				Конецесли;
			КонецЦикла;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки,Отказ, Заголовок,ОтработкаДвиженийПоПартиям = Ложь)

	Если ОтработкаДвиженийПоПартиям И СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.УпрощенныйУчетНДС И Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		//Отработка по партиям НДС не требуется. 
		Возврат;
	КонецЕсли;
	
	Если ОтработкаДвиженийПоПартиям Тогда
		Если ТаблицаВыручки.Количество() = 0 Тогда
			//Отработка по партиям НДС не требуется. 
			Возврат;
		КонецЕсли; 
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах и мУчетВПродажныхЦенах Тогда
			//Отработка по партиям НДС не требуется. 
			Возврат;
		КонецЕсли; 
		
		/////////////////////////////////////////////////////////////////////////////////
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		ТаблицаНДСПартииСписания = УчетНДС.ПодготовитьТаблицуСписанияПартийДляНДС(СтруктураШапкиДокумента, ТаблицаВыручки, Отказ, Заголовок);
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		/////////////////////////////////////////////////////////////////////////////////
		
		Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
			//Партии не найдены или отражение в партионном учете НДС не производится.
			//Дальнейшая обработка не требуется
		    Возврат;
		КонецЕсли; 

		// Получим таблицу значений, совпадающую со структурой набора записей регистра НДСПартии.
		ТаблицаДвиженийПартии = Движения.НДСПоПриобретеннымЦенностям.ВыгрузитьКолонки();
		Движения.НДСПоПриобретеннымЦенностям.мПериод          = Дата;
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания,  ТаблицаДвиженийПартии, Истина, Движения.Хозрасчетный, Заголовок, Движения);
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания,  ТаблицаДвиженийПартии, Ложь, Движения.Хозрасчетный, Заголовок, Движения);
		
		// Занесем в регистр переквалификацию партий (включение/исключение НДС из стоимости)
		Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
			Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
			Движения.НДСПоПриобретеннымЦенностям.ВыполнитьПриход();
		КонецЕсли;
		// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
		/////////////////////////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////////////////////
		// Проверим на отсутствие ставки 0%
		ТаблицаНДСПартииСписания.Индексы.Добавить("ДействияНДСПокупки_ПредположениеСтавки0");
		СтрокиПредположения0 = ТаблицаНДСПартииСписания.НайтиСтроки(Новый структура("ДействияНДСПокупки_ПредположениеСтавки0",Истина));
		Если СтрокиПредположения0.Количество()>0 Тогда
			// Реализация со ставкой 0% в розничной торговле не отрабатывается
			ОбщегоНазначения.СообщитьОбОшибке("При реализации в розницу использование ставки НДС 0% не обрабатывается.",,Заголовок, СтатусСообщения.Внимание);
		КонецЕсли; 
		// Проверим на отсутствие ставки 0%
		/////////////////////////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС по партиям - отразить непосредственное списание.
		ТаблицаДвиженийПартии.Очистить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
		Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
		Движения.НДСПоПриобретеннымЦенностям.ВыполнитьРасход();
		// НДС по партиям - отразить непосредственное списание.
		/////////////////////////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС по ОС - при списании ТМЦ они могут перестать принадлежать к будущим ОС,
		// в этом случае необходимо снять блокировку с вычета.
		// Если в результате перемещения ТМЦ будет отнесено на счет учета ОС, необходимо включить блокировку.
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, Движения.НДСПоПриобретеннымЦенностям.Выгрузить(), Движения, Отказ);
		// НДС по ОС
		/////////////////////////////////////////////////////////////////////////////////
		
		//Все необходимые действия на данном этапе отработаны.
	Иначе
		
		ТаблицаАвансов = Новый ТаблицаЗначений;
		ТаблицаАвансов.Колонки.Добавить("ДокументРасчетов");
		ТаблицаАвансов.Колонки.Добавить("ДатаДокументаРасчетов");
		ТаблицаАвансов.Колонки.Добавить("СуммаБУ");
		НоваяСтрока = ТаблицаАвансов.Добавить();
		НоваяСтрока.ДатаДокументаРасчетов = СтруктураШапкиДокумента.Дата;
		НоваяСтрока.СуммаБУ = СтруктураШапкиДокумента.СуммаДокумента;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах и мУчетВПродажныхЦенах Тогда
				
			ТаблицаВыручкиДляНДС = ТаблицаВыручки.Скопировать();
			ТаблицаВыручкиДляНДС.Колонки.Добавить("ВидЦенности");
			ТаблицаВыручкиДляНДС.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.Товары,"ВидЦенности");
			
			СчетаУчетаВНТТ = БухгалтерскийУчет.ПолучитьСчетаУчетаВНТТ(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Склад, СтруктураШапкиДокумента.Дата, мУчетнаяПолитика);
	        	
			ТаблицаВыручкиДляНДС.Колонки.Добавить("СчетДоходов");
			ТаблицаВыручкиДляНДС.ЗаполнитьЗначения(СчетаУчетаВНТТ.СчетДоходовОтРеализации,"СчетДоходов");
				
			ТаблицаВыручкиДляНДС.Колонки.Добавить("Ценность", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
				
			ТаблицаВыручкиДляНДС.Колонки.Добавить("СуммаВал",		ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			ТаблицаВыручкиДляНДС.ЗагрузитьКолонку(ТаблицаВыручкиДляНДС.ВыгрузитьКолонку("Сумма"),"СуммаВал");
				
			ТаблицаВыручкиДляНДС.Колонки.Добавить("НДСВал",			ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			ТаблицаВыручкиДляНДС.ЗагрузитьКолонку(ТаблицаВыручкиДляНДС.ВыгрузитьКолонку("НДС"),"НДСВал");
				
			ТаблицаВыручкиДляНДС.Колонки.Добавить("СуммаБезНДС",	ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			ТаблицаВыручкиДляНДС.Колонки.Добавить("СуммаБезНДСВал",	ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				
			СторнируемыеКолонки = Новый Структура("Сумма,НДС,СуммаВал,НДСВал");
			Для каждого СтрокаВыручки Из ТаблицаВыручкиДляНДС Цикл
				СтрокаВыручки.СуммаБезНДС = (-1)*(СтрокаВыручки.Сумма - СтрокаВыручки.НДС);
				СтрокаВыручки.СуммаБезНДСВал = СтрокаВыручки.СуммаБезНДС;
					
				Для каждого Колонка Из СторнируемыеКолонки Цикл
					СтрокаВыручки[Колонка.Ключ]= (-1)*СтрокаВыручки[Колонка.Ключ]; 
				КонецЦикла; 
			КонецЦикла; 
				
			Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
				ТаблицаВыручкиДляНДС.Колонки.Добавить("ДокументОплаты");
				ТаблицаВыручкиДляНДС.Колонки.Добавить("ДатаОплаты");
				ТаблицаВыручкиДляНДС.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "ДокументОплаты");
				ТаблицаВыручкиДляНДС.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ДатаОплаты");
				УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаВыручкиДляНДС, Движения, Отказ);
            Иначе
				СчетОтнесенияНДС = ПланыСчетов.Хозрасчетный.НДС;
				УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручкиДляНДС, Движения, Отказ, СчетОтнесенияНДС, ТаблицаАвансов);

			КонецЕсли;
			
		Иначе
			
			Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
				УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
            Иначе
				СчетОтнесенияНДС = ПланыСчетов.Хозрасчетный.НДС;
				УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ, СчетОтнесенияНДС, ТаблицаАвансов);
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

 // Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета УСН
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если НЕ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДопПараметров = Новый Структура("ТаблицаТМЦ", ТаблицаПоТоварам);
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, СтруктураДопПараметров);
		
КонецПроцедуры

Процедура ДвиженияПоРегиструРеализацияУслуг(СтруктураШапкиДокумента, ДатаДока, ТаблицаПоУслугам)
	
	Если  ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДатаДока, Ложь, СтруктураШапкиДокумента.Организация).ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРеализацияУслуг = Движения["РеализацияУслуг"];
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		СтрокаДвижения                       = ДвиженияРеализацияУслуг.Добавить();
		СтрокаДвижения.Период                = ДатаДока;
		СтрокаДвижения.Организация           = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.СчетРасходов          = СтрокаТаблицы.КорСчетСписания;
		СтрокаДвижения.НоменклатурнаяГруппа  = СтрокаТаблицы.Субконто;
		СтрокаДвижения.Сумма                 = СтрокаТаблицы.Сумма;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструАгентскихУслуг(СтруктураШапкиДокумента, ТаблицаПоАгентскимУслугам)
	
	Для Каждого СтрокаУслуги Из ТаблицаПоАгентскимУслугам Цикл
		
		Движение = Движения.РеализованныеТоварыКомитентов.ДобавитьПриход();
		Движение.Активность		 	= Истина;
		Движение.Период			= СтруктураШапкиДокумента.Дата;
		Движение.Организация 	= СтруктураШапкиДокумента.Организация;
		
		Движение.Контрагент		 	= СтрокаУслуги.Контрагент;
		Движение.ДоговорКонтрагента	= СтрокаУслуги.ДоговорКонтрагента;
		Движение.Номенклатура 		= СтрокаУслуги.Номенклатура;
		
		ДанныеОВалютеРасчетовСКомитентом = МодульВалютногоУчета.ПолучитьКурсВалюты(
			СтрокаУслуги.ВалютаРасчетовСКомитентом, СтруктураШапкиДокумента.Дата);
		Выручка = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаУслуги.СуммаБУ, 
			мВалютаРегламентированногоУчета, СтрокаУслуги.ВалютаРасчетовСКомитентом,
			1, ДанныеОВалютеРасчетовСКомитентом.Курс,
			1, ДанныеОВалютеРасчетовСКомитентом.Кратность);
		
		Движение.Количество 		= СтрокаУслуги.Количество;
		Движение.Выручка 			= Выручка;
		Движение.СуммаПоступления	= 0;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРаспределениюОплат(СтруктураШапкиДокумента, ТаблицаОплата, ТаблицаВыручки)
	
	Если ТаблицаОплата.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СчетКт       = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
	СчетНаличные = СтруктураШапкиДокумента.СчетКасса;
	Проводки   = Движения.Хозрасчетный;
	ДатаДока     = Дата;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
		
		ИтогоВыручка = ТаблицаВыручки.Итог("Сумма");
		
		Если ИтогоВыручка = 0 Тогда
		
			КоэффициентЕНВД     = 0;
			КоэффициентКомиссия = 0;
		
		Иначе
		
			ТаблицаВыручки.Индексы.Добавить("ЭтоДоходЕНВД");
			ТаблицаЕНВД     = ТаблицаВыручки.Скопировать(Новый Структура("ЭтоДоходЕНВД", Истина));
			КоэффициентЕНВД = ТаблицаЕНВД.Итог("Сумма") / ИтогоВыручка;
			
			ТаблицаВыручки.Индексы.Добавить("ЭтоДоходКомитента");
			ТаблицаКомиссия     = ТаблицаВыручки.Скопировать(Новый Структура("ЭтоДоходКомитента", Истина));
			КоэффициентКомиссия = ТаблицаКомиссия.Итог("Сумма") / ИтогоВыручка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОплата Цикл
		
		Если СтрокаТаблицы.СуммаОплаты = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Проводки.Добавить();
        Проводка.Период      = ДатаДока;
		Проводка.Организация = Организация;
		Проводка.Сумма       = СтрокаТаблицы.СуммаОплаты;
		
		ТипОплатыПоСтроке = СтрокаТаблицы.ВидОплаты.ТипОплаты;
		
		Если ТипОплатыПоСтроке = Перечисления.ТипыОплат.Наличные Тогда
			Проводка.СчетДт = СчетНаличные;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
			Проводка.Содержание = "Реализация товаров в розницу за наличную оплату";
			
		ИначеЕсли ТипОплатыПоСтроке = Перечисления.ТипыОплат.БанковскийКредит Тогда
			Проводка.СчетДт = СтрокаТаблицы.СчетУчетаРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаТаблицы.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
			Проводка.Содержание = "Реализация в розницу товаров, оплаченных банковским кредитом";
			
		ИначеЕсли ТипОплатыПоСтроке = Перечисления.ТипыОплат.ПлатежнаяКарта Тогда
			Проводка.СчетДт = СтрокаТаблицы.СчетУчетаРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаТаблицы.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
			Проводка.Содержание = "Реализация в розницу товаров, оплаченных платежной картой";
			
		КонецЕсли;
		
		Проводка.СчетКт = СчетКт;		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтруктураШапкиДокумента.Склад);
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
		Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН 
			И (ТипОплатыПоСтроке <> Перечисления.ТипыОплат.Наличные) Тогда

			ЕстьРасчетыПоДокументам = СтрокаТаблицы.СчетУчетаРасчетов.ВидыСубконто.Найти(
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто") <> Неопределено;
			
			СуммаОплатыЕНВД = Окр(СтрокаТаблицы.СуммаОплаты * КоэффициентЕНВД, 2);
			
			Если СуммаОплатыЕНВД <> 0 Тогда
			
				Проводка = Проводки.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = Организация;
				Проводка.Содержание   = "Задолженность по деятельности ЕНВД";

				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаТаблицы.ДоговорКонтрагента);
				Если ЕстьРасчетыПоДокументам Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
				Проводка.Сумма = СуммаОплатыЕНВД;

			КонецЕсли;
		
			СуммаОплатыКомиссия = Окр(СтрокаТаблицы.СуммаОплаты * КоэффициентКомиссия, 2);
			
			Если СуммаОплатыКомиссия <> 0 Тогда
			
				Проводка = Проводки.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = Организация;
				Проводка.Содержание   = "Задолженность за товары и услуги комитента";

				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаТаблицы.ДоговорКонтрагента);
				Если ЕстьРасчетыПоДокументам Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
				Проводка.Сумма = СуммаОплатыКомиссия;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаличнаяОплата = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") 
		+ УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "АгентскиеУслуги") 
		- ТаблицаОплата.Итог("СуммаОплаты");
	
	Если НаличнаяОплата <> 0 Тогда
		Проводка = Проводки.Добавить();
        Проводка.Период      = ДатаДока;
		Проводка.Организация = Организация;
		Проводка.Сумма       = НаличнаяОплата;
		Проводка.СчетДт = СчетНаличные;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
		Проводка.Содержание = "Реализация товаров в розницу за наличную оплату";
		Проводка.СчетКт = СчетКт;		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтруктураШапкиДокумента.Склад);
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ХозрасчетныйВидыСубконто.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|ГДЕ
		|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
		|	И ХозрасчетныйВидыСубконто.НомерСтроки = 1";
		
		СчетаСНоменклатурнымиГруппами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		СтруктураШапкиДокумента.Вставить("СчетаСНоменклатурнымиГруппами", СчетаСНоменклатурнымиГруппами);
	КонецЕсли;
	// }УчетДоходовИРасходовИП

КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоАгентскимУслугам, ТаблицаОплата) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"          , "Количество");
	СтруктураПолей.Вставить("Цена"                , "Цена");
	СтруктураПолей.Вставить("Сумма"               , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                 , "СуммаНДС");
	СтруктураПолей.Вставить("НомерГТД"            , "НомерГТД");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("СтранаПроисхождения" , "СтранаПроисхождения");
	СтруктураПолей.Вставить("СчетУчета",          "СчетУчета");
	СтруктураПолей.Вставить("СчетУчетаЗабалансовый", "СчетУчета.Забалансовый");
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации", "СчетУчетаНДСПоРеализации");
	СтруктураПолей.Вставить("СчетДоходов" ,       "СчетДоходов");
	СтруктураПолей.Вставить("Субконто" ,          "Субконто");
	СтруктураПолей.Вставить("СчетРасходов" ,      "СчетРасходов");
	СтруктураПолей.Вставить("ДокументОприходования", "ДокументОприходования");
	СтруктураПолей.Вставить("Себестоимость"		   , "Себестоимость");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Агентские услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"  , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"    , "Содержание");
	СтруктураПолей.Вставить("Услуга"        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"    , "Количество");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"     , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"           , "СуммаНДС");
	СтруктураПолей.Вставить("Контрагент" 	, "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");
	СтруктураПолей.Вставить("СчетРасчетов"	, "СчетРасчетов");
	СтруктураПолей.Вставить("СчетРасчетовПоАвансамСКомитентом", "СчетРасчетов");
	СтруктураПолей.Вставить("ВалютаРасчетовСКомитентом",        "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("Цена"		    , "Цена");
	

	РезультатЗапросаПоАгентскимУслугам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "АгентскиеУслуги", СтруктураПолей);
	ТаблицаПоАгентскимУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоАгентскимУслугам, СтруктураШапкиДокумента);
	ТаблицаПоАгентскимУслугам.Колонки.Добавить("ЭтоДоходКомитента");
	ТаблицаПоАгентскимУслугам.ЗаполнитьЗначения(Истина, "ЭтоДоходКомитента");
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоАгентскимУслугам, СтруктураШапкиДокумента, Истина);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Оплата".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("ВидОплаты"        	, "ВидОплаты");
	СтруктураПолей.Вставить("Контрагент"        , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");
	СтруктураПолей.Вставить("СчетУчетаРасчетов" , "СчетУчетаРасчетов");
	СтруктураПолей.Вставить("СуммаОплаты"       , "СуммаОплаты");
	
	ТаблицаОплата = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураПолей).Выгрузить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ИнвентаризацияТоваровНаСкладе = Основание;
		ВалютаДокумента               = мВалютаРегламентированногоУчета;

		ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойТипЦенПродажи");

		Если ЗначениеЗаполнено(Склад.ТипЦенРозничнойТорговли) Тогда
			ТипЦен = Склад.ТипЦенРозничнойТорговли;
		КонецЕсли;

		ЗаполнитьТоварыПоИнвентаризацииТоваров(Основание);

		Если ЗначениеЗаполнено(Склад) Тогда
			Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах;
			ИначеЕсли Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
				ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
			Иначе
				Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	
	УчетнаяПолитикаНеЗадана = Ложь;
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
	мРазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитика.Количество() > 0 Тогда	
		Если (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
	//	Оплата.Очистить();
	//КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "АгентскиеУслуги");

	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОплата, ТаблицаПоАгентскимУслугам;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

    ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоАгентскимУслугам, ТаблицаОплата);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаОплата, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиАгентскиеУслуги(ТаблицаПоАгентскимУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);

	
	// Движения по документу
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоАгентскимУслугам, ТаблицаОплата, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
ЕстьУчетПоСтатьямДДС 	  = УправлениеДенежнымиСредствами.ЕстьУчетПоСтатьямДДС();

