////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения

// Используется для определения необходимости установки суммовой скидки.
// При открытии устанавливается значение Истина, если порог скидки превышен.
Перем мСкидкаУстановлена Экспорт;

// Хранит текущую форму подбора номенклатуры
Перем мФормаПодбораНоменклатуры;

//Используется для определения необходимости заполнения счетов в документе
Перем мСклад;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит текущий вид операции
Перем мВидОперации;
 
//Используется для определения необходимости открытия настроек движения после сохранения
Перем ОткрыватьНастройкуДвижений;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.АгентскиеУслуги,ЭлементыФормы.КоманднаяПанельАгентскиеУслуги);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует список запросов для передачи в форму подбора.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора()

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ЗначениеЗаполнено(Склад) И (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
		СписокЗапросов.Добавить("ОстаткиНеавтоматизированнаяТорговаяТочка", "По остаткам и ценам номенклатуры в торговой точке");
	Иначе // Склад - простая розничная торговая точка
		СписокЗапросов.Добавить("ЦеныНоменклатуры",         "Цены номенклатуры");
		СписокЗапросов.Добавить("ОстаткиИЦеныНоменклатуры", "Остатки и цены номенклатуры");
	КонецЕсли;
	
	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбораНоменклатуры, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	ЕстьЦена  = Истина;

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам;
		ТипЦенДляЗапроса    = Склад.ТипЦенРозничнойТорговли;
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		ТипЦенДляЗапроса    = ТипЦен;
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", "ПодборВТабличнуюЧастьТовары");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора", СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"       , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"              , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"             , ТипЦенДляЗапроса);
	СтруктураПараметровПодбора.Вставить("Организация"        , Организация);
	// {ОбособленныеПодразделения
	СтруктураПараметровПодбора.Вставить("Подразделение"      , ПодразделениеОрганизации);
	// }ОбособленныеПодразделения
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента" , Неопределено);
	СтруктураПараметровПодбора.Вставить("Контрагент"         , Неопределено);

	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен", СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"           , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"    , ВалютаДокумента);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер);

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, мФормаПодбораНоменклатуры);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, Количество, Цена;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);

	Если Номенклатура.Услуга 
	   И Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка
	   И НЕ ЗначениеЗаполнено(Цена) Тогда

		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, Склад.ТипЦенРозничнойТорговли, Дата,
		                              ВалютаДокумента, 1, 1);
	Иначе
		Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                         ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

		// Для розницы цены хранятся с НДС - запрос возвращает уже корректную цену
		Если СпособЗаполненияЦен <> Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                СпособЗаполненияЦен,
			                                                ТипЦен.ЦенаВключаетНДС,
			                                                УчитыватьНДС,
			                                                СуммаВключаетНДС,
			                                                УчетНДС.ПолучитьСтавкуНДС(Номенклатура.СтавкаНДС));
		КонецЕсли;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура"    , Номенклатура);
	СтруктураОтбора.Вставить("Цена"            , Окр(Цена,2));

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		
		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		СтрокаТабличнойЧасти.Количество     = Количество;
		
		// Заполняем реквизиты табличной части.
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, Истина);
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 

		СтрокаТабличнойЧасти.Цена = Цена;

		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти, Ложь, Организация, Дата);

	КонецЕсли;

	ТабличнаяЧастьИмя = "Товары";
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 

	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

	// Заполним номер ГТД и страну происхождения
	ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти, Ложь, Организация, Дата);

КонецПроцедуры

// Процедура заполняет список доступных счетов касс.
//
Процедура ЗаполнитьСчетаКассы()

	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументы);
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал);
	
	ЭлементыФормы.СчетКасса.СписокВыбора = РаботаСДиалогами.ЗаполнитьСписокВыбораСчетовДенежныхСредств(МассивОтбора,,,МассивИсключений);

КонецПроцедуры // ЗаполнитьСчетаКассы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	УСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	ОСН_ЮрЛицо = (НЕ ОбщегоНазначения.Предприниматель(Организация, Дата) И НЕ УСН);
	Колонки = ЭлементыФормы.Товары.Колонки;
	КолонкиАгентскихУслуг 	= ЭлементыФормы.АгентскиеУслуги.Колонки;

	Колонки.СчетУчета.Видимость    = ПоказыватьВДокументахСчетаУчета;
	Колонки.СчетДоходов.Видимость  = ПоказыватьВДокументахСчетаУчета;
	Колонки.Субконто.Видимость     = ПоказыватьВДокументахСчетаУчета;
	Колонки.СчетРасходов.Видимость = ПоказыватьВДокументахСчетаУчета;
	
	КолонкиАгентскихУслуг.СчетРасчетов.Видимость    = ПоказыватьВДокументахСчетаУчета;
	
	Колонки.СчетУчетаНДСПоРеализации.Видимость = ПоказыватьВДокументахСчетаУчета И УчитыватьНДС;
	Колонки.СтавкаНДС.Видимость                = УчитыватьНДС;
	Колонки.СуммаНДС.Видимость                 = УчитыватьНДС;
	
	КолонкиАгентскихУслуг.СтавкаНДС.Видимость = УчитыватьНДС;
	КолонкиАгентскихУслуг.СуммаНДС.Видимость  = УчитыватьНДС;
	
	ВидимостьИнвентаризации = (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах);
	ЭлементыФормы.ИнвентаризацияТоваровНаСкладе.Видимость        = ВидимостьИнвентаризации;
	ЭлементыФормы.НадписьИнвентаризацияТоваровНаСкладе.Видимость = ВидимостьИнвентаризации;
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоИнвентаризации.Доступность = ВидимостьИнвентаризации;
	
	//ЭлементыФормы.ОсновнаяПанель.Страницы.Оплата.Видимость = (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах); 
	
	Если мУчетнаяПолитика.Количество() > 0 Тогда	
		Если мУчетнаяПолитика.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
			ЭлементыФормы.Товары.Колонки.ДокументОприходования.Видимость = Ложь;
			ЭлементыФормы.Товары.Колонки.ДокументОприходования.ИзменятьВидимость = Ложь;
		Иначе
			Если ЭлементыФормы.Товары.Колонки.Себестоимость.Видимость Тогда
				ЭлементыФормы.Товары.Колонки.ДокументОприходования.Видимость = Истина;
			КонецЕсли;
			ЭлементыФормы.Товары.Колонки.ДокументОприходования.ИзменятьВидимость = Истина;
		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы.СтатьяДвиженияДенежныхСредств.Видимость = ЕстьУчетПоСтатьямДДС;
	ЭлементыФормы.НадписьСтатьяДДС.Видимость 	  		  = ЕстьУчетПоСтатьямДДС;

КонецПроцедуры // УстановитьВидимость()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "АгентскиеУслуги"));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС") + АгентскиеУслуги.Итог("СуммаНДС"));
	
	ЭлементыФормы.Всего1.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "АгентскиеУслуги"));
	ЭлементыФормы.ВсегоНДС1.Значение = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС") + АгентскиеУслуги.Итог("СуммаНДС"));
	
	ЭлементыФормы.Всего2.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "АгентскиеУслуги"));
	ЭлементыФормы.ВсегоОплат.Значение = ОбщегоНазначения.ФорматСумм(Оплата.Итог("СуммаОплаты"));

	ВременнаяСтрока = "";

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
		ЭлементыФормы.НадписьВсего1.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
		ЭлементыФормы.НадписьВсего1.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
		ЭлементыФормы.НадписьВсегоНДС1.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
		ЭлементыФормы.НадписьВсегоНДС1.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		РаботаСДиалогами.ВыбратьВидОперации(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	    	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа",ПараметрОбъектКопирования);

		Если НЕ ЗначениеЗаполнено(СчетКасса) Тогда
			СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
		КонецЕсли;

		Если ЗначениеЗаполнено(Склад) Тогда 
			
			Если (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах) И 
				(НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
				Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
			
			Если (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах) И 
				(НЕ Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный) Тогда
				Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
		
		СуммаВключаетНДС = Истина;
		
	КонецЕсли;
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, УчетнаяПолитикаНеЗадана, Организация);
	
	УчетнаяПолитикаНеЗадана = Ложь;
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
	мРазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитика.Количество() > 0 Тогда	
		Если (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
    
	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ЕдиницаХранения");
	СтруктураКолонок.Вставить("СчетУчета");
	СтруктураКолонок.Вставить("СчетДоходов");
	СтруктураКолонок.Вставить("Субконто");
	СтруктураКолонок.Вставить("СчетРасходов");
	СтруктураКолонок.Вставить("СчетУчетаНДСПоРеализации");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("Контрагент");
	СтруктураКолонок.Вставить("ДоговорКонтрагента");
	СтруктураКолонок.Вставить("СчетРасчетов");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.АгентскиеУслуги.Колонки, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мСклад                = Склад;
	мВидОперации          = ВидОперации;	
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	ЗаполнитьСчетаКассы();

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Товары",	"Товары");
	Страницы.Добавить("Оплата",	"Оплата");
	Страницы.Добавить("АгентскиеУслуги",	"АгентскиеУслуги");

	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,,ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница,Страницы);

	
    // Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
      
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах[Кнопка.Имя];
	КонецЕсли;
	
	Если НЕ (ВидОперации = мВидОперации) Тогда
		
		Склад = Справочники.Склады.ПустаяСсылка();
		
	КонецЕсли;
	
	мВидОперации = ВидОперации;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		ИнвентаризацияТоваровНаСкладе = Документы.ИнвентаризацияТоваровНаСкладе.ПустаяСсылка();
	КонецЕсли;

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоИнвентаризации(Кнопка)

	ПредставлениеИнвентаризацияТоваровНаСкладе = ИнвентаризацияТоваровНаСкладе.Метаданные().Представление();

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ИнвентаризацияТоваровНаСкладе) Тогда

		ТекстПредупреждения = "Документ """ + ПредставлениеИнвентаризацияТоваровНаСкладе + """ не выбран.
		                      |Заполнение невозможно.";

	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Имя);
		Возврат;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		Товары.Очистить();
	КонецЕсли;

	ЗаполнитьТоварыПоИнвентаризацииТоваров(ИнвентаризацияТоваровНаСкладе);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнить()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	
	// Проверим нет ли среди складов указанных в табличной части НТТ. Если есть, то валюту и 
	// флаг включения НДС в сумму менять нельзя.
	
	МассивСкладов = Новый Массив();
	МассивСкладов.Добавить(Склад);

	// Этот запрос формирует список всех НТТ
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСклада",     Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	Запрос.УстановитьПараметр("МассивСкладов", МассивСкладов);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка
	|ИЗ Справочник.Склады
	|
	|ГДЕ Справочник.Склады.ВидСклада = &ВидСклада И
	|	 Справочник.Склады.Ссылка в (&МассивСкладов)";
	Выборка = Запрос.Выполнить().Выбрать();

	ЕстьНТТ = Ложь;
	Если Выборка.Следующий() Тогда
		ЕстьНТТ = Истина;
	КонецЕсли;

	СтруктураНередактируемыхРеквизитов = Новый Структура;

	Если ЕстьНТТ Тогда

		Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			СтруктураНередактируемыхРеквизитов.Вставить("ВалютаДокумента");
		КонецЕсли;

		Если СуммаВключаетНДС Тогда
			СтруктураНередактируемыхРеквизитов.Вставить("СуммаВключаетНДС");
		КонецЕсли;

	КонецЕсли;

	Если НЕ СчетКасса.Валютный Тогда
		СтруктураНередактируемыхРеквизитов.Вставить("ВалютаДокумента");
		СтруктураНередактируемыхРеквизитов.Вставить("КурсДокумента");
	КонецЕсли;

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураНередактируемыхРеквизитов, "Товары",Склад.ТипЦенРозничнойТорговли);

	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, мСкидкаУстановлена, СтруктураЗначений);
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// группового изменения значений реквизитов табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект       = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента      = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС             = УчитыватьНДС;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице    = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()


// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
          

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	//Открывает форму движений документа для ручного редактирования
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата);

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
    НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ИнвентаризацияТоваровНаСкладе".
//
Процедура ИнвентаризацияТоваровНаСкладеНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(Склад) Тогда
		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Документы.ИнвентаризацияТоваровНаСкладе.ПолучитьФормуВыбора(,Элемент,);

		ФормаВыбора.ДокументСписок.Отбор.Склад.Значение = Склад;
		ФормаВыбора.ДокументСписок.Отбор.Склад.Использование = Истина;
		
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;
		КонецЕсли;

		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ИнвентаризацияТоваровНаСкладе".
//
Процедура ИнвентаризацияТоваровНаСкладеПриИзменении(Элемент)

	Если ЗначениеЗаполнено(ИнвентаризацияТоваровНаСкладе) Тогда
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = ИнвентаризацияТоваровНаСкладе.Организация;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Склад = ИнвентаризацияТоваровНаСкладе.Склад;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Склад".
//
Процедура СкладПриИзменении(Элемент)

	Если ВалютаДокумента <> мВалютаРегламентированногоУчета ИЛИ (УчитыватьНДС И Не СуммаВключаетНДС) Тогда

		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда

			Предупреждение("Неавтоматизированная торговая точка не может быть выбрана, если валюта документа
			               |отлична от валюты регламентированного учета или НДС не включается в сумму!");

			Склад = Справочники.Склады.ПустаяСсылка();
            УстановитьВидимость();
			Возврат;
			
		КонецЕсли;

	КонецЕсли;

	УстановитьВидимость();
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// {ОбособленныеПодразделения
	ПодразделениеОрганизации = УправлениеПодразделениями.ПолучитьПодразделение(Организация, Склад);
    // }ОбособленныеПодразделения
	
	ТипЦен = Склад.ТипЦенРозничнойТорговли;
	
	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
    	
	Если мСклад = Элемент.Значение Тогда
		Возврат;
	КонецЕсли;

	Если ПоказыватьВДокументахСчетаУчета Тогда
		
		Ответ = Вопрос("Установить счета учета в соответствии со значениями по умолчанию?", 
		РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета при смене склада");
		
	Иначе
		
		Ответ = КодВозвратаДиалога.Да;
		
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьСчетаУчетаВТабЧасти(Товары, Истина);
		
	КонецЕсли;

	мСклад = Склад;


КонецПроцедуры // СкладПриИзменении()

Процедура СчетКассаПриИзменении(Элемент)

	Если ЭлементыФормы.СчетКасса.СписокВыбора.НайтиПоЗначению(СчетКасса) = Неопределено Тогда

		Сообщить("Счет "+СчетКасса+" не используется при учете наличных денежных средств.");

		СчетКасса = "";

		Возврат;

	КонецЕсли;

	Если Не СчетКасса.Валютный ИЛИ НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда

		ВалютаДокумента = мВалютаРегламентированногоУчета;

	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Товары.Колонки.Всего.Видимость	Тогда

	ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
	ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
	                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));

	КонецЕсли;

	// Если заполнен документ партии, то себестоимость будет браться из него.
	// Поэтому если колонка видна, будем выводить в нее текст.
	Если ЭлементыФормы.Товары.Колонки.ДокументОприходования.Видимость
	   И НЕ ЗначениеЗаполнено(ДанныеСтроки.ДокументОприходования) Тогда

		ОформлениеСтроки.Ячейки.ДокументОприходования.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ДокументОприходования.Текст           = "<Авто>";
		ОформлениеСтроки.Ячейки.Себестоимость.ТолькоПросмотр  = Истина;

	КонецЕсли;
	
	Если ЭлементыФормы.Товары.Колонки.Себестоимость.Видимость
	   И НЕ ЗначениеЗаполнено(ДанныеСтроки.Себестоимость) Тогда

		ОформлениеСтроки.Ячейки.Себестоимость.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Себестоимость.Текст           = "<Авто>";

	КонецЕсли;

	ОформлениеСтроки.Ячейки.СчетУчетаНДСПоРеализации.ОтметкаНезаполненного = (УчитыватьНДС И ДанныеСтроки.СуммаНДС <> 0 И Не ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДСПоРеализации));
	
	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, Истина);
	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ТоварыПриАктивизацииСтроки(Элемент);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Склад = СтрокаТабличнойЧасти.Склад;

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда

		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			СтандартнаяОбработка = Ложь;
			Предупреждение("Не выбран склад!"); 
			Возврат;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			СтандартнаяОбработка = Ложь;
			Предупреждение("Не выбрана позиция номенклатуры!"); 
			Возврат;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ТоварыЦенаНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчета
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура обработчик события "ПриИзменении" колонки "СчетДоходов"
// табличного поля "Товары"
//
Процедура ТоварыСчетДоходовПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	Счет   = СтрокаТЧ.СчетДоходов;

	Если Счет.ВидыСубконто.Количество() > 0 Тогда
		СтрокаТЧ.Субконто = Новый(Счет.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
		Если ТипЗнч(СтрокаТЧ.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			СтрокаТЧ.Субконто = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
		КонецЕсли;
	Иначе
		СтрокаТЧ.Субконто = Неопределено;
	КонецЕсли;

	ТоварыПриАктивизацииСтроки(Элемент);

КонецПроцедуры // ТоварыСчетДоходовПриИзменении()

// Процедура обработчик события "ОбработкаВыбора" колонки "СчетДоходов"
// табличного поля "Товары"
//
Процедура ТоварыСчетДоходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // ТоварыСчетДоходовОбработкаВыбора()

// Процедура обработчик события "ПриАктивизацииСтроки" табличного поля "Товары"
//
Процедура ТоварыПриАктивизацииСтроки(Элемент)

	Если ЭлементыФормы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Счет = ЭлементыФормы.Товары.ТекущиеДанные.СчетДоходов;

	ЭлементыФормы.Товары.Колонки.Субконто.Доступность = НЕ (НЕ ЗначениеЗаполнено(Счет) ИЛИ (Счет.ВидыСубконто.Количество() = 0));

КонецПроцедуры // ТоварыПриАктивизацииСтроки()

// Процедура обработчик события "НачалоВыбора" колонки "СчетДоходов"
// табличного поля "Товары"
//
Процедура ТоварыСчетДоходовНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь);

КонецПроцедуры // ТоварыСчетДоходовНачалоВыбора()

// Процедура обработчик события "ОбработкаВыбора" колонки "СчетУчетаНДСПоРеализации"
// табличного поля "Товары"
//
Процедура ТоварыСчетУчетаНДСПоРеализацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // ТоварыСчетУчетаНДСПоРеализацииОбработкаВыбора()

// Процедура - обработчик начала выбора номера ГТД
//
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеЗапасами.ОткрытьФормуВыбораНомераГТД(ЭлементыФормы.Товары, СтандартнаяОбработка, Ссылка, Организация, ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура, Дата);
	
КонецПроцедуры

// Процедура обработчик события "Начало выбора" поля "Склад"
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.Равно,   СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ОплатаВидОплатыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Оплата.ТекущиеДанные;
	СтрокаТабличнойЧасти.Контрагент = СтрокаТабличнойЧасти.ВидОплаты.Контрагент;
	СтрокаТабличнойЧасти.ДоговорКонтрагента = СтрокаТабличнойЧасти.ВидОплаты.ДоговорКонтрагента;
	СтрокаТабличнойЧасти.СчетУчетаРасчетов = СтрокаТабличнойЧасти.ВидОплаты.СчетУчетаРасчетов;
	
КонецПроцедуры

Процедура ОплатаВидОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Оплата.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.ВидыОплатОрганизаций.ПолучитьФормуВыбора(,Элемент,);
	
	ФормаВыбора.СправочникСписок.Отбор.Организация.Значение                            = Организация;
	ФормаВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
	ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	
	СписокТиповОплат = Новый СписокЗначений();
	СписокТиповОплат.Добавить(Перечисления.ТипыОплат.ПлатежнаяКарта);
	СписокТиповОплат.Добавить(Перечисления.ТипыОплат.БанковскийКредит);
	
	ФормаВыбора.СправочникСписок.Отбор.ТипОплаты.ВидСравнения                        = ВидСравнения.ВСписке;
	ФормаВыбора.СправочникСписок.Отбор.ТипОплаты.Значение                            = СписокТиповОплат;
	ФормаВыбора.СправочникСписок.Отбор.ТипОплаты.Использование                       = Истина;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ТипОплаты.Доступность = Ложь;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = СтрокаТабличнойЧасти.ВидОплаты;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ТоварыДокументОприходованияПриИзменении(Элемент)
	Строка = ЭлементыФормы.Товары.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(Строка.ДокументОприходования) Тогда
		Строка.Себестоимость = 0;
	КонецЕсли;
КонецПроцедуры

Процедура ТоварыДокументОприходованияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Строка = ЭлементыФормы.Товары.ТекущиеДанные;
	
	СтандартнаяОбработка    = Ложь;
	ФормаВыбора             = Документы.Партия.ПолучитьФормуВыбора(,Элемент,);
	ФормаВыбора.Организация = Организация;
	
	ФормаВыбора.Счет         = Строка.СчетУчета;
	ФормаВыбора.Номенклатура = Строка.Номенклатура;
	ФормаВыбора.Склад        = Склад;
	ФормаВыбора.ВидСубконто  = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	
	Если ЭтоНовый() Тогда
		ФормаВыбора.КонПериода         = КонецДня(РабочаяДата);
	Иначе
		ФормаВыбора.КонПериода         = Дата;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// {ОбособленныеПодразделения
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;

КонецПроцедуры
// }ОбособленныеПодразделения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ АГЕНТСКИЕ УСЛУГИ

// Процедура - обработчик события "ПриИзменении" поля ввода Номенклатура
// в строке табличной части "Услуги".
//
Процедура АгентскиеУслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.АгентскиеУслуги.ТекущиеДанные;

	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, 1);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура АгентскиеУслугиКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.АгентскиеУслуги.ТекущиеДанные, ЭтотОбъект, 1);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.АгентскиеУслуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура АгентскиеУслугиЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.АгентскиеУслуги.ТекущиеДанные, ЭтотОбъект, 1);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.АгентскиеУслуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиЦенаПриИзменении()            

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура АгентскиеУслугиСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.АгентскиеУслуги.ТекущиеДанные, ЭтотОбъект, 1);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.АгентскиеУслуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры// УслугиСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура АгентскиеУслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.АгентскиеУслуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиСтавкаНДСПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Услуги".
//
Процедура АгентскиеУслугиСчетРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

Процедура АгентскиеУслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ЭлементыФормы.АгентскиеУслуги.Колонки.Всего.Видимость Тогда

		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));

	КонецЕсли;
КонецПроцедуры

Процедура АгентскиеУслугиПринципалПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.АгентскиеУслуги.ТекущиеДанные;
	Если УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(СтрокаТабличнойЧасти.ДоговорКонтрагента,СтрокаТабличнойЧасти.Контрагент, Организация, Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		ПриИзмененииАгентскогоДоговора();
	КонецЕсли;
КонецПроцедуры

Процедура АгентскиеУслугиДоговорНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = ЭлементыФормы.АгентскиеУслуги.ТекущиеДанные;
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента,
											   СписокВидовДоговоров, СтандартнаяОбработка);
	ПриИзмененииАгентскогоДоговора();										   
КонецПроцедуры

Процедура АгентскиеУслугиДоговорПриИзменении(Элемент)
	ПриИзмененииАгентскогоДоговора();
КонецПроцедуры

Процедура ПриИзмененииАгентскогоДоговора()
	СтрокаТабличнойЧасти = ЭлементыФормы.АгентскиеУслуги.ТекущиеДанные;

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Контрагент) Тогда
		СтрокаТабличнойЧасти.Контрагент = СтрокаТабличнойЧасти.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);
    СтрокаТабличнойЧасти.СчетРасчетов = СчетаУчета.СчетРасчетовСКомитентом;
	
КонецПроцедуры

////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

