Перем СоответствиеВалютныеСпособыРасчета;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Добавляет строки в таблицы начислений на основе данных регистра сведений "ПлановыеНачисленияРаботниковОрганизаций"
//
// Параметры
//
Процедура ДобавитьСтрокиНачисленийПоРаботнику(Сотрудник, ДатаАктуальности = Неопределено) Экспорт
	
	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	Если ДатаАктуальности = Неопределено Тогда
		ДатаАктуальности = Дата
	КонецЕсли;
	
	ЗапросНачисления = Новый Запрос;
	ЗапросНачисления.УстановитьПараметр("Сотрудник", Сотрудник);
	ЗапросНачисления.УстановитьПараметр("Организация", ГоловнаяОрганизация);
	ЗапросНачисления.УстановитьПараметр("Период",  Дата);
	ЗапросНачисления.УстановитьПараметр("Регистратор", Ссылка);
	ЗапросНачисления.УстановитьПараметр("Прекратить", Перечисления.ВидыДействияСНачислением.Прекратить);
	
	ЗапросНачисления.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физлицо КАК Физлицо,
	|	Начисления.ВидРасчетаИзмерение КАК ВидРасчета,
	|	Начисления.Размер КАК Размер
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|		&Период,
	|		Сотрудник = &Сотрудник
	|		    И Регистратор <> &Регистратор
	|		    И Организация = &Организация) КАК Начисления";

	Выборка = ЗапросНачисления.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("Сотрудник, ВидРасчета, Действие");
	СтруктураПоиска.Действие   = Перечисления.ВидыДействияСНачислением.НеИзменять;
	
	Пока Выборка.Следующий() Цикл
		
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		МассивНачислений = ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
		
		Если МассивНачислений.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрокаТЧ	= ОсновныеНачисления.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ,Выборка);
		НоваяСтрокаТЧ.Действие		= Перечисления.ВидыДействияСНачислением.НеИзменять;
		НоваяСтрокаТЧ.ДатаДействия	= ДатаАктуальности;
		
		
	КонецЦикла;

КонецПроцедуры // ДобавитьСтрокиНачисленийПоРаботнику


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

// Удаляет строки начислений по РаботникиОрганизации
Процедура УдалитьСтрокиНачисленийПоРаботнику(ФизЛицо, Приказ) Экспорт
	
	СтруктураПоиска = Новый Структура("ФизЛицо, Приказ", ФизЛицо, Приказ);
	
	МассивСтрок = ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаТабличнойЧасти Из МассивСтрок Цикл
		ОсновныеНачисления.Удалить(СтрокаТабличнойЧасти); 
	КонецЦикла; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());


	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	|	Организация,
	|	ВЫБОР КОГДА Организация.ГоловнаяОрганизация = &ПустаяОрганизация ТОГДА Организация ИНАЧЕ Организация.ГоловнаяОрганизация КОНЕЦ КАК ГоловнаяОрганизация,
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	// Описание текста запроса:
	//
    // 1. Выборка "Начисления": 
	//		Объединяются строки ТЧ Начисления Сразу проверяем наличие строк-дублей.  
	// 2. Выборка "СуществующиеДвижения": 
	//		Проверяем на наличие существующих конфликтных движений в регистре сведений. 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.ВидСтроки,
	|	Начисления.НомерСтроки,
	|	Начисления.ФизЛицо,
	|	Начисления.Сотрудник.Наименование,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	Начисления.Действие,
	|	Начисления.ДатаДействия,
	|	Начисления.Размер,
	|	Начисления.КонфликтнаяСтрокаНомер,
	|	СуществующиеДвижения.Регистратор.Представление КАК КонфликтныйДокумент
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|		""Основные начисления"" КАК ВидСтроки,
	|		ТЧОсновныеНачисления.Сотрудник.Физлицо КАК ФизЛицо,
	|		ТЧОсновныеНачисления.Сотрудник КАК Сотрудник,
	|		ТЧОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|		ТЧОсновныеНачисления.ВидРасчета КАК ВидРасчетаИзмерение,
	|		ТЧОсновныеНачисления.Действие КАК Действие,
	|		ТЧОсновныеНачисления.ДатаДействия КАК ДатаДействия,
	|		ТЧОсновныеНачисления.ДатаДействияКонец КАК ДатаДействияКонец,
	|		ТЧОсновныеНачисления.Размер КАК Размер,
	|		МИНИМУМ(ПовторяющиесяСтроки.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|	ИЗ
	|		Документ.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ОсновныеНачисления КАК ТЧОсновныеНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ОсновныеНачисления КАК ПовторяющиесяСтроки
	|			ПО ТЧОсновныеНачисления.Сотрудник = ПовторяющиесяСтроки.Сотрудник
	|				И ТЧОсновныеНачисления.Ссылка = ПовторяющиесяСтроки.Ссылка
	|				И ТЧОсновныеНачисления.НомерСтроки < ПовторяющиесяСтроки.НомерСтроки
	|				И ТЧОсновныеНачисления.ВидРасчета = ПовторяющиесяСтроки.ВидРасчета
	|				И ТЧОсновныеНачисления.ДатаДействия = ПовторяющиесяСтроки.ДатаДействия
	|	ГДЕ
	|		ТЧОсновныеНачисления.Ссылка = &ДокументСсылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТЧОсновныеНачисления.НомерСтроки,
	|		ТЧОсновныеНачисления.Сотрудник.Физлицо,
	|		ТЧОсновныеНачисления.Сотрудник,
	|		ТЧОсновныеНачисления.ВидРасчета,
	|		ТЧОсновныеНачисления.Действие,
	|		ТЧОсновныеНачисления.ДатаДействия,
	|		ТЧОсновныеНачисления.ДатаДействияКонец,
	|		ТЧОсновныеНачисления.Размер,
	|		ТЧОсновныеНачисления.ВидРасчета) КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК СуществующиеДвижения
	|		ПО Начисления.Сотрудник = СуществующиеДвижения.Сотрудник
	|			И (СуществующиеДвижения.Организация = &ГоловнаяОрганизация)
	|			И Начисления.ДатаДействия = СуществующиеДвижения.Период
	|			И Начисления.ВидРасчетаИзмерение = СуществующиеДвижения.ВидРасчетаИзмерение";
			   
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) + """: ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Действие
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Действие) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задано действие!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
		
		// Вид расчета
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан вид расчета!", Отказ, Заголовок);
		КонецЕсли;
		
		// ДатаДействия
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаДействия) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задана дата действия!", Отказ, Заголовок);
		ИначеЕсли ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйДокумент) Тогда
			// Движения в регистре на дату из документа
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "на дату "+ ВыборкаПоСтрокамДокумента.ДатаДействия + " начисление уже зарегистрировано документом " + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!", Отказ, Заголовок);
		КонецЕсли;
		
		// Одинаковые строки
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер) Тогда
			СтрокаСообщениеОбОшибке = "работнику " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " назначено одно и тоже начисление дважды на одну и ту же дату (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли; 
		
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПлановыеНачисленияРаботниковОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, 
		  СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "", УчетнаяПолитикаПоПерсоналуОрганизации)

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "ПлановыеНачисленияРаботниковОрганизаций";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

		Если ВыборкаПоРаботникиОрганизации.Действие <> Перечисления.ВидыДействияСНачислением.НеИзменять тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                 = ВыборкаПоРаботникиОрганизации.ДатаДействия;
		
			// Измерения
			Движение.Сотрудник                = ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.Организация			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;			
			Движение.ВидРасчетаИзмерение = ВыборкаПоРаботникиОрганизации.ВидРасчета;
			
			// Ресурсы
			Движение.Размер				= ВыборкаПоРаботникиОрганизации.Размер;
			
		КонецЕсли;

	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	//СоответствиеВалютныеСпособыРасчета = ПолучитьСоответствиеСпособовРасчетаТребующихВалюту();
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента);
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");

			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамСведений,, УчетнаяПолитикаПоПерсоналуОрганизации);
					
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ОсновныеНачисления);
	
КонецПроцедуры // ПередЗаписью()


