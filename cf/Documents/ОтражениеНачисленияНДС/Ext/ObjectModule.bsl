Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет ТЧ Товары и Услуги по расчетному документу
//
Процедура ЗаполнитьПоРасчетномуДокументу(РежимДобавления) Экспорт

	Перем ВидыЦенностейПоСчетамУчета;
	
	Если НЕ ЗначениеЗаполнено(РасчетныйДокумент) тогда
		Возврат;
	КонецЕсли;

	Если ТоварыИУслуги.Количество() > 0 И Не РежимДобавления Тогда

		#Если Клиент Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 
		#КонецЕсли

		ТоварыИУслуги.Очистить();

	КонецЕсли;
	
	ТаблицаДокумента = УчетНДС.ПолучитьТаблицуДокументаНДС(РасчетныйДокумент, , Истина);
	Если ТаблицаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДокумента.Колонки.Найти("СуммаБезНДСВал") <> Неопределено Тогда
		Если ТаблицаДокумента.Колонки.Найти("Сумма") <> Неопределено Тогда
			ТаблицаДокумента.Колонки.Удалить("Сумма");
		КонецЕсли;
		ТаблицаДокумента.Колонки.СуммаБезНДСВал.Имя = "Сумма";
		Если ТаблицаДокумента.Колонки.Найти("НДСВал") <> Неопределено Тогда
			ТаблицаДокумента.Колонки.НДСВал.Имя = "СуммаНДС";
		Иначе
			ТаблицаДокумента.Колонки.НДС.Имя = "СуммаНДС";
		КонецЕсли;
	ИначеЕсли ТаблицаДокумента.Колонки.Найти("СуммаБезНДС") <> Неопределено Тогда
		Если ТаблицаДокумента.Колонки.Найти("Сумма") <> Неопределено Тогда
			ТаблицаДокумента.Колонки.Удалить("Сумма");
		КонецЕсли;
		ТаблицаДокумента.Колонки.СуммаБезНДС.Имя = "Сумма";
		ТаблицаДокумента.Колонки.НДС.Имя = "СуммаНДС";
	Иначе
		ТаблицаДокумента.Колонки.НДС.Имя = "СуммаНДС";
	КонецЕсли;
	
	Если ТаблицаДокумента.Колонки.Найти("СчетУчетаБУ") = Неопределено Тогда
		Если ТаблицаДокумента.Колонки.Найти("СчетУчета") <> Неопределено Тогда
			ТаблицаДокумента.Колонки.СчетУчета.Имя = "СчетУчетаБУ";
		КонецЕсли;
	КонецЕсли;
	Если ТаблицаДокумента.Колонки.Найти("СчетДоходовБУ") = Неопределено Тогда
		Если ТаблицаДокумента.Колонки.Найти("СчетДоходов") <> Неопределено Тогда
			ТаблицаДокумента.Колонки.СчетДоходов.Имя = "СчетДоходовБУ";
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДокумента, ТоварыИУслуги);
	ТоварыИУслуги.Свернуть("ВидЦенности, Номенклатура, СчетУчетаБУ, СчетДоходовБУ, СубконтоБУ, СчетУчетаНДСПоРеализации, СтавкаНДС, 
							|НомерГТД, СтранаПроисхождения, Событие", "Количество, Цена, Сумма, СуммаНДС");
							
	ПересчитыватьЗаполненнуюЦену = не (ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", РасчетныйДокумент.Метаданные())
			И РасчетныйДокумент.СуммаВключаетНДС = СуммаВключаетНДС);
	
	Для Каждого СтрокаДокумента Из ТоварыИУслуги Цикл
		
		Если СуммаВключаетНДС Тогда
			СтрокаДокумента.Сумма = СтрокаДокумента.Сумма + СтрокаДокумента.СуммаНДС;
		КонецЕсли;
		Если (СтрокаДокумента.Цена = 0 или ПересчитыватьЗаполненнуюЦену) 
			И СтрокаДокумента.Сумма <> 0 
			Тогда
			Если СтрокаДокумента.Количество = 0 Тогда
				СтрокаДокумента.Количество = 1;
			КонецЕсли;
			СтрокаДокумента.Цена = СтрокаДокумента.Сумма / СтрокаДокумента.Количество;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ВидЦенности) Тогда
			СтрокаДокумента.ВидЦенности = УчетНДС.ОпределитьВидЦенности(СтрокаДокумента.Номенклатура, СтрокаДокумента.СчетУчетаБУ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.Событие) Тогда
			Если СтрокаДокумента.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда
					Или СтрокаДокумента.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы
					Или СтрокаДокумента.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
				СтрокаДокумента.Событие	= Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
			Иначе
				СтрокаДокумента.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;    	

КонецПроцедуры // ЗаполнитьПоРасчетномуДокументу()

Функция ПолучитьСуммуДокументаСНДС() Экспорт
	
	Возврат ТоварыИУслуги.Итог("Сумма") + ?(Не СуммаВключаетНДС, ТоварыИУслуги.Итог("СуммаНДС"), 0);
	
КонецФункции

Функция ПолучитьНДСДокумента() Экспорт
	
	Возврат ТоварыИУслуги.Итог("СуммаНДС");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураОбязательныхПолей = Новый Структура("Организация");
	Если Не (СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру И УчетНДС.ДляСчетаФактурыНеТребуетсяКонтрагент(СтруктураШапкиДокумента.РасчетныйДокумент)) Тогда 
		СтруктураОбязательныхПолей.Вставить("Контрагент");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста Тогда
		СтруктураОбязательныхПолей.Вставить("КорректируемыйПериод");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		СтруктураОбязательныхПолей.Вставить("РасчетныйДокумент");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Дополняет структуру шапки документа значениями, требуемыми для проведения
//
Процедура ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента, Отказ)
	
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Ложь);
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС, УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("Период");
	ТаблицаТоваров.Колонки.Добавить("Активность");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("Покупатель");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("СчетФактура");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("ЗаписьДополнительногоЛиста");
	ТаблицаТоваров.Колонки.Добавить("КорректируемыйПериод");

	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаТаблицы.Покупатель = СтруктураШапкиДокумента.Контрагент;
		СтрокаТаблицы.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		СтрокаТаблицы.СчетФактура = ?(СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру, 
										СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
		СтрокаТаблицы.ЗаписьДополнительногоЛиста = СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста;
		Если СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = СтруктураШапкиДокумента.КорректируемыйПериод;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
			Если СтруктураШапкиДокумента.ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				СтрокаТаблицы.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
																					СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																					СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
																					СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
				СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
																					СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																					СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
																					СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
			КонецЕсли;
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(СтруктураШапкиДокумента.СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Событие) Тогда
			СтрокаТаблицы.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
		КонецЕсли;
	КонецЦикла;

	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		ТаблицаТоваров.Свернуть("Период, Активность, Организация, ВидЦенности, Покупатель, ДоговорКонтрагента, Событие, СчетФактура, СтавкаНДС, ЗаписьДополнительногоЛиста, КорректируемыйПериод " 
								+ ?(СтруктураШапкиДокумента.ФормироватьПроводки, ", СчетУчетаНДСПоРеализации, СубконтоБУ, СчетУчетаБУ, СчетДоходовБУ", "")
								+ ?((не ТаблицаТоваров.Найти(Истина, "ЗаписьДополнительногоЛиста") = неопределено) и СтруктураШапкиДокумента.ФормироватьСторнирующиеЗаписиДопЛистовВручную, ", СторнирующаяЗаписьДопЛиста", "")
								, "Количество, Цена, Сумма, СуммаБезНДС, НДС");
		Если Не ТаблицаТоваров.Найти(Истина, "ЗаписьДополнительногоЛиста") = Неопределено 
			И Не СтруктураШапкиДокумента.ФормироватьСторнирующиеЗаписиДопЛистовВручную 
			Тогда
			ТаблицаТоваров.Колонки.Добавить("СторнирующаяЗаписьДопЛиста", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ТоварыИУслуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Сумма, СтавкаНДС"+?(СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу,"",", Номенклатура, СчетУчетаБУ, СчетДоходовБУ"));

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["ТоварыИУслуги"].Представление();
	
	Для Каждого СтрокаТЧ Из ТоварыИУслуги Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """ + СокрЛП(СтрокаТЧ.НомерСтроки) +
		""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
			
		Если ФормироватьПроводки 
			И Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДСПоРеализации) 
			И СтрокаТЧ.СуммаНДС <> 0 
			Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			
		КонецЕсли;
			
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Функция ПодготовитьТаблицуДокументовОплаты(РезультатЗапросаПоДокументамОплаты, СтруктураШапкиДокумента)

	ТаблицаДокументовОплаты = РезультатЗапросаПоДокументамОплаты.Выгрузить();
	ТаблицаДокументовОплаты.Колонки.Добавить("Период");
	ТаблицаДокументовОплаты.Колонки.Добавить("Активность");
	ТаблицаДокументовОплаты.Колонки.Добавить("Организация");
	ТаблицаДокументовОплаты.Колонки.Добавить("Покупатель");
	ТаблицаДокументовОплаты.Колонки.Добавить("Событие");
	ТаблицаДокументовОплаты.Колонки.Добавить("СчетФактура");
	ТаблицаДокументовОплаты.Колонки.Добавить("ЗаписьДополнительногоЛиста");
	ТаблицаДокументовОплаты.Колонки.Добавить("КорректируемыйПериод");
	ТаблицаДокументовОплаты.Колонки.Добавить("СторнирующаяЗаписьДопЛиста");
	
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,       "Организация");
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент,        "Покупатель");
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(?(СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру, 
												СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка), "СчетФактура");
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.ЗаписьДополнительногоЛиста, "ЗаписьДополнительногоЛиста");
	ТаблицаДокументовОплаты.ЗаполнитьЗначения(СтруктураШапкиДокумента.КорректируемыйПериод, "КорректируемыйПериод");
	
	ТаблицаДокументовОплаты.Свернуть("Период, Активность, Организация, Покупатель, Событие, СчетФактура, ДатаОплаты, ДокументОплаты, ЗаписьДополнительногоЛиста, КорректируемыйПериод, СторнирующаяЗаписьДопЛиста");

	Возврат ТаблицаДокументовОплаты;

КонецФункции  //ПодготовитьТаблицуДокументовОплаты()

// Проверяет правильность заполнения строк табличной части "ДокументыОплаты".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыОплаты(ТаблицаПоДокументамОплаты, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		// Укажем, что надо проверить:
		СтруктураОбязательныхПолей = Новый Структура("ДатаОплаты");
		
		// Теперь вызовем общую процедуру проверки.
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОплаты", СтруктураОбязательныхПолей, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		ТаблицаПоТоварам.Свернуть("Период, Активность, Организация, ВидЦенности, Покупатель, ДоговорКонтрагента, Событие, СчетФактура, СтавкаНДС, ЗаписьДополнительногоЛиста, КорректируемыйПериод " 
								+ ?(СтруктураШапкиДокумента.ФормироватьПроводки, ", СчетУчетаНДСПоРеализации, СубконтоБУ", "")
								+ ?((Не ТаблицаПоТоварам.Найти(Истина, "ЗаписьДополнительногоЛиста") = Неопределено) И СтруктураШапкиДокумента.ФормироватьСторнирующиеЗаписиДопЛистовВручную, ", СторнирующаяЗаписьДопЛиста", "")
								, "СуммаБезНДС, НДС");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ФормироватьПроводки Тогда
		ПроводкиБУ = Движения.Хозрасчетный;
		Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			Если СтрокаТаблицы.НДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Проводки по вычету в случае упрощенного учета НДС
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = СтрокаТаблицы.НДС;
			Проводка.Содержание  = "Начисление НДС";

			Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,           СтрокаТаблицы.СубконтоБУ);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Покупатель);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаТаблицы.СчетФактура);

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		
		ТаблицаПоТоварам.Колонки.Добавить("ДатаОплаты", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаПоТоварам.Колонки.Добавить("ДокументОплаты");
		ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументамОплаты, ТаблицаПоТоварам);
		УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаПоТоварам, Движения, Отказ);

		Возврат;
		
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) 
		И Не СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		// Прямая запись в книгу покупок
		ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.Выгрузить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам,ТаблицаДвижений_НДСЗаписиКнигиПродаж);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументамОплаты, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
		ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШапкиДокумента, ТаблицаДвижений_НДСЗаписиКнигиПродаж, ТаблицаПоДокументамОплаты);
		
		Для Каждого СтрокаДвижения Из ТаблицаДвижений_НДСЗаписиКнигиПродаж Цикл
			Если Не (СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
					Или СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
					Или СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент) Тогда
				СтрокаДвижения.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		Движения.НДСЗаписиКнигиПродаж.мПериод 			= СтруктураШапкиДокумента.Дата;
		Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений	= ТаблицаДвижений_НДСЗаписиКнигиПродаж;
		Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение();
	    Возврат;
		
	КонецЕсли;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
		
	СчетОтнесенияНДС = ПланыСчетов.Хозрасчетный.НДС;
			
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаПоТоварам, Движения, Отказ, СчетОтнесенияНДС);
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШапкиДокумента, ТаблицаДвижений_НДСЗаписиКнигиПродаж, ТаблицаПоДокументамОплаты)
	
	Если СтруктураШапкиДокумента.ФормироватьСторнирующиеЗаписиДопЛистовВручную Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Индексы.Добавить("ЗаписьДополнительногоЛиста");
	Если ТаблицаДвижений_НДСЗаписиКнигиПродаж.Найти(Истина, "ЗаписьДополнительногоЛиста") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Найти("СторнирующаяЗаписьДопЛиста") = Неопределено Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("СторнирующаяЗаписьДопЛиста", Новый ОписаниеТипов("Булево"));
	КонецЕсли; 

	СвернутаяТаблицаЗаписейДопЛиста = ТаблицаДвижений_НДСЗаписиКнигиПродаж.Скопировать();
	Для каждого ТекущаяСтрока Из СвернутаяТаблицаЗаписейДопЛиста Цикл
		// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фактура)
		Если Не (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0)
			Тогда
			ТекущаяСтрока.СтавкаНДС = Неопределено;
		КонецЕсли; 
		// Авансы и налоговый агент (комитент) отрабатываются с учетом договора (на каждый
		// договор отдельный счет-фактура или отдельное лист декларации)
		Если Не (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
			или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент)
			Тогда
			// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фактура)
			ТекущаяСтрока.ДоговорКонтрагента = Неопределено;
		КонецЕсли; 
	КонецЦикла; 
	
	СвернутаяТаблицаЗаписейДопЛиста.Свернуть("СчетФактура,СтавкаНДС,ДоговорКонтрагента,ЗаписьДополнительногоЛиста,КорректируемыйПериод","СуммаБезНДС,НДС");
	
	//СвернутаяТаблицаЗаписейДопЛиста.Свернуть("СчетФактура,ЗаписьДополнительногоЛиста,КорректируемыйПериод","СуммаБезНДС,НДС");
	
	СвернутаяТаблицаЗаписейДопЛиста.Индексы.Добавить("ЗаписьДополнительногоЛиста");
	СтрокиДопЛистов = СвернутаяТаблицаЗаписейДопЛиста.НайтиСтроки(Новый Структура("ЗаписьДополнительногоЛиста", Истина));
	
	ОтработанныеСФпоПериодам = Новый ТаблицаЗначений();
	ОтработанныеСФпоПериодам.Колонки.Добавить("СчетФактура");
	ОтработанныеСФпоПериодам.Колонки.Добавить("НалоговыйПериод");
	ОтработанныеСФпоПериодам.Колонки.Добавить("СтавкаНДС");
	ОтработанныеСФпоПериодам.Колонки.Добавить("ДоговорКонтрагента");
	ОтработанныеСФпоПериодам.Индексы.Добавить("СчетФактура,НалоговыйПериод");
	
	КэшПараметровУП = Новый Соответствие;
	ПараметрыУПКорректируемогоПериода = Неопределено;
	
	Для Каждого СтрокаДопЛиста Из СтрокиДопЛистов Цикл
		
		НДСНалоговыйПериодДополнительногоЛиста = УчетНДС.ПолучитьУПНДСНалоговыйПериод(СтруктураШапкиДокумента.Организация, СтрокаДопЛиста.КорректируемыйПериод, КэшПараметровУП[НачалоМесяца(СтрокаДопЛиста.КорректируемыйПериод)]);
		
		НачалоНалоговогоПериодаКорректировки = ?(НДСНалоговыйПериодДополнительногоЛиста = Перечисления.Периодичность.Квартал, НачалоКвартала(СтрокаДопЛиста.КорректируемыйПериод),НачалоМесяца(СтрокаДопЛиста.КорректируемыйПериод));
		ОтборОтработанныхЗаписей = Новый Структура("СчетФактура,НалоговыйПериод",СтрокаДопЛиста.СчетФактура,НачалоНалоговогоПериодаКорректировки);
		Если ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС) Тогда
			ОтборОтработанныхЗаписей.Вставить("СтавкаНДС", СтрокаДопЛиста.СтавкаНДС);
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорКонтрагента) Тогда
			ОтборОтработанныхЗаписей.Вставить("ДоговорКонтрагента", СтрокаДопЛиста.ДоговорКонтрагента);
		КонецЕсли; 
		
		Если не (ОтработанныеСФпоПериодам.НайтиСтроки(ОтборОтработанныхЗаписей).Количество() = 0) Тогда
			// СФ по данному налоговому периоду уже отработан
			Продолжить;
		Иначе
			НоваяЗапись = ОтработанныеСФпоПериодам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ОтборОтработанныхЗаписей);
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПродажОбороты.Организация,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.ДатаОплаты,
		|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты,
		|	НДСЗаписиКнигиПродажОбороты.Событие,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот * -1 КАК СуммаБезНДССторно,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот * -1 КАК НДССторно,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДС,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДС,
		|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаГраница,
		|			Месяц,
		|			СчетФактура = &СчетФактура
		|				И ВЫБОР
		|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ДоговорКонтрагента = &ДоговорКонтрагента
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &СтавкаНДС = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ СтавкаНДС = &СтавкаНДС
		|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	((НЕ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста)
		|				И НДСЗаписиКнигиПродажОбороты.Период = &НачалоПериода
		|			ИЛИ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста
		|				И (НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод МЕЖДУ &НачалоПериода И КОНЕЦПЕРИОДА(&НачалоПериода, МЕСЯЦ)))";
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоНалоговогоПериодаКорректировки);
		Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(СтруктураШапкиДокумента.Дата, ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("СчетФактура", СтрокаДопЛиста.СчетФактура);
		Запрос.УстановитьПараметр("СтавкаНДС", ?(ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС), СтрокаДопЛиста.СтавкаНДС, Неопределено));
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ?(ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорКонтрагента), СтрокаДопЛиста.ДоговорКонтрагента, Неопределено));
		
		Если НДСНалоговыйПериодДополнительногоЛиста = Перечисления.Периодичность.Квартал Тогда
			Запрос.Текст = СтрЗаменить(Нрег(Запрос.Текст),"месяц","квартал");
		КонецЕсли; 
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			ТаблицаЗаписей = Результат.Выгрузить();
			
			ТаблицаЗаписей.Колонки.Добавить("ЗаписьДополнительногоЛиста");
			ТаблицаЗаписей.Колонки.Добавить("КорректируемыйПериод");
			ТаблицаЗаписей.Колонки.Добавить("ДатаСобытия");
			ТаблицаЗаписей.Колонки.Добавить("СторнирующаяЗаписьДопЛиста");
			
			ТаблицаЗаписей.ЗаполнитьЗначения(Истина, "ЗаписьДополнительногоЛиста,СторнирующаяЗаписьДопЛиста");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтрокаДопЛиста.КорректируемыйПериод, "КорректируемыйПериод");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ДатаСобытия");
			
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СуммаБезНДС.Имя = "СуммаБезНДССторно";
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДС.Имя = "НДССторно";
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
			
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СуммаБезНДССторно.Имя = "СуммаБезНДС";
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДССторно.Имя = "НДС";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСЗаписиКнигиПродаж.Найти(Истина, "СторнирующаяЗаписьДопЛиста") <> Неопределено Тогда
		КоличествоСтрок = ТаблицаПоДокументамОплаты.Количество();
		Для К = 0 По КоличествоСтрок - 1 Цикл
			НоваяСтрока = ТаблицаПоДокументамОплаты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаПоДокументамОплаты[К]);
			НоваяСтрока.СторнирующаяЗаписьДопЛиста = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ТипЦен"              , "ЦенаВключаетНДС"      , "ЦенаВключаетНДС");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
 	ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента, Отказ);
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты) Экспорт
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("НомерСтроки"	, "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"	, "Номенклатура");
	СтруктураПолей.Вставить("ВидЦенности"	, "ВидЦенности");
	СтруктураПолей.Вставить("Количество"	, "Количество");
	СтруктураПолей.Вставить("Цена"			, "Цена");
	СтруктураПолей.Вставить("Сумма"			, "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"		, "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"			, "СуммаНДС");
	СтруктураПолей.Вставить("СчетУчетаБУ"	, "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетДоходовБУ" , "СчетДоходовБУ");
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации"	, "СчетУчетаНДСПоРеализации");
	СтруктураПолей.Вставить("СубконтоБУ"	, "СубконтоБУ");
	СтруктураПолей.Вставить("СторнирующаяЗаписьДопЛиста", "СторнирующаяЗаписьДопЛиста");
	СтруктураПолей.Вставить("Событие", 		"Событие");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ТоварыИУслуги", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	Если Не СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Ложь, мВалютаРегламентированногоУчета);
	КонецЕсли;
		
	ТаблицаПоДокументамОплаты = Неопределено;
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		СтруктураПолей.Очистить();
		СтруктураПолей.Вставить("ДокументОплаты", 	"ДокументОплаты");
		СтруктураПолей.Вставить("ДатаОплаты", 		"ДатаОплаты");
		РезультатЗапросаПоДокументамОплаты = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыОплаты", СтруктураПолей);
		ТаблицаПоДокументамОплаты = ПодготовитьТаблицуДокументовОплаты(РезультатЗапросаПоДокументамОплаты, СтруктураШапкиДокумента);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание)

	Если  (Основание = Неопределено) ИЛИ Не ЭтотОбъект.Метаданные().Реквизиты.РасчетныйДокумент.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	УпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	Если УпрощенныйУчетНДС И Не ПрямаяЗаписьВКнигу Тогда
		ПрямаяЗаписьВКнигу = Истина;
		Если Не ФормироватьПроводки Тогда
			ФормироватьПроводки = Истина;
		КонецЕсли;			
	КонецЕсли;
	
	РасчетныйДокумент = Основание;

	ИспользоватьДокументРасчетовКакСчетФактуру = Истина;
	
	ЗаполнитьПоРасчетномуДокументу(Ложь);
	
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ТоварыИУслуги.Итог("Сумма") + ?(Не СуммаВключаетНДС, ТоварыИУслуги.Итог("СуммаНДС"), 0);
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = мВалютаРегламентированногоУчета;
	КонецЕсли; 

	Если Не ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		
		УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);

		УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
		
	КонецЕсли;
	
	Если Не ПрямаяЗаписьВКнигу И ФормироватьПроводки Тогда
		ФормироватьПроводки = Ложь;
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
    
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты);
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ПрямаяЗаписьВКнигу Тогда
		ПроверитьЗаполнениеТабличнойЧастиДокументыОплаты(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамОплаты, Отказ, Заголовок);
		//УчетНДС.СинхронизацияПроведенияУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный", СтруктураШапкиДокумента.УпрощенныйУчетНДС, Отказ)
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураВыданный", Ложь);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

