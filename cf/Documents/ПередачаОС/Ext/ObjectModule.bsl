Перем мВалютаРегламентированногоУчета Экспорт;
Перем ТабЗатрат;
Перем ПоддержкаПБУ18;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Процедура заполняет параметры организации-получателя формы ОС1
//
Процедура ЗаполнитьДанныеОрганизацииПолучателя(ПараметрыДокумента, ОбластьМакета)
		
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ПараметрыДокумента.Получатель, ПараметрыДокумента.ДатаДок);
		
	ПараметрыОрганизации = Новый структура("ОрганизацияПолучатель,АдресПолучателя,РеквПолучателя,ДолжРукПолуч,РукПолучателя,КодПоОКПОПолучателя");	
		
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ПараметрыОрганизации.ОрганизацияПолучатель = ПредставлениеОрганизации;
	ПараметрыОрганизации.АдресПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,Телефоны,");
	ПараметрыОрганизации.РеквПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета,Банк,БИК,КоррСчет,");
	ПараметрыОрганизации.КодПоОКПОПолучателя = СведенияОбОрганизации.КодПоОКПО;
		
	ОтветственныеЛицаОрганизации = ОбщегоНазначения.ОтветственныеЛица(ПараметрыДокумента.Получатель, ПараметрыДокумента.ДатаДок);
	ПараметрыОрганизации.РукПолучателя = ОтветственныеЛицаОрганизации.РуководительПредставление;
	ПараметрыОрганизации.ДолжРукПолуч = ОтветственныеЛицаОрганизации.РуководительДолжность;
		
	ОбластьМакета.Параметры.Заполнить(ПараметрыОрганизации);
		
КонецПроцедуры
	
// Процедура заполняет параметры организации-сдатчика формы ОС1
//
Процедура ЗаполнитьДанныеОрганизацииСдатчика(ПараметрыДокумента, ОбластьМакета)
		
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ПараметрыДокумента.Сдатчик, ПараметрыДокумента.ДатаДок);
	ОтветственныеЛицаОрганизации = ОбщегоНазначения.ОтветственныеЛица(ПараметрыДокумента.Сдатчик, ПараметрыДокумента.ДатаДок, ПараметрыДокумента.ПодразделениеОрганизации);
		
	ПараметрыОрганизации = Новый структура("НаимСдатчика,АдресСдатчика,РеквСдатчика,ДолжРукСдатчика,РукСдатчика,КодПоОКПОСдатчика");	
		
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ПараметрыОрганизации.НаимСдатчика = ПредставлениеОрганизации;
	ПараметрыОрганизации.АдресСдатчика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,Телефоны,");
	ПараметрыОрганизации.РеквСдатчика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета,Банк,БИК,КоррСчет,");
	ПараметрыОрганизации.КодПоОКПОСдатчика = СведенияОбОрганизации.КодПоОКПО;
	
	ПараметрыОрганизации.РукСдатчика = ОтветственныеЛицаОрганизации.РуководительПредставление;
	ПараметрыОрганизации.ДолжРукСдатчика = ОтветственныеЛицаОрганизации.РуководительДолжность;
		
	ОбластьМакета.Параметры.Заполнить(ПараметрыОрганизации);
		
КонецПроцедуры
	
// Функция формирует табличный документ с печатной формой ОС-1
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьОС1()
		
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаОС.Дата КАК ДатаДок,
	|	ПередачаОС.Номер КАК НомерАкта,
	|	ПередачаОС.Ответственный,
	|	ПередачаОС.ПодразделениеОрганизации КАК ПодрСдатчика,
	|	ПередачаОС.Контрагент.НаименованиеПолное КАК ОрганизацияПолучатель,
	|	ПередачаОС.Дата КАК ДатаПередачи,
	|	ПередачаОС.Контрагент КАК Получатель,
	|	ПередачаОС.Организация КАК Сдатчик,
	|	ПередачаОС.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ПРЕДСТАВЛЕНИЕ(ПередачаОС.ДоговорКонтрагента) КАК ДоговорПередачи,
	|	ПередачаОС.ДоговорКонтрагента.Дата КАК ДатаДоговора,
	|	ПередачаОС.ДоговорКонтрагента.Номер КАК НомерДоговора
	|ИЗ
	|	Документ.ПередачаОС КАК ПередачаОС
	|ГДЕ
	|	ПередачаОС.Ссылка = &Ссылка";
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	ВыборкаОС.Следующий();
		
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",            Ссылка);
	Запрос.УстановитьПараметр("ДокументОборотов",  ?(ЗначениеЗаполнено(ДокПодготовкаКПередачеОС), ДокПодготовкаКПередачеОС, Ссылка));
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("КонДата",           Дата);
	Запрос.УстановитьПараметр("Курс",              ?(НЕ ЗначениеЗаполнено(КурсВзаиморасчетов), 1, КурсВзаиморасчетов));
	Запрос.УстановитьПараметр("Кратность",         ?(НЕ ЗначениеЗаполнено(КратностьВзаиморасчетов), 1, КратностьВзаиморасчетов));
	Запрос.УстановитьПараметр("КапитальныйРемонт", Перечисления.ВидыСобытийОС.КапитальныйРемонт);
	
	СписокВидовМодернизации = Новый Массив;
	СписокВидовМодернизации.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
	СписокВидовМодернизации.Добавить(Перечисления.ВидыСобытийОС.Достройка);
	СписокВидовМодернизации.Добавить(Перечисления.ВидыСобытийОС.Реконструкция);
	
	Запрос.УстановитьПараметр("СписокВидовМодернизации", СписокВидовМодернизации);
	
	Запрос.УстановитьПараметр("ПериодОборотов", ?(ЗначениеЗаполнено(ДокПодготовкаКПередачеОС), ДокПодготовкаКПередачеОС.МоментВремени(), Ссылка.МоментВремени()));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
	|ПОМЕСТИТЬ СтоимостьОС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ПериодОборотов, &ПериодОборотов, , СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС), , , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
	|ПОМЕСТИТЬ АмортизацияОС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ПериодОборотов, &ПериодОборотов, , , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчета,
	|" + ?(ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "БАУКОРП", "СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияИзноса КАК СчетНачисленияИзноса,", "") + "	
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОССрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&КонДата,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Документ.ПередачаОС.ОС.ОсновноеСредство
	|					ИЗ
	|						Документ.ПередачаОС.ОС
	|					ГДЕ
	|						Документ.ПередачаОС.ОС.Ссылка = &Ссылка)) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1,
	|	ХозрасчетныйОборотыДтКт.Сумма КАК СуммаОборот
	|ПОМЕСТИТЬ ИзносОС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&ПериодОборотов,
	|			&ПериодОборотов,
	|			Организация = &Организация
	|				И СубконтоКт1 В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Документ.ПередачаОС.ОС.ОсновноеСредство
	|					ИЗ
	|						Документ.ПередачаОС.ОС
	|					ГДЕ
	|						Документ.ПередачаОС.ОС.Ссылка = &Ссылка)
	|				И СчетКт В
	|					(ВЫБРАТЬ
	|						СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисления" + ?(ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "БАУКОРП", "Износа", "Амортизации") + "
	|					ИЗ
	|						СчетаБухгалтерскогоУчетаОССрезПоследних)
	|				И Регистратор = &ДокументОборотов) КАК ХозрасчетныйОборотыДтКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПередачаОСОС.НомерСтроки КАК НомерСтроки,
	|	ПередачаОСОС.ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОС.СуммаОборот, 0) - ВЫБОР
	|		КОГДА ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ)
	|		  ИЛИ ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса)
	|			ТОГДА ЕСТЬNULL(ИзносОС.СуммаОборот, 0)
	|		ИНАЧЕ ЕСТЬNULL(АмортизацияОС.СуммаОборот, 0)
	|	КОНЕЦ КАК ОстСтоимость,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ)
	|		  ИЛИ ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса)
	|			ТОГДА ЕСТЬNULL(ИзносОС.СуммаОборот, 0)
	|		ИНАЧЕ ЕСТЬNULL(АмортизацияОС.СуммаОборот, 0)
	|	КОНЕЦ КАК НачАмортизация,
	|	ПередачаОСОС.Сумма * &Курс / &Кратность КАК ЦенаПродажи,
	|	ПередачаОСОС.СтавкаНДС,
	|	ПередачаОСОС.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	ПередачаОСОС.ОсновноеСредство.ГруппаОС КАК ГруппаОС,
	|	ПередачаОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОс,
	|	ПередачаОСОС.ОсновноеСредство.АмортизационнаяГруппа.Порядок + 1 КАК НомерГруппы,
	|	ПередачаОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ПередачаОСОС.ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
	|	ПередачаОСОС.ОсновноеСредство.Изготовитель КАК Изготовитель,
	|	ПередачаОСОС.ОсновноеСредство.КодПоОКОФ.Код КАК КодОКОФ,
	|	МестонахождениеОС.Местонахождение,
	|	ПараметрыАмортизации.СрокПолезногоИспользования КАК СрокПолезнИспПриПеред,
	|	ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ИнвентарныйНомер КАК ИнвНомер,
	|	ПоследнийКапитальныйРемонт.Период КАК ДатаПоследнегоКапитальногоРемонта,
	|	ПоследняяМодернизация.Период КАК ДатаПоследнейМодернизации
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|				&КонДата,
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							Документ.ПередачаОС.ОС.ОсновноеСредство
	|						ИЗ
	|							Документ.ПередачаОС.ОС
	|						ГДЕ
	|							Документ.ПередачаОС.ОС.Ссылка = &Ссылка)) КАК МестонахождениеОС
	|		ПО ПередачаОСОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&КонДата,
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							Документ.ПередачаОС.ОС.ОсновноеСредство
	|						ИЗ
	|							Документ.ПередачаОС.ОС
	|						ГДЕ
	|							Документ.ПередачаОС.ОС.Ссылка = &Ссылка)) КАК ПараметрыАмортизации
	|		ПО ПередачаОСОС.ОсновноеСредство = ПараметрыАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|				&КонДата,
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							Документ.ПередачаОС.ОС.ОсновноеСредство
	|						ИЗ
	|							Документ.ПередачаОС.ОС
	|						ГДЕ
	|							Документ.ПередачаОС.ОС.Ссылка = &Ссылка)) КАК ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОСОрганизаций.СрезПоследних(
	|				&КонДата,
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							Документ.ПередачаОС.ОС.ОсновноеСредство
	|						ИЗ
	|							Документ.ПередачаОС.ОС
	|						ГДЕ
	|							Документ.ПередачаОС.ОС.Ссылка = &Ссылка)
	|					И Событие.ВидСобытияОС = &КапитальныйРемонт) КАК ПоследнийКапитальныйРемонт
	|		ПО ПередачаОСОС.ОсновноеСредство = ПоследнийКапитальныйРемонт.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОСОрганизаций.СрезПоследних(
	|				&КонДата,
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							Документ.ПередачаОС.ОС.ОсновноеСредство
	|						ИЗ
	|							Документ.ПередачаОС.ОС
	|						ГДЕ
	|							Документ.ПередачаОС.ОС.Ссылка = &Ссылка)
	|					И Событие.ВидСобытияОС В (&СписокВидовМодернизации)) КАК ПоследняяМодернизация
	|		ПО ПередачаОСОС.ОсновноеСредство = ПоследняяМодернизация.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОССрезПоследних КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОС КАК СтоимостьОС
	|			ПО СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство = СтоимостьОС.СубконтоКт1
	|				И СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета = СтоимостьОС.СчетКт
	|			ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОС КАК АмортизацияОС
	|			ПО СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство = АмортизацияОС.СубконтоДт1
	|				И СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации = АмортизацияОС.СчетДт
	|			ЛЕВОЕ СОЕДИНЕНИЕ ИзносОС КАК ИзносОС
	|			ПО СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство = ИзносОС.СубконтоКт1
	|				И СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисления" + ?(ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "БАУКОРП", "Износа", "Амортизации") + " = ИзносОС.СчетКт
	|		ПО ПередачаОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|ГДЕ
	|	ПередачаОСОС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	ДокВвода  = Неопределено;
	ДатаВвода = Дата('00000000');
		
	Если ВыборкаПоОС.Количество() = 1 Тогда
			
		ВыборкаПоОС.Следующий();
			
		ТабДокумент   = Новый ТабличныйДокумент();
		Если НЕ(ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Здания ИЛИ
			ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Сооружения) Тогда
				
			ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуОС_ОС1";
				
			Макет         = ПолучитьОбщийМакет("ОС1");
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.Заполнить(ВыборкаОС);
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
				
			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаПоОС.ОсновноеСредство, ВыборкаОС.Сдатчик, Перечисления.СостоянияОС.ПринятоКУчету, ДокВвода,        ДатаВвода);
			СрокЭкспл = ?(ЗначениеЗаполнено(ДатаВвода), УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ДатаВвода, Дата), 0);
				
			ОбластьМакета.Параметры.ГодВыпуска = ВыборкаПоОС.ГодВыпуска;
			ОбластьМакета.Параметры.ДатаВвода  = ДатаВвода;
			ОбластьМакета.Параметры.ДатаВводаПриПередаче  = ДатаВвода;
			ОбластьМакета.Параметры.СрокЭкспл  = ?(НЕ ЗначениеЗаполнено(СрокЭкспл),
		                                           "-",
		                                           Строка(СрокЭкспл) + " мес.");			
			Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
				ОбластьМакета.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
			КонецЕсли; 
				
				
			ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, ОбластьМакета);
			ЗаполнитьДанныеОрганизацииСдатчика(ВыборкаОС, ОбластьМакета);
				
			ТабДокумент.Вывести(ОбластьМакета);
				
		Иначе // Здание (сооружение)
				
			ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуОС_ОС1а";
				
			ОС1а_Страница1 = Новый ТабличныйДокумент();
			МакетОС1а      = ПолучитьОбщийМакет("ОС1а");
			ОбластьМакета  = МакетОС1а.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.Заполнить(ВыборкаОС);
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
				
			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС( ВыборкаПоОС.ОсновноеСредство, Организация, Перечисления.СостоянияОС.ПринятоКУчету, ДокВвода, ДатаВвода);
			СрокЭкспл = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ДатаВвода, Дата);
				
			ОбластьМакета.Параметры.ГодВыпуска = ВыборкаПоОС.ГодВыпуска;
			ОбластьМакета.Параметры.ДатаВвода  = ДатаВвода;
			ОбластьМакета.Параметры.СрокЭкспл  = ?(НЕ ЗначениеЗаполнено(СрокЭкспл),
		                                           "-",
		                                           Строка(СрокЭкспл) + " мес.");			
			Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
				ОбластьМакета.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
			КонецЕсли; 
				
			ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, ОбластьМакета);
			ЗаполнитьДанныеОрганизацииСдатчика(ВыборкаОС, ОбластьМакета);
				
			ТабДокумент.Вывести(ОбластьМакета);
				
		КонецЕсли;
			
		Возврат ТабДокумент;
			
	Иначе // Объектов много - групповая печать.
			
		ОС1б_Страница1 = Новый ТабличныйДокумент();
		ОС1б_Страница2 = Новый ТабличныйДокумент();
		ОС1б_Страница3 = Новый ТабличныйДокумент();
		ОС1б_Страница4 = Новый ТабличныйДокумент();
			
		МакетОС1б      = ПолучитьОбщийМакет("ОС1б");
			
		Шапка1ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка1");
		Шапка2ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка2");
		Строка2ОС1б    = МакетОС1б.ПолучитьОбласть("Строка2");
		Строка2ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка2П");
		Подвал2        = МакетОС1б.ПолучитьОбласть("Подвал2");
		Шапка3ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка3");
		Строка3ОС1б    = МакетОС1б.ПолучитьОбласть("Строка3");
		Строка3ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка3П");
		Подвал3        = МакетОС1б.ПолучитьОбласть("Подвал3");
		Шапка4ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка4");
			
		Шапка1ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка1ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, Шапка1ОС1б);
		ЗаполнитьДанныеОрганизацииСдатчика(ВыборкаОС, Шапка1ОС1б);
			
		ОС1б_Страница1.Вывести(Шапка1ОС1б);
			
		Шапка2ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Шапка2ОС1б);
			
		Шапка3ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница3.Вывести(Шапка3ОС1б);
			
		Шапка4ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка4ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница4.Вывести(Шапка4ОС1б);
		
		ИтогЦенаПродажи = 0;
		
		Пока ВыборкаПоОС.Следующий() Цикл
			
			ИтогЦенаПродажи = ИтогЦенаПродажи + ВыборкаПоОС.ЦенаПродажи;
			
			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаПоОС.ОсновноеСредство, ВыборкаОС.Сдатчик, Перечисления.СостоянияОС.ПринятоКУчету, ДокВвода, ДатаВвода);
			СрокЭкспл = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ДатаВвода, Дата);
			
			Строка2ОС1б.Параметры.Заполнить(ВыборкаОС);
			Строка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);

			Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
				Строка2ОС1б.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
			КонецЕсли; 
			Строка2ОС1б.Параметры.ДатаВвода = ДатаВвода;
			ОС1б_Страница2.Вывести(Строка2ОС1б);
				
			Строка3ОС1б.Параметры.Заполнить(ВыборкаОС);
			Строка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			Строка3ОС1б.Параметры.СрокЭкспл = ?(НЕ ЗначениеЗаполнено(СрокЭкспл),
		                                        "-",
		                                        Строка(СрокЭкспл) + " мес.");			
			ОС1б_Страница3.Вывести(Строка3ОС1б);
				
		КонецЦикла;
			
		Строка2ПОС1б.Параметры.Заполнить(ВыборкаОС);
		Строка2ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Строка2ПОС1б);
			
		Подвал2.Параметры.Заполнить(ВыборкаОС);
		Подвал2.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Подвал2);
			
		Строка3ПОС1б.Параметры.Заполнить(ВыборкаОС);
		Строка3ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница3.Вывести(Строка3ПОС1б);
			
		Подвал3.Параметры.Заполнить(ВыборкаОС);
		Подвал3.Параметры.Заполнить(ВыборкаПоОС);
		Подвал3.Параметры.ИтогЦенаПродажи = ИтогЦенаПродажи;
		ОС1б_Страница3.Вывести(Подвал3);
			
		УниверсальныеМеханизмы.НапечататьДокумент(ОС1б_Страница4, , , "Форма ОС-1б. Страница 4");
		УниверсальныеМеханизмы.НапечататьДокумент(ОС1б_Страница3, , , "Форма ОС-1б. Страница 3");
		УниверсальныеМеханизмы.НапечататьДокумент(ОС1б_Страница2, , , "Форма ОС-1б. Страница 2");
		УниверсальныеМеханизмы.НапечататьДокумент(ОС1б_Страница1, , , "Форма ОС-1б. Страница 1");
			
		Возврат Неопределено;
			
	КонецЕсли;
		
КонецФункции // ПечатьОС1()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
		
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОС1" тогда
			
		ТабДокумент = ПечатьОС1();
		
	ИначеЕсли ИмяМакета = "СправкаРасчетВал" Тогда
		
		// Справка-расчет формирования рублевой суммы документа в валюте
		БухгалтерскийУчетРасчетовСКонтрагентами.НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(Ссылка);
		Возврат;
	КонецЕсли;
		
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);
		
КонецПроцедуры // Печать
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОС1, СправкаРасчетВал","Форма ОС-1", "Справка-расчет ""Рублевая сумма документа в валюте""");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		//СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	
	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Зачет авансов
	СтруктураОбязательныхПолей.Вставить("СпособЗачетаАвансов");
	Если (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически)
		ИЛИ (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу) Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверим на виды операций, которые не будут полностью отработаны в данном документе
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету 
		или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию 
		или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию
		тогда
		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не могут отражаться данным документом!",Отказ,Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "ОС";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, Сумма");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	СтруктураОбязательныхПолей.Вставить("СчетДоходов");
	СтруктураОбязательныхПолей.Вставить("СчетРасходов");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет проверки,которые нужны только для регл. учета.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""ОС"": ";
		
		Если СтруктураШапкиДокумента.УчитыватьНДС 
			И СтрокаТЧ.НДС <> 0
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДСПоРеализации) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС по реализации""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетДоходов) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Счет доходов""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетРасходов) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Счет расходов""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно()

// Процедура проверяет, достаточно ли данных в таблице по ОС.
//
Процедура ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		Если НЕ СтрокаОС.ОтражалосьВБухгалтерскомУчете Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в учете по указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если СтрокаОС.СнятоСУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> снято с учета в указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ПодразделениеОрганизации)
		   И СтрокаОС.ПодразделениеОрганизации <> СтруктураШапкиДокумента.ПодразделениеОрганизации Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в учете в подразделении <" + СтруктураШапкиДокумента.ПодразделениеОрганизации + ">.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОС.ПорядокПогашенияСтоимостиБУ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не установлен порядок погашения стоимости (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет учета (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		
			Если НЕ ЗначениеЗаполнено(СтрокаОС.СчетНачисленияАмортизацииБУ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет начисления амортизации (БУ).",,, СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаОС.Направление_БУ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указаны способы отражения расходов по амортизации (БУ).",,, СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
				
				Если НЕ СтрокаОС.ОтражалосьВНалоговомУчете Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в налоговом учете (по налогу на прибыль) по указанной организации.",,, СтатусСообщения.Важное);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не установлен порядок включения стоимости в состав расходов (НУ).",,, СтатусСообщения.Важное);
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьТаблицуПоОС()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаЗачетаАвансов, Отказ, Заголовок)
	
	ТекОрганизация     = СтруктураШапкиДокумента.Организация;
	ДатаДока           = Дата;
	СодержаниеПроводки = "Передача ОС";
	
	//Фиксация выручки и НДС по БУ (проводки)
	
	Проводки = Движения.Хозрасчетный;
	
	ВидыСубконтоСчетов = Новый Соответствие; // кэш видов субконто
	
	//Определение параметров учетной политики по отражению НДС с продажи
	НачислятьНДСНедвижимости = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация).НачислятьНДСПриПередачеНедвижимости;
	
	ТаблицыДокумента = Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам);
    
    Если НЕ ПравоСобственностиПереходитПослеГосРегистрации Тогда
        ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
        СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, Истина, Отказ, Заголовок);
    КонецЕсли;
	ВыручкаПоБУ = ТаблицаПоТоварам.Скопировать();
	ВыручкаПоБУ.Свернуть("ОсновноеСредство, СчетДоходов, СчетУчетаНДСПоРеализации, Субконто, СтавкаНДС", 
		"Сумма, СуммаБУ, СуммаНУ, СуммаВал, НДС, НДСВал");
	
	Для каждого СтрокаТаблицы из ВыручкаПоБУ Цикл
		
		// Выручка
        Если НЕ ПравоСобственностиПереходитПослеГосРегистрации Тогда
            
            Если СтрокаТаблицы.СуммаБУ = 0 Тогда
                Продолжить;
            КонецЕсли;
            
            Проводка = Проводки.Добавить();
            
            Проводка.Период       = ДатаДока;
            Проводка.Организация  = СтруктураШапкиДокумента.Организация;
            Проводка.Сумма        = СтрокаТаблицы.СуммаБУ;
            
            Проводка.Содержание   = "Передача ОС";
            
            Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
            БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
            БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
            БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
            
            Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
                //Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
                Проводка.ВалютаДт        = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
                Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;
                
            КонецЕсли;
            
            Проводка.СчетКт = СтрокаТаблицы.СчетДоходов;
            БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.Субконто);
            БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
            БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РеализуемыеАктивы", СтрокаТаблицы.ОсновноеСредство);
            
            БухгалтерскийУчет.УстановитьПодразделенияПроводки(
            Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
            
            Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
                
                СуммаНУДт = СтрокаТаблицы.СуммаНУ + СтрокаТаблицы.НДС;
                СуммаНУКт = СтрокаТаблицы.СуммаНУ;
                НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
                СуммаНУДт, СуммаНУКт, Проводка.Сумма - СуммаНУДт, Проводка.Сумма - СуммаНУДт, , , 
                Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
                
            КонецЕсли;
            
        КонецЕсли;
        
		// НДС
        Если ПравоСобственностиПереходитПослеГосРегистрации И НЕ НачислятьНДСНедвижимости Тогда
            Продолжить;
            // НДС будет начислен документом "Реализация отргруженных товраов"
        КонецЕсли;
            
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда
			
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СтрокаТаблицы.НДС;
			Проводка.Содержание   = "Передача ОС";
            
            Если ПравоСобственностиПереходитПослеГосРегистрации И НачислятьНДСНедвижимости Тогда
                Проводка.СчетДт          = ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке;
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные",  СтруктураШапкиДокумента.Ссылка);
            Иначе    
                Проводка.СчетДт          = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто);
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РеализуемыеАктивы", СтрокаТаблицы.ОсновноеСредство);
             КонецЕсли;
               
                Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет",Перечисления.ВидыПлатежейВГосБюджет.Налог);
        
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
			
		КонецЕсли;
		
	КонецЦикла;
    
    Если Не (ПравоСобственностиПереходитПослеГосРегистрации И НЕ НачислятьНДСНедвижимости) Тогда
        ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам,ТаблицаВзаиморасчетов, Отказ);
        // НДС будет начислен документом "Реализация отргруженных товраов"
    КонецЕсли;
	
	
	// Если ранее подготовка к передаче не была проведена
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокПодготовкаКПередачеОС) Тогда
		
		ТаблицаОстаточнойСтоимости = УправлениеВнеоборотнымиАктивами.ВыбытиеОС(ЭтотОбъект, СтруктураШапкиДокумента, ОС.ВыгрузитьКолонку("ОсновноеСредство"), СодержаниеПроводки, Отказ, Заголовок);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаДокумента", СтруктураШапкиДокумента.Дата);
		Запрос.УстановитьПараметр("Организация",   СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СписокОС",      ОС.ВыгрузитьКолонку("ОсновноеСредство"));
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтоимостьОС.Субконто1 КАК ОсновноеСредство,
		|	ЕСТЬNULL(СтоимостьОС.СуммаОстатокДт, 0) КАК ОстаточнаяСтоимость,
		|	ЕСТЬNULL(СтоимостьОС.СуммаНУОстатокДт, 0) КАК ОстаточнаяСтоимостьНУ,
		|	ЕСТЬNULL(СтоимостьОС.СуммаПРОстатокДт, 0) КАК ОстаточнаяСтоимостьПР,
		|	ЕСТЬNULL(СтоимостьОС.СуммаВРОстатокДт, 0) КАК ОстаточнаяСтоимостьВР
		|ИЗ 
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаДокумента, 
		|	                                        Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС),
		|	                                        ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), 
		|	                                        Организация = &Организация И Субконто1 В (&СписокОС)) КАК СтоимостьОС
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки
		|";
		ТаблицаОстаточнойСтоимости = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаОстаточнойСтоимости", ТаблицаОстаточнойСтоимости);
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ВнешнийИсточник.ОсновноеСредство КАК ОсновноеСредство,
	|	ВнешнийИсточник.ОстаточнаяСтоимость КАК ОстаточнаяСтоимость,
	|	ВнешнийИсточник.ОстаточнаяСтоимостьНУ КАК ОстаточнаяСтоимостьНУ,
	|	ВнешнийИсточник.ОстаточнаяСтоимостьПР КАК ОстаточнаяСтоимостьПР,
	|	ВнешнийИсточник.ОстаточнаяСтоимостьВР КАК ОстаточнаяСтоимостьВР
	|ПОМЕСТИТЬ 
	|   ТаблицаОстаточнойСтоимости
	|ИЗ 
	|	&ТаблицаОстаточнойСтоимости КАК ВнешнийИсточник";
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ТаблицаОстаточнойСтоимости.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОстаточнойСтоимости.ОстаточнаяСтоимость КАК ОстаточнаяСтоимость,
	|	ТаблицаОстаточнойСтоимости.ОстаточнаяСтоимостьНУ КАК ОстаточнаяСтоимостьНУ,
	|	ТаблицаОстаточнойСтоимости.ОстаточнаяСтоимостьПР КАК ОстаточнаяСтоимостьПР,
	|	ТаблицаОстаточнойСтоимости.ОстаточнаяСтоимостьВР КАК ОстаточнаяСтоимостьВР,
	|	ПередачаОСОС.СчетРасходов КАК СчетРасходов,
	|	ПередачаОСОС.Субконто КАК Субконто
	|ИЗ 
	|	ТаблицаОстаточнойСтоимости 
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ОсновноеСредство, СчетРасходов, Субконто ИЗ Документ.ПередачаОС.ОС ГДЕ Ссылка = &Ссылка) КАК ПередачаОСОС
	|	ПО ТаблицаОстаточнойСтоимости.ОсновноеСредство = ПередачаОСОС.ОсновноеСредство
	|";
	ТаблицаОстаточнойСтоимости = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаОС Из ТаблицаОстаточнойСтоимости Цикл
		
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокПодготовкаКПередачеОС) Тогда
		
			// Движения по регистру СобытияОСОрганизаций
			Движение = Движения.СобытияОСОрганизаций.Добавить();
			Движение.Период            = СтруктураШапкиДокумента.Дата;
			Движение.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			Движение.Организация       = СтруктураШапкиДокумента.Организация;
			Движение.Событие           = СтруктураШапкиДокумента.СобытиеОС;
			Движение.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
			Движение.НомерДокумента    = СтруктураШапкиДокумента.Номер;
			
		КонецЕсли;
		
		// Движения по регистру СостоянияОСОрганизаций
		Движение = Движения.СостоянияОСОрганизаций.Добавить();
		Движение.Период           = СтруктураШапкиДокумента.Дата;
		Движение.ДатаСостояния    = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		Движение.Организация      = СтруктураШапкиДокумента.Организация;
		Движение.Состояние        = Перечисления.СостоянияОС.СнятоСУчета;
		
		// Списание остаточной стоимости Дт 91.02 Кт 01.09
		СуммаПроводки   = СтрокаОС.ОстаточнаяСтоимость;
		СуммаПроводкиНУ = СтрокаОС.ОстаточнаяСтоимостьНУ;
		СуммаПроводкиПР = СтрокаОС.ОстаточнаяСтоимостьПР;
		СуммаПроводкиВР = СтрокаОС.ОстаточнаяСтоимостьВР;
						  
        Если СуммаПроводки <> 0 Или СуммаПроводкиНУ <> 0 Или СуммаПроводкиПР <> 0 Или СуммаПроводкиВР <> 0 Тогда
            
            Если ПравоСобственностиПереходитПослеГосРегистрации Тогда
                Проводка = Движения.Хозрасчетный.Добавить();
                
                Проводка.Период       = СтруктураШапкиДокумента.Дата;
                Проводка.Активность   = Истина;
                Проводка.Организация  = СтруктураШапкиДокумента.Организация;
                Проводка.Содержание   = СодержаниеПроводки;
                Проводка.Сумма        = СуммаПроводки;
                
                Проводка.СчетДт          = ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости;
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.Контрагент);
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаОС.ОсновноеСредство);
                
                Проводка.СчетКт                                                                        = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
                Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства] = СтрокаОС.ОсновноеСредство;
                
                БухгалтерскийУчет.УстановитьПодразделенияПроводки(
                Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
                
                Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
                    НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаПроводкиНУ,СуммаПроводкиНУ,СуммаПроводкиПР,СуммаПроводкиПР,СуммаПроводкиВР,СуммаПроводкиВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
                КонецЕсли;
                
            Иначе
                Проводка = Движения.Хозрасчетный.Добавить();
                
                Проводка.Период       = СтруктураШапкиДокумента.Дата;
                Проводка.Активность   = Истина;
                Проводка.Организация  = СтруктураШапкиДокумента.Организация;
                Проводка.Содержание   = СодержаниеПроводки;
                Проводка.Сумма        = СуммаПроводки;
                
                Проводка.СчетДт          = СтрокаОС.СчетРасходов;
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаОС.Субконто);
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РеализуемыеАктивы", СтрокаОС.ОсновноеСредство);
                
                Проводка.СчетКт                                                                        = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
                Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства] = СтрокаОС.ОсновноеСредство;
                
                БухгалтерскийУчет.УстановитьПодразделенияПроводки(
                Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
                
                Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
                    НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаПроводкиНУ,СуммаПроводкиНУ,СуммаПроводкиПР,СуммаПроводкиПР,СуммаПроводкиВР,СуммаПроводкиВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
                КонецЕсли;
                
            КонецЕсли;
        КонецЕсли;
		
	КонецЦикла;
		
	УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийОС(Ссылка, СтруктураШапкиДокумента.Организация, Движения.СостоянияОСОрганизаций,Отказ,Заголовок);
	
	ОтразитьВосстановлениеАмортизационнойПремии(ТаблицаПоТоварам, СтруктураШапкиДокумента);
	
	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		
		СписокОбъектов = ТаблицаПоТоварам.ВыгрузитьКолонку("ОсновноеСредство");
		
		ДатаРегистратора = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
		ТаблицаАмортизацииНУ = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНалогРеглФизЛицо(ЭтотОбъект,СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, СписокОбъектов, Истина, ДатаРегистратора);
		ТаблицаАмортизацииНУ.Колонки.ОС.Имя   = "ОбъектУчета";
		ТаблицаАмортизацииНУ.Колонки.Налог.Имя = "СуммаАмортизации";
		ТаблицаАмортизацииНУ.Колонки.Добавить("СчетАмортизации");
		ТаблицаАмортизацииНУ.Индексы.Добавить("ОбъектУчета");
		
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТаблицаАмортизацииНУ, СтруктураШапкиДокумента, "");
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		ДоходыИРасходыПредпринимателя.ОтражениеАмортизации(ЭтотОбъект, СтруктураШапкиДокумента, ТабЗатрат, УчетнаяПолитикаНУ);
		
				
		// Списание объекта
		ТаблицаАмортизацииНУ.Свернуть("ОбъектУчета, РасчетныйДокумент, ДокументОплаты, НоменклатурнаяГруппа, ХарактерДеятельности", "СуммаАмортизации,АмортизацияКонечныйОстаток");
		
		Для Каждого ОбъектОС Из ТаблицаАмортизацииНУ Цикл
			Если (ОбъектОС.СуммаАмортизации + ОбъектОС.АмортизацияКонечныйОстаток) <> 0 Тогда
				Движение = Движения.ИПМПЗ.ДобавитьПриход(); // самортизированную часть стоимости сторнируем, чтобы не попала в Книгу учета
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.Организация = СтруктураШапкиДокумента.Организация;
				Движение.НоменклатурнаяГруппа = ОбъектОС.НоменклатурнаяГруппа;
				Движение.ХарактерДеятельности = ОбъектОС.ХарактерДеятельности;
				Движение.ВидМПЗ = Перечисления.ВидыМПЗ.ОС;
				Движение.Номенклатура = ОбъектОС.ОбъектУчета;
				Движение.Партия = ОбъектОС.РасчетныйДокумент;
				Движение.ДокументОплаты = ОбъектОС.ДокументОплаты;
				Движение.Сумма = -(ОбъектОС.СуммаАмортизации + ОбъектОС.АмортизацияКонечныйОстаток);
			КонецЕсли;
		КонецЦикла;				
		
		ТаблицаПоТоварам.Колонки.Добавить("Номенклатура");
		ТаблицаПоТоварам.ЗагрузитьКолонку(ТаблицаПоТоварам.ВыгрузитьКолонку("ОсновноеСредство"), "Номенклатура");
		
		СчетУчета = ПланыСчетов.Хозрасчетный.ОсновныеСредства;
		
		ДоходыИРасходыПредпринимателя.СписаниеАмортизируемогоИмущества(ЭтотОбъект, СтруктураШапкиДокумента, ТаблицаПоТоварам, СчетУчета, "Субконто", УчетнаяПолитикаНУ);
		ДоходыИРасходыПредпринимателя.ЗачетОплатыПокупателя(ЭтотОбъект, СтруктураШапкиДокумента, Движения.ИПМПЗОтгруженные.Выгрузить(), ТаблицаВзаиморасчетов);
		
		//Движения.ИПМПЗ.Записать(Ложь);
		
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	//Учет курсовых разниц
    Если Не ПравоСобственностиПереходитПослеГосРегистрации Тогда
        БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);
    КонецЕсли;
	
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаАвансов, Отказ, Заголовок)
	
    Если НЕ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ
        СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) Или 
        ПравоСобственностиПереходитПослеГосРегистрации Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, Новый Структура("ТаблицаРасчетов", ТаблицаАвансов));
		
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки,ТаблицаАвансов, Отказ)
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СчетОтнесенияНДС = ПланыСчетов.Хозрасчетный.НДС;
		
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ, СчетОтнесенияНДС, ТаблицаАвансов);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	
	// Выборка строк табличной части
	СписокОС =
	"ВЫБРАТЬ
	|	ПередачаОСОС.ОсновноеСредство
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
	|ГДЕ
	|	ПередачаОСОС.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("СнятоСУчета",   Перечисления.СостоянияОС.СнятоСУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПередачаОСОС.НомерСтроки,
	|	ПередачаОСОС.ОсновноеСредство,
	|	ПередачаОСОС.Сумма,
	|	ПередачаОСОС.СтавкаНДС,
	|	ПередачаОСОС.СуммаНДС КАК НДС,
	|	ПередачаОСОС.НомерСтроки,
	|	ПередачаОСОС.СчетУчетаНДСПоРеализации,
	|	ПередачаОСОС.СчетДоходов,
	|	ПередачаОСОС.СчетРасходов,
	|	ПередачаОСОС.Субконто,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимостиБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК Направление_БУ,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеОрганизации,
	|	ВЫБОР КОГДА (ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство) ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ВЫБОР КОГДА (ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство) ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражалосьВНалоговомУчете,
	|	ВЫБОР КОГДА (ОС_СнятыеСУчета.ОсновноеСредство) ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК СнятоСУчета
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
	|		
	|		ГДЕ
	|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента И
	|			СостоянияОСОрганизацииСрезПоследних.Организация = &Организация И
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В( " + СписокОС + " ) И
	|			СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета
	|		ДЛЯ ИЗМЕНЕНИЯ
	|			РегистрСведений.СостоянияОСОрганизаций) КАК ОС_СнятыеСУчета
	|		ПО ПередачаОСОС.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	|ГДЕ
	|	ПередачаОСОС.Ссылка = &Ссылка
	|";
	РезультатЗапросаПоТоварам = Запрос.Выполнить();
	
	// Подготовим таблицу товаров для проведения
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	
КонецПроцедуры

Процедура ОтразитьВосстановлениеАмортизационнойПремии(СписокОС, СтруктураШапкиДокумента)
	
	Если НЕ ВосстановитьАмортизационнуюПремию Тогда
		Возврат;
	КонецЕсли;
	ДатаДока       = Дата;
	СписокОбъектов = СписокОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокОС", СписокОбъектов);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекущаяДата", ДатаДока);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.Период) КАК Период
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|			&ТекущаяДата,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ (РезультатЗапроса.Пустой()) Тогда
		ДатаНачала = РезультатЗапроса.Выгрузить()[0].Период;
	Иначе
		ДатаНачала = '20060101';
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокОС", СписокОбъектов);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(Новый МоментВремени(Дата, Ссылка), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("СчетКВ", ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения);
	Запрос.УстановитьПараметр("ОсновныеСредства", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаНУОборотКт) КАК СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Период,
	|			Счет В ИЕРАРХИИ (&СЧЕТКВ),
	|			&ОсновныеСредства,
	|			Организация = &Организация
	|				И Субконто1 В (&СписокОС),
	|			,
	|			) КАК НалоговыйОбороты";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ (РезультатЗапроса.Пустой()) Тогда
		СуммаАморПремии = РезультатЗапроса.Выгрузить()[0].СуммаОборотКт;
	Иначе
		СуммаАморПремии = 0;
	КонецЕсли;
	
	СуммаАморПремии = СуммаАморПремии + ?(СтруктураШапкиДокумента.Свойство("СуммаКапитальныхВложенийВключаемыхВРасходы"),СтруктураШапкиДокумента.СуммаКапитальныхВложенийВключаемыхВРасходы,0);
	
	Если СуммаАморПремии = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Амортизационная премия не применялась к указанным объектам. Восстановление амортизационной премии не сделано",,, СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	
	Проводка = Движения.Хозрасчетный.Добавить();
	
	Проводка.Период       = ДатаДока;
	Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание	  = "Передача ОС";
	
	Проводка.СчетДт = СчетУчетаРасчетовСКонтрагентом;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтатьяДляВосстановленияАмортизационнойПремии);
	
	Проводка.Сумма        = 0;
	Проводка.СуммаНУДт    = 0;
	Проводка.СуммаНУКт    = СуммаАморПремии;
	Проводка.СуммаПРДт    = 0;
	Проводка.СуммаПРКт    = -СуммаАморПремии;
	
КонецПроцедуры

// Процедуры и  функции, обслуживающие зачет авансов

Функция ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ТаблицаЗачетаАвансов = ЗачетАвансов.ВыгрузитьКолонки();
	Иначе
		ТаблицаЗачетаАвансов = ЗачетАвансов.Выгрузить();
		ТаблицаЗачетаАвансов.Свернуть("ДокументАванса", "СуммаЗачета");
	КонецЕсли;
	ТаблицаЗачетаАвансов.Колонки.ДокументАванса.Имя = "ДокументРасчетов";
	ТаблицаЗачетаАвансов.Колонки.СуммаЗачета.Имя    = "СуммаВзаиморасчетов";
	
	Возврат ТаблицаЗачетаАвансов;

КонецФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если (ТаблицаЗачетаАвансов.Количество() = 0) Тогда
		
		Если СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли (ТаблицаЗачетаАвансов.Количество() = 1) 
		И (НЕ ЗначениеЗаполнено(ТаблицаЗачетаАвансов[0].ДокументРасчетов)) Тогда
	
		ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		
	Иначе
	
		СтруктураОбязательныхПолей = Новый Структура("ДокументАванса");
    	
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(
			ЭтотОбъект, "ЗачетАвансов", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик события "ПередЗаписью" документа.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС");
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью

// Обработчик события "ОбработкаПроведения" документа.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);

	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Проверим, достаточно ли данных в таблице по ОС.
	ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Проверка заполнения ТЧ
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Зачет авансов
	ТаблицаЗачетаАвансов = ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок);

	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
		СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента, Отказ, Заголовок);
	
	// Движения по документу
	Если НЕ Отказ Тогда
		
		ПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата);	
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаЗачетаАвансов, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Обработчик события "ОбработкаУдаленияПроведения" документа.
// 
Процедура ОбработкаУдаленияПроведения(Отказ)
			
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураВыданный", Ложь);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

