////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// Хранит список видов договоров, доступных для данного документа
Перем мСписокВидовДоговоров; 

// Хранит соответствие объектов ОС и их инвентарных номеров из регистра сведений
Перем СоответствиеОС_ИнвентарныйНомер;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

//Используется для определения необходимости открытия настроек движения после сохранения
Перем ОткрыватьНастройкуДвижений;

// {ОбособленныеПодразделения
// Хранит текущее подразделение организации, используется для определения необходимости 
// установки нового номера документа, если документы по подразделению нумеруются отдельно.
Перем мТекущееПодразделениеОрганизации;
// }ОбособленныеПодразделения 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОС,ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт
    
	ВыписыватьСчетФактуру = ПолучитьВыписыватьСчетФактуру();

	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок 		= ?(ВыписыватьСчетФактуру
															, РаботаСДиалогами.ПолучитьТекстСчетаФактуры(УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураВыданный"))
															, "Счет-фактура не требуется");
	ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка 	= ВыписыватьСчетФактуру;

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

// Функция возвращает значение параметра учетной политики "Начислять НДС по отгрузке без перехода права собственности"
// на дату документа отгрузки
Функция ПолучитьВыписыватьСчетФактуру()
	
	Отказ = Ложь;
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, Организация);
	
	Если Отказ Тогда
		Возврат Истина;
    ИначеЕсли Дата < '20110101' Тогда
        Возврат Истина;
    ИначеЕсли (Не УчетнаяПолитика.НачислятьНДСПриПередачеНедвижимости И ПравоСобственностиПереходитПослеГосРегистрации) Или УчетнаяПолитика.УСН Тогда
         Возврат Ложь;
     Иначе
         Возврат Истина;
 	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураВыданный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

Процедура ПриИзмененииСчетаДоходов()
	
	СтрокаТЧ = ЭлементыФормы.ОС.ТекущиеДанные;
	Счет     = СтрокаТЧ.СчетДоходов;

	УстановитьАналитику(Счет, СтрокаТЧ.Субконто);

	ЭлементыФормы.ОС.Колонки.Субконто.Доступность = НЕ (НЕ ЗначениеЗаполнено(Счет) ИЛИ (Счет.ВидыСубконто.Количество() = 0));
	
КонецПроцедуры // ПриИзмененииСчетаДоходов()

Процедура ПриДобавленииОС(СтрокаТабличнойЧасти)
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СчетДоходов = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	СтрокаТабличнойЧасти.СчетРасходов = ПланыСчетов.Хозрасчетный.ПрочиеРасходы; 
		
	СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = СтрокаТабличнойЧасти.СчетРасходов;
		
	Счет = СтрокаТабличнойЧасти.СчетДоходов;

	УстановитьАналитику(Счет, СтрокаТабличнойЧасти.Субконто);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "ОС", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Колонки = ЭлементыФормы.ОС.Колонки;

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> Колонки.СтавкаНДС.Видимость Тогда
		Колонки.СтавкаНДС.Видимость = УчитыватьНДС;
	КонецЕсли;

	Если УчитыватьНДС <> Колонки.СуммаНДС.Видимость Тогда
		Колонки.СуммаНДС.Видимость = УчитыватьНДС;
	КонецЕсли;
	
	ЭтоУСН  = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
    ЭтоИП = (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	ПодготовкаКПередаче = НЕ ЗначениеЗаполнено(ДокПодготовкаКПередачеОС);
	
	НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата);
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость = ПоказыватьВДокументахСчетаУчета;
	
	ЭлементыФормы.ВосстановитьАмортизационнуюПремию.Видимость              = НЕ ЭтоУСН;
	ЭлементыФормы.НадписьСтатьяДоходов.Видимость                           = НЕ ЭтоУСН;
	ЭлементыФормы.СтатьяДляВосстановленияАмортизационнойПремии.Видимость   = НЕ ЭтоУСН;
	ЭлементыФормы.СтатьяДляВосстановленияАмортизационнойПремии.Доступность = НЕ ЭтоУСН И ВосстановитьАмортизационнуюПремию;
	ЭлементыФормы.НадписьСтатьяДоходов.Доступность                         = НЕ ЭтоУСН И ВосстановитьАмортизационнуюПремию;
    
    ДоступностьФлагаНедвижимости = (Дата >= '20110101');
    
    ЭлементыФормы.ПравоСобственностиПереходитПослеГосРегистрации.Доступность = ДоступностьФлагаНедвижимости;
    ЭлементыФормы.ИнфНадписьНедвижимость.Доступность                         = ДоступностьФлагаНедвижимости;
	
	// Зачет авансов
	
	ЗачетАвансовВозможен = Истина;
	
	ЭлементыФормы.СпособЗачетаАвансов.Доступность = ЗачетАвансовВозможен;
	
	ЗачетПоДокументу   = ЗачетАвансовВозможен И (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу);
	ЗачетАвтоматически = ЗачетАвансовВозможен И (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
	
	ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Доступность        = ЗачетПоДокументу ИЛИ ЗачетАвтоматически;
	ЭлементыФормы.НадписьСчетУчетаРасчетовПоАвансам.Доступность = ЗачетПоДокументу ИЛИ ЗачетАвтоматически;
	
	ЭлементыФормы.СчетУчетаРасчетовПоАвансам.АвтоОтметкаНезаполненного = ЗачетПоДокументу ИЛИ ЗачетАвтоматически;
	Если НЕ (ЗачетПоДокументу ИЛИ ЗачетАвтоматически) Тогда
		ЭлементыФормы.СчетУчетаРасчетовПоАвансам.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ЗачетАвансов.Видимость = ЗачетПоДокументу;
	Если СписокДокументовАванса Тогда
		ЭлементыФормы.ПанельЗачетАвансов.ТекущаяСтраница = ЭлементыФормы.ПанельЗачетАвансов.Страницы.СписокАвансов;
	Иначе
		ЭлементыФормы.ПанельЗачетАвансов.ТекущаяСтраница = ЭлементыФормы.ПанельЗачетАвансов.Страницы.ОдинАванс;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

// Заполнение реквизитов шапки документа значениями по умолчанию
//
Процедура ЗаполнитьДаннымиПоУмолчанию(ДокументОбъект)

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.СобытиеОС) Тогда
		ДокументОбъект.СобытиеОС = УправлениеВнеоборотнымиАктивами.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.Передача);
	КонецЕсли;

	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.СчетУчетаРасчетовСКонтрагентом) Тогда
		ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.СчетУчетаРасчетовПоАвансам) Тогда
		ДокументОбъект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС"));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(ОС.Итог("СуммаНДС"));

	// Зачет авансов
	Если ЗачетАвансов.Найти(0, "СуммаЗачета") <> Неопределено Тогда
		ЭлементыФормы.ВсегоЗачетАвансов.Значение = "<Авто>";
	Иначе
		ЭлементыФормы.ВсегоЗачетАвансов.Значение = ОбщегоНазначения.ФорматСумм(ЗачетАвансов.Итог("СуммаЗачета"));
	КонецЕсли;
	
	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
						+ " " +  ДокументОбъект.ВалютаДокумента
		                + " = " + ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;


КонецПроцедуры // ОбновитьПодвал()

// Процедура заполняет соответствие выбранных в форме объектов ОС и их инвентарных номеров 
// по срезу последних на дату документа из регистра сведений "ПервоначальныеСведенияОСБухгалтерскийУчет"
// 
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОсновныеСредства или Массив
//
Процедура ЗаполнитьСоответствиеОС_ИнвентарныйНомер(ОсновноеСредство)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	 |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер
	 |ИЗ
	 |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СоответствиеОС_ИнвентарныйНомер.Вставить(Результат.ОсновноеСредство, Результат.ИнвентарныйНомер);
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет инвентарный номер по объекту ОС
// по соответствию СоответствиеОС_ИнвентарныйНомер
// 
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОсновныеСредства
//                     
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьСоответствиеОС_ИнвентарныйНомер(ОсновноеСредство);
	
	Если СоответствиеОС_ИнвентарныйНомер[ОсновноеСредство] = Неопределено Тогда
		ЗаполнитьСоответствиеОС_ИнвентарныйНомер(ОсновноеСредство);
	КонецЕсли;
	
	Возврат СоответствиеОС_ИнвентарныйНомер[ОсновноеСредство];
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
    
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),мВалютаРегламентированногоУчета,"Продажа",ПараметрОбъектКопирования);
		ЗаполнитьДаннымиПоУмолчанию(ЭтотОбъект);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
    
	//Устанавливает необходимость открытия настроек движения после сохранения
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьДвиженияПриПроведении");

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("СчетДоходов");
	СтруктураКолонок.Вставить("СчетРасходов");
	СтруктураКолонок.Вставить("Субконто");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ОС.Колонки, СтруктураКолонок);
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	// {ОбособленныеПодразделения
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;

	// Зачет авансов
	Если ЗачетАвансов.Количество() > 0 Тогда
		ЭлементыФормы.ЗачетАвансов.ТекущаяСтрока       = ЗачетАвансов[0];
		ЭлементыФормы.ТабПолеСуммыЗачета.ТекущаяСтрока = ЗачетАвансов[0];
	КонецЕсли;
	СписокДокументовАванса = (ЗачетАвансов.Количество() > 1);
	
    // Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	ЗаполнитьТекстПроСчетФактуру();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,,ЭлементыФормы.ОС);

	// Заполнить соответствие объектов ОС и их инвентарных номеров
	ЗаполнитьСоответствиеОС_ИнвентарныйНомер(ОС.ВыгрузитьКолонку("ОсновноеСредство"));
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);	
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
			
	ОбщегоНазначения.ОткрытьЖурналДокумента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	ИначеЕсли ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" Тогда
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			Если Параметр.Найти(Ссылка) <> Неопределено Тогда
				ЗаполнитьТекстПроСчетФактуру();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
            
	//Открыть настройку движений
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен, ОткрыватьНастройкуДвижений, Ссылка, ЭтотОбъект);

	// Если открыли данную форму из формы документа, то там надо поменять текст
	Если ВладелецФормы<>Неопределено Тогда

		// Надо поменять текст про документ в форме-владельце
		Если ТипЗнч(ВладелецФормы) = Тип("Форма") 
		И ВладелецФормы.Заголовок = "ОсновныеСредства" Тогда
			ВладелецФормы.ЗаполнитьТекстПроДокументы();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.ОС.Заголовок = "Основные средства (" + ДокументОбъект.ОС.Количество() + " поз.)";

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			СтрокаТабличнойЧасти = ОС.Найти(ЗначениеВыбора,"ОсновноеСредство");
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				Предупреждение("Это основное средство уже подобрано!",60);
			Иначе
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ЗначениеВыбора;
				ПриДобавленииОС(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
        

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	//Открывает форму движений документа для ручного редактирования
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "По наименованию" из меню "Заполнить"
// командной панели формы. Процедура добавляет в табличную часть основные средства,
// наименование которых совпадает с наименованием текущего выбранного в табличной части ОС
//
Процедура КоманднаяПанельОСЗаполнитьПоНаименованию(Кнопка)
	
	Если ЭлементыФормы.ОС.ТекущаяСтрока = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредство = ЭлементыФормы.ОС.ТекущиеДанные.ОсновноеСредство;
	
	Если ОсновноеСредство = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредствоНаименование = Строка(ОсновноеСредство);
	
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("СписокОС",     СписокОС);
	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.Код КАК ОсновноеСредствоКод
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И ОсновныеСредства.Ссылка НЕ В (&СписокОС)
	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ";
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОС.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Другие элементы справочника с наименованием <" + ОсновноеСредствоНаименование + "> в справочнике ""Основные средства"" отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаОС.Следующий() Цикл
		НоваяСтрока = ОС.Добавить();
		НоваяСтрока.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура вызывается при нажании кнопки Подбор командной панели "КоманднаяПанельОС"
//
Процедура КоманднаяПанельОСПодбор(Кнопка)
	ФормаВыбора = Справочники.ОсновныеСредства.ПолучитьФормуВыбора(, ЭтаФорма);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "ОС", вызывает сервисный механизм для изменения
// общих для всей табличной части "ОС" реквизитов - таких, например,
// как тип цен, валюта и т. д.
// Должен выполнять пересчет в новую валюту документа!!!
//
Процедура ДействияФормыДействиеЦеныВалюта(Кнопка)

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, Неопределено, СтруктураРеквизитовДокумента, , "ОС", мВалютаРегламентированногоУчета, Неопределено, СтруктураЗначений);

		Для Каждого СтрокаТабличнойЧасти Из ОС Цикл
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КОнецЦикла;

	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата);
    УстановитьВидимость();
    ПравоСобственностиПереходитПослеГосРегистрации = ?(Дата < '20110101', Ложь, ПравоСобственностиПереходитПослеГосРегистрации);

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении реквизита Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата);
	
	КонтрагентПриИзменении(Элемент);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Неопределено;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "ОС", мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	// Зачет авансов
	УстановитьСпособЗачетаАвансов();
	
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	
	//Проверим какие же счета будем изменять
	ЗаполнятьСчетаРасчета = Ложь; //Заполнять ли счета расчетов
	ЗадаватьВопрос	   	  = Ложь; //Если заполнять то Задавать ли вопрос о его перезаполнении 

	Если ПоказыватьВДокументахСчетаУчета Тогда
		
		СтруктураОбязательныхПолей = Новый Структура;
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетовПокупателя);
		СтруктураНеОбязательныхПолей = Новый Структура;
		
		БухгалтерскийУчет.ПроверитьНеобходимостьПерезаполненияСчетовУчета(ЭтотОбъект, СтруктураОбязательныхПолей,СтруктураНеОбязательныхПолей, ЗадаватьВопрос, ЗаполнятьСчетаРасчета);
		
		Если ЗадаватьВопрос Тогда
			
			Ответ = Вопрос("Установить счета учета расчетов в соответствии со значениями по умолчанию?", 
			РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета расчетов");
			
 			Если Ответ = КодВозвратаДиалога.Нет Тогда
				ЗаполнятьСчетаРасчета = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе

		ЗаполнятьСчетаРасчета     = Истина;
		
	КонецЕсли;

	Если ЗаполнятьСчетаРасчета Тогда
		СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект,мСписокВидовДоговоров);

	// Могли поменять договор.
	ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        мСписокВидовДоговоров, СтандартнаяОбработка)

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

	Для Каждого СтрокаТабличнойЧасти Из ОС Цикл
		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КОнецЦикла;

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

Процедура ДокПодготовкаКПередачеОСНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.ПодготовкаКПередачеОС.ПолучитьФормуВыбора(, Элемент, );
	ФормаВыбора.Открыть();
	ФормаВыбора.ДокументСписок.Отбор.Организация.Установить(Организация);
	
КонецПроцедуры // ДокПодготовкаКПередачеОСНачалоВыбора()

// При изменении документа Подготовка к передаче
//
Процедура ДокПодготовкаКПередачеОСПриИзменении(Элемент)
	УстановитьВидимость();
	Если НЕ ЗначениеЗаполнено(ДокПодготовкаКПередачеОС) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОС.Количество()>0 Тогда
		Если Вопрос("При заполнении существующие данные в табличной части будут удалены! Продолжить?", 
			        РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПодразделениеОрганизации = ДокПодготовкаКПередачеОС.ПодразделениеОрганизации;
	
	ОС.Очистить();
	ТЧПодготовкаКПередаче = ДокПодготовкаКПередачеОС.ОС.Выгрузить();
	Если ТЧПодготовкаКПередаче.Количество()>0 Тогда
		ОС.Загрузить(ТЧПодготовкаКПередаче);
	КонецЕсли;
	
	Для каждого Строка из ОС Цикл
		
		ПриДобавленииОС(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы СобытиеОС
//
Процедура СобытиеОСНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВидыСобытий = Новый СписокЗначений;
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Передача);

	УправлениеВнеоборотнымиАктивами.НачалоВыбораЗначенияСобытийОС(Элемент, ВидыСобытий, СтандартнаяОбработка);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Оборудование". Формирует данные в колонке "Инв. номер".
//
Процедура ОСПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ОС.Колонки.ИнвентарныйНомер.Видимость Тогда
		ОформлениеСтроки.Ячейки.ИнвентарныйНомер.УстановитьТекст(ПолучитьСоответствиеОС_ИнвентарныйНомер(ДанныеСтроки.ОсновноеСредство));
	КонецЕсли;
	
	Если ЭлементыФормы.ОС.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.СчетУчетаНДСПоРеализации.ОтметкаНезаполненного = (УчитыватьНДС И ДанныеСтроки.СуммаНДС <> 0 И Не ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДСПоРеализации));
	
КонецПроцедуры // ОСПриВыводеСтроки()

// Процедура - обработчик события "ПриАктивизацииСтроки" 
// табличной части "Товары".
//
Процедура ОСПриАктивизацииСтроки(Элемент)

	Если ЭлементыФормы.ОС.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Счет = ЭлементыФормы.ОС.ТекущиеДанные.СчетДоходов;

	ЭлементыФормы.ОС.Колонки.Субконто.Доступность = НЕ (НЕ ЗначениеЗаполнено(Счет) ИЛИ (Счет.ВидыСубконто.Количество() = 0));

КонецПроцедуры // ТоварыПриАктивизацииСтроки()

// Процедура при изменении ОС в табличной части
//
Процедура ОСОсновноеСредствоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ОС.ТекущиеДанные;
	ПриДобавленииОС(СтрокаТабличнойЧасти);

КонецПроцедуры

// При изменении ставки НДС табличной части ОС
//
Процедура ОССтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.ОС.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// При изменении суммы в табличной части ОС
//
Процедура ОССуммаПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.ОС.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

Процедура УстановитьАналитику(Счет, Субконто)

	Если Счет.ВидыСубконто.Количество() > 0 Тогда

		Если Счет.ВидыСубконто[0].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Субконто)) тогда
			//Не надо менять, значение подходит
		Иначе
			Субконто = Новый(Счет.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;

	Иначе

		Субконто = Неопределено;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "ОС".
//
Процедура ОССчетДоходовПриИзменении(Элемент)

	ПриИзмененииСчетаДоходов();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "ОС".
//
Процедура ОССчетДоходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "ОС".
//
Процедура ОССубконтоПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.ОС.ТекущиеДанные;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "ОС".
//
Процедура ОССчетРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "ОС".
//
Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "ОС".
//
Процедура СчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "ОС".
//
Процедура ОССчетУчетаНДСПоРеализацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// {ОбособленныеПодразделения

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
 	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

// Проверка изменения подразделения организации. 
// Необходима для корректной нумерации документов в подразделениях.
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если НЕ ПустаяСтрока(Номер) 
	   И РаботаСДиалогами.ИзменилсяПрефиксПодразделенияОрганизации(мТекущееПодразделениеОрганизации, ПодразделениеОрганизации) Тогда
	   
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	мТекущееПодразделениеОрганизации = ПодразделениеОрганизации;
	
КонецПроцедуры // ПриИзмененииПодразделенияОрганизации()

// }ОбособленныеПодразделения 

Процедура ВосстановитьАмортизационнуюПремиюПриИзменении(Элемент)
	
	УстановитьВидимость();
	
	Если Элемент.Значение Тогда
	
		Если НЕ ЗначениеЗаполнено(СтатьяДляВосстановленияАмортизационнойПремии) Тогда
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ВидДохода", Перечисления.ВидыПрочихДоходовИРасходов.ДоходыСвязанныеСВосстановлениемАмортизационнойПремии);
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПрочиеДоходыИРасходы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
			|ГДЕ
			|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = &ВидДохода
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПрочиеДоходыИРасходы.Код";
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ (РезультатЗапроса.Пустой()) Тогда
				СтатьяДляВосстановленияАмортизационнойПремии = РезультатЗапроса.Выгрузить()[0].Ссылка;
			Иначе
				СтатьяДляВосстановленияАмортизационнойПремии = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтатьяДляВосстановленияАмортизационнойПремии = Перечисления.ВидыПрочихДоходовИРасходов.ПустаяСсылка();
		
	КонецЕсли;
	  
КонецПроцедуры // ВосстановитьАмортизационнуюПремиюПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ОБСЛУЖИВАЮЩИЕ ЗАЧЕТ АВАНСОВ

Процедура УстановитьСпособЗачетаАвансов()

	СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовПоАвансам) Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
			Организация, Контрагент, ДоговорКонтрагента);
		СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;
	
	ЗачетАвансов.Очистить();
	СписокДокументовАванса = Ложь;

КонецПроцедуры

Процедура СпособЗачетаАвансовПриИзменении(Элемент)
	
	СчетУчетаРасчетовПоАвансам = Неопределено;
	ЗачетАвансов.Очистить();
	СписокДокументовАванса = Ложь;
	
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически
		ИЛИ СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
			Организация, Контрагент, ДоговорКонтрагента);
		СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
		
	КонецЕсли;
		
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ЗачетАвансов.Добавить();
		ЭлементыФормы.ЗачетАвансов.ТекущаяСтрока       = ЗачетАвансов[0];
		ЭлементыФормы.ТабПолеСуммыЗачета.ТекущаяСтрока = ЗачетАвансов[0];
	КонецЕсли;
	
	УстановитьВидимость();
	
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ЗачетАвансов;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокДокументовАвансаПриИзменении(Элемент)
	
	Если НЕ СписокДокументовАванса И ЗачетАвансов.Количество() > 1 Тогда

		ТекстВопроса = "Все строки зачета авансов, кроме первой, будут удалены.
		|Продолжить?";

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ <> КодВозвратаДиалога.Да Тогда
			СписокДокументовАванса = Истина;
			Возврат;
		КонецЕсли;

		Пока ЗачетАвансов.Количество() > 1 Цикл
			ЗачетАвансов.Удалить(ЗачетАвансов.Количество() - 1);
		КонецЦикла;
        
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДокументАвансаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка  = Ложь;

	СтруктураПараметров   = Новый Структура;
	СтруктураПараметров.Вставить("Организация",                Организация);
	СтруктураПараметров.Вставить("Контрагент",                 Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",         ДоговорКонтрагента);
	СтруктураПараметров.Вставить("КонецПериода",               Дата-1);
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СчетУчетаРасчетовПоАвансам);
	СтруктураПараметров.Вставить("СторонаСчета",               "Кт");
	СтруктураПараметров.Вставить("ЭтоНовыйДокумент",           ЭтоНовый());
	СтруктураПараметров.Вставить("РежимОтбораДокументов",      Перечисления.РежимОтбораДокументов.ПоОстаткам);

	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(
		СтруктураПараметров, Элемент, Метаданные().ТабличныеЧасти.ЗачетАвансов.Реквизиты.ДокументАванса.Тип);

КонецПроцедуры

Процедура ДокументАвансаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ЗачетАвансов.ТекущиеДанные;
	ТекДанные.СуммаЗачета = 0;
	
КонецПроцедуры

Процедура ЗачетАвансовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	
		Если ОформлениеСтроки.ДанныеСтроки.СуммаЗачета = 0 Тогда
		
			ОформлениеСтроки.Ячейки.СуммаЗачета.Текст = "<Авто>";
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПравоСобственностиПереходитПослеГосРегистрацииПриИзменении(Элемент)
    ЗаполнитьТекстПроСчетФактуру()
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСписокВидовДоговоров = Новый СписокЗначений;
мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);

СоответствиеОС_ИнвентарныйНомер = Новый Соответствие();
