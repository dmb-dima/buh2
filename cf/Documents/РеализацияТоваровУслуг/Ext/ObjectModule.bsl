Перем мВалютаРегламентированногоУчета Экспорт;

Перем ТаблицаВзаиморасчетов;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Получатель,
	|	Организация,
	// {ОбособленныеПодразделения
	|	ПодразделениеОрганизации,
	// }ОбособленныеПодразделения
	|	Организация КАК Поставщик,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаХранения,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	СтранаПроисхождения КАК СтранаПроисхождения,
	|	НомерГТД КАК НомерГТД,
	|   НомерСтроки,
	|	1 КАК ID
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		СтранаПроисхождения  КАК СтранаПроисхождения,
	|		НомерГТД             КАК НомерГТД,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Цена,
	|		СтавкаНДС,
	|		СтранаПроисхождения,
	|		НомерГТД
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Цена,
	|	Сумма,
	|	0,
	|	NULL,
	|	NULL,
	|	НомерСтроки,
	|	2
	|	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	NULL,
	|	NULL,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаХранения,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	NULL,
	|	NULL,
	|	НомерСтроки,
	|	3
	|	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	NULL,
	|	NULL,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаХранения,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	NULL,
	|	NULL,
	|	НомерСтроки,
	|	4
	|	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Расходная накладная");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	СведенияОбОрганизации   = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик 				= Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	СведенияОКонтрагенте    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
		ТабДокумент.Присоединить(ОбластьДанных);

		Скидка = 0;
		
		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		Если ЗапросТовары.Итог("СуммаНДС") <> 0 Тогда
			ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
			ОбластьДанных.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		Иначе
			ОбластьСуммы.Параметры.ВсегоНДС = "-";
			ОбластьДанных.Параметры.НДС      = "Без налога (НДС)";
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьТОРГ12(БезУслуг = Ложь)
    Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата КАК ДатаДокумента,
	|	Организация,
	|	Организация КАК ЮрФизЛицо,
	|	Организация КАК Поставщик,
	|	Организация КАК Контрагент,
	|	Организация КАК Руководители,
	// {ОбособленныеПодразделения
	|	ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	// }ОбособленныеПодразделения
	|	АдресДоставки КАК АдресДоставки,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Контрагент
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      ТОГДА Организация
	|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	БанковскийСчетОрганизации КАК БанковскийСчет,
	|	Контрагент КАК Покупатель,
	|	Контрагент КАК Плательщик,
	|	ДоговорКонтрагента.Представление  КАК Основание,
	|	ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов      КАК Курс,
	|	КратностьВзаиморасчетов КАК Кратность,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Курс",            ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект,      мВалютаРегламентированногоУчета));
	Запрос.УстановитьПараметр("Кратность",       ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
	
	Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.НомерСтроки КАК Номер,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.Код КАК ТоварКод,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.КоличествоМест,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ВидУпаковки,
	|	РеализацияТоваровУслуг.Коэффициент,
	|	РеализацияТоваровУслуг.Коэффициент КАК КоличествоВОдномМесте,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность КАК Цена,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность КАК Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	РеализацияТоваровУслуг.Сумма  КАК СуммаВВалютеДокумента,
	|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДСВВалютеДокумента,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	1 КАК ID
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ";
	
	Если НЕ БезУслуг Тогда
		Текст = Текст +"
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.НомерСтроки,
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	РеализацияТоваровУслуг.Номенклатура.Код,
		|	РеализацияТоваровУслуг.Количество,
		|	0,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	NULL,
		|	0,
		|	0,
		|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.Сумма,
		|	РеализацияТоваровУслуг.СуммаНДС,
		|	РеализацияТоваровУслуг.СтавкаНДС,
		|	3
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.НомерСтроки,
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	РеализацияТоваровУслуг.Номенклатура.Код,
		|	РеализацияТоваровУслуг.Количество,
		|	0,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	NULL,
		|	0,
		|	0,
		|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.Сумма,
		|	РеализацияТоваровУслуг.СуммаНДС,
		|	РеализацияТоваровУслуг.СтавкаНДС,
		|	4
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|
		|
		|ОБЪЕДИНИТЬ ВСЕ";
	КонецЕсли;
	Текст = Текст +"
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	РеализацияТоваровУслуг.Номенклатура.Код,
	|	РеализацияТоваровУслуг.Количество,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL,
	|	0,
	|	0,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность,
	|	0,
	|	РеализацияТоваровУслуг.Сумма,
	|	0,
	|	NULL,
	|	2
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	Номер";
	Запрос.Текст = Текст;
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Код","Номенклатура.Артикул");
	КонецЕсли;
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Если Проведен И (Шапка.РасчетыВУсловныхЕдиницах
		ИЛИ (Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета И Дата >= '20090101000000')) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", СчетУчетаРасчетовСКонтрагентом);
		Текст = 
		"ВЫБРАТЬ
		|	СУММА(Хозрасчетный.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Регистратор = &Ссылка
		|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовСКонтрагентом
		|	И Хозрасчетный.СчетКт В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				РеализацияТоваровУслугТовары.СчетДоходов
		|			ИЗ
		|				Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|			ГДЕ
		|				РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
		Если НЕ БезУслуг Тогда
			Текст = Текст +"
			|
			|           ОБЪЕДИНИТЬ
			|
			|			ВЫБРАТЬ РАЗЛИЧНЫЕ
			|				РеализацияТоваровУслугУслуги.СчетДоходов
			|			ИЗ
			|				Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
			|			ГДЕ
			|				РеализацияТоваровУслугУслуги.Ссылка = &Ссылка)
			|";
		Иначе
			Текст = Текст +")";
		КонецЕсли;
		Запрос.Текст = Текст;
		СуммаВзаиморасчетов = Запрос.Выполнить().Выгрузить()[0].Сумма;
		
		РасчетСуммыНДСПоСтавке =  УчетНДС.РасчетНДСвРубляхПоСтавкеДокумента(Шапка.ДатаДокумента);
		
		Если НЕ СуммаВзаиморасчетов = NULL Тогда
			
			ЗапросТовары.Колонки.Добавить("СуммаБезНДС");
			
			МассивРаспределения = Новый Массив;
			
			Для Каждого СтрокаТовар Из ЗапросТовары Цикл
				
				Если (СтрокаТовар.ID = 2) Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаСНДС = СтрокаТовар.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДС);
				СуммаБезНДС = СуммаСНДС - СтрокаТовар.СуммаНДС;

				МассивРаспределения.Добавить(СуммаСНДС);
				СтрокаТовар.СуммаБезНДС = СуммаБезНДС;
			    				
			КонецЦикла;
			
			ЗапросТовары.Колонки.Добавить("СуммаРублевая");
			УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, ЗапросТовары, "СуммаРублевая");
			
			Для Каждого СтрокаТовар Из ЗапросТовары Цикл
				
				Если (СтрокаТовар.ID = 2) Тогда
					Продолжить;
				КонецЕсли;
				
				Если РасчетСуммыНДСПоСтавке Тогда
					//Выделение суммы НДС, Расчет суммы без НДС
					ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаТовар.СтавкаНДС);
					
					СтрокаТовар.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаТовар.СуммаРублевая * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
					СтрокаТовар.Сумма = СтрокаТовар.СуммаРублевая - СтрокаТовар.СуммаНДС;
					
				Иначе
					МассивРаспределения.Очистить();
					МассивРаспределения.Добавить(СтрокаТовар.СуммаБезНДС);
					МассивРаспределения.Добавить(СтрокаТовар.СуммаНДС);
					МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТовар.СуммаРублевая, МассивРаспределения);
					Если МассивРаспределенныхСумм <> Неопределено Тогда
						СтрокаТовар.Сумма = МассивРаспределенныхСумм[0];
						СтрокаТовар.СуммаНДС = МассивРаспределенныхСумм[1];
					КонецЕсли;
				КонецЕсли;
				
				Если Шапка.СуммаВключаетНДС Тогда
					СтрокаТовар.Сумма = СтрокаТовар.Сумма+СтрокаТовар.СуммаНДС;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";

	Макет = ПолучитьОбщийМакет("ТОРГ12");
	
	ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");

	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента, , Шапка.БанковскийСчет);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	
	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	ОбластьМакетаШапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	
	Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
		ПредставлениеГрузополучателяДоАдреса    = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ИНН,");
		ПредставлениеГрузополучателяПослеАдреса = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузополучателе, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "",
			"", ПредставлениеГрузополучателяДоАдреса+", ") + Шапка.АдресДоставки
			+ ?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса);
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузополучателе,"НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);

	// Выводим всевозможные коды
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
	ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ОснованиеНомер             = "";
	ОбластьМакетаШапка.Параметры.ОснованиеДата              = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";

	ТабДокумент.Вывести(ОбластьМакетаШапка);

	// Инициализация счетчика страниц
	НомерСтраницы = 1;

	// Инициализация итогов по странице
	ИтогоМестНаСтранице       = 0;
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаНаСтранице      = 0;
	ИтогоНДСНаСтранице        = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// Инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	ИтогоСумма      = 0;
	ИтогоНДС        = 0;
	
	// Инициализация счетчика строк
	НомерСтроки     = 0;
	КоличествоСтрок = ЗапросТовары.Количество();

	// Выводим заголовок многострочной части
	ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Выводим многострочную часть документа
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		НомерСтроки = НомерСтроки + 1;

		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
		
		ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
			ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
			ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
		КонецЕсли;
		
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);

		СуммаСНДС = (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
		
		КоличествоМест = ВыборкаСтрок.КоличествоМест;
		Количество     = ВыборкаСтрок.Количество;
		СуммаНДС       = ВыборкаСтрок.СуммаНДС;
		СуммаБезНДС    = СуммаСНДС - СуммаНДС;

		ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
		Если Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета И (НЕ Шапка.СуммаВключаетНДС ИЛИ СуммаНДС = 0) Тогда
			ОбластьМакетаСтрока.Параметры.Цена    = ВыборкаСтрок.Цена;
		Иначе
			ОбластьМакетаСтрока.Параметры.Цена    = СуммаБезНДС / ?(Количество = 0, 1, Количество);
		КонецЕсли;
		
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		Если НомерСтроки = 1 Тогда
			СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
		КонецЕсли;                                                   // помещаться заголовок
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
		Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;

		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда

			Если КоличествоСтрок > 1 Тогда
				
				// Выводим итоги по странице
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
				
				// Очистим итоги по странице
				ИтогоМестНаСтранице       = 0;
				ИтогоКоличествоНаСтранице = 0;
				ИтогоСуммаНаСтранице      = 0;
				ИтогоНДСНаСтранице        = 0;
				ИтогоСуммаСНДСНаСтранице  = 0;
				
				// Выведем заголовок таблицы
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
			КонецЕсли;

		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакетаСтрока);

		// Увеличим итоги по странице
		ИтогоМестНаСтранице       = ИтогоМестНаСтранице       + КоличествоМест;
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
		ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;

		// Увеличим итоги по документу
		ИтогоМест       = ИтогоМест       + КоличествоМест;
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
		ИтогоНДС        = ИтогоНДС        + СуммаНДС;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по странице
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакетаВсего.Параметры.ИтогМест       = ИтогоМест;
	ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
	ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
	ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
	ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакетаВсего);

	// Выводим подвал документа
	
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	
	ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.РуководительПредставление;
	ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = Руководители.ГлавныйБухгалтерПредставление;
	ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;

	ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью                          = ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")); 
	ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
	
	ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель   = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель   = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	
	ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
	ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);	
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ12()

// Функция формирует табличный документ унифицированной формы М-15
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-15.
//
Функция ПечатьМ15()
    Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Дата КАК ДатаСоставления,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
	|	РеализацияТоваровУслуг.Организация КАК Руководители,
	|	РеализацияТоваровУслуг.Склад КАК Склад,
	|	РеализацияТоваровУслуг.Склад.Наименование КАК СкладНаименование,
	|	РеализацияТоваровУслуг.Контрагент.Код КАК КонтрагентКод,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора КАК ДоговорВид,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	// {ОбособленныеПодразделения
	|	РеализацияТоваровУслуг.ПодразделениеОрганизации,
	// }ОбособленныеПодразделения
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";

	ВыборкаШапки = Запрос.Выполнить().Выбрать();
	ВыборкаШапки.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Курс",            ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект,      мВалютаРегламентированногоУчета));
	Запрос.УстановитьПараметр("Кратность",       ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.Код КАК ТоварКод,
	|	РеализацияТоваровУслуг.СчетУчета.Код КАК СчетУчетаКод,
	|	РеализацияТоваровУслуг.ПереданныеСчетУчета.Код КАК ПереданныеСчетУчетаКод,
	|	РеализацияТоваровУслуг.СчетРасходов.Код,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность КАК Цена,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность КАК Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	РеализацияТоваровУслуг.Сумма  КАК СуммаВВалютеДокумента,
	|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДСВВалютеДокумента,
	|	РеализацияТоваровУслуг.СтавкаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Код","Номенклатура.Артикул");
	КонецЕсли;
	
	ВыборкаСтрок = Запрос.Выполнить().Выгрузить();
	
	Если Проведен И ВыборкаШапки.РасчетыВУсловныхЕдиницах Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", СчетУчетаРасчетовСКонтрагентом);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(Хозрасчетный.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Регистратор = &Ссылка
		|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовСКонтрагентом
		|	И Хозрасчетный.СчетКт В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				РеализацияТоваровУслугТовары.СчетДоходов
		|			ИЗ
		|				Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|			ГДЕ
		|				РеализацияТоваровУслугТовары.Ссылка = &Ссылка)
		|";
		СуммаВзаиморасчетов = Запрос.Выполнить().Выгрузить()[0].Сумма;
		
		Если НЕ СуммаВзаиморасчетов = NULL Тогда
		
			ВыборкаСтрок.Колонки.Добавить("СуммаБезНДСВВалютеДокумента");
			
			МассивРаспределения = Новый Массив;
			
			Для Каждого СтрокаТовар Из ВыборкаСтрок Цикл
				
				СуммаСНДСВВалютеДокумента = СтрокаТовар.СуммаВВалютеДокумента + ?(ВыборкаШапки.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДСВВалютеДокумента);
				Если (СтрокаТовар.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120)
				 ИЛИ (СтрокаТовар.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118)
			 	 ИЛИ (СтрокаТовар.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
					СуммаБезНДСВВалютеДокумента = СуммаСНДСВВалютеДокумента;
				Иначе
					СуммаБезНДСВВалютеДокумента = СуммаСНДСВВалютеДокумента - СтрокаТовар.СуммаНДСВВалютеДокумента;
				КонецЕсли;
				
				МассивРаспределения.Добавить(СуммаСНДСВВалютеДокумента);
				СтрокаТовар.СуммаБезНДСВВалютеДокумента = СуммаБезНДСВВалютеДокумента;
				
			КонецЦикла;
			
			УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, ВыборкаСтрок, "Сумма");
			
			Для Каждого СтрокаТовар Из ВыборкаСтрок Цикл
				
				МассивРаспределения.Очистить();
				МассивРаспределения.Добавить(СтрокаТовар.СуммаБезНДСВВалютеДокумента);
				МассивРаспределения.Добавить(СтрокаТовар.СуммаНДСВВалютеДокумента);
				МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТовар.Сумма, МассивРаспределения);
				
				Если НЕ (МассивРаспределенныхСумм = Неопределено) Тогда
					
					СтрокаТовар.Сумма    = МассивРаспределенныхСумм[0] + ?(ВыборкаШапки.СуммаВключаетНДС, МассивРаспределенныхСумм[1], 0);
					СтрокаТовар.СуммаНДС = МассивРаспределенныхСумм[1];
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
		
	Макет = ПолучитьОбщийМакет("М15");
	
	// Получаем области макета для вывода в табличный документ
	Шапка            = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы    = Макет.ПолучитьОбласть("Строка");
	Подвал           = Макет.ПолучитьОбласть("Подвал");	
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_М15";

	// Выведем шапку документа
	Шапка.Параметры.Заполнить(ВыборкаШапки);
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаШапки.ЮрФизЛицо, ВыборкаШапки.ДатаСоставления , , ВыборкаШапки.БанковскийСчет);
	СведенияОКонтрагенте  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаШапки.Контрагент, ВыборкаШапки.ДатаСоставления);
	
	Шапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	Шапка.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	Шапка.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ВыборкаШапки);
	Шапка.Параметры.КонтрагентНаименование   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
	Шапка.Параметры.Основание                = "Договор " + СокрЛП(ВыборкаШапки.ДоговорНаименование);
	
	ТабДокумент.Вывести(Шапка);
	
	// Подготовим к выводу выборку строк
	ВыборкаСтрок.Колонки.Добавить("КоррСчет");
	ВыборкаСтрок.Колонки.Добавить("КоррКод");
	ВыборкаСтрок.Колонки.Добавить("СуммаСНДС");
	ВыборкаСтрок.Колонки.Добавить("СуммаБезНДС");
	
	Для Каждого СтрокаВыборки Из ВыборкаСтрок Цикл

		СуммаНДС    = СтрокаВыборки.СуммаНДС;
		Количество  = СтрокаВыборки.Количество;
		СуммаСНДС   = (СтрокаВыборки.Сумма + ?(ВыборкаШапки.СуммаВключаетНДС, 0, СтрокаВыборки.СуммаНДС));
		СуммаБезНДС = СуммаСНДС - СуммаНДС;
		
		СтрокаВыборки.КоррСчет          = ?((ВыборкаШапки.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности), СтрокаВыборки.ПереданныеСчетУчетаКод, СтрокаВыборки.СчетРасходовКод);
		СтрокаВыборки.КоррКод           = СтрокаВыборки.ТоварКод;
		СтрокаВыборки.ТоварНаименование = СокрЛП(СтрокаВыборки.ТоварНаименование);
		СтрокаВыборки.СуммаСНДС         = СуммаСНДС;
		СтрокаВыборки.СуммаБезНДС       = СуммаБезНДС;
		СтрокаВыборки.Цена              = СуммаБезНДС / ?(Количество = 0, 1, Количество);
		
	КонецЦикла;
	
	// Заполним подвал документа

	Подвал.Параметры.Заполнить(ВыборкаШапки);
	
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = ВыборкаШапки.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(ВыборкаШапки.Руководители, ВыборкаШапки.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	
	ИтогНДС      = ВыборкаСтрок.Итог("СуммаНДС");
	
	Подвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(ВыборкаСтрок.Количество(), ,",,,с,,,,,0");
	Подвал.Параметры.СуммаПрописью                              = ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаСтрок.Итог("СуммаСНДС"), мВалютаРегламентированногоУчета);
	Подвал.Параметры.ИтогНДС                                    = ?(ЗначениеЗаполнено(ИтогНДС), Формат(Цел(ИтогНДС), "ЧДЦ=0") + " руб. " + Формат((ИтогНДС - Цел(ИтогНДС)) * 100, "ЧЦ=2; ЧВН=") + " коп. ", "______ руб. ______ коп.");
	Подвал.Параметры.ФИОРуководителя                            = Руководитель;
	Подвал.Параметры.ФИОГлавБухгалтера                          = Бухгалтер;
	
	// Инициализируем счетчик страниц
	НомерСтраницы = 1;
	
	// Выведем заголовок табличной части
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	// Выведем выборку строк
	Для Каждого СтрокаВыборки Из ВыборкаСтрок Цикл

		СтрокаТаблицы.Параметры.Заполнить(СтрокаВыборки);
		
		СтрокаТаблицы.Параметры.НоменклатурныйНомер = СтрокаВыборки.ТоварКод;
		
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(СтрокаТаблицы);
		//СтрокаСПодвалом.Добавить(ПодвалТаблицы);
		
		// Если обрабатываемая строка - последняя, будем проверять, помещается ли подвал документа
		Если ВыборкаСтрок.Индекс(СтрокаВыборки) = ВыборкаСтрок.Количество() - 1 Тогда 
			СтрокаСПодвалом.Добавить(Подвал);
		КонецЕсли;

		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			//ТабДокумент.Вывести(ПодвалТаблицы);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			НомерСтраницы = НомерСтраницы + 1;
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;
		
		ТабДокумент.Вывести(СтрокаТаблицы);

	КонецЦикла;
	
	// Выведем все подвалы
	//ТабДокумент.Вывести(ПодвалТаблицы);
	
	ТабДокумент.Вывести(Подвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьМ15()

// Функция формирует табличный документ с печатной формой акта об оказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг()
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Контрагент КАК Получатель,
	|	Организация КАК Поставщик,
	|	Организация,
	// {ОбособленныеПодразделения
	|	ПодразделениеОрганизации,
	// }ОбособленныеПодразделения
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.УстановитьПараметр("Курс",            ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект,      мВалютаРегламентированногоУчета));
	ЗапросУслуги.УстановитьПараметр("Кратность",       ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
 	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
	
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	Цена * &Курс / &Кратность КАК Цена,
	|	Сумма * &Курс / &Кратность КАК Сумма,
	|	СтавкаНДС,
	|	СуммаНДС * &Курс / &Кратность КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	И
	|	РеализацияТоваровУслуг.Номенклатура.Услуга = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена * &Курс / &Кратность КАК Цена,
	|	Сумма * &Курс / &Кратность КАК Сумма,
	|	СтавкаНДС,
	|	СуммаНДС * &Курс / &Кратность КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,	
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена * &Курс / &Кратность КАК Цена,
	|	Сумма * &Курс / &Кратность КАК Сумма,
	|	СтавкаНДС,
	|	СуммаНДС * &Курс / &Кратность КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
	
	Если Проведен И (Шапка.РасчетыВУсловныхЕдиницах
		ИЛИ (Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета И Дата >= '20090101000000')) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", СчетУчетаРасчетовСКонтрагентом);
		Текст = 
		"ВЫБРАТЬ
		|	СУММА(Хозрасчетный.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Регистратор = &Ссылка
		|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовСКонтрагентом
		|	И Хозрасчетный.СчетКт В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				РеализацияТоваровУслугТовары.СчетДоходов
		|			ИЗ
		|				Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|			ГДЕ
		|				РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		|
		|           ОБЪЕДИНИТЬ
		|
		|			ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				РеализацияТоваровУслугУслуги.СчетДоходов
		|			ИЗ
		|				Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|			ГДЕ
		|				РеализацияТоваровУслугУслуги.Ссылка = &Ссылка)
		|";
		Запрос.Текст = Текст;
		СуммаВзаиморасчетов = Запрос.Выполнить().Выгрузить()[0].Сумма;
		
		РасчетСуммыНДСПоСтавке =  УчетНДС.РасчетНДСвРубляхПоСтавкеДокумента(Шапка.Дата);
		
		Если НЕ СуммаВзаиморасчетов = NULL Тогда
			
			ТаблицаУслуги.Колонки.Добавить("СуммаБезНДС");
			
			МассивРаспределения = Новый Массив;
			
			Для Каждого СтрокаТовар Из ТаблицаУслуги Цикл
				
				СуммаСНДС = СтрокаТовар.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДС);
				СуммаБезНДС = СуммаСНДС - СтрокаТовар.СуммаНДС;

				МассивРаспределения.Добавить(СуммаСНДС);
				СтрокаТовар.СуммаБезНДС = СуммаБезНДС;
			    				
			КонецЦикла;
			
			ТаблицаУслуги.Колонки.Добавить("СуммаРублевая");
			УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, ТаблицаУслуги, "СуммаРублевая");
			
			Для Каждого СтрокаТовар Из ТаблицаУслуги Цикл
				
				Если РасчетСуммыНДСПоСтавке Тогда
					//Выделение суммы НДС, Расчет суммы без НДС
					ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаТовар.СтавкаНДС);
					
					СтрокаТовар.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаТовар.СуммаРублевая * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
					СтрокаТовар.Сумма = СтрокаТовар.СуммаРублевая - СтрокаТовар.СуммаНДС;
					
				Иначе
					МассивРаспределения.Очистить();
					МассивРаспределения.Добавить(СтрокаТовар.СуммаБезНДС);
					МассивРаспределения.Добавить(СтрокаТовар.СуммаНДС);
					МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТовар.СуммаРублевая, МассивРаспределения);
					Если МассивРаспределенныхСумм <> Неопределено Тогда
						СтрокаТовар.Сумма = МассивРаспределенныхСумм[0];
						СтрокаТовар.СуммаНДС = МассивРаспределенныхСумм[1];
					КонецЕсли;
				КонецЕсли;
				
				Если Шапка.СуммаВключаетНДС Тогда
					СтрокаТовар.Сумма = СтрокаТовар.Сумма+СтрокаТовар.СуммаНДС;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет       = ПолучитьМакет("Акт");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Акт");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик 				= Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);

	НомерСтроки = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
        ОбластьМакета.Параметры.Товар = СокрЛП(СтрокаТабличнойЧасти.Товар);
		
		Если Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			ОбластьМакета.Параметры.Цена  = СтрокаТабличнойЧасти.Сумма / ?(СтрокаТабличнойЧасти.Количество = 0, 1, СтрокаТабличнойЧасти.Количество);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	Если ТаблицаУслуги <> Неопределено Тогда

		Сумма    = ТаблицаУслуги.Итог("Сумма");
		СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");

	Иначе

		Сумма    = 0;
		СуммаНДС = 0;

	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	Если Шапка.УчитыватьНДС Тогда

		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		
		Если СуммаНДС <> 0 Тогда
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		Иначе
			ОбластьМакета.Параметры.ВсегоНДС = "-";
			ОбластьМакета.Параметры.НДС      = "Без налога (НДС)";
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЕсли;

	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
	                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, мВалютаРегламентированногоУчета);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

// Функция осуществляет запуск обработки формирующей печатную форму 1-Т - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Заглушка для НапечататьДокумент(), т.к. табличный 
//                   документ формируется вызываемой обработкой.
//
Функция ПечатьТТН()

	ОбработкаПечати = Обработки.ПечатьТТН.ПолучитьФорму("Форма");
	ОбработкаПечати.Документ       = ЭтотОбъект.Ссылка;
	ОбработкаПечати.ПунктРазгрузки = АдресДоставки;
	ОбработкаПечати.Открыть();

	Возврат Неопределено;

КонецФункции // ПечатьТТН()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Накладная" Тогда
		ТабДокумент = ПечатьДокумента();
		
	ИначеЕсли ИмяМакета = "ТОРГ12" тогда
		ТабДокумент = ПечатьТОРГ12();
		
	ИначеЕсли ИмяМакета = "ТОРГ12_БезУслуг" тогда
		ТабДокумент = ПечатьТОРГ12(Истина);	
		
	ИначеЕсли ИмяМакета = "Акт" Тогда
		ТабДокумент = ПечатьАктаОбОказанииУслуг();
		
	ИначеЕсли ИмяМакета = "1Т" или ИмяМакета = "_1Т" Тогда
		ТабДокумент = ПечатьТТН();
		
	ИначеЕсли ИмяМакета = "М15" Тогда
		ТабДокумент = ПечатьМ15();
		
	ИначеЕсли ИмяМакета = "СправкаРасчетВал" Тогда
		
		// Справка-расчет формирования рублевой суммы документа в валюте
		БухгалтерскийУчетРасчетовСКонтрагентами.НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(Ссылка);
		Возврат;
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа.
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("Накладная",      	"Расходная накладная");
	СтруктураМакетов.Вставить("Акт", 				"Акт об оказании услуг");
	СтруктураМакетов.Вставить("ТОРГ12",         	"ТОРГ-12 (Товарная накладная с услугами)");
	СтруктураМакетов.Вставить("ТОРГ12_БезУслуг",	"ТОРГ-12 (Товарная накладная)");
	СтруктураМакетов.Вставить("_1Т",            	"Бланки ТТН");
	СтруктураМакетов.Вставить("М15",          		"М-15 (Накладная)");
	СтруктураМакетов.Вставить("СправкаРасчетВал", 	"Справка-расчет ""Рублевая сумма документа в валюте""");
		
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет счета строке табличной части.
//
Процедура ЗаполнитьСчета(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, Заполнять, ЭтоКомиссия, МетаданныеДокумента) Экспорт

	Если Заполнять = Истина Тогда

		СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеСчетУчета", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.ПереданныеСчетУчета = СчетаУчета.СчетПередачи;
		КонецЕсли;

		Если НЕ ЭтоКомиссия Тогда

			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходов", МетаданныеДокумента, ИмяТабЧасти) Тогда

				СтрокаТЧ.СчетДоходов  = СчетаУчета.СчетДоходов;
				СтрокаТЧ.СчетРасходов = СчетаУчета.СчетРасходов;
				СтрокаТЧ.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;

				Если СтрокаТЧ.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
					СтрокаТЧ.Субконто = Новый(СтрокаТЧ.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
					Если ТипЗнч(СтрокаТЧ.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						СтрокаТЧ.Субконто = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
					КонецЕсли;
				Иначе
					СтрокаТЧ.Субконто = Неопределено;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	ИначеЕсли Заполнять = Ложь Тогда

		СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеСчетУчета", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.ПереданныеСчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходов", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетДоходов  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			СтрокаТЧ.СчетРасходов = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			СтрокаТЧ.Субконто     = Неопределено;
			СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.ПустаяСсылка()
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры //ЗаполнитьСчета

// Заполняет счета в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, Заполнять) Экспорт

	СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
	//СчетаРозницы   = (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный);
	ЭтоКомиссия    = (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	МетаданныеДока = Метаданные();

	ЗаполнитьСчета(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, Заполнять, ЭтоКомиссия, МетаданныеДока);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, Заполнять) Экспорт

	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, Заполнять);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

Процедура ЗаполнитьСчетаВСтрокеУслуг(СтрокаТЧ, СчетаУчета, Заполнять, МетаданныеДокумента) Экспорт

	МетаданныеДокумента = Метаданные();

	Если Заполнять = Истина Тогда

		СтрокаТЧ.СчетДоходов  = СчетаУчета.СчетДоходов;
		СтрокаТЧ.СчетРасходов = СчетаУчета.СчетРасходов;
		СтрокаТЧ.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;

		Если СтрокаТЧ.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
			СтрокаТЧ.Субконто = Новый(СтрокаТЧ.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
			Если ТипЗнч(СтрокаТЧ.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				СтрокаТЧ.Субконто = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
			КонецЕсли;
		Иначе
			СтрокаТЧ.Субконто = Неопределено;
		КонецЕсли;

	ИначеЕсли Заполнять = Ложь Тогда

		СтрокаТЧ.СчетДоходов  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.СчетРасходов = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.Субконто     = Неопределено;
		СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.ПустаяСсылка()

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаВСтрокеУслуг

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, Заполнять) Экспорт

	СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
	МетаданныеДока = Метаданные();

	ЗаполнитьСчетаВСтрокеУслуг(СтрокаТЧ, СчетаУчета, Заполнять, МетаданныеДока);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги()

Процедура ЗаполнитьСчетаУчетаВТабЧастиУслуги(Заполнять) Экспорт

	Для каждого СтрокаТЧ Из Услуги Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, Заполнять)
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧастиУслуги()

Процедура ЗаполнитьСчетаУчетаРасчетов(СчетаУчета = Неопределено) Экспорт
	
    Если СчетаУчета = Неопределено Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	КонецЕсли;
	
	Если (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) Тогда
		СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Иначе
		СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		Если (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически)
			ИЛИ (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу) Тогда
			СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
		Иначе
			СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	СчетУчетаРасчетовПоТаре      = СчетаУчета.СчетУчетаТарыПокупателя;
	СчетУчетаРасходовПоТаре      = СчетаУчета.СчетУчетаРасходовПоТаре;
	СчетУчетаДоходовПоТаре       = СчетаУчета.СчетУчетаДоходовПоТаре;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаРасчетов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента) Экспорт

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Если (СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
		ИЛИ (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) Тогда
		ТаблицаТоваров.Колонки.ПереданныеСчетУчета.Имя = "КорСчетСписания";
		КоэффОплаты      = 1;
	Иначе
		ТаблицаТоваров.Колонки.СчетРасходов.Имя = "КорСчетСписания";
		КоэффОплаты      = 0;
	КонецЕсли;

	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписания1");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписания2");
	//ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");

	ТаблицаТоваров.Колонки.Добавить("ОтражениеВУСН");
	
	ТаблицаТоваров.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаТоваров.Колонки.Добавить("КорПодразделениеОрганизации");

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.КорСубконтоСписания1 = СтрокаТаблицы.Субконто;

	КонецЦикла;

	ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.Принимаются,     "ОтражениеВУСН");
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                                 "Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,              "Склад");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,        "Организация");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");

	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорПодразделениеОрганизации");

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
								  ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	//ПодготовитьТаблицуУслугРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	//ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуУслуг()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	ТаблицаТары.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("ДокументОприходования");
	ТаблицаТары.Колонки.Добавить("Регистратор");
	ТаблицаТары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТары.Колонки.Добавить("Организация");
	ТаблицаТары.Колонки.Добавить("Субконто");
	ТаблицаТары.Колонки.Добавить("КорСчетСписания");
	ТаблицаТары.Колонки.Добавить("КорСубконтоСписания1");
	ТаблицаТары.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТары.Колонки.Добавить("СчетДоходов");
    ТаблицаТары.Колонки.Добавить("Тара");
	
	ТаблицаТары.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаТары.Колонки.Добавить("КорПодразделениеОрганизации");

	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма;

	КонецЦикла;
	
	ТаблицаТары.ЗаполнитьЗначения(Истина, "Тара");
	ТаблицаТары.ЗаполнитьЗначения(ЭтотОбъект,                          "Регистратор");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,       "Склад");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаТары.ЗаполнитьЗначения(СчетУчетаРасчетовПоТаре,             "КорСчетСписания");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,                       "ДоговорКонтрагента");

	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "КорПодразделениеОрганизации");

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ДоговорКонтрагента");

	// Склад заполняем только, если у нас есть строки в таблице "Товары" или "Возвратная тара"
	Если Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;
	
	Если (СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
		И (ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	// Зачет авансов
	СтруктураОбязательныхПолей.Вставить("СпособЗачетаАвансов");
	Если (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически)
		ИЛИ (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу) Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	Если ВозвратнаяТара.Количество() > 0 Тогда		
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаДоходовПоТаре");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасходовПоТаре");		
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	СтруктураОбязательныхПолей.Вставить("СчетУчета");

	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	ПроверитьТабЧатьТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет проверки,которые нужны только для регл. учета
Процедура ПроверитьТабЧатьТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ЭтоКомиссия = (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ЭтоОтгрузка = (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);
		
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Товары"": ";
		Забалансовый = СтрокаТЧ.СчетУчета.Забалансовый;
		
		Если (НЕ ЭтоКомиссия) И (НЕ Забалансовый) Тогда
			Если УчитыватьНДС 
				И СтрокаТЧ.НДС <> 0 Тогда
				Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДСПоРеализации) Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС по реализации""!";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетДоходов) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет доходов""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КорСчетСписания) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет расходов""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоОтгрузка ИЛИ ЭтоКомиссия Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КорСчетСписания) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Переданные, счет учета""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		// {УчетДоходовИРасходовИП
		Если  (НЕ Забалансовый) Тогда
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя 
				И НЕ СтруктураШапкиДокумента.СчетаСНоменклатурнымиГруппами.Найти(СтрокаТЧ.СчетДоходов) = Неопределено 
				И НЕ ЗначениеЗаполнено(СтрокаТЧ.Субконто) 
				Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Субконто""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		// }УчетДоходовИРасходовИП
		
		// Проверка номера ГТД
		Если УправлениеЗапасами.НеУказанНомерГТД(СтрокаТЧ.НомерГТД, СтрокаТЧ.СтранаПроисхождения) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Номер ГТД""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, Заголовок);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьТабЧатьТоварыПоСтрочно()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоУслугам        - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		Если ТаблицаПоУслугам.Количество() > 0 Тогда
			Сообщить("Документ передачи на комиссию не может содержать услуг!");
		КонецЕсли;

	КонецЕсли;

	// Укажем, что надо проверить:
	Если СтруктураШапкиДокумента.РазрешитьУчетУслугБезПлановыхЦен Тогда
		СтруктураОбязательныхПолей = Новый Структура("Сумма, СчетДоходов, СчетРасходов");
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("Сумма, СчетДоходов" );
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Для Каждого СтрокаТЧ Из ТаблицаПоУслугам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Услуги"": ";

		Если УчитыватьНДС 
			И СтрокаТЧ.НДС <> 0
			И Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДСПоРеализации) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС по реализации""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;

		// {УчетДоходовИРасходовИП
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя 
			И Не СтруктураШапкиДокумента.СчетаСНоменклатурнымиГруппами.Найти(СтрокаТЧ.СчетДоходов) = Неопределено 
			И Не ЗначениеЗаполнено(СтрокаТЧ.Субконто) 
			Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Субконто""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		// }УчетДоходовИРасходовИП

	КонецЦикла;

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоУслугам        - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиАгентскиеУслуги(ТаблицаПоАгентскимУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "АгентскиеУслуги";

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		Если ТаблицаПоАгентскимУслугам.Количество() > 0 Тогда
			Сообщить("Документ передачи на комиссию не может содержать услуг!");
		КонецЕсли;

	КонецЕсли;

	СтруктураОбязательныхПолей = Новый Структура("Сумма, Контрагент, ДоговорКонтрагента, СчетРасчетов");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "АгентскиеУслуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
    	
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "АгентскиеУслуги", ТаблицаПоАгентскимУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	СтруктураОбязательныхПолей.Вставить("СчетУчета");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, 
	ТаблицаПоУслугам, ТаблицаПоАгентскимУслугам, ТаблицаЗачетаАвансов, Отказ, Заголовок)

	//Списание по партиям
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		  СодержаниеПроводки = "Отгрузка без перехода права собственности";
	ИначеЕсли СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда 
		СодержаниеПроводки = "Передача товаров на комиссию";
	Иначе
		СодержаниеПроводки = "Реализация товаров";
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТоварам, Истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, Отказ, , СодержаниеПроводки);
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Заголовок, ТаблицаПоТаре,    Истина,												   , Отказ, , "Возврат тары");

	ПереоценкаАТТВПродажныхЦенах(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Отразим в подсистеме НДС движения по партиям товаров 
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам,Неопределено,Отказ, Заголовок, Истина);
	
	Проводки = Движения.Хозрасчетный;

	ДатаДока = СтруктураШапкиДокумента.Дата;

	ВидыСубконтоСчетов = Новый Соответствие; // кэш видов субконто
	
	ПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(СтруктураШапкиДокумента.Организация, ДатаДока);	
	
	ТаблицаВзаиморасчетов = Новый ТаблицаЗначений;
	
	Если (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) Тогда

		Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
			
			ТаблицыДокумента = Новый Структура(
				"ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоАгентскимУслугам",
				ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоАгентскимУслугам);
			
			ТаблицаВзаиморасчетов = УправлениеВзаиморасчетами.ЗачестьАвансКонтрагента(
				СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, 
				Истина, Отказ, Заголовок);
			
		КонецЕсли;

		//Распределение выручки по товарам по партиям
		СтруктураТаблицыВыручки = Новый Структура("НомерСтроки, Номенклатура, ВидЦенности, Ценность, Партия, 
			|СчетУчетаНДСПоРеализации, СчетУчета, СчетДоходов, Субконто, СтавкаНДС, Сумма, СуммаБУ, СуммаНУ, СуммаВал, 
			|НДС, НДСВал, СуммаБезНДС, СуммаБУБезНДС, СуммаБезНДСВал, Комиссионный, Комитент, ДоговорКомиссии,
			|СчетРасчетовПоАвансамСКомитентом, СчетРасчетовСКомитентом, ВалютаРасчетовСКомитентом, СуммаСписания, 
			|Количество, Услуга");

		//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
		ТаблицаВыручки = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоУслугам,СтруктураТаблицыВыручки,,Истина);
		ТаблицаВыручки.ЗаполнитьЗначения(Ложь, "Комиссионный");
		ТаблицаВыручки.ЗаполнитьЗначения(Истина,    "Услуга");
		//Дополним данными по таблице товаров с распределением по партиям
		
		//Агентские услуги
		ТаблицаВыручкиПоАгентскимУслугам = ТаблицаПоАгентскимУслугам.Скопировать();
		ТаблицаВыручкиПоАгентскимУслугам.Колонки.Контрагент.Имя 		= "Комитент";
		ТаблицаВыручкиПоАгентскимУслугам.Колонки.ДоговорКонтрагента.Имя = "ДоговорКомиссии";
		ТаблицаВыручкиПоАгентскимУслугам.Колонки.СчетРасчетов.Имя 		= "СчетРасчетовСКомитентом";
		
		ТаблицаВыручкиПоАгентскимУслугам.Колонки.Добавить("Комиссионный");
		ТаблицаВыручкиПоАгентскимУслугам.ЗаполнитьЗначения(Истина, "Комиссионный");
		ТаблицаВыручкиПоАгентскимУслугам.ЗаполнитьЗначения(Истина, "Услуга");

		//Развернем таблицу товаров по партиям для распределения выручки.
		ВыручкаПоТоварам = ТаблицаВыручки.СкопироватьКолонки();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВыручкиПоАгентскимУслугам,ТаблицаВыручки);
		
		СписокРаспределяемыхКолонок = Новый Структура("Количество,Сумма,СуммаБУ,СуммаНУ,СуммаВал,НДС,НДСВал,СуммаБезНДС,СуммаБУБезНДС,СуммаБезНДСВал");

		Для каждого СтрокаТаблицыТоваров Из ТаблицаПоТоварам Цикл 

			ТаблицаПартий = СтрокаТаблицыТоваров.СписанныеПартии;

			Для каждого Партия из ТаблицаПартий Цикл

				СтрокаТаблицыВыручки = ВыручкаПоТоварам.Добавить();

				Если Партия.Комиссионный тогда
					ПараметрыПартии = УправлениеВзаиморасчетами.ПараметрыРасчетовСКомитентом(Партия.Партия, Отказ, Заголовок);
				КонецЕсли;

				Для каждого Колонка из ВыручкаПоТоварам.Колонки Цикл

					Если СписокРаспределяемыхКолонок.Свойство(Колонка.Имя) тогда
						СтрокаТаблицыВыручки[Колонка.Имя]= Партия.Количество * 10;

					ИначеЕсли Не(ТаблицаПартий.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
						СтрокаТаблицыВыручки[Колонка.Имя] = Партия[Колонка.Имя];
					
					ИначеЕсли Не(ТаблицаПоТоварам.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
						СтрокаТаблицыВыручки[Колонка.Имя] = СтрокаТаблицыТоваров[Колонка.Имя];

					Иначе

						Если Партия.Комиссионный тогда

							Если ПараметрыПартии.Свойство(Колонка.Имя) тогда
								СтрокаТаблицыВыручки[Колонка.Имя] = ПараметрыПартии[Колонка.Имя];
							КонецЕсли;

						КонецЕсли;

					КонецЕсли;

				КонецЦикла;

			КонецЦикла; 
			
		КонецЦикла; 

		//Распределим выручку по партиям

		ВыручкаПоТоварам = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаПоТоварам,ВыручкаПоТоварам,СписокРаспределяемыхКолонок);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВыручкаПоТоварам,ТаблицаВыручки );

		//Фиксация выручки и НДС (проводки)
		Выручка = ТаблицаВыручки.Скопировать();
		Выручка.Свернуть("СчетУчетаНДСПоРеализации, СчетДоходов, Субконто, СтавкаНДС, Комиссионный, Комитент, ДоговорКомиссии,
			|СчетРасчетовПоАвансамСКомитентом, СчетРасчетовСКомитентом, ВалютаРасчетовСКомитентом, Услуга, Номенклатура",
			"Сумма, СуммаБУ, СуммаНУ, СуммаВал, НДС, НДСВал, Количество");

		Для Каждого СтрокаТаблицы Из ТаблицаВыручки Цикл
			ОтражатьНДСКомитента = СтрокаТаблицы.Комиссионный И СтрокаТаблицы.ДоговорКомиссии.УчетАгентскогоНДС;
			Если ОтражатьНДСКомитента Тогда 
				СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент;
			КонецЕсли;
		КонецЦикла;
		
		// {УчетДоходовИРасходовИП
		//Списание по партиям в налоговом учете предпринимателя
		Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
			УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
			ДоходыИРасходыПредпринимателя.СписаниеМПЗ(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, 1, ТаблицаПоТоварам, "Субконто", "СчетУчета", "СчетУчета",, "СчетДоходов", Отказ);
			ДоходыИРасходыПредпринимателя.ОказаниеУслуг(ЭтотОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, ТаблицаПоУслугам, "Субконто", "СчетРасходов");
			ДоходыИРасходыПредпринимателя.ЗачетОплатыПокупателя(ЭтотОбъект, СтруктураШапкиДокумента, Движения.ИПМПЗОтгруженные.Выгрузить(), ТаблицаВзаиморасчетов);
		КонецЕсли;
		// }УчетДоходовИРасходовИП
		
		// Формирование движений документа для подсистемы НДС
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки,ТаблицаВзаиморасчетов,Отказ, Заголовок);

		Для каждого СтрокаТаблицы из Выручка Цикл

			// Выручка
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;

			Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
				Проводка = Проводки.Добавить();

				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
				
				Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда

					//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;

				КонецЕсли;

				Если СтрокаТаблицы.Комиссионный = Ложь тогда

					Проводка.СчетКт = СтрокаТаблицы.СчетДоходов;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,           СтрокаТаблицы.Субконто);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РеализуемыеАктивы", СтрокаТаблицы.Номенклатура);
					Если Проводка.СчетКт.Количественный Тогда
						Проводка.КоличествоКт = СтрокаТаблицы.Количество;  
					КОнецЕсли;
					
					Проводка.Содержание = "Реализация " + ?(СтрокаТаблицы.Услуга, "услуг", "товаров");

					Если Проводка.СчетКт.Валютный Тогда
						//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
					КонецЕсли;

				Иначе

					Проводка.СчетКт = СтрокаТаблицы.СчетРасчетовСКомитентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",        СтрокаТаблицы.Комитент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",           СтрокаТаблицы.ДоговорКомиссии);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
					Проводка.Содержание = "Реализация " + ?(СтрокаТаблицы.Услуга, "услуг", "товаров");

					Если Проводка.СчетКт.Валютный Тогда

						Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтрокаТаблицы.ВалютаРасчетовСКомитентом тогда

							//Если валюта расчетов с комитентом совпадает с валютой расчетов по договору, считаем что и курсы совпадают.
							Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
							Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;

						Иначе

							ДанныеОВалютеРасчетовСКомитентом = МодульВалютногоУчета.ПолучитьКурсВалюты(
								СтрокаТаблицы.ВалютаРасчетовСКомитентом,СтруктураШапкиДокумента.Дата);

							Проводка.ВалютаКт        = СтрокаТаблицы.ВалютаРасчетовСКомитентом;
							Проводка.ВалютнаяСуммаКт = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
								СтрокаТаблицы.Сумма,
								мВалютаРегламентированногоУчета, СтрокаТаблицы.ВалютаРасчетовСКомитентом,
								1,ДанныеОВалютеРасчетовСКомитентом.Курс,
								1,ДанныеОВалютеРасчетовСКомитентом.Кратность);
							СтрокаТаблицы.СуммаВал   = Проводка.ВалютнаяСуммаКт;

						КонецЕсли;

					Иначе
						СтрокаТаблицы.СуммаВал =  Проводка.Сумма;

					КонецЕсли; // Если Проводка.СчетКт.Валютный Тогда

				КонецЕсли; // Если СтрокаТаблицы.Комиссионный = Ложь тогда
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					
					СуммаНУДт = СтрокаТаблицы.СуммаНУ + СтрокаТаблицы.НДС;
					СуммаНУКт = ?(СтрокаТаблицы.Комиссионный, СуммаНУДт, СтрокаТаблицы.СуммаНУ);
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
						СуммаНУДт, СуммаНУКт, Проводка.Сумма - СуммаНУДт, Проводка.Сумма - СуммаНУДт, , , 
						Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
					
				КонецЕсли;

			КонецЕсли;
			
			// НДС
			Если СтруктураШапкиДокумента.УчитыватьНДС
				И Не СтрокаТаблицы.Комиссионный
				И (Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности
				Или СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке)
				И СтрокаТаблицы.НДС > 0 Тогда
				
				Проводка = Проводки.Добавить();

				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = СтрокаТаблицы.НДС;
				Проводка.Содержание  = "Реализация " + ?(СтрокаТаблицы.Услуга, "услуг", "товаров");
				Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
					Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,           СтрокаТаблицы.Субконто);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РеализуемыеАктивы", СтрокаТаблицы.Номенклатура);
				Иначе
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СФВыданные",   СтруктураШапкиДокумента.Ссылка);
				КонецЕсли;

				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет",Перечисления.ВидыПлатежейВГосБюджет.Налог);

				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				
			КонецЕсли;

		КонецЦикла; // Для каждого СтрокаТаблицы из Выручка Цикл
		
		Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности 
			Или СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
			УчетНДСФормированиеДвижений.ОтразитьНДСНалоговогоАгентаКомиссионер(СтруктураШапкиДокумента, Выручка, Движения);
		КонецЕсли;
		
		Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
			
			//Зачитываем аванс по комиссионным товарам по счету комиссии
			Выручка.Индексы.Добавить("Комиссионный");
			СтрокиКУдалению = Выручка.НайтиСтроки(Новый Структура("Комиссионный",Ложь));
			Для каждого СтрокаТаблицыВыручки из СтрокиКУдалению Цикл
				Выручка.Удалить(СтрокаТаблицыВыручки);
			КонецЦикла;

			Выручка.Свернуть("Комитент,ДоговорКомиссии,ВалютаРасчетовСКомитентом,СчетРасчетовСКомитентом,СчетРасчетовПоАвансамСКомитентом,Услуга",
				"Сумма, СуммаБУ, СуммаНУ, СуммаВал");
			Если Выручка.Количество()>0 тогда
				УправлениеВзаиморасчетами.ЗачестьАвансПоРасчетамСКомитентом(ЭтотОбъект,СтруктураШапкиДокумента,Выручка,Отказ,Заголовок);
			КонецЕсли;

		КонецЕсли;
	КонецЕсли; // Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда

	// Корректировка списания партий
	Для Каждого СтрокаТЧ из ТаблицаПоТаре Цикл

		ТаблицаПартий  = СтрокаТЧ.СписанныеПартии;

		СуммаПоПродаже = СтрокаТЧ.Сумма;
		Цена           = СуммаПоПродаже / СтрокаТЧ.Количество;

		РазницаЦен     = (СуммаПоПродаже - ТаблицаПартий.Итог("СуммаСписания"));

		Для Каждого СтрокаТП Из ТаблицаПартий Цикл

			ЦенаПартии = СтрокаТП.СуммаСписания / СтрокаТП.Количество;

			Если НЕ (Цена = ЦенаПартии) Тогда // Есть разница - нужно записать корректируюущую проводку.

				ДоляСуммыСписания = СтрокаТП.Количество / СтрокаТЧ.Количество * СтрокаТЧ.СуммаБУ - СтрокаТП.СуммаСписания;

				Если РазницаЦен > 0 Тогда

					Проводка = Проводки.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Возврат тары";
					Проводка.Сумма       = ДоляСуммыСписания;

					Проводка.СчетДт = СтрокаТЧ.КорСчетСписания;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
                    					
					Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаДоходовПоТаре;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СтатьяДоходовИРасходовПоТаре);

					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
					Если Проводка.СчетДт.Валютный Тогда
						Если СтрокаТЧ.Сумма = СтрокаТЧ.СуммаВал Тогда
							Проводка.ВалютаДт = Константы.ВалютаРегламентированногоУчета.Получить();
							Проводка.ВалютнаяСуммаДт = ДоляСуммыСписания;
						Иначе
							Если (ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента)) И (ТипЗнч(СтрокаТЧ.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
								Проводка.ВалютаДт = СтрокаТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов;
								Проводка.ВалютнаяСуммаДт = ?(СтрокаТЧ.Сумма = 0, ДоляСуммыСписания, ДоляСуммыСписания * СтрокаТЧ.СуммаВал / СтрокаТЧ.Сумма);
							Конецесли;
						КонецЕсли;
					КонецЕсли;
					
				Иначе

					Проводка = Проводки.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Возврат тары";
					Проводка.Сумма       = -ДоляСуммыСписания;

					Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасходовПоТаре;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СтатьяДоходовИРасходовПоТаре);

					Проводка.СчетКт = СтрокаТЧ.КорСчетСписания;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
					Если Проводка.СчетКт.Валютный Тогда
						Если СтрокаТЧ.Сумма = СтрокаТЧ.СуммаВал Тогда
							Проводка.ВалютаКт = Константы.ВалютаРегламентированногоУчета.Получить();
							Проводка.ВалютнаяСуммаКт = -ДоляСуммыСписания;
						Иначе
							Если (ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента)) И (ТипЗнч(СтрокаТЧ.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
								Проводка.ВалютаКт = СтрокаТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов;
								Проводка.ВалютнаяСуммаКт = -?(СтрокаТЧ.Сумма = 0, ДоляСуммыСписания, ДоляСуммыСписания * СтрокаТЧ.СуммаВал / СтрокаТЧ.Сумма);
							Конецесли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли; //Если РазницаЦен >= 0 Тогда

			КонецЕсли; // Если НЕ (Цена = ЦенаПартии) Тогда

		КонецЦикла; // Для Каждого СтрокаТП Из ТаблицаПартий Цикл

	КонецЦикла; // Для Каждого СтрокаТЧ из ТаблицаПоТаре Цикл

	//Движения по подсистеме УСН.
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок);

	//Учет курсовых разниц
	БухгалтерскийУчет.ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок);

	// Учет товаров по номерам ГТД
	УправлениеЗапасами.ПроведениеДокументаСписанияПоСчетуГТД(ЭтотОбъект, ТаблицаПоТоварам, "Реализация товаров");
	
	// Учет реализованных услуг
	ДвиженияПоРегиструРеализацияУслуг(СтруктураШапкиДокумента, ДатаДока, ТаблицаПоУслугам);
	
	// Учет агентских услуг
	ДвиженияПоРегиструАгентскихУслуг(СтруктураШапкиДокумента, ТаблицаПоАгентскимУслугам);
		 
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки,ТаблицаВзаиморасчетов,Отказ, Заголовок, ОтработкаДвиженийПоПартиям = Ложь)

	Если Не ОтработкаДвиженийПоПартиям И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности И
		Не СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		Если ОтработкаДвиженийПоПартиям Тогда
			Возврат;
		Иначе
			УчетНДСФормированиеДвижений.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
		
	Если ОтработкаДвиженийПоПартиям Тогда
		Если ТаблицаВыручки.Количество() = 0 Тогда
			//Отработка по партиям НДС не требуется. 
			Возврат;
		КонецЕсли; 
		
		/////////////////////////////////////////////////////////////////////////////////
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		ТаблицаНДСПартииСписания = УчетНДС.ПодготовитьТаблицуСписанияПартийДляНДС(СтруктураШапкиДокумента, ТаблицаВыручки, Отказ, Заголовок);
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		/////////////////////////////////////////////////////////////////////////////////
		
		Если ТаблицаНДСПартииСписания.Количество() = 0 Тогда
			//Партии не найдены или отражение в партионном учете НДС не производится.
			//Дальнейшая обработка не требуется
		    Возврат;
		КонецЕсли; 
		
		ТаблицаДвиженийПартии = Движения.НДСПоПриобретеннымЦенностям.ВыгрузитьКолонки();
		Движения.НДСПоПриобретеннымЦенностям.мПериод          = Дата;
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии, Истина, Движения.Хозрасчетный, Заголовок, Движения);
		УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии, Ложь, Движения.Хозрасчетный, Заголовок, Движения);
		
		// Занесем в регистр переквалификацию партий (включение/исключение НДС из стоимости)
		Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
			Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
			Движения.НДСПоПриобретеннымЦенностям.ВыполнитьПриход();
		КонецЕсли;
		// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
		/////////////////////////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////////////////////
		// Отработка предположения ставки 0% по НДС покупки.
		// При передачи товаров комиссионеру предположение ставки 0% не должно отрабатывать, только по фактическому отражению реализации
		Если не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			УчетНДСФормированиеДвижений.ОтразитьПредположениеСтавки0(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии, Движения.Хозрасчетный,Заголовок,Движения);
		КонецЕсли;
		// Отработка предположения ставки 0% по НДС покупки.
		/////////////////////////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС по партиям - отразить непосредственное списание.
		ТаблицаДвиженийПартии.Очистить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
		
		Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаДвиженийПартии;
		Движения.НДСПоПриобретеннымЦенностям.ВыполнитьРасход();
		// НДС по партиям - отразить непосредственное списание.
		/////////////////////////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС по партиям - отразить занесение на счета товаров отгруженных (45).
		Если (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Или 
			СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) и СтруктураШапкиДокумента.СложныйУчетНДС Тогда
			// Для операций перемещения на комиссию необходимо отразить поступление по новому счету учета
			ТаблицаДвиженийПартии.Очистить();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
			ТаблицаДвиженийПартии.ЗагрузитьКолонку(ТаблицаНДСПартииСписания.ВыгрузитьКолонку("КорСчетСписания"),"СчетУчета");
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(Справочники.Склады.ПустаяСсылка(),"Склад");
			ТаблицаДвиженийПартии.Колонки.Добавить("Услуга",новый ОписаниеТипов("Булево"));
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(Ложь,"Услуга");
			ТаблицаДвиженийПартии.Колонки.СчетУчета.Имя = "СчетУчетаЦенности";
			
			УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураШапкиДокумента,ТаблицаДвиженийПартии, Движения.НДСПоПриобретеннымЦенностям, Отказ);
		КонецЕсли; 
		// НДС по партиям - отразить занесение на счета товаров отгруженных (45).
		/////////////////////////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////////////////////
		// НДС по ОС - при списании ТМЦ они могут перестать принадлежать к будущим ОС,
		// в этом случае необходимо снять блокировку с вычета.
		// Если в результате перемещения ТМЦ будет отнесено на счет учета ОС, необходимо включить блокировку.
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, Движения.НДСПоПриобретеннымЦенностям.Выгрузить(), Движения, Отказ);
		// НДС по ОС
		/////////////////////////////////////////////////////////////////////////////////
		//Все необходимые действия на данном этапе отработаны.
		
	Иначе
	
		Если СтруктураШапкиДокумента.УчитыватьНДС Тогда

			УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			СчетОтнесенияНДС = ПланыСчетов.Хозрасчетный.НДС;
				
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ, СчетОтнесенияНДС, ТаблицаВзаиморасчетов);
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета УСН
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок)
	
	Если НЕ (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДопПараметров = Новый Структура("ТаблицаТМЦ, ТаблицаРасчетов", ТаблицаПоТоварам, ТаблицаВзаиморасчетов);
	НалоговыйУчетУСН.ДвиженияУСН(ЭтотОбъект, РежимПроведения, СтруктураДопПараметров);
		
КонецПроцедуры

Процедура ПереоценкаАТТВПродажныхЦенах(СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Ссылка.Дата, УчетнаяПолитикаНеЗадана, Ссылка.Организация, "Бух");
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитикаБУ.Количество() > 0 Тогда	
		Если (мУчетнаяПолитикаБУ.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;
	Если мУчетВПродажныхЦенах И СтруктураШапкиДокумента.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		
		Проводки = Движения.Хозрасчетный;
		
		Для Каждого Строка из ТаблицаПоТоварам Цикл
			
			Если УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(Строка.СчетУчета) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Партия Из Строка.СписанныеПартии Цикл
				Если Партия.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				УчетнаяЦена = Партия.СуммаСписания;
				СуммаПродажи = Строка.Сумма;
				СуммаПереоценки = (СуммаПродажи * Партия.Количество / Строка.Количество) - (УчетнаяЦена);
				
				Если СуммаПереоценки <> 0 Тогда
					Проводка = Проводки.Добавить();
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Переоценка товаров в рознице";
					
					Проводка.СчетДт      = Строка.СчетУчета;
					Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
					Проводка.Сумма       = СуммаПереоценки;
					
					//Списание результата переоценки продаваемого товара
					Проводка = Проводки.Добавить();
					
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Переоценка товаров в рознице";
					
					Проводка.СчетКт      = Строка.СчетУчета;
					Проводка.СчетДт      = Строка.КорСчетСписания;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.КорСубконтоСписания1);
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.ПодразделениеОрганизации);
					
					Проводка.Сумма       = СуммаПереоценки;
				КонецЕсли;
			КонецЦикла;
									
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ДвиженияПоРегиструРеализацияУслуг(СтруктураШапкиДокумента, ДатаДока, ТаблицаПоУслугам)
	
	Если НЕ СтруктураШапкиДокумента.РазрешитьУчетУслугБезПлановыхЦен Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРеализацияУслуг = Движения["РеализацияУслуг"];
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		Если Лев(СтрокаТаблицы.СчетРасходов.Код, 2) = "91" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения                       = ДвиженияРеализацияУслуг.Добавить();
		СтрокаДвижения.Период                = ДатаДока;
		СтрокаДвижения.Организация           = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.СчетРасходов          = СтрокаТаблицы.СчетРасходов;
		СтрокаДвижения.НоменклатурнаяГруппа  = СтрокаТаблицы.Субконто;
		// {ОбособленныеПодразделения
		СтрокаДвижения.Подразделение         = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		// }ОбособленныеПодразделения
		СтрокаДвижения.Сумма                 = СтрокаТаблицы.СуммаБезНДС;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструАгентскихУслуг(СтруктураШапкиДокумента, ТаблицаПоАгентскимУслугам)
	
	Для Каждого СтрокаУслуги Из ТаблицаПоАгентскимУслугам Цикл
		
		Движение = Движения.РеализованныеТоварыКомитентов.ДобавитьПриход();
		Движение.Активность		 	= Истина;
		Движение.Период			= СтруктураШапкиДокумента.Дата;
		Движение.Организация 	= СтруктураШапкиДокумента.Организация;
		
		Движение.Контрагент		 	= СтрокаУслуги.Контрагент;
		Движение.ДоговорКонтрагента	= СтрокаУслуги.ДоговорКонтрагента;
		Движение.Номенклатура 		= СтрокаУслуги.Номенклатура;
		
		ДанныеОВалютеРасчетовСКомитентом = МодульВалютногоУчета.ПолучитьКурсВалюты(
			СтрокаУслуги.ВалютаРасчетовСКомитентом, СтруктураШапкиДокумента.Дата);
		Выручка = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаУслуги.СуммаБУ, 
			мВалютаРегламентированногоУчета, СтрокаУслуги.ВалютаРасчетовСКомитентом,
			1, ДанныеОВалютеРасчетовСКомитентом.Курс,
			1,ДанныеОВалютеРасчетовСКомитентом.Кратность);
		
		Движение.Количество 		= СтрокаУслуги.Количество;
		Движение.Выручка 			= Выручка;
		Движение.СуммаПоступления	= 0;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт

	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, СтруктураШапкиДокумента.Организация);
	Если Не Отказ Тогда
		РазрешитьУчетУслугБезПлановыхЦен = Не ПараметрыУчетнойПолитики.ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам;
	Иначе
		РазрешитьУчетУслугБезПлановыхЦен = Ложь;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("РазрешитьУчетУслугБезПлановыхЦен", РазрешитьУчетУслугБезПлановыхЦен);
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС, НачислятьНДСПоОтгрузке, УпрощенныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ,ложь);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"  , "ВидСклада");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ТипЦен"              , "ЦенаВключаетНДС"      , "ЦенаВключаетНДС");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ХозрасчетныйВидыСубконто.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|ГДЕ
		|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
		|	И ХозрасчетныйВидыСубконто.НомерСтроки = 1";
		
		СчетаСНоменклатурнымиГруппами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		СтруктураШапкиДокумента.Вставить("СчетаСНоменклатурнымиГруппами", СчетаСНоменклатурнымиГруппами);
	КонецЕсли;
	// }УчетДоходовИРасходовИП

КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоАгентскимУслугам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура",        "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      ,        "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"  ,        "Количество");
	СтруктураПолей.Вставить("Сумма"       ,        "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   ,        "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         ,        "СуммаНДС");
	СтруктураПолей.Вставить("НомерГТД",            "НомерГТД");
	СтруктураПолей.Вставить("СтранаПроисхождения", "СтранаПроисхождения");

	СтруктураПолей.Вставить("СчетУчета"          , "СчетУчета");
	СтруктураПолей.Вставить("ПереданныеСчетУчета", "ПереданныеСчетУчета");
	СтруктураПолей.Вставить("СчетДоходов"        , "СчетДоходов");
	СтруктураПолей.Вставить("Субконто"           , "Субконто");
	СтруктураПолей.Вставить("СчетРасходов"       , "СчетРасходов");
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации", "СчетУчетаНДСПоРеализации");
	СтруктураПолей.Вставить("ДокументОприходования", "ДокументОприходования");
	СтруктураПолей.Вставить("Себестоимость"		   , "Себестоимость");
	СтруктураПолей.Вставить("Цена"				   , "Цена");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("СчетУчета",  "СчетУчета");

	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"  , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"    , "Содержание");
	СтруктураПолей.Вставить("Услуга"        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"    , "Количество");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"     , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"           , "СуммаНДС");
	СтруктураПолей.Вставить("СчетДоходов" , "СчетДоходов");
	СтруктураПолей.Вставить("Субконто"    , "Субконто");
	СтруктураПолей.Вставить("СчетРасходов", "СчетРасходов");
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации", "СчетУчетаНДСПоРеализации");
	СтруктураПолей.Вставить("Цена"		    , "Цена");

	РезультатЗапросаПоУслугам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Агентские услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"  , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"    , "Содержание");
	СтруктураПолей.Вставить("Услуга"        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"    , "Количество");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"     , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"           , "СуммаНДС");
	СтруктураПолей.Вставить("Контрагент" 	, "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");
	СтруктураПолей.Вставить("СчетРасчетов"	, "СчетРасчетов");
	СтруктураПолей.Вставить("СчетРасчетовПоАвансамСКомитентом", "СчетРасчетов");
	СтруктураПолей.Вставить("ВалютаРасчетовСКомитентом",        "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("Цена"		    , "Цена");

	РезультатЗапросаПоАгентскимУслугам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "АгентскиеУслуги", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоАгентскимУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоАгентскимУслугам, СтруктураШапкиДокумента);
	ТаблицаПоАгентскимУслугам.Колонки.Добавить("ЭтоДоходКомитента");
	ТаблицаПоАгентскимУслугам.ЗаполнитьЗначения(Истина, "ЭтоДоходКомитента");

	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоАгентскимУслугам, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТаре   , СтруктураШапкиДокумента, Истина);

КонецПроцедуры

// Процедуры и  функции, обслуживающие зачет авансов

Функция ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ТаблицаЗачетаАвансов = ЗачетАвансов.ВыгрузитьКолонки();
	Иначе
		ТаблицаЗачетаАвансов = ЗачетАвансов.Выгрузить();
		ТаблицаЗачетаАвансов.Свернуть("ДокументАванса", "СуммаЗачета");
	КонецЕсли;
	ТаблицаЗачетаАвансов.Колонки.ДокументАванса.Имя = "ДокументРасчетов";
	ТаблицаЗачетаАвансов.Колонки.СуммаЗачета.Имя    = "СуммаВзаиморасчетов";
	
	Возврат ТаблицаЗачетаАвансов;

КонецФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если (ТаблицаЗачетаАвансов.Количество() = 0) Тогда
		
		Если СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли (ТаблицаЗачетаАвансов.Количество() = 1) 
		И (НЕ ЗначениеЗаполнено(ТаблицаЗачетаАвансов[0].ДокументРасчетов)) Тогда
	
		ТекстОшибки = "Не заполнен реквизит ""Документ аванса"" (закладка ""Зачет авансов"")";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		
	Иначе
	
		СтруктураОбязательныхПолей = Новый Структура("ДокументАванса");
    	
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(
			ЭтотОбъект, "ЗачетАвансов", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура СкопироватьТовары(Основание) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.Номенклатура,
	|	СчетНаОплатуПокупателюТовары.Цена,
	|	СчетНаОплатуПокупателюТовары.Сумма,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС,
	|	СчетНаОплатуПокупателюТовары.СуммаНДС,
	|	СчетНаОплатуПокупателюТовары.Количество
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка";
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", Истина);

	Для Каждого СтрокаТЧ Из Товары Цикл
		СтрокаТЧ.ЕдиницаИзмерения 	 = СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения; 
		СтрокаТЧ.Коэффициент	 	 = 1;
		СтрокаТЧ.НомерГТД            = СтрокаТЧ.Номенклатура.НомерГТД;
		СтрокаТЧ.СтранаПроисхождения = СтрокаТЧ.Номенклатура.СтранаПроисхождения;
		Если НЕ Основание.СуммаВключаетНДС = СуммаВключаетНДС Тогда
			СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, -СтрокаТЧ.СуммаНДС);
			// Выполнить общие действия для всех документов при изменении Суммы.
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТЧ, ЭтотОбъект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Скопировать состав" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура ЗаполнитьПоПоступлению(ИмяТабЧасти, Режим, Основание = Неопределено, ИмяТабЧастиИсточника = Неопределено) Экспорт

	Если Основание = Неопределено Тогда
		ФормаПоступления = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
		ФормаПоступления.Заголовок = "Выберите документ поступления для заполнения документа реализации";
		ФормаПоступления.РежимВыбора = Истина;
		ФормаПоступления.Отбор.Организация.Значение = Организация;
		ФормаПоступления.Отбор.Организация.Использование = Истина;
		Поступление = ФормаПоступления.ОткрытьМодально();
	Иначе
		Поступление = Основание;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;

	ТабЧасть = ЭтотОбъект[ИмяТабЧасти];

	Если ТабЧасть.Количество() > 0 И Режим = "Заполнить" Тогда

		#Если Клиент Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 
		#КонецЕсли

		ТабЧасть.Очистить();

	КонецЕсли;
	
	ТабЧастьИсточник = ?(ИмяТабЧастиИсточника = Неопределено, ИмяТабЧасти, ИмяТабЧастиИсточника);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Поступление", Поступление);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.НомерСтроки,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Количество" +?(ТабЧастьИсточник = "Товары",",
	|	ПоступлениеТоваровУслугТовары.КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.НомерГТД,
	|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения", "") + "
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг."+ТабЧастьИсточник + " КАК ПоступлениеТоваровУслугТовары
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление";
	ВыборкаТоваров = Запрос.Выполнить().Выбрать();

	Пока ВыборкаТоваров.Следующий() Цикл

		СтрокаТЧ = ТабЧасть.Добавить();

		СтрокаТЧ.Номенклатура        = ВыборкаТоваров.Номенклатура;
		СтрокаТЧ.Количество          = ВыборкаТоваров.Количество;

		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, Истина);
		
		Если ТабЧастьИсточник = "Товары" Тогда

			СтрокаТЧ.ЕдиницаИзмерения    = ВыборкаТоваров.ЕдиницаИзмерения;
			СтрокаТЧ.Коэффициент         = ВыборкаТоваров.Коэффициент;
			СтрокаТЧ.КоличествоМест      = ВыборкаТоваров.КоличествоМест;
			Если НалоговыйУчетУСН.ПрименениеУСН(Поступление.Организация, Поступление.Дата) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
			Иначе
				СтрокаТЧ.СтавкаНДС           = ВыборкаТоваров.СтавкаНДС;
			КонецЕсли;
			СтрокаТЧ.НомерГТД            = ВыборкаТоваров.НомерГТД;
			СтрокаТЧ.СтранаПроисхождения = ВыборкаТоваров.СтранаПроисхождения;

		КонецЕсли;
		
		Если ТабЧастьИсточник = "Оборудование" Тогда

			СтрокаТЧ.ЕдиницаИзмерения = ВыборкаТоваров.Номенклатура.БазоваяЕдиницаИзмерения;
			СтрокаТЧ.Коэффициент      = 1;
			СтрокаТЧ.КоличествоМест   = ВыборкаТоваров.Количество;
			
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);

		КонецЕсли;
		
		
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

Процедура СкопироватьВозвратнуюТару(Основание) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюВозвратнаяТара.НомерСтроки,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Количество,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Сумма,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Цена
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК СчетНаОплатуПокупателюВозвратнаяТара
	|
	|ГДЕ
	|	СчетНаОплатуПокупателюВозвратнаяТара.Ссылка = &Ссылка";
	ВозвратнаяТара.Загрузить(Запрос.Выполнить().Выгрузить());

	ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", Истина);

КонецПроцедуры

Процедура СкопироватьУслуги(Основание) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюУслуги.НомерСтроки,
	|	СчетНаОплатуПокупателюУслуги.Содержание,
	|	СчетНаОплатуПокупателюУслуги.Количество,
	|	СчетНаОплатуПокупателюУслуги.Цена,
	|	СчетНаОплатуПокупателюУслуги.Сумма,
	|	СчетНаОплатуПокупателюУслуги.СтавкаНДС,
	|	СчетНаОплатуПокупателюУслуги.СуммаНДС,
	|	СчетНаОплатуПокупателюУслуги.Номенклатура
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
	|
	|ГДЕ
	|	СчетНаОплатуПокупателюУслуги.Ссылка = &Ссылка";
	Услуги.Загрузить(Запрос.Выполнить().Выгрузить());

	ЗаполнитьСчетаУчетаВТабЧастиУслуги(Истина);
	
	Если НЕ Основание.СуммаВключаетНДС = СуммаВключаетНДС Тогда
		Для Каждого СтрокаТЧ Из Услуги Цикл
			СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, -СтрокаТЧ.СуммаНДС);
			// Выполнить общие действия для всех документов при изменении Суммы.
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТЧ, ЭтотОбъект);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		// Заполним реквизиты шапки по документу основанию.
		АдресДоставки = Основание.АдресДоставки;
        СчетНаОплатуПокупателю = Основание;
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		// Сделку и табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		СкопироватьТовары(Основание);
		СкопироватьВозвратнуюТару(Основание);
		СкопироватьУслуги(Основание)

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполним реквизиты шапки по документу основанию.
		Организация     = Основание.Организация;
		Склад           = Основание.Склад;
		ВалютаДокумента = Основание.ВалютаДокумента;

		// {ОбособленныеПодразделения
		ПодразделениеОрганизации = Основание.ПодразделениеОрганизации;
		// }ОбособленныеПодразделения
		
		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойТипЦенПродажи");
		КонецЕсли;

		// Флаги включения налогов.
		УчитыватьНДС = Истина;
		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			СуммаВключаетНДС = Истина;
		Иначе
			СуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
		КонецЕсли;
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		КонецЕсли;

		ЗаполнитьПоПоступлению("Товары"        , "Заполнить", Основание);
		ЗаполнитьПоПоступлению("ВозвратнаяТара", "Заполнить", Основание);

		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		
			ЗаполнитьПоПоступлению("Товары", "Добавить", Основание, "Оборудование");
			
		КонецЕсли;
		
	КонецЕсли;

	ЗаполнитьСчетаУчетаРасчетов();

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "АгентскиеУслуги");

	// В этом случае почистим в табличных частях поля СпособСписанияОстаткаТоваров, НомерГТД и СтранаПроисхождения.
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда 

		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл

			Если ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД)Тогда
				СтрокаТаблицы.НомерГТД = Неопределено;
			КонецЕсли;

			Если ЗначениеЗаполнено(СтрокаТаблицы.СтранаПроисхождения)Тогда
				СтрокаТаблицы.СтранаПроисхождения = Неопределено;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		
		Отказ = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, Организация);
		
		Если Отказ Тогда
			НачислятьНДСПоОтгрузке = Ложь;
		Иначе
			НачислятьНДСПоОтгрузке = УчетнаяПолитика.НачислятьНДСПоОтгрузке;
		КонецЕсли;
		
		Если Не НачислятьНДСПоОтгрузке Тогда
			УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный", Истина);
		Иначе
			УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный");
		КонецЕсли;
		
	Иначе	
		УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный");
	КонецЕсли;

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоАгентскимУслугам;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

    ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоАгентскимУслугам);
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиАгентскиеУслуги(ТаблицаПоАгентскимУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Зачет авансов
	ТаблицаЗачетаАвансов = ПодготовитьТаблицуЗачетаАвансов(СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧастиЗачетАвансов(ТаблицаЗачетаАвансов, СтруктураШапкиДокумента, Отказ, Заголовок);

	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
		СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(
			РежимПроведения, СтруктураШапкиДокумента,
			ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоАгентскимУслугам, ТаблицаЗачетаАвансов,
			Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	
	УчетНДС.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураВыданный", Ложь);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();

