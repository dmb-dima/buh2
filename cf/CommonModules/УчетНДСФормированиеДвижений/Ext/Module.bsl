
Процедура РаспределитьОплатыПоТаблице(ТаблицаНДС, ТаблицаОплат, ОтбиратьПоПараметрам = Ложь, ДопКолонкиСумм = Неопределено, РаспределятьОплатыНалоговогоАгента = Ложь, ДополнитьДокументомОплаты = Ложь);
	
	Если ТаблицаОплат = Неопределено
		Или ТаблицаОплат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаОплат.Колонки.Найти("РаспределеннаяСуммаДляНДС") = Неопределено Тогда
		ТаблицаОплат.Колонки.Добавить("РаспределеннаяСуммаДляНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	КонецЕсли;
	
	Если ДополнитьДокументомОплаты Тогда
		Если ТаблицаНДС.Колонки.Найти("ДокументОплаты") = Неопределено Тогда
			ТаблицаНДС.Колонки.Добавить("ДокументОплаты", Новый ОписаниеТипов(ТаблицаОплат.Колонки.ДокументРасчетов.ТипЗначения));
		КонецЕсли;
		Если ТаблицаНДС.Колонки.Найти("ДатаОплаты") = Неопределено Тогда
			ТаблицаНДС.Колонки.Добавить("ДатаОплаты", Новый ОписаниеТипов("Дата"));
		КонецЕсли;
	КонецЕсли;
	
	МассивСумм = Новый Массив;
	
	СтруктураОтбора = Новый Структура("ДокументРасчетов, ВидЦенности, СтавкаНДС, СчетУчетаНДС"); 
	
	Для Каждого СтрокаНДС Из ТаблицаНДС Цикл
		
		НалоговыйАгент = УчетНДС.ЭтоВидЦенностиНалоговыйАгент(СтрокаНДС.ВидЦенности, Ложь);
		
		Если НалоговыйАгент	И Не РаспределятьОплатыНалоговогоАгента Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОтбиратьПоПараметрам Тогда
			СтруктураОтбора.ДокументРасчетов = СтрокаНДС.СчетФактура;
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаНДС);
			ОплатыСОтбором = ТаблицаОплат.НайтиСтроки(СтруктураОтбора);
		Иначе
			Если ТаблицаОплат.Колонки.Найти("Контрагент") <> Неопределено
			   И ТаблицаНДС.Колонки.Найти("Покупатель") <> Неопределено
			Тогда
				ОплатыСОтбором = ТаблицаОплат.НайтиСтроки(Новый Структура("Контрагент", СтрокаНДС.Покупатель));
			Иначе
				ОплатыСОтбором = ТаблицаОплат;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаОплаты Из ОплатыСОтбором Цикл
			
			Если Не ОтбиратьПоПараметрам 
				И (СтрокаОплаты.ДокументРасчетов = СтрокаНДС.СчетФактура) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаОплаты.СуммаБУ - СтрокаОплаты.РаспределеннаяСуммаДляНДС = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			СуммаТаблицыНДС = ?(НалоговыйАгент, СтрокаНДС.СуммаБезНДС, СтрокаНДС.СуммаБезНДС + СтрокаНДС.НДС);
			СуммаОплаты = ?(СуммаТаблицыНДС > СтрокаОплаты.СуммаБУ - СтрокаОплаты.РаспределеннаяСуммаДляНДС, 
							СтрокаОплаты.СуммаБУ - СтрокаОплаты.РаспределеннаяСуммаДляНДС, 
							СуммаТаблицыНДС);
			СтрокаОплаты.РаспределеннаяСуммаДляНДС = СтрокаОплаты.РаспределеннаяСуммаДляНДС + СуммаОплаты;
			
			Если СуммаОплаты < СуммаТаблицыНДС Тогда

				// Распределение колонок СуммаБезНДС, НДС
				МассивСумм.Очистить();
				МассивСумм.Добавить(СтрокаНДС.СуммаБезНДС);
				Если Не НалоговыйАгент Тогда
					МассивСумм.Добавить(СтрокаНДС.НДС);
				КонецЕсли;
				МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СуммаОплаты, МассивСумм);
				
				НоваяСтрока = ТаблицаНДС.Вставить(ТаблицаНДС.Индекс(СтрокаНДС) + 1);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНДС);
				Если Не НалоговыйАгент Тогда
					НоваяСтрока.НДС = СтрокаНДС.НДС - МассивРаспределенныхСумм[1];
				Иначе
					НоваяСтрока.НДС = СтрокаНДС.НДС / СтрокаНДС.СуммаБезНДС * (СтрокаНДС.СуммаБезНДС - МассивРаспределенныхСумм[0]);
				КонецЕсли;
				НоваяСтрока.СуммаБезНДС = СтрокаНДС.СуммаБезНДС - МассивРаспределенныхСумм[0];
				
				СтрокаНДС.СуммаБезНДС = СтрокаНДС.СуммаБезНДС - НоваяСтрока.СуммаБезНДС;
				СтрокаНДС.НДС = СтрокаНДС.НДС - НоваяСтрока.НДС;
				
				// Распределение остальных числовых колонок
				Если ДопКолонкиСумм <> Неопределено Тогда
					Для Каждого Колонка Из ДопКолонкиСумм Цикл
						
						НоваяСтрока[Колонка] = Окр(СтрокаНДС[Колонка] * (СуммаОплаты / СуммаТаблицыНДС), 2);
						СтрокаНДС[Колонка] = СтрокаНДС[Колонка] - НоваяСтрока[Колонка];
						
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаНДС.ДатаОплаты = СтрокаОплаты.ДатаДокументаРасчетов;
			Если ДополнитьДокументомОплаты Тогда
				СтрокаНДС.ДокументОплаты = СтрокаОплаты.ДокументРасчетов;
			КонецЕсли;
			
			Прервать;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Процедура вызывается из модулей документов прихода.
// Основная задача - отразить поступление МПЗ или затрат в подсистеме учета НДС,
// а именно в регистре: "НДСПокупки"
Процедура СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, ИдТабЧасти, ТаблицаАвансов = Неопределено, Движения, Отказ) Экспорт

	Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН")
		Или Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") 
		Или Не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") 
		Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") Тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН",(ОшибкаВПолучении = Ложь и  УчетнаяПолитика.УСН));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь и УчетнаяПолитика.УпрощенныйУчетНДС));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
			СтруктураШапкиДокумента.Вставить("СложныйУчетНДС",(ОшибкаВПолучении = Ложь и УчетнаяПолитика.СложныйУчетНДС));
		КонецЕсли;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС") 
		И Не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений_НДСПредъявленный	= Движения.НДСПредъявленный.Выгрузить();
	ТаблицаДвижений_НДСПредъявленный.Очистить();
	
	ТаблицаДвижений_НДСпоОСиНМА = Неопределено;
	ТаблицаДвижений_НДСКосвенныеРасходы = Неопределено;
	ТаблицаДвижений_НДСВключенныйВСтоимость = Неопределено;
	
	
	Если СтруктураШапкиДокумента.СложныйУчетНДС Тогда
		СчетаУчетаКосвенныхРасходов = УчетНДС.ОпределитьСчетаУчетаКосвенныхРасходов();
	КонецЕсли; 
	
	СчетаУчетаЦенностей = УчетНДС.ОпределитьСчетаУчетаЦенностей();
	СчетаУчетаОСиНМАиОбъектовСтроительства = УчетНДС.ОпределитьСчетаУчетаЦенностей("ВНА", СтруктураШапкиДокумента.Дата);
	СчетаУчетаОС = УчетНДС.ОпределитьСчетаУчетаЦенностей("ОС", СтруктураШапкиДокумента.Дата);
	СчетаУчетаОборудование = УчетНДС.ОпределитьСчетаУчетаЦенностей("Оборудование", СтруктураШапкиДокумента.Дата);
	СчетаУчетаНМА = УчетНДС.ОпределитьСчетаУчетаЦенностей("НМА", СтруктураШапкиДокумента.Дата);
	
	ОсобыеУсловияБлокировкиВычета2006_ОСиНМА = (СтруктураШапкиДокумента.Дата >= '20060101');
	
	ИспользоватьДокументРасчетовКакСчетФактуру = СтруктураШапкиДокумента.Свойство("ИспользоватьДокументРасчетовКакСчетФактуру")
												И СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру;
												
	ИмяКолонкиПодразделение = ?(ТаблицаПредъявленногоНДС.Колонки.Найти("ПодразделениеЗатрат") <> Неопределено, "ПодразделениеЗатрат", ?(ТаблицаПредъявленногоНДС.Колонки.Найти("КорПодразделениеОрганизации") <> Неопределено, "КорПодразделениеОрганизации", Неопределено));
	
	Для Каждого СтрокаДок из ТаблицаПредъявленногоНДС Цикл
		
		Если (ТипЗнч(СтрокаДок.СчетУчетаЦенности) = Тип("ПланСчетовСсылка.Хозрасчетный")) и СтрокаДок.СчетУчетаЦенности.Забалансовый Тогда
			// Пропускаем забалансовые поступления
			Продолжить;
		КонецЕсли;

		Если СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет" и НЕ ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
			//По строкам АО, в которых не указана СФ записи в регистре не формируются 
			Продолжить;
		КонецЕсли;
		СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();

		СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.ВидЦенности = СтрокаДок.ВидЦенности;

		Если (СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет") Тогда
			// при проведении авансовых отчетов порядок заполнения данных измерений иной
			СтрокаДвижения.Поставщик   = СтрокаДок.Поставщик;
			СтрокаДвижения.СчетФактура = СтрокаДок.СчетФактура;
		Иначе
			СтрокаДвижения.Поставщик   = СтруктураШапкиДокумента.Контрагент;
			СтрокаДвижения.СчетФактура = ?(ИспользоватьДокументРасчетовКакСчетФактуру, СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
		КонецЕсли;

		Если (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов") Тогда
			СтрокаДвижения.СтавкаНДС   = СтруктураШапкиДокумента.СтавкаНДС;
		Иначе
			СтрокаДвижения.СтавкаНДС   = СтрокаДок.СтавкаНДС;
		КонецЕсли;	
			
		СтрокаДвижения.СчетУчетаНДС = СтрокаДок.СчетУчетаНДС;
		
		СтрокаДвижения.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
		СтрокаДвижения.НДС         = СтрокаДок.НДС;
		
		Если СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные Тогда
			СтрокаДвижения.ДоговорКонтрагента = СтрокаДок.ДоговорКонтрагента;
		ИначеЕсли УчетНДС.ВидыЦенностиНалоговыйАгентПоступление().Найти(СтрокаДок.ВидЦенности) <> Неопределено
			И СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
			СтрокаДвижения.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		КонецЕсли;	
		
		СтрокаДвижения.ВидДвижения  = ВидДвиженияНакопления.Приход;

		СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
		
		//////////////////////////////////////
		// Обработка специфических ситуаций
		Если СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.НМА 
			Или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.Оборудование
			Или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства
			Или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.ОС
			Или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные
			Или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами
			Или Не (СчетаУчетаОСиНМАиОбъектовСтроительства.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = Неопределено)
			Тогда 	// Блокирование вычета для ОС и объектов строительства (в т.ч. СМР),
					// и ценностей, использованных при строительства
		
			Если ТаблицаДвижений_НДСпоОСиНМА = Неопределено Тогда
				ТаблицаДвижений_НДСпоОСиНМА	= Движения.НДСпоОСиНМА.Выгрузить();
				ТаблицаДвижений_НДСпоОСиНМА.Очистить();
			КонецЕсли; 
				
			СтрокаДвиженияОС = ТаблицаДвижений_НДСпоОСиНМА.Добавить();

			СтрокаДвиженияОС.Организация	= СтруктураШапкиДокумента.Организация;
			СтрокаДвиженияОС.ВидЦенности	= СтрокаДок.ВидЦенности;

			Если (СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет") Тогда
				// при проведении авансовых отчетов порядок заполнения данных измерений иной
				СтрокаДвиженияОС.СчетФактура= СтрокаДок.СчетФактура;
			Иначе
				СтрокаДвиженияОС.СчетФактура= ?(ИспользоватьДокументРасчетовКакСчетФактуру, СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
			КонецЕсли;

			Если (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов") Тогда
				СтрокаДвиженияОС.СтавкаНДС	= СтруктураШапкиДокумента.СтавкаНДС;
			Иначе
				СтрокаДвиженияОС.СтавкаНДС	= СтрокаДок.СтавкаНДС;
			КонецЕсли;	
				
			СтрокаДвиженияОС.СчетУчетаНДС	= СтрокаДок.СчетУчетаНДС;
			СтрокаДвиженияОС.НДСВключенВСтоимость = ?(СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость"),СтруктураШапкиДокумента.НДСВключенВСтоимость,Ложь);
			
			Если СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.НМА 
				Или Не (СчетаУчетаНМА.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = Неопределено) 
				Тогда
				СтрокаДвиженияОС.Состояние	= Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию;
				СтрокаДвиженияОС.Объект 	= СтрокаДок.Ценность;
			ИначеЕсли СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.ОС 
				Или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.Оборудование 
				Или Не (СчетаУчетаОС.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = Неопределено) 
				Или Не (СчетаУчетаОборудование.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = Неопределено)
				Тогда
				СтрокаДвиженияОС.Состояние	= Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОС;
				СтрокаДвиженияОС.Объект 	= СтрокаДок.Ценность;
			Иначе
				СтрокаДвиженияОС.Состояние	= Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства;
				
				// Определим объект строительства
				ОбъектСтроительства = Неопределено;
				Если ТаблицаПредъявленногоНДС.Колонки.Найти("ОбъектСтроительства")=Неопределено Тогда
					ВидыСубконтоСчетаЗатрат = СтрокаДок.СчетУчетаЦенности.ВидыСубконто;
					Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
						Если не (ТаблицаПредъявленногоНДС.Колонки.Найти("Субконто"+НомерСубконто) = Неопределено) 
							и ТипЗнч(СтрокаДок["Субконто"+НомерСубконто]) = Тип("СправочникСсылка.ОбъектыСтроительства") тогда
							ОбъектСтроительства = СтрокаДок["Субконто"+НомерСубконто];
							Прервать;
						КонецЕсли; 
					КонецЦикла;
				Иначе
					ОбъектСтроительства = СтрокаДок.ОбъектСтроительства;
				КонецЕсли; 
				
				СтрокаДвиженияОС.Объект 	= ОбъектСтроительства;
			КонецЕсли; 
			
			СтрокаДвиженияОС.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
			СтрокаДвиженияОС.НДС         = СтрокаДок.НДС;
			
			//СтрокаДвиженияОС.ВидДвижения  = ВидДвиженияНакопления.Приход;

			СтрокаДвиженияОС.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
			Если ОсобыеУсловияБлокировкиВычета2006_ОСиНМА Тогда
				СтрокаДвиженияОС.НеВлияетНаВычет = (СчетаУчетаОС.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = Неопределено И 
													СчетаУчетаНМА.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = Неопределено
													Или СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов");
			КонецЕсли;
		ИначеЕсли СтруктураШапкиДокумента.СложныйУчетНДС 
			и не (СчетаУчетаКосвенныхРасходов.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = Неопределено)  
			тогда //Отражение в составе косвенных расходов, подлежащих распределению
			
			СтатьяЗатрат = Неопределено;

			Если ТаблицаПредъявленногоНДС.Колонки.Найти("СтатьяЗатрат")=Неопределено Тогда
				ВидыСубконтоСчетаЗатрат = СтрокаДок.СчетУчетаЦенности.ВидыСубконто;
				Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
					Если не (ТаблицаПредъявленногоНДС.Колонки.Найти("Субконто"+НомерСубконто) = Неопределено) 
						и ТипЗнч(СтрокаДок["Субконто"+НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") тогда
						СтатьяЗатрат = СтрокаДок["Субконто"+НомерСубконто];
						Прервать;
					КонецЕсли; 
				КонецЦикла;
			Иначе
				СтатьяЗатрат = СтрокаДок.СтатьяЗатрат;
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтатьяЗатрат)
				и (СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД или 
				СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам)
				Тогда // Необходимо включить запись в состав косвенных расходов для последующего распределения
			    
				Если ТаблицаДвижений_НДСКосвенныеРасходы = Неопределено Тогда
					ТаблицаДвижений_НДСКосвенныеРасходы	= Движения.НДСКосвенныеРасходы.Выгрузить();
					ТаблицаДвижений_НДСКосвенныеРасходы.Очистить();
				КонецЕсли;
				
				СтрокаДвиженияКР = ТаблицаДвижений_НДСКосвенныеРасходы.Добавить();

				СтрокаДвиженияКР.Организация	= СтруктураШапкиДокумента.Организация;
				
				СтрокаДвиженияКР.ВидЦенности	= СтрокаДок.ВидЦенности;

				Если (СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет") Тогда
					// при проведении авансовых отчетов порядок заполнения данных измерений иной
					СтрокаДвиженияКР.СчетФактура= СтрокаДок.СчетФактура;
				Иначе
					СтрокаДвиженияКР.СчетФактура= ?(ИспользоватьДокументРасчетовКакСчетФактуру, СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
				КонецЕсли;

				Если (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов") Тогда
					СтрокаДвиженияКР.СтавкаНДС	= СтруктураШапкиДокумента.СтавкаНДС;
				Иначе
					СтрокаДвиженияКР.СтавкаНДС	= СтрокаДок.СтавкаНДС;
				КонецЕсли;	
					
				СтрокаДвиженияКР.СчетУчетаНДС	= СтрокаДок.СчетУчетаНДС;
				СтрокаДвиженияКР.НДСВключенВСтоимость = ?(СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость"),СтруктураШапкиДокумента.НДСВключенВСтоимость,Ложь);
				
				СтрокаДвиженияКР.СтатьяЗатрат = СтатьяЗатрат;
				
				СтрокаДвиженияКР.СчетЗатрат = СтрокаДок.СчетУчетаЦенности;
			    Если ИмяКолонкиПодразделение <> Неопределено Тогда
					СтрокаДвиженияКР.ПодразделениеЗатрат = СтрокаДок[ИмяКолонкиПодразделение];
				КонецЕсли;
				
				ВидыСубконтоСчетаЗатрат = СтрокаДок.СчетУчетаЦенности.ВидыСубконто;
				Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
					Если не (ТаблицаПредъявленногоНДС.Колонки.Найти("Субконто"+НомерСубконто) = Неопределено) тогда
						СтрокаДвиженияКР["Субконто"+НомерСубконто] = СтрокаДок["Субконто"+НомерСубконто];
					КонецЕсли; 
				КонецЦикла;
				
				СтрокаДвиженияКР.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
				СтрокаДвиженияКР.НДС         = СтрокаДок.НДС;
			КонецЕсли; 
		КонецЕсли;
		// Обработка специфических ситуаций
		//////////////////////////////////////
		
	КонецЦикла;
	
	РаспределитьОплатыПоТаблице(ТаблицаДвижений_НДСПредъявленный, ТаблицаАвансов);
	
	//////////////////////////////////////
	// Отражение включения НДС в стоимость 
	Если СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость") 
		И СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
		
		ТаблицаДвижений_НДСВключенныйВСтоимость	= Движения.НДСВключенныйВСтоимость.Выгрузить();
		ТаблицаДвижений_НДСВключенныйВСтоимость.Очистить();
		
		КоличествоСтрок = ТаблицаДвижений_НДСПредъявленный.Количество();
		
		Для К = 0 По КоличествоСтрок - 1 Цикл

			ДвижениеНДСПредъявленный = ТаблицаДвижений_НДСПредъявленный[К];
			СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения, ДвижениеНДСПредъявленный);

			СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Расход;
			СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
			
			СтрокаДвиженияВкл = ТаблицаДвижений_НДСВключенныйВСтоимость.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвиженияВкл, ДвижениеНДСПредъявленный);

		КонецЦикла;

	КонецЕсли;
	// Отражение включения НДС в стоимость 
	//////////////////////////////////////
	
	Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда

		Движения.НДСПредъявленный.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ДобавитьДвижение();
		
	КонецЕсли;
	
	Если не ТаблицаДвижений_НДСпоОСиНМА = Неопределено Тогда
		Движения.НДСпоОСиНМА.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
		Движения.НДСпоОСиНМА.ВыполнитьПриход();
	КонецЕсли; 

	Если не ТаблицаДвижений_НДСКосвенныеРасходы = Неопределено Тогда
		Движения.НДСКосвенныеРасходы.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаДвижений_НДСКосвенныеРасходы;
		Движения.НДСКосвенныеРасходы.ВыполнитьПриход();
	КонецЕсли; 

	Если не ТаблицаДвижений_НДСВключенныйВСтоимость = Неопределено Тогда
		Движения.НДСВключенныйВСтоимость.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСВключенныйВСтоимость.мТаблицаДвижений = ТаблицаДвижений_НДСВключенныйВСтоимость;
		Движения.НДСВключенныйВСтоимость.ДобавитьДвижение();
	КонецЕсли; 
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСПредъявленный()

// Процедура вызывается из модулей документов списания
Процедура СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаДвиженийПартий, Движения, Отказ) Экспорт

	Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") 
		Или Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") 
		Или Не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") 
		Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") Тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН",(ОшибкаВПолучении = Ложь И УчетнаяПолитика.УСН));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь И УчетнаяПолитика.УпрощенныйУчетНДС));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
	    	СтруктураШапкиДокумента.Вставить("СложныйУчетНДС",(ОшибкаВПолучении = Ложь И УчетнаяПолитика.СложныйУчетНДС));
		КонецЕсли;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.СложныйУчетНДС Тогда 
		
		СчетаУчетаКосвенныхРасходов = УчетНДС.ОпределитьСчетаУчетаКосвенныхРасходов();
		
		ТаблицаДвижений_НДСКосвенныеРасходы	= Движения.НДСКосвенныеРасходы.Выгрузить();
		ТаблицаДвижений_НДСКосвенныеРасходы.Очистить();
		
		ЕстьСчетЗатратВТаблице = ТаблицаДвиженийПартий.Колонки.Найти("СчетЗатрат") <> Неопределено;
		ЕстьСтатьяЗатратВТаблице = ТаблицаДвиженийПартий.Колонки.Найти("СтатьяЗатрат") <> Неопределено;
		ЕстьСчетЗатратВШапке = СтруктураШапкиДокумента.Свойство("СчетЗатрат");
		ЕстьСтатьяЗатратВШапке = СтруктураШапкиДокумента.Свойство("СтатьяЗатрат");
		ИмяКолонкиПодразделение = ?(ТаблицаДвиженийПартий.Колонки.Найти("ПодразделениеЗатрат") <> Неопределено, "ПодразделениеЗатрат", ?(ТаблицаДвиженийПартий.Колонки.Найти("КорПодразделениеОрганизации") <> Неопределено, "КорПодразделениеОрганизации", Неопределено));
		
		Для Каждого СтрокаДок Из ТаблицаДвиженийПартий Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
				// Обрабатываем только записи с заполненными счетами-фактурами
				Продолжить;
			КонецЕсли;
			
			Если СтрокаДок.Стоимость = 0 и СтрокаДок.НДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЕстьСчетЗатратВТаблице Тогда
				СчетЗатрат = СтрокаДок.СчетЗатрат;
			ИначеЕсли ЕстьСчетЗатратВШапке Тогда
				СчетЗатрат = СтруктураШапкиДокумента.СчетЗатрат;
			КонецЕсли;
				
			Если ЕстьСтатьяЗатратВТаблице Тогда
				СтатьяЗатрат = СтрокаДок.СтатьяЗатрат;
			ИначеЕсли ЕстьСтатьяЗатратВШапке Тогда
				СтатьяЗатрат = СтруктураШапкиДокумента.СтатьяЗатрат;
			Иначе
				ВидыСубконтоСчетаЗатрат = СчетЗатрат.ВидыСубконто;
				Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
					Если Не (СтрокаДок["КорСубконтоСписания" + НомерСубконто] = Неопределено)
						И ТипЗнч(СтрокаДок["КорСубконтоСписания" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
						СтатьяЗатрат = СтрокаДок["КорСубконтоСписания" + НомерСубконто];
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли; 
			
			// Если счет учета не соответствует счету учета косвенных расходов, то движения делать не нужно
			Если Не (СчетаУчетаКосвенныхРасходов.НайтиПоЗначению(СчетЗатрат) = Неопределено) Тогда
				Если ЗначениеЗаполнено(СтрокаДок.СчетФактура) И ЗначениеЗаполнено(СтатьяЗатрат)
					И (СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД Или 
					СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам)
					Тогда // Необходимо включить запись в состав косвенных расходов для последующего распределения
					
					СтрокаДвиженияКР = ТаблицаДвижений_НДСКосвенныеРасходы.Добавить();
					
					СтрокаДвиженияКР.Организация	= СтруктураШапкиДокумента.Организация;
					
					СтрокаДвиженияКР.ВидЦенности	= СтрокаДок.ВидЦенности;
					
					СтрокаДвиженияКР.СчетФактура 	= СтрокаДок.СчетФактура;
					
					СтрокаДвиженияКР.СтавкаНДС		= СтрокаДок.СтавкаНДС;
					
					СтрокаДвиженияКР.СчетУчетаНДС	= СтрокаДок.СчетУчетаНДС;
					СтрокаДвиженияКР.НДСВключенВСтоимость = СтрокаДок.НДСВключенВСтоимость;
					
					СтрокаДвиженияКР.СтатьяЗатрат 	= СтатьяЗатрат;
					
					СтрокаДвиженияКР.СчетЗатрат 	= СчетЗатрат;
				    Если ИмяКолонкиПодразделение <> Неопределено Тогда
						СтрокаДвиженияКР.ПодразделениеЗатрат = СтрокаДок[ИмяКолонкиПодразделение];
					КонецЕсли;
					
					ВидыСубконтоСчетаЗатрат = СчетЗатрат.ВидыСубконто;
					Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
						Если не (СтрокаДок["КорСубконтоСписания" + НомерСубконто] = Неопределено) тогда
							СтрокаДвиженияКР["Субконто"+НомерСубконто] = СтрокаДок["КорСубконтоСписания"+НомерСубконто];
						КонецЕсли; 
					КонецЦикла;
					
					СтрокаДвиженияКР.СуммаБезНДС = СтрокаДок.Стоимость - СтрокаДок.НДС;
					СтрокаДвиженияКР.НДС         = СтрокаДок.НДС;
					
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		
		Движения.НДСКосвенныеРасходы.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаДвижений_НДСКосвенныеРасходы;
		Движения.НДСКосвенныеРасходы.ВыполнитьПриход();
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы()

// Процедура вызывается из модулей документов прихода.
// Основная задача - отразить начисление НДС налогового агента в подсистеме учета НДС,
// а именно в регистре: "НДСНачисленный"
Процедура СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШапкиДокумента,ДвиженияНДСПредъявленный,Движения) Экспорт
	
	Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь и  УчетнаяПолитика.УпрощенныйУчетНДС));
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
		Возврат;
	КонецЕсли;
	
	ВидыЦенностей_Агентские = УчетНДС.ВидыЦенностиНалоговыйАгентПоступление();
	
	СчетНДС = ПланыСчетов.Хозрасчетный.НДС;
	
	ТаблицаДвижений_НДСНачисленный = Неопределено;
	Для каждого СтрокаДвижений_НДСПредъявленный Из ДвиженияНДСПредъявленный Цикл
		Если СтрокаДвижений_НДСПредъявленный.ВидДвижения = ВидДвиженияНакопления.Приход 
			И Не ВидыЦенностей_Агентские.Найти(СтрокаДвижений_НДСПредъявленный.ВидЦенности) = Неопределено Тогда
			
			Если ТаблицаДвижений_НДСНачисленный = Неопределено тогда
				ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.выгрузить();
				ТаблицаДвижений_НДСНачисленный.Очистить();
			КонецЕсли;
			СтрокаДвижений_НДСНачисленный = ТаблицаДвижений_НДСНачисленный.Добавить();
			
			СтрокаДвижений_НДСНачисленный.Организация	= СтрокаДвижений_НДСПредъявленный.Организация;
			СтрокаДвижений_НДСНачисленный.Покупатель	= СтрокаДвижений_НДСПредъявленный.Поставщик;
			СтрокаДвижений_НДСНачисленный.СчетФактура	= СтрокаДвижений_НДСПредъявленный.СчетФактура;
			СтрокаДвижений_НДСНачисленный.ВидЦенности	= СтрокаДвижений_НДСПредъявленный.ВидЦенности;
			СтрокаДвижений_НДСНачисленный.СтавкаНДС		= СтрокаДвижений_НДСПредъявленный.СтавкаНДС;
			СтрокаДвижений_НДСНачисленный.СчетУчетаНДС	= СчетНДС;
			
			СтрокаДвижений_НДСНачисленный.СуммаБезНДС	= СтрокаДвижений_НДСПредъявленный.СуммаБезНДС;
			СтрокаДвижений_НДСНачисленный.НДС			= СтрокаДвижений_НДСПредъявленный.НДС;
			
			СтрокаДвижений_НДСНачисленный.Событие 		= Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
			СтрокаДвижений_НДСНачисленный.ДатаСобытия 	= СтруктураШапкиДокумента.Дата;
			
			СтрокаДвижений_НДСНачисленный.ВидДвижения	= ВидДвиженияНакопления.Приход;
			СтрокаДвижений_НДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.НДСНачисленКУплате;
		
		КонецЕсли; 
	КонецЦикла; 
	
	Если не ТаблицаДвижений_НДСНачисленный = Неопределено Тогда

		Движения.НДСНачисленный.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ДобавитьДвижение();
	
	КонецЕсли; 
	
КонецПроцедуры //СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС()

Процедура СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТабЧасть, Движения, Отказ, СчетОтнесенияНДС, ТаблицаОплат = Неопределено, ЭтоВозврат = ложь) Экспорт

	Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") 
		Или Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") Тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН",(ОшибкаВПолучении = Ложь и  УчетнаяПолитика.УСН));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь и УчетнаяПолитика.УпрощенныйУчетНДС));
		КонецЕсли;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	УчитыватьНДС = Истина;

	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС") Тогда
		УчитыватьНДС = СтруктураШапкиДокумента.УчитыватьНДС;
	КонецЕсли;
	
	Если не УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьСчетУчета = не (ТабЧасть.Колонки.Найти("СчетУчета") = Неопределено);
	
	Если ЕстьСчетУчета Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Хозрасчетный.Ссылка как Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Забалансовый = ИСТИНА";
		
		ЗабалансовыеСчета = Новый СписокЗначений();
		ЗабалансовыеСчета.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));;
	КонецЕсли; 
	
	Ставка0 = Перечисления.СтавкиНДС.НДС0;
	
	ТаблицаДвижений_НДСНачисленный	= Движения.НДСНачисленный.Выгрузить();
	ТаблицаДвижений_НДСНачисленный.Очистить();
	
	ТаблицаДвижений_НДСРеализация0	= Неопределено;

	ЕстьКомиссионный = Ложь;
	ЕстьДоговорКомиссии = Ложь;
	
	ИспользоватьДокументРасчетовКакСчетФактуру = СтруктураШапкиДокумента.Свойство("ИспользоватьДокументРасчетовКакСчетФактуру")
												И СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру;
	
	Для Каждого Колонка Из ТабЧасть.Колонки Цикл
		Если Колонка.Имя = "Комиссионный" Тогда
			ЕстьКомиссионный = Истина;
		ИначеЕсли Колонка.Имя = "ДоговорКомиссии" Тогда
			ЕстьДоговорКомиссии = Истина;
		КонецЕсли;
	КонецЦикла;
	
	РегистрРеализация0_ИзмерениеСчетФактураТипы = Метаданные.РегистрыНакопления.НДСРеализация0.Измерения.СчетФактура.Тип;
	
	Для Каждого СтрокаВыбытия Из ТабЧасть Цикл
		
		ОтражатьНДСКомитента = СтруктураШапкиДокумента.Дата >= '20060101000000' И ?(ЕстьКомиссионный, СтрокаВыбытия.Комиссионный, Ложь) И ?(ЕстьДоговорКомиссии, СтрокаВыбытия.ДоговорКомиссии.УчетАгентскогоНДС, Ложь);

		Если ЕстьКомиссионный И (СтрокаВыбытия.Комиссионный И (НЕ ОтражатьНДСКомитента)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ?(ЕстьСчетУчета,не (ЗабалансовыеСчета.НайтиПоЗначению(СтрокаВыбытия.СчетУчета) = неопределено 
			ИЛИ ОтражатьНДСКомитента),Ложь)
			или (СтрокаВыбытия.СуммаБезНДС + СтрокаВыбытия.НДС) = 0 
			тогда
			Продолжить;
		КонецЕсли;

		СтрокаДвижения = ТаблицаДвижений_НДСНачисленный.Добавить();

		СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.ВидЦенности = СтрокаВыбытия.ВидЦенности;
		СтрокаДвижения.Покупатель  = ?(СтруктураШапкиДокумента.Свойство("Контрагент"),СтруктураШапкиДокумента.Контрагент,СтруктураШапкиДокумента.Организация);
		
		Если ЭтоВозврат Тогда
			СтрокаДвижения.СчетФактура = ?(НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка),СтруктураШапкиДокумента.Ссылка,СтруктураШапкиДокумента.Сделка);
		Иначе	
			СтрокаДвижения.СчетФактура = ?(ИспользоватьДокументРасчетовКакСчетФактуру, СтруктураШапкиДокумента.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ВидДокумента = "ОказаниеУслуг"
		Тогда
			// иной порядок заполнения
			СтрокаДвижения.Покупатель = СтрокаВыбытия.Покупатель;
			СтрокаДвижения.СчетФактура = СтрокаВыбытия.СчетФактура;
		КонецЕсли;
		
		СтрокаДвижения.СтавкаНДС   = СтрокаВыбытия.СтавкаНДС;
		СтрокаДвижения.СчетУчетаНДС= СчетОтнесенияНДС;
		
		СтрокаДвижения.СуммаБезНДС = СтрокаВыбытия.СуммаБезНДС*?(ЭтоВозврат,-1,1);
		СтрокаДвижения.НДС         = СтрокаВыбытия.НДС*?(ЭтоВозврат,-1,1);
		
		СтрокаДвижения.ДоговорКонтрагента = ?(ОтражатьНДСКомитента, СтрокаВыбытия.ДоговорКомиссии, Неопределено);
		
		СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПродажи.Реализация;
		
		СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Приход;
		
		
		Если СтрокаВыбытия.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
		ИначеЕсли СтрокаВыбытия.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			Если Не ТабЧасть.Колонки.Найти("СчетДоходов") = Неопределено И НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаВыбытия.СчетДоходов) Тогда
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД;
			ИначеЕсли СтруктураШапкиДокумента.Свойство("СчетДоходов") И НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтруктураШапкиДокумента.СчетДоходов) Тогда
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД;
			Иначе
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС;
			КонецЕсли;
		Иначе
			СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
		КонецЕсли; 
		
		// Устанавливаем реквизиты движения
		СтрокаДвижения.Номенклатура = СтрокаВыбытия.Ценность;
		
		Если ТабЧасть.Колонки.Найти("СчетДоходов") <> Неопределено Тогда
			СтрокаДвижения.СчетДоходовБУ = СтрокаВыбытия.СчетДоходов;
		КонецЕсли;
		
		Если СтрокаВыбытия.СтавкаНДС = Ставка0 
			и не СтруктураШапкиДокумента.ВидДокумента = "ОтчетОРозничныхПродажах"
			и не СтруктураШапкиДокумента.ВидДокумента = "ПриходныйКассовыйОрдер"
			и не (СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" и НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка)) Тогда
			
			СтрокаДвиженияСчетФактура = СтрокаДвижения.СчетФактура;
			Если СтруктураШапкиДокумента.ВидДокумента = "ОтражениеНачисленияНДС" Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаДвиженияСчетФактура) Тогда
					Продолжить;
				Иначе
					Если НЕ РегистрРеализация0_ИзмерениеСчетФактураТипы.СодержитТип(ТипЗнч(СтрокаДвиженияСчетФактура)) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ТаблицаДвижений_НДСРеализация0 = Неопределено Тогда
				ТаблицаДвижений_НДСРеализация0	= Движения.НДСРеализация0.Выгрузить();
				ТаблицаДвижений_НДСРеализация0.Очистить();
			КонецЕсли;
						
		    СтрокаДвижения0 = ТаблицаДвижений_НДСРеализация0.добавить();
			
			СтрокаДвижения0.Организация = СтрокаДвижения.Организация;
			СтрокаДвижения0.ВидЦенности = СтрокаДвижения.ВидЦенности;
			СтрокаДвижения0.Покупатель  = СтрокаДвижения.Покупатель;
			СтрокаДвижения0.СчетФактура = СтрокаДвиженияСчетФактура;
			СтрокаДвижения0.СтавкаНДС   = Ставка0;
			СтрокаДвижения0.Состояние   = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;
			
			СтрокаДвижения0.СуммаБезНДС = СтрокаДвижения.СуммаБезНДС;
			СтрокаДвижения0.НДС         = СтрокаДвижения.НДС;
			
			Если СтруктураШапкиДокумента.Дата < '20111001' Тогда
				// Начиная с 01.10.2011 налоговая база по НДС при подтверждении реализации со ставкой 0% 
				// должна определяться по курсу на дату реализации
				СтрокаДвижения0.КурсоваяРазница = СтрокаВыбытия.СуммаБУ - СтрокаВыбытия.Сумма;
			КонецЕсли;
			
			СтрокаДвижения0.Событие     = СтрокаДвижения.Событие;
			
			СтрокаДвижения0.ВидДвижения = ВидДвиженияНакопления.Приход;
		
		КонецЕсли;                                                                 	

	КонецЦикла;
	
	РаспределитьОплатыПоТаблице(ТаблицаДвижений_НДСНачисленный, ТаблицаОплат);
	
	Если ТаблицаДвижений_НДСНачисленный.Количество() > 0 Тогда
		Движения.НДСНачисленный.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ДобавитьДвижение();
	КонецЕсли;
	
	Если не ТаблицаДвижений_НДСРеализация0 = Неопределено Тогда
		Движения.НДСРеализация0.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСРеализация0;
		Движения.НДСРеализация0.ДобавитьДвижение();
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации()

Процедура СформироватьДвиженияПоРегиструНДСРеализация0_КурсовыеРазницы(СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, Движения, Отказ) Экспорт
	
	Если СтруктураШапкиДокумента.Дата >= '20111001' Тогда
		// Начиная с 01.10.2011 налоговая база по НДС при подтверждении реализации со ставкой 0% 
		// должна определяться по курсу на дату реализации
		Возврат;
	КонецЕсли;
    	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Покупатели", ТаблицаВзаиморасчетов.ВыгрузитьКолонку("Контрагент"));
	Запрос.УстановитьПараметр("СчетФактуры", ТаблицаВзаиморасчетов.ВыгрузитьКолонку("ДокументРасчетов"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСРеализация0Остатки.Организация,
	               |	НДСРеализация0Остатки.СчетФактура,
	               |	НДСРеализация0Остатки.ВидЦенности,
	               |	НДСРеализация0Остатки.СтавкаНДС,
	               |	НДСРеализация0Остатки.Состояние,
	               |	НДСРеализация0Остатки.Покупатель,
	               |	НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.НДСРеализация0.Остатки(
	               |			&Дата,
	               |			Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ОжидаетсяПодтверждение)
	               |				И Покупатель В (&Покупатели)
	               |				И СчетФактура В (&СчетФактуры)) КАК НДСРеализация0Остатки";
			 
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОстатков = Результат.Выгрузить();                       
	ТаблицаОстатков.Колонки.Добавить("КурсоваяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	СтруктураОтбора = Новый Структура("Покупатель, СчетФактура");
	МассивСумм = Новый Массив;
	
	ТаблицаДвижений_НДСРеализация0 = Движения.НДСРеализация0.Выгрузить();
	ТаблицаДвижений_НДСРеализация0.Очистить();
	
	ЕстьСтавкаНДС = ТаблицаВзаиморасчетов.Колонки.Найти("СтавкаНДС") <> Неопределено;
	
	Для Каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		
		Если ЕстьСтавкаНДС 
			И ЗначениеЗаполнено(СтрокаВзаиморасчетов.СтавкаНДС)
			И Не СтрокаВзаиморасчетов.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВалютаРегламентированногоУчета = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора.Покупатель = СтрокаВзаиморасчетов.Контрагент;
		СтруктураОтбора.СчетФактура = СтрокаВзаиморасчетов.ДокументРасчетов;
		СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
		
		СуммаОплатыКоэф = СтрокаВзаиморасчетов.ОстатокВзаиморасчетов/СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		СуммаРеализации0 = 0;
		
		МассивСумм.Очистить();
		
		Для Каждого СтрокаОстатков Из СтрокиОстатков Цикл
			СуммаРеализации0 = СуммаРеализации0 + СтрокаОстатков.Сумма;
			МассивСумм.Добавить(СтрокаОстатков.Сумма);
		КонецЦикла;
		
		Если СуммаРеализации0 = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КурсНаДатуДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаВзаиморасчетов.ВалютаВзаиморасчетов, СтрокаВзаиморасчетов.ДокументРасчетов.Дата);
		СуммаРеализации0Вал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаРеализации0, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, СтрокаВзаиморасчетов.ВалютаВзаиморасчетов,
																					1, КурсНаДатуДокумента.Курс, 1, КурсНаДатуДокумента.Кратность);
		
		Если СуммаРеализации0Вал = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаОплатыВалКоэф =  СтрокаВзаиморасчетов.ОстатокВзаиморасчетов/СуммаРеализации0Вал;
		
		СуммаРеализации0 = СуммаРеализации0 * СуммаОплатыВалКоэф;
		
		КурсоваяРазница = СтрокаВзаиморасчетов.СуммаБУ - СуммаРеализации0 / СуммаОплатыКоэф;
		
		Если КурсоваяРазница = 0 Тогда
			Продолжить;			
		КонецЕсли;
		
		МассивРаспределения = ОбщегоНазначения.РаспределитьПропорционально(КурсоваяРазница, МассивСумм);
		
		Для К = 0 По МассивРаспределения.Количество() - 1 Цикл
			
			Если Окр(МассивРаспределения[К],2,1) = 0 Тогда
				Продолжить;			
			КонецЕсли;
			
			СтрокаОстатков = СтрокиОстатков[К];
			НовоеДвижение = ТаблицаДвижений_НДСРеализация0.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, СтрокаОстатков);
			НовоеДвижение.КурсоваяРазница = МассивРаспределения[К];
			НовоеДвижение.ВидДвижения  = ВидДвиженияНакопления.Приход;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСРеализация0.Количество() > 0 Тогда

		Движения.НДСРеализация0.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСРеализация0;
		Движения.НДСРеализация0.ДобавитьДвижение();
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
//  ОТРАЖЕНИЕ ВКЛЮЧЕНИЯ И ИСКЛЮЧЕНИЯ НДС ИЗ СТОИМОСТИ ПРИ ПЕРЕМЕЩЕНИИ ИЛИ СПИСАНИИ ПАРТИИ ТОВАРОВ

// Процедура вызывается из процедур.
// В тех случаях, когда розничная реализация в организации переведена на ЕНВД,
// при передаче товаров в розницу, происходит автоматическое включение НДС в себестоимость
// этих товаров
Процедура ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаСписания, ТаблицаДвиженийПартии, ВключитьВСтоимость, НаборДвиженийХозрасчетный, Заголовок, Движения, ОтражатьПоПартиям = Истина) Экспорт

	Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь и УчетнаяПолитика.УпрощенныйУчетНДС));
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	ЕстьКолонкаКоличество = ТаблицаСписания.Колонки.Найти("Количество") <> Неопределено;
	Если Не ЕстьКолонкаКоличество Тогда
		ТаблицаСписания.Колонки.Добавить("Количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	КонецЕсли;
	ЕстьКолонкаQuieryId = ТаблицаСписания.Колонки.Найти("QuieryId") <> Неопределено;
	Если Не ЕстьКолонкаQuieryId Тогда
		ТаблицаСписания.Колонки.Добавить("QuieryId", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 0));
		Для К = 0 По ТаблицаСписания.Количество() - 1 Цикл
			ТаблицаСписания[К].QuieryId = К;
		КонецЦикла;
	КонецЕсли;
	Если ТаблицаСписания.Колонки.Найти("СуммаНДСВключенВСтоимость") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СуммаНДСВключенВСтоимость", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	КонецЕсли;
	Если ТаблицаСписания.Колонки.Найти("СуммаНДССписанНаРасходы") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СуммаНДССписанНаРасходы", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	КонецЕсли;
	Если ТаблицаСписания.Колонки.Найти("СуммаНДСИсключенИзСтоимости") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СуммаНДСИсключенИзСтоимости", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	КонецЕсли;
	
	Построитель_ТаблицаСписания = Новый ПостроительЗапроса();
	Построитель_ТаблицаСписания.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаСписания); //ОписаниеИсточника_ТаблицаСписания
	//Построитель_ТаблицаСписания.ИсточникДанных = ОписаниеИсточника_ТаблицаСписания;
	Отбор = Построитель_ТаблицаСписания.Отбор;
	
	Если ВключитьВСтоимость Тогда
		Отбор.Добавить("ДействияНДСПокупки_ВключитьВСтоимость");
		Отбор["ДействияНДСПокупки_ВключитьВСтоимость"].Значение = Истина;
		Отбор["ДействияНДСПокупки_ВключитьВСтоимость"].Использование = Истина;
	Иначе
		Отбор.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости");
		Отбор["ДействияНДСПокупки_ИсключитьИзСтоимости"].Значение = Истина;
		Отбор["ДействияНДСПокупки_ИсключитьИзСтоимости"].Использование = Истина;
	КонецЕсли; 
	
	Построитель_ТаблицаСписания.Выполнить();
	ДанныеДляОбработки = Построитель_ТаблицаСписания.Результат.Выгрузить();
	Если ДанныеДляОбработки.Колонки.Найти("СуммаБезНДС") = Неопределено тогда	
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли; 
	
	Если ДанныеДляОбработки.Количество()>0 Тогда
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаТаблицы Из ДанныеДляОбработки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			ИначеЕсли СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС И Не СтрокаТаблицы.НДСЭтоЕНВД Тогда
				// Не отражать включение НДС в стоимость по ценностям, пришедшим без НДС.
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
			
		КонецЦикла; 
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ДанныеДляОбработки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
	КонецЕсли;
	
	Если ДанныеДляОбработки.Количество() = 0 Тогда
		//Включение НДС в стоимость по данному набору не требуется
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
		Если не ВключитьВСтоимость Тогда
			СтрокаОбрабатываемая.Количество = СтрокаОбрабатываемая.Количество*(-1);
			СтрокаОбрабатываемая.Стоимость = СтрокаОбрабатываемая.Стоимость*(-1);
			СтрокаОбрабатываемая.НДС = СтрокаОбрабатываемая.НДС*(-1);
		КонецЕсли; 
		СтрокаОбрабатываемая.СуммаБезНДС = СтрокаОбрабатываемая.Стоимость - СтрокаОбрабатываемая.НДС;
	КонецЦикла; 
	
	Если не СтруктураШапкиДокумента.Свойство("ПартионныйУчетБУ") Тогда
		Если не СтруктураШапкиДокумента.Свойство("БухгалтерскийУчетСпособОценкиМПЗ") Тогда
			ОшибкаВПолучении = Ложь;
			УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
			
			СтруктураШапкиДокумента.Вставить("БухгалтерскийУчетСпособОценкиМПЗ",?(ОшибкаВПолучении,Перечисления.СпособыОценки.ПоСредней, УчетнаяПолитика.СпособОценкиМПЗ));
		КонецЕсли; 
		
		ПартионныйУчетБУ = (СтруктураШапкиДокумента.БухгалтерскийУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО 
						или СтруктураШапкиДокумента.БухгалтерскийУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);
	
		СтруктураШапкиДокумента.Вставить("ПартионныйУчетБУ",ПартионныйУчетБУ);
	Иначе
		ПартионныйУчетБУ = СтруктураШапкиДокумента.ПартионныйУчетБУ;
	КонецЕсли;
	
	ОтражатьВНалоговомУчете = ?(ТаблицаСписания.Колонки.Найти("ОтражатьВНалоговомУчете") <> Неопределено, ТаблицаСписания.Найти(Истина, "ОтражатьВНалоговомУчете") <> Неопределено, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);
	Если (Не (СтруктураШапкиДокумента.Свойство("НалоговыйУчетСпособОценкиМПЗ") Или СтруктураШапкиДокумента.Свойство("ПартионныйУчетНУ")) И ОтражатьВНалоговомУчете)
		Или Не СтруктураШапкиДокумента.Свойство("СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость") 
		Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		
		СтруктураШапкиДокумента.Вставить("НалоговыйУчетСпособОценкиМПЗ",?(ОшибкаВПолучении,Перечисления.СпособыОценки.ПоСредней, УчетнаяПолитика.СпособОценкиМПЗ));
		СтруктураШапкиДокумента.Вставить("СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость",?(?(ОшибкаВПолучении, истина, НЕ ЗначениеЗаполнено(УчетнаяПолитика.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость)),Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ, УчетнаяПолитика.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость));
	КонецЕсли; 
	
	Если не СтруктураШапкиДокумента.Свойство("ПартионныйУчетНУ") Тогда
		Если ОтражатьВНалоговомУчете Тогда
			ПартионныйУчетНУ = (СтруктураШапкиДокумента.НалоговыйУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО 
						или СтруктураШапкиДокумента.НалоговыйУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);
		Иначе
			ПартионныйУчетНУ = Ложь;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("ПартионныйУчетНУ",ПартионныйУчетНУ);
	Иначе
		ПартионныйУчетНУ = СтруктураШапкиДокумента.ПартионныйУчетНУ;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	СписокОрганизаций = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделений(СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
	Запрос.УстановитьПараметр("СчетаФактуры", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура"), Истина));
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка), ВидГраницы.Исключая));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура.ДоговорКонтрагента, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НДСПредъявленныйОбороты.ДоговорКонтрагента
	|	КОНЕЦ КАК СчетФактураДоговорКонтрагента,
	|	НДСПредъявленныйОбороты.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|			,
	|			&КонецПериода,
	|			,
	|			Организация В (&Организация)
	|				И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
	|ГДЕ
	|	НДСПредъявленныйОбороты.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
	
	КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();
	Если ДанныеДляОбработки.Колонки.Найти("Поставщик") = Неопределено Тогда
		ДанныеДляОбработки.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	КонецЕсли;
	Если ДанныеДляОбработки.Колонки.Найти("СчетФактураДоговорКонтрагента") = Неопределено Тогда
		ДанныеДляОбработки.Колонки.Добавить("СчетФактураДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	КонецЕсли;
	Если ДанныеДляОбработки.Колонки.Найти("ДоговорКонтрагента") = Неопределено Тогда
		ДанныеДляОбработки.Колонки.Добавить("ДоговорКонтрагента",новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	КонецЕсли;
	
	ДанныеДляОбработки.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
	
	Для каждого СтрокаОбрабатываемая Из ДанныеДляОбработки Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОбрабатываемая.Поставщик) ИЛИ НЕ ЗначениеЗаполнено(СтрокаОбрабатываемая.СчетФактураДоговорКонтрагента) Тогда
			СтрокаКонтрагента = КонтрагентПоСчетуФактуре.Найти(СтрокаОбрабатываемая.СчетФактура,"СчетФактура");
			Если НЕ СтрокаКонтрагента = Неопределено Тогда
				СтрокаОбрабатываемая.Поставщик = СтрокаКонтрагента.Поставщик;
				СтрокаОбрабатываемая.СчетФактураДоговорКонтрагента = СтрокаКонтрагента.СчетФактураДоговорКонтрагента;
				СтрокаОбрабатываемая.ДоговорКонтрагента = СтрокаКонтрагента.ДоговорКонтрагента;
			КонецЕсли;	
			Если НЕ СтрокаОбрабатываемая.СчетФактура.Метаданные().Реквизиты.Найти("Контрагент") = Неопределено Тогда
				СтрокаОбрабатываемая.Поставщик = СтрокаОбрабатываемая.СчетФактура.Контрагент;
			КонецЕсли;
			Если НЕ СтрокаОбрабатываемая.СчетФактура.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") = Неопределено Тогда
				СтрокаОбрабатываемая.СчетФактураДоговорКонтрагента = СтрокаОбрабатываемая.СчетФактура.ДоговорКонтрагента;
			КонецЕсли;
		ИначеЕсли (НЕ ДанныеДляОбработки.Колонки.Найти("ВидЦенности") = Неопределено)
			И (НЕ УчетНДС.ВидыЦенностиНалоговыйАгентПоступление().Найти(СтрокаОбрабатываемая.ВидЦенности) = Неопределено)
			И ЗначениеЗаполнено(СтрокаОбрабатываемая.СчетФактураДоговорКонтрагента) Тогда
			СтрокаОбрабатываемая.ДоговорКонтрагента = СтрокаОбрабатываемая.СчетФактураДоговорКонтрагента;
		КонецЕсли;
	КонецЦикла;
	ДанныеДляОбработки.Колонки.Добавить("Событие");
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость,"Событие");
	
	Если ДанныеДляОбработки.Колонки.Найти("ВидДвижения") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ВидДвижения");
	КонецЕсли; 
	
	Если ДанныеДляОбработки.Колонки.Найти("ДатаОплаты") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ДатаОплаты");
	КонецЕсли; 

	ОсобыйПорядокОтражения_ст170НКРФ = (ВключитьВСтоимость и СтруктураШапкиДокумента.Дата >='20060101');
	
	Если ОсобыйПорядокОтражения_ст170НКРФ Тогда
		
		ТаблицаОплатНДС = ДанныеДляОбработки.СкопироватьКолонки();
		ТаблицаОплатНДС.Колонки.Добавить("ДокументРасчетов", Новый ОписаниеТипов(ТаблицаОплатНДС.Колонки.СчетФактура.ТипЗначения.Типы()));
		ТаблицаОплатНДС.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		Если ТаблицаОплатНДС.Колонки.Найти("СуммаБУ") = Неопределено Тогда
			ТаблицаОплатНДС.Колонки.Добавить("СуммаБУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		КонецЕсли;
		
		ДанныеДляОбработки.Колонки.Добавить("НДСкСписанию", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДСкСписанию", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		
		ДопКолонки = Новый Массив;
		ДопКолонки.Добавить("СуммаБезНДСкСписанию");
		ДопКолонки.Добавить("НДСкСписанию");
		ДопКолонки.Добавить("Стоимость");
		ДопКолонки.Добавить("Количество");
		
		// Особый порядок отражения в соответствии со п.3 статьи 170 НК РФ
		// по НДС, принятому к вычету на момент "включения в стоимость" 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",	СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СчетаФактуры",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура"), Истина));
		Запрос.УстановитьПараметр("ВидыЦенностей",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("ВидЦенности"), Истина));
		Запрос.УстановитьПараметр("СтавкиНДС",		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СтавкаНДС"), Истина));
		Запрос.УстановитьПараметр("Период",			Новый Граница(новый моментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка),ВидГраницы.Исключая));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС,
		|	НДСПредъявленныйОстатки.ДатаОплаты
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&Период,
		|			Организация = &Организация
		|				И СчетФактура В (&СчетаФактуры)
		|				И ВидЦенности В (&ВидыЦенностей)
		|				И СтавкаНДС В (&СтавкиНДС)) КАК НДСПредъявленныйОстатки
		|ГДЕ
		|	НДСПредъявленныйОстатки.НДСОстаток + НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОплаты
		|ИТОГИ ПО
		|	СчетФактура";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
		    ДанныеДляОбработки.ЗагрузитьКолонку(ДанныеДляОбработки.ВыгрузитьКолонку("СуммаБезНДС"),"СуммаБезНДСкСписанию");
		    ДанныеДляОбработки.ЗагрузитьКолонку(ДанныеДляОбработки.ВыгрузитьКолонку("НДС"),"НДСкСписанию");
			ДанныеДляОбработки.ЗаполнитьЗначения(0, "СуммаБезНДС,НДС");
		Иначе
			НДСнеПринятыйКВычету = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			СтруктураОтбора = Новый Структура("ВидЦенности, СтавкаНДС, СчетУчетаНДС"); 
			
			Для каждого ОбрабатываемаяСтрока Из ДанныеДляОбработки Цикл
				СтрокаОстаткаПоСФ = НДСнеПринятыйКВычету.Строки.Найти(ОбрабатываемаяСтрока.СчетФактура, "СчетФактура");
				Если СтрокаОстаткаПоСФ = Неопределено Тогда
					ОбрабатываемаяСтрока.СуммаБезНДСКСписанию	= ОбрабатываемаяСтрока.СуммаБезНДС;
					ОбрабатываемаяСтрока.НДСКСписанию			= ОбрабатываемаяСтрока.НДС;
					ОбрабатываемаяСтрока.СуммаБезНДС			= 0;
					ОбрабатываемаяСтрока.НДС					= 0;
				Иначе
					
					СуммаБезНДСКСписанию	= ОбрабатываемаяСтрока.СуммаБезНДС;
					НДСКСписанию			= ОбрабатываемаяСтрока.НДС;
					
					// Отбираем строки с фильтром по виду ценности, ставке НДС, счету учета НДС
					ЗаполнитьЗначенияСвойств(СтруктураОтбора,ОбрабатываемаяСтрока); 
					СтрокиПоОтбору			= СтрокаОстаткаПоСФ.Строки.НайтиСтроки(СтруктураОтбора);
					
					Для каждого СтрокаОстатка Из СтрокиПоОтбору Цикл
						
						СуммаБезНДС_ВСтоимость	= Мин(СтрокаОстатка.СуммаБезНДС,СуммаБезНДСКСписанию);
						НДС_ВСтоимость			= Мин(СтрокаОстатка.НДС,НДСКСписанию);
						
						Если ЗначениеЗаполнено(СтрокаОстатка.ДатаОплаты) Тогда
							НоваяСтрокаОплаты = ТаблицаОплатНДС.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаОплаты, ОбрабатываемаяСтрока);
							НоваяСтрокаОплаты.ДокументРасчетов = ОбрабатываемаяСтрока.СчетФактура;
							НоваяСтрокаОплаты.ДатаДокументаРасчетов = СтрокаОстатка.ДатаОплаты;
							НоваяСтрокаОплаты.ДоговорКонтрагента = СтрокаОстатка.ДоговорКонтрагента;
							НоваяСтрокаОплаты.СуммаБУ = СуммаБезНДС_ВСтоимость + НДС_ВСтоимость;
						КонецЕсли;
						
						СуммаБезНДСКСписанию	= СуммаБезНДСКСписанию - СуммаБезНДС_ВСтоимость;
						НДСКСписанию			= НДСКСписанию - НДС_ВСтоимость;
						
						СтрокаОстатка.СуммаБезНДС = СтрокаОстатка.СуммаБезНДС - СуммаБезНДС_ВСтоимость;
						СтрокаОстатка.НДС = СтрокаОстатка.НДС - НДС_ВСтоимость;
						
						Если СтрокаОстатка.СуммаБезНДС = 0 и СтрокаОстатка.НДС = 0 Тогда
							СтрокаОстаткаПоСФ.Строки.Удалить(СтрокаОстатка);
						КонецЕсли; 
						
						Если СуммаБезНДСКСписанию = 0 и НДСКСписанию = 0 Тогда
							Прервать;
						КонецЕсли; 
						
					КонецЦикла; 
					Если не (СуммаБезНДСКСписанию = 0 и НДСКСписанию = 0) Тогда
						ОбрабатываемаяСтрока.СуммаБезНДСКСписанию	= СуммаБезНДСКСписанию;
						ОбрабатываемаяСтрока.НДСКСписанию			= НДСКСписанию;
						
						ОбрабатываемаяСтрока.СуммаБезНДС			= ОбрабатываемаяСтрока.СуммаБезНДС - СуммаБезНДСКСписанию;
						ОбрабатываемаяСтрока.НДС					= ОбрабатываемаяСтрока.НДС - НДСКСписанию;
					КонецЕсли; 
					
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		РаспределитьОплатыПоТаблице(ДанныеДляОбработки, ТаблицаОплатНДС, Истина, ДопКолонки);
	Иначе
	КонецЕсли; 
	
	
	// Отразить в регистре НДСПредъявленный
	ТаблицаДвижений_НДСПредъявленный	= Движения.НДСПредъявленный.Выгрузить();
	ТаблицаДвижений_НДСПредъявленный.Очистить();
  	ДанныеДляОбработки.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвижений_НДСПредъявленный);
	
	//Зачистить таблицу от записей с пустыми суммами
	СтрокиКУдалению = ТаблицаДвижений_НДСПредъявленный.НайтиСтроки(Новый Структура("СуммаБезНДС,НДС", 0, 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвижений_НДСПредъявленный.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Если не ТаблицаДвижений_НДСПредъявленный.Количество() = 0 Тогда
		Движения.НДСПредъявленный.мПериод            = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мТаблицаДвижений   = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ДобавитьДвижение();
	КонецЕсли; 

	// Отразить в регистре НДСВключенныйВСтоимость
	ТаблицаДвижений_НДСВключенныйВСтоимость	= Движения.НДСВключенныйВСтоимость.Выгрузить();
	ТаблицаДвижений_НДСВключенныйВСтоимость.Очистить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвижений_НДСВключенныйВСтоимость);
	
	//Зачистить таблицу от записей с пустыми суммами
	СтрокиКУдалению = ТаблицаДвижений_НДСВключенныйВСтоимость.НайтиСтроки(Новый Структура("СуммаБезНДС,НДС", 0, 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвижений_НДСВключенныйВСтоимость.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Если не ТаблицаДвижений_НДСВключенныйВСтоимость.Количество() = 0 Тогда
		Движения.НДСВключенныйВСтоимость.мПериод            = СтруктураШапкиДокумента.Дата;
		Движения.НДСВключенныйВСтоимость.мТаблицаДвижений   = ТаблицаДвижений_НДСВключенныйВСтоимость;
		Движения.НДСВключенныйВСтоимость.ДобавитьДвижение();
	КонецЕсли;
	
	ДанныеДляОбработки.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	
	Если ОсобыйПорядокОтражения_ст170НКРФ
		и (не ДанныеДляОбработки.Итог("НДСКСписанию") = 0 или не ДанныеДляОбработки.Итог("СуммаБезНДСКСписанию") = 0)
		Тогда
		
		Если СтруктураШапкиДокумента.Дата >='20060530' Тогда
			//Отражение списания (восстановления) НДС в регистре "НДС начисленный"
			СтруктураПереименования = Новый Структура("СуммаБезНДС, НДС, Покупатель","СуммаБезНДСКСписанию", "НДСКСписанию", "Поставщик");
			
			ТаблицаДвижений_НДСНачисленный	= Движения.НДСНачисленный.Выгрузить();
			ТаблицаДвижений_НДСНачисленный.Очистить();
			УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСНачисленный, СтруктураПереименования);
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвижений_НДСНачисленный);
			УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСНачисленный, СтруктураПереименования, Истина);
			
			ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
			ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСВосстановлен, "ВидНачисления");
			ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС, "Событие");
			
			//Зачистить таблицу от записей с пустыми суммами
			СтрокиКУдалению = ТаблицаДвижений_НДСНачисленный.НайтиСтроки(Новый Структура("НДС", 0));
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаДвижений_НДСНачисленный.Удалить(СтрокаКУдалению);
			КонецЦикла; 
			
			Если не ТаблицаДвижений_НДСНачисленный.Количество() = 0 Тогда
				Движения.НДСНачисленный.мПериод            = СтруктураШапкиДокумента.Дата;
				Движения.НДСНачисленный.мТаблицаДвижений   = ТаблицаДвижений_НДСНачисленный;
				Движения.НДСНачисленный.ДобавитьДвижение();
			КонецЕсли;
		Иначе
			
			// Отразить в регистре НДСПредъявленный (в книге покупок)
			ТаблицаДвижений_НДСПредъявленный	= Движения.НДСПредъявленный.Выгрузить();
			ТаблицаДвижений_НДСПредъявленный.Очистить();
			
			//Отражение списания (восстановления) НДС в регистре "НДС начисленный"
			СтруктураПереименования = Новый Структура("СуммаБезНДС, НДС","СуммаБезНДСКСписанию", "НДСКСписанию");
			
			УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСПредъявленный, СтруктураПереименования);
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвижений_НДСПредъявленный);
			УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСПредъявленный, СтруктураПереименования, истина);
			
			ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
			
			//Зачистить таблицу от записей с пустыми суммами
			СтрокиКУдалению = ТаблицаДвижений_НДСПредъявленный.НайтиСтроки(Новый Структура("СуммаБезНДС,НДС", 0, 0));
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаДвижений_НДСПредъявленный.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
			ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСсписанНаРасходы,"Событие");
			
			Если не ТаблицаДвижений_НДСПредъявленный.Количество() = 0 Тогда
				Движения.НДСПредъявленный.мПериод            = СтруктураШапкиДокумента.Дата;
				Движения.НДСПредъявленный.мТаблицаДвижений   = ТаблицаДвижений_НДСПредъявленный;
				Движения.НДСПредъявленный.ДобавитьДвижение();
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли;
	
	КолонкиТаблицыСписания = ДанныеДляОбработки.Колонки;
	////////////////////////////////////////////////////////
	// Движения по НДС партии и по регистру бухгалтерии
	
	Если ВключитьВСтоимость Тогда
		Если ОтражатьПоПартиям Тогда
			МассивСтоимость = ДанныеДляОбработки.ВыгрузитьКолонку("Стоимость");
			МассивКоличество = ДанныеДляОбработки.ВыгрузитьКолонку("Количество");
			МассивНДС = ДанныеДляОбработки.ВыгрузитьКолонку("НДС");
		КонецЕсли;
		Для каждого СтрокаТаблицыВключения Из ДанныеДляОбработки Цикл
			
			СформироватьПроводкиПоВключениюИсключениюНДСИзСтоимости(СтруктураШапкиДокумента,ВключитьВСтоимость, СтрокаТаблицыВключения,КолонкиТаблицыСписания, НаборДвиженийХозрасчетный, Заголовок);
			
			Если ОтражатьПоПартиям Тогда
				СтрокаТаблицыВключения.Стоимость = СтрокаТаблицыВключения.Стоимость*(-1);
			    СтрокаТаблицыВключения.Количество = СтрокаТаблицыВключения.Количество*(-1);
			    СтрокаТаблицыВключения.НДС = СтрокаТаблицыВключения.НДС*(-1);
				Если ОсобыйПорядокОтражения_ст170НКРФ Тогда
				     СтрокаТаблицыВключения.НДС = СтрокаТаблицыВключения.НДС - СтрокаТаблицыВключения.НДСКСписанию;
				КонецЕсли;  
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОтражатьПоПартиям Тогда
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки,ТаблицаДвиженийПартии);
			
			ДанныеДляОбработки.ЗаполнитьЗначения(Истина, "НДСВключенВСтоимость");
			ДанныеДляОбработки.ЗагрузитьКолонку(МассивСтоимость,"Стоимость");
			ДанныеДляОбработки.ЗагрузитьКолонку(МассивКоличество,"Количество");
			ДанныеДляОбработки.ЗагрузитьКолонку(МассивНДС,"НДС");
		КонецЕсли;
		
		Если ОсобыйПорядокОтражения_ст170НКРФ 
			и не (ДанныеДляОбработки.Итог("НДСКСписанию") = 0 и ДанныеДляОбработки.Итог("СуммаБезНДСКСписанию") = 0) Тогда
			// Корректировка таблицы данных для обработки для последующего отражения в регистре партионного учета
			ДанныеДляОбработки_КоличествоЗаписей = ДанныеДляОбработки.Количество();
			Для Счетчик = 1 По ДанныеДляОбработки_КоличествоЗаписей Цикл
				ИндексСтроки = ДанныеДляОбработки_КоличествоЗаписей - Счетчик;
				СтрокаДанных = ДанныеДляОбработки[ИндексСтроки];
				Если не СтрокаДанных.НДСКСписанию = 0  
					или не СтрокаДанных.СуммаБезНДСКСписанию = 0 
					Тогда
					//Требуется корректировка. Списанная сумма отражается как доп. расходы, но без указания счета-фактуры.
					ДополнительнаяСтрока = ДанныеДляОбработки.Вставить(ИндексСтроки+1);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаДанных);
					ДополнительнаяСтрока.Стоимость = ДополнительнаяСтрока.СуммаБезНДСКСписанию + ДополнительнаяСтрока.НДСКСписанию;
					ДополнительнаяСтрока.СуммаБезНДС = ДополнительнаяСтрока.СуммаБезНДСКСписанию;
					ДополнительнаяСтрока.НДС = ДополнительнаяСтрока.НДСКСписанию;
					Если Не СтруктураШапкиДокумента.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВключатьВСтоимость Тогда
						ДополнительнаяСтрока.СуммаНДССписанНаРасходы = ДополнительнаяСтрока.НДСКСписанию;
					КонецЕсли;
					ДополнительнаяСтрока.СчетФактура = Неопределено;
					ДополнительнаяСтрока.Количество = 0;
					
					СтрокаДанных.Стоимость = СтрокаДанных.СуммаБезНДС + СтрокаДанных.НДС; 
					
				КонецЕсли; 
			КонецЦикла; 
			ДанныеДляОбработки.Колонки.Удалить(ДанныеДляОбработки.Колонки.СуммаБезНДСКСписанию);
			ДанныеДляОбработки.Колонки.Удалить(ДанныеДляОбработки.Колонки.НДСКСписанию);
			
			
			// Корректировка таблицы списания для последующего использования.
			СтрокиКУдалению = Новый Массив;
			
			ТаблицаСписания_КоличествоЗаписей = ТаблицаСписания.Количество();
			Для Счетчик = 1 По ТаблицаСписания_КоличествоЗаписей Цикл
				ИндексСтроки = ТаблицаСписания_КоличествоЗаписей - Счетчик;
				СтрокаДанных = ТаблицаСписания[ИндексСтроки];
				Если СтрокаДанных.ДействияНДСПокупки_ВключитьВСтоимость тогда
					СтрокиТаблицы_ДанныеДляОбработки = ДанныеДляОбработки.НайтиСтроки(Новый Структура("QuieryId", СтрокаДанных.QuieryId));
					Если не СтрокиТаблицы_ДанныеДляОбработки.Количество() = 0  Тогда
						СтрокиКУдалению.Добавить(СтрокаДанных);
						Для каждого СтрокаТаблицы_ДанныеДляОбработки Из СтрокиТаблицы_ДанныеДляОбработки Цикл
							НоваяСтрока = ТаблицаСписания.Вставить(ИндексСтроки+1);
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы_ДанныеДляОбработки); 
						КонецЦикла; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаСписания.Удалить(СтрокаКУдалению);
			КонецЦикла; 
			
		КонецЕсли; 
			
		Если ОтражатьПоПартиям Тогда
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки,ТаблицаДвиженийПартии);
		КонецЕсли;
	Иначе
		Если ОтражатьПоПартиям Тогда
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки,ТаблицаДвиженийПартии);
		КонецЕсли;
		Для каждого СтрокаТаблицыВключения Из ДанныеДляОбработки Цикл
			СформироватьПроводкиПоВключениюИсключениюНДСИзСтоимости(СтруктураШапкиДокумента,ВключитьВСтоимость, СтрокаТаблицыВключения,КолонкиТаблицыСписания, НаборДвиженийХозрасчетный, Заголовок);
		    СтрокаТаблицыВключения.Стоимость = СтрокаТаблицыВключения.Стоимость*(-1);
		    СтрокаТаблицыВключения.Количество = СтрокаТаблицыВключения.Количество*(-1);
		    СтрокаТаблицыВключения.НДС = СтрокаТаблицыВключения.НДС*(-1);
		КонецЦикла;
		Если ОтражатьПоПартиям Тогда
			ДанныеДляОбработки.ЗаполнитьЗначения(Ложь, "НДСВключенВСтоимость");
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки,ТаблицаДвиженийПартии);
		КонецЕсли;
	КонецЕсли; 
	
	Для каждого СтрокаСписания из ТаблицаСписания Цикл
		Если ?(ВключитьВСтоимость,СтрокаСписания.ДействияНДСПокупки_ВключитьВСтоимость,СтрокаСписания.ДействияНДСПокупки_ИсключитьИзСтоимости)
			И ЗначениеЗаполнено(СтрокаСписания.СчетФактура)
			Тогда
			СтрокаСписания.НДСВключенВСтоимость = ВключитьВСтоимость;
		КонецЕсли; 
		Если ВключитьВСтоимость И СтрокаСписания.ДействияНДСПокупки_ВключитьВСтоимость Тогда
			Если СтруктураШапкиДокумента.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ Тогда
				СтрокаСписания.СуммаНДСВключенВСтоимость = СтрокаСписания.НДС - СтрокаСписания.СуммаНДССписанНаРасходы;
			ИначеЕсли СтруктураШапкиДокумента.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВключатьВСтоимость Тогда
				СтрокаСписания.СуммаНДСВключенВСтоимость = СтрокаСписания.НДС;
			ИначеЕсли СтруктураШапкиДокумента.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.СписыватьНаРасходы Тогда
				СтрокаСписания.СуммаНДССписанНаРасходы = СтрокаСписания.НДС;
			КонецЕсли;
		ИначеЕсли Не ВключитьВСтоимость И СтрокаСписания.ДействияНДСПокупки_ИсключитьИзСтоимости Тогда
			СтрокаСписания.СуммаНДСИсключенИзСтоимости = СтрокаСписания.НДС - СтрокаСписания.СуммаНДССписанНаРасходы;
		КонецЕсли;
	КонецЦикла; 
	
	// Движения по НДС партии и по регистру бухгалтерии
	////////////////////////////////////////////////////////
	
	Если Не ЕстьКолонкаКоличество Тогда
		ДанныеДляОбработки.Колонки.Удалить("Количество");
	КонецЕсли;
	Если Не ЕстьКолонкаQuieryId Тогда
		ДанныеДляОбработки.Колонки.Удалить("QuieryId");
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоПередачеТоваровИзОптаВРозницуЕНВД()

Процедура СформироватьПроводкиПоВключениюИсключениюНДСИзСтоимости(СтруктураШапкиДокумента,ВключитьВСтоимость = Истина, СтрокаСписания, КолонкиСтрокиСписания, НаборДвиженийХозрасчетный, Заголовок, ЭтоВозврат = Ложь)
	
	Если ВключитьВСтоимость Тогда
		ЕстьКолонкаНДСКСписанию = (Не КолонкиСтрокиСписания.Найти("НДСКСписанию") = Неопределено);
		
		ДляБУСписыватьНаРаcходы = (СтруктураШапкиДокумента.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.СписыватьНаРасходы);
		
		ДляБУСписыватьНаРаcходыЕслиНДСПринятКВычету = (ДляБУСписыватьНаРаcходы 
								Или (СтруктураШапкиДокумента.Дата >='20060101' и СтруктураШапкиДокумента.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ));
		ДляНУСписыватьНаРаcходыЕслиНДСПринятКВычету = (СтруктураШапкиДокумента.Дата >='20060101');
	КонецЕсли; 
	
	Если СтрокаСписания.НДС = 0 и (не (ВключитьВСтоимость и ЕстьКолонкаНДСКСписанию и не СтрокаСписания.НДСКСписанию = 0)) тогда
		//Формирование проводки не требуется
		Возврат;
	КонецЕсли;
	
	СообщениеОбОшибке = "БУ: Не хватает данных для формирования проводки по "+?(ВключитьВСтоимость,"включению НДС в стоимость МПЗ","исключению НДС из стоимости МПЗ:");
	НедостаточноДанных = Ложь;
	ИспользоватьКорСчетСписанияПриСписанииНаРасходы = Ложь;
	ИспользоватьКорСчетСписанияПриСписанииНаРасходыНУ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СтрокаСписания.СчетФактура) тогда
		// Строки без указания счета-фактуры (основания) не отрабатываются в специальных операциях по НДС
		Возврат;
	Иначе
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " счет-фактура <"+Строка(СтрокаСписания.СчетФактура)+">";
	
		Если (Не ЗначениеЗаполнено(СтрокаСписания.СчетУчетаНДС)) тогда
			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете учета НДС";
			НедостаточноДанных = Истина;
		КонецЕсли;
		
		// Для списания на расходы необходим "СчетСписанияНДС" в строке т.ч. 
		Если ВключитьВСтоимость 
			И (ДляБУСписыватьНаРаcходы // НДС списывается на отдельный счет
			Или (ДляБУСписыватьНаРаcходыЕслиНДСПринятКВычету И (ЕстьКолонкаНДСКСписанию И Не СтрокаСписания.НДСКСписанию = 0))) // Есть НДС к списанию на отдельный счет
			И ?(КолонкиСтрокиСписания.Найти("СчетСписанияНДС") = Неопределено, Истина, Не ЗначениеЗаполнено(СтрокаСписания.СчетСписанияНДС))
		 	Тогда
			Если КолонкиСтрокиСписания.Найти("СчетСписанияНДС") = Неопределено Тогда
			    ИспользоватьКорСчетСписанияПриСписанииНаРасходы = Истина;
			Иначе
				СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете списания НДС (при отнесении на расходы)";
				НедостаточноДанных = Истина;
			КонецЕсли; 
		КонецЕсли;
		
		Если ВключитьВСтоимость
			И ДляНУСписыватьНаРаcходыЕслиНДСПринятКВычету
			И (ЕстьКолонкаНДСКСписанию И Не СтрокаСписания.НДСКСписанию = 0)
			И ?(КолонкиСтрокиСписания.Найти("СчетСписанияНДС") = Неопределено, Истина, Не ЗначениеЗаполнено(СтрокаСписания.СчетСписанияНДС))
		 	Тогда
			Если КолонкиСтрокиСписания.Найти("СчетСписанияНДС") = Неопределено Тогда
			    ИспользоватьКорСчетСписанияПриСписанииНаРасходыНУ = Истина;
			Иначе
				СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете списания НДС (при отнесении на расходы в налоговом учете)";
				НедостаточноДанных = Истина;
			КонецЕсли; 
		КонецЕсли;
		
		// Для включения в стоимость (исключения из стоимости) необходим "КорСчетСписания" в строке т.ч. 
		Если ((ВключитьВСтоимость 
			и не ДляБУСписыватьНаРаcходы // НДС списывается на отдельный счет
			и не (ДляБУСписыватьНаРаcходыЕслиНДСПринятКВычету и СтрокаСписания.НДС = 0)) // НДС только к списанию на отдельный счет
			или не ВключитьВСтоимость или ИспользоватьКорСчетСписанияПриСписанииНаРасходы) 
			и ?(КолонкиСтрокиСписания.Найти("КорСчетСписания") = неопределено,Истина,НЕ ЗначениеЗаполнено(СтрокаСписания.КорСчетСписания))
		 	Тогда
			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете отнесения себестоимости ТМЦ";
			НедостаточноДанных = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьПартияВСтрокеСписания = КолонкиСтрокиСписания.Найти("Партия") <> Неопределено;
	
	Если НедостаточноДанных Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке, , Заголовок, СтатусСообщения.Внимание, Ложь);
	Иначе
		
		ПартионныйУчет = ?(СтруктураШапкиДокумента.Свойство("ПартионныйУчет"), СтруктураШапкиДокумента.ПартионныйУчет, Истина);

		// отразим факт включения НДС в стоимость (исключения из стоимости) соответствующей проводкой 
		Если (не ВключитьВСтоимость = ЭтоВозврат) Тогда

			Если ВключитьВСтоимость тогда
				Если ДляБУСписыватьНаРаcходы тогда
				    СуммаКВключениюВСтоимость = 0;
					СуммаКСписанию = СтрокаСписания.НДС + ?(ЕстьКолонкаНДСКСписанию,СтрокаСписания.НДСКСписанию, 0);
				ИначеЕсли ДляБУСписыватьНаРаcходыЕслиНДСПринятКВычету тогда
					СуммаКВключениюВСтоимость = СтрокаСписания.НДС;
					СуммаКСписанию = ?(ЕстьКолонкаНДСКСписанию,СтрокаСписания.НДСКСписанию, 0);
				Иначе
				    СуммаКВключениюВСтоимость = СтрокаСписания.НДС + ?(ЕстьКолонкаНДСКСписанию,СтрокаСписания.НДСКСписанию, 0);
					СуммаКСписанию = 0;
				КонецЕсли;
			Иначе
				СуммаКВключениюВСтоимость = СтрокаСписания.НДС;
				СуммаКСписанию = 0;
			КонецЕсли; 
			
			Если не СуммаКВключениюВСтоимость = 0 Тогда
				
				МассивКоррСубконто = Новый Массив(3);
				Для НомерСубконто = 1 По 3 Цикл
					Если Не КолонкиСтрокиСписания.Найти("КорСубконтоСписания" + НомерСубконто) = Неопределено Тогда
						МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписания" + НомерСубконто];
					КонецЕсли;
				КонецЦикла;
				
				// проводка, отражающая включение НДС в стоимость
				СтрокаСписанияПроводка = НаборДвиженийХозрасчетный.Добавить();
				СтрокаСписанияПроводка.Период       = СтруктураШапкиДокумента.Дата;
				СтрокаСписанияПроводка.Организация  = СтрокаСписания.Организация;
				СтрокаСписанияПроводка.СчетДт = СтрокаСписания.КорСчетСписания; 

				Если ПартионныйУчет И ЕстьПартияВСтрокеСписания И УправлениеЗапасамиПартионныйУчет.НаСчетеВедетсяПартионныйУчет(СтрокаСписанияПроводка.СчетДт) 
					И Не СтрокаСписания.ПартияОтсутствуетВБУ Тогда
					СтрокаСписанияПроводка.СубконтоДт.Партии = СтрокаСписания.Партия;
				КонецЕсли;
				
				Для Каждого ВидСубконто Из СтрокаСписанияПроводка.СчетДт.ВидыСубконто Цикл
					Если ЗначениеЗаполнено(МассивКоррСубконто[0]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[0])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[0]);
					ИначеЕсли ЗначениеЗаполнено(МассивКоррСубконто[1]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[1])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[1]);
					ИначеЕсли ЗначениеЗаполнено(МассивКоррСубконто[2]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[2])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[2]);
					КонецЕсли;
				КонецЦикла;
				
				СтрокаСписанияПроводка.СчетКт = СтрокаСписания.СчетУчетаНДС; // 19.хх
				БухгалтерскийУчет.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "СФПолученные", СтрокаСписания.СчетФактура);

				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					СтрокаСписанияПроводка, СтрокаСписания.КорПодразделениеОрганизации, СтрокаСписания.КорПодразделениеОрганизации);
				
				СтрокаСписанияПроводка.Содержание = ?(ЭтоВозврат,"Сторно: ","")+"НДС включен в стоимость МПЗ";
				СтрокаСписанияПроводка.Сумма        = СуммаКВключениюВСтоимость;
				
				Если ДляНУСписыватьНаРаcходыЕслиНДСПринятКВычету 
					И Не ДляБУСписыватьНаРаcходыЕслиНДСПринятКВычету Тогда
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(0, 0, СтрокаСписания.НДСКСписанию, 0, 0, 0, СтрокаСписанияПроводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Не СуммаКСписанию = 0 Тогда
				Если ИспользоватьКорСчетСписанияПриСписанииНаРасходы Тогда
				    СчетСписания = СтрокаСписания.КорСчетСписания;
					МассивКоррСубконто = новый Массив(3);
					Для НомерСубконто=1 По 3 Цикл
						Если не КолонкиСтрокиСписания.Найти("КорСубконтоСписания"+НомерСубконто)= Неопределено Тогда
							МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписания"+НомерСубконто];
						КонецЕсли;
					КонецЦикла;
				Иначе	
				    СчетСписания = СтрокаСписания.СчетСписанияНДС;
					МассивКоррСубконто = новый Массив(3);
					Для НомерСубконто=1 По 3 Цикл
						Если не КолонкиСтрокиСписания.Найти("СубконтоСписанияНДС"+НомерСубконто)= Неопределено Тогда
							МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["СубконтоСписанияНДС"+НомерСубконто];
						КонецЕсли;
					КонецЦикла;
				КонецЕсли; 
				
				// проводка, отражающая списание НДС на расходы
				СтрокаСписанияПроводка = НаборДвиженийХозрасчетный.Добавить();
				СтрокаСписанияПроводка.Период       = СтруктураШапкиДокумента.Дата;
				СтрокаСписанияПроводка.Организация  = СтрокаСписания.Организация;
				СтрокаСписанияПроводка.СчетДт 		= СчетСписания; 
				
				Если ПартионныйУчет И ЕстьПартияВСтрокеСписания И УправлениеЗапасамиПартионныйУчет.НаСчетеВедетсяПартионныйУчет(СтрокаСписанияПроводка.СчетДт) 
					И Не СтрокаСписания.ПартияОтсутствуетВБУ Тогда
					СтрокаСписанияПроводка.СубконтоДт.Партии = СтрокаСписания.Партия;
				КонецЕсли;
				
				Для Каждого ВидСубконто Из СтрокаСписанияПроводка.СчетДт.ВидыСубконто Цикл
					Если ЗначениеЗаполнено(МассивКоррСубконто[0]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[0])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[0]);
					ИначеЕсли ЗначениеЗаполнено(МассивКоррСубконто[1]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[1])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[1]);
					ИначеЕсли ЗначениеЗаполнено(МассивКоррСубконто[2]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[2])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[2]);
					КонецЕсли;
				КонецЦикла;
				
				СтрокаСписанияПроводка.СчетКт = СтрокаСписания.СчетУчетаНДС; // 19.хх
				БухгалтерскийУчет.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "СФПолученные", СтрокаСписания.СчетФактура);

				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					СтрокаСписанияПроводка, СтрокаСписания.КорПодразделениеОрганизации, СтрокаСписания.КорПодразделениеОрганизации);
				
				СтрокаСписанияПроводка.Содержание = ?(ЭтоВозврат,"Сторно: ","")+"НДС списан на расходы";
				СтрокаСписанияПроводка.Сумма        = СуммаКСписанию;
				
				Если ДляНУСписыватьНаРаcходыЕслиНДСПринятКВычету 
					И ДляБУСписыватьНаРаcходы Тогда
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(0, 0, СтрокаСписания.НДС, 0, 0, 0, СтрокаСписанияПроводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
				КонецЕсли;
				
			КонецЕсли; 
				
			Если СтрокаСписания.НДС <> 0 
				И ДляНУСписыватьНаРаcходыЕслиНДСПринятКВычету 
				И ДляБУСписыватьНаРаcходы Тогда
				
				МассивКоррСубконто = Новый Массив(3);
				Для НомерСубконто = 1 По 3 Цикл
					Если Не КолонкиСтрокиСписания.Найти("КорСубконтоСписания" + НомерСубконто) = Неопределено Тогда
						МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписания" + НомерСубконто];
					КонецЕсли;
				КонецЦикла;
				
				// проводка, отражающая включение НДС в стоимость в НУ
				СтрокаСписанияПроводка = НаборДвиженийХозрасчетный.Добавить();
				СтрокаСписанияПроводка.Период       = СтруктураШапкиДокумента.Дата;
				СтрокаСписанияПроводка.Организация  = СтрокаСписания.Организация;
				СтрокаСписанияПроводка.СчетДт = СтрокаСписания.КорСчетСписания; 

				Если ПартионныйУчет И ЕстьПартияВСтрокеСписания И УправлениеЗапасамиПартионныйУчет.НаСчетеВедетсяПартионныйУчет(СтрокаСписанияПроводка.СчетДт) 
					И Не СтрокаСписания.ПартияОтсутствуетВБУ Тогда
					СтрокаСписанияПроводка.СубконтоДт.Партии = СтрокаСписания.Партия;
				КонецЕсли;
				
				Для Каждого ВидСубконто Из СтрокаСписанияПроводка.СчетДт.ВидыСубконто Цикл
					Если ЗначениеЗаполнено(МассивКоррСубконто[0]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[0])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[0]);
					ИначеЕсли ЗначениеЗаполнено(МассивКоррСубконто[1]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[1])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[1]);
					ИначеЕсли ЗначениеЗаполнено(МассивКоррСубконто[2]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[2])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[2]);
					КонецЕсли;
				КонецЦикла;
				
				СтрокаСписанияПроводка.СчетКт = СтрокаСписания.СчетУчетаНДС; // 19.хх
				БухгалтерскийУчет.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "СФПолученные", СтрокаСписания.СчетФактура);

				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					СтрокаСписанияПроводка, СтрокаСписания.КорПодразделениеОрганизации, СтрокаСписания.КорПодразделениеОрганизации);
				
				СтрокаСписанияПроводка.Содержание = ?(ЭтоВозврат,"Сторно: ","")+"НДС включен в стоимость МПЗ";
				СтрокаСписанияПроводка.Сумма        = 0;
				
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаСписания.НДС, 0, - СтрокаСписания.НДС, 0, 0, 0, СтрокаСписанияПроводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
				
			КонецЕсли;
				
			Если (ЕстьКолонкаНДСКСписанию И Не СтрокаСписания.НДСКСписанию = 0) 
				И ДляНУСписыватьНаРаcходыЕслиНДСПринятКВычету 
				И Не ДляБУСписыватьНаРаcходыЕслиНДСПринятКВычету Тогда
					
				// Если НДС в НУ списывается иначе чем в БУ, требуется отразить соответствующие проводки и разницы
				Если ИспользоватьКорСчетСписанияПриСписанииНаРасходыНУ Тогда
				    СчетСписанияНУ = СтрокаСписания.КорСчетСписания;
					МассивКоррСубконто = новый Массив(3);
					Для НомерСубконто=1 По 3 Цикл
						Если не КолонкиСтрокиСписания.Найти("КорСубконтоСписания"+НомерСубконто)= Неопределено Тогда
							МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписания"+НомерСубконто];
						КонецЕсли;
					КонецЦикла;
				Иначе	
				    СчетСписанияНУ = СтрокаСписания.СчетСписанияНДС;
					МассивКоррСубконто = новый Массив(3);
					Для НомерСубконто=1 По 3 Цикл
						Если не КолонкиСтрокиСписания.Найти("СубконтоСписанияНДС"+НомерСубконто)= Неопределено Тогда
							МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["СубконтоСписанияНДС"+НомерСубконто];
						КонецЕсли;
					КонецЦикла;
				КонецЕсли; 
				
				// проводка, отражающая списание НДС на расходы в НУ
				СтрокаСписанияПроводка = НаборДвиженийХозрасчетный.Добавить();
				СтрокаСписанияПроводка.Период       = СтруктураШапкиДокумента.Дата;
				СтрокаСписанияПроводка.Организация  = СтрокаСписания.Организация;
				СтрокаСписанияПроводка.СчетДт 		= СчетСписанияНУ; 
				
				Если ПартионныйУчет И ЕстьПартияВСтрокеСписания И УправлениеЗапасамиПартионныйУчет.НаСчетеВедетсяПартионныйУчет(СтрокаСписанияПроводка.СчетДт) 
					И Не СтрокаСписания.ПартияОтсутствуетВБУ Тогда
					СтрокаСписанияПроводка.СубконтоДт.Партии = СтрокаСписания.Партия;
				КонецЕсли;
				
				Для Каждого ВидСубконто Из СтрокаСписанияПроводка.СчетДт.ВидыСубконто Цикл
					Если ЗначениеЗаполнено(МассивКоррСубконто[0]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[0])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[0]);
					ИначеЕсли ЗначениеЗаполнено(МассивКоррСубконто[1]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[1])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[1]);
					ИначеЕсли ЗначениеЗаполнено(МассивКоррСубконто[2]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[2])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[2]);
					КонецЕсли;
				КонецЦикла;
				
				СтрокаСписанияПроводка.СчетКт = СтрокаСписания.СчетУчетаНДС; // 19.хх
				БухгалтерскийУчет.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "СФПолученные", СтрокаСписания.СчетФактура);

				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					СтрокаСписанияПроводка, СтрокаСписания.КорПодразделениеОрганизации, СтрокаСписания.КорПодразделениеОрганизации);
																				
				СтрокаСписанияПроводка.Содержание = ?(ЭтоВозврат,"Сторно: ","") + "НДС списан на расходы";
				СтрокаСписанияПроводка.Сумма      = 0;
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаСписания.НДСКСписанию, 0, - СтрокаСписания.НДСКСписанию, 0, 0, 0, СтрокаСписанияПроводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
					
			КонецЕсли;
				
		ИначеЕсли (ВключитьВСтоимость =  ЭтоВозврат) тогда

			МассивКоррСубконто = новый Массив(3);
			Для НомерСубконто=1 По 3 Цикл
				Если не КолонкиСтрокиСписания.Найти("КорСубконтоСписания"+НомерСубконто)= Неопределено Тогда
					МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписания"+НомерСубконто];
				КонецЕсли;
			КонецЦикла;
			// обратная проводка, отражающая исключение НДС из стоимости при
			// передаче из розницы ЕНВД в опт

			СтрокаСписанияПроводка = НаборДвиженийХозрасчетный.Добавить();
			СтрокаСписанияПроводка.Период       = СтруктураШапкиДокумента.Дата;
			СтрокаСписанияПроводка.Организация  = СтрокаСписания.Организация;
			СтрокаСписанияПроводка.СчетДт = СтрокаСписания.КорСчетСписания; 
			
			Если ПартионныйУчет И ЕстьПартияВСтрокеСписания И УправлениеЗапасамиПартионныйУчет.НаСчетеВедетсяПартионныйУчет(СтрокаСписанияПроводка.СчетДт) 
				И Не СтрокаСписания.ПартияОтсутствуетВБУ Тогда
				СтрокаСписанияПроводка.СубконтоДт.Партии = СтрокаСписания.Партия;
			КонецЕсли;
			
			Для Каждого ВидСубконто Из СтрокаСписанияПроводка.СчетДт.ВидыСубконто Цикл
				Если ЗначениеЗаполнено(МассивКоррСубконто[0]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[0])) Тогда
					СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[0]);
				ИначеЕсли ЗначениеЗаполнено(МассивКоррСубконто[1]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[1])) Тогда
					СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[1]);
				ИначеЕсли ЗначениеЗаполнено(МассивКоррСубконто[2]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[2])) Тогда
					СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[2]);
				КонецЕсли;
			КонецЦикла;
			
			СтрокаСписанияПроводка.СчетКт = СтрокаСписания.СчетУчетаНДС; // 19.хх
			БухгалтерскийУчет.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "СФПолученные", СтрокаСписания.СчетФактура);

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				СтрокаСписанияПроводка, СтрокаСписания.КорПодразделениеОрганизации, СтрокаСписания.КорПодразделениеОрганизации);
			
			СтрокаСписанияПроводка.Содержание = ?(ЭтоВозврат,"Сторно: ","")+"НДС исключен из стоимости МПЗ";
			СтрокаСписанияПроводка.Сумма        = СтрокаСписания.НДС;

		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

//  ОТРАЖЕНИЕ ВКЛЮЧЕНИЯ И ИСКЛЮЧЕНИЯ НДС ИЗ СТОИМОСТИ ПРИ ПЕРЕМЕЩЕНИИ ИЛИ СПИСАНИИ ПАРТИИ ТОВАРОВ
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//  ОТРАЖЕНИЕ Предположения ставки 0% при реализации

Процедура ОтразитьПредположениеСтавки0(СтруктураШапкиДокумента, ТаблицаСписания, ТаблицаДвиженийПартии, НаборДвиженийХозрасчетный,Заголовок, Движения) Экспорт

	Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь и УчетнаяПолитика.УпрощенныйУчетНДС));
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДокумента = "РеализацияТоваровУслуг" 
		И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		Если СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке 
			И ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			Возврат;
		ИначеЕсли Не СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке 
			И ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	Построитель_ТаблицаСписания = Новый ПостроительЗапроса();
	ОписаниеИсточника_ТаблицаСписания = Новый ОписаниеИсточникаДанных(ТаблицаСписания);
	Построитель_ТаблицаСписания.ИсточникДанных = ОписаниеИсточника_ТаблицаСписания;
	Отбор = Построитель_ТаблицаСписания.Отбор;
	
	Отбор.Добавить("ДействияНДСПокупки_ПредположениеСтавки0");
	Отбор["ДействияНДСПокупки_ПредположениеСтавки0"].Значение = Истина;
	Отбор["ДействияНДСПокупки_ПредположениеСтавки0"].Использование = Истина;
	
	Построитель_ТаблицаСписания.Выполнить();
	ДанныеДляОбработки = Построитель_ТаблицаСписания.Результат.Выгрузить();
	Если ДанныеДляОбработки.Колонки.Найти("СуммаБезНДС") = Неопределено тогда	
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли; 
	
	Если ДанныеДляОбработки.Количество()>0 Тогда
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаТаблицы Из ДанныеДляОбработки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ДанныеДляОбработки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
	КонецЕсли;
	
	Если ДанныеДляОбработки.Количество()>0 Тогда
		Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
			СтрокаОбрабатываемая.СуммаБезНДС = СтрокаОбрабатываемая.Стоимость - СтрокаОбрабатываемая.НДС;
		КонецЦикла; 
	КонецЕсли;
	
	Если ДанныеДляОбработки.Количество() = 0 Тогда
		//Включение НДС в стоимость по данному набору не требуется
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаФактуры",       ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура")));
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|		,
	|		,
	|		,
	|		Организация = &Организация
	|		    И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
	|ГДЕ
	|	НДСПредъявленныйОбороты.Поставщик <> &ПустойКонтрагент";
	
	КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();
	ДанныеДляОбработки.Колонки.Добавить("Поставщик");
	Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
		СтрокаКонтрагента = КонтрагентПоСчетуФактуре.Найти(СтрокаОбрабатываемая.СчетФактура,"СчетФактура");
		Если не СтрокаКонтрагента = Неопределено Тогда
		    СтрокаОбрабатываемая.Поставщик = СтрокаКонтрагента.Поставщик;
		КонецЕсли; 
	КонецЦикла;
	
	ДанныеДляОбработки.Колонки.Добавить("Событие");
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0,"Событие");
	
	Если ДанныеДляОбработки.Колонки.Найти("ДокументОтгрузки") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ДокументОтгрузки");
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" Тогда
		ДанныеДляОбработки.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка,"ДокументОтгрузки");
	Иначе
		ДанныеДляОбработки.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"ДокументОтгрузки");
	КонецЕсли; 
	
	Если ДанныеДляОбработки.Колонки.Найти("ВидДвижения") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ВидДвижения");
	КонецЕсли; 
	
	ДанныеДляОбработки.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	// Отразить в регистре НДСПредъявленныйРеализация0
	ТаблицаДвижений_НДСПредъявленныйРеализация0	= Движения.НДСПредъявленныйРеализация0.Выгрузить();
	ТаблицаДвижений_НДСПредъявленныйРеализация0.Очистить();
	
	Если ДанныеДляОбработки.Колонки.Найти("Состояние") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("Состояние");
	КонецЕсли; 
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение,"Состояние");
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвижений_НДСПредъявленныйРеализация0);
	
	Движения.НДСПредъявленныйРеализация0.мПериод            = СтруктураШапкиДокумента.Дата;
	Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений   = ТаблицаДвижений_НДСПредъявленныйРеализация0;
	Движения.НДСПредъявленныйРеализация0.ДобавитьДвижение();
	
	//КолонкиТаблицыСписания = ТаблицаСписания.Колонки;
	////////////////////////////////////////////////////////
	// Движения по НДС партии и по регистру бухгалтерии

	Для каждого СтрокаСписания Из ДанныеДляОбработки Цикл
		СформироватьПроводкиПоПредположениюСтавки0(СтруктураШапкиДокумента,СтрокаСписания, НаборДвиженийХозрасчетный,Заголовок);
	КонецЦикла; //Для каждого Строка Из ТаблицаСписания Цикл
	// Движения по НДС партии и по регистру бухгалтерии
	////////////////////////////////////////////////////////
	
КонецПроцедуры // ОтразитьПредположениеСтавки0()

Процедура СформироватьПроводкиПоПредположениюСтавки0(СтруктураШапкиДокумента,СтрокаДвижения, НаборДвиженийХозрасчетный,Заголовок)
	Если НЕ ЗначениеЗаполнено(СтрокаДвижения.НДС) тогда
		//Формирование проводки не требуется
		Возврат;
	ИначеЕсли (НЕ ЗначениеЗаполнено(СтрокаДвижения.СчетУчетаНДС))
	 Тогда
		// Недостаточно данных для формирования проводки по данной строке
		ОбщегоНазначения.СообщитьОбОшибке("Не хватает данных для формирования проводки по отнесению НДС на счет учета НДС по товарам реализованным по ставке 0% (экспорт).",, Заголовок,СтатусСообщения.Внимание, Ложь);
		Возврат;
	КонецЕсли;

	// отразим факт включения НДС в стоимость соответствующей проводкой 
	СтрокаДвиженияПроводка = НаборДвиженийХозрасчетный.Добавить();
	
	// проводка, отражающая включение НДС в стоимость
	СтрокаДвиженияПроводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0; 
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Контрагенты", СтрокаДвижения.Поставщик);
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "СФПолученные", СтрокаДвижения.СчетФактура);
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "ДокументыРеализации", СтрокаДвижения.ДокументОтгрузки);

	СтрокаДвиженияПроводка.СчетКт = СтрокаДвижения.СчетУчетаНДС; // 19.хх
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "Контрагенты", СтрокаДвижения.Поставщик);
	БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "СФПолученные", СтрокаДвижения.СчетФактура);

	СтрокаДвиженияПроводка.Содержание = "В связи с применением НДС 0% по реализации";
	СтрокаДвиженияПроводка.Сумма        = СтрокаДвижения.НДС;

	СтрокаДвиженияПроводка.Период       = СтруктураШапкиДокумента.Дата;
	СтрокаДвиженияПроводка.Организация  = СтрокаДвижения.Организация;
	
КонецПроцедуры

//  ОТРАЖЕНИЕ Предположения ставки 0% при реализации
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//  ОТРАЖЕНИЯ ДВИЖЕНИЙ СВЯЗАННЫХ С ОБЪЕКТАМИ СТРОИТЕЛЬСТВА, ОС И НМА

Процедура СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, ТаблицаСписания, Движения, Отказ) Экспорт
	
	Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь и УчетнаяПолитика.УпрощенныйУчетНДС));
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений_НДСпоОСиНМА = Неопределено;
	
	СчетаУчетаОС = УчетНДС.ОпределитьСчетаУчетаЦенностей("ОС", СтруктураШапкиДокумента.Дата);
	СчетаУчетаОборудования = УчетНДС.ОпределитьСчетаУчетаЦенностей("Оборудование", СтруктураШапкиДокумента.Дата);
	
	Для Каждого СтрокаСписания Из ТаблицаСписания Цикл
		Если СчетаУчетаОС.НайтиПоЗначению(СтрокаСписания.СчетУчета) = Неопределено 
			И СчетаУчетаОборудования.НайтиПоЗначению(СтрокаСписания.СчетУчета) = Неопределено Тогда
			// Оставляем строки только по ОС
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаСписания.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаДвижений_НДСпоОСиНМА = Неопределено Тогда
			ТаблицаДвижений_НДСпоОСиНМА	= Движения.НДСпоОСиНМА.Выгрузить();
			ТаблицаДвижений_НДСпоОСиНМА.Очистить();
		КонецЕсли; 
				
		СтрокаДвиженияОС = ТаблицаДвижений_НДСпоОСиНМА.Добавить();

		СтрокаДвиженияОС.Организация	= СтруктураШапкиДокумента.Организация;
		СтрокаДвиженияОС.ВидЦенности	= СтрокаСписания.ВидЦенности;
		СтрокаДвиженияОС.СчетФактура	= СтрокаСписания.СчетФактура;
		СтрокаДвиженияОС.СтавкаНДС		= СтрокаСписания.СтавкаНДС;
		СтрокаДвиженияОС.СчетУчетаНДС	= СтрокаСписания.СчетУчетаНДС;
		СтрокаДвиженияОС.НДСВключенВСтоимость = СтрокаСписания.НДСВключенВСтоимость;
		СтрокаДвиженияОС.Состояние		= Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОС;
		СтрокаДвиженияОС.Объект 		= СтрокаСписания.Номенклатура;
		
		Множитель = ?(СтруктураШапкиДокумента.ВидДокумента = "ПринятиеКУчетуОС" или СтрокаСписания.ВидДвижения = ВидДвиженияНакопления.Приход,1,-1);
		СтрокаДвиженияОС.СуммаБезНДС 	= (СтрокаСписания.Стоимость - СтрокаСписания.НДС)*Множитель;
		СтрокаДвиженияОС.НДС         	= СтрокаСписания.НДС*Множитель;
		
		СтрокаДвиженияОС.ДатаСобытия	= СтруктураШапкиДокумента.Дата;
		
		Если (СчетаУчетаОборудования.НайтиПоЗначению(СтрокаСписания.СчетУчета) <> Неопределено 
				Или ТипЗнч(СтрокаСписания.СчетФактура) = Тип("ДокументСсылка.ПоступлениеДопРасходов"))
			И СтрокаСписания.Партия.Дата >= '20060101' Тогда
			СтрокаДвиженияОС.НеВлияетНаВычет = Истина;
		КонецЕсли;		
		
		СтрокаДвиженияОС.ВидДвижения = ?(СтруктураШапкиДокумента.ВидДокумента = "ПринятиеКУчетуОС" Или СтруктураШапкиДокумента.ВидДокумента = "АвизоМПЗИсходящее", 
											ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
		
		Если СтруктураШапкиДокумента.ВидДокумента = "ПередачаОборудованияВМонтаж" и СтрокаСписания.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
			
			СтрокаДвиженияОС.Событие = Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство;
			
			СтрокаДвиженияВМонтаж = ТаблицаДвижений_НДСпоОСиНМА.Добавить();

			СтрокаДвиженияВМонтаж.Организация	= СтрокаДвиженияОС.Организация;
			СтрокаДвиженияВМонтаж.ВидЦенности	= СтрокаДвиженияОС.ВидЦенности;
			СтрокаДвиженияВМонтаж.СчетФактура	= СтрокаДвиженияОС.СчетФактура;
			СтрокаДвиженияВМонтаж.СтавкаНДС		= СтрокаДвиженияОС.СтавкаНДС;
			СтрокаДвиженияВМонтаж.СчетУчетаНДС	= СтрокаДвиженияОС.СчетУчетаНДС;
			СтрокаДвиженияВМонтаж.НДСВключенВСтоимость = СтрокаДвиженияОС.НДСВключенВСтоимость;
			СтрокаДвиженияВМонтаж.Состояние		= Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства;
			СтрокаДвиженияВМонтаж.Объект 		= СтруктураШапкиДокумента.ОбъектСтроительства;
			СтрокаДвиженияВМонтаж.СуммаБезНДС 	= (СтрокаСписания.Стоимость - СтрокаСписания.НДС);
			СтрокаДвиженияВМонтаж.НДС         	= СтрокаСписания.НДС;
			
			СтрокаДвиженияВМонтаж.ДатаСобытия	= СтруктураШапкиДокумента.Дата;
			Если (СчетаУчетаОборудования.НайтиПоЗначению(СтрокаСписания.СчетУчета) <> Неопределено 
					Или ТипЗнч(СтрокаСписания.СчетФактура) = Тип("ДокументСсылка.ПоступлениеДопРасходов"))
				И СтрокаСписания.Партия.Дата >= '20060101' Тогда
				СтрокаДвиженияВМонтаж.НеВлияетНаВычет = Истина;
			КонецЕсли;		
			
			СтрокаДвиженияВМонтаж.ВидДвижения	= ВидДвиженияНакопления.Приход;
			СтрокаДвиженияВМонтаж.Событие			= Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство;
		КонецЕсли;
	КонецЦикла; 
	
	Если не ТаблицаДвижений_НДСпоОСиНМА = Неопределено Тогда
		ТаблицаДвижений_НДСпоОСиНМА.Свернуть("Период,Активность,ДатаСобытия,Организация,ВидЦенности,СчетФактура,СтавкаНДС,СчетУчетаНДС,НДСВключенВСтоимость,Состояние,Объект,ВидДвижения,НеВлияетНаВычет","СуммаБезНДС,НДС");
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаТаблицы Из ТаблицаДвижений_НДСпоОСиНМА Цикл
			Если СтрокаТаблицы.СуммаБезНДС =0 и СтрокаТаблицы.НДС = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений_НДСпоОСиНМА.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		
		
		Если ТаблицаДвижений_НДСпоОСиНМА.Количество() > 0 тогда
			Движения.НДСпоОСиНМА.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
			Движения.НДСпоОСиНМА.ДобавитьДвижение();
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура вызывается из модулей документа расхода.
Процедура СформироватьДвиженияПоРегиструНДСпоОСиНМА_СписаниеМатериаловНаОСиНМА(СтруктураШапкиДокумента, ТаблицаДвиженийПартий, Движения, Отказ) Экспорт

	Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") 
		Или Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") Тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН",(ОшибкаВПолучении = Ложь и  УчетнаяПолитика.УСН));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь и УчетнаяПолитика.УпрощенныйУчетНДС));
		КонецЕсли;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	

	Если СтруктураШапкиДокумента.Свойство("СчетЗатрат") Тогда
		ВидыСубконтоСчетаЗатрат = СтруктураШапкиДокумента.СчетЗатрат.ВидыСубконто;
		Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
			Если Не (СтруктураШапкиДокумента["Субконто" + НомерСубконто] = Неопределено) Тогда
				Если (ТипЗнч(СтруктураШапкиДокумента["Субконто" + НомерСубконто]) = Тип("СправочникСсылка.ОбъектыСтроительства")) Тогда
					ОбъектОСиНМА = СтруктураШапкиДокумента["Субконто" + НомерСубконто];
					Состояние 	= Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства;
					Событие		= Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство;
					Прервать;
				ИначеЕсли (ТипЗнч(СтруктураШапкиДокумента["Субконто" + НомерСубконто]) = Тип("СправочникСсылка.НематериальныеАктивы")) Тогда
					ОбъектОСиНМА = СтруктураШапкиДокумента["Субконто" + НомерСубконто];
					Состояние 	= Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию;
					Событие		= Перечисления.СобытияПоНДСПокупки.ОСВведеноВЭксплуатацию;
					Прервать;
				КонецЕсли;	
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	Если ОбъектОСиНМА = Справочники.ОбъектыСтроительства.ПустаяСсылка() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Объект строительства не указан!", , , , Ложь);
	ИначеЕсли ОбъектОСиНМА = Справочники.НематериальныеАктивы.ПустаяСсылка() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Объект НМА не указан!", , , , Ложь);
	ИначеЕсли ОбъектОСиНМА = Неопределено Тогда
			//В структуре шапки нет объекта строительства или НМА
			Возврат;
	КонецЕсли;	
	
	ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.Выгрузить();
	ТаблицаДвижений_НДСпоОСиНМА.Колонки.СуммаБезНДС.Имя = "Стоимость";
	ТаблицаДвижений_НДСпоОСиНМА.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийПартий,ТаблицаДвижений_НДСпоОСиНМА);
	
	КоличествоДвижений = ТаблицаДвижений_НДСпоОСиНМА.Количество();
	Если КоличествоДвижений > 0 Тогда
		Для Счетчик = КоличествоДвижений - 1 По 0 Цикл
			Если НЕ ЗначениеЗаполнено(ТаблицаДвижений_НДСпоОСиНМА[Счетчик].СчетФактура) Тогда
				ТаблицаДвижений_НДСпоОСиНМА.Удалить(Счетчик);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОсобыеУсловияБлокировкиВычета2006 = (СтруктураШапкиДокумента.Дата >= '20060101');
	Если ОсобыеУсловияБлокировкиВычета2006 Тогда
		ВидыЦенностей_ВычетБлокируется = новый СписокЗначений();
		ВидыЦенностей_ВычетБлокируется.Добавить(Перечисления.ВидыЦенностей.ОС);
		ВидыЦенностей_ВычетБлокируется.Добавить(Перечисления.ВидыЦенностей.Оборудование);
		ВидыЦенностей_ВычетБлокируется.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	КонецЕсли; 
	
	// Колонка Стоимость у нас будет фактически колонкой СуммаБезНДС рег. НДСпоОСиНМА
	Для Каждого СтрокаТаблицы ИЗ ТаблицаДвижений_НДСпоОСиНМА Цикл
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - СтрокаТаблицы.НДС;
		Если ОсобыеУсловияБлокировкиВычета2006 Тогда
			СтрокаТаблицы.НеВлияетНаВычет = (ВидыЦенностей_ВычетБлокируется.НайтиПоЗначению(СтрокаТаблицы.ВидЦенности) = неопределено);
		КонецЕсли; 
	КонецЦикла;	
	
	ТаблицаДвижений_НДСпоОСиНМА.Колонки.Стоимость.Имя = "СуммаБезНДС";
	
	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(ОбъектОСиНМА,"Объект");
	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Состояние,"Состояние");
	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Событие,"Событие");
	
	Движения.НДСпоОСиНМА.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
	Движения.НДСпоОСиНМА.ДобавитьДвижение();
	
КонецПроцедуры

// Процедура вызывается из модулей документа принятие к учету ОС и документов списания
// Процедура "погашает" соответствующие записи по переданным параметрам на указанную  дату
Процедура СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС(СтруктураШапкиДокумента, Объект, Состояние, Событие, ДатаЗаписи, КоэффициентРаспределения, Движения, Отказ) Экспорт
	
	Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") 
		Или Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") Тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН",(ОшибкаВПолучении = Ложь и  УчетнаяПолитика.УСН));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь и УчетнаяПолитика.УпрощенныйУчетНДС));
		КонецЕсли;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	//коэффициент не должен быть более единицы
	Если КоэффициентРаспределения > 1 Тогда
		КоэффициентРаспределения = 1;
	ИначеЕсли КоэффициентРаспределения = 0 тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",	СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Объект",			Объект);
	Запрос.УстановитьПараметр("КонецПериода",   Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	Запрос.УстановитьПараметр("Состояние", 		Состояние);
	Запрос.УстановитьПараметр("ВидЦенности_Исключение",Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСпоОСиНМАОстатки.Организация КАК Организация,
	|	НДСпоОСиНМАОстатки.Объект КАК Объект,
	|	НДСпоОСиНМАОстатки.СчетФактура КАК СчетФактура,
	|	НДСпоОСиНМАОстатки.ВидЦенности КАК ВидЦенности,
	|	НДСпоОСиНМАОстатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСпоОСиНМАОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	НДСпоОСиНМАОстатки.Состояние КАК Состояние,
	|	СУММА(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток) КАК СуммаCНДС,
	|	СУММА(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСпоОСиНМАОстатки.НДСОстаток) КАК НДС,
	|	НДСпоОСиНМАОстатки.НеВлияетНаВычет
	|ИЗ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Объект В (&Объект)
	|				И Состояние = &Состояние
	|				И (НЕ ВидЦенности = &ВидЦенности_Исключение)) КАК НДСпоОСиНМАОстатки
	|ГДЕ
	|	НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСпоОСиНМАОстатки.Организация,
	|	НДСпоОСиНМАОстатки.Объект,
	|	НДСпоОСиНМАОстатки.СчетФактура,
	|	НДСпоОСиНМАОстатки.ВидЦенности,
	|	НДСпоОСиНМАОстатки.СтавкаНДС,
	|	НДСпоОСиНМАОстатки.СчетУчетаНДС,
	|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость,
	|	НДСпоОСиНМАОстатки.Состояние,
	|	НДСпоОСиНМАОстатки.НеВлияетНаВычет
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки";

	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
				
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "НДСпоОСиНМА");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
		ЗначенияБлокировки.Вставить("Состояние", Состояние); 
		Если ТипЗнч(Объект) = Тип("Массив") Тогда
			Для Каждого Элемент Из Объект Цикл
				ЗначенияБлокировки.Вставить("Объект", Элемент); 
				ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
			КонецЦикла;
		Иначе
			ЗначенияБлокировки.Вставить("Объект", Объект); 

			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		КонецЕсли;
				
	КонецЕсли;

	Результат = Запрос.Выполнить();
	//Ничего нет в регистре!
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	ТаблицаНДСпоОСиНМА = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(Окр(КоэффициентРаспределения*ТаблицаНДСпоОСиНМА.Итог("СуммаCНДС"),2),ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("СуммаCНДС")),"СуммаCНДС");
	
	Если ТаблицаНДСпоОСиНМА.Итог("СуммаБезНДС") <> 0 Тогда
		ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(Окр(КоэффициентРаспределения*ТаблицаНДСпоОСиНМА.Итог("СуммаБезНДС"),2),ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("СуммаБезНДС")),"СуммаБезНДС");
	КонецЕсли; 
	Для каждого СтрокаТаблицы Из ТаблицаНДСпоОСиНМА Цикл
		СтрокаТаблицы.НДС = СтрокаТаблицы.СуммаCНДС - СтрокаТаблицы.СуммаБезНДС;
	КонецЦикла; 
	
	ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.Выгрузить();
	ТаблицаДвижений_НДСпоОСиНМА.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСпоОСиНМА,ТаблицаДвижений_НДСпоОСиНМА);
	
	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Событие,"Событие");
	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"ДатаСобытия");
	
	Движения.НДСпоОСиНМА.мПериод          = ДатаЗаписи;
	Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
	Движения.НДСпоОСиНМА.ВыполнитьРасход();
	
КонецПроцедуры	

// Процедура вызывается из модулей документа принятие к учету ОС и документов списания
// Процедура "погашает" соответствующие записи по переданным параметрам на указанную  дату
Функция СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС_Хозспособ(СтруктураШапкиДокумента, Объект, Состояние, Событие, ДатаЗаписи, КоэффициентРаспределения, Движения, Отказ) Экспорт
	
	Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь и УчетнаяПолитика.УпрощенныйУчетНДС));
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС тогда
		// Движения по этому документу делать не нужно
		Возврат 0;
	КонецЕсли;
	
	//коэффициент не должен быть более единицы
	Если КоэффициентРаспределения > 1 Тогда
		КоэффициентРаспределения = 1;
	ИначеЕсли КоэффициентРаспределения = 0 тогда
		Возврат 0;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",	СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Объект",			Объект);
	Запрос.УстановитьПараметр("КонецПериода",   Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	Запрос.УстановитьПараметр("ВидЦенности",   	Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("Состояние", 		Состояние);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСпоОСиНМАОстатки.Организация КАК Организация,
	|	НДСпоОСиНМАОстатки.Объект КАК Объект,
	|	НДСпоОСиНМАОстатки.СчетФактура КАК СчетФактура,
	|	НДСпоОСиНМАОстатки.ВидЦенности КАК ВидЦенности,
	|	НДСпоОСиНМАОстатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСпоОСиНМАОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	НДСпоОСиНМАОстатки.Состояние КАК Состояние,
	|	СУММА(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток) КАК СуммаCНДС,
	|	СУММА(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСпоОСиНМАОстатки.НДСОстаток) КАК НДС,
	|	НДСпоОСиНМАОстатки.НеВлияетНаВычет
	|ИЗ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Объект В (&Объект)
	|				И Состояние = &Состояние
	|				И ВидЦенности = &ВидЦенности) КАК НДСпоОСиНМАОстатки
	|ГДЕ
	|	НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСпоОСиНМАОстатки.Организация,
	|	НДСпоОСиНМАОстатки.Объект,
	|	НДСпоОСиНМАОстатки.СчетФактура,
	|	НДСпоОСиНМАОстатки.ВидЦенности,
	|	НДСпоОСиНМАОстатки.СтавкаНДС,
	|	НДСпоОСиНМАОстатки.СчетУчетаНДС,
	|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость,
	|	НДСпоОСиНМАОстатки.Состояние,
	|	НДСпоОСиНМАОстатки.НеВлияетНаВычет
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки";

	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
				
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "НДСпоОСиНМА");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 

		ЗначенияБлокировки.Вставить("Состояние", Состояние); 
		ЗначенияБлокировки.Вставить("ВидЦенности", Перечисления.ВидыЦенностей.СМРСобственнымиСилами); 
		Если ТипЗнч(Объект) = Тип("Массив") Тогда
			Для Каждого Элемент Из Объект Цикл
				ЗначенияБлокировки.Вставить("Объект", Элемент); 
				ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
			КонецЦикла;
		Иначе
			ЗначенияБлокировки.Вставить("Объект", Объект); 
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		КонецЕсли;
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
				
	КонецЕсли;

	Результат = Запрос.Выполнить();
	//Ничего нет в регистре!
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;	
	
	ТаблицаНДСпоОСиНМА = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(Окр(КоэффициентРаспределения*ТаблицаНДСпоОСиНМА.Итог("СуммаCНДС"),2),ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("СуммаCНДС")),"СуммаCНДС");
	
	Если ТаблицаНДСпоОСиНМА.Итог("СуммаБезНДС") <> 0 Тогда
		ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(Окр(КоэффициентРаспределения*ТаблицаНДСпоОСиНМА.Итог("СуммаБезНДС"),2),ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("СуммаБезНДС")),"СуммаБезНДС");
	КонецЕсли; 
	Для каждого СтрокаТаблицы Из ТаблицаНДСпоОСиНМА Цикл
		СтрокаТаблицы.НДС = СтрокаТаблицы.СуммаCНДС - СтрокаТаблицы.СуммаБезНДС;
	КонецЦикла; 
	
	ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.Выгрузить();
	ТаблицаДвижений_НДСпоОСиНМА.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСпоОСиНМА,ТаблицаДвижений_НДСпоОСиНМА);
	
	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Событие,"Событие");
	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"ДатаСобытия");
	
	Движения.НДСпоОСиНМА.мПериод          = ДатаЗаписи;
	Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
	Движения.НДСпоОСиНМА.ВыполнитьРасход();
	
	Возврат ТаблицаНДСпоОСиНМА.Итог("СуммаБезНДС");
	
КонецФункции	

Процедура ОтразитьПринятиеКУчетуОС(СтруктураШапкиДокумента, ТаблицаСписания, ТаблицаДвиженийПокупки, ТаблицаДвиженийПартии, НаборДвиженийХозрасчетный,Заголовок, ПереданНДСНаСтроительство = Ложь) Экспорт

	Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь и УчетнаяПолитика.УпрощенныйУчетНДС));
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если ТаблицаСписания.Количество() = 0 Тогда
		//Нет данных для отражения принятия к учету ОС
		Возврат;
	КонецЕсли; 
	
	ТаблицаДляОбработки = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаСписания,Новый Структура("СчетФактура,ВидЦенности,Номенклатура, СчетУчетаНДС, СтавкаНДС,НДСВключенВСтоимость,Стоимость,НДС"));
	ТаблицаДляОбработки.Свернуть("СчетФактура,ВидЦенности,Номенклатура, СчетУчетаНДС, СтавкаНДС,НДСВключенВСтоимость","Стоимость, НДС");
	
	ОжидаетсяПринятиеКУчетуОС = Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОС;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОжидаетсяПринятиеКУчетуОС", ОжидаетсяПринятиеКУчетуОС);
	Запрос.УстановитьПараметр("Период",  				СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Организация",  		СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаФактуры",       ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("СчетФактура")));
	Запрос.УстановитьПараметр("ВидыЦенностей",      ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("ВидЦенности")));
	Запрос.УстановитьПараметр("Номенклатура",       ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("Номенклатура")));
	Запрос.УстановитьПараметр("СчетУчетаНДС",       ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("СчетУчетаНДС")));
	Запрос.УстановитьПараметр("СтавкаНДС",       	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("СтавкаНДС")));
	Запрос.УстановитьПараметр("НДСВключенВСтоимость",ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("НДСВключенВСтоимость")));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСпоОСиНМАОстатки.Организация,
	|	НДСпоОСиНМАОстатки.Объект,
	|	НДСпоОСиНМАОстатки.СчетФактура,
	|	НДСпоОСиНМАОстатки.ВидЦенности,
	|	НДСпоОСиНМАОстатки.СтавкаНДС,
	|	НДСпоОСиНМАОстатки.СчетУчетаНДС,
	|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость,
	|	НДСпоОСиНМАОстатки.Состояние,
	|	НДСпоОСиНМАОстатки.СуммаБезНДСОстаток,
	|	НДСпоОСиНМАОстатки.НДСОстаток,
	|	НДСпоОСиНМАОстатки.НеВлияетНаВычет
	|ИЗ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки(
	|		&Период,
	|		Организация = &Организация
	|		    И Объект В (&Номенклатура)
	|		    И СчетФактура В (&СчетаФактуры)
	|		    И ВидЦенности В (&ВидыЦенностей)
	|		    И СтавкаНДС В (&СтавкаНДС)
	|		    И СчетУчетаНДС В (&СчетУчетаНДС)
	|		    И Состояние = &ОжидаетсяПринятиеКУчетуОС) КАК НДСпоОСиНМАОстатки";

	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	Распределение = Новый Структура("СуммаСНДС","Стоимость");
	Фильтр = Новый Структура("СчетФактура,ВидЦенности,Субконто1",,,"Номенклатура");
	ТаблицаКорректировкиНДСПокупки = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаДляОбработки,ТаблицаРезультатов,Распределение,Фильтр);
	
	Если ТаблицаКорректировкиНДСПокупки.Количество() = 0 Тогда
		ТаблицаДляОбработки.Свернуть("СчетФактура,ВидЦенности,Номенклатура","Стоимость");
		Для каждого СтрокаВключенияВСтоимость Из ТаблицаДляОбработки Цикл
			ОбщегоНазначения.СообщитьОбОшибке("Не обнаружена запись о предъявлении НДС поставщиком по счету-фактуре <"+СтрокаВключенияВСтоимость.СчетФактура+">, вид ценности <"+СтрокаВключенияВСтоимость.ВидЦенности+">, номенклатура <"+СтрокаВключенияВСтоимость.Номенклатура+">."+Символы.ПС+
			"Событие "+?(ПереданНДСНаСтроительство,"передачи на строительство (в монтаж)","принятия к учету ОС")+" не зафиксировано в учете НДС.",,Заголовок,СтатусСообщения.Внимание);
		КонецЦикла; 
		Возврат;
	КонецЕсли;
	
	// Выделение суммы без НДС и суммы НДС
	Для каждого СтрокаКорректировкиНДСПокупки из ТаблицаКорректировкиНДСПокупки Цикл
		БазоваяСуммаСНДС = СтрокаКорректировкиНДСПокупки.СуммаБезНДС+ СтрокаКорректировкиНДСПокупки.НДС;
		СтрокаКорректировкиНДСПокупки.СуммаБезНДС = Окр(СтрокаКорректировкиНДСПокупки.СуммаСНДС*СтрокаКорректировкиНДСПокупки.СуммаБезНДС/БазоваяСуммаСНДС,2);
		СтрокаКорректировкиНДСПокупки.НДС = СтрокаКорректировкиНДСПокупки.СуммаСНДС - СтрокаКорректировкиНДСПокупки.СуммаБезНДС;
	КонецЦикла; 
	
	////////////////////////////////////////////////////////
	//Отражение движений в регистре НДС покупки
	ТаблицаКорректировкиНДСПокупки.ЗаполнитьЗначения(?(ПереданНДСНаСтроительство,Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,Перечисления.СобытияПоНДСПокупки.ОСВведеноВЭксплуатацию),"Событие");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКорректировкиНДСПокупки, ТаблицаДвиженийПокупки);
	//Отражение движений в регистре НДС покупки
	////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////
	// Движения по НДС партии
	ТаблицаКорректировкиНДСПокупки.Колонки.Субконто1.Имя = "Номенклатура";
	Для каждого СтрокаСписания Из ТаблицаСписания Цикл
		
		СтрокиКорректировкиНДСПокупки = ТаблицаКорректировкиНДСПокупки.НайтиСтроки(Новый Структура("СчетФактура,ВидЦенности, Номенклатура",СтрокаСписания.СчетФактура,СтрокаСписания.ВидЦенности,СтрокаСписания.Номенклатура));
		Если СтрокиКорректировкиНДСПокупки.Количество()=0 Тогда
			//Если не найдены строки в результирующей таблице, включение НДС в стоимость не произведено.
			ОбщегоНазначения.СообщитьОбОшибке("Не обнаружена запись о предъявлении НДС поставщиком по счету-фактуре <"+СтрокаСписания.СчетФактура+">, вид ценности <"+СтрокаСписания.ВидЦенности+">, номенклатура <"+СтрокаСписания.Номенклатура+">.
			| Событие "+?(ПереданНДСНаСтроительство,"передачи на строительство (в монтаж)","принятия к учету ОС")+" не зафиксировано в учете НДС (строка "+СтрокаСписания.НомерСтроки+").",,Заголовок,СтатусСообщения.Внимание);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла; //Для каждого Строка Из ТаблицаСписания Цикл
	// Движения по НДС партии
	////////////////////////////////////////////////////////
	
КонецПроцедуры // СформироватьДвиженияПоПередачеТоваровИзОптаВРозницуЕНВД()

//Предназначена для отражения НДС при принятии к учету объекта строительства хоз  способом.
Процедура СформироватьДвиженияПоРегиструНДСНачисленныйПредъявленный_ПринятиеКУчету_ХозСпособ(СтруктураШапкиДокумента, Движения, Отказ, СуммаБезНДС, СуммаНДС) Экспорт

	Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь и УчетнаяПолитика.УпрощенныйУчетНДС));
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	// Начисление НДС в бюджет. Подготовка записи для отражения в книге продаж.
	СтрокаДвижений_НДСНачисленный 						= Движения.НДСНачисленный.Добавить();
	СтрокаДвижений_НДСНачисленный.Период 				= СтруктураШапкиДокумента.Дата;
	
	СтрокаДвижений_НДСНачисленный.Организация			= СтруктураШапкиДокумента.Организация;
	СтрокаДвижений_НДСНачисленный.СчетФактура			= СтруктураШапкиДокумента.Ссылка;
	СтрокаДвижений_НДСНачисленный.ВидЦенности			= Перечисления.ВидыЦенностей.СМРСобственнымиСилами;
	СтрокаДвижений_НДСНачисленный.СтавкаНДС				= Перечисления.СтавкиНДС.НДС18;
	СтрокаДвижений_НДСНачисленный.Покупатель			= СтруктураШапкиДокумента.Организация;
	СтрокаДвижений_НДСНачисленный.ВидНачисления			= Перечисления.НДСВидНачисления.НДСНачисленКУплате;
	
	СтрокаДвижений_НДСНачисленный.СуммаБезНДС			= СуммаБезНДС;
	СтрокаДвижений_НДСНачисленный.НДС					= СуммаНДС;
	
	СтрокаДвижений_НДСНачисленный.Событие 				= Перечисления.СобытияПоНДСПродажи.Реализация;
	СтрокаДвижений_НДСНачисленный.ДатаСобытия 			= СтруктураШапкиДокумента.Дата;
	СтрокаДвижений_НДСНачисленный.СчетУчетаНДС			= ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств.Ссылка;
	

	// Предъявление НДС себе же для последующего принятия к вычету.
	СтрокаДвижений_НДСПредъявленный 					= Движения.НДСПредъявленный.Добавить();
	СтрокаДвижений_НДСПредъявленный.Период 				= СтруктураШапкиДокумента.Дата;
	
	СтрокаДвижений_НДСПредъявленный.Организация			= СтруктураШапкиДокумента.Организация;
	СтрокаДвижений_НДСПредъявленный.СчетФактура			= СтруктураШапкиДокумента.Ссылка;
	СтрокаДвижений_НДСПредъявленный.ВидЦенности			= Перечисления.ВидыЦенностей.СМРСобственнымиСилами;
	СтрокаДвижений_НДСПредъявленный.СтавкаНДС			= Перечисления.СтавкиНДС.НДС18;
	СтрокаДвижений_НДСПредъявленный.Поставщик			= СтруктураШапкиДокумента.Организация;
	СтрокаДвижений_НДСПредъявленный.СчетУчетаНДС		= Планысчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств.Ссылка;
	
	СтрокаДвижений_НДСПредъявленный.СуммаБезНДС			= СуммаБезНДС;
	СтрокаДвижений_НДСПредъявленный.НДС					= СуммаНДС;
	
	СтрокаДвижений_НДСПредъявленный.Событие 			= Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура;
	СтрокаДвижений_НДСПредъявленный.ДатаСобытия 		= СтруктураШапкиДокумента.Дата;
	
КонецПроцедуры

//  ОТРАЖЕНИЯ ДВИЖЕНИЙ СВЯЗАННЫХ С ОБЪЕКТАМИ СТРОИТЕЛЬСТВА, ОС И НМА
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//  РЕГИСТРАЦИЯ СУММОВЫХ РАЗНИЦ В ПОДСИСТЕМЕ НДС

//////////////////////////////////////////////////////////////////////////
//  ПО НДС НАЧИСЛЕННОМУ ПО РЕАЛИЗАЦИИ

// Процедура вызывается из модуля управления взаиморасчетами в тех случаях,
// когда взаиморасчеты с поставщиками ведутся в У.Е. с использованием рублевого 
// покрытия. По переданной таблице суммовых разниц формируются движения 
// корректирующие суммы событий, отраженных в регистре "НДСПокупки".
Процедура КорректировкаРегистровНДСПоСуммовымРазницам_Реализация(СтруктураШапкиДокумента, ИсходнаяТаблицаСуммовыхРазниц, Движения) Экспорт

	ИсходнаяТаблицаСуммовыхРазниц.Колонки.Добавить("СуммоваяРазницаНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	Если СтруктураШапкиДокумента.Дата >= '20111001' Тогда
		// Начиная с 01.10.2011 при расчетах в у.е. налоговая база по НДС, определенная на дату реализации, 
		// при последующей оплате по другому курсу не корректируется
		Возврат;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") 
		Или Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС")
		Или Не СтруктураШапкиДокумента.Свойство("УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС")
		Или Не СтруктураШапкиДокумента.Свойство("НачислятьНДСПоОтгрузке")
		Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН",(ОшибкаВПолучении = Ложь и  УчетнаяПолитика.УСН));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") тогда
			СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь и  УчетнаяПолитика.УпрощенныйУчетНДС));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС",?(ОшибкаВПолучении, Истина, УчетнаяПолитика.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("НачислятьНДСПоОтгрузке") Тогда
			СтруктураШапкиДокумента.Вставить("НачислятьНДСПоОтгрузке",?(ОшибкаВПолучении, Ложь, УчетнаяПолитика.НачислятьНДСПоОтгрузке));
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС тогда
		// Движения по этому документу делать не нужно
		// Нужно добавить информацию о НДС в таблицу суммовых разниц
		
		Для Каждого СтрокаТаблицы Из ИсходнаяТаблицаСуммовыхРазниц Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
				ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
			Иначе
				ПроцентНДС = 18;
			КонецЕсли;
			СтрокаТаблицы.СуммоваяРазницаНДС = Окр(СтрокаТаблицы.СуммоваяРазница * ПроцентНДС / (100 + ПроцентНДС), 2);
			
		КонецЦикла;
				
		Возврат;
		
	КонецЕсли;
	
	ИсходнаяТаблицаСуммовыхРазниц.Колонки.Добавить("ДокументДляПоиска");
	Для каждого СтрокаТаблицы Из ИсходнаяТаблицаСуммовыхРазниц Цикл
		Если СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке 
			И ТипЗнч(СтрокаТаблицы.ДокументРасчетов) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			СтрокаТаблицы.ДокументДляПоиска = СтрокаТаблицы.ДокументРасчетов.ДокументОтгрузки;
		Иначе
			СтрокаТаблицы.ДокументДляПоиска = СтрокаТаблицы.ДокументРасчетов;
		КонецЕсли
	КонецЦикла;
	
	УчитыватьПоложительныеРазницыДляНДС = СтруктураШапкиДокумента.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС;
	
	Если Не УчитыватьПоложительныеРазницыДляНДС Тогда
		// Суммовые разницы не нужно учитывать для НДС по реализации
		Возврат;
	КонецЕсли;
	
	ТаблицаСуммовыхРазниц = ИсходнаяТаблицаСуммовыхРазниц.Скопировать();
	
	СтрокиКУдалению = Новый Массив();
	Для каждого СтрокаТаблицы Из ТаблицаСуммовыхРазниц Цикл
		Если СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке 
			И ТипЗнч(СтрокаТаблицы.ДокументРасчетов) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			СтрокаТаблицы.ДокументРасчетов = СтрокаТаблицы.ДокументРасчетов.ДокументОтгрузки;
		КонецЕсли;
			
		Если СтрокаТаблицы.СуммоваяРазница > 0 И УчитыватьПоложительныеРазницыДляНДС Тогда
			//Строка обрабатывается
			Продолжить;
		Иначе
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из СтрокиКУдалению Цикл
		ТаблицаСуммовыхРазниц.Удалить(СтрокаТаблицы);
	КонецЦикла; 
	
	Если ТаблицаСуммовыхРазниц.Количество() = 0 Тогда
		// Нечего обрабатывать
		Возврат;
	КонецЕсли;
	
	// формируем дерево счетов-фактур по которым нужно отразить суммовые разницы

	РеестрСчетовФактур = ПолучитьДанныеПоКорректируемымСчетамФактурам_Реализация(СтруктураШапкиДокумента, ТаблицаСуммовыхРазниц, Движения);
	
	СвернутаяТаблицаСФ = ТаблицаСуммовыхРазниц.Скопировать();
	СвернутаяТаблицаСФ.Свернуть("ДокументРасчетов","СуммоваяРазница");
	Для каждого СчетФактура Из СвернутаяТаблицаСФ Цикл
		Если РеестрСчетовФактур.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не отражена суммовая разница в размере "+Формат(СчетФактура.СуммоваяРазница, "ЧЦ=15; ЧДЦ=2")  +" в регистрах НДС по документу <"+Строка(СчетФактура.ДокументРасчетов)+">");
		ИначеЕсли РеестрСчетовФактур.НайтиСтроки(Новый Структура("СчетФактура",СчетФактура.ДокументРасчетов)).Количество()=0 тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не отражена суммовая разница в размере "+Формат(СчетФактура.СуммоваяРазница, "ЧЦ=15; ЧДЦ=2")  +" в регистрах НДС по документу <"+Строка(СчетФактура.ДокументРасчетов)+">");
		КонецЕсли;
	КонецЦикла;
	
	Если РеестрСчетовФактур.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Отразить распределение в таблице суммовых разниц
	РеестрСчетовФактур.Колонки.Добавить("СуммоваяРазница",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_БезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	РеестрСчетовФактур.ЗагрузитьКолонку(РеестрСчетовФактур.ВыгрузитьКолонку("Базис_СНДС"),"СуммоваяРазница");

	Распределение = Новый Структура("СуммоваяРазница","СуммоваяРазница");
	Отбор         = Новый Структура("СчетФактура","ДокументРасчетов");
	
	РеестрСчетовФактур = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц, РеестрСчетовФактур, Распределение, Отбор); 

	СтрокиКУдалению = Новый Массив();
	
	// Разделим суммовую разницу на сумму без НДС и сумму с НДС
	Для каждого СтрокаРеестра Из РеестрСчетовФактур Цикл
		Если СтрокаРеестра.СуммоваяРазница=0 
			или СтрокаРеестра.Базис_СНДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		Иначе
			Если СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
				СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
			ИначеЕсли СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
				СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110;
			ИначеЕсли СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				// Отражение суммовой разницы в данном режиме по ставке НДС 0% не предусмотрено
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				продолжить;
			КонецЕсли; 
		КонецЕсли; 
		СтрокаРеестра.СР_НДС =  Окр(СтрокаРеестра.СуммоваяРазница*УчетНДС.ПолучитьСтавкуНДС(СтрокаРеестра.СтавкаНДС)/(100+УчетНДС.ПолучитьСтавкуНДС(СтрокаРеестра.СтавкаНДС)),2);
		СтрокаРеестра.СР_БезНДС =  СтрокаРеестра.СуммоваяРазница - СтрокаРеестра.СР_НДС;
	КонецЦикла; 
	
	// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	// на которые суммовая разница не относится
	Если СтрокиКУдалению.Количество()>0 Тогда
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			РеестрСчетовФактур.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если РеестрСчетовФактур.Количество()=0 Тогда
	    Возврат;
	КонецЕсли; 
	
	// Отражение суммовой разницы в регистре НДСНачисленный
	ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.Выгрузить();
	ТаблицаДвижений_НДСНачисленный.Очистить();
	
	СоответствиеКолонок = Новый Соответствие();
	РеестрСчетовФактур.Колонки.СР_БезНДС.Имя = "СуммаБезНДС";
	РеестрСчетовФактур.Колонки.СР_НДС.Имя = "НДС";
								 
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РеестрСчетовФактур,ТаблицаДвижений_НДСНачисленный);
	ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	
	ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"СчетФактура");
	ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате,"ВидЦенности");
	ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСНачисленКУплате,"ВидНачисления");
	ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате,"Событие");
	
	// Далее корректировка регистра НДСНачисленный не планируется
	// Заполним набор записей регистра полученным результатом
	Движения.НДСНачисленный.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
	Движения.НДСНачисленный.ДобавитьДвижение();
	
	// Скопировать сумму НДС в исходную таблицу суммовых разниц
	РеестрСчетовФактур.Свернуть("СчетФактура, Покупатель", "НДС");
	СтруктураОтбора = Новый Структура("ДокументДляПоиска, Контрагент");
	Для Каждого СтрокаТаблицы Из РеестрСчетовФактур Цикл
		
		СтруктураОтбора.ДокументДляПоиска = СтрокаТаблицы.СчетФактура;
		СтруктураОтбора.Контрагент = СтрокаТаблицы.Покупатель;
		НайденныеСтроки = ИсходнаяТаблицаСуммовыхРазниц.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			НайденныеСтроки[0].СуммоваяРазницаНДС = СтрокаТаблицы.НДС;
		КонецЕсли;
		
	КонецЦикла;
					
КонецПроцедуры // КорректировкаРегистровНДСПоСуммовымРазницам_Реализация()

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Реализация".
// Цель работы процедуры - сформировать дерево остатков по регистрам НДС (приобретение), содержащее
// суммы зарегистрированных событий, для последующей их корректировки
//
Функция ПолучитьДанныеПоКорректируемымСчетамФактурам_Реализация(СтруктураШапкиДокумента, ТаблицаСуммовыхРазниц, Движения)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТаблицаСуммовыхРазниц",	ТаблицаСуммовыхРазниц);
	Запрос.УстановитьПараметр("КонецПериода",       Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	Запрос.УстановитьПараметр("Предположение0",     Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСуммовыхРазниц.ДокументРасчетов КАК СчетФактура
	|ПОМЕСТИТЬ СписокСчетовФактур
	|ИЗ
	|	&ТаблицаСуммовыхРазниц КАК ТаблицаСуммовыхРазниц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСНачисленныйОбороты.Организация,
	|	НДСНачисленныйОбороты.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОбороты.ВидЦенности,
	|	НДСНачисленныйОбороты.СтавкаНДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОбороты.СуммаБезНДСПриход, 0) + ЕСТЬNULL(НДСНачисленныйОбороты.НДСПриход, 0)) КАК Базис_СНДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОбороты.СуммаБезНДСПриход, 0)) КАК Базис_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОбороты.НДСПриход, 0)) КАК Базис_НДС,
	|	СУММА(НДСРеализация0.Реализация0_БезНДС) КАК Реализация0_БезНДС,
	|	СУММА(НДСРеализация0.Реализация0_НДС) КАК Реализация0_НДС,
	|	НДСНачисленныйОбороты.Покупатель,
	|	НДСНачисленныйОбороты.ВидНачисления,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСРеализация0.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ЕстьРеализация0
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И СчетФактура В
	|					(ВЫБРАТЬ
	|						СписокСчетовФактур.СчетФактура
	|					ИЗ
	|						СписокСчетовФактур)) КАК НДСНачисленныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ВЫБОР
	|					КОГДА НДСРеализация0Обороты.Состояние = &Предположение0
	|						ТОГДА ЕСТЬNULL(НДСРеализация0Обороты.СуммаБезНДСОборот, 0)
	|					ИНАЧЕ ЕСТЬNULL(НДСРеализация0Обороты.СуммаБезНДСПриход, 0)
	|				КОНЕЦ) КАК Реализация0_БезНДС,
	|			СУММА(ВЫБОР
	|					КОГДА НДСРеализация0Обороты.Состояние = &Предположение0
	|						ТОГДА ЕСТЬNULL(НДСРеализация0Обороты.НДСОборот, 0)
	|					ИНАЧЕ ЕСТЬNULL(НДСРеализация0Обороты.НДСПриход, 0)
	|				КОНЕЦ) КАК Реализация0_НДС,
	|			НДСРеализация0Обороты.СчетФактура КАК СчетФактура,
	|			НДСРеализация0Обороты.ВидЦенности КАК ВидЦенности,
	|			НДСРеализация0Обороты.Покупатель КАК Покупатель,
	|			НДСРеализация0Обороты.СтавкаНДС КАК СтавкаНДС
	|		ИЗ
	|			РегистрНакопления.НДСРеализация0.Обороты(
	|					,
	|					&КонецПериода,
	|					Период,
	|					Организация = &Организация
	|						И СчетФактура В
	|							(ВЫБРАТЬ
	|								СписокСчетовФактур.СчетФактура
	|							ИЗ
	|								СписокСчетовФактур)) КАК НДСРеализация0Обороты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НДСРеализация0Обороты.СчетФактура,
	|			НДСРеализация0Обороты.ВидЦенности,
	|			НДСРеализация0Обороты.Покупатель,
	|			НДСРеализация0Обороты.СтавкаНДС
	|		
	|		ДЛЯ ИЗМЕНЕНИЯ
	|			РегистрНакопления.НДСРеализация0.Обороты) КАК НДСРеализация0
	|		ПО НДСНачисленныйОбороты.СчетФактура = НДСРеализация0.СчетФактура
	|			И НДСНачисленныйОбороты.ВидЦенности = НДСРеализация0.ВидЦенности
	|			И НДСНачисленныйОбороты.Покупатель = НДСРеализация0.Покупатель
	|			И НДСНачисленныйОбороты.СтавкаНДС = НДСРеализация0.СтавкаНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСНачисленныйОбороты.Организация,
	|	НДСНачисленныйОбороты.СчетФактура,
	|	НДСНачисленныйОбороты.ВидЦенности,
	|	НДСНачисленныйОбороты.СтавкаНДС,
	|	НДСНачисленныйОбороты.Покупатель,
	|	НДСНачисленныйОбороты.ВидНачисления
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.НДСНачисленный.Обороты";

	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
				
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "НДСНачисленный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
		//СтруктураПараметров.Вставить("ИсточникДанных", ТаблицаСуммовыхРазниц);
		//
		ОписаниеИсточника = Новый Соответствие;
		//ОписаниеИсточника.Вставить("СчетФактура", "Сделка");
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
		
		СтруктураПараметров.ИмяТаблицы = "НДСРеализация0";
		
		ЗначенияБлокировки.Вставить("Состояние", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение); 
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
								
	КонецЕсли;

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);

КонецФункции // ПолучитьДанныеПоКорректируемымСчетамФактурам_Реализация()

//  ПО НДС НАЧИСЛЕННОМУ ПО РЕАЛИЗАЦИИ
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//  ПО НДС ПРЕДЪЯВЛЕННОМУ 

Процедура КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение(СтруктураШапкиДокумента, ИсходнаяТаблицаСуммовыхРазниц, Движения, КорректироватьПоРасчетамНА = Ложь) Экспорт

	Если СтруктураШапкиДокумента.Дата >= '20111001' Тогда
		// Начиная с 01.10.2011 при расчетах в у.е. налоговая база по НДС, определенная на дату поступления, 
		// при последующей оплате по другому курсу не корректируется
		Возврат;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") 
		Или Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") 
		Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН",(ОшибкаВПолучении = Ложь И УчетнаяПолитика.УСН));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") тогда
			СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь И УчетнаяПолитика.УпрощенныйУчетНДС));
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если Не КорректироватьПоРасчетамНА Тогда
		// Суммовые разницы не нужно учитывать для НДС по приобретеннию
		Возврат;
	КонецЕсли;
	
	ТаблицаСуммовыхРазниц = ИсходнаяТаблицаСуммовыхРазниц.Скопировать();
	
	СтрокиКУдалению = Новый Массив();
	
	Для Каждого СтрокаТаблицы Из ТаблицаСуммовыхРазниц Цикл
		
		Если Не СтрокаТаблицы.ДоговорКонтрагента.УчетАгентскогоНДС
			Или Не СтрокаТаблицы.ДоговорКонтрагента.НалоговыйАгентПоОплате Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
		
	Для каждого СтрокаТаблицы Из СтрокиКУдалению Цикл
		ТаблицаСуммовыхРазниц.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Если ТаблицаСуммовыхРазниц.Количество() = 0 Тогда
		// Нечего обрабатывать
		Возврат;
	КонецЕсли;
	
	Если Не КорректироватьПоРасчетамНА Тогда
		
		//Откорректируем информацию о задолженности в регистре взаиморасчетов на суммовую разницу
		ТаблицаДвижений_НДСРасчетыСПоставщиками = Движения.НДСРасчетыСПоставщиками.Выгрузить();
		ТаблицаДвижений_НДСРасчетыСПоставщиками.Очистить();
		
		СоответствиеКолонок = Новый Соответствие();
		СоответствиеКолонок.Вставить("Сумма","СуммоваяРазница");
		СоответствиеКолонок.Вставить("Поставщик","Контрагент");
		СоответствиеКолонок.Вставить("ВалютаРасчетов","ВалютаВзаиморасчетов");
									 
		УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПоставщиками, СоответствиеКолонок);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаСуммовыхРазниц,ТаблицаДвижений_НДСРасчетыСПоставщиками);
		ТаблицаДвижений_НДСРасчетыСПоставщиками.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
		ТаблицаДвижений_НДСРасчетыСПоставщиками.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
		
		УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПоставщиками, СоответствиеКолонок,Истина);
		
		Движения.НДСРасчетыСПоставщиками.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;
		Движения.НДСРасчетыСПоставщиками.ДобавитьДвижение(); //Откорректируем информацию о задолженности в регистре взаиморасчетов на суммовую разницу
		
	КонецЕсли;
	
	// формируем дерево счетов-фактур по которым нужно отразить суммовые разницы
	СчетаФактурыПолученные = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетФактура"), Истина);

	РеестрСчетовФактур = ПолучитьДанныеПоКорректируемымСчетамФактурам_Приобретение(СтруктураШапкиДокумента, ТаблицаСуммовыхРазниц, Движения);
	
	Если КорректироватьПоРасчетамНА Тогда
		
		РеестрСчетовФактур.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		Для Каждого СтрокаТаблицы Из ТаблицаСуммовыхРазниц Цикл
			
			СтрокиОтбора = РеестрСчетовФактур.НайтиСтроки(Новый Структура("СчетФактура", СтрокаТаблицы.СчетФактура));
			Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
				СтрокаОтбора.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
			КонецЦикла;
			
		КонецЦикла;
			
	КонецЕсли;
	
	СвернутаяТаблицаСФ = ТаблицаСуммовыхРазниц.Скопировать();
	СвернутаяТаблицаСФ.Свернуть("СчетФактура","СуммоваяРазница");

	Если РеестрСчетовФактур.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Отразить распределение в таблице суммовых разниц
	РеестрСчетовФактур.Колонки.Добавить("СуммоваяРазница",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_БезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	Если Не КорректироватьПоРасчетамНА Тогда
		РеестрСчетовФактур.ЗагрузитьКолонку(РеестрСчетовФактур.ВыгрузитьКолонку("Базис_СНДС"),"СуммоваяРазница");
	Иначе
		РеестрСчетовФактур.ЗагрузитьКолонку(РеестрСчетовФактур.ВыгрузитьКолонку("Базис_БезНДС"),"СуммоваяРазница");
	КонецЕсли;

	Распределение = Новый Структура("СуммоваяРазница","СуммоваяРазница");
	Отбор         = Новый Структура("СчетФактура","СчетФактура");
	
	РеестрСчетовФактур = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц,РеестрСчетовФактур,Распределение,Отбор); 

	СтрокиКУдалению = новый массив();
	
	// Разделим суммовую разницу на сумму без НДС и сумму с НДС
	Для каждого СтрокаРеестра Из РеестрСчетовФактур Цикл
		Если СтрокаРеестра.СуммоваяРазница=0 
			или СтрокаРеестра.Базис_СНДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
		Если Не КорректироватьПоРасчетамНА Тогда
			СтрокаРеестра.СР_НДС = Окр(СтрокаРеестра.СуммоваяРазница*СтрокаРеестра.Базис_НДС/СтрокаРеестра.Базис_СНДС,2);
			СтрокаРеестра.СР_БезНДС = СтрокаРеестра.СуммоваяРазница - СтрокаРеестра.СР_НДС;
		Иначе
			СтрокаРеестра.СР_БезНДС = СтрокаРеестра.СуммоваяРазница;
			СтрокаРеестра.СР_НДС = УчетНДС.РассчитатьСуммуНДС(СтрокаРеестра.СР_БезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаРеестра.СтавкаНДС));
		КонецЕсли;
	КонецЦикла; 
	
	// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	// на которые суммовая разница не относится
	Если СтрокиКУдалению.Количество()>0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			РеестрСчетовФактур.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если РеестрСчетовФактур.Количество()=0 Тогда
	    Возврат;
	КонецЕсли; 
	
	Если КорректироватьПоРасчетамНА Тогда
		//Отразить проводки при исполнении обязанностей налогового агента
		СформироватьПроводкиПоРазницамНалоговыйАгент(СтруктураШапкиДокумента, РеестрСчетовФактур, Движения);
	КонецЕсли;
	
	// Отражение сумовой разницы в регистре НДСПредъявленный
	ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.Выгрузить();
	ТаблицаДвижений_НДСПредъявленный.Очистить();
	
	СоответствиеКолонок = Новый Соответствие();
	СоответствиеКолонок.Вставить("СуммаБезНДС","СР_БезНДС");
	СоответствиеКолонок.Вставить("НДС","СР_НДС");
								 
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСПредъявленный, СоответствиеКолонок);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РеестрСчетовФактур,ТаблицаДвижений_НДСПредъявленный);
	ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком,"Событие");
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСПредъявленный, СоответствиеКолонок,Истина);
	
	Если (РеестрСчетовФактур.Итог("ЕстьВключениеВСтоимость")>0)
		или (РеестрСчетовФактур.Итог("ЕстьОстаткиПоПартиям")>0)
		или (РеестрСчетовФактур.Итог("ЕстьОСНМА")>0)
		или (РеестрСчетовФактур.Итог("ЕстьРеализация0")>0)
		или (РеестрСчетовФактур.Итог("ЕстьКосвенныеРасходы")>0)
		тогда
		
		Построитель_РеестрСчетовФактур = новый ПостроительЗапроса();
		ОписаниеИсточника_РеестрСчетовФактур = новый ОписаниеИсточникаДанных(РеестрСчетовФактур);
		
		Построитель_РеестрСчетовФактур.ИсточникДанных = ОписаниеИсточника_РеестрСчетовФактур;
	КонецЕсли;
	
	// Если есть включение НДС в стоимость, необходимо пропорционально уменьшить 
	// сумму НДС предъявленного и зафиксировать включение НДС в стоимость в специальном регистре
	Если РеестрСчетовФактур.Итог("ЕстьВключениеВСтоимость")>0 Тогда
		ТаблицаДвижений_НДСВключенныйВСтоимость = Движения.НДСВключенныйВСтоимость.Выгрузить();
		ТаблицаДвижений_НДСВключенныйВСтоимость.Очистить();

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьВключениеВСтоимость");
		ОтборПостроитель.ЕстьВключениеВСтоимость.Значение = 1;
		ОтборПостроитель.ЕстьВключениеВСтоимость.Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСВключенныйВСтоимость = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель.ЕстьВключениеВСтоимость.Использование = Ложь;
		Корректировки_НДСВключенныйВСтоимость.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		Корректировки_НДСВключенныйВСтоимость.Колонки.Добавить("НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Для каждого СтрокаКорректировки Из Корректировки_НДСВключенныйВСтоимость Цикл
			Если не СтрокаКорректировки.Базис_БезНДС =0 Тогда
				СтрокаКорректировки.СуммаБезНДС = Окр(СтрокаКорректировки.СР_БезНДС*СтрокаКорректировки.ВключенВСтоимость_БезНДС/СтрокаКорректировки.Базис_БезНДС,2);
			КонецЕсли; 
			Если не СтрокаКорректировки.Базис_НДС =0 Тогда
		    	СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.ВключенВСтоимость_НДС/СтрокаКорректировки.Базис_НДС,2);
			КонецЕсли; 
		КонецЦикла; 
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Корректировки_НДСВключенныйВСтоимость,ТаблицаДвижений_НДСВключенныйВСтоимость);
		
		// Внесем корректирующие записи в регистр "НДС предъявленный"
		ТаблицаДвижений_НДСВключенныйВСтоимость.Колонки.Добавить("ВидДвижения");
		ТаблицаДвижений_НДСВключенныйВСтоимость.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
		ТаблицаДвижений_НДСВключенныйВСтоимость.Колонки.Добавить("Событие");
		ТаблицаДвижений_НДСВключенныйВСтоимость.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость,"Событие");

		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений_НДСВключенныйВСтоимость,ТаблицаДвижений_НДСПредъявленный);
		
		ТаблицаДвижений_НДСВключенныйВСтоимость.Колонки.Удалить("ВидДвижения");
		ТаблицаДвижений_НДСВключенныйВСтоимость.Колонки.Удалить("Событие");
		
		
		Движения.НДСВключенныйВСтоимость.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСВключенныйВСтоимость.мТаблицаДвижений = ТаблицаДвижений_НДСВключенныйВСтоимость;
		Движения.НДСВключенныйВСтоимость.ДобавитьДвижение();

	КонецЕсли; //РеестрСчетовФактур.Итог("ЕстьВключениеВСтоимость")>0 Тогда

	// Далее корректировка регистра НДСПредъявленный не планируется
	// Заполним набор записей регистра полученным результатом
	Движения.НДСПредъявленный.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
	Движения.НДСПредъявленный.ДобавитьДвижение();
	
	
	// Если есть остатки в регистре косвенных расходов, необходимо пропорционально отразить 
	// там же и суммовую разницу
	Если РеестрСчетовФактур.Итог("ЕстьКосвенныеРасходы")>0 Тогда

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьКосвенныеРасходы");
		ОтборПостроитель["ЕстьКосвенныеРасходы"].Значение = 1;
		ОтборПостроитель["ЕстьКосвенныеРасходы"].Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСКосвенныеРасходы = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель["ЕстьКосвенныеРасходы"].Использование = Ложь;
		Корректировки_НДСКосвенныеРасходы.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		Корректировки_НДСКосвенныеРасходы.Колонки.Добавить("НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Для каждого СтрокаКорректировки Из Корректировки_НДСКосвенныеРасходы Цикл
			Если не СтрокаКорректировки.Базис_БезНДС =0 Тогда
				СтрокаКорректировки.СуммаБезНДС = Окр(СтрокаКорректировки.СР_БезНДС*СтрокаКорректировки.Косвенные_БезНДС/СтрокаКорректировки.Базис_БезНДС,2);
			КонецЕсли; 
			Если не СтрокаКорректировки.Базис_НДС =0 Тогда
				СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.Косвенные_НДС/СтрокаКорректировки.Базис_НДС,2);
			КонецЕсли; 
		КонецЦикла; 
		
		// Если суммовая разница невелика, велика вероятность того, что в реестре СФ присутствуют записи
		// на которые суммовая разница не относится
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаРеестра Из Корректировки_НДСКосвенныеРасходы Цикл
			Если СтрокаРеестра.СуммаБезНДС=0 
				и СтрокаРеестра.НДС=0 
				тогда
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				продолжить;
			КонецЕсли; 
		КонецЦикла; 
		Если СтрокиКУдалению.Количество()>0 Тогда
		    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Корректировки_НДСКосвенныеРасходы.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли; 
		
		Корректировки_НДСКосвенныеРасходы.Свернуть("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС","СуммаБезНДС,НДС");
		
		ОтразитьСуммовыеРазницыПоКосвеннымРасходам(СтруктураШапкиДокумента,Корректировки_НДСКосвенныеРасходы, Движения);
		
	КонецЕсли; //РеестрСчетовФактур.Итог("ЕстьКосвенныеРасходы")>0 Тогда
	
	// Если есть остатки в регистре ОС (НМА), необходимо пропорционально отразить 
	// там же и суммовую разницу
	Если РеестрСчетовФактур.Итог("ЕстьОСНМА")>0 Тогда

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьОСНМА");
		ОтборПостроитель["ЕстьОСНМА"].Значение = 1;
		ОтборПостроитель["ЕстьОСНМА"].Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСпоОСиНМА = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель["ЕстьОСНМА"].Использование = Ложь;
		Корректировки_НДСпоОСиНМА.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		Корректировки_НДСпоОСиНМА.Колонки.Добавить("НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Для каждого СтрокаКорректировки Из Корректировки_НДСпоОСиНМА Цикл
			Если не СтрокаКорректировки.Базис_БезНДС =0 Тогда
				СтрокаКорректировки.СуммаБезНДС = Окр(СтрокаКорректировки.СР_БезНДС*СтрокаКорректировки.ОС_БезНДС/СтрокаКорректировки.Базис_БезНДС,2);
			КонецЕсли; 
			Если не СтрокаКорректировки.Базис_НДС =0 Тогда
				СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.ОС_НДС/СтрокаКорректировки.Базис_НДС,2);
			КонецЕсли; 
		КонецЦикла; 
		
		// Если суммовая разница невелика, велика вероятность того, что в реестре СФ присутствуют записи
		// на которые суммовая разница не относится
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаРеестра Из Корректировки_НДСпоОСиНМА Цикл
			Если СтрокаРеестра.СуммаБезНДС=0 
				и СтрокаРеестра.НДС=0 
				тогда
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				продолжить;
			КонецЕсли; 
		КонецЦикла; 
		Если СтрокиКУдалению.Количество()>0 Тогда
		    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Корректировки_НДСпоОСиНМА.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли; 
		
		Корректировки_НДСпоОСиНМА.Свернуть("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС","СуммаБезНДС,НДС");
		
		ОтразитьСуммовыеРазницыПоОСНМА(СтруктураШапкиДокумента,Корректировки_НДСпоОСиНМА,Движения);
		
	КонецЕсли; //Если РеестрСчетовФактур.Итог("ЕстьОСНМА")>0 Тогда

	// Если есть остатки в регистре партий, необходимо пропорционально отразить 
	// там же и суммовую разницу
	Если РеестрСчетовФактур.Итог("ЕстьОстаткиПоПартиям")>0 Тогда

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьОстаткиПоПартиям");
		ОтборПостроитель["ЕстьОстаткиПоПартиям"].Значение = 1;
		ОтборПостроитель["ЕстьОстаткиПоПартиям"].Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСПартииТоваров = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель["ЕстьОстаткиПоПартиям"].Использование = Ложь;
		Корректировки_НДСПартииТоваров.Колонки.Добавить("Стоимость",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		Корректировки_НДСПартииТоваров.Колонки.Добавить("НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Для Каждого СтрокаКорректировки Из Корректировки_НДСПартииТоваров Цикл
			
			Если Не КорректироватьПоРасчетамНА Тогда
			
				Если Не СтрокаКорректировки.Базис_СНДС = 0 Тогда
					СтрокаКорректировки.Стоимость = Окр(СтрокаКорректировки.СуммоваяРазница*СтрокаКорректировки.Партии_СНДС/СтрокаКорректировки.Базис_СНДС,2);
				КонецЕсли; 
				Если Не СтрокаКорректировки.Базис_НДС = 0 Тогда
					СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.Партии_НДС/СтрокаКорректировки.Базис_НДС,2);
				КонецЕсли; 
				
			Иначе
				
				Если Не СтрокаКорректировки.Базис_СНДС = 0 Тогда
					СтрокаКорректировки.Стоимость = Окр(СтрокаКорректировки.СуммоваяРазница*СтрокаКорректировки.Партии_СНДС/СтрокаКорректировки.Базис_СНДС,2);
				КонецЕсли; 
				Если Не СтрокаКорректировки.Базис_НДС = 0 Тогда
					СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.Партии_НДС/СтрокаКорректировки.Базис_НДС,2);
				КонецЕсли; 
				
			КонецЕсли;
				
		КонецЦикла; 
		
		// Если суммовая разница невелика, велика вероятность того, что в реестре СФ присутствуют записи
		// на которые суммовая разница не относится
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаРеестра Из Корректировки_НДСПартииТоваров Цикл
			Если СтрокаРеестра.Стоимость=0 
				и СтрокаРеестра.НДС=0 
				тогда
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				продолжить;
			КонецЕсли; 
		КонецЦикла; 
		Если СтрокиКУдалению.Количество()>0 Тогда
		    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Корректировки_НДСПартииТоваров.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли; 
		
		Корректировки_НДСПартииТоваров.Свернуть("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС","Стоимость,НДС");
		
		ОтразитьСуммовыеРазницыПоПартиям(СтруктураШапкиДокумента,Корректировки_НДСПартииТоваров,Движения);
		
	КонецЕсли; //Если РеестрСчетовФактур.Итог("ЕстьОстаткиПоПартиям")>0 Тогда
	
	// Если были обороты по предположению 0%, необходимо пропорционально отразить 
	// там же и суммовую разницу
	Если РеестрСчетовФактур.Итог("ЕстьРеализация0")>0 Тогда

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьРеализация0");
		ОтборПостроитель["ЕстьРеализация0"].Значение = 1;
		ОтборПостроитель["ЕстьРеализация0"].Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСПредъявленныйРеализация0 = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель["ЕстьРеализация0"].Использование = Ложь;
		Корректировки_НДСПредъявленныйРеализация0.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		Корректировки_НДСПредъявленныйРеализация0.Колонки.Добавить("НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Для каждого СтрокаКорректировки Из Корректировки_НДСПредъявленныйРеализация0 Цикл
			Если не СтрокаКорректировки.Базис_БезНДС =0 Тогда
				СтрокаКорректировки.СуммаБезНДС = Окр(СтрокаКорректировки.СР_БезНДС*СтрокаКорректировки.Реализация0_БезНДС/СтрокаКорректировки.Базис_БезНДС,2);
			КонецЕсли; 
			Если не СтрокаКорректировки.Базис_НДС =0 Тогда
				СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.Реализация0_НДС/СтрокаКорректировки.Базис_НДС,2);
			КонецЕсли; 
		КонецЦикла; 
		
		// Если суммовая разница невелика, велика вероятность того, что в реестре СФ присутствуют записи
		// на которые суммовая разница не относится
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаРеестра Из Корректировки_НДСПредъявленныйРеализация0 Цикл
			Если СтрокаРеестра.СуммаБезНДС=0 
				и СтрокаРеестра.НДС=0 
				тогда
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				продолжить;
			КонецЕсли; 
		КонецЦикла; 
		Если СтрокиКУдалению.Количество()>0 Тогда
		    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Корректировки_НДСПредъявленныйРеализация0.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли; 
		
		Корректировки_НДСПредъявленныйРеализация0.Свернуть("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС","СуммаБезНДС,НДС");
		
		ОтразитьСуммовыеРазницыПоРеализации0_НДСПредъявленный(СтруктураШапкиДокумента,Корректировки_НДСПредъявленныйРеализация0,Движения);
		
	КонецЕсли; //Если РеестрСчетовФактур.Итог("ЕстьОстаткиПоПартиям")>0 Тогда
	
КонецПроцедуры // КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение()

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - сформировать дерево остатков по регистрам НДС (приобретение), содержащее
// суммы зарегистрированных событий, для последующей их корректировки
//
Функция ПолучитьДанныеПоКорректируемымСчетамФактурам_Приобретение(СтруктураШапкиДокумента, ТаблицаСуммовыхРазниц, Движения)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("КонецПериода",       Новый Граница(СтруктураШапкиДокумента.Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Предположение0",     Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("ТаблицаСуммовыхРазниц", ТаблицаСуммовыхРазниц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСуммовыхРазниц.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ СписокСчетовФактур
	|ИЗ
	|	&ТаблицаСуммовыхРазниц КАК ТаблицаСуммовыхРазниц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Организация,
	|	НДСПредъявленныйОбороты.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОбороты.ВидЦенности,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	НДСПредъявленныйОбороты.СчетУчетаНДС,
	|	НДСПредъявленныйОбороты.Поставщик,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОбороты.СуммаБезНДСПриход, 0) + ЕСТЬNULL(НДСПредъявленныйОбороты.НДСПриход, 0)) КАК Базис_СНДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОбороты.СуммаБезНДСПриход, 0)) КАК Базис_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОбороты.НДСПриход, 0)) КАК Базис_НДС,
	|	СУММА(ЕСТЬNULL(НДСКосвенныеРасходыОстатки.СуммаБезНДСОстаток, 0)) КАК Косвенные_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСКосвенныеРасходыОстатки.НДСОстаток, 0)) КАК Косвенные_НДС,
	|	СУММА(ЕСТЬNULL(НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток, 0)) КАК Партии_СНДС,
	|	СУММА(ЕСТЬNULL(НДСПоПриобретеннымЦенностямОстатки.НДСОстаток, 0)) КАК Партии_НДС,
	|	СУММА(ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0)) КАК ОС_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) КАК ОС_НДС,
	|	СУММА(ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.СуммаБезНДСОборот, 0)) КАК ВключенВСтоимость_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.НДСОборот, 0)) КАК ВключенВСтоимость_НДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход, 0)) КАК Реализация0_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Обороты.НДСПриход, 0)) КАК Реализация0_НДС,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСПредъявленныйРеализация0Обороты.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход = 0
	|							И НДСПредъявленныйРеализация0Обороты.НДСПриход = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьРеализация0,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСКосвенныеРасходыОстатки.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСКосвенныеРасходыОстатки.СуммаБезНДСОстаток = 0
	|							И НДСКосвенныеРасходыОстатки.НДСОстаток = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьКосвенныеРасходы,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСпоОСиНМАОстатки.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСпоОСиНМАОстатки.СуммаБезНДСОстаток = 0
	|							И НДСпоОСиНМАОстатки.НДСОстаток = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьОСНМА,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСПоПриобретеннымЦенностямОстатки.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток = 0
	|							И НДСПоПриобретеннымЦенностямОстатки.НДСОстаток = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьОстаткиПоПартиям,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСВключенныйВСтоимостьОбороты.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСВключенныйВСтоимостьОбороты.СуммаБезНДСОборот = 0
	|							И НДСВключенныйВСтоимостьОбороты.НДСОборот = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьВключениеВСтоимость
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И СчетФактура В
	|					(ВЫБРАТЬ
	|						СписокСчетовФактур.СчетФактура
	|					ИЗ
	|						СписокСчетовФактур)) КАК НДСПредъявленныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(
	|				&КонецПериода,
	|				Организация = &Организация
	|					И СчетФактура В
	|						(ВЫБРАТЬ
	|							СписокСчетовФактур.СчетФактура
	|						ИЗ
	|							СписокСчетовФактур)) КАК НДСПоПриобретеннымЦенностямОстатки
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСПоПриобретеннымЦенностямОстатки.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСПоПриобретеннымЦенностямОстатки.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСПоПриобретеннымЦенностямОстатки.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСПоПриобретеннымЦенностямОстатки.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Обороты(
	|				,
	|				&КонецПериода,
	|				Период,
	|				Организация = &Организация
	|					И СчетФактура В
	|						(ВЫБРАТЬ
	|							СписокСчетовФактур.СчетФактура
	|						ИЗ
	|							СписокСчетовФактур)
	|					И Состояние = &Предположение0) КАК НДСПредъявленныйРеализация0Обороты
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСПредъявленныйРеализация0Обороты.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСПредъявленныйРеализация0Обороты.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСПредъявленныйРеализация0Обороты.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСКосвенныеРасходы.Остатки(
	|				&КонецПериода,
	|				Организация = &Организация
	|					И СчетФактура В
	|						(ВЫБРАТЬ
	|							СписокСчетовФактур.СчетФактура
	|						ИЗ
	|							СписокСчетовФактур)) КАК НДСКосвенныеРасходыОстатки
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСКосвенныеРасходыОстатки.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСКосвенныеРасходыОстатки.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСКосвенныеРасходыОстатки.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСКосвенныеРасходыОстатки.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСпоОСиНМА.Остатки(
	|				&КонецПериода,
	|				Организация = &Организация
	|					И СчетФактура В
	|						(ВЫБРАТЬ
	|							СписокСчетовФактур.СчетФактура
	|						ИЗ
	|							СписокСчетовФактур)) КАК НДСпоОСиНМАОстатки
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСпоОСиНМАОстатки.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСпоОСиНМАОстатки.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСпоОСиНМАОстатки.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСпоОСиНМАОстатки.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСВключенныйВСтоимость.Обороты(
	|				,
	|				&КонецПериода,
	|				Период,
	|				Организация = &Организация
	|					И СчетФактура В
	|						(ВЫБРАТЬ
	|							СписокСчетовФактур.СчетФактура
	|						ИЗ
	|							СписокСчетовФактур)) КАК НДСВключенныйВСтоимостьОбороты
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСВключенныйВСтоимостьОбороты.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСВключенныйВСтоимостьОбороты.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСВключенныйВСтоимостьОбороты.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСВключенныйВСтоимостьОбороты.СчетУчетаНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйОбороты.Организация,
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	НДСПредъявленныйОбороты.ВидЦенности,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	НДСПредъявленныйОбороты.СчетУчетаНДС,
	|	НДСПредъявленныйОбороты.Поставщик
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки,
	|	РегистрНакопления.НДСКосвенныеРасходы.Остатки,
	|	РегистрНакопления.НДСПредъявленный.Обороты,
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Обороты,
	|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки,
	|	РегистрНакопления.НДСВключенныйВСтоимость.Обороты";

	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
				
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "НДСПредъявленный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
		СтруктураПараметров.Вставить("ИсточникДанных", ТаблицаСуммовыхРазниц);
		
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("СчетФактура", "Сделка");
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
		
		СтруктураПараметров.ИмяТаблицы = "НДСВключенныйВСтоимость";
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
				
		СтруктураПараметров.ИмяТаблицы = "НДСпоОСиНМА";
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
				
		СтруктураПараметров.ИмяТаблицы = "НДСКосвенныеРасходы";
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
				
		СтруктураПараметров.ИмяТаблицы = "НДСПоПриобретеннымЦенностям";
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
				
		СтруктураПараметров.ИмяТаблицы = "НДСПредъявленныйРеализация0";
		ЗначенияБлокировки.Вставить("Состояние", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение); 
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
				
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);

КонецФункции // ПолучитьДанныеПоКорректируемымСчетамФактурам_Приобретение()

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - отразить суммовые разницы по косвенным расходам
Процедура ОтразитьСуммовыеРазницыПоКосвеннымРасходам(СтруктураШапкиДокумента,ТаблицаСуммовыхРазниц,Движения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидыЦенностей",ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавкиНДС",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	Запрос.УстановитьПараметр("СписокСчетаУчетаНДС",ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетУчетаНДС"),Истина));
	
	Запрос.УстановитьПараметр("КонецПериодаДата",   СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("КонецПериода",       Новый Граница(СтруктураШапкиДокумента.Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("НачалоПериода",      НачалоКвартала(СтруктураШапкиДокумента.Дата));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСКосвенныеРасходыОстатки.Организация,
	|	НДСКосвенныеРасходыОстатки.СчетФактура,
	|	НДСКосвенныеРасходыОстатки.ВидЦенности,
	|	НДСКосвенныеРасходыОстатки.СтавкаНДС,
	|	НДСКосвенныеРасходыОстатки.СчетУчетаНДС,
	|	НДСКосвенныеРасходыОстатки.НДСВключенВСтоимость,
	|	НДСКосвенныеРасходы.СуммаБезНДС,
	|	НДСКосвенныеРасходы.НДС,
	|	НДСКосвенныеРасходы.СтатьяЗатрат,
	|	НДСКосвенныеРасходы.СчетЗатрат,
	|	НДСКосвенныеРасходы.Субконто1,
	|	НДСКосвенныеРасходы.Субконто2,
	|	НДСКосвенныеРасходы.Субконто3
	|ИЗ
	|	РегистрНакопления.НДСКосвенныеРасходы.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И СтавкаНДС В (&СписокСтавкиНДС)
	|				И СчетУчетаНДС В (&СписокСчетаУчетаНДС)) КАК НДСКосвенныеРасходыОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСКосвенныеРасходы КАК НДСКосвенныеРасходы
	|		ПО НДСКосвенныеРасходыОстатки.Организация = НДСКосвенныеРасходы.Организация
	|			И НДСКосвенныеРасходыОстатки.СчетФактура = НДСКосвенныеРасходы.СчетФактура
	|			И НДСКосвенныеРасходыОстатки.ВидЦенности = НДСКосвенныеРасходы.ВидЦенности
	|			И НДСКосвенныеРасходыОстатки.СтавкаНДС = НДСКосвенныеРасходы.СтавкаНДС
	|			И НДСКосвенныеРасходыОстатки.СчетУчетаНДС = НДСКосвенныеРасходы.СчетУчетаНДС
	|			И НДСКосвенныеРасходыОстатки.НДСВключенВСтоимость = НДСКосвенныеРасходы.НДСВключенВСтоимость
	|			И (НДСКосвенныеРасходы.Период >= &НачалоПериода)
	|			И (НДСКосвенныеРасходы.Период <= &КонецПериодаДата)
	|			И НДСКосвенныеРасходыОстатки.НДСВключенВСтоимость = НДСКосвенныеРасходы.НДСВключенВСтоимость
	|ГДЕ
	|	(НЕ(ЕСТЬNULL(НДСКосвенныеРасходыОстатки.СуммаБезНДСОборот, 0) = 0
	|				И ЕСТЬNULL(НДСКосвенныеРасходыОстатки.НДСОборот, 0) = 0))
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.НДСКосвенныеРасходы.Обороты";

	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
				
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "НДСКосвенныеРасходы");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(НачалоКвартала(СтруктураШапкиДокумента.Дата), СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
		СтруктураПараметров.Вставить("ИсточникДанных", ТаблицаСуммовыхРазниц);
		
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("СчетФактура, СтавкаНДС, СчетУчетаНДС", "СчетФактура, СтавкаНДС, СчетУчетаНДС");
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
						
	КонецЕсли;
	
	ТаблицаЗаписей_НДСКосвенныеРасходы = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Распределение = Новый Структура("СуммаБезНДС,НДС");
	Отбор         = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС");
	
	ТаблицаЗаписей_НДСКосвенныеРасходы = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц,ТаблицаЗаписей_НДСКосвенныеРасходы,Распределение,Отбор);
	
	// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	// на которые суммовая разница не относится
	СтрокиКУдалению = новый Массив();
	Для каждого СтрокаРеестра Из ТаблицаЗаписей_НДСКосвенныеРасходы Цикл
		Если СтрокаРеестра.СуммаБезНДС=0 
			и СтрокаРеестра.НДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаЗаписей_НДСКосвенныеРасходы.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТаблицаЗаписей_НДСКосвенныеРасходы.Количество()>0 Тогда
		
		Движения.НДСКосвенныеРасходы.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаЗаписей_НДСКосвенныеРасходы;
		Движения.НДСКосвенныеРасходы.ВыполнитьПриход();
	КонецЕсли; 

КонецПроцедуры

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - отразить суммовые разницы по ОС (НМА)
Процедура ОтразитьСуммовыеРазницыПоОСНМА(СтруктураШапкиДокумента,ТаблицаСуммовыхРазниц,Движения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидыЦенностей",ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавкиНДС",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	Запрос.УстановитьПараметр("СписокСчетаУчетаНДС",ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетУчетаНДС"),Истина));
	
	Запрос.УстановитьПараметр("КонецПериода",       Новый Граница(СтруктураШапкиДокумента.Дата, ВидГраницы.Исключая));
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	НДСпоОСиНМАОстатки.Организация,
	|	НДСпоОСиНМАОстатки.СчетФактура,
	|	НДСпоОСиНМАОстатки.ВидЦенности,
	|	НДСпоОСиНМАОстатки.СтавкаНДС,
	|	НДСпоОСиНМАОстатки.СчетУчетаНДС,
	|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость,
	|	НДСпоОСиНМАОстатки.Объект,
	|	НДСпоОСиНМАОстатки.Состояние,
	|	НДСпоОСиНМАОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСпоОСиНМАОстатки.НДСОстаток КАК НДС,
	|	НДСпоОСиНМАОстатки.НеВлияетНаВычет
	|ИЗ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И СтавкаНДС В (&СписокСтавкиНДС)
	|				И СчетУчетаНДС В (&СписокСчетаУчетаНДС)) КАК НДСпоОСиНМАОстатки
	|ГДЕ
	|	(НЕ(ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) = 0
	|				И ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0) = 0))
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки";

	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
				
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "НДСпоОСиНМА");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
		СтруктураПараметров.Вставить("ИсточникДанных", ТаблицаСуммовыхРазниц);
		
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("СчетФактура, СтавкаНДС, СчетУчетаНДС", "СчетФактура, СтавкаНДС, СчетУчетаНДС");
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
						
	КонецЕсли;
	
	ТаблицаЗаписей_НДСпоОСиНМА = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Распределение = Новый Структура("СуммаБезНДС,НДС");
	Отбор         = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС");
	
	ТаблицаЗаписей_НДСпоОСиНМА = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц,ТаблицаЗаписей_НДСпоОСиНМА,Распределение,Отбор);
	
	// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	// на которые суммовая разница не относится
	СтрокиКУдалению = новый Массив();
	Для каждого СтрокаРеестра Из ТаблицаЗаписей_НДСпоОСиНМА Цикл
		Если СтрокаРеестра.СуммаБезНДС=0 
			и СтрокаРеестра.НДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаЗаписей_НДСпоОСиНМА.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТаблицаЗаписей_НДСпоОСиНМА.Количество()>0 Тогда
		
		Движения.НДСпоОСиНМА.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаЗаписей_НДСпоОСиНМА;
		Движения.НДСпоОСиНМА.ВыполнитьПриход();
	КонецЕсли; 

КонецПроцедуры

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - отразить суммовые разницы по остаткам партий
Процедура ОтразитьСуммовыеРазницыПоПартиям(СтруктураШапкиДокумента,ТаблицаСуммовыхРазниц,Движения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидыЦенностей",ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавкиНДС",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	Запрос.УстановитьПараметр("СписокСчетаУчетаНДС",ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетУчетаНДС"),Истина));
	
	Запрос.УстановитьПараметр("КонецПериода",       Новый Граница(СтруктураШапкиДокумента.Дата, ВидГраницы.Исключая));
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	НДСПоПриобретеннымЦенностямОстатки.Организация,
	|	НДСПоПриобретеннымЦенностямОстатки.СчетУчета,
	|	НДСПоПриобретеннымЦенностямОстатки.Номенклатура,
	|	НДСПоПриобретеннымЦенностямОстатки.Партия,
	|	НДСПоПриобретеннымЦенностямОстатки.Склад,
	|	НДСПоПриобретеннымЦенностямОстатки.СчетФактура,
	|	НДСПоПриобретеннымЦенностямОстатки.НДСВключенВСтоимость,
	|	НДСПоПриобретеннымЦенностямОстатки.ВидЦенности,
	|	НДСПоПриобретеннымЦенностямОстатки.СчетУчетаНДС,
	|	НДСПоПриобретеннымЦенностямОстатки.СтавкаНДС,
	|	НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток КАК Стоимость,
	|	НДСПоПриобретеннымЦенностямОстатки.НДСОстаток КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И СтавкаНДС В (&СписокСтавкиНДС)
	|				И СчетУчетаНДС В (&СписокСчетаУчетаНДС)) КАК НДСПоПриобретеннымЦенностямОстатки
	|ГДЕ
	|	(НЕ(ЕСТЬNULL(НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток, 0) = 0
	|				И ЕСТЬNULL(НДСПоПриобретеннымЦенностямОстатки.НДСОстаток, 0) = 0))
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки";

	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
				
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "НДСПоПриобретеннымЦенностям");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(,СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
		СтруктураПараметров.Вставить("ИсточникДанных", ТаблицаСуммовыхРазниц);
		
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("СчетФактура, СтавкаНДС, СчетУчетаНДС", "СчетФактура, СтавкаНДС, СчетУчетаНДС");
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
						
	КонецЕсли;

	ТаблицаЗаписей_НДСПартииТоваров = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Распределение = Новый Структура("Стоимость,НДС");
	Отбор         = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС");
	
	ТаблицаЗаписей_НДСПартииТоваров = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц,ТаблицаЗаписей_НДСПартииТоваров,Распределение,Отбор);
	
	// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	// на которые суммовая разница не относится
	СтрокиКУдалению = новый Массив();
	Для каждого СтрокаРеестра Из ТаблицаЗаписей_НДСПартииТоваров Цикл
		Если СтрокаРеестра.Стоимость=0 
			и СтрокаРеестра.НДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаЗаписей_НДСПартииТоваров.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТаблицаЗаписей_НДСПартииТоваров.Количество()>0 Тогда
		
		Движения.НДСПоПриобретеннымЦенностям.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСПоПриобретеннымЦенностям.мТаблицаДвижений = ТаблицаЗаписей_НДСПартииТоваров;
		Движения.НДСПоПриобретеннымЦенностям.ВыполнитьПриход();
	КонецЕсли; 

КонецПроцедуры

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - отразить суммовые разницы по реализации 0%
Процедура ОтразитьСуммовыеРазницыПоРеализации0_НДСПредъявленный(СтруктураШапкиДокумента,ТаблицаСуммовыхРазниц,Движения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидыЦенностей",ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавкиНДС",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	Запрос.УстановитьПараметр("СписокСчетаУчетаНДС",ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетУчетаНДС"),Истина));
	СостоянияПредъявленный = Новый СписокЗначений;
	СостоянияПредъявленный.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	СостоянияПредъявленный.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	Запрос.УстановитьПараметр("СостоянияПредъявленный", СостоянияПредъявленный);
	Запрос.УстановитьПараметр("СостоянияОжидание", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("КонецПериода",       Новый Граница(СтруктураШапкиДокумента.Дата, ВидГраницы.Исключая));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0Обороты.Организация,
	|	НДСПредъявленныйРеализация0Обороты.СчетФактура,
	|	НДСПредъявленныйРеализация0Обороты.Состояние,
	|	НДСПредъявленныйРеализация0Обороты.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Обороты.ВидЦенности,
	|	НДСПредъявленныйРеализация0Обороты.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход)
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход - НДСПредъявленныйРеализация0Обороты.СуммаБезНДСРасход)
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.НДСПриход)
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.НДСПриход - НДСПредъявленныйРеализация0Обороты.НДСРасход)
	|	КОНЕЦ КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Обороты(
	|			,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И СтавкаНДС В (&СписокСтавкиНДС)
	|				И СчетУчетаНДС В (&СписокСчетаУчетаНДС)) КАК НДСПредъявленныйРеализация0Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйРеализация0Обороты.Организация,
	|	НДСПредъявленныйРеализация0Обороты.СчетФактура,
	|	НДСПредъявленныйРеализация0Обороты.Состояние,
	|	НДСПредъявленныйРеализация0Обороты.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Обороты.ВидЦенности,
	|	НДСПредъявленныйРеализация0Обороты.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Обороты";

	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
				
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "НДСПредъявленныйРеализация0");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
		СтруктураПараметров.Вставить("ИсточникДанных", ТаблицаСуммовыхРазниц);
		
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("СчетФактура, СтавкаНДС, СчетУчетаНДС", "СчетФактура, СтавкаНДС, СчетУчетаНДС");
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
						
	КонецЕсли;

	ТаблицаЗаписей_НДСПредъявленныйРеализация0 = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Счетчик = ТаблицаЗаписей_НДСПредъявленныйРеализация0.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		СтрокаТаблицы = ТаблицаЗаписей_НДСПредъявленныйРеализация0[Счетчик];
		Если (СтрокаТаблицы.СуммаБезНДС = 0) и (СтрокаТаблицы.НДС = 0) Тогда 
			ТаблицаЗаписей_НДСПредъявленныйРеализация0.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Распределение = Новый Структура("СуммаБезНДС,НДС");
	Отбор         = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС");
	
	ТаблицаЗаписей_НДСПредъявленныйРеализация0 = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц, ТаблицаЗаписей_НДСПредъявленныйРеализация0, Распределение, Отбор);
	
	 //Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	 //на которые суммовая разница не относится
	СтрокиКУдалению = новый Массив();
	Для каждого СтрокаРеестра Из ТаблицаЗаписей_НДСПредъявленныйРеализация0 Цикл
		Если СтрокаРеестра.СуммаБезНДС=0 
			и СтрокаРеестра.НДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаЗаписей_НДСПредъявленныйРеализация0.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТаблицаЗаписей_НДСПредъявленныйРеализация0.Количество()>0 Тогда
		
		Движения.НДСПредъявленныйРеализация0.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаЗаписей_НДСПредъявленныйРеализация0;
		Движения.НДСПредъявленныйРеализация0.ВыполнитьПриход();
		
	КонецЕсли; 

КонецПроцедуры  // ОтразитьСуммовыеРазницыПоРеализации0_НДСПредъявленный()

//  ПО НДС ПРЕДЪЯВЛЕННОМУ ПО РЕАЛИЗАЦИИ
//////////////////////////////////////////////////////////////////////////

//  РЕГИСТРАЦИЯ СУММОВЫХ РАЗНИЦ В ПОДСИСТЕМЕ НДС
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//  ДВИЖЕНИЯ ПО НДС НАЛОГОВОГО АГЕНТА

Процедура ОтразитьНДСНалоговогоАгентаКомиссионер(СтруктураШапкиДокумента, ТаблицаВыручки, Движения) Экспорт
	
	Если СтруктураШапкиДокумента.Дата < '20060101'
		или ТаблицаВыручки.Колонки.Найти("Комиссионный") = Неопределено 
		Или ТаблицаВыручки.Колонки.Найти("ДоговорКомиссии") = Неопределено
		Или ТаблицаВыручки.Найти(Истина,"Комиссионный") = Неопределено 
		Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьКомитент = ТаблицаВыручки.Колонки.Найти("Комитент") <> Неопределено;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаВыручки Цикл
			ОтражатьНДСКомитента = СтрокаТаблицы.Комиссионный И СтрокаТаблицы.ДоговорКомиссии.УчетАгентскогоНДС;
			Если ОтражатьНДСКомитента Тогда
					
				// Нужно дополнительно сформировать проводку по начислению НДС налогового агента
				Проводка = Движения.Хозрасчетный.Добавить();

				Проводка.Период 		= СтруктураШапкиДокумента.Дата;
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
				Проводка.Содержание 	= "Начислен НДС в качестве налогового агента";

				Проводка.СчетДт			= СтрокаТаблицы.СчетРасчетовСКомитентом;
				Если ЕстьКомитент Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтрокаТаблицы.Комитент);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтрокаТаблицы.ДоговорКомиссии.Владелец);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры", СтрокаТаблицы.ДоговорКомиссии);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
									
				Если СтрокаТаблицы.СчетРасчетовСКомитентом.Валютный Тогда
					Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтрокаТаблицы.ВалютаРасчетовСКомитентом тогда
						//Если валюта расчетов с комитентом совпадает с валютой расчетов по договору, считаем что и курсы совпадают.
						Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.НДСВал;
					Иначе

						ДанныеОВалютеРасчетовСКомитентом = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаТаблицы.ВалютаРасчетовСКомитентом,СтруктураШапкиДокумента.Дата);

						Проводка.ВалютаДт        = СтрокаТаблицы.ВалютаРасчетовСКомитентом;
						Проводка.ВалютнаяСуммаДт = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС
													, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,СтрокаТаблицы.ВалютаРасчетовСКомитентом
													,1,ДанныеОВалютеРасчетовСКомитентом.Курс
													,1,ДанныеОВалютеРасчетовСКомитентом.Кратность);

					КонецЕсли;
				КонецЕсли;
									
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				
				Проводка.Сумма = СтрокаТаблицы.НДС;
				
				Если ЕстьКомитент Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтрокаТаблицы.Комитент);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтрокаТаблицы.ДоговорКомиссии.Владелец);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", СтрокаТаблицы.ДоговорКомиссии);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при поступлении оплаты.
// Отражает начисление НДС налогового агента в подсистеме учета НДС
//
Процедура СформироватьДвиженияНалоговыйАгентПоОплате(СтруктураШапкиДокумента, ТаблицаОплаты, Движения) Экспорт
	
	Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь и  УчетнаяПолитика.УпрощенныйУчетНДС));
	КонецЕсли; 
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(
		СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) 
		И Не СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.УчетАгентскогоНДС
		Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда 
		
		ТаблицаДвижений_НДСПредъявленный = Неопределено;
		ТаблицаДвижений_НДСНачисленный = Неопределено;
		
	Иначе		
		ТаблицаДвижений_НДСЗаписиКнигиПродаж = Неопределено;
	КонецЕсли;
	
	ДвиженияХозрасчетный = Движения.Хозрасчетный;
						
	СчетУчетаРасчетовПоНДС = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
	
	СчетНДС = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОплаты Цикл
		
		Если Не СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
			Если ТаблицаДвижений_НДСПредъявленный = Неопределено Тогда
				ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
			КонецЕсли;
			Если ТаблицаДвижений_НДСНачисленный = Неопределено Тогда
				ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
			КонецЕсли;
			
			// НДС начисленный
			НовоеДвижение = ТаблицаДвижений_НДСНачисленный.Добавить();
			НовоеДвижение.Организация = СтруктураШапкиДокумента.Организация;
			НовоеДвижение.Покупатель = СтруктураШапкиДокумента.Контрагент;
			НовоеДвижение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
			НовоеДвижение.СчетФактура = СтрокаТаблицы.СчетФактура;
			НовоеДвижение.ВидЦенности = СтрокаТаблицы.ВидЦенности;
			НовоеДвижение.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
			НовоеДвижение.ВидНачисления = Перечисления.НДСВидНачисления.НДСНачисленКУплате;
				
			НовоеДвижение.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДС;
			НовоеДвижение.НДС = СтрокаТаблицы.СуммаНДС;
				
			НовоеДвижение.Событие = Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
			НовоеДвижение.ДатаСобытия = СтруктураШапкиДокумента.Дата;
			НовоеДвижение.СчетУчетаНДС	= СчетНДС;
				
			НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
			
		Иначе
			
			// Запись книги продаж при упрощенном учете НДС
			Если ТаблицаДвижений_НДСЗаписиКнигиПродаж = Неопределено Тогда
				ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
			КонецЕсли;
			
			НовоеДвижение = ТаблицаДвижений_НДСЗаписиКнигиПродаж.Добавить();
			
			НовоеДвижение.Организация = СтруктураШапкиДокумента.Организация;
			
			НовоеДвижение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
			НовоеДвижение.ВидЦенности = СтрокаТаблицы.ВидЦенности;
			НовоеДвижение.Событие = Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
			
			НовоеДвижение.Покупатель = СтруктураШапкиДокумента.Контрагент;
			НовоеДвижение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
			НовоеДвижение.СчетФактура = СтруктураШапкиДокумента.ДокументОснование;
			НовоеДвижение.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
			НовоеДвижение.ДокументОплаты = СтруктураШапкиДокумента.ДокументОснование;
			НовоеДвижение.ДатаОплаты = СтруктураШапкиДокумента.ДокументОснование.Дата;
			
			НовоеДвижение.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
			НовоеДвижение.НДС = СтрокаТаблицы.СуммаНДС;
			
		КонецЕсли;
		
		// Проводки по БУ
		НовоеДвижение = ДвиженияХозрасчетный.Добавить();
		НовоеДвижение.Период = СтруктураШапкиДокумента.Дата;
		НовоеДвижение.Организация = СтруктураШапкиДокумента.Организация;
		НовоеДвижение.Содержание = "НДС";
		
		НовоеДвижение.СчетДт = СчетУчетаРасчетовПоНДС;
		НовоеДвижение.СчетКт = СчетНДС;
		НовоеДвижение.Сумма = СтрокаТаблицы.СуммаНДС;
		
		БухгалтерскийУчет.УстановитьСубконто(НовоеДвижение.СчетДт, НовоеДвижение.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(НовоеДвижение.СчетДт, НовоеДвижение.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
		
		БухгалтерскийУчет.УстановитьСубконто(НовоеДвижение.СчетКт, НовоеДвижение.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(НовоеДвижение.СчетКт, НовоеДвижение.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(НовоеДвижение.СчетКт, НовоеДвижение.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.ДокументОснование);
		
	КонецЦикла;
	
	Если Не СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		
		Если Не ТаблицаДвижений_НДСПредъявленный = Неопределено Тогда

			Движения.НДСПредъявленный.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
			Движения.НДСПредъявленный.ДобавитьДвижение();
		
		КонецЕсли; 

		Если Не ТаблицаДвижений_НДСНачисленный = Неопределено Тогда

			Движения.НДСНачисленный.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
			Движения.НДСНачисленный.ДобавитьДвижение();
		
		КонецЕсли; 
		
	Иначе
		
		Если Не ТаблицаДвижений_НДСЗаписиКнигиПродаж = Неопределено Тогда

			Движения.НДСЗаписиКнигиПродаж.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж;
			Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение();
		
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при перечислении налога.
// Отражает оплату НДС налогового агента в подсистеме учета НДС
//
Процедура СформироватьДвиженияОплатаАгентскогоНДСВБюджет(СтруктураШапкиДокумента, Движения) Экспорт
	
	Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь и  УчетнаяПолитика.УпрощенныйУчетНДС));
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.СубконтоДт2)
		Или Не СтруктураШапкиДокумента.СубконтоДт2.НалоговыйАгентПоОплате Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений_НДСРасчетыСПоставщиками = Движения.НДСРасчетыСПоставщиками.ВыгрузитьКолонки();
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Движения.НДСУчетРаспределенныхОплатПоставщикам.ВыгрузитьКолонки();
			
	// НДС расчеты с поставщиками
	НовоеДвижение = ТаблицаДвижений_НДСРасчетыСПоставщиками.Добавить();
	НовоеДвижение.Организация = СтруктураШапкиДокумента.Организация;
	НовоеДвижение.Поставщик = СтруктураШапкиДокумента.СубконтоДт1;
	НовоеДвижение.ДоговорКонтрагента = СтруктураШапкиДокумента.СубконтоДт2;
	НовоеДвижение.Документ = СтруктураШапкиДокумента.СубконтоДт3;
	НовоеДвижение.РасчетыСБюджетом = Истина;
	
	НовоеДвижение.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
		
	НовоеДвижение.ДатаСобытия = СтруктураШапкиДокумента.Дата;
		
	НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
		
	// НДС учет распределенных оплат поставщикам
	НовоеДвижение = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Добавить();
	НовоеДвижение.Организация = СтруктураШапкиДокумента.Организация;
	НовоеДвижение.СчетФактура = СтруктураШапкиДокумента.СубконтоДт3;
	НовоеДвижение.ДокументОплаты = СтруктураШапкиДокумента.Ссылка;
	НовоеДвижение.РасчетыСБюджетом = Истина;
	
	НовоеДвижение.РаспределеннаяСумма = СтруктураШапкиДокумента.СуммаДокумента;
		
	НовоеДвижение.ДатаСобытия = СтруктураШапкиДокумента.Дата;
		
	НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Если Не ТаблицаДвижений_НДСРасчетыСПоставщиками = Неопределено Тогда

		Движения.НДСРасчетыСПоставщиками.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;
		Движения.НДСРасчетыСПоставщиками.ДобавитьДвижение();
	
	КонецЕсли; 
	
	Если Не ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Неопределено Тогда

		Движения.НДСУчетРаспределенныхОплатПоставщикам.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.ДобавитьДвижение();
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура СформироватьДвиженияНалоговыйАгентПоОплате_КурсовыеРазницы(СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, Движения, Отказ) Экспорт
	
	Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь и  УчетнаяПолитика.УпрощенныйУчетНДС));
	КонецЕсли; 
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(
		СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) 
		И Не СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВзаиморасчетовСР = ТаблицаВзаиморасчетов.Скопировать(, "ВалютаВзаиморасчетов, ДокументРасчетов, Контрагент, ДоговорКонтрагента, СуммаБУ, СуммаВзаиморасчетов");
	ТаблицаВзаиморасчетовСР.Свернуть("ВалютаВзаиморасчетов, ДокументРасчетов, Контрагент, ДоговорКонтрагента", "СуммаБУ, СуммаВзаиморасчетов");
	ТаблицаВзаиморасчетовСР.Колонки.Добавить("СуммоваяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаВзаиморасчетовСР.Колонки.ДокументРасчетов.Имя = "СчетФактура";
		
	Для Каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетовСР Цикл
	
		Если СтрокаВзаиморасчетов.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
			Или СтрокаВзаиморасчетов.СчетФактура = СтруктураШапкиДокумента.Ссылка
			Или	Не СтрокаВзаиморасчетов.ДоговорКонтрагента.УчетАгентскогоНДС
			Или Не СтрокаВзаиморасчетов.ДоговорКонтрагента.НалоговыйАгентПоОплате Тогда
			Продолжить;
		КонецЕсли;
		
		КурсНаДатуПоступления = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаВзаиморасчетов.ВалютаВзаиморасчетов, СтрокаВзаиморасчетов.СчетФактура.Дата);
		СуммаБУПоКурсуПоступления = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаВзаиморасчетов.СуммаВзаиморасчетов, СтрокаВзаиморасчетов.ВалютаВзаиморасчетов,  СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																					КурсНаДатуПоступления.Курс, 1, КурсНаДатуПоступления.Кратность, 1);
		
		СтрокаВзаиморасчетов.СуммоваяРазница  = СтрокаВзаиморасчетов.СуммаБУ - СуммаБУПоКурсуПоступления;		
		
	КонецЦикла;
	
	КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение(СтруктураШапкиДокумента, ТаблицаВзаиморасчетовСР, Движения, Истина);
	
КонецПроцедуры

Процедура СформироватьПроводкиПоРазницамНалоговыйАгент(СтруктураШапкиДокумента, ТаблицаОплат, Движения)
	
	Для Каждого СтрокаТаблицы Из ТаблицаОплат Цикл
		
		Если СтрокаТаблицы.СР_НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период = СтруктураШапкиДокумента.Дата;
		
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание = "Корректировка НДС по договору " + СтрокаТаблицы.ДоговорКонтрагента;
		
		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаТаблицы.СчетФактура, Истина);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Поставщик, Истина);

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", СтрокаТаблицы.ДоговорКонтрагента);

		Проводка.Сумма = СтрокаТаблицы.СР_НДС;
		
	КонецЦикла;	
	
КонецПроцедуры

//  ДВИЖЕНИЯ ПО НДС НАЛОГОВОГО АГЕНТА
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//  УПРОЩЕННЫЙ УЧЕТ НДС

Процедура УпрощенныйНДС_СформироватьДвиженияПоНДСПредъявленномуПоставщиком(СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, Движения, Отказ) Экспорт
	
	Если ТаблицаПредъявленногоНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетНДС.УпрощенныйНДС_ПроводитьДокументПоНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	ЕстьПоставщикВТаблице = ТаблицаПредъявленногоНДС.Колонки.Найти("Поставщик") <> Неопределено;
	ЕстьСобытие = ТаблицаПредъявленногоНДС.Колонки.Найти("Событие") <> Неопределено;
	ЕстьСчетФактура = ТаблицаПредъявленногоНДС.Колонки.Найти("СчетФактура") <> Неопределено;
	СтавкаНДСВШапке = СтруктураШапкиДокумента.Свойство("СтавкаНДС") И ТаблицаПредъявленногоНДС.Колонки.Найти("СтавкаНДС") = Неопределено;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаПредъявленногоНДС Цикл
		
		НоваяЗапись 				= ТаблицаДвижений_НДСЗаписиКнигиПокупок.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
		
		НоваяЗапись.Организация = СтруктураШапкиДокумента.Организация;
		НоваяЗапись.Поставщик 	= ?(ЕстьПоставщикВТаблице, СтрокаТаблицы.Поставщик, СтруктураШапкиДокумента.Контрагент);
		НоваяЗапись.СчетФактура = ?(ЕстьСчетФактура, СтрокаТаблицы.СчетФактура, СтруктураШапкиДокумента.Ссылка);
		Если Не (НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
				Или НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
				Или НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные
				Или НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент
				Или (УчетНДС.ВидыЦенностиНалоговыйАгентПоступление().Найти(НоваяЗапись.ВидЦенности) <> Неопределено
					И НоваяЗапись.ДоговорКонтрагента.НалоговыйАгентПоОплате)) Тогда
			НоваяЗапись.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		НоваяЗапись.СтавкаНДС 	= ?(СтавкаНДСВШапке, СтруктураШапкиДокумента.СтавкаНДС, СтрокаТаблицы.СтавкаНДС);
		НоваяЗапись.Событие		= ?(ЕстьСобытие, СтрокаТаблицы.Событие, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету);
		НоваяЗапись.ДатаСобытия	= СтруктураШапкиДокумента.Дата;
		
	КонецЦикла;
	
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Активность, Период, Организация, Поставщик, ДоговорКонтрагента, СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС, Событие, ДатаСобытия, ДатаОплаты, ДокументОплаты, ЗаписьДополнительногоЛиста, КорректируемыйПериод", "СуммаБезНДС, НДС");
	
	Если ТаблицаДвижений_НДСЗаписиКнигиПокупок.Количество() > 0 Тогда

		Движения.НДСЗаписиКнигиПокупок.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
		Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаНачисленногоНДС, Движения, Отказ, СторноНачисления = Ложь) Экспорт
	
	Если ТаблицаНачисленногоНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетНДС.УпрощенныйНДС_ПроводитьДокументПоНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента") Тогда
		ВидДоговора = ?(СтруктураШапкиДокумента.Свойство("ВидДоговора"), СтруктураШапкиДокумента.ВидДоговора, СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора);
		УчетАгентскогоНДС = ?(СтруктураШапкиДокумента.Свойство("УчетАгентскогоНДС"), СтруктураШапкиДокумента.УчетАгентскогоНДС, СтруктураШапкиДокумента.ДоговорКонтрагента.УчетАгентскогоНДС);
		НалоговыйАгентПоОплате = ?(СтруктураШапкиДокумента.Свойство("НалоговыйАгентПоОплате"), СтруктураШапкиДокумента.НалоговыйАгентПоОплате, СтруктураШапкиДокумента.ДоговорКонтрагента.НалоговыйАгентПоОплате);
		Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
				И Не СтруктураШапкиДокумента.ВидДокумента = "ОтчетКомиссионераОПродажах"
				И Не УчетАгентскогоНДС Тогда
			Возврат;
		КонецЕсли;
		Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			И УчетАгентскогоНДС
			И НалоговыйАгентПоОплате Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	ЕстьПокупательВТаблице = ТаблицаНачисленногоНДС.Колонки.Найти("Покупатель") <> Неопределено;
	ЕстьСобытие = ТаблицаНачисленногоНДС.Колонки.Найти("Событие") <> Неопределено;
	ЕстьСчетФактура = ТаблицаНачисленногоНДС.Колонки.Найти("СчетФактура") <> Неопределено;
	СтавкаНДСВШапке = СтруктураШапкиДокумента.Свойство("СтавкаНДС") И ТаблицаНачисленногоНДС.Колонки.Найти("СтавкаНДС") = Неопределено;
	ЕстьСчетДоходов = ТаблицаНачисленногоНДС.Колонки.Найти("СчетДоходов") <> Неопределено;
	ЕстьИнформацияОКомиссии = ТаблицаНачисленногоНДС.Колонки.Найти("Комиссионный") <> Неопределено
								И ТаблицаНачисленногоНДС.Колонки.Найти("ДоговорКомиссии") <> Неопределено;
	ЕстьСчетУчета = ТаблицаНачисленногоНДС.Колонки.Найти("СчетУчета") <> Неопределено;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНачисленногоНДС Цикл
		
		Если ?(СтавкаНДСВШапке, СтруктураШапкиДокумента.СтавкаНДС, СтрокаТаблицы.СтавкаНДС) = Перечисления.СтавкиНДС.БезНДС
			И ЕстьСчетДоходов 
			И НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТаблицы.СчетДоходов) Тогда
			// Реализация, облагаемая ЕНВД не отражается в книге продаж
			Продолжить;
		КонецЕсли;
		
		ОтражатьНДСКомитента = ?(ЕстьИнформацияОКомиссии, СтрокаТаблицы.Комиссионный И СтрокаТаблицы.ДоговорКомиссии.УчетАгентскогоНДС , Ложь);
		
		ЭтоКомиссия = (ЕстьИнформацияОКомиссии И СтрокаТаблицы.Комиссионный)
			ИЛИ (ЕстьСчетУчета И ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) И СтрокаТаблицы.СчетУчета.Забалансовый);
		Если ЭтоКомиссия И НЕ ОтражатьНДСКомитента Тогда
			// НДС по комиссионным товарам и услугам не начисляется, кроме налогового агента
			Продолжить;
		КонецЕсли;

		НоваяЗапись = ТаблицаДвижений_НДСЗаписиКнигиПродаж.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
		
		Если СторноНачисления Тогда
			НоваяЗапись.СуммаБезНДС = - НоваяЗапись.СуммаБезНДС;
			НоваяЗапись.НДС = - НоваяЗапись.НДС;
		КонецЕсли;
		
		НоваяЗапись.Организация = СтруктураШапкиДокумента.Организация;
		НоваяЗапись.Покупатель 	= ?(ЕстьПокупательВТаблице, СтрокаТаблицы.Покупатель, ?(СтруктураШапкиДокумента.Свойство("Контрагент"), СтруктураШапкиДокумента.Контрагент, Неопределено));
		Если Не (НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
				Или НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
				Или НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные
				Или НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент 
				Или (УчетНДС.ВидыЦенностиНалоговыйАгентПоступление().Найти(НоваяЗапись.ВидЦенности) <> Неопределено
					И НоваяЗапись.ДоговорКонтрагента.НалоговыйАгентПоОплате)) Тогда
			НоваяЗапись.ДоговорКонтрагента = Неопределено;
		ИначеЕсли НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент И ОтражатьНДСКомитента Тогда
			НоваяЗапись.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКомиссии;
		КонецЕсли;
		НоваяЗапись.СчетФактура = ?(ЕстьСчетФактура, СтрокаТаблицы.СчетФактура, СтруктураШапкиДокумента.Ссылка);
		НоваяЗапись.СтавкаНДС 	= ?(СтавкаНДСВШапке, СтруктураШапкиДокумента.СтавкаНДС, СтрокаТаблицы.СтавкаНДС);
		Если ЕстьСобытие Тогда
			НоваяЗапись.Событие	= СтрокаТаблицы.Событие;
		ИначеЕсли УчетНДС.ВидыЦенностиНалоговыйАгентПоступление().Найти(НоваяЗапись.ВидЦенности) <> Неопределено
					Или НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
			НоваяЗапись.Событие	= Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
		Иначе
			НоваяЗапись.Событие	= Перечисления.СобытияПоНДСПродажи.Реализация;
		КонецЕсли;
		НоваяЗапись.ДатаСобытия	= СтруктураШапкиДокумента.Дата;
				
	КонецЦикла;
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Свернуть("Активность, Период, Организация, Покупатель, ДоговорКонтрагента, СчетФактура, ВидЦенности, СтавкаНДС, Событие, ДатаСобытия, ДатаОплаты, ДокументОплаты, ЗаписьДополнительногоЛиста, КорректируемыйПериод, СторнирующаяЗаписьДопЛиста", "СуммаБезНДС, НДС");
	
	Если ТаблицаДвижений_НДСЗаписиКнигиПродаж.Количество() > 0 Тогда

		Движения.НДСЗаписиКнигиПродаж.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж;
		Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение();
		
	КонецЕсли;
	
КонецПроцедуры

//  УПРОЩЕННЫЙ УЧЕТ НДС
//////////////////////////////////////////////////////////////////////////
