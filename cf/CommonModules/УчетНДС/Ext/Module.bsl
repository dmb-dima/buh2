// Функция возвращает курс ставку НДС
//
// Параметры:
//  Валюта - СправочникСсылка.Валюты, валюта, по которой необходимо получить курс
//  ДатаКурса - Дата, календарная дата, на которую необходимо получить курс валюты
//
// Возвращаемое значение:
//	Курс переданной валюты на переданную дату, 1 в случае отсутствия значения.
//
Функция ПолучитьСтавкуНДС(СтавкаНДС) Экспорт

	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Возврат 20;

	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Возврат 10;

	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Возврат 18;

	КонецЕсли;

	Возврат 0;

КонецФункции // ПолучитьСтавкуНДС()

//Функция определения вида ценности по группе критериев
//
Функция ОпределитьВидЦенности(Объект, СчетУчета, ЭтоДопРасходы = Ложь, ЭтоАгентскийНДС = Ложь, ВидАгентскогоДоговора = "", СпособСтроительства = Неопределено, ЭтоУслуга = Неопределено, ВидыЦенностейПоСчетамУчета = Неопределено, СтруктураШапкиДокумента = Неопределено) Экспорт

	ВидЦенности = Перечисления.ВидыЦенностей.ПустаяСсылка();
	Если ВидыЦенностейПоСчетамУчета = Неопределено Тогда
		ВидыЦенностейПоСчетамУчета = Новый Соответствие;
	КонецЕсли;
	
	Если ЭтоАгентскийНДС Тогда
		// Это агентский НДС - для него применяется специальный вид ценности
		Если ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Аренда Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда;
		ИначеЕсли ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияИмущества Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы;
		КонецЕсли;
		
	ИначеЕсли ЭтоДопРасходы Тогда
		// Это всегда услуги
		Если ЗначениеЗаполнено(СчетУчета) И СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств) тогда
			ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		КонецЕслИ;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура") тогда	
		ВидЦенности = ?(ВидыЦенностейПоСчетамУчета = Неопределено, Неопределено, ВидыЦенностейПоСчетамУчета[СчетУчета]);
		ДатаДокумента = ?(СтруктураШапкиДокумента = Неопределено, '00010101', СтруктураШапкиДокумента.Дата);
					
		Если ВидЦенности = Неопределено Тогда
			ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
			Если  СчетУчета = "нет" Или Не ЗначениеЗаполнено(СчетУчета) Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.Товары;
			ИначеЕсли  СчетУчета = ПланСчетовБУ.Материалы ИЛИ СчетУчета.ПринадлежитЭлементу(ПланСчетовБУ.Материалы) Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.Материалы;
			ИначеЕсли СчетУчета = ПланСчетовБУ.ОборудованиеКУстановке ИЛИ СчетУчета = ПланСчетовБУ.ПриобретениеОбъектовОсновныхСредств
				ИЛИ СчетУчета.ПринадлежитЭлементу(ПланСчетовБУ.ОборудованиеКУстановке) ИЛИ СчетУчета.ПринадлежитЭлементу(ПланСчетовБУ.ПриобретениеОбъектовОсновныхСредств) Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.ОС;
			ИначеЕсли СчетУчета = ПланСчетовБУ.ПриобретениеНематериальныхАктивов 
				ИЛИ СчетУчета.ПринадлежитЭлементу(ПланСчетовБУ.ПриобретениеНематериальныхАктивов)   Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.НМА;
			Иначе 
				ВидЦенности = Перечисления.ВидыЦенностей.Товары;
			КонецЕсли;
		КонецЕсли;

		Если ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги ИЛИ ВидЦенности = Перечисления.ВидыЦенностей.Товары Тогда
			Если ЭтоУслуга = Неопределено Или ЭтоУслуга = Null Тогда
				ЭтоУслуга = Объект.Услуга;
			КонецЕсли;
			Если ЭтоУслуга Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;	
			Иначе
				ВидЦенности = Перечисления.ВидыЦенностей.Товары;	
			КонецЕсли;                                       
		КонецЕсли;
		ВидыЦенностейПоСчетамУчета.Вставить(СчетУчета, ВидЦенности);
			
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.НематериальныеАктивы") тогда	
		ВидЦенности = Перечисления.ВидыЦенностей.НМА;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ОсновныеСредства") тогда	
		ВидЦенности = Перечисления.ВидыЦенностей.ОС;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ОбъектыСтроительства") тогда	
		ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.СтатьиЗатрат") тогда	
		СчетаУчетаЦенностей = ВидыЦенностейПоСчетамУчета["ОбъектыСтроительства"];
		Если СчетаУчетаЦенностей = Неопределено Тогда
			СчетаУчетаЦенностей = ОпределитьСчетаУчетаЦенностей("ОбъектыСтроительства");
			ВидыЦенностейПоСчетамУчета.Вставить("ОбъектыСтроительства", СчетаУчетаЦенностей);
		КонецЕсли;
		Если СчетаУчетаЦенностей.НайтиПоЗначению(СчетУчета) <> Неопределено тогда
			Если СпособСтроительства = Перечисления.СпособыСтроительства.Хозспособ Тогда
				//Такая ситуация возникает при приобретении услуг, включаемых в затраты по строительству 
				// не от строительной организации (не от подрядчика) (например, это услуги по охране объекта строительства).
				// Необходимо учитывать данные услуги как "Прочие работы и услуги".
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			Иначе	
				ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные;
			КонецЕсли; 
			
		ИначеЕсли ЗначениеЗаполнено(Объект) Тогда
			Если Объект.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.КомандировочныеРасходы Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.КомандировочныеРасходы;
			ИначеЕсли Объект.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.ПредставительскиеРасходы;
			Иначе
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			КонецЕсли;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		КонецЕсли;
		Для Каждого СчетУчетаЦенности Из СчетаУчетаЦенностей Цикл
			  ВидыЦенностейПоСчетамУчета.Вставить(СчетУчетаЦенности, ВидЦенности);
		КонецЦикла;
		
	Иначе	
		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		
	КонецЕсли;

	Возврат ВидЦенности;

КонецФункции // ОпределитьВидЦенности()

// Функция определяет объект учета (ценность) в строке табличной части.
// Сама табличная часть задается в параметре ТаблицаЗначений. В результате 
// анализа этой табличной части определяется из какой именно колонки нужно 
// взять объект учета.
Функция ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений) Экспорт

	Ценность = "";

	Если ТаблицаЗначений.Колонки.Найти("Номенклатура") <> Неопределено Тогда
		Ценность = СтрокаТаблицы.Номенклатура;

	ИначеЕсли ТаблицаЗначений.Колонки.Найти("ОбъектСтроительства") <> Неопределено Тогда
		Ценность = СтрокаТаблицы.ОбъектСтроительства;

	ИначеЕсли ТаблицаЗначений.Колонки.Найти("НематериальныйАктив") <> Неопределено Тогда
		Ценность = СтрокаТаблицы.НематериальныйАктив;

	КонецЕсли;

	Возврат Ценность;

КонецФункции // ОпределитьЦенностьИзСтрокиТабличнойЧасти()

// Функция определяет вид ценности по переданным в нее субконто счета учета.
// 
Функция ПолучитьЦенностьПоСубконто(Субконто1, Субконто2, Субконто3) Экспорт

	ВидЦенности = Неопределено;

	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(Субконто1);
	МассивСубконто.Добавить(Субконто2);
	МассивСубконто.Добавить(Субконто3);

	Для каждого Субконто Из МассивСубконто Цикл

		Если ТипЗнч(Субконто) = Тип("СправочникСсылка.Номенклатура") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЦенности = Субконто;
			
		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЦенности = Субконто;
			
		КонецЕсли; 

		// Если вид ценности определен, то прекращаем поиск
		Если ВидЦенности <> Неопределено Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат ВидЦенности;

КонецФункции // ПолучитьЦенностьПоСубконто()

// Функция производит поиск счета-фактуры (полученного или выданного), у которого в качестве документа-основания указана
// переданная ссылка.
//
// Параметры:
//  ДокументСсылка  - ссылка на документ, для которого надо найти подчиненный документ,
//  ВидСчетаФактуры - строка, вид документа, по умолчанию "СчетФактураВыданный"
//  Отбор 			- структура с именами и значениями реквизитов СФ для дополнительного отбора
//	
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйСчетФактуру(Знач ДокументСсылка, ВидДокумента = "СчетФактураВыданный", Отбор = Неопределено, ИсключитьИзВыборкиСФ = Неопределено, МетаданныеОснования = Неопределено) Экспорт

	Если не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено;
	Иначе
		
		Если МетаданныеОснования = Неопределено Тогда
			МетаданныеОснования = ДокументСсылка.Метаданные();
		КонецЕсли; 
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ИспользоватьДокументРасчетовКакСчетФактуру", МетаданныеОснования) 
			И ОбщегоНазначения.ЕстьРеквизитДокумента("РасчетныйДокумент", МетаданныеОснования)
			И ДокументСсылка.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
			Если не ЗначениеЗаполнено(ДокументСсылка.РасчетныйДокумент) Тогда
				Возврат Неопределено;
			Иначе
				Если ТипЗнч(ДокументСсылка.РасчетныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
					И Не ДокументСсылка.РасчетныйДокумент.ПокупателемВыставляетсяСчетФактураНаВозврат 
					И ЗначениеЗаполнено(ДокументСсылка.РасчетныйДокумент.Сделка) Тогда
					ДокументСсылка = ДокументСсылка.РасчетныйДокумент.Сделка;
					МетаданныеОснования = ДокументСсылка.Метаданные();
					Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
						Возврат Неопределено;
					КонецЕсли;
				Иначе
					ДокументСсылка = ДокументСсылка.РасчетныйДокумент;
					МетаданныеОснования = ДокументСсылка.Метаданные();
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		Если ВидДокумента = "СчетФактураПолученный" 
			И ОбщегоНазначения.ЕстьРеквизитДокумента("ПредъявленСчетФактура", МетаданныеОснования)
			И ДокументСсылка.ПредъявленСчетФактура 
			И не ДокументСсылка = ИсключитьИзВыборкиСФ
			Тогда
			Возврат ДокументСсылка;
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйДокумент = Неопределено;

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СФ.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|		ПО СФ.Ссылка = Авансы.Ссылка
	|ГДЕ
	|	СФ.ДокументОснование = &ДокументСсылка";
	
	Если не ВидДокумента = "СчетФактураВыданный" Тогда
		Запрос.Текст = СтрЗаменитЬ(Запрос.Текст,"СчетФактураВыданный",ВидДокумента);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИсключитьИзВыборкиСФ) Тогда
		Запрос.УстановитьПараметр("ИсключитьИзВыборкиСФ", ИсключитьИзВыборкиСФ);
		Запрос.Текст = Запрос.Текст + "
			|	И НЕ СФ.Ссылка  = &ИсключитьИзВыборкиСФ
			|";
	КонецЕсли; 
	Если не Отбор = Неопределено Тогда
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Булево") Тогда
				Запрос.Текст = Запрос.Текст + "
					|	И "+?(ЭлементОтбора.Значение," "," НЕ ")+" СФ.Ссылка."+ЭлементОтбора.Ключ;
			ИначеЕсли ЭлементОтбора.Ключ = "СтавкиНДС" Тогда
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Авансы.СтавкаНДС В (&"+ЭлементОтбора.Ключ+")";
			ИначеЕсли ЭлементОтбора.Ключ = "СчетНаОплату" 
						И ВидДокумента = "СчетФактураВыданный" Тогда
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Авансы.СчетНаОплату В (&"+ЭлементОтбора.Ключ+")";
			Иначе
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И СФ.Ссылка."+ЭлементОтбора.Ключ+" = &"+ЭлементОтбора.Ключ;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	СФ.Ссылка.ПометкаУдаления,
	|	СФ.Ссылка.Проведен УБЫВ,
	|	СФ.Ссылка.Дата";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	Если ВыборкаИзЗапроса.Следующий() Тогда
		НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
	КонецЕсли;

	Возврат НайденныйДокумент;

КонецФункции // НайтиПодчиненныйСчетФактуру()

// Процедура арифметически распределяет заданную сумму
// по столбцу таблицы значений пропорционально колонке базы распределения
// при этом размерность таблицы и базы распределения должны совпадать.
// Как правило база распределения - просто одна из колонок таблицы
Процедура РаспределитьСуммуПоСтолбцу(МассивБазыРаспределения, РаспределяемаяСумма, ТаблицаРезультата, ИдКолонкиРезультата) Экспорт

	// Определяем сумму базы
	СуммаБазы = 0;

	Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл
		СуммаБазы = СуммаБазы + МассивБазыРаспределения[Индекс];
	КонецЦикла;

	Если СуммаБазы > 0 Тогда
		// Выполняем распределение
		УчтеноБазыРаспределения = 0;
		УжеРаспределено = 0;

		Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл

			// Рассчитываем шаг распределения
			ШагРаспределения = Окр(РаспределяемаяСумма * (УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс])/СуммаБазы, 2) - УжеРаспределено;

			// Записываем результат
			ТаблицаРезультата[Индекс][ИдКолонкиРезультата] = ШагРаспределения;

			// Учитываем полученный результат для вычисления последующих шагов распределения
			УчтеноБазыРаспределения = УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс];
			УжеРаспределено         = УжеРаспределено + ШагРаспределения;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // РаспределитьСуммуПоСтолбцу()

// Процедура подготовки таблицы значений для целей формирования движений
// по подсистеме НДС. Доопределяет дополнительные колонки "ВидЦенности" и "Ценность"
// в таблице значений, переданной в качестве параметра
Процедура ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС(СтруктураШапкиДокумента, ТаблицаЗначений) Экспорт

	ВидыЦенностейПоСчетамУчета = Неопределено;
	ЕстьКолонкаУслуга = ТаблицаЗначений.Колонки.Найти("Услуга") <> Неопределено;
	ЕстьКолонкаСчетДоходов = ТаблицаЗначений.Колонки.Найти("СчетДоходов") <> Неопределено;
	ЕстьСчетДоходов =СтруктураШапкиДокумента.Свойство("СчетДоходов");
	ЕстьКолонкаСчетУчета = ТаблицаЗначений.Колонки.Найти("СчетУчета") <> Неопределено;
	ЕстьКолонкаСчетЗатрат = ТаблицаЗначений.Колонки.Найти("СчетЗатрат") <> Неопределено;
	ЕстьКолонкаНоменклатура = ТаблицаЗначений.Колонки.Найти("Номенклатура") <> Неопределено;
	ЕстьКолонкаОсновноеСредство = ТаблицаЗначений.Колонки.Найти("ОсновноеСредство") <> Неопределено;
	ЕстьКолонкаНематериальныйАктив = ТаблицаЗначений.Колонки.Найти("НематериальныйАктив") <> Неопределено;
	ЕстьУчетАгентскогоНДС = СтруктураШапкиДокумента.Свойство("УчетАгентскогоНДС");
	ЕстьВидАгентскогоДоговора = СтруктураШапкиДокумента.Свойство("ВидАгентскогоДоговора");
	
	ТаблицаЗначений.Колонки.Добавить("НДСЭтоЕНВД", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		Если ЕстьКолонкаСчетДоходов
			И НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТаблицы.СчетДоходов) Тогда
			СтрокаТаблицы.НДСЭтоЕНВД = Истина;
		ИначеЕсли ЕстьСчетДоходов 
			И НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтруктураШапкиДокумента.СчетДоходов) Тогда
			СтрокаТаблицы.НДСЭтоЕНВД = Истина;
		Иначе
			СтрокаТаблицы.НДСЭтоЕНВД = Ложь;
		КонецЕсли;
		
		СчетУчетаЦенности = "";
        СпособСтроительства = Неопределено;
		
		Если ЕстьКолонкаСчетУчета Тогда
			СчетУчетаЦенности = СтрокаТаблицы.СчетУчета;
			Ценность          = ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений);

		ИначеЕсли ЕстьКолонкаСчетЗатрат Тогда
			СчетУчетаЦенности = СтрокаТаблицы.СчетЗатрат;
			Ценность          = ПолучитьЦенностьПоСубконто(СтрокаТаблицы.Субконто1, СтрокаТаблицы.Субконто2, СтрокаТаблицы.Субконто3);
			
			// Особая обработка для затрат на строительство
			Если ТипЗнч(Ценность) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				Для НомерСубконто =1 По 3 Цикл
					Если ТипЗнч(СтрокаТаблицы["Субконто"+НомерСубконто]) = Тип("ПеречислениеСсылка.СпособыСтроительства")  Тогда
						СпособСтроительства = СтрокаТаблицы["Субконто"+НомерСубконто];
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаЦенности) Тогда
			СчетУчетаЦенности = СтрокаТаблицы.СчетУчетаЦенности;
			Ценность          = ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений);
			
		ИначеЕсли ЕстьКолонкаНоменклатура Тогда
			СчетУчетаЦенности = "нет";
			Ценность          = ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений);
			
		ИначеЕсли ЕстьКолонкаОсновноеСредство Тогда
			СчетУчетаЦенности =  "нет";
			Ценность          = СтрокаТаблицы.ОсновноеСредство;

		ИначеЕсли ЕстьКолонкаНематериальныйАктив Тогда
			СчетУчетаЦенности =  "нет";
			Ценность          = СтрокаТаблицы.НематериальныйАктив;
			
		КонецЕсли;

		ЭтоДопРасходы         = (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов");
		УчетАгентскогоНДС     = Ложь;
		ВидАгентскогоДоговора = "";

		Если ЕстьУчетАгентскогоНДС И ЗначениеЗаполнено(СтруктураШапкиДокумента.УчетАгентскогоНДС) Тогда
			УчетАгентскогоНДС = СтруктураШапкиДокумента.УчетАгентскогоНДС;
		КонецЕсли;
		Если ЕстьВидАгентскогоДоговора Тогда
			ВидАгентскогоДоговора = СтруктураШапкиДокумента.ВидАгентскогоДоговора;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидЦенности) Тогда
			Если ЕстьКолонкаУслуга Тогда
				СтрокаТаблицы.ВидЦенности       = ОпределитьВидЦенности(Ценность, СчетУчетаЦенности, ЭтоДопРасходы, УчетАгентскогоНДС, ВидАгентскогоДоговора,СпособСтроительства, СтрокаТаблицы.Услуга, ВидыЦенностейПоСчетамУчета, СтруктураШапкиДокумента);
			Иначе
				СтрокаТаблицы.ВидЦенности       = ОпределитьВидЦенности(Ценность, СчетУчетаЦенности, ЭтоДопРасходы, УчетАгентскогоНДС, ВидАгентскогоДоговора,СпособСтроительства, , ВидыЦенностейПоСчетамУчета, СтруктураШапкиДокумента);
			КонецЕсли;			
		КонецЕсли;
		СтрокаТаблицы.СчетУчетаЦенности = СчетУчетаЦенности;
		СтрокаТаблицы.Ценность          = Ценность;

	КонецЦикла

КонецПроцедуры // ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС()

// Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура СинхронизацияПометкиНаУдалениеУСчетаФактуры(ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный", Отказ = Ложь) Экспорт

	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ док.ПометкаУдаления
	                | ИЗ 
	                |      Документ." + ДокументОбъект.Метаданные().Имя + " КАК Док 
	                |     ГДЕ Док.Ссылка = &ДокументСсылка";

	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ДокументОбъект.ПометкаУдаления <> ?(Результат.Количество()>0,Результат[0].ПометкаУдаления,ложь) Тогда

		// Произошло изменение пометки на удаление
		// Попытаемся найти счет-фактуру
		СтруктураОтбора = Новый Структура("ПометкаУдаления",не ДокументОбъект.ПометкаУдаления);
		СчетФактура = НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры, СтруктураОтбора, ДокументОбъект.Ссылка);

		//Если потерпели неудачу, то необходимо ввести новый документ 
		Если ЗначениеЗаполнено(СчетФактура) И Не СчетФактура = ДокументОбъект.Ссылка Тогда
			Попытка
				// Есть счет-фактура, нужно установить для него пометку удаления
				СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
				Если ДокументОбъект.ПометкаУдаления Тогда
					// Если в счете-фактуре несколько оснований, счет-фактура не помечается на удаление,
					// а очищается ссылка на текущее основание.
					МетаданныеДокумента = СчетФактураОбъект.Метаданные();
					
					Если ОбщегоНазначения.ЕстьТабЧастьДокумента("ДокументыОснования", МетаданныеДокумента) 
						и СчетФактураОбъект.ДокументыОснования.Количество() > СчетФактураОбъект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование",ДокументОбъект.Ссылка)).Количество() Тогда
						СтрокиКУдалению = СчетФактураОбъект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование",ДокументОбъект.Ссылка));
						Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
							СчетФактураОбъект.ДокументыОснования.Удалить(СтрокаКУдалению);
						КонецЦикла;
						СчетФактураОбъект.ДокументОснование = СчетФактураОбъект.ДокументыОснования[0].ДокументОснование;
						СчетФактураОбъект.Записать();
						Сообщить("Из документа <" + СчетФактура + "> удалена ссылка на <"+ДокументОбъект+">.");
						Возврат;
					КонецЕсли; 
				КонецЕсли; 
				
				СчетФактураОбъект.УстановитьПометкуУдаления(ДокументОбъект.ПометкаУдаления);
				Если ДокументОбъект.ПометкаУдаления Тогда
					Сообщить("Документ <" + СчетФактура + "> помечен на удаление.")
				Иначе
					Сообщить("У документа <" + СчетФактура + "> снята пометка на удаление.")
				КонецЕсли;
			Исключение
				Отказ = Истина;
			КонецПопытки;
				
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // СинхронизацияПометкиНаУдалениеУСчетаФактуры()

// Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура УстановкаПометкиНаУдалениеУСчетаФактуры(ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный", ПометкаНаУдаление = Истина) Экспорт

	// Произошло изменение пометки на удаление
	//Попытаемся найти счет-фактуру
	
	СтруктураОтбора = Новый Структура("ПометкаУдаления",не ПометкаНаУдаление);
	СчетФактура = НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры, СтруктураОтбора);

	Если ЗначениеЗаполнено(СчетФактура) И Не СчетФактура = ДокументОбъект.Ссылка Тогда

		// Есть счет-фактура, нужно установить для него пометку удаления
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
		СчетФактураОбъект.УстановитьПометкуУдаления(ПометкаНаУдаление);
		Если ПометкаНаУдаление Тогда
			Сообщить("Документ <" + СчетФактураОбъект + "> помечен на удаление.")
		Иначе
			Сообщить("У документа <" + СчетФактураОбъект + "> снята пометка на удаление.")
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // УстановкаПометкиНаУдалениеУСчетаФактуры()

// Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура СинхронизацияПроведенияУСчетаФактуры(ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный", УпрощенныйУчетНДС = Неопределено, Отказ = Неопределено) Экспорт

	СчетФактура = НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры, ,ДокументОбъект.Ссылка);

	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если ЗначениеЗаполнено(СчетФактура)
		И СчетФактура <> ДокументОбъект.Ссылка 
		И (ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Или ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный")) Тогда
		
		Если УпрощенныйУчетНДС = Неопределено Тогда
			УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СчетФактура.Дата, Неопределено, СчетФактура.Организация);
			Если УчетнаяПолитика.Свойство("УпрощенныйУчетНДС", УпрощенныйУчетНДС) = Неопределено Тогда
				УпрощенныйУчетНДС = Ложь;
			КонецЕсли;
		КонецЕсли;
				
		Если ДокументОбъект.Проведен И (Не СчетФактура.Проведен Или (УпрощенныйУчетНДС И Не ВидСчетаФактуры = "СчетФактураВыданный")) Тогда
			// Есть счет-фактура не проведен, нужно провести (счет-фактура не проведен, либо перепроводится счет-фактура полученный 
			// при упрошенном учете НДС
			Если Не СчетФактура.ПометкаУдаления Тогда
				Попытка
					СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
					СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Сообщить("Не удалось провести документ <" + СчетФактураОбъект + ">", СтатусСообщения.Важное);
					Отказ = Истина;
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли Не ДокументОбъект.Проведен И СчетФактура.Проведен Тогда
			// Есть счет-фактура проведен, нужно отменить проведение
			Если Не СчетФактура.ПометкаУдаления Тогда
				Попытка
					СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
					СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Исключение
					Сообщить("Не удалось отменить проведение документа <" + СчетФактураОбъект + ">", СтатусСообщения.Важное);
					Отказ = Истина;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // СинхронизацияПроведенияУСчетаФактуры()

// Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура УстановкаПроведенияУСчетаФактуры(ДокументСсылка, ВидСчетаФактуры = "СчетФактураВыданный", Проведение = Ложь) Экспорт

	СчетФактура = НайтиПодчиненныйСчетФактуру(ДокументСсылка, ВидСчетаФактуры, , ДокументСсылка);

	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если ЗначениеЗаполнено(СчетФактура)
		И СчетФактура <> ДокументСсылка 
		И (ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") 
		Или ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный")) Тогда
		
		Если Проведение И Не СчетФактура.Проведен Тогда
			// Есть счет-фактура не проведен, нужно провести
			Если Не СчетФактура.ПометкаУдаления Тогда
				Попытка
					СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
					СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Сообщить("Проведен документ <" + СчетФактураОбъект + ">.")
				Исключение
					Сообщить("Не удалось провести документ <" + СчетФактураОбъект + ">", СтатусСообщения.Важное);
					Отказ = Истина;
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли Не Проведение И СчетФактура.Проведен Тогда
			// Есть счет-фактура проведен, нужно отменить проведение
			Если Не СчетФактура.ПометкаУдаления Тогда
				Попытка
					СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
					СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Сообщить("Отменено проведение документа <" + СчетФактураОбъект + ">.")
				Исключение
					Сообщить("Не удалось отменить проведение документа <" + СчетФактураОбъект + ">", СтатусСообщения.Важное);
					Отказ = Истина;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // СинхронизацияПроведенияУСчетаФактуры()

// Для переданного в качестве параметра счета-фактуры выданного, получает для него
// ключевые сведения: Контрагент, Договор, Сумма и др., которые содержатся в 
// документе основании.
//
// Параметры:
//  СчетФактура  - счет-фактура для которого нужно определить параметры
//  Результат - структура в которой возвращаются значения параметров
//
Процедура ПолучитьПараметрыСчетаФактуры(СчетФактура, мВалютаРегламентированногоУчета, Результат) Экспорт

	Результат = Новый Структура("Организация, Контрагент, Договор, СуммаДокумента, ВалютаДокумента");
	Результат.СуммаДокумента = 0;
	
	Если ТипЗнч(СчетФактура)= Тип("ДокументСсылка.СчетФактураПолученный")
		Или ТипЗнч(СчетФактура)= Тип("ДокументСсылка.СчетФактураВыданный")
		Тогда
		Ссылка = СчетФактура;
	Иначе
		Ссылка = СчетФактура.Ссылка;
	КонецЕсли; 
	
	ЭтоПолученныйСФ = Ложь;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") тогда
		ЭтоПолученныйСФ = Истина;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
		и (СчетФактура.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс или СчетФактура.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу) Тогда
		// Реквизиты заново не определяются, получаются из счета-фактуры
		Результат.Вставить("Организация"	, СчетФактура.Организация);
		Результат.Вставить("Контрагент"		, СчетФактура.Контрагент);
		Результат.Вставить("Договор"		, СчетФактура.ДоговорКонтрагента);
		Результат.Вставить("ВалютаДокумента", СчетФактура.ВалютаДокумента);
		Результат.Вставить("СуммаДокумента"	, СчетФактура.СуммаДокумента);
		Возврат;
	КонецЕслИ;
	
	ДокументыОснования = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СчетФактура.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"), Истина);
	
	ТипыОснований = Новый Соответствие();
	Для каждого Основание Из ДокументыОснования Цикл
		Если не ЗначениеЗаполнено(Основание) Тогда
			Продолжить;			
		КонецЕсли; 

		МассивДокументов = ТипыОснований[ТипЗнч(Основание)];
		
		Если МассивДокументов = Неопределено Тогда
			МассивДокументов = новый Массив();
			ТипыОснований.Вставить(ТипЗнч(Основание),МассивДокументов);
		КонецЕсли; 
		
		МассивДокументов.Добавить(Основание);
	КонецЦикла; 
	
	Если ТипыОснований.Количество() = 0 Тогда
		// ТЧ оснований не заполнена, параметры определить нельзя
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	Для каждого ТипОснования Из ТипыОснований Цикл
		ТипДокументаОснования	= ТипОснования.Ключ;
		ДокументыОснования		= ТипОснования.Значение;
	    ТекстЗапроса = "";

		Если ТипДокументаОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			// Для данного документа применяется специфический запрос для расчета параметров счета-фактуры
			Запрос.УстановитьПараметр("ДокументОснованиеАО", ДокументыОснования);
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	АвансовыйОтчетПрочее.Ссылка.Организация КАК Организация,
				|	АвансовыйОтчетПрочее.Поставщик КАК Контрагент,
				|	НЕОПРЕДЕЛЕНО КАК Договор,
				|	СУММА(АвансовыйОтчетПрочее.Сумма + ВЫБОР
				|			КОГДА АвансовыйОтчетПрочее.Ссылка.СуммаВключаетНДС
				|				ТОГДА 0
				|			ИНАЧЕ АвансовыйОтчетПрочее.СуммаНДС
				|		КОНЕЦ) КАК СуммаДокумента,
				|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента КАК ВалютаДокумента
				|ИЗ
				|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
				|ГДЕ
				|	АвансовыйОтчетПрочее.Ссылка В(&ДокументОснованиеАО)
				|	И АвансовыйОтчетПрочее.ПредъявленСФ
				|	И АвансовыйОтчетПрочее.СчетФактура = &ТекущийДокумент
				|
				|СГРУППИРОВАТЬ ПО
				|	АвансовыйОтчетПрочее.Поставщик,
				|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента,
				|	АвансовыйОтчетПрочее.Ссылка.Организация
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	АвансовыйОтчетТовары.Ссылка.Организация,
				|	АвансовыйОтчетТовары.Поставщик,
				|	НЕОПРЕДЕЛЕНО,
				|	СУММА(АвансовыйОтчетТовары.Сумма + ВЫБОР
				|			КОГДА АвансовыйОтчетТовары.Ссылка.СуммаВключаетНДС
				|				ТОГДА 0
				|			ИНАЧЕ АвансовыйОтчетТовары.СуммаНДС
				|		КОНЕЦ),
				|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента
				|ИЗ
				|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
				|ГДЕ
				|	АвансовыйОтчетТовары.Ссылка В(&ДокументОснованиеАО)
				|	И АвансовыйОтчетТовары.СчетФактура = &ТекущийДокумент
				|	И АвансовыйОтчетТовары.ПредъявленСФ
				|
				|СГРУППИРОВАТЬ ПО
				|	АвансовыйОтчетТовары.Поставщик,
				|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента,
				|	АвансовыйОтчетТовары.Ссылка.Организация";
			
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
			// Для данного документа применяется специфический запрос для расчета параметров счета-фактуры
			Запрос.УстановитьПараметр("ДокументыОснования", ДокументыОснования);
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	ОказаниеУслуг.Ссылка.Организация КАК Организация,
				|	ОказаниеУслуг.Контрагент КАК Контрагент,
				|	ОказаниеУслуг.ДоговорКонтрагента КАК Договор,
				|	СУММА(ОказаниеУслуг.Сумма + ВЫБОР
				|			КОГДА ОказаниеУслуг.Ссылка.СуммаВключаетНДС
				|				ТОГДА 0
				|			ИНАЧЕ ОказаниеУслуг.СуммаНДС
				|		КОНЕЦ) КАК СуммаДокумента,
				|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента
				|ИЗ
				|	Документ.ОказаниеУслуг.Контрагенты КАК ОказаниеУслуг
				|ГДЕ
				|	ОказаниеУслуг.Ссылка В(&ДокументыОснования)
				|	И ОказаниеУслуг.ВыданСФ
				|	И ОказаниеУслуг.СчетФактура = &ТекущийДокумент
				|
				|СГРУППИРОВАТЬ ПО
				|	ОказаниеУслуг.Контрагент,
				|	ОказаниеУслуг.ДоговорКонтрагента,
				|	ОказаниеУслуг.Ссылка.Организация";
				
		Иначе
			Если ТипДокументаОснования = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") тогда 
				
				Запрос.УстановитьПараметр("ДокументОснование_НачислениеНДСпоСМРхозспособом", ДокументыОснования);
			
				ТекстЗапроса = 
					"ВЫБРАТЬ
					|	НачислениеНДСпоСМРхозспособом.Ссылка.Организация,
					|	НЕОПРЕДЕЛЕНО КАК Контрагент,
					|	НЕОПРЕДЕЛЕНО КАК Договор,
					|	СУММА(НачислениеНДСпоСМРхозспособом.СуммаБезНДС + НачислениеНДСпоСМРхозспособом.НДС) КАК СуммаДокумента,
					|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента
					|ИЗ
					|	Документ.НачислениеНДСпоСМРхозспособом.СМРхозспособом КАК НачислениеНДСпоСМРхозспособом
					|ГДЕ
					|	НачислениеНДСпоСМРхозспособом.Ссылка В(&ДокументОснование_НачислениеНДСпоСМРхозспособом)
					|
					|СГРУППИРОВАТЬ ПО
					|	НачислениеНДСпоСМРхозспособом.Ссылка.Организация";
				
			ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
				
				Запрос.УстановитьПараметр("ДокументОснование_ПринятиеКУчетуОС", ДокументыОснования);
			
				ТекстЗапроса = 
					"ВЫБРАТЬ
					|	НДСНачисленныйОбороты.Организация КАК Организация,
					|	НЕОПРЕДЕЛЕНО КАК Контрагент,
					|	НЕОПРЕДЕЛЕНО КАК Договор,
					|	НДСНачисленныйОбороты.СуммаБезНДСПриход + НДСНачисленныйОбороты.НДСПриход КАК СуммаДокумента,
					|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента
					|ИЗ
					|	РегистрНакопления.НДСНачисленный.Обороты(
					|		,
					|		,
					|		Период,
					|		СчетФактура ССЫЛКА Документ.ПринятиеКУчетуОС
					|			И СчетФактура В (&ДокументОснование_ПринятиеКУчетуОС)) КАК НДСНачисленныйОбороты";

			ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
				
				Запрос.УстановитьПараметр("ДокументОснование_РеализацияОтгруженныхТоваров", ДокументыОснования);
			
				ТекстЗапроса = 
					"ВЫБРАТЬ
					|	РеализацияОтгруженныхТоваров.Организация,
					|	РеализацияОтгруженныхТоваров.Контрагент,
					|	РеализацияОтгруженныхТоваров.ДоговорКонтрагента КАК Договор,
					|	РеализацияОтгруженныхТоваров.СуммаДокумента КАК СуммаДокумента,
					|	РеализацияОтгруженныхТоваров.ДокументОтгрузки.ВалютаДокумента КАК ВалютаДокумента
					|ИЗ
					|	Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
					|ГДЕ
					|	РеализацияОтгруженныхТоваров.Ссылка В(&ДокументОснование_РеализацияОтгруженныхТоваров)";
			Иначе					
				ИмяОбъекта = ДокументыОснования[0].Метаданные().Имя;
				Запрос.УстановитьПараметр("ДокументОснование_"+ИмяОбъекта, ДокументыОснования);
				
				
				Если (ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах"))
				 или ((ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) И ЭтоПолученныйСФ) Тогда
					ИдРеквСумма = "СуммаВознаграждения";
				ИначеЕсли (ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") И не ЭтоПолученныйСФ) тогда
					ИдРеквСумма = "СуммаДокумента*(-1)";
				ИначеЕсли (ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И ЭтоПолученныйСФ) тогда
					ИдРеквСумма = "СуммаДокумента*(-1)";
				Иначе
					ИдРеквСумма = "СуммаДокумента";
				КонецЕсли;
				
				ТекстЗапроса = "ВЫБРАТЬ
								|	" + ИмяОбъекта + ".Организация,
								|	" + ИмяОбъекта + ".Контрагент,
								|	" + ИмяОбъекта + ".ДоговорКонтрагента как Договор,
								|	" + ИмяОбъекта + "." + ИдРеквСумма + " Как СуммаДокумента,
								|	" + ИмяОбъекта + ".ВалютаДокумента Как ВалютаДокумента
								|ИЗ
								|	Документ." + ИмяОбъекта + " КАК " + ИмяОбъекта + "

								|ГДЕ
								|	" + ИмяОбъекта + ".Ссылка в (&ДокументОснование_"+ИмяОбъекта+")";
								
			КонецЕсли;
			
		КонецЕсли;
		Если не ПустаяСтрока(ТекстЗапроса) Тогда
			Запрос.Текст = ?(ПустаяСтрока(Запрос.Текст),"", Запрос.Текст + Символы.ПС+"Объединить Все "+Символы.ПС)+ТекстЗапроса;
		КонецЕсли; 
	КонецЦикла;
	
	Если ПустаяСтрока(Запрос.Текст) Тогда
	    Возврат;
	Иначе
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		ПерваяСтрока = Истина;
		РазныеОрганизации = ложь;
		РазныеКонтрагенты = ложь;
		РазныеДоговоры = ложь;
		РазныеВалюты = ложь;
		Пока Выборка.Следующий() Цикл
			Если ПерваяСтрока Тогда
				ПерваяСтрока = Ложь;
				ЗаполнитьЗначенияСвойств(Результат, Выборка);
			Иначе
				РазныеОрганизации	= РазныеОрганизации или не Результат.Организация= 	Выборка.Организация;
				РазныеКонтрагенты	= РазныеКонтрагенты или не Результат.Контрагент = 	Выборка.Контрагент;
				РазныеВалюты		= РазныеВалюты или не Результат.ВалютаДокумента	= Выборка.ВалютаДокумента;
				РазныеДоговоры		= ?(ЭтоПолученныйСФ, Ложь, РазныеДоговоры или не Результат.Договор = Выборка.Договор);
				
				Результат.СуммаДокумента = 	Результат.СуммаДокумента + Выборка.СуммаДокумента;
			КонецЕсли; 
		КонецЦикла; 
		Если РазныеОрганизации или РазныеКонтрагенты или РазныеВалюты Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Реквизиты документов, на основании которых зарегистрирован счет-фактура, не совпадают:"+
							?(РазныеОрганизации,Символы.ПС+" - не совпадает организация","")+
							?(РазныеКонтрагенты,Символы.ПС+" - не совпадает контрагент","")+
							?(РазныеДоговоры,Символы.ПС+" - не совпадает договор","")+
							?(РазныеВалюты,Символы.ПС+" - не совпадает валюта документа","")+
							Символы.ПС+"Необходимо изменить параметры документов-оснований или зарегистрировать по документам с расхождениями отдельные счета-фактуры.", Ложь, Строка(СчетФактура), СтатусСообщения.Внимание); 
			Если РазныеОрганизации Тогда
				 Результат.Организация = Неопределено;
			КонецЕсли; 				
			Если РазныеКонтрагенты Тогда
				 Результат.Контрагент = Неопределено;
			КонецЕсли; 				
			Если РазныеВалюты Тогда
				 Результат.ВалютаДокумента = Неопределено;
			КонецЕсли; 				
			Если РазныеДоговоры тогда
				 Результат.Договор = Неопределено;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ПолучитьПараметрыСчетаФактуры()

// Процедура проверяет соответствие реквизитов счета-фактуры выданной и документа-основания.
// В случае несоответствия выдается сообщение пользователю.
//
// Параметры:
//		- ДокОбъект - документ-основание
//		- Сообщать  - флаг, если истина, то выводить сообщение пользователю, по умолчанию = Истина
//
// Возврат:
//		- Истина, если различий не найдено, Ложь в противном случае
//
Функция ПроверитьСоответствиеРеквизитовСчетаФактуры(ДокОбъект, ВидДокумента = "СчетФактураВыданный", Сообщать = Истина) Экспорт

	СчетФактура = НайтиПодчиненныйСчетФактуру(ДокОбъект.Ссылка, ВидДокумента, ?(ВидДокумента = "СчетФактураПолученный", Новый Структура("НаАванс", Ложь), Новый Структура("ВидСчетаФактуры", Перечисления.НДСВидСчетаФактуры.НаРеализацию)));
	Если СчетФактура = Неопределено Или СчетФактура = ДокОбъект.Ссылка Тогда
		Возврат Истина;
	КонецЕсли;
	
	Текст = "";
	структураРеквизиты = новый Структура;
	Флаг  = Истина;
	МетаРекв = ДокОбъект.Метаданные().Реквизиты;
	МетаСФ   = Метаданные.Документы[ВидДокумента].Реквизиты;
	Если ДокОбъект.Ссылка.Дата <> ДокОбъект.Дата
	   И НачалоДня(ДокОбъект.Дата) <> НачалоДня(СчетФактура.Дата) Тогда
		Если Сообщать Тогда
			Сообщить("Изменена дата документа-основания. Возможно требуется внести изменения в счет-фактуру.", СтатусСообщения.Внимание);
		КонецЕсли;
		СтруктураРеквизиты.Вставить("Дата", ДокОбъект.Дата);
		Флаг = Ложь;
	КонецЕсли;
	Если МетаРекв.Найти("Организация") <> Неопределено И СчетФактура.Организация <> ДокОбъект.Организация Тогда
		Если Сообщать Тогда
			Текст = " - Не совпадает организация";
		КонецЕсли;
		СтруктураРеквизиты.Вставить("Организация", ДокОбъект.Организация);

		Флаг = Ложь;
	КонецЕсли;
	Если МетаРекв.Найти("ДоговорКонтрагента") <> Неопределено
	   И МетаСФ.Найти("ДоговорКонтрагента") <> Неопределено
	   И СчетФактура.ДоговорКонтрагента <> ДокОбъект.ДоговорКонтрагента Тогда
		Если Сообщать Тогда
			Текст = Текст + ?(ПустаяСтрока(Текст),"", Символы.ПС) + " - Не совпадает договор";
		КонецЕсли;
		СтруктураРеквизиты.Вставить("ДоговорКонтрагента", ДокОбъект.ДоговорКонтрагента);

		Флаг = Ложь;
	КонецЕсли;
	Если МетаРекв.Найти("Контрагент") <> Неопределено И СчетФактура.Контрагент <> ДокОбъект.Контрагент Тогда
		Если Сообщать Тогда
			Текст = Текст + ?(ПустаяСтрока(Текст),"", Символы.ПС) + " - Не совпадает контрагент";
		КонецЕсли;
		СтруктураРеквизиты.Вставить("Контрагент", ДокОбъект.Контрагент);

		Флаг = Ложь;
	КонецЕсли;
	Если МетаРекв.Найти("ВалютаДокумента") <> Неопределено И СчетФактура.ВалютаДокумента <> ДокОбъект.ВалютаДокумента Тогда
		Если Сообщать Тогда
			Текст = Текст + ?(ПустаяСтрока(Текст),"", Символы.ПС) + " - Не совпадает валюта документа";
		КонецЕсли;
		СтруктураРеквизиты.Вставить("ВалютаДокумента", ДокОбъект.ВалютаДокумента);

		Флаг = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ДокОбъект.Ссылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") 
		Или (ТипЗнч(ДокОбъект.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") И ВидДокумента = "СчетФактураПолученный") Тогда
		Если Не ДокОбъект.Ссылка.СуммаВознаграждения = ДокОбъект.СуммаВознаграждения Тогда
			Если Сообщать Тогда
				Текст = Текст + ?(ПустаяСтрока(Текст),"", Символы.ПС) + " - Изменилась сумма вознаграждения документа";
			КонецЕсли;
			НоваяСумма = Макс(0, СчетФактура.СуммаДокумента - ?(ЗначениеЗаполнено(ДокОбъект.Ссылка.СуммаВознаграждения),ДокОбъект.Ссылка.СуммаВознаграждения,0))+ДокОбъект.СуммаВознаграждения;
			
			СтруктураРеквизиты.Вставить("СуммаДокумента", НоваяСумма);

			Флаг = Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокОбъект.Ссылка) = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда
		СуммаДокументаНачисления = ДокОбъект.СМРхозспособом.Итог("СуммаБезНДС") + ДокОбъект.СМРхозспособом.Итог("НДС");
		СуммаДокументаСсылкиНачисления = ДокОбъект.Ссылка.СМРхозспособом.Итог("СуммаБезНДС") + ДокОбъект.Ссылка.СМРхозспособом.Итог("НДС");
		Если Не СуммаДокументаСсылкиНачисления = СуммаДокументаНачисления Тогда
			Если Сообщать Тогда
				Текст = Текст + ?(ПустаяСтрока(Текст),"", Символы.ПС) + " - Изменилась сумма документа";
			КонецЕсли;
			НоваяСумма = Макс(0, СчетФактура.СуммаДокумента - ?(ЗначениеЗаполнено(СуммаДокументаСсылкиНачисления), СуммаДокументаСсылкиНачисления,0))+СуммаДокументаНачисления;
				
			СтруктураРеквизиты.Вставить("СуммаДокумента", НоваяСумма);

			Флаг = Ложь;
		КонецЕсли;
	ИначеЕсли (МетаРекв.Найти("СуммаДокумента") <> Неопределено 
		И Не ДокОбъект.Ссылка.СуммаДокумента = ДокОбъект.СуммаДокумента)
		Тогда
		Если Сообщать Тогда
			Текст = Текст + ?(ПустаяСтрока(Текст),"", Символы.ПС) + " - Изменилась сумма документа";
		КонецЕсли;
		НоваяСумма = Макс(0, СчетФактура.СуммаДокумента - ?(ЗначениеЗаполнено(ДокОбъект.Ссылка.СуммаДокумента),ДокОбъект.Ссылка.СуммаДокумента,0))+ДокОбъект.СуммаДокумента;
		
		СтруктураРеквизиты.Вставить("СуммаДокумента", НоваяСумма);

		Флаг = Ложь;
	КонецЕсли;
	
	Если Сообщать И НЕ ПустаяСтрока(Текст) Тогда
		Текст = "Обнаружены расхождения реквизитов в счете-фактуре: " + Строка(СчетФактура) + " и в документе-основании: " + Строка(ДокОбъект) + Символы.ПС + Текст;
		Если СчетФактура.ДокументыОснования.Количество()=1 Тогда
			флУдалосьПерезаполнить = ложь;
			Попытка
				СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
				Для каждого элемент из СтруктураРеквизиты цикл
					СчетФактураОбъект[элемент.Ключ]=Элемент.Значение;
				Конеццикла;
				СчетФактураОбъект.мОбновлятьРеквизитыПриЗаписи = Ложь;
				СчетФактураОбъект.Записать();
				флУдалосьПерезаполнить = истина;
			Исключение
			КонецПопытки;
			Если флУдалосьПерезаполнить Тогда
				Текст = Текст + Символы.ПС+"Реквизиты в счете-фактуре перезаполнены автоматически";
			Иначе
				Текст = Текст + Символы.ПС+"Не удалось автоматически перезаполнить реквизиты. Для перезаполнения реквизитов необходимо открыть счет-фактуру и записать ее";
			КонецЕсли;
		Иначе
			Текст = Текст + Символы.ПС+"Внимание! У данного счета-фактуры несколько документов-оснований. Нельзя автоматически перезаполнить реквизиты";
		КонецЕсли;
		
		Сообщить(Текст, СтатусСообщения.Внимание);
	КонецЕсли;
	
	Возврат Флаг;
	
КонецФункции // ПроверитьСоответствиеРеквизитовСчетаФактурыВыданной()

// Процедура вызывается по кнопке "Рассчитать" из формы диалога документа.
// Выполняется расчет объемов реализации в текущем периоде по данным
// регистра НДСНачисленный в разрезе различных ставок НДС.
//
Процедура РассчитатьВыручкуДляНДС(Организация, НачалоПериода, КонецПериода, ВыручкаЕНВД, ВыручкаБезНДС, ВыручкаНДС0, ВыручкаНДС) Экспорт

	ВыручкаЕНВД   = 0;
	ВыручкаБезНДС = 0;
	ВыручкаНДС0   = 0;
	ВыручкаНДС    = 0;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация.ГоловнаяОрганизация);	
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Организации.Ссылка КАК Организация
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	(Организации.ГоловнаяОрганизация = &Организация
	               |			ИЛИ Организации.Ссылка = &Организация
	               |			ИЛИ ВЫБОР
	               |				КОГДА &ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |					ТОГДА Организации.Ссылка = &ГоловнаяОрганизация
	               |							ИЛИ Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ)";
				   
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Запрос.УстановитьПараметр("Организация", МассивОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(КонецПериода));
	
	ВидыНачисленияРеализация = Новый СписокЗначений;
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.Реализация0);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	Запрос.УстановитьПараметр("ВидыНачисленияРеализация", ВидыНачисленияРеализация);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСНачисленныйОбороты.ВидНачисления,
	               |	СУММА(НДСНачисленныйОбороты.СуммаБезНДСПриход) КАК СуммаБезНДС
	               |ИЗ
	               |	РегистрНакопления.НДСНачисленный.Обороты(
	               |			НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ),
	               |			КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ),
	               |			,
	               |			Организация В (&Организация)
	               |				И (СчетФактура.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ))
	               |				И ВидНачисления В (&ВидыНачисленияРеализация)) КАК НДСНачисленныйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСНачисленныйОбороты.ВидНачисления";
			
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
		
		Если СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС Тогда
		    ВыручкаНДС = ВыручкаНДС + СтрокаРезультата.СуммаБезНДС;
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС Тогда	
			ВыручкаБезНДС = ВыручкаБезНДС + СтрокаРезультата.СуммаБезНДС;
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД Тогда	
			ВыручкаЕНВД = ВыручкаЕНВД + СтрокаРезультата.СуммаБезНДС;
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0 Тогда	
			ВыручкаНДС0 = ВыручкаНДС0 + СтрокаРезультата.СуммаБезНДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьВыручкуДляНДС()

// Функция определяет наличие счетов-фактур, полученных по документам,
// которые могут являться основаниями для ввода счетов-фактур полученных.
//
// Применяется для контроля за наличием в ИБ информации о наличии счетов-
// фактур.
// 
// Параметры:
//  НачПериода       - Дата - Начальная дата выборки (включительно, с 00:00:00)
//  КонПериода       - Дата - Конечная дата выборки (включительно, по 23:59:59)
//  Организация      - Справочник.Ссылка - Организация, по которой
//                     осуществляется отбор. Необязательный параметр. Если не
//                     задан, отбор осуществляется по всем организациям.
//  Фильтр           - Документ.Ссылка, Массив - Документ или список документов, 
//                     по которым осуществляется отбор. Необязательный параметр. 
//                     Если не задан, отбор осуществляется по всем документам, 
//                     которые могут являться основаниями для ввода счетов-фактур 
//                     полученных.
//  ВсеКромеФильтра  - Булево - Признак отбора документов, не входящих в Фильтр. 
//                     Необязательный параметр. Значение по умолчанию - Ложь.
//                     Если не задан, отбираются документы, заданные в Фильтре.
//  НаличиеСчетаФактуры - Булево - Признак отбора документов:
//                        Истина - Отбирать документы, по которым существуют
//                        счета-фактуры.
//                        Ложь - Отбирать документы, по которым счета-фактуры
//                        отсутствуют.
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех документов.
// СчетФактураПроведен - Булево - Признак отбора счетов-фактур:
//                        Истина - Отбирать проведенные счета-фактуры
//                        Ложь - Отбирать непроведенные счета-фактуры
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех счетов-фактур.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений - Состав колонок:
//                    Документ - Документ.Ссылка - Документ, по которому
//                               производился поиск счета-фактуры полученного
//                    СчетФактура - Документ.Ссылка - Ссылка на счет-
//                                  фактуру полученный, либо Неопределено
//
Функция ОпределитьНаличиеСчетовФактурПолученных(НачПериода = Неопределено, КонПериода = Неопределено, Организация, Фильтр = Неопределено, ВсеКромеФильтра = Ложь, НаличиеСчетаФактуры = Неопределено, СчетФактураПроведен = Неопределено, ДатаСФНеБолее = Неопределено) Экспорт
	
	
	Если ПолучитьУПУпрощенныйУчетНДС(Организация, ?(Не ЗначениеЗаполнено(КонПериода), ТекущаяДата(), КонПериода)) Тогда
		Возврат УпрощенныйНДС_ОпределитьНаличиеСчетовФактурПолученных(НачПериода, КонПериода,Организация, Фильтр, ВсеКромеФильтра, НаличиеСчетаФактуры, СчетФактураПроведен, ДатаСФНеБолее);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НачПериода",  НачПериода);
	Запрос.УстановитьПараметр("КонПериода",  ?(НЕ ЗначениеЗаполнено(КонПериода),'00010101',КонецДня(КонПериода)));
	Запрос.УстановитьПараметр("ДатаСФНеБолее",  ?(НЕ ЗначениеЗаполнено(ДатаСФНеБолее),Неопределено,КонецДня(ДатаСФНеБолее)));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Фильтр",      Фильтр);
	
	// Дополняем условие запроса отбором по периоду
	Если (ЗначениеЗаполнено(НачПериода)) И (ЗначениеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата МЕЖДУ &НачПериода И &КонПериода
		                 |";
	ИначеЕсли (ЗначениеЗаполнено(НачПериода)) И (НЕ ЗначениеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата >= &НачПериода
		                 |";
	ИначеЕсли (НЕ ЗначениеЗаполнено(НачПериода)) И (ЗначениеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата <= &КонПериода
		                 |";
	Иначе
		Условие_Основание = "";
	КонецЕсли;
	
	// Дополняем условие запроса отбором по организации
	Условие_Основание = Условие_Основание 
	               + ?(НЕ ЗначениеЗаполнено(Организация), "", ?(НЕ ЗначениеЗаполнено(Условие_Основание), "", " И ") + "Организация = &Организация ");
	
	// Дополняем условие запроса отбором по документу-основанию или списку документов-оснований
	Условие_Основание = Условие_Основание
	               + ?(НЕ ЗначениеЗаполнено(Фильтр), "", ?(НЕ ЗначениеЗаполнено(Условие_Основание), "", " И ") + "СчетФактура " + ?(ВсеКромеФильтра, " НЕ ", "") + " В (&Фильтр) ");
	
	// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
	УсловиеЗапроса = ?(НаличиеСчетаФактуры = Неопределено, "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + ?(НаличиеСчетаФактуры, "НЕ (", "(") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура.ПредъявленСчетФактура
					|			ТОГДА НДСПредъявленныйОбороты.СчетФактура
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
					|			ТОГДА СчетФактураПолученный.Ссылка
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка, СчетФактураВыданный.Ссылка)
					|	КОНЕЦ ЕСТЬ NULL) ");
	// Дополняем условие запроса отбором по признаку проведения счета-фактуры
	УсловиеЗапроса = УсловиеЗапроса
	               + ?(СчетФактураПроведен = Неопределено, "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура.ПредъявленСчетФактура
					|			ТОГДА НДСПредъявленныйОбороты.СчетФактура.Проведен
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
					|			ТОГДА СчетФактураПолученный.Ссылка.Проведен
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка.Проведен, СчетФактураВыданный.Ссылка.Проведен)
					|	КОНЕЦ = " + ?(СчетФактураПроведен, "ИСТИНА", "ЛОЖЬ") + " ");
				   
	// Дополняем условие запроса отбором по дате СФ	
	УсловиеЗапроса = УсловиеЗапроса
	               + ?(НЕ ЗначениеЗаполнено(ДатаСФНеБолее), "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура.ПредъявленСчетФактура
					|			ТОГДА НДСПредъявленныйОбороты.СчетФактура.Дата
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
					|			ТОГДА СчетФактураПолученный.Ссылка.Дата
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка.Дата, СчетФактураВыданный.Ссылка.Дата)
					|	КОНЕЦ <= &ДатаСФНеБолее ");
	
	// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
	УсловиеЗапроса = УсловиеЗапроса + ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПоступлениеТоваровУслуг
					|			И НДСПредъявленныйОбороты.ДоговорКонтрагента.УчетАгентскогоНДС
					|			И НДСПредъявленныйОбороты.ДоговорКонтрагента.НалоговыйАгентПоОплате
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ";
	
	// Дополняем условие запроса ключевым словом "ГДЕ"
	УсловиеЗапроса = ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", "ГДЕ " + УсловиеЗапроса);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НДСПредъявленныйОбороты.СчетФактура.Дата КАК Дата,
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура, НЕОПРЕДЕЛЕНО) КАК Документ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА СчетФактураПолученный.ДокументОснование
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура.ДокументОснование
	|			ИНАЧЕ НДСПредъявленныйОбороты.СчетФактура
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДокументОснование,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура.ПредъявленСчетФактура
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Ссылка
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка, СчетФактураВыданный.Ссылка)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактура,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура.ПредъявленСчетФактура
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура.Проведен
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Ссылка.Проведен
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка.Проведен, СчетФактураВыданный.Ссылка.Проведен)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураПроведен,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура.ПредъявленСчетФактура
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура.Дата
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Ссылка.Дата
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка.Дата, СчетФактураВыданный.Ссылка.Дата)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураДата
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(, , Период, Организация = &Организация) КАК НДСПредъявленныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|		ПО (НДСПредъявленныйОбороты.СчетФактура = СчетФактураПолученный.ДокументОснование
	|				ИЛИ НДСПредъявленныйОбороты.СчетФактура = СчетФактураПолученный.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|		ПО (НДСПредъявленныйОбороты.СчетФактура = СчетФактураВыданный.ДокументОснование
	|				ИЛИ НДСПредъявленныйОбороты.СчетФактура = СчетФактураВыданный.Ссылка)
	|			И (СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаРеализацию))";
	
	Запрос.Текст =  Запрос.Текст + УсловиеЗапроса;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация",Условие_Основание);
	
	Если ЗначениеЗаполнено(КонПериода) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,", Период","&КонПериода, Период");
	КонецЕсли; 
	Запрос.Текст = Запрос.Текст + "
									|УПОРЯДОЧИТЬ ПО
									|	Дата";
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДокументов;
	
КонецФункции // ОпределитьНаличиеСчетовФактурПолученных()

Функция УпрощенныйНДС_ОпределитьНаличиеСчетовФактурПолученных(НачПериода=Неопределено, КонПериода= Неопределено,Организация, Фильтр = Неопределено,ВсеКромеФильтра = Ложь, НаличиеСчетаФактуры = Неопределено, СчетФактураПроведен = Неопределено, ДатаСФНеБолее = Неопределено) Экспорт
	
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НачПериода",  НачПериода);
	Запрос.УстановитьПараметр("КонПериода",  ?(НЕ ЗначениеЗаполнено(КонПериода),'00010101',КонецДня(КонПериода)));
	Запрос.УстановитьПараметр("ДатаСФНеБолее",  ?(НЕ ЗначениеЗаполнено(ДатаСФНеБолее),Неопределено,КонецДня(ДатаСФНеБолее)));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Фильтр",      Фильтр);
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	Запрос.УстановитьПараметр("СчетУчетаНДС", ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
	Запрос.УстановитьПараметр("СчетНДС", ПланыСчетов.Хозрасчетный.НДС);
	
	// Дополняем условие запроса отбором по периоду
	Если (ЗначениеЗаполнено(НачПериода)) И (ЗначениеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "Субконто1.Дата МЕЖДУ &НачПериода И &КонПериода
		                 |";
	ИначеЕсли (ЗначениеЗаполнено(НачПериода)) И (НЕ ЗначениеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "Субконто1.Дата >= &НачПериода
		                 |";
	ИначеЕсли (НЕ ЗначениеЗаполнено(НачПериода)) И (ЗначениеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "Субконто1.Дата <= &КонПериода
		                 |";
	Иначе
		Условие_Основание = "";
	КонецЕсли;
	
	// Дополняем условие запроса отбором по организации
	Условие_Основание = Условие_Основание 
	               + ?(НЕ ЗначениеЗаполнено(Организация), "", ?(НЕ ЗначениеЗаполнено(Условие_Основание), "", " И ") + "Организация = &Организация ");
	
	// Дополняем условие запроса отбором по документу-основанию или списку документов-оснований
	Условие_Основание = Условие_Основание
	               + ?(НЕ ЗначениеЗаполнено(Фильтр), "", ?(НЕ ЗначениеЗаполнено(Условие_Основание), "", " И ") + "Субконто1 " + ?(ВсеКромеФильтра, " НЕ ", "") + " В (&Фильтр) ");
	
	// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
	УсловиеЗапроса = ?(НаличиеСчетаФактуры = Неопределено, "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + ?(НаличиеСчетаФактуры, "НЕ (", "(") + "
					|	ВЫБОР
					|		КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ГТДИмпорт
					|			ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ИЛИ ХозрасчетныйОбороты.Субконто1.ПредъявленСчетФактура
					|			ТОГДА ХозрасчетныйОбороты.Субконто1
					|		КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ОтчетКомиссионераОПродажах
					|			ТОГДА СчетФактураПолученный.Ссылка
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка, СчетФактураВыданный.Ссылка)
					|	КОНЕЦ ЕСТЬ NULL) ");
	// Дополняем условие запроса отбором по признаку проведения счета-фактуры
	УсловиеЗапроса = УсловиеЗапроса
	               + ?(СчетФактураПроведен = Неопределено, "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ГТДИмпорт
					|			ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ИЛИ ХозрасчетныйОбороты.Субконто1.ПредъявленСчетФактура
					|			ТОГДА ХозрасчетныйОбороты.Субконто1.Проведен
					|		КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ОтчетКомиссионераОПродажах
					|			ТОГДА СчетФактураПолученный.Ссылка.Проведен
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка.Проведен, СчетФактураВыданный.Ссылка.Проведен)
					|	КОНЕЦ = " + ?(СчетФактураПроведен, "ИСТИНА", "ЛОЖЬ") + " ");
				   
	// Дополняем условие запроса отбором по дате СФ	
	УсловиеЗапроса = УсловиеЗапроса
	               + ?(НЕ ЗначениеЗаполнено(ДатаСФНеБолее), "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ГТДИмпорт
					|			ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ИЛИ ХозрасчетныйОбороты.Субконто1.ПредъявленСчетФактура
					|			ТОГДА ХозрасчетныйОбороты.Субконто1.Дата
					|		КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ОтчетКомиссионераОПродажах
					|			ТОГДА СчетФактураПолученный.Ссылка.Дата
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка.Дата, СчетФактураВыданный.Ссылка.Дата)
					|	КОНЕЦ <= &ДатаСФНеБолее ");
	
	// Дополняем условие запроса соединением условий "И"
	УсловиеЗапроса = ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И " + УсловиеЗапроса);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто1, НЕОПРЕДЕЛЕНО) КАК Документ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА СчетФактураПолученный.ДокументОснование
	|			КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА ХозрасчетныйОбороты.Субконто1.ДокументОснование
	|			ИНАЧЕ ХозрасчетныйОбороты.Субконто1
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДокументОснование,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ГТДИмпорт
	|					ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					ИЛИ ХозрасчетныйОбороты.Субконто1.ПредъявленСчетФактура
	|				ТОГДА ХозрасчетныйОбороты.Субконто1
	|			КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Ссылка
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка, СчетФактураВыданный.Ссылка)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактура,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ГТДИмпорт
	|					ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					ИЛИ ХозрасчетныйОбороты.Субконто1.ПредъявленСчетФактура
	|				ТОГДА ХозрасчетныйОбороты.Субконто1.Проведен
	|			КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Ссылка.Проведен
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка.Проведен, СчетФактураВыданный.Ссылка.Проведен)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураПроведен,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ГТДИмпорт
	|					ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					ИЛИ ХозрасчетныйОбороты.Субконто1.ПредъявленСчетФактура
	|				ТОГДА ХозрасчетныйОбороты.Субконто1.Дата
	|			КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Ссылка.Дата
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка.Дата, СчетФактураВыданный.Ссылка.Дата)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураДата
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Период, Счет В ИЕРАРХИИ (&СчетУчетаНДС), &МассивСубконто, Организация = &Организация, (НЕ КорСчет = &СчетНДС), ) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|		ПО (ХозрасчетныйОбороты.Субконто1 = СчетФактураПолученный.ДокументОснование
	|				ИЛИ ХозрасчетныйОбороты.Субконто1 = СчетФактураПолученный.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|		ПО (ХозрасчетныйОбороты.Субконто1 = СчетФактураВыданный.ДокументОснование
	|				ИЛИ ХозрасчетныйОбороты.Субконто1 = СчетФактураВыданный.Ссылка)
	|ГДЕ
	|	ХозрасчетныйОбороты.СуммаОборот > 0";
	
	Запрос.Текст =  Запрос.Текст + УсловиеЗапроса;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация",Условие_Основание);
	
	Если ЗначениеЗаполнено(КонПериода) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,", Период","&КонПериода, Период");
	КонецЕсли; 
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДокументов;
		
КонецФункции

Функция ПроводитьПоРазделуУчетаНДС(ДатаДокумента) Экспорт
	
	ДатаНачалаУчетаНДС = Константы.ДатаНачалаАвтоматическогоОтраженияВУчетеНДС.Получить();
	
	Возврат ДатаНачалаУчетаНДС <= ДатаДокумента;
	
КонецФункции

Функция РасчетНДСвРубляхПоСтавкеДокумента(ДатаДокумента) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Определяет дату начала налогового периода для НДС по учетной политике
Функция ПолучитьНачалоПериодаПоУчетнойПолитике(Организация, Дата, Отказ = Ложь, УчетнаяПолитика = Неопределено) Экспорт
	
	Возврат НачалоКвартала(Дата);
	
КонецФункции

// Определяет дату окончания налогового периода для НДС по учетной политике
Функция ПолучитьКонецПериодаПоУчетнойПолитике(Организация, Дата, Отказ = Ложь, УчетнаяПолитика = Неопределено) Экспорт
	
	Возврат КонецКвартала(Дата);
	
КонецФункции

Функция ДляСчетаФактурыНеТребуетсяКонтрагент(СчетФактура) Экспорт
	
	Возврат ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
			Или ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			Или ТипЗнч(СчетФактура) = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом");
			
КонецФункции

//Переименование колонок таблицы значений по данным соответствия
Процедура ПереименованиеКолонок(ТаблицаЗначений, СоответствиеНазваний, Обратное = Ложь, СообщатьОбОшибке = Истина) Экспорт
	
	Колонки = ТаблицаЗначений.Колонки;
	
	Для каждого Колонка Из СоответствиеНазваний Цикл
		Если Обратное Тогда
			СтароеНазвание = Колонка.Значение;
			НовоеНазвание =  Колонка.Ключ;
		Иначе
			СтароеНазвание = Колонка.Ключ;
			НовоеНазвание =  Колонка.Значение;
		КонецЕсли;
		Если Колонки.Найти(СтароеНазвание) = неопределено тогда
			Если СообщатьОбОшибке Тогда
			    ОбщегоНазначения.СообщитьОбОшибке("При переименовании колонок таблицы не обнаружена колонка с именем """+СтароеНазвание+"""! Переименование колонки не произведено.");
			КонецЕсли; 
		ИначеЕсли не Колонки.Найти(НовоеНазвание) = неопределено тогда
			Если СообщатьОбОшибке Тогда
			    ОбщегоНазначения.СообщитьОбОшибке("При переименовании колонок таблицы обнаружена колонка с именем """+НовоеНазвание+""", переименование существующей колонки """+СтароеНазвание+""" невозможно! Переименование колонки не произведено.");
			КонецЕсли; 
		Иначе
			Колонки[СтароеНазвание].Имя = НовоеНазвание;
		КонецЕсли;
	КонецЦикла; 
	

КонецПроцедуры

Функция ВидыЦенностейНалоговыйАгент(ТолькоПодлежащиеВычету = Истина) Экспорт
	
	МассивВидовЦенности = Новый Массив;
	МассивВидовЦенности.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	МассивВидовЦенности.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	МассивВидовЦенности.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	Если Не ТолькоПодлежащиеВычету Тогда
		МассивВидовЦенности.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	КонецЕсли;   
	 
	Возврат МассивВидовЦенности; 
	
КонецФункции

Функция ЭтоВидЦенностиНалоговыйАгент(ВидЦенности, ТолькоПодлежащиеВычету = Истина) Экспорт
	
	Возврат ВидыЦенностейНалоговыйАгент(ТолькоПодлежащиеВычету).Найти(ВидЦенности) <> Неопределено;
	
КонецФункции

Функция ВидыЦенностейСМРХозспособ() Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
 
	Возврат Список; 
	
КонецФункции

// Преобразует таблицу значений в дерево значений, группируя значения по колонкам, формирование итога по строкам
Функция ТаблицуЗначенийВДеревоСГруппировкой(ТаблицаРезультатов, знач ГруппировочныеКолонки= "",знач КолонкиИтогов = "") Экспорт
	
	ДеревоРезультатов  = Новый ДеревоЗначений();
	Для каждого Колонка из ТаблицаРезультатов.Колонки Цикл
		ДеревоРезультатов.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Заголовок,Колонка.Ширина);
	КонецЦикла; 
	
	Если ПустаяСтрока(ГруппировочныеКолонки) Тогда
		Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
			СтрокаДерева = ДеревоРезультатов.Строки.Добавить();

			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);

		КонецЦикла; 
		
		Возврат ДеревоРезультатов;
	КонецЕсли;
	
	ТаблицаГруппировок = ТаблицаРезультатов.Скопировать();
	ТаблицаГруппировок.Свернуть(ГруппировочныеКолонки,КолонкиИтогов);

	Для каждого СтрокаТаблицы Из ТаблицаГруппировок Цикл
		СтрокаДерева = ДеревоРезультатов.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		
	КонецЦикла; 
	
	ЗначенияОтбора = Новый Структура(ГруппировочныеКолонки);
	Для каждого СтрокаДерева из  ДеревоРезультатов.Строки Цикл
		//Формирование структуры отбора
		Для каждого ПараметрОтбора Из ЗначенияОтбора Цикл
			ЗначенияОтбора.Вставить(ПараметрОтбора.Ключ, СтрокаДерева[ПараметрОтбора.Ключ]);
		КонецЦикла; 
		
		//Поиск и заполнение подчиненными колонками
		МассивПодчиненныхСтрок = ТаблицаРезультатов.НайтиСтроки(ЗначенияОтбора);
		Для каждого СтрокаТаблицы Из МассивПодчиненныхСтрок Цикл
			ПодчиненнаяСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрокаДерева, СтрокаТаблицы);
			
		КонецЦикла; 
	КонецЦикла;
		
	Возврат ДеревоРезультатов;
КонецФункции

// Формирует список счетов учета косвенных расходов
Функция ОпределитьСчетаУчетаКосвенныхРасходов() Экспорт

	ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
	
	СчетаУчетаЗатрат = Новый СписокЗначений();
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОсновноеПроизводство);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбслуживающиеПроизводства);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ВспомогательныеПроизводства);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщепроизводственныеРасходы);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщехозяйственныеРасходы);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ИздержкиОбращения);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.КоммерческиеРасходы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Хозрасчетный.Ссылка
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |ГДЕ
	               |	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)";
	
	Запрос.УстановитьПараметр("СписокСчетов",СчетаУчетаЗатрат);
	
	СчетаУчетаЗатрат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СчетаУчетаЗатрат;

КонецФункции

// Формирует список счетов учета ценностей
// ОС - основных средств
// НМА - нематериальных активов
// ВНА - внеоборотных активов
// ОбъектыСтроительства - объектов строительства
// Материалы - материалов
//
Функция ОпределитьСчетаУчетаЦенностей(ОбъектыУчета = "", ДатаОбъекта = '00010101') Экспорт

	ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
	
	СчетаУчетаЗатрат = Новый СписокЗначений();
	Если ОбъектыУчета = "Оборудование" Или ОбъектыУчета = "ВНА" Тогда
		Если ДатаОбъекта >= '20060101' Тогда
			СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		Иначе 
			Возврат СчетаУчетаЗатрат;
		КонецЕсли;
	КонецЕсли;
	Если ОбъектыУчета = "ОС" Или ОбъектыУчета = "ВНА" Тогда
		Если ДатаОбъекта < '20060101' Тогда
			СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		КонецЕсли;
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	КонецЕсли; 
	Если ОбъектыУчета = "НМА" Или ОбъектыУчета = "ВНА" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	КонецЕсли;  
	Если ОбъектыУчета = "ОбъектыСтроительства" Или ОбъектыУчета = "ВНА" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	КонецЕсли;
	Если ОбъектыУчета = "Материалы" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Материалы);
	КонецЕсли;  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Родитель =&Счет
		|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ";
	
	ВременныеСчетаУчетаЗатрат = СчетаУчетаЗатрат.Скопировать();
	
	Для каждого Счет из ВременныеСчетаУчетаЗатрат Цикл
		
		Запрос.УстановитьПараметр("Счет",Счет.Значение);
		Результат = Запрос.Выполнить().Выгрузить();
		                     
		Пока Результат.Количество()>0 Цикл
			
			Для каждого строка из Результат цикл
				СчетаУчетаЗатрат.Добавить(строка.Ссылка);
			КонецЦикла;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Родитель","Родитель.Родитель");
			Результат = Запрос.Выполнить().Выгрузить();
			
		КонецЦикла;
		
    КонецЦикла;
	
	Возврат СчетаУчетаЗатрат;


КонецФункции
 
Функция ПолучитьИменаДокументовСДаннымиСФ() Экспорт
	
	ИменаДокументов = Новый Массив;
	Для Каждого Документ Из Метаданные.Документы Цикл
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПредъявленСчетФактура", Документ) Тогда
			ИменаДокументов.Добавить(Документ.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИменаДокументов;
	
КонецФункции

Функция ВидыЦенностиНалоговыйАгентПоступление() Экспорт
	
	Возврат ВидыЦенностейНалоговыйАгент(Истина);
	
КонецФункции

Функция НалоговыйАгентЗаСчетСобственныхСредств(ВидЦенности) Экспорт
	
	Если ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////
// ОТРАЖЕНИЕ ДВИЖЕНИЙ ПО РЕГИСТРУ НДС ПО ПАРТИЯМ ЗАПАСОВ, ПАРТИОННЫЙ УЧЕТ ДЛЯ НДС

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// Непосредственное заполнение таблицы движений для регистра "НДСПоПриобретеннымЦенностям"
// Данные движения необходимо делать в следующих случаях:
// 1. Когда ведется сложный учет НДС и происходит приходование товаров или материалов.
//    Это соответствует ситуации когда у организации существуют виды деятельности, 
//    облагаемые НДС по-разному, например обычный НДС, НДС по ставке 0%, и т.п.).
// 2. Когда происходит оприходование оборудования, требуещего монтажа (бухсчет 07)
//    для того чтобы впоследствии, можно было правильно рассчитать суммы для отражения в 
//    регистре НДССтроительство при передаче этого оборудования в монтаж.
Процедура СформироватьДвиженияПоступленияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураШапкиДокумента,ТЗ, ТаблицаДвиженийНДСПартии, Отказ) экспорт
	
	Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(ОшибкаВПолучении = Ложь и УчетнаяПолитика.УпрощенныйУчетНДС));
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.УпрощенныйУчетНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если ТЗ.Количество()=0 тогда
		//Отрабатывать ничего не надо.
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
		СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС");
		ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	КонецЕсли; 
	
	Если ТЗ.Колонки.Найти("Партия") = неопределено тогда 
		ТЗ.Колонки.Добавить("Партия");
		ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"Партия");
	КонецЕсли;
	Если ТЗ.Колонки.Найти("Склад") = неопределено тогда 
		ТЗ.Колонки.Добавить("Склад",новый ОписаниеТипов("СправочникСсылка.Склады"));
		Если СтруктураШапкиДокумента.Свойство("Склад") Тогда
			ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,"Склад");
		КонецЕсли; 
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("Услуга") = неопределено тогда 
		ТЗ.Колонки.Добавить("Услуга", новый описаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("НДСВключенВСтоимость")= Неопределено Тогда
		ТЗ.Колонки.Добавить("НДСВключенВСтоимость", Новый ОписаниеТипов("Булево"));
		Если СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость") Тогда
			ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.НДСВключенВСтоимость,"НДСВключенВСтоимость");
		КонецЕсли; 
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("СчетФактура")= Неопределено Тогда
		ТЗ.Колонки.Добавить("СчетФактура");
		ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"СчетФактура");
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("СчетУчетаНДС")= Неопределено Тогда
		ТЗ.Колонки.Добавить("СчетУчетаНДС");
		Если СтруктураШапкиДокумента.Свойство("СчетУчетаНДС") Тогда
		    ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаНДС,"СчетУчетаНДС");
		КонецЕсли; 
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("СтавкаНДС")= Неопределено Тогда
		ТЗ.Колонки.Добавить("СтавкаНДС");
		Если СтруктураШапкиДокумента.Свойство("СтавкаНДС") Тогда
		    ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтавкаНДС,"СтавкаНДС");
		КонецЕсли; 
	КонецЕсли;
	
	ЕстьСтоимость	= не ( ТЗ.Колонки.Найти("Стоимость") = Неопределено);
	ЕстьСуммаБезНДС	= не ( ТЗ.Колонки.Найти("СуммаБезНДС") = Неопределено);
	ЕстьНДС			= не ( ТЗ.Колонки.Найти("НДС") = Неопределено);
	
	ТЗ.Свернуть("СчетФактура, Партия,Склад, ВидЦенности,СчетУчетаЦенности,Номенклатура,НДСВключенВСтоимость, Услуга,СчетУчетаНДС, СтавкаНДС",
		"Количество"+?(ЕстьСтоимость,", Стоимость"+?(ЕстьНДС,", НДС",""),?(ЕстьСуммаБезНДС,", СуммаБезНДС","") + ?(ЕстьНДС,", НДС","")));
		
	Для Каждого СтрокаДок из ТЗ Цикл
		
		Если СтрокаДок.СчетУчетаЦенности.Забалансовый Тогда
			// Для товаров, учитываемых на забалансовых счетах учет НДС не ведется.
			Продолжить;
		ИначеЕсли СтрокаДок.СчетУчетаЦенности = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ
			 Тогда
			// Розница в продажных ценах без учета номенклатуры.
			// Не требуется вести учет по партиям в дальнейшем
			Продолжить;
		ИначеЕсли СтрокаДок.СчетУчетаЦенности = ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости
			 Тогда
			// Переданные объекты недвижимости.
			// Не требуется вести учет по партиям в дальнейшем
			Продолжить;
		ИначеЕсли СтруктураШапкиДокумента.СложныйУчетНДС Тогда
			//Все партии приобретенных ТМЦ учитываются в регистре.

		ИначеЕсли СтрокаДок.СчетУчетаЦенности = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке
			или СтрокаДок.СчетУчетаЦенности.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке)
			или СтрокаДок.СчетУчетаЦенности = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств
			или СтрокаДок.СчетУчетаЦенности.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств)
			Тогда
			// Оставляем строки только по ОС. По ним партионный учет ведется всегда!
		Иначе 
			// Не отражаем в регистре партий.
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения = ТаблицаДвиженийНДСПартии.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижения,СтрокаДок,,"СчетФактура");
		
		СтрокаДвижения.Активность	= Истина;
		СтрокаДвижения.Период		= СтруктураШапкиДокумента.Дата;
		СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.СчетУчета	= СтрокаДок.СчетУчетаЦенности;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
		    СтрокаДвижения.СчетФактура	= Неопределено;
		Иначе	
			СтрокаДвижения.СчетФактура	= СтрокаДок.СчетФактура;
		КонецЕсли;
		
		Если УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаДок.СчетУчетаЦенности) Тогда
			СтрокаДвижения.Склад		= СтрокаДок.Склад;
		Иначе
			СтрокаДвижения.Склад		= Неопределено;
		КонецЕсли;
		Если СтрокаДок.Услуга Тогда
			СтрокаДвижения.Количество =	0;
		Иначе	
			СтрокаДвижения.Количество =	СтрокаДок.Количество;
		КонецЕсли;
		
		СтрокаДвижения.Стоимость	= ?(ЕстьСтоимость,СтрокаДок.Стоимость,?(ЕстьСуммаБезНДС,СтрокаДок.СуммаБезНДС,0) + ?(ЕстьНДС,СтрокаДок.НДС,0));
		
	КонецЦикла;
	

КонецПроцедуры // СформироватьДвиженияПоРегиструНДСПоПриобретеннымЦенностям()

Функция ПодготовитьТаблицуСписанияПартийДляНДС(СтруктураШапкиДокумента, ТаблицаВыручки, Отказ, Заголовок, СписокРаспределяемыхКолонок = Неопределено, СписокИсключаемыхКолонок = Неопределено) Экспорт
	
	Если СписокРаспределяемыхКолонок = Неопределено Тогда
		СписокРаспределяемыхКолонок = Новый Структура("Количество");
	КонецЕсли;
	Если СписокИсключаемыхКолонок = Неопределено Тогда
		СписокИсключаемыхКолонок = Новый Структура("Сумма, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБезНДСВал, СуммаСписания, СуммаСписанияНУ, СуммаСписанияПР, СуммаСписанияВР, ОтражениеВУСН "+
												   ", Регистратор, СчетДоходов, Субконто, СчетУчетаНДСПоРеализации");										   
	КонецЕсли;
											   
	ТаблицаВыручкиНДС = ТаблицаВыручки.Скопировать();
	ТаблицаВыручкиНДС.Колонки.Удалить("Склад");
	
	ТаблицаТоваровПоПартиям = ОбщегоНазначения.РазвернутьПоВложеннойТаблице(ТаблицаВыручкиНДС, "СписанныеПартии",СписокРаспределяемыхКолонок, СписокИсключаемыхКолонок);

	Возврат УчетНДС.ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаТоваровПоПартиям, Отказ, Заголовок);
		
КонецФункции

Функция ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаВыручкиИсходная,Отказ, Заголовок, ЭтоВозврат = Ложь, ЭтоВозвратОтПокупателя = Ложь) Экспорт
	
	ТаблицаВыручки = ТаблицаВыручкиИсходная.Скопировать();
	ВидДокумента = "";
	СтруктураШапкиДокумента.Свойство("ВидДокумента",ВидДокумента);
	ВестиСуммовойУчетПоСкладам = УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Хозрасчетный.Товары);
	
	Если Не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") 
		Или Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") 
		Или Не СтруктураШапкиДокумента.Свойство("СпособОценкиМПЗ") Тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		Если Не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
			СтруктураШапкиДокумента.Вставить("СложныйУчетНДС",(Не Отказ И УчетнаяПолитика.СложныйУчетНДС));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС",(Не Отказ И УчетнаяПолитика.УпрощенныйУчетНДС));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("СпособОценкиМПЗ") Тогда
			СтруктураШапкиДокумента.Вставить("СпособОценкиМПЗ", ?(Отказ, Перечисления.СпособыОценки.ПоСредней, УчетнаяПолитика.СпособОценкиМПЗ));
		КонецЕсли;
	КонецЕсли; 
	
	Если ТаблицаВыручки.Колонки.Найти("НДСЭтоЕНВД") = Неопределено Тогда
		ТаблицаВыручки.Колонки.Добавить("НДСЭтоЕНВД", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	ТаблицаСписанияНДСПоСтрокам = РегистрыНакопления.НДСПоПриобретеннымЦенностям.СоздатьНаборЗаписей().Выгрузить();
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ВключитьВСтоимость", Новый ОписаниеТипов("Булево"));
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости", Новый ОписаниеТипов("Булево"));
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ПредположениеСтавки0", Новый ОписаниеТипов("Булево"));
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("СуммаНДСВключенВСтоимость", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("СуммаНДССписанНаРасходы", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("СуммаНДСИсключенИзСтоимости", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ПартияОтсутствуетВБУ", Новый ОписаниеТипов("Булево"));
	
	Если ЭтоВозврат и не ЭтоВозвратОтПокупателя Тогда
		ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ПартияСовпадаетСУказаннымДокументомДляВозврата", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Для Каждого Кол Из ТаблицаВыручки.Колонки Цикл
		Если ТаблицаСписанияНДСПоСтрокам.Колонки.Найти(Кол.Имя) = Неопределено Тогда
			ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения); 
		КонецЕсли; 
	КонецЦикла;
		
	Если ЭтоВозврат и не ЭтоВозвратОтПокупателя Тогда
		ТаблицаВыручки.Колонки.Добавить("ПартияСовпадаетСУказаннымДокументомДляВозврата", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Если ТаблицаВыручки.Колонки.Найти("НДСВСтоимостиТоваров")=Неопределено Тогда
		ТаблицаВыручки.Колонки.Добавить("НДСВСтоимостиТоваров", Новый описаниеТипов("ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров"));
	КонецЕсли;
	
	ЕстьСтавкаНДС = не (ТаблицаВыручки.Колонки.Найти("СтавкаНДС") = неопределено);
	Если не ЕстьСтавкаНДС тогда
		Если СтруктураШапкиДокумента.Свойство("НДСВСтоимостиТоваров") Тогда
			ТаблицаВыручки.ЗаполнитьЗначения(СтруктураШапкиДокумента.НДСВСтоимостиТоваров,"НДСВСтоимостиТоваров")	
		КонецЕсли; 
	КонецЕсли;
	
	ТаблицаСписанияПоСтроке = Новый ТаблицаЗначений;
	ТаблицаСписанияПоСтроке.Колонки.Добавить("Партия");
	ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ВключитьВСтоимость");
	ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости");
	ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ПредположениеСтавки0");
	ТаблицаСписанияПоСтроке.Колонки.Добавить("НДСВключенВСтоимость");
	ТаблицаСписанияПоСтроке.Колонки.Добавить("ВидЦенности");
	ТаблицаСписанияПоСтроке.Колонки.Добавить("СчетУчетаНДС");
	ТаблицаСписанияПоСтроке.Колонки.Добавить("СтавкаНДС");
	ТаблицаСписанияПоСтроке.Колонки.Добавить("СчетФактура");
	ТаблицаСписанияПоСтроке.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаСписанияПоСтроке.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаСписанияПоСтроке.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаСписанияПоСтроке.Колонки.Добавить("Склад");
	Если ЭтоВозврат и не ЭтоВозвратОтПокупателя Тогда
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ПартияСовпадаетСУказаннымДокументомДляВозврата", Новый описаниеТипов("Булево"));
	КонецЕсли; 
		
	// Значения перечисления
	ДействиеНДСВСтоимостиТоваров_ВключитьВСтоимость = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
	ДействиеНДСВСтоимостиТоваров_ИсключитьИзСтоимости = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости;
	ДействиеНДСВСтоимостиТоваров_НеИзменять = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	
	//////////////////////////////////////////////////////////////////////////////////
	// Определяем партии к списанию по регистру по ключевым наборам реквизитов.
	ТаблицаВыручки.Колонки.Добавить("СписыватьПоПартиямНДС", новый описаниеТипов("Булево"));
	ЕстьСкладВТЧ = не (ТаблицаВыручки.Колонки.Найти("Склад") = Неопределено);
	ВыданоСообщениеБезНДС = Ложь;
	ВыданоСообщение0 = Ложь;
	СписыватьПоПартиямВсе = Истина;
	
	Для каждого СтрокаСписания Из ТаблицаВыручки Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСписания.СчетУчета) Тогда
			// Не указан счет учета ТМЦ, такое возможно только для услуг.
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		ИначеЕсли СтрокаСписания.СчетУчета.Забалансовый Тогда
			// Для товаров, учитываемых на забалансовых счетах учет НДС не ведется.
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаСписания.Количество) Тогда
			// Строки с пустым количеством игнорируем
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
			
		ИначеЕсли СтруктураШапкиДокумента.СложныйУчетНДС Тогда
			//Все партии приобретенных ТМЦ учтены в регистре, все надо списывать.
			СтрокаСписания.СписыватьПоПартиямНДС = Истина;

		ИначеЕсли СтрокаСписания.СчетУчета = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке
			или СтрокаСписания.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке)
			или СтрокаСписания.СчетУчета = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств
			или СтрокаСписания.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств)
			Тогда
			// Оставляем строки только по ОС. По ним партионный учет ведется всегда!
			СтрокаСписания.СписыватьПоПартиямНДС = Истина;

		Иначе 
			Если ЕстьСтавкаНДС Тогда
				Если СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС И Не ВыданоСообщениеБезНДС Тогда
					ОбщегоНазначения.СообщитьОбОшибке("При реализации без НДС, НДС по приобретенным ценностям необходимо включать в стоимость реализуемой партии товаров или списывать на расходы (ст. 170 НК РФ).
					|Для автоматического контроля включения НДС в стоимость в учетной политике по налоговому учету необходимо установить флаг ""Организация осуществляет реализацию без НДС или с НДС 0%""
					| и выполнить все связанные с этим действия!", ВыданоСообщениеБезНДС , Заголовок, СтатусСообщения.Информация, Ложь);
				ИначеЕсли СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 И Не ВыданоСообщение0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке("При реализации с НДС 0%, вычет НДС по приобретенным ценностям возможен только после подтверждения ставки НДС 0% (п.3 ст. 172 НК РФ).
					|До этого момента вычет должен быть заблокирован.
					|Для автоматической блокировки вычета НДС в учетной политике по налоговому учету необходимо установить флаг ""Организация осуществляет реализацию без НДС или с НДС 0%""
					|и выполнить все связанные с этим действия!", ВыданоСообщение0, Заголовок, СтатусСообщения.Информация, Ложь);
				КонецЕсли;
			ИначеЕсли СтрокаСписания.НДСВСтоимостиТоваров = ДействиеНДСВСтоимостиТоваров_ВключитьВСтоимость
				Или СтрокаСписания.НДСВСтоимостиТоваров = ДействиеНДСВСтоимостиТоваров_ИсключитьИзСтоимости
				Тогда
				Если Не ВыданоСообщениеБезНДС Тогда
					Если ВидДокумента = "СписаниеТоваров" Тогда
						Если СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
							ОбщегоНазначения.СообщитьОбОшибке("При списании ТМЦ в результате инвентаризации на счет 94 <Недостачи и потери от порчи ценностей>
							| НДС по приобретенным ценностям необходимо включать в стоимость списываемой партии товаров.
							| Автоматический контроль включения НДС в стоимость не ведется при упрощенном учете НДС.", ВыданоСообщениеБезНДС ,Заголовок,СтатусСообщения.Информация, Ложь);
						Иначе
							ОбщегоНазначения.СообщитьОбОшибке("При списании ТМЦ в результате инвентаризации на счет 94 <Недостачи и потери от порчи ценностей>
							| НДС по приобретенным ценностям необходимо включать в стоимость списываемой партии товаров.
							| Для автоматического контроля включения НДС в стоимость в учетной политике организаций необходимо установить флаг ""Организация осуществляет реализацию без НДС или с НДС 0%""
							| и выполнить все связанные с этим действия!", ВыданоСообщениеБезНДС , Заголовок, СтатусСообщения.Информация, Ложь);
						КонецЕсли;
					Иначе
						ОбщегоНазначения.СообщитьОбОшибке("Для автоматического контроля включения НДС в стоимость (исключения из стоимости) в учетной политике необходимо установить флаг ""Организация осуществляет реализацию без НДС или с НДС 0%""
						| и выполнить все связанные с этим действия!", ВыданоСообщениеБезНДС , Заголовок, СтатусСообщения.Информация, Ложь);
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
			
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
		КонецЕсли;
		
		Если ЕстьСтавкаНДС Тогда
			Если ЭтоВозврат тогда 
				СтрокаСписания.НДСВСтоимостиТоваров = ДействиеНДСВСтоимостиТоваров_НеИзменять;	 
			ИначеЕсли СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СтрокаСписания.НДСВСтоимостиТоваров = ДействиеНДСВСтоимостиТоваров_ВключитьВСтоимость;
			Иначе
				СтрокаСписания.НДСВСтоимостиТоваров = ДействиеНДСВСтоимостиТоваров_ИсключитьИзСтоимости;
			КонецЕсли; 
		 КонецЕсли;
		 Если ЕстьСкладВТЧ тогда
			 Если НЕ ЗначениеЗаполнено(СтрокаСписания.Склад)  Тогда
				 СтрокаСписания.Склад = справочники.Склады.ПустаяСсылка();
			 КонецЕсли; 
		 КонецЕсли;
		
		Если СписыватьПоПартиямВсе И Не СтрокаСписания.СписыватьПоПартиямНДС Тогда
			СписыватьПоПартиямВсе = Ложь;
		КонецЕсли;
		
	КонецЦикла; 
	
	КолвоЭлементовКоллекции = ТаблицаВыручки.Количество(); 
	
	Если Не СписыватьПоПартиямВсе Тогда
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
			ЭлементКоллекции = ТаблицаВыручки[КолвоЭлементовКоллекции - ОбратныйИндекс]; 
			Если НЕ ЭлементКоллекции.СписыватьПоПартиямНДС Тогда 
				ТаблицаВыручки.Удалить(ЭлементКоллекции); 
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаВыручки.Колонки.Найти("Склад") = Неопределено Тогда
	    ТаблицаВыручки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли; 
	
	
	Если ТаблицаВыручки.Количество() = 0 Тогда
		//Возвращаем пустую таблицу списаний. Все прошло удачно, но движения по партиям не требуются.
		Возврат ТаблицаВыручки;
	КонецЕсли; 

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаВыручки", ТаблицаВыручки);           
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаВыручки.Партия,
	               |	ТаблицаВыручки.Номенклатура,
	               |	ТаблицаВыручки.СчетУчета,
	               |	ТаблицаВыручки.Склад
	               |ПОМЕСТИТЬ ТаблицаВыручки
	               |ИЗ
	               |	&ТаблицаВыручки КАК ТаблицаВыручки";
	Запрос.Выполнить();
		
	Запрос.УстановитьПараметр("МоментСписания", 	Новый Граница(Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВестиСуммовойУчетПоСкладам", Не (СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" и СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) И ВестиСуммовойУчетПоСкладам);
	Запрос.УстановитьПараметр("СпособОценкиМПЗПоСредней", СтруктураШапкиДокумента.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней);
	
	Если Не ЭтоВозвратОтПокупателя Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПоПриобретеннымЦенностямОстатки.Склад КАК Склад,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетУчета КАК СчетУчета,
		|	НДСПоПриобретеннымЦенностямОстатки.Номенклатура КАК Номенклатура,
		|	НДСПоПриобретеннымЦенностямОстатки.Партия.Дата КАК ДатаПартии,
		|	НДСПоПриобретеннымЦенностямОстатки.Партия КАК Партия,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетФактура.Дата КАК ДатаСФ,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетФактура КАК СчетФактура,
		|	НДСПоПриобретеннымЦенностямОстатки.НДСВключенВСтоимость,
		|	НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток,
		|	НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток,
		|	ВЫБОР
		|		КОГДА НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьКоличество,
		|	НДСПоПриобретеннымЦенностямОстатки.ВидЦенности,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетУчетаНДС,
		|	НДСПоПриобретеннымЦенностямОстатки.СтавкаНДС,
		|	НДСПоПриобретеннымЦенностямОстатки.НДСОстаток
		|ИЗ
		|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(
		|			&МоментСписания,
		|			Организация = &Организация
		|				И ВЫБОР
		|					КОГДА (НЕ &СпособОценкиМПЗПоСредней)
		|						ТОГДА Партия В
		|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|									ТаблицаВыручки.Партия
		|								ИЗ
		|									ТаблицаВыручки)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И СчетУчета В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ТаблицаВыручки.СчетУчета
		|					ИЗ
		|						ТаблицаВыручки)
		|				И Номенклатура В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ТаблицаВыручки.Номенклатура
		|					ИЗ
		|						ТаблицаВыручки)
		|				И ВЫБОР
		|					КОГДА &ВестиСуммовойУчетПоСкладам
		|						ТОГДА Склад В
		|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|									ТаблицаВыручки.Склад
		|								ИЗ
		|									ТаблицаВыручки)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК НДСПоПриобретеннымЦенностямОстатки
		|ГДЕ
		|	(НЕ НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток < 0)
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПартии,
		|	ДатаСФ";
												
	Иначе
		Запрос.УстановитьПараметр("ДокументРеализации", СтруктураШапкиДокумента.Сделка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПоПриобретеннымЦенностям.Склад КАК Склад,
		|	НДСПоПриобретеннымЦенностям.СчетУчета КАК СчетУчета,
		|	НДСПоПриобретеннымЦенностям.Номенклатура КАК Номенклатура,
		|	НДСПоПриобретеннымЦенностям.Партия.Дата КАК ДатаПартии,
		|	НДСПоПриобретеннымЦенностям.Партия КАК Партия,
		|	НДСПоПриобретеннымЦенностям.СчетФактура.Дата КАК ДатаСФ,
		|	НДСПоПриобретеннымЦенностям.СчетФактура КАК СчетФактура,
		|	НДСПоПриобретеннымЦенностям.НДСВключенВСтоимость,
		|	НДСПоПриобретеннымЦенностям.Количество КАК КоличествоОстаток,
		|	НДСПоПриобретеннымЦенностям.Стоимость КАК СтоимостьОстаток,
		|	ВЫБОР
		|		КОГДА НДСПоПриобретеннымЦенностям.Количество > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьКоличество,
		|	НДСПоПриобретеннымЦенностям.ВидЦенности,
		|	НДСПоПриобретеннымЦенностям.СчетУчетаНДС,
		|	НДСПоПриобретеннымЦенностям.СтавкаНДС,
		|	НДСПоПриобретеннымЦенностям.НДС КАК НДСОстаток
		|ИЗ
		|	РегистрНакопления.НДСПоПриобретеннымЦенностям КАК НДСПоПриобретеннымЦенностям
		|ГДЕ
		|	НДСПоПриобретеннымЦенностям.Регистратор = &ДокументРеализации
		|	И ВЫБОР
		|			КОГДА (НЕ &СпособОценкиМПЗПоСредней)
		|				ТОГДА НДСПоПриобретеннымЦенностям.Партия В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							ТаблицаВыручки.Партия
		|						ИЗ
		|							ТаблицаВыручки)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НДСПоПриобретеннымЦенностям.СчетУчета В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ТаблицаВыручки.СчетУчета
		|			ИЗ
		|				ТаблицаВыручки)
		|	И НДСПоПриобретеннымЦенностям.Номенклатура В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ТаблицаВыручки.Номенклатура
		|			ИЗ
		|				ТаблицаВыручки)
		|	И НДСПоПриобретеннымЦенностям.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрНакопления.НДСПоПриобретеннымЦенностям
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПартии УБЫВ,
		|	ДатаСФ УБЫВ";
		
	КонецЕсли; 
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
				
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", ?(Не ЭтоВозвратОтПокупателя, "НДСПоПриобретеннымЦенностям", "НДСПоПриобретеннымЦенностям.НаборЗаписей"));
		
		ЗначенияБлокировки = Новый Соответствие;
		Если Не ЭтоВозвратОтПокупателя Тогда
			ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
			ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
			СтруктураПараметров.Вставить("ИсточникДанных", ТаблицаВыручки);
			ОписаниеИсточника = Новый Соответствие;
			ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
			ОписаниеИсточника.Вставить("СчетУчета", "СчетУчета");
			Если Не (СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" и СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) 
				И ВестиСуммовойУчетПоСкладам Тогда
				ОписаниеИсточника.Вставить("Склад", "Склад");
			КонецЕсли;
		Иначе	
			ЗначенияБлокировки.Вставить("Регистратор", СтруктураШапкиДокумента.Сделка); 
		КонецЕсли;
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
				
	КонецЕсли;

	ТаблицаПартий = Запрос.Выполнить().Выгрузить();
	
	СортироватьПоУказанномуДокументуПриВозврате = ЭтоВозврат и не ЭтоВозвратОтПокупателя и ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка);

	Если СортироватьПоУказанномуДокументуПриВозврате Тогда
		ТаблицаПартий.Колонки.Добавить("ПартияСовпадаетСУказаннымДокументомДляВозврата", новый описаниеТипов("Булево"));
	КонецЕсли; 
	
	Если ЭтоВозвратОтПокупателя Тогда
		Отбор = Новый Структура("Номенклатура, ЕстьКоличество");
	Иначе
		Отбор = Новый Структура("СчетУчета, Номенклатура, ЕстьКоличество");
	КонецЕсли; 
	Отбор.Вставить("ЕстьКоличество", Истина);
	
	СчетаВедетсяСуммовойУчетПоСкладам = Новый Соответствие;
	
	// Найденные строки перенесем в таблицу значений, которую нужно отсортировать в соответствии со стратегией списания
	ТаблицаОстатки  = ТаблицаПартий.СкопироватьКолонки();
	// Добавим колонку с индексом
	ТаблицаОстатки.Колонки.Добавить("ИндексНайденнойСтроки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	Для Каждого СтрокаКСписанию Из ТаблицаВыручки Цикл
		
		//Установим отбор таблицы запроса
		
		Отбор.Номенклатура = СтрокаКСписанию.Номенклатура;
		Если Не ЭтоВозвратОтПокупателя Тогда
			Отбор.Вставить("СчетУчета", СтрокаКСписанию.СчетУчета);
		КонецЕсли; 
		
		Если (СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) 
			Или ЭтоВозвратОтПокупателя Тогда
			// Не производится отбор по складу. При передаче на комиссию в партионном учете склад не указывается.
			Если Отбор.Свойство("Склад") Тогда
				Отбор.Удалить("Склад");
			КонецЕсли;
		Иначе
			НуженОтбор = СчетаВедетсяСуммовойУчетПоСкладам[СтрокаКСписанию.СчетУчета]; 
			Если НуженОтбор = Неопределено Тогда
				Если УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаКСписанию.СчетУчета) Тогда
					Отбор.Вставить("Склад", СтрокаКСписанию.Склад);
					СчетаВедетсяСуммовойУчетПоСкладам.Вставить(СтрокаКСписанию.СчетУчета, Истина);
				Иначе
					Отбор.Удалить("Склад");
					СчетаВедетсяСуммовойУчетПоСкладам.Вставить(СтрокаКСписанию.СчетУчета, Ложь);
				КонецЕсли;
			ИначеЕсли НуженОтбор Тогда
				Отбор.Вставить("Склад", СтрокаКСписанию.Склад);
			КонецЕсли;			
		КонецЕсли;
		ВедетсяСуммовойУчетПоСкладам = ?(СчетаВедетсяСуммовойУчетПоСкладам[СтрокаКСписанию.СчетУчета] = Неопределено, Ложь, СчетаВедетсяСуммовойУчетПоСкладам[СтрокаКСписанию.СчетУчета]);
		
		Если СтруктураШапкиДокумента.СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней Тогда
			Отбор.Вставить("Партия", СтрокаКСписанию.Партия);
		Иначе
			Отбор.Удалить("Партия");
		КонецЕсли;
	
		ОтборТаблицыПартийПоКлючу = ТаблицаПартий.НайтиСтроки(Отбор);
		СписатьПоКлючу = СтрокаКСписанию.Количество;
		
		ТаблицаОстатки.Очистить();
		
		Индекс = 0;
		Для Каждого СтрокаТЧ Из ОтборТаблицыПартийПоКлючу Цикл
			НоваяСтрока = ТаблицаОстатки.Добавить();
			НоваяСтрока.ИндексНайденнойСтроки = Индекс;
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ); 

			Если СортироватьПоУказанномуДокументуПриВозврате Тогда
				НоваяСтрока.ПартияСовпадаетСУказаннымДокументомДляВозврата = (НоваяСтрока.Партия = СтруктураШапкиДокумента.Сделка);
			КонецЕсли; 
			Индекс = Индекс + 1;
		КонецЦикла;
		
		НаправлениеСортировкиДляНДС = ?(СтрокаКСписанию.НДСВСтоимостиТоваров = ДействиеНДСВСтоимостиТоваров_ВключитьВСтоимость, "Убыв", "Возр");
		НаправлениеСортировкиПартий = ?(ЭтоВозврат,"убыв","Возр");
		ТаблицаОстатки.Сортировать(?(СортироватьПоУказанномуДокументуПриВозврате,"ПартияСовпадаетСУказаннымДокументомДляВозврата Убыв, ","")+
									"ДатаПартии "+НаправлениеСортировкиПартий+
									", Партия "+НаправлениеСортировкиПартий+
									", ДатаСФ "+НаправлениеСортировкиПартий+
									", СчетФактура "+НаправлениеСортировкиПартий+
									", НДСВключенВСтоимость "+НаправлениеСортировкиДляНДС);
		
		ТаблицаСписанияПоСтроке.Очистить();
		Для Каждого СтрокаТаблицыПартийНДС Из ТаблицаОстатки Цикл
			
			Если НЕ СтрокаТаблицыПартийНДС.ЕстьКоличество Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаТаблицыПартийНДС.КоличествоОстаток=0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаТаблицыСписания 						= ТаблицаСписанияПоСтроке.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыСписания,СтрокаТаблицыПартийНДС);

			СтрокаТаблицыСписания.Количество 			= Мин(СписатьПоКлючу, СтрокаТаблицыПартийНДС.КоличествоОстаток);
			СтрокаТаблицыСписания.Стоимость 			= ?(СтрокаТаблицыПартийНДС.КоличествоОстаток = 0, 0, СтрокаТаблицыПартийНДС.СтоимостьОстаток * СтрокаТаблицыСписания.Количество / СтрокаТаблицыПартийНДС.КоличествоОстаток) ;
			СтрокаТаблицыСписания.НДС 					= ?(СтрокаТаблицыПартийНДС.КоличествоОстаток = 0, 0, СтрокаТаблицыПартийНДС.НДСОстаток * СтрокаТаблицыСписания.Количество / СтрокаТаблицыПартийНДС.КоличествоОстаток) ;
			
			Если ЭтоВозвратОтПокупателя
				И Не ВедетсяСуммовойУчетПоСкладам Тогда
			    СтрокаТаблицыСписания.Склад = Справочники.Склады.ПустаяСсылка();
			Иначе
				СтрокаТаблицыСписания.Склад					= СтрокаТаблицыПартийНДС.Склад;	
			КонецЕсли; 
			
			Если (СтрокаКСписанию.НДСВСтоимостиТоваров = ДействиеНДСВСтоимостиТоваров_ВключитьВСтоимость) 
				И (НЕ СтрокаТаблицыПартийНДС.НДСВключенВСтоимость) 
				И (СтрокаТаблицыПартийНДС.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Или СтрокаКСписанию.НДСЭтоЕНВД) Тогда
				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Истина;
				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
			ИначеЕсли (СтрокаКСписанию.НДСВСтоимостиТоваров = ДействиеНДСВСтоимостиТоваров_ИсключитьИзСтоимости) И (СтрокаТаблицыПартийНДС.НДСВключенВСтоимость) Тогда
				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Истина;
			Иначе
				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
			КонецЕсли;
			
			СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Ложь;
			
			Если ЕстьСтавкаНДС  и не ЭтоВозврат Тогда
				Если СтрокаКСписанию.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Истина;
				КонецЕсли;
			КонецЕсли;
						
			СписатьПоКлючу = СписатьПоКлючу - СтрокаТаблицыСписания.Количество;
			
			СтрокаТаблицыПартийНДС.КоличествоОстаток = СтрокаТаблицыПартийНДС.КоличествоОстаток - СтрокаТаблицыСписания.Количество;
			СтрокаТаблицыПартийНДС.СтоимостьОстаток = СтрокаТаблицыПартийНДС.СтоимостьОстаток - СтрокаТаблицыСписания.Стоимость;
			СтрокаТаблицыПартийНДС.НДСОстаток = СтрокаТаблицыПартийНДС.НДСОстаток - СтрокаТаблицыСписания.НДС;
			
			Если СписатьПоКлючу<=0 Тогда
				прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
		//Распределение доп. расходов
		ПартииКСписанию = ТаблицаСписанияПоСтроке.Скопировать();
		ПартииКСписанию.Свернуть("Партия", "Количество, Стоимость");
		
		Отбор.Удалить("ЕстьКоличество");
		
		Для Каждого Партия Из ПартииКСписанию Цикл
			//Установим отбор таблицы запроса
			
			Отбор.Вставить("Номенклатура", СтрокаКСписанию.Номенклатура);
			Отбор.Вставить("Партия", Партия.Партия);
			Если Не ЭтоВозвратОтПокупателя Тогда
				Отбор.Вставить("СчетУчета", СтрокаКСписанию.СчетУчета);
			ИначеЕсли Отбор.Свойство("СчетУчета") Тогда
				Отбор.Удалить("СчетУчета");
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" и СтруктураШапкиДокумента.ВидДоговора = перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				// Не производится отбор по складу. При передаче на комиссию в партионном учете склад не указывается.
			ИначеЕсли ВедетсяСуммовойУчетПоСкладам Тогда
				Отбор.Вставить("Склад", СтрокаКСписанию.Склад);
			ИначеЕсли Отбор.Свойство("Склад") Тогда
				Отбор.Удалить("Склад");
			КонецЕсли;

			ОтборДляДопРасходов = ТаблицаПартий.НайтиСтроки(Отбор);
			
			//Определим коэффициент доп. расходов
			СуммаПоПартии = 0;
			Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
				Если СтрокаПартии.ЕстьКоличество Тогда
					СуммаПоПартии = СуммаПоПартии + СтрокаПартии.СтоимостьОстаток;
				ИначеЕсли СортироватьПоУказанномуДокументуПриВозврате Тогда
					СтрокаПартии.ПартияСовпадаетСУказаннымДокументомДляВозврата = (СтрокаПартии.Партия = СтруктураШапкиДокумента.Сделка);
				КонецЕсли;
			КонецЦикла;
			
			// Если в партии нулевая сумма, то списание доп. расходов производим пропорционально количеству.
			Если СуммаПоПартии = 0 Тогда
				КоличествоПоПартии = 0;
				Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
					Если СтрокаПартии.ЕстьКоличество Тогда
						КоличествоПоПартии = КоличествоПоПартии + СтрокаПартии.КоличествоОстаток;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//Проверим наличие доп расходов
			Если СуммаПоПартии = 0 И КоличествоПоПартии = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СуммаПоПартии <> 0 Тогда
				К = Партия.Стоимость / СуммаПоПартии;
			Иначе
				К = Партия.Количество / КоличествоПоПартии;
			КонецЕсли;
			
			//Спишем доп. расходы
			Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
				
				Если СтрокаПартии.ЕстьКоличество ИЛИ Окр(СтрокаПартии.СтоимостьОстаток*К,2,1) = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицыСписания = ТаблицаСписанияПоСтроке.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыСписания, СтрокаПартии);

				СтрокаТаблицыСписания.Стоимость = СтрокаПартии.СтоимостьОстаток * К;
				СтрокаТаблицыСписания.НДС = СтрокаПартии.НДСОстаток * К;
				
				Если ЭтоВозвратОтПокупателя и не УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаКСписанию.СчетУчета) Тогда
				    СтрокаТаблицыСписания.Склад = Справочники.Склады.ПустаяСсылка();
				Иначе
					СтрокаТаблицыСписания.Склад					= СтрокаПартии.Склад;	
				КонецЕсли; 
				
				Если (СтрокаКСписанию.НДСВСтоимостиТоваров = ДействиеНДСВСтоимостиТоваров_ВключитьВСтоимость) 
					И (Не СтрокаПартии.НДСВключенВСтоимость) 
					И (СтрокаПартии.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Или СтрокаКСписанию.НДСЭтоЕНВД) Тогда
					СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Истина;
					СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
				ИначеЕсли (СтрокаКСписанию.НДСВСтоимостиТоваров = ДействиеНДСВСтоимостиТоваров_ИсключитьИзСтоимости) И (СтрокаПартии.НДСВключенВСтоимость) Тогда
					СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
					СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Истина;
				Иначе
					СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
					СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
				КонецЕсли;
				
				СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Ложь;
				
				Если ЕстьСтавкаНДС и не ЭтоВозврат Тогда
					Если СтрокаКСписанию.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
						СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Истина;
					КонецЕсли;
				КонецЕсли;
			    				
				СтрокаПартии.СтоимостьОстаток = СтрокаПартии.СтоимостьОстаток - СтрокаТаблицыСписания.Стоимость;
				СтрокаПартии.НДСОстаток = СтрокаПартии.НДСОстаток - СтрокаТаблицыСписания.НДС;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Отбор.Вставить("ЕстьКоличество", Истина);
		
		//Перенесем данные в итоговую таблицу движений
		Для Каждого СтрокаСписания ИЗ ТаблицаСписанияПоСтроке Цикл
			
			СтрокаТаблицыСписанияНДС = ТаблицаСписанияНДСПоСтрокам.Добавить();
			// Низший приоритет у значений в СтрокаКСписанию
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыСписанияНДС, СтрокаКСписанию);
			// Высший приоритет у значений в СтрокаСписания
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыСписанияНДС, СтрокаСписания);
			
			СтрокаТаблицыСписанияНДС["СчетУчета"] = СтрокаТаблицыСписанияНДС["СчетУчета"];
			СтрокаТаблицыСписанияНДС.ПартияОтсутствуетВБУ = Не ЗначениеЗаполнено(СтрокаКСписанию.Партия);
		КонецЦикла;
		
		// Таблицу значений перенесем в найденные строки
		Для Каждого СтрокаТЧ Из ТаблицаОстатки Цикл
			ЗаполнитьЗначенияСвойств(ОтборТаблицыПартийПоКлючу[СтрокаТЧ.ИндексНайденнойСтроки],СтрокаТЧ);
		КонецЦикла;
		
		Если СписатьПоКлючу>0 тогда
			ТекстСообщения = "Для целей учета НДС не списано " + Формат(СписатьПоКлючу, "ЧЦ=15; ЧДЦ=3") + " товара " + СтрокаКСписанию.Номенклатура + ", счет учета " + СтрокаКСписанию.СчетУчета +?(НЕ ЗначениеЗаполнено(СтрокаКСписанию.Склад),"",", склад "+строка(СтрокаКСписанию.Склад))+?(НЕ ЗначениеЗаполнено(СтрокаКСписанию.Партия),""," (партия <"+строка(СтрокаКСписанию.Партия)+">)");
			Если ВидДокумента = "ПоступлениеИзПереработки" Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + "Возможно, для изготовления продукции использовались полуфабрикаты или продукция собственного производства";
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок, , Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаСписанияНДСПоСтрокам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация"); 
	Если ТаблицаСписанияНДСПоСтрокам.Колонки.Найти("QuieryId") = Неопределено Тогда
		ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("QuieryId");
	КонецЕсли; 
	QuieryId = 0;
	Для каждого СтрокаСписания Из ТаблицаСписанияНДСПоСтрокам Цикл
		QuieryId = QuieryId + 1;
		СтрокаСписания.QuieryId = QuieryId;
	КонецЦикла; 
	
	Возврат ТаблицаСписанияНДСПоСтрокам;
	
КонецФункции

// ОТРАЖЕНИЕ ДВИЖЕНИЙ ПО РЕГИСТРУ НДС ПО ПАРТИЯМ ЗАПАСОВ, ПАРТИОННЫЙ УЧЕТ ДЛЯ НДС
/////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
//  УПРОЩЕННЫЙ УЧЕТ НДС

//Определяет применяется ли упрощенный учет НДС
//
Функция ПолучитьУПУпрощенныйУчетНДС(Организация, Знач Дата, УчетнаяПолитика = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	Если УчетнаяПолитика <> Неопределено
		и УчетнаяПолитика.Количество() > 0
		И УчетнаяПолитика.Организация = Организация
		И УчетнаяПолитика.Период = НачалоМесяца(Дата)
		И УчетнаяПолитика.Свойство("УпрощенныйУчетНДС") Тогда
		Возврат УчетнаяПолитика.УпрощенныйУчетНДС;
	КонецЕсли;
	
	ОшибкаВПолучении = Ложь;
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаВПолучении, Организация,,Ложь);
		
	Возврат ?(ОшибкаВПолучении, Ложь, УчетнаяПолитика.УпрощенныйУчетНДС);

КонецФункции

Функция ПолучитьУППорядокРегистрацииСчетовФактурНаАванс(Организация, Знач Дата, УчетнаяПолитика = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	Если УчетнаяПолитика <> Неопределено
		и УчетнаяПолитика.Количество() > 0
		И УчетнаяПолитика.Организация = Организация
		И УчетнаяПолитика.Период = НачалоМесяца(Дата)
		И УчетнаяПолитика.Свойство("ПорядокРегистрацииСчетовФактурНаАванс") Тогда
		Возврат УчетнаяПолитика.ПорядокРегистрацииСчетовФактурНаАванс;
	КонецЕсли;
	
	ОшибкаВПолучении = Ложь;
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаВПолучении, Организация,,Ложь);
		
	Возврат ?(ОшибкаВПолучении, Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы, УчетнаяПолитика.ПорядокРегистрацииСчетовФактурНаАванс);

КонецФункции

//Определяет применяется ли упрощенный учет НДС
//
Функция ПолучитьУПНДСНалоговыйПериод(Организация, Знач Дата, УчетнаяПолитика = Неопределено) Экспорт
	
	Возврат Перечисления.Периодичность.Квартал;

КонецФункции

Функция УпрощенныйНДС_ПроводитьДокументПоНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента) Экспорт
	
	Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") Или Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация,,Ложь);
		Если не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") Тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН", ?(ОшибкаВПолучении, Ложь, УчетнаяПолитика.УСН));
		КонецЕсли;
		Если не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС", ?(ОшибкаВПолучении, Ложь, УчетнаяПолитика.УпрощенныйУчетНДС));
		КонецЕсли;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ГТДИмпорт") 
		И СтруктураШапкиДокумента.НДСПредъявленКВычету Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС") И Не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость") И СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("ВидДоговора") И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ (СтруктураШапкиДокумента.ВидДокумента = "СчетФактураПолученный" 
		Или (СтруктураШапкиДокумента.Свойство("ПредъявленСчетФактура") И СтруктураШапкиДокумента.ПредъявленСчетФактура)
		Или (СтруктураШапкиДокумента.Свойство("ИспользоватьДокументРасчетовКакСчетФактуру") И СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру)
		Или (СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" И ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка))) 
		Тогда
		Возврат Ложь;
	ИначеЕсли Не (СтруктураШапкиДокумента.Свойство("НДСПредъявленКВычету") И СтруктураШапкиДокумента.НДСПредъявленКВычету
		Или (СтруктураШапкиДокумента.Свойство("ИспользоватьДокументРасчетовКакСчетФактуру") И СтруктураШапкиДокумента.ИспользоватьДокументРасчетовКакСчетФактуру)) 
		Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

Функция УпрощенныйНДС_ПроводитьДокументПоНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента) Экспорт
	
	Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") 
		Или Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		Если Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") Тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН", ?(ОшибкаВПолучении, Ложь, УчетнаяПолитика.УСН));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС", ?(ОшибкаВПолучении, Ложь, УчетнаяПолитика.УпрощенныйУчетНДС));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("НачислятьНДСПоОтгрузке") Тогда
			СтруктураШапкиДокумента.Вставить("НачислятьНДСПоОтгрузке", ?(ОшибкаВПолучении, Ложь, УчетнаяПолитика.НачислятьНДСПоОтгрузке));
		КонецЕсли;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС") И Не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности
		И Не СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") 
		И СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

//  УПРОЩЕННЫЙ УЧЕТ НДС
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ДАННЫХ ПО ДОКУМЕНТАМ

// Параметр ДляКнигиПродаж устанавливается в случае, когда для документа могут быть получены данные как 
// для книги покупок, так и для книги продаж
Функция ПолучитьТаблицуДокументаНДС(ДокументСсылка, Ошибка = Ложь, ДляКнигиПродаж = Ложь) Экспорт
	
	ТипОснования = ТипЗнч(ДокументСсылка);
	
	// По ссылке нужно получить объект
	Если Документы.ТипВсеСсылки().СодержитТип(ТипОснования)	Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе
		ТипОснования = ТипЗнч(ДокументСсылка.Ссылка);
		ДокументОбъект = ДокументСсылка;
	КонецЕсли;
	Если ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Возврат ПолучитьТаблицуПоступлениеТоваровУслуг(ДокументОбъект, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ГТДИмпорт") Тогда
		Возврат ПолучитьТаблицуГТДИмпорт(ДокументОбъект, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеНДСКВычету") Тогда
		Возврат ПолучитьТаблицуОтражениеНДСКВычету(ДокументОбъект, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		Возврат ПолучитьТаблицуПоступлениеДопРасходов(ДокументОбъект, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
		Возврат ПолучитьТаблицуПоступлениеНМА(ДокументОбъект, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда
		Возврат ПолучитьТаблицуПоступлениеИзПереработки(ДокументОбъект, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Возврат ПолучитьТаблицуСчетФактураПолученный(ДокументОбъект, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Возврат ПолучитьТаблицуАвансовыйОтчет(ДокументОбъект, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		Возврат ПолучитьТаблицуОтчетКомиссионераОПродажах(ДокументОбъект, Ошибка, ДляКнигиПродаж);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда
		Возврат ПолучитьТаблицуНачислениеНДСпоСМРхозспособом(ДокументОбъект, Ошибка, ДляКнигиПродаж);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Возврат ПолучитьТаблицуРеализацияТоваровУслуг(ДокументОбъект, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		Возврат ПолучитьТаблицуОтчетОРозничныхПродажах(ДокументОбъект, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		Если ЗначениеЗаполнено(ДокументСсылка.ДокументОтгрузки) Тогда
			Если ТипЗнч(ДокументСсылка.ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
				Возврат ПолучитьТаблицуПередачаОС(ДокументСсылка.ДокументОтгрузки.ПолучитьОбъект(), Ошибка);
			Иначе
				Возврат ПолучитьТаблицуРеализацияОтгруженныхТоваров(ДокументОбъект, Ошибка);
			КонецЕсли;
		Иначе
			Возврат Неопределено
		КонецЕсли;		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		Возврат ПолучитьТаблицуАктОбОказанииПроизводственныхУслуг(ДокументОбъект, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаОС") Тогда
		Возврат ПолучитьТаблицуПередачаОС(ДокументОбъект, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаНМА") Тогда
		Возврат ПолучитьТаблицуПередачаНМА(ДокументОбъект, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Возврат ПолучитьТаблицуСчетФактураВыданный(ДокументОбъект, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеНачисленияНДС") Тогда
		Возврат ПолучитьТаблицуОтражениеНачисленияНДС(ДокументОбъект, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Возврат ПолучитьТаблицуВозвратТоваровОтПокупателя(ДокументОбъект, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Возврат ПолучитьТаблицуПриходныйКассовыйОрдер(ДокументОбъект, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
		Возврат ПолучитьТаблицуДокументРасчетовСКонтрагентом(ДокументОбъект, Ошибка);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуПоступлениеТоваровУслуг(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, ТаблицаПоУслугам, ТаблицаПоОбъектамСтроительства;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено, ТаблицаПоОборудованию, ТаблицаПоУслугам, ТаблицаПоОбъектамСтроительства);
	
	ОбщаяТаблица = ТаблицаПоТоварам.СкопироватьКолонки();
	ОбщаяТаблица.Колонки.Удалить("Номенклатура");
	ОбщаяТаблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура, СправочникСсылка.ОбъектыСтроительства"));

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ОбщаяТаблица);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОборудованию, ОбщаяТаблица);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ОбщаяТаблица);
	
	ТаблицаПоОбъектамСтроительства.Колонки.ОбъектСтроительства.Имя = "Номенклатура";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОбъектамСтроительства, ОбщаяТаблица);

	Возврат ОбщаяТаблица;
	
КонецФункции

Функция ПолучитьТаблицуГТДИмпорт(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, Неопределено);
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли);
	
	ТаблицаПоТоварамВалюта = ДокументОбъект.ПодготовитьТаблицуДляНДС(СтруктураШапкиДокумента, ТаблицаПоТоварамВалюта);
	ТаблицаПоТоварамРубли = ДокументОбъект.ПодготовитьТаблицуДляНДС(СтруктураШапкиДокумента, ТаблицаПоТоварамРубли);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРубли, ТаблицаПоТоварамВалюта);
	
	Возврат ТаблицаПоТоварамРубли;
	
КонецФункции

Функция ПолучитьТаблицуОтражениеНДСКВычету(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуПоступлениеДопРасходов(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ТаблицаПоТоварам.Колонки.Добавить("СтавкаНДС");
	ТаблицаПоТоварам.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтавкаНДС, "СтавкаНДС");
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуПоступлениеНМА(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоНМА;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоНМА);
	
	Возврат ТаблицаПоНМА;
	
КонецФункции

Функция ПолучитьТаблицуПоступлениеИзПереработки(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоУслугам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, Неопределено, ТаблицаПоУслугам, Неопределено, Неопределено, Неопределено);
	
	Возврат ТаблицаПоУслугам;

КонецФункции

Функция ПолучитьТаблицуСчетФактураПолученный(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, Истина);
	
	ТаблицаПоВсемДокументам = Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаПоДокументамОснованиям Цикл
		Если ТаблицаПоВсемДокументам = Неопределено Тогда
			ТаблицаПоВсемДокументам = СтрокаТаблицы.ТаблицаДанных;
		Иначе
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СтрокаТаблицы.ТаблицаДанных, ТаблицаПоВсемДокументам);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПоВсемДокументам;
	
КонецФункции

Функция ПолучитьТаблицуАвансовыйОтчет(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПрочее;
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено, Неопределено, Неопределено, ТаблицаПоПрочее);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоПрочее, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуОтчетКомиссионераОПродажах(ДокументОбъект, Ошибка, ДляКнигиПродаж = Ложь)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоДокументу;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ложь);
	
	Если ДляКнигиПродаж Тогда
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументу, Неопределено, Неопределено, Неопределено);
	Иначе
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, Неопределено, ТаблицаПоДокументу, Неопределено, Неопределено);
	КонецЕсли;
	
	Возврат ТаблицаПоДокументу;
	
КонецФункции

Функция ПолучитьТаблицуНачислениеНДСпоСМРхозспособом(ДокументОбъект, Ошибка, ДляКнигиПродаж = Ложь)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоСМРхозспособом;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСМРхозспособом);
	
	Возврат ТаблицаПоСМРхозспособом;
	
КонецФункции

Функция ПолучитьТаблицуРеализацияТоваровУслуг(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено, ТаблицаПоУслугам, Неопределено);
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуОтчетОРозничныхПродажах(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено, Неопределено);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуРеализацияОтгруженныхТоваров(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуАктОбОказанииПроизводственныхУслуг(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоУслугам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам);
	
	Возврат ТаблицаПоУслугам;
	
КонецФункции

Функция ПолучитьТаблицуПередачаОС(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуПередачаНМА(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуОтражениеНачисленияНДС(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуСчетФактураВыданный(ДокументОбъект, Ошибка)
	
	Перем ТаблицаПоДокументамОснованиям, ТаблицаПоДокументуОснования;
	
	Если ДокументОбъект.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию Тогда
	
		Для Каждого СтрокаТаблицы Из ДокументОбъект.ДокументыОснования Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснование) Тогда
				ДокументОснованиеОбъект = СтрокаТаблицы.ДокументОснование.ПолучитьОбъект();
				ТаблицаПоДокументуОснования = ПолучитьТаблицуДокументаНДС(ДокументОснованиеОбъект, Ошибка);
				Если ТаблицаПоДокументуОснования <> Неопределено Тогда
					Если ТаблицаПоДокументамОснованиям = Неопределено Тогда
						ТаблицаПоДокументамОснованиям = ТаблицаПоДокументуОснования.Скопировать();
					Иначе	
						ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументуОснования, ТаблицаПоДокументамОснованиям);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
			
		Возврат ТаблицаПоДокументамОснованиям;
		
	КонецЕсли;
	
	ТаблицаДокумента = Новый ТаблицаЗначений;
	ТаблицаДокумента.Колонки.Добавить("ВидЦенности");
	ТаблицаДокумента.Колонки.Добавить("СчетФактура");
	ТаблицаДокумента.Колонки.Добавить("Сумма");
	ТаблицаДокумента.Колонки.Добавить("СтавкаНДС");
	ТаблицаДокумента.Колонки.Добавить("НДС");
	ТаблицаДокумента.Колонки.Добавить("СчетУчетаНДС");
	ТаблицаДокумента.Колонки.Добавить("Событие");
	
	НоваяСтрока = ТаблицаДокумента.Добавить();
	НоваяСтрока.ВидЦенности = ?(ДокументОбъект.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс, Перечисления.ВидыЦенностей.АвансыПолученные,
																										Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	НоваяСтрока.СчетФактура = ДокументОбъект.ДокументОснование;
	НоваяСтрока.Сумма = ДокументОбъект.Сумма - ДокументОбъект.СуммаНДС;
	НоваяСтрока.СтавкаНДС = ДокументОбъект.СтавкаНДС;
	НоваяСтрока.НДС = ДокументОбъект.СуммаНДС;	
	НоваяСтрока.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;	
	НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
	
	Возврат ТаблицаДокумента;
	
КонецФункции

Функция ПолучитьТаблицуВозвратТоваровОтПокупателя(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено);
	
	Возврат ТаблицаПоТоварам;
	
КонецФункции

Функция ПолучитьТаблицуПриходныйКассовыйОрдер(ДокументОбъект, Ошибка)
	
	Перем СтруктураШапкиДокумента, ТаблицаВыручки;
	
	ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаВыручки);
	
	Возврат ТаблицаВыручки;
	
КонецФункции

Функция ПолучитьТаблицуДокументРасчетовСКонтрагентом(ДокументОбъект, Ошибка)
	
	Перем ТаблицаВыручки;
	
	ДокументОбъект.ПодготовитьТаблицыДокумента(ТаблицаВыручки);
	
	Возврат ТаблицаВыручки;
	
КонецФункции

// ПОЛУЧЕНИЕ ДАННЫХ ПО ДОКУМЕНТАМ
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ДАННЫХ ДЛЯ ПОМОЩНИКа ПО УЧЕТУ НДС


// Процедура заполнения общего дерева регламентных операций
Процедура ЗаполнитьЗначенияДереваОперацийНДС(ДеревоОпераций) Экспорт
	
	СписокПодчиненных = Новый СписокЗначений();
	
	//**********************************
	// Книга продаж
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
		
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
		
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
		
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ВосстановлениеНДСПоОбъектамНедвижимости;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
		
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
		
	// Книга продаж
	//**********************************
	
	//**********************************
	// Книга покупок
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.НачислениеНДСпоСМРхозспособом;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.РегистрацияОплатыНДСВБюджет);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж);

	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.РегистрацияОплатыНДСВБюджет;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.РаспределениеНДСКосвенныхРасходов;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ВосстановлениеНДС);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ВосстановлениеНДС;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	// Книга покупок
	//**********************************
	
КонецПроцедуры // ЗаполнитьЗначенияДереваОпераций()

// ПОЛУЧЕНИЕ ДАННЫХ ДЛЯ ПОМОЩНИКа ПО УЧЕТУ НДС
//////////////////////////////////////////////////////////////////////////


// Рассчитываем сумму документа со всеми налогами в разрезе ставок НДС
//
// Параметры: 
//  ДокументОбъект    - ссылка документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//  НеУчитыватьТару   - булево, если Истина и ИмяТабличнойЧасти неопределено, то в расчете сумм тару не учитываем
//
// Возвращаемое значение:
//  ТаблицаЗначений 
//		Колонки:
//			Сумма		- Сумма документа со всеми налогами
//			СтавкаНДС	- ПеречислениеСсылка.СтавкиНДС
//			СуммаНДС	- Сумма НДС по ставке
//
Функция ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	СуммаДокументаПоСтавкам = Новый ТаблицаЗначений();
	СуммаДокументаПоСтавкам.Колонки.Добавить("Сумма",     ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	СуммаДокументаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	СуммаДокументаПоСтавкам.Колонки.Добавить("СуммаНДС",  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	СуммаДокументаПоСтавкам.Индексы.Добавить("СтавкаНДС");

	Если НЕ (ИмяТабличнойЧасти = Неопределено) Тогда

		Для каждого СтрокаДокумента Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СуммаДокумента = СтрокаДокумента.Сумма;
			Иначе
				СуммаДокумента = 0;
			КонецЕсли; 

			СуммаНДС  = 0;
			СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();

			Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
			   И ДокументОбъект.УчитыватьНДС тогда

				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
					СуммаНДС = СтрокаДокумента.СуммаНДС;
				КонецЕсли;

				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
					СтавкаНДС = СтрокаДокумента.СтавкаНДС;
				КонецЕсли;

			КонецЕсли;

			Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
			   И Не ДокументОбъект.СуммаВключаетНДС Тогда

				СуммаДокумента = СуммаДокумента + СуммаНДС;

			КонецЕслИ;

			СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Найти(СтавкаНДС,"СтавкаНДС");

			Если СтрокаТаблицыИтогов = Неопределено тогда
				СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Добавить();
				СтрокаТаблицыИтогов.СтавкаНДС = СтавкаНДС;
			КонецЕсли;

			СтрокаТаблицыИтогов.Сумма    = СтрокаТаблицыИтогов.Сумма    + СуммаДокумента;
			СтрокаТаблицыИтогов.СуммаНДС = СтрокаТаблицыИтогов.СуммаНДС + СуммаНДС;

		КонецЦикла;

	Иначе

		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл

			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
				Продолжить;
			ИначеЕсли (МетаданныеДокумента.Имя = "ОтчетКомиссионераОПродажах" или МетаданныеДокумента.Имя = "ОтчетКомитентуОПродажах") и ТЧОбъекта.Имя = "ДенежныеСредства" Тогда
				Продолжить;
			КонецЕсли;

			ИмяТабличнойЧасти = ТЧОбъекта.Имя;

			Для каждого СтрокаДокумента  Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					СуммаДокумента = СтрокаДокумента.Сумма;
				Иначе
					СуммаДокумента = 0;
				КонецЕсли;

				СуммаНДС  = 0;
				СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();

				Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
				   И ДокументОбъект.УчитыватьНДС тогда

					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
						СуммаНДС = СтрокаДокумента.СуммаНДС;
					КонецЕсли;

					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
						СтавкаНДС = СтрокаДокумента.СтавкаНДС;
					КонецЕсли;

				КонецЕсли;

				Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
				   И Не ДокументОбъект.СуммаВключаетНДС Тогда
					СуммаДокумента = СуммаДокумента+СуммаНДС;
				КонецЕслИ;

				СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Найти(СтавкаНДС,"СтавкаНДС");

				Если СтрокаТаблицыИтогов = Неопределено тогда
					СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Добавить();
					СтрокаТаблицыИтогов.СтавкаНДС = СтавкаНДС;
				КонецЕсли;

				СтрокаТаблицыИтогов.Сумма    = СтрокаТаблицыИтогов.Сумма    + СуммаДокумента;
				СтрокаТаблицыИтогов.СуммаНДС = СтрокаТаблицыИтогов.СуммаНДС + СуммаНДС;

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

	СтрокиКУдалению = Новый Массив;

	Для каждого СтрокаТаблицы Из СуммаДокументаПоСтавкам Цикл
	    Если СтрокаТаблицы.Сумма = 0 и СтрокаТаблицы.СуммаНДС = 0  Тогда
			СтрокиКУдалению.Добавить( СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;

	Для НомерСтроки = 1 По СтрокиКУдалению.Количество() Цикл
		СуммаДокументаПоСтавкам.Удалить(СтрокиКУдалению[НомерСтроки-1]);
	КонецЦикла; 

	Возврат СуммаДокументаПоСтавкам;

КонецФункции // УчетНДС.ПолучитьСуммуДокументаСНДС()

// Рассчитываем сумму НДС документа
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//
// Возвращаемое значение:
//  НДС документа
//
Функция ПолучитьНДСДокумента(ДокументОбъект, ИмяТабличнойЧасти = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаНДС = 0;

	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаНДС = СуммаНДС + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаНДС = СуммаНДС + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
			КонецЕсли;
		КонецЦикла;
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаНДС", МетаданныеДокумента) Тогда
			СуммаНДС = СуммаНДС + ДокументОбъект.СуммаНДС;
		КонецЕсли;
	КонецЕсли;

	Возврат СуммаНДС;

КонецФункции // УчетНДС.ПолучитьСуммуДокументаСНДС()

// Рассчитываем сумму документа со всеми налогами и без учета скидки
//
// Параметры: 
//  ТабличнаяЧасть   - табличная часть, в котором надо посчитать сумму без скидки,
//  УчитыватьНДС     - булево, признак учета НДС в сумме, 
//  СуммаВключаетНДС - булево, признак включения НДС в сумму ("внутри" или "сверху"),
//
// Возвращаемое значение:
//  Сумма документа со всеми налогами без учета скидки
//
Функция ПолучитьСуммуДокументаСНДСБезСкидки(ТабличнаяЧасть, УчитыватьНДС, СуммаВключаетНДС) Экспорт

	СуммаДокумента = 0;

	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СуммаПоСтроке = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		СуммаДокумента = СуммаДокумента + СуммаПоСтроке;
		СуммаНДС = 0;

		Если УчитыватьНДС Тогда
			УчетНДС.РассчитатьСуммуНДС(СуммаПоСтроке, УчитыватьНДС, СуммаВключаетНДС, 
			                        УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			Если УчитыватьНДС И (Не СуммаВключаетНДС) Тогда
				СуммаДокумента = СуммаДокумента + СуммаНДС;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат СуммаДокумента;

КонецФункции // ПолучитьСуммуДокументаСНДСБезСкидки()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТАВКАМИ НАЛОГОВ И ВЗНОСОВ

// Рассчитываем сумму документа со всеми налогами
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//  НеУчитыватьТару   - булево, если Истина и ИмяТабличнойЧасти неопределено, то в расчете сумм тару не учитываем
//
// Возвращаемое значение:
//  Сумма документа со всеми налогами.
//
Функция ПолучитьСуммуДокументаСНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("Сумма");
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
		   И ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
		   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти)
		   И ДокументОбъект.УчитыватьНДС
		   И Не ДокументОбъект.СуммаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
		КонецЕсли; 
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ВыданныеАвансы" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ДенежныеСредства" Тогда
				Продолжить;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("Сумма");
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
					И ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
					И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя)
					И ДокументОбъект.УчитыватьНДС
					И Не ДокументОбъект.СуммаВключаетНДС Тогда
					СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сумма", МетаданныеДокумента) Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект.Сумма;
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
				И ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
				И ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаНДС", МетаданныеДокумента)
				И ДокументОбъект.УчитыватьНДС
				И Не ДокументОбъект.СуммаВключаетНДС Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат СуммаДокумента;

КонецФункции // ПолучитьСуммуДокументаСНДС()

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения
//
// Параметры: 
//  Сумма            - число, сумма от которой надо рассчитывать налоги, 
//  УчитыватьНДС     - булево, признак учета НДС в сумме, 
//  СуммаВключаетНДС - булево, признак включения НДС в сумму ("внутри" или "сверху"),
//  СтавкаНДС        - число , процентная ставка НДС,
//
// Возвращаемое значение:
//  Число, полученная сумма НДС
//
Функция РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт

	Если (УчитыватьНДС) И (СуммаВключаетНДС) Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;

	Если УчитыватьНДС Тогда 
		Если НЕ СуммаВключаетНДС Тогда
			СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
		КонецЕсли;
	Иначе
		СуммаНДС = 0;
	КонецЕсли;

	Возврат СуммаНДС;

КонецФункции // РассчитатьСуммуНДС()


