// Этот модуль предназначен для реализации алгоритмов работы 
// с контактной информацией.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТОБРАЖЕНИЯ КИ В ФОРМАХ ОБЪЕКТОВ

// Процедура заполняет поля объекта редактирования адреса по структуре
Процедура ЗаполнитьОбъектРедактированияАдресаПоСтруктуре(Объект, СтруктураАдреса) Экспорт
	
	Если СтруктураАдреса = Неопределено Тогда
		
		Объект.Поле1 = "";
		Объект.Поле2 = "";
		Объект.Поле3 = "";
		Объект.Поле4 = "";
		Объект.Поле5 = "";
		Объект.Поле6 = "";
		Объект.Поле7 = "";
		Объект.Поле8 = "";
		Объект.Поле9 = "";
		Объект.Представление = "";
	
		Возврат;
	КонецЕсли;
	
	Если СтруктураАдреса.Свойство("ЗаПределамиРФ") Тогда			
		Объект.Поле1 = СтруктураАдреса.Страна;
		Объект.Представление = СтруктураАдреса.Представление;		
	Иначе
		Объект.Поле1 = СтруктураАдреса.Индекс;
		Объект.Поле2 = СтруктураАдреса.Регион;
		Объект.Поле3 = СтруктураАдреса.Район;
		Объект.Поле4 = СтруктураАдреса.Город;
		Объект.Поле5 = СтруктураАдреса.НаселенныйПункт;
		Объект.Поле6 = СтруктураАдреса.Улица;
		Объект.Поле7 = СтруктураАдреса.Дом;
		Объект.Поле8 = СтруктураАдреса.Корпус;
		Объект.Поле9 = СтруктураАдреса.Квартира;
		
		//Определяем представление сразу же
		Объект.Представление = ПолучитьПредставлениеАдреса(Объект);
	КонецЕсли;
  
КонецПроцедуры

//Процедура дополняет представление адреса строкой 
Процедура ДополнитьПредставлениеАдреса(ТекущееПредставление, Дополнение, СтрокаКонкатенации)
	
	Если Дополнение <> "" Тогда
		ТекущееПредставление = ТекущееПредставление + СтрокаКонкатенации + Дополнение;
	КонецЕсли;
  	
КонецПроцедуры

// Функция возвращает строковое представление адреса (в формате через запятую) , включая незаполненные поля
Функция ПолучитьПолныйАдрес(Запись) Экспорт
	
	Результат = "";
	
	Если Запись = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПолучитьПредставлениеАдреса(Запись) = Запись.Представление Тогда	
		Результат = "," + 
		СокрЛП(Запись.Поле1) + ", " +
		СокрЛП(Запись.Поле2) + ", " +
		СокрЛП(Запись.Поле3) + ", " +
		СокрЛП(Запись.Поле4) + ", " +
		СокрЛП(Запись.Поле5) + ", " +
		СокрЛП(Запись.Поле6) + ", " +
		СокрЛП(Запись.Поле7) + ", " +
		СокрЛП(Запись.Поле8) + ", " +
		СокрЛП(Запись.Поле9);
		
	Иначе
		Результат = Запись.Представление;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Результат, ",", "")) Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция выполняет "преобразование" строкового представления адреса в структуру
Функция ПолучитьСтруктуруАдресаИзСтроки(Знач СтроковыйАдрес) Экспорт
	
	Если ПустаяСтрока(СтроковыйАдрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧислоВхожденийЗапятойВАдрес = СтрЧислоВхождений(СтроковыйАдрес, ","); 
	
	Если (ЧислоВхожденийЗапятойВАдрес = 9) ИЛИ (ЧислоВхожденийЗапятойВАдрес = 12) Тогда
		
		СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(СтроковыйАдрес);
		
	ИначеЕсли ЧислоВхожденийЗапятойВАдрес >= 1 Тогда
		
		СтруктураАдреса = Новый Структура;	
		СтруктураАдреса.Вставить("ЗаПределамиРФ", Истина);
		СтруктураАдреса.Вставить("Страна", СокрЛП(Лев(СтроковыйАдрес, Найти(СтроковыйАдрес, ",") - 1)));
		СтруктураАдреса.Вставить("Представление", СтроковыйАдрес);			
		
	Иначе
		// вообще запятых нет в представлении - значит необычный Российский Адрес
		СтруктураАдреса = Новый Структура;	
		СтруктураАдреса.Вставить("ЗаПределамиРФ", Истина);
		СтруктураАдреса.Вставить("Страна", Справочники.КлассификаторСтранМира.Россия.Наименование);
		СтруктураАдреса.Вставить("Представление", СтроковыйАдрес);
		
	КонецЕсли;
		
	Возврат СтруктураАдреса;	
	
КонецФункции


// Процедура считывает контактную информацию из ИБ в набор записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо заполнить КИ
//
Процедура ПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка) Экспорт
	
	Если ТипЗнч(НаборЗаписей) <> Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация") Тогда
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписей.Очистить();
	КонецЕсли;
	
	НаборЗаписей.Отбор.Объект.Установить(Ссылка);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Вид КАК Вид,
	|	ВложенныйЗапрос.Тип КАК Тип,
	|	ВложенныйЗапрос.Объект КАК Объект,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле1) КАК Поле1,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле2) КАК Поле2,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле3) КАК Поле3,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле4) КАК Поле4,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле5) КАК Поле5,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле6) КАК Поле6,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле7) КАК Поле7,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле8) КАК Поле8,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле9) КАК Поле9,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле10) КАК Поле10,
	|	МАКСИМУМ(ВложенныйЗапрос.ТипДома) КАК ТипДома,
	|	МАКСИМУМ(ВложенныйЗапрос.ТипКорпуса) КАК ТипКорпуса,
	|	МАКСИМУМ(ВложенныйЗапрос.ТипКвартиры) КАК ТипКвартиры,
	|	МАКСИМУМ(ВложенныйЗапрос.Представление) КАК Представление,
	|	МАКСИМУМ(ВложенныйЗапрос.Комментарий) КАК Комментарий,
	|	МАКСИМУМ(ВложенныйЗапрос.ЗначениеПоУмолчанию) КАК ЗначениеПоУмолчанию
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Объект КАК Объект,
	|		ВидыКонтактнойИнформации.Тип КАК Тип,
	|		ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|		"""" КАК Представление,
	|		"""" КАК Поле1,
	|		"""" КАК Поле2,
	|		"""" КАК Поле3,
	|		"""" КАК Поле4,
	|		"""" КАК Поле5,
	|		"""" КАК Поле6,
	|		"""" КАК Поле7,
	|		"""" КАК Поле8,
	|		"""" КАК Поле9,
	|		"""" КАК Поле10,
	|		"""" КАК ТипДома,
	|		"""" КАК ТипКорпуса,
	|		"""" КАК ТипКвартиры,
	|		"""" КАК Комментарий,
	|		"""" КАК ЗначениеПоУмолчанию
	|	ИЗ
	|		Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|	ГДЕ
	|		(НЕ ВидыКонтактнойИнформации.ПометкаУдаления)
	|		И ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		РегистрСведенийКонтактнаяИнформация.Объект,
	|		РегистрСведенийКонтактнаяИнформация.Тип,
	|		РегистрСведенийКонтактнаяИнформация.Вид,
	|		ВЫРАЗИТЬ(РегистрСведенийКонтактнаяИнформация.Представление КАК СТРОКА(1000)),
	|		РегистрСведенийКонтактнаяИнформация.Поле1,
	|		РегистрСведенийКонтактнаяИнформация.Поле2,
	|		РегистрСведенийКонтактнаяИнформация.Поле3,
	|		РегистрСведенийКонтактнаяИнформация.Поле4,
	|		РегистрСведенийКонтактнаяИнформация.Поле5,
	|		РегистрСведенийКонтактнаяИнформация.Поле6,
	|		РегистрСведенийКонтактнаяИнформация.Поле7,
	|		РегистрСведенийКонтактнаяИнформация.Поле8,
	|		РегистрСведенийКонтактнаяИнформация.Поле9,
	|		РегистрСведенийКонтактнаяИнформация.Поле10,
	|		РегистрСведенийКонтактнаяИнформация.ТипДома,
	|		РегистрСведенийКонтактнаяИнформация.ТипКорпуса,
	|		РегистрСведенийКонтактнаяИнформация.ТипКвартиры,
	|		ВЫРАЗИТЬ(РегистрСведенийКонтактнаяИнформация.Комментарий КАК СТРОКА(1000)),
	|		РегистрСведенийКонтактнаяИнформация.ЗначениеПоУмолчанию
	|	ИЗ
	|		РегистрСведений.КонтактнаяИнформация КАК РегистрСведенийКонтактнаяИнформация
	|	ГДЕ
	|		РегистрСведенийКонтактнаяИнформация.Объект = &Объект) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Вид,
	|	ВложенныйЗапрос.Тип,
	|	ВложенныйЗапрос.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление УБЫВ,
	|	ВложенныйЗапрос.Тип.Порядок,
	|	Вид";
	
	Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", ВидОбъектаКИ(Ссылка));
	Запрос.УстановитьПараметр("Объект", Ссылка);
	
	ТабЗн = Запрос.Выполнить().Выгрузить();
	Для Каждого стр Из ТабЗн Цикл
		стр.Представление = СокрП(стр.Представление);
		стр.Комментарий   = СокрП(стр.Комментарий);
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТабЗн);
	
КонецПроцедуры

// Процедура записывает контактную информацию в ИБ из набора записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо записать КИ
//  Отказ - Булево
//
Процедура ЗаписатьКонтактнуюИнформацию(НаборЗаписей, Ссылка, Отказ, КопияНабораКонтактнойИнформации = Неопределено) Экспорт
	
	Если КопияНабораКонтактнойИнформации = Неопределено Тогда
		ЗаписатьКонтактнуюИнформациюКакНабор(НаборЗаписей, Ссылка, Отказ);
	Иначе
		ЗаписатьКонтактнуюИнформациюСравниваяСКопией(НаборЗаписей, Ссылка, Отказ, КопияНабораКонтактнойИнформации);
	КонецЕсли;
	
КонецПроцедуры

// Процедура записывает контактную информацию в ИБ из набора записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо записать КИ
//  Отказ - Булево
//
Процедура ЗаписатьКонтактнуюИнформациюКакНабор(НаборЗаписей, Ссылка, Отказ)

	Индекс = 0;
	Пока 1 = 1 Цикл
		
		Если Индекс > НаборЗаписей.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		
		Запись = НаборЗаписей[Индекс];
		
		Если НЕ ЗначениеЗаполнено(Запись.Представление) Тогда
			НаборЗаписей.Удалить(Запись);
			Продолжить;
		КонецЕсли;
		
		Запись.Объект = Ссылка;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	НаборЗаписей.Отбор.Объект.Установить(Ссылка);
	
	КопияНабора = НаборЗаписей.Выгрузить();
	НаборЗаписей.Очистить();
	
	Для Каждого СтрокаНабораЗаписей Из КопияНабора Цикл
		НаборЗаписей.Отбор.Вид.Установить(СтрокаНабораЗаписей.Вид);
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаНабораЗаписей);
		
		Попытка
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ("Элемент """ + СокрЛП(Ссылка) + """ не записан. Не записана контактная информация."));
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
	ПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка)
		
КонецПроцедуры

// Процедура записывает контактную информацию в ИБ из набора записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо записать КИ
//  Отказ - Булево
//
Процедура ЗаписатьКонтактнуюИнформациюСравниваяСКопией(НаборЗаписей, Ссылка, Отказ, КопияНабораКонтактнойИнформации)
	
	ТабКопия = КопияНабораКонтактнойИнформации.Выгрузить();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Запись.Объект = Ссылка;
		
		Отбор = Новый Структура("Объект,Тип,Вид", Запись.Объект, Запись.Тип, Запись.Вид);
		Строки = ТабКопия.НайтиСтроки(Отбор);
		Если Строки.Количество() = 0 Тогда
			Отличаются = Не ПустаяСтрока(Запись.Представление);
		Иначе
			Отличаются = Ложь;
			СтрКопия = Строки[0];
			
			Для Каждого Колонка Из ТабКопия.Колонки Цикл
				Если СтрКопия[Колонка.Имя] <> Запись[Колонка.Имя] Тогда
					Отличаются = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Отличаются Тогда
			Продолжить;
		КонецЕсли;
		
		Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Ссылка);
		Набор.Отбор.Тип.Установить(Запись.Тип);
		Набор.Отбор.Вид.Установить(Запись.Вид);
		
		Если Не ПустаяСтрока(Запись.Представление) Тогда
			новЗапись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(новЗапись, Запись);
		КонецЕсли;
		
		Попытка
			Набор.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ("Элемент """ + СокрЛП(Ссылка) + """ не записан. Не записана контактная информация."));
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
	ПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка);
	
КонецПроцедуры



// Создать копию набора записей контактной информации
//
Функция СоздатьКопиюНабораЗаписейКонтактнойИнформацииОбъекта(НаборЗаписей) Экспорт
	
	Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если ЗначениеЗаполнено(Запись.Представление) Тогда
			новЗапись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(новЗапись, Запись);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Набор;
	
КонецФункции

#Если Клиент Тогда

// Процедура выполняется при активизации строки табличного поля, в котором
// отображается контактная информация объектов в их формах, и управляет
// доступностью кнопки командной панели установки значения по умолчанию.
//
// Параметры:
//  Элемент - ТабличноеПоле
//  КнопкаУстановитьОсновным - Кнопка командной панели
//
Процедура КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, КнопкаУстановитьОсновным) Экспорт

	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если Элемент.ТекущиеДанные.ЗначениеПоУмолчанию Тогда
			КнопкаУстановитьОсновным.Пометка     = Истина;
			КнопкаУстановитьОсновным.Доступность = Истина;
		ИначеЕсли НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Представление) Тогда
			КнопкаУстановитьОсновным.Пометка     = Ложь;
			КнопкаУстановитьОсновным.Доступность = Ложь;
		Иначе
			КнопкаУстановитьОсновным.Пометка     = Ложь;
			КнопкаУстановитьОсновным.Доступность = Истина;
		КонецЕсли; 
	Иначе
		КнопкаУстановитьОсновным.Пометка     = Ложь;
		КнопкаУстановитьОсновным.Доступность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура выполняется при выводе строки табличного поля, в котором
// отображается контактная информация объектов в их формах.
//
// Параметры:
//  Элемент - ТабличноеПоле
//  ОформлениеСтроки - Оформление строки табличного поля
//  ДанныеСтроки - данные строки табличного поля
//
Процедура КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	Если ДанныеСтроки.ЗначениеПоУмолчанию Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	ИначеЕсли ТипЗнч(ДанныеСтроки.Вид) = Тип("Строка") Тогда
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	КонецЕсли;
	
	Если Элемент.Колонки.Картинка.Видимость Тогда
		ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
		Если ДанныеСтроки.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Если ПолучитьПредставлениеАдреса(ДанныеСтроки) = ДанныеСтроки.Представление Тогда
				// Формат МНС
				Если ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
					ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 2;
				Иначе
					ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 8;
				КонецЕсли; 
			Иначе
				Если ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
					ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 1;
				Иначе
					ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 7;
				КонецЕсли; 
			КонецЕсли; 
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 3;
			Иначе
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 9;
			КонецЕсли; 
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 4;
			Иначе
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 10;
			КонецЕсли; 
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 5;
			Иначе
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 11;
			КонецЕсли; 
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0;
			Иначе
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 6;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает запись контактной информации определенного типа и вида основной
// для объекта в пространстве одного типа.
//
// Параметры:
//  СтруктураПараметров - структура, параметры записи, для которой надо установить признак основной
//   Ключи:
//    Объект, СправочникСсылка, значение измерения Объект регистра сведений
//    Тип, ПеречислениеСсылка.ТипыКонтактнойИнформации
//    Вид, СправочникСсылка.ВидыКонтактнойИнформации
//
Процедура УстановитьЗаписьОсновной(НаборЗаписей, ТабличноеПоле, Кнопка) Экспорт

	Если ТабличноеПоле.ТекущиеДанные <> Неопределено
	   И ЗначениеЗаполнено(ТабличноеПоле.ТекущиеДанные.Представление) Тогда
	
		Если ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию Тогда
		
			ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию = Ложь;
			Кнопка.Пометка = Ложь;
			
		Иначе
			
			Для каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗаписьНабора.Тип = ТабличноеПоле.ТекущиеДанные.Тип Тогда
					ЗаписьНабора.ЗначениеПоУмолчанию = Ложь;
				КонецЕсли; 
			КонецЦикла;
			
			ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию = Истина;
			Кнопка.Пометка = Истина;
		
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры

// Обраьботчик события "ПередУдалением" табличного поля набора записей.
//
// Параметры:
//  Элемент - Табличное поле
//  Отказ - Булево
//
Процедура УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ) Экспорт

	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные <> Неопределено И (ЗначениеЗаполнено(Элемент.ТекущиеДанные.Представление) ИЛИ ТипЗнч(Элемент.ТекущиеДанные.Вид) = Тип("Строка")) Тогда
	
		ОтветНаВопрос = Вопрос("Удалить запись?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Элемент.ТекущиеДанные.Вид) = Тип("Строка") Тогда
			Элемент.Значение.Удалить(Элемент.ТекущиеДанные);
		Иначе
			Элемент.ТекущиеДанные.Представление       = "";
			Элемент.ТекущиеДанные.ЗначениеПоУмолчанию = Ложь;
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

// Функция формирует структуру записи регистра.
//
// Параметры:
//  Запись - запись набора записей регистра сведений
//
Функция ПолучитьСтруктуруЗаписиРегистра(Запись) Экспорт

	Если ТипЗнч(Запись) = Тип("РегистрСведенийЗапись.КонтактнаяИнформация")
	 ИЛИ ТипЗнч(Запись) = Тип("РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация") Тогда
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Объект"       , Запись.Объект);
		СтруктураЗаписи.Вставить("Тип"          , Запись.Тип);
		СтруктураЗаписи.Вставить("Вид"          , Запись.Вид);
		СтруктураЗаписи.Вставить("Представление", Запись.Представление);
		СтруктураЗаписи.Вставить("Комментарий"  , Запись.Комментарий);
		Для а = 1 По 10 Цикл
			СтруктураЗаписи.Вставить("Поле" + Строка(а), Запись["Поле" + Строка(а)]);
		КонецЦикла;
		
		СтруктураЗаписи.Вставить("ТипДома"  ,     Запись.ТипДома);
		СтруктураЗаписи.Вставить("ТипКорпуса"  ,  Запись.ТипКорпуса);
		СтруктураЗаписи.Вставить("ТипКвартиры"  , Запись.ТипКвартиры);

		Возврат СтруктураЗаписи;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 

КонецФункции

// Процедура контролирует возможность редактирования текста в поле ввода представления КИ.
//
Процедура УстановитьВозможностьРедактированияТекстаКИ(Элемент) Экспорт

	Если Элемент.ТекущиеДанные.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
	   И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Представление)
	   И (ПолучитьПредставлениеАдреса(Элемент.ТекущиеДанные) = Элемент.ТекущиеДанные.Представление) Тогда
		Элемент.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Ложь;
	Иначе
		Элемент.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Истина;
	КонецЕсли; 

КонецПроцедуры

// Обработчик события "ПриНачалеРедактирования" табличного поля
// набора записей регистра сведений
//
Процедура КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, ПоследнееЗначениеЭлементаТайпингаВидаКИ) Экспорт

	Если НоваяСтрока Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Тип) Тогда
			Элемент.ТекущиеДанные.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Вид) Тогда
			Элемент.ТекущиеДанные.Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли; 
	
	ПоследнееЗначениеЭлементаТайпингаВидаКИ = Элемент.ТекущиеДанные.Вид;
	
КонецПроцедуры

// Обработчик события "ПередОкончаниемРедактирования" табличного поля
// набора записей регистра сведений
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстТайпингаВидаКИ, мОбработкаТайпингаВидаКИ) Экспорт
	
	Если мОбработкаТайпингаВидаКИ И НЕ НоваяСтрока Тогда
		мОбработкаТайпингаВидаКИ = Ложь;
		Отказ = Истина;
		Элемент.ТекущаяКолонка = Элемент.Колонки.Вид;
		Элемент.Колонки.Вид.ЭлементУправления.ВыделенныйТекст = мТекстТайпингаВидаКИ;
		мТекстТайпингаВидаКИ = "";
	ИначеЕсли Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Вид) Тогда
		Отказ = Истина;
		Элемент.ТекущаяКолонка = Элемент.Колонки.Вид;
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнен вид");
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события "ПриИзменении" представления КИ табличного поля
// набора записей регистра сведений
//
Процедура КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ТабличноеПоле) Экспорт

	Если ТабличноеПоле.ТекущиеДанные.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		
		СтруктураПолей = РазложитьТелефонПоПолям(Элемент.Значение);
		ТабличноеПоле.ТекущиеДанные.Поле3 = СтруктураПолей.СамТелефон;
		ТабличноеПоле.ТекущиеДанные.Поле1 = СтруктураПолей.КодСтраны;
		ТабличноеПоле.ТекущиеДанные.Поле2 = СтруктураПолей.КодГорода;
		
		СформироватьПредставлениеТелефона(ТабличноеПоле.ТекущиеДанные);
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события "ПередНачаломДобавления" табличного поля
// набора записей регистра сведений
//
Процедура КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ТабличноеПоле,
														  НаборКонтактнойИнформации, ДоступностьОбъекта = Истина, Форма = Неопределено) Экспорт

	СсылкаНаОбъект = НаборКонтактнойИнформации.Отбор.Объект.Значение;
	Если (СсылкаНаОбъект = Неопределено) ИЛИ (СсылкаНаОбъект.Пустая()) Тогда
		Отказ = Истина;
		Предупреждение("Перед добавлением контактной информации запишите объект!");
		Возврат;
	КонецЕсли;
	
	Если Не Копирование Тогда
		Если мКнопкаРедактироватьКИВДиалоге.Пометка  Тогда
			Отказ = Истина;
			ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
			ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
			ОбработкаРедактирования.РедактироватьЗапись(НаборКонтактнойИнформации, , Форма);
		Иначе
			ТабличноеПоле.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Истина;
		КонецЕсли;
	Иначе
		Если мКнопкаРедактироватьКИВДиалоге.Пометка Тогда
			Отказ = Истина;
			ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
			ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
			ОбработкаРедактирования.РедактироватьЗапись(НаборКонтактнойИнформации,, Форма, ПолучитьСтруктуруЗаписиРегистра(ТабличноеПоле.ТекущиеДанные));
		Иначе
			УстановитьВозможностьРедактированияТекстаКИ(ТабличноеПоле);
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

// Обработчик события "ПередНачаломИзменения" табличного поля
// набора записей регистра сведений
//
Процедура КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге, ДоступностьОбъекта = Истина, Форма = Неопределено) Экспорт

	Если мКнопкаРедактироватьКИВДиалоге.Пометка Тогда
		Отказ = Истина;
		ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
		ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
		ОбработкаРедактирования.РедактироватьЗапись(Элемент.ТекущиеДанные, , Форма);
	Иначе
		УстановитьВозможностьРедактированияТекстаКИ(Элемент);
	КонецЕсли; 

КонецПроцедуры

// Обработчик события "ПриИзменении" Типа КИ табличного поля
// набора записей регистра сведений
//
Процедура КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ТабличноеПоле) Экспорт

	Если ТабличноеПоле.ТекущиеДанные <> Неопределено
	   И ЗначениеЗаполнено(ТабличноеПоле.ТекущиеДанные.Вид)
	   И ТипЗнч(ТабличноеПоле.ТекущиеДанные.Вид) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")
	   И ТабличноеПоле.ТекущиеДанные.Вид.Тип <> Элемент.Значение Тогда
	
		ТабличноеПоле.ТекущиеДанные.Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	
	КонецЕсли; 

КонецПроцедуры

// Процедура копирует из строки источника адрес в строку приемника
Процедура СкопироватьДанныеАдреса(СтрокаИсточник, СтрокаПриемник)
	
	СтрокаПриемник.Представление = СтрокаИсточник.Представление;
	СтрокаПриемник.Комментарий   = СтрокаИсточник.Комментарий;
	
	Для а = 1 По 10 Цикл
		СтрокаПриемник["Поле" + Строка(а)] = СтрокаИсточник["Поле" + Строка(а)];
	КонецЦикла;
	
КонецПроцедуры

// Процедура копирует КИ из Ффактич адреса в юридический и наоборот
Процедура СкопироватьАдресКонтактнойИнформации(СтрокаСАдресом, ТаблицаКИ) Экспорт
	
	Если (СтрокаСАдресом = Неопределено) Или (ТаблицаКИ = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаСАдресом.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
		ВидПоиска = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	ИначеЕсли СтрокаСАдресом.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
		ВидПоиска = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	ИначеЕсли СтрокаСАдресом.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
		ВидПоиска = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	ИначеЕсли СтрокаСАдресом.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
		ВидПоиска = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗадаватьВопросОбИзменении = Истина;
	
	// бежим по всем записям регистра и те которые нужно поменять - меняем
	Для Каждого СтрокаДляИзменения Из ТаблицаКИ Цикл
		
		// если представление не заполнено то только тогда можно предложить его поменять
		Если СтрокаДляИзменения.Вид = ВидПоиска И НЕ ЗначениеЗаполнено(СтрокаДляИзменения.Представление) Тогда
			
			Если ЗадаватьВопросОбИзменении Тогда
				
				// вопрос задаем только в том случае, если представление не заполнено, а когда оно заполнено, то ничего не спрашиваем и не меняем
				НужноМенятьАдрес = Вопрос("Изменился " + СтрокаСАдресом.Вид.Наименование + ".
											|Автоматически изменить " + СтрокаДляИзменения.Вид.Наименование + "?", РежимДиалогаВопрос.ДаНет);
				// если менять не нужно - то не меняем							
				Если НужноМенятьАдрес <> КодВозвратаДиалога.Да Тогда 
					Возврат;
				КонецЕсли;
				ЗадаватьВопросОбИзменении = Ложь;
			КонецЕсли;
			
			// изменяем адрес
			СкопироватьДанныеАдреса(СтрокаСАдресом, СтрокаДляИзменения);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры


#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция проверяет строку на наличие значимых символов
//
// Параметры
//  ВыбСтрока  – строка для проверки
// Возвращаемое значение:
//   Строка - пробел или пустое значение строки
//
Функция ПроверкаПустойСтроки(ВыбСтрока, ПризнакЗапятой=Истина)
	
	Если ПустаяСтрока(ВыбСтрока) Тогда
		Возврат "";
	Иначе
		Возврат ?(ПризнакЗапятой,",","")+" ";
	КонецЕсли; 
	
КонецФункции // ПроверкаПустойСтроки()

// Функция возвращает представление адреса собранного из полей значений Поле1 - Поле10
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьПредставлениеАдреса(Запись) Экспорт

	ТекПредставление = "";

	Если СокрЛП(Запись.Поле1) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле1);
	КонецЕсли;

	Если СокрЛП(Запись.Поле2) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле2);
	КонецЕсли;

	Если СокрЛП(Запись.Поле3) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле3);
	КонецЕсли;

	Если СокрЛП(Запись.Поле4) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле4);
	КонецЕсли;

	Если СокрЛП(Запись.Поле5) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле5);
	КонецЕсли;

	Если СокрЛП(Запись.Поле6) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле6);
	КонецЕсли;
	
	ТипДома = Неопределено;
	ТипКорпуса = Неопределено;
	ТипКвартиры = Неопределено;
	Если ТипЗнч(Запись) = Тип("Структура") Тогда
		Запись.Свойство("ТипДома",     ТипДома);
		Запись.Свойство("ТипКорпуса",  ТипКорпуса);
		Запись.Свойство("ТипКвартиры", ТипКвартиры);
	Иначе
		ТипДома     = Запись.ТипДома;
		ТипКорпуса  = Запись.ТипКорпуса;
		ТипКвартиры = Запись.ТипКвартиры;
	КонецЕсли;
	
	Если СокрЛП(Запись.Поле7) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ?(ЗначениеЗаполнено(ТипДома), ТипДома, "дом") + " № " + СокрЛП(Запись.Поле7);
	КонецЕсли;

	Если СокрЛП(Запись.Поле8) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ?(ЗначениеЗаполнено(ТипКорпуса), ТипКорпуса, "корпус") + " " + СокрЛП(Запись.Поле8);
	КонецЕсли;

	Если СокрЛП(Запись.Поле9) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ?(ЗначениеЗаполнено(ТипКвартиры), ТипКвартиры, "кв.") + СокрЛП(Запись.Поле9);
	КонецЕсли;

	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	
	Возврат ТекПредставление;

КонецФункции

//Функция по структуре с адресом возвращает его представление
Функция ПолучитьПредставлениеАдресаПоСтруктуре(СтруктураАдреса) Экспорт
	
	ТекПредставление = "";
	
	Если СтруктураАдреса = Неопределено Тогда
		Возврат ТекПредставление;
	КонецЕсли;
	
	АдресЗаПределамиРФ = Неопределено;
	СтруктураАдреса.Свойство("ЗаПределамиРФ", АдресЗаПределамиРФ);
	Если АдресЗаПределамиРФ = Неопределено Тогда
		АдресЗаПределамиРФ = Ложь;
	КонецЕсли;
	
	Если Не АдресЗаПределамиРФ Тогда
		
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Индекс), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Регион), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Район), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Город), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.НаселенныйПункт), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Улица), ", ");
		
		ТипДома = Неопределено;
		ТипКорпуса = Неопределено;
		ТипКвартиры = Неопределено;
		СтруктураАдреса.Свойство("ТипДома", ТипДома);
		СтруктураАдреса.Свойство("ТипКорпуса", ТипКорпуса);
		СтруктураАдреса.Свойство("ТипКвартиры", ТипКвартиры);
		
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Дом), ", "      + ?(ЗначениеЗаполнено(ТипДома),     ТипДома,     "дом") + " № ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Корпус), ", "   + ?(ЗначениеЗаполнено(ТипКорпуса),  ТипКорпуса,  "корпус") + " ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Квартира), ", " + ?(ЗначениеЗаполнено(ТипКвартиры), ТипКвартиры, "кв."));
		
		Если СтрДлина(ТекПредставление) > 2 Тогда
			ТекПредставление = Сред(ТекПредставление, 3);
		КонецЕсли;
	
	Иначе
		
		ТекПредставление = СтруктураАдреса.Представление;
	
	КонецЕсли;
	
	Возврат ТекПредставление;
	
КонецФункции

//Функция по строке адреса (разделенная через запятую) возвращает его представление
Функция ПолучитьПредставлениеАдресаПоСтрока(СтрокаАдреса) Экспорт
	
	СтруктураАдреса = ПолучитьСтруктуруАдресаИзСтроки(СтрокаАдреса);
	ПредставлениеАдреса = ПолучитьПредставлениеАдресаПоСтруктуре(СтруктураАдреса);
	Возврат ПредставлениеАдреса
	
КонецФункции


// Процедура формирует строковое представление адреса.
Процедура СформироватьПредставлениеТелефона(НаборПолей) Экспорт

	НаборПолей.Представление = НаборПолей.Поле1;
	НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле2)),(ПроверкаПустойСтроки(НаборПолей.Представление, Ложь)+"(" + НаборПолей.Поле2 + ")"),"");
	НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле3)),(ПроверкаПустойСтроки(НаборПолей.Представление, ПустаяСтрока(НаборПолей.Поле2)) + ПривестиНомерТелефонаКШаблону(НаборПолей.Поле3)),"");
	Если НЕ ПустаяСтрока(НаборПолей.Представление) Тогда
		НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле4)),(ПроверкаПустойСтроки(НаборПолей.Представление) + "доб. " + ПривестиНомерТелефонаКШаблону(НаборПолей.Поле4)),"");
	Иначе
		НаборПолей.Представление = ПривестиНомерТелефонаКШаблону(НаборПолей.Поле4);
	КонецЕсли; 

КонецПроцедуры // СформироватьПредставление()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА ХРАНЕНИЯ КОНТАКНОЙ ИНФОРМАЦИИ

// Процедура переносит строку из таблицы в Структуру
Процедура ПеренестиСтрокуТаблицыВСтруктуру(Таблица, СтрокаТаблицы, СтруктураЭлемента)Экспорт 
	
	Если СтруктураЭлемента = Неопределено 
		ИЛИ СтрокаТаблицы = Неопределено 
		ИЛИ Таблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента.Очистить();
	Для Каждого Колонка Из Таблица.Колонки Цикл
		СтруктураЭлемента.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры

// Процедура переносит строку из запроса в Структуру
Процедура ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, СтруктураЭлемента)Экспорт 
	
	Если СтруктураЭлемента = Неопределено 
		ИЛИ РезультатЗапроса = Неопределено 
		ИЛИ СтрокаВыборки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента.Очистить();
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураЭлемента.Вставить(Колонка.Имя, СтрокаВыборки[Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры // ПеренестиСтрокуВыборкиВСтруктуру()

// Функция возвращает пустое значение определенного типа,
//  в соответствии с видом объекта контактной информации
//
// Параметры
//  ВидОбъектаКонтактнойИнформации - ПеречислениеСсылка.ВидыОбъектовКонтактнойИнформации
//
// Возвращаемое значение:
//   СправочникСсылка (пустая) или Неопределено
//
Функция ПолучитьПустоеЗначениеОбъектаКонтактнойИнформации(ВидОбъектаКонтактнойИнформации) Экспорт

	Если ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица Тогда
		Возврат Справочники.КонтактныеЛица.ПустаяСсылка();
	ИначеЕсли ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	ИначеЕсли ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	ИначеЕсли ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	ИначеЕсли ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица Тогда
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьПустоеЗначениеОбъектаКонтактнойИнформации()

// Функция определяет вид объекта контактной информации
//
// Параметры
//  ОбъектСсылка - Ссылка на объект контактной информации
// Возвращаемые значения
//  Возвращается ссылка на перечисление ВидыОбъектовКонтактнойИнформации,
//  соответствующее параметру ОбъектСсылка
Функция ВидОбъектаКИ(ОбъектСсылка) Экспорт

	Если ОбъектСсылка = Неопределено Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Организации") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
	Иначе
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции // ВидОбъектаКИ()

// Функция вызывается при начале выбора объекта контактной информации
//
// Параметры
//  ФормаЗаписи - форма записи регистра сведений КонтактнаяИнформация
//  Элемент - элемент формы записи регистра сведений КонтактнаяИнформация,
//  значение которого выбирается.
//
// Возвращаемое значение:
//   Булево - продолжить стандартную операцию выбора или нет.
//
Функция НачалоВыбораОбъектаКИ(ФормаЗаписи, Элемент, ТекущийПользователь) Экспорт

	Если Элемент.Значение <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли; 
	
	СписокТиповОбъектов = Новый СписокЗначений;

	МассивТипов = ?(Элемент.ОграничениеТипа.Типы().Количество()>0, Элемент.ОграничениеТипа.Типы(), Элемент.ТипЗначения.Типы());
	Для каждого Тип Из МассивТипов Цикл
		НовыйТип = Новый(Тип);
		СписокТиповОбъектов.Добавить(НовыйТип.Ссылка.Метаданные().Имя, НовыйТип.Ссылка.Метаданные().Синоним);
	КонецЦикла;

	Если СписокТиповОбъектов.Количество() = 1 Тогда
		ВыбранноеЗначениеСписка = СписокТиповОбъектов[0];
	Иначе
		ВыбранноеЗначениеСписка = ФормаЗаписи.ВыбратьИзСписка(СписокТиповОбъектов, Элемент);
	КонецЕсли;
	
	Если ВыбранноеЗначениеСписка = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Элемент.Значение = Справочники[ВыбранноеЗначениеСписка.Значение].ПустаяСсылка();
		Возврат Истина;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА РАБОТЫ С АДРЕСНЫМ КЛАССИФИКАТОРОМ

// Функция по полному наименованию адресного элемента выдает отдельно его имя, и отдельно его адресное сокращение
Функция ПолучитьИмяИАдресноеСокращение(Знач СтрокаЭлемента, АдресноеСокращение) Экспорт

   	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;

	Пока  СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";

	Выборка = Запрос.Выполнить().Выбрать();
	АдресноеСокращение = "";

	Если Выборка.Следующий() Тогда
		Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
			Возврат СтрокаЭлемента;
		Иначе
			АдресноеСокращение = Сред(СтрокаЭлемента, ПозицияПослПробела + 1);
			Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
		КонецЕсли;
	Иначе
		Возврат СтрокаЭлемента;
	КонецЕсли;
  	
КонецФункции

// Функция определяет является ли последнее слово в строке допустимым 
//  сокращением, и если является, то обрезает его из строки
//
// Параметры
//  СтрокаЭлемента - Строка в которой необходимо обрезать сокращение
// Возвращаемые значения
//  Обрезанную строку в случае, если есть сокращение и полученную строку в 
// обратном случае
Функция ОбрезатьСокращение(Знач СтрокаЭлемента) Экспорт

	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;

	Пока  СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
			Возврат СтрокаЭлемента;
		Иначе
			Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
		КонецЕсли;
	Иначе
		Возврат СтрокаЭлемента;
	КонецЕсли;

КонецФункции

// Функция по для переданной строки определят необходимость дополнить её
// сокращением
//
// Параметры
//  Название - Строка .для которой определяется необходимость дополнения 
// сокращением
//  Уровень - уровень, для которого необходимо составить список сокращений
// Возвращаемые значения
//  Возвращается Неопределено, если строку дополнять не нужно или список 
// значений с сокращениями в обратном случае
Функция ПолучитьСписокСокращений(Знач Название, Уровень) Экспорт

	Название = СокрЛП(Название);

	Если ПустаяСтрока(Название) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ОбрезатьСокращение(Название) <> Название Тогда // было что обрезать
		Возврат Неопределено; // для строки не требуется дополнение сокращением
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уровень", Уровень);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Уровень = &Уровень";

	Выборка = Запрос.Выполнить().Выбрать();

	СписокСокращений = Новый СписокЗначений();

	Пока Выборка.Следующий() Цикл
		СписокСокращений.Добавить(Выборка.Ссылка.Сокращение);
	КонецЦикла;

	Если СписокСокращений.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат СписокСокращений;
	КонецЕсли;

КонецФункции

// Функция формирует строку с названием адресного элемента,
// которое состоит из наименования и сокращения
//
// Параметры:
//  АдресныйЭлемент - элемент справочника Адресный классификатор.
//
// Возвращаемое значение:
//  Название адресного элемента
//
Функция ПолучитьНазвание(АдресныйЭлемент) Экспорт

	Если АдресныйЭлемент.Код = 0 Тогда
		Возврат "";
	Иначе
		Возврат СокрЛП(АдресныйЭлемент.Наименование) + " " + СокрЛП(АдресныйЭлемент.Сокращение)
	КонецЕсли;

КонецФункции

// Процедура раскладывает код адресного элемента на составляющие:
// Код Региона, код района, код города, код населенного пункта, код улицы и код дома
Процедура РазложитьКодАдресногоЭлементаНаСоставляющие(Знач Код, КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома)
	
	КодЭлемента = Код;
	
	КодРегиона = Цел(КодЭлемента / МаскаРегиона());
	КодЭлемента = КодЭлемента % МаскаРегиона();

	КодРайона = Цел(КодЭлемента / МаскаРайона());
	КодЭлемента = КодЭлемента % МаскаРайона();

	КодГорода = Цел(КодЭлемента / МаскаГорода());
	КодЭлемента = КодЭлемента % МаскаГорода();

	КодНаселенногоПункта = Цел(КодЭлемента / МаскаНасПункта());
	КодЭлемента = КодЭлемента % МаскаНасПункта();

	КодУлицы = Цел(КодЭлемента / МаскаУлицы());
	КодЭлемента = КодЭлемента % МаскаУлицы();

	КодДома = Цел(КодЭлемента / МаскаДома());

КонецПроцедуры // РазложитьКодАдресногоЭлементаНаСоставляющие()

// Функция формирует строку с полным названием адресного элемента,
// которое состоит из наименования и сокращения самого адресного
// элемента и его "родителей"
//
// Параметры:
//  КодЭлемента - Код адресного элемента.
//
// Возвращаемое значение:
//  Название адресного элемента и его родителей через запятую
//
Функция ПолучитьПолноеНазвание(Знач КодЭлемента, НачальныйУровеньДетализации = 1, КонечныйУровеньДетализации = 6) Экспорт
	
	Перем КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома;

	РазложитьКодАдресногоЭлементаНаСоставляющие(КодЭлемента, КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома);
	
	Название = "";
	НовыйКод = 0;

	Если (КодРегиона > 0) Тогда
		НовыйКод = КодРегиона * МаскаРегиона();
		Если (1 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 1) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодРайона > 0) Тогда
		НовыйКод = НовыйКод + КодРайона * МаскаРайона();
		Если (2 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 2) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодГорода > 0) Тогда
		НовыйКод = НовыйКод + КодГорода * МаскаГорода();
		Если (3 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 3) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодНаселенногоПункта > 0) Тогда
		НовыйКод = НовыйКод + КодНаселенногоПункта * МаскаНасПункта();
		Если (4 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 4) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодУлицы > 0) Тогда
		НовыйКод = НовыйКод + КодУлицы * МаскаУлицы();
		Если (5 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 5) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодДома > 0) Тогда
		НовыйКод = НовыйКод + КодДома * МаскаДома();
		Если (6 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 6) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если СтрДлина(Название) > 2 Тогда
		Название = Сред(Название, 3);
	КонецЕсли;

	Возврат Название;

КонецФункции // ПолучитьПолноеНазвание()

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьМаскуПоТипу(ТипАдресногоЭлемента) Экспорт

	Если ТипАдресногоЭлемента = 1 Тогда
		Возврат МаскаРегиона();

	ИначеЕсли ТипАдресногоЭлемента = 2 Тогда
		Возврат МаскаРайона();

	ИначеЕсли ТипАдресногоЭлемента = 3 Тогда
		Возврат МаскаГорода();

	ИначеЕсли ТипАдресногоЭлемента = 4 Тогда
		Возврат МаскаНасПункта();

	ИначеЕсли ТипАдресногоЭлемента = 5 Тогда
		Возврат МаскаУлицы();

	ИначеЕсли ТипАдресногоЭлемента = 6 Тогда
		Возврат МаскаДома();

	Иначе
		Возврат МаскаКвартиры();

	КонецЕсли;

КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьТипАдресногоЭлемента(КодЭлемента) Экспорт
	
	Если КодЭлемента = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если КодЭлемента % МаскаРегиона() < 100  Тогда // регион 21 ноль и АА
		Возврат 1;
		
	ИначеЕсли КодЭлемента % МаскаРайона() < 100 Тогда // район 18 ноль и АА
		Возврат 2;
		
	ИначеЕсли КодЭлемента % МаскаГорода() < 100 Тогда // город 15 ноль и АА
		Возврат 3;
		
	ИначеЕсли КодЭлемента % МаскаНасПункта() < 100 Тогда // населнный пункт 12 ноль и АА
		Возврат 4;
		
	ИначеЕсли КодЭлемента % МаскаУлицы() < 100 Тогда // улица 8 ноль и АА
		Возврат 5;
		
	ИначеЕсли КодЭлемента % МаскаДома() < 100 Тогда // дом 4 ноль и АА
		Возврат 6;
		
	Иначе // квартира
		Возврат 7;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруАдресногоЭлемента(КодЭлемента) Экспорт
	
	КодРазбора = КодЭлемента;
	ТипАдресногоЭлемента = ПолучитьТипАдресногоЭлемента(КодРазбора);
	
	КодРегиона = Цел(КодРазбора / МаскаРегиона());
	КодРазбора = КодРазбора % МаскаРегиона();

	КодРайона = Цел(КодРазбора / МаскаРайона());
	КодРазбора = КодРазбора % МаскаРайона();

	КодГорода = Цел(КодРазбора / МаскаГорода());
	КодРазбора = КодРазбора % МаскаГорода();

	КодНаселенногоПункта = Цел(КодРазбора / МаскаНасПункта());
	КодРазбора = КодРазбора % МаскаНасПункта();

	КодУлицы = Цел(КодРазбора / МаскаУлицы());
	
	ТексЗапроса = "ВЫБРАТЬ
	              |	АдресныйКлассификатор.Код,
	              |	АдресныйКлассификатор.КодРегионаВКоде,
	              |	АдресныйКлассификатор.Наименование,
	              |	АдресныйКлассификатор.Сокращение,
	              |	АдресныйКлассификатор.Индекс,
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	              |	АдресныйКлассификатор.КодРайонаВКоде,
	              |	АдресныйКлассификатор.КодГородаВКоде,
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
	              |	АдресныйКлассификатор.КодУлицыВКоде
	              |ИЗ
	              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	              |
	              |ГДЕ
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента И
	              |	АдресныйКлассификатор.КодРегионаВКоде = &КодРегиона И
	              |	АдресныйКлассификатор.КодРайонаВКоде = &КодРайона И
	              |	АдресныйКлассификатор.КодГородаВКоде = &КодГорода И
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПункта И
	              |	АдресныйКлассификатор.КодУлицыВКоде = &КодУлицы И
	              |	АдресныйКлассификатор.Код = &КодЭлемента";
	
	Запрос = Новый Запрос(ТексЗапроса);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипАдресногоЭлемента);
	Запрос.УстановитьПараметр("КодРегиона", КодРегиона);
	Запрос.УстановитьПараметр("КодРайона", КодРайона);
	Запрос.УстановитьПараметр("КодГорода", КодГорода);
	Запрос.УстановитьПараметр("КодНаселенногоПункта", КодНаселенногоПункта);
	Запрос.УстановитьПараметр("КодУлицы", КодУлицы);
	Запрос.УстановитьПараметр("КодЭлемента", КодЭлемента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодРегионаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде",
		                         Выборка.Код,
		                         Выборка.Наименование,
		                         Выборка.Сокращение,
		                         Выборка.ТипАдресногоЭлемента,
		                         Выборка.Индекс,
		                         Выборка.КодРегионаВКоде,
		                         Выборка.КодРайонаВКоде,
		                         Выборка.КодГородаВКоде,
		                         Выборка.КодНаселенногоПунктаВКоде,
		                         Выборка.КодУлицыВКоде);

	Иначе 
		Возврат ПолучитьПустуюСтруктуруАдреса();
		
	КонецЕсли;
	
КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  АдресныйЭлемент - элемент справочника "Адресный классификатор"
// для которого необходимо получить маску.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьМаску(АдресныйЭлемент) Экспорт

	Возврат ПолучитьМаскуПоТипу(АдресныйЭлемент.ТипАдресногоЭлемента);

КонецФункции

// Функция возвращает структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
// Параметры:
// Нет.
//
// Возвращаемое значение:
// Структура - структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
Функция ПолучитьПустуюСтруктуруАдреса() Экспорт
	
	Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодРегионаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде", 0, "", "", 0, "", 0, 0, 0, 0, 0);
	
КонецФункции

// Функция ищет требуемый адресный элемент по названию и типу 
// и возвращает первый найденный. В качестве дополнения может 
// быть задан элемент "родитель"
//
// Параметры:
//  НазваниеЭлемента - название адресного элемента ( с сокращением)
//  ТипЭлемента - тип искомого адресного элемента
//  ЭлементРодитель - элемент "родитель"
//
// Возвращаемое значение:
//  Найденный элемент справочника Адресный классификатор или пустая ссылка в случае неудачи
//
Функция ПолучитьАдресныйЭлемент(НазваниеЭлемента, ТипЭлемента, КодЭлементаРодителя = 0) Экспорт

	Перем КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома;
	
	Если (СокрЛП(НазваниеЭлемента) = "") ИЛИ (ТипЭлемента = 0) Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;
	
	// смотрим есть ли в имени адресное сокращение этого уровня
	// если есть, то ищем по наименованию и адресному сокращению
	АдресноеСокращение = "";
	НазваниеЭлемента = ПолучитьИмяИАдресноеСокращение(НазваниеЭлемента, АдресноеСокращение);

	Запрос = Новый Запрос();
	
	ОграничениеПоКоду = "";
	Если КодЭлементаРодителя > 0 Тогда // проверка на соответствие подчинению родителю
		ТипАдрЭлемента = ПолучитьТипАдресногоЭлемента(КодЭлементаРодителя);
		МаскаРодителя = ПолучитьМаскуПоТипу(ТипАдрЭлемента);
		
		Если ТипАдрЭлемента <= 5 Тогда
			
			КодЭлемента = КодЭлементаРодителя;
			
			РазложитьКодАдресногоЭлементаНаСоставляющие(КодЭлемента, КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома);

			Если КодРегиона <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодРегионаВКоде = &КодРегионаВКоде)";
				Запрос.УстановитьПараметр("КодРегионаВКоде", КодРегиона);
			КонецЕсли;
			
			Если КодРайона <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде)";
				Запрос.УстановитьПараметр("КодРайонаВКоде", КодРайона);
			КонецЕсли;
			
			Если КодГорода <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде)";
				Запрос.УстановитьПараметр("КодГородаВКоде", КодГорода);
			КонецЕсли;
			
			Если КодНаселенногоПункта <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде)";
				Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", КодНаселенногоПункта);
			КонецЕсли;
			
			Если КодУлицы <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде)";
				Запрос.УстановитьПараметр("КодУлицыВКоде", КодУлицы);
			КонецЕсли;
		
		Иначе
			// ограничиваем по коду элемента
			КонечноеЗначениеКода = КодЭлементаРодителя + МаскаРодителя - 1; 
			
			ОграничениеПоКоду = Символы.ПС + "  И (АдресныйКлассификатор.Код Между &НачальноеЗначениеКода И &КонечноеЗначениеКода)";
			Запрос.УстановитьПараметр("НачальноеЗначениеКода", КодЭлементаРодителя);
			Запрос.УстановитьПараметр("КонечноеЗначениеКода", КонечноеЗначениеКода);
		КонецЕсли;
		
	КонецЕсли;
	
	// ограничение на адресное сокращение
	Если АдресноеСокращение <> "" Тогда
		ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.Сокращение = &АдресноеСокращение)";
		Запрос.УстановитьПараметр("АдресноеСокращение", АдресноеСокращение);
	КонецЕсли;
	
    Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				  |	АдресныйКлассификатор.Код,
	              |	АдресныйКлассификатор.КодРегионаВКоде,
	              |	АдресныйКлассификатор.Наименование,
	              |	АдресныйКлассификатор.Сокращение,
	              |	АдресныйКлассификатор.Индекс,
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	              |	АдресныйКлассификатор.КодРайонаВКоде,
	              |	АдресныйКлассификатор.КодГородаВКоде,
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
	              |	АдресныйКлассификатор.КодУлицыВКоде

	              |ИЗ
	              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	              |
	              |ГДЕ
	              |	АдресныйКлассификатор.Наименование = &Наименование И
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента " +
				  ОграничениеПоКоду;
	

	Запрос.УстановитьПараметр("Наименование", НазваниеЭлемента);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипЭлемента);
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Структура = СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, Выборка);
	Иначе 
		Структура =  ПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;
	
	Возврат Структура;

КонецФункции

// Функция определяет входимость числа в заданный диапазон
//  При этом диапазон задается как это описано в комментарии к функции ЧислоВИнтервале
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//
// Возвращаемое значение:
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция ВходитВИнтервал(Знач Номер, Интервал) Экспорт

	Если ПустаяСтрока("" + Номер) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Номер, Ложь) Тогда
		Возврат ВРЕГ(СтрЗаменить("" + Номер, " ", "")) = ВРЕГ(СтрЗаменить("" + Интервал, " ", ""));
	КонецЕсли;

	Номер = Число(Номер);

	ТолькоЧислоИнтервал = ОбщегоНазначения.ТолькоЦифрыВСтроке(Интервал, Ложь);
	
	Если ТолькоЧислоИнтервал Тогда
		Если Номер = Число(Интервал) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Если Найти(Интервал,"Ч") > 0 Тогда // диапазон четных чисел
		Интервал      = СтрЗаменить(Интервал, "Ч", "");
		Четность = 2;
		
	ИначеЕсли Найти(Интервал,"Н") > 0 Тогда // диапазон нечетных чисел
		Интервал      = СтрЗаменить(Интервал, "Н", "");
		Четность = 1;
		
	ИначеЕсли (Найти(Интервал, "-") = 0) И ТолькоЧислоИнтервал Тогда 
		// интервал это дом представленный в виде строки
		Возврат Ложь;
		
	Иначе
		Четность=0;
		
	КонецЕсли;
	
	Интервал = СтрЗаменить(Интервал, ")", ""); // на всякий случай уберем скобки
	Интервал = СтрЗаменить(Интервал, "(", "");
	Позиция  = Найти(Интервал, "-");
	Попали = 0;
	
	Если Позиция <> 0 Тогда
		МинЗначение  = ВыделитьЧислоИЗСтроки(Лев(Интервал, Позиция - 1));
		МаксЗначение = ВыделитьЧислоИЗСтроки(Сред(Интервал, Позиция + 1));
		Если (Номер >= МинЗначение) И (Номер <= МаксЗначение) Тогда
			Попали = 1;
		КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(Интервал) Тогда
		// случай когда интервал был равен Ч или Н
		Попали = 1;
		
	Иначе
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Интервал, Ложь) Тогда
			Если Номер = Число(Интервал) Тогда
				Попали = 1;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если (Попали = 1) И (
	((Четность = 2) И (Номер % 2 = 0)) ИЛИ 
	((Четность = 1) И (Номер % 2 = 1)) ИЛИ 
	 (Четность = 0)) Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВходитВИнтервал()

Функция ВыделитьЧислоИЗСтроки(СтрокаСимволов)
	
	Набор = "0";
	
	Для Индекс = 1 По СтрДлина(СтрокаСимволов) Цикл
		Если КодСимвола(СтрокаСимволов, Индекс) >= 48 И КодСимвола(СтрокаСимволов, Индекс) <= 57 Тогда
			Набор = Набор + Сред(СтрокаСимволов, Индекс, 1);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Число(Набор);
	
КонецФункции

// Функция определяет входимость:
//  1. Номера дома (представленного в виде строки)
//     где Номер дома, это строка вида:
//     <СтрокаДом> пример: 58А, 32/1, 50А/8
//
//  2. Номера дома и номера корпуса (строения), в виде строки:
//     <СтрокаДом>к<СтрокаКорпус>,   пример: 32к1   это дом 32 корпус 1, 
//     <СтрокаДом>/<СтрокаКорпус>,   пример: 32/1   это дом 32 корпус 1, 
//     <СтрокаДом>стр<СтрокаКорпус>, пример: 32стр1 это дом 32 корпус 1, 
//		
//  3. Числа (номера дома) в заданный интервал чисел
//     При этом интервал задается строкой вида:
//     <Диапазон>[,<Диапазон>]
//     где Диапазон, это строка вида:
//     [Ч/Н]<Число>[-<Число>]
//     Префикс Ч или Н диапазона обозначает четность и нечетность входящих в него чисел
//     Пример: в интервал Ч12-14,Н1-5,20-29 входят числа 1,3,5,12,14 и все с 20 по 29
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция НомерДомаВИнтервале(Номер, Знач Интервал) Экспорт
	
	Пока НЕ ПустаяСтрока(Интервал) Цикл

		Позиция = Найти(Интервал, ",");
		Если Позиция = 0 Тогда
			Возврат ВходитВИнтервал(Номер, Интервал);
		Иначе
			Если ВходитВИнтервал(Номер, СокрЛП(Лев(Интервал, Позиция - 1))) Тогда
				Возврат Истина;
			Иначе
				Интервал = Сред(Интервал, Позиция + 1);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции // НомерДомаВИнтервале()

// Функция определяет индекс по переданным улице, дому и корпусу
//
// Параметры: 
//  Улица - элемент справочника адресный классификатор с требуемой улицей
//  НомерДома - номер дома, для которого необходимо получить индекс
//  НомерКорпуса - номер корпуса
//
// Возвращаемое значение:
//  Строка - шестизначный почтовый индекс
//
Функция ПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уровень", 6);
	Запрос.УстановитьПараметр("НижнийКод", Цел(Улица.Код / 10000000000) * 10000000000);
	Запрос.УстановитьПараметр("ВерхнийКод", Цел(Улица.Код / 10000000000 + 1) * 10000000000);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныйКлассификатор.Наименование,
	|	АдресныйКлассификатор.Индекс
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = &Уровень И
	|	АдресныйКлассификатор.Код МЕЖДУ &НижнийКод И &ВерхнийКод";

	
	Выборка = Запрос.Выполнить().Выбрать();
	ИндексДома = "";
	
	Пока Выборка.Следующий() Цикл

		Если НЕ ПустаяСтрока(Выборка.Индекс) Тогда
			Интервал = Врег(СокрЛП(Выборка.Наименование));
			
			Если НомерДомаВИнтервале(СокрЛП(НомерДома), Интервал) Тогда
				ИндексДома = Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "К", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
				Возврат Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "/", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
				Возврат Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "стр", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
				Возврат Выборка.Индекс;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ИндексДома) Тогда
		Возврат Улица.Индекс;
	Иначе
		Возврат ИндексДома;
	КонецЕсли;
	
КонецФункции

// Функция определяет индекс по переданным региону, району, городу, населенному пункту,
// улице, дому и корпусу
//
// Параметры: 
//  НазваниеРегиона - название региона( с сокращением)
//  НазваниеРайона - название района( с сокращением)
//  НазваниеГорода - название города( с сокращением)
//  НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//  Улица - название улицы ( с сокращением)
//  НомерДома - номер дома, для которого необходимо получить индекс
//  НомерКорпуса - номер корпуса
//
// Возвращаемое значение:
//  Строка - шестизначный почтовый индекс
//
Функция ПолучитьИндекс(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, Знач НомерДома, Знач НомерКорпуса) Экспорт

	РодительИндекса = ПолучитьПустуюСтруктуруАдреса();
	Индекс = "";
	
	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1);
	Если Регион.Код > 0 Тогда
        РодительИндекса = Регион;
		Если НЕ ПустаяСтрока(Регион.Индекс) Тогда
			Индекс = Регион.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, РодительИндекса.Код);
	Если Район.Код > 0 Тогда
		РодительИндекса = Район;
		Если НЕ ПустаяСтрока(Район.Индекс) Тогда
			Индекс = Район.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, РодительИндекса.Код);
	Если Город.Код > 0 Тогда
		РодительИндекса = Город;
		Если НЕ ПустаяСтрока(Город.Индекс) Тогда
			Индекс = Город.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, РодительИндекса.Код);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительИндекса = НаселенныйПункт;
		Если НЕ ПустаяСтрока(НаселенныйПункт.Индекс) Тогда
			Индекс = НаселенныйПункт.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, РодительИндекса.Код);
	Если Улица.Код > 0 Тогда
		ИндексУлицы = ПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса);
		Если НЕ ПустаяСтрока(ИндексУлицы) Тогда
			Индекс = ИндексУлицы;
		КонецЕсли;
	КонецЕсли;

	Возврат Индекс;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С АДРЕСНЫМ КОДОМ

// Маска  СС РРР ГГГ ППП УУУУ ДДДД КККК АА
//
//        СС   - код региона
//        РРР  - код района
//        ГГГ  - код города
//        ППП  - код населенного пункта
//        УУУУ - код улицы
//        ДДДД - код дома
//        КККК - код квартиры
//        АА   - код актуальности

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаРегиона() Экспорт
	Возврат 100000000000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаРайона() Экспорт
	Возврат 100000000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаГорода() Экспорт
	Возврат 100000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаНасПункта() Экспорт
	Возврат 100000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаУлицы() Экспорт
	Возврат 10000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаДома() Экспорт
	Возврат 1000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаКвартиры() Экспорт
	Возврат 100;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ - СТАНДАРТНЫЕ ОБРАБОТЧИКИ ПРИ РАБОТЕ С АДРЕСНЫМ КЛАССИФИКАТОРОМ

#Если Клиент Тогда
	
// Процедура устанавливает последние значения тайпинга для адресныхЭлементов
Процедура УстановитьПоследниеЗначенияТайпинговДляАдресныхЭлементов(Регион, Район, Город, НаселенныйПункт, Улица,
							ПоследнееЗначениеРегион, ПоследнееЗначениеРайон, ПоследнееЗначениеГород, ПоследнееЗначениеНаселенныйПункт, ПоследнееЗначениеУлица) Экспорт
	
	ПоследнееЗначениеРегион          = Регион;
	ПоследнееЗначениеРайон           = Район;
	ПоследнееЗначениеГород           = Город;
	ПоследнееЗначениеНаселенныйПункт = НаселенныйПункт;
	ПоследнееЗначениеУлица           = Улица;
	
КонецПроцедуры // УстановитьПоследниеЗначенияТайпинговДляАдресныхЭлементов()

// Процедура модального редактирования адреса
Процедура РедактироватьМодальноЭлементАдреса(Элемент, ЭтаФорма = Неопределено, КлючФормы = Неопределено) Экспорт
	
	ОбработкаРедактированияАдреса = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактированияАдреса.мВозвратСтруктуры = Истина;	
	ОбработкаРедактированияАдреса.РедактироватьМодальноЭлементАдресаРазделенногоЗапятыми(Элемент, ЭтаФорма, КлючФормы);
	
КонецПроцедуры

// Стандартный обработчик "Начало выбора из списка" для выпадающего списка сокращений адресного элемента
Процедура АдресныйЭлементПриВыбореИзСпискаСокращений(ЭтаФорма, Элемент, СтандартнаяОбработка, ПолеРедактирования, Уровень) Экспорт
	
	СтандартнаяОбработка = Ложь;
	НазваниеТерриториальнойЕдиницы = СокрЛП(ОбрезатьСокращение(ПолеРедактирования));
	СписокСокращений = ПолучитьСписокСокращений(НазваниеТерриториальнойЕдиницы, Уровень);
	
	Если СписокСокращений <> Неопределено Тогда
		Сокращение = ЭтаФорма.ВыбратьИзСписка(СписокСокращений, Элемент);
		Если Сокращение <> Неопределено Тогда
			ПолеРедактирования = НазваниеТерриториальнойЕдиницы + " " + СокрЛП(Сокращение.Значение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // АдресныйЭлементПриВыбореИзСпискаСокращений()

// Процедура автоподбора текста для адресного элемента
Процедура АдресныйЭлементАвтоподборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента, СтруктураЭлемента) Экспорт
	
	МассивПоиска = Новый Массив();
	МассивПоиска.Добавить("Наименование");
	
	СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, "", УровеньЭлемента);
		
	СтруктураЭлемента = ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправленияПоРегистру(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураОграничений, 
												  "АдресныйКлассификатор", МассивПоиска, "Наименование");
	
КонецПроцедуры

// Функция определяет необходимый уровень для детализации имени адресного элемента
Функция ОпределитьУровеньДетализацииДляАдресногоЭлемента(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента)
	
	НачальныйУровеньАдреса = 1;
	
	Если ЗначениеЗаполнено(ПолеРегиона) И (УровеньЭлемента >= 2) Тогда
		НачальныйУровеньАдреса = 2;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеРайона) И (УровеньЭлемента >= 3) Тогда
		НачальныйУровеньАдреса = 3;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеГорода) И (УровеньЭлемента >= 4) Тогда
		НачальныйУровеньАдреса = 4;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеНаселенногоПункта) И (УровеньЭлемента >= 5) Тогда
		НачальныйУровеньАдреса = 5;	
	КонецЕсли;
	
	Возврат НачальныйУровеньАдреса;		
КонецФункции
											  
// Процедура обработки окончания ввода текста для адресного элемента
Процедура АдресныйЭлементОкончаниеВводаТекстаАдреса(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка,
													ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента,
													ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, ПоследнееЗначениеЭлементаПоискаПоСтроке, СтруктураЭлемента) Экспорт
	
	СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, "", УровеньЭлемента);
	НачальныйУровеньДетализацииАдреса = ОпределитьУровеньДетализацииДляАдресногоЭлемента(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента);
	
	СтруктураЭлемента = Новый Структура();
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправленияПоАдресномуКлассификатору(Элемент, Текст, Значение, СтандартнаяОбработка, 
		СтруктураОграничений, ЭтаФорма,  
		ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, ПоследнееЗначениеЭлементаПоискаПоСтроке, ,
		СтруктураЭлемента, НачальныйУровеньДетализацииАдреса, УровеньЭлемента - 1);
		
КонецПроцедуры
	
// Процедура обработки окончания ввода текста для Города
Процедура АдресныйЭлементОкончаниеВводаТекстаГорода(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка,
													ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, 
													ПоследнееЗначениеЭлементаПоискаПоСтроке, СтруктураЭлемента) Экспорт
	СтруктураЭлемента = Новый Структура();
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправленияПоГородуУлице(Элемент, Текст, Значение, СтандартнаяОбработка, 
		ЭтаФорма,  
		ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, ПоследнееЗначениеЭлементаПоискаПоСтроке, ,
		СтруктураЭлемента, 2, Истина);
		
КонецПроцедуры

// Процедура обработки подбора текста для Города
Функция АвтоПодборТекстаВЭлементеУправленияПоГороду(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт

	РезультатЗапроса = ВернутьРезультатЗапросаПоискаГорода(Текст, 2);
	МассивПолеВыбора = Новый Массив();
	МассивПолеВыбора.Добавить("Наименование");
	СтруктураНайденногоЭлемента = ПроцедурыПоискаПоСтроке.ПолучитьАвтоподборПоВыборке(РезультатЗапроса, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, МассивПолеВыбора);
	Возврат СтруктураНайденногоЭлемента;
	
КонецФункции

// Процедура обработки окончания ввода текста для Города
Процедура АдресныйЭлементОкончаниеВводаТекстаУлицы(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка,
													ПолеГорода, ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, 
													ПоследнееЗначениеЭлементаПоискаПоСтроке, СтруктураЭлемента) Экспорт
	СтруктураЭлемента = Новый Структура();
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправленияПоГородуУлице(Элемент, Текст, Значение, СтандартнаяОбработка, 
		ЭтаФорма,  
		ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, ПоследнееЗначениеЭлементаПоискаПоСтроке, ,
		СтруктураЭлемента, 6, Ложь, ПолеГорода);
		
КонецПроцедуры
	
// Процедура обработки подбора текста для Улице
Функция АвтоПодборТекстаВЭлементеУправленияПоУлице(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолеГорода) Экспорт

	РезультатЗапроса = ВернутьРезультатЗапросаПоискаУлицыГорода(ПолеГорода, Текст, 2);
	МассивПолеВыбора = Новый Массив();
	МассивПолеВыбора.Добавить("Наименование");
	СтруктураНайденногоЭлемента = ПроцедурыПоискаПоСтроке.ПолучитьАвтоподборПоВыборке(РезультатЗапроса, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, МассивПолеВыбора);
	Возврат СтруктураНайденногоЭлемента;
	
КонецФункции

// функция возвращает результат запроса для поиска города
Функция ВернутьРезультатЗапросаПоискаГорода(ИмяГорода, КоличествоСтрокВыборки) Экспорт
	
	ОграничениеПоИмени = ПроцедурыПоискаПоСтроке.СформироватьОграничениеПоПолюВхождениеВНачало("АдресныйКлассификатор.Наименование", Тип("Строка"));
	
	НачалоЗапроса = "ВЫБРАТЬ ПЕРВЫЕ " + Строка(КоличествоСтрокВыборки) + " 
	              |	АдресныйКлассификатор.Код,
	              |	АдресныйКлассификатор.КодРегионаВКоде,
	              |	АдресныйКлассификатор.Наименование,
	              |	АдресныйКлассификатор.Сокращение,
	              |	АдресныйКлассификатор.Индекс,
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	              |	АдресныйКлассификатор.КодРайонаВКоде,
	              |	АдресныйКлассификатор.КодГородаВКоде,
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
	              |	АдресныйКлассификатор.КодУлицыВКоде
	              |ИЗ
	              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	              |
	              |ГДЕ
				  | " + ОграничениеПоИмени + "
				  |	И "; 
				  
	ТекстЗапроса = НачалоЗапроса + " (АдресныйКлассификатор.ТипАдресногоЭлемента = 3 ) 
					| Объединить ВСЕ 
					| 
					|" + НачалоЗапроса + "  			  
	 			  	|	  (АдресныйКлассификатор.ТипАдресногоЭлемента = 1) 
				  	| 	И (АдресныйКлассификатор.КодРегионаВКоде В (77, 78)) 
				  	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекстАвтоПодбора", ИмяГорода + "%");
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Возврат РезультатЗапроса;
	
КонецФункции

// функция возвращает результат запроса для поиска улицы города
Функция ВернутьРезультатЗапросаПоискаУлицыГорода(ИмяГорода, ИмяУлицы, КоличествоСтрокВыборки) Экспорт
	
	МассивИменПоиска = Новый Массив();
	МассивИменПоиска.Добавить("Наименование");
	
	СтруктураОграничений = СформироватьСтруктуруОграниченийУлицыПоГороду(ИмяГорода);
	РезультатПодбора = ПроцедурыПоискаПоСтроке.ПолучитьРезультатЗапросаАвтоподбораДляРегистра(ИмяУлицы, СтруктураОграничений, "АдресныйКлассификатор", МассивИменПоиска, КоличествоСтрокВыборки);
	
	Возврат РезультатПодбора;

КонецФункции



#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ДРУГИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода = '20200101', ДляФизЛицаТолькоИнициалы = Истина, БанковскийСчет = Неопределено) Экспорт

	Сведения = Новый Структура("Представление, ПолноеНаименование, СокращенноеНаименование, НаименованиеДляПечатныхФорм, 
		|КодПоОКПО, ИНН, КПП, Телефоны, ЮридическийАдрес, Банк, БИК, КоррСчет, НомерСчета, АдресБанка, Свидетельство");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Сведения;
	КонецЕсли;

	Если БанковскийСчет = Неопределено ИЛИ БанковскийСчет.Пустая() Тогда
		ТекБанковскийСчет = ЮрФизЛицо.ОсновнойБанковскийСчет;
	Иначе
		ТекБанковскийСчет = БанковскийСчет;
	КонецЕсли;
	
	// Выберем основные сведения о контрагентеЮрФизЛицо.ОсновнойБанковскийСчет.БанкДляРасчетов.Пустая
	Если ТекБанковскийСчет.БанкДляРасчетов.Пустая() Тогда
		ИмяРеквизитаБанка = "Банк";
	Иначе
		ИмяРеквизитаБанка = "БанкДляРасчетов";
	КонецЕсли;
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
	Иначе
		Возврат Сведения;
	КонецЕсли;

	Запрос.УстановитьПараметр("ПарЮрФизЛицо",      ЮрФизЛицо);
	Запрос.УстановитьПараметр("ПарБанковскийСчет", ТекБанковскийСчет);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Представление КАК Наименование,
	|	Организации.НаименованиеПолное КАК ПолноеНаименование,
	|	Организации.ИНН,
	|	Организации.КПП,
	|	Организации.КодПоОКПО КАК КодПоОКПО,";
	
	Если ИмяСправочника = "Организации" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Организации.НаименованиеСокращенное КАК СокращенноеНаименование,
		|	ВЫБОР 
		|		КОГДА Организации.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
		|			ТОГДА Организации.НаименованиеСокращенное 
		|		ИНАЧЕ
		|			Организации.НаименованиеПолное
		|	КОНЕЦ КАК НаименованиеДляПечатныхФорм,
		|	Организации.СвидетельствоСерияНомер,
		|	Организации.СвидетельствоДатаВыдачи,";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	Организации.Представление КАК СокращенноеНаименование,
		|	Организации.НаименованиеПолное КАК НаименованиеДляПечатныхФорм,";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	""""                           КАК НомерСчета,
		|	""""                           КАК Банк,
		|	""""                           КАК БИК,
		|	""""                           КАК КоррСчет,
		|	""""                           КАК АдресБанка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации
		|
		|ГДЕ
		|	Организации.Ссылка = &ПарЮрФизЛицо";
	
	Иначе
	
		Запрос.Текст = Запрос.Текст + "
		|	БанковскиеСчета.НомерСчета                     КАК НомерСчета,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+"          КАК Банк,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Код      КАК БИК,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".КоррСчет КАК КоррСчет,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Адрес    КАК АдресБанка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации,
		|	Справочник.БанковскиеСчета    КАК БанковскиеСчета
		|
		|ГДЕ
		|	Организации.Ссылка       = &ПарЮрФизЛицо
		|	И БанковскиеСчета.Ссылка = &ПарБанковскийСчет";
		
	КонецЕсли;
	
	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();

	Если НЕ (ЮрФизЛицо.Метаданные().Реквизиты.Найти("ЮрФизЛицо") = Неопределено) Тогда

		Сведения.КодПоОКПО = Данные.КодПоОКПО;
		
		Если ЮрФизЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			
			Сведения.КПП = Данные.КПП;
			
		ИначеЕсли ИмяСправочника = "Организации" Тогда
			
			Сведения.Свидетельство = "свидетельство " + Данные.СвидетельствоСерияНомер + " от " + Формат(Данные.СвидетельствоДатаВыдачи, "ДФ=dd.MM.yyyy");
			
		КонецЕсли;

	ИначеЕсли ИмяСправочника = "Организации" Тогда
		
		Сведения.КодПоОКПО = Данные.КодПоОКПО;
		Сведения.КПП       = Данные.КПП;
		
	КонецЕсли;
	
	Сведения.Вставить("ПолноеНаименование",          СокрЛП(Данные.ПолноеНаименование));
	Сведения.Вставить("СокращенноеНаименование",     СокрЛП(Данные.СокращенноеНаименование));
	Сведения.Вставить("НаименованиеДляПечатныхФорм", СокрЛП(Данные.НаименованиеДляПечатныхФорм));
	Сведения.Вставить("Представление",               СокрЛП(Данные.Наименование));
	
	Сведения.Вставить("ИНН",              Данные.ИНН);
	Сведения.Вставить("Телефоны",         ПолучитьТелефонИзКонтактнойИнформации(ЮрФизЛицо));
	Сведения.Вставить("НомерСчета",       Данные.НомерСчета);
	Сведения.Вставить("Банк",             Данные.Банк);
	Сведения.Вставить("БИК",              Данные.БИК);
	Сведения.Вставить("АдресБанка",       Данные.АдресБанка);
	Сведения.Вставить("КоррСчет",         Данные.КоррСчет);
	Сведения.Вставить("ЮридическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Юридический"));
	Сведения.Вставить("ФактическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Фактический"));

	Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
		Сведения.ПолноеНаименование = Сведения.Представление;
	КонецЕсли;
	
	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//  ТипАдреса - тип контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного адреса
//
Функция ПолучитьАдресИзКонтактнойИнформации(Объект, ТипАдреса = "") Экспорт

	ОбъектКонтактнойИнформации = Объект;
	
	Если НЕ ЗначениеЗаполнено(ТипАдреса) Тогда
		Возврат "";
	КонецЕсли;

	Если ТипАдреса="Фактический" Тогда
		Начало = "Факт";
	ИначеЕсли ТипАдреса="Регистрации"
		  ИЛИ ТипАдреса="Юридический" Тогда
		Начало = "Юр";
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		
		Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			
			ОбъектКонтактнойИнформации = Объект.ИндивидуальныйПредприниматель;
			
			Окончание = "ФизЛица";
			
		Иначе
			
			Окончание = "Организации";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Окончание = "Контрагента";
		
	КонецЕсли;
	
	ВидАдреса = Справочники.ВидыКонтактнойИнформации[Начало+"Адрес"+Окончание];

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", ОбъектКонтактнойИнформации);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И
	|	КонтактнаяИнформация.Тип = &Тип
	|	И
	|	КонтактнаяИнформация.Вид = &Вид
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Представление;
	КонецЕсли;

КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Функция находит актуальное значение телефона в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного телефона
//
Функция ПолучитьТелефонИзКонтактнойИнформации(Объект) Экспорт

	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		Окончание = "Организации";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Окончание = "Контрагента";
	КонецЕсли;
	
	ВидТелефона = Справочники.ВидыКонтактнойИнформации["Телефон" + Окончание];

	Факс = "";
	
	Если Окончание = "Организации" Тогда
		
		ВидФакса = Справочники.ВидыКонтактнойИнформации["ФаксОрганизации"];
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Объект", Объект);
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
		Запрос.УстановитьПараметр("Вид"   , ВидФакса);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Вид = &Вид
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Факс = ", факс: " + РезультатЗапроса.Выгрузить()[0].Представление;
		КонецЕсли;
	КонецЕсли;


	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид"   , ВидТелефона);
	
	Если Окончание = "Организации" Тогда
		Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			Запрос.УстановитьПараметр("Объект", Объект.ИндивидуальныйПредприниматель);
			Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ТелефонСлужебныйФизЛица);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И
	|	КонтактнаяИнформация.Тип = &Тип
	|	И
	|	КонтактнаяИнформация.Вид = &Вид
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Представление + Факс;
	КонецЕсли;

КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

// Функция раскладывает номер телефона, по полям для записи в КИ объекта
//
// Параметры
//  
//  НомерТелефона - строка, номер телефона для преобразования
//
// Возвращаемое значение:
//   Список значений
//
Функция РазложитьТелефонПоПолям(НомерТелефона) Экспорт

	КодСтраны = "";
	НачалоКодаСтраны = Найти(НомерТелефона, "+");
	Если НачалоКодаСтраны > 0 Тогда
		Для а = (НачалоКодаСтраны + 1) По СтрДлина(НомерТелефона) Цикл
			Если Сред(НомерТелефона, а, 1) = " " Тогда
				Прервать;
			КонецЕсли; 
			КодСтраны = КодСтраны + Сред(НомерТелефона, а, 1);
		КонецЦикла; 
	КонецЕсли; 
	КодСтраны = СокрЛП(КодСтраны);

	КодГорода = "";
	Если СтрЧислоВхождений(НомерТелефона, "(") = 1 И СтрЧислоВхождений(НомерТелефона, ")") = 1 Тогда
		НачалоКодаГорода = Найти(НомерТелефона, "(");
		КонецКодаГорода = Найти(НомерТелефона, ")");
		Если КонецКодаГорода > НачалоКодаГорода Тогда
			КодГорода = Сред(НомерТелефона, (НачалоКодаГорода + 1), (КонецКодаГорода - НачалоКодаГорода - 1));
		КонецЕсли;
	КонецЕсли;
	КодГорода = СокрЛП(КодГорода);

	СамТелефон = НомерТелефона;
	Если НЕ ПустаяСтрока(КодСтраны) Тогда
		СамТелефон = СтрЗаменить(СамТелефон, ("+" + КодСтраны), "");
		СамТелефон = СокрЛП(СамТелефон);
	КонецЕсли; 
	Если НЕ ПустаяСтрока(КодГорода) Тогда
		СамТелефон = СтрЗаменить(СамТелефон, ("(" + КодГорода + ")"), "");
		СамТелефон = СокрЛП(СамТелефон);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КодСтраны) И Лев(СокрЛ(КодСтраны), 1) <> "+" Тогда
		КодСтраны = СокрЛП(КодСтраны);
		Пока Лев(КодСтраны, 1) = "0" Цикл
			КодСтраны = Сред(КодСтраны, 2);
		КонецЦикла;
		Если НЕ ПустаяСтрока(КодСтраны) Тогда
			КодСтраны = "+" + КодСтраны;
		КонецЕсли; 
	КонецЕсли; 
	
	СтруктураПолейТелефона = Новый Структура("КодСтраны,КодГорода,СамТелефон", КодСтраны, КодГорода, ПривестиНомерТелефонаКШаблону(СамТелефон));
	
	Возврат СтруктураПолейТелефона;

КонецФункции // ()

// Функция приводит телефонный номер к одному из указанных в настройке шаблонов
//
// Параметры
//  НомерТЛФ – строка, номер телефона, который надо преобразовывать
//
// Возвращаемое значение:
//   Приведенный номер – строка, номер, приведенный к одному из шаблонов
//
Функция ПривестиНомерТелефонаКШаблону(НомерТЛФ) Экспорт
	
	ТолькоЦифрыНомера = "";
	КоличествоЦифрНомера = 0;
	
	Для а=1 По СтрДлина(НомерТЛФ) Цикл
		Если СтрЧислоВхождений("1234567890",Сред(НомерТЛФ,а,1)) > 0 Тогда
			КоличествоЦифрНомера = КоличествоЦифрНомера + 1;
			ТолькоЦифрыНомера = ТолькоЦифрыНомера + Сред(НомерТЛФ,а,1);
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоЦифрНомера = 0 Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	СтруктураШаблонов = Константы.ШаблоныТелефонныхНомеров.Получить().Получить();
	Если ТипЗнч(СтруктураШаблонов) <> Тип("Соответствие") Тогда
		Возврат НомерТЛФ;
	КонецЕсли; 
	ПолученныйШаблон = СтруктураШаблонов.Получить(КоличествоЦифрНомера);
	
	Если ПолученныйШаблон = Неопределено Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	ПриведенныйНомер = "";
	НомерЦифры = 0;
	
	Для а=1 По СтрДлина(ПолученныйШаблон) Цикл
		Если Сред(ПолученныйШаблон,а,1) = "9" Тогда
			НомерЦифры = НомерЦифры + 1;
			ПриведенныйНомер = ПриведенныйНомер + Сред(ТолькоЦифрыНомера,НомерЦифры,1);
		Иначе
			ПриведенныйНомер = ПриведенныйНомер + Сред(ПолученныйШаблон,а,1);
		КонецЕсли;
	КонецЦикла; 

	Возврат ПриведенныйНомер;
	
КонецФункции // ПривестиКШаблону()


#Если Клиент Тогда

// Процедура по коду адресного элемента возвращает строковые представления его иерархии
Процедура ПолучитьПоКодуАдресногоЭлементаЕгоКомпоненты(КодАдресногоЭлемента, Регион, Район, Город, НаселенныйПункт, Улица, Дом) Экспорт
	
	Элемент = ПолучитьСтруктуруАдресногоЭлемента(КодАдресногоЭлемента);
	
	Если Элемент.ТипАдресногоЭлемента >= 6 Тогда
		Дом = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаДома(), 6);
	КонецЕсли;
	
	Если Элемент.ТипАдресногоЭлемента >= 5 Тогда
		Улица = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаУлицы(), 5);
	КонецЕсли;
	
	Если Элемент.ТипАдресногоЭлемента >= 4 Тогда
		НаселенныйПункт = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаНасПункта(), 4);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 3 Тогда
		Город = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаГорода(), 3);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 2 Тогда    
		Район = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаРайона(), 2);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 1 Тогда
		Регион = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаРегиона(), 1);
	КонецЕсли;	
	
КонецПроцедуры

// Стандартный обработчик "При Изменении" адресного элемента
Процедура АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, 
			ПоследнееЗначениеЭлементаТайпинга) Экспорт
	
	ПоследнееЗначениеЭлементаТайпинга = Элемент.Значение;
	Если ПустаяСтрока(Поле1) Тогда
		Поле1 = ПолучитьИндекс(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	КонецЕсли;
	
КонецПроцедуры

//  Процедура формирует строковое представление адресных элементов -
// "родителей" переданного в переданных параметрах
//
// Параметры:
//  Элемент - элемент справочника Адресный классфикатор, для которого надо получить родителей.
//  Регион - строка, куда будет помещено строковое представление "родительского" региона.
//  Район - строка, куда будет помещено строковое представление "родительского" района.
//  Город - строка, куда будет помещено строковое представление "родительского" города.
//  НаселенныйПункт - строка, куда будет помещено строковое представление "родительского" населенного пункта.
//
Процедура АдресныйЭлементЗаполнитьРодителей(Регион, Район, Город, НаселенныйПункт, Элемент) Экспорт

	Если (Элемент.ТипАдресногоЭлемента > 4) И НЕ ЗначениеЗаполнено(НаселенныйПункт) Тогда
		НаселенныйПункт = ПолучитьИмяАдресногоЭлементаПоКоду(Элемент.Код - Элемент.Код%МаскаНасПункта(), 4);
	КонецЕсли;

	Если (Элемент.ТипАдресногоЭлемента > 3) И НЕ ЗначениеЗаполнено(Город) Тогда
		Город = ПолучитьИмяАдресногоЭлементаПоКоду(Элемент.Код - Элемент.Код%МаскаГорода(), 3);
	КонецЕсли;

	Если (Элемент.ТипАдресногоЭлемента > 2) И НЕ ЗначениеЗаполнено(Район) Тогда    
		Район = ПолучитьИмяАдресногоЭлементаПоКоду(Элемент.Код - Элемент.Код%МаскаРайона(), 2);
	КонецЕсли;

	Если (Элемент.ТипАдресногоЭлемента > 1) И НЕ ЗначениеЗаполнено(Регион) Тогда
		Регион = ПолучитьИмяАдресногоЭлементаПоКоду(Элемент.Код - Элемент.Код%МаскаРегиона(), 1);
	КонецЕсли;
		
КонецПроцедуры

// Функция возвращает имя адресного элемента определенного уровня по коду
Функция ПолучитьИмяАдресногоЭлементаПоКоду(КодЭлемента, ТипАдресногоЭлемента) Экспорт
	
	ИмяАдресногоЭлемента = "";
	// сначала по коду определим уровень элемента, если не совпадет с требуемым, то к БД не обращаемся
	ТипЭлемента = ПолучитьТипАдресногоЭлемента(КодЭлемента);
	Если  ТипЭлемента <> ТипАдресногоЭлемента Тогда
		Возврат ИмяАдресногоЭлемента;
	КонецЕсли;
	
	АдресныйЭлемент = ПолучитьСтруктуруАдресногоЭлемента(КодЭлемента);
	Если АдресныйЭлемент.ТипАдресногоЭлемента = ТипАдресногоЭлемента Тогда
		ИмяАдресногоЭлемента = ПолучитьНазвание(АдресныйЭлемент);
	КонецЕсли;
	
	Возврат ИмяАдресногоЭлемента;
	
КонецФункции

//  Процедура проверяет правильность заполнения потомков определенного адресного элемента
//
// Параметры:
//  Элемент - элемент справочника Адресный классфикатор, для которого надо получить родителей.
//  Регион - строка, куда будет помещено строковое представление "родительского" региона.
//  Район - строка, куда будет помещено строковое представление "родительского" района.
//  Город - строка, куда будет помещено строковое представление "родительского" города.
//  НаселенныйПункт - строка, куда будет помещено строковое представление "родительского" населенного пункта.
//
Процедура АдресныйЭлементПроверитьПравильностьЗаполненияПотомков(Регион, Район, Город, НаселенныйПункт, Улица, Элемент) Экспорт
	
	КодЭлемента = Неопределено;
	
	ИмяРегиона = ?(Элемент.ТипАдресногоЭлемента = 1, Элемент.Наименование, Регион);
	ИмяРайона = ?(Элемент.ТипАдресногоЭлемента = 2, Элемент.Наименование, Район);
	ИмяГорода = ?(Элемент.ТипАдресногоЭлемента = 3, Элемент.Наименование, Город);
	ИмяНаселенногоПункта = ?(Элемент.ТипАдресногоЭлемента = 4, Элемент.Наименование, НаселенныйПункт);
	ИмяУлицы = ?(Элемент.ТипАдресногоЭлемента = 5, Элемент.Наименование, Улица);
	
	Если (Элемент.ТипАдресногоЭлемента < 2) И ЗначениеЗаполнено(ИмяРайона) Тогда
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ИмяРегиона, ИмяРайона, "", "", "", 2);
		СтруктураОграничений.Свойство("КодРайонаВКоде", КодЭлемента);
		Если (КодЭлемента = Неопределено) ИЛИ (КодЭлемента = -1) Тогда
			// очищаем элемент и все что ниже него по иерархии
			Район = "";	
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если (Элемент.ТипАдресногоЭлемента < 3) И ЗначениеЗаполнено(ИмяГорода) Тогда
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ИмяРегиона, ИмяРайона, ИмяГорода, "", "", 3);
		СтруктураОграничений.Свойство("КодГородаВКоде", КодЭлемента);
		Если (КодЭлемента = Неопределено) ИЛИ (КодЭлемента = -1)	Тогда
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	Если (Элемент.ТипАдресногоЭлемента < 4) И ЗначениеЗаполнено(ИмяНаселенногоПункта) Тогда
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ИмяРегиона, ИмяРайона, ИмяГорода, ИмяНаселенногоПункта, "", 4);
		СтруктураОграничений.Свойство("КодНаселенногоПунктаВКоде", КодЭлемента);
		Если (КодЭлемента = Неопределено) ИЛИ (КодЭлемента = -1) 	Тогда
			НаселенныйПункт = "";
			Улица = "";
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	Если (Элемент.ТипАдресногоЭлемента < 5) И ЗначениеЗаполнено(ИмяУлицы) Тогда
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ИмяРегиона, ИмяРайона, ИмяГорода, ИмяНаселенногоПункта, ИмяУлицы, 5);
		СтруктураОграничений.Свойство("КодУлицыВКоде", КодЭлемента);
		Если (КодЭлемента = Неопределено) ИЛИ (КодЭлемента = -1)	Тогда
			Улица = "";	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Функция по адресу возвращает структуру ограничений	
Функция ПолучитьСтруктуруОграниченийПоАдресу(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, ИмяУлицы, УровеньЭлемента) Экспорт 
	
	Если УровеньЭлемента > 1 Тогда
		
		КодРодителя = Неопределено;
		СтруктураОграничений = ВернутьСтруктуруОграниченийПоРодителю(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, ИмяУлицы, КодРодителя);
			
	Иначе
		СтруктураОграничений = Новый Структура();
	КонецЕсли;
	СтруктураОграничений.Вставить("ТипАдресногоЭлемента", УровеньЭлемента);
	
	Возврат СтруктураОграничений;
	
КонецФункции

// Функция возвращает строку адресного классификатора по значениям адресных элементов
Функция ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, 
											Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы)
											
	РодительскийЭлемент = Неопределено;
	КодРодителяРодителя = 0;

	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1);
	Если Регион.Код > 0 Тогда
		РодительскийЭлемент = Регион;
		КодРодителяРодителя = Регион.Код;
	КонецЕсли;
	
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, КодРодителяРодителя);
	Если Район.Код > 0 Тогда
		РодительскийЭлемент = Район;
		КодРодителяРодителя = Район.Код;
	КонецЕсли;
	
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, КодРодителяРодителя);
    Если Город.Код > 0 Тогда
		РодительскийЭлемент = Город;
		КодРодителяРодителя = Город.Код;
	КонецЕсли;
	
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, КодРодителяРодителя);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительскийЭлемент = НаселенныйПункт;
		КодРодителяРодителя = НаселенныйПункт.Код;
	КонецЕсли;
	
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, КодРодителяРодителя);
	Если Улица.Код > 0 Тогда
		РодительскийЭлемент = Улица;
		КодРодителяРодителя = Улица.Код;
	КонецЕсли;
	
	Если РодительскийЭлемент = Неопределено Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса()
	Иначе
		Возврат РодительскийЭлемент;
	КонецЕсли;
										
КонецФункции


// Функция возвращает структуру ограничений по переданным параметрам
// уже заполненным адресным полям
//
// Параметры: 
// Параметры: 
//  НазваниеРегиона - название региона( с сокращением)
//  НазваниеРайона - название района( с сокращением)
//  НазваниеГорода - название города( с сокращением)
//  НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//
Функция ВернутьСтруктуруОграниченийПоРодителю(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, 
											Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, КодРодителя) Экспорт
	
	СтруктураОграничений = Новый Структура();
	РодительскийЭлемент = ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(НазваниеРегиона, НазваниеРайона, НазваниеГорода, 
											НазваниеНаселенногоПункта, НазваниеУлицы);
	
	КодРодителя = РодительскийЭлемент.Код;
	
	// по коду определяем уровень элемента
	ТипЭлемента = ПолучитьТипАдресногоЭлемента(КодРодителя);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодРегионаВКоде", Цел(КодРодителя / МаскаРегиона()), ТипЭлемента, 1);
    ДобавитьКодВСтруктуру(СтруктураОграничений, "КодРайонаВКоде", Цел(КодРодителя / МаскаРайона()) % 1000, ТипЭлемента, 2);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодГородаВКоде", Цел(КодРодителя / МаскаГорода()) % 1000, ТипЭлемента, 3);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодНаселенногоПунктаВКоде", Цел(КодРодителя / МаскаНасПункта()) % 1000, ТипЭлемента, 4);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодУлицыВКоде", Цел(КодРодителя / МаскаУлицы())% 10000, ТипЭлемента, 5);
	
	Возврат СтруктураОграничений;
	
КонецФункции

// Процедура добавляет не нулевое значение кода в структуру
Процедура ДобавитьКодВСтруктуру(ДанныеСтруктуры, ИмяЭлемента, КодЭлемента, УровеньРодителя, УровеньЭлемента)
	
	Если (КодЭлемента <> 0) ИЛИ (УровеньРодителя >= УровеньЭлемента) Тогда
		ДанныеСтруктуры.Вставить(ИмяЭлемента, КодЭлемента);
    КонецЕсли;
	
КонецПроцедуры


// Процедура обрабатывает событие ПередНачаломДобавления в форме списка
// справочника КонтактныеЛицаКонтрагентов
//
Процедура ПередНачаломДобавленияКонтактногоЛица(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, СправочникСписок, ЭтаФорма) Экспорт

	Если НЕ ЭтоГруппа
	   И НЕ Копирование
	   И ((СправочникСписок.Отбор.ОбъектВладелец.Использование И СправочникСписок.Отбор.ОбъектВладелец.ВидСравнения = ВидСравнения.Равно)
	 ИЛИ (СправочникСписок.Отбор.ВидКонтактногоЛица.Использование И СправочникСписок.Отбор.ВидКонтактногоЛица.ВидСравнения = ВидСравнения.Равно)) Тогда

		Отказ = Истина;

		НовыйОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
		Если СправочникСписок.Отбор.ОбъектВладелец.Использование Тогда
			НовыйОбъект.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
			НовыйОбъект.ОбъектВладелец     = СправочникСписок.Отбор.ОбъектВладелец.Значение;

		Иначе
			НовыйОбъект.ВидКонтактногоЛица = СправочникСписок.Отбор.ВидКонтактногоЛица.Значение;

		КонецЕсли;

		НовыйОбъект.ПолучитьФорму(, ЭтаФорма).Открыть();

	КонецЕсли;

КонецПроцедуры

// Стандартный обработчик "Обработка выбора" адресного элемента
Процедура АдресныйЭлементОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, АдреснаяЗапись) Экспорт
	
	СтандартнаяОбработка = Ложь;
	АдреснаяЗапись = ПолучитьСтруктуруАдресногоЭлемента(ВыбранноеЗначение.Код);
	Элемент.Значение = СокрЛП(АдреснаяЗапись.Наименование) + " " + СокрЛП(АдреснаяЗапись.Сокращение);
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА ХРАНЕНИЯ КОНТАКНОЙ ИНФОРМАЦИИ

// Процедура открывает форму справочника ВидыКонтактнойИнформации для выбора.
//
// Параметры:
//  РежимВыбора - булево, задает режим выбора для открываемой формы.
//  ВладелецФормы - задает владельца для открываемой формы.
//  ЗначениеОтбораПоТипу - задает значение отбора по типу конт.инф.
//  ЗначениеОтбораПоВидуОбъектаКИ - задает значение отбора по виду объекта конт.инф.
Процедура ОткрытьФормуВыбораВидаКИ(РежимВыбора, ВладелецФормы, ЗначениеОтбораПоТипу = Неопределено,
                                     ЗначениеОтбораПоВидуОбъектаКИ = Неопределено) Экспорт

	ВыбФорма = Справочники.ВидыКонтактнойИнформации.ПолучитьФорму("ФормаВыбора", ВладелецФормы);
	ВыбФорма.РежимВыбора = РежимВыбора;
	
	Если ЗначениеОтбораПоТипу <> Неопределено Тогда
		ВыбФорма.Отбор.Тип.Значение = ЗначениеОтбораПоТипу;
		ВыбФорма.Отбор.Тип.Использование = Истина;
		ВыбФорма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Тип.Доступность = Ложь;
	КонецЕсли; 
	
	Если ЗначениеОтбораПоВидуОбъектаКИ <> Неопределено Тогда
		ВыбФорма.Отбор.ВидОбъектаКонтактнойИнформации.Значение = ЗначениеОтбораПоВидуОбъектаКИ;
		ВыбФорма.Отбор.ВидОбъектаКонтактнойИнформации.Использование = Истина;
		ВыбФорма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбъектаКонтактнойИнформации.Доступность = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецФормы.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")
	   И ЗначениеЗаполнено(ВладелецФормы.Значение) Тогда
		ВыбФорма.ПараметрТекущаяСтрока = ВладелецФормы.Значение;
	КонецЕсли; 
	
	ВыбФорма.Открыть();
	
КонецПроцедуры



// Функция возвращает представление адреса за пределами РФ без Страны
Функция ПолучитьПредставлениеАдресаЗаПределамиРФБезСтраны(Страна, Представление) Экспорт
	
	Если ЗначениеЗаполнено(Страна) И Страна <> Справочники.КлассификаторСтранМира.Россия.Наименование Тогда
		
		ИмяСтраны = Страна + ", ";
		ПозицияСтраныВАдресе = Найти(Представление, ИмяСтраны);
		// Если только страна в начале, то удаляем ее, иначе не трогаем
		Если ПозицияСтраныВАдресе = 1 Тогда
			ТекущееПредставлениеАдреса = Сред(Представление, СтрДлина(ИмяСтраны) + 1);	
		КонецЕсли;
		
	Иначе
		ТекущееПредставлениеАдреса = Представление;
	КонецЕсли;

	Возврат ТекущееПредставлениеАдреса;
	
КонецФункции

// Процедура формирует представление для Адреса за пределами РФ
Функция СформироватьПредставлениеАдресаЗаПределамиРФ(Страна, Представление) Экспорт

	ТекущееПредставлениеАдреса = Представление;	
	
	Если ЗначениеЗаполнено(Страна) И Страна <> Справочники.КлассификаторСтранМира.Россия.Наименование Тогда
			
		ПозицияСтраныВАдресе = Найти(Представление, Страна);
		// добавляем страну в самое начало представления, если ее там еще нет
		Если ПозицияСтраныВАдресе <> 1 Тогда
			ТекущееПредставлениеАдреса = Страна + ", " + Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекущееПредставлениеАдреса;
	
КонецФункции

// Функция возвращает структуру ограничений улицы по городу
Функция СформироватьСтруктуруОграниченийУлицыПоГороду(ИмяГорода) Экспорт
	
	ОбрезанноеИмяГорода = ВРег(ОбрезатьСокращение(ИмяГорода));
	
	Если ОбрезанноеИмяГорода = "МОСКВА" ИЛИ ОбрезанноеИмяГорода = "САНКТ-ПЕТЕРБУРГ" Тогда
		//это вот и есть исключение
		СтруктураОграничений = Новый Структура();
		
		КодРегионаВКоде = ?(ОбрезанноеИмяГорода = "МОСКВА", 77, 78);
		СтруктураОграничений.Вставить("КодРегионаВКоде", КодРегионаВКоде);
		СтруктураОграничений.Вставить("КодНаселенногоПунктаВКоде", 0);
		СтруктураОграничений.Вставить("ТипАдресногоЭлемента", 5);
		
	Иначе
		// ищем только для города
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу("", "", ОбрезанноеИмяГорода, "", "", 5);
		СтруктураОграничений.Вставить("КодНаселенногоПунктаВКоде", 0);
		
	КонецЕсли;

	Возврат СтруктураОграничений;
	
КонецФункции

#КонецЕсли

// Функция создает структуру по строке выборки
Функция СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, СтрокаВыборки)
	
	РезультирующаяСтруктура = Новый Структура;
	ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, РезультирующаяСтруктура);
	Возврат РезультирующаяСтруктура; 
	
КонецФункции



#Если Клиент Тогда


////////////////////////////////////////////////////////////////////////////////
// РЕДАКТИРОВАНИЕ КОНТАКТНОЙ ИНФОРМАЦИИ В ДИАЛОГЕ

// Редактировать прочую контактную информацию
Процедура РедактироватьПрочуюКИ(СтруктураДляРедактирования, ЭтаФорма) Экспорт

	Форма = ПолучитьОбщуюФорму("РедактированиеПрочейКИ");
	Форма.СтруктураДляРедактирования = СтруктураДляРедактирования;
	Форма.ВладелецФормы  = ЭтаФорма;
	Форма.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
	Форма.ОткрытьМодально();
	
	ЗаполнитьЗначенияКИ(СтруктураДляРедактирования);

КонецПроцедуры

// Редактировать контактную информацию в диалоге
Функция РедактироватьКонтактнуюИнформациюВДиалоге(Запись, НаборЗаписей, ФормаВладелец) Экспорт

	Если Запись = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактирования.Вид                     = Запись.Вид;
	ОбработкаРедактирования.Тип                     = Запись.Тип;
	ОбработкаРедактирования.ДоступностьОбъекта      = Ложь;
	ОбработкаРедактирования.ОтключитьКнопкуЗаписать = Истина;
	ОбработкаРедактирования.ТолькоПросмотрФормы     = ФормаВладелец.ТолькоПросмотр;
	
	Если Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		
		СоответствиеПредставлений = Новый Соответствие;
		
		Для Каждого ЗаписьИзНабора Из НаборЗаписей Цикл
			Если ЗаписьИзНабора.Тип = Запись.Тип И Не ПустаяСтрока(ЗаписьИзНабора.Представление) Тогда
				Если СоответствиеПредставлений.Получить(ЗаписьИзНабора.Представление) = Неопределено Тогда
					ОбработкаРедактирования.АдресаДляКопирования.Добавить(ЗаписьИзНабора, ЗаписьИзНабора.Представление);
					СоответствиеПредставлений.Вставить(ЗаписьИзНабора.Представление, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбработкаРедактирования.РедактироватьЗапись(Запись, , ФормаВладелец, , Истина);

КонецФункции // РедактироватьКонтактнуюИнформациюВДиалоге()

// Открыть форму настройки видов контактной информации по объекту
Процедура ОткрытьФормуНастройкиВидовКИ(ВидОбъектаКИ) Экспорт

	Форма = Справочники.ВидыКонтактнойИнформации.ПолучитьФормуСписка("ФормаСписка", , ВидОбъектаКИ);
	Форма.СправочникСписок.Отбор.ВидОбъектаКонтактнойИнформации.Установить(ВидОбъектаКИ);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбъектаКонтактнойИнформации.Доступность = Ложь;
	Форма.ЭлементыФормы.СправочникСписок.Колонки.ВидОбъектаКонтактнойИнформации.Видимость = Ложь;
	Форма.СправочникСписок.Порядок.Установить("Порядок,Наименование");
	Форма.Открыть();

КонецПроцедуры

// Отобразить надписи, настроить вид, создать доп. кнопки для элементов связанных с вводом КИ
Процедура ОтобразитьЭлементыВводаКИ(СтруктураДляРедактирования, ТолькоПросмотр) Экспорт

	СтруктураДляРедактирования.ДопКнопки.Очистить();
	
	// Настроим основные поля ввода, кнопки и надписи связанные с контактной информацией
	ВсегоВидовКИ    = СтруктураДляРедактирования.Настройки.Количество();
	текНомерВидаКИ = 0;
	Для Каждого СтрПоля Из СтруктураДляРедактирования.Элементы Цикл
		
		// определим какой вид КИ будет отображаться в поле ввода
		СтрВидаКИ = Неопределено;
		Пока текНомерВидаКИ < ВсегоВидовКИ Цикл
			Стр = СтруктураДляРедактирования.Настройки.Получить(текНомерВидаКИ);
			Если Стр.Вид <> СтруктураДляРедактирования.ВидПрочейКИ Тогда
				СтрВидаКИ = Стр;
				Прервать;
			КонецЕсли;
			
			текНомерВидаКИ = текНомерВидаКИ + 1;
		КонецЦикла;
		текНомерВидаКИ = текНомерВидаКИ + 1;
		СтрПоля.СтрНастройки = СтрВидаКИ;
		
		// если не нашелся вид КИ то скроем элементы
		Если СтрВидаКИ = Неопределено Тогда
			Если СтрПоля.Кнопка <> Неопределено Тогда
				СтрПоля.Кнопка.Видимость    = Ложь;
			КонецЕсли;
			СтрПоля.ПолеВвода.Видимость = Ложь;
			СтрПоля.Надпись.Видимость   = Ложь;
			Продолжить;
		КонецЕсли;
		
		СтрПоля.Тип = СтрВидаКИ.Тип;
		
		// получим прочие виды такого же типа
		масВидов = ПолучитьПрочиеВидыТакогоЖеТипа(СтруктураДляРедактирования.Настройки, СтрВидаКИ.Тип, СтрВидаКИ.Вид);
		
		// настроим поле ввода
		Поле = СтрПоля.ПолеВвода;
		Поле.Видимость            = Истина;
		Поле.КнопкаВыбора         = ЕстьКнопкаВыбораКИ(СтрВидаКИ.Тип);
		Поле.КнопкаОткрытия       = ЕстьКнопкаОткрытияКИ(СтрВидаКИ.Тип);
		Поле.РедактированиеТекста = Не СтрВидаКИ.РедактированиеВДиалоге;
		Поле.ЦветФонаПоля         = ?(СтрВидаКИ.РедактированиеВДиалоге, Новый Цвет(255, 251, 245), ЦветаСтиля.ЦветФонаПоля);
		
		// картинка для вида КИ
		Картинка = ПолучитьКартинкуПоТипу(СтрВидаКИ.Тип, СтрВидаКИ.НомерКартинки);
		
		ОтображатьКнопки = СтруктураДляРедактирования.ОтображатьКнопкиВместоНадписей И СтруктураДляРедактирования.ЕстьПолныеПрава;
		
		// настроим надпись
		Надпись = СтрПоля.Надпись;
		Если ОтображатьКнопки Тогда
			Надпись.Видимость = Ложь;
		Иначе
			Надпись.Видимость = Истина;
			Надпись.Картинка  = Картинка;
			Надпись.Заголовок = "  " + СтрВидаКИ.Наименование + ":";
		КонецЕсли;
		
		// настроим кнопку
		Кнопка = СтрПоля.Кнопка;
		Если Кнопка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Кнопка.Кнопки.Очистить();
		Если Не ОтображатьКнопки Тогда
			Кнопка.Видимость = Ложь;
			Продолжить;
		КонецЕсли;
		
		Кнопка.Видимость = Истина;
		Кнопка.Картинка  = Картинка;
		Кнопка.Заголовок = СтрВидаКИ.Наименование;
		
		// заполним дополнительные кнопки
		Для Каждого СтрВида Из СтруктураДляРедактирования.Настройки Цикл
			Если ТипЗнч(СтрВида.Вид) = Тип("Строка") Тогда
				Продолжить;
			ИначеЕсли СтрВида.Вид = СтруктураДляРедактирования.ВидПрочейКИ Тогда
				Продолжить;
			ИначеЕсли СтрВида.Вид = СтрВидаКИ.Вид Тогда
				Продолжить;
			КонецЕсли;
			
			Картинка = ПолучитьКартинкуПоТипу(СтрВида.Тип, СтрВида.НомерКартинки);
			ДобавитьДополнительнуюКнопку(Кнопка.Кнопки, СтруктураДляРедактирования, Кнопка, СтрВида.Вид, СтрВидаКИ.Вид, СтрВида.Наименование, СтруктураДляРедактирования.ОбработчикДляДопКнопок, Картинка, 1);
		КонецЦикла;
		
		// Разделитель
		Кнопка.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
		
		// Кнопка Добавить
		ДобавитьДополнительнуюКнопку(Кнопка.Кнопки, СтруктураДляРедактирования, Кнопка, Неопределено, СтрВидаКИ.Вид, "Добавить новый вид контактной информации", СтруктураДляРедактирования.ОбработчикДляДопКнопок, БиблиотекаКартинок.КИДобавить, 2);
		
		// Кнопка Скопировать
		Если масВидов.Количество() > 0 И Не ТолькоПросмотр Тогда
			ДобавитьДополнительнуюКнопку(Кнопка.Кнопки, СтруктураДляРедактирования, Кнопка, Неопределено, СтрВидаКИ.Вид, "Скопировать из ...", СтруктураДляРедактирования.ОбработчикДляДопКнопок, Картинка, 3);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДополнительнуюКнопку(Кнопки, СтруктураДляРедактирования, КнопкаВладелец, Вид, ВидВладельца, ТекстКнопки, Обработчик, Картинка, ТипДействия)

	новКнопка = Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Действие, ТекстКнопки, Обработчик);
	Если Картинка <> Неопределено Тогда
		новКнопка.Картинка = Картинка;
	КонецЕсли;
	
	новСтр = СтруктураДляРедактирования.ДопКнопки.Добавить();
	новСтр.Кнопка         = новКнопка;
	новСтр.КнопкаВладелец = КнопкаВладелец;
	новСтр.Вид            = Вид;
	новСтр.ВидВладельца   = ВидВладельца;
	новСтр.ТипДействия    = ТипДействия;

КонецПроцедуры

// Заполнить значения полей ввода на основной форме и установить картинку в надписи "Прочая КИ"
Процедура ЗаполнитьЗначенияКИ(СтруктураДляРедактирования) Экспорт
	// очистим сначала все поля ввода
	Для Каждого Стр из СтруктураДляРедактирования.Элементы Цикл
		Стр.ПолеВвода.Значение = "";
	КонецЦикла;
	
	Если СтруктураДляРедактирования.ПолеВводаПрочейКИ <> Неопределено Тогда
		СтруктураДляРедактирования.ПолеВводаПрочейКИ.Значение = "";
	КонецЕсли;
	
	КолвоПрочейКИ = 0;
	Для Каждого Запись Из СтруктураДляРедактирования.НаборКонтактнойИнформации Цикл
		Если Не ПустаяСтрока(Запись.Представление) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Вид", Запись.Вид);
			Отбор.Вставить("Тип", Запись.Тип);
			Строки = СтруктураДляРедактирования.Настройки.НайтиСтроки(Отбор);
			Если Строки.Количество()=0 Тогда
				КолвоПрочейКИ = КолвоПрочейКИ + 1;
				Продолжить;
			КонецЕсли;
			
			Стр = СтруктураДляРедактирования.Элементы.Найти(Строки[0], "СтрНастройки");
			Если Стр<>Неопределено Тогда
				Стр.ПолеВвода.Значение = Запись.Представление;
			Иначе
				Если Запись.Вид = СтруктураДляРедактирования.ВидПрочейКИ Тогда
					Если СтруктураДляРедактирования.ПолеВводаПрочейКИ <> Неопределено Тогда
						СтруктураДляРедактирования.ПолеВводаПрочейКИ.Значение = Запись.Представление;
					КонецЕсли;
				Иначе
					КолвоПрочейКИ = КолвоПрочейКИ + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураДляРедактирования.НадписьПрочаяКИ <> Неопределено Тогда
		СтруктураДляРедактирования.НадписьПрочаяКИ.Заголовок = "Прочая контактная информация (" + ?(КолвоПрочейКИ = 0, "пусто", КолвоПрочейКИ) + ")";
	КонецЕсли;

КонецПроцедуры

// Проверить необходимость скопировать введенные данные в другой вид КИ
Процедура ПроверитьНеобходимостьКопированияКИ(Запись, СтруктураДляРедактирования, ТабЗнКИ) Экспорт

	Если (Запись = Неопределено) ИЛИ ПустаяСтрока(Запись.Представление) Тогда
		Возврат;
	КонецЕсли;
	
	// найдем виды в которые нужно скопировать
	СтрЗамены = СтруктураДляРедактирования.Замены.Найти(Запись.Вид, "Вид1");
	Если СтрЗамены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// найдем запись которую надо заменять
	ЗаписьЗаменяемого = Неопределено;
	Для Каждого ЗаписьПоиска Из СтруктураДляРедактирования.НаборКонтактнойИнформации Цикл
		Если ЗаписьПоиска.Вид = СтрЗамены.Вид2 Тогда
			ЗаписьЗаменяемого = ЗаписьПоиска;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если (ЗаписьЗаменяемого = Неопределено) ИЛИ (Запись.Представление = ЗаписьЗаменяемого.Представление) ИЛИ Не ПустаяСтрока(ЗаписьЗаменяемого.Представление) Тогда
		Возврат;
	КонецЕсли;
	
	// спросим, нужно ли заменять
	//СтрВопроса = "Скопировать """ + Запись.Вид + """ в """ + СтрЗамены.Вид2 + """?";
	СтрВопроса = "Изменился " + Запись.Вид.Наименование + ".
	|Автоматически изменить " + СтрЗамены.Вид2.Наименование + "?";
	
	Если Вопрос(СтрВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	// запишем новые данные
	СкопироватьДанныеКИИзЗаписиВДругую(Запись, ЗаписьЗаменяемого);
	
	// заменим значение на основной форме
	СтрНастройки = СтруктураДляРедактирования.Настройки.Найти(СтрЗамены.Вид2, "Вид");
	Если СтрНастройки <> Неопределено Тогда
		СтрЭл = СтруктураДляРедактирования.Элементы.Найти(СтрНастройки, "СтрНастройки");
		Если СтрЭл <> Неопределено Тогда
			СтрЭл.ПолеВвода.Значение = Запись.Представление;
		КонецЕсли;
	КонецЕсли;
	
	// проверим, нужно ли менять в таблице значений
	Если ТабЗнКИ <> Неопределено Тогда
		СтрКИ = ТабЗнКИ.Найти(СтрЗамены.Вид2, "Вид");
		Если СтрКИ <> Неопределено Тогда
			СтрКИ.Представление = Запись.Представление;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

// Нажатие на одну из дополнительных кнопок
Процедура НажатиеДопКнопкиКИ(СтруктураДляРедактирования, Кнопка, ЭтаФорма) Экспорт

	СтрДопКнопки = СтруктураДляРедактирования.ДопКнопки.Найти(Кнопка, "Кнопка");
	Если СтрДопКнопки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КнопкаВладелец = СтрДопКнопки.КнопкаВладелец;
	СтрКнопки = СтруктураДляРедактирования.Элементы.Найти(КнопкаВладелец, "Кнопка");
	Если СтрКнопки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Вид = СтрДопКнопки.Вид;
	ВидВладельца = СтрДопКнопки.ВидВладельца;
	Тип = СтрКнопки.Тип;
	
	Если СтрДопКнопки.ТипДействия = 1 Тогда
		// замена позиции
		Стр1 = СтруктураДляРедактирования.Настройки.Найти(Вид, "Вид");
		Стр2 = СтруктураДляРедактирования.Настройки.Найти(ВидВладельца, "Вид");
		Если (Стр1<>Неопределено) И (Стр2<>Неопределено) Тогда
			Попытка
			
				НачатьТранзакцию();
				
				Объект1 = Вид.ПолучитьОбъект();
				Объект2 = ВидВладельца.ПолучитьОбъект();
				
				Порядок = Объект1.Порядок;
				Объект1.Порядок = Объект2.Порядок;
				Объект2.Порядок = Порядок;
				Объект1.Записать();
				Объект2.Записать();
				
				ЗафиксироватьТранзакцию();
			
			Исключение
				
				ОтменитьТранзакцию();
				Сообщить(ОписаниеОшибки());
				Возврат;
				
			КонецПопытки;
			
			СтруктураДляРедактирования.Настройки = ПолучитьНастройкиОтображенияКонтактнойИнформации(СтруктураДляРедактирования.ВидОбъекта);
			ОтобразитьЭлементыВводаКИ(СтруктураДляРедактирования, ЭтаФорма.ТолькоПросмотр);
			ЗаполнитьЗначенияКИ(СтруктураДляРедактирования);
		КонецЕсли;
		
	ИначеЕсли СтрДопКнопки.ТипДействия = 2 Тогда
		// создание нового вида
		Форма = Обработки.РедактированиеКонтактнойИнформации.ПолучитьФорму("ФормаСозданияНовогоВида");
		Форма.ВидОбъекта = СтруктураДляРедактирования.ВидОбъекта;
		Форма.ЗаменяемыйВид = ВидВладельца;
		Результат = Форма.ОткрытьМодально();
		Если ТипЗнч(Результат) <> Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			Возврат;
		КонецЕсли;
		
		// добавим запись в набор записей регистра сведений
		Запись = СтруктураДляРедактирования.НаборКонтактнойИнформации.Добавить();
		Запись.Тип = Результат.Тип;
		Запись.Вид = Результат;
		
		СтруктураДляРедактирования.Настройки = ПолучитьНастройкиОтображенияКонтактнойИнформации(СтруктураДляРедактирования.ВидОбъекта);
		
		ОтобразитьЭлементыВводаКИ(СтруктураДляРедактирования, ЭтаФорма.ТолькоПросмотр);
		ЗаполнитьЗначенияКИ(СтруктураДляРедактирования);
		
		// откроем форму редактирования
		КнопкаКИНажатие(СтруктураДляРедактирования, КнопкаВладелец, ЭтаФорма);
		
	ИначеЕсли СтрДопКнопки.ТипДействия = 3 Тогда
		
		// копирование значения
		ВыполнитьКопированиеКИВДиалоге(СтруктураДляРедактирования, ЭтаФорма, Тип, ВидВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// При изменении значения в поле ввода
Процедура ПолеВводаКИПриИзменении(СтруктураДляРедактирования, Элемент) Экспорт

	СтрокаЭлемента = СтруктураДляРедактирования.Элементы.Найти(Элемент, "ПолеВвода");
	Если СтрокаЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запись = ПолучитьЗаписьВНаборе(СтруктураДляРедактирования.НаборКонтактнойИнформации, СтрокаЭлемента.СтрНастройки.Вид, СтрокаЭлемента.Тип);
	Если Запись = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоляВЗаписиПоПредставлению(Запись, Элемент.Значение);
	ПроверитьНеобходимостьКопированияКИ(Запись, СтруктураДляРедактирования, Неопределено);

КонецПроцедуры

// При начале выбора в поле ввода
Процедура ПолеВводаКИНачалоВыбора(СтруктураДляРедактирования, Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	СтрЭл = СтруктураДляРедактирования.Элементы.Найти(Элемент, "ПолеВвода,Кнопка");
	Если СтрЭл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запись = ПолучитьЗаписьВНаборе(СтруктураДляРедактирования.НаборКонтактнойИнформации, СтрЭл.СтрНастройки.Вид, СтрЭл.Тип);
	
	СтруктураДляРедактирования.ОткрытаФормаРедактирования = Истина;
	
	РедактироватьКонтактнуюИнформациюВДиалоге(Запись, СтруктураДляРедактирования.НаборКонтактнойИнформации, ЭтаФорма);
	
	СтруктураДляРедактирования.ТекущийЭлемент = Элемент;
	СтруктураДляРедактирования.ОткрытаФормаРедактирования = Ложь;
	ЭтаФорма.ПодключитьОбработчикОжидания("ПроверитьСменуТекущегоЭлементаДляКИ", 0.1, Истина);
	
	ЗаполнитьЗначенияКИ(СтруктураДляРедактирования);
	ПроверитьНеобходимостьКопированияКИ(Запись, СтруктураДляРедактирования, Неопределено);
	
КонецПроцедуры

// При нажатии кнопки открытие в поле ввода
Процедура ПолеВводаКИОткрытие(СтруктураДляРедактирования, Элемент, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// При очистке в поле ввода
Процедура ПолеВводаКИОчистка(СтруктураДляРедактирования, Элемент, СтандартнаяОбработка) Экспорт
	
	// если не изменить текущий элемент, то после очистки адреса будет открываться форма
	СтруктураДляРедактирования.ТекущийЭлемент = Элемент;
	
КонецПроцедуры

// Нажатие на кнопку контактной информации
Процедура КнопкаКИНажатие(СтруктураДляРедактирования, Элемент, ЭтаФорма) Экспорт
	
	ПолеВводаКИНачалоВыбора(СтруктураДляРедактирования, Элемент, Ложь, ЭтаФорма);
	
КонецПроцедуры

// При изменении значения в поле ввода прочей КИ
Процедура ПолеВводаПрочаяКИПриИзменении(СтруктураДляРедактирования, Элемент) Экспорт

	Запись = ПолучитьЗаписьВНаборе(СтруктураДляРедактирования.НаборКонтактнойИнформации, СтруктураДляРедактирования.ВидПрочейКИ, Перечисления.ТипыКонтактнойИнформации.Другое);
	Если Запись <> Неопределено Тогда
		Запись.Представление = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры

Процедура КонтекстноеМенюПолейВводаПрочейКИСкопироватьИз(СтруктураДляРедактирования, ЭтаФорма) Экспорт

	ПолеВвода = ЭтаФорма.ТекущийЭлемент;
	СтрЭлемента = СтруктураДляРедактирования.Элементы.Найти(ПолеВвода, "ПолеВвода");
	
	Если СтрЭлемента <> Неопределено Тогда
		ВыполнитьКопированиеКИВДиалоге(СтруктураДляРедактирования, ЭтаФорма, СтрЭлемента.СтрНастройки.Тип, СтрЭлемента.СтрНастройки.Вид);
	КонецЕсли;

КонецПроцедуры

Процедура РедактированиеНастроекОтображенияКИНажатие(СтруктураДляРедактирования, ЭтаФорма, КоличествоПолейВводаНаФорме) Экспорт

	ВидОбъекта = СтруктураДляРедактирования.ВидОбъекта;
	Форма = Справочники.ВидыКонтактнойИнформации.ПолучитьФорму("ФормаСписка",,ВидОбъекта);
	Форма.СправочникСписок.Отбор.ВидОбъектаКонтактнойИнформации.Установить(ВидОбъекта);
	Форма.СправочникСписок.Порядок.Установить("Порядок");
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбъектаКонтактнойИнформации.Доступность = Ложь;
	Форма.ЭлементыФормы.СправочникСписок.Колонки.ВидОбъектаКонтактнойИнформации.Видимость = Ложь;
	Форма.ЭлементыФормы.СправочникСписок.Колонки.Код.Видимость = Ложь;
	Форма.ОткрытьМодально();
	
	СтруктураДляРедактирования.Настройки = ПолучитьНастройкиОтображенияКонтактнойИнформации(ВидОбъекта);
	ОтобразитьЭлементыВводаКИ(СтруктураДляРедактирования, ЭтаФорма.ТолькоПросмотр);
	ЗаполнитьЗначенияКИ(СтруктураДляРедактирования);

КонецПроцедуры

// Выполнить обработку после смены текущего элемента в форме
Процедура ОбработатьПроверкуСменыТекущегоЭлемента(СтруктураДляРедактирования, ЭтаФорма) Экспорт

	ТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
	ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
	
	ТекущаяСтраница    = ?(СтруктураДляРедактирования.ОсновнаяПанельФормы = Неопределено, Неопределено, СтруктураДляРедактирования.ОсновнаяПанельФормы.ТекущаяСтраница);
	СтраницаИзменилась = ТекущаяСтраница <> СтруктураДляРедактирования.ТекущаяСтраница;
	СтруктураДляРедактирования.ТекущаяСтраница = ТекущаяСтраница;
	
	Стр = СтруктураДляРедактирования.Элементы.Найти(ТекущийЭлемент, "ПолеВвода");
	Если СтраницаИзменилась И (Стр <> Неопределено) И ПустаяСтрока(Стр.ПолеВвода.Значение) И (Стр.СтрНастройки <> Неопределено) И (Стр.СтрНастройки.РедактированиеВДиалоге) Тогда
		Если Не СтруктураДляРедактирования.ОткрытаФормаРедактирования Тогда
			Если СтруктураДляРедактирования.НадписьПрочаяКИ <> Неопределено Тогда
				ЭтаФорма.ТекущийЭлемент = СтруктураДляРедактирования.НадписьПрочаяКИ;
				СтруктураДляРедактирования.ТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
			ИначеЕсли СтруктураДляРедактирования.ПолеВводаПрочейКИ <> Неопределено Тогда
				ЭтаФорма.ТекущийЭлемент = СтруктураДляРедактирования.ПолеВводаПрочейКИ;
				СтруктураДляРедактирования.ТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийЭлемент = СтруктураДляРедактирования.ТекущийЭлемент ИЛИ СтраницаИзменилась Тогда
		СтруктураДляРедактирования.ТекущийЭлемент = ТекущийЭлемент;
		Возврат;
	КонецЕсли;
	СтруктураДляРедактирования.ТекущийЭлемент = ТекущийЭлемент;
	
	Если ТолькоПросмотр = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Стр = СтруктураДляРедактирования.Элементы.Найти(ТекущийЭлемент, "ПолеВвода");
	Если Стр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Стр.ПолеВвода.Значение) И (Стр.СтрНастройки <> Неопределено) И (Стр.СтрНастройки.РедактированиеВДиалоге) Тогда
		Если Не СтруктураДляРедактирования.ОткрытаФормаРедактирования Тогда
			ПолеВводаКИНачалоВыбора(СтруктураДляРедактирования, ТекущийЭлемент, Ложь, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТРУКТУРОЙ РЕДАКТИРОВАНИЯ

// Подготовить структуру хранящую данные для отображения контактной информации на форме элемента
Функция ПодготовитьСтруктуруДляОтображенияКИ(ВидОбъекта, ОбработчикДляДопКнопок, НаборКонтактнойИнформации, ОсновнаяПанельФормы, СтраницаКИ, НадписьПрочаяКИ, ПолеВводаПрочейКИ, ВидПрочейКИ, КнопкаРедактированияНастроек, ОтображатьКнопкиВместоНадписей) Экспорт

	Стр = Новый Структура;
	Стр.Вставить("ОбработчикДляДопКнопок",         ОбработчикДляДопКнопок);
	Стр.Вставить("НадписьПрочаяКИ",                НадписьПрочаяКИ);
	Стр.Вставить("ПолеВводаПрочейКИ",              ПолеВводаПрочейКИ);
	Стр.Вставить("ВидПрочейКИ",                    ВидПрочейКИ);
	Стр.Вставить("ТекущийЭлемент",                 Неопределено);
	Стр.Вставить("НаборКонтактнойИнформации",      НаборКонтактнойИнформации);
	Стр.Вставить("ВидОбъекта",                     ВидОбъекта);
	Стр.Вставить("ОткрытаФормаРедактирования",     Ложь);
	Стр.Вставить("ОсновнаяПанельФормы",            ОсновнаяПанельФормы);
	Стр.Вставить("СтраницаКИ",                     СтраницаКИ);
	Стр.Вставить("ТекущаяСтраница",                ?(ОсновнаяПанельФормы = Неопределено, Неопределено, ОсновнаяПанельФормы.ТекущаяСтраница));
	Стр.Вставить("Настройки",                      ПолучитьНастройкиОтображенияКонтактнойИнформации(ВидОбъекта));
	Стр.Вставить("ЕстьПолныеПрава",                РольДоступна("ПолныеПрава"));
	Стр.Вставить("ОтображатьКнопкиВместоНадписей", ОтображатьКнопкиВместоНадписей);
	
	Если КнопкаРедактированияНастроек <> Неопределено Тогда
		КнопкаРедактированияНастроек.Видимость = Стр.ЕстьПолныеПрава;
	КонецЕсли;
	
	Элементы = Новый ТаблицаЗначений;
	Элементы.Колонки.Добавить("Кнопка");
	Элементы.Колонки.Добавить("ПолеВвода");
	Элементы.Колонки.Добавить("Надпись");
	Элементы.Колонки.Добавить("Тип");
	Элементы.Колонки.Добавить("СтрНастройки");
	Стр.Вставить("Элементы", Элементы);
	
	ДопКнопки = Новый ТаблицаЗначений;
	ДопКнопки.Колонки.Добавить("Кнопка");
	ДопКнопки.Колонки.Добавить("КнопкаВладелец");
	ДопКнопки.Колонки.Добавить("Вид");
	ДопКнопки.Колонки.Добавить("ВидВладельца");
	ДопКнопки.Колонки.Добавить("ТипДействия"); // 1 - сменить вид, 2 - добавить новый вид, 3 - скопировать, 4 - настройка видок КИ
	Стр.Вставить("ДопКнопки", ДопКнопки);
	
	Замены = Новый ТаблицаЗначений;
	Замены.Колонки.Добавить("Вид1");
	Замены.Колонки.Добавить("Вид2");
	ЗаполнитьЗаменыПоВидуОбъекта(Замены, ВидОбъекта);
	Стр.Вставить("Замены", Замены);
	
	Возврат Стр;

КонецФункции // ПодготовитьСтруктуруДляОтображенияКИ()

// Очистить структуру для редактирования контактной информации
Процедура ОчиститьСтруктуруРедактированияКИ(СтруктураДляРедактирования) Экспорт

	СтруктураДляРедактирования = Неопределено;

КонецПроцедуры

// Заполнить замены в контактной информации производимые для вида объекта
Процедура ЗаполнитьЗаменыПоВидуОбъекта(Замены, ВидОбъекта)

	Если ВидОбъекта = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации Тогда
		ДобавитьЗамену(Замены, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, Истина);
	ИначеЕсли ВидОбъекта = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты Тогда
		ДобавитьЗамену(Замены, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, Истина);
	КонецЕсли;

КонецПроцедуры

// Добавить запись в таблицу замен
Процедура ДобавитьЗамену(Замены, Вид1, Вид2, ВОбеСтороны)

	новСтр = Замены.Добавить();
	новСтр.Вид1 = Вид1;
	новСтр.Вид2 = Вид2;
	
	Если ВОбеСтороны Тогда
		новСтр = Замены.Добавить();
		новСтр.Вид1 = Вид2;
		новСтр.Вид2 = Вид1;
	КонецЕсли;
	
КонецПроцедуры

// В структуру для отображения добавить кнопку и поле ввода
Процедура ДобавитьКнопкуИПоле(СтруктураДляОтображения, Надпись, Кнопка, ПолеВВода) Экспорт

	новСтр = СтруктураДляОтображения.Элементы.Добавить();
	новСтр.Надпись   = Надпись;
	новСтр.Кнопка    = Кнопка;
	новСтр.ПолеВвода = ПолеВВода;

КонецПроцедуры

// Редактируется ли вид контактной информации в основной форме
Функция ВидРедактируетсяВОсновнойФорме(СтруктураДляРедактирования, Вид) Экспорт

	СтрНастройки = СтруктураДляРедактирования.Настройки.Найти(Вид, "Вид");
	Если СтрНастройки = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли СтруктураДляРедактирования.Элементы.Найти(СтрНастройки, "СтрНастройки") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ВидРедактируетсяВОсновнойФорме()

// Редактируется ли вид контактной информации в диалоге
Функция ВидРедактируетсяВДиалоге(СтруктураДляРедактирования, Вид) Экспорт

	СтрНастройки = СтруктураДляРедактирования.Настройки.Найти(Вид, "Вид");
	Если СтрНастройки = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат СтрНастройки.РедактированиеВДиалоге;
	КонецЕсли;

КонецФункции // ВидРедактируетсяВДиалоге()


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

// Получить виды контактной информации такого же типа
Функция ПолучитьПрочиеВидыТакогоЖеТипа(Настройки, Тип, Вид)

	масВидов = Новый Массив;
	
	Для Каждого Стр Из Настройки Цикл
		Если (Стр.Тип = Тип) И (Стр.Вид <> Вид) Тогда
			масВидов.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	
	Возврат масВидов;

КонецФункции // ПолучитьПрочиеВидыТакогоЖеТипа()

// Есть ли кнопка выбора у поля ввода
Функция ЕстьКнопкаВыбораКИ(Тип)

	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ЕстьКнопкаВыбораКИ()

// Есть ли кнопка открытия у поля ввода
Функция ЕстьКнопкаОткрытияКИ(Тип)

	Если Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ЕстьКнопкаОткрытияКИ()

// Получить картинку для отображения типа
Функция ПолучитьКартинкуПоТипу(Тип, НомерКартинки = 0) Экспорт

	Если НомерКартинки = 1 Тогда
		Возврат БиблиотекаКартинок.КИФакс;
		
	ИначеЕсли НомерКартинки = 2 Тогда
		Возврат БиблиотекаКартинок.КИАдресИМНС;
	
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат БиблиотекаКартинок.КИАдрес;
		
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Возврат БиблиотекаКартинок.КИEmail;
		
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Возврат БиблиотекаКартинок.КИWWW;
		
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат БиблиотекаКартинок.КИТелефон;
		
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Возврат БиблиотекаКартинок.ПрочаяКонтактнаяИнформация;
		
	Иначе
		Возврат Новый Картинка;
	КонецЕсли;

КонецФункции // ПолучитьКартинкуПоТипу()

// Выполнить копирование записи контактной информации
Процедура ВыполнитьКопированиеКИВДиалоге(СтруктураДляРедактирования, ЭтаФорма, Тип, Вид)

	масВидов = ПолучитьПрочиеВидыТакогоЖеТипа(СтруктураДляРедактирования.Настройки, Тип, Вид);
	колВидов = масВидов.Количество();
	Если колВидов = 0 Тогда
		Предупреждение("Нет других видов контактной информации этого же типа!");
		Возврат;
	КонецЕсли;
	
	спсВидов = Новый СписокЗначений;
	Для Каждого стрВида Из масВидов Цикл
		спсВидов.Добавить(стрВида.Вид);
	КонецЦикла;
	
	выбрВид = спсВидов.ВыбратьЭлемент("Откуда скопировать");
	Если выбрВид = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запись1 = ПолучитьЗаписьВНаборе(СтруктураДляРедактирования.НаборКонтактнойИнформации, Вид,              Тип);
	Запись2 = ПолучитьЗаписьВНаборе(СтруктураДляРедактирования.НаборКонтактнойИнформации, выбрВид.Значение, Тип);
	Если Запись1=Неопределено ИЛИ Запись2=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьДанныеКИИзЗаписиВДругую(Запись2, Запись1);
	
	ЗаполнитьЗначенияКИ(СтруктураДляРедактирования);
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры // ВыполнитьКопированиеКИВДиалоге()



////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НАБОРОМ ЗАПИСЕЙ КОНТАКТНОЙ ИНФОРМАЦИИ

// Очистить поля хранящие контактную информацию в записи из набора
Процедура ОчиститьЗаписьКонтактнойИнформации(Запись) Экспорт

	Если Запись = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запись.Представление = "";
	Запись.Комментарий   = "";
	Запись.Поле1 = "";
	Запись.Поле2 = "";
	Запись.Поле3 = "";
	Запись.Поле4 = "";
	Запись.Поле5 = "";
	Запись.Поле6 = "";
	Запись.Поле7 = "";
	Запись.Поле8 = "";
	Запись.Поле9 = "";
	Запись.Поле10= "";
	Запись.ТипДома     = Неопределено;
	Запись.ТипКорпуса  = Неопределено;
	Запись.ТипКвартиры = Неопределено;

КонецПроцедуры

// Скопировать данные из одной записи в другую
Процедура СкопироватьДанныеКИИзЗаписиВДругую(Откуда, Куда) Экспорт

	Куда.Представление = Откуда.Представление;
	Куда.Поле1         = Откуда.Поле1;
	Куда.Поле2         = Откуда.Поле2;
	Куда.Поле3         = Откуда.Поле3;
	Куда.Поле4         = Откуда.Поле4;
	Куда.Поле5         = Откуда.Поле5;
	Куда.Поле6         = Откуда.Поле6;
	Куда.Поле7         = Откуда.Поле7;
	Куда.Поле8         = Откуда.Поле8;
	Куда.Поле9         = Откуда.Поле9;
	Куда.Поле10        = Откуда.Поле10;
	Куда.ТипДома       = Откуда.ТипДома;
	Куда.ТипКорпуса    = Откуда.ТипКорпуса;
	Куда.ТипКвартиры   = Откуда.ТипКвартиры;
	Куда.Комментарий   = Откуда.Комментарий;

КонецПроцедуры

// По полю Представление заполнить остальные поля в записи
Процедура ЗаполнитьПоляВЗаписиПоПредставлению(Запись, Представление) Экспорт

	Если Запись = Неопределено Тогда
		Возврат;
	ИначеЕсли Запись.Представление = Представление Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьЗаписьКонтактнойИнформации(Запись);
	Запись.Представление = Представление;
		
	Если ПустаяСтрока(Представление) Тогда
		Возврат;
	КонецЕсли;
	
	Если Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		// Для телефона попробуем разобрать составляющие
		ЗаполнитьПоляВЗаписиПоПредставлениюТелефон(Запись, Представление);
		
	ИначеЕсли Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		  ЗаполнитьПоляВЗаписиПоПредставлениюАдрес(Запись, Представление);
		  
	КонецЕсли;

КонецПроцедуры

// По полю Представление заполнить остальные поля в записи для телефона
Процедура ЗаполнитьПоляВЗаписиПоПредставлениюТелефон(Запись, Представление)

	текСтр = СокрЛП(Представление);
	Запись.Поле1 = "";
	Запись.Поле2 = "";
	Запись.Поле3 = "";
	Запись.Поле4 = "";
	
	// вырежем добавочный номер
	Поз = Найти(ВРЕГ(текСтр), "ДОБ.");
	Если Поз <> 0 Тогда
		Запись.Поле4 = СокрЛП(Сред(текСтр, Поз+4));
		текСтр = СокрЛП(Лев(текСтр, Поз-1));
		
		Если Прав(текСтр, 1) = "," Тогда
			текСтр = Лев(текСтр, СтрДлина(текСтр)-1);
		КонецЕсли;
	КонецЕсли;
	
	// вырежем код города
	Поз = Найти(текСтр, "(");
	Если Поз <> 0 Тогда
		Запись.Поле1 = СокрЛП(Лев(текСтр, Поз-1));
		
		текСтр = СокрЛП(Сред(текСтр, Поз+1));
		Поз = Найти(текСтр, ")");
		
		Если Поз <> 0 Тогда
			Запись.Поле2 = СокрЛП(Лев(текСтр, Поз-1));
			текСтр = СокрЛП(Сред(текСтр, Поз+1));
		КонецЕсли;
	КонецЕсли;
	
	// все оставшееся это номер
	Запись.Поле3 = ПривестиНомерТелефонаКШаблону(текСтр);
	
	// Поправим представление
	СформироватьПредставлениеТелефона(Запись);
	Представление = Запись.Представление;

КонецПроцедуры

// По полю Представление заполнить остальные поля в записи для адреса
Процедура ЗаполнитьПоляВЗаписиПоПредставлениюАдрес(Запись, Представление)

	Стр = СокрЛП(Представление);
	предУровень = 0;
	
	Пока Не ПустаяСтрока(Стр) Цикл
		Поз = Найти(Стр, ",");
		текСтр = СокрЛП(?(Поз=0, Стр, Лев(Стр, Поз-1)));
		Стр = СокрЛП(?(Поз=0, "", Сред(Стр, Поз+1)));
		текВ = ВРег(текСтр);
		
		Если СтрДлина(текСтр) = 6 И ОбщегоНазначения.ТолькоЦифрыВСтроке(текСтр) Тогда
			// это индекс
			Запись.Поле1 = текСтр;
			Продолжить;
			
		ИначеЕсли Лев(текВ,6) = "ДОМ № " Тогда
			// это номер дома
			Запись.Поле7 = СокрЛП(Сред(текСтр,7));
			Запись.ТипДома = Перечисления.ТипыДомов.Дом;
			Продолжить;
			
		ИначеЕсли Лев(текВ,11) = "ВЛАДЕНИЕ № " Тогда
			// это номер дома
			Запись.Поле7 = СокрЛП(Сред(текСтр,12));
			Запись.ТипДома = Перечисления.ТипыДомов.Владение;
			Продолжить;
			
		ИначеЕсли Лев(текВ,7) = "КОРПУС " Тогда
			// это номер корпуса
			Запись.Поле8 = СокрЛП(Сред(текСтр,8));
			Запись.ТипКорпуса = Перечисления.ТипыКорпусов.Корпус;
			Продолжить;
			
		ИначеЕсли Лев(текВ,9) = "СТРОЕНИЕ " Тогда
			// это номер корпуса
			Запись.Поле8 = СокрЛП(Сред(текСтр,10));
			Запись.ТипКорпуса = Перечисления.ТипыКорпусов.Строение;
			Продолжить;
			
		ИначеЕсли Лев(текВ,3) = "КВ." Тогда
			// это номер квартиры
			Запись.Поле9 = СокрЛП(Сред(текСтр,4));
			Запись.ТипКвартиры = Перечисления.ТипыКвартир.Квартира;
			Продолжить;
			
		ИначеЕсли Лев(текВ,3) = "ОФ." Тогда
			// это номер офиса
			Запись.Поле9 = СокрЛП(Сред(текСтр,4));
			Запись.ТипКвартиры = Перечисления.ТипыКвартир.Офис;
			Продолжить;
			
		КонецЕсли;
		
		// попробуем найти адресное сокращение и по нему определить тип поля
		Поз=0;
		Для Сч=1 По СтрДлина(текСтр) Цикл
			Если Сред(текСтр,Сч,1) = " " Тогда
				Поз = Сч;
			КонецЕсли;
		КонецЦикла;
		
		Если Поз=0 Тогда
			Продолжить;
		КонецЕсли;
		
		АдрСокр = СокрЛП(Сред(текСтр, Поз+1));
		ТЗ = "ВЫБРАТЬ
		|	МИНИМУМ(АдресныеСокращения.Уровень) Как Уровень
		|ИЗ
		|	Справочник.АдресныеСокращения КАК АдресныеСокращения
		|ГДЕ
		|	АдресныеСокращения.Сокращение = &Сокращение
		|	И АдресныеСокращения.Уровень > &предУровень";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТЗ;
		Запрос.УстановитьПараметр("Сокращение",  АдрСокр);
		Запрос.УстановитьПараметр("предУровень", предУровень);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Не Выборка.Следующий() Тогда
			Продолжить;
		КонецЕсли;
		Уровень = Выборка.Уровень;
		предУровень = Уровень;
		
		Если Уровень=1 Тогда
			Запись.Поле2 = текСтр;
		ИначеЕсли Уровень=2 Тогда
			Запись.Поле3 = текСтр;
		ИначеЕсли Уровень=3 Тогда
			Запись.Поле4 = текСтр;
		ИначеЕсли Уровень=4 Тогда
			Запись.Поле5 = текСтр;
		ИначеЕсли Уровень=5 Тогда
			Запись.Поле6 = текСтр;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Получить запись в наборе записей по типу и виду
Функция ПолучитьЗаписьВНаборе(Набор, Вид, Тип) Экспорт

	Для Каждого Запись Из Набор Цикл
		
		Если (Запись.Тип = Тип) И (Запись.Вид = Вид) Тогда
			Возврат Запись;
		КонецЕсли;
		
	КонецЦикла;
	
	Запись = Набор.Добавить();
	Запись.Вид = Вид;
	Запись.Тип = Тип;
	
	Возврат Запись;

КонецФункции // ПолучитьЗаписьВНаборе()

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НАСТРОЙКАМИ ОТОБРАЖЕНИЯ КИ

// Получить настройки для редактирования контактной информации
Функция ПолучитьНастройкиОтображенияКонтактнойИнформации(ВидОбъекта)

	ТЗ = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка Как Вид,
	|	ВидыКонтактнойИнформации.Наименование КАК Наименование,
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	ВидыКонтактнойИнформации.РедактированиеВДиалоге,
	|	ВидыКонтактнойИнформации.МожноРедактироватьТолькоВДиалоге,
	|	ВидыКонтактнойИнформации.НомерКартинки,
	|	ВидыКонтактнойИнформации.Порядок КАК Порядок
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Тип,
	|	Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТЗ;
	Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", ВидОбъекта);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьНастройкиПоУмолчанию()

#КонецЕсли




