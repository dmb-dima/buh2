
Процедура УстановитьПараметрСеансаТекущийПользователь() Экспорт
	
	ИмяПользователя = ИмяПользователя();	
	Если ПустаяСтрока(ИмяПользователя) Тогда
		// пользователь не авторизовался
		ИмяПользователя = "НеАвторизован";		
	КонецЕсли;	
	
	ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(ИмяПользователя) Тогда
		ТекущийПользователь = Справочники.Пользователи.НайтиПоКоду(ИмяПользователя);
	КонецЕсли;		
	
	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;
	
КонецПроцедуры	

Процедура УстановитьИзменяемыеПараметрыСеансаПользователя(Интерактивно = Ложь, ТекстРезультата = "") Экспорт
	
	ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей = Константы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Получить();
	ТекстРезультата = ТекстРезультата + " - обновлены данные прав доступа" + Символы.ПС;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	// ГруппыТекущегоПользователя
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Справочник.ГруппыПользователей.Ссылка КАК Значение
	|ИЗ
	|	Справочник.ГруппыПользователей
	|ГДЕ
	|	Справочник.ГруппыПользователей.ПользователиГруппы.Пользователь = &ТекущийПользователь
	|";
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Значение");
	Массив.Добавить(Справочники.ГруппыПользователей.ВсеПользователи);
	ПараметрыСеанса.ГруппыТекущегоПользователя = Новый ФиксированныйМассив(Массив);
	ТекстРезультата = ТекстРезультата + " - обновлен состав групп текущего пользователя" + Символы.ПС;
	
	УстановитьПараметрГраницыЗапретаИзмененияДанных();
	ТекстРезультата = ТекстРезультата + " - обновлены даты запрета изменения данных" + Символы.ПС;
	
	// инициализация параметров сеанса, связанных с механизмом РИБ:
	// ПрефиксУзлаРаспределеннойИнформационнойБазы, НаличиеОбменаДаннымиПоОрганизации
	// ВсеУзлыОбменаПоОрганизациям, СоответствиеОрганизацийИУзловОбменаПоОрганизации
	// ИспользованиеРИБ
	ОпределитьПараметрыСеансаДляОбменаДанными();
	ТекстРезультата = ТекстРезультата + " - обновлены параметры распределенной информационной базы" + Символы.ПС;
	
	ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Новый Структура);
	ТекстРезультата = ТекстРезультата + " - сброшен кэш значений текущего сеанса" + Символы.ПС;
	
	УстановитьПараметрСеансаТекущиеУчетныеЗаписиНалогоплательщика();
	ТекстРезультата = ТекстРезультата + " - обновлен список учетных записей налогоплательщика, доступных текущему пользователю" + Символы.ПС;
	
КонецПроцедуры

// Сохранение в параметре сеанса ГраницыЗапретаИзмененияДанных границ запрета изменений данных
Процедура УстановитьПараметрГраницыЗапретаИзмененияДанных() Экспорт
		
	Если РольДоступна("ПолныеПрава") И НЕ Константы.ПрименятьДатуЗапретаДляПолныхПрав.Получить() Тогда
		ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(0));
		Возврат;
	КонецЕсли;
	ТекстЗапросаПоПриоритетамЗаписей = "ВЫБРАТЬ
                                       |    Границы.Организация КАК Организация,
                                       |    Границы.Пользователь КАК Пользователь,
                                       |    ВЫБОР
                                       |        КОГДА Границы.Пользователь = НЕОПРЕДЕЛЕНО
                                       |            ТОГДА 3
                                       |        КОГДА Границы.Пользователь ССЫЛКА Справочник.ГруппыПользователей
                                       |                И ГруппыПользователей.Пользователь = &Пользователь
                                       |            ТОГДА 2
                                       |        КОГДА Границы.Пользователь ССЫЛКА Справочник.Пользователи
                                       |                И Границы.Пользователь = &Пользователь
                                       |            ТОГДА 1
                                       |    КОНЕЦ КАК Приоритет,
                                       |    Границы.ГраницаЗапретаИзменений КАК ГраницаЗапретаИзменений
                                       |ИЗ
                                       |    РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
                                       |        ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователей
                                       |        ПО (ГруппыПользователей.Пользователь = &Пользователь И ГруппыПользователей.Ссылка = Границы.Пользователь)";
                                       
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ  РАЗРЕШЕННЫЕ
                   |    Организации.Ссылка как Организация,
                   |    МИНИМУМ(ЕСТЬNULL(ТаблицаГраницыЗапрета.ГраницаЗапретаИзменений, ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59))) КАК ГраницаЗапретаИзменений
                   |ИЗ
                   |    Справочник.Организации КАК Организации
                   |        ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                   |            Границы.Организация КАК Организация,
                   |            МИНИМУМ(Приоритеты.Приоритет) КАК Приоритет
                   |        ИЗ
                   |            РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
                   |                ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоПриоритетамЗаписей + ") КАК Приоритеты
                   |                ПО Границы.Организация = Приоритеты.Организация
                   |                    И Границы.Пользователь = Приоритеты.Пользователь
                   |        
                   |        СГРУППИРОВАТЬ ПО
                   |            Границы.Организация) КАК ТаблицаПриоритетов
                   |        ПО ТаблицаПриоритетов.Организация = Организации.Ссылка
                   |        ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоПриоритетамЗаписей + ") КАК ТаблицаГраницыЗапрета
                   |        ПО ТаблицаПриоритетов.Организация = ТаблицаГраницыЗапрета.Организация
                   |            И ТаблицаПриоритетов.Приоритет = ТаблицаГраницыЗапрета.Приоритет
                   |
                   |СГРУППИРОВАТЬ ПО
                   |    Организации.Ссылка";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
    
    РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Соответствие = Неопределено;
	Иначе			
		Соответствие = Новый Соответствие;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Соответствие[Выборка.Организация] = Выборка.ГраницаЗапретаИзменений;
		КонецЦикла;
		ЕСли Соответствие.Количество() = 0 Тогда
			Соответствие = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Соответствие <> Неопределено Тогда
		Соответствие.Вставить(Справочники.Организации.ПустаяСсылка(), Дата('00010101'));
		СохранятьСоответствие = Ложь;
		Для Каждого КлючИЗначение Из Соответствие Цикл
			ЕСли КлючИЗначение.Значение <> Дата('00010101') Тогда
				СохранятьСоответствие = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СохранятьСоответствие Тогда
			Соответствие = Неопределено;
		КонецЕсли;			
	КонецЕсли;
		
	ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Соответствие, Новый СжатиеДанных(0));	
	
КонецПроцедуры

Процедура ОбработатьУстановкуВозможногоПрефиксаИнформационнойБазы(Значение) Экспорт
	
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Первые 1 1
	               |	
	               |ИЗ
	               |	РегистрСведений.ПрефиксыИнформационныхБаз КАК ПрефиксыИнформационныхБаз
				   |ГДЕ
				   |	ПрефиксыИнформационныхБаз.Префикс = &Префикс";
				   
	Запрос.УстановитьПараметр("Префикс", Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейРегистра = РегистрыСведений.ПрефиксыИнформационныхБаз.СоздатьНаборЗаписей();
	
	НаборЗаписейРегистра.Отбор.Префикс.Установить(Значение);
	
	СтрокаРегистра = НаборЗаписейРегистра.Добавить();
	
	СтрокаРегистра.Префикс = Значение;
		
	НаборЗаписейРегистра.Записать();
	
КонецПроцедуры

// функция по пользователю ИБ определяет есть ли у него Windows авторизация
Функция НаличиеУПользователяWindowsАвторизации(Знач ИмяПользователяИБ) Экспорт
	
	Если ПустаяСтрока(ИмяПользователяИБ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// находим пользователя ИБ
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПользовательИБ.АутентификацияОС;
	
КонецФункции

// Функция определяет наличие движения по регистрам для документа
Функция ОпределитьНаличиеДвиженийПоРегистратору(ДокументСсылка) Экспорт
	ТекстЗапроса = "";	
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор ДЛЯ ИЗМЕНЕНИЯ " + Движение.ПолноеИмя();
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

// Функция определяет наличие хотя бы одной записи в регистре сведений
//
// Параметры
//  ИмяРегистра - строка
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьЗаписиВРегистреСведений(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегСв.*
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК РегСв";
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

// Процедура осуществляет проверку дублей в справочнике ФизическиеЛица
// Проверка происходит по паспортным данным, ИНН, ПФР и ФИО
//
Процедура ПроверитьДублиФизлиц(Ссылка, ЗаписьПаспортныхДанных = Неопределено, ИНН, ПФР, ФИО) Экспорт
	
	ЕстьДублиПаспортныхДанных	= Ложь;
	ЕстьДублиИНН				= Ложь;
	ЕстьДублиПФР				= Ложь;
	
	Если ЗаписьПаспортныхДанных <> Неопределено И (
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументВид) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументСерия) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументНомер) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументДатаВыдачи) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументКодПодразделения)) Тогда
		
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",						Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ДокументВид",				ЗаписьПаспортныхДанных.ДокументВид);
		ЗапросПоДублям.УстановитьПараметр("ДокументСерия",				ЗаписьПаспортныхДанных.ДокументСерия);
		ЗапросПоДублям.УстановитьПараметр("ДокументНомер",				ЗаписьПаспортныхДанных.ДокументНомер);
		ЗапросПоДублям.УстановитьПараметр("ДокументДатаВыдачи",			ЗаписьПаспортныхДанных.ДокументДатаВыдачи);
		ЗапросПоДублям.УстановитьПараметр("ДокументКодПодразделения",	ЗаписьПаспортныхДанных.ДокументКодПодразделения);
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПаспортныеДанныеФизЛиц.ФизЛицо КАК ФизЛицо
		|ИЗ
		|	РегистрСведений.ПаспортныеДанныеФизЛиц КАК ПаспортныеДанныеФизЛиц
		|ГДЕ
		|	ПаспортныеДанныеФизЛиц.ФизЛицо <> &Ссылка
		|	И ПаспортныеДанныеФизЛиц.ДокументВид = &ДокументВид
		|	И ПаспортныеДанныеФизЛиц.ДокументСерия = &ДокументСерия
		|	И ПаспортныеДанныеФизЛиц.ДокументНомер = &ДокументНомер
		|	И ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи = &ДокументДатаВыдачи
		|	И ПаспортныеДанныеФизЛиц.ДокументКодПодразделения = &ДокументКодПодразделения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизЛицо";
		
		ВыборкаЗапроса = ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			Сообщить("Физлицо: " + ВыборкаЗапроса.Физлицо +" имеет такие же паспортные данные как и у "+Строка(Ссылка));
			ЕстьДублиПаспортныхДанных = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ИНН",	ИНН);
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Ссылка КАК Физлицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка <> &Ссылка
		|	И ФизическиеЛица.ИНН = &ИНН
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическиеЛица.Наименование";
		
		ВыборкаЗапроса = ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			Сообщить("Физлицо: " + ВыборкаЗапроса.Физлицо +" имеет такой же ИНН как и у "+Строка(Ссылка));
			ЕстьДублиИНН = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Число("0"+СтрЗаменить(СтрЗаменить(ПФР, "-", ""), " ", ""))) Тогда
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ПФР",	ПФР);
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Ссылка КАК Физлицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка <> &Ссылка
		|	И ФизическиеЛица.СтраховойНомерПФР = &ПФР
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическиеЛица.Наименование";
		
		ВыборкаЗапроса = ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			Сообщить("Физлицо: " + ВыборкаЗапроса.Физлицо +" имеет такой же страховой номер ПФР как и у "+Строка(Ссылка));
			ЕстьДублиПФР = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФИО) И
		 НЕ ЕстьДублиИНН И
		 НЕ ЕстьДублиПаспортныхДанных И
		 НЕ ЕстьДублиПФР Тогда
		 
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ФИО",	СтрЗаменить(ФИО, " ", ""));
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФИОФизЛиц.ФизЛицо
		|ИЗ
		|	РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
		|ГДЕ
		|	ФИОФизЛиц.ФизЛицо <> &Ссылка
		|	И ФИОФизЛиц.Фамилия + ФИОФизЛиц.Имя + ФИОФизЛиц.Отчество = &ФИО
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФИОФизЛиц.Фамилия,
		|	ФИОФизЛиц.Имя,
		|	ФИОФизЛиц.Отчество";
		
		ВыборкаЗапроса 				= ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			Сообщить("Физлицо с таким ФИО (" + ВыборкаЗапроса.Физлицо +") уже есть в справочнике");
			ЕстьДублиПаспортныхДанных = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМОВ RLS

Процедура ЗаписатьНаборПрав(НаборПрав, Отказ, ШапкаОшибки)
	
	Попытка
		НаборПрав.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаОшибки);
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьПраваДоступаПользователей(ТаблицаНабораПрав, СтруктураОтбора, Отказ = Ложь, ШапкаОшибки = "") Экспорт
	
	НаборПрав   = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	
	Для Каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
		Если Не ЭлементСтруктуры.Ключ = "ВладелецПравДоступа" Тогда
			НаборПрав  .Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
			НаборПрав  .Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	// Проверим набор на корректность установленных отборов
	Если НаборПрав.Отбор.ОбъектДоступа.Использование Тогда
		ОтборПоОбъектуДоступа = Истина;
		ОбъектДоступа = НаборПрав.Отбор.ОбъектДоступа.Значение;
		НаборПрав.Отбор.ВладелецПравДоступа.Установить(ОбъектДоступа);
		НаборПрав.Отбор.ОбъектДоступа.Использование = Ложь;
	ИначеЕсли НаборПрав.Отбор.Пользователь.Использование Тогда
		Если НЕ ЗначениеЗаполнено(НаборПрав.Отбор.Пользователь.Значение) Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке(ШапкаОшибки);
			Возврат;
		КонецЕсли;
		
	Иначе
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке(ШапкаОшибки);
		Возврат;
	КонецЕсли;
	
	ТаблицаРазличияСтрок   = НаборПрав.Выгрузить();
	ТаблицаРазличияЗаписей = НаборПрав.Выгрузить();
	
	НаборПрав.Прочитать();
	
	ТаблицаСтарогоНабора = НаборПрав.Выгрузить();
	
	ТаблицаНовогоНабора  = НастройкаПравДоступа.ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(ТаблицаНабораПрав);
	
	НаборПрав.Загрузить(ТаблицаНовогоНабора);
	
	// с полными правами можно все делать
	Если Не РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нарушение прав доступа!",, ШапкаОшибки);
		Возврат;
	КонецЕсли;
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаНаследуемымиЗаписями(НаборПрав);
		
	ЗаписатьНаборПрав(НаборПрав, Отказ, ШапкаОшибки);
	
КонецПроцедуры // () 

Процедура ЗарегистрироватьПраваДоступаПользователяКОбъекту(СсылкаНового, Родитель, Отказ = Ложь) Экспорт

	Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНового)) Тогда
		Возврат;
	КонецЕсли;
	
	Если СсылкаНового.ПолучитьОбъект() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектДоступа.Установить(СсылкаНового);
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаУнаследованнымиЗаписями(НаборЗаписей, СсылкаНового, Родитель);
	
	ЗаписатьНаборПрав(НаборЗаписей, Отказ, "Не удалось записать права доступа к объекту!")
	
КонецПроцедуры

Функция ОбновитьПраваДоступаПользователейПоВладельцуДоступа(Ссылка) Экспорт
	
	ПраваДоступаПользователей = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	
	ПраваДоступаПользователей.Отбор.ОбъектДоступа      .Установить(Ссылка);
	ПраваДоступаПользователей.Отбор.ВладелецПравДоступа.Установить(Ссылка);
	
	ПраваДоступаПользователей.Прочитать();
	
	ПраваДоступаПользователей.Отбор.ОбъектДоступа.Использование = Ложь;
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаНаследуемымиЗаписями(ПраваДоступаПользователей);
		
	Попытка
		ПраваДоступаПользователей.Записать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // () 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТРУКТУРЫ ПОДЧИНЕННОСТИ

Функция ПолучитьСписокПодчиненныхДокументов(ДокументОснование,мКэшПраваДоступаКМетаданным) Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса = ""; 
	ТипДокументОснование = ТипЗнч(ДокументОснование);
	Для Каждого ЭлементСостава ИЗ Метаданные.КритерииОтбора.СтруктураПодчиненности.Состав Цикл
		
		Если Не ЭлементСостава.Тип.СодержитТип(ТипДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = ОбщегоНазначения.РазобратьПутьКОбъектуМетаданных(ПутьКДанным,мКэшПраваДоступаКМетаданным);
		
		ЕСли НЕ СтруктураПутьКДанным.ЕстьДоступКМетаданным Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		
		ТекущаяСтрокаГДЕ = "ГДЕ " + СтруктураПутьКДанным.ВидОбъекта + "." +СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
			
		ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ОБЪЕДИНИТЬ
		|ВЫБРАТЬ") + "
		|" + СтруктураПутьКДанным.ВидОбъекта +".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + СтруктураПутьКДанным.ВидОбъекта + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|";
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ДокументОснование);
	Если ТекстЗапроса = "" Тогда
		Возврат новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьСодержимоеДокументаДляСтруктурыПодчиненности(Ссылка, ИмяТаблицы, МассивРеквизитов) Экспорт
	
	ТекстПолей = "";
	
	Шаблон = "
	|## КАК ##,
	|ВЫБОР КОГДА ##.Дата ЕСТЬ NULL ТОГДА NULL ИНАЧЕ ##.Дата КОНЕЦ КАК ##Дата";
	
	Для Каждого Реквизит ИЗ МассивРеквизитов Цикл
		ТекстПолей = ТекстПолей + ?(ТекстПолей = "", "", ",") + СтрЗаменить(Шаблон, "##", Реквизит);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ " + ТекстПолей + " ИЗ Документ." + ИмяТаблицы + " ГДЕ Ссылка = &Ссылка";	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("Ссылка");
	ТаблицаРезультата.Колонки.Добавить("Дата");	
	ТаблицаРезультата.Колонки.Добавить("Метаданные");	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Для индекс = 1 по Результат.Колонки.Количество() / 2 Цикл
			ДатаДокумента = Выборка[индекс * 2 - 1];
			ЕСли ДатаДокумента = NULL Тогда
				Продолжить;
			КонецЕсли;			
			ЗначениеРеквизита = Выборка[(индекс - 1) * 2];
			СтрокаПоля = ТаблицаРезультата.Добавить();
			СтрокаПоля.Ссылка = ЗначениеРеквизита;
			СтрокаПоля.Дата = ДатаДокумента;			
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаРезультата.Сортировать("Дата");
	Возврат ТаблицаРезультата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура УстановитьПараметрСеансаТекущиеУчетныеЗаписиНалогоплательщика()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись.Ссылка КАК УчетнаяЗапись
	                      |ИЗ
	                      |	РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
	                      |ГДЕ
	                      |	ПользователиУчетныхЗаписейДокументооборота.Пользователь = &Пользователь");
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	МассивУчетныхЗаписей = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивУчетныхЗаписей.Добавить(Выборка.УчетнаяЗапись);
	КонецЦикла;
	МассивУчетныхЗаписейФиксированныйМассив = Новый ФиксированныйМассив(МассивУчетныхЗаписей);
	ПараметрыСеанса.ТекущиеУчетныеЗаписиНалогоплательщика = МассивУчетныхЗаписейФиксированныйМассив;
	
КонецПроцедуры

Функция ПолучитьРезультатЗапросаПоВыборкеОрганизаций(ИмяСправочника, ИмяРеквизита, ИмяРеквизитаОрганизации, СсылкаНаСправочник) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	Спр." + ИмяРеквизитаОрганизации + " КАК Организация
	               |ИЗ
	               |	Справочник." + ИмяСправочника + " КАК Спр
	               |ГДЕ
	               |	Спр." + ИмяРеквизита + " = &СсылкаНаЭлемент";
				   
	Запрос.УстановитьПараметр("СсылкаНаЭлемент", СсылкаНаСправочник);
	
	Возврат Запрос.Выполнить();
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ ПРОВЕРКИ ЗАПОЛНЕНИЯ ОТЧЕТОВ ПОД РЛС

// Функция проверяет есть используються ли роли с ограничением прав доступа на уровне записи
//
Функция ИспользуетсяОграниченияПравДоступаНаУровнеЗаписей() Экспорт 
    ИспользуетсяРЛС = Константы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Получить();
    ИспользуетсяРЛС = ИспользуетсяРЛС И Не РольДоступна("ПолныеПрава");
    Возврат ИспользуетсяРЛС;
КонецФункции

Процедура ОпределитьПараметрыСеансаДляОбменаДанными() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Полный.Ссылка
	|ИЗ
	|	ПланОбмена.Полный КАК Полный
	|ГДЕ
	|	Полный.Ссылка <> &ЭтотУзелПолный
	|";

	Запрос.УстановитьПараметр("ЭтотУзелПолный", ПланыОбмена.Полный.ЭтотУзел());
	
	ПараметрыСеанса.ИспользованиеРИБ = НЕ Запрос.Выполнить().Пустой();	
	
	// {ОбменДаннымиСУправлениемТорговлей
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОбменУправлениеТорговлейБухгалтерияКОРП.Ссылка КАК Ссылка,
	|	ОбменУправлениеТорговлейБухгалтерияКОРП.ДатаНачалаВыгрузкиДокументов КАК ДатаНачалаВыгрузкиДокументов
	|ИЗ
	|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП КАК ОбменУправлениеТорговлейБухгалтерияКОРП
	|ГДЕ
	|	ОбменУправлениеТорговлейБухгалтерияКОРП.Ссылка <> &ЭтотУзелПоОрганизации
	|";
	Запрос.УстановитьПараметр("ЭтотУзелПоОрганизации", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП.ЭтотУзел());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерия = НЕ РезультатЗапроса.Пустой();
	
	Если ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерия Тогда
		
		ТаблицаОбменовУТБП = РезультатЗапроса.Выгрузить();
		ТаблицаОбменовУТБП.Индексы.Добавить("Ссылка");
		
		ПараметрыСеанса.СоответствиеУзловИДатДляОбменаБухгалтерияТорговля = Новый ХранилищеЗначения(ТаблицаОбменовУТБП);
		
		
		МассивВсехУзлов = ПроцедурыОбменаТорговляБухгалтерия.ПолучитьМассивВсехУзлов();
		ПараметрыСеанса.ВсеУзлыОбменаТорговляБухгалтерия = Новый ФиксированныйМассив(МассивВсехУзлов);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|";
		МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
		
		СоответствиеУзловИОрганизаций = Новый Соответствие;
		
		Для Каждого Организация ИЗ МассивОрганизаций Цикл
			
			МассивУзлов = ПроцедурыОбменаТорговляБухгалтерия.ПолучитьЗапросомМассивУзловПоОрганизации(Организация);
			СоответствиеУзловИОрганизаций.Вставить(Организация, МассивУзлов);
			
		КонецЦикла;
			
		ПараметрыСеанса.СоответствиеОрганизацийИУзловОбменаТорговляБухгалтерия = Новый ХранилищеЗначения(СоответствиеУзловИОрганизаций);		
		
	КонецЕсли;
	// }ОбменДаннымиСУправлениемТорговлей
	
	// {ОбменДаннымиСРозницей
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОбменРозницаБухгалтерия20.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбменРозницаБухгалтерия20 КАК ОбменРозницаБухгалтерия20
	|ГДЕ
	|	ОбменРозницаБухгалтерия20.Ссылка <> &ЭтотУзел
	|";
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменРозницаБухгалтерия20.ЭтотУзел());
	РезультатЗапроса = Запрос.Выполнить();
	ПараметрыСеанса.НаличиеОбменаРозницаБухгалтерия20 = НЕ РезультатЗапроса.Пустой();
	// }ОбменДаннымиСРозницей
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоОрганизации.Ссылка
	|ИЗ
	|	ПланОбмена.ПоОрганизации КАК ПоОрганизации
	|ГДЕ
	|	ПоОрганизации.Ссылка <> &ЭтотУзелПоОрганизации
	|";
	Запрос.УстановитьПараметр("ЭтотУзелПоОрганизации", ПланыОбмена.ПоОрганизации.ЭтотУзел());
		
	ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации = НЕ Запрос.Выполнить().Пустой();
	
	ПараметрыСеанса.ИспользованиеРИБ = ПараметрыСеанса.ИспользованиеРИБ ИЛИ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации;
	
	
	
	ПараметрыСеанса.ПрефиксУзлаРаспределеннойИнформационнойБазы = Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
	
	
	
	Если ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		МассивВсехУзлов = ПроцедурыОбменаДаннымиПоОрганизации.ПолучитьМассивВсехУзлов();
		
		ПараметрыСеанса.ВсеУзлыОбменаПоОрганизациям = Новый ФиксированныйМассив(МассивВсехУзлов);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|";
		СоответствиеУзловИОрганизаций = Новый Соответствие;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МассивУзлов = ПроцедурыОбменаДаннымиПоОрганизации.ПолучитьЗапросомМассивУзловПоОрганизации(Выборка.Ссылка);
			СоответствиеУзловИОрганизаций.Вставить(Выборка.Ссылка, МассивУзлов);
			
		КонецЦикла;
		
		// пустую организацию надо в список добавить
		МассивУзлов = ПроцедурыОбменаДаннымиПоОрганизации.ПолучитьЗапросомМассивУзловПоОрганизации(Справочники.Организации.ПустаяСсылка());
		СоответствиеУзловИОрганизаций.Вставить(Справочники.Организации.ПустаяСсылка(), МассивУзлов);
		
		ПараметрыСеанса.СоответствиеОрганизацийИУзловОбменаПоОрганизации = Новый ХранилищеЗначения(СоответствиеУзловИОрганизаций);
		
	КонецЕсли;
	
	ПараметрыСеанса.СохранятьИнформациюОМестеСозданияОбъектов = Константы.СохранятьИнформациюОМестеСозданияОбъектов.Получить();
	
КонецПроцедуры

Функция СвойстваОбъектов_СуществуютСсылки(Свойство) Экспорт

	Запрос = Новый Запрос();

	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрСведений.ЗначенияСвойствОбъектов.Свойство КАК Свойство
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов
	|
	|ГДЕ
	|	РегистрСведений.ЗначенияСвойствОбъектов.Свойство = &Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрСведений.НазначенияСвойствОбъектов.Свойство КАК Свойство
	|ИЗ
	|	РегистрСведений.НазначенияСвойствОбъектов
	|
	|ГДЕ
	|	РегистрСведений.НазначенияСвойствОбъектов.Свойство = &Свойство
	|";

	Запрос.УстановитьПараметр("Свойство", Свойство);

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТДЕЛЬНЫХ ДОКУМЕНТОВ, ТРЕБУЮЩИЕ ПРИВЕЛИГИРОВАННОГО РЕЖИМА

// Проверяет факт принятия к учету основного средства в других организациях.
//
Функция ПроверитьПринятиеКУчетуВДругихОрганизациях(СтруктураШапкиДокумента, ТаблицаПоОС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоОС);
	Запрос.УстановитьПараметр("Период",          СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);
	
	// Помещение списка основных средств во временную таблицу.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновноеСредство
	|ПОМЕСТИТЬ
	|	ОсновныеСредства
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	// Выборка основных средств, принятых к учету в других организациях.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация КАК Организация,
	|	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаСостояния
	|ПОМЕСТИТЬ
	|	ПринятыеКУчетуОС
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету) И
	|	СостоянияОСОрганизаций.ДатаСостояния < &Период И
	|	СостоянияОСОрганизаций.Организация <> &Организация И
	|	СостоянияОСОрганизаций.ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрСведений.СостоянияОСОрганизаций
	|";
	Запрос.Выполнить();
	
	// Выборка основных средств, не снятых с учета в других организациях.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ПринятыеКУчетуОС.ОсновноеСредство) КАК ОсновноеСредство,
	|	ПринятыеКУчетуОС.ОсновноеСредство.Код КАК КодОсновногоСредства,
	|	ПРЕДСТАВЛЕНИЕ(ПринятыеКУчетуОС.Организация) КАК Организация,
	|	ПринятыеКУчетуОС.ДатаСостояния КАК ДатаСостояния
	|ИЗ
	|	ПринятыеКУчетуОС
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СнятыеСУчетаОС
	|	ПО СнятыеСУчетаОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
	|	 И СнятыеСУчетаОС.ДатаСостояния < &Период
	|	 И СнятыеСУчетаОС.Организация = ПринятыеКУчетуОС.Организация
	|	 И СнятыеСУчетаОС.ОсновноеСредство = ПринятыеКУчетуОС.ОсновноеСредство	
	|ГДЕ
	|	СнятыеСУчетаОС.ОсновноеСредство ЕСТЬ NULL
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрСведений.СостоянияОСОрганизаций
	|";
	
	ВыборкаОС = Запрос.Выполнить();
	
	Возврат  ВыборкаОС;
	
КонецФункции// ПроверитьПринятиеКУчетуВДругихОрганизациях()
