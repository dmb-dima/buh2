
//Функция возвращает вид расчетов по договору
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//		ВалютаРегламентированногоУчета 	- СправочникСсылка.Валюты
//
// Возвращаемое значение
//      ПеречислениеСсылка.ВидыРасчетовПоДоговорам
//
Функция ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,ВалютаРегламентированногоУчета) Экспорт

	Если ДоговорКонтрагента.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета 
	 ИЛИ НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;

	ИначеЕсли ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах;

	Иначе
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;

	Конецесли;

	Возврат ВидРасчетовПоДоговору;

КонецФункции

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор, ВалютаРегламентированногоУчета = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;

	Результат = Новый Структура("СчетРасчетов, 
	                            |СчетАвансов,
	                            |СчетРасчетовПокупателя, 
	                            |СчетАвансовПокупателя, 
	                            |СчетРасчетовПоПретензиям,
	                            |СчетРасчетовСКомитентом,
	                            |СчетУчетаТары,
	                            |СчетУчетаТарыПокупателя,
	                            |СчетУчетаДоходовПоТаре,
	                            |СчетУчетаРасходовПоТаре");

	ВидРасчетовПоДоговору = ОпределениеВидаРасчетовПоПараметрамДоговора(Договор, ВалютаРегламентированногоУчета);

	СписокГруппКонтрагентов = ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Контрагент);
	
	СписокГруппДоговоров = ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Договор);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Контрагент",        Контрагент);
	Запрос.УстановитьПараметр("Договор",           Договор);
	Запрос.УстановитьПараметр("ВидРасчетов",       ВидРасчетовПоДоговору);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",     Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидРасчетов", Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	
	Индекс = 1;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	" + Индекс + " КАК Приоритет,
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &Договор И НЕ &Договор = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТаре,
		|	СчетУчетаРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТаре,
		|	СчетУчетаРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТаре,
		|	СчетУчетаРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &ПустаяОрганизация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТаре,
		|	СчетУчетаРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Результат.СчетРасчетов              = Выборка.СчетУчетаРасчетовСПоставщиком;
		Результат.СчетАвансов               = Выборка.СчетУчетаАвансовВыданных;
		Результат.СчетРасчетовПокупателя    = Выборка.СчетУчетаРасчетовСПокупателем;
		Результат.СчетАвансовПокупателя     = Выборка.СчетУчетаАвансовПолученных;
		Результат.СчетРасчетовПоПретензиям  = Выборка.СчетРасчетовПоПретензиям;
		Результат.СчетРасчетовСКомитентом   = Выборка.СчетУчетаРасчетовСКомитентом;
		Результат.СчетУчетаТары             = Выборка.СчетУчетаРасчетовПоТареСПоставщиком;
		Результат.СчетУчетаТарыПокупателя   = Выборка.СчетУчетаРасчетовПоТареСПокупателем;

		Результат.СчетУчетаДоходовПоТаре  = Выборка.СчетУчетаДоходовПоТаре;
		Результат.СчетУчетаРасходовПоТаре = Выборка.СчетУчетаРасходовПоТаре;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

// Процедура подготовки таблицы значений для целей приобретения и реализации
Процедура ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаЗначений, СтруктураШапкиДокумента, ВключитьНДСВОсновнуюСумму, ВалютаРегламентированногоУчета = "") Экспорт
	
	Перем СуммаВключаетНДС,ВидРасчетовПоДоговору;
	
	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	ЕстьНДС    = Не(ТаблицаЗначений.Колонки.Найти("НДС")=Неопределено);
	ЕстьСтавкаНДС    = Не(ТаблицаЗначений.Колонки.Найти("СтавкаНДС")=Неопределено);
	ЕстьВалюта = СтруктураШапкиДокумента.Свойство("ВалютаДокумента");
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ГТДИмпорт") Тогда
		// Для ГТДИмпорт передается специфическая структура таблицы, суммы НДС разделены по строкам 
		// с суммами без НДС. Расчет может производиться только пересчетом по курсу.
		РасчетСуммыНДСПоСтавке = Ложь;
	ИначеЕсли ЕстьВалюта и ЕстьНДС и ЕстьСтавкаНДС
		и Не(СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРегламентированногоУчета) 
		Тогда
		РасчетСуммыНДСПоСтавке =  УчетНДС.РасчетНДСвРубляхПоСтавкеДокумента(СтруктураШапкиДокумента.Дата);
	Иначе
		РасчетСуммыНДСПоСтавке = Ложь;
	КонецЕсли; 
	
	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС", СуммаВключаетНДС);
	СуммаВключаетНДС = (СуммаВключаетНДС = Истина);
	
	Если СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента") тогда
		ВидРасчетовПоДоговору = ОпределениеВидаРасчетовПоПараметрамДоговора(СтруктураШапкиДокумента.ДоговорКонтрагента,ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	//Дополним колонки ТЗ при необходимости
	СтруктураОбязательныхКолонок = Новый Структура("Сумма"+?(ЕстьНДС,",НДС,СуммаБезНДС","")+?(ЕстьВалюта,",СуммаВал"+?(ЕстьНДС,",НДСВал,СуммаБезНДСВал",""),""));
	
	СтруктураОбязательныхКолонок.Вставить("СуммаБУ");
	Если ЕстьНДС Тогда
		СтруктураОбязательныхКолонок.Вставить("СуммаБУБезНДС");
	КонецЕсли;
	
	Для каждого Колонка Из СтруктураОбязательныхКолонок Цикл
		
		Если ТаблицаЗначений.Колонки.Найти(Колонка.Ключ) = Неопределено тогда
			ТаблицаЗначений.Колонки.Добавить(Колонка.Ключ, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		КонецЕсли;
		
	КонецЦикла;
	
	//Дополним колонки ТЗ при необходимости нечисловыми полями
	Если ТаблицаЗначений.Колонки.Найти("СчетУчетаЦенности") = Неопределено тогда
		ТаблицаЗначений.Колонки.Добавить("СчетУчетаЦенности");
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("ВидЦенности") = Неопределено тогда
		ТаблицаЗначений.Колонки.Добавить("ВидЦенности");
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Ценность") = Неопределено тогда
		ТаблицаЗначений.Колонки.Добавить("Ценность");
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Тара") = Неопределено тогда
		ТаблицаЗначений.Колонки.Добавить("Тара", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН 
		И (СтруктураШапкиДокумента.ВидДокумента = "ОтчетОРозничныхПродажах"
		ИЛИ СтруктураШапкиДокумента.ВидДокумента = "ОказаниеУслуг"
		ИЛИ (СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента")
		И (СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		ИЛИ СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером))) Тогда
		
		НетКолонкиДоходЕНВД = (ТаблицаЗначений.Колонки.Найти("ЭтоДоходЕНВД") = Неопределено);
		Если НетКолонкиДоходЕНВД Тогда
			
			ТаблицаЗначений.Колонки.Добавить("ЭтоДоходЕНВД", Новый ОписаниеТипов("Булево"));
			
			ЕстьСчетДоходовВТаблице = ТаблицаЗначений.Колонки.Найти("СчетДоходов") <> Неопределено;
			Если ЕстьСчетДоходовВТаблице Тогда
				МассивСчетовЕНВД = НалоговыйУчетУСН.МассивСчетовВыручкиЕНВД();
				Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
					СтрокаТаблицы.ЭтоДоходЕНВД = (МассивСчетовЕНВД.Найти(СтрокаТаблицы.СчетДоходов) <> Неопределено);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		НетКолонкиДоходКомитента = (ТаблицаЗначений.Колонки.Найти("ЭтоДоходКомитента") = Неопределено);
		Если НетКолонкиДоходКомитента Тогда
			
			ТаблицаЗначений.Колонки.Добавить("ЭтоДоходКомитента", Новый ОписаниеТипов("Булево"));
			
			ЕстьСчетУчетаВТаблице = ТаблицаЗначений.Колонки.Найти("СчетУчета") <> Неопределено;
			
			Если ЕстьСчетУчетаВТаблице Тогда
				МассивСчетовКомиссия = Новый Массив;
				Выборка = ПланыСчетов.Хозрасчетный.Выбрать(ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию);
				Пока Выборка.Следующий() Цикл
					МассивСчетовКомиссия.Добавить(Выборка.Ссылка);
				КонецЦикла;
				Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
					СтрокаТаблицы.ЭтоДоходКомитента = (МассивСчетовКомиссия.Найти(СтрокаТаблицы.СчетУчета) <> Неопределено);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Определим суммы по документу (Сумму без НДС и корректную основную сумму)
	Если ЕстьНДС тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма       - ?(СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
			Если РасчетСуммыНДСПоСтавке Тогда
				СтрокаТаблицы.Сумма       = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
			Иначе
				СтрокаТаблицы.Сумма       = СтрокаТаблицы.СуммаБезНДС + ?(ВключитьНДСВОсновнуюСумму, СтрокаТаблицы.НДС, 0);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьВалюта тогда
		
		// Заполним валютные колонки суммами документа
		Для каждого Колонка Из СтруктураОбязательныхКолонок Цикл
			
			Если Прав(Колонка.Ключ, 3) = "Вал" Тогда
				ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку(Лев(Колонка.Ключ, СтрДлина(Колонка.Ключ) - 3)), Колонка.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ (СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРегламентированногоУчета) Тогда
			
			Если не СтруктураШапкиДокумента.Свойство("КурсДокумента") или не СтруктураШапкиДокумента.Свойство("КратностьДокумента") тогда
				КоэффициентПересчета=1;
			ИначеЕсли Число(СтруктураШапкиДокумента.КурсДокумента) = 0 или Число(СтруктураШапкиДокумента.КратностьДокумента)=0 тогда
				КоэффициентПересчета=1;
			Иначе
				КоэффициентПересчета = СтруктураШапкиДокумента.КурсДокумента/СтруктураШапкиДокумента.КратностьДокумента;
			КонецЕсли;
			
			//Распределение суммы по таблице
			СуммаРег = Окр(ТаблицаЗначений.Итог("СуммаВал")* КоэффициентПересчета,2);
			
			РаспределениеРег = ОбщегоНазначения.РаспределитьПропорционально(СуммаРег,ТаблицаЗначений.выгрузитьКолонку("Сумма"));
			Если Не РаспределениеРег = Неопределено Тогда
				ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег,"Сумма");
			КонецЕсли; 
			
			Если ЕстьНДС Тогда
				Если РасчетСуммыНДСПоСтавке Тогда
					Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
						Если СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
							СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ДокументОтгрузки.Дата);					
							// Выделение суммы НДС, Расчет суммы без НДС
							Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
								
								ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
								Если СтрокаТаблицы.НДС = 0 Тогда
									СтрокаТаблицы.НДС = 0;
								Иначе
									СтрокаТаблицы.НДС = (СтрокаТаблицы.СуммаВал * ЗначениеСтавкиНДС /(100 + ЗначениеСтавкиНДС)) * СтруктураКурса.Курс/СтруктураКурса.Кратность;
								КонецЕсли;
								СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС;
								
							КонецЦикла;
							НДСРег = ТаблицаЗначений.Итог("НДС");
							
							// Корректировка таблицы в случае если не ВключитьНДСВОсновнуюСумму
							Если НЕ ВключитьНДСВОсновнуюСумму Тогда
								ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"),"Сумма");
								ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДСВал"),"СуммаВал");
							КонецЕсли;
						Иначе
							// Выделение суммы НДС, Расчет суммы без НДС
							Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
								ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
								Если СтрокаТаблицы.НДС = 0 Тогда
									СтрокаТаблицы.НДС = 0;
								Иначе
									СтрокаТаблицы.НДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаТаблицы.Сумма * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
								КонецЕсли;
								
								СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС;
							КонецЦикла;
							НДСРег = ТаблицаЗначений.Итог("НДС");
							
							// Корректировка таблицы в случае если не ВключитьНДСВОсновнуюСумму
							Если НЕ ВключитьНДСВОсновнуюСумму Тогда
								ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"),"Сумма");
								ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДСВал"),"СуммаВал");
							КонецЕсли;							
						КонецЕсли;	
                    Иначе
						// Выделение суммы НДС, Расчет суммы без НДС
						Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
							ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
							Если СтрокаТаблицы.НДС = 0 Тогда
								СтрокаТаблицы.НДС = 0;
							Иначе
								СтрокаТаблицы.НДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаТаблицы.Сумма * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
							КонецЕсли;
							
							СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС;
						КонецЦикла;
						НДСРег = ТаблицаЗначений.Итог("НДС");
						
						// Корректировка таблицы в случае если не ВключитьНДСВОсновнуюСумму
						Если НЕ ВключитьНДСВОсновнуюСумму Тогда
							ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"),"Сумма");
							ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДСВал"),"СуммаВал");
						КонецЕсли; 
                    КонецЕсли; 
				Иначе
					НДСРег			 = Окр(ТаблицаЗначений.Итог("НДСВал") * КоэффициентПересчета,2);
					//Распределение суммы по таблице
					РаспределениеРег = ОбщегоНазначения.РаспределитьПропорционально(НДСРег,ТаблицаЗначений.выгрузитьКолонку("НДС"));
					Если Не РаспределениеРег = Неопределено Тогда
						ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег,"НДС");
					КонецЕсли; 
					
					//Расчет суммы без НДС
					Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл
						СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(ВключитьНДСВОсновнуюСумму, СтрокаТаблицы.НДС, 0);
					КонецЦикла;
				КонецЕсли; 
			КонецЕсли;
		Иначе
			
			//Документ в национальной валюте
			Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах 
				Или ((ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОтражениеНДСКВычету")
				Или ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОтражениеНачисленияНДС"))
				И СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета) тогда
				
				//Необходимо определить сумму расчетов с контрагентом в валюте договора
				Если не СтруктураШапкиДокумента.Свойство("КурсВзаиморасчетов") или не СтруктураШапкиДокумента.Свойство("КратностьВзаиморасчетов") тогда
					КоэффициентПересчета=1;
				ИначеЕсли Число(СтруктураШапкиДокумента.КурсВзаиморасчетов) = 0 или Число(СтруктураШапкиДокумента.КратностьВзаиморасчетов) = 0 тогда
					КоэффициентПересчета = 1;
				Иначе
					КоэффициентПересчета = СтруктураШапкиДокумента.КратностьВзаиморасчетов / СтруктураШапкиДокумента.КурсВзаиморасчетов;
				КонецЕсли;
				
				СуммаВал = Окр(ТаблицаЗначений.Итог("Сумма")* КоэффициентПересчета,2);
				//Распределение суммы по таблице
				РаспределениеВал = ОбщегоНазначения.РаспределитьПропорционально(СуммаВал,ТаблицаЗначений.ВыгрузитьКолонку("СуммаВал"));
				Если Не РаспределениеВал = Неопределено Тогда
					ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеВал,"СуммаВал");
				КонецЕсли; 
				
				
				Если ЕстьНДС тогда
					
					НДСВал			 = Окр(ТаблицаЗначений.Итог("НДС") * КоэффициентПересчета,2);
					//Распределение суммы по таблице
					РаспределениеВал = ОбщегоНазначения.РаспределитьПропорционально(НДСВал,ТаблицаЗначений.выгрузитьКолонку("НДСВал"));
					Если Не РаспределениеВал = Неопределено Тогда
						ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеВал,"НДСВал");
					КонецЕсли; 
					
					//Расчет суммы без НДС
					Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл
						СтрокаТаблицы.СуммаБезНДСВал = СтрокаТаблицы.СуммаВал - ?(ВключитьНДСВОсновнуюСумму, СтрокаТаблицы.НДСВал, 0);
					КонецЦикла;
					
					
				КонецЕсли;
				
			КонецЕсли
			
		КонецЕсли;
		
	КонецЕсли;
	
	// На этапе подготовки таблицы суммы для БУ совпадают с суммами для остальных видов учета (НУ, НДС...).
	// При зачете авансов в иностранной валюте в 2008 году суммы БУ будут корректироваться с учетом курсов зачтенных авансов,
	// а суммы для других видов учета остаются прежними
	
	ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("Сумма"),       "СуммаБУ");
	Если ЕстьНДС Тогда
		ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"), "СуммаБУБезНДС");
	КонецЕсли;
	
	ТаблицаЗначений.Колонки.Добавить("СуммаНУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	Если ЕстьНДС Тогда
		ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБУБезНДС"), "СуммаНУ");
	Иначе
		ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБУ"), "СуммаНУ");
	КонецЕсли;
	
	УчетНДС.ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС(СтруктураШапкиДокумента, ТаблицаЗначений);
	
КонецПроцедуры

Процедура УпорядочитьТаблицуПоДокументу(ТаблицаЗначений, КолонкаДокумента, КолонкаДаты = "ДатаДокументаРасчетов") Экспорт
	
	Если ТаблицаЗначений.Колонки.Найти(КолонкаДаты) = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить(КолонкаДаты, ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	КэшПоТипам = Новый Соответствие;
	
	Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) тогда 
			Продолжить;
		КонецЕсли;
		
		ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы[КолонкаДокумента]);
		Если Документы.ТипВсеСсылки().СодержитТип(ТипТекущегоДокумента)  тогда
			
			МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
			Если МассивТипа = Неопределено Тогда
				МассивТипа = Новый Массив;
				КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
			КонецЕсли;
			
			МассивТипа.Добавить(СтрокаТаблицы[КолонкаДокумента]);
		КонецЕсли;
		
	КонецЦикла;
	
	Если КэшПоТипам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначений.Колонки.Добавить("ДокументДляУпорядочивания", Документы.ТипВсеСсылки());
	
	ТаблицаЗначений.Индексы.Добавить(КолонкаДокумента);
	
	Запрос = новый запрос;

	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		ИмяМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ).Имя;

		Запрос.Текст = Запрос.Текст+
		?(Запрос.Текст="","",
		" 
		|Объединить все")+
		"
		|	ВЫБРАТЬ
		|	Док.Ссылка Как Ссылка,
		|	Док.Дата
		|	ИЗ
		|		Документ."+ИмяМетаданных+" КАК Док
		|	Где Док.ссылка в  (&ДокументыТипа_"+ИмяМетаданных+")";
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДокумента = ТаблицаЗначений.Найти(Выборка.Ссылка, КолонкаДокумента);
		СтрокаДокумента.ДокументДляУпорядочивания = Выборка.Ссылка;
		СтрокаДокумента[КолонкаДаты] = Выборка.Дата;
	КонецЦикла;
	
	СписокКолонок = КолонкаДаты + ", ДокументДляУпорядочивания";
	
	ТаблицаЗначений.Сортировать(СписокКолонок);
	
	ТаблицаЗначений.Колонки.Удалить(ТаблицаЗначений.Колонки["ДокументДляУпорядочивания"]);
	
КонецПроцедуры

Функция ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента, ВидОперации = Неопределено) Экспорт

	ВидДействийДокумента = Новый Структура("Направление, РасчетыВозврат");
	ВидыДокументов       = Новый Соответствие();

	ВидыДокументов.Вставить("ПоступлениеТоваровУслуг",       "Поступление");
	ВидыДокументов.Вставить("ПоступлениеДопРасходов",        "Поступление");
	ВидыДокументов.Вставить("ПоступлениеНМА",                "Поступление");
	ВидыДокументов.Вставить("ВозвратТоваровОтПокупателя",    "Поступление");
	ВидыДокументов.Вставить("ПоступлениеИзПереработки",      "Поступление");
	ВидыДокументов.Вставить("ГТДИмпорт",                     "Поступление");
	ВидыДокументов.Вставить("ПоступлениеДенежныхДокументов", "Поступление");

	ВидыДокументов.Вставить("РеализацияУслугПоПереработке",       "Выбытие");
	ВидыДокументов.Вставить("АктОбОказанииПроизводственныхУслуг", "Выбытие");
	ВидыДокументов.Вставить("ОтчетКомитентуОПродажах",            "Выбытие");
	ВидыДокументов.Вставить("ПередачаНМА",                        "Выбытие");
	ВидыДокументов.Вставить("ПередачаОС",                         "Выбытие");
	ВидыДокументов.Вставить("ВозвратТоваровПоставщику",           "Выбытие");
	ВидыДокументов.Вставить("ВыдачаДенежныхДокументов",           "Выбытие");

	Если ВидДокумента = "ОтчетКомиссионераОПродажах" тогда 
		Если ВидОперации= "КомиссионноеВознаграждение" тогда
			ВидыДокументов.Вставить("ОтчетКомиссионераОПродажах", "Поступление");
		Иначе
			ВидыДокументов.Вставить("ОтчетКомиссионераОПродажах", "Выбытие");
		КонецЕсли;
	КонецЕсли;

	Если ВидДокумента = "РеализацияТоваровУслуг" тогда 
		Если ВидОперации= "КомиссионнаяВыручка" тогда
			ВидыДокументов.Вставить("РеализацияТоваровУслуг", "Поступление");
		Иначе
			ВидыДокументов.Вставить("РеализацияТоваровУслуг", "Выбытие");
		КонецЕсли;
	КонецЕсли;

	Если ВидДокумента = "ОтчетОРозничныхПродажах" тогда 
		Если ВидОперации= "КомиссионнаяВыручка" тогда
			ВидыДокументов.Вставить("ОтчетОРозничныхПродажах", "Поступление");
		Иначе
			ВидыДокументов.Вставить("ОтчетОРозничныхПродажах", "Выбытие");
		КонецЕсли;
	КонецЕсли;
	
	ВидыДокументов.Вставить("ОказаниеУслуг", "Выбытие");
	
	ВидДействийДокумента.Вставить("Направление",ВидыДокументов[ВидДокумента]);

	ВидОперацииРасчет  = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;

	Если ЗначениеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		РасчетВозвратПоВидуОпераций = Новый Соответствие();

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия,      ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование,         ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства, ВидОперацииРасчет);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия,			ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.Оборудование,				ВидОперацииРасчет);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия,	ВидОперацииВозврат);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование,		ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия,		ВидОперацииВозврат);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование,		ВидОперацииВозврат);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика, ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику,            ВидОперацииВозврат);
		
		ВидДействийДокумента.Вставить("РасчетыВозврат", РасчетВозвратПоВидуОпераций[ВидОперации]);

	Иначе

		Если    (ВидДокумента = "РеализацияУслугПоПереработке")
			или (ВидДокумента = "АктОбОказанииПроизводственныхУслуг")
			или (ВидДокумента = "РеализацияТоваровУслуг")
			или (ВидДокумента = "ПоступлениеИзПереработки")
			или (ВидДокумента = "ОтчетКомиссионераОПродажах")
			или (ВидДокумента = "ОтчетКомитентуОПродажах")
			или (ВидДокумента = "ПоступлениеНМА")
			или (ВидДокумента = "ПередачаНМА")
			или (ВидДокумента = "ПередачаОС") 
			или (ВидДокумента = "ПоступлениеДопРасходов") 
			
			тогда

			ВидДействийДокумента.Вставить("РасчетыВозврат",ВидОперацииРасчет);
			
		КонецЕсли;

	КонецЕсли;

	Возврат ВидДействийДокумента;

КонецФункции

Процедура РаспределитьКорректировкуПриРасчетахВУсловныхЕдиницах(СуммаКорректировки, ТаблицыДокумента, СуммаВключаетНДС, Отказ, Заголовок) Экспорт

	Если СуммаКорректировки = 0 тогда
		Возврат;
	КонецЕсли;

	//Определим суммы по каждой из переданных таблиц значений
	СуммыПоТаблицамДокумента = Новый ТаблицаЗначений();
	СуммыПоТаблицамДокумента.Колонки.Добавить("ИмяТаблицы");
	СуммыПоТаблицамДокумента.Колонки.Добавить("СуммаСНДС",     ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	СуммыПоТаблицамДокумента.Колонки.Добавить("СуммаБезНДС",   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	СуммыПоТаблицамДокумента.Колонки.Добавить("НДС",           ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	СуммыПоТаблицамДокумента.Колонки.Добавить("Корректировка", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого ТекущаяТаблица Из ТаблицыДокумента Цикл

		СтрокаТаблицы = СуммыПоТаблицамДокумента.Добавить();

		СтрокаТаблицы.ИмяТаблицы = ТекущаяТаблица.Ключ;
		СтрокаТаблицы.СуммаСНДС  = ТекущаяТаблица.Значение.Итог("Сумма");

		Если НЕ ТекущаяТаблица.Значение.Колонки.Найти("НДС") = Неопределено тогда

			СтрокаТаблицы.СуммаБезНДС = ТекущаяТаблица.Значение.Итог("СуммаБезНДС");
			СтрокаТаблицы.НДС         = ТекущаяТаблица.Значение.Итог("НДС");

			Если НЕ СуммаВключаетНДС тогда
				СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаСНДС+ТекущаяТаблица.Значение.Итог("НДС");
			КонецЕслИ;

		Иначе
			СтрокаТаблицы.СуммаБезНДС = ТекущаяТаблица.Значение.Итог("Сумма");

		КонецЕсли;

	КонецЦикла;

	//Распределим корректировку по таблицам значений
	СуммаСНДСКРаспределению = СуммаКорректировки + СуммыПоТаблицамДокумента.Итог("СуммаСНДС");

	Если СуммаСНДСКРаспределению = 0 тогда
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка в распределении корректировок при зачете аванса по расчетам в условных единицах.", Отказ, Заголовок);
		Возврат;
	КонецЕсли;

	НДСКРаспределению    = 0;
	БезНДСКРаспределению = 0;

	Если Не СуммыПоТаблицамДокумента.Итог("НДС") = 0 тогда
		НДСКРаспределению = Окр(СуммаСНДСКРаспределению * СуммыПоТаблицамДокумента.Итог("НДС") / СуммыПоТаблицамДокумента.Итог("СуммаСНДС"), 2);
	КонецЕсли;

	БезНДСКРаспределению = СуммаСНДСКРаспределению - НДСКРаспределению;

	Если НЕ БезНДСКРаспределению = 0 тогда
		НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(БезНДСКРаспределению,СуммыПоТаблицамДокумента.ВыгрузитьКолонку("СуммаБезНДС"));
		СуммыПоТаблицамДокумента.ЗагрузитьКолонку(НовыеСуммы,"СуммаБезНДС");
	КонецЕсли;

	Если НЕ НДСКРаспределению = 0 тогда
		НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(НДСКРаспределению,СуммыПоТаблицамДокумента.ВыгрузитьКолонку("НДС"));
		СуммыПоТаблицамДокумента.ЗагрузитьКолонку(НовыеСуммы,"НДС");
	КонецЕсли;

	Для каждого СтрокаТаблицы Из СуммыПоТаблицамДокумента Цикл
		СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
	КонецЦикла;

	//Распределим корректировку в пределах каждой таблицы значений
	Для каждого СтрокаКРаспределению из СуммыПоТаблицамДокумента Цикл

		ТаблицаЗначений     = ТаблицыДокумента[СтрокаКРаспределению.ИмяТаблицы];
		СуммаКРаспределению = СтрокаКРаспределению[?(СуммаВключаетНДС,"СуммаСНДС","СуммаБезНДС")];

		Если СуммаКРаспределению = 0 тогда
			продолжить;
		КонецЕсли;

		Если не СтрокаКРаспределению.СуммаБезНДС = 0 тогда
			НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(СтрокаКРаспределению.СуммаБезНДС, ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"));
			ТаблицаЗначений.ЗагрузитьКолонку(НовыеСуммы,"СуммаБезНДС");
		КонецЕсли;
		
		Если НЕ СтрокаКРаспределению.НДС = 0 тогда
			НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(СтрокаКРаспределению.НДС,ТаблицаЗначений.ВыгрузитьКолонку("НДС"));
			ТаблицаЗначений.ЗагрузитьКолонку(НовыеСуммы,"НДС");
		КонецЕсли;

		Если не СуммаВключаетНДС тогда
			ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"), "Сумма");
		Иначе
			Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
				СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
			КонецЦикла;
		КонецЕсли;

		// Суммы проводок БУ при расчетах в условных единицах не отличаются от сумм по другим видам учета
		ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("Сумма"), "СуммаБУ");
		ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"), "СуммаНУ");
		ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"), "СуммаБУБезНДС");

	КонецЦикла;
	
Конецпроцедуры

Процедура РаспределитьКорректировкуПриРасчетахВВалюте(СуммаКорректировки, ТаблицыДокумента, СуммаВключаетНДС, Отказ, Заголовок) Экспорт

	Если СуммаКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;

	//Определим суммы по каждой из переданных таблиц значений
	
	СуммыПоТаблицамДокумента = Новый ТаблицаЗначений();
	СуммыПоТаблицамДокумента.Колонки.Добавить("ИмяТаблицы");
	СуммыПоТаблицамДокумента.Колонки.Добавить("СуммаБУсНДС",     ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	СуммыПоТаблицамДокумента.Колонки.Добавить("СуммаБУбезНДС",   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	СуммыПоТаблицамДокумента.Колонки.Добавить("НДС",             ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого ТекущаяТаблица Из ТаблицыДокумента Цикл

		СтрокаТаблицы = СуммыПоТаблицамДокумента.Добавить();

		СтрокаТаблицы.ИмяТаблицы  = ТекущаяТаблица.Ключ;
		СтрокаТаблицы.СуммаБУсНДС = ТекущаяТаблица.Значение.Итог("СуммаБУ");
		
		Если НЕ ТекущаяТаблица.Значение.Колонки.Найти("НДС") = Неопределено Тогда

			СтрокаТаблицы.СуммаБУбезНДС = ТекущаяТаблица.Значение.Итог("СуммаБУбезНДС");
			СтрокаТаблицы.НДС           = ТекущаяТаблица.Значение.Итог("НДС");

			Если НЕ СуммаВключаетНДС Тогда
				СтрокаТаблицы.СуммаБУсНДС = СтрокаТаблицы.СуммаБУсНДС+ТекущаяТаблица.Значение.Итог("НДС");
			КонецЕслИ;

		Иначе
			
			СтрокаТаблицы.СуммаБУбезНДС = СтрокаТаблицы.СуммаБУсНДС;

		КонецЕсли;

	КонецЦикла;

	//Распределим общую сумму корректировку на части, соответствующие каждой из переданных таблиц значений
	
	СуммаСНДСкРаспределению = СуммаКорректировки + СуммыПоТаблицамДокумента.Итог("СуммаБУсНДС");

	Если СуммаСНДСкРаспределению = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка в распределении корректировок при зачете аванса по расчетам в валюте.", Отказ, Заголовок);
		Возврат;
	КонецЕсли;

	БезНДСкРаспределению = СуммаСНДСкРаспределению - СуммыПоТаблицамДокумента.Итог("НДС");

	НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(БезНДСкРаспределению,СуммыПоТаблицамДокумента.ВыгрузитьКолонку("СуммаБУбезНДС"));
	СуммыПоТаблицамДокумента.ЗагрузитьКолонку(НовыеСуммы, "СуммаБУбезНДС");

	Для каждого СтрокаТаблицы Из СуммыПоТаблицамДокумента Цикл
		СтрокаТаблицы.СуммаБУсНДС = СтрокаТаблицы.СуммаБУбезНДС + СтрокаТаблицы.НДС;
	КонецЦикла;

	//Распределим каждую часть суммы корректировки по строкам соответствующей таблицы значений
	
	Для каждого СтрокаКРаспределению из СуммыПоТаблицамДокумента Цикл

		ТаблицаЗначений = ТаблицыДокумента[СтрокаКРаспределению.ИмяТаблицы];
		
		Если СуммаВключаетНДС Тогда
			СуммаКРаспределению = СтрокаКРаспределению.СуммаБУсНДС;
		Иначе
			СуммаКРаспределению = СтрокаКРаспределению.СуммаБУбезНДС;
		КонецЕсли;
		Если СуммаКРаспределению = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ТекущаяТаблица.Значение.Колонки.Найти("НДС") = Неопределено Тогда
			
			Если СтрокаКРаспределению.СуммаБУбезНДС <> 0 Тогда
				НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(СтрокаКРаспределению.СуммаБУбезНДС, ТаблицаЗначений.ВыгрузитьКолонку("СуммаБУбезНДС"));
				ТаблицаЗначений.ЗагрузитьКолонку(НовыеСуммы, "СуммаБУбезНДС");
			КонецЕсли;
			
			Если СуммаВключаетНДС Тогда
				Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
					СтрокаТаблицы.СуммаБУ = СтрокаТаблицы.СуммаБУбезНДС + СтрокаТаблицы.НДС;
				КонецЦикла;
			Иначе
				ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБУбезНДС"), "СуммаБУ");
			КонецЕсли;
			
		Иначе
			
			Если СтрокаКРаспределению.СуммаБУбезНДС <> 0 Тогда
				НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(СтрокаКРаспределению.СуммаБУбезНДС, ТаблицаЗначений.ВыгрузитьКолонку("СуммаБУ"));
				ТаблицаЗначений.ЗагрузитьКолонку(НовыеСуммы, "СуммаБУ");
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьКорректировкуПриРасчетахВВалютеНалоговыйАгент(СуммаКорректировки, ТаблицыДокумента, СуммаВключаетНДС, Отказ, Заголовок) Экспорт

	Если СуммаКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;

	//Определим суммы по каждой из переданных таблиц значений
	
	СуммыПоТаблицамДокумента = Новый ТаблицаЗначений();
	СуммыПоТаблицамДокумента.Колонки.Добавить("ИмяТаблицы");
	СуммыПоТаблицамДокумента.Колонки.Добавить("СуммаБУсНДС",     ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	СуммыПоТаблицамДокумента.Колонки.Добавить("СуммаБУбезНДС",   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	СуммыПоТаблицамДокумента.Колонки.Добавить("НДС",             ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого ТекущаяТаблица Из ТаблицыДокумента Цикл

		СтрокаТаблицы = СуммыПоТаблицамДокумента.Добавить();

		СтрокаТаблицы.ИмяТаблицы  = ТекущаяТаблица.Ключ;
		СтрокаТаблицы.СуммаБУсНДС = ТекущаяТаблица.Значение.Итог("СуммаБУ");
		
		Если НЕ ТекущаяТаблица.Значение.Колонки.Найти("НДС") = Неопределено Тогда

			СтрокаТаблицы.СуммаБУбезНДС = ТекущаяТаблица.Значение.Итог("СуммаБУбезНДС");
			СтрокаТаблицы.НДС           = ТекущаяТаблица.Значение.Итог("НДС");

			Если НЕ СуммаВключаетНДС Тогда
				СтрокаТаблицы.СуммаБУсНДС = СтрокаТаблицы.СуммаБУсНДС + ТекущаяТаблица.Значение.Итог("НДС");
			КонецЕслИ;

		Иначе
			
			СтрокаТаблицы.СуммаБУбезНДС = СтрокаТаблицы.СуммаБУсНДС;

		КонецЕсли;

	КонецЦикла;

	//Распределим общую сумму корректировку на части, соответствующие каждой из переданных таблиц значений
	
	БезНДСкРаспределению = СуммаКорректировки + СуммыПоТаблицамДокумента.Итог("СуммаБУбезНДС");

	НДСКРаспределению = Окр(БезНДСкРаспределению * СуммыПоТаблицамДокумента.Итог("НДС") / СуммыПоТаблицамДокумента.Итог("СуммаБУбезНДС"), 2);

	НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(БезНДСкРаспределению,СуммыПоТаблицамДокумента.ВыгрузитьКолонку("СуммаБУбезНДС"));
	Если НовыеСуммы <> Неопределено Тогда
		СуммыПоТаблицамДокумента.ЗагрузитьКолонку(НовыеСуммы, "СуммаБУбезНДС");
	КонецЕсли;

	НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(НДСкРаспределению,СуммыПоТаблицамДокумента.ВыгрузитьКолонку("НДС"));
	Если НовыеСуммы <> Неопределено Тогда
		СуммыПоТаблицамДокумента.ЗагрузитьКолонку(НовыеСуммы, "НДС");
	КонецЕсли;	
	
	Для каждого СтрокаТаблицы Из СуммыПоТаблицамДокумента Цикл
		СтрокаТаблицы.СуммаБУсНДС = СтрокаТаблицы.СуммаБУбезНДС + СтрокаТаблицы.НДС;
	КонецЦикла;

	//Распределим каждую часть суммы корректировки по строкам соответствующей таблицы значений
	
	Для каждого СтрокаКРаспределению из СуммыПоТаблицамДокумента Цикл

		ТаблицаЗначений = ТаблицыДокумента[СтрокаКРаспределению.ИмяТаблицы];
		
		Если СуммаВключаетНДС Тогда
			СуммаКРаспределению = СтрокаКРаспределению.СуммаБУсНДС;
		Иначе
			СуммаКРаспределению = СтрокаКРаспределению.СуммаБУбезНДС;
		КонецЕсли;
		Если СуммаКРаспределению = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ СтрокаКРаспределению.НДС = 0 тогда
			НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(СтрокаКРаспределению.НДС,ТаблицаЗначений.ВыгрузитьКолонку("НДС"));
			ТаблицаЗначений.ЗагрузитьКолонку(НовыеСуммы,"НДС");
		КонецЕсли;
		
		Если НЕ ТекущаяТаблица.Значение.Колонки.Найти("НДС") = Неопределено Тогда
			
			Если СтрокаКРаспределению.СуммаБУбезНДС <> 0 Тогда
				НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(СтрокаКРаспределению.СуммаБУбезНДС, ТаблицаЗначений.ВыгрузитьКолонку("СуммаБУбезНДС"));
				ТаблицаЗначений.ЗагрузитьКолонку(НовыеСуммы, "СуммаБУбезНДС");
			КонецЕсли;
			
			Если СуммаВключаетНДС Тогда
				Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
					СтрокаТаблицы.СуммаБУ = СтрокаТаблицы.СуммаБУбезНДС + СтрокаТаблицы.НДС;
				КонецЦикла;
			Иначе
				ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБУбезНДС"), "СуммаБУ");
			КонецЕсли;
			
			
		Иначе
			
			Если СтрокаКРаспределению.СуммаБУбезНДС <> 0 Тогда
				НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(СтрокаКРаспределению.СуммаБУбезНДС, ТаблицаЗначений.ВыгрузитьКолонку("СуммаБУ"));
				ТаблицаЗначений.ЗагрузитьКолонку(НовыеСуммы, "СуммаБУ");
			КонецЕсли;
						
		КонецЕсли;

		ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБУБезНДС"), "СуммаБезНДС");
		
	КонецЦикла;
	
КонецПроцедуры


#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры печати для валютных расчетов

// Печатает справку-расчет формирования рублевой стоимости валютного документа
//
// Параметры:
//  ДокументСсылка - ссылка на документ, справку по которому печатаем
//
Процедура НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(ДокументСсылка) экспорт

	СправкаРасчет          = Отчеты.СправкаРасчетРублеваяСуммаДокументаВВалюте.Создать();
	СправкаРасчет.Документ = ДокументСсылка;
	СправкаРасчет.СформироватьИВывестиОтчет();

КонецПроцедуры

#КонецЕсли


Функция ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(Знач ВидДокумента,ВидОперации = неопределено) Экспорт

	ВидДействийДокумента = Новый Структура("Направление,РасчетыВозврат");
	ВидыДокументовДДС    = Новый Соответствие();

	ВидыДокументовДДС.Вставить("СписаниеСРасчетногоСчета", "Выбытие");
	ВидыДокументовДДС.Вставить("РасходныйКассовыйОрдер", "Выбытие");
	ВидыДокументовДДС.Вставить("ПоступлениеНаРасчетныйСчет", "Поступление");
	ВидыДокументовДДС.Вставить("ПриходныйКассовыйОрдер", "Поступление");

	ВидыДокументовДДС.Вставить("АвансовыйОтчет", "Выбытие");
	ВидыДокументовДДС.Вставить("ВозвратТоваровПоставщику", "Поступление");
	ВидыДокументовДДС.Вставить("ДокументРасчетовСКонтрагентом", "Поступление");
	
	
	
	ВидОперацииРасчет  = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	
	Если ТипЗнч(ВидДокумента) = Тип("Строка") Тогда
		// Получен непосредственно вид документа
		// Дополнительные действия не требуются
		
		ВидДействийДокумента.Вставить("Направление",ВидыДокументовДДС[ВидДокумента]);
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВидДокумента)) Тогда
		ТипСсылки = ТипЗнч(ВидДокумента);
		// Получена ссылка на документ. Необходимо определить его вид.
	    Для каждого ТекущееЗначениеСоответсвия Из ВидыДокументовДДС Цикл
			Если ТипСсылки = Тип("ДокументСсылка."+ТекущееЗначениеСоответсвия.Ключ) Тогда
				ВидДействийДокумента.Вставить("Направление",ТекущееЗначениеСоответсвия.Значение);
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		// Специфическая обработка
		Если ТипСсылки = Тип("ДокументСсылка.АвансовыйОтчет") тогда
			ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
			Возврат ВидДействийДокумента;
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") тогда
			ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииВозврат);
			Возврат ВидДействийДокумента;
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") тогда
			ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
			Возврат ВидДействийДокумента;
		КонецЕсли;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		РасчетВозвратПоВидуОпераций = Новый Соответствие();

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратПокупателю,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика,ВидОперацииВозврат);

		ВидДействийДокумента.Вставить("РасчетыВозврат",РасчетВозвратПоВидуОпераций[ВидОперации]);

	ИначеЕсли ВидДокумента="АвансовыйОтчет" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
	ИначеЕсли ВидДокумента="ВозвратТоваровПоставщику" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииВозврат);
	ИначеЕсли ВидДокумента="ДокументРасчетовСКонтрагентом" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
	Конецесли;

	Возврат ВидДействийДокумента;

КонецФункции


