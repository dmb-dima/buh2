Функция ПризнаватьДоходыИРасходыПоОперациямПрошлогоГода(Организация, Знач Дата) Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация,,Ложь);
	Если УчетнаяПолитика.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		Возврат УчетнаяПолитика.ПризнаватьДоходыИРасходыПоОперациямПрошлогоГода;
	КонецЕсли;

КонецФункции

Функция ДляПризнанияРасходовНеТребуетсяПолучениеДохода(Организация, Знач Дата) Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация,,Ложь);
	Если УчетнаяПолитика.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		Возврат УчетнаяПолитика.ДляПризнанияРасходовНеТребуетсяПолучениеДохода;
	КонецЕсли;

КонецФункции

Функция МожноПризнатьДоходы(ПризнаватьДоходыИРасходыПоОперациямПрошлогоГода, ДокументОперации, ДатаОперации, Партия = Неопределено) Экспорт
	
	Если ПризнаватьДоходыИРасходыПоОперациямПрошлогоГода Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Год(ДокументОперации.Дата) <> Год(ДатаОперации) Тогда
		Возврат Ложь;
	Иначе
		Если Партия = Неопределено Тогда
			Возврат Истина;
		Иначе
			Если Год(Партия.Дата) < Год(ДатаОперации) Тогда
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

Функция МожноПризнатьРасходы(ДляПризнанияРасходовНеТребуетсяПолучениеДохода,
		ПризнаватьДоходыИРасходыПоОперациямПрошлогоГода, ДокументОперации, ДатаОперации, Партия = Неопределено) Экспорт
	
	Если ДляПризнанияРасходовНеТребуетсяПолучениеДохода Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПризнаватьДоходыИРасходыПоОперациямПрошлогоГода Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Год(ДокументОперации.Дата) <> Год(ДатаОперации) Тогда
		Возврат Ложь;
	Иначе
		Если Партия = Неопределено Тогда
			Возврат Истина;
		Иначе
			Если Год(Партия.Дата) < Год(ДатаОперации) Тогда
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ДатаПервогоДокумента(МассивДокументов) Экспорт
	
	Если МассивДокументов = Неопределено ИЛИ МассивДокументов.Количество() = 0 Тогда
		Дата1 = Дата(1980, 1, 1);
		
	Иначе
		Дата1 = Дата(2100, 1, 1);
	КонецЕсли;
	
	Для Каждого Документ Из МассивДокументов Цикл
		Если Документ.Дата < Дата1 Тогда
			Дата1 = НачалоДня(Документ.Дата);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Дата1;
	
КонецФункции

Функция СформироватьСписокПредпринимателей(Знач Текст = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	
	Если ЗначениеЗаполнено(Текст) Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, Наименование ИЗ Справочник.Организации ГДЕ ЮрФизЛицо = &ФизЛицо И Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""";
		
		Текст = СтрЗаменить(Текст, "~", "~~");
		Текст = СтрЗаменить(Текст, "%", "~%");
		Текст = СтрЗаменить(Текст, "_", "~_");
		Текст = СтрЗаменить(Текст, "[", "~[");
		Текст = СтрЗаменить(Текст, "-", "~-");
		Текст = Текст+"%";
		Запрос.УстановитьПараметр("Текст", Текст);
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, Наименование ИЗ Справочник.Организации ГДЕ ЮрФизЛицо = &ФизЛицо";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Значение = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		Значение.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

Функция РаспределениеПоБазе(ТабИсточникСтрока, Поле1="", Т1 = 2, Поле2="", Т2 = 2, Поле3="", Т3 = 3, База, ПолеБазы, ТабПриемник) Экспорт
	
	ТабВрем = ТабПриемник.СкопироватьКолонки();
	
	Если База <> Неопределено И База.Количество() > 0 Тогда
		МассивКоэф = Новый Массив;
		
		Для НомерСтрокиБазы = 1 По База.Количество() Цикл
			ТабНоваяСтрока = ТабВрем.Добавить();
			ЗаполнитьЗначенияСвойств(ТабНоваяСтрока, ТабИсточникСтрока);
			ТабНоваяСтрока.НоменклатурнаяГруппа2 = База[НомерСтрокиБазы-1].НоменклатурнаяГруппа;
			ТабНоваяСтрока.ХарактерДеятельности2 = База[НомерСтрокиБазы-1].ХарактерДеятельности;
			МассивКоэф.Добавить(База[НомерСтрокиБазы-1][ПолеБазы]);
		КонецЦикла;
		
		Если Поле1 <> "" Тогда
			РаспределенноеПоле1 = ОбщегоНазначения.РаспределитьПропорционально(ТабИсточникСтрока[Поле1], МассивКоэф, Т1);
			Если ЗначениеЗаполнено(РаспределенноеПоле1) Тогда
				ТабВрем.ЗагрузитьКолонку(РаспределенноеПоле1, Поле1);
			КонецЕсли;
		КонецЕсли;
		
		Если Поле2 <> "" Тогда
			РаспределенноеПоле2 = ОбщегоНазначения.РаспределитьПропорционально(ТабИсточникСтрока[Поле2], МассивКоэф, Т2);
			Если ЗначениеЗаполнено(РаспределенноеПоле2) Тогда
				ТабВрем.ЗагрузитьКолонку(РаспределенноеПоле2, Поле2);
			КонецЕсли;
		КонецЕсли;
		
		Если Поле3 <> "" Тогда
			РаспределенноеПоле3 = ОбщегоНазначения.РаспределитьПропорционально(ТабИсточникСтрока[Поле3], МассивКоэф, Т3);
			Если ЗначениеЗаполнено(РаспределенноеПоле3) Тогда
				ТабВрем.ЗагрузитьКолонку(РаспределенноеПоле3, Поле3);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ТабНоваяСтрока = ТабВрем.Добавить();
		ЗаполнитьЗначенияСвойств(ТабНоваяСтрока, ТабИсточникСтрока);
	КонецЕсли;
	
	// Добавим строки таблицы ТабВрем в таблицу ТабПриемник
	Для Каждого ТабСтрока Из ТабВрем Цикл
		ТабНоваяСтрока = ТабПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(ТабНоваяСтрока, ТабСтрока);
	КонецЦикла;
	
	Возврат ТабВрем;
		
КонецФункции

Функция ЕстьДоступныеОрганизацииПредприниматели() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	Запрос.Текст = "
	|Выбрать Разрешенные Ссылка
	|Из Справочник.Организации
	|Где ЮрФизЛицо = &ФизЛицо";
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Функция РеквизитыДокументаОплаты(СтруктураШапкиДокумента) Экспорт
	
	Если СтруктураШапкиДокумента <> Неопределено Тогда
		Если ТипЗнч(СтруктураШапкиДокумента) = Тип("Структура") Тогда
			ВидДокумента = СтруктураШапкиДокумента.ВидДокумента;
			
		Иначе
			ВидДокумента = СтруктураШапкиДокумента.Метаданные().Имя;
		КонецЕсли;
		
		Если ВидДокумента = "АвансовыйОтчет"
			ИЛИ ВидДокумента = "КорректировкаДолга"
			ИЛИ ВидДокумента = "ОтчетОРозничныхПродажах"
			ИЛИ ВидДокумента = "ОтчетКомитентуОПродажах"
			ИЛИ ВидДокумента = "ОтчетКомиссионераОПродажах" Тогда
			
			Возврат РеквизитыДокументаОплатыСтр(ОбщегоНазначения.ПолучитьНомерНаПечать(СтруктураШапкиДокумента), СтруктураШапкиДокумента.Дата);
			
		ИначеЕсли ВидДокумента = "СписаниеСРасчетногоСчета" Тогда
			
			Возврат РеквизитыДокументаОплатыСтр(ОбщегоНазначения.ПолучитьНомерНаПечать(СтруктураШапкиДокумента), СтруктураШапкиДокумента.ДатаВходящегоДокумента);
			
		ИначеЕсли ВидДокумента = "ПриходныйКассовыйОрдер"
			ИЛИ ВидДокумента = "РасходныйКассовыйОрдер" Тогда
			
			Возврат СтруктураШапкиДокумента.Приложение;
			
		ИначеЕсли ВидДокумента = "ПоступлениеНаРасчетныйСчет"
			ИЛИ ВидДокумента = "ДокументРасчетовСКонтрагентом" Тогда
			
			Возврат РеквизитыДокументаОплатыСтр(СтруктураШапкиДокумента.НомерВходящегоДокумента, СтруктураШапкиДокумента.ДатаВходящегоДокумента);
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция РеквизитыДокументаОплатыСтр(Знач Номер, Дата) Экспорт
	
	Номер = СокрЛП(Номер);
	Стр = ?(ЗначениеЗаполнено(Номер), Номер, "");
	Стр = Стр + ?(ЗначениеЗаполнено(Дата), ", " + Формат(Дата, "ДФ=dd.MM.yyyy"), "");
	Возврат Стр;
	
КонецФункции

Функция БазаРаспределения(Организация, Знач мНачГраница, Знач мКонГраница) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачГраница);
	Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ХарактерДеятельности, НоменклатурнаяГруппа, СУММА(ВыручкаОборот - НДСНачисленныйОборот) КАК Доход
	|ИЗ РегистрНакопления.ИПДоходы.Обороты(&НачалоМесяца, &КонецМесяца,, Организация = &Организация)
	|СГРУППИРОВАТЬ ПО ХарактерДеятельности, НоменклатурнаяГруппа";
	
	БазаРаспределения = Запрос.Выполнить().Выгрузить();
	
	Возврат БазаРаспределения;
	
КонецФункции

Функция БазаУточненнаяПоХарактеруИГруппе(БазаРаспределения, НоменклатурнаяГруппа, ХарактерДеятельности) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ХарактерДеятельности) И НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		
		Возврат БазаРаспределения;
		
	КонецЕсли;
	
	УточненнаяБаза = БазаРаспределения.СкопироватьКолонки();
				
	Для Каждого ВидДеятельности Из БазаРаспределения Цикл
		
		Если ЗначениеЗаполнено(НоменклатурнаяГруппа) И (НоменклатурнаяГруппа <> ВидДеятельности.НоменклатурнаяГруппа) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ХарактерДеятельности) Тогда
			Если ХарактерДеятельности = Перечисления.ХарактерДеятельности.ВсеВидыТорговли Тогда
				Если ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.ОптоваяТорговля
					И ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД
					И ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ХарактерДеятельности = Перечисления.ХарактерДеятельности.ВсеВидыТорговлиНеЕНВД Тогда	
				Если ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.ОптоваяТорговля
					И ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ХарактерДеятельности = Перечисления.ХарактерДеятельности.ВсеВидыПроизводстваРаботУслуг Тогда
				Если ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги
					И ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.УслугиЕНВД Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ХарактерДеятельности = Перечисления.ХарактерДеятельности.ВсяДеятельностьНеЕНВД Тогда
				Если ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.ОптоваяТорговля
					И ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги
					И ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД Тогда
													
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ХарактерДеятельности = Перечисления.ХарактерДеятельности.ВсяДеятельностьЕНВД Тогда
				Если ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.УслугиЕНВД
					И ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ХарактерДеятельности <> ВидДеятельности.ХарактерДеятельности Тогда
				
				Продолжить;
				
			КонецЕсли;
		КонецЕсли;	
		
		НоваяСтрокаБазы = УточненнаяБаза.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаБазы, ВидДеятельности);
		
	КонецЦикла;
	
	Возврат УточненнаяБаза;
	
КонецФункции

Функция ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, СчетУчета, СтатьяЗатрат, СчетДоходов, УчетнаяПолитика) Экспорт
	
	Если Не УчетнаяПолитика.ВестиУчетПоВидамДеятельности ИЛИ СчетУчета = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат УчетнаяПолитика.ОсновнойХарактерДеятельности;
	КонецЕсли;
	
	ЭтоПлательщикЕНВД = УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД;
	
	Если СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Товары) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.Товары ИЛИ
		 СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные Тогда
		 
		ВидОперации = Неопределено;
		СтруктураШапкиДокумента.Свойство("ВидОперации", ВидОперации);
		
		Если (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия) или
			 (ВидОперации = "РеализацияТоваров") или
			 (ВидОперации = "КомиссионноеВознаграждение") или
			 (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия) или
			 (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование) или
			 (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах) или
			 (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах) Тогда
			 
			Если НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетДоходов) И ЭтоПлательщикЕНВД Тогда
				
				Возврат Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД;
				
			ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах) или
					  (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах) Тогда	
					  
				Возврат Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД;
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия Тогда
				
				Если (СтруктураШапкиДокумента.СделкаВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах) или
					 (СтруктураШапкиДокумента.СделкаВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах) Тогда
				 
					Возврат Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД;
				КонецЕсли;
			КонецЕсли;

			Возврат Перечисления.ХарактерДеятельности.ОптоваяТорговля;
			
		Иначе
			
			Если УчетнаяПолитика.ОсновнойХарактерДеятельности <> Перечисления.ХарактерДеятельности.ОптоваяТорговля
				И УчетнаяПолитика.ОсновнойХарактерДеятельности <> Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД
				И УчетнаяПолитика.ОсновнойХарактерДеятельности <> Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД Тогда
				
				Возврат Перечисления.ХарактерДеятельности.ОптоваяТорговля;
				
			Иначе
				Возврат УчетнаяПолитика.ОсновнойХарактерДеятельности;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ГотоваяПродукция) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ГотоваяПродукция 
		ИЛИ СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Полуфабрикаты) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.Полуфабрикаты 
		ИЛИ СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная Тогда
		
		Если (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия) или
			 (ВидОперации = "РеализацияТоваров") или
			 (ВидОперации = "КомиссионноеВознаграждение") или
			 (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия) или
			 (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование) или
			 (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах) или
			 (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах) Тогда
			 
			Если СчетДоходов <> Неопределено Тогда 
				Если НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетДоходов) И ЭтоПлательщикЕНВД Тогда
					Возврат Перечисления.ХарактерДеятельности.УслугиЕНВД;
				КонецЕсли;
			КонецЕсли;
			
			Возврат Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги;
			
		Иначе
			Если УчетнаяПолитика.ОсновнойХарактерДеятельности <> Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги
				И УчетнаяПолитика.ОсновнойХарактерДеятельности <> Перечисления.ХарактерДеятельности.УслугиЕНВД Тогда
				
				Возврат Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги;
				
			Иначе
				Возврат УчетнаяПолитика.ОсновнойХарактерДеятельности;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СебестоимостьПродаж) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж Тогда
		
		Если НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетУчета) И ЭтоПлательщикЕНВД Тогда
			Возврат Перечисления.ХарактерДеятельности.УслугиЕНВД;
			
		Иначе
			Возврат Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги;
		КонецЕсли;
		
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ИздержкиОбращения) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ИздержкиОбращения Тогда
		Если СтатьяЗатрат <> Неопределено Тогда
			Если СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД И ЭтоПлательщикЕНВД Тогда
				Возврат Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД;
				
			ИначеЕсли СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД Тогда
				Возврат Перечисления.ХарактерДеятельности.ВсеВидыТорговлиНеЕНВД;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоПлательщикЕНВД Тогда
			Возврат Перечисления.ХарактерДеятельности.ВсеВидыТорговли;
			
		Иначе
			Возврат Перечисления.ХарактерДеятельности.ВсеВидыТорговлиНеЕНВД;
		КонецЕсли;
		
	ИначеЕсли   СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_ ИЛИ
				СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства ИЛИ
				СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства ИЛИ
				СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы ИЛИ
				СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.БракВПроизводстве) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.БракВПроизводстве ИЛИ
				СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасходыНаПродажу) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.РасходыНаПродажу Тогда
				
		Если СтатьяЗатрат <> Неопределено Тогда
			Если СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД И ЭтоПлательщикЕНВД Тогда
				Возврат Перечисления.ХарактерДеятельности.УслугиЕНВД;
				
			ИначеЕсли СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД Тогда
				Возврат Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоПлательщикЕНВД Тогда
			Возврат Перечисления.ХарактерДеятельности.ВсеВидыПроизводстваРаботУслуг;
			
		Иначе
			Возврат Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги;
		КонецЕсли;
		
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы
		ИЛИ СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы Тогда
		
		Если СтатьяЗатрат <> Неопределено Тогда
			Если СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД И ЭтоПлательщикЕНВД Тогда
				Возврат Перечисления.ХарактерДеятельности.ВсяДеятельностьЕНВД;
				
			ИначеЕсли СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД Тогда
				Возврат Перечисления.ХарактерДеятельности.ВсяДеятельностьНеЕНВД;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Перечисления.ХарактерДеятельности.ПустаяСсылка();
		
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов Тогда
		Если СтатьяЗатрат <> Неопределено Тогда		
			ТипСтатьи = ТипЗнч(СтатьяЗатрат.СубконтоЗатрат1);  // СчетБУ
			Если ТипСтатьи = Тип("СправочникСсылка.СтатьиЗатрат") ИЛИ ТипСтатьи = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") ИЛИ ТипСтатьи = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
				Возврат ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, СтатьяЗатрат.СчетЗатрат, СтатьяЗатрат.СубконтоЗатрат1,, УчетнаяПолитика);
				
			Иначе
				Возврат ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, СтатьяЗатрат.СчетЗатрат,,, УчетнаяПолитика);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Реализации прочего имущества, когда пользователь явно указал, что операция относится к ЕНВД.
	Если СчетДоходов <> Неопределено И ЭтоПлательщикЕНВД Тогда
		Если НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетДоходов) Тогда
			
			Если УчетнаяПолитика.ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.ОптоваяТорговля
				ИЛИ УчетнаяПолитика.ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД Тогда
				
				Возврат Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД;
				
			ИначеЕсли УчетнаяПолитика.ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги Тогда
				Возврат Перечисления.ХарактерДеятельности.УслугиЕНВД
			КонецЕсли;
			
		ИначеЕсли СтатьяЗатрат <> Неопределено
			И ТипЗнч(СтатьяЗатрат) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы")
			И СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД Тогда
			
			Если УчетнаяПолитика.ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.ОптоваяТорговля
				ИЛИ УчетнаяПолитика.ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД Тогда
				
				Возврат Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД;
				
			ИначеЕсли УчетнаяПолитика.ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги Тогда
				Возврат Перечисления.ХарактерДеятельности.УслугиЕНВД
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат УчетнаяПолитика.ОсновнойХарактерДеятельности;
	
КонецФункции

Функция НоменклатурнаяГруппаПоОперации(ИскатьВСправочнике = Ложь, Номенклатура,НоменклатурнаяГруппа=неопределено, ВидМПЗ, УчетнаяПолитика) Экспорт
	
	Если НЕ УчетнаяПолитика.ВестиУчетПоВидамДеятельности Тогда
		Возврат УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа;
	КонецЕсли;
	
	Если НоменклатурнаяГруппа <> Неопределено И Номенклатура = Неопределено И ТипЗначенияСоответствуетУказанному(НоменклатурнаяГруппа, 1) Тогда
		Возврат НоменклатурнаяГруппа;
	ИначеЕсли ИскатьВСправочнике Тогда
		Если(ВидМПЗ <> Неопределено) 
			И ((ВидМПЗ = Перечисления.ВидыМПЗ.Товары) ИЛИ (ВидМПЗ = Перечисления.ВидыМПЗ.Продукция) ИЛИ (ВидМПЗ = Перечисления.ВидыМПЗ.Полуфабрикаты)) Тогда
			Если НоменклатурнаяГруппа = неопределено Тогда
				НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
			КонецЕсли;
			Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
				Возврат НоменклатурнаяГруппа;
			Иначе
				Возврат УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (ВидМПЗ <> Неопределено) 
		И ((ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы) 
		ИЛИ (ВидМПЗ = Перечисления.ВидыМПЗ.ПрочиеРасходы)) Тогда
		
		Возврат Справочники.НоменклатурныеГруппы.ПустаяСсылка();
		
	Иначе
		Возврат УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа;
	КонецЕсли;
	
КонецФункции

// ТипОбъекта: 1 - искать номенклатурную группу, 2 - искать статью затрат
Функция ТипЗначенияСоответствуетУказанному(ЗначениеСубконто, ТипОбъекта)
	
	ТипСубконто = ТипЗнч(ЗначениеСубконто);
			
	Если ТипОбъекта = 1 Тогда
		Если ТипСубконто = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = 2 Тогда
		Если ТипСубконто = Тип("СправочникСсылка.СтатьиЗатрат") ИЛИ ТипСубконто = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") ИЛИ ТипСубконто = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// ТипОбъекта: 1 - искать номенклатурную группу, 2 - искать статью затрат
Функция НайтиСсылкуВСтроке(ТабЧасть, СтрокаТЧ, ИмяСтатьиЗатрат, ТипОбъекта = 1) Экспорт
	
	Результат = Неопределено;
	
	Если ИмяСтатьиЗатрат <> Неопределено Тогда
		Если ТабЧасть.Колонки.Найти(ИмяСтатьиЗатрат) <> Неопределено Тогда
			ЗначениеСубконто = СтрокаТЧ[ИмяСтатьиЗатрат];
			Если ТипЗначенияСоответствуетУказанному(ЗначениеСубконто, ТипОбъекта) Тогда
				Результат = ЗначениеСубконто;
			КонецЕсли;
	    Иначе
			Для НомерСубконто = 1 по 3 Цикл
				ЗначениеСубконто = СтрокаТЧ[ИмяСтатьиЗатрат+НомерСубконто];
				Если ТипЗначенияСоответствуетУказанному(ЗначениеСубконто, ТипОбъекта) Тогда
					Результат = ЗначениеСубконто;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Для МПЗ - определяет таблицу первого раздела Книги учета.
// Для услуг - определяет вид расходов (иные материальные или прочие).
//
// Возвращаемые значения:
// 1 - Материал;
// 2 - Полуфабрикат;
// 3 - Вспомогательный материал;
// 4 - Иные материальные расходы;
// 5 - Продукция, работа, услуга;
// 6 - Товар;
// 7 - Прочие расходы;
// 0 - Не принимается к налоговому учету (операции с прочим имуществом и некоторые статьи затрат).
//
Функция ВидМПЗПоСчетуУчета(СчетУчета, СтатьяЗатрат = Неопределено) Экспорт
	
	Если СчетУчета = Неопределено Тогда
		Возврат Неопределено;
		
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
		Возврат Неопределено;
		
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НематериальныеАктивы) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.НематериальныеАктивы Тогда
		Возврат Перечисления.ВидыМПЗ.НМА;	
		
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновныеСредства) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ОсновныеСредства ИЛИ
			  СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ Тогда
		Возврат Перечисления.ВидыМПЗ.ОС;
		
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств ИЛИ
			  СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов Тогда
		Возврат Перечисления.ВидыМПЗ.КапитальныеВложения;
		
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Товары) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.Товары ИЛИ
		 СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные Тогда
		Возврат Перечисления.ВидыМПЗ.Товары;
		 
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.Материалы Тогда
		Если СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СырьеИМатериалы)
			ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.СырьеИМатериалы
			ИЛИ СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку)
			ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку Тогда
			
			Возврат Перечисления.ВидыМПЗ.Материалы;
			
		Иначе
			Возврат Перечисления.ВидыМПЗ.ВспомогательныеМатериалы;
		КонецЕсли;
		
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ГотоваяПродукция) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ГотоваяПродукция ИЛИ
		 	  СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная Тогда
			  
		Возврат Перечисления.ВидыМПЗ.Продукция;	
		
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья Тогда
		// Продукция из давальческого сырья не отражается в НУ ИП
		Возврат Неопределено;	
		
	ИначеЕсли   СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство ИЛИ
				СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства ИЛИ
				СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства ИЛИ
				СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы ИЛИ
				СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы ИЛИ
				СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.БракВПроизводстве) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.БракВПроизводстве ИЛИ
				СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасходыНаПродажу) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.РасходыНаПродажу Тогда
			
				Если СтатьяЗатрат <> Неопределено Тогда
					Если ТипЗнч(СтатьяЗатрат) <> Тип("СправочникСсылка.СтатьиЗатрат") Тогда
						Возврат Неопределено;
					Иначе
						
						Если (СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.МатериальныеРасходы) ИЛИ (СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы) Тогда
							Возврат Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы;
							
						ИначеЕсли СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
							Возврат Неопределено;
							
						Иначе
							Возврат Перечисления.ВидыМПЗ.ПрочиеРасходы;
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					Возврат Перечисления.ВидыМПЗ.ПрочиеРасходы;
				КонецЕсли;
				
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов Тогда
		//Если СтатьяЗатрат <> Неопределено Тогда		
		//	ТипСтатьи = ТипЗнч(СтатьяЗатрат.СубконтоЗатрат1);
		//	Если ТипСтатьи = Тип("СправочникСсылка.СтатьиЗатрат") ИЛИ ТипСтатьи = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") ИЛИ ТипСтатьи = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
		//		Возврат ВидМПЗПоСчетуУчета(СтатьяЗатрат.СчетЗатрат, СтатьяЗатрат.СубконтоЗатрат1);
		//		
		//	Иначе
		//		Возврат ВидМПЗПоСчетуУчета(СтатьяЗатрат.СчетЗатрат);
		//	КонецЕсли;
		//	
		//Иначе
		//	Возврат Перечисления.ВидыМПЗ.ПрочиеРасходы;
		//КонецЕсли;
		Возврат Перечисления.ВидыМПЗ.РБП;
				
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы Тогда
		Если СтатьяЗатрат <> Неопределено Тогда
			Если ТипЗнч(СтатьяЗатрат) <> Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				Возврат Неопределено;
			Иначе
				Если СтатьяЗатрат.ПринятиеКналоговомуУчету Тогда
					Возврат Перечисления.ВидыМПЗ.ПрочиеРасходы;
					
				Иначе
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Возврат Перечисления.ВидыМПЗ.ПрочиеРасходы;
		КонецЕсли;
		
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Полуфабрикаты) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.Полуфабрикаты Тогда
		Возврат Перечисления.ВидыМПЗ.Полуфабрикаты;
		
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей Тогда
		Возврат Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы;
		
	ИначеЕсли (СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ДенежныеДокументы) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ДенежныеДокументы) 
		ИЛИ (СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал) ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал) Тогда
		Возврат Перечисления.ВидыМПЗ.ПрочиеРасходы;
	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Добавляет в таблицу ТабМПЗ колонку РеквизитыДокументаОплаты. Поиск документов оплаты производится
// по движениям указанного регистра. В ТабМПЗ должны быть колонки, соответствующие всем ресурсам
// и измерения регистра. Допускается наличие дополнительных колонок.
// Возвращает таблицу значений, состоящую из приходов, оплаченных МПЗ.
Функция ПолучениеРеквизитовДокументовОплаты(ТабМПЗ, ИмяРегистра, ИмяДокументаПоступления, ИмяДокументаОплаты, ИмяДокументаОтгрузки, ДляКнигиУчета = Ложь, СписокВидовМПЗ = Неопределено, СписокНоменклатуры = Неопределено, СписокДокументовОплаты = Неопределено, ПараметрыВМассивах = Ложь) Экспорт
	
	Если ТабМПЗ = Неопределено Тогда
		Возврат Неопределено;
		
	ИначеЕсли ТабМПЗ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДляКнигиУчета Тогда
		
		Если СписокДокументовОплаты <> Неопределено Тогда
			СписокДокументовОплатыОсновной = Новый Массив;
			Для Каждого ДокументМассива ИЗ СписокДокументовОплаты Цикл
				Если ДокументМассива <> Неопределено Тогда
					СписокДокументовОплатыОсновной.Добавить(ДокументМассива);
				КонецЕсли;
			КонецЦикла;	
			СписокДокументовОплаты = СписокДокументовОплатыОсновной;
		КонецЕсли;
		
	КонецЕсли;	
	
	// Формирование текста запроса
	ТекстЗапроса = "Выбрать ";
	
	// Получение массива измерений без номенклатурной группы и без характера деятельности
	ИзмеренияРегистра = Новый Массив;
	ВсеИзмеренияРегистра = Метаданные.РегистрыНакопления[ИмяРегистра].Измерения;
	
	Для Каждого Измерение Из ВсеИзмеренияРегистра Цикл
		Если Измерение.Имя <> "ХарактерДеятельности" 
			И Измерение.Имя <> "Организация" 
			И Измерение.Имя <> "НоменклатурнаяГруппа"
			И Измерение.Имя <> "МПЗ"
			И Измерение.Имя <> "ПартияМПЗ" Тогда
			ИзмеренияРегистра.Добавить(Измерение);
		КонецЕсли;
	КонецЦикла;
	
	// Добавление полей запроса, соответствующих измерениям регистра
	Для Каждого Измерение Из ИзмеренияРегистра Цикл
		ТекстЗапроса = ТекстЗапроса + Измерение.Имя + ",";
	КонецЦикла;
	
	// Добавление полей запроса, соответствующих ресурсам регистра.
	// К каждому ресурсу применяется функция Сумма(), так как ресурсы
	// будут группироваться по измерениям.
	РесурсыРегистра = Метаданные.РегистрыНакопления[ИмяРегистра].Ресурсы;
	Для Каждого Ресурс Из РесурсыРегистра Цикл
		ТекстЗапроса = ТекстЗапроса + "Сумма(" + Ресурс.Имя + ") Как " + Ресурс.Имя + ",";
	КонецЦикла;
	
	// Добавления условий отбора по значениям измерений
	Если ДляКнигиУчета Тогда
		ТекстЗапроса = ТекстЗапроса + "Регистратор, РеквизитыДокументаОплаты Из РегистрНакопления." + ИмяРегистра + " КАК " + ИмяРегистра +" Где ";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "РеквизитыДокументаОплаты Из РегистрНакопления." + ИмяРегистра + " КАК " + ИмяРегистра +" Где ";
	КонецЕсли;
	
	Для Каждого Измерение Из ИзмеренияРегистра Цикл
		ТекстЗапроса = ТекстЗапроса + Измерение.Имя + " В(&" + Измерение.Имя + ") И ";
	КонецЦикла;
	
	// Добавление условия отбора по регистратору. Массив "Регистраторы" состоит
	// из всех документов поступления и всех документов оплаты.
	ТекстЗапроса = ТекстЗапроса + "Регистратор В(&_Регистраторы) Сгруппировать По "; 
	
	// Добавление группировок по значению измерений
	Для Каждого Измерение Из ИзмеренияРегистра Цикл
		ТекстЗапроса = ТекстЗапроса + Измерение.Имя + ",";
	КонецЦикла;
	
	// Добавление группировки по реквизитам документов оплаты
	Если ДляКнигиУчета Тогда
		ТекстЗапроса = ТекстЗапроса + "Регистратор,РеквизитыДокументаОплаты";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "РеквизитыДокументаОплаты";
	КонецЕсли;
	
	// Формирование массива регистраторов
	Регистраторы = Новый Массив;
	
	Если ИмяДокументаПоступления <> Неопределено Тогда
		Если НЕ ПараметрыВМассивах тогда
			МассивДокументов = ТабМПЗ.ВыгрузитьКолонку(ИмяДокументаПоступления);
			ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДокументов);
			
		Иначе
			МассивДокументов = ТабМПЗ;
		КонецЕсли;
		
		Для Каждого Документ Из МассивДокументов Цикл
			Если Документ <> Неопределено Тогда
				Регистраторы.Добавить(Документ);
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяДокументаОплаты <> Неопределено Тогда
		Если НЕ ПараметрыВМассивах тогда
			МассивДокументов = ТабМПЗ.ВыгрузитьКолонку(ИмяДокументаОплаты);
			ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДокументов);
			
		Иначе
			МассивДокументов = СписокДокументовОплаты;
		КонецЕсли;
		
		Для Каждого Документ Из МассивДокументов Цикл
			Если Документ <> Неопределено Тогда
				Регистраторы.Добавить(Документ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяДокументаОтгрузки <> Неопределено Тогда
		Если НЕ ПараметрыВМассивах тогда
			МассивДокументов = ТабМПЗ.ВыгрузитьКолонку(ИмяДокументаОтгрузки);
			ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДокументов);
			
			Для Каждого Документ Из МассивДокументов Цикл
				Если Документ <> Неопределено Тогда
					Регистраторы.Добавить(Документ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Создание запроса
	Запрос = Новый Запрос;
	
	// Установка параметров запроса для отбора по значениям измерений
	Если ПараметрыВМассивах Тогда
		Если ДляКнигиУчета И СписокДокументовОплаты <> Неопределено Тогда
			СписокДокументовОплаты.Добавить("НЕОПРЕДЕЛЕНО"); // требуется для получения правильной цены при формировании Книги учета
		КонецЕсли;
		
		Для Каждого Измерение Из ИзмеренияРегистра Цикл
			Если Измерение.Имя = "Номенклатура" Тогда
				Запрос.УстановитьПараметр("Номенклатура", СписокНоменклатуры);
				
			ИначеЕсли Измерение.Имя = "СтатьяЗатрат" Тогда
				Запрос.УстановитьПараметр("СтатьяЗатрат", СписокНоменклатуры);
				
			ИначеЕсли Измерение.Имя = "ВидМПЗ" Тогда
				Запрос.УстановитьПараметр("ВидМПЗ", СписокВидовМПЗ);
				
			ИначеЕсли Измерение.Имя = "Партия" Тогда
				Запрос.УстановитьПараметр("Партия", ТабМПЗ);
				
			ИначеЕсли Измерение.Имя = "РасчетныйДокумент" Тогда
				Запрос.УстановитьПараметр("РасчетныйДокумент", ТабМПЗ);
				
			ИначеЕсли Измерение.Имя = "ДокументОплаты" Тогда
				Запрос.УстановитьПараметр("ДокументОплаты", СписокДокументовОплаты);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Для Каждого Измерение Из ИзмеренияРегистра Цикл
			МассивЗначений = ТабМПЗ.ВыгрузитьКолонку(Измерение.Имя);
			ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивЗначений);
			
			Если ДляКнигиУчета И Измерение.Имя = ИмяДокументаОплаты Тогда
				МассивЗначений.Добавить("НЕОПРЕДЕЛЕНО");
			КонецЕсли;
			
			Запрос.УстановитьПараметр(Измерение.Имя, МассивЗначений);
		КонецЦикла;
	КонецЕсли;
	
	// Получим корректировки, созданные документом "Запись...."
	ТекстЗапросаКорректировки = ТекстЗапроса;
	Если Документы.ЗаписьКнигиУчетаДоходовИРасходовИП.Выбрать().Следующий() Тогда
		
		ТекстЗапросаКорректировки = СтрЗаменить(ТекстЗапросаКорректировки, "И Регистратор В(&_Регистраторы)", "");
		ТекстЗапросаКорректировки = СтрЗаменить(ТекстЗапросаКорректировки, "РеквизитыДокументаОплаты Из", "РеквизитыДокументаОплаты, Регистратор, ВЫБОР КОГДА ВЫРАЗИТЬ(Регистратор КАК Документ.ЗаписьКнигиУчетаДоходовИРасходовИП) ЕСТЬ NULL  ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ДокКорректировки Из");
		ТекстЗапросаКорректировки = ТекстЗапросаКорректировки + ", Регистратор, ВЫБОР КОГДА ВЫРАЗИТЬ(Регистратор КАК Документ.ЗаписьКнигиУчетаДоходовИРасходовИП) ЕСТЬ NULL  ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ";
		Запрос.Текст = ТекстЗапросаКорректировки;
		
		// Формирование массивов регистраторов, сгруппированных по типам документов
		ТипыРегистраторов = Новый ДеревоЗначений;
		ТипыРегистраторов.Колонки.Добавить("Тип");
		ТипыРегистраторов.Колонки.Добавить("Документ");
		
		Для Каждого Регистратор Из Регистраторы Цикл
			ТипРег = ТипЗнч(Регистратор);
			
			СтрокаТипа = ТипыРегистраторов.Строки.Найти(ТипРег, "Тип");
			Если СтрокаТипа = Неопределено Тогда
				СтрокаТипа = ТипыРегистраторов.Строки.Добавить();
				СтрокаТипа.Тип = ТипРег;
			КонецЕсли;
			
			СтрокаДокумента = СтрокаТипа.Строки.Добавить();
			СтрокаДокумента.Документ = Регистратор;
		КонецЦикла;
		
		// Добавим ноый регистратор - документ "Запись..."
		ТабДокументовКорректировки = Запрос.Выполнить().Выгрузить();
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ДокКорректировки", Истина);
		НайденныеСтроки = ТабДокументовКорректировки.НайтиСтроки(ПараметрыОтбора);
		
		// Создание объединения запросов для раздельной выборки данных по типам регистраторов
		ТекстОбъединения = "";
		ПодстрокаПараметра = "_Регистраторы";
	Иначе	
		ТипыРегистраторов = Новый ДеревоЗначений;
		НайденныеСтроки = Новый массив; 
		ТекстОбъединения = ТекстЗапроса;
		Запрос.УстановитьПараметр("_Регистраторы", Регистраторы);
	КонецЕсли;

	
	Для Каждого ТипРег Из ТипыРегистраторов.Строки Цикл
		ИндексТипа = ТипыРегистраторов.Строки.Индекс(ТипРег);
		НоваяПодстрокаПараметра = "_Регистраторы" + ИндексТипа;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПараметра, НоваяПодстрокаПараметра);
		ТекстОбъединения = ТекстОбъединения + ?(ТекстОбъединения = "", "", " Объединить ") + ТекстЗапроса + " ";
		
		ПодстрокаПараметра = НоваяПодстрокаПараметра;
		
		// Установка параметров запроса для отбора по периоду и регистратору
		Регистраторы = ТипРег.Строки.ВыгрузитьКолонку("Документ");
		
		//Если НайденныеСтроки.Количество() > 0 Тогда
		//	
		//	Для Каждого Регистратор Из НайденныеСтроки Цикл
		//		Регистраторы.Добавить(Регистратор);
		//	КонецЦикла;

		//КонецЕсли;
		
		Запрос.УстановитьПараметр(ПодстрокаПараметра, Регистраторы);
	КонецЦикла;
	
	Если ТекстОбъединения = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Для Каждого Регистратор Из НайденныеСтроки Цикл
			ТипРег = ТипЗнч(Регистратор.Регистратор);
			
			СтрокаТипа = ТипыРегистраторов.Строки.Найти(ТипРег, "Тип");
			Если СтрокаТипа = Неопределено Тогда
				СтрокаТипа = ТипыРегистраторов.Строки.Добавить();
				СтрокаТипа.Тип = ТипРег;
			КонецЕсли;
			
			СтрокаДокумента = СтрокаТипа.Строки.Добавить();
			СтрокаДокумента.Документ = Регистратор.Регистратор;
		КонецЦикла;
		
		ИндексТипа = ТипыРегистраторов.Строки.Количество() - 1;
		НоваяПодстрокаПараметра = "_Регистраторы" + ИндексТипа;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПараметра, НоваяПодстрокаПараметра);
		ТекстОбъединения = ТекстОбъединения + ?(ТекстОбъединения = "", "", " Объединить ") + ТекстЗапроса + " ";
		
		ПодстрокаПараметра = НоваяПодстрокаПараметра;
		
		// Установка параметров запроса для отбора по периоду и регистратору
		Регистраторы = ТипыРегистраторов.Строки.Получить(ИндексТипа).Строки.ВыгрузитьКолонку("Документ");
		Запрос.УстановитьПараметр(ПодстрокаПараметра, Регистраторы);
	КонецЕсли;
	
	// Выполнение запроса
	Запрос.Текст = ТекстОбъединения;
	ТабДокументовОплаты = Запрос.Выполнить().Выгрузить();
	
	// Индексирование ТабДокументовОплаты по измерениям
	ТекстИндекса1 = "";
	ТекстИндекса2 = "";
	Для Каждого Измерение Из ИзмеренияРегистра Цикл
		ТекстИндекса1 = ТекстИндекса1 + ?(ТекстИндекса1 = "", "", ",") + Измерение.Имя;
		Если Измерение.Имя <> ИмяДокументаОплаты Тогда
			ТекстИндекса2 = ТекстИндекса2 + ?(ТекстИндекса2 = "", "", ",") + Измерение.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Если ДляКнигиУчета Тогда
		ТекстИндекса2 = ТекстИндекса2 + ",Регистратор";
		ТабДокументовОплаты.Индексы.Добавить(ТекстИндекса2);
		ОбъектСравнения = Новый СравнениеЗначений;
		ТабДокументовОплаты.Сортировать(ТекстИндекса2, ОбъектСравнения);
		ТекстИндекса1 = ТекстИндекса1 + ",Регистратор";
	КонецЕсли;
	
	ТабДокументовОплаты.Индексы.Добавить(ТекстИндекса1);
	
	// Проверка уникальности строк ТабДокументовОплаты
	СтруктураПоиска = Новый Структура(ТекстИндекса1);
	
	СуммыВДокументахДублях = Новый Соответствие;
	Для Каждого Ресурс Из РесурсыРегистра Цикл
		СуммыВДокументахДублях.Вставить(Ресурс.Имя, 0);
	КонецЦикла;
	
	Индекс = 0;
	Пока Индекс < ТабДокументовОплаты.Количество() Цикл
		
		Документ = ТабДокументовОплаты[Индекс];
		
		// Поиск дублей текущего документа. Ищем строки с такими же значениями измерений,
		// но с иными реквизитами документа оплаты.
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Документ);
		МассивДублей = ТабДокументовОплаты.НайтиСтроки(СтруктураПоиска);
		
		Если МассивДублей.Количество() > 1 Тогда // для одного документа оплаты нашлось несколько наборов реквизитов оплаты
			
			НовыеРеквизиты = "";
			
			Для Каждого Ресурс Из РесурсыРегистра Цикл
				СуммыВДокументахДублях[Ресурс.Имя] = 0;
			КонецЦикла;
			
			Для Каждого НайденныйДубль Из МассивДублей Цикл
				// Получение общей строки реквизитов оплаты
				НовыеРеквизиты = НовыеРеквизиты + ?(НовыеРеквизиты <> "", ", ", "") + НайденныйДубль.РеквизитыДокументаОплаты;
				
				// Получение суммы ресурсов во всех дублях
				Для Каждого Ресурс Из РесурсыРегистра Цикл
					СуммыВДокументахДублях[Ресурс.Имя] = СуммыВДокументахДублях[Ресурс.Имя] + НайденныйДубль[Ресурс.Имя];
				КонецЦикла;
			КонецЦикла;
			
			// Обновление реквизитов оплаты и ресурсов в текущем документе
			Документ.РеквизитыДокументаОплаты = НовыеРеквизиты;
			Для Каждого Ресурс Из РесурсыРегистра Цикл
				Документ[Ресурс.Имя] = СуммыВДокументахДублях[Ресурс.Имя];
			КонецЦикла;
			
			// Удаление дублей текущего документа
			ИндексТекДокумента = ТабДокументовОплаты.Индекс(Документ);
			Для Каждого НайденныйДубль Из МассивДублей Цикл
				ИндексДубля = ТабДокументовОплаты.Индекс(НайденныйДубль);
				Если ИндексДубля <> ИндексТекДокумента Тогда
					ТабДокументовОплаты.Удалить(НайденныйДубль);
				КонецЕсли;
			КонецЦикла;
			
			// Удаление документа с нулевыми суммами ресурсов и неопределенным документом оплаты
			Если Документ[ИмяДокументаОплаты] = Неопределено Тогда
				СуммаРесурсов = 0;
				Для Каждого Ресурс Из РесурсыРегистра Цикл
					СуммаРесурсов = СуммаРесурсов + Документ[Ресурс.Имя];
				КонецЦикла;
				
				Если СуммаРесурсов = 0 Тогда
					ТабДокументовОплаты.Удалить(Документ);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Переходим к следующему документу
			Индекс = ТабДокументовОплаты.Индекс(Документ) + 1;
			
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение реквизитов оплаты в таблице МПЗ
	Если НЕ ДляКнигиУчета Тогда
		
		Для Каждого МПЗ Из ТабМПЗ Цикл
			
			// Найдем реквизиты документа оплаты для документа оплаты данного МПЗ
		    ЗаполнитьЗначенияСвойств(СтруктураПоиска, МПЗ);
			
			МассивДокументовОплаты = ТабДокументовОплаты.НайтиСтроки(СтруктураПоиска);
			Если МассивДокументовОплаты.Количество() > 0 Тогда
				МПЗ.РеквизитыДокументаОплаты = МассивДокументовОплаты[0].РеквизитыДокументаОплаты;
			КонецЕсли;
		КонецЦикла;
		
	Иначе // расчет стоимости единицы
		
		ТабДокументовОплаты.Колонки.Добавить("СтоимостьЕдиницы");
		ТабДокументовОплаты.Колонки.Добавить("НДСЕдиницы");
		ТабДокументовОплаты.Колонки.Добавить("СтоимостьЕдиницыСНДС");
		
		Индекс = 0;
		СтруктураПоиска = Новый Структура(ТекстИндекса2);
		
		Пока Индекс < ТабДокументовОплаты.Количество() Цикл
			
			Документ = ТабДокументовОплаты[Индекс];
			
			// Поиск документов оплаты в рамках текущей партии
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Документ);
			МассивОплат = ТабДокументовОплаты.НайтиСтроки(СтруктураПоиска);
			
			// Получим сумму ресурсов по всем документам оплаты
			Сумма = 0;
			НДС = 0;
			Количество = 0;
			
			МаксимальныйИндекс = Индекс;
			Для Каждого ДокументОплаты Из МассивОплат Цикл
				Сумма = Сумма + ДокументОплаты.Сумма;
				НДС = НДС + ДокументОплаты.НДС;
				Количество = Количество + ДокументОплаты.Количество;
				МаксимальныйИндекс = Макс(МаксимальныйИндекс, ТабДокументовОплаты.Индекс(ДокументОплаты));
			КонецЦикла;
			
			Количество = ?(Количество = 0, 1, Количество);
			СтоимостьЕдиницы = (Сумма + НДС)/Количество - НДС/Количество;
			НДСЕдиницы = НДС/Количество;
			СтоимостьЕдиницыСНДС = (Сумма + НДС)/Количество;
			
			// Запишем стоимость единицы в каждый документ оплаты
			Для Каждого ДокументОплаты Из МассивОплат Цикл
				ДокументОплаты.СтоимостьЕдиницы = СтоимостьЕдиницы;
				ДокументОплаты.НДСЕдиницы = НДСЕдиницы;
				ДокументОплаты.СтоимостьЕдиницыСНДС = СтоимостьЕдиницыСНДС;
			КонецЦикла;
			
			// Переходим к следующей партии
			Индекс = МаксимальныйИндекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТабДокументовОплаты;
	
КонецФункции

Процедура ИзменениеВидаДеятельности(Организация, ИзмененияВидаДеятельности, Движения, Период, СторнироватьРасход, ВестиУчетПоВидамДеятельности = Ложь, ДатаРегистратора) Экспорт
	
	Отбор = Новый Структура("Номенклатура,Партия,ДокументОплаты,ХарактерДеятельности1,НоменклатурнаяГруппа1,ВидМПЗ");
	
	ИзмененияВидаДеятельности.Свернуть("ХарактерДеятельности1,НоменклатурнаяГруппа1,ХарактерДеятельности2,НоменклатурнаяГруппа2,Номенклатура,Партия,ДокументОплаты,ВидМПЗ,МПЗ,ПартияМПЗ", "Количество,Сумма,НДС");
	
	// Изменение вида деятельности у товаров из таблицы ИзмененияВидаДеятельности
	Для Каждого Изменение Из ИзмененияВидаДеятельности Цикл
		
		Если ТипЗнч(Изменение.ВидМПЗ) = Тип("ПеречислениеСсылка.ИПВидыНачисленийУдержаний") Тогда
			// Сторнирование
			Обороты = Движения.ИПРасходыНаОплатуТруда.Добавить();
			Обороты.Организация = Организация;
			Обороты.Период = Период;
			Обороты.НоменклатурнаяГруппа = Изменение.НоменклатурнаяГруппа1;
			Обороты.ХарактерДеятельности = Изменение.ХарактерДеятельности1;
			Обороты.СтатьяЗатрат = Изменение.Номенклатура;
			Обороты.РасчетныйДокумент = Изменение.Партия;
			Обороты.ДокументОплаты = Изменение.ДокументОплаты;
			Обороты.ВидНачисленияУдержания = Изменение.ВидМПЗ;
			Обороты.ФизЛицо = Изменение.МПЗ;
			Обороты.Контрагент = Изменение.ПартияМПЗ;
			Обороты.Сумма = - Изменение.Сумма;
			
			// Восстановление
			Обороты = Движения.ИПРасходыНаОплатуТруда.Добавить();
			Обороты.Организация = Организация;
			Обороты.Период = Период;
			Обороты.НоменклатурнаяГруппа = Изменение.НоменклатурнаяГруппа2;
			Обороты.ХарактерДеятельности = Изменение.ХарактерДеятельности2;
			Обороты.СтатьяЗатрат = Изменение.Номенклатура;
			Обороты.РасчетныйДокумент = Изменение.Партия;
			Обороты.ДокументОплаты = Изменение.ДокументОплаты;
			Обороты.ВидНачисленияУдержания = Изменение.ВидМПЗ;
			Обороты.ФизЛицо = Изменение.МПЗ;
			Обороты.Контрагент = Изменение.ПартияМПЗ;
			Обороты.Сумма = Изменение.Сумма;
			
			Продолжить;
		
		ИначеЕсли Изменение.ВидМПЗ = Перечисления.ВидыМПЗ.ПрочиеРасходы Тогда
			// Сторнирование
			Обороты = Движения.ИППрочиеРасходы.Добавить();
			Обороты.Организация = Организация;
			Обороты.Период = Период;
			Обороты.НоменклатурнаяГруппа = Изменение.НоменклатурнаяГруппа1;
			Обороты.ХарактерДеятельности = Изменение.ХарактерДеятельности1;
			Обороты.СтатьяЗатрат = Изменение.Номенклатура;
			Обороты.РасчетныйДокумент = Изменение.Партия;
			Обороты.ДокументОплаты = Изменение.ДокументОплаты;
			Обороты.СчетУчета = Изменение.МПЗ;
			Обороты.Сумма = - Изменение.Сумма;
			Обороты.НДС = - Изменение.НДС;
			
			// Восстановление
			Обороты = Движения.ИППрочиеРасходы.Добавить();
			Обороты.Организация = Организация;
			Обороты.Период = Период;
			Обороты.НоменклатурнаяГруппа = Изменение.НоменклатурнаяГруппа2;
			Обороты.ХарактерДеятельности = Изменение.ХарактерДеятельности2;
			Обороты.СтатьяЗатрат = Изменение.Номенклатура;
			Обороты.РасчетныйДокумент = Изменение.Партия;
			Обороты.ДокументОплаты = Изменение.ДокументОплаты;
			Обороты.СчетУчета = Изменение.МПЗ;
			Обороты.Сумма = Изменение.Сумма;
			Обороты.НДС = Изменение.НДС;
			
			Продолжить;
			
		ИначеЕсли Изменение.ВидМПЗ = Неопределено Тогда
			
			// Сторнирование
			Остатки = Движения.ИПРБП.Добавить();
			Остатки.ВидРасхода = Изменение.Номенклатура;
			Остатки.ВидДвижения = ВидДвиженияНакопления.Приход;
			Остатки.Период = Период;
			Остатки.Организация = Организация;
			Остатки.НоменклатурнаяГруппа = Изменение.НоменклатурнаяГруппа1;
			Остатки.ХарактерДеятельности = Изменение.ХарактерДеятельности1;
			Остатки.Партия = Изменение.Партия;
			Остатки.ДокументОплаты = Изменение.ДокументОплаты;
			Остатки.Сумма = - Изменение.Сумма;
			Остатки.НДС = - Изменение.НДС;
			
			// Восстановление
			Остатки = Движения.ИПРБП.Добавить();
			Остатки.ВидРасхода = Изменение.Номенклатура;
			Остатки.ВидДвижения = ВидДвиженияНакопления.Приход;
			Остатки.Период = Период;
			Остатки.Организация = Организация;
			Остатки.НоменклатурнаяГруппа = Изменение.НоменклатурнаяГруппа2;
			Остатки.ХарактерДеятельности = Изменение.ХарактерДеятельности2;
			Остатки.Партия = Изменение.Партия;
			Остатки.ДокументОплаты = Изменение.ДокументОплаты;
			Остатки.Сумма = Изменение.Сумма;
			Остатки.НДС = Изменение.НДС;
			
			Если ВестиУчетПоВидамДеятельности Тогда
				Остатки = Движения.ИПРБП.Добавить();
				Остатки.ВидДвижения = ВидДвиженияНакопления.Расход;
				Остатки.Период = Период;
				Остатки.Организация = Организация;
				Остатки.НоменклатурнаяГруппа = Изменение.НоменклатурнаяГруппа1;
				Остатки.ХарактерДеятельности = Изменение.ХарактерДеятельности1;
				Остатки.ВидРасхода = Изменение.Номенклатура;
				Остатки.Партия = Изменение.Партия;
				Остатки.ДокументОплаты = Изменение.ДокументОплаты;
				Остатки.Сумма = - Изменение.Сумма;
				Остатки.НДС = - Изменение.НДС;
				
				Остатки = Движения.ИПРБП.Добавить();
				Остатки.ВидДвижения = ВидДвиженияНакопления.Расход;
				Остатки.Период = Период;
				Остатки.Организация = Организация;
				Остатки.НоменклатурнаяГруппа = Изменение.НоменклатурнаяГруппа2;
				Остатки.ХарактерДеятельности = Изменение.ХарактерДеятельности2;
				Остатки.ВидРасхода = Изменение.Номенклатура;
				Остатки.Партия = Изменение.Партия;
				Остатки.ДокументОплаты = Изменение.ДокументОплаты;
				Остатки.Сумма = Изменение.Сумма;
				Остатки.НДС = Изменение.НДС;
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		// Сторнирование
		Если Изменение.ВидМПЗ <> Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы Тогда
			Остатки = Движения.ИПМПЗ.Добавить();
			Остатки.ВидМПЗ = Изменение.ВидМПЗ; 
			Остатки.Номенклатура = Изменение.Номенклатура;
			
		Иначе
			Остатки = Движения.ИПИныеМатериальныеРасходы.Добавить();
			Остатки.СтатьяЗатрат = Изменение.Номенклатура;
			Остатки.МПЗ = Изменение.МПЗ;
			Остатки.ПартияМПЗ = Изменение.ПартияМПЗ;
		КонецЕсли;
			
		Остатки.ВидДвижения = ВидДвиженияНакопления.Приход;
		Остатки.Период = Период;
		Остатки.Организация = Организация;
		Остатки.НоменклатурнаяГруппа = Изменение.НоменклатурнаяГруппа1;
		Остатки.ХарактерДеятельности = Изменение.ХарактерДеятельности1;
		Остатки.Партия = Изменение.Партия;
		Остатки.ДокументОплаты = Изменение.ДокументОплаты;
		Остатки.Количество = - Изменение.Количество;
		Остатки.Сумма = - Изменение.Сумма;
		Остатки.НДС = - Изменение.НДС;
		
		// Восстановление
		Если Изменение.ВидМПЗ <> Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы Тогда
			Остатки = Движения.ИПМПЗ.Добавить();
			Остатки.ВидМПЗ = Изменение.ВидМПЗ; 
			Остатки.Номенклатура = Изменение.Номенклатура;
			
		Иначе
			Остатки = Движения.ИПИныеМатериальныеРасходы.Добавить();
			Остатки.СтатьяЗатрат = Изменение.Номенклатура;
			Остатки.МПЗ = Изменение.МПЗ;
			Остатки.ПартияМПЗ = Изменение.ПартияМПЗ;
		КонецЕсли;
		
		Остатки.ВидДвижения = ВидДвиженияНакопления.Приход;
		Остатки.Период = Период;
		Остатки.Организация = Организация;
		Остатки.НоменклатурнаяГруппа = Изменение.НоменклатурнаяГруппа2;
		Остатки.ХарактерДеятельности = Изменение.ХарактерДеятельности2;
		Остатки.Партия = Изменение.Партия;
		Остатки.ДокументОплаты = Изменение.ДокументОплаты;
		Остатки.Количество = Изменение.Количество;
		Остатки.Сумма = Изменение.Сумма;
		Остатки.НДС = Изменение.НДС;
		
		Если СторнироватьРасход Тогда
			Остатки = Движения.ИПМПЗ.Добавить();
			Остатки.ВидДвижения = ВидДвиженияНакопления.Расход;
			Остатки.Период = Период;
			Остатки.Организация = Организация;
			Остатки.НоменклатурнаяГруппа = Изменение.НоменклатурнаяГруппа1;
			Остатки.ХарактерДеятельности = Изменение.ХарактерДеятельности1;
			Остатки.ВидМПЗ = Изменение.ВидМПЗ; 
			Остатки.Номенклатура = Изменение.Номенклатура;
			Остатки.Партия = Изменение.Партия;
			Остатки.ДокументОплаты = Изменение.ДокументОплаты;
			Остатки.Количество = - Изменение.Количество;
			Остатки.Сумма = - Изменение.Сумма;
			Остатки.НДС = - Изменение.НДС;
			
			Остатки = Движения.ИПМПЗ.Добавить();
			Остатки.ВидДвижения = ВидДвиженияНакопления.Расход;
			Остатки.Период = Период;
			Остатки.Организация = Организация;
			Остатки.НоменклатурнаяГруппа = Изменение.НоменклатурнаяГруппа2;
			Остатки.ХарактерДеятельности = Изменение.ХарактерДеятельности2;
			Остатки.ВидМПЗ = Изменение.ВидМПЗ; 
			Остатки.Номенклатура = Изменение.Номенклатура;
			Остатки.Партия = Изменение.Партия;
			Остатки.ДокументОплаты = Изменение.ДокументОплаты;
			Остатки.Количество = Изменение.Количество;
			Остатки.Сумма = Изменение.Сумма;
			Остатки.НДС = Изменение.НДС;
		КонецЕсли;
	КонецЦикла;
	
	// Поиск и изменение видов деятельности у материалов, из которых были изготовлены товары в таблице ИзмененияВидаДеятельности
	ОтгруженныеМПЗ = ИзмененияВидаДеятельности.ВыгрузитьКолонку("Номенклатура");
	ПартииОтгруженныхМПЗ = ИзмененияВидаДеятельности.ВыгрузитьКолонку("Партия");
	ДокументыОплаты = ИзмененияВидаДеятельности.ВыгрузитьКолонку("ДокументОплаты");
	ВидыПоступившегоМПЗ = ИзмененияВидаДеятельности.ВыгрузитьКолонку("ВидМПЗ");
	НоменклатурныеГруппы1 = ИзмененияВидаДеятельности.ВыгрузитьКолонку("НоменклатурнаяГруппа1");
	ХарактерыДеятельности1 = ИзмененияВидаДеятельности.ВыгрузитьКолонку("ХарактерДеятельности1");
	
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ОтгруженныеМПЗ);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПартииОтгруженныхМПЗ);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДокументыОплаты);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(НоменклатурныеГруппы1);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ХарактерыДеятельности1);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ВидыПоступившегоМПЗ);
	
	Материалы = Новый ТаблицаЗначений;
	Материалы.Колонки.Добавить("ВидМПЗ");
	Материалы.Колонки.Добавить("Номенклатура");
	Материалы.Колонки.Добавить("Партия");
	Материалы.Колонки.Добавить("СуммаВсего");
	Материалы.Колонки.Добавить("НДСВсего");
	Материалы.Колонки.Добавить("Сумма");
	Материалы.Колонки.Добавить("НДС");
	Материалы.Колонки.Добавить("Количество");
	
	НовыеИзмененияВидаДеятельности = ИзмененияВидаДеятельности.СкопироватьКолонки();
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗОбороты");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(ДатаПервогоДокумента(ПартииОтгруженныхМПЗ), Период)); 
		ЗначенияБлокировки.Вставить("Организация", Организация);
		СтруктураПараметров.Вставить("ИсточникДанных", ИзмененияВидаДеятельности);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("ПартияПоступившейНоменклатуры, ДокументОплаты, ВидПоступившегоМПЗ, НоменклатурнаяГруппа, ХарактерДеятельности", "Номенклатура, Партия, ДокументОплаты, ВидМПЗ,НоменклатурнаяГруппа1, ХарактерДеятельности1");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтгруженныеМПЗ", ОтгруженныеМПЗ);
	Запрос.УстановитьПараметр("ПартииОтгруженныхМПЗ", ПартииОтгруженныхМПЗ);
	Запрос.УстановитьПараметр("ДокументыОплаты", ДокументыОплаты);
	Запрос.УстановитьПараметр("ВидыПоступившегоМПЗ", ВидыПоступившегоМПЗ);
	Запрос.УстановитьПараметр("НоменклатурныеГруппы1", НоменклатурныеГруппы1);
	Запрос.УстановитьПараметр("ХарактерыДеятельности1", ХарактерыДеятельности1);
	Запрос.УстановитьПараметр("ДатаРегистратора", Период);
	Запрос.УстановитьПараметр("ДатаНач", ДатаПервогоДокумента(ПартииОтгруженныхМПЗ));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПМПЗОборотыОбороты.КоличествоОборот КАК КоличествоОборот,
	|	ИПМПЗОборотыОбороты.СуммаОборот КАК СуммаОборот,
	|	ИПМПЗОборотыОбороты.НДСОборот КАК НДСОборот,
	|	ИПМПЗОборотыОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПМПЗОборотыОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПМПЗОборотыОбороты.НоменклатураСписанная КАК НоменклатураСписанная,
	|	ИПМПЗОборотыОбороты.ВидПоступившегоМПЗ КАК ВидПоступившегоМПЗ,
	|	ИПМПЗОборотыОбороты.ВидСписанногоМПЗ КАК ВидСписанногоМПЗ,
	|	ИПМПЗОборотыОбороты.НоменклатураПоступившая КАК НоменклатураПоступившая,
	|	ИПМПЗОборотыОбороты.ПартияСписаннойНоменклатуры КАК ПартияСписаннойНоменклатуры,
	|	ИПМПЗОборотыОбороты.ПартияПоступившейНоменклатуры КАК ПартияПоступившейНоменклатуры,
	|	ИПМПЗОборотыОбороты.ДокументОплаты КАК ДокументОплаты
	|ИЗ
	|	РегистрНакопления.ИПМПЗОбороты.Обороты(
	|			&ДатаНач,
	|			&ДатаРегистратора,
	|			,
	|			Организация = &Организация
	|				И НоменклатурнаяГруппа В (&НоменклатурныеГруппы1)
	|				И ХарактерДеятельности В (&ХарактерыДеятельности1)
	|				И НоменклатураПоступившая В (&ОтгруженныеМПЗ)
	|				И ВидПоступившегоМПЗ В (&ВидыПоступившегоМПЗ)
	|				И ПартияПоступившейНоменклатуры В (&ПартииОтгруженныхМПЗ)
	|				И ДокументОплаты В (&ДокументыОплаты)) КАК ИПМПЗОборотыОбороты
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|ИТОГИ
	|	СУММА(КоличествоОборот),
	|	СУММА(СуммаОборот),
	|	СУММА(НДСОборот)
	|ПО
	|	ХарактерДеятельности,
	|	ВидПоступившегоМПЗ,
	|	НоменклатурнаяГруппа,
	|	НоменклатураПоступившая,
	|	ПартияПоступившейНоменклатуры,
	|	ДокументОплаты,
	|	ВидСписанногоМПЗ,
	|	НоменклатураСписанная,
	|	ПартияСписаннойНоменклатуры";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыбХарактер = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ХарактерДеятельности");
	Пока ВыбХарактер.Следующий() Цикл
		ВыбВидПоступившегоМПЗ = ВыбХарактер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидПоступившегоМПЗ");
		Пока ВыбВидПоступившегоМПЗ.Следующий() Цикл
			ВыбГруппа = ВыбВидПоступившегоМПЗ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НоменклатурнаяГруппа");
			Пока ВыбГруппа.Следующий() Цикл
				ВыбНоменклатура = ВыбГруппа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НоменклатураПоступившая");
				Пока ВыбНоменклатура.Следующий() Цикл
					ВыбПартия = ВыбНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПартияПоступившейНоменклатуры");
					Пока ВыбПартия.Следующий() Цикл
						ВыбДокОплаты = ВыбПартия.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДокументОплаты");
						Пока ВыбДокОплаты.Следующий() Цикл
							
							Отбор.Номенклатура = ВыбДокОплаты.НоменклатураПоступившая;
							Отбор.Партия = ВыбДокОплаты.ПартияПоступившейНоменклатуры;
							Отбор.ДокументОплаты = ВыбДокОплаты.ДокументОплаты;
							Отбор.ХарактерДеятельности1 = ВыбХарактер.ХарактерДеятельности;
							Отбор.НоменклатурнаяГруппа1 = ВыбГруппа.НоменклатурнаяГруппа;
							Отбор.ВидМПЗ = ВыбДокОплаты.ВидПоступившегоМПЗ;
							
							ОтборВидовДеятельности = ИзмененияВидаДеятельности.НайтиСтроки(Отбор); 
							
							Если ОтборВидовДеятельности.Количество() = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							НовыеВидыДеятельности = ОтборВидовДеятельности[0];
							
							СуммаПродукцииВсего = ВыбДокОплаты.СуммаОборот;
							СуммаПродукции = НовыеВидыДеятельности.Сумма;
							
							НДСПродукции = НовыеВидыДеятельности.НДС;
							
							Если (СуммаПродукцииВсего = 0) ИЛИ (СуммаПродукции = 0) Тогда
								Продолжить;
							КонецЕсли;
							
							РаспределеноСумма = 0;
							РаспределеноНДС = 0;
							
							Материалы.Очистить();
							
							ВыбВидМПЗ = ВыбДокОплаты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидСписанногоМПЗ");
							Пока ВыбВидМПЗ.Следующий() Цикл
								ВыбМатериала = ВыбВидМПЗ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НоменклатураСписанная");
								Пока ВыбМатериала.Следующий() Цикл
									ВыбПартияМатериала = ВыбМатериала.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПартияСписаннойНоменклатуры");
									Пока ВыбПартияМатериала.Следующий() Цикл
							
										КоличествоМатериалаВсего = ВыбПартияМатериала.КоличествоОборот;
										СуммаМатериалаВсего = ВыбПартияМатериала.СуммаОборот;
										НДСМатериалаВсего = ВыбПартияМатериала.НДСОборот;
							
										Если СуммаПродукцииВсего = СуммаПродукции Тогда
											КоличествоМатериала = КоличествоМатериалаВсего;
											СуммаМатериала = СуммаМатериалаВсего;
											НДСМатериала = НДСМатериалаВсего;
											
										Иначе
											КоличествоМатериала = Окр(КоличествоМатериалаВсего * СуммаПродукции / СуммаПродукцииВсего, 3, 1);
											СуммаМатериалаСНДС = Окр((СуммаМатериалаВсего + НДСМатериалаВсего) * СуммаПродукции / СуммаПродукцииВсего, 2, 1);
											СуммаМатериала = Окр(СуммаМатериалаВсего * СуммаПродукции / СуммаПродукцииВсего, 2, 1);
											НДСМатериала = СуммаМатериалаСНДС - СуммаМатериала;
										КонецЕсли;
										
										РаспределеноСумма = РаспределеноСумма + СуммаМатериала;
										РаспределеноНДС = РаспределеноНДС + НДСМатериала;
										
										Материал = Материалы.Добавить();
										Материал.ВидМПЗ = ВыбМатериала.ВидСписанногоМПЗ;
										Материал.Номенклатура = ВыбМатериала.НоменклатураСписанная;
										Материал.Партия = ВыбПартияМатериала.ПартияСписаннойНоменклатуры;
										Материал.СуммаВсего = СуммаМатериалаВсего;
										Материал.НДСВсего = НДСМатериалаВсего;
										Материал.Сумма = СуммаМатериала;
										Материал.НДС = НДСМатериала;
										Материал.Количество = КоличествоМатериала;
									КонецЦикла;
								КонецЦикла;
							КонецЦикла;
							
							Материалы.Сортировать("СуммаВсего Убыв");
							НомСтроки = 0;
							Пока (НомСтроки < Материалы.Количество() И РаспределеноСумма <> СуммаПродукции) Цикл
								Материал = Материалы[НомСтроки];
								Сумма = Материал.Сумма + СуммаПродукции - РаспределеноСумма;
								Сумма = Мин(Сумма, Материал.СуммаВсего);
								РаспределеноСумма = РаспределеноСумма + Сумма - Материал.Сумма;
								Материал.Сумма = Сумма;
								НомСтроки = НомСтроки + 1;
							КонецЦикла;
							
							Материалы.Сортировать("НДСВсего Убыв");
							НомСтроки = 0;
							Пока (НомСтроки < Материалы.Количество() И РаспределеноНДС <> НДСПродукции) Цикл
								Материал = Материалы[НомСтроки];
								НДС = Материал.НДС + НДСПродукции - РаспределеноНДС;
								НДС = Мин(НДС, Материал.НДСВсего);
								РаспределеноНДС = РаспределеноНДС + НДС - Материал.НДС;
								Материал.НДС = НДС;
								НомСтроки = НомСтроки + 1;
							КонецЦикла;
							
							Для Каждого Материал Из Материалы Цикл
								Обороты = Движения.ИПМПЗОбороты.Добавить();
								Обороты.Период = Период;
								Обороты.Организация = Организация;
								Обороты.НоменклатурнаяГруппа = НовыеВидыДеятельности.НоменклатурнаяГруппа1;
								Обороты.ХарактерДеятельности = НовыеВидыДеятельности.ХарактерДеятельности1;
								Обороты.НоменклатураСписанная = Материал.Номенклатура;
								Обороты.НоменклатураПоступившая = ВыбДокОплаты.НоменклатураПоступившая;
								Обороты.ПартияСписаннойНоменклатуры = Материал.Партия;
								Обороты.ПартияПоступившейНоменклатуры = ВыбПартия.ПартияПоступившейНоменклатуры;
								Обороты.ДокументОплаты = ВыбДокОплаты.ДокументОплаты;
								Обороты.ВидСписанногоМПЗ = Материал.ВидМПЗ;
								Обороты.ВидПоступившегоМПЗ = ВыбДокОплаты.ВидПоступившегоМПЗ;
								Обороты.Количество = - Материал.Количество;
								Обороты.Сумма = - Материал.Сумма;
								Обороты.НДС = - Материал.НДС;
								
								Обороты = Движения.ИПМПЗОбороты.Добавить();
								Обороты.Период = Период;
								Обороты.Организация = Организация;
								Обороты.НоменклатурнаяГруппа = НовыеВидыДеятельности.НоменклатурнаяГруппа2;
								Обороты.ХарактерДеятельности = НовыеВидыДеятельности.ХарактерДеятельности2;
								Обороты.НоменклатураСписанная = Материал.Номенклатура;
								Обороты.НоменклатураПоступившая = ВыбНоменклатура.НоменклатураПоступившая;
								Обороты.ПартияСписаннойНоменклатуры = Материал.Партия;
								Обороты.ПартияПоступившейНоменклатуры = ВыбПартия.ПартияПоступившейНоменклатуры;
								Обороты.ДокументОплаты = ВыбДокОплаты.ДокументОплаты;
								Обороты.ВидСписанногоМПЗ = Материал.ВидМПЗ;
								Обороты.ВидПоступившегоМПЗ = ВыбДокОплаты.ВидПоступившегоМПЗ;
								Обороты.Количество = Материал.Количество;
								Обороты.Сумма = Материал.Сумма;
								Обороты.НДС = Материал.НДС;
								
								НоваяЗапись = НовыеИзмененияВидаДеятельности.Добавить();
								НоваяЗапись.ХарактерДеятельности1 = НовыеВидыДеятельности.ХарактерДеятельности1;
								НоваяЗапись.НоменклатурнаяГруппа1 = НовыеВидыДеятельности.НоменклатурнаяГруппа1;
								НоваяЗапись.ХарактерДеятельности2 = НовыеВидыДеятельности.ХарактерДеятельности2;
								НоваяЗапись.НоменклатурнаяГруппа2 = НовыеВидыДеятельности.НоменклатурнаяГруппа2;
								НоваяЗапись.Номенклатура = Материал.Номенклатура;
								НоваяЗапись.Партия = Материал.Партия;
								НоваяЗапись.ДокументОплаты = ВыбДокОплаты.ДокументОплаты;
								НоваяЗапись.ВидМПЗ = Материал.ВидМПЗ;
								НоваяЗапись.Количество = Материал.Количество;
								НоваяЗапись.Сумма = Материал.Сумма;
								НоваяЗапись.НДС = Материал.НДС;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если НовыеИзмененияВидаДеятельности.Количество() > 0 Тогда
		ИзменениеВидаДеятельности(Организация, НовыеИзмененияВидаДеятельности, Движения, Период, Истина,,ДатаРегистратора);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменениеДокументаОплаты(ДокументОбъект, СтруктураШапкиДокумента, ОплаченныеПартии, ИМР, Отгружено)
	
	ОплаченныеПартии.Свернуть("НоменклатурнаяГруппа,ХарактерДеятельности,ВидМПЗ,Номенклатура,Партия,РеквизитыДокументаОплаты", "Количество,Сумма,НДС");
	Отбор = Новый Структура("Номенклатура,Партия,ХарактерДеятельности,НоменклатурнаяГруппа,ВидМПЗ");
	
	ВидыСписанныхМПЗ = ОплаченныеПартии.ВыгрузитьКолонку("ВидМПЗ");
	ОтгруженныеМПЗ = ОплаченныеПартии.ВыгрузитьКолонку("Номенклатура");
	ПартииОтгруженныхМПЗ = ОплаченныеПартии.ВыгрузитьКолонку("Партия");
	НоменклатурныеГруппы = ОплаченныеПартии.ВыгрузитьКолонку("НоменклатурнаяГруппа");
	ХарактерыДеятельности = ОплаченныеПартии.ВыгрузитьКолонку("ХарактерДеятельности");
	
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ВидыСписанныхМПЗ);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ОтгруженныеМПЗ);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПартииОтгруженныхМПЗ);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(НоменклатурныеГруппы);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ХарактерыДеятельности);
	
	НовыеОплаченныеПартии = ОплаченныеПартии.СкопироватьКолонки();
		
	Получено = Новый ТаблицаЗначений;
	Получено.Колонки.Добавить("ВидПоступившегоМПЗ");
	Получено.Колонки.Добавить("Номенклатура");
	Получено.Колонки.Добавить("Партия");
	Получено.Колонки.Добавить("СуммаВсего");
	Получено.Колонки.Добавить("НДСВсего");
	Получено.Колонки.Добавить("Сумма");
	Получено.Колонки.Добавить("НДС");
	Получено.Колонки.Добавить("Количество");
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗОбороты");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(ДатаПервогоДокумента(ПартииОтгруженныхМПЗ), СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("ИсточникДанных", ОплаченныеПартии);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("НоменклатураСписанная, ПартияСписаннойНоменклатуры, ВидСписанногоМПЗ, НоменклатурнаяГруппа, ХарактерДеятельности", "Номенклатура, Партия, ВидМПЗ, НоменклатурнаяГруппа, ХарактерДеятельности");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	КонецЕсли;
	
	ДатаРегистратора = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ОтгруженныеМПЗ", ОтгруженныеМПЗ);
	Запрос.УстановитьПараметр("ВидыСписанныхМПЗ", ВидыСписанныхМПЗ);
	Запрос.УстановитьПараметр("ПартииОтгруженныхМПЗ", ПартииОтгруженныхМПЗ);
	Запрос.УстановитьПараметр("НоменклатурныеГруппы", НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ХарактерыДеятельности", ХарактерыДеятельности);
	Запрос.УстановитьПараметр("ДатаРегистратора", ДатаРегистратора);
	Запрос.УстановитьПараметр("ДатаНач", ДатаПервогоДокумента(ПартииОтгруженныхМПЗ));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПМПЗОборотыОбороты.КоличествоОборот КАК КоличествоОборот,
	|	ИПМПЗОборотыОбороты.СуммаОборот КАК СуммаОборот,
	|	ИПМПЗОборотыОбороты.НДСОборот КАК НДСОборот,
	|	ИПМПЗОборотыОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПМПЗОборотыОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПМПЗОборотыОбороты.НоменклатураСписанная КАК НоменклатураСписанная,
	|	ИПМПЗОборотыОбороты.ВидПоступившегоМПЗ КАК ВидПоступившегоМПЗ,
	|	ИПМПЗОборотыОбороты.ВидСписанногоМПЗ КАК ВидСписанногоМПЗ,
	|	ИПМПЗОборотыОбороты.НоменклатураПоступившая КАК НоменклатураПоступившая,
	|	ИПМПЗОборотыОбороты.ПартияСписаннойНоменклатуры КАК ПартияСписаннойНоменклатуры,
	|	ИПМПЗОборотыОбороты.ПартияПоступившейНоменклатуры КАК ПартияПоступившейНоменклатуры,
	|	ИПМПЗОборотыОбороты.ДокументОплаты
	|ИЗ
	|	РегистрНакопления.ИПМПЗОбороты.Обороты(
	|			&ДатаНач,
	|			&ДатаРегистратора,
	|			,
	|			Организация = &Организация
	|				И НоменклатурнаяГруппа В (&НоменклатурныеГруппы)
	|				И ХарактерДеятельности В (&ХарактерыДеятельности)
	|				И НоменклатураСписанная В (&ОтгруженныеМПЗ)
	|				И ВидСписанногоМПЗ В (&ВидыСписанныхМПЗ)
	|				И ПартияСписаннойНоменклатуры В (&ПартииОтгруженныхМПЗ)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПМПЗОборотыОбороты
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|ИТОГИ
	|	СУММА(КоличествоОборот),
	|	СУММА(СуммаОборот),
	|	СУММА(НДСОборот)
	|ПО
	|	ХарактерДеятельности,
	|	НоменклатурнаяГруппа,
	|	ВидСписанногоМПЗ,
	|	НоменклатураСписанная,
	|	ПартияСписаннойНоменклатуры,
	|	ВидПоступившегоМПЗ,
	|	НоменклатураПоступившая,
	|	ПартияПоступившейНоменклатуры";
	
	РезультатЗапроса = Запрос.Выполнить();

	ВыбХарактер = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ХарактерДеятельности");
	Пока ВыбХарактер.Следующий() Цикл
		ВыбГруппа = ВыбХарактер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НоменклатурнаяГруппа");
		Пока ВыбГруппа.Следующий() Цикл
			ВыбВидСписанногоМПЗ = ВыбГруппа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидСписанногоМПЗ");
			Пока ВыбВидСписанногоМПЗ.Следующий() Цикл
				ВыбНоменклатура = ВыбВидСписанногоМПЗ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НоменклатураСписанная");
				Пока ВыбНоменклатура.Следующий() Цикл
					ВыбПартия = ВыбНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПартияСписаннойНоменклатуры");
					Пока ВыбПартия.Следующий() Цикл
					
						Отбор.ВидМПЗ = ВыбПартия.ВидСписанногоМПЗ;
						Отбор.Номенклатура = ВыбПартия.НоменклатураСписанная;
						Отбор.Партия = ВыбПартия.ПартияСписаннойНоменклатуры;
						Отбор.ХарактерДеятельности = ВыбХарактер.ХарактерДеятельности;
						Отбор.НоменклатурнаяГруппа = ВыбГруппа.НоменклатурнаяГруппа;
						
						МассивОплаченныхПартий = ОплаченныеПартии.НайтиСтроки(Отбор);
						Если МассивОплаченныхПартий.Количество() = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						Оплачено = МассивОплаченныхПартий[0];
						
						СуммаМатериалаВсего = ВыбПартия.СуммаОборот; // всего неоплаченных оборотов по списанию данной партии материала
						СуммаМатериала = Оплачено.Сумма; // сумма, которую сейчас оплачиваем
						СуммаМатериала = Мин(СуммаМатериала, СуммаМатериалаВсего);
						Оплачено.Сумма = Оплачено.Сумма - СуммаМатериала; // часть оплаты, которая пришлась на остаток и (или) на реализованные материалы
						
						НДСМатериалаВсего = ВыбПартия.НДСОборот;
						НДСМатериала = Оплачено.НДС;
						НДСМатериала = Мин(НДСМатериала, НДСМатериалаВсего);
						Оплачено.НДС = Оплачено.НДС - НДСМатериала;
						
						КоличествоМатериалаВсего = ВыбПартия.КоличествоОборот;
						КоличествоМатериала = Оплачено.Количество;
						КоличествоМатериала = Мин(КоличествоМатериала, КоличествоМатериалаВсего);
						Оплачено.Количество = Оплачено.Количество - КоличествоМатериала;
						
						Если (СуммаМатериалаВсего = 0) ИЛИ (СуммаМатериала = 0) Тогда
							Продолжить;
						КонецЕсли;
						
						// Распределение оплаты по полученной продукции.
						Получено.Очистить();
						
						ВыбВидПоступившегоМПЗ = ВыбПартия.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидПоступившегоМПЗ");
						Пока ВыбВидПоступившегоМПЗ.Следующий() Цикл
							ВыбПродукция = ВыбВидПоступившегоМПЗ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НоменклатураПоступившая");
							Пока ВыбПродукция.Следующий() Цикл
								ВыбПартияПродукции = ВыбПродукция.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПартияПоступившейНоменклатуры");
								Пока ВыбПартияПродукции.Следующий() Цикл
									Продукция = Получено.Добавить();
									Продукция.ВидПоступившегоМПЗ = ВыбПартияПродукции.ВидПоступившегоМПЗ;
									Продукция.Номенклатура = ВыбПартияПродукции.НоменклатураПоступившая;
									Продукция.Партия = ВыбПартияПродукции.ПартияПоступившейНоменклатуры;
									Продукция.Сумма = ВыбПартияПродукции.СуммаОборот;
									Продукция.НДС = ВыбПартияПродукции.НДСОборот;
									Продукция.Количество = ВыбПартияПродукции.КоличествоОборот;
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
						
						Если СуммаМатериала <> СуммаМатериалаВсего Тогда
							МассивКоэф = Получено.ВыгрузитьКолонку("Сумма");
							РаспредСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаМатериала, МассивКоэф);
							Если РаспредСумма <> Неопределено Тогда
								Получено.ЗагрузитьКолонку(РаспредСумма, "Сумма");
								
							Иначе
								Получено.ЗаполнитьЗначения(0, "Сумма");
							КонецЕсли;
						КонецЕсли;
						
						Если НДСМатериала <> НДСМатериалаВсего Тогда
							МассивКоэф = Получено.ВыгрузитьКолонку("НДС");
							РаспредСумма = ОбщегоНазначения.РаспределитьПропорционально(НДСМатериала, МассивКоэф);
							Если РаспредСумма <> Неопределено Тогда
								Получено.ЗагрузитьКолонку(РаспредСумма, "НДС");
								
							Иначе
								Получено.ЗаполнитьЗначения(0, "НДС");
							КонецЕсли;
						КонецЕсли;
							
						Если КоличествоМатериала <> КоличествоМатериалаВсего Тогда
							МассивКоэф = Получено.ВыгрузитьКолонку("Количество");
							РаспредСумма = ОбщегоНазначения.РаспределитьПропорционально(КоличествоМатериала, МассивКоэф, 3);
							Если РаспредСумма <> Неопределено Тогда
								Получено.ЗагрузитьКолонку(РаспредСумма, "Количество");
								
							Иначе
								Получено.ЗаполнитьЗначения(0, "Количество");
							КонецЕсли;
						КонецЕсли;
						
						Для Каждого Продукция Из Получено Цикл
							
							Если Продукция.Количество = 0 И Продукция.Сумма = 0 И Продукция.НДС = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							Обороты = ДокументОбъект.Движения.ИПМПЗОбороты.Добавить();
							Обороты.Период = СтруктураШапкиДокумента.Дата;
							Обороты.Организация = СтруктураШапкиДокумента.Организация;
							Обороты.НоменклатурнаяГруппа = ВыбГруппа.НоменклатурнаяГруппа;
							Обороты.ХарактерДеятельности = ВыбХарактер.ХарактерДеятельности;
							Обороты.ВидСписанногоМПЗ = ВыбПартия.ВидСписанногоМПЗ;
							Обороты.ВидПоступившегоМПЗ = Продукция.ВидПоступившегоМПЗ;
							Обороты.НоменклатураСписанная = ВыбПартия.НоменклатураСписанная;
							Обороты.НоменклатураПоступившая = Продукция.Номенклатура;
							Обороты.ПартияСписаннойНоменклатуры = ВыбПартия.ПартияСписаннойНоменклатуры;
							Обороты.ПартияПоступившейНоменклатуры = Продукция.Партия;
							Обороты.Количество = - Продукция.Количество;
							Обороты.Сумма = - Продукция.Сумма;
							Обороты.НДС = - Продукция.НДС;
							
							Обороты = ДокументОбъект.Движения.ИПМПЗОбороты.Добавить();
							Обороты.Период = СтруктураШапкиДокумента.Дата;
							Обороты.Организация = СтруктураШапкиДокумента.Организация;
							Обороты.НоменклатурнаяГруппа = ВыбГруппа.НоменклатурнаяГруппа;
							Обороты.ХарактерДеятельности = ВыбХарактер.ХарактерДеятельности;
							Обороты.ВидСписанногоМПЗ = ВыбПартия.ВидСписанногоМПЗ;
							Обороты.ВидПоступившегоМПЗ = Продукция.ВидПоступившегоМПЗ;
							Обороты.НоменклатураСписанная = ВыбПартия.НоменклатураСписанная;
							Обороты.НоменклатураПоступившая = Продукция.Номенклатура;
							Обороты.ПартияСписаннойНоменклатуры = ВыбПартия.ПартияСписаннойНоменклатуры;
							Обороты.ПартияПоступившейНоменклатуры = Продукция.Партия;
							Обороты.ДокументОплаты = ДокументОбъект.Ссылка;
							Обороты.Количество = Продукция.Количество;
							Обороты.Сумма = Продукция.Сумма;
							Обороты.НДС = Продукция.НДС;
							
							Если Продукция.ВидПоступившегоМПЗ <> Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы Тогда
								НоваяЗапись = НовыеОплаченныеПартии.Добавить();
								
							Иначе
								НоваяЗапись = ИМР.Добавить();
							КонецЕсли;
							
							НоваяЗапись.НоменклатурнаяГруппа = ВыбГруппа.НоменклатурнаяГруппа;
							НоваяЗапись.ХарактерДеятельности = ВыбХарактер.ХарактерДеятельности;
							НоваяЗапись.ВидМПЗ = Продукция.ВидПоступившегоМПЗ;
							НоваяЗапись.Номенклатура = Продукция.Номенклатура;
							НоваяЗапись.Партия = Продукция.Партия;
							НоваяЗапись.РеквизитыДокументаОплаты = Оплачено.РеквизитыДокументаОплаты;
							НоваяЗапись.Количество = Продукция.Количество;
							НоваяЗапись.Сумма = Продукция.Сумма;
							НоваяЗапись.НДС = Продукция.НДС;

						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Если какие-либо МПЗ из ОплаченныеПартии не нашлись в регистре оборотов, значит они отгружены покупателям
	Для Каждого Оплата Из ОплаченныеПартии Цикл
		Если Оплата.Сумма <> 0 ИЛИ Оплата.Количество <> 0 ИЛИ Оплата.НДС <> 0 Тогда
			НоваяЗапись = Отгружено.Добавить(); // для поиска в таблице оборотов
			НоваяЗапись.НоменклатурнаяГруппа = Оплата.НоменклатурнаяГруппа;
			НоваяЗапись.ХарактерДеятельности = Оплата.ХарактерДеятельности;
			НоваяЗапись.ВидМПЗ = Оплата.ВидМПЗ;
			НоваяЗапись.Номенклатура = Оплата.Номенклатура;
			НоваяЗапись.Партия = Оплата.Партия;
			НоваяЗапись.РеквизитыДокументаОплаты = Оплата.РеквизитыДокументаОплаты;
			НоваяЗапись.Сумма = Оплата.Сумма;
			НоваяЗапись.Количество = Оплата.Количество;
			НоваяЗапись.НДС = Оплата.НДС;
		КонецЕсли;
	КонецЦикла;
	
	// Определим количество полученной продукции
	НовыеОплаченныеПартии.Свернуть("НоменклатурнаяГруппа,ХарактерДеятельности,ВидМПЗ,Номенклатура,Партия,РеквизитыДокументаОплаты", "Сумма,НДС,Количество");
	ИМР.Свернуть("НоменклатурнаяГруппа,ХарактерДеятельности,ВидМПЗ,Номенклатура,Партия,РеквизитыДокументаОплаты", "Сумма,НДС,Количество");
	Отгружено.Свернуть("НоменклатурнаяГруппа,ХарактерДеятельности,ВидМПЗ,Номенклатура,Партия,РеквизитыДокументаОплаты", "Сумма,НДС,Количество");
	
	ВидыМПЗ = НовыеОплаченныеПартии.ВыгрузитьКолонку("ВидМПЗ");
	МПЗ = НовыеОплаченныеПартии.ВыгрузитьКолонку("Номенклатура");
	Партии = НовыеОплаченныеПартии.ВыгрузитьКолонку("Партия");
	НоменклатурныеГруппы = НовыеОплаченныеПартии.ВыгрузитьКолонку("НоменклатурнаяГруппа");
	ХарактерыДеятельности = НовыеОплаченныеПартии.ВыгрузитьКолонку("ХарактерДеятельности");
	
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ВидыСписанныхМПЗ);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ОтгруженныеМПЗ);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПартииОтгруженныхМПЗ);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(НоменклатурныеГруппы);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ХарактерыДеятельности);
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗ");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("ИсточникДанных", НовыеОплаченныеПартии);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("Номенклатура, Партия, ВидМПЗ, НоменклатурнаяГруппа, ХарактерДеятельности", "Номенклатура, Партия, ВидМПЗ, НоменклатурнаяГруппа, ХарактерДеятельности");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	КонецЕсли;
	
	ДатаРегистратора = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("МПЗ", МПЗ);
	Запрос.УстановитьПараметр("ВидыМПЗ", ВидыМПЗ);
	Запрос.УстановитьПараметр("Партии", Партии);
	Запрос.УстановитьПараметр("НоменклатурныеГруппы", НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ХарактерыДеятельности", ХарактерыДеятельности);
	Запрос.УстановитьПараметр("ДатаРегистратора", ДатаРегистратора);
	Запрос.УстановитьПараметр("ДатаНач", ДатаПервогоДокумента(Партии));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ИПМПЗОбороты.КоличествоПриход) КАК Количество,
	               |	СУММА(ИПМПЗОбороты.СуммаПриход) КАК Сумма,
	               |	СУММА(ИПМПЗОбороты.НДСПриход) КАК НДС,
	               |	ИПМПЗОбороты.НоменклатурнаяГруппа,
	               |	ИПМПЗОбороты.ХарактерДеятельности,
	               |	ИПМПЗОбороты.ВидМПЗ,
	               |	ИПМПЗОбороты.Номенклатура,
	               |	ИПМПЗОбороты.Партия,
	               |	СУММА(ИПМПЗОбороты.КоличествоРасход) КАК КоличествоРасход,
	               |	СУММА(ИПМПЗОбороты.СуммаРасход) КАК СуммаРасход,
	               |	СУММА(ИПМПЗОбороты.НДСРасход) КАК НДСРасход
	               |ИЗ
	               |	РегистрНакопления.ИПМПЗ.Обороты(
	               |			&ДатаНач,
	               |			&ДатаРегистратора,
	               |			,
	               |			Организация = &Организация
	               |				И НоменклатурнаяГруппа В (&НоменклатурныеГруппы)
	               |				И ХарактерДеятельности В (&ХарактерыДеятельности)
	               |				И ВидМПЗ В (&ВидыМПЗ)
	               |				И Номенклатура В (&МПЗ)
	               |				И Партия В (&Партии)
	               |				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПМПЗОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ИПМПЗОбороты.НоменклатурнаяГруппа,
	               |	ИПМПЗОбороты.Номенклатура,
	               |	ИПМПЗОбороты.Партия,
	               |	ИПМПЗОбороты.ВидМПЗ,
	               |	ИПМПЗОбороты.ХарактерДеятельности
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	0,
	               |	ИПРБПОбороты.СуммаПриход,
	               |	ИПРБПОбороты.НДСПриход,
	               |	ИПРБПОбороты.НоменклатурнаяГруппа,
	               |	ИПРБПОбороты.ХарактерДеятельности,
	               |	NULL,
	               |	ИПРБПОбороты.ВидРасхода,
	               |	ИПРБПОбороты.Партия,
	               |	0,
	               |	ИПРБПОбороты.СуммаРасход,
	               |	ИПРБПОбороты.НДСРасход
	               |ИЗ
	               |	РегистрНакопления.ИПРБП.Обороты(
	               |			&ДатаНач,
	               |			&ДатаРегистратора,
	               |			,
	               |			Организация = &Организация
	               |				И НоменклатурнаяГруппа В (&НоменклатурныеГруппы)
	               |				И ХарактерДеятельности В (&ХарактерыДеятельности)
	               |				И Партия В (&Партии)
	               |				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПРБПОбороты";
				   
	ПолученныеМПЗ = Запрос.Выполнить().Выгрузить();
	Поиск = Новый Структура("НоменклатурнаяГруппа,ХарактерДеятельности,ВидМПЗ,Номенклатура,Партия");
	
	НовыеОплаченныеПартии.Колонки.Добавить("КоличествоРасход", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	НовыеОплаченныеПартии.Колонки.Добавить("СуммаРасход", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	НовыеОплаченныеПартии.Колонки.Добавить("НДСРасход", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	НовыеОплаченныеПартииДляОС = НовыеОплаченныеПартии.Скопировать();
	
	Для Каждого Оплачено Из НовыеОплаченныеПартии Цикл
		ЗаполнитьЗначенияСвойств(Поиск, Оплачено);
		СтрокиПартииМПЗ = ПолученныеМПЗ.НайтиСтроки(Поиск);
		
		Если СтрокиПартииМПЗ.Количество() > 0 Тогда
			ПартияМПЗ = СтрокиПартииМПЗ[0];
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если Оплачено.Сумма = ПартияМПЗ.Сумма Тогда
			Оплачено.Количество = ПартияМПЗ.Количество;
			
		Иначе
			Оплачено.Количество = Окр(ПартияМПЗ.Количество * (Оплачено.Сумма + Оплачено.НДС) / (ПартияМПЗ.Сумма + ПартияМПЗ.НДС), 3, 1);
		КонецЕсли;
		
		Оплачено.КоличествоРасход = Мин(ПартияМПЗ.КоличествоРасход, Оплачено.Количество);
		Оплачено.СуммаРасход = Мин(ПартияМПЗ.СуммаРасход, Оплачено.Сумма);
		Оплачено.НДСРасход = Мин(ПартияМПЗ.НДСРасход, Оплачено.НДС);
			
		ПартияМПЗ.Количество = ПартияМПЗ.Количество - Оплачено.Количество;
		
	КонецЦикла;
	
	//Для списанных при принятии ОС
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИППрочиеРасходыОбороты.СуммаОборот КАК Сумма,
	               |	ИППрочиеРасходыОбороты.НДСОборот КАК НДС,
	               |	ИППрочиеРасходыОбороты.НоменклатурнаяГруппа,
	               |	ИППрочиеРасходыОбороты.ХарактерДеятельности,
	               |	ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.ПрочиеРасходы) КАК ВидРасхода,
	               |	ИППрочиеРасходыОбороты.СтатьяЗатрат,
	               |	ИППрочиеРасходыОбороты.РасчетныйДокумент
	               |ИЗ
	               |	РегистрНакопления.ИППрочиеРасходы.Обороты(
	               |			&ДатаНач,
	               |			&ДатаРегистратора,
	               |			,
	               |			Организация = &Организация
	               |				И НоменклатурнаяГруппа В (&НоменклатурныеГруппы)
	               |				И ХарактерДеятельности В (&ХарактерыДеятельности)
	               |				И РасчетныйДокумент В (&Партии)
	               |				И РасчетныйДокумент ССЫЛКА Документ.ПринятиеКУчетуОС
	               |				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИППрочиеРасходыОбороты";
				   
	ПолученныеПрочиеРасходы = Запрос.Выполнить().Выгрузить();
	Поиск = Новый Структура("НоменклатурнаяГруппа,ХарактерДеятельности,РасчетныйДокумент");
	НовыеОплаченныеПартииДляОС.Колонки.Партия.Имя = "РасчетныйДокумент";
	
	Для Каждого Оплачено Из НовыеОплаченныеПартииДляОС Цикл
		ЗаполнитьЗначенияСвойств(Поиск, Оплачено);
		СтрокиПартииМПЗ = ПолученныеПрочиеРасходы.НайтиСтроки(Поиск);
		
		Если СтрокиПартииМПЗ.Количество() > 0 Тогда
			ПартияМПЗ = СтрокиПартииМПЗ[0];
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		ПартияМПЗ.Сумма = Мин(ПартияМПЗ.Сумма, Оплачено.Сумма);
		ПартияМПЗ.НДС   = Мин(ПартияМПЗ.НДС, Оплачено.НДС);
		
		Остатки = ДокументОбъект.Движения.ИППрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(Остатки, ПартияМПЗ);
		Остатки.Организация = СтруктураШапкиДокумента.Организация;
		Остатки.Сумма	= -ПартияМПЗ.Сумма;
		Остатки.НДС 	= -ПартияМПЗ.НДС;
		Остатки.Период  = ДокументОбъект.Дата;
		
		Остатки = ДокументОбъект.Движения.ИППрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(Остатки, ПартияМПЗ);
		Остатки.Организация = СтруктураШапкиДокумента.Организация;
		Остатки.ДокументОплаты	= ДокументОбъект.Ссылка;
	    Остатки.РеквизитыДокументаОплаты = Оплачено.РеквизитыДокументаОплаты;
		Остатки.Период  = ДокументОбъект.Дата;
		
	КонецЦикла;

	
	// Впишим платежный документ в движения поступления продукции
	Для Каждого Продукция Из НовыеОплаченныеПартии Цикл
		Если Продукция.Количество <> 0 ИЛИ Продукция.Сумма <> 0 ИЛИ Продукция.НДС <> 0 Тогда
			Остатки = ДокументОбъект.Движения.ИПМПЗ.ДобавитьПриход();
			Остатки.Период = СтруктураШапкиДокумента.Дата;
			Остатки.Организация = СтруктураШапкиДокумента.Организация;
			Остатки.НоменклатурнаяГруппа = Продукция.НоменклатурнаяГруппа;
			Остатки.ХарактерДеятельности = Продукция.ХарактерДеятельности;
			Остатки.ВидМПЗ = Продукция.ВидМПЗ;
			Остатки.Номенклатура = Продукция.Номенклатура;
			Остатки.Партия = Продукция.Партия;
			Остатки.Количество = - Продукция.Количество;
			Остатки.Сумма = - Продукция.Сумма;
			Остатки.НДС = - Продукция.НДС;
			
			Остатки = ДокументОбъект.Движения.ИПМПЗ.ДобавитьПриход();
			Остатки.Период = СтруктураШапкиДокумента.Дата;
			Остатки.Организация = СтруктураШапкиДокумента.Организация;
			Остатки.НоменклатурнаяГруппа = Продукция.НоменклатурнаяГруппа;
			Остатки.ХарактерДеятельности = Продукция.ХарактерДеятельности;
			Остатки.ВидМПЗ = Продукция.ВидМПЗ;
			Остатки.Номенклатура = Продукция.Номенклатура;
			Остатки.Партия = Продукция.Партия;
			Остатки.ДокументОплаты = ДокументОбъект.Ссылка;
			Остатки.РеквизитыДокументаОплаты = Продукция.РеквизитыДокументаОплаты;
			Остатки.Количество = Продукция.Количество;
			Остатки.Сумма = Продукция.Сумма;
			Остатки.НДС = Продукция.НДС;
		КонецЕсли;
		
		Если Продукция.КоличествоРасход <> 0 ИЛИ Продукция.СуммаРасход <> 0 ИЛИ Продукция.НДСРасход <> 0 Тогда
			Остатки = ДокументОбъект.Движения.ИПМПЗ.ДобавитьРасход();
			Остатки.Период = СтруктураШапкиДокумента.Дата;
			Остатки.Организация = СтруктураШапкиДокумента.Организация;
			Остатки.НоменклатурнаяГруппа = Продукция.НоменклатурнаяГруппа;
			Остатки.ХарактерДеятельности = Продукция.ХарактерДеятельности;
			Остатки.ВидМПЗ = Продукция.ВидМПЗ;
			Остатки.Номенклатура = Продукция.Номенклатура;
			Остатки.Партия = Продукция.Партия;
			Остатки.Количество = - Продукция.КоличествоРасход;
			Остатки.Сумма = - Продукция.СуммаРасход;
			Остатки.НДС = - Продукция.НДСРасход;
			
			Остатки = ДокументОбъект.Движения.ИПМПЗ.ДобавитьРасход();
			Остатки.Период = СтруктураШапкиДокумента.Дата;
			Остатки.Организация = СтруктураШапкиДокумента.Организация;
			Остатки.НоменклатурнаяГруппа = Продукция.НоменклатурнаяГруппа;
			Остатки.ХарактерДеятельности = Продукция.ХарактерДеятельности;
			Остатки.ВидМПЗ = Продукция.ВидМПЗ;
			Остатки.Номенклатура = Продукция.Номенклатура;
			Остатки.Партия = Продукция.Партия;
			Остатки.ДокументОплаты = ДокументОбъект.Ссылка;
			Остатки.РеквизитыДокументаОплаты = Продукция.РеквизитыДокументаОплаты;
			Остатки.Количество = Продукция.КоличествоРасход;
			Остатки.Сумма = Продукция.СуммаРасход;
			Остатки.НДС = Продукция.НДСРасход;
		КонецЕсли;
	КонецЦикла;
	
	Если НовыеОплаченныеПартии.Количество() > 0 Тогда
		ИзменениеДокументаОплаты(ДокументОбъект, СтруктураШапкиДокумента, НовыеОплаченныеПартии, ИМР, Отгружено);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////
// ПОСТУПЛЕНИЕ МПЗ

// ТипПоступления: 1 - поступление товаров и услуг, 2 - доп. расходы
//
Процедура ПоступлениеМПЗ(ДокументОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, ТипПоступления, СписокМПЗ, ИмяСчетаУчета, ИмяНоменклатуры, ИмяНГ, ИмяСтатьиЗатрат, СписокПлатежей) Экспорт
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		Возврат;
	
	ИначеЕсли (СписокМПЗ = Неопределено) ИЛИ (СписокМПЗ.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	//Приведение таблицы взаиморасчетов
	Если СписокПлатежей.Колонки.Найти("ДокументРасчетов") <> Неопределено Тогда
		СписокПлатежей.Колонки.ДокументРасчетов.Имя = "ДокументОплаты";
	КонецЕсли;
	Если СписокПлатежей.Колонки.Найти("СуммаБУ") <> Неопределено Тогда
		СписокПлатежей.Колонки.СуммаБУ.Имя = "Сумма";
	КонецЕсли;
	Если СписокПлатежей.Колонки.Найти("СуммаВзаиморасчетов") <> Неопределено Тогда
		СписокПлатежей.Колонки.СуммаВзаиморасчетов.Имя = "СуммаВал";
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("Склад") Тогда
		Если СтруктураШапкиДокумента.Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка
			И УчетнаяПолитикаНУ.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СписокПлатежей <> Неопределено Тогда
		Если СписокПлатежей.Колонки.Найти("РеквизитыДокументаОплаты") = Неопределено Тогда
			СписокПлатежей.Колонки.Добавить("РеквизитыДокументаОплаты");
			Для Каждого ДокументОплаты Из СписокПлатежей Цикл
				ДокументОплаты.РеквизитыДокументаОплаты = РеквизитыДокументаОплаты(ДокументОплаты.ДокументОплаты);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого МПЗ из СписокМПЗ Цикл
		
		Если МПЗ.СуммаБезНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаНеоплаченная = МПЗ.СуммаБезНДС + МПЗ.НДС;
		Сумма = МПЗ.СуммаБезНДС + МПЗ.НДС;
		Количество = ?(ТипПоступления = 2, 0, МПЗ.Количество);
		НДС = МПЗ.НДС;
				
		СчетУчета = ?(ИмяСчетаУчета <> Неопределено, МПЗ[ИмяСчетаУчета], Неопределено);
		Номенклатура = ?(ИмяНоменклатуры <> Неопределено, МПЗ[ИмяНоменклатуры], Неопределено);
		СтатьяЗатрат = НайтиСсылкуВСтроке(СписокМПЗ, МПЗ, ИмяСтатьиЗатрат, 2);
		
		Если ТипПоступления = 1 Тогда
			ВидМПЗ = ВидМПЗПоСчетуУчета(СчетУчета, СтатьяЗатрат);
			
			Если ВидМПЗ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ТипПоступления = 2 Тогда
			ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы;
		КонецЕсли;
		
		НГ = НайтиСсылкуВСтроке(СписокМПЗ, МПЗ, ИмяНГ, 1);
		ХарактерДеятельности = ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, СчетУчета, СтатьяЗатрат,, УчетнаяПолитикаНУ);
		НоменклатурнаяГруппа = НоменклатурнаяГруппаПоОперации(Истина, ?(НГ=неопределено,Номенклатура,неопределено), НГ, ВидМПЗ, УчетнаяПолитикаНУ);
		
		Если СписокПлатежей <> Неопределено Тогда
			Для Каждого ДокументОплаты Из СписокПлатежей Цикл
				
				Если ДокументОплаты.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаЗачета = Мин(СуммаНеоплаченная, ДокументОплаты.Сумма);
				СуммаНеоплаченная = СуммаНеоплаченная - СуммаЗачета;
				ДокументОплаты.Сумма = ДокументОплаты.Сумма - СуммаЗачета;
				
				Если ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы Тогда
					Движение = ДокументОбъект.Движения.ИПИныеМатериальныеРасходы.Добавить();
					Движение.СтатьяЗатрат = СтатьяЗатрат;
					Движение.Партия = ДокументОбъект.Ссылка;
					
					Если ТипПоступления = 2 Тогда
						Движение.МПЗ = МПЗ.Номенклатура;
						Движение.ПартияМПЗ = МПЗ.ДокументОприходования;
					КонецЕсли;
					
					Если СуммаНеоплаченная = 0 Тогда
						Движение.Количество = Количество;
						Движение.Сумма = Сумма - НДС;
						Движение.НДС = НДС;
						
					Иначе
						Если ТипПоступления = 1 Тогда
							Движение.Количество = МПЗ.Количество * СуммаЗачета / (МПЗ.СуммаБезНДС + МПЗ.НДС);
						Иначе
							Движение.Количество = 0;
						КонецЕсли;
						Движение.НДС = МПЗ.НДС * СуммаЗачета / (МПЗ.СуммаБезНДС + МПЗ.НДС);
						Движение.Сумма = СуммаЗачета - Движение.НДС;
						
						Сумма = Сумма - СуммаЗачета;
						НДС = НДС - Движение.НДС;
						Количество = Количество - Движение.Количество;
					КонецЕсли;
					
				ИначеЕсли ВидМПЗ = Перечисления.ВидыМПЗ.ПрочиеРасходы Тогда
					Движение = ДокументОбъект.Движения.ИППрочиеРасходы.Добавить();
					Движение.СтатьяЗатрат = СтатьяЗатрат;
					Движение.РасчетныйДокумент = ДокументОбъект.Ссылка;
					
					Если СуммаНеоплаченная = 0 Тогда
						Движение.Сумма = Сумма - НДС;
						Движение.НДС = НДС;
						
					Иначе
						Движение.НДС = МПЗ.НДС * СуммаЗачета / (МПЗ.СуммаБезНДС + МПЗ.НДС);
						Движение.Сумма = СуммаЗачета - Движение.НДС;
						
						Сумма = Сумма - СуммаЗачета;
						НДС = НДС - Движение.НДС;
					КонецЕсли;
					
				ИначеЕсли ВидМПЗ = Перечисления.ВидыМПЗ.ОС ИЛИ ВидМПЗ = Перечисления.ВидыМПЗ.НМА ИЛИ ВидМПЗ = Перечисления.ВидыМПЗ.КапитальныеВложения Тогда
					Движение = ДокументОбъект.Движения.ИПМПЗ.Добавить();
					Движение.Номенклатура = Номенклатура;
					Движение.Партия = ДокументОбъект.Ссылка;
					Движение.ВидМПЗ = ВидМПЗ;
					
					Если СуммаНеоплаченная = 0 Тогда
						
						Если СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость")
							И СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
							
							Движение.Количество = Количество;
							Движение.Сумма = Сумма;
							Движение.НДС = 0;
							
						Иначе
							Движение.Количество = Количество;
							Движение.Сумма = Сумма - НДС;
							Движение.НДС = НДС;
						КонецЕсли;
						
					Иначе
						
						Если СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость")
							И СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
							
							Движение.Количество = Количество;
							Движение.Сумма = СуммаЗачета;
							Движение.НДС = 0;
							
						Иначе
							Движение.Количество = МПЗ.Количество * СуммаЗачета / (МПЗ.СуммаБезНДС + МПЗ.НДС);
							Движение.НДС = МПЗ.НДС * СуммаЗачета / (МПЗ.СуммаБезНДС + МПЗ.НДС);
							Движение.Сумма = СуммаЗачета - Движение.НДС;
						КонецЕсли;
						
						Сумма = Сумма - СуммаЗачета;
						НДС = НДС - Движение.НДС;
						Количество = Количество - Движение.Количество;
					КонецЕсли;
					
				ИначеЕсли ВидМПЗ = Перечисления.ВидыМПЗ.РБП Тогда
					Движение = ДокументОбъект.Движения.ИПРБП.Добавить();
					Движение.ВидРасхода = СтатьяЗатрат;
					Движение.Партия = ДокументОбъект.Ссылка;
					
					Если СуммаНеоплаченная = 0 Тогда
						Движение.Сумма = Сумма - НДС;
						Движение.НДС = НДС;
						
					Иначе
						Движение.Сумма = СуммаЗачета - Движение.НДС;
						Движение.НДС = МПЗ.НДС * СуммаЗачета / (МПЗ.СуммаБезНДС + МПЗ.НДС);
						
						Сумма = Сумма - СуммаЗачета;
						НДС = НДС - Движение.НДС;
					КонецЕсли;
					
				Иначе
					Движение = ДокументОбъект.Движения.ИПМПЗ.Добавить();
					Движение.Номенклатура = Номенклатура;
					Движение.Партия = ДокументОбъект.Ссылка;
					Движение.ВидМПЗ = ВидМПЗ;
					
					Если СуммаНеоплаченная = 0 Тогда
						Движение.Количество = Количество;
						Движение.Сумма = Сумма - НДС;
						Движение.НДС = НДС;
						
					Иначе
						Движение.Количество = МПЗ.Количество * СуммаЗачета / (МПЗ.СуммаБезНДС + МПЗ.НДС);
						Движение.НДС = МПЗ.НДС * СуммаЗачета / (МПЗ.СуммаБезНДС + МПЗ.НДС);
						Движение.Сумма = СуммаЗачета - Движение.НДС;
						
						Сумма = Сумма - СуммаЗачета;
						НДС = НДС - Движение.НДС;
						Количество = Количество - Движение.Количество;
					КонецЕсли;
				КонецЕсли;
					
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.Организация = СтруктураШапкиДокумента.Организация;
				Движение.ХарактерДеятельности = ХарактерДеятельности;
				Движение.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
				Движение.ДокументОплаты = ДокументОплаты.ДокументОплаты;
				Движение.РеквизитыДокументаОплаты = ДокументОплаты.РеквизитыДокументаОплаты;
				
				Если СуммаНеоплаченная = 0 Тогда
					Прервать;
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;
		
		Если СуммаНеоплаченная <> 0 Тогда
			Если ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы Тогда
				Движение = ДокументОбъект.Движения.ИПИныеМатериальныеРасходы.Добавить();
				Движение.СтатьяЗатрат = СтатьяЗатрат;
				Движение.Партия = ДокументОбъект.Ссылка;
				Движение.Количество = Количество;
				Движение.Сумма = Сумма - НДС;
				Движение.НДС = НДС;
				
				Если ТипПоступления = 2 Тогда
					Движение.МПЗ = МПЗ.Номенклатура;
					Движение.ПартияМПЗ = МПЗ.ДокументОприходования;
				КонецЕсли;
				
			ИначеЕсли ВидМПЗ = Перечисления.ВидыМПЗ.ПрочиеРасходы Тогда
				Движение = ДокументОбъект.Движения.ИППрочиеРасходы.Добавить();
				Движение.СтатьяЗатрат = СтатьяЗатрат;
				Движение.РасчетныйДокумент = ДокументОбъект.Ссылка;
				Движение.Сумма = Сумма - НДС;
				Движение.НДС = НДС;
				
			ИначеЕсли ВидМПЗ = Перечисления.ВидыМПЗ.ОС ИЛИ ВидМПЗ = Перечисления.ВидыМПЗ.НМА ИЛИ ВидМПЗ = Перечисления.ВидыМПЗ.КапитальныеВложения Тогда
				Движение = ДокументОбъект.Движения.ИПМПЗ.Добавить();
				Движение.Номенклатура = Номенклатура;
				Движение.Партия = ДокументОбъект.Ссылка;
				Движение.ВидМПЗ = ВидМПЗ;
				Движение.Количество = Количество;
				
				Если СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость")
					И СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
					
					Движение.Сумма = Сумма;
					Движение.НДС = 0;
					
				Иначе
					Движение.Сумма = Сумма - НДС;
					Движение.НДС = НДС;
				КонецЕсли;
				
			Иначе
				Движение = ДокументОбъект.Движения.ИПМПЗ.Добавить();
				Движение.Номенклатура = Номенклатура;
				Движение.Партия = ДокументОбъект.Ссылка;
				Движение.ВидМПЗ = ВидМПЗ;
				Движение.Количество = Количество;
				Движение.Сумма = Сумма - НДС;
				Движение.НДС = НДС;
			КонецЕсли;
				
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.Организация = СтруктураШапкиДокумента.Организация;
			Движение.ХарактерДеятельности = ХарактерДеятельности;
			Движение.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоступлениеПродукции(ДокументОбъект, СтруктураШапкиДокумента, УчетнаяПолитикаНУ, ПолученоПродукции, ИмяСчетаУчета, ИмяСчетаДоходов, ИмяНГ, ИмяНоменклатуры, СтоимостьПродукции) Экспорт
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		Возврат;
		
	ИначеЕсли СтоимостьПродукции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтоимостьПродукции.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Отбор = Новый Структура("Номенклатура,НоменклатурнаяГруппа,ХарактерДеятельности,ВидМПЗ");
	МассивДляРаспределения = Новый Массив;
	
	Для каждого МПЗ из ПолученоПродукции Цикл
		
		СчетУчета = ?(ИмяСчетаУчета <> Неопределено, МПЗ[ИмяСчетаУчета], Неопределено);
		СчетДоходов = ?(ИмяСчетаДоходов <> Неопределено, МПЗ[ИмяСчетаДоходов], Неопределено);
		Продукция = ?(ИмяНоменклатуры <> Неопределено, МПЗ[ИмяНоменклатуры], Неопределено);
		
		ВидМПЗ = ВидМПЗПоСчетуУчета(СчетУчета, Продукция);
		Если ВидМПЗ = Перечисления.ВидыМПЗ.ПрочиеРасходы 
			ИЛИ ВидМПЗ = Неопределено Тогда
			ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы;
		КонецЕсли;
		
		НГ = НайтиСсылкуВСтроке(ПолученоПродукции, МПЗ, ИмяНГ, 1);
		ХарактерДеятельности = ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, СчетУчета,, СчетУчета, УчетнаяПолитикаНУ);
		НоменклатурнаяГруппа = НоменклатурнаяГруппаПоОперации(Ложь,,НГ,, УчетнаяПолитикаНУ);
	
		Отбор.Номенклатура = Продукция;
		Отбор.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		Отбор.ХарактерДеятельности = ХарактерДеятельности;
		Отбор.ВидМПЗ = ВидМПЗ;
		
		МассивДляРаспределения.Очистить();
		ДокументыОплаты = СтоимостьПродукции.НайтиСтроки(Отбор);
		Для каждого ДокументОплаты из ДокументыОплаты Цикл
			МассивДляРаспределения.Добавить(ДокументОплаты.Сумма);
		КонецЦикла;
		
		МассивРезультата = ОбщегоНазначения.РаспределитьПропорционально(МПЗ.Количество, МассивДляРаспределения, 3);
		Для Индекс = 0 По ДокументыОплаты.ВГраница() Цикл
			Если МассивРезультата = Неопределено тогда
				ДокументыОплаты[Индекс].Количество = 0;
				
			Иначе	
				ДокументыОплаты[Индекс].Количество = МассивРезультата[Индекс];
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтоимостьПродукции.Колонки.Найти("РеквизитыДокументаОплаты") = Неопределено Тогда
		СтоимостьПродукции.Колонки.Добавить("РеквизитыДокументаОплаты");
		Для Каждого ДокументОплаты Из СтоимостьПродукции Цикл
			ДокументОплаты.РеквизитыДокументаОплаты = РеквизитыДокументаОплаты(ДокументОплаты.ДокументОплаты);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого МПЗ из СтоимостьПродукции Цикл
		
		Если (МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы) ИЛИ (МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.ПрочиеРасходы) Тогда 
			
			// Прочие расходы относим на ИМР, потому что списанные МПЗ
			// не могут относиться к прочим расходам
			
			Движение = ДокументОбъект.Движения.ИПИныеМатериальныеРасходы.Добавить();
			Движение.СтатьяЗатрат = МПЗ.Номенклатура;
			
		Иначе
			Движение = ДокументОбъект.Движения.ИПМПЗ.Добавить();
			Движение.Номенклатура = МПЗ.Номенклатура;
			Движение.ВидМПЗ = МПЗ.ВидМПЗ;
		КонецЕсли;
			
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация = СтруктураШапкиДокумента.Организация;
		Движение.ХарактерДеятельности = МПЗ.ХарактерДеятельности;
		Движение.НоменклатурнаяГруппа = МПЗ.НоменклатурнаяГруппа;
		Движение.Партия = ДокументОбъект.Ссылка;
		Движение.ДокументОплаты = МПЗ.ДокументОплаты;
		Движение.РеквизитыДокументаОплаты = МПЗ.РеквизитыДокументаОплаты;
		
		Движение.Количество = МПЗ.Количество;
		Движение.Сумма = МПЗ.Сумма;
		Движение.НДС = МПЗ.НДС;
		
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////
// СПИСАНИЕ МПЗ

// Если материал списывается на себестоимость продукции, но, при этом, в регистре
// "ИП Иные материальные расходы" отражены затраты, связанные с приобретением
// данного материала (ссылка на материал в измерении МПЗ), то необходимо "перекинуть"
// данные затраты с партии материала на партию продукции.
Процедура ИзменениеПартииМПЗДляИМР(ДокументОбъект, СтруктураШапкиДокумента, Материалы)
	
	СписокМПЗ = Материалы.ВыгрузитьКолонку("НоменклатураСписанная");
	СписокПартийМПЗ = Материалы.ВыгрузитьКолонку("ПартияСписаннойНоменклатуры");
	
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокМПЗ);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокПартийМПЗ);
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПИныеМатериальныеРасходы");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("ИсточникДанных", Материалы);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("МПЗ, ПартияМПЗ", "НоменклатураСписанная, ПартияСписаннойНоменклатуры");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("МПЗ", СписокМПЗ);
	Запрос.УстановитьПараметр("ПартииМПЗ", СписокПартийМПЗ);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
	|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
	|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат,
	|	ИПИныеМатериальныеРасходыОстатки.Партия,
	|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
	|	ИПИныеМатериальныеРасходыОстатки.МПЗ КАК МПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ КАК ПартияМПЗ,
	|	СУММА(ИПИныеМатериальныеРасходыОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(ИПИныеМатериальныеРасходыОстатки.СуммаОстаток) КАК Сумма,
	|	СУММА(ИПИныеМатериальныеРасходыОстатки.НДСОстаток) КАК НДС
	|ИЗ
	|	РегистрНакопления.ИПИныеМатериальныеРасходы.Остатки(
	|			&Регистратор,
	|			Организация = &Организация
	|				И МПЗ В (&МПЗ)
	|				И ПартияМПЗ В (&ПартииМПЗ)) КАК ИПИныеМатериальныеРасходыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
	|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат,
	|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
	|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
	|	ИПИныеМатериальныеРасходыОстатки.Партия,
	|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма),
	|	СУММА(НДС)
	|ПО
	|	МПЗ,
	|	ПартияМПЗ";
	
	СтруктураОтбора = Новый Структура("НоменклатураСписанная, ПартияСписаннойНоменклатуры");
	
	Материалы.Колонки.Добавить("КоличествоИМР");
	Материалы.Колонки.Добавить("СуммаИМР");
	Материалы.Колонки.Добавить("НДСИМР");
	
	ВыборкаМПЗ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "МПЗ");
	Пока ВыборкаМПЗ.Следующий() Цикл
		ВыборкаПартии = ВыборкаМПЗ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПартияМПЗ");
		Пока ВыборкаПартии.Следующий() Цикл
			Выборка = ВыборкаПартии.Выбрать();
			Пока Выборка.Следующий() Цикл
		
				// Если на стоимость списанного материала относятся ИМР, то у этих ИМР необходимо заменить партию списанного материала
				// на партию полученной продукции.
				
				СтруктураОтбора.НоменклатураСписанная = Выборка.МПЗ; 
				СтруктураОтбора.ПартияСписаннойНоменклатуры = Выборка.ПартияМПЗ;
				
				СтрокиВыбМатериала = Материалы.НайтиСтроки(СтруктураОтбора);
				ТабМатериала = Материалы.Скопировать(СтрокиВыбМатериала);
				
				МатериалИтогСумма = ТабМатериала.Итог("Сумма");
				МатериалИтогСуммаОстаток = ТабМатериала.Итог("СуммаОстаток");
				
				Если МатериалИтогСумма = МатериалИтогСуммаОстаток Тогда
					Сумма = Выборка.Сумма;
					НДС = Выборка.НДС;
					Количество = Выборка.Количество;
					
				ИначеЕсли МатериалИтогСуммаОстаток <> 0 Тогда
					СуммаСНДС = Окр((Выборка.Сумма + Выборка.НДС) * МатериалИтогСумма / МатериалИтогСуммаОстаток, 2, 1);
					Сумма = Окр(Выборка.Сумма * МатериалИтогСумма / МатериалИтогСуммаОстаток, 2, 1);
					НДС = СуммаСНДС - Сумма;
					Количество = Окр(Выборка.Количество * МатериалИтогСумма / МатериалИтогСуммаОстаток, 3, 1);
					
				Иначе
					// Ошибка
					Прервать;
				КонецЕсли;
				
				МассивКоэф = ТабМатериала.ВыгрузитьКолонку("Сумма");
				
				РаспредСумма = ОбщегоНазначения.РаспределитьПропорционально(Сумма, МассивКоэф);
				Если РаспредСумма <> Неопределено Тогда
					ТабМатериала.ЗагрузитьКолонку(РаспредСумма, "СуммаИМР");
				КонецЕсли;
				
				РаспредСумма = ОбщегоНазначения.РаспределитьПропорционально(НДС, МассивКоэф);
				Если РаспредСумма <> Неопределено Тогда
					ТабМатериала.ЗагрузитьКолонку(РаспредСумма, "НДСИМР");
				КонецЕсли;
				
				РаспредСумма = ОбщегоНазначения.РаспределитьПропорционально(Количество, МассивКоэф, 3);
				Если РаспредСумма <> Неопределено Тогда
					ТабМатериала.ЗагрузитьКолонку(РаспредСумма, "КоличествоИМР");
				КонецЕсли;
				
				Для Каждого НоменклатураПолуч Из ТабМатериала Цикл
					Движение = ДокументОбъект.Движения.ИПИныеМатериальныеРасходы.Добавить();
					Движение.Период = СтруктураШапкиДокумента.Дата;
					Движение.Организация  = СтруктураШапкиДокумента.Организация;
					Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
					Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
					Движение.СтатьяЗатрат = Выборка.СтатьяЗатрат;
					Движение.Партия = Выборка.Партия;
					Движение.ДокументОплаты = Выборка.ДокументОплаты;
					Движение.МПЗ = НоменклатураПолуч.НоменклатураПоступившая;
					Движение.ПартияМПЗ = ДокументОбъект.Ссылка;
					Движение.Количество = НоменклатураПолуч.КоличествоИМР;
					Движение.Сумма = НоменклатураПолуч.СуммаИМР;
					Движение.НДС = НоменклатураПолуч.НДСИМР;
				КонецЦикла;
				
				Движение = ДокументОбъект.Движения.ИПИныеМатериальныеРасходы.Добавить();
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.Организация  = СтруктураШапкиДокумента.Организация;
				Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
				Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
				Движение.СтатьяЗатрат = Выборка.СтатьяЗатрат;
				Движение.Партия = Выборка.Партия;
				Движение.ДокументОплаты = Выборка.ДокументОплаты;
				Движение.МПЗ = Выборка.МПЗ;
				Движение.ПартияМПЗ = Выборка.ПартияМПЗ;
				Движение.Количество = -Количество;
				Движение.Сумма = -Сумма;
				Движение.НДС = -НДС;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияРасходаМПЗ(ДокументОбъект, СтруктураШапкиДокумента, ИзмененияВидаДеятельности, Выборка, ХарактерДеятельности, НоменклатурнаяГруппа, Количество, Выручка, НДСНачисленный, ВидОтгрузки, Продукция, СтоимостьПродукции, ВидМПЗ)
	
	// Стоимость надо распределить по документам оплаты
	Если Количество = Выборка.Количество ИЛИ Количество = 0 Тогда
		КоличествоСписано = Количество;
		ВыручкаСписано = Выручка;
		НДСНачисленныйСписано = НДСНачисленный;
		СуммаСписано = Выборка.Сумма;
		НДССписано = Выборка.НДС;
		Количество = 0;
		Выручка = 0;
		НДСНачисленный = 0;
		
	ИначеЕсли Выборка.Количество = 0 Тогда
		//По документу оплаты уже все списано
		Возврат;
		
	Иначе
		КоличествоСписано = Мин(Количество, Выборка.Количество);
		СуммаСписано = Окр(Выборка.Сумма * КоличествоСписано / Выборка.Количество, 2, 1);
		СуммаСписаноСНДС = Окр((Выборка.Сумма + Выборка.НДС) * КоличествоСписано / Выборка.Количество, 2, 1);
		НДССписано = СуммаСписаноСНДС - СуммаСписано;
		
		ВыручкаСписано = Окр(Выручка * КоличествоСписано / Количество, 2, 1);
		НДСНачисленныйСписано = Окр(НДСНачисленный * КоличествоСписано / Количество, 2, 1);
		
		Количество = Количество - КоличествоСписано;
		Выручка = Выручка - ВыручкаСписано;
		НДСНачисленный = НДСНачисленный - НДСНачисленныйСписано;
	КонецЕсли;
	
	Выборка.Сумма = Выборка.Сумма - СуммаСписано;
	Выборка.НДС = Выборка.НДС - НДССписано;
	Выборка.Количество = Выборка.Количество - КоличествоСписано;
	
	СтрРодитель = Выборка.Родитель;
	Пока СтрРодитель <> Неопределено Цикл
		СтрРодитель.Сумма = СтрРодитель.Сумма - СуммаСписано;
		СтрРодитель.НДС = СтрРодитель.НДС - НДССписано;
		СтрРодитель.Количество = СтрРодитель.Количество - КоличествоСписано;
		СтрРодитель = СтрРодитель.Родитель;
	КонецЦикла;
	
	// Особенность реализации амортизируемого имущества:
	Если (ВидОтгрузки = 1) И (Выборка.ВидМПЗ = Перечисления.ВидыМПЗ.ОС) ИЛИ (Выборка.ВидМПЗ = Перечисления.ВидыМПЗ.НМА) Тогда
		
		// Сумма убытка будет признаваться расходами в течение оставшегося срока полезного использования
		// и отражаться в таблице 6-2 вручную. Сумма, подлежащая таким образом списанию, остается
		// в регистре "ИП МПЗ", но без количества.
		
		Если СуммаСписано > (ВыручкаСписано - НДСНачисленныйСписано) Тогда
			СуммаСписано = ВыручкаСписано - НДСНачисленныйСписано;
		КонецЕсли;
	КонецЕсли;
	
	Движение = ДокументОбъект.Движения.ИПМПЗ.ДобавитьРасход();
	Движение.Период = СтруктураШапкиДокумента.Дата;
	Движение.Организация = СтруктураШапкиДокумента.Организация;
	Движение.ВидМПЗ = Выборка.ВидМПЗ;
	Движение.Номенклатура = Выборка.Номенклатура;
	Движение.Партия = Выборка.Партия;
	Движение.ДокументОплаты = Выборка.ДокументОплаты;
	Движение.Количество = КоличествоСписано;
	Движение.Сумма = СуммаСписано;
	Движение.НДС = НДССписано;
	
	Если (ВидОтгрузки = 2) ИЛИ ((ВидОтгрузки = 1) И (ЗначениеЗаполнено(НоменклатурнаяГруппа))) Тогда
		Движение.ХарактерДеятельности = ХарактерДеятельности;
		Движение.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		
	Иначе
		Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
		Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
		Возврат;
	КонецЕсли;
		
	Если НоменклатурнаяГруппа <> Выборка.НоменклатурнаяГруппа ИЛИ ХарактерДеятельности <> Выборка.ХарактерДеятельности Тогда
		НоваяЗапись = ИзмененияВидаДеятельности.Добавить();
		НоваяЗапись.ХарактерДеятельности1 = Выборка.ХарактерДеятельности;
		НоваяЗапись.НоменклатурнаяГруппа1 = Выборка.НоменклатурнаяГруппа;
		НоваяЗапись.ХарактерДеятельности2 = ХарактерДеятельности;
		НоваяЗапись.НоменклатурнаяГруппа2 = НоменклатурнаяГруппа;
		НоваяЗапись.Номенклатура = Выборка.Номенклатура;
		НоваяЗапись.Партия = Выборка.Партия;
		НоваяЗапись.ДокументОплаты = Выборка.ДокументОплаты;
		НоваяЗапись.ВидМПЗ = Выборка.ВидМПЗ;
		НоваяЗапись.Количество = КоличествоСписано;
		НоваяЗапись.Сумма = СуммаСписано;
		НоваяЗапись.НДС = НДССписано;
	КонецЕсли;
	
	Если (ВидОтгрузки = 1) И ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда // реализация товаров, работ, услуг
		Отгружено = ДокументОбъект.Движения.ИПМПЗОтгруженные.ДобавитьПриход();
		Отгружено.Период = СтруктураШапкиДокумента.Дата;
		Отгружено.Организация = СтруктураШапкиДокумента.Организация;
		Отгружено.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		Отгружено.ХарактерДеятельности = ХарактерДеятельности;
		Отгружено.ВидМПЗ = Выборка.ВидМПЗ;
		Отгружено.Номенклатура = Выборка.Номенклатура;
		Отгружено.ДокументОтгрузки = ДокументОбъект.Ссылка;
		Отгружено.Партия = Выборка.Партия;
		Отгружено.ДокументОплаты = Выборка.ДокументОплаты;
		Отгружено.Количество = КоличествоСписано; 
		Отгружено.Сумма = СуммаСписано;
		Отгружено.НДС = НДССписано;
		Отгружено.Выручка = ВыручкаСписано;
		Отгружено.НДСНачисленный = НДСНачисленныйСписано;
	
	ИначеЕсли ВидОтгрузки = 2 Тогда // выпуск продукции
		
		Если ВидМПЗ = Неопределено Тогда //операция не отражается в НУ
			Возврат;
		КонецЕсли;
		
		Движение = ДокументОбъект.Движения.ИПМПЗОбороты.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация = СтруктураШапкиДокумента.Организация;
		
		Движение.ДокументОплаты = Выборка.ДокументОплаты;
		Движение.ХарактерДеятельности = ХарактерДеятельности;
		Движение.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		
		Движение.ВидСписанногоМПЗ = Выборка.ВидМПЗ;
		Движение.НоменклатураСписанная = Выборка.Номенклатура;
		Движение.ПартияСписаннойНоменклатуры = Выборка.Партия;
		
		Движение.ВидПоступившегоМПЗ = ВидМПЗ;
		Движение.НоменклатураПоступившая = Продукция;
		Движение.ПартияПоступившейНоменклатуры = ДокументОбъект.Ссылка;
		
		Движение.Количество = КоличествоСписано;
		Движение.Сумма = СуммаСписано;
		Движение.НДС = НДССписано;
		
		НоваяЗапись = СтоимостьПродукции.Добавить();
		НоваяЗапись.ВидСписанногоМПЗ = Выборка.ВидМПЗ;
		НоваяЗапись.ВидПоступившегоМПЗ = ВидМПЗ;
		НоваяЗапись.ХарактерДеятельности = ХарактерДеятельности;
		НоваяЗапись.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		НоваяЗапись.НоменклатураПоступившая = Продукция;
		НоваяЗапись.НоменклатураСписанная = Выборка.Номенклатура;
		НоваяЗапись.ПартияСписаннойНоменклатуры = Выборка.Партия;
		НоваяЗапись.ДокументОплаты = Выборка.ДокументОплаты;
		НоваяЗапись.Сумма = СуммаСписано;
		НоваяЗапись.СуммаОстаток = Выборка.Сумма;
		НоваяЗапись.НДС = НДССписано;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписаниеМПЗПоВидуДеятельности(ДокументОбъект, СтруктураШапкиДокумента, ИзмененияВидаДеятельности, ВыборкаВидДеятельности, ХарактерДеятельности, НоменклатурнаяГруппа, Количество, Выручка, НДСНачисленный, ВидОтгрузки, Продукция, СтоимостьПродукции, ВидМПЗ)
	
	Если ВыборкаВидДеятельности <> Неопределено Тогда
		
		КоллекцияСтрокПоДокументуОплаты = ВыборкаВидДеятельности.Строки;
		
		// Сначала списываем оплаченные товары.
		Для Каждого ВыборкаДокументОплаты Из КоллекцияСтрокПоДокументуОплаты Цикл
					
			Если ВыборкаДокументОплаты.ДокументОплаты = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КоллекцияСтрокПоРеквизитам = ВыборкаДокументОплаты.Строки;
			Для Каждого ВыборкаРеквизитовОплаты Из КоллекцияСтрокПоРеквизитам Цикл
				СформироватьДвиженияРасходаМПЗ(ДокументОбъект, СтруктураШапкиДокумента, ИзмененияВидаДеятельности, ВыборкаРеквизитовОплаты, ХарактерДеятельности, НоменклатурнаяГруппа, Количество, Выручка, НДСНачисленный, ВидОтгрузки, Продукция, СтоимостьПродукции, ВидМПЗ);
			КонецЦикла;
					
			Если Количество = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
				
		// Списываем неоплаченные товары
		Для Каждого ВыборкаДокументОплаты Из КоллекцияСтрокПоДокументуОплаты Цикл
					
			Если ВыборкаДокументОплаты.ДокументОплаты <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КоллекцияСтрокПоРеквизитам = ВыборкаДокументОплаты.Строки;
			Для Каждого ВыборкаРеквизитовОплаты Из КоллекцияСтрокПоРеквизитам Цикл
				СформироватьДвиженияРасходаМПЗ(ДокументОбъект, СтруктураШапкиДокумента, ИзмененияВидаДеятельности, ВыборкаРеквизитовОплаты, ХарактерДеятельности, НоменклатурнаяГруппа, Количество, Выручка, НДСНачисленный, ВидОтгрузки, Продукция, СтоимостьПродукции, ВидМПЗ);
			КонецЦикла;
					
			Если Количество = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщениеОНедостаткеТовара(СписокМПЗ, МПЗ, ТекстПричины, Отказ)
	
	Отказ = Истина;
	ТекстСообщения = "Нал. учет.";
	
	Если СписокМПЗ.Колонки.Найти("НомерСтроки") <> Неопределено Тогда
		ТекстСообщения = ТекстСообщения + " Строка: " + МПЗ.НомерСтроки;
	КонецЕсли;
	
	Сообщить(ТекстСообщения, СтатусСообщения.Важное);
	Сообщить("Не списано """ + МПЗ.Количество + """ ед. по номенклатуре """ + МПЗ.Номенклатура + """, так как");
	Сообщить(ТекстПричины);
	
КонецПроцедуры

//Процедура осуществляет подбор партии тары в случае ее реализации покупателю
//
Процедура ПодборПартииВозвратаТары(ДокументОбъект, СтруктураШапкиДокумента, СписокМПЗ)
	
	Если СписокМПЗ.Колонки.Найти("СписанныеПартииБУ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("СчетУчета", ПланыСчетов.Хозрасчетный.Тара);
	
	МассивТары = СписокМПЗ.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивТары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокНоменклатуры = Новый СписокЗначений();	
	
	
	Индекс = 0;
	Для каждого МПЗ из МассивТары Цикл
		Если МПЗ.СписанныеПартииБУ = Неопределено Тогда
			МПЗ.Удалить(Индекс);
			Продолжить;
		КонецЕсли;

		СписокНоменклатуры.Добавить(МПЗ.Номенклатура);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПМПЗОстатки.Номенклатура КАК Номенклатура,
	|	ИПМПЗОстатки.Партия КАК Партия,
	|	ИПМПЗОстатки.ВидМПЗ КАК ВидМПЗ,
	|	СУММА(ИПМПЗОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(ИПМПЗОстатки.СуммаОстаток) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Остатки(
	|			&ДатаРегистратора,
	|			Номенклатура В (&СписокНоменклатуры)
	|				И ВидМПЗ В (&СписокВидовМПЗ)
	|				И Организация = &Организация) КАК ИПМПЗОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПМПЗОстатки.Номенклатура,
	|	ИПМПЗОстатки.Партия,
	|	ИПМПЗОстатки.ВидМПЗ
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИПМПЗОстатки.Партия.Дата,
	|	Номенклатура,
	|	ВидМПЗ";
	
	СписокВидовМПЗ = Новый СписокЗначений;
	СписокВидовМПЗ.Добавить(Перечисления.ВидыМПЗ.ВспомогательныеМатериалы);
	
	ДатаРегистратора = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
	
	Запрос.УстановитьПараметр("ДатаРегистратора", ДатаРегистратора);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("СписокВидовМПЗ", СписокВидовМПЗ);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗ");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СписокДляБлокировки = Новый ТаблицаЗначений;
		СписокДляБлокировки.Колонки.Добавить("Номенклатура");
		СписокДляБлокировки.Колонки.Добавить("ВидМПЗ");
		СписокДляБлокировки.Колонки.Добавить("Партия");
		Для Каждого ЗначениеМПЗ Из СписокМПЗ Цикл
			Для Каждого ЗначениеПартии Из ЗначениеМПЗ.СписанныеПартииБУ Цикл
				НоваяСтрока = СписокДляБлокировки.Добавить();
				НоваяСтрока.Номенклатура	= ЗначениеМПЗ.Номенклатура;
				НоваяСтрока.ВидМПЗ			= ЗначениеМПЗ.ВидМПЗ ;
				НоваяСтрока.Партия			= ЗначениеПартии.Партия ;
			КонецЦикла;
		КонецЦикла;
		СтруктураПараметров.Вставить("ИсточникДанных", СписокДляБлокировки);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("Номенклатура, ВидМПЗ, Партия", "Номенклатура, ВидМПЗ, Партия");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);		
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого МПЗ из МассивТары Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", МПЗ.Номенклатура);
		ПараметрыОтбора.Вставить("ВидМПЗ", Перечисления.ВидыМПЗ.ВспомогательныеМатериалы);

		МассивПартийТары = РезультатЗапроса.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивПартийТары.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СведенияОПартииТары из МассивПартийТары Цикл
			Для Каждого СведенияОПартии из МПЗ.СписанныеПартииБУ Цикл
				Если СведенияОПартии.Партия = СведенияОПартииТары.Партия Тогда
					СведенияОПартииТары.Количество = Макс(0,СведенияОПартииТары.Количество - СведенияОПартии.Количество);
					СведенияОПартииТары.Сумма = Макс(0,СведенияОПартииТары.Сумма - СведенияОПартии.СуммаСписания);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого СведенияОПартии из МПЗ.СписанныеПартииБУ Цикл
			Если ТипЗнч(СведенияОПартии.Партия) <> Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоПартииТары = СведенияОПартии.Количество;
			СуммаПартииТары = СведенияОПартии.СуммаСписания;
			
			Для Каждого СведенияОПартииТары из МассивПартийТары Цикл
				
				Если СведенияОПартииТары.Количество = 0 ИЛИ СведенияОПартииТары.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если КоличествоПартииТары = 0 И СуммаПартииТары = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если СведенияОПартииТары.Количество >= КоличествоПартииТары И СведенияОПартииТары.Сумма >= СуммаПартииТары Тогда
					СведенияОПартии.Партия = СведенияОПартииТары.Партия;
					СведенияОПартииТары.Количество = СведенияОПартииТары.Количество - КоличествоПартииТары;
					СведенияОПартииТары.Сумма = СведенияОПартииТары.Сумма - СуммаПартииТары;
					КоличествоПартииТары = 0;
					СуммаПартииТары = 0;
					Прервать;
				Иначе
					ПартияТары = СведенияОПартии.Партия;
					СведенияОПартии.Партия = СведенияОПартииТары.Партия;
					СведенияОПартии.Количество = Мин(СведенияОПартииТары.Количество, КоличествоПартииТары);
					СведенияОПартии.СуммаСписания = Мин(СведенияОПартииТары.Сумма, СуммаПартииТары);
					
					СведенияОПартииТары.Количество = СведенияОПартииТары.Количество - СведенияОПартии.Количество;
					СведенияОПартииТары.Сумма = СведенияОПартииТары.Сумма - СведенияОПартии.Сумма;
					
					КоличествоПартииТары = КоличествоПартииТары - СведенияОПартии.Количество;
					СуммаПартииТары = СуммаПартииТары - СведенияОПартии.СуммаСписания;
					
					НоваяСтрока = МПЗ.СписанныеПартииБУ.Добавить();
					НоваяСтрока.Партия = ПартияТары;
					НоваяСтрока.Количество = КоличествоПартииТары;
					НоваяСтрока.СуммаСписания = СуммаПартииТары;
					НоваяСтрока.СчетУчетаБУ = СведенияОПартии.СчетУчетаБУ;
					НоваяСтрока.Комиссионный = СведенияОПартии.Комиссионный;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// ВидОтгрузки: 1 - реализация, 2 - выпуск продукции
//
Функция СписаниеМПЗ(ДокументОбъект, СтруктураШапкиДокумента, УчетнаяПолитика, ВидОтгрузки, СписокМПЗВрем, ИмяНГ, ИмяСчетаУчета, ИмяСчетаЗатрат, ИмяСтатьиЗатрат, ИмяСчетаДоходов, Отказ) Экспорт
	
	СписокМПЗ = СписокМПЗВрем.Скопировать();
	Если СписокМПЗ.Колонки.Найти("СписанныеПартии") <> Неопределено Тогда
		СписокМПЗ.Колонки.СписанныеПартии.Имя = "СписанныеПартииБУ";
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		Возврат Неопределено;
	
	ИначеЕсли (СписокМПЗ = Неопределено) ИЛИ (СписокМПЗ.Количество() = 0) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("Склад") Тогда
		Если СтруктураШапкиДокумента.Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка
			И УчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	//Операции по таре в НУ не отражались
	ИспользоватьВозвратнуюТару = Константы.ИспользоватьВозвратнуюТару.Получить();
	Если ИспользоватьВозвратнуюТару Тогда
		ПодборПартииВозвратаТары(ДокументОбъект, СтруктураШапкиДокумента, СписокМПЗ);
	КонецЕсли;

	// Списание партий МПЗ.
	
	// Формирование запроса по остаткам МПЗ в НУ.
	// При помощи данного запроса мы получим распределение списанных партий
	// по видам деятельности и документам оплаты.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПМПЗОстатки.Номенклатура КАК Номенклатура,
	|	ИПМПЗОстатки.Партия КАК Партия,
	|	ИПМПЗОстатки.ВидМПЗ КАК ВидМПЗ,
	|	ИПМПЗОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПМПЗОстатки.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПМПЗОстатки.ДокументОплаты КАК ДокументОплаты,
	|	ИПМПЗОстатки.КоличествоОстаток КАК Количество,
	|	ИПМПЗОстатки.СуммаОстаток КАК Сумма,
	|	ИПМПЗОстатки.НДСОстаток КАК НДС
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Остатки(
	|			&ДатаРегистратора,
	|			Номенклатура В (&СписокНоменклатуры)
	|				И Партия В (&СписокПартий)
	|				И ВидМПЗ В (&СписокВидовМПЗ)
	|				И Организация = &Организация) КАК ИПМПЗОстатки
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИПМПЗОстатки.Партия.Дата,
	|	ИПМПЗОстатки.ДокументОплаты.Дата,
	|	Номенклатура,
	|	НоменклатурнаяГруппа,
	|	ХарактерДеятельности,
	|	ВидМПЗ
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма),
	|	СУММА(НДС)
	|ПО
	|	ВидМПЗ,
	|	Номенклатура,
	|	Партия,
	|	НоменклатурнаяГруппа,
	|	ХарактерДеятельности,
	|	ДокументОплаты";
	
	СписокПартий = Новый Массив;
	СписокМПЗ.Колонки.Добавить("ВидМПЗ");
	
	МассивКоэф = Новый Массив;
	
	Для каждого МПЗ из СписокМПЗ Цикл
		Если СписокМПЗ.Колонки.Найти("СписанныеПартииБУ") <> Неопределено Тогда
			Если МПЗ.СписанныеПартииБУ = Неопределено Тогда
				СообщениеОНедостаткеТовара(СписокМПЗ, МПЗ, "не определена партия номенклатуры по данным бухгалтерского учета.", Отказ);
				Возврат Неопределено; // не списано ни одной партии, отражение в НУ невозможно
			КонецЕсли;
			
			// Здесь же распределим выручку по партиям
			МассивКоэф.Очистить();
			
			Для каждого СведенияОПартии из МПЗ.СписанныеПартииБУ Цикл
				СписокПартий.Добавить(СведенияОПартии.Партия);
				МассивКоэф.Добавить(СведенияОПартии.Количество);
			КонецЦикла;
			
			Если ВидОтгрузки = 1 Тогда
				Выручка = МПЗ.СуммаБезНДС + МПЗ.НДС;
				НДСНачисленный = МПЗ.НДС;
				
				МПЗ.СписанныеПартииБУ.Колонки.Добавить("Выручка");
				МПЗ.СписанныеПартииБУ.Колонки.Добавить("НДСНачисленный");
				
				РаспредВыручка = ОбщегоНазначения.РаспределитьПропорционально(Выручка, МассивКоэф);
				РаспредНДСНачисленный = ОбщегоНазначения.РаспределитьПропорционально(НДСНачисленный, МассивКоэф);
				
				Индекс = 0;
				
				Для каждого СведенияОПартии из МПЗ.СписанныеПартииБУ Цикл
					Если РаспредВыручка <> Неопределено Тогда
						СведенияОПартии.Выручка = РаспредВыручка[Индекс];
						
					Иначе
						СведенияОПартии.Выручка = 0;
					КонецЕсли;
					
					Если РаспредНДСНачисленный <> Неопределено Тогда
						СведенияОПартии.НДСНачисленный = РаспредНДСНачисленный[Индекс];
						
					Иначе
						СведенияОПартии.НДСНачисленный = 0;
					КонецЕсли;
					
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		МПЗ.ВидМПЗ = ВидМПЗПоСчетуУчета(МПЗ[ИмяСчетаУчета]);
	КонецЦикла;
	
	ИзмененияВидаДеятельности = Новый ТаблицаЗначений;
	ИзмененияВидаДеятельности.Колонки.Добавить("ВидМПЗ");
	ИзмененияВидаДеятельности.Колонки.Добавить("ХарактерДеятельности1");
	ИзмененияВидаДеятельности.Колонки.Добавить("НоменклатурнаяГруппа1");
	ИзмененияВидаДеятельности.Колонки.Добавить("ХарактерДеятельности2");
	ИзмененияВидаДеятельности.Колонки.Добавить("НоменклатурнаяГруппа2");
	ИзмененияВидаДеятельности.Колонки.Добавить("Номенклатура");
	ИзмененияВидаДеятельности.Колонки.Добавить("Партия");
	ИзмененияВидаДеятельности.Колонки.Добавить("ДокументОплаты");
	ИзмененияВидаДеятельности.Колонки.Добавить("МПЗ");
	ИзмененияВидаДеятельности.Колонки.Добавить("ПартияМПЗ");
	ИзмененияВидаДеятельности.Колонки.Добавить("Количество");
	ИзмененияВидаДеятельности.Колонки.Добавить("Сумма");
	ИзмененияВидаДеятельности.Колонки.Добавить("НДС");
	
	СтоимостьПродукции = Новый ТаблицаЗначений;
	СтоимостьПродукции.Колонки.Добавить("ВидСписанногоМПЗ");
	СтоимостьПродукции.Колонки.Добавить("ВидПоступившегоМПЗ");
	СтоимостьПродукции.Колонки.Добавить("ХарактерДеятельности");
	СтоимостьПродукции.Колонки.Добавить("НоменклатурнаяГруппа");
	СтоимостьПродукции.Колонки.Добавить("НоменклатураПоступившая");
	СтоимостьПродукции.Колонки.Добавить("НоменклатураСписанная");
	СтоимостьПродукции.Колонки.Добавить("ПартияСписаннойНоменклатуры");
	СтоимостьПродукции.Колонки.Добавить("ДокументОплаты");
	СтоимостьПродукции.Колонки.Добавить("СуммаОстаток");
	СтоимостьПродукции.Колонки.Добавить("Сумма");
	СтоимостьПродукции.Колонки.Добавить("НДС");
	
	ДатаРегистратора = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
	
	Запрос.УстановитьПараметр("ДатаРегистратора", ДатаРегистратора);
	Если СписокМПЗ.Колонки.Найти("ОсновноеСредство") <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокНоменклатуры", СписокМПЗ.ВыгрузитьКолонку("ОсновноеСредство"));
	Иначе
		Запрос.УстановитьПараметр("СписокНоменклатуры", СписокМПЗ.ВыгрузитьКолонку("Номенклатура"));
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокВидовМПЗ", СписокМПЗ.ВыгрузитьКолонку("ВидМПЗ"));
	Запрос.УстановитьПараметр("СписокПартий", СписокПартий);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	СтруктураПоиска = Новый Структура;
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗ");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СписокДляБлокировки = Новый ТаблицаЗначений;
		СписокДляБлокировки.Колонки.Добавить("Номенклатура");
		СписокДляБлокировки.Колонки.Добавить("ВидМПЗ");
		СписокДляБлокировки.Колонки.Добавить("Партия");
		Если СписокМПЗ.Колонки.Найти("СписанныеПартииБУ") <> Неопределено Тогда
			Для Каждого ЗначениеМПЗ Из СписокМПЗ Цикл
				Для Каждого ЗначениеПартии Из ЗначениеМПЗ.СписанныеПартииБУ Цикл
					НоваяСтрока = СписокДляБлокировки.Добавить();
					НоваяСтрока.Номенклатура	= ЗначениеМПЗ.Номенклатура;
					НоваяСтрока.ВидМПЗ			= ЗначениеМПЗ.ВидМПЗ ;
					НоваяСтрока.Партия			= ЗначениеПартии.Партия ;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		СтруктураПараметров.Вставить("ИсточникДанных", СписокДляБлокировки);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("Номенклатура, ВидМПЗ, Партия", "Номенклатура, ВидМПЗ, Партия");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);		
	КонецЕсли;

	ВыборкаНоменклатура = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого МПЗ из СписокМПЗ Цикл
		
		Если МПЗ.ВидМПЗ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидОтгрузки = 2 Тогда // списание МПЗ на затраты или на выпуск готовой продукции
			СчетЗатратИлиСчетУчета = ?(ИмяСчетаЗатрат <> Неопределено, МПЗ[ИмяСчетаЗатрат], Неопределено);
			Продукция = МПЗ.Продукция;
			ВидМПЗ = ВидМПЗПоСчетуУчета(СчетЗатратИлиСчетУчета, Продукция); // вид полученного МПЗ при выпуске продукции
			СтатьяЗатрат = НайтиСсылкуВСтроке(СписокМПЗ, МПЗ, ИмяСтатьиЗатрат, 2);
			
			// Списание МПЗ не может формировать прочих расходов
			Если ВидМПЗ = Перечисления.ВидыМПЗ.ПрочиеРасходы Тогда
				ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы;
			КонецЕсли;
			
			// При списании МПЗ на иные материальные расходы вместо статей ИМР используется
			// номенклатура списанных МПЗ
			Если ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы Тогда
				Продукция = МПЗ.Номенклатура;
			КонецЕсли;
		
		Иначе
			СчетЗатратИлиСчетУчета = ?(ИмяСчетаУчета <> Неопределено, МПЗ[ИмяСчетаУчета], Неопределено);
			ВидМПЗ = МПЗ.ВидМПЗ;
			Продукция = Неопределено;
			СтатьяЗатрат = Неопределено;
		КонецЕсли;
		
		СчетДоходов = ?(ИмяСчетаДоходов <> Неопределено, МПЗ[ИмяСчетаДоходов], Неопределено);
		
		НГ = НайтиСсылкуВСтроке(СписокМПЗ, МПЗ, ИмяНГ, 1);
		ХарактерДеятельности = ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, СчетЗатратИлиСчетУчета, СтатьяЗатрат, СчетДоходов, УчетнаяПолитика);
		НоменклатурнаяГруппа = НоменклатурнаяГруппаПоОперации(Ложь,,НГ,, УчетнаяПолитика);
				
		Если (ВидОтгрузки = 1) И ((СписокПартий.Количество() = 0) ИЛИ (МПЗ.СписанныеПартииБУ = Неопределено)) Тогда // отражаем отгрузку без указания партии и документа оплаты
			Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
				
				Выручка = МПЗ.СуммаБезНДС + МПЗ.НДС;
				НДСНачисленный = МПЗ.НДС;
				
				Отгружено = ДокументОбъект.Движения.ИПМПЗОтгруженные.Добавить();
				Отгружено.Период = СтруктураШапкиДокумента.Дата;
				Отгружено.Организация = СтруктураШапкиДокумента.Организация;
				Отгружено.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
				Отгружено.ХарактерДеятельности = ХарактерДеятельности;
				Отгружено.ВидМПЗ = МПЗ.ВидМПЗ;
				Отгружено.Номенклатура = МПЗ.Номенклатура;
				Отгружено.ДокументОтгрузки = ДокументОбъект.Ссылка;
				Отгружено.Количество = МПЗ.Количество;
				Отгружено.Выручка = Выручка;
				Отгружено.НДСНачисленный = НДСНачисленный;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если СписокМПЗ.Колонки.Найти("СписанныеПартииБУ") <> Неопределено Тогда
			Для каждого СведенияОПартии из МПЗ.СписанныеПартииБУ Цикл
				
				// Запомним количество, которое надо распределить по видам деятельности и документам оплаты.
				Количество = Мин(СведенияОПартии.Количество, МПЗ.Количество);
				
				Если ВидОтгрузки = 1 Тогда
					Выручка = СведенияОПартии.Выручка;
					НДСНачисленный = СведенияОПартии.НДСНачисленный;
					
				Иначе
					Выручка = 0;
					НДСНачисленный = 0;
				КонецЕсли;
				
				// Найдем партию в запросе
				СтруктураПоиска.Очистить();
				СтруктураПоиска.Вставить("ВидМПЗ", МПЗ.ВидМПЗ);
				СтруктураПоиска.Вставить("Номенклатура", МПЗ.Номенклатура);
				СтруктураПоиска.Вставить("Партия", СведенияОПартии.Партия);
				
				// Спозиционируемся на ветке, соответствующей номенклатуре, партии и виду МПЗ.
				КоллекцияСтрок = ВыборкаНоменклатура.Строки;
				ВыборкаПартия = Неопределено;
				Для Каждого Отбор Из СтруктураПоиска Цикл
					Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл
						Если СтрокаДерева[Отбор.Ключ] = Отбор.Значение Тогда
							КоллекцияСтрок = СтрокаДерева.Строки;
							ВыборкаПартия = КоллекцияСтрок.Родитель;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если ВыборкаПартия = Неопределено Тогда
					СообщениеОНедостаткеТовара(СписокМПЗ, МПЗ, "в налоговом учете не найдены остатки по партии """ + СведенияОПартии.Партия + """.", Отказ);
					Возврат Неопределено; // не списано ни одной партии, отражение в НУ невозможно
					
				ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПартия.Партия)
					ИЛИ НЕ ЗначениеЗаполнено(ВыборкаПартия.Номенклатура) Тогда
					СообщениеОНедостаткеТовара(СписокМПЗ, МПЗ, "в налоговом учете остатки не найдены.", Отказ);
					Возврат Неопределено; // не списано ни одной партии, отражение в НУ невозможно
					
				ИначеЕсли ВыборкаПартия.Количество < Количество Тогда
					СообщениеОНедостаткеТовара(СписокМПЗ, МПЗ, "в налоговом учете, по партии """ + СведенияОПартии.Партия + """ отражено " + ВыборкаПартия.Количество + " ед. из необходимых " + Количество + " ед.", Отказ);
					Отказ = Истина;
					Возврат Неопределено; // не списано ни одной партии, отражение в НУ невозможно
				КонецЕсли;
				
				// Списание партий по указанной номенклатурной группе и характеру деятельности.
				КоллекцияСтрокПоНГ = ВыборкаПартия.Строки;
				Для Каждого ВыборкаГруппа Из КоллекцияСтрокПоНГ Цикл
					КоллекцияСтрокПоВД = ВыборкаГруппа.Строки;
					Для Каждого ВыборкаВидДеятельности Из КоллекцияСтрокПоВД Цикл
						Если Количество = 0 Тогда // списать все (количественный учет не ведется)
							СписаниеМПЗПоВидуДеятельности(ДокументОбъект, СтруктураШапкиДокумента, ИзмененияВидаДеятельности, ВыборкаВидДеятельности, ХарактерДеятельности, НоменклатурнаяГруппа, Количество, Выручка, НДСНачисленный, ВидОтгрузки, Продукция, СтоимостьПродукции, ВидМПЗ);
							
						ИначеЕсли ВыборкаВидДеятельности.ХарактерДеятельности = ХарактерДеятельности И ВыборкаВидДеятельности.НоменклатурнаяГруппа = НоменклатурнаяГруппа Тогда
							СписаниеМПЗПоВидуДеятельности(ДокументОбъект, СтруктураШапкиДокумента, ИзмененияВидаДеятельности, ВыборкаВидДеятельности, ХарактерДеятельности, НоменклатурнаяГруппа, Количество, Выручка, НДСНачисленный, ВидОтгрузки, Продукция, СтоимостьПродукции, ВидМПЗ);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если Количество = 0 Тогда
					Продолжить; // переходим к следующей партии
				КонецЕсли;
				
				//  Списание партий по указанной номенклатурной группе.
				КоллекцияСтрокПоНГ = ВыборкаПартия.Строки;
				Для Каждого ВыборкаГруппа Из КоллекцияСтрокПоНГ Цикл
					КоллекцияСтрокПоВД = ВыборкаГруппа.Строки;
					Для Каждого ВыборкаВидДеятельности Из КоллекцияСтрокПоВД Цикл
						Если ВыборкаВидДеятельности.ХарактерДеятельности <> ХарактерДеятельности И ВыборкаВидДеятельности.НоменклатурнаяГруппа = НоменклатурнаяГруппа Тогда
							СписаниеМПЗПоВидуДеятельности(ДокументОбъект, СтруктураШапкиДокумента, ИзмененияВидаДеятельности, ВыборкаВидДеятельности, ХарактерДеятельности, НоменклатурнаяГруппа, Количество, Выручка, НДСНачисленный, ВидОтгрузки, Продукция, СтоимостьПродукции, ВидМПЗ);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если Количество = 0 Тогда
					Продолжить; // переходим к следующей партии
				КонецЕсли;
				
				//  Списание партий по указанному характеру деятельности.
				КоллекцияСтрокПоНГ = ВыборкаПартия.Строки;
				Для Каждого ВыборкаГруппа Из КоллекцияСтрокПоНГ Цикл
					КоллекцияСтрокПоВД = ВыборкаГруппа.Строки;
					Для Каждого ВыборкаВидДеятельности Из КоллекцияСтрокПоВД Цикл
						Если ВыборкаВидДеятельности.ХарактерДеятельности = ХарактерДеятельности И ВыборкаВидДеятельности.НоменклатурнаяГруппа <> НоменклатурнаяГруппа Тогда
							СписаниеМПЗПоВидуДеятельности(ДокументОбъект, СтруктураШапкиДокумента, ИзмененияВидаДеятельности, ВыборкаВидДеятельности, ХарактерДеятельности, НоменклатурнаяГруппа, Количество, Выручка, НДСНачисленный, ВидОтгрузки, Продукция, СтоимостьПродукции, ВидМПЗ);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если Количество = 0 Тогда
					Продолжить; // переходим к следующей партии
				КонецЕсли;
				
				// Списание партий по всем остальным номенклатурным группам и характерам деятельности.
				КоллекцияСтрокПоНГ = ВыборкаПартия.Строки;
				Для Каждого ВыборкаГруппа Из КоллекцияСтрокПоНГ Цикл
					КоллекцияСтрокПоВД = ВыборкаГруппа.Строки;
					Для Каждого ВыборкаВидДеятельности Из КоллекцияСтрокПоВД Цикл
						Если ВыборкаВидДеятельности.ХарактерДеятельности <> ХарактерДеятельности И ВыборкаВидДеятельности.НоменклатурнаяГруппа <> НоменклатурнаяГруппа Тогда
							СписаниеМПЗПоВидуДеятельности(ДокументОбъект, СтруктураШапкиДокумента, ИзмененияВидаДеятельности, ВыборкаВидДеятельности, ХарактерДеятельности, НоменклатурнаяГруппа, Количество, Выручка, НДСНачисленный, ВидОтгрузки, Продукция, СтоимостьПродукции, ВидМПЗ);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Корректировка видов деятельности
	ДатаРегистратора = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
	ИзменениеВидаДеятельности(СтруктураШапкиДокумента.Организация, ИзмененияВидаДеятельности, ДокументОбъект.Движения, СтруктураШапкиДокумента.Дата, Ложь, ,ДатаРегистратора);
	
	// Свертка таблицы, отражающей распределение материалов на продукцию
	СтоимостьПродукции.Свернуть("ВидПоступившегоМПЗ,ХарактерДеятельности,НоменклатурнаяГруппа,НоменклатураПоступившая,ДокументОплаты,ВидСписанногоМПЗ,НоменклатураСписанная,ПартияСписаннойНоменклатуры", "Сумма,НДС,СуммаОстаток");
	
	// Списание ИМР по списанным материалам
	Материалы = СтоимостьПродукции.Скопировать(, "НоменклатураПоступившая,НоменклатураСписанная,ПартияСписаннойНоменклатуры,Сумма,СуммаОстаток");
	Материалы.Свернуть("НоменклатураПоступившая,НоменклатураСписанная,ПартияСписаннойНоменклатуры", "Сумма,СуммаОстаток");
	ИзменениеПартииМПЗДляИМР(ДокументОбъект, СтруктураШапкиДокумента, Материалы);
	
	// Добавим в таблицу СтоимостьПродукции реквизиты документов оплаты
	СтоимостьПродукции.Колонки.ВидСписанногоМПЗ.Имя = "ВидМПЗ";
	СтоимостьПродукции.Колонки.НоменклатураСписанная.Имя = "Номенклатура";
	СтоимостьПродукции.Колонки.ПартияСписаннойНоменклатуры.Имя = "Партия";
	
	СтоимостьПродукции.Колонки.Добавить("РеквизитыДокументаОплаты");
	
	// Заполним колонку РеквизитыДокументаОплаты
	ПолучениеРеквизитовДокументовОплаты(СтоимостьПродукции, "ИПМПЗ", "Партия", "ДокументОплаты",,);
	СтоимостьПродукции.Свернуть("ВидПоступившегоМПЗ,ХарактерДеятельности,НоменклатурнаяГруппа,НоменклатураПоступившая,ДокументОплаты,РеквизитыДокументаОплаты", "Сумма,НДС");
	
	СтоимостьПродукции.Колонки.ВидПоступившегоМПЗ.Имя = "ВидМПЗ";
	СтоимостьПродукции.Колонки.НоменклатураПоступившая.Имя = "Номенклатура";
	Возврат СтоимостьПродукции;
	
КонецФункции

Процедура ОказаниеУслуг(ДокументОбъект, СтруктураШапкиДокумента, УчетнаяПолитика, СписокМПЗ, ИмяНГ, ИмяСчетаУчета) Экспорт
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		Возврат;
	
	ИначеЕсли (СписокМПЗ = Неопределено) ИЛИ (СписокМПЗ.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого МПЗ из СписокМПЗ Цикл
		Отгружено = ДокументОбъект.Движения.ИПМПЗОтгруженные.Добавить();
		Отгружено.Период = СтруктураШапкиДокумента.Дата;
		Отгружено.Организация = СтруктураШапкиДокумента.Организация;
		НГ = НайтиСсылкуВСтроке(СписокМПЗ, МПЗ, ИмяНГ, 1);
		Отгружено.НоменклатурнаяГруппа = НоменклатурнаяГруппаПоОперации(Ложь,,НГ,, УчетнаяПолитика);
		Отгружено.ХарактерДеятельности = ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, МПЗ[ИмяСчетаУчета],,, УчетнаяПолитика);
		Отгружено.Номенклатура = МПЗ.Номенклатура;
		Отгружено.ВидМПЗ = Перечисления.ВидыМПЗ.Продукция;
		Отгружено.ДокументОтгрузки = ДокументОбъект.Ссылка;
		Отгружено.Количество = МПЗ.Количество;
		Отгружено.Выручка = МПЗ.СуммаБезНДС + МПЗ.НДС;
		Отгружено.НДСНачисленный = МПЗ.НДС;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗачетОплатыПокупателя(ДокументОбъект, СтруктураШапкиДокумента, СписокМПЗ, СписокПлатежейПолуч) Экспорт
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя ИЛИ СписокПлатежейПолуч = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокПлатежей = СписокПлатежейПолуч.Скопировать();
	
	Если СписокПлатежей.Колонки.Найти("ДокументРасчетов") <> Неопределено Тогда
		СписокПлатежей.Колонки.ДокументРасчетов.Имя = "ДокументОплаты";
	КонецЕсли;
	Если СписокПлатежей.Колонки.Найти("СуммаБУ") <> Неопределено Тогда
		СписокПлатежей.Колонки.СуммаБУ.Имя = "Сумма";
	КонецЕсли;
	
	Если СписокПлатежей.Колонки.Найти("РеквизитыДокументаОплаты") = Неопределено Тогда
		СписокПлатежей.Колонки.Добавить("РеквизитыДокументаОплаты");
		Для Каждого ДокументОплаты Из СписокПлатежей Цикл
			ДокументОплаты.РеквизитыДокументаОплаты = РеквизитыДокументаОплаты(ДокументОплаты.ДокументОплаты);
		КонецЦикла;
	КонецЕсли;
	
	СписокМПЗОплаченных = СписокМПЗ.СкопироватьКолонки();
	СписокМПЗНеОплаченных = СписокМПЗ.СкопироватьКолонки();
	
	Для каждого МПЗ из СписокМПЗ Цикл
		Если ЗначениеЗаполнено(МПЗ.ДокументОплаты) Тогда
			НовСтрока = СписокМПЗОплаченных.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока,МПЗ);
		Иначе
			НовСтрока = СписокМПЗНеОплаченных.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока,МПЗ);
		КонецЕсли;
	КонецЦикла;
	ЗачетОплатыОтПокупателяДвижения(ДокументОбъект, СтруктураШапкиДокумента, СписокМПЗОплаченных, СписокПлатежей);
	ЗачетОплатыОтПокупателяДвижения(ДокументОбъект, СтруктураШапкиДокумента, СписокМПЗНеОплаченных, СписокПлатежей);
	
КонецПроцедуры

Процедура ЗачетОплатыОтПокупателяДвижения(ДокументОбъект, СтруктураШапкиДокумента, СписокМПЗ, СписокПлатежей)
	
	ПризнаватьДоходыИРасходыПоОперациямПрошлогоГода = СтруктураШапкиДокумента.ПризнаватьДоходыИРасходыПоОперациямПрошлогоГода;
	
		Для каждого МПЗ из СписокМПЗ Цикл
		
		Если МПЗ.Выручка = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НеполученнаяВыручка = МПЗ.Выручка;
		Выручка             = МПЗ.Выручка;
		НДСНачисленный      = МПЗ.НДСНачисленный;
		Сумма               = МПЗ.Сумма;
		НДС                 = МПЗ.НДС;
		Количество          = МПЗ.Количество;
		
		Для Каждого ДокументОплаты Из СписокПлатежей Цикл
			
			Если ДокументОплаты.ДокументОплаты = ДокументОбъект.Ссылка Тогда
				Если ТипЗнч(ДокументОплаты.ДокументОплаты) <> Тип("ДокументСсылка.ОтчетОРозничныхПродажах") 
					И ТипЗнч(ДокументОплаты.ДокументОплаты) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ДокументОплаты.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаЗачета          = Мин(НеполученнаяВыручка, ДокументОплаты.Сумма);
			НеполученнаяВыручка  = НеполученнаяВыручка - СуммаЗачета;
			ДокументОплаты.Сумма = ДокументОплаты.Сумма - СуммаЗачета;
			
			Оплачено             = ДокументОбъект.Движения.ИПМПЗОтгруженные.Добавить();
			Оплачено.Период      = СтруктураШапкиДокумента.Дата;
			Оплачено.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			Оплачено.Организация              = СтруктураШапкиДокумента.Организация;
			Оплачено.ХарактерДеятельности     = МПЗ.ХарактерДеятельности;
			Оплачено.НоменклатурнаяГруппа     = МПЗ.НоменклатурнаяГруппа;
			Оплачено.ВидМПЗ                   = МПЗ.ВидМПЗ;
			Оплачено.Номенклатура             = МПЗ.Номенклатура;
			Оплачено.Партия                   = МПЗ.Партия;
			Оплачено.ДокументОтгрузки         = МПЗ.ДокументОтгрузки;
			Оплачено.ДокументОплаты           = МПЗ.ДокументОплаты;
			
			МожноПризнатьДоход = МожноПризнатьДоходы(ПризнаватьДоходыИРасходыПоОперациямПрошлогоГода, ДокументОплаты.ДокументОплаты, СтруктураШапкиДокумента.Дата);
			
			Если  МожноПризнатьДоход Тогда
				
				
				Доход        = ДокументОбъект.Движения.ИПДоходы.Добавить();
				Доход.Период = СтруктураШапкиДокумента.Дата;
				
				Доход.Организация              = СтруктураШапкиДокумента.Организация;
				Доход.ХарактерДеятельности     = МПЗ.ХарактерДеятельности;
				Доход.НоменклатурнаяГруппа     = МПЗ.НоменклатурнаяГруппа;
				Доход.ВидМПЗ                   = МПЗ.ВидМПЗ;
				Доход.Номенклатура             = МПЗ.Номенклатура;
				Доход.Партия                   = МПЗ.Партия;
				Доход.ДокументОтгрузки         = МПЗ.ДокументОтгрузки;
				Доход.ДокументОплаты           = ДокументОплаты.ДокументОплаты;
				Доход.РеквизитыДокументаОплаты = ДокументОплаты.РеквизитыДокументаОплаты;
				
			КонецЕсли;
			
			Если НеполученнаяВыручка = 0 Тогда // отгрузка полностью оплачена
				
				Оплачено.Выручка        = Выручка;
				Оплачено.НДСНачисленный = НДСНачисленный;
				Оплачено.Сумма          = Сумма;
				Оплачено.НДС            = НДС;
				Оплачено.Количество     = Количество;
				
				Если  МожноПризнатьДоход Тогда
					Доход.Выручка        = Выручка;
					Доход.НДСНачисленный = НДСНачисленный;
					Доход.Количество     = Количество;
					
					Если ЗначениеЗаполнено(МПЗ.ДокументОплаты) Тогда // товар оплачен поставщику
						Доход.КоличествоОплаченоПоставщику = Количество;
						Доход.Сумма = Сумма;
						Доход.НДС = НДС;
					КонецЕсли;
				КонецЕсли;
				
				Прервать;
				
			Иначе
				
				Оплачено.Выручка        = СуммаЗачета;
				Оплачено.НДСНачисленный = Окр(МПЗ.НДСНачисленный * СуммаЗачета / МПЗ.Выручка, 2, 1);
				Оплачено.Количество     = Окр(МПЗ.Количество * СуммаЗачета / МПЗ.Выручка, 3, 1);
				Если МПЗ.Количество <> 0 Тогда
					Оплачено.Сумма          = Окр(Оплачено.Количество * МПЗ.Сумма / МПЗ.Количество, 2, 1);
					СуммаСНДС               = Окр(Оплачено.Количество * (МПЗ.Сумма  + МПЗ.НДС) / МПЗ.Количество, 2, 1);
				Иначе
					Оплачено.Сумма          = Окр(Оплачено.Количество * МПЗ.Сумма, 2, 1);
					СуммаСНДС               = Окр(Оплачено.Количество * (МПЗ.Сумма  + МПЗ.НДС), 2, 1);
				КонецЕсли;
			
				Оплачено.НДС            = СуммаСНДС - Оплачено.Сумма;
				
				Если  МожноПризнатьДоход Тогда
					Доход.Выручка        = Оплачено.Выручка;
					Доход.НДСНачисленный = Оплачено.НДСНачисленный;
					Доход.Количество     = Оплачено.Количество;
					
					Если ЗначениеЗаполнено(МПЗ.ДокументОплаты) Тогда // товар оплачен поставщику
						Доход.КоличествоОплаченоПоставщику = Оплачено.Количество;
						Доход.Сумма = Оплачено.Сумма;
						Доход.НДС = Оплачено.НДС;
					КонецЕсли;
				КонецЕсли;
				
				Выручка        = Выручка - СуммаЗачета;
				НДСНачисленный = НДСНачисленный - Оплачено.НДСНачисленный;
				Сумма          = Сумма - Оплачено.Сумма;
				НДС            = НДС - Оплачено.НДС;
				Количество     = Количество - Оплачено.Количество;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура СписаниеАмортизируемогоИмущества(ДокументОбъект, СтруктураШапкиДокумента, СписокМПЗ, СчетЗатрат, ИмяНГ, УчетнаяПолитика) Экспорт
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		Возврат;
	
	ИначеЕсли (СписокМПЗ = Неопределено) ИЛИ (СписокМПЗ.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.Движения.ИПМПЗ.Записать(Истина);
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗ");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("ИсточникДанных", СписокМПЗ);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПМПЗОстатки.Номенклатура КАК Номенклатура,
	|	ИПМПЗОстатки.Партия КАК Партия,
	|	ИПМПЗОстатки.ВидМПЗ КАК ВидМПЗ,
	|	ИПМПЗОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПМПЗОстатки.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПМПЗОстатки.ДокументОплаты КАК ДокументОплаты,
	|	ИПМПЗОстатки.СуммаОстаток КАК Сумма,
	|	ИПМПЗОстатки.НДСОстаток КАК НДС
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Остатки(
	|			&ДатаРегистратора,
	|			Номенклатура В (&СписокНоменклатуры)
	|				И Организация = &Организация) КАК ИПМПЗОстатки
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(НДС)
	|ПО
	|	Номенклатура";
	
	СписокПартий = Новый Массив;
	СписокМПЗ.Колонки.Добавить("ВидМПЗ");
	
	МассивКоэф = Новый Массив;
	
	ИзмененияВидаДеятельности = Новый ТаблицаЗначений;
	ИзмененияВидаДеятельности.Колонки.Добавить("ВидМПЗ");
	ИзмененияВидаДеятельности.Колонки.Добавить("ХарактерДеятельности1");
	ИзмененияВидаДеятельности.Колонки.Добавить("НоменклатурнаяГруппа1");
	ИзмененияВидаДеятельности.Колонки.Добавить("ХарактерДеятельности2");
	ИзмененияВидаДеятельности.Колонки.Добавить("НоменклатурнаяГруппа2");
	ИзмененияВидаДеятельности.Колонки.Добавить("Номенклатура");
	ИзмененияВидаДеятельности.Колонки.Добавить("Партия");
	ИзмененияВидаДеятельности.Колонки.Добавить("ДокументОплаты");
	ИзмененияВидаДеятельности.Колонки.Добавить("МПЗ");
	ИзмененияВидаДеятельности.Колонки.Добавить("ПартияМПЗ");
	ИзмененияВидаДеятельности.Колонки.Добавить("Количество");
	ИзмененияВидаДеятельности.Колонки.Добавить("Сумма");
	ИзмененияВидаДеятельности.Колонки.Добавить("НДС");
	
	ПартииОбъекта = ИзмененияВидаДеятельности.СкопироватьКолонки();
	ПартииОбъекта.Колонки.НоменклатурнаяГруппа1.Имя = "НоменклатурнаяГруппа";
	ПартииОбъекта.Колонки.ХарактерДеятельности1.Имя = "ХарактерДеятельности";
	ПартииОбъекта.Колонки.Добавить("Выручка");
	ПартииОбъекта.Колонки.Добавить("НДСНачисленный");
	
	ДатаРегистратора = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая);
	
	Запрос.УстановитьПараметр("ДатаРегистратора", ДатаРегистратора);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокМПЗ.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		МассивКоэф.Очистить();
		ПартииОбъекта.Очистить();
		
		МПЗ = СписокМПЗ.Найти(ВыборкаНоменклатура.Номенклатура, "Номенклатура");
		
		ХарактерДеятельности = ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, СчетЗатрат, МПЗ.Субконто, МПЗ.СчетДоходов, УчетнаяПолитика);
		НГ = НайтиСсылкуВСтроке(СписокМПЗ, МПЗ, ИмяНГ, 1);
		НоменклатурнаяГруппа = НоменклатурнаяГруппаПоОперации(,,НГ,,УчетнаяПолитика);
		
		Выборка = ВыборкаНоменклатура.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ХарактерДеятельности <> ХарактерДеятельности ИЛИ Выборка.НоменклатурнаяГруппа <> НоменклатурнаяГруппа Тогда
				НоваяЗапись = ИзмененияВидаДеятельности.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
				
				НоваяЗапись.ХарактерДеятельности1 = Выборка.ХарактерДеятельности;
				НоваяЗапись.НоменклатурнаяГруппа1 = Выборка.НоменклатурнаяГруппа;
				НоваяЗапись.ХарактерДеятельности2 = ХарактерДеятельности;
				НоваяЗапись.НоменклатурнаяГруппа2 = НоменклатурнаяГруппа;
			КонецЕсли;
			
			МассивКоэф.Добавить(Выборка.Сумма + Выборка.НДС);
			
			СписаннаяПартия = ПартииОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(СписаннаяПартия, Выборка);
			
			СписаннаяПартия.ХарактерДеятельности = ХарактерДеятельности;
			СписаннаяПартия.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
			
			Движение = ДокументОбъект.Движения.ИПМПЗ.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(Движение, Выборка);
			
			Движение.Организация = СтруктураШапкиДокумента.Организация;
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.ХарактерДеятельности = ХарактерДеятельности;
			Движение.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		КонецЦикла;
		
		Если МПЗ <> Неопределено Тогда
			Выручка = МПЗ.СуммаБезНДС + МПЗ.НДС;
			
			МассивВыручки = ОбщегоНазначения.РаспределитьПропорционально(Выручка, МассивКоэф, 2);
			
			Если МассивВыручки <> Неопределено И МассивВыручки.Количество() > 0 Тогда
				Для Индекс = 0 По МассивВыручки.Количество() - 1 Цикл
					ПартииОбъекта[Индекс].Выручка = МассивВыручки[Индекс];
				КонецЦикла;
			КонецЕсли;
			
			МассивНДС = ОбщегоНазначения.РаспределитьПропорционально(МПЗ.НДС, МассивКоэф, 2);
			
			Если МассивНДС <> Неопределено И МассивНДС.Количество() > 0 Тогда
				Для Индекс = 0 По МассивНДС.Количество() - 1 Цикл
					ПартииОбъекта[Индекс].НДСНачисленный = МассивНДС[Индекс];
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если Выручка <> 0 Тогда
			Для Каждого Партия Из ПартииОбъекта Цикл
				Движение = ДокументОбъект.Движения.ИПМПЗОтгруженные.ДобавитьПриход();
				ЗаполнитьЗначенияСвойств(Движение, Партия);
				
				Движение.Организация = СтруктураШапкиДокумента.Организация;
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.ДокументОтгрузки = СтруктураШапкиДокумента.Ссылка;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ДатаРегистратора = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
	ИзменениеВидаДеятельности(СтруктураШапкиДокумента.Организация, ИзмененияВидаДеятельности, ДокументОбъект.Движения, СтруктураШапкиДокумента.Дата, Ложь,,ДатаРегистратора);
	
КонецПроцедуры

///////////////////////////
// ОПЛАТА

// СтатьяРасчетов: 1 - МПЗ, 2 - ИМР, 3 - Прочее, 5 - РБП
// Приход, Сторно - Булево
//
Процедура ДобавитьДвижениеПоОплате(ДокументОбъект, СтруктураШапкиДокумента, СтатьяРасчетов, Приход, Сторно, Товар, Количество, Сумма, НДС, Выручка, НДСНачисленный, РеквизитыДокументаОплаты)
					
	ЗнакЧисла = ?(Сторно, -1, 1);
	ВидДвижения = ?(Приход, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
	
	ПризнаватьДоходыИРасходыПоОперациямПрошлогоГода = СтруктураШапкиДокумента.ПризнаватьДоходыИРасходыПоОперациямПрошлогоГода;
	ДляПризнанияРасходовНеТребуетсяПолучениеДохода = СтруктураШапкиДокумента.ДляПризнанияРасходовНеТребуетсяПолучениеДохода;
	
	Если СтатьяРасчетов = 1 Тогда
		
		Движение = ДокументОбъект.Движения.ИПМПЗ.Добавить();
		Движение.ВидДвижения = ВидДвижения;
		
		Движение.ВидМПЗ = Товар.ВидМПЗ;
		Движение.Номенклатура = Товар.Номенклатура;
		Движение.Партия = Товар.Партия;
		
		Движение.Сумма = ЗнакЧисла * Сумма;
		Движение.Количество = ЗнакЧисла * Количество;
		Движение.НДС = ЗнакЧисла * НДС;
		
		Если НЕ Сторно Тогда
			Движение.ДокументОплаты = ДокументОбъект.Ссылка;
			Движение.РеквизитыДокументаОплаты = РеквизитыДокументаОплаты;
		КонецЕсли;
		
	ИначеЕсли СтатьяРасчетов = 2 Тогда
		
		Движение = ДокументОбъект.Движения.ИПИныеМатериальныеРасходы.Добавить();
		Движение.ВидДвижения = ВидДвижения;
		
		Движение.СтатьяЗатрат = Товар.Номенклатура;
		Движение.Партия = Товар.Партия;
		Движение.МПЗ = Товар.МПЗ;
		Движение.ПартияМПЗ = Товар.ПартияМПЗ;
		
		Движение.Сумма = ЗнакЧисла * Сумма;
		Движение.Количество = ЗнакЧисла * Количество;
		Движение.НДС = ЗнакЧисла * НДС;
		
		Если НЕ Сторно Тогда
			Движение.ДокументОплаты = ДокументОбъект.Ссылка;
			Движение.РеквизитыДокументаОплаты = РеквизитыДокументаОплаты;
		КонецЕсли;
		
	ИначеЕсли СтатьяРасчетов = 3 Тогда
		
		Движение = ДокументОбъект.Движения.ИППрочиеРасходы.Добавить();
		
		Движение.СтатьяЗатрат = Товар.Номенклатура;
		Движение.РасчетныйДокумент = Товар.Партия;
		Движение.Сумма = ЗнакЧисла * Сумма;
		Движение.НДС = ЗнакЧисла * НДС;
		
		Если НЕ Сторно Тогда
			Движение.ДокументОплаты = ДокументОбъект.Ссылка;
			Движение.РеквизитыДокументаОплаты = РеквизитыДокументаОплаты;
		КонецЕсли;
		
	ИначеЕсли СтатьяРасчетов = 4 Тогда
		Движение = ДокументОбъект.Движения.ИПМПЗОтгруженные.Добавить();
		Движение.ВидДвижения = ВидДвижения;
		
		Движение.ВидМПЗ = Товар.ВидМПЗ;
		Движение.Номенклатура = Товар.Номенклатура;
		Движение.Партия = Товар.Партия;
		Движение.ДокументОтгрузки = Товар.ДокументОтгрузки;
		
		Движение.Сумма = ЗнакЧисла * Сумма;
		Движение.Количество = ЗнакЧисла * Количество;
		Движение.НДС = ЗнакЧисла * НДС;
		Движение.Выручка = ЗнакЧисла * Выручка;
		Движение.НДСНачисленный = ЗнакЧисла * НДСНачисленный;
		
		Если НЕ Сторно Тогда
			Движение.ДокументОплаты = ДокументОбъект.Ссылка;
		КонецЕсли;
		
		МожноПризнатьРасход = МожноПризнатьРасходы(ДляПризнанияРасходовНеТребуетсяПолучениеДохода,
			ПризнаватьДоходыИРасходыПоОперациямПрошлогоГода, Товар.ДокументОтгрузки, СтруктураШапкиДокумента.Дата, 
			Товар.Партия);
		
		Если МожноПризнатьРасход Тогда
			Если НЕ Сторно И НЕ Приход Тогда // уменьшение дохода на сумму новых расходов
				Расходы = ДокументОбъект.Движения.ИПДоходы.Добавить();
				Расходы.Период = СтруктураШапкиДокумента.Дата;
				Расходы.Организация = СтруктураШапкиДокумента.Организация;
				Расходы.НоменклатурнаяГруппа = Товар.НоменклатурнаяГруппа;
				Расходы.ХарактерДеятельности = Товар.ХарактерДеятельности;
				Расходы.ВидМПЗ = Товар.ВидМПЗ;
				Расходы.Номенклатура = Товар.Номенклатура;
				Расходы.Партия = Товар.Партия;
				Расходы.ДокументОтгрузки = Товар.ДокументОтгрузки;
				Расходы.ДокументОплаты = ДокументОбъект.Ссылка;
				Расходы.РеквизитыДокументаОплаты = РеквизитыДокументаОплаты;
				Расходы.КоличествоОплаченоПоставщику = Количество;
				Расходы.Сумма = Сумма;
				Расходы.НДС = НДС;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтатьяРасчетов = 5 Тогда
		
		Движение = ДокументОбъект.Движения.ИПРБП.Добавить();
		Движение.ВидДвижения = ВидДвижения;
		Движение.ВидРасхода = Товар.Номенклатура;
		Движение.Партия = Товар.Партия;
		Движение.Сумма = ЗнакЧисла * Сумма;
		Движение.НДС = ЗнакЧисла * НДС;
		
		Если НЕ Сторно Тогда
			Движение.ДокументОплаты = ДокументОбъект.Ссылка;
			Движение.РеквизитыДокументаОплаты = РеквизитыДокументаОплаты;
		КонецЕсли;
		
	КонецЕсли;
	
	Движение.Период = СтруктураШапкиДокумента.Дата;
	Движение.Организация = СтруктураШапкиДокумента.Организация;
	Движение.НоменклатурнаяГруппа = Товар.НоменклатурнаяГруппа;
	Движение.ХарактерДеятельности = Товар.ХарактерДеятельности;
	
КонецПроцедуры

Процедура ОплатаПоставщику(ДокументОбъект, СтруктураШапкиДокумента, ОплаченныеПартии)
	
	СписаноОплачено = Новый ТаблицаЗначений;
	СписаноОплачено.Колонки.Добавить("НоменклатурнаяГруппа");
	СписаноОплачено.Колонки.Добавить("ХарактерДеятельности");
	СписаноОплачено.Колонки.Добавить("ВидМПЗ");
	СписаноОплачено.Колонки.Добавить("Номенклатура");
	СписаноОплачено.Колонки.Добавить("Партия");
	СписаноОплачено.Колонки.Добавить("Сумма");
	СписаноОплачено.Колонки.Добавить("Количество");
	СписаноОплачено.Колонки.Добавить("НДС");
	СписаноОплачено.Колонки.Добавить("РеквизитыДокументаОплаты");
	
	ИМР = СписаноОплачено.СкопироватьКолонки();
	Отгружено = СписаноОплачено.СкопироватьКолонки();
	
	КорректировкаОплаченныхПартий = ОплаченныеПартии.СкопироватьКолонки();
	
	ОтборПартий = Новый Структура("Сделка");
	СписокПартий = ОплаченныеПартии.ВыгрузитьКолонку("Сделка");
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗ");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		
		СтруктураПараметров.Вставить("ИсточникДанных", ОплаченныеПартии);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("Партия", "Сделка");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
		
		СтруктураПараметров.Вставить("ИмяТаблицы", "ИПИныеМатериальныеРасходы");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
		
		СтруктураПараметров.Вставить("ИмяТаблицы", "ИППрочиеРасходы");
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("РасчетныйДокумент", "Сделка");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	КонецЕсли;

	ДатаРегистратора = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокПартий", СписокПартий);
	Запрос.УстановитьПараметр("ДатаРегистратора", ДатаРегистратора);
	Запрос.УстановитьПараметр("ДатаНач", ДатаПервогоДокумента(СписокПартий));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПИныеМатериальныеРасходыОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПИныеМатериальныеРасходыОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПИныеМатериальныеРасходыОбороты.СтатьяЗатрат КАК Номенклатура,
	|	ИПИныеМатериальныеРасходыОбороты.Партия КАК Партия,
	|	СУММА(ИПИныеМатериальныеРасходыОбороты.СуммаРасход) КАК СуммаРасход,
	|	ИПИныеМатериальныеРасходыОбороты.Партия.Дата КАК ПартияДата
	|ПОМЕСТИТЬ ТаблицаСписания
	|ИЗ
	|	РегистрНакопления.ИПИныеМатериальныеРасходы.Обороты(
	|			&ДатаНач,
	|			&ДатаРегистратора,
	|			,
	|			Партия В (&СписокПартий)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПИныеМатериальныеРасходыОбороты
	|ГДЕ
	|	ИПИныеМатериальныеРасходыОбороты.СуммаРасход > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПИныеМатериальныеРасходыОбороты.НоменклатурнаяГруппа,
	|	ИПИныеМатериальныеРасходыОбороты.ХарактерДеятельности,
	|	ИПИныеМатериальныеРасходыОбороты.СтатьяЗатрат,
	|	ИПИныеМатериальныеРасходыОбороты.Партия,
	|	ИПИныеМатериальныеРасходыОбороты.Партия.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИПМПЗОтгруженныеОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОбороты.ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОбороты.Номенклатура,
	|	ИПМПЗОтгруженныеОбороты.Партия,
	|	ИПМПЗОтгруженныеОбороты.СуммаРасход,
	|	ИПМПЗОтгруженныеОбороты.Партия.Дата
	|ИЗ
	|	РегистрНакопления.ИПМПЗОтгруженные.Обороты(
	|			&ДатаНач,
	|			&ДатаРегистратора,
	|			,
	|			Партия В (&СписокПартий)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПМПЗОтгруженныеОбороты
	|ГДЕ
	|	ИПМПЗОтгруженныеОбороты.СуммаРасход > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПМПЗОтгруженныеОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОбороты.ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОбороты.Номенклатура,
	|	ИПМПЗОтгруженныеОбороты.Партия,
	|	ИПМПЗОтгруженныеОбороты.Партия.Дата,
	|	ИПМПЗОтгруженныеОбороты.СуммаРасход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаСписания.НоменклатурнаяГруппа ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Списано,
	|	1 КАК СтатьяРасчетов,
	|	ИПМПЗОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПМПЗОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПМПЗОбороты.Номенклатура КАК Номенклатура,
	|	ИПМПЗОбороты.Партия КАК Партия,
	|	NULL КАК МПЗ,
	|	NULL КАК ПартияМПЗ,
	|	СУММА(ИПМПЗОбороты.КоличествоПриход) КАК КоличествоПриход,
	|	СУММА(ИПМПЗОбороты.КоличествоРасход) КАК КоличествоРасход,
	|	СУММА(ИПМПЗОбороты.СуммаПриход) КАК СуммаПриход,
	|	СУММА(ИПМПЗОбороты.СуммаРасход) КАК СуммаРасход,
	|	СУММА(ИПМПЗОбороты.НДСПриход) КАК НДСПриход,
	|	СУММА(ИПМПЗОбороты.НДСРасход) КАК НДСРасход,
	|	ИПМПЗОбороты.ВидМПЗ КАК ВидМПЗ,
	|	ИПМПЗОбороты.Партия.Дата КАК ПартияДата,
	|	NULL КАК ПартияМПЗДата
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Обороты(
	|			&ДатаНач,
	|			&ДатаРегистратора,
	|			,
	|			Партия В (&СписокПартий)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПМПЗОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСписания КАК ТаблицаСписания
	|		ПО ИПМПЗОбороты.НоменклатурнаяГруппа = ТаблицаСписания.НоменклатурнаяГруппа
	|			И ИПМПЗОбороты.ХарактерДеятельности = ТаблицаСписания.ХарактерДеятельности
	|			И ИПМПЗОбороты.Номенклатура = ТаблицаСписания.Номенклатура
	|			И ИПМПЗОбороты.Партия = ТаблицаСписания.Партия
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ТаблицаСписания.НоменклатурнаяГруппа ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ИПМПЗОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОбороты.ХарактерДеятельности,
	|	ИПМПЗОбороты.Номенклатура,
	|	ИПМПЗОбороты.Партия,
	|	ИПМПЗОбороты.ВидМПЗ,
	|	ИПМПЗОбороты.Партия.Дата
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаСписания.НоменклатурнаяГруппа ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	2,
	|	ИПИныеМатериальныеРасходыОбороты.НоменклатурнаяГруппа,
	|	ИПИныеМатериальныеРасходыОбороты.ХарактерДеятельности,
	|	ИПИныеМатериальныеРасходыОбороты.СтатьяЗатрат,
	|	ИПИныеМатериальныеРасходыОбороты.Партия,
	|	ИПИныеМатериальныеРасходыОбороты.МПЗ,
	|	ИПИныеМатериальныеРасходыОбороты.ПартияМПЗ,
	|	СУММА(ИПИныеМатериальныеРасходыОбороты.КоличествоПриход),
	|	СУММА(ИПИныеМатериальныеРасходыОбороты.КоличествоРасход),
	|	СУММА(ИПИныеМатериальныеРасходыОбороты.СуммаПриход),
	|	СУММА(ИПИныеМатериальныеРасходыОбороты.СуммаРасход),
	|	СУММА(ИПИныеМатериальныеРасходыОбороты.НДСПриход),
	|	СУММА(ИПИныеМатериальныеРасходыОбороты.НДСРасход),
	|	NULL,
	|	ИПИныеМатериальныеРасходыОбороты.Партия.Дата,
	|	ИПИныеМатериальныеРасходыОбороты.ПартияМПЗ.Дата
	|ИЗ
	|	РегистрНакопления.ИПИныеМатериальныеРасходы.Обороты(
	|			&ДатаНач,
	|			&ДатаРегистратора,
	|			,
	|			Партия В (&СписокПартий)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПИныеМатериальныеРасходыОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСписания КАК ТаблицаСписания
	|		ПО ИПИныеМатериальныеРасходыОбороты.НоменклатурнаяГруппа = ТаблицаСписания.НоменклатурнаяГруппа
	|			И ИПИныеМатериальныеРасходыОбороты.ХарактерДеятельности = ТаблицаСписания.ХарактерДеятельности
	|			И ИПИныеМатериальныеРасходыОбороты.СтатьяЗатрат = ТаблицаСписания.Номенклатура
	|			И ИПИныеМатериальныеРасходыОбороты.Партия = ТаблицаСписания.Партия
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ТаблицаСписания.НоменклатурнаяГруппа ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ИПИныеМатериальныеРасходыОбороты.НоменклатурнаяГруппа,
	|	ИПИныеМатериальныеРасходыОбороты.ХарактерДеятельности,
	|	ИПИныеМатериальныеРасходыОбороты.СтатьяЗатрат,
	|	ИПИныеМатериальныеРасходыОбороты.Партия,
	|	ИПИныеМатериальныеРасходыОбороты.МПЗ,
	|	ИПИныеМатериальныеРасходыОбороты.ПартияМПЗ,
	|	ИПИныеМатериальныеРасходыОбороты.Партия.Дата,
	|	ИПИныеМатериальныеРасходыОбороты.ПартияМПЗ.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	3,
	|	ИППрочиеРасходыОбороты.НоменклатурнаяГруппа,
	|	ИППрочиеРасходыОбороты.ХарактерДеятельности,
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
	|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
	|	NULL,
	|	NULL,
	|	0,
	|	0,
	|	СУММА(ИППрочиеРасходыОбороты.СуммаОборот),
	|	0,
	|	СУММА(ИППрочиеРасходыОбороты.НДСОборот),
	|	0,
	|	NULL,
	|	ИППрочиеРасходыОбороты.РасчетныйДокумент.Дата,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ИППрочиеРасходы.Обороты(
	|			&ДатаНач,
	|			&ДатаРегистратора,
	|			,
	|			РасчетныйДокумент В (&СписокПартий)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИППрочиеРасходыОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ИППрочиеРасходыОбороты.НоменклатурнаяГруппа,
	|	ИППрочиеРасходыОбороты.ХарактерДеятельности,
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
	|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
	|	ИППрочиеРасходыОбороты.РасчетныйДокумент.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	5,
	|	ИПРБПОбороты.НоменклатурнаяГруппа,
	|	ИПРБПОбороты.ХарактерДеятельности,
	|	ИПРБПОбороты.ВидРасхода,
	|	ИПРБПОбороты.Партия,
	|	NULL,
	|	NULL,
	|	0,
	|	0,
	|	СУММА(ИПРБПОбороты.СуммаПриход),
	|	СУММА(ИПРБПОбороты.СуммаРасход),
	|	СУММА(ИПРБПОбороты.НДСПриход),
	|	СУММА(ИПРБПОбороты.НДСРасход),
	|	NULL,
	|	ИПРБПОбороты.Партия.Дата,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ИПРБП.Обороты(
	|			&ДатаНач,
	|			&ДатаРегистратора,
	|			,
	|			Партия В (&СписокПартий)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПРБПОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПРБПОбороты.ХарактерДеятельности,
	|	ИПРБПОбороты.ВидРасхода,
	|	ИПРБПОбороты.Партия,
	|	ИПРБПОбороты.Партия.Дата,
	|	ИПРБПОбороты.НоменклатурнаяГруппа
	|ИТОГИ
	|	СУММА(КоличествоПриход),
	|	СУММА(КоличествоРасход),
	|	СУММА(СуммаПриход),
	|	СУММА(СуммаРасход),
	|	СУММА(НДСПриход),
	|	СУММА(НДСРасход)
	|ПО
	|	Списано,
	|	СтатьяРасчетов,
	|	Партия";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Расчеты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатьяРасчетов");
	Пока Расчеты.Следующий() Цикл
		Списано = Расчеты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Списано");
		Пока Списано.Следующий() Цикл
			Партия = Списано.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Партия");
			Пока Партия.Следующий() Цикл
				
				ОтборПартий.Сделка = Партия.Партия;
				Оплата = ОплаченныеПартии.НайтиСтроки(ОтборПартий)[0];
				
				Если Оплата.РублеваяСумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				
				Товар = Партия.Выбрать();
				Пока Товар.Следующий() Цикл
					
					Если Товар.СуммаПриход = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					КорректировкаОплаты = 0;
					Если Товар.СтатьяРасчетов = 5 И КорректировкаОплаченныхПартий.Количество() <> 0 Тогда
						МассивОплаченныхПартий = КорректировкаОплаченныхПартий.НайтиСтроки(ОтборПартий);
						Если МассивОплаченныхПартий.Количество() <> 0 Тогда
							КорректировкиОплаты = МассивОплаченныхПартий[0];
							КорректировкаОплаты = КорректировкиОплаты.РублеваяСумма;
							КорректировкиОплаты.РублеваяСумма = 0;
						КонецЕсли;
					КонецЕсли;
					
					СуммаОплаты = Мин(Товар.СуммаПриход + Товар.НДСПриход, Оплата.РублеваяСумма + КорректировкаОплаты);
					
					Если СуммаОплаты = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если Товар.СтатьяРасчетов = 3 Тогда
						НоваяСтрока = КорректировкаОплаченныхПартий.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Оплата);
						НоваяСтрока.РублеваяСумма = СуммаОплаты;
					КонецЕсли;
					
					Оплата.РублеваяСумма = Макс(0,Оплата.РублеваяСумма - СуммаОплаты);
					
					Если СуммаОплаты = (Товар.СуммаПриход + Товар.НДСПриход) Тогда
						СуммаБезНДС = Товар.СуммаПриход;
						Количество = Товар.КоличествоПриход;
						НДС = Товар.НДСПриход;
						
					Иначе
						СуммаБезНДС = Окр(Товар.СуммаПриход * СуммаОплаты / (Товар.СуммаПриход + Товар.НДСПриход), 2, 1);
						Количество = Окр(Товар.КоличествоПриход * СуммаОплаты / (Товар.СуммаПриход + Товар.НДСПриход), 3, 1);
						НДС = СуммаОплаты - СуммаБезНДС;
					КонецЕсли;
					// Приход, Сторно
					ДобавитьДвижениеПоОплате(ДокументОбъект, СтруктураШапкиДокумента, Расчеты.СтатьяРасчетов, Истина, Истина, Товар, Количество, СуммаБезНДС, НДС,,, Оплата.РеквизитыДокументаОплаты);
					ДобавитьДвижениеПоОплате(ДокументОбъект, СтруктураШапкиДокумента, Расчеты.СтатьяРасчетов, Истина, Ложь, Товар, Количество, СуммаБезНДС, НДС,,, Оплата.РеквизитыДокументаОплаты);
					
					СуммаОплаты = Мин(СуммаОплаты, Товар.СуммаРасход + Товар.НДСРасход);
					
					Если (СуммаОплаты <> 0) И ((Товар.СуммаРасход + Товар.НДСРасход) <> 0) Тогда // оплата списанного товара
						
						Если СуммаОплаты = (Товар.СуммаРасход + Товар.НДСРасход) Тогда
							СуммаБезНДС = Товар.СуммаРасход;
							Количество = Товар.КоличествоРасход;
							НДС = Товар.НДСРасход;
							
						Иначе
							СуммаБезНДС = Окр(Товар.СуммаРасход * СуммаОплаты / (Товар.СуммаРасход + Товар.НДСРасход), 2, 1);
							Количество = Окр(Товар.КоличествоРасход * СуммаОплаты / (Товар.СуммаРасход + Товар.НДСРасход), 3, 1);
							НДС = СуммаОплаты - СуммаБезНДС;
						КонецЕсли;
						
						ДобавитьДвижениеПоОплате(ДокументОбъект, СтруктураШапкиДокумента, Расчеты.СтатьяРасчетов, Ложь, Истина, Товар, Количество, СуммаБезНДС, НДС,,, Оплата.РеквизитыДокументаОплаты);
						ДобавитьДвижениеПоОплате(ДокументОбъект, СтруктураШапкиДокумента, Расчеты.СтатьяРасчетов, Ложь, Ложь, Товар, Количество, СуммаБезНДС, НДС,,, Оплата.РеквизитыДокументаОплаты);
						
						Если Расчеты.СтатьяРасчетов = 1 // товар списан или реализован
							ИЛИ Расчеты.СтатьяРасчетов = 5 Тогда  //или это РБП
							НоваяЗапись = СписаноОплачено.Добавить(); // для поиска в таблице оборотов
							НоваяЗапись.НоменклатурнаяГруппа = Товар.НоменклатурнаяГруппа;
							НоваяЗапись.ХарактерДеятельности = Товар.ХарактерДеятельности;
							НоваяЗапись.ВидМПЗ = Товар.ВидМПЗ;
							НоваяЗапись.Номенклатура = Товар.Номенклатура;
							НоваяЗапись.Партия = Товар.Партия;
							НоваяЗапись.РеквизитыДокументаОплаты = Оплата.РеквизитыДокументаОплаты;
							НоваяЗапись.Сумма = СуммаБезНДС;
							НоваяЗапись.Количество = Количество;
							НоваяЗапись.НДС = НДС;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Оплата списанных МПЗ
	ИзменениеДокументаОплаты(ДокументОбъект, СтруктураШапкиДокумента, СписаноОплачено, ИМР, Отгружено);
	
	// Распределение оплаты по материалам, списанным на ИМР и отгруженным покупателям.
	ОтгруженныеМПЗ = Отгружено.ВыгрузитьКолонку("Номенклатура");
	ПартииОтгруженныхМПЗ = Отгружено.ВыгрузитьКолонку("Партия");
	ОтгруженныеНоменклатурныеГруппы = Отгружено.ВыгрузитьКолонку("НоменклатурнаяГруппа");
	ОтгруженныеХарактерыДеятельности = Отгружено.ВыгрузитьКолонку("ХарактерДеятельности");
	ВидыОтгруженныхМПЗ = Отгружено.ВыгрузитьКолонку("ВидМПЗ");
	
	СтатьиЗатрат = ИМР.ВыгрузитьКолонку("Номенклатура");
	СписанныеПартии = ИМР.ВыгрузитьКолонку("Партия");
	СписанныеНоменклатурныеГруппы = ИМР.ВыгрузитьКолонку("НоменклатурнаяГруппа");
	СписанныеХарактерыДеятельности = ИМР.ВыгрузитьКолонку("ХарактерДеятельности");
	
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ОтгруженныеМПЗ);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПартииОтгруженныхМПЗ);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ОтгруженныеНоменклатурныеГруппы);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ОтгруженныеХарактерыДеятельности);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СтатьиЗатрат);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписанныеПартии);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписанныеНоменклатурныеГруппы);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписанныеХарактерыДеятельности);
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПИныеМатериальныеРасходы");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("ИсточникДанных", ИМР);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("СтатьяЗатрат, НоменклатурнаяГруппа, ХарактерДеятельности, Партия", "Номенклатура, НоменклатурнаяГруппа, ХарактерДеятельности, Партия");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
		
		СтруктураПараметров.Вставить("ИмяТаблицы", "ИПМПЗОтгруженные");
		СтруктураПараметров.Вставить("ИсточникДанных", Отгружено);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("Номенклатура, НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Партия", "Номенклатура, НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Партия");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ОтгруженныеМПЗ", ОтгруженныеМПЗ);
	Запрос.УстановитьПараметр("ВидыОтгруженныхМПЗ", ВидыОтгруженныхМПЗ);
	Запрос.УстановитьПараметр("ПартииОтгруженныхМПЗ", ПартииОтгруженныхМПЗ);
	Запрос.УстановитьПараметр("ОтгруженныеНоменклатурныеГруппы", ОтгруженныеНоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ОтгруженныеХарактерыДеятельности", ОтгруженныеХарактерыДеятельности);
	
	Запрос.УстановитьПараметр("СтатьиЗатрат", СтатьиЗатрат);
	Запрос.УстановитьПараметр("СписанныеПартии", СписанныеПартии);
	Запрос.УстановитьПараметр("СписанныеНоменклатурныеГруппы", СписанныеНоменклатурныеГруппы);
	Запрос.УстановитьПараметр("СписанныеХарактерыДеятельности", СписанныеХарактерыДеятельности);
	
	ДатаРегистратора = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
	
	Запрос.УстановитьПараметр("ДатаРегистратора", ДатаРегистратора);
	Запрос.УстановитьПараметр("ДатаНач", Мин(ДатаПервогоДокумента(СписанныеПартии), ДатаПервогоДокумента(ПартииОтгруженныхМПЗ)));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПИныеМатериальныеРасходыОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПИныеМатериальныеРасходыОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПИныеМатериальныеРасходыОбороты.СтатьяЗатрат КАК Номенклатура,
	|	ИПИныеМатериальныеРасходыОбороты.Партия КАК Партия,
	|	ИПИныеМатериальныеРасходыОбороты.ПартияМПЗ КАК ПартияМПЗ,
	|	ИПИныеМатериальныеРасходыОбороты.МПЗ КАК МПЗ,
	|	NULL КАК ДокументОтгрузки,
	|	СУММА(ИПИныеМатериальныеРасходыОбороты.КоличествоПриход) КАК КоличествоПриход,
	|	СУММА(ИПИныеМатериальныеРасходыОбороты.КоличествоРасход) КАК КоличествоРасход,
	|	СУММА(ИПИныеМатериальныеРасходыОбороты.СуммаПриход) КАК СуммаПриход,
	|	СУММА(ИПИныеМатериальныеРасходыОбороты.СуммаРасход) КАК СуммаРасход,
	|	СУММА(ИПИныеМатериальныеРасходыОбороты.НДСПриход) КАК НДСПриход,
	|	СУММА(ИПИныеМатериальныеРасходыОбороты.НДСРасход) КАК НДСРасход,
	|	0 КАК ВыручкаПриход,
	|	0 КАК ВыручкаРасход,
	|	0 КАК НДСНачисленныйПриход,
	|	0 КАК НДСНачисленныйРасход,
	|	2 КАК СтатьяРасчетов,
	|	NULL КАК ВидМПЗ,
	|	ИПИныеМатериальныеРасходыОбороты.Партия.Дата КАК ПартияДата,
	|	ИПИныеМатериальныеРасходыОбороты.ПартияМПЗ.Дата КАК ПартияМПЗДата,
	|	NULL КАК ДокументОтгрузкиДата
	|ИЗ
	|	РегистрНакопления.ИПИныеМатериальныеРасходы.Обороты(
	|			&ДатаНач,
	|			&ДатаРегистратора,
	|			,
	|			Организация = &Организация
	|				И НоменклатурнаяГруппа В (&СписанныеНоменклатурныеГруппы)
	|				И ХарактерДеятельности В (&СписанныеХарактерыДеятельности)
	|				И СтатьяЗатрат В (&СтатьиЗатрат)
	|				И Партия В (&СписанныеПартии)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПИныеМатериальныеРасходыОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПИныеМатериальныеРасходыОбороты.НоменклатурнаяГруппа,
	|	ИПИныеМатериальныеРасходыОбороты.ХарактерДеятельности,
	|	ИПИныеМатериальныеРасходыОбороты.СтатьяЗатрат,
	|	ИПИныеМатериальныеРасходыОбороты.Партия,
	|	ИПИныеМатериальныеРасходыОбороты.ПартияМПЗ,
	|	ИПИныеМатериальныеРасходыОбороты.МПЗ,
	|	ИПИныеМатериальныеРасходыОбороты.Партия.Дата,
	|	ИПИныеМатериальныеРасходыОбороты.ПартияМПЗ.Дата
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИПМПЗОтгруженныеОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОбороты.ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОбороты.Номенклатура,
	|	ИПМПЗОтгруженныеОбороты.Партия,
	|	NULL,
	|	NULL,
	|	ИПМПЗОтгруженныеОбороты.ДокументОтгрузки,
	|	СУММА(ИПМПЗОтгруженныеОбороты.КоличествоПриход),
	|	СУММА(ИПМПЗОтгруженныеОбороты.КоличествоРасход),
	|	СУММА(ИПМПЗОтгруженныеОбороты.СуммаПриход),
	|	СУММА(ИПМПЗОтгруженныеОбороты.СуммаРасход),
	|	СУММА(ИПМПЗОтгруженныеОбороты.НДСПриход),
	|	СУММА(ИПМПЗОтгруженныеОбороты.НДСРасход),
	|	СУММА(ИПМПЗОтгруженныеОбороты.ВыручкаПриход),
	|	СУММА(ИПМПЗОтгруженныеОбороты.ВыручкаРасход),
	|	СУММА(ИПМПЗОтгруженныеОбороты.НДСНачисленныйПриход),
	|	СУММА(ИПМПЗОтгруженныеОбороты.НДСНачисленныйРасход),
	|	4,
	|	ИПМПЗОтгруженныеОбороты.ВидМПЗ,
	|	ИПМПЗОтгруженныеОбороты.Партия.Дата,
	|	NULL,
	|	ИПМПЗОтгруженныеОбороты.ДокументОтгрузки.Дата
	|ИЗ
	|	РегистрНакопления.ИПМПЗОтгруженные.Обороты(
	|			&ДатаНач,
	|			&ДатаРегистратора,
	|			,
	|			Организация = &Организация
	|				И НоменклатурнаяГруппа В (&ОтгруженныеНоменклатурныеГруппы)
	|				И ХарактерДеятельности В (&ОтгруженныеХарактерыДеятельности)
	|				И Номенклатура В (&ОтгруженныеМПЗ)
	|				И Партия В (&ПартииОтгруженныхМПЗ)
	|				И ВидМПЗ В (&ВидыОтгруженныхМПЗ)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПМПЗОтгруженныеОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПМПЗОтгруженныеОбороты.ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОбороты.Номенклатура,
	|	ИПМПЗОтгруженныеОбороты.Партия,
	|	ИПМПЗОтгруженныеОбороты.ДокументОтгрузки,
	|	ИПМПЗОтгруженныеОбороты.ВидМПЗ,
	|	ИПМПЗОтгруженныеОбороты.Партия.Дата,
	|	ИПМПЗОтгруженныеОбороты.ДокументОтгрузки.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартияДата,
	|	ДокументОтгрузкиДата,
	|	Номенклатура,
	|	СтатьяРасчетов,
	|	ПартияМПЗДата,
	|	МПЗ,
	|	НоменклатурнаяГруппа,
	|	ХарактерДеятельности,
	|	ВидМПЗ
	|ИТОГИ
	|	СУММА(КоличествоПриход),
	|	СУММА(КоличествоРасход),
	|	СУММА(СуммаПриход),
	|	СУММА(СуммаРасход),
	|	СУММА(НДСПриход),
	|	СУММА(НДСРасход),
	|	СУММА(ВыручкаПриход),
	|	СУММА(ВыручкаРасход),
	|	СУММА(НДСНачисленныйПриход),
	|	СУММА(НДСНачисленныйРасход)
	|ПО
	|	СтатьяРасчетов,
	|	Партия";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОтборМПЗ = Новый Структура("Номенклатура,Партия,ВидМПЗ,ХарактерДеятельности,НоменклатурнаяГруппа");
	ОтборИМР = Новый Структура("Номенклатура,Партия,ХарактерДеятельности,НоменклатурнаяГруппа");
	
	Расчеты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатьяРасчетов");
	Пока Расчеты.Следующий() Цикл
		Партия = Расчеты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Партия");
		Пока Партия.Следующий() Цикл
			
			Товар = Партия.Выбрать();
			Пока Товар.Следующий() Цикл
				
				Если Товар.СуммаПриход = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Расчеты.СтатьяРасчетов = 2 Тогда
					ОтборИМР.Номенклатура = Товар.Номенклатура;
					ОтборИМР.Партия = Товар.Партия;
					ОтборИМР.ХарактерДеятельности = Товар.ХарактерДеятельности;
					ОтборИМР.НоменклатурнаяГруппа = Товар.НоменклатурнаяГруппа;
					
					МассивОплаты = ИМР.НайтиСтроки(ОтборИМР);
					
					Если МассивОплаты.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Оплата = МассивОплаты[0];
					
				Иначе // Если Расчеты.СтатьяРасчетов = 4 Тогда
					ОтборМПЗ.Номенклатура = Товар.Номенклатура;
					ОтборМПЗ.Партия = Товар.Партия;
					ОтборМПЗ.ВидМПЗ = Товар.ВидМПЗ;
					ОтборМПЗ.ХарактерДеятельности = Товар.ХарактерДеятельности;
					ОтборМПЗ.НоменклатурнаяГруппа = Товар.НоменклатурнаяГруппа;
					
					МассивОплаты = Отгружено.НайтиСтроки(ОтборМПЗ);
					
					Если МассивОплаты.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Оплата = МассивОплаты[0];
				КонецЕсли;
				
				Если Оплата.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаОплаты = Мин(Товар.СуммаПриход, Оплата.Сумма);
				Количество = Мин(Товар.КоличествоПриход, Оплата.Количество);
				НДС = Мин(Товар.НДСПриход, Оплата.НДС);
				
				Оплата.Сумма = Оплата.Сумма - СуммаОплаты;
				Оплата.Количество = Оплата.Количество - Количество;
				Оплата.НДС = Оплата.НДС - НДС;
				
				Если СуммаОплаты = Товар.СуммаПриход Тогда
					Выручка = Товар.ВыручкаПриход;
					НДСНачисленный = Товар.НДСНачисленныйПриход;
				
				Иначе
					Выручка = Окр(Товар.ВыручкаПриход * СуммаОплаты / Товар.СуммаПриход, 2, 1);
					НДСНачисленный = Окр(Товар.НДСНачисленныйПриход * СуммаОплаты / Товар.СуммаПриход, 2, 1);
				КонецЕсли;
																									   // Приход, Сторно
				ДобавитьДвижениеПоОплате(ДокументОбъект, СтруктураШапкиДокумента, Расчеты.СтатьяРасчетов, Истина, Истина, Товар, Количество, СуммаОплаты, НДС, Выручка, НДСНачисленный, Оплата.РеквизитыДокументаОплаты);
				ДобавитьДвижениеПоОплате(ДокументОбъект, СтруктураШапкиДокумента, Расчеты.СтатьяРасчетов, Истина, Ложь, Товар, Количество, СуммаОплаты, НДС, Выручка, НДСНачисленный, Оплата.РеквизитыДокументаОплаты);
				
				СуммаОплаты = Мин(СуммаОплаты, Товар.СуммаРасход);
					
				Если СуммаОплаты <> 0 Тогда // оплата списанного товара
						
					Если СуммаОплаты = Товар.СуммаРасход Тогда
						Количество = Товар.КоличествоРасход;
						НДС = Товар.НДСРасход;
						Выручка = Товар.ВыручкаРасход;
						НДСНачисленный = Товар.НДСНачисленныйРасход;
					КонецЕсли;
					
					ДобавитьДвижениеПоОплате(ДокументОбъект, СтруктураШапкиДокумента, Расчеты.СтатьяРасчетов, Ложь, Истина, Товар, Количество, СуммаОплаты, НДС, Выручка, НДСНачисленный, Оплата.РеквизитыДокументаОплаты);
					ДобавитьДвижениеПоОплате(ДокументОбъект, СтруктураШапкиДокумента, Расчеты.СтатьяРасчетов, Ложь, Ложь, Товар, Количество, СуммаОплаты, НДС, Выручка, НДСНачисленный, Оплата.РеквизитыДокументаОплаты);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОплатаПокупателя(ДокументОбъект, СтруктураШапкиДокумента, ОплаченныеПартии)
	
	ОтборПартий = Новый Структура("Сделка");
	СписокСделок = ОплаченныеПартии.ВыгрузитьКолонку("Сделка");
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗОтгруженные");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("ИсточникДанных", ОплаченныеПартии);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("ДокументОтгрузки", "Сделка");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	КонецЕсли;
	
	ДатаРегистратора = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСделок", СписокСделок);
	Запрос.УстановитьПараметр("ДатаРегистратора", ДатаРегистратора);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПМПЗОтгруженныеОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОстатки.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОстатки.Номенклатура КАК Номенклатура,
	|	ИПМПЗОтгруженныеОстатки.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ИПМПЗОтгруженныеОстатки.Партия КАК Партия,
	|	ИПМПЗОтгруженныеОстатки.ДокументОплаты КАК ДокументОплаты,
	|	СУММА(ИПМПЗОтгруженныеОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ИПМПЗОтгруженныеОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(ИПМПЗОтгруженныеОстатки.НДСОстаток) КАК НДСОстаток,
	|	СУММА(ИПМПЗОтгруженныеОстатки.ВыручкаОстаток) КАК ВыручкаОстаток,
	|	СУММА(ИПМПЗОтгруженныеОстатки.НДСНачисленныйОстаток) КАК НДСНачисленныйОстаток,
	|	ИПМПЗОтгруженныеОстатки.ВидМПЗ КАК ВидМПЗ,
	|	ВЫБОР
	|		КОГДА ИПМПЗОтгруженныеОстатки.ДокументОплаты = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СтатусОплаты
	|ИЗ
	|	РегистрНакопления.ИПМПЗОтгруженные.Остатки(&ДатаРегистратора, ДокументОтгрузки В (&СписокСделок)) КАК ИПМПЗОтгруженныеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПМПЗОтгруженныеОстатки.ДокументОтгрузки,
	|	ИПМПЗОтгруженныеОстатки.ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОстатки.НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОстатки.Партия,
	|	ИПМПЗОтгруженныеОстатки.ДокументОплаты,
	|	ИПМПЗОтгруженныеОстатки.Номенклатура,
	|	ИПМПЗОтгруженныеОстатки.ВидМПЗ,
	|	ВЫБОР
	|		КОГДА ИПМПЗОтгруженныеОстатки.ДокументОплаты = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусОплаты УБЫВ,
	|	ИПМПЗОтгруженныеОстатки.ДокументОтгрузки.Дата,
	|	ИПМПЗОтгруженныеОстатки.Партия.Дата,
	|	ИПМПЗОтгруженныеОстатки.ДокументОплаты.Дата,
	|	Номенклатура,
	|	НоменклатурнаяГруппа,
	|	ХарактерДеятельности,
	|	ВидМПЗ
	|ИТОГИ ПО
	|	ДокументОтгрузки,
	|	СтатусОплаты";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтборПартий = Новый Структура("Сделка");
	
	СтатусОплаты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатусОплаты");
	Пока СтатусОплаты.Следующий() Цикл
		Партия = СтатусОплаты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДокументОтгрузки");
		Пока Партия.Следующий() Цикл
			
			ОтборПартий.Сделка = Партия.ДокументОтгрузки;
			Оплата = ОплаченныеПартии.НайтиСтроки(ОтборПартий)[0];
			
			Если Оплата.РублеваяСумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Товар = Партия.Выбрать();
			Пока Товар.Следующий() Цикл
				
				Если Товар.ВыручкаОстаток = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаОплаты = Мин(Товар.ВыручкаОстаток, Оплата.РублеваяСумма);
				
				Если СуммаОплаты = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Оплата.РублеваяСумма = Оплата.РублеваяСумма - СуммаОплаты;
				
				Если СуммаОплаты = Товар.ВыручкаОстаток Тогда
					Количество = Товар.КоличествоОстаток;
					НДСНачисленный = Товар.НДСНачисленныйОстаток;
					Сумма = Товар.СуммаОстаток;
					НДС = Товар.НДСОстаток;
					
				Иначе
					Количество = Окр(Товар.КоличествоОстаток * СуммаОплаты / Товар.ВыручкаОстаток, 3, 1);
					НДСНачисленный = Окр(Товар.НДСНачисленныйОстаток * СуммаОплаты / Товар.ВыручкаОстаток, 2, 1);
					СуммаСНДС = Окр((Товар.СуммаОстаток + Товар.НДСОстаток) * СуммаОплаты / Товар.ВыручкаОстаток, 2, 1);
					Сумма = Окр(Товар.СуммаОстаток * СуммаОплаты / Товар.ВыручкаОстаток, 2, 1);
					НДС = СуммаСНДС - Сумма;
				КонецЕсли;
				
				Оплачено = ДокументОбъект.Движения.ИПМПЗОтгруженные.Добавить();
				Доход = ДокументОбъект.Движения.ИПДоходы.Добавить();
				
				Оплачено.Период = СтруктураШапкиДокумента.Дата;
				Оплачено.ВидДвижения = ВидДвиженияНакопления.Расход;
				Оплачено.Организация = СтруктураШапкиДокумента.Организация;
				Оплачено.ХарактерДеятельности = Товар.ХарактерДеятельности;
				Оплачено.НоменклатурнаяГруппа = Товар.НоменклатурнаяГруппа;
				Оплачено.ВидМПЗ = Товар.ВидМПЗ;
				Оплачено.Номенклатура = Товар.Номенклатура;
				Оплачено.Партия = Товар.Партия;
				Оплачено.ДокументОтгрузки = Товар.ДокументОтгрузки;
				Оплачено.ДокументОплаты = Товар.ДокументОплаты;
				Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаДолга" Тогда
					Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
						Оплачено.ДокументОплаты = ДокументОбъект.Ссылка;
					КонецЕсли;
				КонецЕсли;
				
				Оплачено.Выручка = СуммаОплаты;
				Оплачено.НДСНачисленный = НДСНачисленный;
				Оплачено.Сумма = Сумма;
				Оплачено.НДС = НДС;
				Оплачено.Количество = Количество;
				
				Доход.Период = СтруктураШапкиДокумента.Дата;
				Доход.Организация = СтруктураШапкиДокумента.Организация;
				Доход.ХарактерДеятельности = Товар.ХарактерДеятельности;
				Доход.НоменклатурнаяГруппа = Товар.НоменклатурнаяГруппа;
				Доход.ВидМПЗ = Товар.ВидМПЗ;
				Доход.Номенклатура = Товар.Номенклатура;
				Доход.Партия = Товар.Партия;
				Доход.ДокументОтгрузки = Товар.ДокументОтгрузки;
				
				Доход.ДокументОплаты = ДокументОбъект.Ссылка;
				Доход.РеквизитыДокументаОплаты = Оплата.РеквизитыДокументаОплаты;
				
				Доход.Выручка = СуммаОплаты;
				Доход.НДСНачисленный = НДСНачисленный;
				Доход.Количество = Количество;
				
				Если ЗначениеЗаполнено(Товар.ДокументОплаты) Тогда // товар оплачен поставщику
					Доход.КоличествоОплаченоПоставщику = Количество;
					Доход.Сумма = Сумма;
					Доход.НДС = НДС;
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаДолга" Тогда // товар оплачен поставщику - зачтено
					Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
						Доход.КоличествоОплаченоПоставщику = Количество;
						Доход.Сумма = Сумма;
						Доход.НДС = НДС;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;
		
КонецПроцедуры

Процедура РегистрацияРасчетовПредпринимателя(ДокументОбъект, СтруктураШапкиДокумента, РеестрПроводок, НаправлениеДвижения) Экспорт
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
		Возврат;
	КонецЕсли;
	
	СписокКолонок = "Сделка";
	СписокКолонокСумм = "РублеваяСумма, ОстатокВзаиморасчетов";
	РеквизитыДокументаВТЧ = РеестрПроводок.Колонки.Найти("РеквизитыДокументаОплаты");
	
	Если РеквизитыДокументаВТЧ <> Неопределено Тогда
		СписокКолонок = СписокКолонок + ",РеквизитыДокументаОплаты";
	КонецЕсли;
	
	ОплаченныеПартии = РеестрПроводок.Скопировать(, СписокКолонок + "," + СписокКолонокСумм);
	ОплаченныеПартии.Свернуть(СписокКолонок, СписокКолонокСумм);
	
	КоличествоСтрок = ОплаченныеПартии.Количество();
	Для Счетчик = 1 По КоличествоСтрок Цикл
		ТекущаяСтрока = ОплаченныеПартии[КоличествоСтрок - Счетчик];
		Если ТекущаяСтрока.ОстатокВзаиморасчетов = 0 Тогда
			ОплаченныеПартии.Удалить(ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Если РеквизитыДокументаВТЧ = Неопределено Тогда
		РеквизитыДокументаОплаты = РеквизитыДокументаОплаты(СтруктураШапкиДокумента);
		ОплаченныеПартии.Колонки.Добавить("РеквизитыДокументаОплаты");
		ОплаченныеПартии.ЗаполнитьЗначения(РеквизитыДокументаОплаты, "РеквизитыДокументаОплаты");
	КонецЕсли;
	
	НомСтроки = 0;
	Пока НомСтроки < ОплаченныеПартии.Количество() Цикл
		Если ОплаченныеПартии[НомСтроки].Сделка = Неопределено Тогда
			ОплаченныеПартии.Удалить(НомСтроки);
			
		Иначе
			НомСтроки = НомСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет" Тогда
		ОплатаПоставщику(ДокументОбъект, СтруктураШапкиДокумента, ОплаченныеПартии);
	
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
		
		ОплатаПоставщику(ДокументОбъект, СтруктураШапкиДокумента, ОплаченныеПартии);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
		ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		
		ОплатаПокупателя(ДокументОбъект, СтруктураШапкиДокумента, ОплаченныеПартии);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "КорректировкаДолга" Тогда
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
			
			ВидЗадолженности = СтруктураШапкиДокумента.ВидЗадолженности;
			
			Если ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
				ОплаченныеПартииПокупателя = ОплаченныеПартии.Скопировать();
				Если ОплаченныеПартииПокупателя.Количество() > 0 Тогда
					ОплатаПокупателя(ДокументОбъект, СтруктураШапкиДокумента, ОплаченныеПартииПокупателя);
				КонецЕсли;
			КонецЕсли;
			
			Если ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
				ОплаченныеПартииПоставщика = ОплаченныеПартии.Скопировать();
				Если ОплаченныеПартииПоставщика.Количество() > 0 Тогда
					ОплатаПоставщику(ДокументОбъект, СтруктураШапкиДокумента, ОплаченныеПартииПоставщика);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////
// АМОРТИЗАЦИЯ

Процедура ОтражениеАмортизации(ДокументОбъект, СтруктураШапкиДокумента, ТабЗатрат, УчетнаяПолитикаНУ) Экспорт
	
	Для Каждого СтрокаОС Из ТабЗатрат Цикл
		
		СтатьяЗатрат = НайтиСсылкуВСтроке(ТабЗатрат, СтрокаОС, "Субконто", 2);
		ХарактерДеятельности = ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, СтрокаОС.СчетЗатрат, СтатьяЗатрат,, УчетнаяПолитикаНУ);
		
		ВидМПЗ = ВидМПЗПоСчетуУчета(СтрокаОС.СчетЗатрат, СтатьяЗатрат);
		НГ = НайтиСсылкуВСтроке(ТабЗатрат, СтрокаОС, "Субконто", 1);
		НоменклатурнаяГруппа = НоменклатурнаяГруппаПоОперации(,,НГ, ВидМПЗ, УчетнаяПолитикаНУ);
		
		НоваяСтрока = ДокументОбъект.Движения.ИППрочиеРасходы.Добавить();
		НоваяСтрока.Активность                	= Истина;
		НоваяСтрока.Период						= СтруктураШапкиДокумента.Дата;
		НоваяСтрока.НоменклатурнаяГруппа		= НоменклатурнаяГруппа;
		НоваяСтрока.ХарактерДеятельности		= ХарактерДеятельности;
		НоваяСтрока.Регистратор					= ДокументОбъект.Ссылка;
		НоваяСтрока.СтатьяЗатрат				= СтрокаОС.ОбъектУчета;
		НоваяСтрока.Организация					= СтруктураШапкиДокумента.Организация;
		НоваяСтрока.РасчетныйДокумент			= СтрокаОС.РасчетныйДокумент;
		НоваяСтрока.ДокументОплаты				= СтрокаОС.ДокументОплаты;
		НоваяСтрока.Сумма						= СтрокаОС.Сумма;
		
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////
// РБП

Процедура РасчетИСписаниеРПБ(ДокументОбъект, СтруктураШапкиДокумента, Заголовок) Экспорт
	
	мНачДата		= НачалоМесяца(СтруктураШапкиДокумента.Дата);
	мКонДата		= КонецМесяца(СтруктураШапкиДокумента.Дата);
	КонГраница	= Новый Граница(мКонДата, ВидГраницы.Включая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("КонецМесяца", КонГраница);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПРБПОстатки.НоменклатурнаяГруппа,
	|	ИПРБПОстатки.ХарактерДеятельности,
	|	ИПРБПОстатки.ВидРасхода КАК РБП,
	|	ИПРБПОстатки.Партия,
	|	ИПРБПОстатки.ДокументОплаты,
	|	СУММА(ИПРБПОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(ИПРБПОстатки.НДСОстаток) КАК НДСОстаток
	|ИЗ
	|	РегистрНакопления.ИПРБП.Остатки(&КонецМесяца, Организация = &Организация) КАК ИПРБПОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПРБПОстатки.НоменклатурнаяГруппа,
	|	ИПРБПОстатки.ХарактерДеятельности,
	|	ИПРБПОстатки.ВидРасхода,
	|	ИПРБПОстатки.Партия,
	|	ИПРБПОстатки.ДокументОплаты";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РБП         = Выборка.РБП;
		Если НЕ ЗначениеЗаполнено(РБП) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РБП.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РБП.ДатаНачалаСписания) Тогда
			ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен дата начала списания !";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Ложь, Заголовок);
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РБП.ДатаОкончанияСписания) Тогда
			ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен дата окончания списания !";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Ложь, Заголовок);
			Продолжить;
		КонецЕсли;
		
		ВспомогательныеДанныеРасчета = Новый Структура("КоличествоМесяцевДней, КоличествоМесяцевДнейТекущегоПериода", 0, 0);
		ДатаНачала = ?(РБП.ДатаНачалаСписания > мНачДата, РБП.ДатаНачалаСписания, мНачДата);
		СуммаСписания = БухгалтерскийУчет.СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.СуммаОстаток, ВспомогательныеДанныеРасчета, мНачДата, мКонДата);
		СуммаСписанияНДС = БухгалтерскийУчет.СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.НДСОстаток, ВспомогательныеДанныеРасчета, мНачДата, мКонДата);
		
		Если НЕ (СуммаСписания > 0.05 Или СуммаСписания < -0.05) Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыДокументаОплаты = РеквизитыДокументаОплаты(Выборка.ДокументОплаты);
		
		НоваяСтрока = ДокументОбъект.Движения.ИПРБП.Добавить();
		НоваяСтрока.ВидДвижения                	= ВидДвиженияНакопления.Расход;
		НоваяСтрока.Активность                	= Истина;
		НоваяСтрока.НоменклатурнаяГруппа		= Выборка.НоменклатурнаяГруппа;
		НоваяСтрока.ХарактерДеятельности		= Выборка.ХарактерДеятельности;
		НоваяСтрока.Регистратор					= ДокументОбъект.Ссылка;
		НоваяСтрока.ВидРасхода					= РБП;
		НоваяСтрока.Организация					= СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Период						= СтруктураШапкиДокумента.Дата;
		НоваяСтрока.Партия						= Выборка.Партия;
		НоваяСтрока.ДокументОплаты				= Выборка.ДокументОплаты;
		НоваяСтрока.Сумма						= СуммаСписания;
		НоваяСтрока.НДС							= СуммаСписанияНДС;
		НоваяСтрока.РеквизитыДокументаОплаты	= РеквизитыДокументаОплаты;
		
		//Отражение	в прочих расходах
		СтатьяЗатрат = РБП;
		ТипСтатьи = ТипЗнч(РБП); 
		Если ТипСтатьи = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
			ТипСтатьи = ТипЗнч(РБП.СубконтоЗатрат1); 
			Если ТипСтатьи = Тип("СправочникСсылка.СтатьиЗатрат") ИЛИ ТипСтатьи = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				СтатьяЗатрат = РБП.СубконтоЗатрат1;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ДокументОбъект.Движения.ИППрочиеРасходы.Добавить();
		НоваяСтрока.Активность                	= Истина;
		НоваяСтрока.Период						= СтруктураШапкиДокумента.Дата;
		НоваяСтрока.НоменклатурнаяГруппа		= Выборка.НоменклатурнаяГруппа;
		НоваяСтрока.ХарактерДеятельности		= Выборка.ХарактерДеятельности;
		НоваяСтрока.Регистратор					= ДокументОбъект.Ссылка;
		НоваяСтрока.СтатьяЗатрат				= СтатьяЗатрат;
		НоваяСтрока.Организация					= СтруктураШапкиДокумента.Организация;
		НоваяСтрока.РасчетныйДокумент			= Выборка.Партия;
		НоваяСтрока.ДокументОплаты				= Выборка.ДокументОплаты;
		НоваяСтрока.Сумма						= СуммаСписания;
		НоваяСтрока.НДС							= СуммаСписанияНДС;
		НоваяСтрока.РеквизитыДокументаОплаты	= РеквизитыДокументаОплаты;

	КонецЦикла;
	
КонецПроцедуры

///////////////////////////
// ПРОЧИЕ РАСЧЕТЫ

Процедура ОтражениеРасходовНаОплатуТруда(ДокументОбъект, ВыборкаПоДоходам, УчетнаяПолитика, Режим) Экспорт
	
	СтруктураШапкиДокумента = Новый Структура("Организация, Ссылка, ВидОперации, Дата, Номер", ДокументОбъект.Организация, ДокументОбъект.Ссылка, "", ДокументОбъект.Дата, ДокументОбъект.Номер);
		
	ТабУдержания = Новый ТаблицаЗначений;
	ТабУдержания.Колонки.Добавить("СчетУчета");
	ТабУдержания.Колонки.Добавить("ФизЛицо");
	ТабУдержания.Колонки.Добавить("Контрагент");
	ТабУдержания.Колонки.Добавить("НоменклатурнаяГруппа");
	ТабУдержания.Колонки.Добавить("ХарактерДеятельности");
	ТабУдержания.Колонки.Добавить("СтатьяЗатрат");
	ТабУдержания.Колонки.Добавить("ВидНачисленияУдержания");
	ТабУдержания.Колонки.Добавить("СубконтоДт1");
	ТабУдержания.Колонки.Добавить("СубконтоДт2");
	ТабУдержания.Колонки.Добавить("СубконтоДт3");
	ТабУдержания.Колонки.Добавить("Сумма");
	
	ТабОплатаТруда = ТабУдержания.СкопироватьКолонки();
	ТабБюджет = ТабУдержания.СкопироватьКолонки();
	ТабРасходовПоРаботнику = ТабУдержания.СкопироватьКолонки();
	ТабРасходовПоРаботнику.Колонки.Добавить("ДокументОплаты");
	
	ТабУдержания.Колонки.Добавить("ВидНачисления");
	
	Контрагенты = Новый Массив;
	СчетаУчета = Новый Массив;
	
	ВыборкаПоДоходам.Сбросить();
	Пока ВыборкаПоДоходам.Следующий() Цикл
		Если ВыборкаПоДоходам.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда Тогда
			НовСтр = ТабОплатаТруда.Добавить();
			НовСтр.ФизЛицо = ВыборкаПоДоходам.СубконтоКт1;
			НовСтр.ВидНачисленияУдержания = ВыборкаПоДоходам.ВидНачисленияУдержания;
			НовСтр.Сумма = ВыборкаПоДоходам.Сумма;
			НовСтр.СчетУчета = ВыборкаПоДоходам.СчетДт;
			
			НовСтр.СубконтоДт1 = ВыборкаПоДоходам.СубконтоДт1;
			НовСтр.СубконтоДт2 = ВыборкаПоДоходам.СубконтоДт2;
			НовСтр.СубконтоДт3 = ВыборкаПоДоходам.СубконтоДт3;
			
			НовСтр.СтатьяЗатрат = НайтиСсылкуВСтроке(ТабОплатаТруда, НовСтр, "СубконтоДт", 2);
			НовСтр.ХарактерДеятельности = ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, ВыборкаПоДоходам.СчетДт, НовСтр.СтатьяЗатрат,, УчетнаяПолитика);
			
			ВидМПЗ = ВидМПЗПоСчетуУчета(ВыборкаПоДоходам.СчетДт, НовСтр.СтатьяЗатрат);
			
			НГ = НайтиСсылкуВСтроке(ТабОплатаТруда, НовСтр, "СубконтоДт", 1);
			НовСтр.НоменклатурнаяГруппа = НоменклатурнаяГруппаПоОперации(Ложь,,НГ, ВидМПЗ, УчетнаяПолитика);
			
			Контрагенты.Добавить(ВыборкаПоДоходам.СубконтоКт1);
						
		ИначеЕсли ВыборкаПоДоходам.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию) Тогда
			НовСтр = ТабБюджет.Добавить();
			НовСтр.СчетУчета = ВыборкаПоДоходам.СчетКт;
			НовСтр.Сумма = ВыборкаПоДоходам.Сумма;
			
			НовСтр.СубконтоДт1 = ВыборкаПоДоходам.СубконтоДт1;
			НовСтр.СубконтоДт2 = ВыборкаПоДоходам.СубконтоДт2;
			НовСтр.СубконтоДт3 = ВыборкаПоДоходам.СубконтоДт3;
			
			НовСтр.СтатьяЗатрат = НайтиСсылкуВСтроке(ТабБюджет, НовСтр, "СубконтоДт", 2);
			НовСтр.ХарактерДеятельности = ХарактерДеятельностиПоОперации(СтруктураШапкиДокумента, ВыборкаПоДоходам.СчетДт, НовСтр.СтатьяЗатрат,, УчетнаяПолитика);
			
			ВидМПЗ = ВидМПЗПоСчетуУчета(ВыборкаПоДоходам.СчетДт, НовСтр.СтатьяЗатрат);
			НГ = НайтиСсылкуВСтроке(ТабБюджет, НовСтр, "СубконтоДт", 1);
			НовСтр.НоменклатурнаяГруппа = НоменклатурнаяГруппаПоОперации(Ложь,,НГ, ВидМПЗ, УчетнаяПолитика);
			
			СчетаУчета.Добавить(ВыборкаПоДоходам.СчетКт);
			
		ИначеЕсли ВыборкаПоДоходам.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда Тогда
			
			Если ВыборкаПоДоходам.СчетКт = ПланыСчетов.Хозрасчетный.НДФЛ Тогда
				НовСтр = ТабУдержания.Добавить();
				НовСтр.СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ;
				НовСтр.ФизЛицо = ВыборкаПоДоходам.СубконтоДт1;
				НовСтр.Контрагент = Неопределено;
				НовСтр.ВидНачисленияУдержания = Перечисления.ИПВидыНачисленийУдержаний.УдержаноНДФЛ;
				НовСтр.Сумма = ВыборкаПоДоходам.Сумма;
				
				СчетаУчета.Добавить(ВыборкаПоДоходам.СчетКт);
				
			ИначеЕсли ТипЗнч(ВыборкаПоДоходам.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") Тогда
				НовСтр = ТабУдержания.Добавить();
				НовСтр.СчетУчета = ВыборкаПоДоходам.СчетКт;
				НовСтр.ФизЛицо = ВыборкаПоДоходам.СубконтоДт1;
				НовСтр.Контрагент = ВыборкаПоДоходам.СубконтоКт1;
				НовСтр.ВидНачисленияУдержания = ВыборкаПоДоходам.ВидНачисленияУдержания;
				НовСтр.Сумма = ВыборкаПоДоходам.Сумма;
				
				Контрагенты.Добавить(ВыборкаПоДоходам.СубконтоКт1);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТабБюджет.Свернуть("СчетУчета,СтатьяЗатрат,ХарактерДеятельности,НоменклатурнаяГруппа", "Сумма");
	ТабУдержания.Свернуть("СчетУчета,Контрагент,ФизЛицо,ВидНачисленияУдержания,СтатьяЗатрат,ХарактерДеятельности,НоменклатурнаяГруппа,ВидНачисления", "Сумма");
	ТабОплатаТруда.Сортировать("СчетУчета");
	ТабОплатаТруда.Свернуть("ФизЛицо,ВидНачисленияУдержания,СтатьяЗатрат,ХарактерДеятельности,НоменклатурнаяГруппа", "Сумма");
	
	МассивКоэф = Новый Массив;
	
	// Распределим удержания по начислениям
	СтруктураОтбора = Новый Структура("ФизЛицо");
	КоличУдерж = ТабУдержания.Количество();
	
	Для НомерУдерж = 0 По КоличУдерж - 1 Цикл
		
		Удерж = ТабУдержания[НомерУдерж];
		
		МассивКоэф.Очистить();
		СтруктураОтбора.ФизЛицо = Удерж.ФизЛицо;
		Начисления = ТабОплатаТруда.НайтиСтроки(СтруктураОтбора);
		Для Каждого Начисление Из Начисления Цикл
			МассивКоэф.Добавить(Начисление.Сумма);
		КонецЦикла;
		
		РаспрСуммы = ОбщегоНазначения.РаспределитьПропорционально(Удерж.Сумма, МассивКоэф, 2);
		
		Удерж.Сумма = 0;
		
		Если РаспрСуммы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Индекс = 0;
		Пока Индекс < Начисления.Количество() Цикл
			НовУдерж = ТабУдержания.Добавить();
			ЗаполнитьЗначенияСвойств(НовУдерж, Удерж);
			
			НовУдерж.СтатьяЗатрат = Начисления[Индекс].СтатьяЗатрат;
			НовУдерж.ХарактерДеятельности = Начисления[Индекс].ХарактерДеятельности;
			НовУдерж.НоменклатурнаяГруппа = Начисления[Индекс].НоменклатурнаяГруппа;
			НовУдерж.ВидНачисления = Начисления[Индекс].ВидНачисленияУдержания;
			НовУдерж.Сумма = РаспрСуммы[Индекс];
			
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЦикла;
	
	// Удалим "ВидНачисления" из таблицы удержаний
	ТабУдержания.Свернуть("СчетУчета,Контрагент,ФизЛицо,ВидНачисленияУдержания,СтатьяЗатрат,ХарактерДеятельности,НоменклатурнаяГруппа", "Сумма");
	
	// Поищем авансы
	ТабУдержания.Колонки.Добавить("ДокументОплаты");
	ТабБюджет.Колонки.Добавить("ДокументОплаты");
	ТабОплатаТруда.Колонки.Добавить("ДокументОплаты");
	
	Контрагенты.Добавить(Неопределено);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Контрагенты);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СчетаУчета);
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПрочиеРасчеты");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("ИсточникДанных", ТабУдержания);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("СчетУчета,Контрагент", "СчетУчета,Контрагент");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	Запрос.УстановитьПараметр("СчетаУчета", СчетаУчета);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.СчетУчета КАК СчетУчета,
	|	ПрочиеРасчетыОстатки.Контрагент КАК Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент,
	|	ПрочиеРасчетыОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&Период,
	|			Контрагент В (&Контрагенты)
	|				И СчетУчета В (&СчетаУчета)
	|				И Организация = &Организация) КАК ПрочиеРасчетыОстатки
	|ГДЕ
	|	ПрочиеРасчетыОстатки.СуммаОстаток < 0
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент.Дата,
	|	СчетУчета,
	|	Контрагент";
	
	ТаблицаПлатежей = Запрос.Выполнить().Выгрузить();
	
	// Удержания
	СтруктураОтбора = Новый Структура("СчетУчета, Контрагент");
	
	// Оплаченные удержания будем запоминать, так как эти же
	// суммы нужно будет зачесть еще раз при оплате начислений.
	ОплаченныеУдержания = ТаблицаПлатежей.СкопироватьКолонки();
	
	КолСотр = ТабУдержания.Количество();
	Для НомерСотр = 0 по КолСотр - 1 Цикл
		
		Сотр = ТабУдержания[НомерСотр];
		
		СтруктураОтбора.СчетУчета = Сотр.СчетУчета;
		СтруктураОтбора.Контрагент = Сотр.Контрагент;
		
		ДокОплаты = ТаблицаПлатежей.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого Док Из ДокОплаты Цикл
			
			СуммаОплаты = Мин(-Док.Сумма, Сотр.Сумма);
			
			Если СуммаОплаты > 0 Тогда
				Док.Сумма = Док.Сумма + СуммаОплаты;
				Сотр.Сумма = Сотр.Сумма - СуммаОплаты;
				
				НовСотр = ТабУдержания.Добавить();
				ЗаполнитьЗначенияСвойств(НовСотр, Сотр);
				
				НовСотр.ДокументОплаты = Док.РасчетныйДокумент;
				НовСотр.Сумма = СуммаОплаты;
				
				НовОплУд = ОплаченныеУдержания.Добавить();
				ЗаполнитьЗначенияСвойств(НовОплУд, Док);
				НовОплУд.Сумма = СуммаОплаты;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//Удалим учтенные суммы оплаты
	//и сумму авансового платежа в бюджет
	НомСтроки = 0;
	Пока НомСтроки < ТаблицаПлатежей.Количество() Цикл
		Если ТаблицаПлатежей[НомСтроки].Сумма = 0 Тогда
			ТаблицаПлатежей.Удалить(НомСтроки);
		ИначеЕсли (ТаблицаПлатежей[НомСтроки].Сумма < 0) И (ТаблицаПлатежей[НомСтроки].СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ) Тогда
			ТаблицаПлатежей.Удалить(НомСтроки);
		Иначе
			НомСтроки = НомСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	// Вернем суммы оплаты, зачтенные в оплату удержаний, в таблицу платежей
	Для Каждого ОплУд Из ОплаченныеУдержания Цикл
		Док = ТаблицаПлатежей.Добавить();
		ЗаполнитьЗначенияСвойств(Док, ОплУд);
	КонецЦикла;
	ТаблицаПлатежей.Свернуть("СчетУчета,Контрагент,РасчетныйДокумент", "Сумма");
	
	// Оплата труда
	СтруктураОтбора = Новый Структура("Контрагент");
	
	КолСотр = ТабОплатаТруда.Количество();
	Для НомерСотр = 0 по КолСотр - 1 Цикл
		
		Сотр = ТабОплатаТруда[НомерСотр];
		
		СтруктураОтбора.Контрагент = Сотр.ФизЛицо;
		ДокОплаты = ТаблицаПлатежей.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого Док Из ДокОплаты Цикл
			
			СуммаОплаты = Мин(-Док.Сумма, Сотр.Сумма);
			
			Если СуммаОплаты > 0 Тогда
				Док.Сумма = Док.Сумма + СуммаОплаты;
				Сотр.Сумма = Сотр.Сумма - СуммаОплаты;
				
				НовСотр = ТабОплатаТруда.Добавить();
				ЗаполнитьЗначенияСвойств(НовСотр, Сотр);
				
				НовСотр.ДокументОплаты = Док.РасчетныйДокумент;
				НовСотр.Сумма = СуммаОплаты;
			КонецЕсли;
		КонецЦикла;
		
		//уплата удержаний
		
		Для Каждого Док Из ТаблицаПлатежей Цикл
			
			Если НЕ ЗначениеЗаполнено(Док.СчетУчета) Тогда				
				Продолжить;
			КонецЕсли;
			
			Если Док.Сумма <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ВспомСтруктураОтбора = Новый Структура("ФизЛицо,СчетУчета,ДокументОплаты");
			ВспомСтруктураОтбора.ФизЛицо = Сотр.ФизЛицо;
			ВспомСтруктураОтбора.СчетУчета = Док.СчетУчета;
			ВспомСтруктураОтбора.ДокументОплаты = Док.РасчетныйДокумент;
			
			ДокОплатыУдержаний = ТабУдержания.НайтиСтроки(ВспомСтруктураОтбора);
			
			Для Каждого ДокУдержаний ИЗ ДокОплатыУдержаний Цикл
				
				СуммаОплаты = Мин(ДокУдержаний.Сумма, Док.Сумма, Сотр.Сумма);
				
				Если СуммаОплаты > 0 Тогда
					Док.Сумма = Док.Сумма - СуммаОплаты;
					Сотр.Сумма = Сотр.Сумма - СуммаОплаты;
					
					НовСотр = ТабОплатаТруда.Добавить();
					ЗаполнитьЗначенияСвойств(НовСотр, Сотр);
					
					НовСотр.ДокументОплаты = Док.РасчетныйДокумент;
					НовСотр.Сумма = СуммаОплаты;
					
					НовРасх = ТабРасходовПоРаботнику.Добавить();
					ЗаполнитьЗначенияСвойств(НовРасх, Сотр);
					НовРасх.ДокументОплаты = Док.РасчетныйДокумент;
					НовРасх.Сумма = СуммаОплаты;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Бюджет
	СтруктураОтбора = Новый Структура("СчетУчета");
	
	КолСотр = ТабБюджет.Количество();
	Для НомерСотр = 0 по КолСотр - 1 Цикл
		
		Сотр = ТабБюджет[НомерСотр];
		
		СтруктураОтбора.СчетУчета = Сотр.СчетУчета;
		ДокОплаты = ТаблицаПлатежей.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого Док Из ДокОплаты Цикл
			
			СуммаОплаты = Мин(-Док.Сумма, Сотр.Сумма);
			
			Если СуммаОплаты > 0 Тогда
				Док.Сумма = Док.Сумма + СуммаОплаты;
				Сотр.Сумма = Сотр.Сумма - СуммаОплаты;
				
				НовСотр = ТабБюджет.Добавить();
				ЗаполнитьЗначенияСвойств(НовСотр, Сотр);
				
				НовСотр.ДокументОплаты = Док.РасчетныйДокумент;
				НовСотр.Сумма = СуммаОплаты;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Проведение по регистру "Расходы на оплату труда".
	Для Каждого Сотр Из ТабОплатаТруда Цикл
		Если Сотр.Сумма = 0 Тогда Продолжить;
		КонецЕсли;
		
		Движение = ДокументОбъект.Движения.ИПРасходыНаОплатуТруда.Добавить();
		Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация = СтруктураШапкиДокумента.Организация;
		Движение.НоменклатурнаяГруппа = Сотр.НоменклатурнаяГруппа;
		Движение.ХарактерДеятельности = Сотр.ХарактерДеятельности;
		Движение.СтатьяЗатрат = Сотр.СтатьяЗатрат;
		Движение.ВидНачисленияУдержания = Сотр.ВидНачисленияУдержания;
		Движение.ФизЛицо = Сотр.ФизЛицо;
		Движение.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
		Движение.Сумма = Сотр.Сумма;
		
		Расчет = ДокументОбъект.Движения.ПрочиеРасчеты.ДобавитьПриход();
		Расчет.Период = СтруктураШапкиДокумента.Дата;
		Расчет.Организация = СтруктураШапкиДокумента.Организация;
		Расчет.Контрагент = Сотр.ФизЛицо;
		Расчет.Сумма = Сотр.Сумма;
		
		Если ЗначениеЗаполнено(Сотр.ДокументОплаты) Тогда
			Расчет.РасчетныйДокумент = Сотр.ДокументОплаты;
			Движение.ДокументОплаты = Сотр.ДокументОплаты;
			Движение.РеквизитыДокументаОплаты = РеквизитыДокументаОплаты(Сотр.ДокументОплаты);
			
		Иначе
			Расчет.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Удержания
	Для Каждого Сотр Из ТабУдержания Цикл
		Если Сотр.Сумма = 0 Тогда Продолжить;
		КонецЕсли;
		
		Движение = ДокументОбъект.Движения.ИПРасходыНаОплатуТруда.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация = СтруктураШапкиДокумента.Организация;
		Движение.НоменклатурнаяГруппа = Сотр.НоменклатурнаяГруппа;
		Движение.ХарактерДеятельности = Сотр.ХарактерДеятельности;
		Движение.СтатьяЗатрат = Сотр.СтатьяЗатрат;
		Движение.ВидНачисленияУдержания = Сотр.ВидНачисленияУдержания;
		Движение.ФизЛицо = Сотр.ФизЛицо;
		Движение.Контрагент = Сотр.Контрагент;
		Движение.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
		Движение.Сумма = Сотр.Сумма;
		
		Расчет = ДокументОбъект.Движения.ПрочиеРасчеты.ДобавитьПриход();
		Расчет.Период = СтруктураШапкиДокумента.Дата;
		Расчет.Организация = СтруктураШапкиДокумента.Организация;
		Расчет.СчетУчета = Сотр.СчетУчета;
		Расчет.Контрагент = Сотр.Контрагент;
		Расчет.Сумма = Сотр.Сумма;
		
		Если ЗначениеЗаполнено(Сотр.ДокументОплаты) Тогда
			Расчет.РасчетныйДокумент = Сотр.ДокументОплаты;
			Движение.ДокументОплаты = Сотр.ДокументОплаты;
			Движение.РеквизитыДокументаОплаты = РеквизитыДокументаОплаты(Сотр.ДокументОплаты);
			
		Иначе
			Расчет.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Бюджет
	Для Каждого Сотр Из ТабБюджет Цикл
		Если Сотр.Сумма = 0 Тогда Продолжить;
		КонецЕсли;
		
		Движение = ДокументОбъект.Движения.ИППрочиеРасходы.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация = СтруктураШапкиДокумента.Организация;
		Движение.НоменклатурнаяГруппа = Сотр.НоменклатурнаяГруппа;
		Движение.ХарактерДеятельности = Сотр.ХарактерДеятельности;
		Движение.СтатьяЗатрат = Сотр.СтатьяЗатрат;
		Движение.СчетУчета = Сотр.СчетУчета;
		Движение.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
		Движение.Сумма = Сотр.Сумма;
		
		Расчет = ДокументОбъект.Движения.ПрочиеРасчеты.ДобавитьПриход();
		Расчет.Период = СтруктураШапкиДокумента.Дата;
		Расчет.Организация = СтруктураШапкиДокумента.Организация;
		Расчет.СчетУчета = Сотр.СчетУчета;
		Расчет.Сумма = Сотр.Сумма;
		
		Если ЗначениеЗаполнено(Сотр.ДокументОплаты) Тогда
			Расчет.РасчетныйДокумент = Сотр.ДокументОплаты;
			Движение.ДокументОплаты = Сотр.ДокументОплаты;
			Движение.РеквизитыДокументаОплаты = РеквизитыДокументаОплаты(Сотр.ДокументОплаты);
			
		Иначе
			Расчет.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	//Удержания в разрезе сотрудников
	Для Каждого Сотр Из ТабРасходовПоРаботнику Цикл
		Если Сотр.Сумма = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Сотр.ДокументОплаты) Тогда
			Продолжить;
		КонецЕсли;
		
		Расчет = ДокументОбъект.Движения.ПрочиеРасчеты.ДобавитьРасход();
		Расчет.Период = СтруктураШапкиДокумента.Дата;
		Расчет.Организация = СтруктураШапкиДокумента.Организация;
		Расчет.СчетУчета = Сотр.СчетУчета;
		Расчет.Контрагент = Сотр.ФизЛицо;
		Расчет.Сумма = Сотр.Сумма;
		Расчет.РасчетныйДокумент = Сотр.ДокументОплаты;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеречислениеНалога(ДокументОбъект, СтруктураШапкиДокумента, ТаблицаАвансов) Экспорт
	
	ДатаОстатков = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РасчетныйДокумент ИЗ РегистрНакопления.ПрочиеРасчеты.Остатки(&ДатаОстатков, Организация = &Организация И СчетУчета = &СчетУчета)";
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетУчета", СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	
	СписокРасчетныхДокументов = ТаблицаРезультатаЗапроса.ВыгрузитьКолонку("РасчетныйДокумент");
	
	Запрос.УстановитьПараметр("СписокРасчетныхДокументов", СписокРасчетныхДокументов);
	Запрос.УстановитьПараметр("ДатаНач", ДатаПервогоДокумента(СписокРасчетныхДокументов));
	
	Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НДФЛ Тогда
		
		Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
			СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПРасходыНаОплатуТруда");
			ЗначенияБлокировки = Новый Соответствие;
			ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
			ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
			СтруктураПараметров.Вставить("ИсточникДанных", ТаблицаРезультатаЗапроса);
			ОписаниеИсточника = Новый Соответствие;
			ОписаниеИсточника.Вставить("РасчетныйДокумент", "РасчетныйДокумент");
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаОперации", СтруктураШапкиДокумента.Дата);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИПРасходыНаОплатуТрудаОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ИПРасходыНаОплатуТрудаОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
		|	ИПРасходыНаОплатуТрудаОбороты.СтатьяЗатрат КАК СтатьяЗатрат,
		|	ИПРасходыНаОплатуТрудаОбороты.РасчетныйДокумент,
		|	ИПРасходыНаОплатуТрудаОбороты.ФизЛицо КАК ФизЛицо,
		|	ИПРасходыНаОплатуТрудаОбороты.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
		|	ИПРасходыНаОплатуТрудаОбороты.СуммаОборот КАК Сумма
		|ИЗ
		|	РегистрНакопления.ИПРасходыНаОплатуТруда.Обороты(
		|			&ДатаНач,
		|			&ДатаОстатков,
		|			,
		|			РасчетныйДокумент В (&СписокРасчетныхДокументов)
		|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПРасходыНаОплатуТрудаОбороты
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИПРасходыНаОплатуТрудаОбороты.РасчетныйДокумент.Дата,
		|	ФизЛицо,
		|	ВидНачисленияУдержания,
		|	СтатьяЗатрат,
		|	НоменклатурнаяГруппа,
		|	ХарактерДеятельности";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ВидНачисленияУдержания <> Перечисления.ИПВидыНачисленийУдержаний.УдержаноНДФЛ Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ДокументОплаты Из ТаблицаАвансов Цикл
				СуммаОплаты = Мин(ДокументОплаты.Сумма, Выборка.Сумма);
				ДокументОплаты.Сумма = ДокументОплаты.Сумма - СуммаОплаты;
				
				Если СуммаОплаты > 0 Тогда
					// Сторнирование неоплаченных прочих расходов
					Движение = ДокументОбъект.Движения.ИПРасходыНаОплатуТруда.Добавить();
					Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
					Движение.Период = СтруктураШапкиДокумента.Дата;
					Движение.Организация = СтруктураШапкиДокумента.Организация;
					Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
					Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
					Движение.СтатьяЗатрат = Выборка.СтатьяЗатрат;
					Движение.ФизЛицо = Выборка.ФизЛицо;
					Движение.ВидНачисленияУдержания = Выборка.ВидНачисленияУдержания;
					Движение.РасчетныйДокумент = Выборка.РасчетныйДокумент;
					Движение.Сумма = -СуммаОплаты;
					
					// Отражение оплаченных прочих расходов
					Движение = ДокументОбъект.Движения.ИПРасходыНаОплатуТруда.Добавить();
					Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
					Движение.Период = СтруктураШапкиДокумента.Дата;
					Движение.Организация = СтруктураШапкиДокумента.Организация;
					Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
					Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
					Движение.СтатьяЗатрат = Выборка.СтатьяЗатрат;
					Движение.ФизЛицо = Выборка.ФизЛицо;
					Движение.ВидНачисленияУдержания = Выборка.ВидНачисленияУдержания;
					Движение.РасчетныйДокумент = Выборка.РасчетныйДокумент;
					Движение.ДокументОплаты = ДокументОплаты.ДокументОплаты;
					Движение.РеквизитыДокументаОплаты = ДокументОплаты.РеквизитыДокументаОплаты;
					Движение.Сумма = СуммаОплаты;
					
					// Погашение задолженности
					Расчет = ДокументОбъект.Движения.ПрочиеРасчеты.ДобавитьРасход();
					Расчет.Период = СтруктураШапкиДокумента.Дата;
					Расчет.Организация = СтруктураШапкиДокумента.Организация;
					Расчет.СчетУчета = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					Расчет.РасчетныйДокумент = Выборка.РасчетныйДокумент;
					Расчет.Сумма = СуммаОплаты;
					
					Расчет = ДокументОбъект.Движения.ПрочиеРасчеты.ДобавитьРасход();
					Расчет.Период = СтруктураШапкиДокумента.Дата;
					Расчет.Организация = СтруктураШапкиДокумента.Организация;
					Расчет.Контрагент = Выборка.ФизЛицо;
					Расчет.РасчетныйДокумент = Выборка.РасчетныйДокумент;
					Расчет.Сумма = СуммаОплаты;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Теперь надо признать оплаченной сумму начисления, которая была удержана
		ОплаченныеУдержания = ДокументОбъект.Движения.ИПРасходыНаОплатуТруда.Выгрузить();
		СтруктураОтбора = Новый Структура("НоменклатурнаяГруппа,ХарактерДеятельности,СтатьяЗатрат,ФизЛицо,РасчетныйДокумент");
				
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ВидНачисленияУдержания <> Перечисления.ИПВидыНачисленийУдержаний.НачисленоДругое
				И Выборка.ВидНачисленияУдержания <> Перечисления.ИПВидыНачисленийУдержаний.НачисленоНатуральныйДоход 
				И Выборка.ВидНачисленияУдержания <> Перечисления.ИПВидыНачисленийУдержаний.НачисленоПовременно
				И Выборка.ВидНачисленияУдержания <> Перечисления.ИПВидыНачисленийУдержаний.НачисленоСдельно Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Выборка);
			ДокументыОплаты = ОплаченныеУдержания.НайтиСтроки(СтруктураОтбора);
			Если ДокументыОплаты.Количество() < 1 Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОплаты = ДокументыОплаты[1];
			СуммаОплаты = Мин(ДокументОплаты.Сумма, Выборка.Сумма);
			ДокументОплаты.Сумма = ДокументОплаты.Сумма - СуммаОплаты;
			
			Если СуммаОплаты > 0 Тогда
				// Сторнирование неоплаченных прочих расходов
				Движение = ДокументОбъект.Движения.ИПРасходыНаОплатуТруда.Добавить();
				Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.Организация = СтруктураШапкиДокумента.Организация;
				Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
				Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
				Движение.СтатьяЗатрат = Выборка.СтатьяЗатрат;
				Движение.ФизЛицо = Выборка.ФизЛицо;
				Движение.ВидНачисленияУдержания = Выборка.ВидНачисленияУдержания;
				Движение.РасчетныйДокумент = Выборка.РасчетныйДокумент;
				Движение.Сумма = -СуммаОплаты;
				
				// Отражение оплаченных прочих расходов
				Движение = ДокументОбъект.Движения.ИПРасходыНаОплатуТруда.Добавить();
				Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.Организация = СтруктураШапкиДокумента.Организация;
				Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
				Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
				Движение.СтатьяЗатрат = Выборка.СтатьяЗатрат;
				Движение.ФизЛицо = Выборка.ФизЛицо;
				Движение.ВидНачисленияУдержания = Выборка.ВидНачисленияУдержания;
				Движение.РасчетныйДокумент = Выборка.РасчетныйДокумент;
				Движение.ДокументОплаты = ДокументОплаты.ДокументОплаты;
				Движение.РеквизитыДокументаОплаты = ДокументОплаты.РеквизитыДокументаОплаты;
				Движение.Сумма = СуммаОплаты;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
			СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИППрочиеРасходы");
			ЗначенияБлокировки = Новый Соответствие;
			ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
			ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
			ЗначенияБлокировки.Вставить("СчетУчета", СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
			СтруктураПараметров.Вставить("ИсточникДанных", ТаблицаРезультатаЗапроса);
			ОписаниеИсточника = Новый Соответствие;
			ОписаниеИсточника.Вставить("РасчетныйДокумент", "РасчетныйДокумент");
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
		КонецЕсли;

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИППрочиеРасходыОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ИППрочиеРасходыОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
		|	ИППрочиеРасходыОбороты.СтатьяЗатрат КАК СтатьяЗатрат,
		|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
		|	ИППрочиеРасходыОбороты.СуммаОборот КАК Сумма
		|ИЗ
		|	РегистрНакопления.ИППрочиеРасходы.Обороты(
		|			&ДатаНач,
		|			&ДатаОстатков,
		|			,
		|			РасчетныйДокумент В (&СписокРасчетныхДокументов)
		|				И ДокументОплаты = НЕОПРЕДЕЛЕНО
		|				И СчетУчета = &СчетУчета) КАК ИППрочиеРасходыОбороты
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИППрочиеРасходыОбороты.РасчетныйДокумент.Дата,
		|	СтатьяЗатрат,
		|	НоменклатурнаяГруппа,
		|	ХарактерДеятельности";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Для Каждого ДокументОплаты Из ТаблицаАвансов Цикл
				СуммаОплаты = Мин(ДокументОплаты.Сумма, Выборка.Сумма);
				ДокументОплаты.Сумма = ДокументОплаты.Сумма - СуммаОплаты;
				
				Если СуммаОплаты > 0 Тогда
					// Сторнирование неоплаченных прочих расходов
					Движение = ДокументОбъект.Движения.ИППрочиеРасходы.Добавить();
					Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
					Движение.Период = СтруктураШапкиДокумента.Дата;
					Движение.Организация = СтруктураШапкиДокумента.Организация;
					Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
					Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
					Движение.СтатьяЗатрат = Выборка.СтатьяЗатрат;
					Движение.РасчетныйДокумент = Выборка.РасчетныйДокумент;
					Движение.СчетУчета = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					Движение.Сумма = -СуммаОплаты;
					
					// Отражение оплаченных прочих расходов
					Движение = ДокументОбъект.Движения.ИППрочиеРасходы.Добавить();
					Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
					Движение.Период = СтруктураШапкиДокумента.Дата;
					Движение.Организация = СтруктураШапкиДокумента.Организация;
					Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
					Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
					Движение.СтатьяЗатрат = Выборка.СтатьяЗатрат;
					Движение.РасчетныйДокумент = Выборка.РасчетныйДокумент;
					Движение.ДокументОплаты = ДокументОплаты.ДокументОплаты;
					Движение.РеквизитыДокументаОплаты = ДокументОплаты.РеквизитыДокументаОплаты;
					Движение.СчетУчета = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					Движение.Сумма = СуммаОплаты;
					
					// Погашение задолженности
					Расчет = ДокументОбъект.Движения.ПрочиеРасчеты.ДобавитьРасход();
					Расчет.Период = СтруктураШапкиДокумента.Дата;
					Расчет.Организация = СтруктураШапкиДокумента.Организация;
					Расчет.СчетУчета = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					Расчет.РасчетныйДокумент = Выборка.РасчетныйДокумент;
					Расчет.Сумма = СуммаОплаты;
					
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
	// Отражение переплаты
	Для Каждого ДокументОплаты Из ТаблицаАвансов Цикл
		Если ДокументОплаты.Сумма > 0 Тогда
			Расчет = ДокументОбъект.Движения.ПрочиеРасчеты.ДобавитьРасход();
			Расчет.Период = СтруктураШапкиДокумента.Дата;
			Расчет.Организация = СтруктураШапкиДокумента.Организация;
			Расчет.СчетУчета = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			Расчет.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
			Расчет.Сумма = ДокументОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыплатаЗарплаты(ДокументОбъект, СтруктураШапкиДокумента, ТаблицаАвансов) Экспорт
	
	СписокРаботников = ТаблицаАвансов.ВыгрузитьКолонку("ФизЛицо");
	
	ДатаОстатков = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РасчетныйДокумент ИЗ РегистрНакопления.ПрочиеРасчеты.Остатки(&ДатаОстатков, Организация = &Организация И Контрагент В(&СписокРаботников))";
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокРаботников", СписокРаботников);
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПрочиеРасчеты");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("ИсточникДанных", ТаблицаАвансов);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("Контрагент", "ФизЛицо");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	КонецЕсли;

	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	
	СписокРасчетныхДокументов = ТаблицаРезультатаЗапроса.ВыгрузитьКолонку("РасчетныйДокумент");
	
	СписокВидовНачислений = Новый Массив;
	СписокВидовНачислений.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоДругое);
	СписокВидовНачислений.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоПовременно);
	СписокВидовНачислений.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоСдельно);
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПРасходыНаОплатуТруда");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СписокДляБлокировки = Новый ТаблицаЗначений;
		СписокДляБлокировки.Колонки.Добавить("ФизЛицо");
		СписокДляБлокировки.Колонки.Добавить("РасчетныйДокумент");
		Для Каждого СтрокаТаблицыФизЛиц Из ТаблицаАвансов Цикл
			Для Каждого СтрокаТаблицыДокументов Из ТаблицаРезультатаЗапроса Цикл
				НоваяСтрока = СписокДляБлокировки.Добавить();
				НоваяСтрока.ФизЛицо = СтрокаТаблицыФизЛиц.ФизЛицо;
				НоваяСтрока.РасчетныйДокумент = СтрокаТаблицыДокументов.РасчетныйДокумент;
			КонецЦикла;
		КонецЦикла;
		СтруктураПараметров.Вставить("ИсточникДанных", СписокДляБлокировки);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("ФизЛицо, РасчетныйДокумент", "ФизЛицо, РасчетныйДокумент");
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	КонецЕсли;

	Запрос.УстановитьПараметр("СписокРасчетныхДокументов", СписокРасчетныхДокументов);
	Запрос.УстановитьПараметр("ДатаНач", ДатаПервогоДокумента(СписокРасчетныхДокументов));
	Запрос.УстановитьПараметр("СписокВидовНачислений", СписокВидовНачислений);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОплатаТруда.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ОплатаТруда.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ОплатаТруда.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ОплатаТруда.РасчетныйДокумент,
	|	ОплатаТруда.СуммаОборот КАК Сумма,
	|	ОплатаТруда.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	ОплатаТруда.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	РегистрНакопления.ИПРасходыНаОплатуТруда.Обороты(
	|			&ДатаНач,
	|			&ДатаОстатков,
	|			,
	|			РасчетныйДокумент В (&СписокРасчетныхДокументов)
	|				И ФизЛицо В (&СписокРаботников)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО
	|				И ВидНачисленияУдержания В (&СписокВидовНачислений)) КАК ОплатаТруда
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОплатаТруда.РасчетныйДокумент.Дата,
	|	ФизЛицо,
	|	ВидНачисленияУдержания,
	|	СтатьяЗатрат,
	|	НоменклатурнаяГруппа,
	|	ХарактерДеятельности";
	
	ЗадолженностьРаботников = Запрос.Выполнить().Выгрузить();
	
	//суммы к выплате надо скорректировать на суммы к удержанию
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОплатаТруда.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ОплатаТруда.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ОплатаТруда.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ОплатаТруда.РасчетныйДокумент,
	|	ОплатаТруда.СуммаОборот КАК Сумма,
	|	ОплатаТруда.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	РегистрНакопления.ИПРасходыНаОплатуТруда.Обороты(
	|			&ДатаНач,
	|			&ДатаОстатков,
	|			,
	|			РасчетныйДокумент В (&СписокРасчетныхДокументов)
	|				И ФизЛицо В (&СписокРаботников)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО
	|				И (НЕ ВидНачисленияУдержания В (&СписокВидовНачислений))) КАК ОплатаТруда
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОплатаТруда.РасчетныйДокумент.Дата,
	|	ФизЛицо,
	|	СтатьяЗатрат,
	|	НоменклатурнаяГруппа,
	|	ХарактерДеятельности";
	
	УдержанияРаботников = Запрос.Выполнить().Выгрузить();
	СтруктураОтбора = Новый Структура("ФизЛицо,РасчетныйДокумент,СтатьяЗатрат,НоменклатурнаяГруппа,ХарактерДеятельности");
	Для Каждого СтрУдержаний ИЗ УдержанияРаботников Цикл
		Если СтрУдержаний.Сумма = 0 Тогда Продолжить КонецЕсли;
		
		СтруктураОтбора.ФизЛицо = СтрУдержаний.ФизЛицо;
		СтруктураОтбора.РасчетныйДокумент = СтрУдержаний.РасчетныйДокумент;
		СтруктураОтбора.СтатьяЗатрат = СтрУдержаний.СтатьяЗатрат;
		СтруктураОтбора.НоменклатурнаяГруппа = СтрУдержаний.НоменклатурнаяГруппа;
		СтруктураОтбора.ХарактерДеятельности = СтрУдержаний.ХарактерДеятельности;
		
		НачисленияРаботников = ЗадолженностьРаботников.НайтиСтроки(СтруктураОтбора);
		НачисленоВсего = 0;
		Для Каждого НачислениеРаботников Из НачисленияРаботников Цикл
			НачисленоВсего = НачисленоВсего + НачислениеРаботников.Сумма;
		КонецЦикла;
		
		Если НачисленоВсего <> 0 Тогда
			Для Каждого НачислениеРаботников Из НачисленияРаботников Цикл
				НачислениеРаботников.Сумма = НачислениеРаботников.Сумма - (НачислениеРаботников.Сумма / НачисленоВсего * СтрУдержаний.Сумма);
			КонецЦикла;			
		КонецЕсли;		
		
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("ФизЛицо");
	
	Для Каждого Сотр из ЗадолженностьРаботников Цикл
		Если Сотр.Сумма = 0 Тогда Продолжить КонецЕсли;
		
		СтруктураОтбора.ФизЛицо = Сотр.ФизЛицо;
		ДокументыОплаты = ТаблицаАвансов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ДокументОплаты Из ДокументыОплаты Цикл
			СуммаОплаты = Мин(ДокументОплаты.Сумма, Сотр.Сумма);
			ДокументОплаты.Сумма = ДокументОплаты.Сумма - СуммаОплаты;
			Сотр.Сумма = Сотр.Сумма - СуммаОплаты;
			
			Если СуммаОплаты > 0 Тогда
				// Сторнирование неоплаченных прочих расходов
				Движение = ДокументОбъект.Движения.ИПРасходыНаОплатуТруда.Добавить();
				Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.Организация = СтруктураШапкиДокумента.Организация;
				Движение.НоменклатурнаяГруппа = Сотр.НоменклатурнаяГруппа;
				Движение.ХарактерДеятельности = Сотр.ХарактерДеятельности;
				Движение.ВидНачисленияУдержания = Сотр.ВидНачисленияУдержания;
				Движение.ФизЛицо = Сотр.ФизЛицо;
				Движение.СтатьяЗатрат = Сотр.СтатьяЗатрат;
				Движение.РасчетныйДокумент = Сотр.РасчетныйДокумент;
				Движение.Сумма = -СуммаОплаты;
				
				// Отражение оплаченных прочих расходов
				Движение = ДокументОбъект.Движения.ИПРасходыНаОплатуТруда.Добавить();
				Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.Организация = СтруктураШапкиДокумента.Организация;
				Движение.НоменклатурнаяГруппа = Сотр.НоменклатурнаяГруппа;
				Движение.ХарактерДеятельности = Сотр.ХарактерДеятельности;
				Движение.ВидНачисленияУдержания = Сотр.ВидНачисленияУдержания;
				Движение.ФизЛицо = Сотр.ФизЛицо;
				Движение.СтатьяЗатрат = Сотр.СтатьяЗатрат;
				Движение.РасчетныйДокумент = Сотр.РасчетныйДокумент;
				Движение.ДокументОплаты = ДокументОплаты.ДокументОплаты;
				Движение.РеквизитыДокументаОплаты = ДокументОплаты.РеквизитыДокументаОплаты;
				Движение.Сумма = СуммаОплаты;
				
				// Погашение задолженности
				Расчет = ДокументОбъект.Движения.ПрочиеРасчеты.ДобавитьРасход();
				Расчет.Период = СтруктураШапкиДокумента.Дата;
				Расчет.Организация = СтруктураШапкиДокумента.Организация;
				Расчет.Контрагент = Сотр.ФизЛицо;
				Расчет.РасчетныйДокумент = Сотр.РасчетныйДокумент;
				Расчет.Сумма = СуммаОплаты;
				
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	// Отражение переплаты
	Для Каждого ДокументОплаты Из ТаблицаАвансов Цикл
		Если ДокументОплаты.Сумма > 0 Тогда
			Расчет = ДокументОбъект.Движения.ПрочиеРасчеты.ДобавитьРасход();
			Расчет.Период = СтруктураШапкиДокумента.Дата;
			Расчет.Организация = СтруктураШапкиДокумента.Организация;
			Расчет.Контрагент = ДокументОплаты.ФизЛицо;
			Расчет.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
			Расчет.Сумма = ДокументОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеречислениеПрочихУдержаний(ДокументОбъект, СтруктураШапкиДокумента, ТаблицаАвансов, Контрагент) Экспорт
	
	ДатаОстатков = Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РасчетныйДокумент ИЗ РегистрНакопления.ПрочиеРасчеты.Остатки(&ДатаОстатков, Организация = &Организация И СчетУчета = &СчетУчета)";
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетУчета", СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	
	СписокРасчетныхДокументов = ТаблицаРезультатаЗапроса.ВыгрузитьКолонку("РасчетныйДокумент");
	
	Запрос.УстановитьПараметр("СписокРасчетныхДокументов", СписокРасчетныхДокументов);
	Запрос.УстановитьПараметр("ДатаНач", ДатаПервогоДокумента(СписокРасчетныхДокументов));
	
	Запрос.УстановитьПараметр("ДатаОперации", СтруктураШапкиДокумента.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПРасходыНаОплатуТрудаОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПРасходыНаОплатуТрудаОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПРасходыНаОплатуТрудаОбороты.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ИПРасходыНаОплатуТрудаОбороты.РасчетныйДокумент,
	|	ИПРасходыНаОплатуТрудаОбороты.ФизЛицо КАК ФизЛицо,
	|	ИПРасходыНаОплатуТрудаОбороты.Контрагент КАК Контрагент,
	|	ИПРасходыНаОплатуТрудаОбороты.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	ИПРасходыНаОплатуТрудаОбороты.СуммаОборот КАК Сумма
	|ИЗ
	|	РегистрНакопления.ИПРасходыНаОплатуТруда.Обороты(
	|			&ДатаНач,
	|			&ДатаОстатков,
	|			,
	|			РасчетныйДокумент В (&СписокРасчетныхДокументов)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПРасходыНаОплатуТрудаОбороты
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИПРасходыНаОплатуТрудаОбороты.РасчетныйДокумент.Дата,
	|	ФизЛицо,
	|	ВидНачисленияУдержания,
	|	СтатьяЗатрат,
	|	НоменклатурнаяГруппа,
	|	ХарактерДеятельности";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидНачисленияУдержания = Перечисления.ИПВидыНачисленийУдержаний.УдержаноНДФЛ Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Контрагент <> Контрагент Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ДокументОплаты Из ТаблицаАвансов Цикл
			СуммаОплаты = Мин(ДокументОплаты.Сумма, Выборка.Сумма);
			ДокументОплаты.Сумма = ДокументОплаты.Сумма - СуммаОплаты;
			
			Если СуммаОплаты > 0 Тогда
				// Сторнирование неоплаченных прочих расходов
				Движение = ДокументОбъект.Движения.ИПРасходыНаОплатуТруда.Добавить();
				Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.Организация = СтруктураШапкиДокумента.Организация;
				Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
				Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
				Движение.СтатьяЗатрат = Выборка.СтатьяЗатрат;
				Движение.ФизЛицо = Выборка.ФизЛицо;
				Движение.Контрагент = Контрагент;
				Движение.ВидНачисленияУдержания = Выборка.ВидНачисленияУдержания;
				Движение.РасчетныйДокумент = Выборка.РасчетныйДокумент;
				Движение.Сумма = -СуммаОплаты;
				
				// Отражение оплаченных прочих расходов
				Движение = ДокументОбъект.Движения.ИПРасходыНаОплатуТруда.Добавить();
				Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.Организация = СтруктураШапкиДокумента.Организация;
				Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
				Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
				Движение.СтатьяЗатрат = Выборка.СтатьяЗатрат;
				Движение.ФизЛицо = Выборка.ФизЛицо;
				Движение.Контрагент = Контрагент;
				Движение.ВидНачисленияУдержания = Выборка.ВидНачисленияУдержания;
				Движение.РасчетныйДокумент = Выборка.РасчетныйДокумент;
				Движение.ДокументОплаты = ДокументОплаты.ДокументОплаты;
				Движение.РеквизитыДокументаОплаты = ДокументОплаты.РеквизитыДокументаОплаты;
				Движение.Сумма = СуммаОплаты;
				
				// Погашение задолженности
				Расчет = ДокументОбъект.Движения.ПрочиеРасчеты.ДобавитьРасход();
				Расчет.Период = СтруктураШапкиДокумента.Дата;
				Расчет.Организация = СтруктураШапкиДокумента.Организация;
				Расчет.СчетУчета = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				Расчет.Контрагент = Контрагент;
				Расчет.РасчетныйДокумент = Выборка.РасчетныйДокумент;
				Расчет.Сумма = СуммаОплаты;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Теперь надо признать оплаченной сумму начисления, которая была удержана
	ОплаченныеУдержания = ДокументОбъект.Движения.ИПРасходыНаОплатуТруда.Выгрузить();
	СтруктураОтбора = Новый Структура("НоменклатурнаяГруппа,ХарактерДеятельности,СтатьяЗатрат,ФизЛицо,РасчетныйДокумент");
	
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидНачисленияУдержания <> Перечисления.ИПВидыНачисленийУдержаний.НачисленоДругое
			И Выборка.ВидНачисленияУдержания <> Перечисления.ИПВидыНачисленийУдержаний.НачисленоНатуральныйДоход 
			И Выборка.ВидНачисленияУдержания <> Перечисления.ИПВидыНачисленийУдержаний.НачисленоПовременно
			И Выборка.ВидНачисленияУдержания <> Перечисления.ИПВидыНачисленийУдержаний.НачисленоСдельно Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Выборка);
		ДокументыОплаты = ОплаченныеУдержания.НайтиСтроки(СтруктураОтбора);
		Если ДокументыОплаты.Количество() < 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОплаты = ДокументыОплаты[1];
		СуммаОплаты = Мин(ДокументОплаты.Сумма, Выборка.Сумма);
		ДокументОплаты.Сумма = ДокументОплаты.Сумма - СуммаОплаты;
		
		Если СуммаОплаты > 0 Тогда
			// Сторнирование неоплаченных прочих расходов
			Движение = ДокументОбъект.Движения.ИПРасходыНаОплатуТруда.Добавить();
			Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.Организация = СтруктураШапкиДокумента.Организация;
			Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
			Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
			Движение.СтатьяЗатрат = Выборка.СтатьяЗатрат;
			Движение.ФизЛицо = Выборка.ФизЛицо;
			Движение.Контрагент = Контрагент;
			Движение.ВидНачисленияУдержания = Выборка.ВидНачисленияУдержания;
			Движение.РасчетныйДокумент = Выборка.РасчетныйДокумент;
			Движение.Сумма = -СуммаОплаты;
			
			// Отражение оплаченных прочих расходов
			Движение = ДокументОбъект.Движения.ИПРасходыНаОплатуТруда.Добавить();
			Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.Организация = СтруктураШапкиДокумента.Организация;
			Движение.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
			Движение.ХарактерДеятельности = Выборка.ХарактерДеятельности;
			Движение.СтатьяЗатрат = Выборка.СтатьяЗатрат;
			Движение.ФизЛицо = Выборка.ФизЛицо;
			Движение.Контрагент = Контрагент;
			Движение.ВидНачисленияУдержания = Выборка.ВидНачисленияУдержания;
			Движение.РасчетныйДокумент = Выборка.РасчетныйДокумент;
			Движение.ДокументОплаты = ДокументОплаты.ДокументОплаты;
			Движение.РеквизитыДокументаОплаты = ДокументОплаты.РеквизитыДокументаОплаты;
			Движение.Сумма = СуммаОплаты;
		КонецЕсли;
	КонецЦикла;
	
	// Отражение переплаты
	Для Каждого ДокументОплаты Из ТаблицаАвансов Цикл
		Если ДокументОплаты.Сумма > 0 Тогда
			Расчет = ДокументОбъект.Движения.ПрочиеРасчеты.ДобавитьРасход();
			Расчет.Период = СтруктураШапкиДокумента.Дата;
			Расчет.Организация = СтруктураШапкиДокумента.Организация;
			Расчет.СчетУчета = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			Расчет.Контрагент = Контрагент;
			Расчет.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
			Расчет.Сумма = ДокументОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
