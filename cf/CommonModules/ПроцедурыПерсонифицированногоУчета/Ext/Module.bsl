
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРЕОБРАЗОВАНИЯ ЗНАЧЕНИЯ

//Преобразует дату в формат, требуемый правилами подготовки документов в ПФ РФ 
Функция ДатаВФайл(Знач ДатавФайл) Экспорт
	Если ЗначениеЗаполнено(ДатавФайл) тогда
		Возврат """" + Формат(ДатавФайл, "ДФ='дд/ММ/гггг'") + """";
	Иначе
		Возврат """""";
	КонецЕсли;
КонецФункции	 

//Преобразует строку отчета, содержащую дату в вормате "ДД/ММ/ГГГГ", в значение типа "Дата"
Функция ДатаИзФайла(Знач ДатаИзФайла) Экспорт
	Число = Сред(ДатаИзФайла,1,2);
	Месяц = Сред(ДатаИзФайла,4,2);
	Год = Сред(ДатаИзФайла,7,4);
	Попытка
		Возврат Дата(Год,Месяц,Число);
	Исключение
		Возврат Дата('00010101');
	КонецПопытки;	
КонецФункции	 

//Преобразует строку в число
Функция ЧислоИзФайла(Знач ЧислоИзФайла) Экспорт
	Попытка
		Возврат Число(ЧислоИзФайла);
	Исключение
		Возврат 0;
	КонецПопытки;	
КонецФункции	

//Преобразует дату в формат, необходимый для печатных форм сведений в ПФР: "ДД" месяц ГГГГ
Функция ДатаВОтчет(Знач Дата) Экспорт
	Если (ТипЗнч(Дата) = Тип("Дата"))и(Дата <> Дата('00010101')) тогда
		Стр = Формат(Дата,"ДФ='дд ММММ гггг'") + " года";
		Возврат """"+Лев(Стр,2)+""""+Сред(Стр,3);
	КонецЕсли;	 
	Возврат "";
КонецФункции	

//Разбивает строку значений, разделенных запятыми, на элементы с учётом пар ограничительных символов
Функция РазложитьСтрокуФайлаСведенийПФР(Знач Стр,Разделитель = ",",Ограничитель = """") Экспорт

	//Первый проход: определяем позиции пар ограничителей
	ДлинаСтроки = СтрДлина(Стр);
	МассивПозицииОграничителя = Новый Массив();
	КопияСтр = Стр;
	ТекИндекс =0;
	Пока 1=1 цикл
		//поиск первого ограничетеля
		НачПоз = Найти(КопияСтр,Ограничитель);
		Если НачПоз =0 тогда 
			Прервать;
		КонецЕсли;	 

		ТекИндекс = ТекИндекс+НачПоз;
		МассивПозицииОграничителя.Добавить(ТекИндекс);
		КопияСтр = Сред(КопияСтр,НачПоз+1);//двигаемся вперед по строке

		//поиск второго ограничителя
		КонПоз = Найти(КопияСтр,Ограничитель);
		Если КонПоз = 0 тогда
			КонПоз = ДлинаСтроки +1;
		КонецЕсли;	 

		ТекИндекс = ТекИндекс+КонПоз;
		МассивПозицииОграничителя.Добавить(ТекИндекс);
		КопияСтр = Сред(КопияСтр,КонПоз+1);//двигаемся вперед по строке
	КонецЦикла;	
	КоличествоПарОграничителей = МассивПозицииОграничителя.Количество()/2;

	//Второй проход: раскладываем строку на элементы, разделенные символом "Разделитель"
	МассивСтрок = Новый Массив();
	ГоловаЭлемента = "";
	ТекИндекс =0;
	ДлинаРазделителя = СтрДлина(Разделитель);
	Пока 1=1 Цикл
		Поз = Найти(Стр,Разделитель);
		Если Поз=0 Тогда
			МассивСтрок.Добавить(ГоловаЭлемента+Стр);
			Прервать;
		КонецЕсли;

		//Если позиция разделителя находится внутри пары ограничителей, то данный разделитель не учитываем
		ВнутриОграничителей = Ложь;
		Для П=0 по КоличествоПарОграничителей-1 цикл
			АбсолютнаяПозиция = ТекИндекс + Поз;
			Если (АбсолютнаяПозиция>МассивПозицииОграничителя[П*2])и(АбсолютнаяПозиция<МассивПозицииОграничителя[П*2+1]) тогда
				ВнутриОграничителей = Истина;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	

		Если ВнутриОграничителей тогда
			ГоловаЭлемента = ГоловаЭлемента + Лев(Стр,Поз);
			Стр = Сред(Стр,Поз+1);
		Иначе		
			МассивСтрок.Добавить(ГоловаЭлемента+Лев(Стр,Поз-1));
			ГоловаЭлемента = "";
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЕсли;	 

		//Идём дальше по строке
		ТекИндекс = ТекИндекс+Поз;
	КонецЦикла;

	//Убираем ограничители
	Для К=0 по МассивСтрок.Количество()-1 цикл
		Стр = МассивСтрок[К];
		ДлинаСтр = СтрДлина(Стр);
		Если (Лев(Стр,1)=Ограничитель)и(Прав(Стр,1)=Ограничитель) тогда
			МассивСтрок[К] = Сред(Стр,2,ДлинаСтр-2);
		КонецЕсли;	
	КонецЦикла;	

	Возврат МассивСтрок;
КонецФункции	 

//Приводит стаж к нормальному виду, когда месяцев не более 12, дней не более 30
Процедура ПолучитьПриведенныйСтаж(Лет, Месяцев, Дней) Экспорт

	ДнейВГоду 		= 12 * 30;
	ВсегоДней 		= Лет*ДнейВГоду + Месяцев*30 + Дней;
	Лет 			= Цел(ВсегоДней / ДнейВГоду);
	ОстатокДней 	= ВсегоДней - Лет * ДнейВГоду;
	Месяцев			= Цел(ОстатокДней / 30);
	Дней			= ОстатокДней % 30;
КонецПроцедуры 

//Вычисляет разность между двумя датами: в годах, месяцах, днях
Процедура ПолучитьСтажЗаПериод(Знач ДатаОкончанияПериода, Знач ДатаНачалаПериода, Лет=0, Месяцев=0, Дней=0) Экспорт 

	Если ДатаОкончанияПериода >= ДатаНачалаПериода тогда

		Лет1		=	Год(ДатаОкончанияПериода);
		Месяцев1	=	Месяц(ДатаОкончанияПериода);

		Если НачалоДня(ДатаОкончанияПериода) <> НачалоДня(КонецМесяца(ДатаОкончанияПериода)) тогда
			Дней1		=	День(ДатаОкончанияПериода);
		иначе
			Дней1		=	30;//В каждом месяце ровно 30 дней
		КонецЕсли;	 

		Лет2		=	Год(ДатаНачалаПериода);
		Месяцев2	=	Месяц(ДатаНачалаПериода);
		Если НачалоДня(ДатаНачалаПериода) <> НачалоДня(КонецМесяца(ДатаНачалаПериода)) тогда
			Дней2		=	День(ДатаНачалаПериода);
		иначе
			Дней2		=	30;//В каждом месяце ровно 30 дней
		КонецЕсли;	 

		Лет		=	Лет1		-	Лет2;
		Месяцев	=	Месяцев1	-	Месяцев2;
		Дней	=	Дней1		-	Дней2 + 1;//1 день на увольнение
	Иначе
		Лет = 0; 
		Месяцев = 0;
		Дней = 0;
	КонецЕсли;	
КонецПроцедуры //ПолучитьСтажЗаПериод

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ВЫХОДНЫХ ФАЙЛОВ СВЕДЕНИЙ

//Вовращает номер пачки документа
Функция НомерПачкиДокумента(Знач НомерДокумента) Экспорт

	НомерПачки = "";

	НомерДокумента = СокрП(НомерДокумента);
	
	//Возьмём все цифры в правой части номера
	ДлинаНомера = СтрДлина(НомерДокумента);
	Для Н=1 по ДлинаНомера цикл
		Символ = Сред(НомерДокумента,ДлинаНомера-Н+1,1); 	
		Если (Символ>="0") и (Символ<="9") тогда
			НомерПачки = Символ+НомерПачки;
		Иначе
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	

	Если НомерПачки <> "" тогда
		Возврат Формат(Число(Прав(НомерПачки, 5)), "ЧГ=0"); 
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции	 

//Формирует имя выходного файла сведений в ПФ РФ
Функция ПолучитьИмяФайлаПФ(Документ, ГодПредставленияСведений, Знач ВыборкаПоШапкеДокумента = Неопределено) Экспорт

	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		
		ИмяТаблицы = Документ.Метаданные().Имя;
		
		// Формируем запрос и получаем необходимые данные
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокПерсучета.Номер,
		|	ДокПерсучета.НомерПачки,
		|	ДокПерсучета.Организация,
		|	ДокПерсучета.Организация.РегистрационныйНомерПФР,
		|	ДокПерсучета.ФорматФайла КАК ФорматФайла
		|ИЗ
		|	Документ." + ИмяТаблицы + " КАК ДокПерсучета
		|ГДЕ
		|	ДокПерсучета.Ссылка = &ДокументСсылка";
		
		Запрос.УстановитьПараметр("ДокументСсылка", Документ.Ссылка);
		ВыборкаПоШапкеДокумента = Запрос.Выполнить().Выбрать();
		
		Если Не ВыборкаПоШапкеДокумента.Следующий() Тогда
			Возврат "";
		КонецЕсли;	
	КонецЕсли;
	
	НомерПачки = СокрЛП(ВыборкаПоШапкеДокумента.НомерПачки);
	ФорматФайла = ВыборкаПоШапкеДокумента.ФорматФайла;
	
	РегНомерПФР = ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР;
	СтрНомПачки = Прав("100000"+НомерПачки,5);
	Если ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
		ИмяФайла = Прав(РегНомерПФР,6) + Лев(СтрНомПачки,2) + "." + Прав(СтрНомПачки,3);
	ИначеЕсли ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда // Версия 07.00 (XML)
		РегНомерПФР = СтрЗаменить(РегНомерПФР, " ", "");
		Если СтрДлина(РегНомерПФР) <> 14 Тогда
			РегНомерПФР = Лев(РегНомерПФР, 8) + "0" + Сред(РегНомерПФР, 9)
		КонецЕсли;
		
		// имя файла без подразделений.
		ИмяФайла = "PFR-700-Y-"+Формат(ГодПредставленияСведений, "ЧГ=0")+"-ORG-"+РегНомерПФР+
		"-DCK-"+СтрНомПачки+"-DPT-000000-DCK-00000.XML";
		
	Иначе 	
		ИмяФайла = "";
	КонецЕсли;
	Возврат ИмяФайла;

	
КонецФункции

//Возвращает заполненную "запись-заголовок" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьЗаголовок() Экспорт

	СтрокаВФайл = """ЗГЛВ"",""04.00""," 
	+ """1С:БУХГАЛТЕРИЯ""," // программа подготовки данных
	+ """" + Лев(Константы.НомерВерсииКонфигурации.Получить(),6)+"""";// Версия программы подготовки

	Возврат Врег(СтрокаВФайл+Символы.ПС);

КонецФункции

//Возвращает заполненную "запись о пачке" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьОПачке(НомерПачки,ДатаСоставленияОписи,ТипСведений,ВидКорректировки,РасчетныйПериодГод="0", Категория = "", ТУ = "", СтаховаяЧасть = 0, НакопительнаяЧасть = 0 ) Экспорт

	СтрокаВФайл = """ПАЧК""," 
	+ НомерПачки + ","	// Номер пачки, присвоенный работодателем
	+ """ОПИСЬ""" + "," // Тип пачки
	+ """ОП61""" + ","	// Тип описи
	+ ДатаВФайл(ДатаСоставленияОписи) + "," 
	+ "1,"				// Число типов документов в пачке
	+ Формат(РасчетныйПериодГод,"ЧГ=0")// Расчетный период:	год
	+ ",""" + Категория + """"	// Код категории застрахованного лица 
	+ ","""""			// Код дополнительного тарифа
	+ ",""" + ТУ + """"	// Территориальные условия (код) 
	+ ",""" + ТипСведений + """"		// Тип сведений
	+ ",""" + ВидКорректировки + """"	// Вид корректировки
	+ ",0"				// Отчетный период квартал
	+ ",0"				// Отчетный период год
	+ ",0.00"			// Всего начислено
	+ ",0.00"			// пособие по временной нетрудоспособности
	+ "," + Формат(СтаховаяЧасть, "ЧЦ=16; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0")// сумма начисленных страховых взносов на страховую часть
	+ "," + Формат(НакопительнаяЧасть, "ЧЦ=16; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0")// сумма начисленных страховых взносов на накопительную часть
	+ ",0.00"			// сумма начисленных страховых взносов по дополнительному тарифу
	+ ",0"				// Исходящий номер СПУ:	Код подразделения	
	+ ",0";				// Исходящий номер

	Возврат Врег(СтрокаВФайл+Символы.ПС);

КонецФункции

//Возвращает заполненную "запись о типе документа" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьОТипеДокумента(ТипДокумента,КоличествоДокументов) Экспорт

	СтрокаВФайл = """ТИПД"",""" 
	+ ТипДокумента + """," 
	+ КоличествоДокументов;

	Возврат Врег(СтрокаВФайл+Символы.ПС);

КонецФункции

//Возвращает заполненную "запись о работодателе" для выходного файла сведений в ПФ РФ
Функция ПолучитьЗаписьОРаботодателе(Организация, ДатаАктуальности, Отказ) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("ЭтоФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.ИНН,
	|	ВЫБОР
	|		КОГДА Организации.ЮрФизЛицо = &ЭтоФизЛицо
	|			ТОГДА ""0""
	|		ИНАЧЕ Организации.КПП
	|	КОНЕЦ КАК КПП,
	|	Организации.РегистрационныйНомерПФР,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	Организации.ЮрФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо = &Организация) КАК ФИОФизЛицСрезПоследних
	|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = Организации.Ссылка
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() тогда 
		
		Если Выборка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			
			// Для предпринимателя 
			
			Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Выборка.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для физического лица-работодателя неверно введен ИНН!", Отказ);
			КонецЕсли;
			
			Если Выборка.Фамилия <> NULL Тогда
				ФИО = СокрЛП(Выборка.Фамилия + " " + Выборка.Имя + " " + Выборка.Отчество); 
			Иначе	
				ФИО = СокрЛП(Выборка.НаименованиеОрганизации);
			КонецЕсли; 
			
			Если РегламентированнаяОтчетность.СтрокаНаписанаПоРусски(ФИО)=0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для физического лица-работодателя Фамилия, Имя, Отчество должно быть введены русскими буквами!", Отказ);
			КонецЕсли;
		
			Если Найти(ФИО, " ")=0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для физического лица-работодателя должны быть указаны, как минимум, фамилия и имя!", Отказ);
			КонецЕсли;
			
			НаименованиеОрганизации = ФИО;
			
		Иначе	
			
			// Для юрлица 
			Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Выборка.ИНН, Перечисления.ЮрФизЛицо.ЮрЛицо ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для организации неверно введен ИНН!", Отказ);
			КонецЕсли; 
			
			Если СтрДлина(Выборка.КПП)<>9 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для организации неверно введен КПП!", Отказ);
			КонецЕсли;
			
			Если СокрЛП(Выборка.НаименованиеОрганизации) = "" Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для организации должно быть указано сокращенное наименование организации!", Отказ);
			КонецЕсли;
			
			НаименованиеОрганизации = Выборка.НаименованиеОрганизации;
			
		КонецЕсли; 

		Если СокрЛП(Выборка.РегистрационныйНомерПФР) = "" Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для организации не указан регистрационный номер в ПФР !", Отказ);
		КонецЕсли; 
		
		СтрокаВФайл = """РБТД"",""РБТД"","  
		+ """" + Выборка.РегистрационныйНомерПФР + """," 
		+ Выборка.ИНН + ","  
		+ Выборка.КПП + ","  
		+ """" + СтрЗаменить(СокрЛП(Выборка.НаименованиеОрганизации), """", "'") + """";
		
		Возврат Врег(СтрокаВФайл+Символы.ПС);
		
	Иначе
		
		Отказ = Истина;
		Возврат "";  
		
	КонецЕсли;
	

КонецФункции

//Разбирает переданные данные о месте рождения и заполняет соответствующие поля записи, 
//выводимой в файл сведений для ПФ РФ 
Процедура ВписатьВЗаписьМестоРождения(Запись, Знач МестоРождения) Экспорт

	МестоРождения = РегламентированнаяОтчетность.РазложитьМестоРождения(МестоРождения);
	Запись.ТипМестаРождения = ?(МестоРождения.Особое = 1, "ОСОБОЕ", "СТАНДАРТ");
	Запись.МестоРожденияНаселенныйПункт = МестоРождения.НаселенныйПункт;
	Запись.МестоРожденияРайон = МестоРождения.Район;
	Запись.МестоРожденияОбласть = МестоРождения.Область;
	Запись.МестоРожденияСтрана = МестоРождения.Страна;

КонецПроцедуры

//Разбирает переданные данные о документе, удостоверяющем личность, и заполняет 
//соответствующие поля записи, выводимой в файл сведений для ПФ РФ 
Процедура ВписатьВЗаписьДокумент(Запись, ТекущиеДанные) Экспорт

	СерииДокумента = РегламентированнаяОтчетность.РазложитьСериюДокумента(ТекущиеДанные.ДокументВид,ТекущиеДанные.ДокументСерия);
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументВид) тогда
		Запись.ДокументВид = ТекущиеДанные.ДокументВидКодПФР;		
	иначе
		Запись.ДокументВид = "ПРОЧЕЕ";		
	КонецЕсли;	
	Запись.ДокументНаименование = ТекущиеДанные.ДокументВидКодПФР;
	Запись.ДокументСерияРимскиеЦифры = СерииДокумента.Часть1;
	Запись.ДокументСерияРусскиеБуквы = СерииДокумента.Часть2;
	Запись.ДокументНомер = ТекущиеДанные.ДокументНомер;
	Запись.ДокументДатаВыдачи = ТекущиеДанные.ДокументДатаВыдачи;
	Запись.ДокументКемВыдан = СтрЗаменить(ТекущиеДанные.ДокументКемВыдан, """", "");

КонецПроцедуры

Функция ПолучитьПорядокВключенияПериодаВСтраховойСтаж(ВидПособияСоциальногоСтрахования = Неопределено, ВидВремени = Неопределено, ОбозначениеВТабелеУчетаРабочегоВремени = Неопределено) Экспорт 
	
	ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ПустаяСсылка();
	
	Если ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.Декрет;
	ИначеЕсли ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.Дети;
	ИначеЕсли ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность
		ИЛИ ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай
		ИЛИ ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ВременнаяНетрудоспособность;
	ИначеЕсли ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами
		ИЛИ ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж;
	ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ОтработанноеВПределахНормы Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	ИначеЕсли ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныеВыходныеДниОплачиваемые
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	ИначеЕсли ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Простой
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботодателя
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Командировка Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж;
	ИначеЕсли ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя 
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты;
	ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ЦелодневноеНеотработанное Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.НеВключаетсяВСтраховойСтаж;
	ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ЧасовоеНеотработанное 
		ИЛИ ВидВремени = Перечисления.ВидыВремени.ОтработанноеСверхНормы 
		ИЛИ ВидВремени = Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы 
		ИЛИ ВидВремени = Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы Тогда
		ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ПустаяСсылка();
	КонецЕсли;
	
    Возврат ВидСтажаСЗВ4
	
КонецФункции // ПолучитьПорядокВключенияПериодаВСтраховойСтаж()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРЕДОСТАВЛЕНИЯ ПОЛЬЗОВАТЕЛЯМ ФАЙЛОВ СВЕДЕНИЙ
//

#Если Клиент Тогда

//Предоставляет сформированный файл сведений документа для просмотра
Процедура ПоказатьФайлДокумента(ДокументОбъект, ЗаголовокОкна) Экспорт

	Вопрос = "Перед формированием файла необходимо записать документ. Записать?";
	Если НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,Вопрос) тогда
		Возврат;
	КонецЕсли;	 

	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ДокументОбъект,ЕстьОшибки);
	Если ЕстьОшибки тогда
		Возврат;
	КонецЕсли;	 
	
	//Если ТипЗнч(ТекстФайла) = Тип("Строка") Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстФайла); 
		ТекстовыйДокумент.Показать(ЗаголовокОкна, "Файл сведений");
	//Иначе //тип("ТекстовыйДокумент")	
	//	ТекстФайла.Показать(ЗаголовокОкна, "Файл сведений");
	//КонецЕсли; 
	
КонецПроцедуры	 

//Записывает файл сведений документа в каталог, указанный пользователем
Процедура ЗаписатьФайлДокументаНаДискету(ДокументОбъект, ТекущийПользователь, ИмяФайла, Знач КодировкаФайла = Неопределено) Экспорт
	
	Вопрос = "Перед формированием файла необходимо записать документ. Записать?";
	Если НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,Вопрос) тогда
		Возврат;
	КонецЕсли;

	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ДокументОбъект,ЕстьОшибки);
	Если ЕстьОшибки тогда
		Возврат;
	КонецЕсли;

	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);

	Длг.Каталог = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнойКаталогФайлов");
	Длг.Заголовок = "Укажите каталог";

	Если Длг.Выбрать() Тогда
		ИмяФайла = Длг.Каталог+"\" + ИмяФайла;
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстФайла); 
		Если КодировкаФайла = Неопределено Тогда
			КодировкаФайла = КодировкаТекста.OEM;
		КонецЕсли;
		ТекстовыйДокумент.Записать(ИмяФайла,КодировкаФайла);
		Предупреждение("Файл-пачка записан под именем: "+ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры	

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ФАЙЛА ИНДИВИДУАЛЬНЫХ СВЕДЕНИЙ ПФР XML ФОРМАТ 7.0 


/////////////////////////////////////
// XML STREAM
/////////////////////////////////////

// Создает и возвращает объект ЗаписьXML, для создания XML документа
Функция СоздатьПотокXML(ИмяФайла = Неопределено) Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	
	ПотокXML.УстановитьСтроку("windows-1251");
	ПотокXML.Отступ = Истина;
	Если ИмяФайла <> Неопределено Тогда
		ПотокXML.ОткрытьФайл(ИмяФайла, "windows-1251");
	КонецЕсли;
	
	ПотокXML.ЗаписатьОбъявлениеXML();
	
	Возврат ПотокXML;
	
КонецФункции

// Сохраняет документ XML  на диск и закрывает запись XML
Функция ЗаписатьПотокXML(ПотокXML) Экспорт
	
	Возврат ПотокXML.Закрыть();
	
КонецФункции

/////////////////////////////////////
// XML TREE
/////////////////////////////////////

// Возвращает Истина если строка дерева представляет атрибуты XML узла
Функция СтрокаСАтрибутами(СтрокаДереваXML) Экспорт
	
	Возврат СтрокаДереваXML.Имя = "АтрибутыXMLУзла";
	
КонецФункции

// Ищет и возвращает атрибут XML узла по имени
Функция НайтиАтрибуты(СтрокаДереваXML) Экспорт
	
	Возврат СтрокаДереваXML.Строки.Найти("АтрибутыXMLУзла", "Имя", Ложь);
	
КонецФункции


// КОМПОЗИЦИЯ ДЕРЕВА

// Создает объект дерево значений, представляющее XML файл
Функция СоздатьДеревоXML() Экспорт
	
	НовоеДеревоXML = Новый ДеревоЗначений;
	НовоеДеревоXML.Колонки.Добавить("Имя",      Новый ОписаниеТипов("Строка"));
	НовоеДеревоXML.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	Возврат НовоеДеревоXML;
	
КонецФункции

// Добавляет узел в дерево XML, устанавливая его атрибуты
Функция ДобавитьУзелВДеревоXML(Ветка, Имя, Значение, СписокАтрибутов = Неопределено) Экспорт
	
	НовыйУзел = Ветка.Строки.Добавить();
	НовыйУзел.Имя = Имя;
	НовыйУзел.Значение = Значение;
	
	Если СписокАтрибутов <> Неопределено Тогда
		ВеткаАтрибутов = НовыйУзел.Строки.Добавить();
		ВеткаАтрибутов.Имя = "АтрибутыXMLУзла";
		ВеткаАтрибутов.Значение = Неопределено;
		
		Для Каждого ЭлементСпискаАтрибутов Из СписокАтрибутов Цикл
			ЛистАтрибутов = ВеткаАтрибутов.Строки.Добавить();
			ЛистАтрибутов.Имя = ЭлементСпискаАтрибутов.Ключ;
			// доделать до правильного преобразования
			ЛистАтрибутов.Значение = Строка(ЭлементСпискаАтрибутов.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыйУзел;
		
КонецФункции

// ИМПОРТ / ЭКСПОРТ ДЕРЕВА

// записывает значения из дерева значение в поток связянный с файлом XML
Процедура ЗаписатьУзелДереваXMLВXMLдляПФР(СтрокаДерева, ПотокXML, ПрефиксПространстваИмен = Неопределено, URIПространстваИмен = Неопределено) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		
		Если НЕ ПустаяСтрока(СтрокаДерева.Имя) Тогда
			
			ПотокXML.ЗаписатьНачалоЭлемента(СтрЗаменить(СтрокаДерева.Имя,"__","-"));
			Если ПрефиксПространстваИмен <> Неопределено И URIПространстваИмен <> Неопределено Тогда
				ПотокXML.ЗаписатьСоответствиеПространстваИмен(ПрефиксПространстваИмен, URIПространстваИмен);
			КонецЕсли;
			СписокАтрибутов = НайтиАтрибуты(СтрокаДерева);
			
			Если СписокАтрибутов <> Неопределено Тогда
				Для каждого СтрокаСАтрибутом Из СписокАтрибутов.Строки Цикл
					ПотокXML.ЗаписатьАтрибут(СтрокаСАтрибутом.Имя, СтрокаСАтрибутом.Значение);
				КонецЦикла;
			КонецЕсли;
			
			ПотокXML.ЗаписатьТекст(?(СтрокаДерева.Значение = "00.00.0000", "", СтрокаДерева.Значение));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Лист из СтрокаДерева.Строки Цикл
		Если СтрокаСАтрибутами(Лист) Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьУзелДереваXMLВXMLдляПФР(Лист, ПотокXML, ПрефиксПространстваИмен, URIПространстваИмен);
	КонецЦикла;
	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		Если НЕ ПустаяСтрока(СтрокаДерева.Имя) Тогда
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// добавляет реквизит в дерево значений, представляющее XML файл
Процедура ДобавитьИнформациюВДерево(ДеревоВыгрузки, НаборЗаписей) Экспорт
	
	ПустаяДата = Дата(1,1,1);
	
	Для каждого ЭлементНабора Из НаборЗаписей Цикл
		ИмяЗаписи = ЭлементНабора.Ключ;
		Запись = ЭлементНабора.Значение;
		ТипДанных = Запись.ТипДанных;
		Если ТипДанных = "КОНСТАНТА" тогда
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение)
			
		ИначеЕсли ТипДанных = "ЧИСЛО" тогда
			
			// для проверок
			//Запись.Размер 
			//Запись.РазрядностьДробнойЧасти
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Формат(Запись.Значение,"ЧЦ=" + Запись.Размер + "; ЧДЦ=" + Запись.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0"))
			
		ИначеЕсли ТипДанных = "СТРОКА" тогда
			
			// для проверок
			//Запись.Размер 
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение)
			
		ИначеЕсли ТипДанных = "ДАТА" тогда
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, ?(Запись.Значение = ПустаяДата,"00.00.0000", Формат(Запись.Значение,"ДФ=dd.MM.yyyy")))
			
		ИначеЕсли ТипДанных = "ТАБЛИЦА" тогда	
			
			ПроверятьНеобязательныеПоля = Ложь;
			Для каждого Поле Из Запись.Поля Цикл
				ПроверятьНеобязательныеПоля = Поле.ЭлементНеОбязателен;
				Если ПроверятьНеобязательныеПоля Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
			Для каждого СтрокаТЗ Из Запись.Значение Цикл
				
				ВеткаСтрокиТЗ = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "");
				ВыводитьНеобязательныеПоля = Ложь;
				Если ПроверятьНеобязательныеПоля Тогда
					Для каждого Поле Из Запись.Поля Цикл
						Если Поле.ЭлементНеОбязателен Тогда
							ВыводитьНеобязательныеПоля = ЗначениеЗаполнено(СтрокаТЗ[Поле.ИмяПоля]);
							Если ВыводитьНеобязательныеПоля Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли;
				
				Для каждого Поле Из Запись.Поля Цикл
					
					Если Поле.ЭлементНеОбязателен И Не ВыводитьНеобязательныеПоля Тогда
						Продолжить;
					КонецЕсли;
					
					Данные = СтрокаТЗ[Поле.ИмяПоля];
					
					Если Поле.ТипДанных = "ЧИСЛО" Тогда
						// для проверок
						//Поле.Размер, Поле.РазрядностьДробнойЧасти
						Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
					ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
						// для проверок
						//Поле.Размер
					ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
						Если Данные = ПустаяДата Тогда
							Данные = ""
						Иначе
							Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						КонецЕсли;
					КонецЕсли;
					
					ДобавитьУзелВДеревоXML(ВеткаСтрокиТЗ, Поле.ИмяПоля, Данные)
					
				КонецЦикла; 
				
			КонецЦикла; 
			
		ИначеЕсли ТипДанных = "СТРУКТУРА" тогда	
			
			ВеткаСтруктуры = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "");
			Для каждого Поле Из Запись.Поля Цикл
				
				Данные = Запись.Значение[Поле.ИмяПоля];
				
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					// для проверок
					//Поле.Размер, Поле.РазрядностьДробнойЧасти
					Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
				ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
					// для проверок
					//Поле.Размер
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					Если Данные = ПустаяДата Тогда
						Данные = ""
					Иначе
						Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
					КонецЕсли;
				КонецЕсли;
				
				ДобавитьУзелВДеревоXML(ВеткаСтруктуры, Поле.ИмяПоля, Данные)
				
			КонецЦикла; 
			
		ИначеЕсли ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, ""), Запись.Значение)
			
		КонецЕсли;	
		
	КонецЦикла; 
	
КонецПроцедуры

// Возвращаент копию переданной структуры данных.
Функция СкопироватьСтруктуруДанных(КоллекцияИсходная) Экспорт
	
	ТипЗначения = ТипЗнч(КоллекцияИсходная);
	Если ТипЗначения=Тип("Структура") Тогда
		
		КоллекцияКопия=Новый Структура;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Вставить(Элемент.Ключ,СкопироватьСтруктуруДанных(Элемент.Значение));
			
		КонецЦикла;
		
		Возврат КоллекцияКопия; 
		
	ИначеЕсли ТипЗначения=Тип("ТаблицаЗначений") Тогда
		
		Возврат КоллекцияИсходная.Скопировать();
		
	ИначеЕсли ТипЗначения=Тип("Массив") Тогда
		
		КоллекцияКопия=Новый Массив;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Добавить(СкопироватьСтруктуруДанных(Элемент));
			
		КонецЦикла;
		
		Возврат КоллекцияКопия;
		
	ИначеЕсли ТипЗначения=Тип("Соответствие") Тогда
		
		КоллекцияКопия=Новый Соответствие;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Вставить(Элемент.Ключ,СкопироватьСтруктуруДанных(Элемент.Значение));
			
		КонецЦикла;
		
		Возврат КоллекцияКопия;
		
	Иначе
		
		Возврат КоллекцияИсходная
		
	КонецЕсли;
	
КонецФункции

//Возвращает формат записи файла сведений в виде таблицы с именами и типами полей
Функция ПолучитьФорматЗаписиПФР(Знач МакетФормата, Знач ИмяЗаписи) 

	ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
	ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипДанных",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	ТаблицаФормаЗаписи.Колонки.Добавить("Размер",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("ЭлементНеОбязателен");

	ОбластьФорматЗаписи = МакетФормата.ПолучитьОбласть(ИмяЗаписи);

	Для НСтр = 1 По ОбластьФорматЗаписи.ВысотаТаблицы Цикл
		
		//имя поля хранится в 4-ой колонке
		ИмяПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 4).Текст);
		Если ИмяПоля <> "" тогда

			НовоеПоле = ТаблицаФормаЗаписи.Добавить();
			НовоеПоле.ИмяПоля = СокрЛП(ИмяПоля);
			//тип данных хранится во 2-ой колонке	
			НовоеПоле.ТипДанных = ВРЕГ(СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 2).Текст));
			//размер поля хранится в 3-ей колонке	
			СтрРазмерПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 3).Текст);
			//Если указан размер поля, сохраним его
			Если СтрРазмерПоля<>"" тогда
				ПозицияТочки = Найти(СтрРазмерПоля,".");
				Если ПозицияТочки<>0 тогда
					НовоеПоле.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
					НовоеПоле.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
				Иначе	
					НовоеПоле.Размер = Число(СтрРазмерПоля);
					НовоеПоле.РазрядностьДробнойЧасти = 0;
				КонецЕсли;	 
			КонецЕсли;	 
			//Признак обязательности элемента хранится в 5-й колонке	
			НовоеПоле.ЭлементНеОбязателен = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 5).Текст) = "Не обязательно";
			
		КонецЕсли;	 

	КонецЦикла;

	Возврат ТаблицаФормаЗаписи;
КонецФункции	

// Загружает формат набора записей файла сведений о доходах физлиц из заданного табличного документа
Функция ЗагрузитьФорматНабораЗаписейдляПФР(Знач МакетФормата, Знач ИмяНабораЗаписей, НомерВыбираемогоЭлемента = 1) Экспорт

	ФорматНабора = Новый Структура();
	
	ОбластьНабораЗаписей = МакетФормата.ПолучитьОбласть(ИмяНабораЗаписей);
	
	Для НСтр = 1 По ОбластьНабораЗаписей.ВысотаТаблицы Цикл
		
		ФорматЗаписи = Новый Структура("ТипДанных, Размер, РазрядностьДробнойЧасти, Поля, Значение, ЭлементНеОбязателен");
		
		// имя записи хранится в 4 колонке
		ИмяЗаписи =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 4).Текст);
		
		// тип данных хранится во 2 колонке
		ТипДанных = Врег(СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 2).Текст));
		
		//Признак обязательности элемента хранится в 5-й колонке	
		ЭлементНеОбязателен = Врег(СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 5).Текст)) = "НЕ ОБЯЗАТЕЛЬНО";
			
		Если ТипДанных = "" Тогда// Если тип данных не задан, то встретили строку - группировку
			Продолжить;
		КонецЕсли; 
		
		ПозицияРазделителя = Найти(ТипДанных,"/");
		Если ПозицияРазделителя <> 0 Тогда
			ТипДанных = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ТипДанных, "/")[НомерВыбираемогоЭлемента-1];
		КонецЕсли;
		
		ПозицияРазделителя = Найти(ИмяЗаписи,"/");
		Если ПозицияРазделителя <> 0 Тогда
			ИмяЗаписи = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1];
		КонецЕсли;
		
		
		ФорматЗаписи.ТипДанных =  ТипДанных;
		ФорматЗаписи.ЭлементНеОбязателен = ЭлементНеОбязателен;
		// размер хранится в 3 колонке
		СтрРазмерПоля =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 3).Текст);
		
		Если ФорматЗаписи.ТипДанных = "КОНСТАНТА" тогда
			
			// в колонке "размер" должно указываться значение константы
			ФорматЗаписи.Значение = СтрРазмерПоля;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ЧИСЛО" тогда
			
			ПозицияТочки = Найти(СтрРазмерПоля,".");
			Если ПозицияТочки<>0 тогда
				ФорматЗаписи.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
				ФорматЗаписи.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
			Иначе	
				ФорматЗаписи.Размер = Число(СтрРазмерПоля);
				ФорматЗаписи.РазрядностьДробнойЧасти = 0;
			КонецЕсли;	 
			
			ФорматЗаписи.Значение = 0;

		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРОКА" тогда
			
			ФорматЗаписи.Размер = Число(СтрРазмерПоля);
			
			ФорматЗаписи.Значение = "";
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ДАТА" тогда
			
			ФорматЗаписи.Значение = Дата('00010101');
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ТАБЛИЦА" тогда	
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ПолучитьФорматЗаписиПФР(МакетФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый ТаблицаЗначений;
			
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ОписаниеТиповПоля = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(Поле.Размер, Поле.РазрядностьДробнойЧасти);
				ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
					ОписаниеТиповПоля = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(Поле.Размер);
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					ОписаниеТиповПоля = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
				КонецЕсли; 
				ФорматЗаписи.Значение.Колонки.Добавить(Поле.ИмяПоля, ОписаниеТиповПоля );
			
			КонецЦикла; 
			
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРУКТУРА" тогда	
			
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяЗаписи = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ПозицияРазделителя = Найти(СтрРазмерПоля,"/");
			Если ПозицияРазделителя <> 0 Тогда
				СтрРазмерПоля = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрРазмерПоля, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ПолучитьФорматЗаписиПФР(МакетФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый Структура;
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				ПустоеЗначениеПоля = Неопределено;
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ПустоеЗначениеПоля = 0;
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					ПустоеЗначениеПоля = Дата('00010101');
                Иначе
					ПустоеЗначениеПоля = "";
				КонецЕсли; 
				
				ФорматЗаписи.Значение.Вставить(Поле.ИмяПоля, ПустоеЗначениеПоля);
				
			КонецЦикла; 
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			// Имя набора записей хранится в третьей колонке
			ИмяНабора = СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 3).Текст);
			ПозицияРазделителя = Найти(ИмяНабора,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяНабора = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяНабора, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяЗаписи = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ФорматЗаписи.Значение = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, ИмяНабора, НомерВыбираемогоЭлемента);
			
		КонецЕсли;	
		
		ФорматНабора.Вставить(ИмяЗаписи, ФорматЗаписи);
		
	КонецЦикла;	
	
	Возврат ФорматНабора;
	
КонецФункции // ЗагрузитьФорматНабораЗаписей()

// Процедура устанавливает заголовочные параметры файла выгрузки XML формата 07.00
//
Процедура ЗаполнитьИмяИЗаголовокФайла(УзелПФР, МакетФормата, ИмяФайла) Экспорт
	
	// добавляем реквизит ИмяФайла
	НаборЗаписейИмяФайла = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ИмяФайла");
	НаборЗаписейИмяФайла.ИмяФайла.Значение = ИмяФайла;
	ДобавитьИнформациюВДерево(УзелПФР, НаборЗаписейИмяФайла);
	
	// Добавляем Реквизит заголовок файла
	НаборЗаписейЗаголовокФайла = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ЗаголовокФайла");
	НаборЗаписейПрограммаПодготовкиДанных = НаборЗаписейЗаголовокФайла.ПрограммаПодготовкиДанных.Значение;
	НаборЗаписейПрограммаПодготовкиДанных.Версия = РегламентированнаяОтчетность.РедакцияКонфигурации();
	НаборЗаписейПрограммаПодготовкиДанных.НазваниеПрограммы = РегламентированнаяОтчетность.ИДКонфигурации();
	ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПФР, "ЗаголовокФайла", ""), НаборЗаписейЗаголовокФайла); 
	
КонецПроцедуры // ЗаполнитьИмяИЗаголовокФайла()

// Функция устанавливает значения реквизитов XML узла ВходящаяОпись
//
Функция ЗаполнитьНаборЗаписейВходящаяОпись(УзелПФР, МакетФормата, ТипДокумента, ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерПачки, НомерДокументаВПачке, УзелПачкаСЗВ4 = Неопределено, НаборЗаписейИтогоСуммаВзносов = Неопределено, ТегВходящейОписи = "ВХОДЯЩАЯ_ОПИСЬ") Экспорт
	
	// устанавливаем значение номер пачки
	
	НаборЗаписейВходящаяОпись = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, ТегВходящейОписи, 1);
	НаборЗаписейВходящаяОпись.НомерПачки.Значение.Основной = НомерПачки;
	
	НаборЗаписейВходящаяОпись.НомерВПачке.Значение = НомерДокументаВПачке;
	
	// Составитель пачки
	НаборЗаписейСоставительПачки = НаборЗаписейВходящаяОпись.СоставительПачки.Значение;
	ЗаполнитьСоставительПачки(НаборЗаписейСоставительПачки, ВыборкаПоШапкеДокумента);
	
	НаборЗаписейСоставДокументов = НаборЗаписейВходящаяОпись.СоставДокументов.Значение;
	НаборЗаписейСоставДокументов.Количество.Значение = 1;
	
	НаборЗаписейНаличиеДокументов = НаборЗаписейСоставДокументов.НаличиеДокументов.Значение;
	НаборЗаписейНаличиеДокументов.ТипДокумента = ТипДокумента;
	НаборЗаписейНаличиеДокументов.Количество = КоличествоДокументов;
	
	НаборЗаписейВходящаяОпись.ДатаСоставления.Значение = ВыборкаПоШапкеДокумента.Дата;
	
	Если ТипДокумента = "ИС_СЗВ-4-1" Или ТипДокумента = "ИС_СЗВ-4-2" Тогда
		
		НаборЗаписейПачкаСЗВ4 = НаборЗаписейВходящаяОпись.ПачкаСЗВ4.Значение;
		НаборЗаписейПачкаСЗВ4.РасчетныйПериод.Значение = ВыборкаПоШапкеДокумента.Год;
		НаборЗаписейПачкаСЗВ4.ТарифСтраховыхВзносов.Значение.КодКатегории = ВыборкаПоШапкеДокумента.КодОсновногоТарифа;
		Если ВыборкаПоШапкеДокумента.КодОсновногоТарифа = "НР" Тогда
			НаборЗаписейПачкаСЗВ4.ТарифСтраховыхВзносов.Значение.НазваниеКатегории = "НАЕМ/РАБОТНИК";
		ИначеЕсли ВыборкаПоШапкеДокумента.КодОсновногоТарифа = "СХ" Тогда
			НаборЗаписейПачкаСЗВ4.ТарифСтраховыхВзносов.Значение.НазваниеКатегории = "С/Х ОРГАНИЗАЦИЯ";
		КонецЕсли;
		
		Если ТипДокумента = "ИС_СЗВ-4-1" Тогда
			НаборЗаписейПачкаСЗВ4.Удалить("ТерриториальныеУсловия");
		Иначе
			НаборЗаписейПачкаСЗВ4.ТерриториальныеУсловия.Значение.ОснованиеТУ = ВыборкаПоШапкеДокумента.ТерриториальныеУсловияКод;
		КонецЕсли;
		
		НаборЗаписейПачкаСЗВ4.ТипСведений.Значение = Строка(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ);
		Если ВыборкаПоШапкеДокумента.ВидКорректировки = "КОРР" Тогда
			НаборЗаписейПачкаСЗВ4.ВидКорректировки.Значение = "КОРРЕКТИРУЮЩАЯ";
		ИначеЕсли ВыборкаПоШапкеДокумента.ВидКорректировки = "ОТМН" Тогда
			НаборЗаписейПачкаСЗВ4.ВидКорректировки.Значение = "ОТМЕНЯЮЩАЯ";
		Иначе
			НаборЗаписейПачкаСЗВ4.Удалить("ВидКорректировки");
		КонецЕсли;
		
		
		УзелПачкаВходящихДокументов = ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
		
		УзелВходящаяОпись = ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТегВходящейОписи,"");
		НаборЗаписейИтогоСуммаВзносов = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "СтраховыеВзносы");
		НаборЗаписейПачкаСЗВ4.Удалить("ИтогоСуммаВзносов");
		
		ДобавитьИнформациюВДерево(УзелВходящаяОпись, НаборЗаписейВходящаяОпись);
		УзелПачкаСЗВ4 = УзелВходящаяОпись.Строки[6];
		
	ИначеЕсли ТипДокумента = "РЕЕСТР_ДСВ_РАБОТОДАТЕЛЬ" Тогда
		
		РеестрДСВ = НаборЗаписейВходящаяОпись.РеестрДСВ.Значение;
		
		ЗаполнитьЗначенияСвойств(РеестрДСВ.ПлатежноеПоручение.Значение,ВыборкапоШапкеДокумента);
		РеестрДСВ.Год.Значение = ВыборкапоШапкеДокумента.Год;
		РеестрДСВ.КоличествоСтрок.Значение = ВыборкапоШапкеДокумента.КоличествоСтрок;
		РеестрДСВ.СуммаДСВРаботника.Значение = ВыборкапоШапкеДокумента.СуммаДСВРаботника;
		РеестрДСВ.СуммаДСВРаботодателя.Значение = ВыборкапоШапкеДокумента.СуммаДСВРаботодателя;
		РеестрДСВ.СуммаДСВОбщая.Значение = ВыборкапоШапкеДокумента.СуммаДСВОбщая;
		
		УзелПачкаВходящихДокументов = ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
		ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТегВходящейОписи,""), НаборЗаписейВходящаяОпись);
	Иначе
		
		НаборЗаписейВходящаяОпись.Удалить("ПачкаСЗВ4");
		
		УзелПачкаВходящихДокументов = ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
		
		ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТегВходящейОписи,""), НаборЗаписейВходящаяОпись);
		
	КонецЕсли;
	
	
	Возврат УзелПачкаВходящихДокументов;

	
КонецФункции // ЗаполнитьНаборЗаписейВходящаяОпись()


// Процедура заполняет реквизиты файла - сведения об организации
//
Процедура ЗаполнитьСоставительПачки(НаборЗаписейСоставительПачки, ВыборкапоШапкеДокумента) Экспорт
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		НаборЗаписейСоставительПачки.КодЕГРИП.Значение = СокрЛП(ВыборкаПоШапкеДокумента.ОрганизацияОГРН);
		НаборЗаписейСоставительПачки.Удалить("КодЕГРЮЛ");
	Иначе
		НаборЗаписейСоставительПачки.Удалить("КодЕГРИП");
		НаборЗаписейСоставительПачки.КодЕГРЮЛ.Значение = СокрЛП(ВыборкаПоШапкеДокумента.ОрганизацияОГРН);
	КонецЕсли;
	
	НаборЗаписейСоставительПачки.Форма.Значение = ВРег(Лев(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеОКОПФ, 40));
	
	НомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР, " ", "");
	Если СтрДлина(НомерПФР) <> 14 Тогда
		НомерПФР = Лев(НомерПФР, 8) + "0" + Сред(НомерПФР, 9)
	КонецЕсли;
	НаборЗаписейСоставительПачки.РегистрационныйНомер.Значение = НомерПФР;
	НаборЗаписейСоставительПачки.Удалить("ДатаВыдачиЛицензии");
	НаборЗаписейСоставительПачки.Удалить("НомерЛицензии");
	
	НаборЗаписейНалоговыйНомер = НаборЗаписейСоставительПачки.НалоговыйНомер.Значение;
	НаборЗаписейНалоговыйНомер.ИНН = ВыборкаПоШапкеДокумента.ОрганизацияИНН;
	Если ВыборкаПоШапкеДокумента.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		НаборЗаписейНалоговыйНомер.Удалить("КПП");
		ТаблицаПолей = НаборЗаписейСоставительПачки.НалоговыйНомер.Поля;
		ТаблицаПолей.Индексы.Добавить("ИмяПоля");
		СтрокаКПП = ТаблицаПолей.Найти("КПП", "ИмяПоля");
		Если СтрокаКПП <> Неопределено Тогда
			ТаблицаПолей.Удалить(СтрокаКПП);
		КонецЕсли;
	Иначе
		НаборЗаписейНалоговыйНомер.КПП = ВыборкаПоШапкеДокумента.ОрганизацияКПП;
	КонецЕсли;
	
	НаборЗаписейСоставительПачки.НаименованиеОрганизации.Значение = СокрЛП(ВРЕГ(Лев(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеПолное,НаборЗаписейСоставительПачки.НаименованиеОрганизации.Размер)));
	НаборЗаписейСоставительПачки.НаименованиеКраткое.Значение = СокрЛП(ВРег(Лев(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеСокращенное, НаборЗаписейСоставительПачки.НаименованиеКраткое.Размер)));
	
	НаборЗаписейСоставительПачки.Удалить("Подразделение");
	

КонецПроцедуры // ЗаполнитьСоставительПачки()

// Процедура ищет адрес в справочнике Адресный классификатор, и если
// не находит указанный регион, район, город, населенный пункт, то возвращает
// Отказ = Истина, в текстеошибки возвращается текст ошибки.
// Если не найдена только улица, то возвращается только ТекстОшибки, 
// значение переменной отказ не изменяется.
Функция ПроверитьАдресПоКЛАДР(АдресСписком) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамРегион", АдресСписком.Регион);
	Запрос.УстановитьПараметр("парамРайон", АдресСписком.Район);
	Запрос.УстановитьПараметр("парамГород", АдресСписком.Город);
	Запрос.УстановитьПараметр("парамНаселенныйПункт", АдресСписком.НаселенныйПункт);
	Запрос.УстановитьПараметр("парамУлица", АдресСписком.Улица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НаселенныйПункт.КодРайонаВКоде = 0
	|				И &ПарамРайон <> """"
	|			ТОГДА "" район""
	|		КОГДА НаселенныйПункт.КодГородаВКоде = 0
	|				И &ПарамГород <> """"
	|			ТОГДА "" город""
	|		КОГДА НаселенныйПункт.КодНаселенногоПунктаВКоде = 0
	|				И &ПарамНаселенныйПункт <> """"
	|			ТОГДА "" населённый пункт""
	|		КОГДА ЕСТЬNULL(АдресныйКлассификатор.КодУлицыВКоде, 0) = 0
	|				И &парамУлица <> """"
	|			ТОГДА ""а улица""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СообщениеОбОшибке
	|ИЗ
	|	(ВЫБРАТЬ
	|		Город.КодРегионаВКоде КАК КодРегионаВКоде,
	|		Город.КодРайонаВКоде КАК КодРайонаВКоде,
	|		Город.КодГородаВКоде КАК КодГородаВКоде,
	|		ЕСТЬNULL(АдресныйКлассификатор.КодНаселенногоПунктаВКоде, 0) КАК КодНаселенногоПунктаВКоде
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Район.КодРегионаВКоде КАК КодРегионаВКоде,
	|			Район.КодРайонаВКоде КАК КодРайонаВКоде,
	|			ЕСТЬNULL(АДресныйКлассификатор.КодГородаВКоде, 0) КАК КодГородаВКоде
	|		ИЗ
	|			(ВЫБРАТЬ
	|				Регион.КодРегионаВКоде КАК КодРегионаВКоде,
	|				ЕСТЬNULL(АдресныйКлассификатор.КодРайонаВКоде, 0) КАК КодРайонаВКоде
	|			ИЗ
	|				(ВЫБРАТЬ
	|					АдресныйКлассификатор.КодРегионаВКоде КАК КодРегионаВКоде
	|				ИЗ
	|					РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|				ГДЕ
	|					АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамРегион
	|					И АдресныйКлассификатор.ТипАдресногоЭлемента = 1) КАК Регион
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|					ПО (АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамРайон)
	|						И АдресныйКлассификатор.КодРегионаВКоде = Регион.КодРегионаВКоде
	|						И (АдресныйКлассификатор.ТипАдресногоЭлемента = 2)) КАК Район
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АДресныйКлассификатор
	|				ПО (АДресныйКлассификатор.Наименование + "" "" + АДресныйКлассификатор.Сокращение = &парамГород)
	|					И АДресныйКлассификатор.КодРегионаВКоде = Район.КодРегионаВКоде
	|					И АДресныйКлассификатор.КодРайонаВКоде = Район.КодРайонаВКоде
	|					И (АДресныйКлассификатор.ТипАдресногоЭлемента = 3)) КАК Город
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|			ПО (АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамНаселенныйПункт)
	|				И АдресныйКлассификатор.КодРегионаВКоде = Город.КодРегионаВКоде
	|				И АдресныйКлассификатор.КодРайонаВКоде = Город.КодРайонаВКоде
	|				И АдресныйКлассификатор.КодГородаВКоде = Город.КодГородаВКоде
	|				И (АдресныйКлассификатор.ТипАдресногоЭлемента = 4)) КАК НаселенныйПункт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|		ПО (АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамУлица)
	|			И АдресныйКлассификатор.КодРегионаВКоде = НаселенныйПункт.КодРегионаВКоде
	|			И АдресныйКлассификатор.КодРайонаВКоде = НаселенныйПункт.КодРайонаВКоде
	|			И АдресныйКлассификатор.КодГородаВКоде = НаселенныйПункт.КодГородаВКоде
	|			И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = НаселенныйПункт.КодНаселенногоПунктаВКоде
	|			И (АдресныйКлассификатор.ТипАдресногоЭлемента = 5)";
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	ТекстОшибки = "";
	Если ВыборкаЗапроса.Следующий() Тогда
		ТекстОшибки = ВыборкаЗапроса.СообщениеОбОшибке;
	Иначе
		ТекстОшибки = " регион";
	КонецЕсли;
	
	Возврат ТекстОшибки
КонецФункции // ПроверитьАдресПоКЛАДР()

// Процедура заполняет адрес, представленный в структуре для записи в XML файл 
// входными данынми является строка адреса
//  СписокСтран - Список стран и их кодов
// СписокСокращений1-5 - сокращения для определенного реквизита адреса
// ФорматИностранныйАдрес, ФорматНеструктурированныйАдрес - форматы данных для не Российских адресов.
// ВыходноеЗначение: НаборЗаписейАдрес
Процедура ЗаполнитьАдрес(НаборЗаписейАдрес, СтрокаАдрес, СписокСтран, ФорматНеструктурированныйАдрес, ФорматИностранныйАдрес, ТекстПредупреждения) Экспорт
	АдресСписком = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(ВРег(СтрокаАдрес));	
	ЗаПределамиРФ = Ложь;
	АдресСписком.Свойство("ЗаПределамиРФ", ЗаПределамиРФ);
	// ЗаПределамиРФ может быть неопределно, поэтому сравниваем на значение
	Если ЗаПределамиРФ = Истина Тогда
		Если АдресСписком.Страна = "РОССИЯ" Тогда
			// Неструктурированный адрес
			НаборЗаписейАдрес = СкопироватьСтруктуруДанных(ФорматНеструктурированныйАдрес);
			НаборЗаписейАдрес.НеструктурированныйАдрес.Значение.Адрес = ВРег(СокрЛП(СтрокаАдрес));
			НаборЗаписейАдрес.ТипАдреса.Значение = "НЕСТРУКТУРИРОВАННЫЙ";
			НаборЗаписейАдрес.Удалить("Индекс");
			ТекстПредупреждения = " сохранен как неструктурированный адрес."
		Иначе
			// Иностранный адрес

			НазваниеСтраны = СокрЛП(АдресСписком.Страна);
			КодСтраны = СписокСтран.Получить(НазваниеСтраны);
			Если КодСтраны = Неопределено Тогда
				// не удалось получить страну, запишем как неструктурированный адрес
				НаборЗаписейАдрес = СкопироватьСтруктуруДанных(ФорматНеструктурированныйАдрес);
				НаборЗаписейАдрес.НеструктурированныйАдрес.Значение.Адрес = ВРег(СокрЛП(СтрокаАдрес));
				НаборЗаписейАдрес.ТипАдреса.Значение = "НЕСТРУКТУРИРОВАННЫЙ";
				НаборЗаписейАдрес.Удалить("Индекс");
				ТекстПредупреждения = " сохранен как неструктурированный адрес."
			Иначе
				НаборЗаписейАдрес = СкопироватьСтруктуруДанных(ФорматИностранныйАдрес);
				НаборЗаписейАдрес.ИностранныйАдрес.Значение.КодСтраны = КодСтраны;
				НаборЗаписейАдрес.ИностранныйАдрес.Значение.НазваниеСтраны = НазваниеСтраны;
				НаборЗаписейАдрес.ИностранныйАдрес.Значение.Адрес = ВРег(СокрЛП(СтрокаАдрес));
				НаборЗаписейАдрес.ТипАдреса.Значение = "ИНОСТРАННЫЙ";
				НаборЗаписейАдрес.Удалить("Индекс");
				ТекстПредупреждения = " сохранен как иностранный адрес."
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Российский адрес
		НаборЗаписейАдрес.Индекс.Значение = АдресСписком.Индекс;
		НаборЗаписейАдрес.ТипАдреса.Значение = "РОССИЙСКИЙ";
			
		НаборЗаписейРоссийскийАдрес = НаборЗаписейАдрес.РоссийскийАдрес.Значение;
		НаборЗаписейРоссийскийАдрес.СостояниеАдреса.Значение = "ПРАВИЛЬНЫЙ";
		
		НаборЗаписейРоссийскийАдрес.Регион.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.Регион, НаборЗаписейРоссийскийАдрес.Регион.Значение.Сокращение);
		
		НаборЗаписейРоссийскийАдрес.Район.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.Район, НаборЗаписейРоссийскийАдрес.Район.Значение.Сокращение);
		
		НаборЗаписейРоссийскийАдрес.Город.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.Город, НаборЗаписейРоссийскийАдрес.Город.Значение.Сокращение);		
		НаборЗаписейРоссийскийАдрес.НаселенныйПункт.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.НаселенныйПункт, НаборЗаписейРоссийскийАдрес.НаселенныйПункт.Значение.Сокращение);
		НаборЗаписейРоссийскийАдрес.Улица.Значение.ГеографическоеНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(АдресСписком.Улица, НаборЗаписейРоссийскийАдрес.Улица.Значение.Сокращение);
		НаборЗаписейРоссийскийАдрес.Дом.Значение.Номер = АдресСписком.Дом;
		НаборЗаписейРоссийскийАдрес.Дом.Значение.Сокращение = "Д";
				
		Если Не ПустаяСтрока(АдресСписком.Корпус) Тогда
			НаборЗаписейРоссийскийАдрес.Корпус.Значение.Номер = АдресСписком.Корпус;
			НаборЗаписейРоссийскийАдрес.Корпус.Значение.Сокращение = "КОРП";
		КонецЕсли;
				
		Если Не ПустаяСтрока(АдресСписком.Квартира) Тогда
			НаборЗаписейРоссийскийАдрес.Квартира.Значение.Номер = АдресСписком.Квартира;
			НаборЗаписейРоссийскийАдрес.Квартира.Значение.Сокращение = "КВ";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПФРXMLЗаполнитьАдрес()

// Функция преобразует дерево значений в котором представлен XML файл, в текст
//
Функция ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки, АтрибутыПачкиВходящихДокументов = Неопределено) Экспорт
	
	// Преобразуем дерево в строковое описание XML
	
	ПотокВыгрузкиXML = СоздатьПотокXML();
	
	ЗаписатьУзелДереваXMLВXMLдляПФР(ДеревоВыгрузки, ПотокВыгрузкиXML);
	
	// получаем содержимое файла в виде строки
	
	ТекстФайла = СтрЗаменить(СтрЗаменить(ЗаписатьПотокXML(ПотокВыгрузкиXML),"UTF-8","windows-1251"),"<ПачкаВходящихДокументов>",
	"<ПачкаВходящихДокументов " + ?(АтрибутыПачкиВходящихДокументов = Неопределено, "Окружение=""В составе файла"" Стадия=""До обработки""", АтрибутыПачкиВходящихДокументов) + ">");
	
	Возврат ТекстФайла;
	
КонецФункции // ПолучитьТекстФайлаИзДереваЗначений


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ФОРМИРОВАНИЯ ОТЧЕТОВ ПО СОХРАНЕННОМУ XML ФАЙЛУ
//

// Функция возвращает значение строки дерева значений из колонки "Имя"
Функция ИзвлечьДанное(СтрокаДерева,Имя) Экспорт 
	СтрокаДанных = СтрокаДерева.Строки.Найти(Имя,"Имя",Истина);
	Если СтрокаДанных = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат СтрокаДанных.Значение;
	КонецЕсли;
КонецФункции

// Функция возращает представление адреса полученное из строк дерева значений, 
// представляющих XML ПФР файл выгрузки формат 07.00
Функция ПредставлениеАдресадляПФР(Знач СтрокаДереваАдрес) Экспорт
	Адрес = "";
	ТипАдреса = ИзвлечьДанное(СтрокаДереваАдрес, "ТипАДреса");
	Индекс = ИзвлечьДанное(СтрокаДереваАдрес, "Индекс");
	СтрокаДереваРоссийскийАдрес = СтрокаДереваАдрес.Строки.Найти("РоссийскийАдрес");
	СтрокаДереваИностранныйАдрес = СтрокаДереваАдрес.Строки.Найти("ИностранныйАдрес");
	СтрокаДереваНеструктурированныйАдрес = СтрокаДереваАдрес.Строки.Найти("НеструктурированныйАдрес");
	Если СтрокаДереваРоссийскийАдрес <> Неопределено Тогда
		СтрокаДереваРегион = СтрокаДереваРоссийскийАдрес.Строки.Найти("Регион");
		Если СтрокаДереваРегион <> Неопределено Тогда
			Регион = ИзвлечьДанное(СтрокаДереваРегион, "ГеографическоеНазвание");
			СокращениеРегион =  ИзвлечьДанное(СтрокаДереваРегион, "Сокращение");
		КонецЕсли;
		СтрокаДереваРайон = СтрокаДереваРоссийскийАдрес.Строки.Найти("Район");
		Если СтрокаДереваРайон <> Неопределено Тогда
			Район = ИзвлечьДанное(СтрокаДереваРайон, "ГеографическоеНазвание");
			СокращениеРайон = ИзвлечьДанное(СтрокаДереваРайон, "Сокращение");
		КонецЕсли;
		СтрокаДереваГород = СтрокаДереваРоссийскийАдрес.Строки.Найти("Город");
		Если СтрокаДереваГород <> Неопределено Тогда
			Город = ИзвлечьДанное(СтрокаДереваГород, "ГеографическоеНазвание");
			СокращениеГород = ИзвлечьДанное(СтрокаДереваГород, "Сокращение");
		КонецЕсли;
		СтрокаДереваНаселенныйПункт = СтрокаДереваРоссийскийАдрес.Строки.Найти("НаселенныйПункт");
		Если СтрокаДереваНаселенныйПункт <> Неопределено Тогда
			НаселенныйПункт = ИзвлечьДанное(СтрокаДереваНаселенныйПункт, "ГеографическоеНазвание");
			СокращениеНаселенныйПункт = ИзвлечьДанное(СтрокаДереваНаселенныйПункт, "Сокращение");
		КонецЕсли;
		СтрокаДереваУлица = СтрокаДереваРоссийскийАдрес.Строки.Найти("Улица");
		Если СтрокаДереваУлица <> Неопределено Тогда
			Улица = ИзвлечьДанное(СтрокаДереваУлица, "ГеографическоеНазвание");
			СокращениеУлица = ИзвлечьДанное(СтрокаДереваУлица, "Сокращение");
		КонецЕсли;
		СтрокаДереваДом = СтрокаДереваРоссийскийАдрес.Строки.Найти("Дом");
		Если СтрокаДереваДом <> Неопределено Тогда
			СокращениеДом = ИзвлечьДанное(СтрокаДереваДом, "Сокращение");
			Дом = ИзвлечьДанное(СтрокаДереваДом, "Номер");
		КонецЕсли;
		СтрокаДереваКорпус = СтрокаДереваРоссийскийАдрес.Строки.Найти("Корпус");
		Если СтрокаДереваКорпус <> Неопределено Тогда
			СокращениеКорпус = ИзвлечьДанное(СтрокаДереваКорпус, "Сокращение");
			Корпус = ИзвлечьДанное(СтрокаДереваКорпус, "Номер");
		КонецЕсли;
		СтрокаДереваКвартира = СтрокаДереваРоссийскийАдрес.Строки.Найти("Квартира");
		Если СтрокаДереваКвартира <> Неопределено Тогда
			СокращениеКвартира = ИзвлечьДанное(СтрокаДереваКвартира, "Сокращение");
			Квартира = ИзвлечьДанное(СтрокаДереваКвартира, "Номер");
		КонецЕсли;
		Адрес = ?(ЗначениеЗаполнено(Индекс),", "+Индекс,"")+
		?(ЗначениеЗаполнено(Регион), ", "+Регион+" "+СокращениеРегион, "")+
		?(ЗначениеЗаполнено(Район), ", "+Район+" "+СокращениеРайон, "")+
		?(ЗначениеЗаполнено(Город), ", "+Город+" "+СокращениеГород, "")+
		?(ЗначениеЗаполнено(НаселенныйПункт), ", "+НаселенныйПункт+" "+СокращениеНаселенныйПункт, "")+
		?(ЗначениеЗаполнено(Улица), ", "+Улица+" "+СокращениеУлица, "")+
		?(ЗначениеЗаполнено(Дом), ", "+СокращениеДом+" "+Дом, "")+
		?(ЗначениеЗаполнено(Корпус), ", "+СокращениеКорпус+" "+Корпус, "")+
		?(ЗначениеЗаполнено(Квартира), ", "+СокращениеКвартира+" "+Квартира, "");
		Адрес = Сред(Адрес,2);//Убрали первую запятую
		
	ИначеЕсли СтрокаДереваИностранныйАдрес <> Неопределено Тогда
		КодСтраны = ИзвлечьДанное(СтрокаДереваИностранныйАдрес, "КодСтраны");
		НазваниеСтраны = ИзвлечьДанное(СтрокаДереваИностранныйАдрес, "НазваниеСтраны");
		АдресВСтране = ИзвлечьДанное(СтрокаДереваИностранныйАдрес, "НазваниеСтраны");
		Адрес = ?(ЗначениеЗаполнено(Индекс),", "+Индекс, "")+
		?(ЗначениеЗаполнено(НазваниеСтраны),", "+НазваниеСтраны, "")+
		?(ЗначениеЗаполнено(АдресВСтране),", "+АдресВСтране, "");
		Адрес = Сред(Адрес,1);//Убрали первую запятую
		
	ИначеЕсли СтрокаДереваНеструктурированныйАдрес <> Неопределено Тогда
		 Адрес = ИзвлечьДанное(СтрокаДереваНеструктурированныйАдрес, "Адрес");
		
	КонецЕсли;
	Возврат Адрес;

КонецФункции

// Функция возвращает представление даты полученной из XML файла.
// СтрДата - дата в формате XML ПФР 07.00
Функция ДатаXMLВОтчет(СтрДата, РазвернутоеПредставление = Истина) Экспорт
	Если СтрДата = "" Тогда
		ВозвращаемаяДата = Дата(1, 1, 1);
	Иначе
		МассивПодстрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрДата, ".");
		Если Число(МассивПодстрок[0]) = 0 Тогда
			МассивПодстрок[0] = "1";
		КонецЕсли;
		Если Число(МассивПодстрок[1]) = 0 Тогда
			МассивПодстрок[1] = "1";
		КонецЕсли;
		Если Число(МассивПодстрок[2]) = 0 Тогда
			МассивПодстрок[2] = "1";
		КонецЕсли;
		ВозвращаемаяДата = Дата(МассивПодстрок[2], МассивПодстрок[1], МассивПодстрок[0]);
	КонецЕсли;
	Если РазвернутоеПредставление Тогда
		Возврат ДатаВОтчет(ВозвращаемаяДата);
	Иначе
		Возврат ВозвращаемаяДата;
	КонецЕсли;
	
КонецФункции

// Функция возвращает дерево значений, заполненное из текста XML файла.
Функция ПреобразоватьВДеревоXML(СтрокаXML) Экспорт

	НовоеДеревоXML = СоздатьДеревоXML();

	Возврат ДобавитьВДеревоXML(НовоеДеревоXML, СтрокаXML);
	
КонецФункции

// Функция производит формирование древовидной структуры,
// начиная с переданной в ВеткаДерева ветки дерева значений
// на основе описания XML, переданного в СтрокаXML
Функция ДобавитьВДеревоXML(ВеткаДерева, СтрокаXML) Экспорт

	XMLПоток = Новый ЧтениеXML();
	
	Попытка
		XMLПоток.УстановитьСтроку(СтрокаXML);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ДеревоФайла = Новый ДеревоЗначений;
	ДеревоФайла.Колонки.Добавить("Имя",      Новый ОписаниеТипов("Строка"));
	ДеревоФайла.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	ТекущаяВетка = Неопределено;
	
	Попытка
		
		Пока XMLПоток.Прочитать() Цикл
			Если XMLПоток.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ТекущаяВетка = СоздатьУзелНаВетке(ТекущаяВетка, ДеревоФайла);
				ТекущаяВетка.Имя = XMLПоток.Имя;
				
				ВеткаАтрибутов = Неопределено;
				
				Пока XMLПоток.ПрочитатьАтрибут() Цикл
					
					Если ВеткаАтрибутов = Неопределено Тогда
						ВеткаАтрибутов = ТекущаяВетка.Строки.Добавить();
						ВеткаАтрибутов.Имя = "АтрибутыXMLУзла";
						ВеткаАтрибутов.Значение = Неопределено;
					КонецЕсли;
		
					АтрибутВДереве = СоздатьУзелНаВетке(ВеткаАтрибутов, ДеревоФайла);
					АтрибутВДереве.Имя = XMLПоток.Имя;
					АтрибутВДереве.Значение =  XMLПоток.Значение;
				КонецЦикла;
				
			ИначеЕсли XMLПоток.ТипУзла = ТипУзлаXML.Текст Тогда
				ТекущаяВетка.Значение = XMLПоток.Значение;
				
			ИначеЕсли XMLПоток.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				ТекущаяВетка = ТекущаяВетка.Родитель;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		Возврат Неопределено;
		
	КонецПопытки;
	
	СкопироватьВетку(ВеткаДерева, ДеревоФайла);
	
	Возврат ВеткаДерева;
	
КонецФункции

// Функция копирует ветку дерева значений
Процедура СкопироватьВетку(Приемник, Источник) 
	
	Если ТипЗнч(Источник) = Тип("СтрокаДереваЗначений") Тогда // есть откуда скопировать
		
		Если ТипЗнч(Приемник) = Тип("СтрокаДереваЗначений") Тогда // некуда скопировать
			СтрокаПриемника =  Приемник;
		
		Иначе
			СтрокаПриемника = Приемник.Строки.Добавить();
			
		КонецЕсли;
		
		СтрокаПриемника.Имя = Источник.Имя;
		СтрокаПриемника.Значение = Источник.Значение;
		
	КонецЕсли;
	
	Для каждого ЛистИсточника Из Источник.Строки Цикл
		ЛистПриемника = Приемник.Строки.Добавить();
		СкопироватьВетку(ЛистПриемника, ЛистИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция создает и возвращает новую строку в дереве значений
Функция СоздатьУзелНаВетке(ТекущаяВетка, ДеревоОбработки) 
	
	Если ТекущаяВетка = Неопределено Тогда
		Возврат ДеревоОбработки.Строки.Добавить();
	Иначе
		Возврат ТекущаяВетка.Строки.Добавить();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ВЫХОДНЫХ ПЕЧАТНЫХ ФОРМ

// Формирует представление периода болезни или отпуска за свой счет для вывода в печатную форму документа
Функция ПредставлениеПериодаБолезниОтпуска(Месяцы, Дни) Экспорт
	
	Если Месяцы<>0 Тогда
		Представление = "" + Месяцы + " мес. ";
	Иначе	
		Представление = "";
	КонецЕсли; 
	Если Дни<>0 Тогда
		Представление = Представление + Дни + " дн." ;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции 

// Формирует представление параметров исчисляемого  трудового стажа
//
// Параметры:
//		ЗаписьСтажа -	структура - запись о стаже
// Возвращаемое значение:
//		Строка
Функция ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьСтажа) Экспорт
	
	ПредставлениеПараметровИТС = "";
	КодОснованияИТС = ЗаписьСтажа.ОснованиеИсчисляемогоСтажаКод;
	ПервыйПараметрИТС = ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
	ВторойПараметрИТС = ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
	ТретийПараметрИТС = ЗаписьСтажа.ТретийПараметрИсчисляемогоСтажа;
	
	Если КодОснованияИТС = "ВОДОЛАЗ" Тогда
		ПредставлениеПараметровИТС = ?(ПервыйПараметрИТС > 0,""+ПервыйПараметрИТС+" ч ","")+?(ВторойПараметрИТС > 0,""+ВторойПараметрИТС+" мин","");
	ИначеЕсли КодОснованияИТС = "СЕЗОН" Тогда
		ПредставлениеПараметровИТС = "";
	Иначе
		ПредставлениеПараметровИТС = ?(ПервыйПараметрИТС > 0,"" + ПервыйПараметрИТС+" м ","") + ?(ВторойПараметрИТС > 0,""+ВторойПараметрИТС+" дн ","") + Строка(ТретийПараметрИТС);
	КонецЕсли;
	
	Возврат ПредставлениеПараметровИТС;

КонецФункции

Функция ПредставлениеПараметровТерриториальныхУсловий(ЗаписьСтажа) Экспорт
	
	ПредставлениеПараметровТУ = "";
	Ставка = ЗаписьСтажа.Коэффициент;
	ПервыйПараметрТУ = ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
	ВторойПараметрТУ = ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
	
	Если Ставка <> "0.00" Тогда
		ПредставлениеПараметровТУ = Ставка;
	Иначе
		ПредставлениеПараметровТУ = ?(ПервыйПараметрТУ > 0,"" + ПервыйПараметрТУ+" м ","") + ?(ВторойПараметрТУ > 0,""+ВторойПараметрТУ+" дн ","");
	КонецЕсли;
	
	Возврат ПредставлениеПараметровТУ;
	
КонецФункции


// Формирует строки "дополнительных сведений" по выслуге лет в "удобочитаемом" виде для отражения в формах.
//
// Параметры:
//		ЗаписьСтажа -	структура - запись о стаже
//		СтрПервыйВторойПараметр  -	строка - возвращаемый параметр - представление первых двух параметров
//		СтрСтавки  -	строка - возвращаемый параметр - представление третьего параметра
//
Процедура ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьСтажа, СтрПервыйВторойПараметр, СтрСтавки)Экспорт
	
	КодОснования = ЗаписьСтажа.ОснованиеВыслугиЛетКод;
	ПервыйПараметр = ЗаписьСтажа.ПервыйПараметрВыслугиЛет;
	ВторойПараметр = ЗаписьСтажа.ВторойПараметрВыслугиЛет;
	ТретийПараметр = ЗаписьСтажа.ТретийПараметрВыслугиЛет;
	
	СтрПервыйВторойПараметр = "";
	СтрСтавки = "";
	
	Если (КодОснования="ИСПКЛС1") или (КодОснования="САМОЛЕТ") или (КодОснования="ИНСПЕКТ") 
	или (КодОснования="СПЕЦАВ") или (КодОснования="ЛЕТИСП") или (КодОснования="ИТСИСП") 
	или (КодОснования="ИНСПЕКТ") или (КодОснования="ИТСМАВ") или (КодОснования="ОПЫТИСП") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","")+?(ВторойПараметр>0,""+ВторойПараметр+" мин","");
		
	ИначеЕсли (КодОснования="РЕАКТИВН") или (КодОснования="НОРМСП") или (КодОснования="НОРМАПР") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" прыжков ","");
		
	ИначеЕсли (КодОснования="УВД") или (КодОснования="ИТС")	или (КодОснования="27-14") или (КодОснования="27-15") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" м ","")+?(ВторойПараметр>0,""+ВторойПараметр+" дн ","");
		
	ИначеЕсли (КодОснования="ХИРУРГД") или (КодОснования="ХИРУРСМ") или (КодОснования="ЗП81ГД") или (КодОснования="ЗП81СМ") 
	или (КодОснования="28-ГДХР") или (КодОснования="28-СМХР") или (КодОснования="28-ГД") или (КодОснования="28-СМ") Тогда
		СтрСтавки = ?(ТретийПараметр>0,""+ТретийПараметр,"");
		
	ИначеЕсли (КодОснования="ЗП80РК") или (КодОснования="ЗП80ПД") 
	или (КодОснования="28-ПДРК") или (КодОснования="28-ПД") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","");
		СтрСтавки = ?(ТретийПараметр>0,""+ТретийПараметр,"");
		
	КонецЕсли;
	
КонецПроцедуры 

Функция УточненныеКоэффициентыУплаты(ТаблицаРезультата, КомментироватьРасчет, ДанныеКомментирования)
	
	ТаблицаПериодов = ТаблицаРезультата.Скопировать(,"ОтчетныйПериодФормирования,ОтчетныйГод,НачисленоВсего,УплаченоВсего,НачальныйКоэффициент");
	ТаблицаПериодов.Свернуть("ОтчетныйПериодФормирования,ОтчетныйГод,НачисленоВсего,УплаченоВсего,НачальныйКоэффициент");
	СтруктураПоиска = Новый Структура("ОтчетныйПериодФормирования,ОтчетныйГод");
	Если КомментироватьРасчет Тогда
		ДанныеКомментирования = Новый Структура("РасчетКоэффициента, УдаленныеСотрудники");
		НачальноеСостояние = ТаблицаПериодов.Скопировать();
		ТЗУдаленныеСотрудники = ТаблицаРезультата.СкопироватьКолонки("ОтчетныйПериодФормирования,ОтчетныйГод, ФизЛицоНаименование, КатегорияЗастрахованныхЛиц, ПринятоПФРУплаты, Начислено");
	КонецЕсли;
	Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
		Если СтрокаПериода.НачисленоВсего - СтрокаПериода.УплаченоВсего < 1 Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаПериода);
		ТаблицаФизлиц = ТаблицаРезультата.Скопировать(СтруктураПоиска);
		ТаблицаФизлиц.Индексы.Добавить("КоэффициентПринятоПФР");
		ТаблицаФизлиц.Сортировать("КоэффициентПринятоПФР");
		НадоКорректироватьКоэффициент = Истина;
		Пока НадоКорректироватьКоэффициент Цикл
			ВсегоФизлиц = ТаблицаФизлиц.Количество();
			Если ВсегоФизлиц = 0 Тогда
				НадоКорректироватьКоэффициент = Ложь;
				СтрокаПериода.НачальныйКоэффициент = 0;
				Продолжить;
			КонецЕсли;
			Если ТаблицаФизлиц[0].КоэффициентПринятоПФР > СтрокаПериода.НачальныйКоэффициент Тогда
				НадоКорректироватьКоэффициент = Ложь;
				СтрокаПериода.НачальныйКоэффициент = 0;
				Продолжить;
			КонецЕсли;
			Если ТаблицаФизлиц[ВсегоФизлиц - 1].КоэффициентПринятоПФР <= СтрокаПериода.НачальныйКоэффициент Тогда
				НадоКорректироватьКоэффициент = Ложь;
				Продолжить;
			КонецЕсли;
			Для Сч = 1 По ВсегоФизлиц Цикл
				ТекущаяСтрокаФизлица = ТаблицаФизлиц[ВсегоФизлиц - Сч];
				Если ТекущаяСтрокаФизлица.КоэффициентПринятоПФР > СтрокаПериода.НачальныйКоэффициент Тогда
					СтрокаПериода.УплаченоВсего = СтрокаПериода.УплаченоВсего - ТекущаяСтрокаФизлица.ПринятоПФРУплаты;
					СтрокаПериода.НачисленоВсего = СтрокаПериода.НачисленоВсего - ТекущаяСтрокаФизлица.Начислено;
					Если КомментироватьРасчет Тогда
						ЗаполнитьЗначенияСвойств(ТЗУдаленныеСотрудники.Добавить(),ТекущаяСтрокаФизлица);
					КонецЕсли;
					ТаблицаФизлиц.Удалить(ТекущаяСтрокаФизлица)
				Иначе 
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтрокаПериода.НачальныйКоэффициент = ?(СтрокаПериода.НачисленоВсего <= 0 Или СтрокаПериода.УплаченоВсего <= 0, 0, Мин(СтрокаПериода.УплаченоВсего / СтрокаПериода.НачисленоВсего, 1))
		КонецЦикла;
	КонецЦикла;
	Если КомментироватьРасчет Тогда
		ТЗУдаленныеСотрудники.Колонки.Вставить(0,"Год");
		ТЗУдаленныеСотрудники.Колонки.ФизЛицоНаименование.Заголовок = "Сотрудник";
		ТЗУдаленныеСотрудники.Колонки.КатегорияЗастрахованныхЛиц.Заголовок = "Категория ЗЛ";
		ТЗУдаленныеСотрудники.Колонки.ПринятоПФРУплаты.Заголовок = "Учтено переданной в ПФР уплаты";
		ТЗУдаленныеСотрудники.Колонки.Начислено.Заголовок = "Учтено начисл. взносов";
		Для каждого СтрокаТЗ Из ТЗУдаленныеСотрудники Цикл
			СтрокаТЗ.Год = Формат(СтрокаТЗ.ОтчетныйГод,"ДФ=гггг");
		КонецЦикла;
		ТЗУдаленныеСотрудники.Колонки.Удалить("ОтчетныйГод");
		ТЗУдаленныеСотрудники.Колонки.Удалить("ОтчетныйПериодФормирования");
		ДанныеКомментирования.УдаленныеСотрудники = ТЗУдаленныеСотрудники;
		НачальноеСостояние.Колонки.Вставить(0,"Год");
		НачальноеСостояние.Колонки.Добавить("НачисленоУточнено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)), "Начислено (уточнено)");
		НачальноеСостояние.Колонки.Добавить("УплаченоУточнено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)), "Уплачено (уточнено)");
		НачальноеСостояние.Колонки.Добавить("УточненныйКоэффициент", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 15)), "Коэф-т уплаты (уточнен)");
		НачальноеСостояние.Колонки.НачисленоВсего.Заголовок = "Начислено (всего)";
		НачальноеСостояние.Колонки.УплаченоВсего.Заголовок = "Уплачено (всего)";
		НачальноеСостояние.Колонки.НачальныйКоэффициент.Заголовок = "Коэф-т уплаты";
		КонечноеСостояние = ТаблицаПериодов.Скопировать();
		Для каждого СтрокаПериода Из НачальноеСостояние Цикл
			СтрокаПериода.Год = Формат(СтрокаПериода.ОтчетныйГод,"ДФ=гггг");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаПериода);
		    СтрокиДанных = КонечноеСостояние.НайтиСтроки(СтруктураПоиска);
			Если СтрокиДанных.Количество() > 0 Тогда
				СтрокаДанных = СтрокиДанных[0];
				СтрокаПериода.НачисленоУточнено = СтрокаДанных.НачисленоВсего;
				СтрокаПериода.УплаченоУточнено = СтрокаДанных.УплаченоВсего;
				СтрокаПериода.УточненныйКоэффициент = СтрокаДанных.НачальныйКоэффициент;
			КонецЕсли;
		КонецЦикла;
		НачальноеСостояние.Колонки.Удалить("ОтчетныйГод");
		НачальноеСостояние.Колонки.Удалить("ОтчетныйПериодФормирования");
		ДанныеКомментирования.РасчетКоэффициента = НачальноеСостояние;
	КонецЕсли;
	Возврат ТаблицаПериодов
	
КонецФункции

Функция ДанныеОВзносахПоКатегориям(ДатаАктуальности, ПервыйОтчетныйПериод, ПоследнийОтчетныйПериод, Организация, МассивФизлиц = Неопределено, КомментироватьРасчет = Ложь, ДанныеКомментирования = Неопределено) Экспорт 
	
	Если КомментироватьРасчет Тогда // инициализируем данные комментария
		ДанныеКомментирования = Новый Структура("РаспределениеСУчетомПринятыхПФРДанных, РасчетКоэффициентовСтраховая, РасчетКоэффициентовНакопительная, ПрошлыеПериоды, Итоги, РасчетСотрудников, Переплаты", Ложь, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	
	ПроцедурыПерсонифицированногоУчета.ПоместитьВМенеджерСоответствиеТарифаКатегории(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.УстановитьПараметр("ДатаЗаменыЕСН", ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
	Запрос.УстановитьПараметр("ОтчетныйПериод", ПервыйОтчетныйПериод);
	Запрос.УстановитьПараметр("ОтчетныйГод", Год(ПервыйОтчетныйПериод));
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ПервыйОтчетныйПериод));
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("КонецПериодаУплаты", Мин(ДатаАктуальности, ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ПервыйОтчетныйПериод)));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаНовойРедакцииЗакона212", ПроведениеРасчетов.ДатаРасширенияПеречняЛьготныхТарифовСтраховыхВзносов());
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияПринятыеПФР.КомплектДокументов
	|ПОМЕСТИТЬ ВТПринятоВПФР
	|ИЗ
	|	РегистрСведений.СведенияПринятыеПФР КАК СведенияПринятыеПФР
	|ГДЕ
	|	СведенияПринятыеПФР.КомплектДокументов <> ЗНАЧЕНИЕ(Документ.ПередачаСЗВ4вПФР.ПустаяСсылка)
	|	И СведенияПринятыеПФР.Организация = &Организация
	|	И СведенияПринятыеПФР.ОтчетныйПериодПерсучетаПФР < &ОтчетныйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтраховыеВзносыИсчисленныеОбороты.ФизЛицо КАК ФизЛицо,
	|	СтраховыеВзносыИсчисленныеОбороты.Период КАК МесяцОтчетногоПериода,
	|	КОНЕЦПЕРИОДА(СтраховыеВзносыИсчисленныеОбороты.Период, МЕСЯЦ) КАК Период,
	|	ВЫБОР
	|		КОГДА СтраховыеВзносыИсчисленныеОбороты.Период < ДАТАВРЕМЯ(2010, 7, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0)
	|		КОГДА СтраховыеВзносыИсчисленныеОбороты.Период < ДАТАВРЕМЯ(2011, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(2010, 7, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(СтраховыеВзносыИсчисленныеОбороты.Период, КВАРТАЛ)
	|	КОНЕЦ КАК ОтчетныйПериод,
	|	СтраховыеВзносыИсчисленныеОбороты.ПФРСтраховаяОборот + ВЫБОР
	|		КОГДА СтраховыеВзносыИсчисленныеОбороты.Период < &ДатаНовойРедакцииЗакона212
	|			ТОГДА 0
	|		ИНАЧЕ СтраховыеВзносыИсчисленныеОбороты.ПФРСтраховаяЕНВДОборот
	|	КОНЕЦ КАК ПФРСтраховаяОборот,
	|	СтраховыеВзносыИсчисленныеОбороты.ПФРНакопительнаяОборот + ВЫБОР
	|		КОГДА СтраховыеВзносыИсчисленныеОбороты.Период < &ДатаНовойРедакцииЗакона212
	|			ТОГДА 0
	|		ИНАЧЕ СтраховыеВзносыИсчисленныеОбороты.ПФРНакопительнаяЕНВДОборот
	|	КОНЕЦ КАК ПФРНакопительнаяОборот,
	|	ВЫБОР
	|		КОГДА СтраховыеВзносыИсчисленныеОбороты.Период < &ДатаНовойРедакцииЗакона212
	|			ТОГДА СтраховыеВзносыИсчисленныеОбороты.ПФРСтраховаяЕНВДОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРСтраховаяЕНВДОборот,
	|	ВЫБОР
	|		КОГДА СтраховыеВзносыИсчисленныеОбороты.Период < &ДатаНовойРедакцииЗакона212
	|			ТОГДА СтраховыеВзносыИсчисленныеОбороты.ПФРНакопительнаяЕНВДОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРНакопительнаяЕНВДОборот
	|ПОМЕСТИТЬ ВТИсчисленоПоЗЛ
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыИсчисленные.Обороты(&ОтчетныйПериод, &КонецОтчетногоПериода, Месяц, ОбособленноеПодразделение = &Организация) КАК СтраховыеВзносыИсчисленныеОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СрезПоследнихДат.МесяцОтчетногоПериода,
	|	СрезПоследнихДат.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВТИнвалиды
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.МесяцОтчетногоПериода КАК МесяцОтчетногоПериода,
	|		Периоды.ФизЛицо КАК Физлицо,
	|		МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК Период
	|	ИЗ
	|		ВТИсчисленоПоЗЛ КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|			ПО Периоды.Период >= СведенияОбИнвалидностиФизлиц.Период
	|				И Периоды.ФизЛицо = СведенияОбИнвалидностиФизлиц.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.ФизЛицо,
	|		Периоды.МесяцОтчетногоПериода) КАК СрезПоследнихДат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|		ПО СрезПоследнихДат.Период = СведенияОбИнвалидностиФизлиц.Период
	|			И СрезПоследнихДат.Физлицо = СведенияОбИнвалидностиФизлиц.Физлицо
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.Инвалидность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	СрезПоследнихДат.МесяцОтчетногоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Периоды.МесяцОтчетногоПериода,
	|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ВидТарифаСтраховыхВзносов, ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим)) КАК ВидТарифаСтраховыхВзносов
	|ПОМЕСТИТЬ ВТВидыТарифныхСтавокОрганизаций
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.МесяцОтчетногоПериода КАК МесяцОтчетногоПериода,
	|		УчетнаяПолитикаНалоговыйУчет.Организация КАК Организация,
	|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТИсчисленоПоЗЛ КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
	|			ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период
	|				И (УчетнаяПолитикаНалоговыйУчет.Организация = &ГоловнаяОрганизация)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.МесяцОтчетногоПериода,
	|		УчетнаяПолитикаНалоговыйУчет.Организация) КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
	|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период
	|			И Периоды.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.МесяцОтчетногоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсчисленоПоЗЛ.ФизЛицо КАК ФизЛицо,
	|	ИсчисленоПоЗЛ.ПФРНакопительнаяОборот КАК ПФРНакопительнаяОборот,
	|	ИсчисленоПоЗЛ.ПФРСтраховаяОборот КАК ПФРСтраховаяОборот,
	|	ИсчисленоПоЗЛ.ОтчетныйПериод КАК ОтчетныйПериод,
	|	НАЧАЛОПЕРИОДА(ИсчисленоПоЗЛ.ОтчетныйПериод, ГОД) КАК ГодОтчетногоПериода,
	|	ВЫБОР
	|		КОГДА Инвалиды.Физлицо ЕСТЬ НЕ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов)
	|		ИНАЧЕ ВидыТарифныхСтавокОрганизаций.ВидТарифаСтраховыхВзносов
	|	КОНЕЦ КАК ВидТарифаСтраховыхВзносов
	|ПОМЕСТИТЬ ВТИсчисленоПоЗЛпоВидамТарифа
	|ИЗ
	|	ВТИсчисленоПоЗЛ КАК ИсчисленоПоЗЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнвалиды КАК Инвалиды
	|		ПО ИсчисленоПоЗЛ.ФизЛицо = Инвалиды.Физлицо
	|			И ИсчисленоПоЗЛ.МесяцОтчетногоПериода = Инвалиды.МесяцОтчетногоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыТарифныхСтавокОрганизаций КАК ВидыТарифныхСтавокОрганизаций
	|		ПО ИсчисленоПоЗЛ.МесяцОтчетногоПериода = ВидыТарифныхСтавокОрганизаций.МесяцОтчетногоПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсчисленоПоЗЛ.ФизЛицо,
	|	ИсчисленоПоЗЛ.ПФРНакопительнаяЕНВДОборот,
	|	ИсчисленоПоЗЛ.ПФРСтраховаяЕНВДОборот,
	|	ИсчисленоПоЗЛ.ОтчетныйПериод,
	|	НАЧАЛОПЕРИОДА(ИсчисленоПоЗЛ.ОтчетныйПериод, ГОД),
	|	ВЫБОР
	|		КОГДА Инвалиды.Физлицо ЕСТЬ НЕ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕНВД)
	|	КОНЕЦ
	|ИЗ
	|	ВТИсчисленоПоЗЛ КАК ИсчисленоПоЗЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнвалиды КАК Инвалиды
	|		ПО ИсчисленоПоЗЛ.ФизЛицо = Инвалиды.Физлицо
	|			И ИсчисленоПоЗЛ.МесяцОтчетногоПериода = Инвалиды.МесяцОтчетногоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсчисленоПоЗЛ.ФизЛицо,
	|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц,
	|	СУММА(ИсчисленоПоЗЛ.ПФРСтраховаяОборот) КАК ПФРСтраховая,
	|	СУММА(ИсчисленоПоЗЛ.ПФРНакопительнаяОборот) КАК ПФРНакопительная
	|ПОМЕСТИТЬ ВТНачисленоЗаОтчетныйПериодФормирования
	|ИЗ
	|	ВТИсчисленоПоЗЛпоВидамТарифа КАК ИсчисленоПоЗЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаКатегории КАК СоответствиеТарифаКатегории
	|		ПО (&ОтчетныйГод МЕЖДУ СоответствиеТарифаКатегории.ГодС И СоответствиеТарифаКатегории.ГодПо)
	|			И ИсчисленоПоЗЛ.ВидТарифаСтраховыхВзносов = СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц,
	|	ИсчисленоПоЗЛ.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоСтраховымВзносамОбороты.ПФРСтраховаяПриход КАК ПФРСтраховаяПриход,
	|	РасчетыПоСтраховымВзносамОбороты.ПФРНакопительнаяПриход КАК ПФРНакопительнаяПриход
	|ПОМЕСТИТЬ ВТВсегоНачислено
	|ИЗ
	|	РегистрНакопления.РасчетыПоСтраховымВзносам.Обороты(
	|			,
	|			&ДатаАктуальности,
	|			,
	|			ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|				И Организация = &Организация
	|				И ОтчетныйПериодПерсучетаПФР = &ОтчетныйПериод) КАК РасчетыПоСтраховымВзносамОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоСтраховымВзносамОбороты.ПФРСтраховаяРасход КАК ПФРСтраховаяРасход,
	|	РасчетыПоСтраховымВзносамОбороты.ПФРНакопительнаяРасход КАК ПФРНакопительнаяРасход,
	|	""Уплата"" КАК ВидСтроки
	|ПОМЕСТИТЬ ВТВсегоУплачено
	|ИЗ
	|	РегистрНакопления.РасчетыПоСтраховымВзносам.Обороты(
	|			&ОтчетныйПериод,
	|			&КонецПериодаУплаты,
	|			Месяц,
	|			ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|				И ОтчетныйПериодПерсучетаПФР >= &ДатаЗаменыЕСН
	|				И Организация = &Организация) КАК РасчетыПоСтраховымВзносамОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОстатки.ПФРСтраховаяОстаток > 0
	|			ТОГДА 0
	|		ИНАЧЕ -РасчетыПоСтраховымВзносамОстатки.ПФРСтраховаяОстаток
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОстатки.ПФРНакопительнаяОстаток > 0
	|			ТОГДА 0
	|		ИНАЧЕ -РасчетыПоСтраховымВзносамОстатки.ПФРНакопительнаяОстаток
	|	КОНЕЦ,
	|	""Переплата""
	|ИЗ
	|	РегистрНакопления.РасчетыПоСтраховымВзносам.Остатки(
	|			&ОтчетныйПериод,
	|			ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|				И ОтчетныйПериодПерсучетаПФР >= &ДатаЗаменыЕСН
	|				И Организация = &Организация) КАК РасчетыПоСтраховымВзносамОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо,
	|	ВЫБОР
	|		КОГДА &ОтчетныйГод = ГОД(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ОтчетныйПериод)
	|			ТОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.КатегорияЗастрахованныхЛиц
	|		КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.КатегорияЗастрахованныхЛиц = ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.УСЕН)
	|			ТОГДА СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц
	|		КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.КатегорияЗастрахованныхЛиц = ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ)
	|		ИНАЧЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.КатегорияЗастрахованныхЛиц
	|	КОНЕЦ КАК КатегорияЗастрахованныхЛиц,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НачисленоНакопительная,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НачисленоСтраховая,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.УплаченоНакопительная,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.УплаченоСтраховая,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ОтчетныйПериод
	|ПОМЕСТИТЬ ВТПринятоУплаты
	|ИЗ
	|	ВТПринятоВПФР КАК ПринятоВПФР
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаСЗВ4вПФР.ПачкиДокументов КАК ПередачаСЗВ4вПФРПачкиДокументов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
	|			ПО ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка
	|		ПО ПринятоВПФР.КомплектДокументов = ПередачаСЗВ4вПФРПачкиДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыТарифныхСтавокОрганизаций КАК ТарифыСтавокОрганизации
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаКатегории КАК СоответствиеТарифаКатегории
	|			ПО (ГОД(ТарифыСтавокОрганизации.МесяцОтчетногоПериода) МЕЖДУ СоответствиеТарифаКатегории.ГодС И СоответствиеТарифаКатегории.ГодПо)
	|				И ТарифыСтавокОрганизации.ВидТарифаСтраховыхВзносов = СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов
	|		ПО (&ОтчетныйПериод = ТарифыСтавокОрганизации.МесяцОтчетногоПериода)
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПринятоУплаты.ОтчетныйПериод КАК ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА &ОтчетныйГод = ГОД(ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка.КорректируемыйПериод)
	|			ТОГДА ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка.КатегорияЗастрахованныхЛиц
	|		КОГДА ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка.КатегорияЗастрахованныхЛиц = ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.УСЕН)
	|			ТОГДА СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц
	|		КОГДА ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка.КатегорияЗастрахованныхЛиц = ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ)
	|		ИНАЧЕ ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка.КатегорияЗастрахованныхЛиц
	|	КОНЕЦ КАК КатегорияЗастрахованныхЛиц,
	|	ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка
	|ПОМЕСТИТЬ ВТДокументыКорректировки
	|ИЗ
	|	ВТПринятоУплаты КАК ПринятоУплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПринятыеПФР КАК Корректировки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаСЗВ4вПФР.ПачкиДокументов КАК ПередачаСЗВ4вПФРПачкиДокументов
	|			ПО Корректировки.КомплектДокументов = ПередачаСЗВ4вПФРПачкиДокументов.Ссылка
	|		ПО ПринятоУплаты.ОтчетныйПериод < Корректировки.ОтчетныйПериодПерсучетаПФР
	|			И (&ОтчетныйПериод > Корректировки.ОтчетныйПериодПерсучетаПФР)
	|			И (Корректировки.Организация = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыТарифныхСтавокОрганизаций КАК ТарифыСтавокОрганизации
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаКатегории КАК СоответствиеТарифаКатегории
	|			ПО (ГОД(ТарифыСтавокОрганизации.МесяцОтчетногоПериода) МЕЖДУ СоответствиеТарифаКатегории.ГодС И СоответствиеТарифаКатегории.ГодПо)
	|				И ТарифыСтавокОрганизации.ВидТарифаСтраховыхВзносов = СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов
	|		ПО (&ОтчетныйПериод = ТарифыСтавокОрганизации.МесяцОтчетногоПериода)
	|ГДЕ
	|	ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка.ТипСведенийСЗВ В (ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ), ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОписаниеДокумента.ОтчетныйПериод,
	|	ОписаниеДокумента.ФизЛицо,
	|	ОписаниеДокумента.КатегорияЗастрахованныхЛиц,
	|	ВЫБОР
	|		КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ)
	|			ТОГДА 0
	|		ИНАЧЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.УплаченоСтраховая
	|	КОНЕЦ КАК УплаченоСтраховая,
	|	ВЫБОР
	|		КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ)
	|			ТОГДА 0
	|		ИНАЧЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.УплаченоНакопительная
	|	КОНЕЦ КАК УплаченоНакопительная,
	|	ВЫБОР
	|		КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ)
	|			ТОГДА 0
	|		ИНАЧЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НачисленоСтраховая
	|	КОНЕЦ КАК НачисленоСтраховая,
	|	ВЫБОР
	|		КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ)
	|			ТОГДА 0
	|		ИНАЧЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НачисленоНакопительная
	|	КОНЕЦ КАК НачисленоНакопительная
	|ПОМЕСТИТЬ ВТКорректировкиПринятыеПФР
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПринятоУплаты.ОтчетныйПериод КАК ОтчетныйПериод,
	|		ПринятоУплаты.ФизЛицо КАК ФизЛицо,
	|		МАКСИМУМ(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ОтчетныйПериод) КАК ОтчетныйПериодКорректировки,
	|		ПринятоУплаты.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц
	|	ИЗ
	|		ВТПринятоУплаты КАК ПринятоУплаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыКорректировки КАК Корректировки
	|			ПО ПринятоУплаты.ОтчетныйПериод = Корректировки.ОтчетныйПериод
	|				И ПринятоУплаты.КатегорияЗастрахованныхЛиц = Корректировки.КатегорияЗастрахованныхЛиц
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
	|			ПО ПринятоУплаты.ОтчетныйПериод = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.КорректируемыйПериод
	|				И ПринятоУплаты.ФизЛицо = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо
	|				И (Корректировки.ДокументПачка = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка)
	|	ГДЕ
	|		СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо ЕСТЬ НЕ NULL 
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПринятоУплаты.ОтчетныйПериод,
	|		ПринятоУплаты.ФизЛицо,
	|		ПринятоУплаты.КатегорияЗастрахованныхЛиц) КАК ОписаниеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыКорректировки КАК Корректировки
	|		ПО ОписаниеДокумента.ОтчетныйПериод = Корректировки.ОтчетныйПериод
	|			И ОписаниеДокумента.КатегорияЗастрахованныхЛиц = Корректировки.КатегорияЗастрахованныхЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
	|		ПО ОписаниеДокумента.ОтчетныйПериод = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.КорректируемыйПериод
	|			И ОписаниеДокумента.ФизЛицо = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо
	|			И ОписаниеДокумента.ОтчетныйПериодКорректировки = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ОтчетныйПериод
	|			И (Корректировки.ДокументПачка = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка)
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПринятоУплаты.ФизЛицо,
	|	ПринятоУплаты.КатегорияЗастрахованныхЛиц,
	|	СУММА(ЕСТЬNULL(КорректировкиПринятыеПФР.УплаченоНакопительная, ПринятоУплаты.УплаченоНакопительная)) КАК УплаченоНакопительная,
	|	СУММА(ЕСТЬNULL(КорректировкиПринятыеПФР.УплаченоСтраховая, ПринятоУплаты.УплаченоСтраховая)) КАК УплаченоСтраховая,
	|	СУММА(ЕСТЬNULL(КорректировкиПринятыеПФР.НачисленоНакопительная, ПринятоУплаты.НачисленоНакопительная)) КАК НачисленоНакопительная,
	|	СУММА(ЕСТЬNULL(КорректировкиПринятыеПФР.НачисленоСтраховая, ПринятоУплаты.НачисленоСтраховая)) КАК НачисленоСтраховая
	|ПОМЕСТИТЬ ВТУплатыПринятыеПФР
	|ИЗ
	|	ВТПринятоУплаты КАК ПринятоУплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКорректировкиПринятыеПФР КАК КорректировкиПринятыеПФР
	|		ПО ПринятоУплаты.ФизЛицо = КорректировкиПринятыеПФР.ФизЛицо
	|			И ПринятоУплаты.ОтчетныйПериод = КорректировкиПринятыеПФР.ОтчетныйПериод
	|			И ПринятоУплаты.КатегорияЗастрахованныхЛиц = КорректировкиПринятыеПФР.КатегорияЗастрахованныхЛиц
	|
	|СГРУППИРОВАТЬ ПО
	|	ПринятоУплаты.ФизЛицо,
	|	ПринятоУплаты.КатегорияЗастрахованныхЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УплатыПринятыеПФР.ФизЛицо
	|ПОМЕСТИТЬ ВТФизлицаСПереплатой
	|ИЗ
	|	ВТУплатыПринятыеПФР КАК УплатыПринятыеПФР
	|
	|СГРУППИРОВАТЬ ПО
	|	УплатыПринятыеПФР.ФизЛицо
	|
	|ИМЕЮЩИЕ
	|	(СУММА(УплатыПринятыеПФР.НачисленоНакопительная) < СУММА(УплатыПринятыеПФР.УплаченоНакопительная)
	|		ИЛИ СУММА(УплатыПринятыеПФР.НачисленоСтраховая) < СУММА(УплатыПринятыеПФР.УплаченоСтраховая))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УплатыПринятыеПФР.ФизЛицо,
	|	УплатыПринятыеПФР.КатегорияЗастрахованныхЛиц,
	|	УплатыПринятыеПФР.НачисленоНакопительная - УплатыПринятыеПФР.УплаченоНакопительная КАК Накопительная,
	|	УплатыПринятыеПФР.НачисленоСтраховая - УплатыПринятыеПФР.УплаченоСтраховая КАК Страховая
	|ПОМЕСТИТЬ ВТНедоуплаченоЗаПрошлыеПериоды
	|ИЗ
	|	ВТУплатыПринятыеПФР КАК УплатыПринятыеПФР
	|ГДЕ
	|	(НЕ УплатыПринятыеПФР.ФизЛицо В
	|				(ВЫБРАТЬ
	|					ФизЛица.ФизЛицо
	|				ИЗ
	|					ВТФизлицаСПереплатой КАК ФизЛица))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПрошлыеПериоды.Накопительная, 0) КАК Накопительная,
	|	ЕСТЬNULL(ПрошлыеПериоды.Страховая, 0) КАК Страховая,
	|	ЕСТЬNULL(ВсегоНачислено.ПФРСтраховаяПриход, 0) КАК ПФРСтраховаяПриход,
	|	ЕСТЬNULL(ВсегоНачислено.ПФРНакопительнаяПриход, 0) КАК ПФРНакопительнаяПриход,
	|	ЕСТЬNULL(ВсегоУплачено.ПФРСтраховаяРасход, 0) КАК ПФРСтраховаяРасход,
	|	ЕСТЬNULL(ВсегоУплачено.ПФРНакопительнаяРасход, 0) КАК ПФРНакопительнаяРасход,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВсегоНачислено.ПФРСтраховаяПриход, 0) = 0
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ПрошлыеПериоды.Страховая, 0) > ЕСТЬNULL(ВсегоУплачено.ПФРСтраховаяРасход, 0)
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ВсегоУплачено.ПФРСтраховаяРасход, 0) - ЕСТЬNULL(ПрошлыеПериоды.Страховая, 0) > ЕСТЬNULL(ВсегоНачислено.ПФРСтраховаяПриход, 0)
	|			ТОГДА 100000
	|		ИНАЧЕ ВЫРАЗИТЬ((ЕСТЬNULL(ВсегоУплачено.ПФРСтраховаяРасход, 0) - ЕСТЬNULL(ПрошлыеПериоды.Страховая, 0)) * 100000 / (ВЫРАЗИТЬ(ЕСТЬNULL(ВсегоНачислено.ПФРСтраховаяПриход, 0) КАК ЧИСЛО(25, 6))) КАК ЧИСЛО(20, 6))
	|	КОНЕЦ КАК КоэффициентТекущегоПериодаСтраховая,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВсегоНачислено.ПФРНакопительнаяПриход, 0) = 0
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ПрошлыеПериоды.Накопительная, 0) > ЕСТЬNULL(ВсегоУплачено.ПФРНакопительнаяРасход, 0)
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ВсегоУплачено.ПФРНакопительнаяРасход, 0) - ЕСТЬNULL(ПрошлыеПериоды.Накопительная, 0) > ЕСТЬNULL(ВсегоНачислено.ПФРНакопительнаяПриход, 0)
	|			ТОГДА 100000
	|		ИНАЧЕ ВЫРАЗИТЬ((ЕСТЬNULL(ВсегоУплачено.ПФРНакопительнаяРасход, 0) - ЕСТЬNULL(ПрошлыеПериоды.Накопительная, 0)) * 100000 / (ВЫРАЗИТЬ(ЕСТЬNULL(ВсегоНачислено.ПФРНакопительнаяПриход, 0) КАК ЧИСЛО(25, 6))) КАК ЧИСЛО(20, 6))
	|	КОНЕЦ КАК КоэффициентТекущегоПериодаНакопительная,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПрошлыеПериоды.Страховая, 0) = 0
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ПрошлыеПериоды.Страховая, 0) < ЕСТЬNULL(ВсегоУплачено.ПФРСтраховаяРасход, 0)
	|			ТОГДА 100000
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ВсегоУплачено.ПФРСтраховаяРасход, 0) * 100000 / (ВЫРАЗИТЬ(ЕСТЬNULL(ПрошлыеПериоды.Страховая, 0) КАК ЧИСЛО(25, 6))) КАК ЧИСЛО(20, 6))
	|	КОНЕЦ КАК КоэффициентПрошлыхПериодовСтраховая,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПрошлыеПериоды.Накопительная, 0) = 0
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ПрошлыеПериоды.Накопительная, 0) < ЕСТЬNULL(ВсегоУплачено.ПФРНакопительнаяРасход, 0)
	|			ТОГДА 100000
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ВсегоУплачено.ПФРНакопительнаяРасход, 0) * 100000 / (ВЫРАЗИТЬ(ЕСТЬNULL(ПрошлыеПериоды.Накопительная, 0) КАК ЧИСЛО(25, 6))) КАК ЧИСЛО(20, 6))
	|	КОНЕЦ КАК КоэффициентПрошлыхПериодовНакопительная,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПрошлыеПериоды.Страховая, 0) + ЕСТЬNULL(ВсегоНачислено.ПФРСтраховаяПриход, 0) > ЕСТЬNULL(ВсегоУплачено.ПФРСтраховаяРасход, 0)
	|			ТОГДА ЕСТЬNULL(ВсегоУплачено.ПФРСтраховаяРасход, 0)
	|		ИНАЧЕ ЕСТЬNULL(ПрошлыеПериоды.Страховая, 0) + ЕСТЬNULL(ВсегоНачислено.ПФРСтраховаяПриход, 0)
	|	КОНЕЦ КАК УчтеноУплатыСтраховая,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПрошлыеПериоды.Накопительная, 0) + ЕСТЬNULL(ВсегоНачислено.ПФРНакопительнаяПриход, 0) > ЕСТЬNULL(ВсегоУплачено.ПФРНакопительнаяРасход, 0)
	|			ТОГДА ЕСТЬNULL(ВсегоУплачено.ПФРНакопительнаяРасход, 0)
	|		ИНАЧЕ ЕСТЬNULL(ПрошлыеПериоды.Накопительная, 0) + ЕСТЬNULL(ВсегоНачислено.ПФРНакопительнаяПриход, 0)
	|	КОНЕЦ КАК УчтеноУплатыНакопительная
	|ПОМЕСТИТЬ ВТКоэффициентыУплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК Поле) КАК СтрокаЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсегоНачислено КАК ВсегоНачислено
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ВсегоУплачено.ПФРСтраховаяРасход) КАК ПФРСтраховаяРасход,
	|			СУММА(ВсегоУплачено.ПФРНакопительнаяРасход) КАК ПФРНакопительнаяРасход
	|		ИЗ
	|			ВТВсегоУплачено КАК ВсегоУплачено) КАК ВсегоУплачено
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(НедоуплаченоЗаПрошлыеПериоды.Накопительная) КАК Накопительная,
	|			СУММА(НедоуплаченоЗаПрошлыеПериоды.Страховая) КАК Страховая
	|		ИЗ
	|			ВТНедоуплаченоЗаПрошлыеПериоды КАК НедоуплаченоЗаПрошлыеПериоды) КАК ПрошлыеПериоды
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НедоуплаченоЗаПрошлыеПериоды.ФизЛицо КАК ФизЛицо,
	|	НедоуплаченоЗаПрошлыеПериоды.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	НедоуплаченоЗаПрошлыеПериоды.Накопительная * КоэффициентыУплаты.КоэффициентПрошлыхПериодовНакопительная / 100000 КАК УплаченоНакопительная,
	|	НедоуплаченоЗаПрошлыеПериоды.Страховая * КоэффициентыУплаты.КоэффициентПрошлыхПериодовСтраховая / 100000 КАК УплаченоСтраховая,
	|	0 КАК НачисленоСтраховая,
	|	0 КАК НачисленоНакопительная,
	|	""Прошлые периоды"" КАК ВидСтроки
	|ПОМЕСТИТЬ ВТРасчетСумм
	|ИЗ
	|	ВТНедоуплаченоЗаПрошлыеПериоды КАК НедоуплаченоЗаПрошлыеПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыУплаты КАК КоэффициентыУплаты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(НедоуплаченоЗаПрошлыеПериоды.Накопительная <> 0
	|			ИЛИ НедоуплаченоЗаПрошлыеПериоды.Страховая <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачисленоПоЗЛ.ФизЛицо,
	|	НачисленоПоЗЛ.КатегорияЗастрахованныхЛиц,
	|	НачисленоПоЗЛ.ПФРНакопительная * КоэффициентыУплаты.КоэффициентТекущегоПериодаНакопительная / 100000,
	|	НачисленоПоЗЛ.ПФРСтраховая * КоэффициентыУплаты.КоэффициентТекущегоПериодаСтраховая / 100000,
	|	НачисленоПоЗЛ.ПФРСтраховая,
	|	НачисленоПоЗЛ.ПФРНакопительная,
	|	""Текущий период""
	|ИЗ
	|	ВТНачисленоЗаОтчетныйПериодФормирования КАК НачисленоПоЗЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыУплаты КАК КоэффициентыУплаты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(НачисленоПоЗЛ.ПФРНакопительная <> 0
	|			ИЛИ НачисленоПоЗЛ.ПФРСтраховая <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Уплачено.УчтеноУплатыСтраховая КАК Страховая,
	|	Уплачено.УчтеноУплатыНакопительная КАК Накопительная
	|ИЗ
	|	ВТКоэффициентыУплаты КАК Уплачено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(РасчетныеДанные.УплаченоСтраховая КАК ЧИСЛО(15, 2))), 0) КАК Страховая,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(РасчетныеДанные.УплаченоНакопительная КАК ЧИСЛО(15, 2))), 0) КАК Накопительная
	|ИЗ
	|	ВТРасчетСумм КАК РасчетныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетныеДанные.ФизЛицо КАК ФизЛицо,
	|	РасчетныеДанные.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	СУММА(РасчетныеДанные.УплаченоНакопительная) КАК УплаченоНакопительная,
	|	СУММА(РасчетныеДанные.УплаченоСтраховая) КАК УплаченоСтраховая,
	|	СУММА(РасчетныеДанные.НачисленоСтраховая) КАК НачисленоСтраховая,
	|	СУММА(РасчетныеДанные.НачисленоНакопительная) КАК НачисленоНакопительная
	|ИЗ
	|	ВТРасчетСумм КАК РасчетныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетныеДанные.ФизЛицо,
	|	РасчетныеДанные.КатегорияЗастрахованныхЛиц
	|
	|ИМЕЮЩИЕ
	|	(СУММА(РасчетныеДанные.УплаченоНакопительная) <> 0
	|		ИЛИ СУММА(РасчетныеДанные.УплаченоСтраховая) <> 0
	|		ИЛИ СУММА(РасчетныеДанные.НачисленоСтраховая) <> 0
	|		ИЛИ СУММА(РасчетныеДанные.НачисленоНакопительная) <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	КатегорияЗастрахованныхЛиц";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрСведений.УчетнаяПолитикаНалоговыйУчет", ЗаполнениеРегламентированнойОтчетностиПереопределяемый.ИмяУчетнойПолитики());
	Результаты = Запрос.ВыполнитьПакет();
	ВсегоЗапросов = Результаты.Количество();
	РезультатЗапроса = Результаты[ВсегоЗапросов - 1].Выгрузить();
	Распределено = Результаты[ВсегоЗапросов - 2].Выбрать();
	Распределено.Следующий();
	Зарегистрировано = Результаты[ВсегоЗапросов - 3].Выбрать();
	Зарегистрировано.Следующий();
	
	Если Зарегистрировано.Страховая <> Распределено.Страховая Или Зарегистрировано.Накопительная <> Распределено.Накопительная Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетныеДанные.ФизЛицо КАК ФизЛицо,
		|	РасчетныеДанные.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|	СУММА(РасчетныеДанные.УплаченоНакопительная) КАК УплаченоНакопительная,
		|	СУММА(ВЫРАЗИТЬ(РасчетныеДанные.УплаченоНакопительная КАК ЧИСЛО(15, 2))) КАК Итог
		|ИЗ
		|	ВТРасчетСумм КАК РасчетныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетныеДанные.ФизЛицо,
		|	РасчетныеДанные.КатегорияЗастрахованныхЛиц
		|
		|ИМЕЮЩИЕ
		|	(СУММА(РасчетныеДанные.УплаченоНакопительная) <> 0
		|		ИЛИ СУММА(РасчетныеДанные.НачисленоНакопительная) <> 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетныеДанные.ФизЛицо КАК ФизЛицо,
		|	РасчетныеДанные.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|	СУММА(РасчетныеДанные.УплаченоСтраховая) КАК УплаченоСтраховая,
		|	СУММА(ВЫРАЗИТЬ(РасчетныеДанные.УплаченоСтраховая КАК ЧИСЛО(15, 2))) КАК Итог
		|ИЗ
		|	ВТРасчетСумм КАК РасчетныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетныеДанные.ФизЛицо,
		|	РасчетныеДанные.КатегорияЗастрахованныхЛиц
		|
		|ИМЕЮЩИЕ
		|	(СУММА(РасчетныеДанные.УплаченоСтраховая) <> 0
		|		ИЛИ СУММА(РасчетныеДанные.НачисленоСтраховая) <> 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизЛицо";
		
		Результаты = Запрос.ВыполнитьПакет();
		ВсегоЗапросов = Результаты.Количество();
		СтруктураПоиска = Новый Структура("ФизЛицо,КатегорияЗастрахованныхЛиц"); 
		Если Зарегистрировано.Страховая <> Распределено.Страховая Тогда
			Расхождение = Зарегистрировано.Страховая - Распределено.Страховая;
			ВременнаяТаблица = Результаты[ВсегоЗапросов - 1].Выгрузить();
			ОкруглитьСлагаемыеПоСумме(ВременнаяТаблица,"УплаченоСтраховая", ВременнаяТаблица.Итог("Итог") + Расхождение, 2, "ФизЛицо,КатегорияЗастрахованныхЛиц");
			Для каждого СтрокаТЧ Из ВременнаяТаблица Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
				РезультатЗапроса.НайтиСтроки(СтруктураПоиска)[0].УплаченоСтраховая = СтрокаТЧ.УплаченоСтраховая;
			КонецЦикла;
		КонецЕсли;
		Если Зарегистрировано.Накопительная <> Распределено.Накопительная Тогда
			Расхождение = Зарегистрировано.Накопительная - Распределено.Накопительная;
			ВременнаяТаблица = Результаты[ВсегоЗапросов - 2].Выгрузить();
			ОкруглитьСлагаемыеПоСумме(ВременнаяТаблица,"УплаченоНакопительная", ВременнаяТаблица.Итог("Итог") + Расхождение, 2, "ФизЛицо,КатегорияЗастрахованныхЛиц");
			Для каждого СтрокаТЧ Из ВременнаяТаблица Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
				РезультатЗапроса.НайтиСтроки(СтруктураПоиска)[0].УплаченоНакопительная = СтрокаТЧ.УплаченоНакопительная;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из РезультатЗапроса Цикл
		СтрокаТЧ.УплаченоСтраховая = Окр(СтрокаТЧ.УплаченоСтраховая, 2);
		СтрокаТЧ.УплаченоНакопительная = Окр(СтрокаТЧ.УплаченоНакопительная, 2);
	КонецЦикла;
	
	Если МассивФизлиц <> Неопределено Тогда
		Запрос.УстановитьПараметр("РезультатЗапроса", РезультатЗапроса);
		Запрос.УстановитьПараметр("МассивФизлиц", МассивФизлиц);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетСумм.ФизЛицо КАК ФизЛицо,
		|	РасчетСумм.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|	РасчетСумм.УплаченоНакопительная,
		|	РасчетСумм.УплаченоСтраховая,
		|	РасчетСумм.НачисленоСтраховая,
		|	РасчетСумм.НачисленоНакопительная
		|ПОМЕСТИТЬ ВТРезультатЗапроса
		|ИЗ
		|	&РезультатЗапроса КАК РасчетСумм
		|ГДЕ
		|	РасчетСумм.ФизЛицо В(&МассивФизлиц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатЗапроса.ФизЛицо КАК ФизЛицо,
		|	РезультатЗапроса.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|	РезультатЗапроса.УплаченоНакопительная,
		|	РезультатЗапроса.УплаченоСтраховая,
		|	РезультатЗапроса.НачисленоСтраховая,
		|	РезультатЗапроса.НачисленоНакопительная
		|ИЗ
		|	ВТРезультатЗапроса КАК РезультатЗапроса
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизЛицо,
		|	КатегорияЗастрахованныхЛиц";
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		Запрос.УстановитьПараметр("РезультатЗапроса", РезультатЗапроса);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетСумм.ФизЛицо,
		|	РасчетСумм.КатегорияЗастрахованныхЛиц,
		|	РасчетСумм.УплаченоНакопительная,
		|	РасчетСумм.УплаченоСтраховая,
		|	РасчетСумм.НачисленоСтраховая,
		|	РасчетСумм.НачисленоНакопительная
		|ПОМЕСТИТЬ ВТРасчетСуммСПодгонкой
		|ИЗ
		|	&РезультатЗапроса КАК РасчетСумм";
		Запрос.Выполнить();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КоэффициентыУплаты.Накопительная,
		|	КоэффициентыУплаты.Страховая,
		|	КоэффициентыУплаты.ПФРСтраховаяПриход,
		|	КоэффициентыУплаты.ПФРНакопительнаяПриход,
		|	КоэффициентыУплаты.ПФРСтраховаяРасход КАК ВсегоУплаченоСтраховая,
		|	КоэффициентыУплаты.ПФРНакопительнаяРасход КАК ВсегоУплаченоНакопительная,
		|	ЕСТЬNULL(Уплата.ПФРСтраховаяРасход, 0) КАК ЗачтенаПереплатаСтраховая,
		|	ЕСТЬNULL(Уплата.ПФРНакопительнаяРасход, 0) КАК ЗачтенаПереплатаНакопительная,
		|	КоэффициентыУплаты.КоэффициентТекущегоПериодаСтраховая,
		|	КоэффициентыУплаты.КоэффициентТекущегоПериодаНакопительная,
		|	КоэффициентыУплаты.КоэффициентПрошлыхПериодовСтраховая,
		|	КоэффициентыУплаты.КоэффициентПрошлыхПериодовНакопительная
		|ИЗ
		|	ВТКоэффициентыУплаты КАК КоэффициентыУплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СУММА(ВсегоУплачено.ПФРСтраховаяРасход) КАК ПФРСтраховаяРасход,
		|			СУММА(ВсегоУплачено.ПФРНакопительнаяРасход) КАК ПФРНакопительнаяРасход
		|		ИЗ
		|			ВТВсегоУплачено КАК ВсегоУплачено
		|		ГДЕ
		|			ВсегоУплачено.ВидСтроки = ""Переплата"") КАК Уплата
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НедоуплаченоЗаПрошлыеПериоды.ФизЛицо.Наименование КАК ФИО,
		|	НедоуплаченоЗаПрошлыеПериоды.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|	НедоуплаченоЗаПрошлыеПериоды.Накопительная,
		|	НедоуплаченоЗаПрошлыеПериоды.Страховая
		|ИЗ
		|	ВТНедоуплаченоЗаПрошлыеПериоды КАК НедоуплаченоЗаПрошлыеПериоды
		|ГДЕ
		|	(НедоуплаченоЗаПрошлыеПериоды.Накопительная > 0
		|			ИЛИ НедоуплаченоЗаПрошлыеПериоды.Страховая > 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФИО,
		|	КатегорияЗастрахованныхЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеСПодгонкой.ВидСтроки КАК Период,
		|	ДанныеСПодгонкой.ФизЛицо КАК ФизЛицо,
		|	ДанныеСПодгонкой.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|	СУММА(ДанныеСПодгонкой.УплаченоНакопительная) КАК УплаченоНакопительная,
		|	СУММА(ДанныеСПодгонкой.УплаченоСтраховая) КАК УплаченоСтраховая,
		|	СУММА(ДанныеСПодгонкой.НачисленоСтраховая) КАК НачисленоСтраховая,
		|	СУММА(ДанныеСПодгонкой.НачисленоНакопительная) КАК НачисленоНакопительная,
		|	ВЫБОР
		|		КОГДА ДанныеСПодгонкой.ВидСтроки = ""Текущий период""
		|			ТОГДА КоэффициентыУплаты.КоэффициентТекущегоПериодаСтраховая
		|		ИНАЧЕ КоэффициентыУплаты.КоэффициентПрошлыхПериодовСтраховая
		|	КОНЕЦ КАК КоэффициентУплатыСтраховая,
		|	ВЫБОР
		|		КОГДА ДанныеСПодгонкой.ВидСтроки = ""Текущий период""
		|			ТОГДА КоэффициентыУплаты.КоэффициентТекущегоПериодаНакопительная
		|		ИНАЧЕ КоэффициентыУплаты.КоэффициентПрошлыхПериодовНакопительная
		|	КОНЕЦ КАК КоэффициентУплатыНакопительная
		|ИЗ
		|	(ВЫБРАТЬ
		|		""Текущий период"" КАК ВидСтроки,
		|		РасчетСумм.ФизЛицо КАК ФизЛицо,
		|		РасчетСумм.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|		-РасчетСумм.УплаченоНакопительная КАК УплаченоНакопительная,
		|		-РасчетСумм.УплаченоСтраховая КАК УплаченоСтраховая,
		|		-РасчетСумм.НачисленоСтраховая КАК НачисленоСтраховая,
		|		-РасчетСумм.НачисленоНакопительная КАК НачисленоНакопительная
		|	ИЗ
		|		ВТРасчетСумм КАК РасчетСумм
		|	ГДЕ
		|		РасчетСумм.ВидСтроки = ""Прошлые периоды""
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""Текущий период"",
		|		РасчетСумм.ФизЛицо,
		|		РасчетСумм.КатегорияЗастрахованныхЛиц,
		|		РасчетСумм.УплаченоНакопительная,
		|		РасчетСумм.УплаченоСтраховая,
		|		РасчетСумм.НачисленоСтраховая,
		|		РасчетСумм.НачисленоНакопительная
		|	ИЗ
		|		ВТРасчетСуммСПодгонкой КАК РасчетСумм
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасчетСумм.ВидСтроки,
		|		РасчетСумм.ФизЛицо,
		|		РасчетСумм.КатегорияЗастрахованныхЛиц,
		|		РасчетСумм.УплаченоНакопительная,
		|		РасчетСумм.УплаченоСтраховая,
		|		РасчетСумм.НачисленоСтраховая,
		|		РасчетСумм.НачисленоНакопительная
		|	ИЗ
		|		ВТРасчетСумм КАК РасчетСумм
		|	ГДЕ
		|		РасчетСумм.ВидСтроки = ""Прошлые периоды"") КАК ДанныеСПодгонкой
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыУплаты КАК КоэффициентыУплаты
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеСПодгонкой.ВидСтроки,
		|	ДанныеСПодгонкой.ФизЛицо,
		|	ДанныеСПодгонкой.КатегорияЗастрахованныхЛиц,
		|	ВЫБОР
		|		КОГДА ДанныеСПодгонкой.ВидСтроки = ""Текущий период""
		|			ТОГДА КоэффициентыУплаты.КоэффициентТекущегоПериодаСтраховая
		|		ИНАЧЕ КоэффициентыУплаты.КоэффициентПрошлыхПериодовСтраховая
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ДанныеСПодгонкой.ВидСтроки = ""Текущий период""
		|			ТОГДА КоэффициентыУплаты.КоэффициентТекущегоПериодаНакопительная
		|		ИНАЧЕ КоэффициентыУплаты.КоэффициентПрошлыхПериодовНакопительная
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	КатегорияЗастрахованныхЛиц,
		|	ФизЛицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УплатыПринятыеПФР.ФизЛицо.Наименование КАК ФИО,
		|	УплатыПринятыеПФР.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|	ВЫБОР
		|		КОГДА УплатыПринятыеПФР.УплаченоНакопительная > УплатыПринятыеПФР.НачисленоНакопительная
		|			ТОГДА УплатыПринятыеПФР.УплаченоНакопительная - УплатыПринятыеПФР.НачисленоНакопительная
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Накопительная,
		|	ВЫБОР
		|		КОГДА УплатыПринятыеПФР.УплаченоСтраховая > УплатыПринятыеПФР.НачисленоСтраховая
		|			ТОГДА УплатыПринятыеПФР.УплаченоСтраховая - УплатыПринятыеПФР.НачисленоСтраховая
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Страховая
		|ИЗ
		|	ВТУплатыПринятыеПФР КАК УплатыПринятыеПФР
		|ГДЕ
		|	УплатыПринятыеПФР.ФизЛицо В
		|			(ВЫБРАТЬ
		|				ФизЛица.ФизЛицо
		|			ИЗ
		|				ВТФизлицаСПереплатой КАК ФизЛица)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФИО,
		|	КатегорияЗастрахованныхЛиц";
		
		РезультатыДляКомментирования = Запрос.ВыполнитьПакет();
		ТЗИтоги = РезультатыДляКомментирования[0].Выгрузить();
		ТЗПрошлыеПериоды = РезультатыДляКомментирования[1].Выгрузить();
		ТЗПрошлыеПериоды.Колонки.КатегорияЗастрахованныхЛиц.Заголовок = "Категория ЗЛ";
		ТЗСотрудников = РезультатыДляКомментирования[2].Выгрузить();
		ТЗСотрудников.Колонки.НачисленоСтраховая.Заголовок = "Начислено";
		ТЗСотрудников.Колонки.КоэффициентУплатыСтраховая.Заголовок = "Коэффициент уплаты";
		ТЗСотрудников.Колонки.УплаченоСтраховая.Заголовок = "Уплачено";
		ТЗСотрудников.Колонки.НачисленоНакопительная.Заголовок = "Начислено";
		ТЗСотрудников.Колонки.КоэффициентУплатыНакопительная.Заголовок = "Коэффициент уплаты";
		ТЗСотрудников.Колонки.УплаченоНакопительная.Заголовок = "Уплачено";
		Для каждого СтрокаТЗ Из ТЗСотрудников Цикл
		    СтрокаТЗ.КоэффициентУплатыСтраховая = Формат(СтрокаТЗ.КоэффициентУплатыСтраховая / 100000,"ЧДЦ=10; ЧН=-");
		    СтрокаТЗ.КоэффициентУплатыНакопительная = Формат(СтрокаТЗ.КоэффициентУплатыНакопительная / 100000,"ЧДЦ=10; ЧН=-");
		КонецЦикла;		
		ТЗПереплаты = РезультатыДляКомментирования[3].Выгрузить();
		ТЗПереплаты.Колонки.КатегорияЗастрахованныхЛиц.Заголовок = "Категория ЗЛ";
		
		ДанныеКомментирования.РаспределениеСУчетомПринятыхПФРДанных = Истина;
		ДанныеКомментирования.Итоги = ТЗИтоги;
		ДанныеКомментирования.ПрошлыеПериоды = ТЗПрошлыеПериоды;
		ДанныеКомментирования.РасчетСотрудников = ТЗСотрудников;
		ДанныеКомментирования.Переплаты = ТЗПереплаты;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	
	Возврат РезультатЗапроса;
	
КонецФункции // ДанныеОВзносахПоКатегориям()

Процедура ОкруглитьСлагаемыеПоСумме(Данные, ИмяКолонки, Сумма, Точность = 0, ИмяКлюча = "ФизЛицо") Экспорт 
	
	ВременнаяТаблица = Данные.Скопировать(, ИмяКлюча + "," + ИмяКолонки);
	ВременнаяТаблица.Колонки.Добавить(ИмяКолонки + "Окр");
	Для каждого СтрокаТЗ Из ВременнаяТаблица Цикл
		СтрокаТЗ[ИмяКолонки + "Окр"] = Окр(СтрокаТЗ[ИмяКолонки],Точность)
	КонецЦикла;
	
	СуммаСлагаемых = ВременнаяТаблица.Итог(ИмяКолонки + "Окр");
	Если СуммаСлагаемых = Сумма Тогда
		Данные.ЗагрузитьКолонку(ВременнаяТаблица.ВыгрузитьКолонку(ИмяКолонки + "Окр"),ИмяКолонки);
	Иначе
		Шаг = Pow(10, -Точность);
		РасхождениеСуммы = Сумма - СуммаСлагаемых;
		Приращение = ?(РасхождениеСуммы > 0, Шаг, -Шаг);
		ВсегоПриращений = Мин(РасхождениеСуммы / Приращение, ВременнаяТаблица.Количество());
		ВременнаяТаблица.Колонки.Добавить(ИмяКолонки + "Расхождение");
		ВременнаяТаблица.Колонки.Добавить(ИмяКолонки + "Изменение");
		Для каждого СтрокаТЗ Из ВременнаяТаблица Цикл
			СтрокаТЗ[ИмяКолонки + "Расхождение"] = ?(СтрокаТЗ[ИмяКолонки + "Окр"] < СтрокаТЗ[ИмяКолонки], СтрокаТЗ[ИмяКолонки] - СтрокаТЗ[ИмяКолонки + "Окр"], СтрокаТЗ[ИмяКолонки + "Окр"] - СтрокаТЗ[ИмяКолонки]);
			СтрокаТЗ[ИмяКолонки + "Изменение"] = ?(СтрокаТЗ[ИмяКолонки + "Окр"] < СтрокаТЗ[ИмяКолонки], - Шаг, Шаг);
		КонецЦикла;
		ВременнаяТаблица.Сортировать(ИмяКолонки + "Изменение" + ?(Приращение > 0,""," Убыв") + ", " + ИмяКолонки + "Расхождение Убыв");
		СтруктураПоиска = Новый Структура(ИмяКлюча); 
		Для Сч = 1 По ВсегоПриращений Цикл
			Если ВременнаяТаблица[Сч-1][ИмяКолонки + "Изменение"] <> Приращение Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВременнаяТаблица[Сч-1]);
				Данные.НайтиСтроки(СтруктураПоиска)[0][ИмяКолонки] = ВременнаяТаблица[Сч-1][ИмяКолонки + "Окр"] + Приращение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ДанныеОСтажеИВзносах(ДатаАктуальности, ОтчетныйПериод, Организация, МассивФизлиц = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод));
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НеОтбиратьФизлиц", Не ЗначениеЗаполнено(МассивФизлиц));
	Запрос.УстановитьПараметр("ТаблицаВзносов",	ДанныеОВзносахПоКатегориям(ДатаАктуальности, ОтчетныйПериод, ОтчетныйПериод, Организация, МассивФизлиц));
	Если МассивФизлиц = Неопределено Тогда
		МассивФизлиц = Новый Массив;
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивФизлиц", МассивФизлиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СуммыВзносов.ФизЛицо КАК ФизЛицо,
	|	СуммыВзносов.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	СуммыВзносов.НачисленоНакопительная,
	|	СуммыВзносов.НачисленоСтраховая,
	|	СуммыВзносов.УплаченоСтраховая,
	|	СуммыВзносов.УплаченоНакопительная
	|ПОМЕСТИТЬ ВТСуммыВзносов
	|ИЗ
	|	&ТаблицаВзносов КАК СуммыВзносов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	КатегорияЗастрахованныхЛиц";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.КодПозицииСписка,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ЗаписиОСтаже.ФизЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	ЗаписиОСтаже.ФизЛицо.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТФизЛица
	|ИЗ
	|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
	|ГДЕ
	|	ЗаписиОСтаже.ОтчетныйПериод = &ОтчетныйПериод
	|	И ЗаписиОСтаже.ОбособленноеПодразделение = &Организация
	|	И (&НеОтбиратьФизлиц
	|			ИЛИ ЗаписиОСтаже.ФизЛицо В (&МассивФизлиц))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	КатегорияЗастрахованныхЛиц";
	Запрос.Выполнить();
	
	// адреса для информирования заполняем только в том случае, когда они изменились по сравнению с последними
	// передававшимися в ПФР
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ПОМЕСТИТЬ ВТФИО
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|			&ДатаАктуальности,
	|			ФизЛицо В
	|				(ВЫБРАТЬ
	|					Лица.ФизЛицо КАК ФизЛицо
	|				ИЗ
	|					ВТФизЛица КАК Лица)) КАК ФИОФизЛицСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
	|	ЗаписиОСтаже.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаписиОСтаже.ОсобыеУсловияТруда <> ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЛьготыПоУсловиямТруда,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаписиОСтаже.ОсобыеУсловияТруда = ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка)
	|					И (ЗаписиОСтаже.ОснованиеВыслугиЛет <> ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка)
	|						ИЛИ ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа <> ЗНАЧЕНИЕ(Справочник.ОснованияИсчисляемогоТрудовогоСтажа.ПустаяСсылка))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЛьготыПоВыслуге
	|ПОМЕСТИТЬ ВТФизЛицаСЗВ61
	|ИЗ
	|	ВТФизЛица КАК ЗаписиОСтаже
	|ГДЕ
	|	(ЗаписиОСтаже.ОсобыеУсловияТруда <> ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка)
	|			ИЛИ ЗаписиОСтаже.ТерриториальныеУсловия <> ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.ПустаяСсылка)
	|			ИЛИ ЗаписиОСтаже.ОснованиеВыслугиЛет <> ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка)
	|			ИЛИ ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа <> ЗНАЧЕНИЕ(Справочник.ОснованияИсчисляемогоТрудовогоСтажа.ПустаяСсылка)
	|			ИЛИ ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа <> """")
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаписиОСтаже.КатегорияЗастрахованныхЛиц,
	|	ЗаписиОСтаже.ФизЛицо
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ЗаписиОСтаже.ОсобыеУсловияТруда) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Дата,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования
	|ПОМЕСТИТЬ ВТПереданныеВПФРДокументы
	|ИЗ
	|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования <> """"
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Организация = &Организация
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Проведен
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ПринятоВПФР
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Дата <= &ДатаАктуальности
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо В
	|			(ВЫБРАТЬ
	|				ФизЛица.ФизЛицо
	|			ИЗ
	|				ВТФизЛица КАК ФизЛица)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыДокументов.ФизЛицо КАК ФизЛицо,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования КАК АдресДляИнформирования
	|ПОМЕСТИТЬ ВТПереданныеВПФРАдреса
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Дата) КАК Дата,
	|		СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо КАК ФизЛицо
	|	ИЗ
	|		ВТПереданныеВПФРДокументы КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо) КАК ДатыДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПереданныеВПФРДокументы КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
	|		ПО ДатыДокументов.Дата = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Дата
	|			И ДатыДокументов.ФизЛицо = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизЛица.ФизЛицо КАК ФизЛицо,
	|	ФизЛица.ФизЛицо.Наименование КАК Наименование,
	|	ФизЛица.ФизЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	ФизЛица.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц
	|ПОМЕСТИТЬ ВТФизлицаПоКатегориямЗЛ
	|ИЗ
	|	ВТФизЛица КАК ФизЛица
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсчисленоПоКатегориямЗЛ.ФизЛицо,
	|	ИсчисленоПоКатегориямЗЛ.ФизЛицо.Наименование,
	|	ИсчисленоПоКатегориямЗЛ.ФизЛицо.СтраховойНомерПФР,
	|	ИсчисленоПоКатегориямЗЛ.КатегорияЗастрахованныхЛиц
	|ИЗ
	|	ВТСуммыВзносов КАК ИсчисленоПоКатегориямЗЛ
	|ГДЕ
	|	(ИсчисленоПоКатегориямЗЛ.НачисленоНакопительная > 0
	|			ИЛИ ИсчисленоПоКатегориямЗЛ.НачисленоСтраховая > 0
	|			ИЛИ ИсчисленоПоКатегориямЗЛ.УплаченоСтраховая > 0
	|			ИЛИ ИсчисленоПоКатегориямЗЛ.УплаченоНакопительная > 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	КатегорияЗастрахованныхЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизЛица.ФизЛицо КАК ФизЛицо,
	|	ФизЛица.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ЕСТЬNULL(ФизЛицаСЗВ61.ЛьготыПоУсловиямТруда, ЛОЖЬ) КАК ЛьготыПоУсловиямТруда,
	|	ЕСТЬNULL(ФизЛицаСЗВ61.ЛьготыПоВыслуге, ЛОЖЬ) КАК ЛьготыПоВыслуге,
	|	ФизЛица.Наименование КАК Наименование,
	|	ФизЛица.СтраховойНомерПФР,
	|	ВЫБОР
	|		КОГДА ФизЛица.СтраховойНомерПФР = """"
	|			ТОГДА ИСТИНА
	|		КОГДА ФизЛица.СтраховойНомерПФР = ""   -   -      ""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НетСтраховогоНомера,
	|	ВЫБОР
	|		КОГДА ФизЛицаСЗВ61.ФизЛицо ЕСТЬ НЕ NULL 
	|			ТОГДА ""СЗВ-6-1""
	|		ИНАЧЕ ""СЗВ-6-2""
	|	КОНЕЦ КАК ТипФормДокументов,
	|	ВЫБОР
	|		КОГДА ПереданныеВПФРАдреса.АдресДляИнформирования ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА АдресаДляИнформирования.Поле1 ЕСТЬ НЕ NULL 
	|						ТОГДА "","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9
	|					КОГДА АдресаФактические.Поле1 ЕСТЬ НЕ NULL 
	|						ТОГДА "","" + АдресаФактические.Поле1 + "","" + АдресаФактические.Поле2 + "","" + АдресаФактические.Поле3 + "","" + АдресаФактические.Поле4 + "","" + АдресаФактические.Поле5 + "","" + АдресаФактические.Поле6 + "","" + АдресаФактические.Поле7 + "","" + АдресаФактические.Поле8 + "","" + АдресаФактические.Поле9
	|					КОГДА АдресаРегистрации.Поле1 ЕСТЬ НЕ NULL 
	|						ТОГДА "","" + АдресаРегистрации.Поле1 + "","" + АдресаРегистрации.Поле2 + "","" + АдресаРегистрации.Поле3 + "","" + АдресаРегистрации.Поле4 + "","" + АдресаРегистрации.Поле5 + "","" + АдресаРегистрации.Поле6 + "","" + АдресаРегистрации.Поле7 + "","" + АдресаРегистрации.Поле8 + "","" + АдресаРегистрации.Поле9
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		КОГДА ВЫБОР
	|				КОГДА АдресаДляИнформирования.Поле1 ЕСТЬ НЕ NULL 
	|					ТОГДА "","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9
	|				КОГДА АдресаФактические.Поле1 ЕСТЬ НЕ NULL 
	|					ТОГДА "","" + АдресаФактические.Поле1 + "","" + АдресаФактические.Поле2 + "","" + АдресаФактические.Поле3 + "","" + АдресаФактические.Поле4 + "","" + АдресаФактические.Поле5 + "","" + АдресаФактические.Поле6 + "","" + АдресаФактические.Поле7 + "","" + АдресаФактические.Поле8 + "","" + АдресаФактические.Поле9
	|				КОГДА АдресаРегистрации.Поле1 ЕСТЬ НЕ NULL 
	|					ТОГДА "","" + АдресаРегистрации.Поле1 + "","" + АдресаРегистрации.Поле2 + "","" + АдресаРегистрации.Поле3 + "","" + АдресаРегистрации.Поле4 + "","" + АдресаРегистрации.Поле5 + "","" + АдресаРегистрации.Поле6 + "","" + АдресаРегистрации.Поле7 + "","" + АдресаРегистрации.Поле8 + "","" + АдресаРегистрации.Поле9
	|				ИНАЧЕ """"
	|			КОНЕЦ <> ПереданныеВПФРАдреса.АдресДляИнформирования
	|			ТОГДА ВЫБОР
	|					КОГДА АдресаДляИнформирования.Поле1 ЕСТЬ НЕ NULL 
	|						ТОГДА "","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9
	|					КОГДА АдресаФактические.Поле1 ЕСТЬ НЕ NULL 
	|						ТОГДА "","" + АдресаФактические.Поле1 + "","" + АдресаФактические.Поле2 + "","" + АдресаФактические.Поле3 + "","" + АдресаФактические.Поле4 + "","" + АдресаФактические.Поле5 + "","" + АдресаФактические.Поле6 + "","" + АдресаФактические.Поле7 + "","" + АдресаФактические.Поле8 + "","" + АдресаФактические.Поле9
	|					КОГДА АдресаРегистрации.Поле1 ЕСТЬ НЕ NULL 
	|						ТОГДА "","" + АдресаРегистрации.Поле1 + "","" + АдресаРегистрации.Поле2 + "","" + АдресаРегистрации.Поле3 + "","" + АдресаРегистрации.Поле4 + "","" + АдресаРегистрации.Поле5 + "","" + АдресаРегистрации.Поле6 + "","" + АдресаРегистрации.Поле7 + "","" + АдресаРегистрации.Поле8 + "","" + АдресаРегистрации.Поле9
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресДляИнформирования,
	|	ЕСТЬNULL(ФИО.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(ФИО.Имя, """") КАК Имя,
	|	ЕСТЬNULL(ФИО.Отчество, """") КАК Отчество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсчисленоПоЗЛ.НачисленоСтраховая, 0) > 0
	|			ТОГДА ЕСТЬNULL(ИсчисленоПоЗЛ.НачисленоСтраховая, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоСтраховая,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсчисленоПоЗЛ.НачисленоНакопительная, 0) > 0
	|			ТОГДА ЕСТЬNULL(ИсчисленоПоЗЛ.НачисленоНакопительная, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоНакопительная,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсчисленоПоЗЛ.УплаченоСтраховая, 0) > 0
	|			ТОГДА ЕСТЬNULL(ИсчисленоПоЗЛ.УплаченоСтраховая, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УплаченоСтраховая,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсчисленоПоЗЛ.УплаченоНакопительная, 0) > 0
	|			ТОГДА ЕСТЬNULL(ИсчисленоПоЗЛ.УплаченоНакопительная, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УплаченоНакопительная
	|ИЗ
	|	ВТФизлицаПоКатегориямЗЛ КАК ФизЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизЛицаСЗВ61 КАК ФизЛицаСЗВ61
	|		ПО ФизЛица.ФизЛицо = ФизЛицаСЗВ61.ФизЛицо
	|			И ФизЛица.КатегорияЗастрахованныхЛиц = ФизЛицаСЗВ61.КатегорияЗастрахованныхЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаФактические
	|		ПО ФизЛица.ФизЛицо = АдресаФактические.Объект
	|			И (АдресаФактические.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресФизЛица))
	|			И (АдресаФактические.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаРегистрации
	|		ПО ФизЛица.ФизЛицо = АдресаРегистрации.Объект
	|			И (АдресаРегистрации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
	|			И (АдресаРегистрации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаДляИнформирования
	|		ПО ФизЛица.ФизЛицо = АдресаДляИнформирования.Объект
	|			И (АдресаДляИнформирования.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ИнформАдресФизЛица))
	|			И (АдресаДляИнформирования.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПереданныеВПФРАдреса КАК ПереданныеВПФРАдреса
	|		ПО ФизЛица.ФизЛицо = ПереданныеВПФРАдреса.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИО КАК ФИО
	|		ПО ФизЛица.ФизЛицо = ФИО.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммыВзносов КАК ИсчисленоПоЗЛ
	|		ПО ФизЛица.ФизЛицо = ИсчисленоПоЗЛ.ФизЛицо
	|			И ФизЛица.КатегорияЗастрахованныхЛиц = ИсчисленоПоЗЛ.КатегорияЗастрахованныхЛиц
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипФормДокументов,
	|	КатегорияЗастрахованныхЛиц,
	|	ЛьготыПоУсловиямТруда,
	|	ЛьготыПоВыслуге,
	|	Наименование,
	|	ФизЛицо";
	
	РезультатЗапроса = Запрос.Выполнить();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции // ДанныеОСтажеИВзносах()

// Формирует фрагмент выходного файла по работнику и выводит печатную форму СЗВ4.
//
// Параметры:
//		ДокументРезультат	-	ТабличныйДокумент - табличный документ, куда быдет выведена печатная форма
//		ДатаАктуальности	-	дата - дата, на которую формируются данные
//		ФизЛицо				-	Справочники.ФизическиеЛица - физлицо, на которого формируются данные
//		Организация			-	Справочники.Организации - организация, по которой формируются данные
//
Процедура ВыводНаПечатьПоФизЛицу(ДокументРезультат, ДатаАктуальности, ФизЛицо, Организация) Экспорт
	
	ТипФормДокументов = "СЗВ-4-1";
	ТекстФайла = "";

	// Формирование фрагмента файла передачи В ПФР для печати формы "СЗВ-4-1"
	// Запрос по регистру ЗаписиОСтаже и СуммыВзносовДляСЗВ4
	Запрос = Новый запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
	|	ЗаписиОСтаже.Год КАК Год,
	|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
	|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
	|	СуммыВзносовДляСЗВ4.НачисленоНаСтраховуюЧастьПФР,
	|	СуммыВзносовДляСЗВ4.НачисленоНаНакопительнуюЧастьПФР,
	|	ЕСТЬNULL(СуммыВзносовДляСЗВ4.ДнейБолезни, 0) КАК ДнейБолезни,
	|	ЕСТЬNULL(СуммыВзносовДляСЗВ4.ДнейОтпускаЗаСвойСчет, 0) КАК ДнейОтпускаЗаСвойСчет
	|ИЗ
	|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыВзносовДляСЗВ4 КАК СуммыВзносовДляСЗВ4
	|		ПО ЗаписиОСтаже.ФизЛицо = СуммыВзносовДляСЗВ4.ФизЛицо
	|			И ЗаписиОСтаже.Год = СуммыВзносовДляСЗВ4.Год
	|			И ЗаписиОСтаже.ОбособленноеПодразделение = СуммыВзносовДляСЗВ4.ОбособленноеПодразделение
	|ГДЕ
	|	ЗаписиОСтаже.ФизЛицо В(&ФизЛицо)
	|	И ЗаписиОСтаже.Год В(&Год)
	|	И ЗаписиОСтаже.ОбособленноеПодразделение В(&ОбособленноеПодразделение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбособленноеПодразделение,
	|	Год,
	|	ФизЛицо,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	Запрос.УстановитьПараметр("ФизЛицо" , ФизЛицо);
	Запрос.УстановитьПараметр("Год" , Год(ДатаАктуальности));
	Запрос.УстановитьПараметр("ОбособленноеПодразделение" , Организация);
	
	// Сбор данных и формирование фрагмента файла
	ВыборкаПоРаботникиОрганизации	= Запрос.Выполнить().Выбрать();
	Если ВыборкаПоРаботникиОрганизации.Следующий() Тогда
		
		ТипЗаписиИН = "ИН41";
		ДокументФорматЗаписей = Документы.СведенияОТрудовомСтажеИЗаработкеСЗВ4.ПолучитьМакет("ФорматЗаписей");
		ФорматЗаписиИН = ПолучитьФорматЗаписи(ТипЗаписиИН,ДокументФорматЗаписей);
		Фамилия		= "";
		Имя			= "";
		Отчество	= "";
		ОбщегоНазначения.ФамилияИнициалыФизЛица(ФизЛицо.Наименование,Фамилия,Имя,Отчество);
		
		// адрес для информирования
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо",					ФизЛицо);
		Запрос.УстановитьПараметр("ДатаАктуальности",			ДатаАктуальности);
		Запрос.УстановитьПараметр("ВидАдресаДляИнформирования",	Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	"","" + КонтактнаяИнформация.Поле1 + "","" + КонтактнаяИнформация.Поле2 + "","" + КонтактнаяИнформация.Поле3 + "","" + КонтактнаяИнформация.Поле4 + "","" + КонтактнаяИнформация.Поле5 + "","" + КонтактнаяИнформация.Поле6 + "","" + КонтактнаяИнформация.Поле7 + "","" + КонтактнаяИнформация.Поле8 + "","" + КонтактнаяИнформация.Поле9 КАК АдресИзРегистра
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|ГДЕ
		|	КонтактнаяИнформация.Вид = &ВидАдресаДляИнформирования И
		|	КонтактнаяИнформация.Объект = &Физлицо";
		
		РезультатЗапроса	= Запрос.Выполнить();
		ВыборкаПоРаботнику	= РезультатЗапроса.Выбрать();
		АдресДляИнформирования = ?(ВыборкаПоРаботнику.Следующий(), ВыборкаПоРаботнику.АдресИзРегистра, "");
		Если СокрЛП(СтрЗаменить(АдресДляИнформирования, ",","")) <> "" Тогда
			АдресДляИнформирования = АдресДляИнформирования;
		Иначе	
			АдресДляИнформирования = "";
		КонецЕсли; 
		
		// Подготовка расчетных данных
		ЗаписьИН = ПолучитьСтруктуруЗаписи(ФорматЗаписиИН);
		ЗаписьИН.ТипЗаписи							= ТипЗаписиИН;
		ЗаписьИН.НомерДокументаВПачке				= 1;
		ЗаписьИН.СтраховойНомер						= ФизЛицо.СтраховойНомерПФР;
		ЗаписьИН.Фамилия							= ВРЕГ(Фамилия);
		ЗаписьИН.Имя								= ВРЕГ(Имя);
		ЗаписьИН.Отчество							= ВРЕГ(Отчество);
		ЗаписьИН.РасчетныйПериодГод					= Год(ДатаАктуальности);
		ЗаписьИН.АдресДляИнформирования				= ВРЕГ(АдресДляИнформирования);
		ЗаписьИН.ДатаЗаполнения						= ДатаАктуальности;
		ЗаписьИН.НачисленоСтраховаяЧасть			= ВыборкаПоРаботникиОрганизации.НачисленоНаСтраховуюЧастьПФР;
		ЗаписьИН.НачисленоНакопительнаяЧасть		= ВыборкаПоРаботникиОрганизации.НачисленоНаНакопительнуюЧастьПФР;
		ЗаписьИН.ВременнаяНетрудоспособностьМесяцев	= Цел(ВыборкаПоРаботникиОрганизации.ДнейБолезни/30);
		ЗаписьИН.ВременнаяНетрудоспособностьДней	= ВыборкаПоРаботникиОрганизации.ДнейБолезни%30;
		ЗаписьИН.ОтпускМесяцев						= Цел(ВыборкаПоРаботникиОрганизации.ДнейОтпускаЗаСвойСчет/30);
		ЗаписьИН.ОтпускДней							= ВыборкаПоРаботникиОрганизации.ДнейОтпускаЗаСвойСчет%30;
		
		// Сбор данных о стаже
		ЧислоОсновныхЗаписейОСтаже = 0;					//Переменный для хранения строк о стаже работника (для формы СЗВ-4-1)
		СтрокиСтажРаботникаОрганизации = "";
		РаботникОрганизацииИмеетЛьготныйСтаж = ЛОЖЬ;	// Признак наличия у работника основания для льготного стажа
		Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл
			
			ЧислоОсновныхЗаписейОСтаже = ЧислоОсновныхЗаписейОСтаже + 1; 
			
			//Берем пустую запись "Основная запись о стаже"
			ФорматЗаписиСТАЖ = ПолучитьФорматЗаписи("СТАЖ",ДокументФорматЗаписей);
			ЗаписьСТАЖ = ПолучитьСтруктуруЗаписи(ФорматЗаписиСТАЖ);
			ЗаписьСТАЖ.ТипЗаписи = "СТАЖ";
			ЗаписьСТАЖ.НомерПериода = ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи;
			ЗаписьСТАЖ.ДатаНачалаПериода = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
			ЗаписьСТАЖ.ДатаОкончанияПериода = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
			ЗаписьСТАЖ.ОсобыеУсловияТрудаКод = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
			ЗаписьСТАЖ.КодПозицииСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
			ЗаписьСТАЖ.ОснованиеИсчисляемогоСтажаКод = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
			ЗаписьСТАЖ.ПервыйПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
			ЗаписьСТАЖ.ВторойПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
			ЗаписьСТАЖ.ТретийПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
			ЗаписьСТАЖ.ОснованиеВыслугиЛетКод = ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод;
			ЗаписьСТАЖ.ПервыйПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
			ЗаписьСТАЖ.ВторойПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
			ЗаписьСТАЖ.ТретийПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
			ЗаписьСТАЖ.ТерриториальныеУсловияКод = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
			
			//Переменный для хранения дополнительных записей о стаже
			ЧислоДополнительныхЗаписейОСтаже = 0;
			СтрокиДополнительныеЗаписи = "";
			
			Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
				
				//В дополнительной записи с номером 0 находится информация об основной записи
				Если ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи = 0 тогда
					Продолжить;
				КонецЕсли;	
				
				РаботникОрганизацииИмеетЛьготныйСтаж = Истина;
				ЧислоДополнительныхЗаписейОСтаже = ЧислоДополнительныхЗаписейОСтаже + 1;
				
				//Берем пустую запись "Запись о льготном стаже"
				ФорматЗаписиЛГОТ = ПолучитьФорматЗаписи("ЛГОТ",ДокументФорматЗаписей);
				ЗаписьЛГОТ = ПолучитьСтруктуруЗаписи(ФорматЗаписиЛГОТ);
				ЗаписьЛГОТ.ТипЗаписи = "ЛГОТ";
				ЗаписьЛГОТ.НомерЗаписи = ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи;
				ЗаписьЛГОТ.ОсобыеУсловияТрудаКод = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
				ЗаписьЛГОТ.КодПозицииСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
				ЗаписьЛГОТ.ОснованиеИсчисляемогоСтажаКод = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
				ЗаписьЛГОТ.ПервыйПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
				ЗаписьЛГОТ.ВторойПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
				ЗаписьЛГОТ.ТретийПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
				ЗаписьЛГОТ.ОснованиеВыслугиЛетКод = ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод;
				ЗаписьЛГОТ.ПервыйПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
				ЗаписьЛГОТ.ВторойПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
				ЗаписьЛГОТ.ТретийПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
				ЗаписьЛГОТ.ТерриториальныеУсловияКод = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
				
				//Сохраним запись ЛГОТ
				СтрокавФайл = ПолучитьСтрокуПоДаннымЗаписи(ЗаписьЛГОТ, ФорматЗаписиЛГОТ);
				СтрокиДополнительныеЗаписи = СтрокиДополнительныеЗаписи + СтрокавФайл + Символы.ПС;
				
			КонецЦикла;// Выборка по дополнительным записям о стаже
			
			ЗаписьСТАЖ.ЧислоДополнительныхЗаписей = ЧислоДополнительныхЗаписейОСтаже;
			
			//Сохраним запись СТАЖ
			СтрокавФайл = ПолучитьСтрокуПоДаннымЗаписи(ЗаписьСТАЖ,ФорматЗаписиСТАЖ);
			СтрокиСтажРаботникаОрганизации  = СтрокиСтажРаботникаОрганизации + СтрокавФайл + Символы.ПС;
			
			//Добавим записи ЛГОТ
			СтрокиСтажРаботникаОрганизации  = СтрокиСтажРаботникаОрганизации + ВРЕГ(СтрокиДополнительныеЗаписи);
			
		КонецЦикла;// Выборка по основным записям о стаже
		
		// Формирование файла
		ЗаписьИН.ЧислоОсновныхЗаписейОСтаже = ЧислоОсновныхЗаписейОСтаже;
		
		//	Добавляем в файл записи ИН41, СТАЖ И ЛГОТ
		СтрокавФайл = ПолучитьСтрокуПоДаннымЗаписи(ЗаписьИН,ФорматЗаписиИН);
		ТекстФайла	=	ТекстФайла	+	СтрокавФайл + Символы.ПС + ВРег(СтрокиСтажРаботникаОрганизации);
		
	КонецЕсли;
	
	// Вывод печатной формы
	Если ТекстФайла <> "" Тогда
		
		ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, ДатаАктуальности);
		
		Макет = Документы.СведенияОТрудовомСтажеИЗаработкеСЗВ4.ПолучитьМакет("ФормаСЗВ_4_1");
		ФорматЗаписиИН41 = ПолучитьФорматЗаписи("ИН41", ДокументФорматЗаписей);
		ФорматЗаписиСТАЖ = ПолучитьФорматЗаписи("СТАЖ", ДокументФорматЗаписей);
		ФорматЗаписиЛГОТ = ПолучитьФорматЗаписи("ЛГОТ", ДокументФорматЗаписей);
		
		// Рабочие области макета
		ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
		ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
		ОбластьСтаж 	= Макет.ПолучитьОбласть("Стаж");
		
		// Заполнение данных шапки и подвала
		ОбластьШапка.Параметры.РегНомерПФР = Организация.РегистрационныйНомерПФР;
		ОбластьШапка.Параметры.НаименованиеОрганизации = Организация.Наименование;
		ОбластьШапка.Параметры.Год = Год(ДатаАктуальности);
		
		ОбластьПодвал.Параметры.ДолжностьРуководителя		 	= ОтветственныеЛица.РуководительДолжность;
		ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
		ОбластьПодвал.Параметры.Дата				 			= ДатаВОтчет(ДатаАктуальности);
		
		Н=1;//Номер строки первой записи ИН41
		
		//Читаем запись ИН41
		СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
		Н= Н + 1;
		ЗаписьИН41 = ПолучитьСтруктуруЗаписи(ФорматЗаписиИН41);
		СтрОшибка = "";
		Если НЕ РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ИН41", ФорматЗаписиИН41, ЗаписьИН41, СтрОшибка) тогда
			Возврат;
		КонецЕсли;	
		
		// Данные по физлицу
		ОбластьШапка.Параметры.СтраховойНомерПФР				= ЗаписьИН41.СтраховойНомер;
		ОбластьШапка.Параметры.ФИО							= "" + ЗаписьИН41.Фамилия + " " + ЗаписьИН41.Имя + " " + ЗаписьИН41.Отчество;
		ОбластьШапка.Параметры.Адрес						= ВРег(РегламентированнаяОтчетность.ПредставлениеАдреса(НРег(ЗаписьИН41.АдресДляИнформирования), 0, ""));
		ОбластьШапка.Параметры.НачисленоСтраховаяЧасть		= ЗаписьИН41.НачисленоСтраховаяЧасть;
		ОбластьШапка.Параметры.НачисленоНакопительнаяЧасть	= ЗаписьИН41.НачисленоНакопительнаяЧасть;
		ОбластьШапка.Параметры.НачисленоДополнительныйТариф	= ЗаписьИН41.НачисленоДополнительныйТариф;
		ОбластьШапка.Параметры.ДнейБолел					= ПредставлениеПериодаБолезниОтпуска(ЗаписьИН41.ВременнаяНетрудоспособностьМесяцев,ЗаписьИН41.ВременнаяНетрудоспособностьДней);
		ОбластьШапка.Параметры.ДнейГулял					= ПредставлениеПериодаБолезниОтпуска(ЗаписьИН41.ОтпускМесяцев, ЗаписьИН41.ОтпускДней);
		ДокументРезультат.Вывести(ОбластьШапка);
		
		//Цикл по основным записям о стаже
		Для НомерОснованойЗаписи = 1 по  ЗаписьИН41.ЧислоОсновныхЗаписейОСтаже цикл
			
			//Читаем запись СТАЖ
			СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
			Н= Н + 1;
			ЗаписьСТАЖ = ПолучитьСтруктуруЗаписи(ФорматЗаписиСТАЖ);
			СтрОшибка = "";
			Если НЕ РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "СТАЖ", ФорматЗаписиСТАЖ, ЗаписьСТАЖ, СтрОшибка) тогда
				Возврат;
			КонецЕсли;	
			
			ОбластьСтаж.Параметры.НомерПериода				= НомерОснованойЗаписи;
			ОбластьСтаж.Параметры.ДатаНачалаПериода 		= ЗаписьСТАЖ.ДатаНачалаПериода;
			ОбластьСтаж.Параметры.ДатаОкончанияПериода		= ЗаписьСТАЖ.ДатаОкончанияПериода;
			ОбластьСтаж.Параметры.ТерриториальныеУсловияКод	= ЗаписьСТАЖ.ТерриториальныеУсловияКод;
			ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод		= ЗаписьСТАЖ.ОсобыеУсловияТрудаКод;
			ОбластьСтаж.Параметры.КодПозицииСписка			= ЗаписьСТАЖ.КодПозицииСписка;
			
			// Представление параметров ИТС
			ОбластьСтаж.Параметры.ОснованиеИТС				= ЗаписьСТАЖ.ОснованиеИсчисляемогоСтажаКод;
			ОбластьСтаж.Параметры.ДопИТС					= ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьСТАЖ);
			
			// Представление параметров выслуги лет
			ОбластьСтаж.Параметры.ОснованиеВыслуги			= ЗаписьСТАЖ.ОснованиеВыслугиЛетКод;
			ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьСТАЖ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
			
			ДокументРезультат.Вывести(ОбластьСтаж);
			
			//Цикл по дополнительным записям о стаже
			Для НомерДополнительнойЗаписи = 1 по  ЗаписьСТАЖ.ЧислоДополнительныхЗаписей цикл
				
				//Читаем запись ЛГОТ
				СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
				Н= Н + 1;
				ЗаписьЛГОТ = ПолучитьСтруктуруЗаписи(ФорматЗаписиЛГОТ);
				СтрОшибка = "";
				Если НЕ РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ЛГОТ", ФорматЗаписиЛГОТ, ЗаписьЛГОТ, СтрОшибка) тогда
					Прервать;
				КонецЕсли;	
				
				// Выводим запись ЛГОТ
				ОбластьСтаж.Параметры.НомерПериода				= "";
				ОбластьСтаж.Параметры.ДатаНачалаПериода			= "";
				ОбластьСтаж.Параметры.ДатаОкончанияПериода		= "";
				ОбластьСтаж.Параметры.ТерриториальныеУсловияКод	= ЗаписьЛГОТ.ТерриториальныеУсловияКод;
				ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод		= ЗаписьЛГОТ.ОсобыеУсловияТрудаКод;
				ОбластьСтаж.Параметры.КодПозицииСписка			= ЗаписьЛГОТ.КодПозицииСписка;
				
				// Представление параметров ИТС
				ОбластьСтаж.Параметры.ОснованиеИТС				= ЗаписьЛГОТ.ОснованиеИсчисляемогоСтажаКод;
				ОбластьСтаж.Параметры.ДопИТС					= ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьЛГОТ);
				
				// Представление параметров выслуги лет
				ОбластьСтаж.Параметры.ОснованиеВыслуги			= ЗаписьЛГОТ.ОснованиеВыслугиЛетКод;
				ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьЛГОТ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
				
				ДокументРезультат.Вывести(ОбластьСтаж);
				
			КонецЦикла;//Цикл по дополнительным записям о стаже	
			
		КонецЦикла;// По основным записям о стаже	
		
		// Подвал формы
		ДокументРезультат.Вывести(ОбластьПодвал);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАЗБОРА ФАЙЛОВ СВЕДЕНИЙ

#Если Клиент Тогда

//Функция разбирает заголовочные строки файла и возвращает информацию о пачке
Функция РазобратьЗаголовокФайла(Знач ТекстФайла,ИнформацияОПачке) Экспорт

	ВсегоСтрокВФайле = СтрЧислоСтрок(ТекстФайла);
	Если ВсегоСтрокВФайле < 4 тогда		
		Предупреждение("Неверная структура файла: количество строк должно быть не менее 4!");		
		Возврат 0;
	КонецЕсли;

	ИнформацияОРаботодателе = Новый Структура;

	//Обработка записи заголовка "ПАЧК"
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,3));
	Если МассивДанныхСтроки.Количество()<>21 тогда
		Сообщить("Строка 3: неверное количество полей записи 'ПАЧК'!");
		Возврат 0;
	КонецЕсли;	  
	ИнформацияОПачке.Вставить("НомерПачкиРаботодателя",МассивДанныхСтроки[1]);
	ИнформацияОПачке.Вставить("ДатаСоставленияОписи",ДатаИзФайла(МассивДанныхСтроки[4]));
	ИнформацияОПачке.Вставить("РасчетныйПериод",МассивДанныхСтроки[6]);
	ИнформацияОПачке.Вставить("КодКатегорииЗастрахованногоЛица",МассивДанныхСтроки[7]);
	ИнформацияОПачке.Вставить("КодДополнительногоТарифа",МассивДанныхСтроки[8]);
	ИнформацияОПачке.Вставить("ТерриториальныеУсловия",МассивДанныхСтроки[9]);
	ИнформацияОПачке.Вставить("ТипСведений",МассивДанныхСтроки[10]);
	ИнформацияОПачке.Вставить("ВидКорректировки",МассивДанныхСтроки[11]);
	ИнформацияОПачке.Вставить("ИтогоВзносыСтраховаяЧасть",МассивДанныхСтроки[16]);
	ИнформацияОПачке.Вставить("ИтогоВзносыНакопительнаяЧасть",МассивДанныхСтроки[17]);
	ИнформацияОПачке.Вставить("ИтогоВзносыПоДопТарифу",МассивДанныхСтроки[18]);
	//ВсегоНЧСЛ										= Число(МассивДанныхСтроки[14]);
	//НЧСЛБл										= Число(МассивДанныхСтроки[15]);

	//Обработка записи заголовка "РБТД"
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,2));
	Если МассивДанныхСтроки.Количество()<>6 тогда
		Сообщить("Строка 2: неверное количество полей записи 'РБТД'!");
		Возврат 0;
	КонецЕсли;	  
	ИнформацияОРаботодателе.Вставить("РегистрационныйНомерПФР",МассивДанныхСтроки[2]);
	ИнформацияОРаботодателе.Вставить("ИНН",МассивДанныхСтроки[3]);
	ИнформацияОРаботодателе.Вставить("КПП",МассивДанныхСтроки[4]);
	ИнформацияОРаботодателе.Вставить("Наименование",МассивДанныхСтроки[5]);

	//Обработка записи заголовка "ТИПД"
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,4));
	Если МассивДанныхСтроки.Количество()<>3 тогда
		Сообщить("Строка 4: неверное количество полей записи 'ТИПД'!");
		Возврат 0;
	КонецЕсли;	  
	ИнформацияОПачке.Вставить("ТипДокумента",МассивДанныхСтроки[1]);
	ИнформацияОПачке.Вставить("ДокументовВПачке",ЧислоИзФайла(МассивДанныхСтроки[2]));

	ИнформацияОПачке.Вставить("ИнформацияОРаботодателе",ИнформацияОРаботодателе);
	Возврат 1;
КонецФункции	

//Выводит в табличный документ "ТабличныйДокумент" заполненный макет описи "Форма АДВ-6"
Процедура ВывестиОписьАДВ6(ТабличныйДокумент,Знач ИнформацияОПачке,Знач ОтветственныеЛица) Экспорт
	//Получим ответственные лица организации и их должности 
	МакетОписи = ПолучитьОбщийМакет("ФормаАДВ_6_1");
	СекцияОпись = МакетОписи.ПолучитьОбласть("Опись");

	СекцияОпись.Параметры.РегНомерПФР						= ИнформацияОПачке.ИнформацияОРаботодателе.РегистрационныйНомерПФР;
	СекцияОпись.Параметры.ОКПО								= ИнформацияОПачке.ИнформацияОРаботодателе.Ссылка.КодПоОКПО;
	СекцияОпись.Параметры.ИНН								= ИнформацияОПачке.ИнформацияОРаботодателе.ИНН;
	СекцияОпись.Параметры.КПП								= ИнформацияОПачке.ИнформацияОРаботодателе.КПП;
	СекцияОпись.Параметры.Наименование						= ИнформацияОПачке.ИнформацияОРаботодателе.Наименование;

	Если ИнформацияОПачке.ТипДокумента = "АНКТ" тогда
		СекцияОпись.Параметры.ДокументовАДВ1вПачке 			= ИнформацияОПачке.ДокументовВПачке;
	иначеЕсли ИнформацияОПачке.ТипДокумента = "ОБМН" тогда
		СекцияОпись.Параметры.ДокументовАДВ2вПачке 			= ИнформацияОПачке.ДокументовВПачке;
	иначеЕсли ИнформацияОПачке.ТипДокумента = "ДУБЛ" тогда
		СекцияОпись.Параметры.ДокументовАДВ3вПачке 			= ИнформацияОПачке.ДокументовВПачке;
	ИначеЕсли ИнформацияОПачке.ТипДокумента = "КОНВ" тогда
		СекцияОпись.Параметры.ДокументовСЗВКвПачке			= ИнформацияОПачке.ДокументовВПачке;
	ИначеЕсли ИнформацияОПачке.ТипДокумента = "ИН41" ИЛИ ИнформацияОПачке.ТипДокумента = "ИН42" тогда
		Если ИнформацияОПачке.ТипДокумента = "ИН41" тогда
			СекцияОпись.Параметры.ДокументовСЗВ4вПачке			= ИнформацияОПачке.ДокументовВПачке;
		Иначе
			СекцияОпись.Параметры.ДокументовСЗВ4вПачке			= ИнформацияОПачке.ДокументовСЗВ4_2вПачке;
		КонецЕсли;
		СекцияОпись.Параметры.ЧислоЗастрахованныхЛицВПачке	= ИнформацияОПачке.ДокументовВПачке;
		СекцияОпись.Параметры.РасчетныйПериод 				= ИнформацияОПачке.РасчетныйПериод;
		СекцияОпись.Параметры.КодКатегорииЗастрахованногоЛица = ИнформацияОПачке.КодКатегорииЗастрахованногоЛица;
		СекцияОпись.Параметры.КодДополнительногоТарифа 		= ИнформацияОПачке.КодДополнительногоТарифа;
		СекцияОпись.Параметры.ТерриториальныеУсловия 		= ИнформацияОПачке.ТерриториальныеУсловия;
		Попытка
			СекцияОпись.Параметры.ИтогоВзносыСтраховаяЧасть		= Число(ИнформацияОПачке.ИтогоВзносыСтраховаяЧасть);
			СекцияОпись.Параметры.ИтогоВзносыНакопительнаяЧасть	= Число(ИнформацияОПачке.ИтогоВзносыНакопительнаяЧасть);
			СекцияОпись.Параметры.ИтогоВзносыПоДопТарифу		= Число(ИнформацияОПачке.ИтогоВзносыПоДопТарифу);
		Исключение
		КонецПопытки;
		
		Если ИнформацияОПачке.ТипСведений = "ИСХД" Тогда
			СекцияОпись.Рисунки.ТипСведений_ИСХД.Текст = "ю";	
		ИначеЕсли ИнформацияОПачке.ТипСведений = "ПЕНС" Тогда
			СекцияОпись.Рисунки.ТипСведений_ПЕНС.Текст = "ю";	
		КонецЕсли; 
		
		Если ИнформацияОПачке.ВидКорректировки = "КОРР" Тогда
			СекцияОпись.Рисунки.ВидКорректировки_КОРР.Текст = "ю";
		ИначеЕсли ИнформацияОПачке.ВидКорректировки = "ОТМН" Тогда
			СекцияОпись.Рисунки.ВидКорректировки_ОТМН.Текст = "ю";
		КонецЕсли;	
	КонецЕсли;	

	СекцияОпись.Параметры.НомерПачкиРаботодателя 			= ИнформацияОПачке.НомерПачкиРаботодателя;

	СекцияОпись.Параметры.ДолжностьИсполнителя				= ОтветственныеЛица.ИсполнительДолжность;
	СекцияОпись.Параметры.РасшифровкаПодписиИсполнителя		= ОтветственныеЛица.Исполнитель;
	СекцияОпись.Параметры.ДолжностьРуководителя		 		= ОтветственныеЛица.РуководительДолжность;
	СекцияОпись.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
	СекцияОпись.Параметры.ДатаЗаполнения		 			= ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);

	ТабличныйДокумент.Вывести(СекцияОпись);
КонецПроцедуры	 

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ОБЕСПЕЧИВАЮЩИЕ РАБОТУ С ЗАПИСЯМИ ФАЙЛОВ СВЕДЕНИЙ

//Возвращает формат записи файла сведений (таблицу с именами и типами полей)
Функция ПолучитьФорматЗаписи(Знач ИмяЗаписи,Знач ДокументФорматЗаписей) Экспорт

	ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
	ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипПоля",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	ТаблицаФормаЗаписи.Колонки.Добавить("Размер",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));

	ОбластьФорматЗаписи = ДокументФорматЗаписей.ПолучитьОбласть(ИмяЗаписи);

	Для НСтр = 1 По ОбластьФорматЗаписи.ВысотаТаблицы Цикл
		//тип поля хранится в 5-ой колонке
		ИмяПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 5).Текст);
		Если ИмяПоля <> "" тогда
			//тип поля хранится во 2-ой колонке	
			ТипПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 2).Текст);
			//размер поля хранится в 3-ей колонке	
			СтрРазмерПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 3).Текст);

			НовоеПоле = ТаблицаФормаЗаписи.Добавить();
			НовоеПоле.ИмяПоля = СокрЛП(ИмяПоля);
			НовоеПоле.ТипПоля = ВРЕГ(СокрЛП(ТипПоля));
			//Если указан размер поля, сохраним его
			Если СтрРазмерПоля<>"" тогда
				ПозицияТочки = Найти(СтрРазмерПоля,".");
				Если ПозицияТочки<>0 тогда
					НовоеПоле.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
					НовоеПоле.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
				Иначе	
					НовоеПоле.Размер = Число(СтрРазмерПоля);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 

	КонецЦикла;

	Возврат ТаблицаФормаЗаписи;
КонецФункции	 

//Возвращает инициализировнную структуру, соответствующую формату записи
Функция ПолучитьСтруктуруЗаписи(Знач ТаблицаФорматаЗаписи) Экспорт
	СтрИменаПолей = "";
	Для Каждого Поле из ТаблицаФорматаЗаписи цикл
		СтрИменаПолей = СтрИменаПолей +","+Поле.ИмяПоля;
	КонецЦикла;	

	СтрИменаПолей = Сред(СтрИменаПолей,2);//Убрали первую запятую
	Возврат Новый Структура(СтрИменаПолей);
КонецФункции	 

//Формирует строку для файла сведений на основе данных структуры записи
Функция ПолучитьСтрокуПоДаннымЗаписи(Знач Запись,Знач ТаблицаФорматаЗаписи) Экспорт

	Стр = "";

	СтрНули = "0000000000";

	Для Каждого Поле из ТаблицаФорматаЗаписи цикл

		ЗначениеПоля = Запись[Поле.ИмяПоля];

		Если Поле.ТипПоля = "СТРОКА" тогда

			Стр = Стр +","+ """"+СокрЛП(ЗначениеПоля)+"""";

		ИначеЕсли Поле.ТипПоля = "ДАТА" тогда

			Если ЗначениеПоля = Неопределено тогда
				Стр = Стр + ",""""";
			Иначе
				Стр = Стр + ",""" + Формат(ЗначениеПоля, "ДФ='дд/ММ/гггг'") + """";
			КонецЕсли;

		Иначе//Если Поле.ТипПоля = "Число" тогда

			ТипЗнчПоля = ТипЗнч(ЗначениеПоля);

			Если ТипЗнчПоля = Тип("Число") тогда
				//ЗначениеПоля = ЗначениеПоля;
			ИначеЕсли ТипЗнчПоля = Тип("Строка") тогда	
				//ЗначениеПоля = Число(ЗначениеПоля);
				ЗначениеПоля = СокрЛП(ЗначениеПоля);
			Иначе					
				ЗначениеПоля = 0;
			КонецЕсли;

			//Формируем представление нуля
			РазрядностьДробнойЧасти = Поле.РазрядностьДробнойЧасти;
			Если РазрядностьДробнойЧасти = 0 тогда
				ПредставлениеНуля = "0";
			Иначе	
				ПредставлениеНуля = "0." + Лев(СтрНули, РазрядностьДробнойЧасти);
			КонецЕсли;	 
			//Форматируем значение
			ЗначениеПоля = Формат(ЗначениеПоля,"ЧГ=0; ЧРД =.; ЧЦ=" + Поле.Размер + "; ЧДЦ=" + РазрядностьДробнойЧасти+"; ЧН=" + ПредставлениеНуля);

			Стр = Стр + "," + ЗначениеПоля;
		КонецЕсли;	 
	КонецЦикла;	

	Стр = Сред(Стр,2);//Убрали первую запятую

	Возврат Стр;
КонецФункции	 

//Выполняет разбор строки файла на значения элементов структуры записи
Функция РазложитьСтрокуВСтруктуруЗаписи(Знач Стр,Знач ТипЗаписи,Знач ТаблицаФормата,Запись,СтрОшибка)Экспорт

	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(Стр);

	Если МассивДанныхСтроки[0] <> ТипЗаписи тогда
		СтрОшибка = "Неверный тип записи. Ожидается запись с типом "+ТипЗаписи+"!";
		Возврат ложь;
	КонецЕсли;	

	Если МассивДанныхСтроки.Количество() <> ТаблицаФормата.Количество() тогда
		СтрОшибка = "Неверное количество полей записи "+ТипЗаписи+"!";
		Возврат Ложь;
	КонецЕсли;	

	НомерПоля = 0;
	Для Каждого Поле из ТаблицаФормата цикл
		ЗначениеПоля = МассивДанныхСтроки[НомерПоля];
		Если Поле.ТипПоля = "ДАТА" тогда
			ЗначениеПоля = ДатаИзФайла(ЗначениеПоля);
		ИначеЕсли Поле.ТипПоля = "ЧИСЛО" тогда
			ЗначениеПоля = ЧислоИзФайла(ЗначениеПоля);
		КонецЕсли;	 
		Запись[Поле.ИмяПоля]=ЗначениеПоля;
		НомерПоля = НомерПоля + 1;
	КонецЦикла;	

	Возврат Истина;
КонецФункции	 

/////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ ПРОВЕРКИ ФОРМ СЗВ

// Распечатывает список найденных ошибок с группировкой по физлицу
Процедура ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, ИсточникОшибок) Экспорт

	Таблица = ТаблицаПлохихЗаписей.Скопировать();
	Таблица.Свернуть("ФизЛицо");
	МассивФизлиц = Таблица.ВыгрузитьКолонку("ФизЛицо");
	ТаблицаПлохихЗаписей.Индексы.Добавить("ФизЛицо");
	
	Если ТаблицаПлохихЗаписей.Количество() > 0 тогда
		СтруктураПоиска = Новый Структура("ФизЛицо");
		Для каждого ФизЛицо Из МассивФизлиц цикл

			СтруктураПоиска.ФизЛицо = ФизЛицо;
			НайдОшибки = ТаблицаПлохихЗаписей.НайтиСтроки(СтруктураПоиска);

			Если НайдОшибки.Количество() = 0 тогда
				Продолжить;
			КонецЕсли;	 

			СтрОшибкиПоФизЛицу = "--------------------------------------------------------------------------------------------" + Символы.ПС;
			СтрОшибкиПоФизЛицу = СтрОшибкиПоФизЛицу + ИсточникОшибок+" работника " + Физлицо + " обнаружены ошибки:" + Символы.ПС;
			НомерОшибки = 0;
			Для Каждого Ошибка из НайдОшибки цикл
				НомерОшибки = НомерОшибки + 1;
				СтрОшибкиПоФизЛицу = СтрОшибкиПоФизЛицу + НомерОшибки+".) " + Ошибка.ОписаниеОшибки;
			КонецЦикла;
			ОбщегоНазначения.СообщитьОбОшибке(СтрОшибкиПоФизЛицу,Ложь);
		КонецЦикла;
	КонецЕсли;	 

КонецПроцедуры

//Проверяет правильность заполнения номера документа, удостоверяющего личность
Функция ПроверитьНомерУдостоверенияЛичности(ДокументКодИМНС, Знач Номер, СтрОшибка) Экспорт
	
	Если ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("0123456789",Номер,"          "))=0 Тогда
		СтрОшибка = "В номере документа присутствуют недопустимые символы!";
		Возврат Ложь;
	КонецЕсли;
	
	ДлинаНомера = СтрДлина(СокрЛП(Номер));
	
	СтрОшибка = "";
	
	Если ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС01
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС03
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС04
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС06
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21 Тогда
		Если ДлинаНомера <> 6 Тогда
			СтрОшибка = "Номер документа должен состоять из 6 символов!";
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС09
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС22 Тогда
		Если ДлинаНомера <> 7 Тогда
			СтрОшибка = "Номер документа должен состоять из 7 символов!";
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС02
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС07
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС26
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС27 Тогда
		Если (ДлинаНомера < 6 ) или ( ДлинаНомера > 7 ) Тогда
			СтрОшибка = "Номер документа должен состоять из 6 или 7 символов!";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

// Проверяет правильность заполнения серии документа, удостоверяющего личность 
Функция ПроверитьСериюУдостоверенияЛичности(ДокументКодИМНС, Знач Серия , СтрОшибка) Экспорт
	
	// проверка
	Если ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС01
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС03 Тогда
		ТипДока = 1;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС04
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС06
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС07
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС26
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС27 Тогда
		ТипДока = 2;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС02
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС09
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС22 Тогда
		ТипДока = 3;
	ИначеЕсли ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21 Тогда
		ТипДока = 4;
	Иначе
		ТипДока = 5;
	КонецЕсли;
	
	СтрОшибка = "";
	
	Серия = СокрЛП(Серия);
	
	Если ТипДока = 1 Тогда // паспорт СССР и свид о рожд
		
		Поз = Найти(Серия,"-");
		Если Поз=0 Тогда
			СтрОшибка = "Серия документа должна состоять из двух частей, резделенных символом ""-""!";
			Возврат Ложь;
		КонецЕсли;
		
		Ч1 = Лев(Серия, Поз-1);
		Ч2 = СокрЛП(Сред(Серия, Поз+1));
		
		Поз = Найти(Ч2,"-");
		Если Поз <> 0 Тогда
			СтрОшибка = "В серии документа должно быть только две группы символов!";
			Возврат Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Ч1) Тогда
			СтрОшибка = "В серии документа отсутствует числовая часть!";
			Возврат Ложь;
		ИначеЕсли  ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("IVXLC1УХЛС",Ч1,"          "))=0 Тогда
			СтрОшибка = "Числовая часть серии документа должна указываться символами 1 У Х Л С  или  I V X L C";
			Возврат Ложь;
		ИначеЕсли РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("IVXLC",Ч1,"1УХЛС") <> РегламентированнаяОтчетность.ПреобразоватьЧислоВРимскуюНотацию(РегламентированнаяОтчетность.ПреобразоватьЧислоВАрабскуюНотацию(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("IVXLC",Ч1,"1УХЛС"))) Тогда
			СтрОшибка = "Числовая часть серии документа указана некорректно!";
			Возврат Ложь;
		ИначеЕсли (СтрДлина(Ч2) <> 2) ИЛИ (ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ",Ч2,"                                 "))=0) Тогда
			СтрОшибка = "После разделителя ""-"" в серии документа должны быть ДВЕ pусcкие заглавные буквы!";
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДока=2 Тогда // серия - две буквы: военный билет, ...
		
		Если (СтрДлина(Серия) <> 2) ИЛИ (ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ",Серия,"                                 "))=0) Тогда
			СтрОшибка = "В серии документа должны быть ДВЕ pусcкие заглавные буквы!";
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДока=3 Тогда // серия - две цифры: загранпаспорта 
		
		Если (СтрДлина(Серия) <> 2) ИЛИ (ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("0123456789",Серия,"          "))=0) Тогда
			СтрОшибка = "В серии документа должно быть ДВЕ цифры!";
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДока=4 Тогда // серия - две группы цифр: новый паспорт
		
		Поз = Найти(Серия," ");
		Если Поз=0 Тогда
			СтрОшибка = "В серии документа должно быть две группы цифр!";
			Возврат Ложь;
		КонецЕсли;
		
		ПервЧасть = Лев(Серия,Поз-1);
		ВторЧасть = СокрЛП(Сред(Серия,Поз+1));
		
		Поз = Найти(ВторЧасть," ");
		Если Поз <> 0 Тогда
			СтрОшибка = "В серии документа должно быть только две группы цифр!";
			Возврат Ложь;
		КонецЕсли;
		
		Если (СтрДлина(ПервЧасть) <> 2) ИЛИ
			(ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("0123456789",ПервЧасть,"          "))=0) Тогда
			СтрОшибка = "Первая группа символов серии документа должна содержать две цифры!";
			Возврат Ложь;
		КонецЕсли;
		
		Если (СтрДлина(ВторЧасть) <> 2) ИЛИ
			(ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("0123456789",ВторЧасть,"          "))=0) Тогда
			СтрОшибка = "Вторая группа символов серии документа должна содержать две цифры!";
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ФОРМ СЗВ-4

//Формирует строку-заголовок для сообщения об ошибке, найденной в записи о стаже
Функция СЗВ4_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись, ОсновнаяЗапись) Экспорт 
	
	ЗаголовокСообщения = "Организация: "+СокрЛП(Запись.ОбособленноеПодразделение);
    ЗаголовокСообщения = ЗаголовокСообщения + ", Период: "+Формат(ОсновнаяЗапись.ДатаНачалаПериода,"ДФ='дд.ММ.гггг'")+"-"+Формат(ОсновнаяЗапись.ДатаОкончанияПериода,"ДФ='дд.ММ.гггг'");

	Если Запись.НомерДополнительнойЗаписи <> 0 тогда
		ЗаголовокСообщения = ЗаголовокСообщения + ", Дополнительная запись № "+Запись.НомерДополнительнойЗаписи;
	КонецЕсли;	

	ЗаголовокСообщения = ЗаголовокСообщения + ":"+Символы.ПС;

	Возврат ЗаголовокСообщения;
	
КонецФункции	 

//Добавляет новую строку в таблицу плохих записей стажа
Процедура СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Запись,ОписаниеОшибки,ОсновнаяЗапись = "")

	Если ОсновнаяЗапись = "" Тогда
		ОсновнаяЗапись = Запись;
	КонецЕсли;  
	ЗаголовокОшибки = СЗВ4_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись,ОсновнаяЗапись);

	//Для строк сообщения сделаем отступ
	Стр = "";
	МассивСтрок =  ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ОписаниеОшибки,Символы.ПС);
	Для Каждого Строка из Массивстрок цикл
		Стр = Стр + "    " + Строка + Символы.ПС ;
	КонецЦикла;	
	ПолноеОписаниеОшибки = ЗаголовокОшибки + Стр;

	НоваяСтрока = ТаблицаПлохихЗаписей.Добавить();
	НоваяСтрока.ФизЛицо = Запись.ФизЛицо;
	НоваяСтрока.ОписаниеОшибки = ПолноеОписаниеОшибки;

КонецПроцедуры 

//Выполняет проверку дополнительной записи стажа на допустимось значений реквизитов
Функция СЗВ4_ВыполнитьПроверкуДополнительнойЗаписиСтажа(Запись, ОсновнаяЗапись, ТаблицаПлохихЗаписей)

	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОсобыеУсловияТруда) 
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа) тогда
		СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дополнительная запись может вводиться только при заполнении хотя бы одного из реквизитов основной записи:
		| 		Особые условия труда , Выслуга лет, Территориальные условия, Основание исчисляемого стажа!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	 

	Если ЗначениеЗаполнено(Запись.ОснованиеИсчисляемогоСтажа) тогда
		СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи о стаже не может указываться основание исчисляемого стажа!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	

	//Проверка на обязательный ввод одной из льгот
	УказаныТерриториальныеУсловия = ЗначениеЗаполнено(Запись.ТерриториальныеУсловия);

	УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТруда);
	УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛет);

	Если (НЕ УказаныТерриториальныеУсловия) И (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеВыслугиЛет) тогда
		СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи должна быть задана либо территориальная льгота, либо особые условия труда, либо выслуга лет!",ОсновнаяЗапись);
		Возврат Ложь;
	КонецЕсли;	 

	//Проверка на ввод территориальной льготы
	Если УказаныТерриториальныеУсловия тогда
		Если  НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия) тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи территориальная льгота может быть указана только при указании территориальной льготы в основной записи!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;	

	//Проверка на ввод условий труда
	Если УказаныОсобыеУсловияТруда тогда
		УсловияТрудаЗаписи = Запись.ОсобыеУсловияТруда;
		Если (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_1)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_2)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_7) тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда должен принимать значение 27-1, 27-2 или 27-7!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;

		Если (УсловияТрудаЗаписи = Справочники.ОсобыеУсловияТруда.Ст27_7) 
			И (ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа <> Справочники.ОснованияИсчисляемогоТрудовогоСтажа.УИК104) тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда 27-7 может быть указан" 
			+Символы.ПС+"только в случае указания в основной записи кода исчисляемого стажа УИК104!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;

	//Проверка на ввод основания выслуги лет
	КодВыслугиЛетЗаписи = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);

	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет) тогда
		Если Найти(",,28-СМ,28-ГД,28-СМХР,28-ГДХР,",","+КодВыслугиЛетЗаписи+",") = 0 тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Если в основной записи не указан код выслуги лет, то в дополнительной записи" 
			+Символы.ПС+"основание выслуги лет должно быть пустым или указаны коды 28-СМ,28-ГД,28-СМХР или 28-ГДХР!",ОсновнаяЗапись);
			Возврат Ложь;
		КонецЕсли;	
	Иначе//В основной записи код выслуги указан

		МассивПравилНаКодыВыслугиДопЗаписей =  Новый Массив;
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",ЛЕТИСП,САМОЛЕТ,СПЕЦАВ,ОПЫТИСП,ИСПКЛС1,ИТСМАВ,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",НОРМАПР,РЕАКТИВН,НОРМСП,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",,28-СМ,28-ГД,28-СМХР,28-ГДХР,");//пустой код допустим

		КодВыслугиЛетОсновнойЗаписи = СОКРЛП(ОсновнаяЗапись.ОснованиеВыслугиЛетКод);

		ПроверочнаяСтрокаКодов = "";
		Для Каждого СтрокаКодов из МассивПравилНаКодыВыслугиДопЗаписей Цикл 
			Если Найти(СтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи+",") тогда
				ПроверочнаяСтрокаКодов = СтрокаКодов;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	

		Если ПроверочнаяСтрокаКодов = "" тогда
			СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет "+ КодВыслугиЛетОсновнойЗаписи
			+Символы.ПС+"в дополнительной записи код выслуги указываться не может!",ОсновнаяЗапись);
			Возврат Ложь;
		Иначе
			//Код выслуги основной записи исключим из списка возможных значений
			ПроверочнаяСтрокаКодов = СтрЗаменить(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи,"");

			Если НЕ Найти(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетЗаписи+",") тогда
				СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет "+ КодВыслугиЛетОсновнойЗаписи+" в дополнительной записи"
				+Символы.ПС+"могут быть указаны только следующие коды выслуги: "+Сред(ПроверочнаяСтрокаКодов,2),ОсновнаяЗапись);
				Возврат Ложь;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 

	Возврат Истина;
КонецФункции	 

//Выполняет проверку записи стажа на допустимось значений реквизитов между группами
Функция СЗВ4_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(ИнициаторВызова, СтруктураПараметров, ТаблицаПлохихЗаписей) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("ТаблицаЗначений") Тогда
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ИсточникДанных",	СтруктураПараметров);

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧ.НомерСтроки КАК НомерСтроки,
		|	ТЧ.ФизЛицо КАК ФизЛицо,
		|	ТЧ.Организация,
		|	ТЧ.КатегорияЗастрахованныхЛиц,
		|	ТЧ.ОтчетныйПериод
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	&ИсточникДанных КАК ТЧ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо";
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
		|	Записи.ФизЛицо КАК ФизЛицо,
		|	Записи.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Записи.ОтчетныйПериод КАК ОтчетныйПериод,
		|	Записи.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
		|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
		|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
		|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
		|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
		|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
		|	Сочетания.НомерПравила КАК НомерПравила,
		|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
		|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
		|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
		|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
		|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
		|	Сочетания.ФорматФОВ КАК ФорматФОВ
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК Записи
		|		ПО ТЧРаботникиОрг.КатегорияЗастрахованныхЛиц = Записи.КатегорияЗастрахованныхЛиц
		|			И ТЧРаботникиОрг.ФизЛицо = Записи.ФизЛицо
		|			И ТЧРаботникиОрг.ОтчетныйПериод = Записи.ОтчетныйПериод
		|			И ТЧРаботникиОрг.Организация = Записи.ОбособленноеПодразделение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
		|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
		|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
		|					И Сочетания.КодУсловийТруда = """")
		|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
		|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
		|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
		|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияВыслугиЛет = """")
		|			И (Сочетания.ТипШаблонаКПС = ""Любой""
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
		|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
		|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
		|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
		|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
		|ГДЕ
		|	(Записи.ОсобыеУсловияТруда.Код ЕСТЬ НЕ NULL 
		|			ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ НЕ NULL )
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	ОтчетныйПериод,
		|	КатегорияЗастрахованныхЛиц,
		|	НомерСтроки,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "НомерСтроки";
		
	ИначеЕсли ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеИЗаработкеСЗВ4") Тогда
		
		Запрос.УстановитьПараметр("ДокументСсылка" , ИнициаторВызова);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
		|	Записи.ФизЛицо КАК ФизЛицо,
		|	Записи.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Записи.ОтчетныйПериод КАК ОтчетныйПериод,
		|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
		|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
		|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
		|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
		|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
		|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
		|	Сочетания.НомерПравила КАК НомерПравила,
		|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
		|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
		|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
		|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
		|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
		|	Сочетания.ФорматФОВ КАК ФорматФОВ,
		|	Записи.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК ТЧРаботникиОрг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК Записи
		|		ПО ТЧРаботникиОрг.Ссылка.КатегорияЗастрахованныхЛиц = Записи.КатегорияЗастрахованныхЛиц
		|			И ТЧРаботникиОрг.ФизЛицо = Записи.ФизЛицо
		|			И ТЧРаботникиОрг.Ссылка.ОтчетныйПериод = Записи.ОтчетныйПериод
		|			И ТЧРаботникиОрг.Ссылка.Организация = Записи.ОбособленноеПодразделение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
		|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
		|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
		|					И Сочетания.КодУсловийТруда = """")
		|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
		|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
		|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
		|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияВыслугиЛет = """")
		|			И (Сочетания.ТипШаблонаКПС = ""Любой""
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
		|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
		|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
		|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
		|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
		|ГДЕ
		|	ТЧРаботникиОрг.Ссылка = &ДокументСсылка
		|	И ((НЕ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL )
		|			ИЛИ (НЕ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	ОтчетныйПериод,
		|	КатегорияЗастрахованныхЛиц,
		|	НомерСтроки,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "НомерСтроки";
		
	Иначе
		
		Запрос.УстановитьПараметр("МассивФизлиц",СтруктураПараметров.МассивФизлиц);
		Запрос.УстановитьПараметр("МассивЛет", СтруктураПараметров.МассивЛет);
		Запрос.УстановитьПараметр("МассивОбособленныхПодразделений", СтруктураПараметров.МассивОбособленныхПодразделений);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Записи.ФизЛицо КАК ФизЛицо,
		|	Записи.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Записи.ОтчетныйПериод КАК ОтчетныйПериод,
		|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
		|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
		|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
		|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
		|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
		|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
		|	Сочетания.НомерПравила КАК НомерПравила,
		|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
		|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
		|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
		|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
		|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
		|	Сочетания.ФорматФОВ КАК ФорматФОВ,
		|	Записи.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц
		|ИЗ
		|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК Записи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
		|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
		|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
		|					И Сочетания.КодУсловийТруда = """")
		|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
		|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
		|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
		|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияВыслугиЛет = """")
		|			И (Сочетания.ТипШаблонаКПС = ""Любой""
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
		|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
		|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
		|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
		|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
		|ГДЕ
		|	(Записи.Год В (&МассивЛет)
		|			ИЛИ Записи.ОтчетныйПериод В (&МассивЛет))
		|	И Записи.ОбособленноеПодразделение В(&МассивОбособленныхПодразделений)
		|	И Записи.ФизЛицо В(&МассивФизлиц)
		|	И ((НЕ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL )
		|			ИЛИ (НЕ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	ОтчетныйПериод,
		|	КатегорияЗастрахованныхЛиц,
		|	ФизЛицо,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "ФизЛицо";
		
	КонецЕсли;	   
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ОбособленноеПодразделение") цикл
		Пока Выборка.СледующийПоЗначениюПоля("ОтчетныйПериод") цикл
			Пока Выборка.СледующийПоЗначениюПоля("КатегорияЗастрахованныхЛиц") цикл
				Пока Выборка.СледующийПоЗначениюПоля(ИмяГруппировкиФизЛицо_НомерСтроки) цикл
					Пока Выборка.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") цикл
						Пока Выборка.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") цикл
							
							СтрокаСообщений = "Комбинация значений реквизитов:";
							СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание выслуги лет = " + Выборка.УказанныйКодОснованияВыслугиЛет;
							СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание исчисляемого стажа = " + Выборка.УказанныйКодОснованияИсчисляемогоСтажа;
							СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Особые условия труда = " + Выборка.УказанныйКодУсловийТруда;
							СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Код позиции списка = " + Выборка.УказанныйКодПозицииСписка;
							
							Если Не ЗначениеЗаполнено(Выборка.НомерПравила)
								Или СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12100000-11465" И СокрЛП(Выборка.УказанныйКодОснованияИсчисляемогоСтажа) <> "ВОДОЛАЗ" 
								Или Год(Выборка.ОтчетныйПериод) < 2002 И СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12003000-17541" И СокрЛП(Выборка.УказанныйКодОснованияВыслугиЛет) <> "УВД"
								Или Год(Выборка.ОтчетныйПериод) >= 2002 И СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12003000-17541" И СокрЛП(Выборка.УказанныйКодОснованияВыслугиЛет) <> "27-14" Тогда
								СтрокаСообщений = СтрокаСообщений+Символы.ПС+"Не является допустимой!";
								
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
								Продолжить;
								
							КонецЕсли;	
							
							//Флаг допустимости значений реквизитов  группы "Фактически отработанное время"  
							ФОВДопустимо = Ложь;
							
							СтрокаСообщений = "Значения реквизитов группы ""Фактически отработанное время"" не соответствуют ни одному из заданных форматов:"+Символы.ПС;
							
							//Для Каждого ФорматФОВ из СписокДопустимыхФорматовФОВ цикл
							Пока Выборка.Следующий() цикл
								
								ФорматФОВ = Выборка.ФорматФОВ;
								СтрокаОшибкиФормата = "";            	
								ПрошлоПроверку = 0;
								СтрокаЗначенияПараметров = "";
								
								Для Н=1 по 2 цикл
									ФорматПараметра = Сред(ФорматФОВ,Н+1,1); 
									
									Если Н=1 Тогда	
										ЗначениеПараметра = Выборка.УказанныйПервыйПараметрИсчисляемогоСтажа;
										ПсевдонимПараметра = "Месяцы";
									Иначе
										ЗначениеПараметра = Выборка.УказанныйВторойПараметрИсчисляемогоСтажа;
										ПсевдонимПараметра = "Дни";
									КонецЕсли;	
									
									ПараметрПрошелПроверку = Ложь;
									
									НачалоСообщения = "Параметр исчисляемого стажа №"+Н+"("+ПсевдонимПараметра+")";
									
									Если (ФорматПараметра = "_") Тогда
										Если (ЗначениеПараметра <> 0) Тогда//ПУСТОЕ
											СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения + " должен быть пустым (=0)!"+Символы.ПС;
										Иначе	
											ПараметрПрошелПроверку = ИСТИНА;
										КонецЕсли;
									ИначеЕсли (ФорматПараметра = "Г") Тогда
										Если (ЗначениеПараметра > 100) Тогда//ГОДЫ
											СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 100 (лет)!"+Символы.ПС;
										Иначе	
											ПараметрПрошелПроверку = ИСТИНА;
										КонецЕсли;
									ИначеЕсли (ФорматПараметра = "М") Тогда 
										Если (ЗначениеПараметра > 11) Тогда//МЕСЯЦЫ
											СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 11 (месяцев)!"+Символы.ПС;
										Иначе	
											ПараметрПрошелПроверку = ИСТИНА;
										КонецЕсли;
									ИначеЕсли (ФорматПараметра = "Д") Тогда 
										Если (ЗначениеПараметра > 30) Тогда//ДНИ
											СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 30 (дней)!"+Символы.ПС;
										Иначе	
											ПараметрПрошелПроверку = ИСТИНА;
										КонецЕсли;
									ИначеЕсли (ФорматПараметра = "ч") Тогда//ЧАСЫ 
										ПараметрПрошелПроверку = ИСТИНА;
									ИначеЕсли (ФорматПараметра = "м") Тогда 
										Если (ЗначениеПараметра > 59) Тогда//МИНУТЫ
											СтрокаОшибкиФормата = СтрокаОшибкиФормата + НачалоСообщения +" должен содержать значение не > 59 (минут)!"+Символы.ПС;
										Иначе	
											ПараметрПрошелПроверку = ИСТИНА;
										КонецЕсли;
									КонецЕсли;	 
									
									Если ПараметрПрошелПроверку Тогда
										ПрошлоПроверку = ПрошлоПроверку + 1;
									КонецЕсли;	 
									
									СтрокаЗначенияПараметров = СтрокаЗначенияПараметров + ЗначениеПараметра;
								КонецЦикла;
								
								//Если формат не равен [ПУСТОЕ,ПУСТОЕ,ПУСТОЕ], то значения всех трех параметров не должны равняться 0
								Если (СокрЛП(ФорматФОВ) <> "___")и(СтрокаЗначенияПараметров="000") Тогда//
									ПрошлоПроверку = 0;
									СтрокаОшибкиФормата = СтрокаОшибкиФормата + "В параметрах (Годы,Месяцы,Дни) должно быть указано отработанное время!"+Символы.ПС;
								КонецЕсли;	
								
								Если ПрошлоПроверку = 2 Тогда
									ФОВДопустимо = Истина;
									Прервать;
								КонецЕсли;
								
								СтрФорматФОВ = ФорматФОВ;
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"_",",пустое");
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"ч",",часы");
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"м",",минуты");
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Г",",годы");
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"М",",месяцы");
								СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Д",",дни");
								СтрФорматФОВ = Сред(СтрФорматФОВ,2);//Убрали первую запятую
								
								СтрокаОшибкиФормата = "Соглано формату ["+СтрФорматФОВ+"]:"+Символы.ПС+СтрокаОшибкиФормата;            	
								СтрокаСообщений = СтрокаСообщений + СтрокаОшибкиФормата;
							КонецЦикла;	// по вариантам формата ФОВ
							
							Если НЕ ФОВДопустимо Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
							КонецЕсли;	 
							
						КонецЦикла;// По дополнительным записям	
					КонецЦикла;// По основным записям	
				КонецЦикла;// По физлицам
			КонецЦикла;	
		КонецЦикла;// По годам	
	КонецЦикла;// По обособленым подразделениям	
КонецФункции	 

//Выполняет проверку правильности заполнения набора записей о стаже для формы СЗВ-4
// Функция в параметре РезультатВыборкиЗаписей возвращает результат запроса выборки записей стажа
Функция СЗВ4_ПроверитьНаборЗаписейОСтаже(ИнициаторВызова, СтруктураПараметров, РезультатВыборкиЗаписей = "") Экспорт
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеИЗаработкеСЗВ4") Тогда
		
		Запрос.УстановитьПараметр("ДокументСсылка",				ИнициаторВызова);
		Запрос.УстановитьПараметр("ДатаАктуальности",			СтруктураПараметров.ДатаАктуальности);
		Запрос.УстановитьПараметр("НачалоГода",					НачалоГода(СтруктураПараметров.ДатаАктуальности));
		Запрос.УстановитьПараметр("ВидАдресаДляИнформирования",	Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица);
		Запрос.УстановитьПараметр("Организация",				СтруктураПараметров.Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация",		СтруктураПараметров.ГоловнаяОрганизация);
		
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЧ.НомерСтроки,
		|	ТЧ.ФизЛицо КАК ФизЛицо,
		|	ТЧ.АдресДляИнформирования,
		|	ТЧ.ФизЛицо.Наименование,
		|	ТЧ.ФизЛицо.СтраховойНомерПФР,
		|	ТЧ.Ссылка.Год,
		|	ТЧ.Ссылка.Организация
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК ТЧ
		|ГДЕ
		|	ТЧ.Ссылка = &ДокументСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТЗарегистрированныеСотрудниками
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО ТЧРаботникиОрг.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|			И (СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация)
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка ЕСТЬ НЕ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		Запрос.Выполнить();
		
		// В запросе кроме записей стажа выбираются данные, необходимые документу: ФИО физлиц, адреса, данные об отчислениях
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрг.ФизЛицо КАК ФизЛицо,
		|	ТЧРаботникиОрг.ФизЛицоСтраховойНомерПФР КАК СтраховойНомерПФР,
		|	ТЧРаботникиОрг.АдресДляИнформирования КАК АдресДляИнформирования,
		|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	ЗаписиОСтаже.Год КАК Год,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЕСТЬNULL(ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа, 0) КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЕСТЬNULL(ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа, 0) КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
		|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ТЧРаботникиОрг.ФизЛицоНаименование) КАК ФизЛицоНаименование,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаСтраховуюЧастьПФР, 0) КАК НачисленоНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаНакопительнуюЧастьПФР, 0) КАК НачисленоНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоДополнительномуТарифу, 0) КАК НачисленоПоДополнительномуТарифу,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.ДнейБолезни, 0) КАК ДнейБолезни,
		|	ЕСТЬNULL(СуммыВзносов.ДнейОтпускаЗаСвойСчет, 0) КАК ДнейОтпускаЗаСвойСчет,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизации.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаАктуальности,
		|				ФизЛицо В
		|					(ВЫБРАТЬ
		|						ТЧ.ФизЛицо
		|					ИЗ
		|						ВТДанныеДокумента КАК ТЧ)) КАК ФИОФизЛицСрезПоследних
		|		ПО ТЧРаботникиОрг.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарегистрированныеСотрудниками КАК РаботникиОрганизации
		|		ПО ТЧРаботникиОрг.НомерСтроки = РаботникиОрганизации.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
		|		ПО ТЧРаботникиОрг.ФизЛицо = ЗаписиОСтаже.ФизЛицо
		|			И ТЧРаботникиОрг.Год = ЗаписиОСтаже.Год
		|			И ТЧРаботникиОрг.Организация = ЗаписиОСтаже.ОбособленноеПодразделение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыВзносовДляСЗВ4 КАК СуммыВзносов
		|		ПО ТЧРаботникиОрг.ФизЛицо = СуммыВзносов.ФизЛицо
		|			И ТЧРаботникиОрг.Год = СуммыВзносов.Год
		|			И ТЧРаботникиОрг.Организация = СуммыВзносов.ОбособленноеПодразделение
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕСТЬNULL(ЗаписиОСтаже.ОбособленноеПодразделение, """"),
		|	Год,
		|	НомерСтроки,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "НомерСтроки";
		
		
	Иначе//Инициатором вызова является набор записей
		
		Запрос.УстановитьПараметр("МассивФизЛиц" , СтруктураПараметров.МассивФизЛиц);
		Запрос.УстановитьПараметр("МассивЛет" , СтруктураПараметров.МассивЛет);
		Запрос.УстановитьПараметр("МассивОбособленныхПодразделений" , СтруктураПараметров.МассивОбособленныхПодразделений);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
		|	ЗаписиОСтаже.Год КАК Год,
		|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаСтраховуюЧастьПФР, 0) КАК НачисленоНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаНакопительнуюЧастьПФР, 0) КАК НачисленоНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоДополнительномуТарифу, 0) КАК НачисленоПоДополнительномуТарифу,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.ДнейБолезни, 0) КАК ДнейБолезни,
		|	ЕСТЬNULL(СуммыВзносов.ДнейОтпускаЗаСвойСчет, 0) КАК ДнейОтпускаЗаСвойСчет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет
		|ИЗ
		|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыВзносовДляСЗВ4 КАК СуммыВзносов
		|		ПО ЗаписиОСтаже.ФизЛицо = СуммыВзносов.ФизЛицо
		|			И ЗаписиОСтаже.Год = СуммыВзносов.Год
		|			И ЗаписиОСтаже.ОбособленноеПодразделение = СуммыВзносов.ОбособленноеПодразделение
		|ГДЕ
		|	ЗаписиОСтаже.ФизЛицо В(&МассивФизЛиц)
		|	И ЗаписиОСтаже.Год В(&МассивЛет)
		|	И ЗаписиОСтаже.ОбособленноеПодразделение В(&МассивОбособленныхПодразделений)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	Год,
		|	ФизЛицо,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		
		ИмяГруппировкиФизЛицо_НомерСтроки = "ФизЛицо";
	КонецЕсли;	
	
	РезультатВыборкиЗаписей = Запрос.Выполнить(); 
	ВыборкаЗаписей = РезультатВыборкиЗаписей.Выбрать();
	
	ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
	ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
	ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");
	
	//Проверку правильности заполнения записей надо выполнять отдельно для каждой организации, года и физлица
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("ОбособленноеПодразделение") Цикл
		
		ОбособленноеПодразделение = ВыборкаЗаписей.ОбособленноеПодразделение;
		Если ОбособленноеПодразделение = NULL Тогда
			Продолжить;
		КонецЕсли;
		Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("Год") Цикл
			
			Год = ВыборкаЗаписей.Год;
			
			Пока ВыборкаЗаписей.СледующийПоЗначениюПоля(ИмяГруппировкиФизЛицо_НомерСтроки) Цикл
				
				Если ВыборкаЗаписей.НомерОсновнойЗаписи = NULL Тогда
					Продолжить;//Физлицо не имеет сведений
				КонецЕсли; 
				
				ФизЛицо = ВыборкаЗаписей.ФизЛицо;
				
				ТекущаяОсновнаяЗапись = Новый Структура("ФизЛицо, ОбособленноеПодразделение, Год, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
				
				//Список значений группы реквизитов территориальные условия одной основной записи
				СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;
				
				//Список значений кодов условий труда одной основной записи
				СписокУсловияТрудаЗаписи = Новый СписокЗначений;
				
				//Список значений кодов выслуги лет основной записи
				СписокВыслугаЛетЗаписи = Новый СписокЗначений;
				
				ПредыдущийНомерОсновнойЗаписи = 0;
				ПредыдущийНомерДополнительнойЗаписи = 0;
				
				Пока ВыборкаЗаписей.Следующий() Цикл
					
					Запись = ВыборкаЗаписей;
					
					//Организация, физлицо и год должны быть заполнены обязательно
					Если Запись.ОбособленноеПодразделение.Пустая() Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указана организация (обособленное подразделение)!");
					КонецЕсли;	
					Если Запись.ФизЛицо.Пустая() Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указано физическое лицо!");
					КонецЕсли;	
					Если Запись.Год < 2002 Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Расчетный период (год) не может быть менее 2002!");
					КонецЕсли;	
					
					
					// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА
					
					//По умолчанию считаем, что запись основная
					ЭтоОсновнаяЗапись = Истина;
					
					//Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
					ДополнительнаяЗаписьВозможна = ПредыдущийНомерОсновнойЗаписи <> 0;
					
					//Проверка заполненния реквзитов "ДатаНачалаПериода" и "ДатаОкончанияПериода" 
					Если Не ЗначениеЗаполнено(Запись.ДатаНачалаПериода) и Не ЗначениеЗаполнено(Запись.ДатаОкончанияПериода) Тогда
						Если ДополнительнаяЗаписьВозможна Тогда
							ЭтоОсновнаяЗапись = Ложь;
						Иначе
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указаны даты начала и окончания периода!");
						КонецЕсли;	
					ИначеЕсли Не ЗначениеЗаполнено(Запись.ДатаНачалаПериода) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты окончания периода необходимо указывать дату начала периода!");
					ИначеЕсли Не ЗначениеЗаполнено(Запись.ДатаОкончанияПериода) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты начала периода необходимо указавать дату окончания периода!");
					Иначе//Обе даты заполнены
						
						//Дата начала периода не должна быть ранее 01.01.ГГГГ
						Если Запись.ДатаНачалаПериода < Дата(Год, 01, 01)  Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть не ранее 01.01." + Год + "!");
						КонецЕсли;	 
						
						//Дата окончания периода не должна быть позднее 31.12.ГГГГ
						Если Запись.ДатаОкончанияПериода > Дата(Год, 12, 31)  Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата окончания периода должна быть не позднее 31.12." + Год + "!");
						КонецЕсли;	 
						
						// Начало периода не должно быть позже окончания периода 
						Если Запись.ДатаНачалаПериода > Запись.ДатаОкончанияПериода Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода не должна превышать дату окончания периода!");
						КонецЕсли;
						
					КонецЕсли;	 
					
					//Проверка только для основной записи о стаже
					Если ЭтоОсновнаяЗапись Тогда
						
						//Проверка на хронологический порядок записей
						Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода <> Неопределено Тогда
							Если Запись.ДатаНачалаПериода <= ТекущаяОсновнаяЗапись.ДатаОкончанияПериода Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть больше даты окончания предыдущего периода!");
							КонецЕсли;	 
						КонецЕсли;
						
						//Переустановка текущей основной записи
						ТекущаяОсновнаяЗапись.ФизЛицо = ФизЛицо;
						ТекущаяОсновнаяЗапись.Год = Год;
						ТекущаяОсновнаяЗапись.ОбособленноеПодразделение = ОбособленноеПодразделение;
						ТекущаяОсновнаяЗапись.ДатаНачалаПериода = Запись.ДатаНачалаПериода;
						ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = Запись.ДатаОкончанияПериода;
						ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = Запись.ОсобыеУсловияТруда;
						ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = Запись.ОснованиеВыслугиЛет;
						ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = Запись.ОснованиеВыслугиЛетКод;
						ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = Запись.ТерриториальныеУсловия;
						ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = Запись.ОснованиеИсчисляемогоСтажа;
						ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
						ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;
						
						СписокТерриториальныеУсловияЗаписи.Очистить();
						СписокУсловияТрудаЗаписи.Очистить();
						СписокВыслугаЛетЗаписи.Очистить();
					КонецЕсли;	 
					
					// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ
					
					//Проверка нумерации основных и дополнительных записей
					Если (ЭтоОсновнаяЗапись) Тогда
						ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
						Если (Запись.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)  Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер основной записи. Ожидается номер: "+ОжидаемыйНомерОсновнойЗаписи+"!");;
						КонецЕсли;
					Иначе
						ОжидаемыйНомерДополнительнойЗаписи = ПредыдущийНомерДополнительнойЗаписи +1;
						Если (Запись.НомерДополнительнойЗаписи <> ОжидаемыйНомерДополнительнойЗаписи)  Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер дополнительной записи. Ожидается номер: "+ОжидаемыйНомерДополнительнойЗаписи+"!", ТекущаяОсновнаяЗапись);;
						КонецЕсли;
					КонецЕсли;
					
					
					//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП
					
					//Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
					УказаныТерриториальныеУсловия = НЕ ПустаяСтрока(Запись.ТерриториальныеУсловияКод);
					
					//Признаки заполнения реквизитов группы "Особые условия труда"
					УказанКодПозицииСписка = НЕ ПустаяСтрока(Запись.КодПозицииСпискаКод);
					УказаныОсобыеУсловияТруда = НЕ ПустаяСтрока(Запись.ОсобыеУсловияТрудаКод);
					ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;
					
					//Признаки заполнения реквизитов группы "Исчисляемый стаж"
					УказаноОснованиеИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ОснованиеИсчисляемогоСтажаКод);
					УказанТретийПараметрИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ТретийПараметрИсчисляемогоСтажа);
					ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;
					
					//Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
					УказанПараметрИсчисляемогоСтажа1 = НЕ (Запись.ПервыйПараметрИсчисляемогоСтажа = 0); 
					УказанПараметрИсчисляемогоСтажа2 = НЕ (Запись.ВторойПараметрИсчисляемогоСтажа = 0); 
					ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;
					
					//Признаки заполнения реквизитов группы "ВыслугаЛет"
					УказаноОснованиеВыслугиЛет = НЕ ПустаяСтрока(Запись.ОснованиеВыслугиЛетКод);
					ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;
					
					
					//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ СТАЖА ОСНОВНОЙ И ДОПОЛНИТЕЛЬНОЙ ЗАПИСЕЙ 
					
					Если НЕ ЭтоОсновнаяЗапись Тогда
						СЗВ4_ВыполнитьПроверкуДополнительнойЗаписиСтажа(Запись, ТекущаяОсновнаяЗапись, ТаблицаПлохихЗаписей);
					КонецЕсли;	 
					
					// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ
					
					Если УказаныТерриториальныеУсловия Тогда
						ПредставлениеЗначения = ""+ СОКРЛП(Запись.ТерриториальныеУсловияКод);
						Если СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанные в дополнительной записи территориальные условия "+ПредставлениеЗначения+" не должны повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						Иначе	
							СписокТерриториальныеУсловияЗаписи.Добавить(ПредставлениеЗначения);
						КонецЕсли;	 
					КонецЕсли;	 
					
					Если УказаныОсобыеУсловияТруда Тогда
						ПредставлениеЗначения = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
						Если СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код условий труда "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						Иначе	
							СписокУсловияТрудаЗаписи.Добавить(ПредставлениеЗначения);
						КонецЕсли;	 
					КонецЕсли;	 
					
					Если УказаноОснованиеВыслугиЛет Тогда
						ПредставлениеЗначения = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
						Если СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код выслуги лет "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						Иначе	
							СписокВыслугаЛетЗаписи.Добавить(ПредставлениеЗначения);
						КонецЕсли;	 
					КонецЕсли;	
					
					//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"
					
					КПС = СокрЛП(Запись.КодПозицииСпискаКод);
					
					//Определим, к какому списку принадлежит код позиции
					НазваниеСписка ="";
					Если УказанКодПозицииСписка Тогда 
						
						Если НЕ УказаныОсобыеУсловияТруда Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Код позиции списка не может указываться без указания кода особых условий труда!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	 
						
						ДлинаКПС = СтрДлина(КПС);
						
						Если (ДлинаКПС=8)или(ДлинаКПС=14) Тогда
							
							Первые2СимволаКПС = Лев(КПС,2);
							Если (Первые2СимволаКПС = "10")или(Первые2СимволаКПС = "11")или(Первые2СимволаКПС = "12") Тогда
								НазваниеСписка = "Список№1";
							ИначеЕсли (Первые2СимволаКПС >= "20")и(Первые2СимволаКПС <= "23") Тогда
								НазваниеСписка = "Список№2";
							Иначе	
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный код позиции списка вредных профессий!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
						ИначеЕсли (ДлинаКПС=5) Тогда
							НазваниеСписка = "ПрочиеСписки";
						Иначе	
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Длина кода позиции списка должна быть равна либо 5, либо 8, либо 14 символам!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	 
					КонецЕсли;//УказанКодПозицииСписка	 
					
					Если УказаныОсобыеУсловияТруда Тогда
						
						//Проверки на возможные коды списков для конкретных условий труда
						
						КодОсобыхУсловийТруда = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
						Первые8СимволовКПС = Лев(КПС,8);
						НачалоСообщения = "Для особых условий труда с кодом " + КодОсобыхУсловийТруда;
						
						Если Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_1 Тогда
							Если (НазваниеСписка <> "Список№1") Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " должен быть указан код позиции Списка №1!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
						ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_2 Тогда
							
							Если (НЕ УказанКодПозицииСписка) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен быть указан код позиции Списка №1 или Списка №2!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
							Если (НазваниеСписка = "Список№1") Тогда
								Если (Первые8СимволовКПС <> "1010300Б")и(Первые8СимволовКПС <> "1010100Г")и(Первые8СимволовКПС <> "1010100Д")  Тогда
									СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
								КонецЕсли;	
							ИначеЕсли (НазваниеСписка <> "Список№2") Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
						Иначе
							//Для остальных кодов условий труда КПС указываться не должен
							Если УказанКодПозицииСписка Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка указываться не должен!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
						КонецЕсли;	 
						
					КонецЕсли;//УказаныОсобыеУсловияТруда	 
					
					//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"
					
					УказанПараметр1 = НЕ (Запись.ПервыйПараметрВыслугиЛет = 0);
					УказанПараметр2 = НЕ (Запись.ВторойПараметрВыслугиЛет = 0);
					УказанПараметр3 = НЕ (Запись.ТретийПараметрВыслугиЛет = 0);
					ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);
					
					Если УказаноОснованиеВыслугиЛет Тогда
						
						КодОснования = СокрЛП(Запись.ОснованиеВыслугиЛетКод);
						НачалоСообщения = "Для основания выслуги лет " + КодОснования;
						
						УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);
						
						//Медицинские работники
						Если (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМ) 
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГД)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМХР)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГДХР) Тогда
							
							Если НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1)) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
							ИначеЕсли НЕ УказанТолькоТретийПараметр Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен указываться только третий параметр!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
							//Педагогические работники	
						ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПД Тогда
							
							Если УказанПараметр2 Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " второй параметр указываться не должен!", ТекущаяОсновнаяЗапись);
							ИначеЕсли НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1)) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
						ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПДРК Тогда
							
							Если (УказанПараметр2) или (УказанПараметр3) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " может быть указан только первый параметр!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
							//Летчики
						ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.САМОЛЕТ) 
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.СПЕЦАВ)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСИСП)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЛЕТИСП) 
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИНСПЕКТ)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ОПЫТИСП)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИСПКЛС1)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСМАВ)Тогда
							
							Если  УказанПараметр3 Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
							Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 1 и 2 должны содержать отработанное время (часы и минуты)!", ТекущаяОсновнаяЗапись);
							КонецЕслИ;	
							
							//Парашютисты	
						ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.РЕАКТИВН)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМСП)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМАПР) Тогда	
							
							Если (УказанПараметр2) ИЛИ (УказанПараметр3) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 2 и 3 указываться не должны!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							
							//Управление воздушным движением и  инженерно-технический состав 	
						ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_14)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15) Тогда
							
							Если  УказанПараметр3 Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
							
							//Прочие коды выслуги лет	
						Иначе
							Если ПараметрыУказаны Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры выслуги лет 1,2,3 указываться не должны!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	 
						КонецЕсли;	 
					Иначе
						Если ПараметрыУказаны Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись," Параметры выслуги лет 1,2,3 без указания основания выслуги лет указываться не должны!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	 
					КонецЕсли;	 
					
					//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр)
					
					Если УказанТретийПараметрИсчисляемогоСтажа Тогда
						Если (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕТИ") И (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕКРЕТ") Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Третий параметр исчисляемого стажа должен содержать значение ДЕТИ или ДЕКРЕТ!", ТекущаяОсновнаяЗапись);
						ИначеЕсли (Запись.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ") Тогда
							Если (УказаноОснованиеИсчисляемогоСтажа) ИЛИ (ЗаданаГруппаФОВ) ИЛИ (УказаноОснованиеВыслугиЛет)  Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании третьего параметра исчисляемого стажа следующие группы реквизитов должны быть пустыми:		
								| Исчисляемый стаж: основание, Фактически отработанное время, Выслуга лет!", ТекущаяОсновнаяЗапись);
							КонецЕсли;	
							Если ((ЗаданаГруппаУсловияТруда)ИЛИ(УказаныТерриториальныеУсловия)) Тогда
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в третьем параметре исчисляемого стажа значения ДЕТИ группы реквизитов 
								|""Условия труда, Территориальные условия"" указываться не должны!", ТекущаяОсновнаяЗапись);
							КонецЕсли; 
						КонецЕсли;	 
					КонецЕсли;	 
					
					//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 1,2 ИСЧИСЛЯЕМОГО СТАЖА)   
					
					Если ЗаданаГруппаФОВ Тогда
						Если (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеИсчисляемогоСтажа)
							И (НЕ УказаныТерриториальныеУсловия)  Тогда
							СтрОшибка = " Параметры 1,2 исчисляемого стажа должны указываться только при заполнении других групп реквизитов"
							+(Символы.ПС + " (Территориальные условия, Условия труда, Исчисляемый стаж: основание)!");
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
						КонецЕсли;	
						
						Если Запись.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
							
							Если Запись.ПервыйПараметрИсчисляемогоСтажа > 11 Тогда
								СтрОшибка = "Первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11!";
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							КонецЕсли;	 	
							Если Запись.ВторойПараметрИсчисляемогоСтажа > 30 Тогда
								СтрОшибка = "Второй параметр исчисляемого стажа (Дни) не должен быть больше 30!";
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							КонецЕсли;	 	
							
							Лет = 0;
							Месяцев = 0;
							Дней = 0;
							ПолучитьСтажЗаПериод(ТекущаяОсновнаяЗапись.ДатаОкончанияПериода,	ТекущаяОсновнаяЗапись.ДатаНачалаПериода, Лет,	Месяцев, Дней);			
							ПолучитьПриведенныйСтаж(Лет,Месяцев,Дней);
							КалендарноеВремя = Лет*12*30+Месяцев*30+Дней;
							ФОВДляСравнения = Запись.ПервыйПараметрИсчисляемогоСтажа *30 + Запись.ВторойПараметрИсчисляемогоСтажа; 
							
							Если (ФОВДляСравнения > КалендарноеВремя) Тогда
								СтрОшибка = "Указанное фактически отработанное время превышает календарное время!";
								СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							КонецЕсли;	
						КонецЕсли;	 
						
					КонецЕсли;	 
					
					//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  
					
					//Запомним для следующей итерации
					ПредыдущийНомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
					ПредыдущийНомерДополнительнойЗаписи = Запись.НомерДополнительнойЗаписи;
					
				КонецЦикла;//Цикл по записям стажа текущего физлица за год
				
			КонецЦикла;//Цикл по физлицам
		КонецЦикла;//Цикл по годам 
	КонецЦикла;//Цикл по обособленным подразделениям
	
	//Структура
	СЗВ4_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(ИнициаторВызова, СтруктураПараметров, ТаблицаПлохихЗаписей);
	
	Если ТаблицаПлохихЗаписей.Количество() > 0 Тогда
		// Вывод ошибок
		ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке набора записей о стаже");
		Возврат Ложь
	Иначе	
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Выполняет авторасчет стажа для формы СЗВ4
//
Функция СЗВ4_ПолучитьДанныеДляЗаполненияСтажа(ОбособленноеПодразделение, Год, ФизЛицо = Неопределено,  Знач ДатаОкончанияПериодаЗаполнения = Неопределено) Экспорт

	НачалоГода = Дата(Год,1,1);
	КонецГода = КонецГода(Дата(Год,1,1));
	
	Если ДатаОкончанияПериодаЗаполнения = Неопределено Тогда
		ДатаОкончанияПериодаЗаполнения = КонецГода;
	КонецЕсли;
	ДатаОкончанияПериодаЗаполнения = КонецДня(ДатаОкончанияПериодаЗаполнения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ФизЛицо",					ФизЛицо);
	Запрос.УстановитьПараметр("Год",						Год);
	Запрос.УстановитьПараметр("НачалоГода",					НачалоГода);
	Запрос.УстановитьПараметр("КонецГода",					ДатаОкончанияПериодаЗаполнения);
	Запрос.УстановитьПараметр("НачалоСледующегоГода",		ДатаОкончанияПериодаЗаполнения + 1);
	Запрос.УстановитьПараметр("Организация",				ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение));
	Запрос.УстановитьПараметр("ТерриториальныеУсловия",		ОбособленноеПодразделение.ТерриториальныеУсловияПФР);
	Запрос.УстановитьПараметр("ПустыеУсловияТруда",			Справочники.ОсобыеУсловияТруда.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустыеОснованияВыслугиЛет",	Справочники.ОснованияВыслугиЛет.ПустаяСсылка());
	
	// Выборка периодов постоянства назначения физлица в организации
	УсловиеНаФизлицоТекст = ?(ФизЛицо = Неопределено,"",Символы.ПС + Символы.Таб + "И <имя таблицы>.ФизЛицо В (&ФизЛицо)");
	
	Запрос.Текст = "ВЫБРАТЬ
	|	НачалаПериодов.Сотрудник,
	|	НачалаПериодов.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	&Организация КАК ОбособленноеПодразделение,
	|	&Год КАК Год,
	|	&ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	&ПустыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	"""" КАК КодПозицииСписка,
	|	&ПустыеОснованияВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	&НачалоГода КАК ОтчетныйПериод,
	|	НачалаПериодов.ДатаНачала КАК ДатаНачалаПериода,
	|	МИНИМУМ(ОкончанияПериодов.ДатаОкончания) КАК ДатаОкончанияПериода
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник,
	|		&НачалоГода КАК ДатаНачала
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&НачалоГода,
	|				Организация = &ГоловнаяОрганизация
	|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)"
	+ СтрЗаменить(УсловиеНаФизлицоТекст,"<имя таблицы>","Сотрудник") + ") КАК РаботникиОрганизацииСрезПоследних
	|	ГДЕ
	|		РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		РаботникиОрганизации.Сотрудник,
	|		РаботникиОрганизации.Период
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|	ГДЕ
	|		РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|		И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)"
	+ СтрЗаменить(УсловиеНаФизлицоТекст,"<имя таблицы>","Сотрудник") + "
	|		И РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|		И РаботникиОрганизации.Период > &НачалоГода
	|		И РаботникиОрганизации.Период <= &КонецГода) КАК НачалаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник,
	|			&КонецГода КАК ДатаОкончания
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|					&КонецГода,
	|					Организация = &ГоловнаяОрганизация
	|						И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)"
	+ СтрЗаменить(УсловиеНаФизлицоТекст,"<имя таблицы>","Сотрудник") + ") КАК РаботникиОрганизацииСрезПоследних
	|		ГДЕ
	|			РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			РаботникиОрганизации.Сотрудник,
	|			ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ГДЕ
	|			РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|			И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)"
	+ СтрЗаменить(УсловиеНаФизлицоТекст,"<имя таблицы>","Сотрудник") + "
	|			И РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			И РаботникиОрганизации.Период > &НачалоГода
	|			И РаботникиОрганизации.Период <= &КонецГода) КАК ОкончанияПериодов
	|		ПО ОкончанияПериодов.Сотрудник = НачалаПериодов.Сотрудник
	|			И ОкончанияПериодов.ДатаОкончания >= НачалаПериодов.ДатаНачала
	|
	|СГРУППИРОВАТЬ ПО
	|	НачалаПериодов.Сотрудник,
	|	НачалаПериодов.ДатаНачала
	|УПОРЯДОЧИТЬ ПО
	|	НачалаПериодов.Сотрудник,
	|	НачалаПериодов.ДатаНачала";

	 	
	ТаблицаСтажа = Запрос.Выполнить().Выгрузить();
	ТаблицаСтажа.Индексы.Добавить("ФизЛицо");
	
	// Удалим из таблицы стажа незначимые записи:
	//  - если по физлицу имеется 2 непрерывных записи с одинаковыми условиями труда, то объединим данные записи 
	Н = ТаблицаСтажа.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажа[Н];
		ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
			ТаблицаСтажа.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	ТаблицаСтажа.Сортировать("ФизЛицо,ДатаНачалаПериода");
	
	// таблица стажа не поддерживается...
	// договоры не поддерживаются...
	
	Возврат ТаблицаСтажа;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПРОГРАММОЙ CheckXML

// Процедура, считывает путь установки CheckXML из реестра, и
// если не находит инофрмации, проверяет путь установки по умолчанию
//
Функция ПолучитьПредполагаемыйПутьУстановкиCheckXML() Экспорт
	
	ПапкаПрограммы = "";
	#Если Клиент Тогда
		СистИнформация = Новый СистемнаяИнформация;
		ВерсияОС = СистИнформация.ВерсияОС;
		МожноИспользоватьКомандуРеестра = (Найти(ВерсияОС, "Windows 95") = 0) И (Найти(ВерсияОС, "Windows 98") = 0);
		Если МожноИспользоватьКомандуРеестра Тогда
			ВремПапка = КаталогВременныхФайлов();
			КомандаСистемы("reg query HKCU\Software\CheckXML /s > FindCheckXML.txt", ВремПапка);
			ТекстДокумент = Новый ТекстовыйДокумент;
			ТекстДокумент.Прочитать(ВремПапка + "FindCheckXML.txt");
			ПредСтрока = "";
			ПапкаПрограммы = "";
			Для НомерСтроки = 0 По ТекстДокумент.КоличествоСтрок() Цикл
				ТекущаяСтрока = ТекстДокумент.ПолучитьСтроку(НомерСтроки);
				Если Найти(ПредСтрока, "HKEY_CURRENT_USER\Software\CheckXML") > 0 Тогда
					ПапкаПрограммы = СтрЗаменить(ТекущаяСтрока, "    InstPath    REG_SZ    ", "");
					ПапкаПрограммы = СтрЗаменить(ПапкаПрограммы , "    InstPath	REG_SZ	", "");
					Прервать
				КонецЕсли;
				ПредСтрока = ТекущаяСтрока;
			КонецЦикла;
			УдалитьФайлы(ВремПапка + "\FindCheckXML.txt");
		КонецЕсли;
		Если ПапкаПрограммы = Неопределено Или ПапкаПрограммы = "" Тогда
			ИсполняемыйФайл = Новый Файл("C:\Program Files\CheckXML\CheckXML.exe");
			Если ИсполняемыйФайл.Существует() Тогда
				ПапкаПрограммы = "C:\Program Files\CheckXML";
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	Возврат ПапкаПрограммы;
	
КонецФункции //ПолучитьПредполагаемыйПутьУстановкиCheckXML()

// Процедура, считывает путь установки CheckUFA из реестра, и
// если не находит инофрмации, проверяет путь установки по умолчанию
//
Функция ПолучитьПредполагаемыйПутьУстановкиCheckUFA() Экспорт
	
	ПапкаПрограммы = "";
	#Если Клиент Тогда
		СистИнформация = Новый СистемнаяИнформация;
		ВерсияОС = СистИнформация.ВерсияОС;
		МожноИспользоватьКомандуРеестра = (Найти(ВерсияОС, "Windows 95") = 0) И (Найти(ВерсияОС, "Windows 98") = 0);
		Если МожноИспользоватьКомандуРеестра Тогда
			ВремПапка = КаталогВременныхФайлов();
			КомандаСистемы("reg query HKLM\Software\CheckXmlUfa /s > FindCheckXmlUfa.txt", ВремПапка);
			ТекстДокумент = Новый ТекстовыйДокумент;
			ТекстДокумент.Прочитать(ВремПапка + "FindCheckXmlUfa.txt");
			ПредСтрока = "";
			ПапкаПрограммы = "";
			Для НомерСтроки = 0 По ТекстДокумент.КоличествоСтрок() Цикл
				ТекущаяСтрока = ТекстДокумент.ПолучитьСтроку(НомерСтроки);
				Если Найти(ПредСтрока, "HKEY_LOCAL_MACHINE\Software\CheckXmlUfa") > 0 Тогда
					ПапкаПрограммы = СокрЛП(СтрЗаменить(СокрЛП(ТекущаяСтрока), "InstallPath    REG_SZ", ""));
					Прервать
				КонецЕсли;
				ПредСтрока = ТекущаяСтрока;
			КонецЦикла;
			УдалитьФайлы(ВремПапка + "\FindCheckXmlUfa.txt");
		КонецЕсли;	
	#КонецЕсли
	Возврат ПапкаПрограммы;
	
КонецФункции

// Процедура вызывает тестирование файла программой проверки
//
Процедура ПроверитьФайлВCheckXML(ДокументОбъект, ФормаВладелец) Экспорт
	ФормаПроверки = ПолучитьОбщуюФорму("ФормаПроверкиCheckXML", ФормаВладелец);
	ФормаПроверки.ДокументОбъект = ДокументОбъект;
	ФормаПроверки.Открыть();
	
КонецПроцедуры // ПроверитьФайлВCheckXML()

// Процедура вызывает тестирование файла программой проверки
//
Процедура ПроверитьФайлВCheckUFA(ДокументОбъект, ФормаВладелец) Экспорт
	ФормаПроверки = ПолучитьОбщуюФорму("ФормаПроверкиCheckUFA", ФормаВладелец);
	ФормаПроверки.ДокументОбъект = ДокументОбъект;
	ФормаПроверки.Открыть();	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕРСУЧЕТА С 2010 ГОДА

Процедура ПроставитьНомерПачки(ДокументОбъект) Экспорт

	Если Не ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		Возврат
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.НомерПачки) Тогда // определим очередной номер
		Год = Год(ДокументОбъект.Дата);
		СледующийНомер = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайловПФР(ДокументОбъект.Организация, Год) + 1;
		ДокументОбъект.НомерПачки = Формат(СледующийНомер,"ЧЦ=5; ЧГ=0");
		РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайловПФР(ДокументОбъект.Организация, Год, СледующийНомер);
	Иначе // уточним данные регистра, если номер поправили вручную
		НомерПачки = ДокументОбъект.НомерПачки;
		Если Не ОбщегоНазначения.ТолькоЦифрыВСтроке(НомерПачки, , Ложь) Тогда
			Возврат
		КонецЕсли;
		Год = Год(ДокументОбъект.Дата);
		ТекущийНомер = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайловПФР(ДокументОбъект.Организация, Год);
		НомерПачки = Число(НомерПачки);
		Если НомерПачки > ТекущийНомер Тогда
			РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайловПФР(ДокументОбъект.Организация, Год, НомерПачки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьПроведения(ДокументОбъект, Отказ, РежимЗаписи, ЭтоСпециальныйДокумент = Ложь) Экспорт

	Если ДокументОбъект.СпециальныйДокумент2010года Тогда
		Сообщить(?(РежимЗаписи = РежимЗаписиДокумента.Проведение,"Перепроведение","Отмена проведения") +" этого документа запрещен"+ ?(РежимЗаписи = РежимЗаписиДокумента.Проведение,"о","а") + "!");
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Функция ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод) Экспорт 

	Возврат ?(Не ЗначениеЗаполнено(ОтчетныйПериод),ОтчетныйПериод,?(ОтчетныйПериод < '20100101',КонецГода(ОтчетныйПериод),?(ОтчетныйПериод < '20110101', КонецМесяца(ДобавитьМесяц(ОтчетныйПериод, 5)), КонецКвартала(ОтчетныйПериод))))

КонецФункции // ОкончаниеОтчетногоПериода()

Функция НачалоОтчетногоПериодаПерсучета(НекаяДата) Экспорт 
	
	Если НекаяДата < '20100701' Тогда
		Возврат НачалоГода(НекаяДата)	
	ИначеЕсли НекаяДата < '20110101' Тогда
		Возврат '20100701'
	Иначе
		Возврат НачалоКвартала(НекаяДата);
	КонецЕсли;
	
КонецФункции

Функция ПредшествующийОтчетныйПериодПерсучета(НекаяДата) Экспорт 
	
	Если НекаяДата < '20100301' Тогда
		Возврат ДобавитьМесяц(НачалоГода(НекаяДата), -12)
	ИначеЕсли НекаяДата < '20110101' Тогда
		Возврат '20100101'
	ИначеЕсли НекаяДата < '20110401' Тогда
		Возврат '20100701'
	Иначе
		Возврат ДобавитьМесяц(НачалоКвартала(НекаяДата), -3);
	КонецЕсли;
	
КонецФункции // ОкончаниеОтчетногоПериода()

Процедура ПоместитьВМенеджерСоответствиеТарифаКатегории(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим) КАК ВидТарифаСтраховыхВзносов,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР) КАК КатегорияЗастрахованныхЛиц,
	|	1 КАК Порядок,
	|	2010 КАК ГодС,
	|	2100 КАК ГодПо
	|ПОМЕСТИТЬ ВТСоответствиеТарифаКатегории
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2011,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕНВД),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2011,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.СельХозПроизводители),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.НародныеХудожественныеПромыслы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2020,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ХозОбществаБюджетныхВУЗов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2020,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ITОрганизации),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2020,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежимПроизводство),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2013,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УчастникПроектаИнновационныйЦентрСколково),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	6,
	|	2010,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.УСЕН),
	|	5,
	|	2010,
	|	2010
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕНВД),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.УСЕН),
	|	5,
	|	2010,
	|	2010
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.СельХозПроизводители),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	2,
	|	2010,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ),
	|	3,
	|	2010,
	|	2010
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.НародныеХудожественныеПромыслы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	2,
	|	2011,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	3,
	|	2011,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ),
	|	3,
	|	2010,
	|	2010
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	3,
	|	2011,
	|	2019
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	3,
	|	2011,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ХозОбществаБюджетныхВУЗов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	3,
	|	2011,
	|	2019
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ITОрганизации),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	3,
	|	2011,
	|	2019
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежимПроизводство),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	3,
	|	2011,
	|	2012
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	4,
	|	2010,
	|	2014
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидТарифаСтраховыхВзносов";
	Запрос.Выполнить();

	
КонецПроцедуры

Функция КатегорииЗастрахованныхЛицОрганизации(Организация, ГоловнаяОрганизация, ОтчетныйПериод, ОкончаниеОтчетногоПериода = Неопределено) Экспорт

	СписокКатегорийЗастрахованныхЛиц = Новый СписокЗначений;
	
	Если ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.НР, "НАЕМ/РАБОТНИК");
		Возврат СписокКатегорийЗастрахованныхЛиц;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Организация);
	Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ОтчетныйПериод",	ОтчетныйПериод);
	Запрос.УстановитьПараметр("ГодОтчетногоПериода", Год(ОтчетныйПериод));
	Если Не ЗначениеЗаполнено(ОкончаниеОтчетногоПериода) Тогда
		ОкончаниеОтчетногоПериода = ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод)
	КонецЕсли;
	Запрос.УстановитьПараметр("ОкончаниеОтчетногоПериода", ОкончаниеОтчетногоПериода);
	
	ПоместитьВМенеджерСоответствиеТарифаКатегории(Запрос.МенеджерВременныхТаблиц);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетнаяПолитикаНалоговыйУчет.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
	|	ГОД(УчетнаяПолитикаНалоговыйУчет.Период) КАК ГодОтчетногоПериода
	|ПОМЕСТИТЬ ВТТарифыОрганизации
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|ГДЕ
	|	УчетнаяПолитикаНалоговыйУчет.Период МЕЖДУ &ОтчетныйПериод И &ОкончаниеОтчетногоПериода
	|	И УчетнаяПолитикаНалоговыйУчет.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ВидТарифаСтраховыхВзносов,
	|	&ГодОтчетногоПериода
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ОтчетныйПериод, Организация = &Организация) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтраховыеВзносыСведенияОДоходахОбороты.РезультатОборот, 0) <> 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕНВД)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	&ГодОтчетногоПериода
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыСведенияОДоходах.Обороты(
	|			&ОтчетныйПериод,
	|			&ОкончаниеОтчетногоПериода,
	|			,
	|			ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				И ОблагаетсяЕНВД) КАК СтраховыеВзносыСведенияОДоходахОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц) КАК Представление,
	|	СоответствиеТарифаКатегории.Порядок КАК Порядок
	|ИЗ
	|	ВТТарифыОрганизации КАК ТарифыОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаКатегории КАК СоответствиеТарифаКатегории
	|		ПО ТарифыОрганизации.ВидТарифаСтраховыхВзносов = СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов
	|			И (ТарифыОрганизации.ГодОтчетногоПериода МЕЖДУ СоответствиеТарифаКатегории.ГодС И СоответствиеТарифаКатегории.ГодПо)
	|ГДЕ
	|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса,"РегистрСведений.УчетнаяПолитикаНалоговыйУчет", ЗаполнениеРегламентированнойОтчетностиПереопределяемый.ИмяУчетнойПолитики());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокКатегорийЗастрахованныхЛиц.Добавить(Выборка.КатегорияЗастрахованныхЛиц,Выборка.Представление);
	КонецЦикла;
	Если СписокКатегорийЗастрахованныхЛиц.Количество() = 0 Тогда
		СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.НР, "НАЕМ/РАБОТНИК");
		Если Год(ОтчетныйПериод) = 2010 Тогда
			СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ОЗОИ, "ОСОБАЯ/ЗОНА/ОРГАНИЗАЦИИ ИНВАЛИДОВ");
		ИначеЕсли Год(ОтчетныйПериод) < 2015 Тогда
			СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ООИ);
		КонецЕсли;
	Иначе
		Если Год(ОтчетныйПериод) = 2010 Тогда
			Если СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(Перечисления.КатегорииЗастрахованныхЛицПФР.ОЗОИ) = Неопределено Тогда 	
				СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ОЗОИ, "ОСОБАЯ/ЗОНА/ОРГАНИЗАЦИИ ИНВАЛИДОВ");
			КонецЕсли;
		ИначеЕсли Год(ОтчетныйПериод) < 2015 Тогда
			Если СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(Перечисления.КатегорииЗастрахованныхЛицПФР.ООИ) = Неопределено Тогда 	
				СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ООИ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокКатегорийЗастрахованныхЛиц
	
КонецФункции

Функция ОписаниеОтчетногоПериодаДляПоказа(ОтчетныйПериод) Экспорт
	
	Если ОтчетныйПериод = '20100701' Тогда
		Описание = "2 полугодие 2010 г.";
	Иначе
		Описание = ПредставлениеПериода(ОтчетныйПериод, ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод), "ФП = Истина");
	КонецЕсли;
	
	Возврат Описание
	
КонецФункции // ОписаниеОтчетногоПериодаДляПечати()

Функция ДанныеРуководителяОрганизации(Организация, ДатаАктуальности) Экспорт

	СтруктураДанных = Новый Структура("Руководитель,ДолжностьРуководителя");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ДатаАктуальности - 1);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК Руководитель,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			&Дата,
	|			СтруктурнаяЕдиница = &Организация
	|				И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий(); 
	ЗаполнитьЗначенияСвойств(СтруктураДанных,Выборка,"Руководитель,ДолжностьРуководителя");
	
	Возврат СтруктураДанных

КонецФункции // ДанныеРуководителяОрганизации()

Функция ОписаниеОтчетногоПериодаДляПечати(Год, Квартал, РазбиратьКакКорректируемыйПериод = Ложь) Экспорт
	
	Если РазбиратьКакКорректируемыйПериод Тогда
		СтруктураОписания = Новый Структура("КорректируемыйГод,ЭтоКварталКорректируемогоГода,ЭтоПолугодиеКорректируемогоГода,Это9МесяцевКорректируемогоГода,ЭтоВесьКорректируемыйГод");
		Если ЗначениеЗаполнено(Год) Тогда
			СтруктураОписания.КорректируемыйГод = Год;
			СтруктураОписания.ЭтоКварталКорректируемогоГода = Квартал = "1";
			СтруктураОписания.ЭтоПолугодиеКорректируемогоГода = Квартал = "2";
			СтруктураОписания.Это9МесяцевКорректируемогоГода = Квартал = "3";
			СтруктураОписания.ЭтоВесьКорректируемыйГод = Квартал = "4";
		КонецЕсли;	
	Иначе
		СтруктураОписания = Новый Структура("ЭтоПолугодие2010, Это2010год,ОтчетныйГод,ЭтоКварталОтчетногоГода,ЭтоПолугодиеОтчетногоГода,Это9МесяцевОтчетногоГода,ЭтоВесьОтчетныйГод");
		Если ЗначениеЗаполнено(Год) Тогда
			Если Год < "2011" Тогда
				СтруктураОписания.ЭтоПолугодие2010 = Квартал = "1";
				СтруктураОписания.Это2010год = Не СтруктураОписания.ЭтоПолугодие2010;
			Иначе
				СтруктураОписания.ОтчетныйГод = Год;
				СтруктураОписания.ЭтоКварталОтчетногоГода = Квартал = "1";
				СтруктураОписания.ЭтоПолугодиеОтчетногоГода = Квартал = "2";
				СтруктураОписания.Это9МесяцевОтчетногоГода = Квартал = "3";
				СтруктураОписания.ЭтоВесьОтчетныйГод = Квартал = "4";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОписания
	
КонецФункции // ОписаниеОтчетногоПериодаДляПечати()

#Если Клиент Тогда
	
Процедура ПрочитатьСведенияПринятыеПФР(Организация, ОтчетныйПериод, ПринятоПФР, ИменаПрошлыхПачек, МассивПрошлыхПериодов, ЕстьДоступКНачислениям = Истина) Экспорт
	
	МассивПрошлыхПериодов = Новый Массив;
	ПринятоПФР.Очистить();
	
	Если Не ЕстьДоступКНачислениям Или Организация.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ОтчетныйПериод",	ОтчетныйПериод);
	Запрос.УстановитьПараметр("ДатаЗаменыЕСН", ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияПринятыеПФР.КомплектДокументов КАК Пачка,
	|	СведенияПринятыеПФР.ОтчетныйПериодПерсучетаПФР КАК ОтчетныйПериод,
	|	СведенияПринятыеПФР.КомплектДокументов.НомерПачки КАК НомерПачки
	|ИЗ
	|	РегистрСведений.СведенияПринятыеПФР КАК СведенияПринятыеПФР
	|ГДЕ
	|	СведенияПринятыеПФР.ОтчетныйПериодПерсучетаПФР < &ОтчетныйПериод
	|	И СведенияПринятыеПФР.КомплектДокументов <> ЗНАЧЕНИЕ(Документ.ПередачаСЗВ4ВПФР.ПустаяСсылка)
	|	И СведенияПринятыеПФР.Организация = &Организация
	|	И СведенияПринятыеПФР.ОтчетныйПериодПерсучетаПФР >= &ДатаЗаменыЕСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетныйПериод УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Данные.ОтчетныйПериодПерсучетаПФР) КАК ОтчетныйПериодПерсучетаПФР
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияПринятыеПФР.ОтчетныйПериодПерсучетаПФР КАК ОтчетныйПериодПерсучетаПФР
	|	ИЗ
	|		РегистрСведений.СведенияПринятыеПФР КАК СведенияПринятыеПФР
	|	ГДЕ
	|		СведенияПринятыеПФР.ОтчетныйПериодПерсучетаПФР < &ОтчетныйПериод
	|		И СведенияПринятыеПФР.Организация = &Организация
	|		И СведенияПринятыеПФР.ОтчетныйПериодПерсучетаПФР >= &ДатаЗаменыЕСН
	|		И СведенияПринятыеПФР.КомплектДокументов <> ЗНАЧЕНИЕ(Документ.ПередачаСЗВ4ВПФР.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА СтраховыеВзносыСведенияОДоходах.Период < ДАТАВРЕМЯ(2010, 7, 1)
	|				ТОГДА НАЧАЛОПЕРИОДА(СтраховыеВзносыСведенияОДоходах.Период, ГОД)
	|			КОГДА СтраховыеВзносыСведенияОДоходах.Период < ДАТАВРЕМЯ(2011, 1, 1)
	|				ТОГДА ДАТАВРЕМЯ(2010, 7, 1)
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(СтраховыеВзносыСведенияОДоходах.Период, КВАРТАЛ)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.СтраховыеВзносыСведенияОДоходах КАК СтраховыеВзносыСведенияОДоходах
	|	ГДЕ
	|		СтраховыеВзносыСведенияОДоходах.Период >= &ДатаЗаменыЕСН
	|		И СтраховыеВзносыСведенияОДоходах.ОбособленноеПодразделение = &Организация
	|		И СтраховыеВзносыСведенияОДоходах.Период < &ОтчетныйПериод) КАК Данные";
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	
	ИменаПрошлыхПачек = "";
	МассивПачек = Новый Массив;
	НачальныйПериод = ОтчетныйПериод;
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПринятоПФР.Добавить(), Выборка);
		МассивПачек.Добавить(Выборка.Пачка);
		Если Не ПустаяСтрока(ИменаПрошлыхПачек) Тогда
			ИменаПрошлыхПачек = ИменаПрошлыхПачек + ", ";
		КонецЕсли;
		ИменаПрошлыхПачек = ИменаПрошлыхПачек + "№ " + СокрЛП(Выборка.НомерПачки) + " за " + ОписаниеОтчетногоПериодаДляПоказа(Выборка.ОтчетныйПериод);
		НачальныйПериод = Выборка.ОтчетныйПериод;
	КонецЦикла;
	
	Если Не Результаты[1].Пустой() Тогда
		Выборка = Результаты[1].Выбрать();
		Выборка.Следующий();
		РасчетныйПериод = Выборка.ОтчетныйПериодПерсучетаПФР;
		Если РасчетныйПериод <> Null Тогда
			Пока РасчетныйПериод < ОтчетныйПериод Цикл
				МассивПрошлыхПериодов.Добавить(РасчетныйПериод);
				Если Год(РасчетныйПериод) < 2011 Тогда
					РасчетныйПериод = ДобавитьМесяц(РасчетныйПериод, 6);
				Иначе
					РасчетныйПериод = ДобавитьМесяц(РасчетныйПериод, 3);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ОписаниеСостоянияПринятыхПФРДанных(КоличествоПринятыхДокументов, ДокументыПФР, МассивПрошлыхПериодов, ИменаУчитываемыхПачек, ЭлементыФормы, ДописыватьРекламуРабочегоМеста = Ложь) Экспорт

	Если КоличествоПринятыхДокументов = 0 Тогда
		Если МассивПрошлыхПериодов.Количество() = 0 Тогда
			ТекстИнфонадписи = "Распределение сумм уплаченных взносов производится по данным текущего периода с использованием коэффициентов уплаты, рассчитанных в целом по страхователю."
			+ ?(ДописыватьРекламуРабочегоМеста," Указать принятые ПФР сведения предыдущих периодов можно в форме подготовки данных для ПФР."," Для подбора сведений предыдущих периодов используйте меню Добавить.");
			ВажностьСообщения = "СообщениеИнформация";
		Иначе
			МассивЛет = Новый Массив;
			Для Каждого ПрошлыйПериод Из МассивПрошлыхПериодов Цикл
				Если МассивЛет.Найти(Год(ПрошлыйПериод)) = Неопределено Тогда
					МассивЛет.Добавить(Год(ПрошлыйПериод));
				КонецЕсли;
			КонецЦикла;
			ИменаПрошлыхЛет = "";
			Для Каждого СтрокаГода Из МассивЛет Цикл
				Если Не ПустаяСтрока(ИменаПрошлыхЛет) Тогда
					ИменаПрошлыхЛет = ИменаПрошлыхЛет + ", ";
				КонецЕсли;
				ИменаПрошлыхЛет = ИменаПрошлыхЛет + Формат(СтрокаГода,"ЧЦ=4; ЧДЦ=0; ЧГ=0");
			КонецЦикла;
			
			ТекстИнфонадписи = "Распределение сумм уплаченных взносов производится с учетом переданных ранее в ПФР сведений. Необходимо подобрать (или загрузить из файлов перс.учета) принятые ПФР сведения за " + ИменаПрошлыхЛет + " год" + ?(МассивПрошлыхПериодов.Количество() > 1, "ы", "")
								+ ?(ДописыватьРекламуРабочегоМеста," в форме подготовки данных для ПФР!","! Для подбора сведений используйте меню Добавить.");
			ВажностьСообщения = "СообщениеОПроблемах";
		КонецЕсли;
	ИначеЕсли КоличествоПринятыхДокументов <> МассивПрошлыхПериодов.Количество() Тогда
		
		МассивНедостающихЛет = Новый Массив;
		Для Каждого ПрошлыйПериод Из МассивПрошлыхПериодов Цикл
			Если ДокументыПФР.Найти(ПрошлыйПериод, "ОтчетныйПериод") = Неопределено И МассивНедостающихЛет.Найти(Год(ПрошлыйПериод)) = Неопределено Тогда
				МассивНедостающихЛет.Добавить(Год(ПрошлыйПериод));
			КонецЕсли;
		КонецЦикла;
		
		ИменаПрошлыхЛет = "";
		Для Каждого СтрокаГода Из МассивНедостающихЛет Цикл
			Если Не ПустаяСтрока(ИменаПрошлыхЛет) Тогда
				ИменаПрошлыхЛет = ИменаПрошлыхЛет + ", ";
			КонецЕсли;
			
			ИменаПрошлыхЛет = ИменаПрошлыхЛет + Формат(СтрокаГода,"ЧЦ=4; ЧДЦ=0; ЧГ=0");
		КонецЦикла;
		
		ТекстИнфонадписи = "Распределение сумм уплаченных взносов производится с учетом переданных ранее в ПФР сведений. Подобраны не все документы за " + ИменаПрошлыхЛет + " год" + ?(МассивНедостающихЛет.Количество() > 1, "ы", "") + "!"
							+ ?(ДописыватьРекламуРабочегоМеста," Указать принятые ПФР сведения предыдущих периодов можно в форме подготовки данных для ПФР."," Для подбора сведений используйте меню Добавить.");
		ВажностьСообщения = "СообщениеОПроблемах";
		
	Иначе
		ТекстИнфонадписи = "Распределение сумм уплаченных взносов производится с учетом следующих переданных в ПФР пачек АДВ-6-2: " + ИменаУчитываемыхПачек
							+ ?(ДописыватьРекламуРабочегоМеста," Изменить перечень учитываемых документов можно в форме подготовки данных для ПФР."," Чтобы изменить перечень учитываемых документов, используйте меню Добавить.");
		ВажностьСообщения = "СообщениеИнформация";
	КонецЕсли;

	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьСостояниеПачекДокументов, ЭлементыФормы.ПолеКартинкиСостояниеПачекДокументов, ТекстИнфонадписи, ВажностьСообщения);
	
КонецПроцедуры


// По переданной строке дерева, описывающего ПФР-овский файл, и структуре дополнительных данных
// создает и заполняет структуру с данными входящей описи
Функция ДанныеОписиАДВ_6_3(СтрокаДереваВходящаяОпись, ДополнительныеДанные) Экспорт
	
	//Печать описи документов
	ИнформацияОПачке = Новый Структура;
	ИнформацияОПачке.Вставить("РегНомерПФР", "");
	ИнформацияОПачке.Вставить("НаименованиеОрганизации", "");
	ИнформацияОПачке.Вставить("ИНН", "");
	ИнформацияОПачке.Вставить("КПП", "");
	ИнформацияОПачке.Вставить("ДокументовВПачке", "");
	ИнформацияОПачке.Вставить("НачисленоСтраховая", "");
	ИнформацияОПачке.Вставить("УплаченоСтраховая", "");
	ИнформацияОПачке.Вставить("НачисленоНакопительная", "");
	ИнформацияОПачке.Вставить("УплаченоНакопительная", "");
	ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", "");
	ИнформацияОПачке.Вставить("РуководительДолжность", ДополнительныеДанные.РуководительДолжность);
	ИнформацияОПачке.Вставить("Руководитель", ДополнительныеДанные.Руководитель);
	ИнформацияОПачке.Вставить("ОКПО", ДополнительныеДанные.ОКПО);
	
	ИнформацияОПачке.Вставить("КодКатегории", ИзвлечьДанное(СтрокаДереваВходящаяОпись, "КодКатегории"));
	
	ТипСведенийВФайле = ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ТипСведений");
	ИнформацияОПачке.Вставить("ЭтоИсходныйДокумент",		ТипСведенийВФайле = "ИСХОДНАЯ");
	ИнформацияОПачке.Вставить("ЭтоКорректирующийДокумент",	ТипСведенийВФайле = "КОРРЕКТИРУЮЩАЯ");
	ИнформацияОПачке.Вставить("ЭтоОтменяющийДокумент",		ТипСведенийВФайле = "ОТМЕНЯЮЩАЯ");
	
	ИнформацияОПачке.Вставить("ДатаСоставленияОписи", ДатаXMLВОтчет(ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ДатаСоставления")));
	
	СтрокаДереваСоставительПачки = СтрокаДереваВходящаяОпись.Строки.Найти("СоставительПачки", "Имя");
	Если СтрокаДереваСоставительПачки <> Неопределено Тогда
		ИнформацияОПачке.Вставить("НаименованиеОрганизации", ИзвлечьДанное(СтрокаДереваСоставительПачки, "НаименованиеКраткое"));
		ИнформацияОПачке.Вставить("РегНомерПФР", ИзвлечьДанное(СтрокаДереваСоставительПачки, "РегистрационныйНомер"));
		ИнформацияОПачке.Вставить("ИНН", ИзвлечьДанное(СтрокаДереваСоставительПачки, "ИНН"));
		ИнформацияОПачке.Вставить("КПП", ИзвлечьДанное(СтрокаДереваСоставительПачки, "КПП"));
	КонецЕсли;
	
	Квартал = 0; Год = 0;
	СтрокаДереваОтчетныйПериод = СтрокаДереваВходящаяОпись.Строки.Найти("ОтчетныйПериод", "Имя");
	Если СтрокаДереваОтчетныйПериод <> Неопределено Тогда
		Квартал = ИзвлечьДанное(СтрокаДереваОтчетныйПериод, "Квартал");
		Год = ИзвлечьДанное(СтрокаДереваОтчетныйПериод, "Год");
		ИнформацияОПачке.Вставить("РасчетныйПериод", Квартал + ?(Год < "2011", "-ое полугодие ", "-ый квартал ") + Год + " года");
	КонецЕсли;
	Для каждого Элемент Из ОписаниеОтчетногоПериодаДляПечати(Год, Квартал) Цикл
	    ИнформацияОПачке.Вставить(Элемент.Ключ,Элемент.Значение)
	КонецЦикла;
	
	Квартал = 0; Год = 0;
	СтрокаДереваОтчетныйПериод = СтрокаДереваВходящаяОпись.Строки.Найти("КорректируемыйОтчетныйПериод", "Имя");
	Если СтрокаДереваОтчетныйПериод <> Неопределено Тогда
		Квартал = ИзвлечьДанное(СтрокаДереваОтчетныйПериод, "Квартал");
		Год = ИзвлечьДанное(СтрокаДереваОтчетныйПериод, "Год");
		Если Год = "2010" Тогда
			Если Квартал = "1" Тогда
				Квартал = "2";
			ИначеЕсли Квартал = "2" Тогда
				Квартал = "4";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Для каждого Элемент Из ОписаниеОтчетногоПериодаДляПечати(Год, Квартал, Истина) Цикл
	    ИнформацияОПачке.Вставить(Элемент.Ключ,Элемент.Значение)
	КонецЦикла;
	
	СтрокаДереваСоставДокументов = СтрокаДереваВходящаяОпись.Строки.Найти("СоставДокументов", "Имя");
	Если СтрокаДереваСоставДокументов <> Неопределено Тогда
		СтрокаДереваНаличиеДокументов = СтрокаДереваСоставДокументов.Строки.Найти("НаличиеДокументов", "Имя");
		Если СтрокаДереваНаличиеДокументов <> Неопределено Тогда
			ИнформацияОПачке.Вставить("ДокументовВПачке", ИзвлечьДанное(СтрокаДереваНаличиеДокументов, "Количество"));
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДереваВзносы = СтрокаДереваВходящаяОпись.Строки.Найти("СуммаВзносовНаСтраховую");
	Если СтрокаДереваВзносы <> Неопределено Тогда
		ИнформацияОПачке.Вставить("НачисленоСтраховая", Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Начислено")), "ЧДЦ=2"));
		ИнформацияОПачке.Вставить("УплаченоСтраховая", Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Уплачено")), "ЧДЦ=2"));
	КонецЕсли;
	
	СтрокаДереваВзносы = СтрокаДереваВходящаяОпись.Строки.Найти("СуммаВзносовНаНакопительную");
	Если СтрокаДереваВзносы <> Неопределено Тогда
		ИнформацияОПачке.Вставить("НачисленоНакопительная", Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Начислено")), "ЧДЦ=2"));
		ИнформацияОПачке.Вставить("УплаченоНакопительная", Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Уплачено")), "ЧДЦ=2"));
	КонецЕсли;
	
	СтрокаДереваНомерПачки = СтрокаДереваВходящаяОпись.Строки.Найти("НомерПачки", "Имя");
	Если СтрокаДереваНомерПачки <> Неопределено Тогда
		СтрокаДереваОсновной = СтрокаДереваНомерПачки.Строки.Найти("Основной", "Имя");
		Если СтрокаДереваОсновной <> Неопределено Тогда
			НомерПачкиРаботодателя = ИзвлечьДанное(СтрокаДереваНомерПачки, "Основной");
		Иначе
			НомерПачкиРаботодателя = ИзвлечьДанное(СтрокаДереваНомерПачки, "ПоПодразделению");
		КонецЕсли;
		ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", НомерПачкиРаботодателя);
	КонецЕсли;
	
	Возврат ИнформацияОПачке				
	
КонецФункции

//Выводит в табличный документ "ТабличныйДокумент" заполненный макет описи "Форма АДВ-6-3"
Процедура ВывестиОписьАДВ_6_3(ТабличныйДокумент,Знач ИнформацияОПачке) Экспорт

	МакетОписи = ПолучитьОбщийМакет("ФормаАДВ_6_3");
	СекцияОпись = МакетОписи.ПолучитьОбласть("Опись");
	ЗаполнитьЗначенияСвойств(СекцияОпись.Параметры,ИнформацияОПачке);
	ТабличныйДокумент.Вывести(СекцияОпись);
	
КонецПроцедуры	 

Функция ПечатнаяФормаСЗВ_6(ДокументОбъект, ТипФормДокументов, ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, ВыводитьСписок = Ложь, ОчищатьСообщения = Истина) Экспорт
	
	
	ЕстьОшибки = Ложь;
	ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ДокументОбъект, ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Заголовок = "Печать документа " + СокрЛП(ДокументОбъект);
	
	ДеревоПФР = ПреобразоватьВДеревоXML(ТекстФайла);
	
	Если ДеревоПФР = Неопределено Тогда
		Сообщить("Не удалось разобрать файл с данными!");
		Возврат Неопределено 
	КонецЕсли;
	ДеревоПФР = ДеревоПФР.Строки.Найти("ФайлПФР","Имя");
	Если ДеревоПФР = Неопределено Тогда
		Сообщить("Не удалось разобрать файл с данными!");
		Возврат Неопределено 
	КонецЕсли;
	
	СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
	Если СтрокаДереваПачкаВходящихДокументов <> Неопределено Тогда
		
		СтрокаДереваВходящаяОпись = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ", "Имя");
		Если СтрокаДереваВходящаяОпись <> Неопределено Тогда
			
			ВыборкаПоШапкеДокумента = ДокументОбъект.СформироватьЗапросПоШапке().Выбрать();
			ВыборкаПоШапкеДокумента.Следующий();
			
			// проверим данные руководителя
			Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Руководитель) Или Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РуководительДолжность) Тогда
				
				Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Руководитель) Тогда
					Сообщить("Не указан руководитель!");
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РуководительДолжность) Тогда
					Сообщить("Не указана должность руководителя!");
				КонецЕсли;
				
				
			КонецЕсли;
			
			Вывести62как61 = ТипФормДокументов = "СЗВ-6-2" И ИмяМакета = "ФормаСЗВ_6_1";
			ВыводимСЗВ_6_1 = Вывести62как61 Или ТипФормДокументов = "СЗВ-6-1" Или ТипФормДокументов = "СПВ-1";
			
			// Формы СЗВ-6-хх
			ДокументРезультат = Новый ТабличныйДокумент;
			ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработке" + ИмяМакета;
			ДокументРезультат.ОриентацияСтраницы = ?(ВыводимСЗВ_6_1, ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
			
			Если Вывести62как61 Или ТипФормДокументов = "СЗВ-6-1" Тогда
				Макет = ДокументОбъект.ПолучитьМакет("ФормаСЗВ_6_1")
			ИначеЕсли ТипФормДокументов = "СЗВ-6-2" Тогда
				Макет = ДокументОбъект.ПолучитьМакет("ФормаСЗВ_6_2")
			ИначеЕсли ТипФормДокументов = "СПВ-1" Тогда
				Макет = ДокументОбъект.ПолучитьМакет("ФормаСПВ_1");
			КонецЕсли;
			
			// Рабочие области макета
			ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
			ОбластьДокумент = Макет.ПолучитьОбласть("Строка");
			ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
			Если ВыводимСЗВ_6_1 Или ТипФормДокументов = "СПВ-1" Тогда
				ОбластьСтаж = Макет.ПолучитьОбласть("Стаж");
			Иначе
				ОбластьСтаж = ОбластьДокумент
			КонецЕсли;
			
			// Список застрахованных лиц
			Если ВыводитьСписок Тогда
				
				ДокументСписокЗастрахованныхЛиц = Новый ТабличныйДокумент;
				ДокументСписокЗастрахованныхЛиц.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ6_Список";
			
				Макет = ДокументОбъект.ПолучитьМакет("СписокЗастрахованныхЛиц");
				ОбластьШапкаСписка = Макет.ПолучитьОбласть("Шапка");
				ОбластьСтрокаСписка = Макет.ПолучитьОбласть("СтрокаРаботника");
				ОбластьПодвалСписка = Макет.ПолучитьОбласть("Подвал");
				ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
				
				// массив с двумя строками - для разбиения на страницы
				ВыводимыеОбласти = Новый Массив();
				ВыводимыеОбласти.Добавить(ОбластьСтрокаСписка);
				
			КонецЕсли;
			
			ИнформацияОПачке = ДанныеОписиАДВ_6_3(СтрокаДереваВходящаяОпись, ВыборкаПоШапкеДокумента);
			Если ТипФормДокументов = "СПВ-1" Тогда
				ИнформацияОПачке.Вставить("ТипИногоДокумента","Сведения о начисленных, уплаченных страховых взносах на обязательное пенсионное страхование и страховом стаже застрахованного лица для установления трудовой пенсии");
				ИнформацияОПачке.Вставить("Количество",ИнформацияОПачке.ДокументовВПачке);
				ИнформацияОПачке.Вставить("ИныхДокументовВПачке",ИнформацияОПачке.ДокументовВПачке);
				ИнформацияОПачке.Вставить("ДокументовВПачке","");
			ИначеЕсли Не ВыводимСЗВ_6_1 Тогда
				ИнформацияОПачке.Вставить("ТипИногоДокумента","Реестр сведений о начисленных и уплаченных страховых взносах на обязательное пенсионное страхование и страховом стаже застрахованных лиц");
				ИнформацияОПачке.Вставить("Количество",ИнформацияОПачке.ДокументовВПачке);
				ИнформацияОПачке.Вставить("ИныхДокументовВПачке",1);
				ИнформацияОПачке.Вставить("ДокументовВПачке","");
			Иначе
				ИнформацияОПачке.Вставить("ТипИногоДокумента"," ____________________________________ ____________________________");
			КонецЕсли;
			
			НомерПачкиРаботодателя = ИнформацияОПачке.НомерПачкиРаботодателя;
			
			// Опись АДВ-6-3
			Если ТипФормДокументов <> "СЗВ-6-2" Тогда
				ДокументОписи = Новый ТабличныйДокумент;
				ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ6_АДВ_6_3";
				ДокументОписи.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
				ВывестиОписьАДВ_6_3(ДокументОписи, ИнформацияОПачке);
				УниверсальныеМеханизмы.НапечататьДокумент(ДокументОписи, КоличествоЭкземпляров, НаПринтер,"Опись документов (АДВ-6-3); пачка №" + НомерПачкиРаботодателя);
			КонецЕсли;
			
			// копируем данные описи в остальные документы
			ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры,ИнформацияОПачке);
			ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры,ИнформацияОПачке);
			Если ВыводитьСписок Тогда
				// Список застрахованных лиц
				ИнформацияОПачке.Вставить("РегистрационныйНомерПФР",ИнформацияОПачке.РегНомерПФР);
				ИнформацияОПачке.Вставить("НаименованиеСокращенное",ИнформацияОПачке.НаименованиеОрганизации);
				ЗаполнитьЗначенияСвойств(ОбластьШапкаСписка.Параметры,ИнформацияОПачке,"РасчетныйПериод,НомерПачкиРаботодателя, РегистрационныйНомерПФР,НаименованиеСокращенное");
				ЗаполнитьЗначенияСвойств(ОбластьПодвалСписка.Параметры,ИнформацияОПачке,"РуководительДолжность, Руководитель, ДатаСоставленияОписи");
			КонецЕсли;
			
			// выводим шапки документов
			Если Не ВыводимСЗВ_6_1 Тогда 
				ДокументРезультат.Вывести(ОбластьШапка);
			КонецЕсли;
			
			Если ВыводитьСписок Тогда
				ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьШапкаСписка);
				НомерСтрокиСписка = 0;
			КонецЕсли;
			
			//Цикл по документам файла
			ВыводилиДанные = Ложь;
			НомерДокумента = 0;
			Для Каждого СтрокаДереваСЗВ6 Из СтрокаДереваПачкаВходящихДокументов.Строки Цикл
				
				//Читаем запись документа
				Если СтрокаДереваСЗВ6.Имя <> "СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ" Тогда
					Продолжить;
				КонецЕсли;
				
				Для СчПараметр = 0 По ОбластьСтаж.Параметры.Количество() - 1 Цикл
					ОбластьСтаж.Параметры[СчПараметр] = ""
				КонецЦикла;
				
				Если ВыводимСЗВ_6_1 Тогда //Каждый новый работник с новой страницы (отдельная форма СЗВ-6-1)
					Если Не ВыводилиДанные Тогда
						ВыводилиДанные = Истина;
					Иначе 
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					Если ТипФормДокументов = "СПВ-1" Тогда
						ДатаСоставленияСтрокой = ИзвлечьДанное(СтрокаДереваСЗВ6, "ДатаСоставленияНа");
						Если ЗначениеЗаполнено(ДатаСоставленияСтрокой) Тогда
							ОбластьШапка.Параметры.ДатаСоставления = Дата(Прав(ДатаСоставленияСтрокой,4) + Сред(ДатаСоставленияСтрокой,4,2) + Лев(ДатаСоставленияСтрокой,2))
						Иначе
							ОбластьШапка.Параметры.ДатаСоставления = ""
						КонецЕсли;
					КонецЕсли;
					ДокументРезультат.Вывести(ОбластьШапка);
				КонецЕсли;
				
				// Данные по физлицу
				ОбластьДокумент.Параметры.СтраховойНомерПФР = ИзвлечьДанное(СтрокаДереваСЗВ6, "СтраховойНомер");
				СтрокаДереваФИО = СтрокаДереваСЗВ6.Строки.Найти("ФИО");
				Если СтрокаДереваФИО <> Неопределено Тогда
					ОбластьДокумент.Параметры.ФИО = ИзвлечьДанное(СтрокаДереваФИО, "Фамилия") + " " + ИзвлечьДанное(СтрокаДереваФИО, "Имя") + " " + ИзвлечьДанное(СтрокаДереваФИО, "Отчество");
				Иначе
					ОбластьДокумент.Параметры.ФИО = "";
				КонецЕсли;
				Если ВыводитьСписок Тогда
					// Список застрахованных лиц
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаСписка.Параметры,ОбластьДокумент.Параметры,"СтраховойНомерПФР,ФИО");
				КонецЕсли;
				
				Если ТипФормДокументов = "СЗВ-6-1" Или ТипФормДокументов = "СЗВ-6-2" Тогда
					СтрокаДереваАдресЗЛ = СтрокаДереваСЗВ6.Строки.Найти("АдресЗЛ");
					Если СтрокаДереваАдресЗЛ <> Неопределено Тогда
						ОбластьДокумент.Параметры.Адрес = ВРег(ПредставлениеАдресадляПФР(СтрокаДереваАдресЗЛ));
						Если ОбластьДокумент.Параметры.Адрес = " 0" Тогда
							ОбластьДокумент.Параметры.Адрес = "";
						КонецЕсли;
					Иначе
						ОбластьДокумент.Параметры.Адрес = "";
					КонецЕсли;
				КонецЕсли;
				
				СтрокаДереваВзносы = СтрокаДереваСЗВ6.Строки.Найти("СуммаВзносовНаСтраховую");
				Если СтрокаДереваВзносы <> Неопределено Тогда
					ОбластьДокумент.Параметры.НачисленоСтраховая = Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Начислено")), "ЧДЦ=2");
					ОбластьДокумент.Параметры.УплаченоСтраховая = Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Уплачено")), "ЧДЦ=2");
				Иначе
					ОбластьДокумент.Параметры.НачисленоСтраховая = "";
					ОбластьДокумент.Параметры.УплаченоСтраховая = "";
				КонецЕсли;
				
				СтрокаДереваВзносы = СтрокаДереваСЗВ6.Строки.Найти("СуммаВзносовНаНакопительную");
				Если СтрокаДереваВзносы <> Неопределено Тогда
					ОбластьДокумент.Параметры.НачисленоНакопительная = Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Начислено")), "ЧДЦ=2");
					ОбластьДокумент.Параметры.УплаченоНакопительная = Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Уплачено")), "ЧДЦ=2");
				Иначе
					ОбластьДокумент.Параметры.НачисленоНакопительная = "";
					ОбластьДокумент.Параметры.УплаченоНакопительная = "";
				КонецЕсли;
				
				Если ВыводимСЗВ_6_1 Тогда 
					ДокументРезультат.Вывести(ОбластьДокумент);
					НомерДокумента = 0;
				Иначе
					ОбластьДокумент.Параметры.НомерСтроки = НомерДокумента + 1;
				КонецЕсли;
				
				//Цикл по основным записям о стаже
				СтрокиДереваСтажевыйПериод = СтрокаДереваСЗВ6.Строки.НайтиСтроки(Новый Структура("Имя","СтажевыйПериод"));
				Если СтрокиДереваСтажевыйПериод.Количество() > 0 Тогда
					ЭтоПерваяСтрокаСтажа = Истина;
					Для Каждого СтрокаДереваПериодРаботы Из СтрокиДереваСтажевыйПериод Цикл
						
						Если ВыводимСЗВ_6_1 Тогда
							Для СчПараметр = 0 По ОбластьСтаж.Параметры.Количество() - 1 Цикл
								ОбластьСтаж.Параметры[СчПараметр] = ""
							КонецЦикла;
							
							НомерДокумента = НомерДокумента + 1;
							ОбластьСтаж.Параметры.НомерСтроки = НомерДокумента;
							ОбластьСтаж.Параметры.ДатаНачалаПериода 	= ИзвлечьДанное(СтрокаДереваПериодРаботы, "ДатаНачалаПериода");
							ОбластьСтаж.Параметры.ДатаОкончанияПериода 	= ИзвлечьДанное(СтрокаДереваПериодРаботы, "ДатаКонцаПериода");
							СтрокиДереваОсобенностиУчета = СтрокаДереваПериодРаботы.Строки.НайтиСтроки(Новый Структура("Имя","ЛьготныйСтаж"));
							Если СтрокиДереваОсобенностиУчета.Количество() > 0 Тогда
								Для Каждого СтрокаДереваОсобенностиУчета Из СтрокиДереваОсобенностиУчета Цикл
									
									Если ИзвлечьДанное(СтрокаДереваОсобенностиУчета, "НомерСтроки") > "1" Тогда
										ОбластьСтаж.Параметры.НомерСтроки 			= "";
										ОбластьСтаж.Параметры.ДатаНачалаПериода 	= "";
										ОбластьСтаж.Параметры.ДатаОкончанияПериода 	= "";
									КонецЕсли;
									
									СтрокаДереваОсобенностиУчета = СтрокаДереваОсобенностиУчета.Строки.Найти("ОсобенностиУчета");
									
									ЗаписьТУ = Новый Структура("Коэффициент,ПервыйПараметрИсчисляемогоСтажа,ВторойПараметрИсчисляемогоСтажа",0,0,0);
									                                        
									СтрокаДереваТерриториальныеУсловия = СтрокаДереваОсобенностиУчета.Строки.Найти("ТерриториальныеУсловия");
									Если СтрокаДереваТерриториальныеУсловия <> Неопределено Тогда
										ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "ОснованиеТУ");
										ЗаписьТУ.Вставить("Коэффициент", ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "Коэффициент"));
									Иначе
										ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = "";
										ЗаписьТУ.Вставить("Коэффициент", 0);
									КонецЕсли;
									
									СтрокаДереваОсобыеУсловияТруда = СтрокаДереваОсобенностиУчета.Строки.Найти("ОсобыеУсловияТруда");
									Если СтрокаДереваОсобыеУсловияТруда <> Неопределено Тогда
										ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод 	= ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ОснованиеОУТ");
										ОбластьСтаж.Параметры.КодПозицииСписка = ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ПозицияСписка");
									Иначе
										ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = "";
										ОбластьСтаж.Параметры.КодПозицииСписка = "";
									КонецЕсли;
									
									ЗаписьЛгот = Новый Структура("ОснованиеИсчисляемогоСтажаКод,ПервыйПараметрИсчисляемогоСтажа,ВторойПараметрИсчисляемогоСтажа,ТретийПараметрИсчисляемогоСтажа","",0,0,"");
									
									СтрокаДереваДекретДети = СтрокаДереваОсобенностиУчета.Строки.Найти("ДекретДети");
									Если СтрокаДереваДекретДети <> Неопределено Тогда
										ЗаписьЛгот.Вставить("ТретийПараметрИсчисляемогоСтажа", СтрокаДереваДекретДети.Значение);
									КонецЕсли;
									
									СтрокаДереваИсчисляемыйСтаж = СтрокаДереваОсобенностиУчета.Строки.Найти("ИсчисляемыйСтаж");
									Если СтрокаДереваИсчисляемыйСтаж <> Неопределено Тогда
										
										// Представление параметров ИТС
										ОбластьСтаж.Параметры.ОснованиеИТС = ИзвлечьДанное(СтрокаДереваИсчисляемыйСтаж, "ОснованиеИС");
										
										СтрокаДереваВыработкаВЧасах = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаВчасах");
										СтрокаДереваВыработкаКалендарная = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаКалендарная");
										ПервыйПараметрИсчисляемогоСтажа = 0;
										ВторойПараметрИсчисляемогоСтажа = 0;
										Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
											ПервыйПараметрИсчисляемогоСтажа = ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Часы");
											ВторойПараметрИсчисляемогоСтажа = ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Минуты");
										ИначеЕсли СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
											ПервыйПараметрИсчисляемогоСтажа = ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы");
											ВторойПараметрИсчисляемогоСтажа = ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни");
										КонецЕсли;
										
										ЗаписьЛгот.Вставить("ОснованиеИсчисляемогоСтажаКод", ОбластьСтаж.Параметры.ОснованиеИТС);
										
										Если ЗначениеЗаполнено(ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод) Или ЗначениеЗаполнено(ОбластьСтаж.Параметры.ОснованиеИТС) Тогда
											ЗаписьЛгот.Вставить("ПервыйПараметрИсчисляемогоСтажа", Число(ПервыйПараметрИсчисляемогоСтажа));
											ЗаписьЛгот.Вставить("ВторойПараметрИсчисляемогоСтажа", Число(ВторойПараметрИсчисляемогоСтажа));
										Иначе
											ЗаписьТУ.Вставить("ПервыйПараметрИсчисляемогоСтажа", Число(ПервыйПараметрИсчисляемогоСтажа));
											ЗаписьТУ.Вставить("ВторойПараметрИсчисляемогоСтажа", Число(ВторойПараметрИсчисляемогоСтажа));
										КонецЕсли;
										
									КонецЕсли;
									
									ОбластьСтаж.Параметры.ДопИТС = ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьЛГОТ);
									ОбластьСтаж.Параметры.ДопТУ = ПредставлениеПараметровТерриториальныхУсловий(ЗаписьТУ);
									
									СтрокаДереваВыслугаЛет = СтрокаДереваОсобенностиУчета.Строки.Найти("ВыслугаЛет");
									Если СтрокаДереваВыслугаЛет <> Неопределено Тогда
										
										// Представление параметров выслуги лет
										ОбластьСтаж.Параметры.ОснованиеВыслуги = ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ОснованиеВЛ");
										
										
										СтрокаДереваВыработкаВЧасах = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаВчасах");
										СтрокаДереваВыработкаКалендарная = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаКалендарная");
										
										Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
											ПервыйПараметрВыслугиЛет = ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Часы");
											ВторойПараметрВыслугиЛет = ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Минуты");
										ИначеЕсли СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
											ПервыйПараметрВыслугиЛет = ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы");
											ВторойПараметрВыслугиЛет = ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни");
										Иначе
											ПервыйПараметрВыслугиЛет = "";
											ВторойПараметрВыслугиЛет = "";
										КонецЕсли;
										ТретийПараметрВыслугиЛет = ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ДоляСтавки");
										ЗаписьЛгот = Новый Структура;
										ЗаписьЛгот.Вставить("ОснованиеВыслугиЛетКод",ОбластьСтаж.Параметры.ОснованиеВыслуги);
										ЗаписьЛгот.Вставить("ПервыйПараметрВыслугиЛет",Число(ПервыйПараметрВыслугиЛет));
										ЗаписьЛгот.Вставить("ВторойПараметрВыслугиЛет",Число(ВторойПараметрВыслугиЛет));
										ЗаписьЛгот.Вставить("ТретийПараметрВыслугиЛет",Число(ТретийПараметрВыслугиЛет));
										
										
										ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьЛГОТ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
										
									КонецЕсли;
									
									ДокументРезультат.Вывести(ОбластьСтаж);
									
								КонецЦикла;
							Иначе
								ДокументРезультат.Вывести(ОбластьСтаж);
							КонецЕсли;
						Иначе
							Если ЭтоПерваяСтрокаСтажа Тогда
								НомерДокумента = НомерДокумента + 1;
								ОбластьСтаж.Параметры.НомерСтроки = НомерДокумента;
								ЭтоПерваяСтрокаСтажа = Ложь;
							Иначе
								Для СчПараметр = 0 По ОбластьСтаж.Параметры.Количество() - 1 Цикл
									ОбластьСтаж.Параметры[СчПараметр] = ""
								КонецЦикла;
							КонецЕсли;
							ОбластьСтаж.Параметры.ДатаНачалаПериода 	= СтрЗаменить(ИзвлечьДанное(СтрокаДереваПериодРаботы, "ДатаНачалаПериода"), ".20",".");
							ОбластьСтаж.Параметры.ДатаОкончанияПериода 	= СтрЗаменить(ИзвлечьДанное(СтрокаДереваПериодРаботы, "ДатаКонцаПериода"), ".20",".");
							ДокументРезультат.Вывести(ОбластьСтаж);
						КонецЕсли;
						
					КонецЦикла;
				Иначе
					НомерДокумента = НомерДокумента + 1;
					//ОбластьСтаж.Параметры.НомерСтроки = НомерДокумента;
					ДокументРезультат.Вывести(ОбластьСтаж);
				КонецЕсли; // Записи о стаже
				
				// Подвал формы на одного физлица
				Если ВыводимСЗВ_6_1 Тогда 
					ДокументРезультат.Вывести(ОбластьПодвал);
				КонецЕсли;
				
				Если ВыводитьСписок Тогда
						
					// Список застрахованных лиц
					//ЗаполнитьЗначенияСвойств(ОбластьСтрокаСписка.Параметры,ОбластьДокумент.Параметры,"СтраховойНомерПФР,ФИО");
					НомерСтрокиСписка = НомерСтрокиСписка + 1;
					ОбластьСтрокаСписка.Параметры.НомерСтроки = НомерСтрокиСписка;
					
					// Проверим, уместится ли строка на странице или надо открывать новую страницу
					ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументСписокЗастрахованныхЛиц, ВыводимыеОбласти);
					Если Не ВывестиПодвалЛиста и НомерДокумента = ИнформацияОПачке.ДокументовВПачке Тогда
						ВыводимыеОбласти.Добавить(ОбластьПодвалСписка);
						ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументСписокЗастрахованныхЛиц, ВыводимыеОбласти);
					КонецЕсли;
					Если ВывестиПодвалЛиста Тогда
						ДокументСписокЗастрахованныхЛиц.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументСписокЗастрахованныхЛиц.Вывести(ПовторятьПриПечатиСтроки);
					КонецЕсли;
					
					ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьСтрокаСписка);
					
				КонецЕсли;
				
			КонецЦикла; // по документам
			
			// выводим подвалы документов
			Если Не ВыводимСЗВ_6_1 Тогда 
				ДокументРезультат.Вывести(ОбластьПодвал);
			КонецЕсли;
			Если ВыводитьСписок Тогда
				// Список застрахованных лиц
				ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьПодвалСписка);
			КонецЕсли;
			
			// показываем результаты
			Если ВыводитьСписок Тогда
				УниверсальныеМеханизмы.НапечататьДокумент(ДокументСписокЗастрахованныхЛиц,КоличествоЭкземпляров, НаПринтер,"Список застрахованных лиц; пачка №" + НомерПачкиРаботодателя);
			КонецЕсли;
			УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат, КоличествоЭкземпляров, НаПринтер, "Индивидуальные сведения (" + ТипФормДокументов + "); пачка №" + НомерПачкиРаботодателя);
			Возврат "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ВывестиСЗВ_6()

#КонецЕсли

Функция ОписаниеОтчетногоПериодаДляФайла(ОтчетныйПериод) Экспорт
	
	Если ОтчетныйПериод = '20100101' Тогда
		СтруктураОписания = Новый Структура("Квартал,Год",1,2010);
	ИначеЕсли ОтчетныйПериод = '20100701' Тогда
		СтруктураОписания = Новый Структура("Квартал,Год",2,2010);
	ИначеЕсли ОтчетныйПериод >= '20110101' Тогда
		СтруктураОписания = Новый Структура("Квартал,Год",Цел((Месяц(ОтчетныйПериод) - 0.1) / 3) + 1,Год(ОтчетныйПериод));
	Иначе
		СтруктураОписания = Новый Структура("Квартал,Год");
	КонецЕсли;
	
	Возврат СтруктураОписания
	
КонецФункции // ОписаниеОтчетногоПериодаДляПечати()

Процедура ВписатьВзносыВНаборДанных(НаборДанных, НачисленоСтраховая, УплаченоСтраховая, НачисленоНакопительная, УплаченоНакопительная) Экспорт 
	
	Если НачисленоСтраховая > 0 Или УплаченоСтраховая > 0 Тогда
		СуммаВзносов = НаборДанных.СуммаВзносовНаСтраховую.Значение;

		Если НачисленоСтраховая > 0 Тогда
			СуммаВзносов.Начислено = НачисленоСтраховая;
		КонецЕсли;
		Если УплаченоСтраховая > 0 Тогда
			СуммаВзносов.Уплачено = УплаченоСтраховая;
		КонецЕсли;
	Иначе
		НаборДанных.Удалить("СуммаВзносовНаСтраховую");
	КонецЕсли;
	
	Если НачисленоНакопительная > 0 Или УплаченоНакопительная> 0 Тогда
		СуммаВзносов = НаборДанных.СуммаВзносовНаНакопительную.Значение;

		Если НачисленоНакопительная > 0 Тогда
			СуммаВзносов.Начислено = НачисленоНакопительная;
		КонецЕсли;
		Если УплаченоНакопительная > 0 Тогда
			СуммаВзносов.Уплачено = УплаченоНакопительная;
		КонецЕсли;
	Иначе
		НаборДанных.Удалить("СуммаВзносовНаНакопительную");
	КонецЕсли;
	
КонецПроцедуры

// Функция устанавливает значения реквизитов XML узла ВходящаяОпись
//
Функция ЗаполнитьНаборЗаписейВходящаяОпись2010(УзелПФР, МакетФормата, ТипДокумента, ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерПачки, НомерДокументаВПачке, МакетВходящейОписи = "ВХОДЯЩАЯ_ОПИСЬ", НаборЗаписейВходящаяОпись = Неопределено, ТегВходящейОписи = "ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ") Экспорт
	
	НаборЗаписейВходящаяОпись = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, МакетВходящейОписи);
	
	НаборЗаписейВходящаяОпись.НомерВПачке.Значение = НомерДокументаВПачке;
	// Составитель пачки
	НаборЗаписейСоставительПачки = НаборЗаписейВходящаяОпись.СоставительПачки.Значение; 
	ЗаполнитьСоставительПачки(НаборЗаписейСоставительПачки, ВыборкаПоШапкеДокумента); // ОрганизацияЮрФизЛицо, ОрганизацияИНН, ОрганизацияКПП, ОрганизацияОГРН, ОрганизацияНаименованиеОКОПФ, ОрганизацияНаименованиеПолное, ОрганизацияНаименованиеСокращенное

	// Устанавливаем значение Номер пачки
	НаборЗаписейВходящаяОпись.НомерПачки.Значение.Основной = НомерПачки; 
	// Блок СоставДокументов
	НаборЗаписейСоставДокументов = НаборЗаписейВходящаяОпись.СоставДокументов.Значение;
	НаборЗаписейСоставДокументов.Количество.Значение = 1;
	НаборЗаписейНаличиеДокументов = НаборЗаписейСоставДокументов.НаличиеДокументов.Значение;
	НаборЗаписейНаличиеДокументов.ТипДокумента = ТипДокумента;
	НаборЗаписейНаличиеДокументов.Количество = КоличествоДокументов;
	
	НаборЗаписейВходящаяОпись.ДатаСоставления.Значение = ВыборкаПоШапкеДокумента.Дата;
	
	Если ТипДокумента = "СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ" Тогда
		
		НаборЗаписейВходящаяОпись.ТипСведений.Значение = Строка(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ);
		НаборЗаписейВходящаяОпись.КодКатегории.Значение = ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаПоШапкеДокумента.КатегорияЗастрахованныхЛиц);
		
		НаборЗаписейОтчетныйПериод = НаборЗаписейВходящаяОпись.ОтчетныйПериод.Значение;
		ЗаполнитьЗначенияСвойств(НаборЗаписейОтчетныйПериод,ОписаниеОтчетногоПериодаДляФайла(ВыборкаПоШапкеДокумента.ОтчетныйПериод));
		
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			НаборЗаписейВходящаяОпись.Удалить("КорректируемыйОтчетныйПериод");
		Иначе
			НаборЗаписейОтчетныйПериод = НаборЗаписейВходящаяОпись.КорректируемыйОтчетныйПериод.Значение;
			ЗаполнитьЗначенияСвойств(НаборЗаписейОтчетныйПериод,ОписаниеОтчетногоПериодаДляФайла(ВыборкаПоШапкеДокумента.КорректируемыйПериод));
		КонецЕсли;
		
		ВписатьВзносыВНаборДанных(НаборЗаписейВходящаяОпись, Окр(ВыборкаПоШапкеДокумента.НачисленоСтраховая), Окр(ВыборкаПоШапкеДокумента.УплаченоСтраховая), Окр(ВыборкаПоШапкеДокумента.НачисленоНакопительная), Окр(ВыборкаПоШапкеДокумента.УплаченоНакопительная));
		
	ИначеЕсли ТипДокумента = "СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_И_ВОЗНАГРАЖДЕНИЙ" Тогда
		НаборЗаписейВходящаяОпись.ТипСведений.Значение = Строка(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ);
		НаборЗаписейВходящаяОпись.КодКатегории.Значение = ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаПоШапкеДокумента.КатегорияЗастрахованныхЛиц);
		НаборЗаписейВходящаяОпись.ТипДоговора.Значение = ВыборкаПоШапкеДокумента.ТипДоговора;
		НаборЗаписейВходящаяОпись.ОтчетныйГод.Значение = ВыборкаПоШапкеДокумента.ОтчетныйПериод;
		НаборЗаписейСуммаВыплатИвознаграждений = НаборЗаписейВходящаяОпись.СуммаВыплатИвознаграждений.Значение;
		НаборЗаписейСуммаВыплатИвознаграждений.ТипСтроки = "ИТОГО ПО ПАЧКЕ";
		НаборЗаписейСуммаВыплатИвознаграждений.СуммаВыплатВсего = ВыборкаПоШапкеДокумента.Заработок;
		НаборЗаписейСуммаВыплатИвознаграждений.СуммаВыплатНачисленыСтраховыеВзносы = ВыборкаПоШапкеДокумента.ОблагаетсяВзносами;
	КонецЕсли;
	
	УзелПачкаВходящихДокументов = ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
	ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТегВходящейОписи,""), НаборЗаписейВходящаяОпись);
	
	Возврат УзелПачкаВходящихДокументов;
	
КонецФункции // ЗаполнитьНаборЗаписейВходящаяОпись2010()


Функция ФайлСведенийОВзносахИСтаже(ВыборкаПоШапкеДокумента, РезультатЗапросаПоЗаписямСтажа, КоличествоДокументов, Заголовок, Отказ) Экспорт
	
	ДатаЗаполнения 			= ВыборкаПоШапкеДокумента.Дата;
	ТипФормДокументов		= ВыборкаПоШапкеДокумента.ТипФормДокументов;
	НомерПачки				= СокрЛП(ВыборкаПоШапкеДокумента.НомерПачки);
	Ссылка					= ВыборкаПоШапкеДокумента.Ссылка;
	
	////////////////////////////////////////////////////////////////////////////////////////////
	//ФОРМИРУЕМ ФАЙЛ СВЕДЕНИЙ
	
	// Список стран
	СписокСтран = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторСтранМира.Наименование,
	|	КлассификаторСтранМира.Код
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокСтран.Вставить(СокрЛП(Выборка.Наименование), Строка(Выборка.Код));
	КонецЦикла;
	
	ДопустимыеЗначенияТретьегоПараметра = Новый Соответствие;
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЕКРЕТ", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЕТИ", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("АДМИНИСТР", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ВРНЕТРУД", Истина);
	
	
	// Загружаем формат файла сведений
	МакетФормата = ПолучитьОбщийМакет("ФорматПФР70_2010");
	ТипДокументовПачки = "СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ";
	
	// Создаем начальное дерево
	ДеревоВыгрузки = СоздатьДеревоXML();
	УзелПФР = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ФайлПФР", "", );
	ЗаполнитьИмяИЗаголовокФайла(УзелПФР, МакетФормата, ПолучитьИмяФайлаПФ(Ссылка, ВыборкаПоШапкеДокумента.Год, ВыборкаПоШапкеДокумента));
	// Добавляем ветки ПачкаВходящихДокументов и ВходящаяОпись
	ДанныеВходящейОписи = "";
	УзелПачкаВходящихДокументов = ЗаполнитьНаборЗаписейВходящаяОпись2010(УзелПФР, МакетФормата, ТипДокументовПачки, ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерПачки, 1, ,ДанныеВходящейОписи);
	ФорматСЗВ6 = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, ?(ТипФормДокументов = "СПВ-1","СПВ_1","СЗВ_6"));
	
	Если ТипФормДокументов = "СЗВ-6-2" Тогда
		ФорматСЗВ6.СтажевыйПериод.Значение.Удалить("КоличествоЛьготныхСоставляющих");
		ФорматСЗВ6.СтажевыйПериод.Значение.Удалить("ЛьготныйСтаж");
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
		ФорматСЗВ6.Удалить("КорректируемыйОтчетныйПериод");
	ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
		ФорматСЗВ6.Удалить("СуммаВзносовНаСтраховую");
		ФорматСЗВ6.Удалить("СуммаВзносовНаНакопительную");
		ФорматСЗВ6.Удалить("СтажевыйПериод");
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		ФорматСЗВ6.Удалить("КПП");
		ТаблицаПолей = ФорматСЗВ6.НалоговыйНомер.Поля;
		ТаблицаПолей.Индексы.Добавить("ИмяПоля");
		СтрокаКПП = ТаблицаПолей.Найти("КПП", "ИмяПоля");
		Если СтрокаКПП <> Неопределено Тогда
			ТаблицаПолей.Удалить(СтрокаКПП);
		КонецЕсли;
	КонецЕсли;
	
	ФорматИностранныйАдрес = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "АдресОбщий", 3);
	ФорматНеструктурированныйАдрес = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "АдресОбщий", 2);
	
	НомерДокументаВПачке = 1;
	ВыборкаПоРаботникиОрганизации	= РезультатЗапросаПоЗаписямСтажа.Выбрать();
	Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерСтроки")	Цикл
		
		НаборЗаписейСЗВ6 = СкопироватьСтруктуруДанных(ФорматСЗВ6);
		
		// Общие данные пачки - берем их из описи
		НаборЗаписейСЗВ6.ВидФормы.Значение = ВыборкаПоШапкеДокумента.ТипФормДокументов;
		НаборЗаписейСЗВ6.ТипСведений.Значение = ДанныеВходящейОписи.ТипСведений.Значение;
		НаборЗаписейСЗВ6.РегистрационныйНомер.Значение = ДанныеВходящейОписи.СоставительПачки.Значение.РегистрационныйНомер.Значение;
		НаборЗаписейСЗВ6.НаименованиеКраткое.Значение = ДанныеВходящейОписи.СоставительПачки.Значение.НаименованиеКраткое.Значение;
		НаборЗаписейСЗВ6.НалоговыйНомер.Значение = ДанныеВходящейОписи.СоставительПачки.Значение.НалоговыйНомер.Значение;
		НаборЗаписейСЗВ6.КодКатегории.Значение = ДанныеВходящейОписи.КодКатегории.Значение;
		ЗаполнитьЗначенияСвойств(НаборЗаписейСЗВ6.ОтчетныйПериод.Значение,ДанныеВходящейОписи.ОтчетныйПериод.Значение);
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			Если ТипФормДокументов = "СПВ-1" Тогда
				ЗаполнитьЗначенияСвойств(НаборЗаписейСЗВ6.ОтчетныйПериод.Значение,ДанныеВходящейОписи.КорректируемыйОтчетныйПериод.Значение);
			Иначе
				ЗаполнитьЗначенияСвойств(НаборЗаписейСЗВ6.КорректируемыйОтчетныйПериод.Значение,ДанныеВходящейОписи.КорректируемыйОтчетныйПериод.Значение);
			КонецЕсли;
		КонецЕсли;
		НаборЗаписейСЗВ6.ДатаЗаполнения.Значение = ВыборкаПоШапкеДокумента.Дата;
		
		// Данные физлица
		НомерДокументаВПачке = НомерДокументаВПачке + 1;
		СтрокаНачалаСообщенияОбОшибке = "В строке № """+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) + """: " + "По сотруднику "+ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование + " ";
		
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = "ИСХОДНАЯ"  Тогда
			Если ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода = NULL И ВыборкаПоРаботникиОрганизации.НачисленоСтраховая = 0 И ВыборкаПоРаботникиОрганизации.НачисленоНакопительная = 0 Тогда
				Сообщить(СтрокаНачалаСообщенияОбОшибке + "- Данных о стаже и взносах не обнаружено!");
				Отказ = Истина;
			КонецЕсли; 
		КонецЕсли; 
		
		Фамилия = СокрЛП(ВыборкаПоРаботникиОрганизации.Фамилия);
		Имя = СокрЛП(ВыборкаПоРаботникиОрганизации.Имя);
		Отчество = СокрЛП(ВыборкаПоРаботникиОрганизации.Отчество);
		
		НаборЗаписейСЗВ6.НомерВПачке.Значение = НомерДокументаВПачке;
		НаборЗаписейСЗВ6.СтраховойНомер.Значение = ВыборкаПоРаботникиОрганизации.СтраховойНомерПФР;
		НаборЗаписейФИО = НаборЗаписейСЗВ6.ФИО.Значение;
		НаборЗаписейФИО.Фамилия = ВРег(Фамилия);
		НаборЗаписейФИО.Имя = ВРег(Имя);
		НаборЗаписейФИО.Отчество = ВРег(Отчество);
		
		Если ТипФормДокументов = "СПВ-1" Тогда
			НаборЗаписейСЗВ6.ДатаСоставленияНа.Значение = ВыборкаПоРаботникиОрганизации.ДатаСоставления 
		Иначе
			// Заполняем адрес застрахованного лица, если он есть.
			Если СокрЛП(СтрЗаменить(ВыборкаПоРаботникиОрганизации.АдресДляИнформирования, ",","")) <> "" Тогда
				АдресДляИнформирования = ВыборкаПоРаботникиОрганизации.АдресДляИнформирования;
			Иначе	
				АдресДляИнформирования = "";	
			КонецЕсли; 
			Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.АдресДляИнформирования) 
				И ВыборкаПоШапкеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
				ТекстОшибки  ="";
				НаборЗаписейАдресЗЛ = НаборЗаписейСЗВ6.АдресЗЛ.Значение;
				ЗаполнитьАдрес(НаборЗаписейАдресЗЛ, ВыборкаПоРаботникиОрганизации.АдресДляИнформирования, СписокСтран, ФорматНеструктурированныйАдрес, ФорматИностранныйАдрес, ТекстОшибки);
				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
					Сообщить("Предупреждение: " + СтрокаНачалаСообщенияОбОшибке + " Адрес" + ТекстОшибки);
				КонецЕсли;
			Иначе
				НаборЗаписейСЗВ6.Удалить("АдресЗЛ") 	
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда // заполнение отменяющей формы завершено
			УзелСЗВ61 = ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,"");
			ДобавитьИнформациюВДерево(УзелСЗВ61, НаборЗаписейСЗВ6);
			Продолжить;
		КонецЕсли;
		
		ВписатьВзносыВНаборДанных(НаборЗаписейСЗВ6, ВыборкаПоРаботникиОрганизации.НачисленоСтраховая, ВыборкаПоРаботникиОрганизации.УплаченоСтраховая, ВыборкаПоРаботникиОрганизации.НачисленоНакопительная, ВыборкаПоРаботникиОрганизации.УплаченоНакопительная);
		
		// Выводим стаж
		
		ФорматСтажевыйПериод = СкопироватьСтруктуруДанных(НаборЗаписейСЗВ6.СтажевыйПериод.Значение);
		НаборЗаписейСЗВ6.Удалить("СтажевыйПериод");
		
		УзелСЗВ61 = ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,"");
		ДобавитьИнформациюВДерево(УзелСЗВ61, НаборЗаписейСЗВ6);
		
		Если ТипФормДокументов = "СЗВ-6-2" Тогда
			
			Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл

				Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода) И ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода) Тогда
					
					ФорматСтажевыйПериод.НомерСтроки.Значение = ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи;
					ФорматСтажевыйПериод.ДатаНачалаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
					ФорматСтажевыйПериод.ДатаКонцаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
					
					УзелСтажевыйПериод = ДобавитьУзелВДеревоXML(УзелСЗВ61, "СтажевыйПериод","");
					ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
					
					// Признак наличия у работника основания для льготного стажа
					РаботникОрганизацииИмеетЛьготныйСтаж =	ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод)  
							Или ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод)
							Или ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод) 
							Или ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод) 
							Или ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа);
							
					Если РаботникОрганизацииИмеетЛьготныйСтаж Тогда
						Сообщить(СтрокаНачалаСообщенияОбОшибке + "- В записи о стаже имеется льготный стаж или прочие особенности. 
						|				Данные необходимо подавать по форме СЗВ-6-1!");
						Отказ = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;

		Иначе

			ФорматЛьготныйСтаж = СкопироватьСтруктуруДанных(ФорматСтажевыйПериод.ЛьготныйСтаж.Значение);
			ФорматСтажевыйПериод.Удалить("КоличествоЛьготныхСоставляющих");
			ФорматСтажевыйПериод.Удалить("ЛьготныйСтаж");
			
			Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи) Тогда
				
				Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл	
					
					УзелСтажевыйПериод = ДобавитьУзелВДеревоXML(УзелСЗВ61, "СтажевыйПериод","");
					ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
					
					УзелСтажевыйПериод.Строки.Найти("НомерСтроки").Значение = Строка(ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи);
					УзелСтажевыйПериод.Строки.Найти("ДатаНачалаПериода").Значение = Формат(ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода,"ДФ=dd.MM.yyyy");
					УзелСтажевыйПериод.Строки.Найти("ДатаКонцаПериода").Значение = Формат(ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода,"ДФ=dd.MM.yyyy");
					
					ВыводитьЛьготныйСтаж = Ложь;
					
					НаборЗаписейЛьготныйСтаж = СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
					НаборЗаписейОсобенностиУчета = НаборЗаписейЛьготныйСтаж.ОсобенностиУчета.Значение;
					
					// Территориальные условия
					НаборЗаписейТерриториальныеУсловия = НаборЗаписейОсобенностиУчета.ТерриториальныеУсловия.Значение;
					Если ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ" Тогда
						НаборЗаписейТерриториальныеУсловия.ОснованиеТУ = "";
					Иначе
						НаборЗаписейТерриториальныеУсловия.ОснованиеТУ = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
						НаборЗаписейТерриториальныеУсловия.Коэффициент = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияСтавка;
					КонецЕсли;
					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейТерриториальныеУсловия.ОснованиеТУ);
					
					// Особые условия труда
					НаборЗаписейОсобыеУсловияТруда = НаборЗаписейОсобенностиУчета.ОсобыеУсловияТруда.Значение;
					НаборЗаписейОсобыеУсловияТруда.ОснованиеОУТ = СокрЛП(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод);
					НаборЗаписейОсобыеУсловияТруда.ПозицияСписка = ВРег(СокрЛП(ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод));
					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейОсобыеУсловияТруда.ОснованиеОУТ);
					
					// Исчисляемый стаж
					НаборЗаписейИсчисляемыйСтаж = НаборЗаписейОсобенностиУчета.ИсчисляемыйСтаж.Значение;
					НаборЗаписейИсчисляемыйСтаж.ОснованиеИС.Значение = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
					Если ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа > 0 Или ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
						НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
					КонецЕсли;
					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейИсчисляемыйСтаж.ОснованиеИС.Значение);
					
					// Выслуга лет
					НаборЗаписейВыслугаЛет = НаборЗаписейОсобенностиУчета.ВыслугаЛет.Значение;
					НаборЗаписейВыслугаЛет.ОснованиеВЛ.Значение = СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод);
					НаборЗаписейВыслугаЛет.ДоляСтавки.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
					НаборЗаписейВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВыработкаВЧасах.Значение;
					НаборЗаписейВыработкаВЧасах.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
					НаборЗаписейВыработкаВЧасах.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейВыслугаЛет.ОснованиеВЛ.Значение);
					
					//ДекретДети
					Если ДопустимыеЗначенияТретьегоПараметра.Получить(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа) <> Неопределено Тогда
						НаборЗаписейОсобенностиУчета.ДекретДети.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
					КонецЕсли;
					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейОсобенностиУчета.ДекретДети.Значение);
					
					Если ВыводитьЛьготныйСтаж Тогда
						ЧислоДополнительныхЗаписейОСтаже = 1;
						СтрокаКоличествоЛьготныхСоставляющих = ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "КоличествоЛьготныхСоставляющих", 1);
						НаборЗаписейЛьготныйСтаж.НомерСтроки.Значение = ЧислоДополнительныхЗаписейОСтаже;
						УзелЛьготныйСтаж = ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ЛьготныйСтаж","");
						ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
					Иначе
						ЧислоДополнительныхЗаписейОСтаже = 0;
					КонецЕсли;
					
					Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
						
						//В дополнительной записи с номером 0 находится информация об основной записи
						Если ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи = 0 тогда
							Продолжить;
						КонецЕсли;
						
						
						НаборЗаписейЛьготныйСтаж = СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
						НаборЗаписейДопОсобенностиУчета = НаборЗаписейЛьготныйСтаж.ОсобенностиУчета.Значение;
						
						ЧислоДополнительныхЗаписейОСтаже = ЧислоДополнительныхЗаписейОСтаже + 1;
						НаборЗаписейЛьготныйСтаж.НомерСтроки.Значение = ЧислоДополнительныхЗаписейОСтаже;
						
						// Территориальные условия
						НаборЗаписейДопТерриториальныеУсловия = НаборЗаписейДопОсобенностиУчета.ТерриториальныеУсловия.Значение;
						НаборЗаписейДопТерриториальныеУсловия.ОснованиеТУ = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
						НаборЗаписейДопТерриториальныеУсловия.Коэффициент = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияСтавка;
						
						// Особые условия труда
						НаборЗаписейДопОсобыеУсловияТруда = НаборЗаписейДопОсобенностиУчета.ОсобыеУсловияТруда.Значение;
						НаборЗаписейДопОсобыеУсловияТруда.ОснованиеОУТ = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
						НаборЗаписейДопОсобыеУсловияТруда.ПозицияСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
						
						// Исчисляемый стаж
						НаборЗаписейДопИсчисляемыйСтаж = НаборЗаписейДопОсобенностиУчета.ИсчисляемыйСтаж.Значение;
						НаборЗаписейДопИсчисляемыйСтаж.ОснованиеИС.Значение = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
						Если ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа > 0 ИЛИ ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
							НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВыработкаКалендарная.Значение;
							НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
							НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
						КонецЕсли;
						
						// Выслуга лет
						НаборЗаписейДопВыслугаЛет = НаборЗаписейДопОсобенностиУчета.ВыслугаЛет.Значение;
						НаборЗаписейДопВыслугаЛет.ОснованиеВЛ.Значение = СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод);
						НаборЗаписейДопВыслугаЛет.ДоляСтавки.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
						НаборЗаписейДопВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВыработкаВЧасах.Значение;
						НаборЗаписейДопВыработкаВЧасах.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
						НаборЗаписейДопВыработкаВЧасах.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
						
						//ДекретДети
						Если ДопустимыеЗначенияТретьегоПараметра.Получить(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа) <> Неопределено Тогда
							НаборЗаписейДопОсобенностиУчета.ДекретДети.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
						КонецЕсли;
						
						УзелЛьготныйСтаж = ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ЛьготныйСтаж","");
						ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
						
					КонецЦикла;// Выборка по дополнительным записям о стаже
					
					Если ЧислоДополнительныхЗаписейОСтаже > 1 Тогда
						СтрокаКоличествоЛьготныхСоставляющих.Значение = ЧислоДополнительныхЗаписейОСтаже;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ тогда
		Возврат "";
	КонецЕсли;	 
	
	// Преобразуем дерево в строковое описание XML
	ТекстФайла = ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки);
	Возврат ТекстФайла
	
КонецФункции // ФайлСведенийОВзносахИСтаже()


// Вычисляет адреса для информирования для переданной таблицы физлиц
//
// Параметры
//
// Возвращаемое значение:
//   Таблица значений или Неопределено
//
Функция АдресаДляИнформирования(ТаблицаФизлиц, Организация, ДатаАктуальности, Режим = "") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.НомерСтроки
	|ПОМЕСТИТЬ ВТФизЛица
	|ИЗ
	|	&РаботникиОрганизации КАК РаботникиОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.УстановитьПараметр("РаботникиОрганизации", ТаблицаФизлиц);
	Запрос.Выполнить();
	
	Если Режим = "ВсеАдреса" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	РаботникиОрганизации.ФизЛицо,
		|	"","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9 КАК АдресДляИнформирования
		|ИЗ
		|	ВТФизЛица КАК РаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаДляИнформирования
		|		ПО РаботникиОрганизации.ФизЛицо = АдресаДляИнформирования.Объект
		|			И (АдресаДляИнформирования.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ИнформАдресФизЛица))
		|			И (АдресаДляИнформирования.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли Режим = "ИзменившиесяАдреса" Тогда
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Дата,
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования
		|ПОМЕСТИТЬ ВТПереданныеВПФРДокументы
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
		|ГДЕ
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Организация = &Организация
		|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования <> """"
		|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Проведен
		|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ПринятоВПФР
		|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Дата <= &ДатаАктуальности
		|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо В
		|			(ВЫБРАТЬ
		|				ФизЛица.ФизЛицо
		|			ИЗ
		|				ВТФизЛица КАК ФизЛица)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыДокументов.ФизЛицо КАК ФизЛицо,
		|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования КАК АдресДляИнформирования
		|ПОМЕСТИТЬ ВТПереданныеВПФРАдреса
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Дата) КАК Дата,
		|		СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо КАК ФизЛицо
		|	ИЗ
		|		ВТПереданныеВПФРДокументы КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо) КАК ДатыДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПереданныеВПФРДокументы КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
		|		ПО ДатыДокументов.Дата = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Дата
		|			И ДатыДокументов.ФизЛицо = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	РаботникиОрганизации.ФизЛицо,
		|	ВЫБОР
		|		КОГДА ПереданныеВПФРАдреса.АдресДляИнформирования ЕСТЬ NULL 
		|			ТОГДА "","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9
		|		КОГДА "","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9 <> ПереданныеВПФРАдреса.АдресДляИнформирования
		|			ТОГДА "","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК АдресДляИнформирования
		|ИЗ
		|	ВТФизЛица КАК РаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаДляИнформирования
		|		ПО РаботникиОрганизации.ФизЛицо = АдресаДляИнформирования.Объект
		|			И (АдресаДляИнформирования.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ИнформАдресФизЛица))
		|			И (АдресаДляИнформирования.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПереданныеВПФРАдреса КАК ПереданныеВПФРАдреса
		|		ПО РаботникиОрганизации.ФизЛицо = ПереданныеВПФРАдреса.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Возврат Неопределено
		
	КонецЕсли;	
	
КонецФункции // АдресаДляИнформирования()

// Читает данные о застрахованном лице для заполнения строки документа персучета
//
// Параметры
//  Физлицо - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение:
//   Структура со следующими полями: СтраховойНомерПФР, Фамилия, Имя, Отчество и, если требуется, - АдресДляИнформирования
//
Функция ДанныеФизЛицаДляДокументаПерсучета(Физлицо, ДатаАктуальности, Организация, КатегорияЗастрахованныхЛиц, ОтчетныйПериод, ПолучатьАдрес = Ложь) Экспорт 
	
	ДанныеФизЛица = Новый Структура;
	
	Фамилия = ""; Имя = ""; Отчество = "";
	ОФизлице = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Физлицо,"СтраховойНомерПФР,Наименование");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо",			ФизЛицо);
	Запрос.УстановитьПараметр("ДатаАктуальности",	ДатаАктуальности);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Фамилия = Выборка.Фамилия;
		Имя = Выборка.Имя;
		Отчество = Выборка.Отчество;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Фамилия + Имя + Отчество) Тогда
		ОбщегоНазначения.ФамилияИнициалыФизЛица(ОФизлице.Наименование,Фамилия,Имя,Отчество);
	КонецЕсли;
	
	ДанныеФизЛица.Вставить("СтраховойНомерПФР", ОФизлице.СтраховойНомерПФР);
	ДанныеФизЛица.Вставить("Фамилия", Фамилия);
	ДанныеФизЛица.Вставить("Имя", Имя);
	ДанныеФизЛица.Вставить("Отчество", Отчество);
	
	Если ПолучатьАдрес Тогда
		
		ТаблицаФизлиц = Новый ТаблицаЗначений;
		ТаблицаФизлиц.Колонки.Добавить("ФизЛицо",Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаФизлиц.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
		
		СтрокаФизлица = ТаблицаФизлиц.Добавить();
		СтрокаФизлица.ФизЛицо = ФизЛицо;
		СтрокаФизлица.НомерСтроки = 1;
		
		НовыйАдрес = АдресаДляИнформирования(ТаблицаФизлиц, Организация, ДатаАктуальности, "ИзменившиесяАдреса");
		Если НовыйАдрес <> Неопределено Тогда
			ДанныеФизЛица.Вставить("АдресДляИнформирования", НовыйАдрес[0].АдресДляИнформирования);
		Иначе 	
			ДанныеФизЛица.Вставить("АдресДляИнформирования", "");
		КонецЕсли;
	КонецЕсли;
	
	ДанныеФизЛица.Вставить("НачисленоСтраховая", 0);
	ДанныеФизЛица.Вставить("УплаченоСтраховая", 0);
	ДанныеФизЛица.Вставить("НачисленоНакопительная", 0);
	ДанныеФизЛица.Вставить("УплаченоНакопительная", 0);
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(КатегорияЗастрахованныхЛиц) Или Не ЗначениеЗаполнено(ОтчетныйПериод) Тогда
		Возврат ДанныеФизЛица
	КонецЕсли;
	
	МассивФизлиц = Новый Массив;
	МассивФизлиц.Добавить(Физлицо);
	ВзносыФизлиц = ПроцедурыПерсонифицированногоУчета.ДанныеОВзносахПоКатегориям(ДатаАктуальности, ОтчетныйПериод, ОтчетныйПериод, Организация, МассивФизлиц);
	ВзносыФизлиц.Индексы.Добавить("Физлицо,КатегорияЗастрахованныхЛиц");
	СтруктураПоиска = Новый Структура("Физлицо,КатегорияЗастрахованныхЛиц", Физлицо, КатегорияЗастрахованныхЛиц);
	СтрокиФизлица = ВзносыФизлиц.НайтиСтроки(СтруктураПоиска);
	Если СтрокиФизлица.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ДанныеФизЛица, СтрокиФизлица[0]);
	КонецЕсли;
	
	Возврат ДанныеФизЛица
	
КонецФункции // ДанныеФизЛицаДляДокументаПерсучета()

Функция ДоначисленныеВзносыДляКорректирующегоДокумента(Организация, Дата, КорректируемыйПериод, КатегорияЗастрахованныхЛиц, ТаблицаФизлиц) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СуммыВзносов.НомерСтроки,
	|	СуммыВзносов.ФизЛицо КАК ФизЛицо,
	|	СуммыВзносов.НачисленоНакопительная,
	|	СуммыВзносов.НачисленоСтраховая,
	|	СуммыВзносов.УплаченоНакопительная,
	|	СуммыВзносов.УплаченоСтраховая
	|ПОМЕСТИТЬ ВТСуммыВзносов
	|ИЗ
	|	&РаботникиОрганизации КАК СуммыВзносов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.УстановитьПараметр("РаботникиОрганизации", ТаблицаФизлиц);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.Дата) КАК Дата,
	|	КорректирующаяФорма.ФизЛицо
	|ПОМЕСТИТЬ ВТДата
	|ИЗ
	|	ВТСуммыВзносов КАК КорректирующаяФорма
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
	|		ПО КорректирующаяФорма.ФизЛицо = СведенияОТрудовомСтажеИЗаработкеСЗВ4.ФизЛицо
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.Организация = &Организация
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.Дата < &Дата
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.Проведен
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ)
	|	И ВЫБОР
	|			КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.ОтчетныйПериод
	|			ИНАЧЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.КорректируемыйПериод
	|		КОНЕЦ = &ОтчетныйПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректирующаяФорма.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СведенияОТрудовомСтажеИЗаработкеСЗВ4.Номер) КАК Номер,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата,
	|	Даты.ФизЛицо
	|ПОМЕСТИТЬ ВТОписаниеДокумента
	|ИЗ
	|	ВТДата КАК Даты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
	|		ПО Даты.Дата = СведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация = &Организация
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Проведен
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ)
	|	И ВЫБОР
	|			КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.ОтчетныйПериод
	|			ИНАЧЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4.КорректируемыйПериод
	|		КОНЕЦ = &ОтчетныйПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата,
	|	Даты.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОписаниеДокумента.ФизЛицо,
	|	МАКСИМУМ(СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТПредыдущиеДокументы
	|ИЗ
	|	ВТОписаниеДокумента КАК ОписаниеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
	|		ПО ОписаниеДокумента.Дата = СведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата
	|			И ОписаниеДокумента.Номер = СведенияОТрудовомСтажеИЗаработкеСЗВ4.Номер
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация = &Организация
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Проведен
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ)
	|	И ВЫБОР
	|			КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.ОтчетныйПериод
	|			ИНАЧЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4.КорректируемыйПериод
	|		КОНЕЦ = &ОтчетныйПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	ОписаниеДокумента.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыВзносов.НомерСтроки КАК НомерСтроки,
	|	СуммыВзносов.ФизЛицо,
	|	СуммыВзносов.НачисленоНакопительная - ЕСТЬNULL(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НачисленоНакопительная, 0) КАК ДоначисленоНакопительная,
	|	СуммыВзносов.НачисленоСтраховая - ЕСТЬNULL(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НачисленоСтраховая, 0) КАК ДоначисленоСтраховая,
	|	СуммыВзносов.УплаченоНакопительная - ЕСТЬNULL(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.УплаченоНакопительная, 0) КАК ДоУплаченоНакопительная,
	|	СуммыВзносов.УплаченоСтраховая - ЕСТЬNULL(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.УплаченоСтраховая, 0) КАК ДоУплаченоСтраховая
	|ИЗ
	|	ВТСуммыВзносов КАК СуммыВзносов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредыдущиеДокументы КАК ПредыдущиеДокументы
	|		ПО СуммыВзносов.ФизЛицо = ПредыдущиеДокументы.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
	|		ПО (ПредыдущиеДокументы.Ссылка = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка)
	|			И СуммыВзносов.ФизЛицо = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ОтчетныйПериод", КорректируемыйПериод);
	Запрос.УстановитьПараметр("КатегорияЗастрахованныхЛиц", КатегорияЗастрахованныхЛиц);
	Возврат Запрос.Выполнить();

	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ФОРМ СЗВ-6

// Выполняет авторасчет стажа для формы СЗВ-6
//
Функция СЗВ6_ПолучитьДанныеДляЗаполненияСтажа(ОбособленноеПодразделение, ДатаНачалаПериодаЗаполнения, ДатаОкончанияПериодаЗаполнения, СписокФизЛиц = Неопределено, КатегорияЗастрахованногоЛица = Неопределено) Экспорт
	
	
	НачалоГода = ДатаНачалаПериодаЗаполнения;
	КонецГода = ДатаОкончанияПериодаЗаполнения;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ФизЛицо",					СписокФизЛиц);
	Запрос.УстановитьПараметр("Год",						Год(НачалоГода));
	Запрос.УстановитьПараметр("ОтчетныйПериод",				ДатаНачалаПериодаЗаполнения);
	Запрос.УстановитьПараметр("НачалоГода",					НачалоГода);
	Запрос.УстановитьПараметр("КонецГода",					КонецГода);
	Запрос.УстановитьПараметр("НачалоСледующегоГода",		КонецГода + 1);
	Запрос.УстановитьПараметр("Организация",				ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение));
	Запрос.УстановитьПараметр("ТерриториальныеУсловия",		ОбособленноеПодразделение.ТерриториальныеУсловияПФР);
	Запрос.УстановитьПараметр("ПустыеУсловияТруда",			Справочники.ОсобыеУсловияТруда.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустыеОснованияВыслугиЛет",	Справочники.ОснованияВыслугиЛет.ПустаяСсылка());
	
	// Выборка периодов постоянства назначения физлица в организации
	УсловиеНаФизлицоТекст = ?(СписокФизЛиц = Неопределено,"",Символы.ПС + Символы.Таб + "И <имя таблицы>.ФизЛицо В (&ФизЛицо)");
	
	Запрос.Текст = "ВЫБРАТЬ
	|	НачалаПериодов.Сотрудник,
	|	&ОтчетныйПериод КАК ОтчетныйПериод,
	|	НачалаПериодов.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	&Организация КАК ОбособленноеПодразделение,
	|	&Год КАК Год,
	|	&ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	&ПустыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	"""" КАК КодПозицииСписка,
	|	&ПустыеОснованияВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	НачалаПериодов.ДатаНачала КАК ДатаНачалаПериода,
	|	МИНИМУМ(ОкончанияПериодов.ДатаОкончания) КАК ДатаОкончанияПериода,
	|	ВЫБОР КОГДА
	|		&ТерриториальныеУсловия В (ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.МКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.РКС))
	|			ТОГДА НачалаПериодов.ЗанимаемыхСтавок
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПараметрТерриториальныхУсловий,
	|	ВЫБОР
	|		КОГДА &ПустыеОснованияВыслугиЛет В (ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ПД), ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ГДХР), ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_СМ), ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ГДХР), ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ГД))
	|			ТОГДА НачалаПериодов.ЗанимаемыхСтавок
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТретийПараметрВыслугиЛет
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник,
	|		РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|		&НачалоГода КАК ДатаНачала
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&НачалоГода,
	|				ОбособленноеПодразделение = &Организация
	|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)"
	+ СтрЗаменить(УсловиеНаФизлицоТекст,"<имя таблицы>","Сотрудник") + ") КАК РаботникиОрганизацииСрезПоследних
	|	ГДЕ
	|		РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		РаботникиОрганизации.Сотрудник,
	|		РаботникиОрганизации.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|		РаботникиОрганизации.Период
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|	ГДЕ
	|		РаботникиОрганизации.ОбособленноеПодразделение = &Организация
	|		И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)"
	+ СтрЗаменить(УсловиеНаФизлицоТекст,"<имя таблицы>","Сотрудник") + "
	|		И РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|		И РаботникиОрганизации.Период > &НачалоГода
	|		И РаботникиОрганизации.Период <= &КонецГода) КАК НачалаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник,
	|			&КонецГода КАК ДатаОкончания
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|					&КонецГода,
	|					ОбособленноеПодразделение = &Организация
	|						И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)"
	+ СтрЗаменить(УсловиеНаФизлицоТекст,"<имя таблицы>","Сотрудник") + ") КАК РаботникиОрганизацииСрезПоследних
	|		ГДЕ
	|			РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			РаботникиОрганизации.Сотрудник,
	|			ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ГДЕ
	|			РаботникиОрганизации.ОбособленноеПодразделение = &Организация
	|			И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)"
	+ СтрЗаменить(УсловиеНаФизлицоТекст,"<имя таблицы>","Сотрудник") + "
	|			И РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			И РаботникиОрганизации.Период > &НачалоГода
	|			И РаботникиОрганизации.Период <= &КонецГода) КАК ОкончанияПериодов
	|		ПО ОкончанияПериодов.Сотрудник = НачалаПериодов.Сотрудник
	|			И ОкончанияПериодов.ДатаОкончания >= НачалаПериодов.ДатаНачала
	|
	|СГРУППИРОВАТЬ ПО
	|	НачалаПериодов.Сотрудник,
	|	НачалаПериодов.ДатаНачала,
	|	НачалаПериодов.ЗанимаемыхСтавок
	|УПОРЯДОЧИТЬ ПО
	|	НачалаПериодов.Сотрудник,
	|	НачалаПериодов.ДатаНачала";

	 	
	ТаблицаСтажа = Запрос.Выполнить().Выгрузить();
	ТаблицаСтажа.Индексы.Добавить("ФизЛицо");
	
	// Удалим из таблицы стажа незначимые записи:
	//  - если по физлицу имеется 2 непрерывных записи с одинаковыми условиями труда, то объединим данные записи 
	Н = ТаблицаСтажа.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажа[Н];
		ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
			ТаблицаСтажа.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОтчетныйПериод",				ДатаНачалаПериодаЗаполнения);
	Запрос.УстановитьПараметр("Организация",				ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение));
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",		КонецМесяца(ДатаОкончанияПериодаЗаполнения));

	// конец месяца налогового периода
	КонецМесяца = КонецМесяца(ДатаНачалаПериодаЗаполнения);
	// первый месяц
	ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериоды";
	// прибавим остальные месяцы
	Для Сч = Месяц(ДатаНачалаПериодаЗаполнения) По Месяц(ДатаОкончанияПериодаЗаполнения) Цикл
		КонецМесяца = КонецМесяца(КонецМесяца+1);
    	ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФизлиц.Физлицо,
	|	ТаблицаФизлиц.ОтчетныйПериод,
	|	ТаблицаФизлиц.ОбособленноеПодразделение,
	|	ТаблицаФизлиц.ДатаНачалаПериода,
	|	ТаблицаФизлиц.ДатаОкончанияПериода,
	|	ТаблицаФизлиц.ТерриториальныеУсловия,
	|	ТаблицаФизлиц.ОсобыеУсловияТруда,
	|	ТаблицаФизлиц.КодПозицииСписка,
	|	ТаблицаФизлиц.ОснованиеВыслугиЛет
	|ПОМЕСТИТЬ ВТТаблицаСтажа
	|ИЗ
	|	&ТаблицаФизлиц КАК ТаблицаФизлиц";
	Запрос.УстановитьПараметр("ТаблицаФизлиц", ТаблицаСтажа);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим) КАК ВидТарифаСтраховыхВзносов,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР) КАК КатегорияЗастрахованныхЛиц,
	|	2010 КАК ГодС,
	|	2100 КАК ГодПо
	|ПОМЕСТИТЬ ВТСоответствиеТарифаКатегории
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	2010,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.УСЕН),
	|	2010,
	|	2010
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕНВД),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.УСЕН),
	|	2010,
	|	2010
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	2011,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕНВД),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	2011,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.СельХозПроизводители),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	2010,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	2010,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ),
	|	2010,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ),
	|	2010,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.СельХозПроизводители),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	2015,
	|	2100
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидТарифаСтраховыхВзносов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтажа.Физлицо КАК Физлицо,
	|	ТаблицаСтажа.ОтчетныйПериод,
	|	ТаблицаСтажа.ОбособленноеПодразделение,
	|	ВЫБОР
	|		КОГДА ТаблицаСтажа.ДатаНачалаПериода < НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|			ТОГДА НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|		ИНАЧЕ ТаблицаСтажа.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ТаблицаСтажа.ДатаОкончанияПериода < Периоды.Период
	|			ТОГДА ТаблицаСтажа.ДатаОкончанияПериода
	|		ИНАЧЕ Периоды.Период
	|	КОНЕЦ КАК ДатаОкончанияПериода,
	|	ТаблицаСтажа.ТерриториальныеУсловия,
	|	ТаблицаСтажа.ОсобыеУсловияТруда,
	|	ТаблицаСтажа.КодПозицииСписка,
	|	ТаблицаСтажа.ОснованиеВыслугиЛет,
	|	НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК МесяцОтчетногоПериода,
	|	Периоды.Период
	|ПОМЕСТИТЬ ВТФизЛица
	|ИЗ
	|	ВТТаблицаСтажа КАК ТаблицаСтажа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериоды КАК Периоды
	|		ПО (Периоды.Период МЕЖДУ НАЧАЛОПЕРИОДА(ТаблицаСтажа.ДатаНачалаПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(ТаблицаСтажа.ДатаОкончанияПериода, МЕСЯЦ))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	МесяцОтчетногоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтраховыеВзносыИсчисленныеОбороты.ФизЛицо КАК ФизЛицо,
	|	СтраховыеВзносыИсчисленныеОбороты.Период КАК МесяцОтчетногоПериода,
	|	КОНЕЦПЕРИОДА(СтраховыеВзносыИсчисленныеОбороты.Период, МЕСЯЦ) КАК Период,
	|	СтраховыеВзносыИсчисленныеОбороты.ПФРСтраховаяОборот КАК ПФРСтраховаяОборот,
	|	СтраховыеВзносыИсчисленныеОбороты.ПФРНакопительнаяОборот КАК ПФРНакопительнаяОборот,
	|	СтраховыеВзносыИсчисленныеОбороты.ПФРСтраховаяЕНВДОборот,
	|	СтраховыеВзносыИсчисленныеОбороты.ПФРНакопительнаяЕНВДОборот
	|ПОМЕСТИТЬ ВТИсчисленоПоЗЛ
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыИсчисленные.Обороты(
	|			&ОтчетныйПериод,
	|			&КонецОтчетногоПериода,
	|			Месяц,
	|			ОбособленноеПодразделение = &Организация
	|				И ФизЛицо В
	|					(ВЫБРАТЬ
	|						ФизЛица.Физлицо
	|					ИЗ
	|						ВТФизЛица КАК ФизЛица)) КАК СтраховыеВзносыИсчисленныеОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СрезПоследнихДат.ПериодРегистрации КАК МесяцОтчетногоПериода,
	|	СрезПоследнихДат.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВТИнвалиды
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|		СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо,
	|		МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК Период
	|	ИЗ
	|		ВТФизЛица КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|			ПО Периоды.Период >= СведенияОбИнвалидностиФизлиц.Период
	|	ГДЕ
	|		СведенияОбИнвалидностиФизлиц.Физлицо В
	|				(ВЫБРАТЬ
	|					Физлица.Физлицо
	|				ИЗ
	|					ВТФизЛица КАК Физлица)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СведенияОбИнвалидностиФизлиц.Физлицо,
	|		Периоды.Период) КАК СрезПоследнихДат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|		ПО СрезПоследнихДат.Период = СведенияОбИнвалидностиФизлиц.Период
	|			И СрезПоследнихДат.Физлицо = СведенияОбИнвалидностиФизлиц.Физлицо
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.Инвалидность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	МесяцОтчетногоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК МесяцОтчетногоПериода,
	|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ВидТарифаСтраховыхВзносов, ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим)) КАК ВидТарифаСтраховыхВзносов
	|ПОМЕСТИТЬ ВТВидыТарифныхСтавокОрганизаций
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		УчетнаяПолитикаНалоговыйУчет.Организация КАК Организация,
	|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
	|			ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период
	|				И (УчетнаяПолитикаНалоговыйУчет.Организация = &ГоловнаяОрганизация)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период,
	|		УчетнаяПолитикаНалоговыйУчет.Организация) КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаНалоговыйУчет
	|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период
	|			И Периоды.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцОтчетногоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Исчислено.ФизЛицо КАК ФизЛицо,
	|	Исчислено.КатегорияЗастрахованныхЛиц,
	|	Исчислено.МесяцОтчетногоПериода
	|ПОМЕСТИТЬ ВТИсчисленоПоКатегориямЗЛ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсчисленоПоЗЛ.ФизЛицо КАК ФизЛицо,
	|		ИсчисленоПоЗЛ.ПФРНакопительнаяОборот КАК ПФРНакопительнаяОборот,
	|		ИсчисленоПоЗЛ.ПФРСтраховаяОборот КАК ПФРСтраховаяОборот,
	|		СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|		ИсчисленоПоЗЛ.МесяцОтчетногоПериода КАК МесяцОтчетногоПериода
	|	ИЗ
	|		ВТИсчисленоПоЗЛ КАК ИсчисленоПоЗЛ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыТарифныхСтавокОрганизаций КАК ВидыТарифныхСтавокОрганизаций
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаКатегории КАК СоответствиеТарифаКатегории
	|				ПО ВидыТарифныхСтавокОрганизаций.ВидТарифаСтраховыхВзносов = СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов
	|			ПО ИсчисленоПоЗЛ.МесяцОтчетногоПериода = ВидыТарифныхСтавокОрганизаций.МесяцОтчетногоПериода
	|				И (ГОД( ИсчисленоПоЗЛ.МесяцОтчетногоПериода) МЕЖДУ СоответствиеТарифаКатегории.ГодС И СоответствиеТарифаКатегории.ГодПо)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсчисленоПоЗЛ.ФизЛицо,
	|		ИсчисленоПоЗЛ.ПФРНакопительнаяЕНВДОборот,
	|		ИсчисленоПоЗЛ.ПФРСтраховаяЕНВДОборот,
	|		ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.УСЕН),
	|		ИсчисленоПоЗЛ.МесяцОтчетногоПериода
	|	ИЗ
	|		ВТИсчисленоПоЗЛ КАК ИсчисленоПоЗЛ) КАК Исчислено
	|
	|СГРУППИРОВАТЬ ПО
	|	Исчислено.ФизЛицо,
	|	Исчислено.КатегорияЗастрахованныхЛиц,
	|	Исчислено.МесяцОтчетногоПериода
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Исчислено.ПФРНакопительнаяОборот) <> 0
	|		ИЛИ СУММА(Исчислено.ПФРСтраховаяОборот) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаФизлиц.Физлицо КАК ФизЛицо,
	|	ТаблицаФизлиц.ОтчетныйПериод,
	|	ТаблицаФизлиц.ОбособленноеПодразделение,
	|	ТаблицаФизлиц.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ТаблицаФизлиц.ДатаОкончанияПериода,
	|	ТаблицаФизлиц.ТерриториальныеУсловия,
	|	ТаблицаФизлиц.ОсобыеУсловияТруда,
	|	ТаблицаФизлиц.КодПозицииСписка,
	|	ТаблицаФизлиц.ОснованиеВыслугиЛет,
	|	"""" КАК ТретийПараметрИсчисляемогоСтажа,
	|	"""" КАК ТретийПараметрВыслугиЛет,
	|	"""" КАК ПараметрТерриториальныхУсловий
	|ИЗ
	|	ВТФизЛица КАК ТаблицаФизлиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнвалиды КАК Инвалиды
	|		ПО ТаблицаФизлиц.Физлицо = Инвалиды.Физлицо
	|			И ТаблицаФизлиц.МесяцОтчетногоПериода = Инвалиды.МесяцОтчетногоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсчисленоПоКатегориямЗЛ КАК ИсчисленоПоЗЛ
	|		ПО ТаблицаФизлиц.Физлицо = ИсчисленоПоЗЛ.ФизЛицо
	|			И ТаблицаФизлиц.МесяцОтчетногоПериода = ИсчисленоПоЗЛ.МесяцОтчетногоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыТарифныхСтавокОрганизаций КАК ВидыТарифныхСтавокОрганизаций
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаКатегории КАК СоответствиеТарифаКатегории
	|			ПО ВидыТарифныхСтавокОрганизаций.ВидТарифаСтраховыхВзносов = СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов
	|				И (ГОД(ВидыТарифныхСтавокОрганизаций.МесяцОтчетногоПериода) МЕЖДУ СоответствиеТарифаКатегории.ГодС И СоответствиеТарифаКатегории.ГодПо)
	|		ПО ТаблицаФизлиц.МесяцОтчетногоПериода = ВидыТарифныхСтавокОрганизаций.МесяцОтчетногоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	ДатаНачалаПериода";
	
	ТаблицаСтажа = Запрос.Выполнить().Выгрузить();
	Н = ТаблицаСтажа.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажа[Н];
		ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 
			ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
			ТаблицаСтажа.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	
	ТаблицаСтажа = ПроцедурыПерсонифицированногоУчета.ВписатьКатегорииВДанныеСтажа(ОбособленноеПодразделение, ДатаНачалаПериодаЗаполнения, ДатаОкончанияПериодаЗаполнения, ТаблицаСтажа);
	
	Если ЗначениеЗаполнено(КатегорияЗастрахованногоЛица) Тогда
		Н = ТаблицаСтажа.Количество() - 1;
		Пока Н >= 0 Цикл
			СтрокаСтажа = ТаблицаСтажа[Н];
			Если СтрокаСтажа.КатегорияЗастрахованныхЛиц <> КатегорияЗастрахованногоЛица Тогда
				ТаблицаСтажа.Удалить(СтрокаСтажа);
			КонецЕсли;
			
			Н = Н - 1;
		КонецЦикла
	КонецЕсли;

	
	Н = ТаблицаСтажа.Количество() - 1;
	Пока Н > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажа[Н];
		ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
		
		Если ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И ТекущаяЗапись.КатегорияЗастрахованныхЛиц = ПредшествующаяЗапись.КатегорияЗастрахованныхЛиц
			И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 
			ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			И ТекущаяЗапись.ПараметрТерриториальныхУсловий = ПредшествующаяЗапись.ПараметрТерриториальныхУсловий
			И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа
			И ТекущаяЗапись.ТретийПараметрВыслугиЛет = ПредшествующаяЗапись.ТретийПараметрВыслугиЛет
			Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
			ТаблицаСтажа.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;

	
	
	ТаблицаСтажа.Сортировать("ФизЛицо,ДатаНачалаПериода");
	
	

	// таблица стажа не поддерживается...
	// договоры не поддерживаются...
	
	Возврат ТаблицаСтажа;
	

	
КонецФункции

//Выполняет проверку правильности заполнения набора записей о стаже для формы СЗВ-6
// Функция в параметре РезультатВыборкиЗаписей возвращает результат запроса выборки записей стажа
Функция СЗВ6_ПроверитьНаборЗаписейОСтаже(ИнициаторВызова, ТаблицаФизлиц, РезультатВыборкиЗаписей = "", ВыводитьСообщенияВОбработчикСообщений = Ложь, СообщенияРазделПроверки = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсточникДанных",	ТаблицаФизлиц);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧ.НомерСтроки КАК НомерСтроки,
	|	ТЧ.ФизЛицо КАК ФизЛицо,
	|	ТЧ.Организация,
	|	ТЧ.КатегорияЗастрахованныхЛиц,
	|	ТЧ.ОтчетныйПериод,
	|	НЕОПРЕДЕЛЕНО КАК ПоляДляФайла
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	&ИсточникДанных КАК ТЧ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Если ИнициаторВызова = "НаборЗаписей" Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ПоляДляФайла","1 КАК ПоляДляФайла")
	Иначе 
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ПоляДляФайла",
												"ТЧ.АдресДляИнформирования,
												|	ТЧ.СтраховойНомерПФР,
												|	ТЧ.Фамилия,
												|	ТЧ.Имя,
												|	ТЧ.Отчество,
												|	ТЧ.НачисленоСтраховая,
												|	ТЧ.УплаченоСтраховая,
												|	ТЧ.НачисленоНакопительная,
												|	ТЧ.УплаченоНакопительная,
												|	ТЧ.ДатаСоставления");
	КонецЕсли;	
	Запрос.Выполнить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрг.ФизЛицо КАК ФизЛицо,
	|	ТЧРаботникиОрг.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ТЧРаботникиОрг.Организация,
	|	ТЧРаботникиОрг.ОтчетныйПериод КАК ОтчетныйПериод,
	|	НЕОПРЕДЕЛЕНО КАК ПоляДляФайла,
	|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЗаписиОСтаже.Год КАК Год,
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрг.ОтчетныйПериод < ДАТАВРЕМЯ(2011, 1, 1, 0, 0, 0)
	|			ТОГДА ЗаписиОСтаже.ОсобыеУсловияТруда.Код
	|		ИНАЧЕ ЗаписиОСтаже.ОсобыеУсловияТруда.КодДляОтчетности2010
	|	КОНЕЦ КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
	|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЕСТЬNULL(ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа, 0) КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЕСТЬNULL(ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа, 0) КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрг.ОтчетныйПериод < ДАТАВРЕМЯ(2011, 1, 1, 0, 0, 0)
	|			ТОГДА ЗаписиОСтаже.ОснованиеВыслугиЛет.Код
	|		ИНАЧЕ ЗаписиОСтаже.ОснованиеВыслугиЛет.КодДляОтчетности2010
	|	КОНЕЦ КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧРаботникиОрг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
	|		ПО ТЧРаботникиОрг.ФизЛицо = ЗаписиОСтаже.ФизЛицо
	|			И ТЧРаботникиОрг.Организация = ЗаписиОСтаже.ОбособленноеПодразделение
	|			И ТЧРаботникиОрг.ОтчетныйПериод = ЗаписиОСтаже.ОтчетныйПериод
	|			И ТЧРаботникиОрг.КатегорияЗастрахованныхЛиц = ЗаписиОСтаже.КатегорияЗастрахованныхЛиц
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";

	Если ИнициаторВызова = "НаборЗаписей" Тогда
		Запрос.Текст = ТекстЗапроса;
	Иначе 
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ПоляДляФайла",
												"ТЧРаботникиОрг.АдресДляИнформирования КАК АдресДляИнформирования,
												|	ТЧРаботникиОрг.Фамилия КАК Фамилия,
												|	ТЧРаботникиОрг.Имя КАК Имя,
												|	ТЧРаботникиОрг.Отчество КАК Отчество,
												|	ТЧРаботникиОрг.НачисленоСтраховая,
												|	ТЧРаботникиОрг.УплаченоСтраховая,
												|	ТЧРаботникиОрг.НачисленоНакопительная,
												|	ТЧРаботникиОрг.СтраховойНомерПФР,
												|	ТЧРаботникиОрг.УплаченоНакопительная,
												|	ТЧРаботникиОрг.ДатаСоставления,
												|	ТЧРаботникиОрг.Фамилия + "" "" + ТЧРаботникиОрг.Имя + "" "" + ТЧРаботникиОрг.Отчество КАК ФизЛицоНаименование");
	КонецЕсли;	
	
	РезультатВыборкиЗаписей = Запрос.Выполнить(); 
	ВыборкаЗаписей = РезультатВыборкиЗаписей.Выбрать();
	
	ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
	ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
	ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");
	
	ДопустимыеЗначенияТретьегоПараметра = Новый Соответствие;
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЕКРЕТ", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЕТИ", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("АДМИНИСТР", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ВРНЕТРУД", Истина);
	СтрокаДопустимыхЗначений = "";
	Для каждого Значение Из ДопустимыеЗначенияТретьегоПараметра Цикл
		СтрокаДопустимыхЗначений = СтрокаДопустимыхЗначений + ?(ЗначениеЗаполнено(СтрокаДопустимыхЗначений),", ","") + Значение.Ключ;
	КонецЦикла;
	
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("НомерСтроки") Цикл // по наборам ФизЛицо + КатегорияЗастрахованныхЛиц + Организация + ОтчетныйПериод
		
		Если Не ЗначениеЗаполнено(ВыборкаЗаписей.ОбособленноеПодразделение) Тогда // записей о стаже нет
			Продолжить;
		КонецЕсли;
		
		ФизЛицо = ВыборкаЗаписей.ФизЛицо;
		ОбособленноеПодразделение = ВыборкаЗаписей.ОбособленноеПодразделение;
		НачалоПериода = ВыборкаЗаписей.ОтчетныйПериод;
		КонецПериода = ОкончаниеОтчетногоПериодаПерсучета(НачалоПериода);
		
		ТекущаяОсновнаяЗапись = Новый Структура("ФизЛицо, ОбособленноеПодразделение, Год, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
		
		//Список значений группы реквизитов территориальные условия одной основной записи
		СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;
		
		//Список значений кодов условий труда одной основной записи
		СписокУсловияТрудаЗаписи = Новый СписокЗначений;
		
		//Список значений кодов выслуги лет основной записи
		СписокВыслугаЛетЗаписи = Новый СписокЗначений;
		
		ПредыдущийНомерОсновнойЗаписи = 0;
		ПредыдущийНомерДополнительнойЗаписи = 0;
		
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			Запись = ВыборкаЗаписей;
			
			//Организация, физлицо и год должны быть заполнены обязательно
			Если Запись.ОбособленноеПодразделение.Пустая() Тогда
				СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указана организация (обособленное подразделение)!");
			КонецЕсли;	
			Если Запись.ФизЛицо.Пустая() Тогда
				СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указано физическое лицо!");
			КонецЕсли;	
			
			// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА
			
			//По умолчанию считаем, что запись основная
			ЭтоОсновнаяЗапись = Истина;
			
			//Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
			ДополнительнаяЗаписьВозможна = ПредыдущийНомерОсновнойЗаписи <> 0;
			
			//Проверка заполненния реквзитов "ДатаНачалаПериода" и "ДатаОкончанияПериода" 
			Если Не ЗначениеЗаполнено(Запись.ДатаНачалаПериода) и Не ЗначениеЗаполнено(Запись.ДатаОкончанияПериода) Тогда
				Если ДополнительнаяЗаписьВозможна Тогда
					ЭтоОсновнаяЗапись = Ложь;
				Иначе
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указаны даты начала и окончания периода!");
				КонецЕсли;	
			ИначеЕсли Не ЗначениеЗаполнено(Запись.ДатаНачалаПериода) Тогда
				СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты окончания периода необходимо указывать дату начала периода!");
			ИначеЕсли Не ЗначениеЗаполнено(Запись.ДатаОкончанияПериода) Тогда
				СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании даты начала периода необходимо указавать дату окончания периода!");
			Иначе//Обе даты заполнены
				
				//Дата начала периода не должна быть ранее начала периода
				Если Запись.ДатаНачалаПериода < НачалоПериода Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть не ранее начала периода: " + Формат(НачалоПериода,"ДФ=dd.MM.yyyy") + "!");
				КонецЕсли;	 
				
				//Дата окончания периода не должна быть позднее окончания периода
				Если Запись.ДатаОкончанияПериода > КонецПериода Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата окончания периода должна быть не позднее окончания периода: " + Формат(КонецПериода,"ДФ=dd.MM.yyyy") + "!");
				КонецЕсли;	 
				
				// Начало периода не должно быть позже окончания периода 
				Если Запись.ДатаНачалаПериода > Запись.ДатаОкончанияПериода Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода не должна превышать дату окончания периода!");
				КонецЕсли;
				
			КонецЕсли;	 
			
			//Проверка только для основной записи о стаже
			Если ЭтоОсновнаяЗапись Тогда
				
				//Проверка на хронологический порядок записей
				Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода <> Неопределено Тогда
					Если Запись.ДатаНачалаПериода <= ТекущаяОсновнаяЗапись.ДатаОкончанияПериода Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть больше даты окончания предыдущего периода!");
					КонецЕсли;	 
				КонецЕсли;
				
				//Переустановка текущей основной записи
				ТекущаяОсновнаяЗапись.ФизЛицо = ФизЛицо;
				ТекущаяОсновнаяЗапись.Год = Запись.Год;
				ТекущаяОсновнаяЗапись.ОбособленноеПодразделение = ОбособленноеПодразделение;
				ТекущаяОсновнаяЗапись.ДатаНачалаПериода = Запись.ДатаНачалаПериода;
				ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = Запись.ДатаОкончанияПериода;
				ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = Запись.ОсобыеУсловияТруда;
				ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = Запись.ОснованиеВыслугиЛет;
				ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = Запись.ОснованиеВыслугиЛетКод;
				ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = Запись.ТерриториальныеУсловия;
				ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = Запись.ОснованиеИсчисляемогоСтажа;
				ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
				ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;
				
				СписокТерриториальныеУсловияЗаписи.Очистить();
				СписокУсловияТрудаЗаписи.Очистить();
				СписокВыслугаЛетЗаписи.Очистить();
			КонецЕсли;	 
			
			// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ
			
			//Проверка нумерации основных и дополнительных записей
			Если ЭтоОсновнаяЗапись Тогда
				ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
				Если (Запись.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)  Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер основной записи. Ожидается номер: "+ОжидаемыйНомерОсновнойЗаписи+"!");;
				КонецЕсли;
			Иначе
				ОжидаемыйНомерДополнительнойЗаписи = ПредыдущийНомерДополнительнойЗаписи +1;
				Если (Запись.НомерДополнительнойЗаписи <> ОжидаемыйНомерДополнительнойЗаписи)  Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер дополнительной записи. Ожидается номер: "+ОжидаемыйНомерДополнительнойЗаписи+"!", ТекущаяОсновнаяЗапись);;
				КонецЕсли;
			КонецЕсли;
			
			
			//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП
			
			//Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
			УказаныТерриториальныеУсловия = ЗначениеЗаполнено(Запись.ТерриториальныеУсловияКод);
			УказанаСтавкаТерриториальныхУсловий = ЗначениеЗаполнено(Запись.ТерриториальныеУсловияСтавка);
			
			//Признаки заполнения реквизитов группы "Особые условия труда"
			УказанКодПозицииСписка = ЗначениеЗаполнено(Запись.КодПозицииСпискаКод);
			УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТрудаКод);
			ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;
			
			//Признаки заполнения реквизитов группы "Исчисляемый стаж"
			УказаноОснованиеИсчисляемогоСтажа = ЗначениеЗаполнено(Запись.ОснованиеИсчисляемогоСтажаКод);
			УказанТретийПараметрИсчисляемогоСтажа = ЗначениеЗаполнено(Запись.ТретийПараметрИсчисляемогоСтажа);
			ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;
			
			//Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
			УказанПараметрИсчисляемогоСтажа1 = НЕ (Запись.ПервыйПараметрИсчисляемогоСтажа = 0); 
			УказанПараметрИсчисляемогоСтажа2 = НЕ (Запись.ВторойПараметрИсчисляемогоСтажа = 0); 
			ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;
			
			//Признаки заполнения реквизитов группы "ВыслугаЛет"
			УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛетКод);
			ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;
			
			
			//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ СТАЖА ОСНОВНОЙ И ДОПОЛНИТЕЛЬНОЙ ЗАПИСЕЙ 
			
			Если НЕ ЭтоОсновнаяЗапись Тогда
				СЗВ4_ВыполнитьПроверкуДополнительнойЗаписиСтажа(Запись, ТекущаяОсновнаяЗапись, ТаблицаПлохихЗаписей);
			КонецЕсли;	 
			
			// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ
			
			Если УказаныТерриториальныеУсловия Тогда
				ПредставлениеЗначения = ""+ СОКРЛП(Запись.ТерриториальныеУсловияКод);
				Если СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанные в дополнительной записи территориальные условия "+ПредставлениеЗначения+" не должны повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокТерриториальныеУсловияЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если УказаныОсобыеУсловияТруда Тогда
				ПредставлениеЗначения = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
				Если СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код условий труда "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокУсловияТрудаЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если УказаноОснованиеВыслугиЛет Тогда
				ПредставлениеЗначения = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
				Если СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код выслуги лет "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
				Иначе	
					СписокВыслугаЛетЗаписи.Добавить(ПредставлениеЗначения);
				КонецЕсли;	 
			КонецЕсли;	
			
			//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"
			
			КПС = СокрЛП(Запись.КодПозицииСпискаКод);
			
			//Определим, к какому списку принадлежит код позиции
			НазваниеСписка ="";
			Если УказанКодПозицииСписка Тогда 
				
				Если НЕ УказаныОсобыеУсловияТруда Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Код позиции списка не может указываться без указания кода особых условий труда!", ТекущаяОсновнаяЗапись);
				КонецЕсли;	 
				
				ДлинаКПС = СтрДлина(КПС);
				
				Если (ДлинаКПС=8)или(ДлинаКПС=14) Тогда
					
					Первые2СимволаКПС = Лев(КПС,2);
					Если (Первые2СимволаКПС = "10")или(Первые2СимволаКПС = "11")или(Первые2СимволаКПС = "12") Тогда
						НазваниеСписка = "Список№1";
					ИначеЕсли (Первые2СимволаКПС >= "20")и(Первые2СимволаКПС <= "23") Тогда
						НазваниеСписка = "Список№2";
					Иначе	
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный код позиции списка вредных профессий!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					
				ИначеЕсли (ДлинаКПС=5) Тогда
					НазваниеСписка = "ПрочиеСписки";
				Иначе	
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Длина кода позиции списка должна быть равна либо 5, либо 8, либо 14 символам!", ТекущаяОсновнаяЗапись);
				КонецЕсли;	 
			КонецЕсли;//УказанКодПозицииСписка	 
			
			Если УказаныОсобыеУсловияТруда Тогда
				
				//Проверки на возможные коды списков для конкретных условий труда
				
				КодОсобыхУсловийТруда = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
				Первые8СимволовКПС = ВРЕГ(Лев(КПС,8));
				НачалоСообщения = "Для особых условий труда с кодом " + КодОсобыхУсловийТруда;
				
				Если Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_1 Тогда
					Если (НазваниеСписка <> "Список№1") Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " должен быть указан код позиции Списка №1!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
					
				ИначеЕсли Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_2 Тогда
					
					Если (НЕ УказанКодПозицииСписка) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен быть указан код позиции Списка №1 или Списка №2!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
					
					Если (НазваниеСписка = "Список№1") Тогда
						Если (Первые8СимволовКПС <> "1010300Б")и(Первые8СимволовКПС <> "1010100Г")и(Первые8СимволовКПС <> "1010100Д")  Тогда
							СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
						КонецЕсли;	
					ИначеЕсли (НазваниеСписка <> "Список№2") Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " указан неверный код позиции списка!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
					
				Иначе
					//Для остальных кодов условий труда КПС указываться не должен
					Если УказанКодПозицииСписка Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " код позиции списка указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
				КонецЕсли;	 
				
			КонецЕсли;//УказаныОсобыеУсловияТруда	 
			
			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"
			
			УказанПараметр1 = НЕ (Запись.ПервыйПараметрВыслугиЛет = 0);
			УказанПараметр2 = НЕ (Запись.ВторойПараметрВыслугиЛет = 0);
			УказанПараметр3 = НЕ (Запись.ТретийПараметрВыслугиЛет = 0);
			ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);
			
			Если УказаноОснованиеВыслугиЛет Тогда
				
				КодОснования = СокрЛП(Запись.ОснованиеВыслугиЛетКод);
				НачалоСообщения = "Для основания выслуги лет " + КодОснования;
				
				УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);
				
				//Медицинские работники
				Если (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМ) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГД)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМХР)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГДХР) Тогда
					
					Если НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1)) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
					ИначеЕсли НЕ УказанТолькоТретийПараметр Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " должен указываться только третий параметр!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					
					//Педагогические работники	
				ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПД Тогда
					
					Если УказанПараметр2 Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " второй параметр указываться не должен!", ТекущаяОсновнаяЗапись);
					ИначеЕсли НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1)) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					
				ИначеЕсли Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ПДРК Тогда
					
					Если (УказанПараметр2) или (УказанПараметр3) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " может быть указан только первый параметр!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					
					//Летчики
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.САМОЛЕТ) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.СПЕЦАВ)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСИСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЛЕТИСП) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИНСПЕКТ)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ОПЫТИСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИСПКЛС1)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ИТСМАВ)Тогда
					
					Если  УказанПараметр3 Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
					
					Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 1 и 2 должны содержать отработанное время (часы и минуты)!", ТекущаяОсновнаяЗапись);
					КонецЕслИ;	
					
					//Парашютисты	
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.РЕАКТИВН)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМСП)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.НОРМАПР) Тогда	
					
					Если (УказанПараметр2) ИЛИ (УказанПараметр3) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры 2 и 3 указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					
					//Управление воздушным движением и  инженерно-технический состав 	
				ИначеЕсли (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_14)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15) Тогда
					
					Если  УказанПараметр3 Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметр 3 указываться не должен!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
					
					//Прочие коды выслуги лет	
				Иначе
					Если ПараметрыУказаны Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " параметры выслуги лет 1,2,3 указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	 
				КонецЕсли;	 
			Иначе
				Если ПараметрыУказаны Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись," Параметры выслуги лет 1,2,3 без указания основания выслуги лет указываться не должны!", ТекущаяОсновнаяЗапись);
				КонецЕсли;	 
			КонецЕсли;	 
			
			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр)
			
			Если УказанТретийПараметрИсчисляемогоСтажа Тогда
				Если ДопустимыеЗначенияТретьегоПараметра.Получить(Запись.ТретийПараметрИсчисляемогоСтажа) = Неопределено Тогда
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Третий параметр исчисляемого стажа должен содержать одно из значений: " + СтрокаДопустимыхЗначений + "!", ТекущаяОсновнаяЗапись);
				ИначеЕсли (Запись.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ") Тогда
					Если (УказаноОснованиеИсчисляемогоСтажа) ИЛИ (ЗаданаГруппаФОВ) ИЛИ (УказаноОснованиеВыслугиЛет)  Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании третьего параметра исчисляемого стажа следующие группы реквизитов должны быть пустыми:		
						| Исчисляемый стаж: основание, Фактически отработанное время, Выслуга лет!", ТекущаяОсновнаяЗапись);
					КонецЕсли;	
					Если ((ЗаданаГруппаУсловияТруда)ИЛИ(УказаныТерриториальныеУсловия)) Тогда
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в третьем параметре исчисляемого стажа значения ДЕТИ группы реквизитов 
						|""Условия труда, Территориальные условия"" указываться не должны!", ТекущаяОсновнаяЗапись);
					КонецЕсли; 
				КонецЕсли;	 
			КонецЕсли;	 
			
			//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 1,2 ИСЧИСЛЯЕМОГО СТАЖА)   
			
			Если ЗаданаГруппаФОВ Тогда
				Если Не УказаныОсобыеУсловияТруда И Не УказаноОснованиеИсчисляемогоСтажа И Не УказаныТерриториальныеУсловия  Тогда
					СтрОшибка = " Параметры фактически отработанного времени должны указываться только при заполнении других групп реквизитов"

					+(Символы.ПС + " (Территориальные условия, Условия труда, Исчисляемый стаж: основание)!");
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
				ИначеЕсли Не УказаныОсобыеУсловияТруда И Не УказаноОснованиеИсчисляемогоСтажа И УказанаСтавкаТерриториальныхУсловий Тогда
					СтрОшибка = " Параметры фактически отработанного времени для территориальных условий не должны указываться при заданной ставке!";
					СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
				КонецЕсли;	
				
				Если Запись.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
					
					Если Запись.ПервыйПараметрИсчисляемогоСтажа > 11 Тогда
						СтрОшибка = "Первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11!";
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	 	
					Если Запись.ВторойПараметрИсчисляемогоСтажа > 30 Тогда
						СтрОшибка = "Второй параметр исчисляемого стажа (Дни) не должен быть больше 30!";
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	 	
					
					Лет = 0;
					Месяцев = 0;
					Дней = 0;
					ПолучитьСтажЗаПериод(ТекущаяОсновнаяЗапись.ДатаОкончанияПериода,	ТекущаяОсновнаяЗапись.ДатаНачалаПериода, Лет,	Месяцев, Дней);			
					ПолучитьПриведенныйСтаж(Лет,Месяцев,Дней);
					КалендарноеВремя = Лет*12*30+Месяцев*30+Дней;
					ФОВДляСравнения = Запись.ПервыйПараметрИсчисляемогоСтажа *30 + Запись.ВторойПараметрИсчисляемогоСтажа; 
					
					Если (ФОВДляСравнения > КалендарноеВремя) Тогда
						СтрОшибка = "Указанное фактически отработанное время превышает календарное время!";
						СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
					КонецЕсли;	
				КонецЕсли;	 
				
			КонецЕсли;	 
			
			//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  
			
			//Запомним для следующей итерации
			ПредыдущийНомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
			ПредыдущийНомерДополнительнойЗаписи = Запись.НомерДополнительнойЗаписи;
			
		КонецЦикла;//Цикл по записям стажа текущего физлица за год
		
	КонецЦикла;
	

	СЗВ4_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(ИнициаторВызова, ТаблицаФизлиц, ТаблицаПлохихЗаписей);
	
	Если ТаблицаПлохихЗаписей.Количество() > 0 Тогда
		// Вывод ошибок
		ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке набора записей о стаже");
		Возврат Ложь
	Иначе	
		Возврат Истина;
	КонецЕсли;
	
КонецФункции


Процедура ФормированиеСведенийОСтажеC2010(ДатаНачалаПериодаЗаполнения, Организация, СписокФизЛиц = Неопределено, ДатаОкончанияПериодаЗаполнения = Неопределено) Экспорт
	
	Если ДатаОкончанияПериодаЗаполнения = Неопределено Тогда
		ДатаОкончанияПериодаЗаполнения = ОкончаниеОтчетногоПериодаПерсучета(ДатаНачалаПериодаЗаполнения);
	КонецЕсли;
	
	
	
	ТаблицаСтажа = СЗВ6_ПолучитьДанныеДляЗаполненияСтажа(Организация, ДатаНачалаПериодаЗаполнения, ДатаОкончанияПериодаЗаполнения, СписокФизЛиц);

	ТаблицаИзмерений = ТаблицаСтажа.Скопировать(,"ФизЛицо,КатегорияЗастрахованныхЛиц");
	ТаблицаИзмерений.Свернуть("ФизЛицо,КатегорияЗастрахованныхЛиц");
	ТаблицаФизлиц = ТаблицаИзмерений.Скопировать(,"ФизЛицо");
	ТаблицаФизлиц.Свернуть("ФизЛицо");
	
	НаборЗаписейОСтаже = РегистрыСведений.ЗаписиОСтажеДляСЗВ4.СоздатьНаборЗаписей();
	НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Значение = Организация;
	НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Использование = Истина;
	НаборЗаписейОСтаже.Отбор.ОтчетныйПериод.Значение = ДатаНачалаПериодаЗаполнения;
	НаборЗаписейОСтаже.Отбор.ОтчетныйПериод.Использование = Истина;
	НаборЗаписейОСтаже.Отбор.ФизЛицо.Использование = Истина;
	
	СтруктураПоиска = Новый Структура("ФизЛицо, КатегорияЗастрахованныхЛиц");
	
	/////////////////////////////////////////////////////////////////////////////////////
	// ОЧИСТКА СТАРЫХ ЗАПИСЕЙ О СТАЖЕ, ЗАПИСЕЙ О ВЗНОСАХ И ДОБАВЛЕНИЕ НОВЫХ ЗАПИСЕЙ ДОЛЖНО ПРОИСХОДИТЬ В РАМКАХ ОДНОЙ ТРАНЗАКЦИИ
	
	НачатьТранзакцию();
	
	// очистим то, что было
	Для каждого СтрокаФизЛица Из ТаблицаФизлиц Цикл
	
		// Установим отбор записей в наборе по выбранному работнику
		НаборЗаписейОСтаже.Отбор.ФизЛицо.Значение = СтрокаФизЛица.ФизЛицо;
		НаборЗаписейОСтаже.Записать(); 
		
	КонецЦикла;
	
	НаборЗаписейОСтаже.Отбор.КатегорияЗастрахованныхЛиц.Использование = Истина;
	
	// Загрузим полученные данные в наборы записей 
	Для каждого СтрокаИзмерений Из ТаблицаИзмерений Цикл
	
		НаборЗаписейОСтаже.Отбор.ФизЛицо.Значение = СтрокаИзмерений.ФизЛицо;
		НаборЗаписейОСтаже.Отбор.КатегорияЗастрахованныхЛиц.Значение = СтрокаИзмерений.КатегорияЗастрахованныхЛиц;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаИзмерений);
		
		МассивСтрок = ТаблицаСтажа.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписейОСтаже.Добавить(),СтрокаТаблицы)
		КонецЦикла; 
		
		// Пронумеруем основные записи о стаже
		НомерЗаписи = 0;
		Для Каждого Запись из НаборЗаписейОСтаже Цикл
			НомерЗаписи = НомерЗаписи + 1;
			Запись.НомерОсновнойЗаписи = НомерЗаписи;
		КонецЦикла; 
		
		// Запишем записи стажа в режиме добавления (при записи набора происходит проверка записей стажа)
		Попытка
			НаборЗаписейОСтаже.Записать();
		Исключение
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
		
		НаборЗаписейОСтаже.Очистить();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ФормированиеСведенийОСтажеC2010()

Функция ВписатьКатегорииВДанныеСтажа(ОбособленноеПодразделение, ДатаНачалаПериодаЗаполнения, ДатаОкончанияПериодаЗаполнения, ТаблицаСтажа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОтчетныйПериод",				ДатаНачалаПериодаЗаполнения);
	Запрос.УстановитьПараметр("Организация",				ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение));
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",		КонецМесяца(ДатаОкончанияПериодаЗаполнения));

	// конец месяца налогового периода
	КонецМесяца = КонецМесяца(ДатаНачалаПериодаЗаполнения);
	// первый месяц
	ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериоды";
	// прибавим остальные месяцы
	Для Сч = Месяц(ДатаНачалаПериодаЗаполнения) По Месяц(ДатаОкончанияПериодаЗаполнения) Цикл
		КонецМесяца = КонецМесяца(КонецМесяца+1);
    	ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(КонецМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;
	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФизлиц.Физлицо,
	|	ТаблицаФизлиц.ОтчетныйПериод,
	|	ТаблицаФизлиц.ОбособленноеПодразделение,
	|	ТаблицаФизлиц.ДатаНачалаПериода,
	|	ТаблицаФизлиц.ДатаОкончанияПериода,
	|	ТаблицаФизлиц.ТерриториальныеУсловия,
	|	ТаблицаФизлиц.ОсобыеУсловияТруда,
	|	ТаблицаФизлиц.КодПозицииСписка,
	|	ТаблицаФизлиц.ТретийПараметрИсчисляемогоСтажа,
	|	ТаблицаФизлиц.ТретийПараметрВыслугиЛет,
	|	ТаблицаФизлиц.ПараметрТерриториальныхУсловий,
	|	ТаблицаФизлиц.ОснованиеВыслугиЛет
	|ПОМЕСТИТЬ ВТТаблицаСтажа
	|ИЗ
	|	&ТаблицаФизлиц КАК ТаблицаФизлиц";
	Запрос.УстановитьПараметр("ТаблицаФизлиц", ТаблицаСтажа);
	Запрос.Выполнить();
	
	ПроцедурыПерсонифицированногоУчета.ПоместитьВМенеджерСоответствиеТарифаКатегории(Запрос.МенеджерВременныхТаблиц);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСтажа.Физлицо КАК Физлицо,
	|	ТаблицаСтажа.ОтчетныйПериод,
	|	ТаблицаСтажа.ОбособленноеПодразделение,
	|	ВЫБОР
	|		КОГДА ТаблицаСтажа.ДатаНачалаПериода < НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|			ТОГДА НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|		ИНАЧЕ ТаблицаСтажа.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ТаблицаСтажа.ДатаОкончанияПериода < Периоды.Период
	|			ТОГДА ТаблицаСтажа.ДатаОкончанияПериода
	|		ИНАЧЕ Периоды.Период
	|	КОНЕЦ КАК ДатаОкончанияПериода,
	|	ТаблицаСтажа.ТерриториальныеУсловия,
	|	ТаблицаСтажа.ОсобыеУсловияТруда,
	|	ТаблицаСтажа.КодПозицииСписка,
	|	ТаблицаСтажа.ТретийПараметрИсчисляемогоСтажа,
	|	ТаблицаСтажа.ТретийПараметрВыслугиЛет,
	|	ТаблицаСтажа.ПараметрТерриториальныхУсловий,
	|	ТаблицаСтажа.ОснованиеВыслугиЛет,
	|	НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК МесяцОтчетногоПериода,
	|	Периоды.Период
	|ПОМЕСТИТЬ ВТФизЛица
	|ИЗ
	|	ВТТаблицаСтажа КАК ТаблицаСтажа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериоды КАК Периоды
	|		ПО (Периоды.Период МЕЖДУ НАЧАЛОПЕРИОДА(ТаблицаСтажа.ДатаНачалаПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(ТаблицаСтажа.ДатаОкончанияПериода, МЕСЯЦ))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	МесяцОтчетногоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтраховыеВзносыИсчисленныеОбороты.ФизЛицо КАК ФизЛицо,
	|	СтраховыеВзносыИсчисленныеОбороты.Период КАК МесяцОтчетногоПериода,
	|	КОНЕЦПЕРИОДА(СтраховыеВзносыИсчисленныеОбороты.Период, МЕСЯЦ) КАК Период,
	|	СтраховыеВзносыИсчисленныеОбороты.ПФРСтраховаяОборот КАК ПФРСтраховаяОборот,
	|	СтраховыеВзносыИсчисленныеОбороты.ПФРНакопительнаяОборот КАК ПФРНакопительнаяОборот,
	|	СтраховыеВзносыИсчисленныеОбороты.ПФРСтраховаяЕНВДОборот,
	|	СтраховыеВзносыИсчисленныеОбороты.ПФРНакопительнаяЕНВДОборот
	|ПОМЕСТИТЬ ВТИсчисленоПоЗЛ
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыИсчисленные.Обороты(
	|			&ОтчетныйПериод,
	|			&КонецОтчетногоПериода,
	|			Месяц,
	|			ОбособленноеПодразделение = &Организация
	|				И ФизЛицо В
	|					(ВЫБРАТЬ
	|						ФизЛица.Физлицо
	|					ИЗ
	|						ВТФизЛица КАК ФизЛица)) КАК СтраховыеВзносыИсчисленныеОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СрезПоследнихДат.ПериодРегистрации КАК МесяцОтчетногоПериода,
	|	СрезПоследнихДат.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВТИнвалиды
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|		СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо,
	|		МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК Период
	|	ИЗ
	|		ВТФизЛица КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|			ПО Периоды.Период >= СведенияОбИнвалидностиФизлиц.Период
	|	ГДЕ
	|		СведенияОбИнвалидностиФизлиц.Физлицо В
	|				(ВЫБРАТЬ
	|					Физлица.Физлицо
	|				ИЗ
	|					ВТФизЛица КАК Физлица)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СведенияОбИнвалидностиФизлиц.Физлицо,
	|		Периоды.Период) КАК СрезПоследнихДат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	|		ПО СрезПоследнихДат.Период = СведенияОбИнвалидностиФизлиц.Период
	|			И СрезПоследнихДат.Физлицо = СведенияОбИнвалидностиФизлиц.Физлицо
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.Инвалидность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	МесяцОтчетногоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК МесяцОтчетногоПериода,
	|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ВидТарифаСтраховыхВзносов, ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим)) КАК ВидТарифаСтраховыхВзносов
	|ПОМЕСТИТЬ ВТВидыТарифныхСтавокОрганизаций
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		УчетнаяПолитикаНалоговыйУчет.Организация КАК Организация,
	|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|			ПО Периоды.Период >= УчетнаяПолитикаНалоговыйУчет.Период
	|				И (УчетнаяПолитикаНалоговыйУчет.Организация = &ГоловнаяОрганизация)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период,
	|		УчетнаяПолитикаНалоговыйУчет.Организация) КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|		ПО Периоды.ПериодРегистра = УчетнаяПолитикаНалоговыйУчет.Период
	|			И Периоды.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцОтчетногоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Исчислено.ФизЛицо КАК ФизЛицо,
	|	Исчислено.КатегорияЗастрахованныхЛиц,
	|	Исчислено.МесяцОтчетногоПериода
	|ПОМЕСТИТЬ ВТИсчисленоПоКатегориямЗЛ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсчисленоПоЗЛ.ФизЛицо КАК ФизЛицо,
	|		ИсчисленоПоЗЛ.ПФРНакопительнаяОборот КАК ПФРНакопительнаяОборот,
	|		ИсчисленоПоЗЛ.ПФРСтраховаяОборот КАК ПФРСтраховаяОборот,
	|		СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|		ИсчисленоПоЗЛ.МесяцОтчетногоПериода КАК МесяцОтчетногоПериода
	|	ИЗ
	|		ВТИсчисленоПоЗЛ КАК ИсчисленоПоЗЛ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыТарифныхСтавокОрганизаций КАК ВидыТарифныхСтавокОрганизаций
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаКатегории КАК СоответствиеТарифаКатегории
	|				ПО ВидыТарифныхСтавокОрганизаций.ВидТарифаСтраховыхВзносов = СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов
	|					И (ГОД(ВидыТарифныхСтавокОрганизаций.МесяцОтчетногоПериода) МЕЖДУ СоответствиеТарифаКатегории.ГодС И СоответствиеТарифаКатегории.ГодПо)
	|			ПО ИсчисленоПоЗЛ.МесяцОтчетногоПериода = ВидыТарифныхСтавокОрганизаций.МесяцОтчетногоПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсчисленоПоЗЛ.ФизЛицо,
	|		ИсчисленоПоЗЛ.ПФРНакопительнаяЕНВДОборот,
	|		ИсчисленоПоЗЛ.ПФРСтраховаяЕНВДОборот,
	|		СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц,
	|		ИсчисленоПоЗЛ.МесяцОтчетногоПериода
	|	ИЗ
	|		ВТИсчисленоПоЗЛ КАК ИсчисленоПоЗЛ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаКатегории КАК СоответствиеТарифаКатегории
	|			ПО (ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕНВД) = СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов)
	|				И (ГОД(ИсчисленоПоЗЛ.МесяцОтчетногоПериода) МЕЖДУ СоответствиеТарифаКатегории.ГодС И СоответствиеТарифаКатегории.ГодПо)) КАК Исчислено
	|
	|СГРУППИРОВАТЬ ПО
	|	Исчислено.ФизЛицо,
	|	Исчислено.КатегорияЗастрахованныхЛиц,
	|	Исчислено.МесяцОтчетногоПериода
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Исчислено.ПФРНакопительнаяОборот) <> 0
	|		ИЛИ СУММА(Исчислено.ПФРСтраховаяОборот) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаФизлиц.Физлицо КАК ФизЛицо,
	|	ТаблицаФизлиц.ОтчетныйПериод,
	|	ТаблицаФизлиц.ОбособленноеПодразделение,
	|	ТаблицаФизлиц.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ТаблицаФизлиц.ДатаОкончанияПериода,
	|	ТаблицаФизлиц.ТерриториальныеУсловия,
	|	ТаблицаФизлиц.ОсобыеУсловияТруда,
	|	ТаблицаФизлиц.КодПозицииСписка,
	|	ТаблицаФизлиц.ТретийПараметрИсчисляемогоСтажа,
	|	ТаблицаФизлиц.ПараметрТерриториальныхУсловий,
	|	ТаблицаФизлиц.ОснованиеВыслугиЛет,
	|	ТаблицаФизлиц.ТретийПараметрВыслугиЛет,
	|	ВЫБОР
	|		КОГДА Инвалиды.Физлицо ЕСТЬ НЕ NULL 
	|			ТОГДА ЕСТЬNULL(СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц, ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(ИсчисленоПоЗЛ.КатегорияЗастрахованныхЛиц, ЕСТЬNULL(СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц, ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПустаяСсылка)))
	|	КОНЕЦ КАК КатегорияЗастрахованныхЛиц
	|ИЗ
	|	ВТФизЛица КАК ТаблицаФизлиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнвалиды КАК Инвалиды
	|		ПО ТаблицаФизлиц.Физлицо = Инвалиды.Физлицо
	|			И ТаблицаФизлиц.МесяцОтчетногоПериода = Инвалиды.МесяцОтчетногоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсчисленоПоКатегориямЗЛ КАК ИсчисленоПоЗЛ
	|		ПО ТаблицаФизлиц.Физлицо = ИсчисленоПоЗЛ.ФизЛицо
	|			И ТаблицаФизлиц.МесяцОтчетногоПериода = ИсчисленоПоЗЛ.МесяцОтчетногоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыТарифныхСтавокОрганизаций КАК ВидыТарифныхСтавокОрганизаций
	|		ПО ТаблицаФизлиц.МесяцОтчетногоПериода = ВидыТарифныхСтавокОрганизаций.МесяцОтчетногоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаКатегории КАК СоответствиеТарифаКатегории
	|		ПО (ВЫБОР
	|				КОГДА Инвалиды.Физлицо ЕСТЬ НЕ NULL 
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов)
	|				ИНАЧЕ ВидыТарифныхСтавокОрганизаций.ВидТарифаСтраховыхВзносов
	|			КОНЕЦ = СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов)
	|			И (ГОД(ВидыТарифныхСтавокОрганизаций.МесяцОтчетногоПериода) МЕЖДУ СоответствиеТарифаКатегории.ГодС И СоответствиеТарифаКатегории.ГодПо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	КатегорияЗастрахованныхЛиц,
	|	ДатаНачалаПериода";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрСведений.УчетнаяПолитикаНалоговыйУчет", ЗаполнениеРегламентированнойОтчетностиПереопределяемый.ИмяУчетнойПолитики());

	РезультатЗапроса = Запрос.Выполнить();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	
	Возврат РезультатЗапроса.Выгрузить();


	
КонецФункции
